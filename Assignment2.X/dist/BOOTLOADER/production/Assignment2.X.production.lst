

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Sep 16 23:24:44 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	text78,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	text85,global,reloc=2,class=CODE,delta=1
   110                           	psect	text86,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text95,global,reloc=2,class=CODE,delta=1
   120                           	psect	text96,global,reloc=2,class=CODE,delta=1
   121                           	psect	text97,global,reloc=2,class=CODE,delta=1
   122                           	psect	text98,global,reloc=2,class=CODE,delta=1
   123                           	psect	text99,global,reloc=2,class=CODE,delta=1
   124                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text101,global,reloc=2,class=CODE,delta=1
   126                           	psect	text102,global,reloc=2,class=CODE,delta=1
   127                           	psect	text103,global,reloc=2,class=CODE,delta=1
   128                           	psect	text104,global,reloc=2,class=CODE,delta=1
   129                           	psect	text105,global,reloc=2,class=CODE,delta=1
   130                           	psect	text106,global,reloc=2,class=CODE,delta=1
   131                           	psect	text107,global,reloc=2,class=CODE,delta=1
   132                           	psect	text108,global,reloc=2,class=CODE,delta=1
   133                           	psect	text109,global,reloc=2,class=CODE,delta=1
   134                           	psect	text110,global,reloc=2,class=CODE,delta=1
   135                           	psect	text111,global,reloc=2,class=CODE,delta=1
   136                           	psect	text112,global,reloc=2,class=CODE,delta=1
   137                           	psect	text113,global,reloc=2,class=CODE,delta=1
   138                           	psect	text114,global,reloc=2,class=CODE,delta=1
   139                           	psect	text115,global,reloc=2,class=CODE,delta=1
   140                           	psect	text116,global,reloc=2,class=CODE,delta=1,inline
   141                           	psect	text117,global,reloc=2,class=CODE,delta=1
   142                           	psect	text118,global,reloc=2,class=CODE,delta=1
   143                           	psect	text119,global,reloc=2,class=CODE,delta=1
   144                           	psect	text120,global,reloc=2,class=CODE,delta=1
   145                           	psect	text121,global,reloc=2,class=CODE,delta=1
   146                           	psect	text122,global,reloc=2,class=CODE,delta=1
   147                           	psect	text123,global,reloc=2,class=CODE,delta=1
   148                           	psect	text124,global,reloc=2,class=CODE,delta=1
   149                           	psect	text125,global,reloc=2,class=CODE,delta=1
   150                           	psect	text126,global,reloc=2,class=CODE,delta=1
   151                           	psect	text127,global,reloc=2,class=CODE,delta=1
   152                           	psect	text128,global,reloc=2,class=CODE,delta=1
   153                           	psect	text129,global,reloc=2,class=CODE,delta=1
   154                           	psect	text130,global,reloc=2,class=CODE,delta=1
   155                           	psect	text131,global,reloc=2,class=CODE,delta=1
   156                           	psect	text132,global,reloc=2,class=CODE,delta=1
   157                           	psect	text133,global,reloc=2,class=CODE,delta=1
   158                           	psect	text134,global,reloc=2,class=CODE,delta=1
   159                           	psect	text135,global,reloc=2,class=CODE,delta=1
   160                           	psect	text136,global,reloc=2,class=CODE,delta=1
   161                           	psect	text137,global,reloc=2,class=CODE,delta=1
   162                           	psect	text138,global,reloc=2,class=CODE,delta=1
   163                           	psect	text139,global,reloc=2,class=CODE,delta=1
   164                           	psect	text140,global,reloc=2,class=CODE,delta=1
   165                           	psect	text141,global,reloc=2,class=CODE,delta=1
   166                           	psect	text142,global,reloc=2,class=CODE,delta=1
   167                           	psect	text143,global,reloc=2,class=CODE,delta=1
   168                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   169                           	psect	text145,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text146,global,reloc=2,class=CODE,delta=1
   171                           	psect	text147,global,reloc=2,class=CODE,delta=1
   172                           	psect	text148,global,reloc=2,class=CODE,delta=1
   173                           	psect	text149,global,reloc=2,class=CODE,delta=1
   174                           	psect	text150,global,reloc=2,class=CODE,delta=1
   175                           	psect	text151,global,reloc=2,class=CODE,delta=1
   176                           	psect	text152,global,reloc=2,class=CODE,delta=1
   177                           	psect	text153,global,reloc=2,class=CODE,delta=1
   178                           	psect	text154,global,reloc=2,class=CODE,delta=1,inline
   179                           	psect	text155,global,reloc=2,class=CODE,delta=1
   180                           	psect	text156,global,reloc=2,class=CODE,delta=1
   181                           	psect	text157,global,reloc=2,class=CODE,delta=1
   182                           	psect	text158,global,reloc=2,class=CODE,delta=1
   183                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   184                           	psect	text160,global,reloc=2,class=CODE,delta=1
   185                           	psect	text161,global,reloc=2,class=CODE,delta=1
   186                           	psect	text162,global,reloc=2,class=CODE,delta=1
   187                           	psect	text163,global,reloc=2,class=CODE,delta=1
   188                           	psect	text164,global,reloc=2,class=CODE,delta=1
   189                           	psect	text165,global,reloc=2,class=CODE,delta=1
   190                           	psect	text166,global,reloc=2,class=CODE,delta=1
   191                           	psect	text167,global,reloc=2,class=CODE,delta=1,inline
   192                           	psect	text168,global,reloc=2,class=CODE,delta=1
   193                           	psect	text169,global,reloc=2,class=CODE,delta=1
   194                           	psect	text170,global,reloc=2,class=CODE,delta=1
   195                           	psect	text171,global,reloc=2,class=CODE,delta=1
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   198                           	psect	text173,global,reloc=2,class=CODE,delta=1
   199                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   200                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   201  0000                     
   202                           ; Version 1.43
   203                           ; Generated 25/07/2017 GMT
   204                           ; 
   205                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   206                           ; All rights reserved.
   207                           ; 
   208                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   209                           ; 
   210                           ; Redistribution and use in source and binary forms, with or without modification, are
   211                           ; permitted provided that the following conditions are met:
   212                           ; 
   213                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   214                           ;        conditions and the following disclaimer.
   215                           ; 
   216                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   217                           ;        of conditions and the following disclaimer in the documentation and/or other
   218                           ;        materials provided with the distribution.
   219                           ; 
   220                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   221                           ;        software without specific prior written permission.
   222                           ; 
   223                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   224                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   225                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   226                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   227                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   228                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   229                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   230                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   231                           ; 
   232                           ; 
   233                           ; Code-generator required, PIC18F67J50 Definitions
   234                           ; 
   235                           ; SFR Addresses
   236  0000                     
   237                           	psect	idataCOMRAM
   238  016D30                     __pidataCOMRAM:
   239                           	opt stack 0
   240                           
   241                           ;initializer for _gCursor
   242  016D30  0006               	dw	6
   243  016D32  0006               	dw	6
   244                           
   245                           ;initializer for _Bus_State
   246  016D34  01                 	db	1
   247                           
   248                           ;initializer for _A
   249  016D35  41                 	db	65
   250                           
   251                           ;initializer for _a
   252  016D36  61                 	db	97
   253                           
   254                           ;initializer for _zero
   255  016D37  30                 	db	48
   256                           
   257                           ;initializer for _l
   258  016D38  80                 	db	128
   259                           
   260                           ;initializer for _w
   261  016D39  80                 	db	128
   262                           
   263                           	psect	idataBANK0
   264  016D66                     __pidataBANK0:
   265                           	opt stack 0
   266                           
   267                           ;initializer for _TimerX
   268  016D66  0008               	dw	8
   269                           
   270                           ;initializer for _MinDist
   271  016D68  03E8               	dw	1000
   272                           
   273                           ;initializer for _gForecolour
   274  016D6A  FFFF               	dw	65535
   275                           
   276                           ;initializer for _change
   277  016D6C  01                 	db	1
   278                           
   279                           	psect	idataBANK3
   280  016CAA                     __pidataBANK3:
   281                           	opt stack 0
   282                           
   283                           ;initializer for Console_Render@F6956
   284  016CAA  0006               	dw	6
   285  016CAC  0006               	dw	6
   286                           
   287                           ;initializer for _gLineSize
   288  016CAE  0080               	dw	128
   289  016CB0  0007               	dw	7
   290                           
   291                           ;initializer for _gCharSize
   292  016CB2  0005               	dw	5
   293  016CB4  0007               	dw	7
   294                           
   295                           ;initializer for _corner
   296  016CB6  0001               	dw	1
   297                           
   298                           	psect	mediumconst
   299  00FC32                     __pmediumconst:
   300                           	opt stack 0
   301  00FC32  00                 	db	0
   302  00FC33                     _InitList:
   303                           	opt stack 0
   304  00FC33  1100               	dw	4352
   305  00FC35  0080               	dw	128
   306  00FC37  012C               	dw	300
   307  00FC39  B100               	dw	45312
   308  00FC3B  0002               	dw	2
   309  00FC3D  0035               	dw	53
   310  00FC3F  0036               	dw	54
   311  00FC41  B200               	dw	45568
   312  00FC43  0002               	dw	2
   313  00FC45  0035               	dw	53
   314  00FC47  0036               	dw	54
   315  00FC49  B300               	dw	45824
   316  00FC4B  0002               	dw	2
   317  00FC4D  0035               	dw	53
   318  00FC4F  0036               	dw	54
   319  00FC51  0002               	dw	2
   320  00FC53  0035               	dw	53
   321  00FC55  0036               	dw	54
   322  00FC57  B400               	dw	46080
   323  00FC59  0000               	dw	0
   324  00FC5B  C000               	dw	49152
   325  00FC5D  00A2               	dw	162
   326  00FC5F  0002               	dw	2
   327  00FC61  0084               	dw	132
   328  00FC63  C100               	dw	49408
   329  00FC65  00C5               	dw	197
   330  00FC67  C200               	dw	49664
   331  00FC69  000D               	dw	13
   332  00FC6B  0000               	dw	0
   333  00FC6D  C300               	dw	49920
   334  00FC6F  008D               	dw	141
   335  00FC71  002A               	dw	42
   336  00FC73  C400               	dw	50176
   337  00FC75  008D               	dw	141
   338  00FC77  00EE               	dw	238
   339  00FC79  C500               	dw	50432
   340  00FC7B  000A               	dw	10
   341  00FC7D  3600               	dw	13824
   342  00FC7F  00C8               	dw	200
   343  00FC81  E000               	dw	57344
   344  00FC83  0012               	dw	18
   345  00FC85  001C               	dw	28
   346  00FC87  0010               	dw	16
   347  00FC89  0018               	dw	24
   348  00FC8B  0033               	dw	51
   349  00FC8D  002C               	dw	44
   350  00FC8F  0025               	dw	37
   351  00FC91  0028               	dw	40
   352  00FC93  0028               	dw	40
   353  00FC95  0027               	dw	39
   354  00FC97  002F               	dw	47
   355  00FC99  003C               	dw	60
   356  00FC9B  0000               	dw	0
   357  00FC9D  0003               	dw	3
   358  00FC9F  0003               	dw	3
   359  00FCA1  0010               	dw	16
   360  00FCA3  0080               	dw	128
   361  00FCA5  0078               	dw	120
   362  00FCA7  E100               	dw	57600
   363  00FCA9  0012               	dw	18
   364  00FCAB  001C               	dw	28
   365  00FCAD  0010               	dw	16
   366  00FCAF  0018               	dw	24
   367  00FCB1  002D               	dw	45
   368  00FCB3  0028               	dw	40
   369  00FCB5  0023               	dw	35
   370  00FCB7  0028               	dw	40
   371  00FCB9  0028               	dw	40
   372  00FCBB  0026               	dw	38
   373  00FCBD  002F               	dw	47
   374  00FCBF  003B               	dw	59
   375  00FCC1  0000               	dw	0
   376  00FCC3  0003               	dw	3
   377  00FCC5  0003               	dw	3
   378  00FCC7  0010               	dw	16
   379  00FCC9  3A00               	dw	14848
   380  00FCCB  0005               	dw	5
   381  00FCCD  2A00               	dw	10752
   382  00FCCF  0000               	dw	0
   383  00FCD1  0002               	dw	2
   384  00FCD3  0000               	dw	0
   385  00FCD5  0081               	dw	129
   386  00FCD7  2B00               	dw	11008
   387  00FCD9  0000               	dw	0
   388  00FCDB  0003               	dw	3
   389  00FCDD  0000               	dw	0
   390  00FCDF  00A2               	dw	162
   391  00FCE1  2900               	dw	10496
   392  00FCE3  2C00               	dw	11264
   393  00FCE5                     __end_of_InitList:
   394                           	opt stack 0
   395  00FCE5                     Timer0_Init@PRESCALE:
   396                           	opt stack 0
   397  00FCE5  0002               	dw	2
   398  00FCE7  0004               	dw	4
   399  00FCE9  0008               	dw	8
   400  00FCEB  0010               	dw	16
   401  00FCED  0020               	dw	32
   402  00FCEF  0040               	dw	64
   403  00FCF1  0080               	dw	128
   404  00FCF3  0100               	dw	256
   405  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   406                           	opt stack 0
   407  00FCF5                     PortProperty_Valid@F6830:
   408                           	opt stack 0
   409  00FCF5  00                 	db	0
   410  00FCF6  01                 	db	1
   411  00FCF7  02                 	db	2
   412  00FCF8  00                 	db	0
   413  00FCF9  01                 	db	1
   414  00FCFA  00                 	db	0
   415  00FCFB  01                 	db	1
   416  00FCFC  00                 	db	0
   417  00FCFD  02                 	db	2
   418  00FCFE  02                 	db	2
   419  00FCFF  00                 	db	0
   420  00FD00  00                 	db	0
   421  00FD01  03                 	db	3
   422  00FD02  03                 	db	3
   423  00FD03  03                 	db	3
   424  00FD04  00                 	db	0
   425  00FD05                     __end_ofPortProperty_Valid@F6830:
   426                           	opt stack 0
   427  00FD05                     _dpowers:
   428                           	opt stack 0
   429  00FD05  0001               	dw	1
   430  00FD07  000A               	dw	10
   431  00FD09  0064               	dw	100
   432  00FD0B  03E8               	dw	1000
   433  00FD0D  2710               	dw	10000
   434  00FD0F                     __end_of_dpowers:
   435                           	opt stack 0
   436  00FD0F                     _MASKS:
   437                           	opt stack 0
   438  00FD0F  00                 	db	0
   439  00FD10  01                 	db	1
   440  00FD11  03                 	db	3
   441  00FD12  07                 	db	7
   442  00FD13  0F                 	db	15
   443  00FD14  1F                 	db	31
   444  00FD15  3F                 	db	63
   445  00FD16  7F                 	db	127
   446  00FD17  FF                 	db	255
   447  00FD18                     __end_of_MASKS:
   448                           	opt stack 0
   449  00FD18                     HMI_SetButton@F7213:
   450                           	opt stack 0
   451  00FD18  00                 	db	0
   452  00FD19  02                 	db	2
   453  00FD1A  01                 	db	1
   454  00FD1B  03                 	db	3
   455  00FD1C                     __end_ofHMI_SetButton@F7213:
   456                           	opt stack 0
   457  00FD1C                     Timer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1C  01                 	db	1
   460  00FD1D  04                 	db	4
   461  00FD1E  10                 	db	16
   462  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   463                           	opt stack 0
   464  00FD1F                     _Font5x7:
   465                           	opt stack 0
   466  00FD1F  00                 	db	0
   467  00FD20  00                 	db	0
   468  00FD21  00                 	db	0
   469  00FD22  00                 	db	0
   470  00FD23  00                 	db	0
   471  00FD24  00                 	db	0
   472  00FD25  00                 	db	0
   473  00FD26  5F                 	db	95
   474  00FD27  00                 	db	0
   475  00FD28  00                 	db	0
   476  00FD29  00                 	db	0
   477  00FD2A  07                 	db	7
   478  00FD2B  00                 	db	0
   479  00FD2C  07                 	db	7
   480  00FD2D  00                 	db	0
   481  00FD2E  14                 	db	20
   482  00FD2F  7F                 	db	127
   483  00FD30  14                 	db	20
   484  00FD31  7F                 	db	127
   485  00FD32  14                 	db	20
   486  00FD33  24                 	db	36
   487  00FD34  2A                 	db	42
   488  00FD35  7F                 	db	127
   489  00FD36  2A                 	db	42
   490  00FD37  12                 	db	18
   491  00FD38  23                 	db	35
   492  00FD39  13                 	db	19
   493  00FD3A  08                 	db	8
   494  00FD3B  64                 	db	100
   495  00FD3C  62                 	db	98
   496  00FD3D  36                 	db	54
   497  00FD3E  49                 	db	73
   498  00FD3F  55                 	db	85
   499  00FD40  22                 	db	34
   500  00FD41  50                 	db	80
   501  00FD42  00                 	db	0
   502  00FD43  05                 	db	5
   503  00FD44  03                 	db	3
   504  00FD45  00                 	db	0
   505  00FD46  00                 	db	0
   506  00FD47  00                 	db	0
   507  00FD48  1C                 	db	28
   508  00FD49  22                 	db	34
   509  00FD4A  41                 	db	65
   510  00FD4B  00                 	db	0
   511  00FD4C  00                 	db	0
   512  00FD4D  41                 	db	65
   513  00FD4E  22                 	db	34
   514  00FD4F  1C                 	db	28
   515  00FD50  00                 	db	0
   516  00FD51  08                 	db	8
   517  00FD52  2A                 	db	42
   518  00FD53  1C                 	db	28
   519  00FD54  2A                 	db	42
   520  00FD55  08                 	db	8
   521  00FD56  08                 	db	8
   522  00FD57  08                 	db	8
   523  00FD58  3E                 	db	62
   524  00FD59  08                 	db	8
   525  00FD5A  08                 	db	8
   526  00FD5B  00                 	db	0
   527  00FD5C  50                 	db	80
   528  00FD5D  30                 	db	48
   529  00FD5E  00                 	db	0
   530  00FD5F  00                 	db	0
   531  00FD60  08                 	db	8
   532  00FD61  08                 	db	8
   533  00FD62  08                 	db	8
   534  00FD63  08                 	db	8
   535  00FD64  08                 	db	8
   536  00FD65  00                 	db	0
   537  00FD66  60                 	db	96
   538  00FD67  60                 	db	96
   539  00FD68  00                 	db	0
   540  00FD69  00                 	db	0
   541  00FD6A  20                 	db	32
   542  00FD6B  10                 	db	16
   543  00FD6C  08                 	db	8
   544  00FD6D  04                 	db	4
   545  00FD6E  02                 	db	2
   546  00FD6F  3E                 	db	62
   547  00FD70  51                 	db	81
   548  00FD71  49                 	db	73
   549  00FD72  45                 	db	69
   550  00FD73  3E                 	db	62
   551  00FD74  00                 	db	0
   552  00FD75  42                 	db	66
   553  00FD76  7F                 	db	127
   554  00FD77  40                 	db	64
   555  00FD78  00                 	db	0
   556  00FD79  42                 	db	66
   557  00FD7A  61                 	db	97
   558  00FD7B  51                 	db	81
   559  00FD7C  49                 	db	73
   560  00FD7D  46                 	db	70
   561  00FD7E  21                 	db	33
   562  00FD7F  41                 	db	65
   563  00FD80  45                 	db	69
   564  00FD81  4B                 	db	75
   565  00FD82  31                 	db	49
   566  00FD83  18                 	db	24
   567  00FD84  14                 	db	20
   568  00FD85  12                 	db	18
   569  00FD86  7F                 	db	127
   570  00FD87  10                 	db	16
   571  00FD88  27                 	db	39
   572  00FD89  45                 	db	69
   573  00FD8A  45                 	db	69
   574  00FD8B  45                 	db	69
   575  00FD8C  39                 	db	57
   576  00FD8D  3C                 	db	60
   577  00FD8E  4A                 	db	74
   578  00FD8F  49                 	db	73
   579  00FD90  49                 	db	73
   580  00FD91  30                 	db	48
   581  00FD92  01                 	db	1
   582  00FD93  71                 	db	113
   583  00FD94  09                 	db	9
   584  00FD95  05                 	db	5
   585  00FD96  03                 	db	3
   586  00FD97  36                 	db	54
   587  00FD98  49                 	db	73
   588  00FD99  49                 	db	73
   589  00FD9A  49                 	db	73
   590  00FD9B  36                 	db	54
   591  00FD9C  06                 	db	6
   592  00FD9D  49                 	db	73
   593  00FD9E  49                 	db	73
   594  00FD9F  29                 	db	41
   595  00FDA0  1E                 	db	30
   596  00FDA1  00                 	db	0
   597  00FDA2  36                 	db	54
   598  00FDA3  36                 	db	54
   599  00FDA4  00                 	db	0
   600  00FDA5  00                 	db	0
   601  00FDA6  00                 	db	0
   602  00FDA7  56                 	db	86
   603  00FDA8  36                 	db	54
   604  00FDA9  00                 	db	0
   605  00FDAA  00                 	db	0
   606  00FDAB  00                 	db	0
   607  00FDAC  08                 	db	8
   608  00FDAD  14                 	db	20
   609  00FDAE  22                 	db	34
   610  00FDAF  41                 	db	65
   611  00FDB0  14                 	db	20
   612  00FDB1  14                 	db	20
   613  00FDB2  14                 	db	20
   614  00FDB3  14                 	db	20
   615  00FDB4  14                 	db	20
   616  00FDB5  41                 	db	65
   617  00FDB6  22                 	db	34
   618  00FDB7  14                 	db	20
   619  00FDB8  08                 	db	8
   620  00FDB9  00                 	db	0
   621  00FDBA  02                 	db	2
   622  00FDBB  01                 	db	1
   623  00FDBC  51                 	db	81
   624  00FDBD  09                 	db	9
   625  00FDBE  06                 	db	6
   626  00FDBF  32                 	db	50
   627  00FDC0  49                 	db	73
   628  00FDC1  79                 	db	121
   629  00FDC2  41                 	db	65
   630  00FDC3  3E                 	db	62
   631  00FDC4  7E                 	db	126
   632  00FDC5  11                 	db	17
   633  00FDC6  11                 	db	17
   634  00FDC7  11                 	db	17
   635  00FDC8  7E                 	db	126
   636  00FDC9  7F                 	db	127
   637  00FDCA  49                 	db	73
   638  00FDCB  49                 	db	73
   639  00FDCC  49                 	db	73
   640  00FDCD  36                 	db	54
   641  00FDCE  3E                 	db	62
   642  00FDCF  41                 	db	65
   643  00FDD0  41                 	db	65
   644  00FDD1  41                 	db	65
   645  00FDD2  22                 	db	34
   646  00FDD3  7F                 	db	127
   647  00FDD4  41                 	db	65
   648  00FDD5  41                 	db	65
   649  00FDD6  22                 	db	34
   650  00FDD7  1C                 	db	28
   651  00FDD8  7F                 	db	127
   652  00FDD9  49                 	db	73
   653  00FDDA  49                 	db	73
   654  00FDDB  49                 	db	73
   655  00FDDC  41                 	db	65
   656  00FDDD  7F                 	db	127
   657  00FDDE  09                 	db	9
   658  00FDDF  09                 	db	9
   659  00FDE0  01                 	db	1
   660  00FDE1  01                 	db	1
   661  00FDE2  3E                 	db	62
   662  00FDE3  41                 	db	65
   663  00FDE4  41                 	db	65
   664  00FDE5  51                 	db	81
   665  00FDE6  32                 	db	50
   666  00FDE7  7F                 	db	127
   667  00FDE8  08                 	db	8
   668  00FDE9  08                 	db	8
   669  00FDEA  08                 	db	8
   670  00FDEB  7F                 	db	127
   671  00FDEC  00                 	db	0
   672  00FDED  41                 	db	65
   673  00FDEE  7F                 	db	127
   674  00FDEF  41                 	db	65
   675  00FDF0  00                 	db	0
   676  00FDF1  20                 	db	32
   677  00FDF2  40                 	db	64
   678  00FDF3  41                 	db	65
   679  00FDF4  3F                 	db	63
   680  00FDF5  01                 	db	1
   681  00FDF6  7F                 	db	127
   682  00FDF7  08                 	db	8
   683  00FDF8  14                 	db	20
   684  00FDF9  22                 	db	34
   685  00FDFA  41                 	db	65
   686  00FDFB  7F                 	db	127
   687  00FDFC  40                 	db	64
   688  00FDFD  40                 	db	64
   689  00FDFE  40                 	db	64
   690  00FDFF  40                 	db	64
   691  00FE00  7F                 	db	127
   692  00FE01  02                 	db	2
   693  00FE02  04                 	db	4
   694  00FE03  02                 	db	2
   695  00FE04  7F                 	db	127
   696  00FE05  7F                 	db	127
   697  00FE06  04                 	db	4
   698  00FE07  08                 	db	8
   699  00FE08  10                 	db	16
   700  00FE09  7F                 	db	127
   701  00FE0A  3E                 	db	62
   702  00FE0B  41                 	db	65
   703  00FE0C  41                 	db	65
   704  00FE0D  41                 	db	65
   705  00FE0E  3E                 	db	62
   706  00FE0F  7F                 	db	127
   707  00FE10  09                 	db	9
   708  00FE11  09                 	db	9
   709  00FE12  09                 	db	9
   710  00FE13  06                 	db	6
   711  00FE14  3E                 	db	62
   712  00FE15  41                 	db	65
   713  00FE16  51                 	db	81
   714  00FE17  21                 	db	33
   715  00FE18  5E                 	db	94
   716  00FE19  7F                 	db	127
   717  00FE1A  09                 	db	9
   718  00FE1B  19                 	db	25
   719  00FE1C  29                 	db	41
   720  00FE1D  46                 	db	70
   721  00FE1E  46                 	db	70
   722  00FE1F  49                 	db	73
   723  00FE20  49                 	db	73
   724  00FE21  49                 	db	73
   725  00FE22  31                 	db	49
   726  00FE23  01                 	db	1
   727  00FE24  01                 	db	1
   728  00FE25  7F                 	db	127
   729  00FE26  01                 	db	1
   730  00FE27  01                 	db	1
   731  00FE28  3F                 	db	63
   732  00FE29  40                 	db	64
   733  00FE2A  40                 	db	64
   734  00FE2B  40                 	db	64
   735  00FE2C  3F                 	db	63
   736  00FE2D  1F                 	db	31
   737  00FE2E  20                 	db	32
   738  00FE2F  40                 	db	64
   739  00FE30  20                 	db	32
   740  00FE31  1F                 	db	31
   741  00FE32  7F                 	db	127
   742  00FE33  20                 	db	32
   743  00FE34  18                 	db	24
   744  00FE35  20                 	db	32
   745  00FE36  7F                 	db	127
   746  00FE37  63                 	db	99
   747  00FE38  14                 	db	20
   748  00FE39  08                 	db	8
   749  00FE3A  14                 	db	20
   750  00FE3B  63                 	db	99
   751  00FE3C  03                 	db	3
   752  00FE3D  04                 	db	4
   753  00FE3E  78                 	db	120
   754  00FE3F  04                 	db	4
   755  00FE40  03                 	db	3
   756  00FE41  61                 	db	97
   757  00FE42  51                 	db	81
   758  00FE43  49                 	db	73
   759  00FE44  45                 	db	69
   760  00FE45  43                 	db	67
   761  00FE46  00                 	db	0
   762  00FE47  00                 	db	0
   763  00FE48  7F                 	db	127
   764  00FE49  41                 	db	65
   765  00FE4A  41                 	db	65
   766  00FE4B  02                 	db	2
   767  00FE4C  04                 	db	4
   768  00FE4D  08                 	db	8
   769  00FE4E  10                 	db	16
   770  00FE4F  20                 	db	32
   771  00FE50  41                 	db	65
   772  00FE51  41                 	db	65
   773  00FE52  7F                 	db	127
   774  00FE53  00                 	db	0
   775  00FE54  00                 	db	0
   776  00FE55  04                 	db	4
   777  00FE56  02                 	db	2
   778  00FE57  01                 	db	1
   779  00FE58  02                 	db	2
   780  00FE59  04                 	db	4
   781  00FE5A  40                 	db	64
   782  00FE5B  40                 	db	64
   783  00FE5C  40                 	db	64
   784  00FE5D  40                 	db	64
   785  00FE5E  40                 	db	64
   786  00FE5F  00                 	db	0
   787  00FE60  01                 	db	1
   788  00FE61  02                 	db	2
   789  00FE62  04                 	db	4
   790  00FE63  00                 	db	0
   791  00FE64  20                 	db	32
   792  00FE65  54                 	db	84
   793  00FE66  54                 	db	84
   794  00FE67  54                 	db	84
   795  00FE68  78                 	db	120
   796  00FE69  7F                 	db	127
   797  00FE6A  48                 	db	72
   798  00FE6B  44                 	db	68
   799  00FE6C  44                 	db	68
   800  00FE6D  38                 	db	56
   801  00FE6E  38                 	db	56
   802  00FE6F  44                 	db	68
   803  00FE70  44                 	db	68
   804  00FE71  44                 	db	68
   805  00FE72  20                 	db	32
   806  00FE73  38                 	db	56
   807  00FE74  44                 	db	68
   808  00FE75  44                 	db	68
   809  00FE76  48                 	db	72
   810  00FE77  7F                 	db	127
   811  00FE78  38                 	db	56
   812  00FE79  54                 	db	84
   813  00FE7A  54                 	db	84
   814  00FE7B  54                 	db	84
   815  00FE7C  18                 	db	24
   816  00FE7D  08                 	db	8
   817  00FE7E  7E                 	db	126
   818  00FE7F  09                 	db	9
   819  00FE80  01                 	db	1
   820  00FE81  02                 	db	2
   821  00FE82  08                 	db	8
   822  00FE83  14                 	db	20
   823  00FE84  54                 	db	84
   824  00FE85  54                 	db	84
   825  00FE86  3C                 	db	60
   826  00FE87  7F                 	db	127
   827  00FE88  08                 	db	8
   828  00FE89  04                 	db	4
   829  00FE8A  04                 	db	4
   830  00FE8B  78                 	db	120
   831  00FE8C  00                 	db	0
   832  00FE8D  44                 	db	68
   833  00FE8E  7D                 	db	125
   834  00FE8F  40                 	db	64
   835  00FE90  00                 	db	0
   836  00FE91  20                 	db	32
   837  00FE92  40                 	db	64
   838  00FE93  44                 	db	68
   839  00FE94  3D                 	db	61
   840  00FE95  00                 	db	0
   841  00FE96  00                 	db	0
   842  00FE97  7F                 	db	127
   843  00FE98  10                 	db	16
   844  00FE99  28                 	db	40
   845  00FE9A  44                 	db	68
   846  00FE9B  00                 	db	0
   847  00FE9C  41                 	db	65
   848  00FE9D  7F                 	db	127
   849  00FE9E  40                 	db	64
   850  00FE9F  00                 	db	0
   851  00FEA0  7C                 	db	124
   852  00FEA1  04                 	db	4
   853  00FEA2  18                 	db	24
   854  00FEA3  04                 	db	4
   855  00FEA4  78                 	db	120
   856  00FEA5  7C                 	db	124
   857  00FEA6  08                 	db	8
   858  00FEA7  04                 	db	4
   859  00FEA8  04                 	db	4
   860  00FEA9  78                 	db	120
   861  00FEAA  38                 	db	56
   862  00FEAB  44                 	db	68
   863  00FEAC  44                 	db	68
   864  00FEAD  44                 	db	68
   865  00FEAE  38                 	db	56
   866  00FEAF  7C                 	db	124
   867  00FEB0  14                 	db	20
   868  00FEB1  14                 	db	20
   869  00FEB2  14                 	db	20
   870  00FEB3  08                 	db	8
   871  00FEB4  08                 	db	8
   872  00FEB5  14                 	db	20
   873  00FEB6  14                 	db	20
   874  00FEB7  18                 	db	24
   875  00FEB8  7C                 	db	124
   876  00FEB9  7C                 	db	124
   877  00FEBA  08                 	db	8
   878  00FEBB  04                 	db	4
   879  00FEBC  04                 	db	4
   880  00FEBD  08                 	db	8
   881  00FEBE  48                 	db	72
   882  00FEBF  54                 	db	84
   883  00FEC0  54                 	db	84
   884  00FEC1  54                 	db	84
   885  00FEC2  20                 	db	32
   886  00FEC3  04                 	db	4
   887  00FEC4  3F                 	db	63
   888  00FEC5  44                 	db	68
   889  00FEC6  40                 	db	64
   890  00FEC7  20                 	db	32
   891  00FEC8  3C                 	db	60
   892  00FEC9  40                 	db	64
   893  00FECA  40                 	db	64
   894  00FECB  20                 	db	32
   895  00FECC  7C                 	db	124
   896  00FECD  1C                 	db	28
   897  00FECE  20                 	db	32
   898  00FECF  40                 	db	64
   899  00FED0  20                 	db	32
   900  00FED1  1C                 	db	28
   901  00FED2  3C                 	db	60
   902  00FED3  40                 	db	64
   903  00FED4  30                 	db	48
   904  00FED5  40                 	db	64
   905  00FED6  3C                 	db	60
   906  00FED7  44                 	db	68
   907  00FED8  28                 	db	40
   908  00FED9  10                 	db	16
   909  00FEDA  28                 	db	40
   910  00FEDB  44                 	db	68
   911  00FEDC  0C                 	db	12
   912  00FEDD  50                 	db	80
   913  00FEDE  50                 	db	80
   914  00FEDF  50                 	db	80
   915  00FEE0  3C                 	db	60
   916  00FEE1  44                 	db	68
   917  00FEE2  64                 	db	100
   918  00FEE3  54                 	db	84
   919  00FEE4  4C                 	db	76
   920  00FEE5  44                 	db	68
   921  00FEE6  00                 	db	0
   922  00FEE7  08                 	db	8
   923  00FEE8  36                 	db	54
   924  00FEE9  41                 	db	65
   925  00FEEA  00                 	db	0
   926  00FEEB  00                 	db	0
   927  00FEEC  00                 	db	0
   928  00FEED  7F                 	db	127
   929  00FEEE  00                 	db	0
   930  00FEEF  00                 	db	0
   931  00FEF0  00                 	db	0
   932  00FEF1  41                 	db	65
   933  00FEF2  36                 	db	54
   934  00FEF3  08                 	db	8
   935  00FEF4  00                 	db	0
   936  00FEF5  08                 	db	8
   937  00FEF6  08                 	db	8
   938  00FEF7  2A                 	db	42
   939  00FEF8  1C                 	db	28
   940  00FEF9  08                 	db	8
   941  00FEFA  08                 	db	8
   942  00FEFB  1C                 	db	28
   943  00FEFC  2A                 	db	42
   944  00FEFD  08                 	db	8
   945  00FEFE  08                 	db	8
   946  00FEFF                     __end_of_Font5x7:
   947                           	opt stack 0
   948  00FEFF                     _PortG_Property:
   949                           	opt stack 0
   950  00FEFF  FC00               	dw	64512
   951  00FF01                     __end_of_PortG_Property:
   952                           	opt stack 0
   953  00FF01                     _PortF_Property:
   954                           	opt stack 0
   955  00FF01  0FFF               	dw	4095
   956  00FF03                     __end_of_PortF_Property:
   957                           	opt stack 0
   958  00FF03                     _PortE_Property:
   959                           	opt stack 0
   960  00FF03  0000               	dw	0
   961  00FF05                     __end_of_PortE_Property:
   962                           	opt stack 0
   963  00FF05                     _PortD_Property:
   964                           	opt stack 0
   965  00FF05  FFFF               	dw	65535
   966  00FF07                     __end_of_PortD_Property:
   967                           	opt stack 0
   968  00FF07                     _PortC_Property:
   969                           	opt stack 0
   970  00FF07  FFF0               	dw	65520
   971  00FF09                     __end_of_PortC_Property:
   972                           	opt stack 0
   973  00FF09                     _PortB_Property:
   974                           	opt stack 0
   975  00FF09  FF00               	dw	65280
   976  00FF0B                     __end_of_PortB_Property:
   977                           	opt stack 0
   978  00FF0B                     _PortA_Property:
   979                           	opt stack 0
   980  00FF0B  00FF               	dw	255
   981  00FF0D                     __end_of_PortA_Property:
   982                           	opt stack 0
   983  0000                     _TMR0	set	4054
   984  0000                     _RCREG1	set	4015
   985  0000                     _TXREG1	set	4014
   986  0000                     _SPBRG1	set	4016
   987  0000                     _TXSTA1bits	set	4013
   988  0000                     _BAUDCON1bits	set	3966
   989  0000                     _RCSTA1	set	4012
   990  0000                     _TXSTA1	set	4013
   991  0000                     _TRISCbits	set	3988
   992  0000                     _PR2	set	4043
   993  0000                     _T2CONbits	set	4042
   994  0000                     _T0CONbits	set	4053
   995  0000                     _RCONbits	set	4048
   996  0000                     _OSCTUNEbits	set	3995
   997  0000                     _PIR3	set	4004
   998  0000                     _PIR2	set	4001
   999  0000                     _PIR1	set	3998
  1000  0000                     _INTCONbits	set	4082
  1001  0000                     _SSP2CON2bits	set	3947
  1002  0000                     _SSP1CON2bits	set	4037
  1003  0000                     _SSP1ADD	set	4040
  1004  0000                     _ANCON0	set	4033
  1005  0000                     _ADRESL	set	4035
  1006  0000                     _ADRESH	set	4036
  1007  0000                     _ADCON1bits	set	4033
  1008  0000                     _ADCON0bits	set	4034
  1009  0000                     _SSP2CON1bits	set	3948
  1010  0000                     _SSP1CON1bits	set	4038
  1011  0000                     _SSP2STATbits	set	3949
  1012  0000                     _SSP1STATbits	set	4039
  1013  0000                     _PIE3bits	set	4003
  1014  0000                     _PIE1bits	set	3997
  1015  0000                     _PIR3bits	set	4004
  1016  0000                     _PIR1bits	set	3998
  1017  0000                     _IPR3bits	set	4005
  1018  0000                     _IPR1bits	set	3999
  1019  0000                     _PORTFbits	set	3973
  1020  0000                     _SSP2CON2	set	3947
  1021  0000                     _SSP1CON2	set	4037
  1022  0000                     _SSP2BUF	set	3951
  1023  0000                     _SSP2CON1	set	3948
  1024  0000                     _SSP2STAT	set	3949
  1025  0000                     _SSP1BUF	set	4041
  1026  0000                     _SSP1CON1	set	4038
  1027  0000                     _SSP1STAT	set	4039
  1028  0000                     _LATG	set	3983
  1029  0000                     _LATF	set	3982
  1030  0000                     _LATE	set	3981
  1031  0000                     _LATD	set	3980
  1032  0000                     _LATC	set	3979
  1033  0000                     _LATB	set	3978
  1034  0000                     _LATA	set	3977
  1035  0000                     _TRISG	set	3992
  1036  0000                     _TRISF	set	3991
  1037  0000                     _TRISE	set	3990
  1038  0000                     _TRISD	set	3989
  1039  0000                     _TRISC	set	3988
  1040  0000                     _TRISB	set	3987
  1041  0000                     _TRISA	set	3986
  1042  0000                     _PORTG	set	3974
  1043  0000                     _PORTF	set	3973
  1044  0000                     _PORTE	set	3972
  1045  0000                     _PORTD	set	3971
  1046  0000                     _PORTC	set	3970
  1047  0000                     _PORTB	set	3969
  1048  0000                     _PORTA	set	3968
  1049  00FF0D                     STR_14:
  1050  00FF0D  43                 	db	67	;'C'
  1051  00FF0E  6C                 	db	108	;'l'
  1052  00FF0F  6F                 	db	111	;'o'
  1053  00FF10  73                 	db	115	;'s'
  1054  00FF11  65                 	db	101	;'e'
  1055  00FF12  73                 	db	115	;'s'
  1056  00FF13  74                 	db	116	;'t'
  1057  00FF14  20                 	db	32
  1058  00FF15  57                 	db	87	;'W'
  1059  00FF16  61                 	db	97	;'a'
  1060  00FF17  6C                 	db	108	;'l'
  1061  00FF18  6C                 	db	108	;'l'
  1062  00FF19  3A                 	db	58	;':'
  1063  00FF1A  25                 	db	37
  1064  00FF1B  75                 	db	117	;'u'
  1065  00FF1C  0A                 	db	10
  1066  00FF1D  43                 	db	67	;'C'
  1067  00FF1E  6C                 	db	108	;'l'
  1068  00FF1F  6F                 	db	111	;'o'
  1069  00FF20  73                 	db	115	;'s'
  1070  00FF21  65                 	db	101	;'e'
  1071  00FF22  73                 	db	115	;'s'
  1072  00FF23  74                 	db	116	;'t'
  1073  00FF24  20                 	db	32
  1074  00FF25  41                 	db	65	;'A'
  1075  00FF26  6E                 	db	110	;'n'
  1076  00FF27  67                 	db	103	;'g'
  1077  00FF28  6C                 	db	108	;'l'
  1078  00FF29  65                 	db	101	;'e'
  1079  00FF2A  3A                 	db	58	;':'
  1080  00FF2B  25                 	db	37
  1081  00FF2C  64                 	db	100	;'d'
  1082  00FF2D  0A                 	db	10
  1083  00FF2E  4C                 	db	76	;'L'
  1084  00FF2F  65                 	db	101	;'e'
  1085  00FF30  66                 	db	102	;'f'
  1086  00FF31  74                 	db	116	;'t'
  1087  00FF32  20                 	db	32
  1088  00FF33  42                 	db	66	;'B'
  1089  00FF34  75                 	db	117	;'u'
  1090  00FF35  6D                 	db	109	;'m'
  1091  00FF36  70                 	db	112	;'p'
  1092  00FF37  3A                 	db	58	;':'
  1093  00FF38  25                 	db	37
  1094  00FF39  75                 	db	117	;'u'
  1095  00FF3A  0A                 	db	10
  1096  00FF3B  52                 	db	82	;'R'
  1097  00FF3C  69                 	db	105	;'i'
  1098  00FF3D  67                 	db	103	;'g'
  1099  00FF3E  68                 	db	104	;'h'
  1100  00FF3F  74                 	db	116	;'t'
  1101  00FF40  42                 	db	66	;'B'
  1102  00FF41  75                 	db	117	;'u'
  1103  00FF42  6D                 	db	109	;'m'
  1104  00FF43  70                 	db	112	;'p'
  1105  00FF44  3A                 	db	58	;':'
  1106  00FF45  25                 	db	37
  1107  00FF46  75                 	db	117	;'u'
  1108  00FF47  0A                 	db	10
  1109  00FF48  41                 	db	65	;'A'
  1110  00FF49  6E                 	db	110	;'n'
  1111  00FF4A  67                 	db	103	;'g'
  1112  00FF4B  6C                 	db	108	;'l'
  1113  00FF4C  65                 	db	101	;'e'
  1114  00FF4D  54                 	db	84	;'T'
  1115  00FF4E  6F                 	db	111	;'o'
  1116  00FF4F  54                 	db	84	;'T'
  1117  00FF50  75                 	db	117	;'u'
  1118  00FF51  72                 	db	114	;'r'
  1119  00FF52  6E                 	db	110	;'n'
  1120  00FF53  3A                 	db	58	;':'
  1121  00FF54  20                 	db	32
  1122  00FF55  25                 	db	37
  1123  00FF56  64                 	db	100	;'d'
  1124  00FF57  0A                 	db	10
  1125  00FF58  00                 	db	0
  1126  00FF59                     STR_4:
  1127  00FF59  43                 	db	67	;'C'
  1128  00FF5A  6C                 	db	108	;'l'
  1129  00FF5B  6F                 	db	111	;'o'
  1130  00FF5C  73                 	db	115	;'s'
  1131  00FF5D  65                 	db	101	;'e'
  1132  00FF5E  73                 	db	115	;'s'
  1133  00FF5F  74                 	db	116	;'t'
  1134  00FF60  20                 	db	32
  1135  00FF61  57                 	db	87	;'W'
  1136  00FF62  61                 	db	97	;'a'
  1137  00FF63  6C                 	db	108	;'l'
  1138  00FF64  6C                 	db	108	;'l'
  1139  00FF65  3A                 	db	58	;':'
  1140  00FF66  25                 	db	37
  1141  00FF67  75                 	db	117	;'u'
  1142  00FF68  0A                 	db	10
  1143  00FF69  43                 	db	67	;'C'
  1144  00FF6A  6C                 	db	108	;'l'
  1145  00FF6B  6F                 	db	111	;'o'
  1146  00FF6C  73                 	db	115	;'s'
  1147  00FF6D  65                 	db	101	;'e'
  1148  00FF6E  73                 	db	115	;'s'
  1149  00FF6F  74                 	db	116	;'t'
  1150  00FF70  20                 	db	32
  1151  00FF71  41                 	db	65	;'A'
  1152  00FF72  6E                 	db	110	;'n'
  1153  00FF73  67                 	db	103	;'g'
  1154  00FF74  6C                 	db	108	;'l'
  1155  00FF75  65                 	db	101	;'e'
  1156  00FF76  3A                 	db	58	;':'
  1157  00FF77  25                 	db	37
  1158  00FF78  64                 	db	100	;'d'
  1159  00FF79  0A                 	db	10
  1160  00FF7A  4C                 	db	76	;'L'
  1161  00FF7B  65                 	db	101	;'e'
  1162  00FF7C  66                 	db	102	;'f'
  1163  00FF7D  74                 	db	116	;'t'
  1164  00FF7E  20                 	db	32
  1165  00FF7F  42                 	db	66	;'B'
  1166  00FF80  75                 	db	117	;'u'
  1167  00FF81  6D                 	db	109	;'m'
  1168  00FF82  70                 	db	112	;'p'
  1169  00FF83  3A                 	db	58	;':'
  1170  00FF84  25                 	db	37
  1171  00FF85  75                 	db	117	;'u'
  1172  00FF86  0A                 	db	10
  1173  00FF87  52                 	db	82	;'R'
  1174  00FF88  69                 	db	105	;'i'
  1175  00FF89  67                 	db	103	;'g'
  1176  00FF8A  68                 	db	104	;'h'
  1177  00FF8B  74                 	db	116	;'t'
  1178  00FF8C  42                 	db	66	;'B'
  1179  00FF8D  75                 	db	117	;'u'
  1180  00FF8E  6D                 	db	109	;'m'
  1181  00FF8F  70                 	db	112	;'p'
  1182  00FF90  3A                 	db	58	;':'
  1183  00FF91  25                 	db	37
  1184  00FF92  75                 	db	117	;'u'
  1185  00FF93  0A                 	db	10
  1186  00FF94  00                 	db	0
  1187  00FF95                     STR_8:
  1188  00FF95  54                 	db	84	;'T'
  1189  00FF96  6F                 	db	111	;'o'
  1190  00FF97  74                 	db	116	;'t'
  1191  00FF98  61                 	db	97	;'a'
  1192  00FF99  6C                 	db	108	;'l'
  1193  00FF9A  20                 	db	32
  1194  00FF9B  44                 	db	68	;'D'
  1195  00FF9C  69                 	db	105	;'i'
  1196  00FF9D  73                 	db	115	;'s'
  1197  00FF9E  74                 	db	116	;'t'
  1198  00FF9F  61                 	db	97	;'a'
  1199  00FFA0  6E                 	db	110	;'n'
  1200  00FFA1  63                 	db	99	;'c'
  1201  00FFA2  65                 	db	101	;'e'
  1202  00FFA3  3A                 	db	58	;':'
  1203  00FFA4  25                 	db	37
  1204  00FFA5  75                 	db	117	;'u'
  1205  00FFA6  0A                 	db	10
  1206  00FFA7  4C                 	db	76	;'L'
  1207  00FFA8  65                 	db	101	;'e'
  1208  00FFA9  66                 	db	102	;'f'
  1209  00FFAA  74                 	db	116	;'t'
  1210  00FFAB  20                 	db	32
  1211  00FFAC  42                 	db	66	;'B'
  1212  00FFAD  75                 	db	117	;'u'
  1213  00FFAE  6D                 	db	109	;'m'
  1214  00FFAF  70                 	db	112	;'p'
  1215  00FFB0  3A                 	db	58	;':'
  1216  00FFB1  25                 	db	37
  1217  00FFB2  75                 	db	117	;'u'
  1218  00FFB3  0A                 	db	10
  1219  00FFB4  52                 	db	82	;'R'
  1220  00FFB5  69                 	db	105	;'i'
  1221  00FFB6  67                 	db	103	;'g'
  1222  00FFB7  68                 	db	104	;'h'
  1223  00FFB8  74                 	db	116	;'t'
  1224  00FFB9  20                 	db	32
  1225  00FFBA  42                 	db	66	;'B'
  1226  00FFBB  75                 	db	117	;'u'
  1227  00FFBC  6D                 	db	109	;'m'
  1228  00FFBD  70                 	db	112	;'p'
  1229  00FFBE  3A                 	db	58	;':'
  1230  00FFBF  25                 	db	37
  1231  00FFC0  75                 	db	117	;'u'
  1232  00FFC1  0A                 	db	10
  1233  00FFC2  00                 	db	0
  1234  00FFC3                     STR_17:
  1235  00FFC3  20                 	db	32
  1236  00FFC4  20                 	db	32
  1237  00FFC5  20                 	db	32
  1238  00FFC6  20                 	db	32
  1239  00FFC7  20                 	db	32
  1240  00FFC8  20                 	db	32
  1241  00FFC9  20                 	db	32
  1242  00FFCA  20                 	db	32
  1243  00FFCB  20                 	db	32
  1244  00FFCC  20                 	db	32
  1245  00FFCD  20                 	db	32
  1246  00FFCE  20                 	db	32
  1247  00FFCF  20                 	db	32
  1248  00FFD0  20                 	db	32
  1249  00FFD1  20                 	db	32
  1250  00FFD2  20                 	db	32
  1251  00FFD3  20                 	db	32
  1252  00FFD4  20                 	db	32
  1253  00FFD5  20                 	db	32
  1254  00FFD6  0A                 	db	10
  1255  00FFD7  00                 	db	0
  1256  00FFD8                     STR_16:
  1257  00FFD8  50                 	db	80	;'P'
  1258  00FFD9  6C                 	db	108	;'l'
  1259  00FFDA  65                 	db	101	;'e'
  1260  00FFDB  61                 	db	97	;'a'
  1261  00FFDC  73                 	db	115	;'s'
  1262  00FFDD  65                 	db	101	;'e'
  1263  00FFDE  20                 	db	32
  1264  00FFDF  73                 	db	115	;'s'
  1265  00FFE0  65                 	db	101	;'e'
  1266  00FFE1  6C                 	db	108	;'l'
  1267  00FFE2  65                 	db	101	;'e'
  1268  00FFE3  63                 	db	99	;'c'
  1269  00FFE4  74                 	db	116	;'t'
  1270  00FFE5  20                 	db	32
  1271  00FFE6  6D                 	db	109	;'m'
  1272  00FFE7  6F                 	db	111	;'o'
  1273  00FFE8  64                 	db	100	;'d'
  1274  00FFE9  65                 	db	101	;'e'
  1275  00FFEA  2E                 	db	46
  1276  00FFEB  0A                 	db	10
  1277  00FFEC  00                 	db	0
  1278  00FFED                     STR_2:
  1279  00FFED  44                 	db	68	;'D'
  1280  00FFEE  69                 	db	105	;'i'
  1281  00FFEF  73                 	db	115	;'s'
  1282  00FFF0  74                 	db	116	;'t'
  1283  00FFF1  61                 	db	97	;'a'
  1284  00FFF2  6E                 	db	110	;'n'
  1285  00FFF3  63                 	db	99	;'c'
  1286  00FFF4  65                 	db	101	;'e'
  1287  00FFF5  3A                 	db	58	;':'
  1288  00FFF6  20                 	db	32
  1289  00FFF7  25                 	db	37
  1290  00FFF8  64                 	db	100	;'d'
  1291  00FFF9  0A                 	db	10
  1292  00FFFA  00                 	db	0
  1293  00FFFB                     STR_1:
  1294  00FFFB  25                 	db	37
  1295  00FFFC  63                 	db	99	;'c'
  1296  00FFFD  00                 	db	0
  1297  0000                     
  1298                           ; #config settings
  1299  00FFFE  00                 	db	0	; dummy byte at the end
  1300  0000                     
  1301                           	psect	cinit
  1302  014BD8                     __pcinit:
  1303                           	opt stack 0
  1304  014BD8                     start_initialization:
  1305                           	opt stack 0
  1306  014BD8                     __initialization:
  1307                           	opt stack 0
  1308                           
  1309                           ; Initialize objects allocated to BANK3 (14 bytes)
  1310                           ; load TBLPTR registers with __pidataBANK3
  1311  014BD8  0EAA               	movlw	low __pidataBANK3
  1312  014BDA  6EF6               	movwf	tblptrl,c
  1313  014BDC  0E6C               	movlw	high __pidataBANK3
  1314  014BDE  6EF7               	movwf	tblptrh,c
  1315  014BE0  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1316  014BE2  6EF8               	movwf	tblptru,c
  1317  014BE4  EE03  F0EC         	lfsr	0,__pdataBANK3
  1318  014BE8  EE10 F00E          	lfsr	1,14
  1319  014BEC                     copy_data0:
  1320  014BEC  0009               	tblrd		*+
  1321  014BEE  CFF5 FFEE          	movff	tablat,postinc0
  1322  014BF2  50E5               	movf	postdec1,w,c
  1323  014BF4  50E1               	movf	fsr1l,w,c
  1324  014BF6  E1FA               	bnz	copy_data0
  1325                           
  1326                           ; Initialize objects allocated to BANK0 (7 bytes)
  1327                           ; load TBLPTR registers with __pidataBANK0
  1328  014BF8  0E66               	movlw	low __pidataBANK0
  1329  014BFA  6EF6               	movwf	tblptrl,c
  1330  014BFC  0E6D               	movlw	high __pidataBANK0
  1331  014BFE  6EF7               	movwf	tblptrh,c
  1332  014C00  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1333  014C02  6EF8               	movwf	tblptru,c
  1334  014C04  EE00  F0F9         	lfsr	0,__pdataBANK0
  1335  014C08  EE10 F007          	lfsr	1,7
  1336  014C0C                     copy_data1:
  1337  014C0C  0009               	tblrd		*+
  1338  014C0E  CFF5 FFEE          	movff	tablat,postinc0
  1339  014C12  50E5               	movf	postdec1,w,c
  1340  014C14  50E1               	movf	fsr1l,w,c
  1341  014C16  E1FA               	bnz	copy_data1
  1342                           
  1343                           ; Initialize objects allocated to COMRAM (10 bytes)
  1344                           ; load TBLPTR registers with __pidataCOMRAM
  1345  014C18  0E30               	movlw	low __pidataCOMRAM
  1346  014C1A  6EF6               	movwf	tblptrl,c
  1347  014C1C  0E6D               	movlw	high __pidataCOMRAM
  1348  014C1E  6EF7               	movwf	tblptrh,c
  1349  014C20  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1350  014C22  6EF8               	movwf	tblptru,c
  1351  014C24  EE00  F047         	lfsr	0,__pdataCOMRAM
  1352  014C28  EE10 F00A          	lfsr	1,10
  1353  014C2C                     copy_data2:
  1354  014C2C  0009               	tblrd		*+
  1355  014C2E  CFF5 FFEE          	movff	tablat,postinc0
  1356  014C32  50E5               	movf	postdec1,w,c
  1357  014C34  50E1               	movf	fsr1l,w,c
  1358  014C36  E1FA               	bnz	copy_data2
  1359                           
  1360                           ; Clear objects allocated to BIGRAM (300 bytes)
  1361  014C38  EE04  F0B2         	lfsr	0,__pbssBIGRAM
  1362  014C3C  EE11 F02C          	lfsr	1,300
  1363  014C40                     clear_0:
  1364  014C40  6AEE               	clrf	postinc0,c
  1365  014C42  50E5               	movf	postdec1,w,c
  1366  014C44  50E1               	movf	fsr1l,w,c
  1367  014C46  E1FC               	bnz	clear_0
  1368  014C48  50E2               	movf	fsr1h,w,c
  1369  014C4A  E1FA               	bnz	clear_0
  1370                           
  1371                           ; Clear objects allocated to BANK4 (170 bytes)
  1372  014C4C  EE04  F000         	lfsr	0,__pbssBANK4
  1373  014C50  0EAA               	movlw	170
  1374  014C52                     clear_1:
  1375  014C52  6AEE               	clrf	postinc0,c
  1376  014C54  06E8               	decf	wreg,f,c
  1377  014C56  E1FD               	bnz	clear_1
  1378                           
  1379                           ; Clear objects allocated to BANK3 (236 bytes)
  1380  014C58  EE03  F000         	lfsr	0,__pbssBANK3
  1381  014C5C  0EEC               	movlw	236
  1382  014C5E                     clear_2:
  1383  014C5E  6AEE               	clrf	postinc0,c
  1384  014C60  06E8               	decf	wreg,f,c
  1385  014C62  E1FD               	bnz	clear_2
  1386                           
  1387                           ; Clear objects allocated to BANK0 (89 bytes)
  1388  014C64  EE00  F060         	lfsr	0,__pbssBANK0
  1389  014C68  0E59               	movlw	89
  1390  014C6A                     clear_3:
  1391  014C6A  6AEE               	clrf	postinc0,c
  1392  014C6C  06E8               	decf	wreg,f,c
  1393  014C6E  E1FD               	bnz	clear_3
  1394                           
  1395                           ; Clear objects allocated to COMRAM (30 bytes)
  1396  014C70  EE00  F029         	lfsr	0,__pbssCOMRAM
  1397  014C74  0E1E               	movlw	30
  1398  014C76                     clear_4:
  1399  014C76  6AEE               	clrf	postinc0,c
  1400  014C78  06E8               	decf	wreg,f,c
  1401  014C7A  E1FD               	bnz	clear_4
  1402  014C7C                     end_of_initialization:
  1403                           	opt stack 0
  1404  014C7C                     __end_of__initialization:
  1405                           	opt stack 0
  1406  014C7C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1407  014C7E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1408  014C80  0100               	movlb	0
  1409  014C82  EF0B  F0A0         	goto	_main	;jump to C main() function
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           postdec1	equ	0xFE5
  1417                           fsr1h	equ	0xFE2
  1418                           fsr1l	equ	0xFE1
  1419                           
  1420                           	psect	bssCOMRAM
  1421  000029                     __pbssCOMRAM:
  1422                           	opt stack 0
  1423  000029                     _COUNTER:
  1424                           	opt stack 0
  1425  000029                     	ds	2
  1426  00002B                     HMI_GRender@a:
  1427                           	opt stack 0
  1428  00002B                     	ds	2
  1429  00002D                     SPI_Send9@dat:
  1430                           	opt stack 0
  1431  00002D                     	ds	2
  1432  00002F                     _iRDropCaster:
  1433                           	opt stack 0
  1434  00002F                     	ds	1
  1435  000030                     _iRVirtualWall:
  1436                           	opt stack 0
  1437  000030                     	ds	1
  1438  000031                     _iRCliffR:
  1439                           	opt stack 0
  1440  000031                     	ds	1
  1441  000032                     _iRCliffFR:
  1442                           	opt stack 0
  1443  000032                     	ds	1
  1444  000033                     _iRCliffFL:
  1445                           	opt stack 0
  1446  000033                     	ds	1
  1447  000034                     _iRCliffL:
  1448                           	opt stack 0
  1449  000034                     	ds	1
  1450  000035                     _iRWall:
  1451                           	opt stack 0
  1452  000035                     	ds	1
  1453  000036                     _iRBumpDrop:
  1454                           	opt stack 0
  1455  000036                     	ds	1
  1456  000037                     _iRScriptIndex:
  1457                           	opt stack 0
  1458  000037                     	ds	1
  1459  000038                     _u:
  1460                           	opt stack 0
  1461  000038                     	ds	1
  1462  000039                     _j:
  1463                           	opt stack 0
  1464  000039                     	ds	1
  1465  00003A                     _i:
  1466                           	opt stack 0
  1467  00003A                     	ds	1
  1468  00003B                     rand@screw:
  1469                           	opt stack 0
  1470  00003B                     	ds	1
  1471  00003C                     _ADC_Initialised:
  1472                           	opt stack 0
  1473  00003C                     	ds	1
  1474  00003D                     OutSeg@a:
  1475                           	opt stack 0
  1476  00003D                     	ds	1
  1477  00003E                     OutSeg@segset:
  1478                           	opt stack 0
  1479  00003E                     	ds	1
  1480  00003F                     OutSeg@cur:
  1481                           	opt stack 0
  1482  00003F                     	ds	1
  1483  000040                     _I2C1T:
  1484                           	opt stack 0
  1485  000040                     	ds	7
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1h	equ	0xFE2
  1494                           fsr1l	equ	0xFE1
  1495                           
  1496                           	psect	dataCOMRAM
  1497  000047                     __pdataCOMRAM:
  1498                           	opt stack 0
  1499  000047                     _gCursor:
  1500                           	opt stack 0
  1501  000047                     	ds	4
  1502  00004B                     _Bus_State:
  1503                           	opt stack 0
  1504  00004B                     	ds	1
  1505  00004C                     	ds	1
  1506  00004D                     	ds	1
  1507  00004E                     	ds	1
  1508  00004F                     _l:
  1509                           	opt stack 0
  1510  00004F                     	ds	1
  1511  000050                     _w:
  1512                           	opt stack 0
  1513  000050                     	ds	1
  1514                           tblptru	equ	0xFF8
  1515                           tblptrh	equ	0xFF7
  1516                           tblptrl	equ	0xFF6
  1517                           tablat	equ	0xFF5
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1h	equ	0xFE2
  1522                           fsr1l	equ	0xFE1
  1523                           
  1524                           	psect	bssBANK0
  1525  000060                     __pbssBANK0:
  1526                           	opt stack 0
  1527  000060                     _gISR:
  1528                           	opt stack 0
  1529  000060                     	ds	3
  1530  000063                     _lQueue:
  1531                           	opt stack 0
  1532  000063                     	ds	3
  1533  000066                     _lStepFunction:
  1534                           	opt stack 0
  1535  000066                     	ds	3
  1536  000069                     _dist:
  1537                           	opt stack 0
  1538  000069                     	ds	2
  1539  00006B                     _angleToClosestWall:
  1540                           	opt stack 0
  1541  00006B                     	ds	2
  1542  00006D                     _IRValue:
  1543                           	opt stack 0
  1544  00006D                     	ds	2
  1545  00006F                     _Stepstomin:
  1546                           	opt stack 0
  1547  00006F                     	ds	2
  1548  000071                     _StepRotate:
  1549                           	opt stack 0
  1550  000071                     	ds	2
  1551  000073                     _distanceTotal:
  1552                           	opt stack 0
  1553  000073                     	ds	2
  1554  000075                     _iRAngle:
  1555                           	opt stack 0
  1556  000075                     	ds	2
  1557  000077                     _iRDistance:
  1558                           	opt stack 0
  1559  000077                     	ds	2
  1560  000079                     _pShiftVal:
  1561                           	opt stack 0
  1562  000079                     	ds	2
  1563  00007B                     _val:
  1564                           	opt stack 0
  1565  00007B                     	ds	2
  1566  00007D                     _lMotor:
  1567                           	opt stack 0
  1568  00007D                     	ds	2
  1569  00007F                     _lCurrent:
  1570                           	opt stack 0
  1571  00007F                     	ds	2
  1572  000081                     _gBackcolour:
  1573                           	opt stack 0
  1574  000081                     	ds	2
  1575  000083                     _correctOrientation:
  1576                           	opt stack 0
  1577  000083                     	ds	1
  1578  000084                     _iRDropLeft:
  1579                           	opt stack 0
  1580  000084                     	ds	1
  1581  000085                     _iRDropRight:
  1582                           	opt stack 0
  1583  000085                     	ds	1
  1584  000086                     _iRBumpLeft:
  1585                           	opt stack 0
  1586  000086                     	ds	1
  1587  000087                     _iRBumpRight:
  1588                           	opt stack 0
  1589  000087                     	ds	1
  1590  000088                     Event_TestButton@j:
  1591                           	opt stack 0
  1592  000088                     	ds	1
  1593  000089                     Timer2_Init@PRE:
  1594                           	opt stack 0
  1595  000089                     	ds	1
  1596  00008A                     Timer2_Init@INDEX:
  1597                           	opt stack 0
  1598  00008A                     	ds	1
  1599  00008B                     Timer0_Init@PRE:
  1600                           	opt stack 0
  1601  00008B                     	ds	1
  1602  00008C                     _INDEX:
  1603                           	opt stack 0
  1604  00008C                     	ds	1
  1605  00008D                     _lBufferY:
  1606                           	opt stack 0
  1607  00008D                     	ds	1
  1608  00008E                     _lBufferX:
  1609                           	opt stack 0
  1610  00008E                     	ds	1
  1611  00008F                     _clearall:
  1612                           	opt stack 0
  1613  00008F                     	ds	1
  1614  000090                     _PortE:
  1615                           	opt stack 0
  1616  000090                     	ds	10
  1617  00009A                     _PortD:
  1618                           	opt stack 0
  1619  00009A                     	ds	10
  1620  0000A4                     _PortC:
  1621                           	opt stack 0
  1622  0000A4                     	ds	10
  1623  0000AE                     _Stepper:
  1624                           	opt stack 0
  1625  0000AE                     	ds	6
  1626  0000B4                     _ADC_AN0:
  1627                           	opt stack 0
  1628  0000B4                     	ds	5
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           postinc0	equ	0xFEE
  1634                           wreg	equ	0xFE8
  1635                           postdec1	equ	0xFE5
  1636                           fsr1h	equ	0xFE2
  1637                           fsr1l	equ	0xFE1
  1638                           
  1639                           	psect	dataBANK0
  1640  0000F9                     __pdataBANK0:
  1641                           	opt stack 0
  1642  0000F9                     _TimerX:
  1643                           	opt stack 0
  1644  0000F9                     	ds	2
  1645  0000FB                     _MinDist:
  1646                           	opt stack 0
  1647  0000FB                     	ds	2
  1648  0000FD                     _gForecolour:
  1649                           	opt stack 0
  1650  0000FD                     	ds	2
  1651  0000FF                     _change:
  1652                           	opt stack 0
  1653  0000FF                     	ds	1
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           postdec1	equ	0xFE5
  1661                           fsr1h	equ	0xFE2
  1662                           fsr1l	equ	0xFE1
  1663                           
  1664                           	psect	bssBANK3
  1665  000300                     __pbssBANK3:
  1666                           	opt stack 0
  1667  000300                     _lCBuffer:
  1668                           	opt stack 0
  1669  000300                     	ds	30
  1670  00031E                     _iRAngleSS:
  1671                           	opt stack 0
  1672  00031E                     	ds	4
  1673  000322                     _iRDistanceSS:
  1674                           	opt stack 0
  1675  000322                     	ds	4
  1676  000326                     Timer2_Init@DIV:
  1677                           	opt stack 0
  1678  000326                     	ds	4
  1679  00032A                     Timer0_Init@DIV:
  1680                           	opt stack 0
  1681  00032A                     	ds	4
  1682  00032E                     _I2C2_More:
  1683                           	opt stack 0
  1684  00032E                     	ds	3
  1685  000331                     _I2C1_More:
  1686                           	opt stack 0
  1687  000331                     	ds	3
  1688  000334                     _I2C2_Done:
  1689                           	opt stack 0
  1690  000334                     	ds	3
  1691  000337                     _I2C1_Done:
  1692                           	opt stack 0
  1693  000337                     	ds	3
  1694  00033A                     _angle:
  1695                           	opt stack 0
  1696  00033A                     	ds	2
  1697  00033C                     _mode:
  1698                           	opt stack 0
  1699  00033C                     	ds	2
  1700  00033E                     _dip:
  1701                           	opt stack 0
  1702  00033E                     	ds	2
  1703  000340                     _angleTotal:
  1704                           	opt stack 0
  1705  000340                     	ds	2
  1706  000342                     _HMIBoard:
  1707                           	opt stack 0
  1708  000342                     	ds	58
  1709  00037C                     _SPI1:
  1710                           	opt stack 0
  1711  00037C                     	ds	11
  1712  000387                     _SPI2:
  1713                           	opt stack 0
  1714  000387                     	ds	11
  1715  000392                     _DIPSwitch:
  1716                           	opt stack 0
  1717  000392                     	ds	10
  1718  00039C                     _TestButton:
  1719                           	opt stack 0
  1720  00039C                     	ds	10
  1721  0003A6                     _PortG:
  1722                           	opt stack 0
  1723  0003A6                     	ds	10
  1724  0003B0                     _PortB:
  1725                           	opt stack 0
  1726  0003B0                     	ds	10
  1727  0003BA                     _PortA:
  1728                           	opt stack 0
  1729  0003BA                     	ds	10
  1730  0003C4                     _PortF:
  1731                           	opt stack 0
  1732  0003C4                     	ds	10
  1733  0003CE                     _I2C2T:
  1734                           	opt stack 0
  1735  0003CE                     	ds	7
  1736  0003D5                     _ADC_AN3:
  1737                           	opt stack 0
  1738  0003D5                     	ds	5
  1739  0003DA                     _ADC_AN2:
  1740                           	opt stack 0
  1741  0003DA                     	ds	5
  1742  0003DF                     _ADC_AN1:
  1743                           	opt stack 0
  1744  0003DF                     	ds	5
  1745  0003E4                     LCD_DrawRectangle@p4:
  1746                           	opt stack 0
  1747  0003E4                     	ds	4
  1748  0003E8                     LCD_DrawRectangle@p2:
  1749                           	opt stack 0
  1750  0003E8                     	ds	4
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           
  1761                           	psect	dataBANK3
  1762  0003EC                     __pdataBANK3:
  1763                           	opt stack 0
  1764  0003EC                     Console_Render@F6956:
  1765                           	opt stack 0
  1766  0003EC                     	ds	4
  1767  0003F0                     _gLineSize:
  1768                           	opt stack 0
  1769  0003F0                     	ds	4
  1770  0003F4                     _gCharSize:
  1771                           	opt stack 0
  1772  0003F4                     	ds	4
  1773  0003F8                     _corner:
  1774                           	opt stack 0
  1775  0003F8                     	ds	2
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           	psect	bssBANK4
  1787  000400                     __pbssBANK4:
  1788                           	opt stack 0
  1789  000400                     _iRScriptStack:
  1790                           	opt stack 0
  1791  000400                     	ds	100
  1792  000464                     Console_MakeField@Fill:
  1793                           	opt stack 0
  1794  000464                     	ds	70
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           postdec1	equ	0xFE5
  1802                           fsr1h	equ	0xFE2
  1803                           fsr1l	equ	0xFE1
  1804                           
  1805                           	psect	bssBIGRAM
  1806  0004B2                     __pbssBIGRAM:
  1807                           	opt stack 0
  1808  0004B2                     _lBuffer:
  1809                           	opt stack 0
  1810  0004B2                     	ds	300
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1h	equ	0xFE2
  1819                           fsr1l	equ	0xFE1
  1820                           
  1821                           	psect	cstackBANK4
  1822  0004AA                     __pcstackBANK4:
  1823                           	opt stack 0
  1824  0004AA                     mode1@moveto:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x0
  1828  0004AA                     	ds	2
  1829  0004AC                     _mode1$15611:
  1830                           	opt stack 0
  1831                           
  1832                           ; 4 bytes @ 0x2
  1833  0004AC                     	ds	4
  1834  0004B0                     ??_main:
  1835                           
  1836                           ; 1 bytes @ 0x6
  1837  0004B0                     	ds	2
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1h	equ	0xFE2
  1846                           fsr1l	equ	0xFE1
  1847                           
  1848                           	psect	cstackBANK3
  1849  0003FA                     __pcstackBANK3:
  1850                           	opt stack 0
  1851  0003FA                     ??_findClosestWall:
  1852  0003FA                     ??_mode1:
  1853                           
  1854                           ; 1 bytes @ 0x0
  1855  0003FA                     	ds	2
  1856  0003FC                     _findClosestWall$15609:
  1857                           	opt stack 0
  1858                           
  1859                           ; 4 bytes @ 0x2
  1860  0003FC                     	ds	4
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1h	equ	0xFE2
  1869                           fsr1l	equ	0xFE1
  1870                           
  1871                           	psect	cstackBANK2
  1872  000200                     __pcstackBANK2:
  1873                           	opt stack 0
  1874  000200                     irobot_query_and_update@TXArray:
  1875                           	opt stack 0
  1876                           
  1877                           ; 256 bytes @ 0x0
  1878  000200                     	ds	256
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1h	equ	0xFE2
  1887                           fsr1l	equ	0xFE1
  1888                           
  1889                           	psect	cstackBANK1
  1890  000100                     __pcstackBANK1:
  1891                           	opt stack 0
  1892  000100                     ??___fltol:
  1893  000100                     Button_Init@pInput:
  1894                           	opt stack 0
  1895  000100                     Port_Init@pInput:
  1896                           	opt stack 0
  1897  000100                     irobot_query_and_update@RXArray:
  1898                           	opt stack 0
  1899                           
  1900                           ; 256 bytes @ 0x0
  1901  000100                     	ds	2
  1902  000102                     Port_Init@pPort:
  1903                           	opt stack 0
  1904  000102                     Button_Init@pThreshold:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x2
  1908  000102                     	ds	1
  1909  000103                     ??_Port_Init:
  1910                           
  1911                           ; 1 bytes @ 0x3
  1912  000103                     	ds	1
  1913  000104                     Button_Init@pInitIO:
  1914                           	opt stack 0
  1915  000104                     _measureAndDisplayDistance$15610:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x4
  1919  000104                     	ds	1
  1920  000105                     Port_Init@i:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x5
  1924  000105                     	ds	2
  1925  000107                     Button_Init@pGetState:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x7
  1929  000107                     	ds	3
  1930  00010A                     Button_Init@pFunction:
  1931                           	opt stack 0
  1932                           
  1933                           ; 3 bytes @ 0xA
  1934  00010A                     	ds	246
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           postdec1	equ	0xFE5
  1942                           fsr1h	equ	0xFE2
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	cstackBANK0
  1946  0000B9                     __pcstackBANK0:
  1947                           	opt stack 0
  1948  0000B9                     ??_Console_ClearCursor:
  1949  0000B9                     ??_ADC_SetChannel:
  1950  0000B9                     ??_ADC_ConversionTime:
  1951  0000B9                     ??_ADC_SetupIO:
  1952  0000B9                     ??_sort_iRBumpDrop:
  1953  0000B9                     ?_load_iRScriptStack:
  1954                           	opt stack 0
  1955  0000B9                     ??_Console_Init:
  1956  0000B9                     ??_Console_NewLine:
  1957  0000B9                     ??_Console_FormFeed:
  1958  0000B9                     ??_HMI_SetButton:
  1959  0000B9                     ?_GetPortProperties:
  1960                           	opt stack 0
  1961  0000B9                     ?_GetPortPORT:
  1962                           	opt stack 0
  1963  0000B9                     ?_GetPortTRIS:
  1964                           	opt stack 0
  1965  0000B9                     ?_twos_complement_of:
  1966                           	opt stack 0
  1967  0000B9                     ?___wmul:
  1968                           	opt stack 0
  1969  0000B9                     ?___awdiv:
  1970                           	opt stack 0
  1971  0000B9                     ?___lwdiv:
  1972                           	opt stack 0
  1973  0000B9                     ?___fldiv:
  1974                           	opt stack 0
  1975  0000B9                     ?___lldiv:
  1976                           	opt stack 0
  1977  0000B9                     ?___xxtofl:
  1978                           	opt stack 0
  1979  0000B9                     Mode_Set@pMode:
  1980                           	opt stack 0
  1981  0000B9                     ToSegment@pCHR:
  1982                           	opt stack 0
  1983  0000B9                     HMI_SetBar@pValue:
  1984                           	opt stack 0
  1985  0000B9                     ADC_ClockDivision@pDivide:
  1986                           	opt stack 0
  1987  0000B9                     get_packet_size@packetID:
  1988                           	opt stack 0
  1989  0000B9                     eusart_putch@eusartSendChar:
  1990                           	opt stack 0
  1991  0000B9                     Port_GetPin@pInput:
  1992                           	opt stack 0
  1993  0000B9                     Port_GetQuad@pInput:
  1994                           	opt stack 0
  1995  0000B9                     SPI_DisableISR@pInput:
  1996                           	opt stack 0
  1997  0000B9                     SPI_DCS@pInput:
  1998                           	opt stack 0
  1999  0000B9                     SPI_Send@pInput:
  2000                           	opt stack 0
  2001  0000B9                     Byte_SetBit@pInput:
  2002                           	opt stack 0
  2003  0000B9                     Byte_GetBit@pInput:
  2004                           	opt stack 0
  2005  0000B9                     Byte_SetZone@pInput:
  2006                           	opt stack 0
  2007  0000B9                     Byte_GetZone@pInput:
  2008                           	opt stack 0
  2009  0000B9                     Byte_SetByte@pInput:
  2010                           	opt stack 0
  2011  0000B9                     delay_ms@ms:
  2012                           	opt stack 0
  2013  0000B9                     delay_us@us:
  2014                           	opt stack 0
  2015  0000B9                     reverse@input:
  2016                           	opt stack 0
  2017  0000B9                     twos_complement_of@complementValue:
  2018                           	opt stack 0
  2019  0000B9                     ___wmul@multiplier:
  2020                           	opt stack 0
  2021  0000B9                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023  0000B9                     ___lwdiv@dividend:
  2024                           	opt stack 0
  2025  0000B9                     MXK_Queue@pCallback:
  2026                           	opt stack 0
  2027  0000B9                     Timer0_Start@pFunction:
  2028                           	opt stack 0
  2029  0000B9                     ___lldiv@dividend:
  2030                           	opt stack 0
  2031  0000B9                     ___fldiv@b:
  2032                           	opt stack 0
  2033  0000B9                     ___xxtofl@val:
  2034                           	opt stack 0
  2035                           
  2036                           ; 4 bytes @ 0x0
  2037  0000B9                     	ds	1
  2038  0000BA                     ADC_SetChannel@pChannel:
  2039                           	opt stack 0
  2040  0000BA                     ADC_ClockDivision@reg:
  2041                           	opt stack 0
  2042  0000BA                     ADC_ConversionTime@pCount:
  2043                           	opt stack 0
  2044  0000BA                     rx_assign@packetIDValue:
  2045                           	opt stack 0
  2046  0000BA                     irobot_song_play@songNumber:
  2047                           	opt stack 0
  2048  0000BA                     HMI_SetSegments@pString:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x1
  2052  0000BA                     	ds	1
  2053  0000BB                     GetPortProperties@pInput:
  2054                           	opt stack 0
  2055  0000BB                     GetPortPORT@pInput:
  2056                           	opt stack 0
  2057  0000BB                     GetPortTRIS@pInput:
  2058                           	opt stack 0
  2059  0000BB                     Port_GetPin@pPin:
  2060                           	opt stack 0
  2061  0000BB                     Port_GetQuad@pQuad:
  2062                           	opt stack 0
  2063  0000BB                     SPI_Send@pData:
  2064                           	opt stack 0
  2065  0000BB                     Byte_SetBit@pBit:
  2066                           	opt stack 0
  2067  0000BB                     Byte_GetBit@pBit:
  2068                           	opt stack 0
  2069  0000BB                     Byte_SetZone@pMax:
  2070                           	opt stack 0
  2071  0000BB                     Byte_GetZone@pMax:
  2072                           	opt stack 0
  2073  0000BB                     Byte_SetByte@pValue:
  2074                           	opt stack 0
  2075  0000BB                     Console_Init@x:
  2076                           	opt stack 0
  2077  0000BB                     Console_FormFeed@x:
  2078                           	opt stack 0
  2079  0000BB                     ADC_SetupIO@pChannel:
  2080                           	opt stack 0
  2081  0000BB                     ADC_ClockDivision@unfound:
  2082                           	opt stack 0
  2083  0000BB                     rx_assign@byteNumber:
  2084                           	opt stack 0
  2085  0000BB                     reverse@length:
  2086                           	opt stack 0
  2087  0000BB                     ADC_Start@pInput:
  2088                           	opt stack 0
  2089  0000BB                     ___wmul@multiplicand:
  2090                           	opt stack 0
  2091  0000BB                     ___awdiv@divisor:
  2092                           	opt stack 0
  2093  0000BB                     ___lwdiv@divisor:
  2094                           	opt stack 0
  2095  0000BB                     delay_ms@u:
  2096                           	opt stack 0
  2097  0000BB                     delay_us@u:
  2098                           	opt stack 0
  2099  0000BB                     HMI_SetButton@reindex:
  2100                           	opt stack 0
  2101                           
  2102                           ; 4 bytes @ 0x2
  2103  0000BB                     	ds	1
  2104  0000BC                     ??_Port_GetPin:
  2105  0000BC                     ??_Port_GetQuad:
  2106  0000BC                     ??_Byte_GetBit:
  2107  0000BC                     ??_rx_assign:
  2108  0000BC                     LCD_Write@mode:
  2109                           	opt stack 0
  2110  0000BC                     Byte_SetBit@pValue:
  2111                           	opt stack 0
  2112  0000BC                     Byte_SetZone@pChunk:
  2113                           	opt stack 0
  2114  0000BC                     Byte_GetZone@pChunk:
  2115                           	opt stack 0
  2116  0000BC                     Console_Init@y:
  2117                           	opt stack 0
  2118  0000BC                     Console_FormFeed@y:
  2119                           	opt stack 0
  2120  0000BC                     OutSeg@pSegment:
  2121                           	opt stack 0
  2122  0000BC                     ADC_SetupIO@MASK:
  2123                           	opt stack 0
  2124  0000BC                     Motor_Move@pMotor:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x3
  2128  0000BC                     	ds	1
  2129  0000BD                     ??_Byte_SetBit:
  2130  0000BD                     ??_Console_IncrementCursor:
  2131  0000BD                     ??_OutSeg:
  2132  0000BD                     ??_ADC_Start:
  2133  0000BD                     ??___xxtofl:
  2134  0000BD                     LCD_Write@value:
  2135                           	opt stack 0
  2136  0000BD                     Byte_GetBit@Output:
  2137                           	opt stack 0
  2138  0000BD                     Byte_SetZone@pChunkSize:
  2139                           	opt stack 0
  2140  0000BD                     Byte_GetZone@pChunkSize:
  2141                           	opt stack 0
  2142  0000BD                     reverse@tempVar:
  2143                           	opt stack 0
  2144  0000BD                     ___awdiv@counter:
  2145                           	opt stack 0
  2146  0000BD                     ___lwdiv@counter:
  2147                           	opt stack 0
  2148  0000BD                     HMI_SetSegments@in:
  2149                           	opt stack 0
  2150  0000BD                     ADC_Init@pInput:
  2151                           	opt stack 0
  2152  0000BD                     ___wmul@product:
  2153                           	opt stack 0
  2154  0000BD                     ___lldiv@divisor:
  2155                           	opt stack 0
  2156  0000BD                     ___fldiv@a:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0x4
  2160  0000BD                     	ds	1
  2161  0000BE                     ??_Byte_GetZone:
  2162  0000BE                     ?_Console_MakeField:
  2163                           	opt stack 0
  2164  0000BE                     Set_Addr_Window@ys:
  2165                           	opt stack 0
  2166  0000BE                     Set_Rotation@m:
  2167                           	opt stack 0
  2168  0000BE                     Port_GetPin@Output:
  2169                           	opt stack 0
  2170  0000BE                     Port_GetQuad@Output:
  2171                           	opt stack 0
  2172  0000BE                     Byte_SetZone@pValue:
  2173                           	opt stack 0
  2174  0000BE                     rx_assign@packetID:
  2175                           	opt stack 0
  2176  0000BE                     ___awdiv@sign:
  2177                           	opt stack 0
  2178  0000BE                     LCD_Word_Write@value:
  2179                           	opt stack 0
  2180  0000BE                     reverse@iterator:
  2181                           	opt stack 0
  2182  0000BE                     Motor_Move@pDelta:
  2183                           	opt stack 0
  2184  0000BE                     ___lwdiv@quotient:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x5
  2188  0000BE                     	ds	1
  2189  0000BF                     ?_irobot_query_and_update:
  2190                           	opt stack 0
  2191  0000BF                     ??_Byte_SetZone:
  2192  0000BF                     Set_Addr_Window@xe:
  2193                           	opt stack 0
  2194  0000BF                     Set_Rotation@rotation:
  2195                           	opt stack 0
  2196  0000BF                     Byte_GetZone@MASK:
  2197                           	opt stack 0
  2198  0000BF                     OutSeg@pInput:
  2199                           	opt stack 0
  2200  0000BF                     HMI_SetButton@pValue:
  2201                           	opt stack 0
  2202  0000BF                     ADC_Init@pChannel:
  2203                           	opt stack 0
  2204  0000BF                     MXK_BlockSwitchTo@CUR:
  2205                           	opt stack 0
  2206  0000BF                     MXK_SwitchTo@CUR:
  2207                           	opt stack 0
  2208  0000BF                     ___awdiv@quotient:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x6
  2212  0000BF                     	ds	1
  2213  0000C0                     ??_Console_MakeField:
  2214  0000C0                     ?___lwmod:
  2215                           	opt stack 0
  2216  0000C0                     Set_Addr_Window@ye:
  2217                           	opt stack 0
  2218  0000C0                     Byte_GetZone@Offset:
  2219                           	opt stack 0
  2220  0000C0                     OutSeg@out:
  2221                           	opt stack 0
  2222  0000C0                     HMI_SetButton@v:
  2223                           	opt stack 0
  2224  0000C0                     MXK_BlockSwitchTo@pModule:
  2225                           	opt stack 0
  2226  0000C0                     MXK_SwitchTo@pModule:
  2227                           	opt stack 0
  2228  0000C0                     ___lwmod@dividend:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x7
  2232  0000C0                     	ds	1
  2233  0000C1                     ??___fldiv:
  2234  0000C1                     ??_Console_Tab:
  2235  0000C1                     Set_Addr_Window@xs:
  2236                           	opt stack 0
  2237  0000C1                     Byte_GetZone@Output:
  2238                           	opt stack 0
  2239  0000C1                     ___xxtofl@sign:
  2240                           	opt stack 0
  2241  0000C1                     HMI_Render@a:
  2242                           	opt stack 0
  2243  0000C1                     ___lldiv@quotient:
  2244                           	opt stack 0
  2245                           
  2246                           ; 4 bytes @ 0x8
  2247  0000C1                     	ds	1
  2248  0000C2                     Byte_SetZone@Offset:
  2249                           	opt stack 0
  2250  0000C2                     ___xxtofl@exp:
  2251                           	opt stack 0
  2252  0000C2                     LCD_Fill@pColour:
  2253                           	opt stack 0
  2254  0000C2                     LCD_FillRectangle@pColour:
  2255                           	opt stack 0
  2256  0000C2                     Byte_GetPair@pInput:
  2257                           	opt stack 0
  2258  0000C2                     Console_MakeField@Index:
  2259                           	opt stack 0
  2260  0000C2                     ___lwmod@divisor:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x9
  2264  0000C2                     	ds	1
  2265  0000C3                     ??_load_iRScriptStack:
  2266  0000C3                     Byte_SetZone@MASK:
  2267                           	opt stack 0
  2268  0000C3                     ___xxtofl@arg:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0xA
  2272  0000C3                     	ds	1
  2273  0000C4                     LCD_Fill@i:
  2274                           	opt stack 0
  2275  0000C4                     Byte_GetPair@pPair:
  2276                           	opt stack 0
  2277  0000C4                     Console_MakeField@pInput:
  2278                           	opt stack 0
  2279  0000C4                     ___lwmod@counter:
  2280                           	opt stack 0
  2281  0000C4                     Byte_SetPair@pInput:
  2282                           	opt stack 0
  2283  0000C4                     Byte_SetQuad@pInput:
  2284                           	opt stack 0
  2285  0000C4                     LCD_FillRectangle@pPoint:
  2286                           	opt stack 0
  2287                           
  2288                           ; 4 bytes @ 0xB
  2289  0000C4                     	ds	1
  2290  0000C5                     LCD_Fill@j:
  2291                           	opt stack 0
  2292  0000C5                     ___lldiv@counter:
  2293                           	opt stack 0
  2294  0000C5                     ___fldiv@sign:
  2295                           	opt stack 0
  2296  0000C5                     Word_GetPair@pInput:
  2297                           	opt stack 0
  2298  0000C5                     itos@input:
  2299                           	opt stack 0
  2300  0000C5                     Console_MakeField@Column:
  2301                           	opt stack 0
  2302  0000C5                     load_iRScriptStack@loadByte:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0xC
  2306  0000C5                     	ds	1
  2307  0000C6                     Byte_SetPair@pPair:
  2308                           	opt stack 0
  2309  0000C6                     Byte_SetQuad@pQuad:
  2310                           	opt stack 0
  2311  0000C6                     Console_Tab@t:
  2312                           	opt stack 0
  2313  0000C6                     Timer0_Init@pFrequency:
  2314                           	opt stack 0
  2315  0000C6                     Timer2_Init@pFrequency:
  2316                           	opt stack 0
  2317  0000C6                     ___fldiv@rem:
  2318                           	opt stack 0
  2319                           
  2320                           ; 4 bytes @ 0xD
  2321  0000C6                     	ds	1
  2322  0000C7                     ?___flmul:
  2323                           	opt stack 0
  2324  0000C7                     Byte_SetPair@pValue:
  2325                           	opt stack 0
  2326  0000C7                     Byte_SetQuad@pValue:
  2327                           	opt stack 0
  2328  0000C7                     Word_GetPair@pPair:
  2329                           	opt stack 0
  2330  0000C7                     Console_Tab@i:
  2331                           	opt stack 0
  2332  0000C7                     load_iRScriptStack@bytesToLoad:
  2333                           	opt stack 0
  2334  0000C7                     itos@destination:
  2335                           	opt stack 0
  2336  0000C7                     _Console_MakeField$10974:
  2337                           	opt stack 0
  2338  0000C7                     ___flmul@b:
  2339                           	opt stack 0
  2340                           
  2341                           ; 4 bytes @ 0xE
  2342  0000C7                     	ds	1
  2343  0000C8                     Console_Tab@c:
  2344                           	opt stack 0
  2345  0000C8                     load_iRScriptStack@i:
  2346                           	opt stack 0
  2347  0000C8                     Port_SetPin@pInput:
  2348                           	opt stack 0
  2349  0000C8                     Port_Set@pInput:
  2350                           	opt stack 0
  2351  0000C8                     SPI_MinSpeed@pInput:
  2352                           	opt stack 0
  2353  0000C8                     SPI_MaxSpeed@pInput:
  2354                           	opt stack 0
  2355  0000C8                     Word_SetPair@pInput:
  2356                           	opt stack 0
  2357  0000C8                     PortProperty_Valid@pInput:
  2358                           	opt stack 0
  2359  0000C8                     LCD_FillRectangle@pSize:
  2360                           	opt stack 0
  2361                           
  2362                           ; 4 bytes @ 0xF
  2363  0000C8                     	ds	1
  2364  0000C9                     ??_irobot_query_and_update:
  2365  0000C9                     ??_Console_PrintChar:
  2366  0000C9                     Console_MakeField@x:
  2367                           	opt stack 0
  2368  0000C9                     irobot_leds@LEDBit:
  2369                           	opt stack 0
  2370  0000C9                     itos@Data:
  2371                           	opt stack 0
  2372  0000C9                     irobot_move@moveSpeed:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x10
  2376  0000C9                     	ds	1
  2377  0000CA                     ??_Timer2_Init:
  2378  0000CA                     ??_Timer0_Init:
  2379  0000CA                     Port_SetPin@pPin:
  2380                           	opt stack 0
  2381  0000CA                     Port_Set@pValue:
  2382                           	opt stack 0
  2383  0000CA                     Word_SetPair@pPair:
  2384                           	opt stack 0
  2385  0000CA                     PortProperty_Valid@pPinDrive:
  2386                           	opt stack 0
  2387  0000CA                     Console_MakeField@y:
  2388                           	opt stack 0
  2389  0000CA                     irobot_leds@powerColour:
  2390                           	opt stack 0
  2391  0000CA                     ___fldiv@new_exp:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x11
  2395  0000CA                     	ds	1
  2396  0000CB                     ??_Port_Set:
  2397  0000CB                     Port_SetPin@pValue:
  2398                           	opt stack 0
  2399  0000CB                     Word_SetPair@pValue:
  2400                           	opt stack 0
  2401  0000CB                     PortProperty_Valid@pPin:
  2402                           	opt stack 0
  2403  0000CB                     irobot_leds@powerLuminosity:
  2404                           	opt stack 0
  2405  0000CB                     LCD_DrawField@pField:
  2406                           	opt stack 0
  2407  0000CB                     itos@Length:
  2408                           	opt stack 0
  2409  0000CB                     irobot_move@moveTurnRadius:
  2410                           	opt stack 0
  2411  0000CB                     Timer2_Init@RDIV:
  2412                           	opt stack 0
  2413  0000CB                     ___flmul@a:
  2414                           	opt stack 0
  2415                           
  2416                           ; 4 bytes @ 0x12
  2417  0000CB                     	ds	1
  2418  0000CC                     ??_PortProperty_Valid:
  2419  0000CC                     ??_LCD_FillRectangle:
  2420  0000CC                     Port_SetPin@Type:
  2421                           	opt stack 0
  2422  0000CC                     Console_PrintChar@pInput:
  2423                           	opt stack 0
  2424  0000CC                     irobot_leds@isScript:
  2425                           	opt stack 0
  2426  0000CC                     Timer0_Init@pCPUClock:
  2427                           	opt stack 0
  2428  0000CC                     ___fldiv@grs:
  2429                           	opt stack 0
  2430                           
  2431                           ; 4 bytes @ 0x13
  2432  0000CC                     	ds	1
  2433  0000CD                     ??_irobot_move:
  2434  0000CD                     LED_Set@pValue:
  2435                           	opt stack 0
  2436  0000CD                     putch@c:
  2437                           	opt stack 0
  2438  0000CD                     irobot_led_power_on@powerOnColour:
  2439                           	opt stack 0
  2440  0000CD                     Port_TogglePin@pInput:
  2441                           	opt stack 0
  2442  0000CD                     itos@Out:
  2443                           	opt stack 0
  2444  0000CD                     LCD_DrawField@pPoint:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x14
  2448  0000CD                     	ds	1
  2449  0000CE                     ?_printf:
  2450                           	opt stack 0
  2451  0000CE                     LCD_FillRectangle@i:
  2452                           	opt stack 0
  2453  0000CE                     LED_Set@pLED:
  2454                           	opt stack 0
  2455  0000CE                     irobot_query_and_update@packetIDs:
  2456                           	opt stack 0
  2457  0000CE                     printf@f:
  2458                           	opt stack 0
  2459  0000CE                     PortProperty_Valid@Errors:
  2460                           	opt stack 0
  2461                           
  2462                           ; 16 bytes @ 0x15
  2463  0000CE                     	ds	1
  2464  0000CF                     ??___flmul:
  2465  0000CF                     LCD_FillRectangle@j:
  2466                           	opt stack 0
  2467  0000CF                     Port_TogglePin@pPin:
  2468                           	opt stack 0
  2469  0000CF                     HMI_SetNumber@pInput:
  2470                           	opt stack 0
  2471  0000CF                     Timer2_Init@pCPUClock:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x16
  2475  0000CF                     	ds	1
  2476  0000D0                     Port_TogglePin@Value:
  2477                           	opt stack 0
  2478  0000D0                     irobot_query_and_update@streamSize:
  2479                           	opt stack 0
  2480  0000D0                     ___fldiv@bexp:
  2481                           	opt stack 0
  2482  0000D0                     Timer0_Init@DIVIDE:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x17
  2486  0000D0                     	ds	1
  2487  0000D1                     LED_Toggle@pLED:
  2488                           	opt stack 0
  2489  0000D1                     irobot_query_and_update@numberOfPacketRequests:
  2490                           	opt stack 0
  2491  0000D1                     irobot_move@isScript:
  2492                           	opt stack 0
  2493  0000D1                     ___fldiv@aexp:
  2494                           	opt stack 0
  2495  0000D1                     LCD_DrawField@pSize:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x18
  2499  0000D1                     	ds	1
  2500  0000D2                     Event_DIPSwitch@pState:
  2501                           	opt stack 0
  2502  0000D2                     Event_TestButton@pState:
  2503                           	opt stack 0
  2504  0000D2                     irobot_query_and_update@packetVariable:
  2505                           	opt stack 0
  2506  0000D2                     irobot_stop_motion@isScript:
  2507                           	opt stack 0
  2508  0000D2                     irobot_move_straight@straightSpeed:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x19
  2512  0000D2                     	ds	1
  2513  0000D3                     Event_DIPSwitch@Bar:
  2514                           	opt stack 0
  2515  0000D3                     irobot_query_and_update@j:
  2516                           	opt stack 0
  2517  0000D3                     ___flmul@sign:
  2518                           	opt stack 0
  2519  0000D3                     Timer2_Init@DIVIDE:
  2520                           	opt stack 0
  2521                           
  2522                           ; 4 bytes @ 0x1A
  2523  0000D3                     	ds	1
  2524  0000D4                     irobot_query_and_update@startIndex:
  2525                           	opt stack 0
  2526  0000D4                     ___flmul@aexp:
  2527                           	opt stack 0
  2528  0000D4                     Button_Poll@pButton:
  2529                           	opt stack 0
  2530  0000D4                     Motor_Speed@pMotor:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1B
  2534  0000D4                     	ds	1
  2535  0000D5                     ??_LCD_DrawField:
  2536  0000D5                     irobot_query_and_update@i:
  2537                           	opt stack 0
  2538  0000D5                     ___flmul@grs:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0x1C
  2542  0000D5                     	ds	1
  2543  0000D6                     Button_Poll@pIncrement:
  2544                           	opt stack 0
  2545  0000D6                     Motor_Speed@pFrequency:
  2546                           	opt stack 0
  2547  0000D6                     irobot_rotate@rotateAngle:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x1D
  2551  0000D6                     	ds	1
  2552  0000D7                     ??_Button_Poll:
  2553  0000D7                     LCD_DrawField@count:
  2554                           	opt stack 0
  2555                           
  2556                           ; 2 bytes @ 0x1E
  2557  0000D7                     	ds	1
  2558  0000D8                     irobot_rotate@rotateSpeed:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x1F
  2562  0000D8                     	ds	1
  2563  0000D9                     LCD_DrawField@xmax:
  2564                           	opt stack 0
  2565  0000D9                     ___flmul@bexp:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x20
  2569  0000D9                     	ds	1
  2570  0000DA                     ??_printf:
  2571  0000DA                     ??_irobot_rotate:
  2572  0000DA                     LCD_DrawField@ymax:
  2573                           	opt stack 0
  2574  0000DA                     ___flmul@prod:
  2575                           	opt stack 0
  2576                           
  2577                           ; 4 bytes @ 0x21
  2578  0000DA                     	ds	1
  2579  0000DB                     LCD_DrawField@i:
  2580                           	opt stack 0
  2581  0000DB                     printf@prec:
  2582                           	opt stack 0
  2583  0000DB                     Port_Set@TypeRequired:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x22
  2587  0000DB                     	ds	1
  2588  0000DC                     ??_Console_Render:
  2589  0000DC                     Button_Poll@Pin:
  2590                           	opt stack 0
  2591  0000DC                     irobot_rotate@isScript:
  2592                           	opt stack 0
  2593  0000DC                     printf@flag:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x23
  2597  0000DC                     	ds	1
  2598  0000DD                     Port_Set@TypeActual:
  2599                           	opt stack 0
  2600  0000DD                     irobot_rotate@rotateDirection:
  2601                           	opt stack 0
  2602  0000DD                     printf@ap:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x24
  2606  0000DD                     	ds	1
  2607  0000DE                     PortProperty_Valid@Pair:
  2608                           	opt stack 0
  2609  0000DE                     Console_Render@temp:
  2610                           	opt stack 0
  2611  0000DE                     ___flmul@temp:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x25
  2615  0000DE                     	ds	1
  2616  0000DF                     Port_Set@Type:
  2617                           	opt stack 0
  2618  0000DF                     Port_CheckPairType@pInput:
  2619                           	opt stack 0
  2620  0000DF                     Port_SetPinType@pInput:
  2621                           	opt stack 0
  2622  0000DF                     irobot_rotate@angleTotal:
  2623                           	opt stack 0
  2624  0000DF                     printf@val:
  2625                           	opt stack 0
  2626  0000DF                     Console_Render@lCursor:
  2627                           	opt stack 0
  2628                           
  2629                           ; 4 bytes @ 0x26
  2630  0000DF                     	ds	1
  2631  0000E0                     ?_ADC_Voltage:
  2632                           	opt stack 0
  2633  0000E0                     ADC_Voltage@pInput:
  2634                           	opt stack 0
  2635                           
  2636                           ; 2 bytes @ 0x27
  2637  0000E0                     	ds	1
  2638  0000E1                     Port_CheckPairType@pPair:
  2639                           	opt stack 0
  2640  0000E1                     Port_SetPinType@pPin:
  2641                           	opt stack 0
  2642  0000E1                     printf@c:
  2643                           	opt stack 0
  2644                           
  2645                           ; 1 bytes @ 0x28
  2646  0000E1                     	ds	1
  2647  0000E2                     Port_CheckPairType@pDrive:
  2648                           	opt stack 0
  2649  0000E2                     Port_SetPinType@pType:
  2650                           	opt stack 0
  2651                           
  2652                           ; 1 bytes @ 0x29
  2653  0000E2                     	ds	1
  2654  0000E3                     Port_CheckPairType@Pin1:
  2655                           	opt stack 0
  2656  0000E3                     Port_SetPinType@Output:
  2657                           	opt stack 0
  2658  0000E3                     Console_Render@x:
  2659                           	opt stack 0
  2660                           
  2661                           ; 1 bytes @ 0x2A
  2662  0000E3                     	ds	1
  2663  0000E4                     ??_ADC_Voltage:
  2664  0000E4                     Port_CheckPairType@Pin2:
  2665                           	opt stack 0
  2666  0000E4                     Console_Render@y:
  2667                           	opt stack 0
  2668  0000E4                     Port_SetPinType@Props:
  2669                           	opt stack 0
  2670                           
  2671                           ; 2 bytes @ 0x2B
  2672  0000E4                     	ds	1
  2673  0000E5                     Port_CheckPairType@Output:
  2674                           	opt stack 0
  2675                           
  2676                           ; 1 bytes @ 0x2C
  2677  0000E5                     	ds	1
  2678  0000E6                     LED_Init@pLED:
  2679                           	opt stack 0
  2680  0000E6                     Port_CheckPairType@Props:
  2681                           	opt stack 0
  2682  0000E6                     Motor_Init@pMotor:
  2683                           	opt stack 0
  2684  0000E6                     SPI_Init@pClock:
  2685                           	opt stack 0
  2686  0000E6                     ADC_Voltage@max:
  2687                           	opt stack 0
  2688                           
  2689                           ; 4 bytes @ 0x2D
  2690  0000E6                     	ds	2
  2691  0000E8                     Port_CheckQuadType@pInput:
  2692                           	opt stack 0
  2693  0000E8                     Motor_Init@pAddress:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x2F
  2697  0000E8                     	ds	2
  2698  0000EA                     Port_CheckQuadType@pQuad:
  2699                           	opt stack 0
  2700  0000EA                     SPI_Init@pChannel:
  2701                           	opt stack 0
  2702  0000EA                     ADC_Voltage@ref:
  2703                           	opt stack 0
  2704                           
  2705                           ; 4 bytes @ 0x31
  2706  0000EA                     	ds	1
  2707  0000EB                     Port_CheckQuadType@pDrive:
  2708                           	opt stack 0
  2709  0000EB                     SPI_Init@pMode:
  2710                           	opt stack 0
  2711                           
  2712                           ; 1 bytes @ 0x32
  2713  0000EB                     	ds	1
  2714  0000EC                     Port_CheckQuadType@Pair1:
  2715                           	opt stack 0
  2716  0000EC                     SPI_Init@pInput:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x33
  2720  0000EC                     	ds	1
  2721  0000ED                     Port_CheckQuadType@Pair2:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0x34
  2725  0000ED                     	ds	1
  2726  0000EE                     ??_LCD_Init:
  2727  0000EE                     Port_CheckQuadType@Output:
  2728                           	opt stack 0
  2729  0000EE                     ADC_Voltage@output:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x35
  2733  0000EE                     	ds	1
  2734  0000EF                     Port_CheckPortType@pInput:
  2735                           	opt stack 0
  2736  0000EF                     Port_SetQuadType@pInput:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x36
  2740  0000EF                     	ds	1
  2741  0000F0                     LCD_Init@i:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x37
  2745  0000F0                     	ds	1
  2746  0000F1                     Port_CheckPortType@pDrive:
  2747                           	opt stack 0
  2748  0000F1                     Port_SetQuadType@pQuad:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x38
  2752  0000F1                     	ds	1
  2753  0000F2                     ?___fltol:
  2754                           	opt stack 0
  2755  0000F2                     Port_CheckPortType@Output:
  2756                           	opt stack 0
  2757  0000F2                     Port_SetQuadType@pType:
  2758                           	opt stack 0
  2759  0000F2                     ___fltol@f1:
  2760                           	opt stack 0
  2761                           
  2762                           ; 4 bytes @ 0x39
  2763  0000F2                     	ds	1
  2764  0000F3                     Port_SetQuadType@Output:
  2765                           	opt stack 0
  2766  0000F3                     Port_SetType@pInput:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0x3A
  2770  0000F3                     	ds	1
  2771  0000F4                     HMI_Init@in:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x3B
  2775  0000F4                     	ds	1
  2776  0000F5                     Port_SetType@pType:
  2777                           	opt stack 0
  2778                           
  2779                           ; 1 bytes @ 0x3C
  2780  0000F5                     	ds	1
  2781  0000F6                     ??_Port_SetType:
  2782  0000F6                     ___fltol@sign1:
  2783                           	opt stack 0
  2784                           
  2785                           ; 1 bytes @ 0x3D
  2786  0000F6                     	ds	1
  2787  0000F7                     ___fltol@exp1:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0x3E
  2791  0000F7                     	ds	1
  2792  0000F8                     ??_move_and_rotate:
  2793  0000F8                     Port_SetType@Output:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0x3F
  2797  0000F8                     	ds	1
  2798  0000F9                     tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           postinc0	equ	0xFEE
  2803                           wreg	equ	0xFE8
  2804                           postdec1	equ	0xFE5
  2805                           fsr1h	equ	0xFE2
  2806                           fsr1l	equ	0xFE1
  2807                           
  2808                           ; 1 bytes @ 0x40
  2809                           
  2810                           	psect	cstackCOMRAM
  2811  000001                     __pcstackCOMRAM:
  2812                           	opt stack 0
  2813  000001                     i2Byte_SetBit@pInput:
  2814                           	opt stack 0
  2815  000001                     i2Byte_GetZone@pInput:
  2816                           	opt stack 0
  2817  000001                     i2delay_us@us:
  2818                           	opt stack 0
  2819  000001                     i2MXK_Queue@pCallback:
  2820                           	opt stack 0
  2821                           
  2822                           ; 3 bytes @ 0x0
  2823  000001                     	ds	2
  2824  000003                     i2Byte_SetBit@pBit:
  2825                           	opt stack 0
  2826  000003                     i2Byte_GetZone@pMax:
  2827                           	opt stack 0
  2828  000003                     i2delay_us@u:
  2829                           	opt stack 0
  2830                           
  2831                           ; 4 bytes @ 0x2
  2832  000003                     	ds	1
  2833  000004                     i2Byte_SetBit@pValue:
  2834                           	opt stack 0
  2835  000004                     i2Byte_GetZone@pChunk:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x3
  2839  000004                     	ds	1
  2840  000005                     ??i2_Byte_SetBit:
  2841  000005                     i2Byte_GetZone@pChunkSize:
  2842                           	opt stack 0
  2843                           
  2844                           ; 1 bytes @ 0x4
  2845  000005                     	ds	1
  2846  000006                     ??i2_Byte_GetZone:
  2847                           
  2848                           ; 1 bytes @ 0x5
  2849  000006                     	ds	1
  2850  000007                     i2Byte_GetZone@MASK:
  2851                           	opt stack 0
  2852  000007                     i2MXK_SwitchTo@CUR:
  2853                           	opt stack 0
  2854                           
  2855                           ; 1 bytes @ 0x6
  2856  000007                     	ds	1
  2857  000008                     i2Byte_GetZone@Offset:
  2858                           	opt stack 0
  2859  000008                     i2MXK_SwitchTo@pModule:
  2860                           	opt stack 0
  2861                           
  2862                           ; 1 bytes @ 0x7
  2863  000008                     	ds	1
  2864  000009                     i2Byte_GetZone@Output:
  2865                           	opt stack 0
  2866                           
  2867                           ; 1 bytes @ 0x8
  2868  000009                     	ds	1
  2869  00000A                     i2Byte_GetPair@pInput:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0x9
  2873  00000A                     	ds	2
  2874  00000C                     i2Byte_GetPair@pPair:
  2875                           	opt stack 0
  2876                           
  2877                           ; 1 bytes @ 0xB
  2878  00000C                     	ds	1
  2879  00000D                     i2Word_GetPair@pInput:
  2880                           	opt stack 0
  2881                           
  2882                           ; 2 bytes @ 0xC
  2883  00000D                     	ds	2
  2884  00000F                     i2Word_GetPair@pPair:
  2885                           	opt stack 0
  2886                           
  2887                           ; 1 bytes @ 0xE
  2888  00000F                     	ds	1
  2889  000010                     i2Port_SetPin@pInput:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0xF
  2893  000010                     	ds	2
  2894  000012                     i2Port_SetPin@pPin:
  2895                           	opt stack 0
  2896                           
  2897                           ; 1 bytes @ 0x11
  2898  000012                     	ds	1
  2899  000013                     i2Port_SetPin@pValue:
  2900                           	opt stack 0
  2901                           
  2902                           ; 1 bytes @ 0x12
  2903  000013                     	ds	1
  2904  000014                     i2Port_SetPin@Type:
  2905                           	opt stack 0
  2906                           
  2907                           ; 1 bytes @ 0x13
  2908  000014                     	ds	1
  2909  000015                     
  2910                           ; 1 bytes @ 0x14
  2911  000015                     	ds	2
  2912  000017                     ??_ISR_Function:
  2913                           
  2914                           ; 1 bytes @ 0x16
  2915  000017                     	ds	18
  2916                           tblptru	equ	0xFF8
  2917                           tblptrh	equ	0xFF7
  2918                           tblptrl	equ	0xFF6
  2919                           tablat	equ	0xFF5
  2920                           postinc0	equ	0xFEE
  2921                           wreg	equ	0xFE8
  2922                           postdec1	equ	0xFE5
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           
  2926 ;;
  2927 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2928 ;;
  2929 ;; *************** function _main *****************
  2930 ;; Defined at:
  2931 ;;		line 447 in file "main.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;Total ram usage:        2 bytes
  2950 ;; Hardware stack levels required when called:   18
  2951 ;; This function calls:
  2952 ;;		_Console_Render
  2953 ;;		_HMI_Poll
  2954 ;;		_MXK_Dequeue
  2955 ;;		_MXK_Release
  2956 ;;		_MXK_SwitchTo
  2957 ;;		_getMode
  2958 ;;		_init
  2959 ;;		_measureAndDisplayDistance
  2960 ;;		_mode1
  2961 ;;		_mode2
  2962 ;;		_mode3
  2963 ;;		_mode4
  2964 ;;		_printf
  2965 ;; This function is called by:
  2966 ;;		Startup code after reset
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text0
  2971  014016                     __ptext0:
  2972                           	opt stack 0
  2973  014016                     _main:
  2974                           	opt stack 13
  2975                           
  2976                           ;main.c: 448: init();
  2977                           
  2978                           ;incstack = 0
  2979  014016  ECED  F0A6         	call	_init	;wreg free
  2980  01401A                     l2442:
  2981                           
  2982                           ;main.c: 450: getMode();
  2983  01401A  ECBF  F0A3         	call	_getMode	;wreg free
  2984                           
  2985                           ;main.c: 451: switch (mode) {
  2986  01401E  D053               	goto	l2443
  2987  014020                     
  2988                           ;main.c: 453: mode1();
  2989  014020  ECBC  F088         	call	_mode1	;wreg free
  2990                           
  2991                           ;main.c: 454: break;
  2992  014024  D068               	goto	l2445
  2993  014026                     
  2994                           ;main.c: 456: mode2();
  2995  014026  EC96  F09F         	call	_mode2	;wreg free
  2996                           
  2997                           ;main.c: 457: break;
  2998  01402A  D065               	goto	l2445
  2999  01402C                     
  3000                           ;main.c: 459: mode3();
  3001  01402C  EC2E  F0B3         	call	_mode3	;wreg free
  3002                           
  3003                           ;main.c: 460: break;
  3004  014030  D062               	goto	l2445
  3005  014032                     
  3006                           ;main.c: 462: mode4();
  3007  014032  EC0C  F09D         	call	_mode4	;wreg free
  3008                           
  3009                           ;main.c: 463: break;
  3010  014036  D05F               	goto	l2445
  3011  014038                     
  3012                           ;main.c: 465: if (MXK_SwitchTo(eMXK_HMI)) {
  3013  014038  0E01               	movlw	1
  3014  01403A  EC51  F0B2         	call	_MXK_SwitchTo
  3015  01403E  0900               	iorlw	0
  3016  014040  B4D8               	btfsc	status,2,c
  3017  014042  D059               	goto	l2445
  3018                           
  3019                           ;main.c: 466: printf("%c", (char)35);
  3020  014044  0EFB               	movlw	low STR_1
  3021  014046  0100               	movlb	0	; () banked
  3022  014048  6FCE               	movwf	printf@f& (0+255),b
  3023  01404A  0EFF               	movlw	high STR_1
  3024  01404C  0100               	movlb	0	; () banked
  3025  01404E  6FCF               	movwf	(printf@f+1)& (0+255),b
  3026  014050  0E00               	movlw	0
  3027  014052  0100               	movlb	0	; () banked
  3028  014054  6FD1               	movwf	(?_printf+3)& (0+255),b
  3029  014056  0E23               	movlw	35
  3030  014058  6FD0               	movwf	(?_printf+2)& (0+255),b
  3031  01405A  ECD1  F094         	call	_printf	;wreg free
  3032                           
  3033                           ;main.c: 467: printf("Please select mode.\n");
  3034  01405E  0ED8               	movlw	low STR_16
  3035  014060  0100               	movlb	0	; () banked
  3036  014062  6FCE               	movwf	printf@f& (0+255),b
  3037  014064  0EFF               	movlw	high STR_16
  3038  014066  0100               	movlb	0	; () banked
  3039  014068  6FCF               	movwf	(printf@f+1)& (0+255),b
  3040  01406A  ECD1  F094         	call	_printf	;wreg free
  3041                           
  3042                           ;main.c: 468: printf("                   \n");
  3043  01406E  0EC3               	movlw	low STR_17
  3044  014070  0100               	movlb	0	; () banked
  3045  014072  6FCE               	movwf	printf@f& (0+255),b
  3046  014074  0EFF               	movlw	high STR_17
  3047  014076  0100               	movlb	0	; () banked
  3048  014078  6FCF               	movwf	(printf@f+1)& (0+255),b
  3049  01407A  ECD1  F094         	call	_printf	;wreg free
  3050                           
  3051                           ;main.c: 469: printf("                   \n");
  3052  01407E  0EC3               	movlw	low STR_17
  3053  014080  0100               	movlb	0	; () banked
  3054  014082  6FCE               	movwf	printf@f& (0+255),b
  3055  014084  0EFF               	movlw	high STR_17
  3056  014086  0100               	movlb	0	; () banked
  3057  014088  6FCF               	movwf	(printf@f+1)& (0+255),b
  3058  01408A  ECD1  F094         	call	_printf	;wreg free
  3059                           
  3060                           ;main.c: 470: printf("                   \n");
  3061  01408E  0EC3               	movlw	low STR_17
  3062  014090  0100               	movlb	0	; () banked
  3063  014092  6FCE               	movwf	printf@f& (0+255),b
  3064  014094  0EFF               	movlw	high STR_17
  3065  014096  0100               	movlb	0	; () banked
  3066  014098  6FCF               	movwf	(printf@f+1)& (0+255),b
  3067  01409A  ECD1  F094         	call	_printf	;wreg free
  3068                           
  3069                           ;main.c: 471: printf("                   \n");
  3070  01409E  0EC3               	movlw	low STR_17
  3071  0140A0  0100               	movlb	0	; () banked
  3072  0140A2  6FCE               	movwf	printf@f& (0+255),b
  3073  0140A4  0EFF               	movlw	high STR_17
  3074  0140A6  0100               	movlb	0	; () banked
  3075  0140A8  6FCF               	movwf	(printf@f+1)& (0+255),b
  3076  0140AA  ECD1  F094         	call	_printf	;wreg free
  3077                           
  3078                           ;main.c: 472: Console_Render();
  3079  0140AE  ECE5  F091         	call	_Console_Render	;wreg free
  3080                           
  3081                           ;main.c: 473: HMI_Poll();
  3082  0140B2  EC47  F0AD         	call	_HMI_Poll	;wreg free
  3083                           
  3084                           ;main.c: 474: if (MXK_Release())
  3085  0140B6  EC9D  F0B5         	call	_MXK_Release	;wreg free
  3086  0140BA  0900               	iorlw	0
  3087  0140BC  B4D8               	btfsc	status,2,c
  3088  0140BE  D01B               	goto	l2445
  3089                           
  3090                           ;main.c: 475: MXK_Dequeue();
  3091  0140C0  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3092                           
  3093                           ;main.c: 476: }
  3094                           ;main.c: 477: }
  3095  0140C4  D018               	goto	l2445
  3096  0140C6                     l2443:
  3097  0140C6  C33C  F4B0         	movff	_mode,??_main
  3098  0140CA  C33D  F4B1         	movff	_mode+1,??_main+1
  3099                           
  3100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3101                           ; Switch size 1, requested type "space"
  3102                           ; Number of cases is 1, Range of values is 0 to 0
  3103                           ; switch strategies available:
  3104                           ; Name         Instructions Cycles
  3105                           ; simple_byte            4     3 (average)
  3106                           ;	Chosen strategy is simple_byte
  3107  0140CE  0104               	movlb	4	; () banked
  3108  0140D0  51B1               	movf	(??_main+1)& (0+255),w,b
  3109  0140D2  0A00               	xorlw	0	; case 0
  3110  0140D4  A4D8               	btfss	status,2,c
  3111  0140D6  D7B0               	goto	l2449
  3112                           
  3113                           ; BSR set to: 4
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 4, Range of values is 1 to 4
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte           13     7 (average)
  3119                           ;	Chosen strategy is simple_byte
  3120  0140D8  0104               	movlb	4	; () banked
  3121  0140DA  51B0               	movf	??_main& (0+255),w,b
  3122  0140DC  0A01               	xorlw	1	; case 1
  3123  0140DE  B4D8               	btfsc	status,2,c
  3124  0140E0  D79F               	goto	l2444
  3125  0140E2  0A03               	xorlw	3	; case 2
  3126  0140E4  B4D8               	btfsc	status,2,c
  3127  0140E6  D79F               	goto	l2446
  3128  0140E8  0A01               	xorlw	1	; case 3
  3129  0140EA  B4D8               	btfsc	status,2,c
  3130  0140EC  D79F               	goto	l2447
  3131  0140EE  0A07               	xorlw	7	; case 4
  3132  0140F0  B4D8               	btfsc	status,2,c
  3133  0140F2  D79F               	goto	l2448
  3134  0140F4  D7A1               	goto	l2449
  3135  0140F6                     l2445:
  3136                           
  3137                           ;main.c: 478: measureAndDisplayDistance();
  3138                           
  3139                           ; BSR set to: 4
  3140  0140F6  ECDC  F0A8         	call	_measureAndDisplayDistance	;wreg free
  3141                           
  3142                           ;main.c: 479: }
  3143  0140FA  D78F               	goto	l2442
  3144  0140FC                     __end_of_main:
  3145                           	opt stack 0
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           postdec1	equ	0xFE5
  3153                           fsr1h	equ	0xFE2
  3154                           fsr1l	equ	0xFE1
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function _mode4 *****************
  3158 ;; Defined at:
  3159 ;;		line 421 in file "main.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;		None
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;		None
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;Total ram usage:        0 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:   17
  3180 ;; This function calls:
  3181 ;;		_Console_Render
  3182 ;;		_MXK_Dequeue
  3183 ;;		_MXK_Release
  3184 ;;		_MXK_SwitchTo
  3185 ;;		_delay_ms
  3186 ;;		_findClosestWall
  3187 ;;		_irobot_move_straight
  3188 ;;		_irobot_song_play
  3189 ;;		_irobot_stop_motion
  3190 ;;		_printf
  3191 ;;		_safeToGo
  3192 ;;		_update_bump_and_cliff
  3193 ;;		_update_distance
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text1
  3200  013A18                     __ptext1:
  3201                           	opt stack 0
  3202  013A18                     _mode4:
  3203                           	opt stack 13
  3204                           
  3205                           ;main.c: 422: safeToGo();
  3206                           
  3207                           ;incstack = 0
  3208  013A18  EC10  F0B1         	call	_safeToGo	;wreg free
  3209                           
  3210                           ;main.c: 423: findClosestWall();
  3211  013A1C  EC00  F080         	call	_findClosestWall	;wreg free
  3212                           
  3213                           ;main.c: 424: delay_ms(100);
  3214  013A20  0E00               	movlw	0
  3215  013A22  0100               	movlb	0	; () banked
  3216  013A24  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
  3217  013A26  0E64               	movlw	100
  3218  013A28  6FB9               	movwf	delay_ms@ms& (0+255),b
  3219  013A2A  EC5A  F0AE         	call	_delay_ms	;wreg free
  3220                           
  3221                           ;main.c: 425: irobot_move_straight(200);
  3222  013A2E  0E00               	movlw	0
  3223  013A30  0100               	movlb	0	; () banked
  3224  013A32  6FD3               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3225  013A34  0EC8               	movlw	200
  3226  013A36  6FD2               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3227  013A38  ECC6  F0B5         	call	_irobot_move_straight	;wreg free
  3228                           
  3229                           ;main.c: 426: dist = 0;
  3230  013A3C  0E00               	movlw	0
  3231  013A3E  0100               	movlb	0	; () banked
  3232  013A40  6F6A               	movwf	(_dist+1)& (0+255),b
  3233  013A42  0E00               	movlw	0
  3234  013A44  6F69               	movwf	_dist& (0+255),b
  3235                           
  3236                           ;main.c: 427: while (dist < 300 && !iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDro
      +                          pLeft) {
  3237  013A46  D00C               	goto	l2430
  3238  013A48                     
  3239                           ; BSR set to: 0
  3240                           ;main.c: 428: update_distance();
  3241                           
  3242                           ; BSR set to: 0
  3243  013A48  EC3A  F0B6         	call	_update_distance	;wreg free
  3244                           
  3245                           ;main.c: 429: dist += iRDistance;
  3246  013A4C  0100               	movlb	0	; () banked
  3247  013A4E  5177               	movf	_iRDistance& (0+255),w,b
  3248  013A50  0100               	movlb	0	; () banked
  3249  013A52  2769               	addwf	_dist& (0+255),f,b
  3250  013A54  0100               	movlb	0	; () banked
  3251  013A56  5178               	movf	(_iRDistance+1)& (0+255),w,b
  3252  013A58  0100               	movlb	0	; () banked
  3253  013A5A  236A               	addwfc	(_dist+1)& (0+255),f,b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 430: update_bump_and_cliff();
  3257  013A5C  EC6A  F0B3         	call	_update_bump_and_cliff	;wreg free
  3258  013A60                     l2430:
  3259  013A60  0100               	movlb	0	; () banked
  3260  013A62  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3261  013A64  D008               	goto	u15110
  3262  013A66  0E2C               	movlw	44
  3263  013A68  0100               	movlb	0	; () banked
  3264  013A6A  5D69               	subwf	_dist& (0+255),w,b
  3265  013A6C  0E01               	movlw	1
  3266  013A6E  0100               	movlb	0	; () banked
  3267  013A70  596A               	subwfb	(_dist+1)& (0+255),w,b
  3268  013A72  B0D8               	btfsc	status,0,c
  3269  013A74  D010               	goto	u15150
  3270  013A76                     u15110:
  3271                           
  3272                           ; BSR set to: 0
  3273  013A76  0100               	movlb	0	; () banked
  3274  013A78  5186               	movf	_iRBumpLeft& (0+255),w,b
  3275  013A7A  A4D8               	btfss	status,2,c
  3276  013A7C  D00C               	goto	u15150
  3277                           
  3278                           ; BSR set to: 0
  3279  013A7E  0100               	movlb	0	; () banked
  3280  013A80  5187               	movf	_iRBumpRight& (0+255),w,b
  3281  013A82  A4D8               	btfss	status,2,c
  3282  013A84  D008               	goto	u15150
  3283                           
  3284                           ; BSR set to: 0
  3285  013A86  0100               	movlb	0	; () banked
  3286  013A88  5185               	movf	_iRDropRight& (0+255),w,b
  3287  013A8A  A4D8               	btfss	status,2,c
  3288  013A8C  D004               	goto	u15150
  3289                           
  3290                           ; BSR set to: 0
  3291  013A8E  0100               	movlb	0	; () banked
  3292  013A90  5184               	movf	_iRDropLeft& (0+255),w,b
  3293  013A92  B4D8               	btfsc	status,2,c
  3294  013A94  D7D9               	goto	l2431
  3295  013A96                     u15150:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;main.c: 431: }
  3299                           ;main.c: 433: irobot_stop_motion(0);
  3300                           
  3301                           ; BSR set to: 0
  3302                           
  3303                           ; BSR set to: 0
  3304  013A96  0E00               	movlw	0
  3305  013A98  ECC6  F0B1         	call	_irobot_stop_motion
  3306                           
  3307                           ;main.c: 434: if (MXK_SwitchTo(eMXK_HMI)) {
  3308  013A9C  0E01               	movlw	1
  3309  013A9E  EC51  F0B2         	call	_MXK_SwitchTo
  3310  013AA2  0900               	iorlw	0
  3311  013AA4  B4D8               	btfsc	status,2,c
  3312  013AA6  D037               	goto	l2436
  3313                           
  3314                           ;main.c: 435: printf("%c", (char)35);
  3315  013AA8  0EFB               	movlw	low STR_1
  3316  013AAA  0100               	movlb	0	; () banked
  3317  013AAC  6FCE               	movwf	printf@f& (0+255),b
  3318  013AAE  0EFF               	movlw	high STR_1
  3319  013AB0  0100               	movlb	0	; () banked
  3320  013AB2  6FCF               	movwf	(printf@f+1)& (0+255),b
  3321  013AB4  0E00               	movlw	0
  3322  013AB6  0100               	movlb	0	; () banked
  3323  013AB8  6FD1               	movwf	(?_printf+3)& (0+255),b
  3324  013ABA  0E23               	movlw	35
  3325  013ABC  6FD0               	movwf	(?_printf+2)& (0+255),b
  3326  013ABE  ECD1  F094         	call	_printf	;wreg free
  3327                           
  3328                           ;main.c: 436: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3329  013AC2  0E0D               	movlw	low STR_14
  3330  013AC4  0100               	movlb	0	; () banked
  3331  013AC6  6FCE               	movwf	printf@f& (0+255),b
  3332  013AC8  0EFF               	movlw	high STR_14
  3333  013ACA  0100               	movlb	0	; () banked
  3334  013ACC  6FCF               	movwf	(printf@f+1)& (0+255),b
  3335  013ACE  C0FB  F0D0         	movff	_MinDist,?_printf+2
  3336  013AD2  C0FC  F0D1         	movff	_MinDist+1,?_printf+3
  3337  013AD6  C06B  F0D2         	movff	_angleToClosestWall,?_printf+4
  3338  013ADA  C06C  F0D3         	movff	_angleToClosestWall+1,?_printf+5
  3339  013ADE  C086  F0D4         	movff	_iRBumpLeft,?_printf+6
  3340  013AE2  0100               	movlb	0	; () banked
  3341  013AE4  6BD5               	clrf	(?_printf+7)& (0+255),b
  3342  013AE6  C087  F0D6         	movff	_iRBumpRight,?_printf+8
  3343  013AEA  0100               	movlb	0	; () banked
  3344  013AEC  6BD7               	clrf	(?_printf+9)& (0+255),b
  3345  013AEE  0EBD               	movlw	189
  3346  013AF0  0100               	movlb	0	; () banked
  3347  013AF2  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3348  013AF4  0100               	movlb	0	; () banked
  3349  013AF6  6FD8               	movwf	(?_printf+10)& (0+255),b
  3350  013AF8  0EFF               	movlw	255
  3351  013AFA  0100               	movlb	0	; () banked
  3352  013AFC  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3353  013AFE  0100               	movlb	0	; () banked
  3354  013B00  6FD9               	movwf	(?_printf+11)& (0+255),b
  3355  013B02  ECD1  F094         	call	_printf	;wreg free
  3356                           
  3357                           ;main.c: 437: Console_Render();
  3358  013B06  ECE5  F091         	call	_Console_Render	;wreg free
  3359                           
  3360                           ;main.c: 438: if (MXK_Release())
  3361  013B0A  EC9D  F0B5         	call	_MXK_Release	;wreg free
  3362  013B0E  0900               	iorlw	0
  3363  013B10  A4D8               	btfss	status,2,c
  3364                           
  3365                           ;main.c: 439: MXK_Dequeue();
  3366  013B12  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3367  013B16                     l2436:
  3368                           
  3369                           ;main.c: 440: }
  3370                           ;main.c: 442: irobot_song_play(0);
  3371  013B16  0E00               	movlw	0
  3372  013B18  EC26  F0B6         	call	_irobot_song_play
  3373                           
  3374                           ;main.c: 443: irobot_stop_motion(0);
  3375  013B1C  0E00               	movlw	0
  3376  013B1E  ECC6  F0B1         	call	_irobot_stop_motion
  3377  013B22  0012               	return		;funcret
  3378  013B24                     __end_of_mode4:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1h	equ	0xFE2
  3388                           fsr1l	equ	0xFE1
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function _findClosestWall *****************
  3392 ;; Defined at:
  3393 ;;		line 158 in file "main.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;Total ram usage:        6 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:   13
  3414 ;; This function calls:
  3415 ;;		_ADC_Start
  3416 ;;		_ADC_Voltage
  3417 ;;		_Console_Render
  3418 ;;		_HMI_Render
  3419 ;;		_HMI_SetNumber
  3420 ;;		_MXK_Dequeue
  3421 ;;		_MXK_Release
  3422 ;;		_MXK_SwitchTo
  3423 ;;		_Motor_Move
  3424 ;;		_Motor_Speed
  3425 ;;		___fldiv
  3426 ;;		___flmul
  3427 ;;		___fltol
  3428 ;;		___xxtofl
  3429 ;;		_delay_ms
  3430 ;;		_irobot_rotate
  3431 ;;		_printf
  3432 ;; This function is called by:
  3433 ;;		_mode4
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text2
  3438  010000                     __ptext2:
  3439                           	opt stack 0
  3440  010000                     _findClosestWall:
  3441                           	opt stack 16
  3442                           
  3443                           ;main.c: 159: correctOrientation = 0;
  3444                           
  3445                           ;incstack = 0
  3446  010000  0E00               	movlw	0
  3447  010002  0100               	movlb	0	; () banked
  3448  010004  6F83               	movwf	_correctOrientation& (0+255),b
  3449                           
  3450                           ;main.c: 160: StepRotate = 400;
  3451  010006  0E01               	movlw	1
  3452  010008  0100               	movlb	0	; () banked
  3453  01000A  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3454  01000C  0E90               	movlw	144
  3455  01000E  6F71               	movwf	_StepRotate& (0+255),b
  3456                           
  3457                           ;main.c: 161: MinDist = 1000;
  3458  010010  0E03               	movlw	3
  3459  010012  0100               	movlb	0	; () banked
  3460  010014  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3461  010016  0EE8               	movlw	232
  3462  010018  6FFB               	movwf	_MinDist& (0+255),b
  3463                           
  3464                           ;main.c: 162: Stepstomin = 0;
  3465  01001A  0E00               	movlw	0
  3466  01001C  0100               	movlb	0	; () banked
  3467  01001E  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3468  010020  0E00               	movlw	0
  3469  010022  6F6F               	movwf	_Stepstomin& (0+255),b
  3470                           
  3471                           ;main.c: 163: angleToClosestWall = 1000;
  3472  010024  0E03               	movlw	3
  3473  010026  0100               	movlb	0	; () banked
  3474  010028  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3475  01002A  0EE8               	movlw	232
  3476  01002C  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3477                           
  3478                           ;main.c: 164: IRValue = 0;
  3479  01002E  0E00               	movlw	0
  3480  010030  0100               	movlb	0	; () banked
  3481  010032  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3482  010034  0E00               	movlw	0
  3483  010036  6F6D               	movwf	_IRValue& (0+255),b
  3484                           
  3485                           ;main.c: 165: TimerX = 8;
  3486  010038  0E00               	movlw	0
  3487  01003A  0100               	movlb	0	; () banked
  3488  01003C  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3489  01003E  0E08               	movlw	8
  3490  010040  6FF9               	movwf	_TimerX& (0+255),b
  3491                           
  3492                           ;main.c: 166: angle = 0;
  3493  010042  0E00               	movlw	0
  3494  010044  0103               	movlb	3	; () banked
  3495  010046  6F3B               	movwf	(_angle+1)& (0+255),b
  3496  010048  0E00               	movlw	0
  3497  01004A  6F3A               	movwf	_angle& (0+255),b
  3498                           
  3499                           ;main.c: 167: while (StepRotate > 0) {
  3500  01004C  D15A               	goto	l2356
  3501  01004E                     
  3502                           ;main.c: 168: StepRotate--;
  3503                           
  3504                           ; BSR set to: 3
  3505  01004E  0100               	movlb	0	; () banked
  3506  010050  0771               	decf	_StepRotate& (0+255),f,b
  3507  010052  A0D8               	btfss	status,0,c
  3508  010054  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;main.c: 169: ADC_Start(&ADC_AN0);
  3512  010056  0EB4               	movlw	low _ADC_AN0
  3513  010058  0100               	movlb	0	; () banked
  3514  01005A  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  3515  01005C  0E00               	movlw	high _ADC_AN0
  3516  01005E  0100               	movlb	0	; () banked
  3517  010060  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3518  010062  EC24  F0AB         	call	_ADC_Start	;wreg free
  3519                           
  3520                           ;main.c: 170: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3521  010066  0EB4               	movlw	low _ADC_AN0
  3522  010068  0100               	movlb	0	; () banked
  3523  01006A  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  3524  01006C  0E00               	movlw	high _ADC_AN0
  3525  01006E  0100               	movlb	0	; () banked
  3526  010070  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3527  010072  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  3528  010076  C0E0  F3FC         	movff	?_ADC_Voltage,_findClosestWall$15609
  3529  01007A  C0E1  F3FD         	movff	?_ADC_Voltage+1,_findClosestWall$15609+1
  3530  01007E  C0E2  F3FE         	movff	?_ADC_Voltage+2,_findClosestWall$15609+2
  3531  010082  C0E3  F3FF         	movff	?_ADC_Voltage+3,_findClosestWall$15609+3
  3532                           
  3533                           ;main.c: 170: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3534  010086  C3FC  F0BD         	movff	_findClosestWall$15609,___fldiv@a
  3535  01008A  C3FD  F0BE         	movff	_findClosestWall$15609+1,___fldiv@a+1
  3536  01008E  C3FE  F0BF         	movff	_findClosestWall$15609+2,___fldiv@a+2
  3537  010092  C3FF  F0C0         	movff	_findClosestWall$15609+3,___fldiv@a+3
  3538  010096  0E00               	movlw	0
  3539  010098  0100               	movlb	0	; () banked
  3540  01009A  6FB9               	movwf	___fldiv@b& (0+255),b
  3541  01009C  0E00               	movlw	0
  3542  01009E  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  3543  0100A0  0E6C               	movlw	108
  3544  0100A2  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  3545  0100A4  0E42               	movlw	66
  3546  0100A6  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  3547  0100A8  ECA6  F08A         	call	___fldiv	;wreg free
  3548  0100AC  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  3549  0100B0  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  3550  0100B4  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  3551  0100B8  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  3552  0100BC  EC18  F09E         	call	___fltol	;wreg free
  3553  0100C0  C0F2  F06D         	movff	?___fltol,_IRValue
  3554  0100C4  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  3555                           
  3556                           ;main.c: 171: if (MXK_SwitchTo(eMXK_HMI)) {
  3557  0100C8  0E01               	movlw	1
  3558  0100CA  EC51  F0B2         	call	_MXK_SwitchTo
  3559  0100CE  0900               	iorlw	0
  3560  0100D0  B4D8               	btfsc	status,2,c
  3561  0100D2  D00E               	goto	l2345
  3562                           
  3563                           ;main.c: 172: HMI_SetNumber(IRValue);
  3564  0100D4  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  3565  0100D8  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3566  0100DC  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  3567                           
  3568                           ;main.c: 173: HMI_Render();
  3569  0100E0  ECB2  F0B2         	call	_HMI_Render	;wreg free
  3570                           
  3571                           ;main.c: 174: if (MXK_Release())
  3572  0100E4  EC9D  F0B5         	call	_MXK_Release	;wreg free
  3573  0100E8  0900               	iorlw	0
  3574  0100EA  A4D8               	btfss	status,2,c
  3575                           
  3576                           ;main.c: 175: MXK_Dequeue();
  3577  0100EC  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3578  0100F0                     l2345:
  3579                           
  3580                           ;main.c: 176: }
  3581                           ;main.c: 177: if (IRValue < MinDist) {
  3582  0100F0  0100               	movlb	0	; () banked
  3583  0100F2  51FB               	movf	_MinDist& (0+255),w,b
  3584  0100F4  0100               	movlb	0	; () banked
  3585  0100F6  5D6D               	subwf	_IRValue& (0+255),w,b
  3586  0100F8  0100               	movlb	0	; () banked
  3587  0100FA  516E               	movf	(_IRValue+1)& (0+255),w,b
  3588  0100FC  0A80               	xorlw	128
  3589  0100FE  0103               	movlb	3	; () banked
  3590  010100  6FFA               	movwf	??_findClosestWall& (0+255),b
  3591  010102  0100               	movlb	0	; () banked
  3592  010104  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3593  010106  0A80               	xorlw	128
  3594  010108  0103               	movlb	3	; () banked
  3595  01010A  59FA               	subwfb	??_findClosestWall& (0+255),w,b
  3596  01010C  B0D8               	btfsc	status,0,c
  3597  01010E  D036               	goto	l2346
  3598                           
  3599                           ; BSR set to: 3
  3600                           ;main.c: 178: MinDist = IRValue;
  3601  010110  C06D  F0FB         	movff	_IRValue,_MinDist
  3602  010114  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3603                           
  3604                           ;main.c: 179: Stepstomin = StepRotate;
  3605  010118  C071  F06F         	movff	_StepRotate,_Stepstomin
  3606  01011C  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3607                           
  3608                           ; BSR set to: 3
  3609                           ;main.c: 180: angleToClosestWall = Stepstomin * 0.675;
  3610  010120  0ECD               	movlw	205
  3611  010122  0100               	movlb	0	; () banked
  3612  010124  6FCB               	movwf	___flmul@a& (0+255),b
  3613  010126  0ECC               	movlw	204
  3614  010128  6FCC               	movwf	(___flmul@a+1)& (0+255),b
  3615  01012A  0E2C               	movlw	44
  3616  01012C  6FCD               	movwf	(___flmul@a+2)& (0+255),b
  3617  01012E  0E3F               	movlw	63
  3618  010130  6FCE               	movwf	(___flmul@a+3)& (0+255),b
  3619  010132  C06F  F0B9         	movff	_Stepstomin,___xxtofl@val
  3620  010136  C070  F0BA         	movff	_Stepstomin+1,___xxtofl@val+1
  3621  01013A  0100               	movlb	0	; () banked
  3622  01013C  0E00               	movlw	0
  3623  01013E  BFBA               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3624  010140  0EFF               	movlw	-1
  3625  010142  6FBB               	movwf	(___xxtofl@val+2)& (0+255),b
  3626  010144  6FBC               	movwf	(___xxtofl@val+3)& (0+255),b
  3627  010146  0E01               	movlw	1
  3628  010148  ECEA  F093         	call	___xxtofl
  3629  01014C  C0B9  F0C7         	movff	?___xxtofl,___flmul@b
  3630  010150  C0BA  F0C8         	movff	?___xxtofl+1,___flmul@b+1
  3631  010154  C0BB  F0C9         	movff	?___xxtofl+2,___flmul@b+2
  3632  010158  C0BC  F0CA         	movff	?___xxtofl+3,___flmul@b+3
  3633  01015C  EC5A  F084         	call	___flmul	;wreg free
  3634  010160  C0C7  F0F2         	movff	?___flmul,___fltol@f1
  3635  010164  C0C8  F0F3         	movff	?___flmul+1,___fltol@f1+1
  3636  010168  C0C9  F0F4         	movff	?___flmul+2,___fltol@f1+2
  3637  01016C  C0CA  F0F5         	movff	?___flmul+3,___fltol@f1+3
  3638  010170  EC18  F09E         	call	___fltol	;wreg free
  3639  010174  C0F2  F06B         	movff	?___fltol,_angleToClosestWall
  3640  010178  C0F3  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3641  01017C                     l2346:
  3642                           
  3643                           ;main.c: 181: }
  3644                           ;main.c: 182: if (MXK_SwitchTo(eMXK_Motor)) {
  3645  01017C  0E08               	movlw	8
  3646  01017E  EC51  F0B2         	call	_MXK_SwitchTo
  3647  010182  0900               	iorlw	0
  3648  010184  B4D8               	btfsc	status,2,c
  3649  010186  D01F               	goto	l2348
  3650                           
  3651                           ;main.c: 183: Motor_Speed(&Stepper, (100));
  3652  010188  0EAE               	movlw	low _Stepper
  3653  01018A  0100               	movlb	0	; () banked
  3654  01018C  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  3655  01018E  0E00               	movlw	high _Stepper
  3656  010190  0100               	movlb	0	; () banked
  3657  010192  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3658  010194  0E00               	movlw	0
  3659  010196  0100               	movlb	0	; () banked
  3660  010198  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3661  01019A  0E64               	movlw	100
  3662  01019C  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  3663  01019E  EC83  F0B4         	call	_Motor_Speed	;wreg free
  3664                           
  3665                           ;main.c: 184: Motor_Move(&Stepper, -1);
  3666  0101A2  0EAE               	movlw	low _Stepper
  3667  0101A4  0100               	movlb	0	; () banked
  3668  0101A6  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  3669  0101A8  0E00               	movlw	high _Stepper
  3670  0101AA  0100               	movlb	0	; () banked
  3671  0101AC  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3672  0101AE  0EFF               	movlw	255
  3673  0101B0  0100               	movlb	0	; () banked
  3674  0101B2  6FBF               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3675  0101B4  69BE               	setf	Motor_Move@pDelta& (0+255),b
  3676  0101B6  EC87  F0B3         	call	_Motor_Move	;wreg free
  3677                           
  3678                           ;main.c: 185: if (MXK_Release())
  3679  0101BA  EC9D  F0B5         	call	_MXK_Release	;wreg free
  3680  0101BE  0900               	iorlw	0
  3681  0101C0  A4D8               	btfss	status,2,c
  3682                           
  3683                           ;main.c: 186: MXK_Dequeue();
  3684  0101C2  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3685  0101C6                     l2348:
  3686                           
  3687                           ;main.c: 187: }
  3688                           ;main.c: 188: TimerX = 10;
  3689  0101C6  0E00               	movlw	0
  3690  0101C8  0100               	movlb	0	; () banked
  3691  0101CA  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3692  0101CC  0E0A               	movlw	10
  3693  0101CE  6FF9               	movwf	_TimerX& (0+255),b
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;main.c: 189: if (TimerX > 0) {
  3697  0101D0  0100               	movlb	0	; () banked
  3698  0101D2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3699  0101D4  D063               	goto	u14620
  3700  0101D6  0100               	movlb	0	; () banked
  3701  0101D8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3702  0101DA  E156               	bnz	l17129
  3703  0101DC  0100               	movlb	0	; () banked
  3704  0101DE  05F9               	decf	_TimerX& (0+255),w,b
  3705  0101E0  B0D8               	btfsc	status,0,c
  3706  0101E2  D052               	goto	l2350
  3707  0101E4  D05B               	goto	u14620
  3708  0101E6                     l17111:
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;main.c: 191: ADC_Start(&ADC_AN0);
  3712  0101E6  0EB4               	movlw	low _ADC_AN0
  3713  0101E8  0100               	movlb	0	; () banked
  3714  0101EA  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  3715  0101EC  0E00               	movlw	high _ADC_AN0
  3716  0101EE  0100               	movlb	0	; () banked
  3717  0101F0  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3718  0101F2  EC24  F0AB         	call	_ADC_Start	;wreg free
  3719                           
  3720                           ;main.c: 192: if (MXK_SwitchTo(eMXK_HMI)) {
  3721  0101F6  0E01               	movlw	1
  3722  0101F8  EC51  F0B2         	call	_MXK_SwitchTo
  3723  0101FC  0900               	iorlw	0
  3724  0101FE  B4D8               	btfsc	status,2,c
  3725  010200  D00E               	goto	l2353
  3726                           
  3727                           ;main.c: 193: HMI_SetNumber(IRValue);
  3728  010202  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  3729  010206  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3730  01020A  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  3731                           
  3732                           ;main.c: 194: HMI_Render();
  3733  01020E  ECB2  F0B2         	call	_HMI_Render	;wreg free
  3734                           
  3735                           ;main.c: 195: if (MXK_Release())
  3736  010212  EC9D  F0B5         	call	_MXK_Release	;wreg free
  3737  010216  0900               	iorlw	0
  3738  010218  A4D8               	btfss	status,2,c
  3739                           
  3740                           ;main.c: 196: MXK_Dequeue();
  3741  01021A  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3742  01021E                     l2353:
  3743                           
  3744                           ;main.c: 197: }
  3745                           ;main.c: 198: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3746  01021E  0EB4               	movlw	low _ADC_AN0
  3747  010220  0100               	movlb	0	; () banked
  3748  010222  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  3749  010224  0E00               	movlw	high _ADC_AN0
  3750  010226  0100               	movlb	0	; () banked
  3751  010228  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3752  01022A  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  3753  01022E  C0E0  F3FC         	movff	?_ADC_Voltage,_findClosestWall$15609
  3754  010232  C0E1  F3FD         	movff	?_ADC_Voltage+1,_findClosestWall$15609+1
  3755  010236  C0E2  F3FE         	movff	?_ADC_Voltage+2,_findClosestWall$15609+2
  3756  01023A  C0E3  F3FF         	movff	?_ADC_Voltage+3,_findClosestWall$15609+3
  3757                           
  3758                           ;main.c: 197: }
  3759                           ;main.c: 198: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3760  01023E  C3FC  F0BD         	movff	_findClosestWall$15609,___fldiv@a
  3761  010242  C3FD  F0BE         	movff	_findClosestWall$15609+1,___fldiv@a+1
  3762  010246  C3FE  F0BF         	movff	_findClosestWall$15609+2,___fldiv@a+2
  3763  01024A  C3FF  F0C0         	movff	_findClosestWall$15609+3,___fldiv@a+3
  3764  01024E  0E00               	movlw	0
  3765  010250  0100               	movlb	0	; () banked
  3766  010252  6FB9               	movwf	___fldiv@b& (0+255),b
  3767  010254  0E00               	movlw	0
  3768  010256  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  3769  010258  0E6C               	movlw	108
  3770  01025A  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  3771  01025C  0E42               	movlw	66
  3772  01025E  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  3773  010260  ECA6  F08A         	call	___fldiv	;wreg free
  3774  010264  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  3775  010268  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  3776  01026C  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  3777  010270  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  3778  010274  EC18  F09E         	call	___fltol	;wreg free
  3779  010278  C0F2  F06D         	movff	?___fltol,_IRValue
  3780  01027C  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  3781                           
  3782                           ;main.c: 199: TimerX--;
  3783  010280  0100               	movlb	0	; () banked
  3784  010282  07F9               	decf	_TimerX& (0+255),f,b
  3785  010284  A0D8               	btfss	status,0,c
  3786  010286  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3787  010288                     l2350:
  3788  010288                     l17129:
  3789                           
  3790                           ; BSR set to: 0
  3791  010288  0100               	movlb	0	; () banked
  3792  01028A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3793  01028C  D007               	goto	u14620
  3794  01028E  0100               	movlb	0	; () banked
  3795  010290  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3796  010292  E1A9               	bnz	l17111
  3797  010294  0100               	movlb	0	; () banked
  3798  010296  05F9               	decf	_TimerX& (0+255),w,b
  3799  010298  B0D8               	btfsc	status,0,c
  3800  01029A  D7A5               	goto	l2351
  3801  01029C                     u14620:
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;main.c: 200: }
  3805                           ;main.c: 201: }
  3806                           ;main.c: 202: if (MXK_SwitchTo(eMXK_HMI)) {
  3807                           
  3808                           ; BSR set to: 0
  3809                           
  3810                           ; BSR set to: 0
  3811  01029C  0E01               	movlw	1
  3812  01029E  EC51  F0B2         	call	_MXK_SwitchTo
  3813  0102A2  0900               	iorlw	0
  3814  0102A4  B4D8               	btfsc	status,2,c
  3815  0102A6  D02D               	goto	l2356
  3816                           
  3817                           ;main.c: 203: printf("%c", (char)35);
  3818  0102A8  0EFB               	movlw	low STR_1
  3819  0102AA  0100               	movlb	0	; () banked
  3820  0102AC  6FCE               	movwf	printf@f& (0+255),b
  3821  0102AE  0EFF               	movlw	high STR_1
  3822  0102B0  0100               	movlb	0	; () banked
  3823  0102B2  6FCF               	movwf	(printf@f+1)& (0+255),b
  3824  0102B4  0E00               	movlw	0
  3825  0102B6  0100               	movlb	0	; () banked
  3826  0102B8  6FD1               	movwf	(?_printf+3)& (0+255),b
  3827  0102BA  0E23               	movlw	35
  3828  0102BC  6FD0               	movwf	(?_printf+2)& (0+255),b
  3829  0102BE  ECD1  F094         	call	_printf	;wreg free
  3830                           
  3831                           ;main.c: 204: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3832  0102C2  0E59               	movlw	low STR_4
  3833  0102C4  0100               	movlb	0	; () banked
  3834  0102C6  6FCE               	movwf	printf@f& (0+255),b
  3835  0102C8  0EFF               	movlw	high STR_4
  3836  0102CA  0100               	movlb	0	; () banked
  3837  0102CC  6FCF               	movwf	(printf@f+1)& (0+255),b
  3838  0102CE  C0FB  F0D0         	movff	_MinDist,?_printf+2
  3839  0102D2  C0FC  F0D1         	movff	_MinDist+1,?_printf+3
  3840  0102D6  C06B  F0D2         	movff	_angleToClosestWall,?_printf+4
  3841  0102DA  C06C  F0D3         	movff	_angleToClosestWall+1,?_printf+5
  3842  0102DE  C086  F0D4         	movff	_iRBumpLeft,?_printf+6
  3843  0102E2  0100               	movlb	0	; () banked
  3844  0102E4  6BD5               	clrf	(?_printf+7)& (0+255),b
  3845  0102E6  C087  F0D6         	movff	_iRBumpRight,?_printf+8
  3846  0102EA  0100               	movlb	0	; () banked
  3847  0102EC  6BD7               	clrf	(?_printf+9)& (0+255),b
  3848  0102EE  ECD1  F094         	call	_printf	;wreg free
  3849                           
  3850                           ;main.c: 205: Console_Render();
  3851  0102F2  ECE5  F091         	call	_Console_Render	;wreg free
  3852                           
  3853                           ;main.c: 206: if (MXK_Release())
  3854  0102F6  EC9D  F0B5         	call	_MXK_Release	;wreg free
  3855  0102FA  0900               	iorlw	0
  3856  0102FC  A4D8               	btfss	status,2,c
  3857                           
  3858                           ;main.c: 207: MXK_Dequeue();
  3859  0102FE  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  3860  010302                     l2356:
  3861  010302  0100               	movlb	0	; () banked
  3862  010304  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3863  010306  D007               	goto	u14650
  3864  010308  0100               	movlb	0	; () banked
  3865  01030A  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3866  01030C  E103               	bnz	u14651
  3867  01030E  0100               	movlb	0	; () banked
  3868  010310  0571               	decf	_StepRotate& (0+255),w,b
  3869  010312  B0D8               	btfsc	status,0,c
  3870  010314                     u14651:
  3871  010314  D69C               	goto	l2343
  3872  010316                     u14650:
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;main.c: 208: }
  3876                           ;main.c: 209: }
  3877                           ;main.c: 210: Motor_Speed(&Stepper, (400));
  3878                           
  3879                           ; BSR set to: 0
  3880  010316  0EAE               	movlw	low _Stepper
  3881  010318  0100               	movlb	0	; () banked
  3882  01031A  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  3883  01031C  0E00               	movlw	high _Stepper
  3884  01031E  0100               	movlb	0	; () banked
  3885  010320  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3886  010322  0E01               	movlw	1
  3887  010324  0100               	movlb	0	; () banked
  3888  010326  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3889  010328  0E90               	movlw	144
  3890  01032A  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  3891  01032C  EC83  F0B4         	call	_Motor_Speed	;wreg free
  3892                           
  3893                           ;main.c: 211: Motor_Move(&Stepper, 400);
  3894  010330  0EAE               	movlw	low _Stepper
  3895  010332  0100               	movlb	0	; () banked
  3896  010334  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  3897  010336  0E00               	movlw	high _Stepper
  3898  010338  0100               	movlb	0	; () banked
  3899  01033A  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3900  01033C  0E01               	movlw	1
  3901  01033E  0100               	movlb	0	; () banked
  3902  010340  6FBF               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3903  010342  0E90               	movlw	144
  3904  010344  6FBE               	movwf	Motor_Move@pDelta& (0+255),b
  3905  010346  EC87  F0B3         	call	_Motor_Move	;wreg free
  3906                           
  3907                           ;main.c: 212: angleToClosestWall = angleToClosestWall + 67;
  3908  01034A  0E43               	movlw	67
  3909  01034C  0100               	movlb	0	; () banked
  3910  01034E  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3911  010350  0100               	movlb	0	; () banked
  3912  010352  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3913  010354  0E00               	movlw	0
  3914  010356  0100               	movlb	0	; () banked
  3915  010358  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3916  01035A  0100               	movlb	0	; () banked
  3917  01035C  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;main.c: 213: if(angleToClosestWall > 270) {
  3921  01035E  0100               	movlb	0	; () banked
  3922  010360  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3923  010362  D012               	goto	l2358
  3924  010364  0E0F               	movlw	15
  3925  010366  0100               	movlb	0	; () banked
  3926  010368  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3927  01036A  0E01               	movlw	1
  3928  01036C  0100               	movlb	0	; () banked
  3929  01036E  596C               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  3930  010370  A0D8               	btfss	status,0,c
  3931  010372  D00A               	goto	l2358
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 214: angleToClosestWall = angleToClosestWall - 270;
  3935  010374  0EF2               	movlw	242
  3936  010376  0100               	movlb	0	; () banked
  3937  010378  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3938  01037A  0100               	movlb	0	; () banked
  3939  01037C  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3940  01037E  0EFE               	movlw	254
  3941  010380  0100               	movlb	0	; () banked
  3942  010382  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3943  010384  0100               	movlb	0	; () banked
  3944  010386  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3945  010388                     l2358:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;main.c: 215: }
  3949                           ;main.c: 216: angleToClosestWall = 270 - angleToClosestWall;
  3950  010388  C06B  F3FA         	movff	_angleToClosestWall,??_findClosestWall
  3951  01038C  C06C  F3FB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3952  010390  0103               	movlb	3	; () banked
  3953  010392  1FFA               	comf	??_findClosestWall& (0+255),f,b
  3954  010394  1FFB               	comf	(??_findClosestWall+1)& (0+255),f,b
  3955  010396  4BFA               	infsnz	??_findClosestWall& (0+255),f,b
  3956  010398  2BFB               	incf	(??_findClosestWall+1)& (0+255),f,b
  3957  01039A  0E0E               	movlw	14
  3958  01039C  0103               	movlb	3	; () banked
  3959  01039E  25FA               	addwf	??_findClosestWall& (0+255),w,b
  3960  0103A0  0100               	movlb	0	; () banked
  3961  0103A2  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3962  0103A4  0E01               	movlw	1
  3963  0103A6  0103               	movlb	3	; () banked
  3964  0103A8  21FB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3965  0103AA  0100               	movlb	0	; () banked
  3966  0103AC  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3967                           
  3968                           ;main.c: 217: if(angleToClosestWall < 135) {
  3969  0103AE  0100               	movlb	0	; () banked
  3970  0103B0  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3971  0103B2  D008               	goto	u14670
  3972  0103B4  0100               	movlb	0	; () banked
  3973  0103B6  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3974  0103B8  E112               	bnz	l17153
  3975  0103BA  0E87               	movlw	135
  3976  0103BC  0100               	movlb	0	; () banked
  3977  0103BE  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3978  0103C0  B0D8               	btfsc	status,0,c
  3979  0103C2  D00D               	goto	l2359
  3980  0103C4                     u14670:
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main.c: 218: irobot_rotate(0, angleToClosestWall, 200);
  3984  0103C4  C06B  F0D6         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  3985  0103C8  C06C  F0D7         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  3986  0103CC  0E00               	movlw	0
  3987  0103CE  0100               	movlb	0	; () banked
  3988  0103D0  6FD9               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3989  0103D2  0EC8               	movlw	200
  3990  0103D4  6FD8               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3991  0103D6  0E00               	movlw	0
  3992  0103D8  EC92  F09D         	call	_irobot_rotate
  3993                           
  3994                           ;main.c: 219: }
  3995  0103DC  D01B               	goto	l2360
  3996  0103DE                     l2359:
  3997  0103DE                     l17153:
  3998                           
  3999                           ;main.c: 220: else{
  4000                           ;main.c: 221: irobot_rotate(0, 270 - angleToClosestWall, -200);
  4001  0103DE  C06B  F3FA         	movff	_angleToClosestWall,??_findClosestWall
  4002  0103E2  C06C  F3FB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4003  0103E6  0103               	movlb	3	; () banked
  4004  0103E8  1FFA               	comf	??_findClosestWall& (0+255),f,b
  4005  0103EA  1FFB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4006  0103EC  4BFA               	infsnz	??_findClosestWall& (0+255),f,b
  4007  0103EE  2BFB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4008  0103F0  0E0E               	movlw	14
  4009  0103F2  0103               	movlb	3	; () banked
  4010  0103F4  25FA               	addwf	??_findClosestWall& (0+255),w,b
  4011  0103F6  0100               	movlb	0	; () banked
  4012  0103F8  6FD6               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4013  0103FA  0E01               	movlw	1
  4014  0103FC  0103               	movlb	3	; () banked
  4015  0103FE  21FB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4016  010400  0100               	movlb	0	; () banked
  4017  010402  6FD7               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4018  010404  0EFF               	movlw	255
  4019  010406  0100               	movlb	0	; () banked
  4020  010408  6FD9               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4021  01040A  0E38               	movlw	56
  4022  01040C  6FD8               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4023  01040E  0E00               	movlw	0
  4024  010410  EC92  F09D         	call	_irobot_rotate
  4025  010414                     l2360:
  4026                           
  4027                           ;main.c: 222: }
  4028                           ;main.c: 223: delay_ms(200);
  4029  010414  0E00               	movlw	0
  4030  010416  0100               	movlb	0	; () banked
  4031  010418  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
  4032  01041A  0EC8               	movlw	200
  4033  01041C  6FB9               	movwf	delay_ms@ms& (0+255),b
  4034  01041E  EC5A  F0AE         	call	_delay_ms	;wreg free
  4035                           
  4036                           ;main.c: 224: while (!correctOrientation) {
  4037  010422  D228               	goto	l2361
  4038  010424                     
  4039                           ;main.c: 225: StepRotate = 400;
  4040  010424  0E01               	movlw	1
  4041  010426  0100               	movlb	0	; () banked
  4042  010428  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4043  01042A  0E90               	movlw	144
  4044  01042C  6F71               	movwf	_StepRotate& (0+255),b
  4045                           
  4046                           ;main.c: 226: MinDist = 1000;
  4047  01042E  0E03               	movlw	3
  4048  010430  0100               	movlb	0	; () banked
  4049  010432  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4050  010434  0EE8               	movlw	232
  4051  010436  6FFB               	movwf	_MinDist& (0+255),b
  4052                           
  4053                           ;main.c: 227: Stepstomin = 0;
  4054  010438  0E00               	movlw	0
  4055  01043A  0100               	movlb	0	; () banked
  4056  01043C  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4057  01043E  0E00               	movlw	0
  4058  010440  6F6F               	movwf	_Stepstomin& (0+255),b
  4059                           
  4060                           ;main.c: 228: angleToClosestWall = 1000;
  4061  010442  0E03               	movlw	3
  4062  010444  0100               	movlb	0	; () banked
  4063  010446  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  4064  010448  0EE8               	movlw	232
  4065  01044A  6F6B               	movwf	_angleToClosestWall& (0+255),b
  4066                           
  4067                           ;main.c: 229: IRValue = 0;
  4068  01044C  0E00               	movlw	0
  4069  01044E  0100               	movlb	0	; () banked
  4070  010450  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4071  010452  0E00               	movlw	0
  4072  010454  6F6D               	movwf	_IRValue& (0+255),b
  4073                           
  4074                           ;main.c: 230: TimerX = 8;
  4075  010456  0E00               	movlw	0
  4076  010458  0100               	movlb	0	; () banked
  4077  01045A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4078  01045C  0E08               	movlw	8
  4079  01045E  6FF9               	movwf	_TimerX& (0+255),b
  4080                           
  4081                           ;main.c: 231: angle = 0;
  4082  010460  0E00               	movlw	0
  4083  010462  0103               	movlb	3	; () banked
  4084  010464  6F3B               	movwf	(_angle+1)& (0+255),b
  4085  010466  0E00               	movlw	0
  4086  010468  6F3A               	movwf	_angle& (0+255),b
  4087                           
  4088                           ;main.c: 232: while (StepRotate > 0) {
  4089  01046A  D15A               	goto	l2377
  4090  01046C                     
  4091                           ;main.c: 233: StepRotate--;
  4092                           
  4093                           ; BSR set to: 3
  4094  01046C  0100               	movlb	0	; () banked
  4095  01046E  0771               	decf	_StepRotate& (0+255),f,b
  4096  010470  A0D8               	btfss	status,0,c
  4097  010472  0772               	decf	(_StepRotate+1)& (0+255),f,b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;main.c: 234: ADC_Start(&ADC_AN0);
  4101  010474  0EB4               	movlw	low _ADC_AN0
  4102  010476  0100               	movlb	0	; () banked
  4103  010478  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  4104  01047A  0E00               	movlw	high _ADC_AN0
  4105  01047C  0100               	movlb	0	; () banked
  4106  01047E  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4107  010480  EC24  F0AB         	call	_ADC_Start	;wreg free
  4108                           
  4109                           ;main.c: 235: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4110  010484  0EB4               	movlw	low _ADC_AN0
  4111  010486  0100               	movlb	0	; () banked
  4112  010488  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  4113  01048A  0E00               	movlw	high _ADC_AN0
  4114  01048C  0100               	movlb	0	; () banked
  4115  01048E  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4116  010490  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  4117  010494  C0E0  F3FC         	movff	?_ADC_Voltage,_findClosestWall$15609
  4118  010498  C0E1  F3FD         	movff	?_ADC_Voltage+1,_findClosestWall$15609+1
  4119  01049C  C0E2  F3FE         	movff	?_ADC_Voltage+2,_findClosestWall$15609+2
  4120  0104A0  C0E3  F3FF         	movff	?_ADC_Voltage+3,_findClosestWall$15609+3
  4121                           
  4122                           ;main.c: 235: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4123  0104A4  C3FC  F0BD         	movff	_findClosestWall$15609,___fldiv@a
  4124  0104A8  C3FD  F0BE         	movff	_findClosestWall$15609+1,___fldiv@a+1
  4125  0104AC  C3FE  F0BF         	movff	_findClosestWall$15609+2,___fldiv@a+2
  4126  0104B0  C3FF  F0C0         	movff	_findClosestWall$15609+3,___fldiv@a+3
  4127  0104B4  0E00               	movlw	0
  4128  0104B6  0100               	movlb	0	; () banked
  4129  0104B8  6FB9               	movwf	___fldiv@b& (0+255),b
  4130  0104BA  0E00               	movlw	0
  4131  0104BC  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  4132  0104BE  0E6C               	movlw	108
  4133  0104C0  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  4134  0104C2  0E42               	movlw	66
  4135  0104C4  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  4136  0104C6  ECA6  F08A         	call	___fldiv	;wreg free
  4137  0104CA  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  4138  0104CE  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  4139  0104D2  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  4140  0104D6  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  4141  0104DA  EC18  F09E         	call	___fltol	;wreg free
  4142  0104DE  C0F2  F06D         	movff	?___fltol,_IRValue
  4143  0104E2  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  4144                           
  4145                           ;main.c: 236: if (MXK_SwitchTo(eMXK_HMI)) {
  4146  0104E6  0E01               	movlw	1
  4147  0104E8  EC51  F0B2         	call	_MXK_SwitchTo
  4148  0104EC  0900               	iorlw	0
  4149  0104EE  B4D8               	btfsc	status,2,c
  4150  0104F0  D00E               	goto	l2366
  4151                           
  4152                           ;main.c: 237: HMI_SetNumber(IRValue);
  4153  0104F2  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  4154  0104F6  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4155  0104FA  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  4156                           
  4157                           ;main.c: 238: HMI_Render();
  4158  0104FE  ECB2  F0B2         	call	_HMI_Render	;wreg free
  4159                           
  4160                           ;main.c: 239: if (MXK_Release())
  4161  010502  EC9D  F0B5         	call	_MXK_Release	;wreg free
  4162  010506  0900               	iorlw	0
  4163  010508  A4D8               	btfss	status,2,c
  4164                           
  4165                           ;main.c: 240: MXK_Dequeue();
  4166  01050A  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4167  01050E                     l2366:
  4168                           
  4169                           ;main.c: 241: }
  4170                           ;main.c: 242: if (IRValue < MinDist) {
  4171  01050E  0100               	movlb	0	; () banked
  4172  010510  51FB               	movf	_MinDist& (0+255),w,b
  4173  010512  0100               	movlb	0	; () banked
  4174  010514  5D6D               	subwf	_IRValue& (0+255),w,b
  4175  010516  0100               	movlb	0	; () banked
  4176  010518  516E               	movf	(_IRValue+1)& (0+255),w,b
  4177  01051A  0A80               	xorlw	128
  4178  01051C  0103               	movlb	3	; () banked
  4179  01051E  6FFA               	movwf	??_findClosestWall& (0+255),b
  4180  010520  0100               	movlb	0	; () banked
  4181  010522  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4182  010524  0A80               	xorlw	128
  4183  010526  0103               	movlb	3	; () banked
  4184  010528  59FA               	subwfb	??_findClosestWall& (0+255),w,b
  4185  01052A  B0D8               	btfsc	status,0,c
  4186  01052C  D036               	goto	l2367
  4187                           
  4188                           ; BSR set to: 3
  4189                           ;main.c: 243: MinDist = IRValue;
  4190  01052E  C06D  F0FB         	movff	_IRValue,_MinDist
  4191  010532  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4192                           
  4193                           ;main.c: 244: Stepstomin = StepRotate;
  4194  010536  C071  F06F         	movff	_StepRotate,_Stepstomin
  4195  01053A  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4196                           
  4197                           ; BSR set to: 3
  4198                           ;main.c: 245: angleToClosestWall = Stepstomin * 0.675;
  4199  01053E  0ECD               	movlw	205
  4200  010540  0100               	movlb	0	; () banked
  4201  010542  6FCB               	movwf	___flmul@a& (0+255),b
  4202  010544  0ECC               	movlw	204
  4203  010546  6FCC               	movwf	(___flmul@a+1)& (0+255),b
  4204  010548  0E2C               	movlw	44
  4205  01054A  6FCD               	movwf	(___flmul@a+2)& (0+255),b
  4206  01054C  0E3F               	movlw	63
  4207  01054E  6FCE               	movwf	(___flmul@a+3)& (0+255),b
  4208  010550  C06F  F0B9         	movff	_Stepstomin,___xxtofl@val
  4209  010554  C070  F0BA         	movff	_Stepstomin+1,___xxtofl@val+1
  4210  010558  0100               	movlb	0	; () banked
  4211  01055A  0E00               	movlw	0
  4212  01055C  BFBA               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4213  01055E  0EFF               	movlw	-1
  4214  010560  6FBB               	movwf	(___xxtofl@val+2)& (0+255),b
  4215  010562  6FBC               	movwf	(___xxtofl@val+3)& (0+255),b
  4216  010564  0E01               	movlw	1
  4217  010566  ECEA  F093         	call	___xxtofl
  4218  01056A  C0B9  F0C7         	movff	?___xxtofl,___flmul@b
  4219  01056E  C0BA  F0C8         	movff	?___xxtofl+1,___flmul@b+1
  4220  010572  C0BB  F0C9         	movff	?___xxtofl+2,___flmul@b+2
  4221  010576  C0BC  F0CA         	movff	?___xxtofl+3,___flmul@b+3
  4222  01057A  EC5A  F084         	call	___flmul	;wreg free
  4223  01057E  C0C7  F0F2         	movff	?___flmul,___fltol@f1
  4224  010582  C0C8  F0F3         	movff	?___flmul+1,___fltol@f1+1
  4225  010586  C0C9  F0F4         	movff	?___flmul+2,___fltol@f1+2
  4226  01058A  C0CA  F0F5         	movff	?___flmul+3,___fltol@f1+3
  4227  01058E  EC18  F09E         	call	___fltol	;wreg free
  4228  010592  C0F2  F06B         	movff	?___fltol,_angleToClosestWall
  4229  010596  C0F3  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  4230  01059A                     l2367:
  4231                           
  4232                           ;main.c: 246: }
  4233                           ;main.c: 247: if (MXK_SwitchTo(eMXK_Motor)) {
  4234  01059A  0E08               	movlw	8
  4235  01059C  EC51  F0B2         	call	_MXK_SwitchTo
  4236  0105A0  0900               	iorlw	0
  4237  0105A2  B4D8               	btfsc	status,2,c
  4238  0105A4  D01F               	goto	l2369
  4239                           
  4240                           ;main.c: 248: Motor_Speed(&Stepper, (100));
  4241  0105A6  0EAE               	movlw	low _Stepper
  4242  0105A8  0100               	movlb	0	; () banked
  4243  0105AA  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  4244  0105AC  0E00               	movlw	high _Stepper
  4245  0105AE  0100               	movlb	0	; () banked
  4246  0105B0  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4247  0105B2  0E00               	movlw	0
  4248  0105B4  0100               	movlb	0	; () banked
  4249  0105B6  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4250  0105B8  0E64               	movlw	100
  4251  0105BA  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  4252  0105BC  EC83  F0B4         	call	_Motor_Speed	;wreg free
  4253                           
  4254                           ;main.c: 249: Motor_Move(&Stepper, -1);
  4255  0105C0  0EAE               	movlw	low _Stepper
  4256  0105C2  0100               	movlb	0	; () banked
  4257  0105C4  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  4258  0105C6  0E00               	movlw	high _Stepper
  4259  0105C8  0100               	movlb	0	; () banked
  4260  0105CA  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4261  0105CC  0EFF               	movlw	255
  4262  0105CE  0100               	movlb	0	; () banked
  4263  0105D0  6FBF               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4264  0105D2  69BE               	setf	Motor_Move@pDelta& (0+255),b
  4265  0105D4  EC87  F0B3         	call	_Motor_Move	;wreg free
  4266                           
  4267                           ;main.c: 250: if (MXK_Release())
  4268  0105D8  EC9D  F0B5         	call	_MXK_Release	;wreg free
  4269  0105DC  0900               	iorlw	0
  4270  0105DE  A4D8               	btfss	status,2,c
  4271                           
  4272                           ;main.c: 251: MXK_Dequeue();
  4273  0105E0  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4274  0105E4                     l2369:
  4275                           
  4276                           ;main.c: 252: }
  4277                           ;main.c: 253: TimerX = 10;
  4278  0105E4  0E00               	movlw	0
  4279  0105E6  0100               	movlb	0	; () banked
  4280  0105E8  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4281  0105EA  0E0A               	movlw	10
  4282  0105EC  6FF9               	movwf	_TimerX& (0+255),b
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;main.c: 254: if (TimerX > 0) {
  4286  0105EE  0100               	movlb	0	; () banked
  4287  0105F0  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4288  0105F2  D063               	goto	u14760
  4289  0105F4  0100               	movlb	0	; () banked
  4290  0105F6  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4291  0105F8  E156               	bnz	l17217
  4292  0105FA  0100               	movlb	0	; () banked
  4293  0105FC  05F9               	decf	_TimerX& (0+255),w,b
  4294  0105FE  B0D8               	btfsc	status,0,c
  4295  010600  D052               	goto	l2371
  4296  010602  D05B               	goto	u14760
  4297  010604                     l17199:
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;main.c: 256: ADC_Start(&ADC_AN0);
  4301  010604  0EB4               	movlw	low _ADC_AN0
  4302  010606  0100               	movlb	0	; () banked
  4303  010608  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  4304  01060A  0E00               	movlw	high _ADC_AN0
  4305  01060C  0100               	movlb	0	; () banked
  4306  01060E  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4307  010610  EC24  F0AB         	call	_ADC_Start	;wreg free
  4308                           
  4309                           ;main.c: 257: if (MXK_SwitchTo(eMXK_HMI)) {
  4310  010614  0E01               	movlw	1
  4311  010616  EC51  F0B2         	call	_MXK_SwitchTo
  4312  01061A  0900               	iorlw	0
  4313  01061C  B4D8               	btfsc	status,2,c
  4314  01061E  D00E               	goto	l2374
  4315                           
  4316                           ;main.c: 258: HMI_SetNumber(IRValue);
  4317  010620  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  4318  010624  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4319  010628  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  4320                           
  4321                           ;main.c: 259: HMI_Render();
  4322  01062C  ECB2  F0B2         	call	_HMI_Render	;wreg free
  4323                           
  4324                           ;main.c: 260: if (MXK_Release())
  4325  010630  EC9D  F0B5         	call	_MXK_Release	;wreg free
  4326  010634  0900               	iorlw	0
  4327  010636  A4D8               	btfss	status,2,c
  4328                           
  4329                           ;main.c: 261: MXK_Dequeue();
  4330  010638  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4331  01063C                     l2374:
  4332                           
  4333                           ;main.c: 262: }
  4334                           ;main.c: 263: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4335  01063C  0EB4               	movlw	low _ADC_AN0
  4336  01063E  0100               	movlb	0	; () banked
  4337  010640  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  4338  010642  0E00               	movlw	high _ADC_AN0
  4339  010644  0100               	movlb	0	; () banked
  4340  010646  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4341  010648  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  4342  01064C  C0E0  F3FC         	movff	?_ADC_Voltage,_findClosestWall$15609
  4343  010650  C0E1  F3FD         	movff	?_ADC_Voltage+1,_findClosestWall$15609+1
  4344  010654  C0E2  F3FE         	movff	?_ADC_Voltage+2,_findClosestWall$15609+2
  4345  010658  C0E3  F3FF         	movff	?_ADC_Voltage+3,_findClosestWall$15609+3
  4346                           
  4347                           ;main.c: 262: }
  4348                           ;main.c: 263: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4349  01065C  C3FC  F0BD         	movff	_findClosestWall$15609,___fldiv@a
  4350  010660  C3FD  F0BE         	movff	_findClosestWall$15609+1,___fldiv@a+1
  4351  010664  C3FE  F0BF         	movff	_findClosestWall$15609+2,___fldiv@a+2
  4352  010668  C3FF  F0C0         	movff	_findClosestWall$15609+3,___fldiv@a+3
  4353  01066C  0E00               	movlw	0
  4354  01066E  0100               	movlb	0	; () banked
  4355  010670  6FB9               	movwf	___fldiv@b& (0+255),b
  4356  010672  0E00               	movlw	0
  4357  010674  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  4358  010676  0E6C               	movlw	108
  4359  010678  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  4360  01067A  0E42               	movlw	66
  4361  01067C  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  4362  01067E  ECA6  F08A         	call	___fldiv	;wreg free
  4363  010682  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  4364  010686  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  4365  01068A  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  4366  01068E  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  4367  010692  EC18  F09E         	call	___fltol	;wreg free
  4368  010696  C0F2  F06D         	movff	?___fltol,_IRValue
  4369  01069A  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  4370                           
  4371                           ;main.c: 264: TimerX--;
  4372  01069E  0100               	movlb	0	; () banked
  4373  0106A0  07F9               	decf	_TimerX& (0+255),f,b
  4374  0106A2  A0D8               	btfss	status,0,c
  4375  0106A4  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4376  0106A6                     l2371:
  4377  0106A6                     l17217:
  4378                           
  4379                           ; BSR set to: 0
  4380  0106A6  0100               	movlb	0	; () banked
  4381  0106A8  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4382  0106AA  D007               	goto	u14760
  4383  0106AC  0100               	movlb	0	; () banked
  4384  0106AE  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4385  0106B0  E1A9               	bnz	l17199
  4386  0106B2  0100               	movlb	0	; () banked
  4387  0106B4  05F9               	decf	_TimerX& (0+255),w,b
  4388  0106B6  B0D8               	btfsc	status,0,c
  4389  0106B8  D7A5               	goto	l2372
  4390  0106BA                     u14760:
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;main.c: 265: }
  4394                           ;main.c: 266: }
  4395                           ;main.c: 267: if (MXK_SwitchTo(eMXK_HMI)) {
  4396                           
  4397                           ; BSR set to: 0
  4398                           
  4399                           ; BSR set to: 0
  4400  0106BA  0E01               	movlw	1
  4401  0106BC  EC51  F0B2         	call	_MXK_SwitchTo
  4402  0106C0  0900               	iorlw	0
  4403  0106C2  B4D8               	btfsc	status,2,c
  4404  0106C4  D02D               	goto	l2377
  4405                           
  4406                           ;main.c: 268: printf("%c", (char)35);
  4407  0106C6  0EFB               	movlw	low STR_1
  4408  0106C8  0100               	movlb	0	; () banked
  4409  0106CA  6FCE               	movwf	printf@f& (0+255),b
  4410  0106CC  0EFF               	movlw	high STR_1
  4411  0106CE  0100               	movlb	0	; () banked
  4412  0106D0  6FCF               	movwf	(printf@f+1)& (0+255),b
  4413  0106D2  0E00               	movlw	0
  4414  0106D4  0100               	movlb	0	; () banked
  4415  0106D6  6FD1               	movwf	(?_printf+3)& (0+255),b
  4416  0106D8  0E23               	movlw	35
  4417  0106DA  6FD0               	movwf	(?_printf+2)& (0+255),b
  4418  0106DC  ECD1  F094         	call	_printf	;wreg free
  4419                           
  4420                           ;main.c: 269: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  4421  0106E0  0E59               	movlw	low STR_4
  4422  0106E2  0100               	movlb	0	; () banked
  4423  0106E4  6FCE               	movwf	printf@f& (0+255),b
  4424  0106E6  0EFF               	movlw	high STR_4
  4425  0106E8  0100               	movlb	0	; () banked
  4426  0106EA  6FCF               	movwf	(printf@f+1)& (0+255),b
  4427  0106EC  C0FB  F0D0         	movff	_MinDist,?_printf+2
  4428  0106F0  C0FC  F0D1         	movff	_MinDist+1,?_printf+3
  4429  0106F4  C06B  F0D2         	movff	_angleToClosestWall,?_printf+4
  4430  0106F8  C06C  F0D3         	movff	_angleToClosestWall+1,?_printf+5
  4431  0106FC  C086  F0D4         	movff	_iRBumpLeft,?_printf+6
  4432  010700  0100               	movlb	0	; () banked
  4433  010702  6BD5               	clrf	(?_printf+7)& (0+255),b
  4434  010704  C087  F0D6         	movff	_iRBumpRight,?_printf+8
  4435  010708  0100               	movlb	0	; () banked
  4436  01070A  6BD7               	clrf	(?_printf+9)& (0+255),b
  4437  01070C  ECD1  F094         	call	_printf	;wreg free
  4438                           
  4439                           ;main.c: 270: Console_Render();
  4440  010710  ECE5  F091         	call	_Console_Render	;wreg free
  4441                           
  4442                           ;main.c: 271: if (MXK_Release())
  4443  010714  EC9D  F0B5         	call	_MXK_Release	;wreg free
  4444  010718  0900               	iorlw	0
  4445  01071A  A4D8               	btfss	status,2,c
  4446                           
  4447                           ;main.c: 272: MXK_Dequeue();
  4448  01071C  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  4449  010720                     l2377:
  4450  010720  0100               	movlb	0	; () banked
  4451  010722  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  4452  010724  D007               	goto	u14790
  4453  010726  0100               	movlb	0	; () banked
  4454  010728  5172               	movf	(_StepRotate+1)& (0+255),w,b
  4455  01072A  E103               	bnz	u14791
  4456  01072C  0100               	movlb	0	; () banked
  4457  01072E  0571               	decf	_StepRotate& (0+255),w,b
  4458  010730  B0D8               	btfsc	status,0,c
  4459  010732                     u14791:
  4460  010732  D69C               	goto	l2364
  4461  010734                     u14790:
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 273: }
  4465                           ;main.c: 274: }
  4466                           ;main.c: 275: Motor_Speed(&Stepper, (400));
  4467                           
  4468                           ; BSR set to: 0
  4469  010734  0EAE               	movlw	low _Stepper
  4470  010736  0100               	movlb	0	; () banked
  4471  010738  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  4472  01073A  0E00               	movlw	high _Stepper
  4473  01073C  0100               	movlb	0	; () banked
  4474  01073E  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4475  010740  0E01               	movlw	1
  4476  010742  0100               	movlb	0	; () banked
  4477  010744  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4478  010746  0E90               	movlw	144
  4479  010748  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  4480  01074A  EC83  F0B4         	call	_Motor_Speed	;wreg free
  4481                           
  4482                           ;main.c: 276: Motor_Move(&Stepper, 400);
  4483  01074E  0EAE               	movlw	low _Stepper
  4484  010750  0100               	movlb	0	; () banked
  4485  010752  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  4486  010754  0E00               	movlw	high _Stepper
  4487  010756  0100               	movlb	0	; () banked
  4488  010758  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4489  01075A  0E01               	movlw	1
  4490  01075C  0100               	movlb	0	; () banked
  4491  01075E  6FBF               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4492  010760  0E90               	movlw	144
  4493  010762  6FBE               	movwf	Motor_Move@pDelta& (0+255),b
  4494  010764  EC87  F0B3         	call	_Motor_Move	;wreg free
  4495                           
  4496                           ;main.c: 277: if(angleToClosestWall > 195 && angleToClosestWall < 210) {
  4497  010768  0100               	movlb	0	; () banked
  4498  01076A  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4499  01076C  D017               	goto	l2379
  4500  01076E  0100               	movlb	0	; () banked
  4501  010770  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4502  010772  E105               	bnz	u14800
  4503  010774  0EC4               	movlw	196
  4504  010776  0100               	movlb	0	; () banked
  4505  010778  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  4506  01077A  A0D8               	btfss	status,0,c
  4507  01077C  D00F               	goto	l2379
  4508  01077E                     u14800:
  4509                           
  4510                           ; BSR set to: 0
  4511  01077E  0100               	movlb	0	; () banked
  4512  010780  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4513  010782  D008               	goto	u14810
  4514  010784  0100               	movlb	0	; () banked
  4515  010786  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4516  010788  E109               	bnz	l17239
  4517  01078A  0ED2               	movlw	210
  4518  01078C  0100               	movlb	0	; () banked
  4519  01078E  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  4520  010790  B0D8               	btfsc	status,0,c
  4521  010792  D004               	goto	l2379
  4522  010794                     u14810:
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;main.c: 278: correctOrientation = 1;
  4526  010794  0E01               	movlw	1
  4527  010796  0100               	movlb	0	; () banked
  4528  010798  6F83               	movwf	_correctOrientation& (0+255),b
  4529                           
  4530                           ;main.c: 279: }
  4531  01079A  D065               	goto	l2383
  4532  01079C                     l2379:
  4533  01079C                     l17239:
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;main.c: 280: else{
  4537                           ;main.c: 281: angleToClosestWall = angleToClosestWall + 67;
  4538  01079C  0E43               	movlw	67
  4539  01079E  0100               	movlb	0	; () banked
  4540  0107A0  256B               	addwf	_angleToClosestWall& (0+255),w,b
  4541  0107A2  0100               	movlb	0	; () banked
  4542  0107A4  6F6B               	movwf	_angleToClosestWall& (0+255),b
  4543  0107A6  0E00               	movlw	0
  4544  0107A8  0100               	movlb	0	; () banked
  4545  0107AA  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4546  0107AC  0100               	movlb	0	; () banked
  4547  0107AE  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  4548                           
  4549                           ;main.c: 282: if(angleToClosestWall > 270) {
  4550  0107B0  0100               	movlb	0	; () banked
  4551  0107B2  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4552  0107B4  D012               	goto	l2381
  4553  0107B6  0E0F               	movlw	15
  4554  0107B8  0100               	movlb	0	; () banked
  4555  0107BA  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  4556  0107BC  0E01               	movlw	1
  4557  0107BE  0100               	movlb	0	; () banked
  4558  0107C0  596C               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  4559  0107C2  A0D8               	btfss	status,0,c
  4560  0107C4  D00A               	goto	l2381
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;main.c: 283: angleToClosestWall = angleToClosestWall - 270;
  4564  0107C6  0EF2               	movlw	242
  4565  0107C8  0100               	movlb	0	; () banked
  4566  0107CA  256B               	addwf	_angleToClosestWall& (0+255),w,b
  4567  0107CC  0100               	movlb	0	; () banked
  4568  0107CE  6F6B               	movwf	_angleToClosestWall& (0+255),b
  4569  0107D0  0EFE               	movlw	254
  4570  0107D2  0100               	movlb	0	; () banked
  4571  0107D4  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  4572  0107D6  0100               	movlb	0	; () banked
  4573  0107D8  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  4574  0107DA                     l2381:
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;main.c: 284: }
  4578                           ;main.c: 285: angleToClosestWall = 270 - angleToClosestWall;
  4579  0107DA  C06B  F3FA         	movff	_angleToClosestWall,??_findClosestWall
  4580  0107DE  C06C  F3FB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4581  0107E2  0103               	movlb	3	; () banked
  4582  0107E4  1FFA               	comf	??_findClosestWall& (0+255),f,b
  4583  0107E6  1FFB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4584  0107E8  4BFA               	infsnz	??_findClosestWall& (0+255),f,b
  4585  0107EA  2BFB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4586  0107EC  0E0E               	movlw	14
  4587  0107EE  0103               	movlb	3	; () banked
  4588  0107F0  25FA               	addwf	??_findClosestWall& (0+255),w,b
  4589  0107F2  0100               	movlb	0	; () banked
  4590  0107F4  6F6B               	movwf	_angleToClosestWall& (0+255),b
  4591  0107F6  0E01               	movlw	1
  4592  0107F8  0103               	movlb	3	; () banked
  4593  0107FA  21FB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4594  0107FC  0100               	movlb	0	; () banked
  4595  0107FE  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  4596                           
  4597                           ;main.c: 286: if(angleToClosestWall < 135) {
  4598  010800  0100               	movlb	0	; () banked
  4599  010802  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4600  010804  D008               	goto	u14830
  4601  010806  0100               	movlb	0	; () banked
  4602  010808  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4603  01080A  E112               	bnz	l17245
  4604  01080C  0E87               	movlw	135
  4605  01080E  0100               	movlb	0	; () banked
  4606  010810  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  4607  010812  B0D8               	btfsc	status,0,c
  4608  010814  D00D               	goto	l2382
  4609  010816                     u14830:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;main.c: 287: irobot_rotate(0, angleToClosestWall, 200);
  4613  010816  C06B  F0D6         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  4614  01081A  C06C  F0D7         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  4615  01081E  0E00               	movlw	0
  4616  010820  0100               	movlb	0	; () banked
  4617  010822  6FD9               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4618  010824  0EC8               	movlw	200
  4619  010826  6FD8               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4620  010828  0E00               	movlw	0
  4621  01082A  EC92  F09D         	call	_irobot_rotate
  4622                           
  4623                           ;main.c: 288: }
  4624  01082E  D01B               	goto	l2383
  4625  010830                     l2382:
  4626  010830                     l17245:
  4627                           
  4628                           ;main.c: 289: else{
  4629                           ;main.c: 290: irobot_rotate(0, 270 - angleToClosestWall, -200);
  4630  010830  C06B  F3FA         	movff	_angleToClosestWall,??_findClosestWall
  4631  010834  C06C  F3FB         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4632  010838  0103               	movlb	3	; () banked
  4633  01083A  1FFA               	comf	??_findClosestWall& (0+255),f,b
  4634  01083C  1FFB               	comf	(??_findClosestWall+1)& (0+255),f,b
  4635  01083E  4BFA               	infsnz	??_findClosestWall& (0+255),f,b
  4636  010840  2BFB               	incf	(??_findClosestWall+1)& (0+255),f,b
  4637  010842  0E0E               	movlw	14
  4638  010844  0103               	movlb	3	; () banked
  4639  010846  25FA               	addwf	??_findClosestWall& (0+255),w,b
  4640  010848  0100               	movlb	0	; () banked
  4641  01084A  6FD6               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4642  01084C  0E01               	movlw	1
  4643  01084E  0103               	movlb	3	; () banked
  4644  010850  21FB               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4645  010852  0100               	movlb	0	; () banked
  4646  010854  6FD7               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4647  010856  0EFF               	movlw	255
  4648  010858  0100               	movlb	0	; () banked
  4649  01085A  6FD9               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4650  01085C  0E38               	movlw	56
  4651  01085E  6FD8               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4652  010860  0E00               	movlw	0
  4653  010862  EC92  F09D         	call	_irobot_rotate
  4654  010866                     l2383:
  4655                           
  4656                           ;main.c: 291: }
  4657                           ;main.c: 292: }
  4658                           ;main.c: 293: delay_ms(200);
  4659  010866  0E00               	movlw	0
  4660  010868  0100               	movlb	0	; () banked
  4661  01086A  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
  4662  01086C  0EC8               	movlw	200
  4663  01086E  6FB9               	movwf	delay_ms@ms& (0+255),b
  4664  010870  EC5A  F0AE         	call	_delay_ms	;wreg free
  4665  010874                     l2361:
  4666  010874  0100               	movlb	0	; () banked
  4667  010876  5183               	movf	_correctOrientation& (0+255),w,b
  4668  010878  0100               	movlb	0	; () banked
  4669  01087A  B4D8               	btfsc	status,2,c
  4670  01087C  D5D3               	goto	l2362
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 294: }
  4674                           ;main.c: 295: Motor_Speed(&Stepper, (400));
  4675                           
  4676                           ; BSR set to: 0
  4677  01087E  0EAE               	movlw	low _Stepper
  4678  010880  0100               	movlb	0	; () banked
  4679  010882  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  4680  010884  0E00               	movlw	high _Stepper
  4681  010886  0100               	movlb	0	; () banked
  4682  010888  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4683  01088A  0E01               	movlw	1
  4684  01088C  0100               	movlb	0	; () banked
  4685  01088E  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4686  010890  0E90               	movlw	144
  4687  010892  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  4688  010894  EC83  F0B4         	call	_Motor_Speed	;wreg free
  4689                           
  4690                           ;main.c: 296: Motor_Move(&Stepper, -100);
  4691  010898  0EAE               	movlw	low _Stepper
  4692  01089A  0100               	movlb	0	; () banked
  4693  01089C  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  4694  01089E  0E00               	movlw	high _Stepper
  4695  0108A0  0100               	movlb	0	; () banked
  4696  0108A2  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4697  0108A4  0EFF               	movlw	255
  4698  0108A6  0100               	movlb	0	; () banked
  4699  0108A8  6FBF               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4700  0108AA  0E9C               	movlw	156
  4701  0108AC  6FBE               	movwf	Motor_Move@pDelta& (0+255),b
  4702  0108AE  EC87  F0B3         	call	_Motor_Move	;wreg free
  4703  0108B2  0012               	return		;funcret
  4704  0108B4                     __end_of_findClosestWall:
  4705                           	opt stack 0
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           postinc0	equ	0xFEE
  4711                           wreg	equ	0xFE8
  4712                           postdec1	equ	0xFE5
  4713                           fsr1h	equ	0xFE2
  4714                           fsr1l	equ	0xFE1
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _mode3 *****************
  4718 ;; Defined at:
  4719 ;;		line 407 in file "main.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;Total ram usage:        0 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:   17
  4740 ;; This function calls:
  4741 ;;		_move_and_rotate
  4742 ;;		_safeToGo
  4743 ;; This function is called by:
  4744 ;;		_main
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text3
  4749  01665C                     __ptext3:
  4750                           	opt stack 0
  4751  01665C                     _mode3:
  4752                           	opt stack 13
  4753                           
  4754                           ;main.c: 408: safeToGo();
  4755                           
  4756                           ;incstack = 0
  4757  01665C  EC10  F0B1         	call	_safeToGo	;wreg free
  4758                           
  4759                           ;main.c: 409: dist = 0;
  4760  016660  0E00               	movlw	0
  4761  016662  0100               	movlb	0	; () banked
  4762  016664  6F6A               	movwf	(_dist+1)& (0+255),b
  4763  016666  0E00               	movlw	0
  4764  016668  6F69               	movwf	_dist& (0+255),b
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;main.c: 410: corner = 1;
  4768  01666A  0E00               	movlw	0
  4769  01666C  0103               	movlb	3	; () banked
  4770  01666E  6FF9               	movwf	(_corner+1)& (0+255),b
  4771  016670  0E01               	movlw	1
  4772  016672  6FF8               	movwf	_corner& (0+255),b
  4773                           
  4774                           ;main.c: 411: move_and_rotate();
  4775  016674  EC2B  F0A2         	call	_move_and_rotate	;wreg free
  4776                           
  4777                           ;main.c: 412: corner++;
  4778  016678  0103               	movlb	3	; () banked
  4779  01667A  4BF8               	infsnz	_corner& (0+255),f,b
  4780  01667C  2BF9               	incf	(_corner+1)& (0+255),f,b
  4781                           
  4782                           ; BSR set to: 3
  4783                           ;main.c: 413: move_and_rotate();
  4784  01667E  EC2B  F0A2         	call	_move_and_rotate	;wreg free
  4785                           
  4786                           ;main.c: 414: corner++;
  4787  016682  0103               	movlb	3	; () banked
  4788  016684  4BF8               	infsnz	_corner& (0+255),f,b
  4789  016686  2BF9               	incf	(_corner+1)& (0+255),f,b
  4790                           
  4791                           ; BSR set to: 3
  4792                           ;main.c: 415: move_and_rotate();
  4793  016688  EC2B  F0A2         	call	_move_and_rotate	;wreg free
  4794                           
  4795                           ;main.c: 416: corner++;
  4796  01668C  0103               	movlb	3	; () banked
  4797  01668E  4BF8               	infsnz	_corner& (0+255),f,b
  4798  016690  2BF9               	incf	(_corner+1)& (0+255),f,b
  4799                           
  4800                           ;main.c: 417: move_and_rotate();
  4801  016692  EC2B  F0A2         	call	_move_and_rotate	;wreg free
  4802  016696  0012               	return		;funcret
  4803  016698                     __end_of_mode3:
  4804                           	opt stack 0
  4805                           tblptru	equ	0xFF8
  4806                           tblptrh	equ	0xFF7
  4807                           tblptrl	equ	0xFF6
  4808                           tablat	equ	0xFF5
  4809                           postinc0	equ	0xFEE
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _move_and_rotate *****************
  4817 ;; Defined at:
  4818 ;;		line 141 in file "main.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;Total ram usage:        1 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:   14
  4839 ;; This function calls:
  4840 ;;		_Console_Render
  4841 ;;		___wmul
  4842 ;;		_delay_ms
  4843 ;;		_irobot_move_straight
  4844 ;;		_irobot_rotate
  4845 ;;		_irobot_stop_motion
  4846 ;;		_measureAndDisplayDistance
  4847 ;;		_printf
  4848 ;;		_update_distance
  4849 ;; This function is called by:
  4850 ;;		_mode3
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text4
  4855  014456                     __ptext4:
  4856                           	opt stack 0
  4857  014456                     _move_and_rotate:
  4858                           	opt stack 15
  4859                           
  4860                           ;main.c: 142: irobot_move_straight(100);
  4861                           
  4862                           ;incstack = 0
  4863  014456  0E00               	movlw	0
  4864  014458  0100               	movlb	0	; () banked
  4865  01445A  6FD3               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4866  01445C  0E64               	movlw	100
  4867  01445E  6FD2               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4868  014460  ECC6  F0B5         	call	_irobot_move_straight	;wreg free
  4869                           
  4870                           ;main.c: 143: while (dist < (corner * 1000)) {
  4871  014464  D027               	goto	l2336
  4872  014466                     
  4873                           ;main.c: 144: update_distance();
  4874  014466  EC3A  F0B6         	call	_update_distance	;wreg free
  4875                           
  4876                           ;main.c: 145: dist += iRDistance;
  4877  01446A  0100               	movlb	0	; () banked
  4878  01446C  5177               	movf	_iRDistance& (0+255),w,b
  4879  01446E  0100               	movlb	0	; () banked
  4880  014470  2769               	addwf	_dist& (0+255),f,b
  4881  014472  0100               	movlb	0	; () banked
  4882  014474  5178               	movf	(_iRDistance+1)& (0+255),w,b
  4883  014476  0100               	movlb	0	; () banked
  4884  014478  236A               	addwfc	(_dist+1)& (0+255),f,b
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;main.c: 146: printf("%c", (char)35);
  4888  01447A  0EFB               	movlw	low STR_1
  4889  01447C  0100               	movlb	0	; () banked
  4890  01447E  6FCE               	movwf	printf@f& (0+255),b
  4891  014480  0EFF               	movlw	high STR_1
  4892  014482  0100               	movlb	0	; () banked
  4893  014484  6FCF               	movwf	(printf@f+1)& (0+255),b
  4894  014486  0E00               	movlw	0
  4895  014488  0100               	movlb	0	; () banked
  4896  01448A  6FD1               	movwf	(?_printf+3)& (0+255),b
  4897  01448C  0E23               	movlw	35
  4898  01448E  6FD0               	movwf	(?_printf+2)& (0+255),b
  4899  014490  ECD1  F094         	call	_printf	;wreg free
  4900                           
  4901                           ;main.c: 147: printf("Distance: %d\n", dist);
  4902  014494  0EED               	movlw	low STR_2
  4903  014496  0100               	movlb	0	; () banked
  4904  014498  6FCE               	movwf	printf@f& (0+255),b
  4905  01449A  0EFF               	movlw	high STR_2
  4906  01449C  0100               	movlb	0	; () banked
  4907  01449E  6FCF               	movwf	(printf@f+1)& (0+255),b
  4908  0144A0  C069  F0D0         	movff	_dist,?_printf+2
  4909  0144A4  C06A  F0D1         	movff	_dist+1,?_printf+3
  4910  0144A8  ECD1  F094         	call	_printf	;wreg free
  4911                           
  4912                           ;main.c: 148: Console_Render();
  4913  0144AC  ECE5  F091         	call	_Console_Render	;wreg free
  4914                           
  4915                           ;main.c: 149: measureAndDisplayDistance();
  4916  0144B0  ECDC  F0A8         	call	_measureAndDisplayDistance	;wreg free
  4917  0144B4                     l2336:
  4918  0144B4  C3F8  F0B9         	movff	_corner,___wmul@multiplier
  4919  0144B8  C3F9  F0BA         	movff	_corner+1,___wmul@multiplier+1
  4920  0144BC  0E03               	movlw	3
  4921  0144BE  0100               	movlb	0	; () banked
  4922  0144C0  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4923  0144C2  0EE8               	movlw	232
  4924  0144C4  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  4925  0144C6  ECA4  F0B3         	call	___wmul	;wreg free
  4926  0144CA  0100               	movlb	0	; () banked
  4927  0144CC  51B9               	movf	?___wmul& (0+255),w,b
  4928  0144CE  0100               	movlb	0	; () banked
  4929  0144D0  5D69               	subwf	_dist& (0+255),w,b
  4930  0144D2  0100               	movlb	0	; () banked
  4931  0144D4  516A               	movf	(_dist+1)& (0+255),w,b
  4932  0144D6  0A80               	xorlw	128
  4933  0144D8  0100               	movlb	0	; () banked
  4934  0144DA  6FF8               	movwf	??_move_and_rotate& (0+255),b
  4935  0144DC  0100               	movlb	0	; () banked
  4936  0144DE  51BA               	movf	(?___wmul+1)& (0+255),w,b
  4937  0144E0  0A80               	xorlw	128
  4938  0144E2  0100               	movlb	0	; () banked
  4939  0144E4  59F8               	subwfb	??_move_and_rotate& (0+255),w,b
  4940  0144E6  A0D8               	btfss	status,0,c
  4941  0144E8  D7BE               	goto	l2337
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;main.c: 150: }
  4945                           ;main.c: 151: irobot_stop_motion(0);
  4946                           
  4947                           ; BSR set to: 0
  4948  0144EA  0E00               	movlw	0
  4949  0144EC  ECC6  F0B1         	call	_irobot_stop_motion
  4950                           
  4951                           ;main.c: 152: delay_ms(100);
  4952  0144F0  0E00               	movlw	0
  4953  0144F2  0100               	movlb	0	; () banked
  4954  0144F4  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
  4955  0144F6  0E64               	movlw	100
  4956  0144F8  6FB9               	movwf	delay_ms@ms& (0+255),b
  4957  0144FA  EC5A  F0AE         	call	_delay_ms	;wreg free
  4958                           
  4959                           ;main.c: 153: irobot_rotate(0, 67, 200);
  4960  0144FE  0E00               	movlw	0
  4961  014500  0100               	movlb	0	; () banked
  4962  014502  6FD7               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4963  014504  0E43               	movlw	67
  4964  014506  6FD6               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4965  014508  0E00               	movlw	0
  4966  01450A  0100               	movlb	0	; () banked
  4967  01450C  6FD9               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4968  01450E  0EC8               	movlw	200
  4969  014510  6FD8               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4970  014512  0E00               	movlw	0
  4971  014514  EC92  F09D         	call	_irobot_rotate
  4972                           
  4973                           ;main.c: 154: delay_ms(100);
  4974  014518  0E00               	movlw	0
  4975  01451A  0100               	movlb	0	; () banked
  4976  01451C  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
  4977  01451E  0E64               	movlw	100
  4978  014520  6FB9               	movwf	delay_ms@ms& (0+255),b
  4979  014522  EC5A  F0AE         	call	_delay_ms	;wreg free
  4980  014526  0012               	return		;funcret
  4981  014528                     __end_of_move_and_rotate:
  4982                           	opt stack 0
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           postdec1	equ	0xFE5
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _irobot_rotate *****************
  4995 ;; Defined at:
  4996 ;;		line 301 in file "Library/iRobotSerial.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  isScript        1    wreg     unsigned char 
  4999 ;;  rotateAngle     2   29[BANK0 ] short 
  5000 ;;  rotateSpeed     2   31[BANK0 ] short 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  isScript        1   35[BANK0 ] unsigned char 
  5003 ;;  angleTotal      2   38[BANK0 ] short 
  5004 ;;  rotateDirect    2   36[BANK0 ] short 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:       11 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:   11
  5021 ;; This function calls:
  5022 ;;		_irobot_move
  5023 ;;		_irobot_stop_motion
  5024 ;;		_update_angle
  5025 ;; This function is called by:
  5026 ;;		_move_and_rotate
  5027 ;;		_findClosestWall
  5028 ;;		_irobot_rotate_to
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text5
  5033  013B24                     __ptext5:
  5034                           	opt stack 0
  5035  013B24                     _irobot_rotate:
  5036                           	opt stack 17
  5037                           
  5038                           ;incstack = 0
  5039                           ;irobot_rotate@isScript stored from wreg
  5040  013B24  0100               	movlb	0	; () banked
  5041  013B26  6FDC               	movwf	irobot_rotate@isScript& (0+255),b
  5042                           
  5043                           ;iRobotSerial.c: 302: INT16 angleTotal = 0;
  5044  013B28  0E00               	movlw	0
  5045  013B2A  0100               	movlb	0	; () banked
  5046  013B2C  6FE0               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  5047  013B2E  0E00               	movlw	0
  5048  013B30  6FDF               	movwf	irobot_rotate@angleTotal& (0+255),b
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;iRobotSerial.c: 303: INT16 rotateDirection;
  5052                           ;iRobotSerial.c: 305: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateAngl
      +                          e = iR_CONST_CW);
  5053  013B32  0100               	movlb	0	; () banked
  5054  013B34  BFD7               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  5055  013B36  D00D               	goto	l2156
  5056  013B38  0100               	movlb	0	; () banked
  5057  013B3A  51D7               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5058  013B3C  E104               	bnz	u11440
  5059  013B3E  0100               	movlb	0	; () banked
  5060  013B40  05D6               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  5061  013B42  A0D8               	btfss	status,0,c
  5062  013B44  D006               	goto	l2156
  5063  013B46                     u11440:
  5064                           
  5065                           ; BSR set to: 0
  5066  013B46  0E00               	movlw	0
  5067  013B48  0100               	movlb	0	; () banked
  5068  013B4A  6FDE               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  5069  013B4C  0E01               	movlw	1
  5070  013B4E  6FDD               	movwf	irobot_rotate@rotateDirection& (0+255),b
  5071  013B50  D003               	goto	l2158
  5072  013B52                     l2156:
  5073                           
  5074                           ; BSR set to: 0
  5075  013B52  0100               	movlb	0	; () banked
  5076  013B54  69D6               	setf	irobot_rotate@rotateAngle& (0+255),b
  5077  013B56  69D7               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  5078  013B58                     l2158:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;iRobotSerial.c: 306: if (isScript) {
  5082                           
  5083                           ; BSR set to: 0
  5084  013B58  0100               	movlb	0	; () banked
  5085  013B5A  51DC               	movf	irobot_rotate@isScript& (0+255),w,b
  5086  013B5C  0100               	movlb	0	; () banked
  5087  013B5E  B4D8               	btfsc	status,2,c
  5088  013B60  D00C               	goto	l2159
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;iRobotSerial.c: 307: irobot_move(1, rotateSpeed, rotateDirection);
  5092  013B62  C0D8  F0C9         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  5093  013B66  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  5094  013B6A  C0DD  F0CB         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  5095  013B6E  C0DE  F0CC         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  5096  013B72  0E01               	movlw	1
  5097  013B74  EC94  F0A5         	call	_irobot_move
  5098                           
  5099                           ;iRobotSerial.c: 308: } else {
  5100  013B78  0012               	return	
  5101  013B7A                     l2159:
  5102                           
  5103                           ;iRobotSerial.c: 309: irobot_move(0, rotateSpeed, rotateDirection);
  5104  013B7A  C0D8  F0C9         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  5105  013B7E  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  5106  013B82  C0DD  F0CB         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  5107  013B86  C0DE  F0CC         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  5108  013B8A  0E00               	movlw	0
  5109  013B8C  EC94  F0A5         	call	_irobot_move
  5110                           
  5111                           ;iRobotSerial.c: 310: if (rotateSpeed > 0) {
  5112  013B90  0100               	movlb	0	; () banked
  5113  013B92  BFD9               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  5114  013B94  D022               	goto	u11470
  5115  013B96  0100               	movlb	0	; () banked
  5116  013B98  51D9               	movf	(irobot_rotate@rotateSpeed+1)& (0+255),w,b
  5117  013B9A  E10F               	bnz	l14599
  5118  013B9C  0100               	movlb	0	; () banked
  5119  013B9E  05D8               	decf	irobot_rotate@rotateSpeed& (0+255),w,b
  5120  013BA0  B0D8               	btfsc	status,0,c
  5121  013BA2  D00B               	goto	l2162
  5122  013BA4  D01A               	goto	u11470
  5123  013BA6                     
  5124                           ; BSR set to: 0
  5125                           ;iRobotSerial.c: 312: update_angle();
  5126                           
  5127                           ; BSR set to: 0
  5128  013BA6  EC43  F0B6         	call	_update_angle	;wreg free
  5129                           
  5130                           ;iRobotSerial.c: 313: angleTotal += iRAngle;
  5131  013BAA  0100               	movlb	0	; () banked
  5132  013BAC  5175               	movf	_iRAngle& (0+255),w,b
  5133  013BAE  0100               	movlb	0	; () banked
  5134  013BB0  27DF               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  5135  013BB2  0100               	movlb	0	; () banked
  5136  013BB4  5176               	movf	(_iRAngle+1)& (0+255),w,b
  5137  013BB6  0100               	movlb	0	; () banked
  5138  013BB8  23E0               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  5139  013BBA                     l2162:
  5140  013BBA                     l14599:
  5141                           
  5142                           ; BSR set to: 0
  5143  013BBA  0100               	movlb	0	; () banked
  5144  013BBC  51D6               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  5145  013BBE  0100               	movlb	0	; () banked
  5146  013BC0  5DDF               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  5147  013BC2  0100               	movlb	0	; () banked
  5148  013BC4  51E0               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  5149  013BC6  0A80               	xorlw	128
  5150  013BC8  0100               	movlb	0	; () banked
  5151  013BCA  6FDA               	movwf	??_irobot_rotate& (0+255),b
  5152  013BCC  0100               	movlb	0	; () banked
  5153  013BCE  51D7               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5154  013BD0  0A80               	xorlw	128
  5155  013BD2  0100               	movlb	0	; () banked
  5156  013BD4  59DA               	subwfb	??_irobot_rotate& (0+255),w,b
  5157  013BD6  A0D8               	btfss	status,0,c
  5158  013BD8  D7E6               	goto	l2163
  5159  013BDA                     u11470:
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;iRobotSerial.c: 314: }
  5163                           ;iRobotSerial.c: 315: }
  5164                           ;iRobotSerial.c: 316: if (rotateSpeed < 0) {
  5165                           
  5166                           ; BSR set to: 0
  5167                           
  5168                           ; BSR set to: 0
  5169  013BDA  0100               	movlb	0	; () banked
  5170  013BDC  BFD9               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  5171  013BDE  D014               	goto	l2166
  5172  013BE0  D023               	goto	u11490
  5173  013BE2                     
  5174                           ; BSR set to: 0
  5175                           ;iRobotSerial.c: 318: update_angle();
  5176                           
  5177                           ; BSR set to: 0
  5178  013BE2  EC43  F0B6         	call	_update_angle	;wreg free
  5179                           
  5180                           ;iRobotSerial.c: 319: angleTotal += -iRAngle;
  5181  013BE6  C075  F0DA         	movff	_iRAngle,??_irobot_rotate
  5182  013BEA  C076  F0DB         	movff	_iRAngle+1,??_irobot_rotate+1
  5183  013BEE  0100               	movlb	0	; () banked
  5184  013BF0  1FDA               	comf	??_irobot_rotate& (0+255),f,b
  5185  013BF2  1FDB               	comf	(??_irobot_rotate+1)& (0+255),f,b
  5186  013BF4  4BDA               	infsnz	??_irobot_rotate& (0+255),f,b
  5187  013BF6  2BDB               	incf	(??_irobot_rotate+1)& (0+255),f,b
  5188  013BF8  0100               	movlb	0	; () banked
  5189  013BFA  51DA               	movf	??_irobot_rotate& (0+255),w,b
  5190  013BFC  0100               	movlb	0	; () banked
  5191  013BFE  27DF               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  5192  013C00  0100               	movlb	0	; () banked
  5193  013C02  51DB               	movf	(??_irobot_rotate+1)& (0+255),w,b
  5194  013C04  0100               	movlb	0	; () banked
  5195  013C06  23E0               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  5196  013C08                     l2166:
  5197                           
  5198                           ; BSR set to: 0
  5199                           
  5200                           ; BSR set to: 0
  5201  013C08  0100               	movlb	0	; () banked
  5202  013C0A  51D6               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  5203  013C0C  0100               	movlb	0	; () banked
  5204  013C0E  5DDF               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  5205  013C10  0100               	movlb	0	; () banked
  5206  013C12  51E0               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  5207  013C14  0A80               	xorlw	128
  5208  013C16  0100               	movlb	0	; () banked
  5209  013C18  6FDA               	movwf	??_irobot_rotate& (0+255),b
  5210  013C1A  0100               	movlb	0	; () banked
  5211  013C1C  51D7               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  5212  013C1E  0A80               	xorlw	128
  5213  013C20  0100               	movlb	0	; () banked
  5214  013C22  59DA               	subwfb	??_irobot_rotate& (0+255),w,b
  5215  013C24  A0D8               	btfss	status,0,c
  5216  013C26  D7DD               	goto	l2167
  5217  013C28                     u11490:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;iRobotSerial.c: 320: }
  5221                           ;iRobotSerial.c: 321: }
  5222                           ;iRobotSerial.c: 322: irobot_stop_motion(0);
  5223                           
  5224                           ; BSR set to: 0
  5225                           
  5226                           ; BSR set to: 0
  5227  013C28  0E00               	movlw	0
  5228  013C2A  ECC6  F0B1         	call	_irobot_stop_motion
  5229  013C2E  0012               	return	
  5230  013C30                     __end_of_irobot_rotate:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           postinc0	equ	0xFEE
  5237                           wreg	equ	0xFE8
  5238                           postdec1	equ	0xFE5
  5239                           fsr1h	equ	0xFE2
  5240                           fsr1l	equ	0xFE1
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _mode2 *****************
  5244 ;; Defined at:
  5245 ;;		line 382 in file "main.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      void 
  5252 ;; Registers used:
  5253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:   17
  5266 ;; This function calls:
  5267 ;;		_Console_Render
  5268 ;;		_MXK_Dequeue
  5269 ;;		_MXK_Release
  5270 ;;		_MXK_SwitchTo
  5271 ;;		_irobot_move_straight
  5272 ;;		_irobot_stop_motion
  5273 ;;		_measureAndDisplayDistance
  5274 ;;		_printf
  5275 ;;		_safeToGo
  5276 ;;		_update_distance
  5277 ;; This function is called by:
  5278 ;;		_main
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text6
  5283  013F2C                     __ptext6:
  5284                           	opt stack 0
  5285  013F2C                     _mode2:
  5286                           	opt stack 13
  5287                           
  5288                           ;main.c: 383: safeToGo();
  5289                           
  5290                           ;incstack = 0
  5291  013F2C  EC10  F0B1         	call	_safeToGo	;wreg free
  5292                           
  5293                           ;main.c: 384: if (MXK_SwitchTo(eMXK_HMI)) {
  5294  013F30  0E01               	movlw	1
  5295  013F32  EC51  F0B2         	call	_MXK_SwitchTo
  5296  013F36  0900               	iorlw	0
  5297  013F38  B4D8               	btfsc	status,2,c
  5298  013F3A  0012               	return	
  5299                           
  5300                           ;main.c: 385: printf("%c", (char)35);
  5301  013F3C  0EFB               	movlw	low STR_1
  5302  013F3E  0100               	movlb	0	; () banked
  5303  013F40  6FCE               	movwf	printf@f& (0+255),b
  5304  013F42  0EFF               	movlw	high STR_1
  5305  013F44  0100               	movlb	0	; () banked
  5306  013F46  6FCF               	movwf	(printf@f+1)& (0+255),b
  5307  013F48  0E00               	movlw	0
  5308  013F4A  0100               	movlb	0	; () banked
  5309  013F4C  6FD1               	movwf	(?_printf+3)& (0+255),b
  5310  013F4E  0E23               	movlw	35
  5311  013F50  6FD0               	movwf	(?_printf+2)& (0+255),b
  5312  013F52  ECD1  F094         	call	_printf	;wreg free
  5313                           
  5314                           ;main.c: 386: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  5315  013F56  0E95               	movlw	low STR_8
  5316  013F58  0100               	movlb	0	; () banked
  5317  013F5A  6FCE               	movwf	printf@f& (0+255),b
  5318  013F5C  0EFF               	movlw	high STR_8
  5319  013F5E  0100               	movlb	0	; () banked
  5320  013F60  6FCF               	movwf	(printf@f+1)& (0+255),b
  5321  013F62  C073  F0D0         	movff	_distanceTotal,?_printf+2
  5322  013F66  C074  F0D1         	movff	_distanceTotal+1,?_printf+3
  5323  013F6A  C086  F0D2         	movff	_iRBumpLeft,?_printf+4
  5324  013F6E  0100               	movlb	0	; () banked
  5325  013F70  6BD3               	clrf	(?_printf+5)& (0+255),b
  5326  013F72  C087  F0D4         	movff	_iRBumpRight,?_printf+6
  5327  013F76  0100               	movlb	0	; () banked
  5328  013F78  6BD5               	clrf	(?_printf+7)& (0+255),b
  5329  013F7A  ECD1  F094         	call	_printf	;wreg free
  5330                           
  5331                           ;main.c: 387: Console_Render();
  5332  013F7E  ECE5  F091         	call	_Console_Render	;wreg free
  5333                           
  5334                           ;main.c: 389: dist = 0;
  5335  013F82  0E00               	movlw	0
  5336  013F84  0100               	movlb	0	; () banked
  5337  013F86  6F6A               	movwf	(_dist+1)& (0+255),b
  5338  013F88  0E00               	movlw	0
  5339  013F8A  6F69               	movwf	_dist& (0+255),b
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;main.c: 390: irobot_move_straight(200);
  5343  013F8C  0E00               	movlw	0
  5344  013F8E  0100               	movlb	0	; () banked
  5345  013F90  6FD3               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  5346  013F92  0EC8               	movlw	200
  5347  013F94  6FD2               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  5348  013F96  ECC6  F0B5         	call	_irobot_move_straight	;wreg free
  5349                           
  5350                           ;main.c: 391: while (dist < 5000) {
  5351  013F9A  D027               	goto	l2420
  5352  013F9C                     
  5353                           ;main.c: 392: update_distance();
  5354  013F9C  EC3A  F0B6         	call	_update_distance	;wreg free
  5355                           
  5356                           ;main.c: 393: dist += iRDistance;
  5357  013FA0  0100               	movlb	0	; () banked
  5358  013FA2  5177               	movf	_iRDistance& (0+255),w,b
  5359  013FA4  0100               	movlb	0	; () banked
  5360  013FA6  2769               	addwf	_dist& (0+255),f,b
  5361  013FA8  0100               	movlb	0	; () banked
  5362  013FAA  5178               	movf	(_iRDistance+1)& (0+255),w,b
  5363  013FAC  0100               	movlb	0	; () banked
  5364  013FAE  236A               	addwfc	(_dist+1)& (0+255),f,b
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;main.c: 394: printf("%c", (char)35);
  5368  013FB0  0EFB               	movlw	low STR_1
  5369  013FB2  0100               	movlb	0	; () banked
  5370  013FB4  6FCE               	movwf	printf@f& (0+255),b
  5371  013FB6  0EFF               	movlw	high STR_1
  5372  013FB8  0100               	movlb	0	; () banked
  5373  013FBA  6FCF               	movwf	(printf@f+1)& (0+255),b
  5374  013FBC  0E00               	movlw	0
  5375  013FBE  0100               	movlb	0	; () banked
  5376  013FC0  6FD1               	movwf	(?_printf+3)& (0+255),b
  5377  013FC2  0E23               	movlw	35
  5378  013FC4  6FD0               	movwf	(?_printf+2)& (0+255),b
  5379  013FC6  ECD1  F094         	call	_printf	;wreg free
  5380                           
  5381                           ;main.c: 395: printf("Distance: %d\n", dist);
  5382  013FCA  0EED               	movlw	low STR_2
  5383  013FCC  0100               	movlb	0	; () banked
  5384  013FCE  6FCE               	movwf	printf@f& (0+255),b
  5385  013FD0  0EFF               	movlw	high STR_2
  5386  013FD2  0100               	movlb	0	; () banked
  5387  013FD4  6FCF               	movwf	(printf@f+1)& (0+255),b
  5388  013FD6  C069  F0D0         	movff	_dist,?_printf+2
  5389  013FDA  C06A  F0D1         	movff	_dist+1,?_printf+3
  5390  013FDE  ECD1  F094         	call	_printf	;wreg free
  5391                           
  5392                           ;main.c: 396: Console_Render();
  5393  013FE2  ECE5  F091         	call	_Console_Render	;wreg free
  5394                           
  5395                           ;main.c: 397: measureAndDisplayDistance();
  5396  013FE6  ECDC  F0A8         	call	_measureAndDisplayDistance	;wreg free
  5397  013FEA                     l2420:
  5398  013FEA  0100               	movlb	0	; () banked
  5399  013FEC  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  5400  013FEE  D7D6               	goto	l2421
  5401  013FF0  0E88               	movlw	136
  5402  013FF2  0100               	movlb	0	; () banked
  5403  013FF4  5D69               	subwf	_dist& (0+255),w,b
  5404  013FF6  0E13               	movlw	19
  5405  013FF8  0100               	movlb	0	; () banked
  5406  013FFA  596A               	subwfb	(_dist+1)& (0+255),w,b
  5407  013FFC  A0D8               	btfss	status,0,c
  5408  013FFE  D7CE               	goto	l2421
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;main.c: 398: }
  5412                           ;main.c: 399: irobot_stop_motion(0);
  5413                           
  5414                           ; BSR set to: 0
  5415  014000  0E00               	movlw	0
  5416  014002  ECC6  F0B1         	call	_irobot_stop_motion
  5417                           
  5418                           ;main.c: 401: if (MXK_Release())
  5419  014006  EC9D  F0B5         	call	_MXK_Release	;wreg free
  5420  01400A  0900               	iorlw	0
  5421  01400C  B4D8               	btfsc	status,2,c
  5422  01400E  0012               	return	
  5423                           
  5424                           ;main.c: 402: MXK_Dequeue();
  5425  014010  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5426  014014  0012               	return	
  5427  014016                     __end_of_mode2:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           postdec1	equ	0xFE5
  5436                           fsr1h	equ	0xFE2
  5437                           fsr1l	equ	0xFE1
  5438                           status	equ	0xFD8
  5439                           
  5440 ;; *************** function _measureAndDisplayDistance *****************
  5441 ;; Defined at:
  5442 ;;		line 300 in file "main.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      void 
  5449 ;; Registers used:
  5450 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;Total ram usage:        4 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:   13
  5463 ;; This function calls:
  5464 ;;		_ADC_Start
  5465 ;;		_ADC_Voltage
  5466 ;;		_HMI_Render
  5467 ;;		_HMI_SetNumber
  5468 ;;		_MXK_Dequeue
  5469 ;;		_MXK_Release
  5470 ;;		_MXK_SwitchTo
  5471 ;;		___fldiv
  5472 ;;		___fltol
  5473 ;; This function is called by:
  5474 ;;		_move_and_rotate
  5475 ;;		_mode2
  5476 ;;		_main
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text7
  5481  0151B8                     __ptext7:
  5482                           	opt stack 0
  5483  0151B8                     _measureAndDisplayDistance:
  5484                           	opt stack 15
  5485                           
  5486                           ;main.c: 301: ADC_Start(&ADC_AN0);
  5487                           
  5488                           ;incstack = 0
  5489  0151B8  0EB4               	movlw	low _ADC_AN0
  5490  0151BA  0100               	movlb	0	; () banked
  5491  0151BC  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  5492  0151BE  0E00               	movlw	high _ADC_AN0
  5493  0151C0  0100               	movlb	0	; () banked
  5494  0151C2  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5495  0151C4  EC24  F0AB         	call	_ADC_Start	;wreg free
  5496                           
  5497                           ;main.c: 302: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5498  0151C8  0EB4               	movlw	low _ADC_AN0
  5499  0151CA  0100               	movlb	0	; () banked
  5500  0151CC  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  5501  0151CE  0E00               	movlw	high _ADC_AN0
  5502  0151D0  0100               	movlb	0	; () banked
  5503  0151D2  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5504  0151D4  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  5505  0151D8  C0E0  F104         	movff	?_ADC_Voltage,_measureAndDisplayDistance$15610
  5506  0151DC  C0E1  F105         	movff	?_ADC_Voltage+1,_measureAndDisplayDistance$15610+1
  5507  0151E0  C0E2  F106         	movff	?_ADC_Voltage+2,_measureAndDisplayDistance$15610+2
  5508  0151E4  C0E3  F107         	movff	?_ADC_Voltage+3,_measureAndDisplayDistance$15610+3
  5509                           
  5510                           ;main.c: 302: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5511  0151E8  C104  F0BD         	movff	_measureAndDisplayDistance$15610,___fldiv@a
  5512  0151EC  C105  F0BE         	movff	_measureAndDisplayDistance$15610+1,___fldiv@a+1
  5513  0151F0  C106  F0BF         	movff	_measureAndDisplayDistance$15610+2,___fldiv@a+2
  5514  0151F4  C107  F0C0         	movff	_measureAndDisplayDistance$15610+3,___fldiv@a+3
  5515  0151F8  0E00               	movlw	0
  5516  0151FA  0100               	movlb	0	; () banked
  5517  0151FC  6FB9               	movwf	___fldiv@b& (0+255),b
  5518  0151FE  0E00               	movlw	0
  5519  015200  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  5520  015202  0E6C               	movlw	108
  5521  015204  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  5522  015206  0E42               	movlw	66
  5523  015208  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  5524  01520A  ECA6  F08A         	call	___fldiv	;wreg free
  5525  01520E  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  5526  015212  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  5527  015216  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  5528  01521A  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  5529  01521E  EC18  F09E         	call	___fltol	;wreg free
  5530  015222  C0F2  F06D         	movff	?___fltol,_IRValue
  5531  015226  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  5532                           
  5533                           ;main.c: 303: if (MXK_SwitchTo(eMXK_HMI)) {
  5534  01522A  0E01               	movlw	1
  5535  01522C  EC51  F0B2         	call	_MXK_SwitchTo
  5536  015230  0900               	iorlw	0
  5537  015232  B4D8               	btfsc	status,2,c
  5538  015234  0012               	return	
  5539                           
  5540                           ;main.c: 304: HMI_SetNumber(IRValue);
  5541  015236  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  5542  01523A  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5543  01523E  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  5544                           
  5545                           ;main.c: 305: HMI_Render();
  5546  015242  ECB2  F0B2         	call	_HMI_Render	;wreg free
  5547                           
  5548                           ;main.c: 306: if (MXK_Release())
  5549  015246  EC9D  F0B5         	call	_MXK_Release	;wreg free
  5550  01524A  0900               	iorlw	0
  5551  01524C  B4D8               	btfsc	status,2,c
  5552  01524E  0012               	return	
  5553                           
  5554                           ;main.c: 307: MXK_Dequeue();
  5555  015250  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5556  015254  0012               	return	
  5557  015256                     __end_of_measureAndDisplayDistance:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           postdec1	equ	0xFE5
  5566                           fsr1h	equ	0xFE2
  5567                           fsr1l	equ	0xFE1
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _irobot_move_straight *****************
  5571 ;; Defined at:
  5572 ;;		line 346 in file "Library/iRobotSerial.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  straightSpee    2   25[BANK0 ] short 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;		None
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5586 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;Total ram usage:        2 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    9
  5593 ;; This function calls:
  5594 ;;		_irobot_move
  5595 ;; This function is called by:
  5596 ;;		_move_and_rotate
  5597 ;;		_mode2
  5598 ;;		_mode4
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text8
  5603  016B8C                     __ptext8:
  5604                           	opt stack 0
  5605  016B8C                     _irobot_move_straight:
  5606                           	opt stack 20
  5607                           
  5608                           ;iRobotSerial.c: 347: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  5609                           
  5610                           ;incstack = 0
  5611  016B8C  C0D2  F0C9         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  5612  016B90  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  5613  016B94  0E7F               	movlw	127
  5614  016B96  0100               	movlb	0	; () banked
  5615  016B98  6FCC               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  5616  016B9A  69CB               	setf	irobot_move@moveTurnRadius& (0+255),b
  5617  016B9C  0E00               	movlw	0
  5618  016B9E  EC94  F0A5         	call	_irobot_move
  5619  016BA2  0012               	return		;funcret
  5620  016BA4                     __end_of_irobot_move_straight:
  5621                           	opt stack 0
  5622                           tblptru	equ	0xFF8
  5623                           tblptrh	equ	0xFF7
  5624                           tblptrl	equ	0xFF6
  5625                           tablat	equ	0xFF5
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           postdec1	equ	0xFE5
  5629                           fsr1h	equ	0xFE2
  5630                           fsr1l	equ	0xFE1
  5631                           status	equ	0xFD8
  5632                           
  5633 ;; *************** function _mode1 *****************
  5634 ;; Defined at:
  5635 ;;		line 312 in file "main.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;		None
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  moveto          2    0[BANK4 ] int 
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Totals:         0       0       0       0       2       6       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;Total ram usage:        8 bytes
  5654 ;; Hardware stack levels used:    1
  5655 ;; Hardware stack levels required when called:   17
  5656 ;; This function calls:
  5657 ;;		_ADC_Start
  5658 ;;		_ADC_Voltage
  5659 ;;		_Console_Render
  5660 ;;		_HMI_Render
  5661 ;;		_HMI_SetNumber
  5662 ;;		_MXK_Dequeue
  5663 ;;		_MXK_Release
  5664 ;;		_MXK_SwitchTo
  5665 ;;		_Motor_Move
  5666 ;;		_Motor_Speed
  5667 ;;		___fldiv
  5668 ;;		___fltol
  5669 ;;		_printf
  5670 ;;		_safeToGo
  5671 ;; This function is called by:
  5672 ;;		_main
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text9
  5677  011178                     __ptext9:
  5678                           	opt stack 0
  5679  011178                     _mode1:
  5680                           	opt stack 13
  5681                           
  5682                           ;main.c: 313: safeToGo();
  5683                           
  5684                           ;incstack = 0
  5685  011178  EC10  F0B1         	call	_safeToGo	;wreg free
  5686                           
  5687                           ;main.c: 314: if (MXK_SwitchTo(eMXK_HMI)) {
  5688  01117C  0E01               	movlw	1
  5689  01117E  EC51  F0B2         	call	_MXK_SwitchTo
  5690  011182  0900               	iorlw	0
  5691  011184  B4D8               	btfsc	status,2,c
  5692  011186  D029               	goto	l2394
  5693                           
  5694                           ;main.c: 315: printf("%c", (char)35);
  5695  011188  0EFB               	movlw	low STR_1
  5696  01118A  0100               	movlb	0	; () banked
  5697  01118C  6FCE               	movwf	printf@f& (0+255),b
  5698  01118E  0EFF               	movlw	high STR_1
  5699  011190  0100               	movlb	0	; () banked
  5700  011192  6FCF               	movwf	(printf@f+1)& (0+255),b
  5701  011194  0E00               	movlw	0
  5702  011196  0100               	movlb	0	; () banked
  5703  011198  6FD1               	movwf	(?_printf+3)& (0+255),b
  5704  01119A  0E23               	movlw	35
  5705  01119C  6FD0               	movwf	(?_printf+2)& (0+255),b
  5706  01119E  ECD1  F094         	call	_printf	;wreg free
  5707                           
  5708                           ;main.c: 316: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  5709  0111A2  0E95               	movlw	low STR_8
  5710  0111A4  0100               	movlb	0	; () banked
  5711  0111A6  6FCE               	movwf	printf@f& (0+255),b
  5712  0111A8  0EFF               	movlw	high STR_8
  5713  0111AA  0100               	movlb	0	; () banked
  5714  0111AC  6FCF               	movwf	(printf@f+1)& (0+255),b
  5715  0111AE  C073  F0D0         	movff	_distanceTotal,?_printf+2
  5716  0111B2  C074  F0D1         	movff	_distanceTotal+1,?_printf+3
  5717  0111B6  C086  F0D2         	movff	_iRBumpLeft,?_printf+4
  5718  0111BA  0100               	movlb	0	; () banked
  5719  0111BC  6BD3               	clrf	(?_printf+5)& (0+255),b
  5720  0111BE  C087  F0D4         	movff	_iRBumpRight,?_printf+6
  5721  0111C2  0100               	movlb	0	; () banked
  5722  0111C4  6BD5               	clrf	(?_printf+7)& (0+255),b
  5723  0111C6  ECD1  F094         	call	_printf	;wreg free
  5724                           
  5725                           ;main.c: 317: Console_Render();
  5726  0111CA  ECE5  F091         	call	_Console_Render	;wreg free
  5727                           
  5728                           ;main.c: 318: if (MXK_Release())
  5729  0111CE  EC9D  F0B5         	call	_MXK_Release	;wreg free
  5730  0111D2  0900               	iorlw	0
  5731  0111D4  A4D8               	btfss	status,2,c
  5732                           
  5733                           ;main.c: 319: MXK_Dequeue();
  5734  0111D6  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5735  0111DA                     l2394:
  5736                           
  5737                           ;main.c: 320: }
  5738                           ;main.c: 321: StepRotate = 0;
  5739  0111DA  0E00               	movlw	0
  5740  0111DC  0100               	movlb	0	; () banked
  5741  0111DE  6F72               	movwf	(_StepRotate+1)& (0+255),b
  5742  0111E0  0E00               	movlw	0
  5743  0111E2  6F71               	movwf	_StepRotate& (0+255),b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;main.c: 322: MinDist = 1000;
  5747  0111E4  0E03               	movlw	3
  5748  0111E6  0100               	movlb	0	; () banked
  5749  0111E8  6FFC               	movwf	(_MinDist+1)& (0+255),b
  5750  0111EA  0EE8               	movlw	232
  5751  0111EC  6FFB               	movwf	_MinDist& (0+255),b
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;main.c: 323: Stepstomin = 0;
  5755  0111EE  0E00               	movlw	0
  5756  0111F0  0100               	movlb	0	; () banked
  5757  0111F2  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  5758  0111F4  0E00               	movlw	0
  5759  0111F6  6F6F               	movwf	_Stepstomin& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;main.c: 324: IRValue = 0;
  5763  0111F8  0E00               	movlw	0
  5764  0111FA  0100               	movlb	0	; () banked
  5765  0111FC  6F6E               	movwf	(_IRValue+1)& (0+255),b
  5766  0111FE  0E00               	movlw	0
  5767  011200  6F6D               	movwf	_IRValue& (0+255),b
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;main.c: 325: TimerX = 8;
  5771  011202  0E00               	movlw	0
  5772  011204  0100               	movlb	0	; () banked
  5773  011206  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5774  011208  0E08               	movlw	8
  5775  01120A  6FF9               	movwf	_TimerX& (0+255),b
  5776                           
  5777                           ;main.c: 326: while (StepRotate < 400) {
  5778  01120C  D0F9               	goto	u15010
  5779  01120E                     
  5780                           ; BSR set to: 0
  5781                           ;main.c: 327: StepRotate++;
  5782                           
  5783                           ; BSR set to: 0
  5784  01120E  0100               	movlb	0	; () banked
  5785  011210  4B71               	infsnz	_StepRotate& (0+255),f,b
  5786  011212  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;main.c: 328: ADC_Start(&ADC_AN0);
  5790  011214  0EB4               	movlw	low _ADC_AN0
  5791  011216  0100               	movlb	0	; () banked
  5792  011218  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  5793  01121A  0E00               	movlw	high _ADC_AN0
  5794  01121C  0100               	movlb	0	; () banked
  5795  01121E  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5796  011220  EC24  F0AB         	call	_ADC_Start	;wreg free
  5797                           
  5798                           ;main.c: 329: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5799  011224  0EB4               	movlw	low _ADC_AN0
  5800  011226  0100               	movlb	0	; () banked
  5801  011228  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  5802  01122A  0E00               	movlw	high _ADC_AN0
  5803  01122C  0100               	movlb	0	; () banked
  5804  01122E  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5805  011230  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  5806  011234  C0E0  F4AC         	movff	?_ADC_Voltage,_mode1$15611
  5807  011238  C0E1  F4AD         	movff	?_ADC_Voltage+1,_mode1$15611+1
  5808  01123C  C0E2  F4AE         	movff	?_ADC_Voltage+2,_mode1$15611+2
  5809  011240  C0E3  F4AF         	movff	?_ADC_Voltage+3,_mode1$15611+3
  5810                           
  5811                           ;main.c: 329: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5812  011244  C4AC  F0BD         	movff	_mode1$15611,___fldiv@a
  5813  011248  C4AD  F0BE         	movff	_mode1$15611+1,___fldiv@a+1
  5814  01124C  C4AE  F0BF         	movff	_mode1$15611+2,___fldiv@a+2
  5815  011250  C4AF  F0C0         	movff	_mode1$15611+3,___fldiv@a+3
  5816  011254  0E00               	movlw	0
  5817  011256  0100               	movlb	0	; () banked
  5818  011258  6FB9               	movwf	___fldiv@b& (0+255),b
  5819  01125A  0E00               	movlw	0
  5820  01125C  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  5821  01125E  0E6C               	movlw	108
  5822  011260  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  5823  011262  0E42               	movlw	66
  5824  011264  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  5825  011266  ECA6  F08A         	call	___fldiv	;wreg free
  5826  01126A  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  5827  01126E  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  5828  011272  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  5829  011276  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  5830  01127A  EC18  F09E         	call	___fltol	;wreg free
  5831  01127E  C0F2  F06D         	movff	?___fltol,_IRValue
  5832  011282  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  5833                           
  5834                           ;main.c: 330: if (MXK_SwitchTo(eMXK_HMI)) {
  5835  011286  0E01               	movlw	1
  5836  011288  EC51  F0B2         	call	_MXK_SwitchTo
  5837  01128C  0900               	iorlw	0
  5838  01128E  B4D8               	btfsc	status,2,c
  5839  011290  D00E               	goto	l2398
  5840                           
  5841                           ;main.c: 331: HMI_SetNumber(IRValue);
  5842  011292  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  5843  011296  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5844  01129A  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  5845                           
  5846                           ;main.c: 332: HMI_Render();
  5847  01129E  ECB2  F0B2         	call	_HMI_Render	;wreg free
  5848                           
  5849                           ;main.c: 333: if (MXK_Release())
  5850  0112A2  EC9D  F0B5         	call	_MXK_Release	;wreg free
  5851  0112A6  0900               	iorlw	0
  5852  0112A8  A4D8               	btfss	status,2,c
  5853                           
  5854                           ;main.c: 334: MXK_Dequeue();
  5855  0112AA  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5856  0112AE                     l2398:
  5857                           
  5858                           ;main.c: 335: }
  5859                           ;main.c: 336: if (IRValue < MinDist) {
  5860  0112AE  0100               	movlb	0	; () banked
  5861  0112B0  51FB               	movf	_MinDist& (0+255),w,b
  5862  0112B2  0100               	movlb	0	; () banked
  5863  0112B4  5D6D               	subwf	_IRValue& (0+255),w,b
  5864  0112B6  0100               	movlb	0	; () banked
  5865  0112B8  516E               	movf	(_IRValue+1)& (0+255),w,b
  5866  0112BA  0A80               	xorlw	128
  5867  0112BC  0103               	movlb	3	; () banked
  5868  0112BE  6FFA               	movwf	??_mode1& (0+255),b
  5869  0112C0  0100               	movlb	0	; () banked
  5870  0112C2  51FC               	movf	(_MinDist+1)& (0+255),w,b
  5871  0112C4  0A80               	xorlw	128
  5872  0112C6  0103               	movlb	3	; () banked
  5873  0112C8  59FA               	subwfb	??_mode1& (0+255),w,b
  5874  0112CA  B0D8               	btfsc	status,0,c
  5875  0112CC  D008               	goto	l2399
  5876                           
  5877                           ; BSR set to: 3
  5878                           ;main.c: 337: MinDist = IRValue;
  5879  0112CE  C06D  F0FB         	movff	_IRValue,_MinDist
  5880  0112D2  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  5881                           
  5882                           ;main.c: 338: Stepstomin = StepRotate;
  5883  0112D6  C071  F06F         	movff	_StepRotate,_Stepstomin
  5884  0112DA  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  5885  0112DE                     l2399:
  5886                           
  5887                           ; BSR set to: 3
  5888                           ;main.c: 339: }
  5889                           ;main.c: 340: if (MXK_SwitchTo(eMXK_Motor)) {
  5890                           
  5891                           ; BSR set to: 3
  5892  0112DE  0E08               	movlw	8
  5893  0112E0  EC51  F0B2         	call	_MXK_SwitchTo
  5894  0112E4  0900               	iorlw	0
  5895  0112E6  B4D8               	btfsc	status,2,c
  5896  0112E8  D020               	goto	l2401
  5897                           
  5898                           ;main.c: 341: Motor_Speed(&Stepper, (50));
  5899  0112EA  0EAE               	movlw	low _Stepper
  5900  0112EC  0100               	movlb	0	; () banked
  5901  0112EE  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  5902  0112F0  0E00               	movlw	high _Stepper
  5903  0112F2  0100               	movlb	0	; () banked
  5904  0112F4  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5905  0112F6  0E00               	movlw	0
  5906  0112F8  0100               	movlb	0	; () banked
  5907  0112FA  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5908  0112FC  0E32               	movlw	50
  5909  0112FE  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  5910  011300  EC83  F0B4         	call	_Motor_Speed	;wreg free
  5911                           
  5912                           ;main.c: 342: Motor_Move(&Stepper, 1);
  5913  011304  0EAE               	movlw	low _Stepper
  5914  011306  0100               	movlb	0	; () banked
  5915  011308  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  5916  01130A  0E00               	movlw	high _Stepper
  5917  01130C  0100               	movlb	0	; () banked
  5918  01130E  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5919  011310  0E00               	movlw	0
  5920  011312  0100               	movlb	0	; () banked
  5921  011314  6FBF               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  5922  011316  0E01               	movlw	1
  5923  011318  6FBE               	movwf	Motor_Move@pDelta& (0+255),b
  5924  01131A  EC87  F0B3         	call	_Motor_Move	;wreg free
  5925                           
  5926                           ;main.c: 343: if (MXK_Release())
  5927  01131E  EC9D  F0B5         	call	_MXK_Release	;wreg free
  5928  011322  0900               	iorlw	0
  5929  011324  A4D8               	btfss	status,2,c
  5930                           
  5931                           ;main.c: 344: MXK_Dequeue();
  5932  011326  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5933  01132A                     l2401:
  5934                           
  5935                           ;main.c: 345: }
  5936                           ;main.c: 346: TimerX = 10;
  5937  01132A  0E00               	movlw	0
  5938  01132C  0100               	movlb	0	; () banked
  5939  01132E  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5940  011330  0E0A               	movlw	10
  5941  011332  6FF9               	movwf	_TimerX& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;main.c: 347: if (TimerX > 0) {
  5945  011334  0100               	movlb	0	; () banked
  5946  011336  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5947  011338  D063               	goto	u15010
  5948  01133A  0100               	movlb	0	; () banked
  5949  01133C  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5950  01133E  E156               	bnz	l17375
  5951  011340  0100               	movlb	0	; () banked
  5952  011342  05F9               	decf	_TimerX& (0+255),w,b
  5953  011344  B0D8               	btfsc	status,0,c
  5954  011346  D052               	goto	l2403
  5955  011348  D05B               	goto	u15010
  5956  01134A                     l17357:
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;main.c: 349: ADC_Start(&ADC_AN0);
  5960  01134A  0EB4               	movlw	low _ADC_AN0
  5961  01134C  0100               	movlb	0	; () banked
  5962  01134E  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  5963  011350  0E00               	movlw	high _ADC_AN0
  5964  011352  0100               	movlb	0	; () banked
  5965  011354  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5966  011356  EC24  F0AB         	call	_ADC_Start	;wreg free
  5967                           
  5968                           ;main.c: 350: if (MXK_SwitchTo(eMXK_HMI)) {
  5969  01135A  0E01               	movlw	1
  5970  01135C  EC51  F0B2         	call	_MXK_SwitchTo
  5971  011360  0900               	iorlw	0
  5972  011362  B4D8               	btfsc	status,2,c
  5973  011364  D00E               	goto	l2406
  5974                           
  5975                           ;main.c: 351: HMI_SetNumber(IRValue);
  5976  011366  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  5977  01136A  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5978  01136E  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  5979                           
  5980                           ;main.c: 352: HMI_Render();
  5981  011372  ECB2  F0B2         	call	_HMI_Render	;wreg free
  5982                           
  5983                           ;main.c: 353: if (MXK_Release())
  5984  011376  EC9D  F0B5         	call	_MXK_Release	;wreg free
  5985  01137A  0900               	iorlw	0
  5986  01137C  A4D8               	btfss	status,2,c
  5987                           
  5988                           ;main.c: 354: MXK_Dequeue();
  5989  01137E  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  5990  011382                     l2406:
  5991                           
  5992                           ;main.c: 355: }
  5993                           ;main.c: 356: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5994  011382  0EB4               	movlw	low _ADC_AN0
  5995  011384  0100               	movlb	0	; () banked
  5996  011386  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  5997  011388  0E00               	movlw	high _ADC_AN0
  5998  01138A  0100               	movlb	0	; () banked
  5999  01138C  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  6000  01138E  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  6001  011392  C0E0  F4AC         	movff	?_ADC_Voltage,_mode1$15611
  6002  011396  C0E1  F4AD         	movff	?_ADC_Voltage+1,_mode1$15611+1
  6003  01139A  C0E2  F4AE         	movff	?_ADC_Voltage+2,_mode1$15611+2
  6004  01139E  C0E3  F4AF         	movff	?_ADC_Voltage+3,_mode1$15611+3
  6005                           
  6006                           ;main.c: 355: }
  6007                           ;main.c: 356: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6008  0113A2  C4AC  F0BD         	movff	_mode1$15611,___fldiv@a
  6009  0113A6  C4AD  F0BE         	movff	_mode1$15611+1,___fldiv@a+1
  6010  0113AA  C4AE  F0BF         	movff	_mode1$15611+2,___fldiv@a+2
  6011  0113AE  C4AF  F0C0         	movff	_mode1$15611+3,___fldiv@a+3
  6012  0113B2  0E00               	movlw	0
  6013  0113B4  0100               	movlb	0	; () banked
  6014  0113B6  6FB9               	movwf	___fldiv@b& (0+255),b
  6015  0113B8  0E00               	movlw	0
  6016  0113BA  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  6017  0113BC  0E6C               	movlw	108
  6018  0113BE  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  6019  0113C0  0E42               	movlw	66
  6020  0113C2  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  6021  0113C4  ECA6  F08A         	call	___fldiv	;wreg free
  6022  0113C8  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  6023  0113CC  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  6024  0113D0  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  6025  0113D4  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  6026  0113D8  EC18  F09E         	call	___fltol	;wreg free
  6027  0113DC  C0F2  F06D         	movff	?___fltol,_IRValue
  6028  0113E0  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  6029                           
  6030                           ;main.c: 357: TimerX--;
  6031  0113E4  0100               	movlb	0	; () banked
  6032  0113E6  07F9               	decf	_TimerX& (0+255),f,b
  6033  0113E8  A0D8               	btfss	status,0,c
  6034  0113EA  07FA               	decf	(_TimerX+1)& (0+255),f,b
  6035  0113EC                     l2403:
  6036  0113EC                     l17375:
  6037                           
  6038                           ; BSR set to: 0
  6039  0113EC  0100               	movlb	0	; () banked
  6040  0113EE  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  6041  0113F0  D007               	goto	u15010
  6042  0113F2  0100               	movlb	0	; () banked
  6043  0113F4  51FA               	movf	(_TimerX+1)& (0+255),w,b
  6044  0113F6  E1A9               	bnz	l17357
  6045  0113F8  0100               	movlb	0	; () banked
  6046  0113FA  05F9               	decf	_TimerX& (0+255),w,b
  6047  0113FC  B0D8               	btfsc	status,0,c
  6048  0113FE  D7A5               	goto	l2404
  6049  011400                     u15010:
  6050                           
  6051                           ; BSR set to: 0
  6052                           
  6053                           ; BSR set to: 0
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058  011400  0100               	movlb	0	; () banked
  6059  011402  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  6060  011404  D704               	goto	l2396
  6061  011406  0E90               	movlw	144
  6062  011408  0100               	movlb	0	; () banked
  6063  01140A  5D71               	subwf	_StepRotate& (0+255),w,b
  6064  01140C  0E01               	movlw	1
  6065  01140E  0100               	movlb	0	; () banked
  6066  011410  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  6067  011412  A0D8               	btfss	status,0,c
  6068  011414  D6FC               	goto	l2396
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;main.c: 358: }
  6072                           ;main.c: 359: }
  6073                           ;main.c: 360: }
  6074                           ;main.c: 361: if (MXK_SwitchTo(eMXK_Motor)) {
  6075                           
  6076                           ; BSR set to: 0
  6077  011416  0E08               	movlw	8
  6078  011418  EC51  F0B2         	call	_MXK_SwitchTo
  6079  01141C  0900               	iorlw	0
  6080  01141E  B4D8               	btfsc	status,2,c
  6081  011420  D08A               	goto	l2411
  6082                           
  6083                           ;main.c: 362: Motor_Speed(&Stepper, (50));
  6084  011422  0EAE               	movlw	low _Stepper
  6085  011424  0100               	movlb	0	; () banked
  6086  011426  6FD4               	movwf	Motor_Speed@pMotor& (0+255),b
  6087  011428  0E00               	movlw	high _Stepper
  6088  01142A  0100               	movlb	0	; () banked
  6089  01142C  6FD5               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  6090  01142E  0E00               	movlw	0
  6091  011430  0100               	movlb	0	; () banked
  6092  011432  6FD7               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  6093  011434  0E32               	movlw	50
  6094  011436  6FD6               	movwf	Motor_Speed@pFrequency& (0+255),b
  6095  011438  EC83  F0B4         	call	_Motor_Speed	;wreg free
  6096                           
  6097                           ;main.c: 363: int moveto = 400 - Stepstomin;
  6098  01143C  C06F  F3FA         	movff	_Stepstomin,??_mode1
  6099  011440  C070  F3FB         	movff	_Stepstomin+1,??_mode1+1
  6100  011444  0103               	movlb	3	; () banked
  6101  011446  1FFA               	comf	??_mode1& (0+255),f,b
  6102  011448  1FFB               	comf	(??_mode1+1)& (0+255),f,b
  6103  01144A  4BFA               	infsnz	??_mode1& (0+255),f,b
  6104  01144C  2BFB               	incf	(??_mode1+1)& (0+255),f,b
  6105  01144E  0E90               	movlw	144
  6106  011450  0103               	movlb	3	; () banked
  6107  011452  25FA               	addwf	??_mode1& (0+255),w,b
  6108  011454  0104               	movlb	4	; () banked
  6109  011456  6FAA               	movwf	mode1@moveto& (0+255),b
  6110  011458  0E01               	movlw	1
  6111  01145A  0103               	movlb	3	; () banked
  6112  01145C  21FB               	addwfc	(??_mode1+1)& (0+255),w,b
  6113  01145E  0104               	movlb	4	; () banked
  6114  011460  6FAB               	movwf	(mode1@moveto+1)& (0+255),b
  6115                           
  6116                           ; BSR set to: 4
  6117                           ;main.c: 365: Motor_Move(&Stepper, (-moveto));
  6118  011462  0EAE               	movlw	low _Stepper
  6119  011464  0100               	movlb	0	; () banked
  6120  011466  6FBC               	movwf	Motor_Move@pMotor& (0+255),b
  6121  011468  0E00               	movlw	high _Stepper
  6122  01146A  0100               	movlb	0	; () banked
  6123  01146C  6FBD               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  6124  01146E  C4AA  F3FA         	movff	mode1@moveto,??_mode1
  6125  011472  C4AB  F3FB         	movff	mode1@moveto+1,??_mode1+1
  6126  011476  0103               	movlb	3	; () banked
  6127  011478  1FFA               	comf	??_mode1& (0+255),f,b
  6128  01147A  1FFB               	comf	(??_mode1+1)& (0+255),f,b
  6129  01147C  4BFA               	infsnz	??_mode1& (0+255),f,b
  6130  01147E  2BFB               	incf	(??_mode1+1)& (0+255),f,b
  6131  011480  C3FA  F0BE         	movff	??_mode1,Motor_Move@pDelta
  6132  011484  C3FB  F0BF         	movff	??_mode1+1,Motor_Move@pDelta+1
  6133  011488  EC87  F0B3         	call	_Motor_Move	;wreg free
  6134                           
  6135                           ;main.c: 366: if (MXK_Release())
  6136  01148C  EC9D  F0B5         	call	_MXK_Release	;wreg free
  6137  011490  0900               	iorlw	0
  6138  011492  B4D8               	btfsc	status,2,c
  6139  011494  D050               	goto	l2411
  6140                           
  6141                           ;main.c: 367: MXK_Dequeue();
  6142  011496  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  6143                           
  6144                           ;main.c: 368: }
  6145                           ;main.c: 369: while (Stepper.mDelta > 0) {
  6146  01149A  D04D               	goto	l2411
  6147  01149C                     l17391:
  6148                           
  6149                           ;main.c: 370: ADC_Start(&ADC_AN0);
  6150  01149C  0EB4               	movlw	low _ADC_AN0
  6151  01149E  0100               	movlb	0	; () banked
  6152  0114A0  6FBB               	movwf	ADC_Start@pInput& (0+255),b
  6153  0114A2  0E00               	movlw	high _ADC_AN0
  6154  0114A4  0100               	movlb	0	; () banked
  6155  0114A6  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
  6156  0114A8  EC24  F0AB         	call	_ADC_Start	;wreg free
  6157                           
  6158                           ;main.c: 371: if (MXK_SwitchTo(eMXK_HMI)) {
  6159  0114AC  0E01               	movlw	1
  6160  0114AE  EC51  F0B2         	call	_MXK_SwitchTo
  6161  0114B2  0900               	iorlw	0
  6162  0114B4  B4D8               	btfsc	status,2,c
  6163  0114B6  D00E               	goto	l2414
  6164                           
  6165                           ;main.c: 372: HMI_SetNumber(IRValue);
  6166  0114B8  C06D  F0CF         	movff	_IRValue,HMI_SetNumber@pInput
  6167  0114BC  C06E  F0D0         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  6168  0114C0  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
  6169                           
  6170                           ;main.c: 373: HMI_Render();
  6171  0114C4  ECB2  F0B2         	call	_HMI_Render	;wreg free
  6172                           
  6173                           ;main.c: 374: if (MXK_Release())
  6174  0114C8  EC9D  F0B5         	call	_MXK_Release	;wreg free
  6175  0114CC  0900               	iorlw	0
  6176  0114CE  A4D8               	btfss	status,2,c
  6177                           
  6178                           ;main.c: 375: MXK_Dequeue();
  6179  0114D0  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
  6180  0114D4                     l2414:
  6181                           
  6182                           ;main.c: 376: }
  6183                           ;main.c: 377: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6184  0114D4  0EB4               	movlw	low _ADC_AN0
  6185  0114D6  0100               	movlb	0	; () banked
  6186  0114D8  6FE0               	movwf	ADC_Voltage@pInput& (0+255),b
  6187  0114DA  0E00               	movlw	high _ADC_AN0
  6188  0114DC  0100               	movlb	0	; () banked
  6189  0114DE  6FE1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  6190  0114E0  EC7E  F0A0         	call	_ADC_Voltage	;wreg free
  6191  0114E4  C0E0  F4AC         	movff	?_ADC_Voltage,_mode1$15611
  6192  0114E8  C0E1  F4AD         	movff	?_ADC_Voltage+1,_mode1$15611+1
  6193  0114EC  C0E2  F4AE         	movff	?_ADC_Voltage+2,_mode1$15611+2
  6194  0114F0  C0E3  F4AF         	movff	?_ADC_Voltage+3,_mode1$15611+3
  6195                           
  6196                           ;main.c: 376: }
  6197                           ;main.c: 377: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  6198  0114F4  C4AC  F0BD         	movff	_mode1$15611,___fldiv@a
  6199  0114F8  C4AD  F0BE         	movff	_mode1$15611+1,___fldiv@a+1
  6200  0114FC  C4AE  F0BF         	movff	_mode1$15611+2,___fldiv@a+2
  6201  011500  C4AF  F0C0         	movff	_mode1$15611+3,___fldiv@a+3
  6202  011504  0E00               	movlw	0
  6203  011506  0100               	movlb	0	; () banked
  6204  011508  6FB9               	movwf	___fldiv@b& (0+255),b
  6205  01150A  0E00               	movlw	0
  6206  01150C  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
  6207  01150E  0E6C               	movlw	108
  6208  011510  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
  6209  011512  0E42               	movlw	66
  6210  011514  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
  6211  011516  ECA6  F08A         	call	___fldiv	;wreg free
  6212  01151A  C0B9  F0F2         	movff	?___fldiv,___fltol@f1
  6213  01151E  C0BA  F0F3         	movff	?___fldiv+1,___fltol@f1+1
  6214  011522  C0BB  F0F4         	movff	?___fldiv+2,___fltol@f1+2
  6215  011526  C0BC  F0F5         	movff	?___fldiv+3,___fltol@f1+3
  6216  01152A  EC18  F09E         	call	___fltol	;wreg free
  6217  01152E  C0F2  F06D         	movff	?___fltol,_IRValue
  6218  011532  C0F3  F06E         	movff	?___fltol+1,_IRValue+1
  6219  011536                     l2411:
  6220  011536  0100               	movlb	0	; () banked
  6221  011538  BFAF               	btfsc	(_Stepper+1)& (0+255),7,b
  6222  01153A  0012               	return	
  6223  01153C  0100               	movlb	0	; () banked
  6224  01153E  51AF               	movf	(_Stepper+1)& (0+255),w,b
  6225  011540  E1AD               	bnz	l17391
  6226  011542  0100               	movlb	0	; () banked
  6227  011544  05AE               	decf	_Stepper& (0+255),w,b
  6228  011546  A0D8               	btfss	status,0,c
  6229  011548  0012               	return	
  6230  01154A  D7A8               	goto	l2412
  6231  01154C                     __end_of_mode1:
  6232                           	opt stack 0
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           postdec1	equ	0xFE5
  6240                           fsr1h	equ	0xFE2
  6241                           fsr1l	equ	0xFE1
  6242                           status	equ	0xFD8
  6243                           
  6244 ;; *************** function _safeToGo *****************
  6245 ;; Defined at:
  6246 ;;		line 126 in file "main.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:   16
  6267 ;; This function calls:
  6268 ;;		_HMI_Poll
  6269 ;;		_irobot_song_play
  6270 ;;		_irobot_stop_motion
  6271 ;;		_update_angle
  6272 ;;		_update_bump_and_cliff
  6273 ;;		_update_distance
  6274 ;; This function is called by:
  6275 ;;		_mode1
  6276 ;;		_mode2
  6277 ;;		_mode3
  6278 ;;		_mode4
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text10
  6283  016220                     __ptext10:
  6284                           	opt stack 0
  6285  016220                     _safeToGo:
  6286                           	opt stack 13
  6287                           
  6288                           ;main.c: 127: update_bump_and_cliff();
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;incstack = 0
  6292  016220  EC6A  F0B3         	call	_update_bump_and_cliff	;wreg free
  6293                           
  6294                           ;main.c: 128: update_distance();
  6295  016224  EC3A  F0B6         	call	_update_distance	;wreg free
  6296                           
  6297                           ;main.c: 129: update_angle();
  6298  016228  EC43  F0B6         	call	_update_angle	;wreg free
  6299                           
  6300                           ;main.c: 130: if (iRBumpLeft || iRBumpRight) {
  6301  01622C  0100               	movlb	0	; () banked
  6302  01622E  5186               	movf	_iRBumpLeft& (0+255),w,b
  6303  016230  A4D8               	btfss	status,2,c
  6304  016232  D004               	goto	u11770
  6305                           
  6306                           ; BSR set to: 0
  6307  016234  0100               	movlb	0	; () banked
  6308  016236  5187               	movf	_iRBumpRight& (0+255),w,b
  6309  016238  B4D8               	btfsc	status,2,c
  6310  01623A  D006               	goto	l2329
  6311  01623C                     u11770:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;main.c: 131: irobot_song_play(0);
  6315                           
  6316                           ; BSR set to: 0
  6317  01623C  0E00               	movlw	0
  6318  01623E  EC26  F0B6         	call	_irobot_song_play
  6319                           
  6320                           ;main.c: 132: irobot_stop_motion(0);
  6321  016242  0E00               	movlw	0
  6322  016244  ECC6  F0B1         	call	_irobot_stop_motion
  6323  016248                     l2329:
  6324                           
  6325                           ;main.c: 133: }
  6326                           ;main.c: 134: if (angleTotal > 83) {
  6327  016248  0103               	movlb	3	; () banked
  6328  01624A  BF41               	btfsc	(_angleTotal+1)& (0+255),7,b
  6329  01624C  D00B               	goto	l2332
  6330  01624E  0103               	movlb	3	; () banked
  6331  016250  5141               	movf	(_angleTotal+1)& (0+255),w,b
  6332  016252  E105               	bnz	u11780
  6333  016254  0E54               	movlw	84
  6334  016256  0103               	movlb	3	; () banked
  6335  016258  5D40               	subwf	_angleTotal& (0+255),w,b
  6336  01625A  A0D8               	btfss	status,0,c
  6337  01625C  D003               	goto	l2332
  6338  01625E                     u11780:
  6339                           
  6340                           ; BSR set to: 3
  6341                           ;main.c: 135: irobot_stop_motion(0);
  6342  01625E  0E00               	movlw	0
  6343  016260  ECC6  F0B1         	call	_irobot_stop_motion
  6344  016264                     l2332:
  6345                           
  6346                           ;main.c: 136: }
  6347                           ;main.c: 137: HMI_Poll();
  6348  016264  EC47  F0AD         	call	_HMI_Poll	;wreg free
  6349  016268  0012               	return		;funcret
  6350  01626A                     __end_of_safeToGo:
  6351                           	opt stack 0
  6352                           tblptru	equ	0xFF8
  6353                           tblptrh	equ	0xFF7
  6354                           tblptrl	equ	0xFF6
  6355                           tablat	equ	0xFF5
  6356                           postinc0	equ	0xFEE
  6357                           wreg	equ	0xFE8
  6358                           postdec1	equ	0xFE5
  6359                           fsr1h	equ	0xFE2
  6360                           fsr1l	equ	0xFE1
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function _update_distance *****************
  6364 ;; Defined at:
  6365 ;;		line 360 in file "Library/iRobotSerial.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;Total ram usage:        0 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:   10
  6386 ;; This function calls:
  6387 ;;		_irobot_query_and_update
  6388 ;; This function is called by:
  6389 ;;		_safeToGo
  6390 ;;		_move_and_rotate
  6391 ;;		_mode2
  6392 ;;		_mode4
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           	psect	text11
  6397  016C74                     __ptext11:
  6398                           	opt stack 0
  6399  016C74                     _update_distance:
  6400                           	opt stack 19
  6401                           
  6402                           ;iRobotSerial.c: 361: irobot_query_and_update(1, iR_PKT_DISTANCE);
  6403                           
  6404                           ;incstack = 0
  6405  016C74  0E00               	movlw	0
  6406  016C76  0100               	movlb	0	; () banked
  6407  016C78  6FC0               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6408  016C7A  0E13               	movlw	19
  6409  016C7C  6FBF               	movwf	?_irobot_query_and_update& (0+255),b
  6410  016C7E  0E01               	movlw	1
  6411  016C80  EC2A  F098         	call	_irobot_query_and_update
  6412  016C84  0012               	return		;funcret
  6413  016C86                     __end_of_update_distance:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           postinc0	equ	0xFEE
  6420                           wreg	equ	0xFE8
  6421                           postdec1	equ	0xFE5
  6422                           fsr1h	equ	0xFE2
  6423                           fsr1l	equ	0xFE1
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _update_bump_and_cliff *****************
  6427 ;; Defined at:
  6428 ;;		line 352 in file "Library/iRobotSerial.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        0 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:   10
  6449 ;; This function calls:
  6450 ;;		_irobot_query_and_update
  6451 ;; This function is called by:
  6452 ;;		_safeToGo
  6453 ;;		_mode4
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text12
  6458  0166D4                     __ptext12:
  6459                           	opt stack 0
  6460  0166D4                     _update_bump_and_cliff:
  6461                           	opt stack 19
  6462                           
  6463                           ;iRobotSerial.c: 353: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  6464                           ;iRobotSerial.c: 354: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  6465                           ;iRobotSerial.c: 355: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  6466                           
  6467                           ;incstack = 0
  6468  0166D4  0E00               	movlw	0
  6469  0166D6  0100               	movlb	0	; () banked
  6470  0166D8  6FC0               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6471  0166DA  0E07               	movlw	7
  6472  0166DC  6FBF               	movwf	?_irobot_query_and_update& (0+255),b
  6473  0166DE  0E00               	movlw	0
  6474  0166E0  0100               	movlb	0	; () banked
  6475  0166E2  6FC2               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  6476  0166E4  0E09               	movlw	9
  6477  0166E6  6FC1               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  6478  0166E8  0E00               	movlw	0
  6479  0166EA  0100               	movlb	0	; () banked
  6480  0166EC  6FC4               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  6481  0166EE  0E0A               	movlw	10
  6482  0166F0  6FC3               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  6483  0166F2  0E00               	movlw	0
  6484  0166F4  0100               	movlb	0	; () banked
  6485  0166F6  6FC6               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  6486  0166F8  0E0B               	movlw	11
  6487  0166FA  6FC5               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  6488  0166FC  0E00               	movlw	0
  6489  0166FE  0100               	movlb	0	; () banked
  6490  016700  6FC8               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  6491  016702  0E0C               	movlw	12
  6492  016704  6FC7               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  6493  016706  0E05               	movlw	5
  6494  016708  EC2A  F098         	call	_irobot_query_and_update
  6495  01670C  0012               	return		;funcret
  6496  01670E                     __end_of_update_bump_and_cliff:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           postinc0	equ	0xFEE
  6503                           wreg	equ	0xFE8
  6504                           postdec1	equ	0xFE5
  6505                           fsr1h	equ	0xFE2
  6506                           fsr1l	equ	0xFE1
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function _update_angle *****************
  6510 ;; Defined at:
  6511 ;;		line 366 in file "Library/iRobotSerial.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;		None
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;		None
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      void 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;Total ram usage:        0 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:   10
  6532 ;; This function calls:
  6533 ;;		_irobot_query_and_update
  6534 ;; This function is called by:
  6535 ;;		_irobot_rotate
  6536 ;;		_safeToGo
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text13
  6541  016C86                     __ptext13:
  6542                           	opt stack 0
  6543  016C86                     _update_angle:
  6544                           	opt stack 18
  6545                           
  6546                           ;iRobotSerial.c: 367: irobot_query_and_update(1, iR_PKT_ANGLE);
  6547                           
  6548                           ;incstack = 0
  6549  016C86  0E00               	movlw	0
  6550  016C88  0100               	movlb	0	; () banked
  6551  016C8A  6FC0               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  6552  016C8C  0E14               	movlw	20
  6553  016C8E  6FBF               	movwf	?_irobot_query_and_update& (0+255),b
  6554  016C90  0E01               	movlw	1
  6555  016C92  EC2A  F098         	call	_irobot_query_and_update
  6556  016C96  0012               	return		;funcret
  6557  016C98                     __end_of_update_angle:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           postdec1	equ	0xFE5
  6566                           fsr1h	equ	0xFE2
  6567                           fsr1l	equ	0xFE1
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function _irobot_query_and_update *****************
  6571 ;; Defined at:
  6572 ;;		line 142 in file "Library/iRobotSerial.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;  numberOfPack    1    wreg     unsigned char 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  6577 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  6578 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  6579 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  6580 ;;		 -> ?_irobot_query_and_update(1), 
  6581 ;;  i               1   28[BANK0 ] unsigned char 
  6582 ;;  startIndex      1   27[BANK0 ] unsigned char 
  6583 ;;  j               1   26[BANK0 ] unsigned char 
  6584 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  6585 ;;  streamSize      1   23[BANK0 ] unsigned char 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      void 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6595 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;Total ram usage:      535 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    9
  6602 ;; This function calls:
  6603 ;;		_eusart_getch
  6604 ;;		_eusart_putch
  6605 ;;		_get_packet_size
  6606 ;;		_rx_assign
  6607 ;; This function is called by:
  6608 ;;		_update_bump_and_cliff
  6609 ;;		_update_distance
  6610 ;;		_update_angle
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text14
  6615  013054                     __ptext14:
  6616                           	opt stack 0
  6617  013054                     _irobot_query_and_update:
  6618                           	opt stack 19
  6619                           
  6620                           ;incstack = 0
  6621                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  6622  013054  0100               	movlb	0	; () banked
  6623  013056  6FD1               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  6624                           
  6625                           ;iRobotSerial.c: 143: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  6626  013058  0E00               	movlw	0
  6627  01305A  0100               	movlb	0	; () banked
  6628  01305C  6FD0               	movwf	irobot_query_and_update@streamSize& (0+255),b
  6629  01305E  0E00               	movlw	0
  6630  013060  0100               	movlb	0	; () banked
  6631  013062  6FD4               	movwf	irobot_query_and_update@startIndex& (0+255),b
  6632                           
  6633                           ;iRobotSerial.c: 145: va_list packetIDs;
  6634                           ;iRobotSerial.c: 146: *packetIDs = __va_start();
  6635  013064  0EBF               	movlw	low ?_irobot_query_and_update
  6636  013066  0100               	movlb	0	; () banked
  6637  013068  6FCE               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  6638  01306A  0E00               	movlw	high ?_irobot_query_and_update
  6639  01306C  0100               	movlb	0	; () banked
  6640  01306E  6FCF               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;iRobotSerial.c: 147: eusart_putch(iR_QUERY_LIST);
  6644  013070  0E95               	movlw	149
  6645  013072  EC6A  F0B6         	call	_eusart_putch
  6646                           
  6647                           ;iRobotSerial.c: 148: eusart_putch(numberOfPacketRequests);
  6648  013076  0100               	movlb	0	; () banked
  6649  013078  51D1               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6650  01307A  EC6A  F0B6         	call	_eusart_putch
  6651                           
  6652                           ;iRobotSerial.c: 149: for (i = 0; i < numberOfPacketRequests; i++) {
  6653  01307E  0E00               	movlw	0
  6654  013080  0100               	movlb	0	; () banked
  6655  013082  6FD5               	movwf	irobot_query_and_update@i& (0+255),b
  6656  013084  D023               	goto	l2095
  6657  013086                     
  6658                           ; BSR set to: 0
  6659                           ;iRobotSerial.c: 150: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  6660                           
  6661                           ; BSR set to: 0
  6662  013086  C0CE  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  6663  01308A  C0CF  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  6664  01308E  50DF               	movf	indf2,w,c
  6665  013090  0100               	movlb	0	; () banked
  6666  013092  6FD2               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  6667                           
  6668                           ; BSR set to: 0
  6669  013094  0E02               	movlw	2
  6670  013096  0100               	movlb	0	; () banked
  6671  013098  27CE               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  6672  01309A  0E00               	movlw	0
  6673  01309C  23CF               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;iRobotSerial.c: 151: streamSize += get_packet_size(packetVariable);
  6677  01309E  0100               	movlb	0	; () banked
  6678  0130A0  51D2               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  6679  0130A2  ECC4  F0AE         	call	_get_packet_size
  6680  0130A6  0100               	movlb	0	; () banked
  6681  0130A8  27D0               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;iRobotSerial.c: 152: TXArray[i] = packetVariable;
  6685  0130AA  0100               	movlb	0	; () banked
  6686  0130AC  51D5               	movf	irobot_query_and_update@i& (0+255),w,b
  6687  0130AE  0D01               	mullw	1
  6688  0130B0  0E00               	movlw	low irobot_query_and_update@TXArray
  6689  0130B2  24F3               	addwf	prodl,w,c
  6690  0130B4  6ED9               	movwf	fsr2l,c
  6691  0130B6  0E02               	movlw	high irobot_query_and_update@TXArray
  6692  0130B8  20F4               	addwfc	prodh,w,c
  6693  0130BA  6EDA               	movwf	fsr2h,c
  6694  0130BC  C0D2  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;iRobotSerial.c: 153: eusart_putch(packetVariable);
  6698  0130C0  0100               	movlb	0	; () banked
  6699  0130C2  51D2               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  6700  0130C4  EC6A  F0B6         	call	_eusart_putch
  6701  0130C8  0100               	movlb	0	; () banked
  6702  0130CA  2BD5               	incf	irobot_query_and_update@i& (0+255),f,b
  6703  0130CC                     l2095:
  6704                           
  6705                           ; BSR set to: 0
  6706                           
  6707                           ; BSR set to: 0
  6708  0130CC  0100               	movlb	0	; () banked
  6709  0130CE  51D1               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6710  0130D0  0100               	movlb	0	; () banked
  6711  0130D2  5DD5               	subwf	irobot_query_and_update@i& (0+255),w,b
  6712  0130D4  A0D8               	btfss	status,0,c
  6713  0130D6  D7D7               	goto	l2096
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;iRobotSerial.c: 154: }
  6717                           ;iRobotSerial.c: 155: ;
  6718                           ;iRobotSerial.c: 157: for (i = 0; i < streamSize; i++) {
  6719                           
  6720                           ; BSR set to: 0
  6721  0130D8  0E00               	movlw	0
  6722  0130DA  0100               	movlb	0	; () banked
  6723  0130DC  6FD5               	movwf	irobot_query_and_update@i& (0+255),b
  6724  0130DE  D00E               	goto	l2098
  6725  0130E0                     
  6726                           ; BSR set to: 0
  6727                           ;iRobotSerial.c: 158: RXArray[i] = eusart_getch();
  6728                           
  6729                           ; BSR set to: 0
  6730  0130E0  0100               	movlb	0	; () banked
  6731  0130E2  51D5               	movf	irobot_query_and_update@i& (0+255),w,b
  6732  0130E4  0D01               	mullw	1
  6733  0130E6  0E00               	movlw	low irobot_query_and_update@RXArray
  6734  0130E8  24F3               	addwf	prodl,w,c
  6735  0130EA  6ED9               	movwf	fsr2l,c
  6736  0130EC  0E01               	movlw	high irobot_query_and_update@RXArray
  6737  0130EE  20F4               	addwfc	prodh,w,c
  6738  0130F0  6EDA               	movwf	fsr2h,c
  6739  0130F2  ECA7  F0B6         	call	_eusart_getch	;wreg free
  6740  0130F6  6EDF               	movwf	indf2,c
  6741  0130F8  0100               	movlb	0	; () banked
  6742  0130FA  2BD5               	incf	irobot_query_and_update@i& (0+255),f,b
  6743  0130FC                     l2098:
  6744                           
  6745                           ; BSR set to: 0
  6746                           
  6747                           ; BSR set to: 0
  6748  0130FC  0100               	movlb	0	; () banked
  6749  0130FE  51D0               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  6750  013100  0100               	movlb	0	; () banked
  6751  013102  5DD5               	subwf	irobot_query_and_update@i& (0+255),w,b
  6752  013104  A0D8               	btfss	status,0,c
  6753  013106  D7EC               	goto	l2099
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;iRobotSerial.c: 159: }
  6757                           ;iRobotSerial.c: 161: for (i = 0; i < numberOfPacketRequests; i++) {
  6758                           
  6759                           ; BSR set to: 0
  6760  013108  0E00               	movlw	0
  6761  01310A  0100               	movlb	0	; () banked
  6762  01310C  6FD5               	movwf	irobot_query_and_update@i& (0+255),b
  6763  01310E  D05E               	goto	l2101
  6764  013110                     l2102:
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;iRobotSerial.c: 162: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  6768  013110  C0D4  F0D3         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  6769  013114  D021               	goto	l2103
  6770  013116                     
  6771                           ; BSR set to: 0
  6772                           ;iRobotSerial.c: 163: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  6773                           
  6774                           ; BSR set to: 0
  6775  013116  0100               	movlb	0	; () banked
  6776  013118  51D3               	movf	irobot_query_and_update@j& (0+255),w,b
  6777  01311A  0D01               	mullw	1
  6778  01311C  0E00               	movlw	low irobot_query_and_update@RXArray
  6779  01311E  24F3               	addwf	prodl,w,c
  6780  013120  6ED9               	movwf	fsr2l,c
  6781  013122  0E01               	movlw	high irobot_query_and_update@RXArray
  6782  013124  20F4               	addwfc	prodh,w,c
  6783  013126  6EDA               	movwf	fsr2h,c
  6784  013128  50DF               	movf	indf2,w,c
  6785  01312A  0100               	movlb	0	; () banked
  6786  01312C  6FBA               	movwf	rx_assign@packetIDValue& (0+255),b
  6787  01312E  0100               	movlb	0	; () banked
  6788  013130  51D4               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  6789  013132  0800               	sublw	0
  6790  013134  0100               	movlb	0	; () banked
  6791  013136  25D3               	addwf	irobot_query_and_update@j& (0+255),w,b
  6792  013138  0100               	movlb	0	; () banked
  6793  01313A  6FBB               	movwf	rx_assign@byteNumber& (0+255),b
  6794  01313C  0100               	movlb	0	; () banked
  6795  01313E  51D5               	movf	irobot_query_and_update@i& (0+255),w,b
  6796  013140  0D01               	mullw	1
  6797  013142  0E00               	movlw	low irobot_query_and_update@TXArray
  6798  013144  24F3               	addwf	prodl,w,c
  6799  013146  6ED9               	movwf	fsr2l,c
  6800  013148  0E02               	movlw	high irobot_query_and_update@TXArray
  6801  01314A  20F4               	addwfc	prodh,w,c
  6802  01314C  6EDA               	movwf	fsr2h,c
  6803  01314E  50DF               	movf	indf2,w,c
  6804  013150  EC1E  F09F         	call	_rx_assign
  6805  013154  0100               	movlb	0	; () banked
  6806  013156  2BD3               	incf	irobot_query_and_update@j& (0+255),f,b
  6807  013158                     l2103:
  6808                           
  6809                           ; BSR set to: 0
  6810                           
  6811                           ; BSR set to: 0
  6812  013158  0100               	movlb	0	; () banked
  6813  01315A  51D5               	movf	irobot_query_and_update@i& (0+255),w,b
  6814  01315C  0D01               	mullw	1
  6815  01315E  0E00               	movlw	low irobot_query_and_update@TXArray
  6816  013160  24F3               	addwf	prodl,w,c
  6817  013162  6ED9               	movwf	fsr2l,c
  6818  013164  0E02               	movlw	high irobot_query_and_update@TXArray
  6819  013166  20F4               	addwfc	prodh,w,c
  6820  013168  6EDA               	movwf	fsr2h,c
  6821  01316A  50DF               	movf	indf2,w,c
  6822  01316C  ECC4  F0AE         	call	_get_packet_size
  6823  013170  0100               	movlb	0	; () banked
  6824  013172  6FC9               	movwf	??_irobot_query_and_update& (0+255),b
  6825  013174  6BCA               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  6826  013176  0100               	movlb	0	; () banked
  6827  013178  51D4               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  6828  01317A  0100               	movlb	0	; () banked
  6829  01317C  27C9               	addwf	??_irobot_query_and_update& (0+255),f,b
  6830  01317E  0E00               	movlw	0
  6831  013180  23CA               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  6832  013182  0100               	movlb	0	; () banked
  6833  013184  51D3               	movf	irobot_query_and_update@j& (0+255),w,b
  6834  013186  0100               	movlb	0	; () banked
  6835  013188  6FCB               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  6836  01318A  6BCC               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  6837  01318C  0100               	movlb	0	; () banked
  6838  01318E  51C9               	movf	??_irobot_query_and_update& (0+255),w,b
  6839  013190  0100               	movlb	0	; () banked
  6840  013192  5DCB               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  6841  013194  0100               	movlb	0	; () banked
  6842  013196  51CC               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  6843  013198  0A80               	xorlw	128
  6844  01319A  0100               	movlb	0	; () banked
  6845  01319C  6FCD               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  6846  01319E  0100               	movlb	0	; () banked
  6847  0131A0  51CA               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  6848  0131A2  0A80               	xorlw	128
  6849  0131A4  0100               	movlb	0	; () banked
  6850  0131A6  59CD               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  6851  0131A8  A0D8               	btfss	status,0,c
  6852  0131AA  D7B5               	goto	l2104
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;iRobotSerial.c: 164: }
  6856                           ;iRobotSerial.c: 165: startIndex += get_packet_size(TXArray[i]);
  6857                           
  6858                           ; BSR set to: 0
  6859  0131AC  0100               	movlb	0	; () banked
  6860  0131AE  51D5               	movf	irobot_query_and_update@i& (0+255),w,b
  6861  0131B0  0D01               	mullw	1
  6862  0131B2  0E00               	movlw	low irobot_query_and_update@TXArray
  6863  0131B4  24F3               	addwf	prodl,w,c
  6864  0131B6  6ED9               	movwf	fsr2l,c
  6865  0131B8  0E02               	movlw	high irobot_query_and_update@TXArray
  6866  0131BA  20F4               	addwfc	prodh,w,c
  6867  0131BC  6EDA               	movwf	fsr2h,c
  6868  0131BE  50DF               	movf	indf2,w,c
  6869  0131C0  ECC4  F0AE         	call	_get_packet_size
  6870  0131C4  0100               	movlb	0	; () banked
  6871  0131C6  27D4               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  6872                           
  6873                           ; BSR set to: 0
  6874  0131C8  0100               	movlb	0	; () banked
  6875  0131CA  2BD5               	incf	irobot_query_and_update@i& (0+255),f,b
  6876  0131CC                     l2101:
  6877                           
  6878                           ; BSR set to: 0
  6879                           
  6880                           ; BSR set to: 0
  6881  0131CC  0100               	movlb	0	; () banked
  6882  0131CE  51D1               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  6883  0131D0  0100               	movlb	0	; () banked
  6884  0131D2  5DD5               	subwf	irobot_query_and_update@i& (0+255),w,b
  6885  0131D4  B0D8               	btfsc	status,0,c
  6886  0131D6  0012               	return	
  6887  0131D8  D79B               	goto	l2102
  6888  0131DA                     __end_of_irobot_query_and_update:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           postinc0	equ	0xFEE
  6897                           wreg	equ	0xFE8
  6898                           postdec1	equ	0xFE5
  6899                           fsr1h	equ	0xFE2
  6900                           fsr1l	equ	0xFE1
  6901                           indf2	equ	0xFDF
  6902                           fsr2h	equ	0xFDA
  6903                           fsr2l	equ	0xFD9
  6904                           status	equ	0xFD8
  6905                           
  6906 ;; *************** function _rx_assign *****************
  6907 ;; Defined at:
  6908 ;;		line 74 in file "Library/iRobotSerial.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  packetID        1    wreg     unsigned char 
  6911 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  6912 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  packetID        1    5[BANK0 ] unsigned char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;Total ram usage:        5 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    8
  6931 ;; This function calls:
  6932 ;;		_sort_iRBumpDrop
  6933 ;; This function is called by:
  6934 ;;		_irobot_query_and_update
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text15
  6939  013E3C                     __ptext15:
  6940                           	opt stack 0
  6941  013E3C                     _rx_assign:
  6942                           	opt stack 19
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;incstack = 0
  6946                           ;rx_assign@packetID stored from wreg
  6947  013E3C  0100               	movlb	0	; () banked
  6948  013E3E  6FBE               	movwf	rx_assign@packetID& (0+255),b
  6949                           
  6950                           ;iRobotSerial.c: 75: switch (packetID) {
  6951  013E40  D057               	goto	l2035
  6952  013E42                     l2036:
  6953                           
  6954                           ; BSR set to: 0
  6955  013E42  C0BA  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;iRobotSerial.c: 77: sort_iRBumpDrop();
  6959  013E46  EC54  F0AA         	call	_sort_iRBumpDrop	;wreg free
  6960                           
  6961                           ;iRobotSerial.c: 78: break;
  6962  013E4A  0012               	return	
  6963  013E4C                     l2038:
  6964                           
  6965                           ; BSR set to: 0
  6966  013E4C  C0BA  F035         	movff	rx_assign@packetIDValue,_iRWall
  6967                           
  6968                           ;iRobotSerial.c: 80: break;
  6969  013E50  0012               	return	
  6970  013E52                     l2039:
  6971                           
  6972                           ; BSR set to: 0
  6973  013E52  C0BA  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  6974                           
  6975                           ;iRobotSerial.c: 82: break;
  6976  013E56  0012               	return	
  6977  013E58                     l2040:
  6978                           
  6979                           ; BSR set to: 0
  6980  013E58  C0BA  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  6981                           
  6982                           ;iRobotSerial.c: 84: break;
  6983  013E5C  0012               	return	
  6984  013E5E                     l2041:
  6985                           
  6986                           ; BSR set to: 0
  6987  013E5E  C0BA  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  6988                           
  6989                           ;iRobotSerial.c: 86: break;
  6990  013E62  0012               	return	
  6991  013E64                     l2042:
  6992                           
  6993                           ; BSR set to: 0
  6994  013E64  C0BA  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  6995                           
  6996                           ;iRobotSerial.c: 88: break;
  6997  013E68  0012               	return	
  6998  013E6A                     l2043:
  6999                           
  7000                           ; BSR set to: 0
  7001  013E6A  C0BA  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  7002                           
  7003                           ;iRobotSerial.c: 90: break;
  7004  013E6E  0012               	return	
  7005  013E70                     
  7006                           ; BSR set to: 0
  7007                           ;iRobotSerial.c: 92: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  7008                           ;iRobotSerial.c: 93: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB);
  7009                           
  7010                           ; BSR set to: 0
  7011  013E70  0100               	movlb	0	; () banked
  7012  013E72  51BB               	movf	rx_assign@byteNumber& (0+255),w,b
  7013  013E74  0100               	movlb	0	; () banked
  7014  013E76  A4D8               	btfss	status,2,c
  7015  013E78  D005               	goto	l2046
  7016                           
  7017                           ; BSR set to: 0
  7018  013E7A  C0BA  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  7019  013E7E  0103               	movlb	3	; () banked
  7020  013E80  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  7021  013E82  0012               	return	
  7022  013E84                     l2046:
  7023                           
  7024                           ; BSR set to: 0
  7025  013E84  C0BA  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  7026  013E88  0103               	movlb	3	; () banked
  7027  013E8A  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  7028                           
  7029                           ; BSR set to: 3
  7030  013E8C  0103               	movlb	3	; () banked
  7031  013E8E  5122               	movf	_iRDistanceSS& (0+255),w,b
  7032  013E90  0100               	movlb	0	; () banked
  7033  013E92  6FBD               	movwf	(??_rx_assign+1)& (0+255),b
  7034  013E94  6BBC               	clrf	??_rx_assign& (0+255),b
  7035  013E96  0103               	movlb	3	; () banked
  7036  013E98  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  7037  013E9A  0100               	movlb	0	; () banked
  7038  013E9C  25BC               	addwf	??_rx_assign& (0+255),w,b
  7039  013E9E  0100               	movlb	0	; () banked
  7040  013EA0  6F77               	movwf	_iRDistance& (0+255),b
  7041  013EA2  0103               	movlb	3	; () banked
  7042  013EA4  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  7043  013EA6  0100               	movlb	0	; () banked
  7044  013EA8  21BD               	addwfc	(??_rx_assign+1)& (0+255),w,b
  7045  013EAA  0100               	movlb	0	; () banked
  7046  013EAC  6F78               	movwf	(_iRDistance+1)& (0+255),b
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;iRobotSerial.c: 94: break;
  7050  013EAE  0012               	return	
  7051  013EB0                     
  7052                           ; BSR set to: 0
  7053                           ;iRobotSerial.c: 96: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  7054                           ;iRobotSerial.c: 97: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB);
  7055                           
  7056                           ; BSR set to: 0
  7057  013EB0  0100               	movlb	0	; () banked
  7058  013EB2  51BB               	movf	rx_assign@byteNumber& (0+255),w,b
  7059  013EB4  0100               	movlb	0	; () banked
  7060  013EB6  A4D8               	btfss	status,2,c
  7061  013EB8  D005               	goto	l2051
  7062                           
  7063                           ; BSR set to: 0
  7064  013EBA  C0BA  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  7065  013EBE  0103               	movlb	3	; () banked
  7066  013EC0  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  7067  013EC2  0012               	return	
  7068  013EC4                     l2051:
  7069                           
  7070                           ; BSR set to: 0
  7071  013EC4  C0BA  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  7072  013EC8  0103               	movlb	3	; () banked
  7073  013ECA  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  7074                           
  7075                           ; BSR set to: 3
  7076  013ECC  0103               	movlb	3	; () banked
  7077  013ECE  511E               	movf	_iRAngleSS& (0+255),w,b
  7078  013ED0  0100               	movlb	0	; () banked
  7079  013ED2  6FBD               	movwf	(??_rx_assign+1)& (0+255),b
  7080  013ED4  6BBC               	clrf	??_rx_assign& (0+255),b
  7081  013ED6  0103               	movlb	3	; () banked
  7082  013ED8  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  7083  013EDA  0100               	movlb	0	; () banked
  7084  013EDC  25BC               	addwf	??_rx_assign& (0+255),w,b
  7085  013EDE  0100               	movlb	0	; () banked
  7086  013EE0  6F75               	movwf	_iRAngle& (0+255),b
  7087  013EE2  0103               	movlb	3	; () banked
  7088  013EE4  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  7089  013EE6  0100               	movlb	0	; () banked
  7090  013EE8  21BD               	addwfc	(??_rx_assign+1)& (0+255),w,b
  7091  013EEA  0100               	movlb	0	; () banked
  7092  013EEC  6F76               	movwf	(_iRAngle+1)& (0+255),b
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;iRobotSerial.c: 99: }
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;iRobotSerial.c: 98: break;
  7099  013EEE  0012               	return	
  7100  013EF0                     l2035:
  7101                           
  7102                           ; BSR set to: 0
  7103  013EF0  0100               	movlb	0	; () banked
  7104  013EF2  51BE               	movf	rx_assign@packetID& (0+255),w,b
  7105                           
  7106                           ; Switch size 1, requested type "space"
  7107                           ; Number of cases is 9, Range of values is 7 to 20
  7108                           ; switch strategies available:
  7109                           ; Name         Instructions Cycles
  7110                           ; simple_byte           28    15 (average)
  7111                           ;	Chosen strategy is simple_byte
  7112  013EF4  0A07               	xorlw	7	; case 7
  7113  013EF6  B4D8               	btfsc	status,2,c
  7114  013EF8  D7A4               	goto	l2036
  7115  013EFA  0A0F               	xorlw	15	; case 8
  7116  013EFC  B4D8               	btfsc	status,2,c
  7117  013EFE  D7A6               	goto	l2038
  7118  013F00  0A01               	xorlw	1	; case 9
  7119  013F02  B4D8               	btfsc	status,2,c
  7120  013F04  D7A6               	goto	l2039
  7121  013F06  0A03               	xorlw	3	; case 10
  7122  013F08  B4D8               	btfsc	status,2,c
  7123  013F0A  D7A6               	goto	l2040
  7124  013F0C  0A01               	xorlw	1	; case 11
  7125  013F0E  B4D8               	btfsc	status,2,c
  7126  013F10  D7A6               	goto	l2041
  7127  013F12  0A07               	xorlw	7	; case 12
  7128  013F14  B4D8               	btfsc	status,2,c
  7129  013F16  D7A6               	goto	l2042
  7130  013F18  0A01               	xorlw	1	; case 13
  7131  013F1A  B4D8               	btfsc	status,2,c
  7132  013F1C  D7A6               	goto	l2043
  7133  013F1E  0A1E               	xorlw	30	; case 19
  7134  013F20  B4D8               	btfsc	status,2,c
  7135  013F22  D7A6               	goto	l2044
  7136  013F24  0A07               	xorlw	7	; case 20
  7137  013F26  A4D8               	btfss	status,2,c
  7138  013F28  0012               	return	
  7139  013F2A  D7C2               	goto	l2049
  7140  013F2C                     __end_of_rx_assign:
  7141                           	opt stack 0
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           postinc0	equ	0xFEE
  7149                           wreg	equ	0xFE8
  7150                           postdec1	equ	0xFE5
  7151                           fsr1h	equ	0xFE2
  7152                           fsr1l	equ	0xFE1
  7153                           indf2	equ	0xFDF
  7154                           fsr2h	equ	0xFDA
  7155                           fsr2l	equ	0xFD9
  7156                           status	equ	0xFD8
  7157                           
  7158 ;; *************** function _sort_iRBumpDrop *****************
  7159 ;; Defined at:
  7160 ;;		line 102 in file "Library/iRobotSerial.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  1    wreg      void 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;Total ram usage:        1 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    7
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_rx_assign
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text16
  7189  0154A8                     __ptext16:
  7190                           	opt stack 0
  7191  0154A8                     _sort_iRBumpDrop:
  7192                           	opt stack 19
  7193                           
  7194                           ;iRobotSerial.c: 103: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  7195                           
  7196                           ;incstack = 0
  7197  0154A8  A036               	btfss	_iRBumpDrop,0,c
  7198  0154AA  D002               	goto	l2058
  7199  0154AC  0E01               	movlw	1
  7200  0154AE  D001               	goto	L1
  7201  0154B0                     l2058:
  7202                           
  7203                           ; BSR set to: 0
  7204  0154B0  0E00               	movlw	0
  7205  0154B2                     L1:
  7206  0154B2  0100               	movlb	0	; () banked
  7207  0154B4  6F87               	movwf	_iRBumpRight& (0+255),b
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;iRobotSerial.c: 104: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0
      +                          );
  7211                           
  7212                           ; BSR set to: 0
  7213  0154B6  C036  F0B9         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7214  0154BA  0100               	movlb	0	; () banked
  7215  0154BC  90D8               	bcf	status,0,c
  7216  0154BE  33B9               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7217  0154C0  0100               	movlb	0	; () banked
  7218  0154C2  A1B9               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7219  0154C4  D002               	goto	l2062
  7220                           
  7221                           ; BSR set to: 0
  7222  0154C6  0E01               	movlw	1
  7223  0154C8  D001               	goto	L2
  7224  0154CA                     l2062:
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ; BSR set to: 0
  7229  0154CA  0E00               	movlw	0
  7230  0154CC                     L2:
  7231  0154CC  0100               	movlb	0	; () banked
  7232  0154CE  6F86               	movwf	_iRBumpLeft& (0+255),b
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;iRobotSerial.c: 105: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight =
      +                           0);
  7236                           
  7237                           ; BSR set to: 0
  7238  0154D0  C036  F0B9         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7239  0154D4  0100               	movlb	0	; () banked
  7240  0154D6  90D8               	bcf	status,0,c
  7241  0154D8  33B9               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7242  0154DA  0100               	movlb	0	; () banked
  7243  0154DC  90D8               	bcf	status,0,c
  7244  0154DE  33B9               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7245  0154E0  0100               	movlb	0	; () banked
  7246  0154E2  A1B9               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7247  0154E4  D002               	goto	l2066
  7248                           
  7249                           ; BSR set to: 0
  7250  0154E6  0E01               	movlw	1
  7251  0154E8  D001               	goto	L3
  7252  0154EA                     l2066:
  7253                           
  7254                           ; BSR set to: 0
  7255                           
  7256                           ; BSR set to: 0
  7257  0154EA  0E00               	movlw	0
  7258  0154EC                     L3:
  7259  0154EC  0100               	movlb	0	; () banked
  7260  0154EE  6F85               	movwf	_iRDropRight& (0+255),b
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;iRobotSerial.c: 106: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0
      +                          );
  7264                           
  7265                           ; BSR set to: 0
  7266  0154F0  C036  F0B9         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7267  0154F4  0100               	movlb	0	; () banked
  7268  0154F6  90D8               	bcf	status,0,c
  7269  0154F8  33B9               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7270  0154FA  0100               	movlb	0	; () banked
  7271  0154FC  90D8               	bcf	status,0,c
  7272  0154FE  33B9               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7273  015500  0100               	movlb	0	; () banked
  7274  015502  90D8               	bcf	status,0,c
  7275  015504  33B9               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  7276  015506  0100               	movlb	0	; () banked
  7277  015508  A1B9               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7278  01550A  D002               	goto	l2070
  7279                           
  7280                           ; BSR set to: 0
  7281  01550C  0E01               	movlw	1
  7282  01550E  D001               	goto	L4
  7283  015510                     l2070:
  7284                           
  7285                           ; BSR set to: 0
  7286                           
  7287                           ; BSR set to: 0
  7288  015510  0E00               	movlw	0
  7289  015512                     L4:
  7290  015512  0100               	movlb	0	; () banked
  7291  015514  6F84               	movwf	_iRDropLeft& (0+255),b
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;iRobotSerial.c: 107: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster
      +                           = 0);
  7295                           
  7296                           ; BSR set to: 0
  7297  015516  C036  F0B9         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  7298  01551A  0100               	movlb	0	; () banked
  7299  01551C  3BB9               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  7300  01551E  0E0F               	movlw	15
  7301  015520  17B9               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  7302  015522  0100               	movlb	0	; () banked
  7303  015524  A1B9               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  7304  015526  D003               	goto	l2074
  7305                           
  7306                           ; BSR set to: 0
  7307  015528  0E01               	movlw	1
  7308  01552A  6E2F               	movwf	_iRDropCaster,c
  7309  01552C  0012               	return	
  7310  01552E                     l2074:
  7311                           
  7312                           ; BSR set to: 0
  7313                           
  7314                           ; BSR set to: 0
  7315  01552E  0E00               	movlw	0
  7316  015530  6E2F               	movwf	_iRDropCaster,c
  7317  015532  0012               	return	
  7318  015534                     __end_of_sort_iRBumpDrop:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           postinc0	equ	0xFEE
  7327                           wreg	equ	0xFE8
  7328                           postdec1	equ	0xFE5
  7329                           fsr1h	equ	0xFE2
  7330                           fsr1l	equ	0xFE1
  7331                           indf2	equ	0xFDF
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function _get_packet_size *****************
  7337 ;; Defined at:
  7338 ;;		line 60 in file "Library/iRobotSerial.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  packetID        1    wreg     unsigned char 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  packetID        1    0[BANK0 ] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      unsigned char 
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;Total ram usage:        1 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    7
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_irobot_query_and_update
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text17
  7367  015D88                     __ptext17:
  7368                           	opt stack 0
  7369  015D88                     _get_packet_size:
  7370                           	opt stack 20
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;incstack = 0
  7374                           ;get_packet_size@packetID stored from wreg
  7375  015D88  0100               	movlb	0	; () banked
  7376  015D8A  6FB9               	movwf	get_packet_size@packetID& (0+255),b
  7377                           
  7378                           ;iRobotSerial.c: 61: switch (packetID) {
  7379  015D8C  D012               	goto	l2021
  7380  015D8E  0E01               	movlw	1
  7381  015D90  0012               	return	
  7382  015D92  0E01               	movlw	1
  7383  015D94  0012               	return	
  7384  015D96  0E01               	movlw	1
  7385  015D98  0012               	return	
  7386  015D9A  0E01               	movlw	1
  7387  015D9C  0012               	return	
  7388  015D9E  0E01               	movlw	1
  7389  015DA0  0012               	return	
  7390  015DA2  0E01               	movlw	1
  7391  015DA4  0012               	return	
  7392  015DA6  0E01               	movlw	1
  7393  015DA8  0012               	return	
  7394  015DAA  0E02               	movlw	2
  7395  015DAC  0012               	return	
  7396  015DAE  0E02               	movlw	2
  7397                           
  7398                           ;iRobotSerial.c: 71: }
  7399  015DB0  0012               	return	
  7400  015DB2                     l2021:
  7401  015DB2  0100               	movlb	0	; () banked
  7402  015DB4  51B9               	movf	get_packet_size@packetID& (0+255),w,b
  7403                           
  7404                           ; Switch size 1, requested type "space"
  7405                           ; Number of cases is 9, Range of values is 7 to 20
  7406                           ; switch strategies available:
  7407                           ; Name         Instructions Cycles
  7408                           ; simple_byte           28    15 (average)
  7409                           ;	Chosen strategy is simple_byte
  7410  015DB6  0A07               	xorlw	7	; case 7
  7411  015DB8  B4D8               	btfsc	status,2,c
  7412  015DBA  D7E9               	goto	l2022
  7413  015DBC  0A0F               	xorlw	15	; case 8
  7414  015DBE  B4D8               	btfsc	status,2,c
  7415  015DC0  D7E8               	goto	l2024
  7416  015DC2  0A01               	xorlw	1	; case 9
  7417  015DC4  B4D8               	btfsc	status,2,c
  7418  015DC6  D7E7               	goto	l2025
  7419  015DC8  0A03               	xorlw	3	; case 10
  7420  015DCA  B4D8               	btfsc	status,2,c
  7421  015DCC  D7E6               	goto	l2026
  7422  015DCE  0A01               	xorlw	1	; case 11
  7423  015DD0  B4D8               	btfsc	status,2,c
  7424  015DD2  D7E5               	goto	l2027
  7425  015DD4  0A07               	xorlw	7	; case 12
  7426  015DD6  B4D8               	btfsc	status,2,c
  7427  015DD8  D7E4               	goto	l2028
  7428  015DDA  0A01               	xorlw	1	; case 13
  7429  015DDC  B4D8               	btfsc	status,2,c
  7430  015DDE  D7E3               	goto	l2029
  7431  015DE0  0A1E               	xorlw	30	; case 19
  7432  015DE2  B4D8               	btfsc	status,2,c
  7433  015DE4  D7E2               	goto	l2030
  7434  015DE6  0A07               	xorlw	7	; case 20
  7435  015DE8  A4D8               	btfss	status,2,c
  7436  015DEA  0012               	return	
  7437  015DEC  D7E0               	goto	l2031
  7438  015DEE                     __end_of_get_packet_size:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           postinc0	equ	0xFEE
  7447                           wreg	equ	0xFE8
  7448                           postdec1	equ	0xFE5
  7449                           fsr1h	equ	0xFE2
  7450                           fsr1l	equ	0xFE1
  7451                           indf2	equ	0xFDF
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _eusart_getch *****************
  7457 ;; Defined at:
  7458 ;;		line 136 in file "Library/iRobotSerial.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      unsigned char 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;Total ram usage:        0 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    7
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_irobot_query_and_update
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text18
  7487  016D4E                     __ptext18:
  7488                           	opt stack 0
  7489  016D4E                     _eusart_getch:
  7490                           	opt stack 20
  7491                           
  7492                           ;iRobotSerial.c: 137: while (!PIR1bits.RC1IF) {
  7493                           
  7494                           ;incstack = 0
  7495  016D4E  AA9E               	btfss	3998,5,c	;volatile
  7496  016D50  D7FE               	goto	_eusart_getch
  7497                           
  7498                           ;iRobotSerial.c: 138: };
  7499                           ;iRobotSerial.c: 139: return RCREG1;
  7500  016D52  50AF               	movf	4015,w,c	;volatile
  7501  016D54  0012               	return	
  7502  016D56                     __end_of_eusart_getch:
  7503                           	opt stack 0
  7504                           tblptru	equ	0xFF8
  7505                           tblptrh	equ	0xFF7
  7506                           tblptrl	equ	0xFF6
  7507                           tablat	equ	0xFF5
  7508                           prodh	equ	0xFF4
  7509                           prodl	equ	0xFF3
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           postdec1	equ	0xFE5
  7513                           fsr1h	equ	0xFE2
  7514                           fsr1l	equ	0xFE1
  7515                           indf2	equ	0xFDF
  7516                           fsr2h	equ	0xFDA
  7517                           fsr2l	equ	0xFD9
  7518                           status	equ	0xFD8
  7519                           
  7520 ;; *************** function _irobot_stop_motion *****************
  7521 ;; Defined at:
  7522 ;;		line 328 in file "Library/iRobotSerial.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;  isScript        1    wreg     unsigned char 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  isScript        1   25[BANK0 ] unsigned char 
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;Total ram usage:        1 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    9
  7543 ;; This function calls:
  7544 ;;		_irobot_move
  7545 ;; This function is called by:
  7546 ;;		_irobot_rotate
  7547 ;;		_safeToGo
  7548 ;;		_move_and_rotate
  7549 ;;		_mode2
  7550 ;;		_mode4
  7551 ;;		_irobot_move_to_simple
  7552 ;;		_irobot_rotate_to
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text19
  7557  01638C                     __ptext19:
  7558                           	opt stack 0
  7559  01638C                     _irobot_stop_motion:
  7560                           	opt stack 19
  7561                           
  7562                           ;incstack = 0
  7563                           ;irobot_stop_motion@isScript stored from wreg
  7564  01638C  0100               	movlb	0	; () banked
  7565  01638E  6FD2               	movwf	irobot_stop_motion@isScript& (0+255),b
  7566                           
  7567                           ;iRobotSerial.c: 329: (isScript) ? irobot_move(1, 0, 0) : irobot_move(0, 0, 0);
  7568  016390  0100               	movlb	0	; () banked
  7569  016392  51D2               	movf	irobot_stop_motion@isScript& (0+255),w,b
  7570  016394  0100               	movlb	0	; () banked
  7571  016396  B4D8               	btfsc	status,2,c
  7572  016398  D00E               	goto	l2173
  7573                           
  7574                           ; BSR set to: 0
  7575  01639A  0E00               	movlw	0
  7576  01639C  0100               	movlb	0	; () banked
  7577  01639E  6FCA               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7578  0163A0  0E00               	movlw	0
  7579  0163A2  6FC9               	movwf	irobot_move@moveSpeed& (0+255),b
  7580  0163A4  0E00               	movlw	0
  7581  0163A6  0100               	movlb	0	; () banked
  7582  0163A8  6FCC               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7583  0163AA  0E00               	movlw	0
  7584  0163AC  6FCB               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7585  0163AE  0E01               	movlw	1
  7586  0163B0  EC94  F0A5         	call	_irobot_move
  7587  0163B4  0012               	return	
  7588  0163B6                     l2173:
  7589  0163B6  0E00               	movlw	0
  7590  0163B8  0100               	movlb	0	; () banked
  7591  0163BA  6FCA               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7592  0163BC  0E00               	movlw	0
  7593  0163BE  6FC9               	movwf	irobot_move@moveSpeed& (0+255),b
  7594  0163C0  0E00               	movlw	0
  7595  0163C2  0100               	movlb	0	; () banked
  7596  0163C4  6FCC               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7597  0163C6  0E00               	movlw	0
  7598  0163C8  6FCB               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7599  0163CA  0E00               	movlw	0
  7600  0163CC  EC94  F0A5         	call	_irobot_move
  7601  0163D0  0012               	return	
  7602  0163D2                     __end_of_irobot_stop_motion:
  7603                           	opt stack 0
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           postinc0	equ	0xFEE
  7611                           wreg	equ	0xFE8
  7612                           postdec1	equ	0xFE5
  7613                           fsr1h	equ	0xFE2
  7614                           fsr1l	equ	0xFE1
  7615                           indf2	equ	0xFDF
  7616                           fsr2h	equ	0xFDA
  7617                           fsr2l	equ	0xFD9
  7618                           status	equ	0xFD8
  7619                           
  7620 ;; *************** function _irobot_move *****************
  7621 ;; Defined at:
  7622 ;;		line 240 in file "Library/iRobotSerial.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;  isScript        1    wreg     unsigned char 
  7625 ;;  moveSpeed       2   16[BANK0 ] short 
  7626 ;;  moveTurnRadi    2   18[BANK0 ] short 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  isScript        1   24[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7638 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;Total ram usage:        9 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    8
  7645 ;; This function calls:
  7646 ;;		_eusart_putch
  7647 ;;		_load_iRScriptStack
  7648 ;;		_twos_complement_of
  7649 ;; This function is called by:
  7650 ;;		_irobot_rotate
  7651 ;;		_irobot_stop_motion
  7652 ;;		_irobot_move_straight
  7653 ;;		_irobot_move_to_simple
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text20
  7658  014B28                     __ptext20:
  7659                           	opt stack 0
  7660  014B28                     _irobot_move:
  7661                           	opt stack 19
  7662                           
  7663                           ;incstack = 0
  7664                           ;irobot_move@isScript stored from wreg
  7665  014B28  0100               	movlb	0	; () banked
  7666  014B2A  6FD1               	movwf	irobot_move@isScript& (0+255),b
  7667                           
  7668                           ;iRobotSerial.c: 241: moveSpeed = twos_complement_of(moveSpeed);
  7669  014B2C  C0C9  F0B9         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  7670  014B30  C0CA  F0BA         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  7671  014B34  EC2F  F0B2         	call	_twos_complement_of	;wreg free
  7672  014B38  C0B9  F0C9         	movff	?_twos_complement_of,irobot_move@moveSpeed
  7673  014B3C  C0BA  F0CA         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  7674                           
  7675                           ;iRobotSerial.c: 242: moveTurnRadius = twos_complement_of(moveTurnRadius);
  7676  014B40  C0CB  F0B9         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  7677  014B44  C0CC  F0BA         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  7678  014B48  EC2F  F0B2         	call	_twos_complement_of	;wreg free
  7679  014B4C  C0B9  F0CB         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  7680  014B50  C0BA  F0CC         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  7681                           
  7682                           ;iRobotSerial.c: 244: if (isScript) {
  7683  014B54  0100               	movlb	0	; () banked
  7684  014B56  51D1               	movf	irobot_move@isScript& (0+255),w,b
  7685  014B58  0100               	movlb	0	; () banked
  7686  014B5A  B4D8               	btfsc	status,2,c
  7687  014B5C  D029               	goto	l2139
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;iRobotSerial.c: 245: load_iRScriptStack(5, iR_DRIVE,
  7691                           ;iRobotSerial.c: 246: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  7692                           ;iRobotSerial.c: 247: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  7693  014B5E  0E00               	movlw	0
  7694  014B60  0100               	movlb	0	; () banked
  7695  014B62  6FBA               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  7696  014B64  0E89               	movlw	137
  7697  014B66  6FB9               	movwf	?_load_iRScriptStack& (0+255),b
  7698  014B68  C0CA  F0CD         	movff	irobot_move@moveSpeed+1,??_irobot_move
  7699  014B6C  0100               	movlb	0	; () banked
  7700  014B6E  6BCE               	clrf	(??_irobot_move+1)& (0+255),b
  7701  014B70  BFCD               	btfsc	??_irobot_move& (0+255),7,b
  7702  014B72  69CE               	setf	(??_irobot_move+1)& (0+255),b
  7703  014B74  0100               	movlb	0	; () banked
  7704  014B76  51CD               	movf	??_irobot_move& (0+255),w,b
  7705  014B78  0100               	movlb	0	; () banked
  7706  014B7A  6FBB               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  7707  014B7C  6BBC               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  7708  014B7E  0100               	movlb	0	; () banked
  7709  014B80  51C9               	movf	irobot_move@moveSpeed& (0+255),w,b
  7710  014B82  0100               	movlb	0	; () banked
  7711  014B84  6FBD               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  7712  014B86  6BBE               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  7713  014B88  C0CC  F0CF         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  7714  014B8C  0100               	movlb	0	; () banked
  7715  014B8E  6BD0               	clrf	(??_irobot_move+3)& (0+255),b
  7716  014B90  BFCF               	btfsc	(??_irobot_move+2)& (0+255),7,b
  7717  014B92  69D0               	setf	(??_irobot_move+3)& (0+255),b
  7718  014B94  0100               	movlb	0	; () banked
  7719  014B96  51CF               	movf	(??_irobot_move+2)& (0+255),w,b
  7720  014B98  0100               	movlb	0	; () banked
  7721  014B9A  6FBF               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  7722  014B9C  6BC0               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  7723  014B9E  0100               	movlb	0	; () banked
  7724  014BA0  51CB               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7725  014BA2  0100               	movlb	0	; () banked
  7726  014BA4  6FC1               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  7727  014BA6  6BC2               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  7728  014BA8  0E05               	movlw	5
  7729  014BAA  EC25  F0AE         	call	_load_iRScriptStack
  7730                           
  7731                           ;iRobotSerial.c: 248: } else {
  7732  014BAE  0012               	return	
  7733  014BB0                     l2139:
  7734                           
  7735                           ;iRobotSerial.c: 249: eusart_putch(iR_DRIVE);
  7736  014BB0  0E89               	movlw	137
  7737  014BB2  EC6A  F0B6         	call	_eusart_putch
  7738                           
  7739                           ;iRobotSerial.c: 250: eusart_putch((((moveSpeed)>>8) & 0xFF));
  7740  014BB6  0100               	movlb	0	; () banked
  7741  014BB8  51CA               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  7742  014BBA  EC6A  F0B6         	call	_eusart_putch
  7743                           
  7744                           ;iRobotSerial.c: 251: eusart_putch(((moveSpeed) & 0xFF));
  7745  014BBE  0100               	movlb	0	; () banked
  7746  014BC0  51C9               	movf	irobot_move@moveSpeed& (0+255),w,b
  7747  014BC2  EC6A  F0B6         	call	_eusart_putch
  7748                           
  7749                           ;iRobotSerial.c: 252: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  7750  014BC6  0100               	movlb	0	; () banked
  7751  014BC8  51CC               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  7752  014BCA  EC6A  F0B6         	call	_eusart_putch
  7753                           
  7754                           ;iRobotSerial.c: 253: eusart_putch(((moveTurnRadius) & 0xFF));
  7755  014BCE  0100               	movlb	0	; () banked
  7756  014BD0  51CB               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7757  014BD2  EC6A  F0B6         	call	_eusart_putch
  7758  014BD6  0012               	return	
  7759  014BD8                     __end_of_irobot_move:
  7760                           	opt stack 0
  7761                           tblptru	equ	0xFF8
  7762                           tblptrh	equ	0xFF7
  7763                           tblptrl	equ	0xFF6
  7764                           tablat	equ	0xFF5
  7765                           prodh	equ	0xFF4
  7766                           prodl	equ	0xFF3
  7767                           postinc0	equ	0xFEE
  7768                           wreg	equ	0xFE8
  7769                           postdec1	equ	0xFE5
  7770                           fsr1h	equ	0xFE2
  7771                           fsr1l	equ	0xFE1
  7772                           indf2	equ	0xFDF
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function _twos_complement_of *****************
  7778 ;; Defined at:
  7779 ;;		line 181 in file "Library/iRobotSerial.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  complementVa    2    0[BANK0 ] short 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  2    0[BANK0 ] unsigned short 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7793 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;Total ram usage:        2 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    7
  7800 ;; This function calls:
  7801 ;;		Nothing
  7802 ;; This function is called by:
  7803 ;;		_irobot_move
  7804 ;;		_irobot_angle_wait
  7805 ;;		_irobot_distance_wait
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text21
  7810  01645E                     __ptext21:
  7811                           	opt stack 0
  7812  01645E                     _twos_complement_of:
  7813                           	opt stack 19
  7814                           
  7815                           ;iRobotSerial.c: 182: if (complementValue < 0) {
  7816                           
  7817                           ;incstack = 0
  7818  01645E  0100               	movlb	0	; () banked
  7819  016460  AFBA               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  7820  016462  D01A               	goto	l2110
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;iRobotSerial.c: 183: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  7824  016464  0100               	movlb	0	; () banked
  7825  016466  BFBA               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  7826  016468  D007               	goto	u9780
  7827  01646A  0100               	movlb	0	; () banked
  7828  01646C  51BA               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  7829  01646E  E10A               	bnz	l2112
  7830  016470  0100               	movlb	0	; () banked
  7831  016472  05B9               	decf	twos_complement_of@complementValue& (0+255),w,b
  7832  016474  B0D8               	btfsc	status,0,c
  7833  016476  D006               	goto	l2112
  7834  016478                     u9780:
  7835                           
  7836                           ; BSR set to: 0
  7837  016478  0100               	movlb	0	; () banked
  7838  01647A  6DB9               	negf	twos_complement_of@complementValue& (0+255),b
  7839  01647C  1FBA               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7840  01647E  B0D8               	btfsc	status,0,c
  7841  016480  2BBA               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7842  016482  D004               	goto	l2114
  7843  016484                     l2112:
  7844                           
  7845                           ; BSR set to: 0
  7846  016484  C0B9  F0B9         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  7847  016488  C0BA  F0BA         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  7848  01648C                     l2114:
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;iRobotSerial.c: 184: complementValue = ~complementValue;
  7852                           
  7853                           ; BSR set to: 0
  7854  01648C  0100               	movlb	0	; () banked
  7855  01648E  1FB9               	comf	twos_complement_of@complementValue& (0+255),f,b
  7856  016490  1FBA               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7857                           
  7858                           ;iRobotSerial.c: 185: complementValue += 1;
  7859  016492  0100               	movlb	0	; () banked
  7860  016494  4BB9               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  7861  016496  2BBA               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7862  016498                     l2110:
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;iRobotSerial.c: 186: }
  7866                           ;iRobotSerial.c: 187: return complementValue;
  7867                           
  7868                           ; BSR set to: 0
  7869  016498  C0B9  F0B9         	movff	twos_complement_of@complementValue,?_twos_complement_of
  7870  01649C  C0BA  F0BA         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  7871  0164A0  0012               	return	
  7872  0164A2                     __end_of_twos_complement_of:
  7873                           	opt stack 0
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           postinc0	equ	0xFEE
  7881                           wreg	equ	0xFE8
  7882                           postdec1	equ	0xFE5
  7883                           fsr1h	equ	0xFE2
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function _irobot_song_play *****************
  7891 ;; Defined at:
  7892 ;;		line 294 in file "Library/iRobotSerial.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  songNumber      1    wreg     unsigned char 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  songNumber      1    1[BANK0 ] unsigned char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;Total ram usage:        1 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    8
  7913 ;; This function calls:
  7914 ;;		_eusart_putch
  7915 ;; This function is called by:
  7916 ;;		_safeToGo
  7917 ;;		_mode4
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text22
  7922  016C4C                     __ptext22:
  7923                           	opt stack 0
  7924  016C4C                     _irobot_song_play:
  7925                           	opt stack 20
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;incstack = 0
  7929                           ;irobot_song_play@songNumber stored from wreg
  7930  016C4C  0100               	movlb	0	; () banked
  7931  016C4E  6FBA               	movwf	irobot_song_play@songNumber& (0+255),b
  7932                           
  7933                           ;iRobotSerial.c: 295: eusart_putch(iR_SONG_PLAY);
  7934  016C50  0E8D               	movlw	141
  7935  016C52  EC6A  F0B6         	call	_eusart_putch
  7936                           
  7937                           ;iRobotSerial.c: 296: eusart_putch(songNumber);
  7938  016C56  0100               	movlb	0	; () banked
  7939  016C58  51BA               	movf	irobot_song_play@songNumber& (0+255),w,b
  7940  016C5A  EC6A  F0B6         	call	_eusart_putch
  7941  016C5E  0012               	return		;funcret
  7942  016C60                     __end_of_irobot_song_play:
  7943                           	opt stack 0
  7944                           tblptru	equ	0xFF8
  7945                           tblptrh	equ	0xFF7
  7946                           tblptrl	equ	0xFF6
  7947                           tablat	equ	0xFF5
  7948                           prodh	equ	0xFF4
  7949                           prodl	equ	0xFF3
  7950                           postinc0	equ	0xFEE
  7951                           wreg	equ	0xFE8
  7952                           postdec1	equ	0xFE5
  7953                           fsr1h	equ	0xFE2
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           fsr2h	equ	0xFDA
  7957                           fsr2l	equ	0xFD9
  7958                           status	equ	0xFD8
  7959                           
  7960 ;; *************** function _printf *****************
  7961 ;; Defined at:
  7962 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  7965 ;;		 -> STR_20(21), STR_19(21), STR_18(21), STR_17(21), 
  7966 ;;		 -> STR_16(21), STR_15(3), STR_14(76), STR_13(3), 
  7967 ;;		 -> STR_12(14), STR_11(3), STR_10(46), STR_9(3), 
  7968 ;;		 -> STR_8(46), STR_7(3), STR_6(60), STR_5(3), 
  7969 ;;		 -> STR_4(60), STR_3(3), STR_2(14), STR_1(3), 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  tmpval          4    0        struct .
  7972 ;;  cp              3    0        PTR const unsigned char 
  7973 ;;  val             2   38[BANK0 ] unsigned int 
  7974 ;;  ap              2   36[BANK0 ] PTR void [1]
  7975 ;;		 -> ?_printf(2), 
  7976 ;;  len             2    0        unsigned int 
  7977 ;;  c               1   40[BANK0 ] char 
  7978 ;;  flag            1   35[BANK0 ] unsigned char 
  7979 ;;  prec            1   34[BANK0 ] char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  2   21[BANK0 ] int 
  7982 ;; Registers used:
  7983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7989 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;Total ram usage:       20 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:   12
  7996 ;; This function calls:
  7997 ;;		___lwdiv
  7998 ;;		___lwmod
  7999 ;;		_putch
  8000 ;; This function is called by:
  8001 ;;		_move_and_rotate
  8002 ;;		_findClosestWall
  8003 ;;		_mode1
  8004 ;;		_mode2
  8005 ;;		_mode4
  8006 ;;		_main
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           	psect	text23
  8011  0129A2                     __ptext23:
  8012                           	opt stack 0
  8013  0129A2                     _printf:
  8014                           	opt stack 18
  8015                           
  8016                           ;doprnt.c: 466: va_list ap;
  8017                           ;doprnt.c: 499: signed char c;
  8018                           ;doprnt.c: 506: signed char prec;
  8019                           ;doprnt.c: 508: unsigned char flag;
  8020                           ;doprnt.c: 523: union {
  8021                           ;doprnt.c: 524: unsigned long vd;
  8022                           ;doprnt.c: 525: double integ;
  8023                           ;doprnt.c: 526: } tmpval;
  8024                           ;doprnt.c: 528: unsigned int val;
  8025                           ;doprnt.c: 529: unsigned len;
  8026                           ;doprnt.c: 530: const char * cp;
  8027                           ;doprnt.c: 533: *ap = __va_start();
  8028                           
  8029                           ;incstack = 0
  8030  0129A2  0ED0               	movlw	low (?_printf+2)
  8031  0129A4  0100               	movlb	0	; () banked
  8032  0129A6  6FDD               	movwf	printf@ap& (0+255),b
  8033  0129A8  0E00               	movlw	high (?_printf+2)
  8034  0129AA  0100               	movlb	0	; () banked
  8035  0129AC  6FDE               	movwf	(printf@ap+1)& (0+255),b
  8036                           
  8037                           ;doprnt.c: 536: while(c = *f++) {
  8038  0129AE  D0C9               	goto	u11570
  8039  0129B0                     
  8040                           ; BSR set to: 0
  8041                           ;doprnt.c: 538: if(c != '%')
  8042                           
  8043                           ; BSR set to: 0
  8044  0129B0  0E25               	movlw	37
  8045  0129B2  0100               	movlb	0	; () banked
  8046  0129B4  19E1               	xorwf	printf@c& (0+255),w,b
  8047  0129B6  B4D8               	btfsc	status,2,c
  8048  0129B8  D005               	goto	l2466
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;doprnt.c: 540: {
  8052                           ;doprnt.c: 541: (putch(c) );
  8053  0129BA  0100               	movlb	0	; () banked
  8054  0129BC  51E1               	movf	printf@c& (0+255),w,b
  8055  0129BE  EC5C  F0B6         	call	_putch
  8056                           
  8057                           ;doprnt.c: 542: continue;
  8058  0129C2  D0BF               	goto	u11570
  8059  0129C4                     l2466:
  8060                           
  8061                           ;doprnt.c: 543: }
  8062                           ;doprnt.c: 548: flag = 0;
  8063  0129C4  0E00               	movlw	0
  8064  0129C6  0100               	movlb	0	; () banked
  8065  0129C8  6FDC               	movwf	printf@flag& (0+255),b
  8066                           
  8067                           ;doprnt.c: 635: switch(c = *f++) {
  8068  0129CA  D014               	goto	l2467
  8069  0129CC                     
  8070                           ; BSR set to: 0
  8071                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8072                           
  8073                           ; BSR set to: 0
  8074  0129CC  C0DD  FFD9         	movff	printf@ap,fsr2l
  8075  0129D0  C0DE  FFDA         	movff	printf@ap+1,fsr2h
  8076  0129D4  50DF               	movf	indf2,w,c
  8077  0129D6  0100               	movlb	0	; () banked
  8078  0129D8  6FE1               	movwf	printf@c& (0+255),b
  8079                           
  8080                           ; BSR set to: 0
  8081  0129DA  0E02               	movlw	2
  8082  0129DC  0100               	movlb	0	; () banked
  8083  0129DE  27DD               	addwf	printf@ap& (0+255),f,b
  8084  0129E0  0E00               	movlw	0
  8085  0129E2  23DE               	addwfc	(printf@ap+1)& (0+255),f,b
  8086  0129E4                     
  8087                           ; BSR set to: 0
  8088                           ;doprnt.c: 809: (putch(c) );
  8089                           
  8090                           ; BSR set to: 0
  8091  0129E4  0100               	movlb	0	; () banked
  8092  0129E6  51E1               	movf	printf@c& (0+255),w,b
  8093  0129E8  EC5C  F0B6         	call	_putch
  8094                           
  8095                           ;doprnt.c: 810: continue;
  8096  0129EC  D0AA               	goto	u11570
  8097  0129EE                     
  8098                           ;doprnt.c: 818: flag |= 0x40;
  8099  0129EE  0100               	movlb	0	; () banked
  8100  0129F0  8DDC               	bsf	printf@flag& (0+255),6,b
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;doprnt.c: 822: }
  8104                           
  8105                           ;doprnt.c: 819: break;
  8106  0129F2  D01E               	goto	l2472
  8107  0129F4                     l2467:
  8108                           
  8109                           ; BSR set to: 0
  8110                           
  8111                           ; BSR set to: 0
  8112  0129F4  C0CE  FFF6         	movff	printf@f,tblptrl
  8113  0129F8  C0CF  FFF7         	movff	printf@f+1,tblptrh
  8114  0129FC  0100               	movlb	0	; () banked
  8115  0129FE  4BCE               	infsnz	printf@f& (0+255),f,b
  8116  012A00  2BCF               	incf	(printf@f+1)& (0+255),f,b
  8117  012A02                     	if	0	;tblptru may be non-zero
  8118  012A02                     	endif
  8119  012A02                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8120  012A02  0E00               	movlw	low (__mediumconst shr (0+16))
  8121  012A04  6EF8               	movwf	tblptru,c
  8122  012A06                     	endif
  8123  012A06  0008               	tblrd		*
  8124  012A08  CFF5 F0E1          	movff	tablat,printf@c
  8125  012A0C  0100               	movlb	0	; () banked
  8126  012A0E  51E1               	movf	printf@c& (0+255),w,b
  8127                           
  8128                           ; Switch size 1, requested type "space"
  8129                           ; Number of cases is 5, Range of values is 0 to 117
  8130                           ; switch strategies available:
  8131                           ; Name         Instructions Cycles
  8132                           ; simple_byte           16     9 (average)
  8133                           ;	Chosen strategy is simple_byte
  8134  012A10  0A00               	xorlw	0	; case 0
  8135  012A12  B4D8               	btfsc	status,2,c
  8136  012A14  0012               	return	
  8137  012A16  0A63               	xorlw	99	; case 99
  8138  012A18  B4D8               	btfsc	status,2,c
  8139  012A1A  D7D8               	goto	l2473
  8140  012A1C  0A07               	xorlw	7	; case 100
  8141  012A1E  B4D8               	btfsc	status,2,c
  8142  012A20  D007               	goto	l2472
  8143  012A22  0A0D               	xorlw	13	; case 105
  8144  012A24  B4D8               	btfsc	status,2,c
  8145  012A26  D004               	goto	l2472
  8146  012A28  0A1C               	xorlw	28	; case 117
  8147  012A2A  B4D8               	btfsc	status,2,c
  8148  012A2C  D7E0               	goto	l2475
  8149  012A2E  D7DA               	goto	l2474
  8150  012A30                     l2472:
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8154  012A30  0100               	movlb	0	; () banked
  8155  012A32  BDDC               	btfsc	printf@flag& (0+255),6,b
  8156  012A34  D019               	goto	l2476
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;doprnt.c: 1253: {
  8160                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8161  012A36  C0DD  FFD9         	movff	printf@ap,fsr2l
  8162  012A3A  C0DE  FFDA         	movff	printf@ap+1,fsr2h
  8163  012A3E  CFDE F0DF          	movff	postinc2,printf@val
  8164  012A42  CFDD F0E0          	movff	postdec2,printf@val+1
  8165                           
  8166                           ; BSR set to: 0
  8167  012A46  0E02               	movlw	2
  8168  012A48  0100               	movlb	0	; () banked
  8169  012A4A  27DD               	addwf	printf@ap& (0+255),f,b
  8170  012A4C  0E00               	movlw	0
  8171  012A4E  23DE               	addwfc	(printf@ap+1)& (0+255),f,b
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;doprnt.c: 1261: if((int)val < 0) {
  8175  012A50  0100               	movlb	0	; () banked
  8176  012A52  AFE0               	btfss	(printf@val+1)& (0+255),7,b
  8177  012A54  D016               	goto	l2478
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;doprnt.c: 1262: flag |= 0x03;
  8181  012A56  0E03               	movlw	3
  8182  012A58  0100               	movlb	0	; () banked
  8183  012A5A  13DC               	iorwf	printf@flag& (0+255),f,b
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;doprnt.c: 1263: val = -val;
  8187  012A5C  0100               	movlb	0	; () banked
  8188  012A5E  6DDF               	negf	printf@val& (0+255),b
  8189  012A60  1FE0               	comf	(printf@val+1)& (0+255),f,b
  8190  012A62  B0D8               	btfsc	status,0,c
  8191  012A64  2BE0               	incf	(printf@val+1)& (0+255),f,b
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;doprnt.c: 1264: }
  8195                           ;doprnt.c: 1266: }
  8196  012A66  D00D               	goto	l2478
  8197  012A68                     l2476:
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;doprnt.c: 1268: else
  8201                           ;doprnt.c: 1273: {
  8202                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8203                           
  8204                           ; BSR set to: 0
  8205  012A68  C0DD  FFD9         	movff	printf@ap,fsr2l
  8206  012A6C  C0DE  FFDA         	movff	printf@ap+1,fsr2h
  8207  012A70  CFDE F0DF          	movff	postinc2,printf@val
  8208  012A74  CFDD F0E0          	movff	postdec2,printf@val+1
  8209                           
  8210                           ; BSR set to: 0
  8211  012A78  0E02               	movlw	2
  8212  012A7A  0100               	movlb	0	; () banked
  8213  012A7C  27DD               	addwf	printf@ap& (0+255),f,b
  8214  012A7E  0E00               	movlw	0
  8215  012A80  23DE               	addwfc	(printf@ap+1)& (0+255),f,b
  8216  012A82                     l2478:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;doprnt.c: 1287: }
  8220                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8221                           
  8222                           ; BSR set to: 0
  8223  012A82  0E01               	movlw	1
  8224  012A84  0100               	movlb	0	; () banked
  8225  012A86  6FE1               	movwf	printf@c& (0+255),b
  8226  012A88                     l14655:
  8227                           
  8228                           ; BSR set to: 0
  8229  012A88  0E05               	movlw	5
  8230  012A8A  0100               	movlb	0	; () banked
  8231  012A8C  19E1               	xorwf	printf@c& (0+255),w,b
  8232  012A8E  B4D8               	btfsc	status,2,c
  8233  012A90  D019               	goto	u11550
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;doprnt.c: 1306: if(val < dpowers[c])
  8237                           
  8238                           ; BSR set to: 0
  8239                           
  8240                           ; BSR set to: 0
  8241  012A92  0100               	movlb	0	; () banked
  8242  012A94  51E1               	movf	printf@c& (0+255),w,b
  8243  012A96  0D02               	mullw	2
  8244  012A98  0E05               	movlw	low _dpowers
  8245  012A9A  24F3               	addwf	prodl,w,c
  8246  012A9C  6EF6               	movwf	tblptrl,c
  8247  012A9E  0EFD               	movlw	high _dpowers
  8248  012AA0  20F4               	addwfc	prodh,w,c
  8249  012AA2  6EF7               	movwf	tblptrh,c
  8250  012AA4                     	if	1	;There are 3 active tblptr bytes
  8251  012AA4  6AF8               	clrf	tblptru,c
  8252  012AA6  0E00               	movlw	low (__mediumconst shr (0+16))
  8253  012AA8  22F8               	addwfc	tblptru,f,c
  8254  012AAA                     	endif
  8255  012AAA  0009               	tblrd		*+
  8256  012AAC  50F5               	movf	tablat,w,c
  8257  012AAE  0100               	movlb	0	; () banked
  8258  012AB0  5DDF               	subwf	printf@val& (0+255),w,b
  8259  012AB2  0009               	tblrd		*+
  8260  012AB4  50F5               	movf	tablat,w,c
  8261  012AB6  0100               	movlb	0	; () banked
  8262  012AB8  59E0               	subwfb	(printf@val+1)& (0+255),w,b
  8263  012ABA  A0D8               	btfss	status,0,c
  8264  012ABC  D003               	goto	u11550
  8265                           
  8266                           ; BSR set to: 0
  8267                           
  8268                           ; BSR set to: 0
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;doprnt.c: 1307: break;
  8272  012ABE  0100               	movlb	0	; () banked
  8273  012AC0  2BE1               	incf	printf@c& (0+255),f,b
  8274  012AC2  D7E2               	goto	l14655
  8275  012AC4                     u11550:
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;doprnt.c: 1422: {
  8279                           ;doprnt.c: 1438: if(flag & 0x03)
  8280                           
  8281                           ; BSR set to: 0
  8282  012AC4  C0DC  F0DA         	movff	printf@flag,??_printf
  8283  012AC8  0E03               	movlw	3
  8284  012ACA  0100               	movlb	0	; () banked
  8285  012ACC  17DA               	andwf	??_printf& (0+255),f,b
  8286  012ACE  B4D8               	btfsc	status,2,c
  8287  012AD0  D003               	goto	l2482
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;doprnt.c: 1439: (putch('-') );
  8291  012AD2  0E2D               	movlw	45
  8292  012AD4  EC5C  F0B6         	call	_putch
  8293  012AD8                     l2482:
  8294                           
  8295                           ;doprnt.c: 1469: }
  8296                           ;doprnt.c: 1472: prec = c;
  8297  012AD8  C0E1  F0DB         	movff	printf@c,printf@prec
  8298                           
  8299                           ;doprnt.c: 1474: while(prec--) {
  8300  012ADC  D02C               	goto	l2483
  8301  012ADE                     
  8302                           ;doprnt.c: 1478: {
  8303                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8304  012ADE  0100               	movlb	0	; () banked
  8305  012AE0  51DB               	movf	printf@prec& (0+255),w,b
  8306  012AE2  0D02               	mullw	2
  8307  012AE4  0E05               	movlw	low _dpowers
  8308  012AE6  24F3               	addwf	prodl,w,c
  8309  012AE8  6EF6               	movwf	tblptrl,c
  8310  012AEA  0EFD               	movlw	high _dpowers
  8311  012AEC  20F4               	addwfc	prodh,w,c
  8312  012AEE  6EF7               	movwf	tblptrh,c
  8313  012AF0                     	if	1	;There are 3 active tblptr bytes
  8314  012AF0  6AF8               	clrf	tblptru,c
  8315  012AF2  0E00               	movlw	low (__mediumconst shr (0+16))
  8316  012AF4  22F8               	addwfc	tblptru,f,c
  8317  012AF6                     	endif
  8318  012AF6  0009               	tblrd		*+
  8319  012AF8  CFF5 F0BB          	movff	tablat,___lwdiv@divisor
  8320  012AFC  000A               	tblrd		*-
  8321  012AFE  CFF5 F0BC          	movff	tablat,___lwdiv@divisor+1
  8322  012B02  C0DF  F0B9         	movff	printf@val,___lwdiv@dividend
  8323  012B06  C0E0  F0BA         	movff	printf@val+1,___lwdiv@dividend+1
  8324  012B0A  EC22  F0AC         	call	___lwdiv	;wreg free
  8325  012B0E  C0B9  F0C0         	movff	?___lwdiv,___lwmod@dividend
  8326  012B12  C0BA  F0C1         	movff	?___lwdiv+1,___lwmod@dividend+1
  8327  012B16  0E00               	movlw	0
  8328  012B18  0100               	movlb	0	; () banked
  8329  012B1A  6FC3               	movwf	(___lwmod@divisor+1)& (0+255),b
  8330  012B1C  0E0A               	movlw	10
  8331  012B1E  6FC2               	movwf	___lwmod@divisor& (0+255),b
  8332  012B20  EC8D  F0AF         	call	___lwmod	;wreg free
  8333  012B24  0100               	movlb	0	; () banked
  8334  012B26  51C0               	movf	?___lwmod& (0+255),w,b
  8335  012B28  0F30               	addlw	48
  8336  012B2A  0100               	movlb	0	; () banked
  8337  012B2C  6FE1               	movwf	printf@c& (0+255),b
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;doprnt.c: 1523: }
  8341                           ;doprnt.c: 1524: (putch(c) );
  8342  012B2E  0100               	movlb	0	; () banked
  8343  012B30  51E1               	movf	printf@c& (0+255),w,b
  8344  012B32  EC5C  F0B6         	call	_putch
  8345  012B36                     l2483:
  8346  012B36  0100               	movlb	0	; () banked
  8347  012B38  07DB               	decf	printf@prec& (0+255),f,b
  8348  012B3A  0100               	movlb	0	; () banked
  8349  012B3C  29DB               	incf	printf@prec& (0+255),w,b
  8350  012B3E  A4D8               	btfss	status,2,c
  8351  012B40  D7CE               	goto	l2484
  8352  012B42                     u11570:
  8353                           
  8354                           ; BSR set to: 0
  8355                           
  8356                           ; BSR set to: 0
  8357  012B42  C0CE  FFF6         	movff	printf@f,tblptrl
  8358  012B46  C0CF  FFF7         	movff	printf@f+1,tblptrh
  8359  012B4A  0100               	movlb	0	; () banked
  8360  012B4C  4BCE               	infsnz	printf@f& (0+255),f,b
  8361  012B4E  2BCF               	incf	(printf@f+1)& (0+255),f,b
  8362  012B50                     	if	0	;tblptru may be non-zero
  8363  012B50                     	endif
  8364  012B50                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8365  012B50  0E00               	movlw	low (__mediumconst shr (0+16))
  8366  012B52  6EF8               	movwf	tblptru,c
  8367  012B54                     	endif
  8368  012B54  0008               	tblrd		*
  8369  012B56  CFF5 F0E1          	movff	tablat,printf@c
  8370  012B5A  0100               	movlb	0	; () banked
  8371  012B5C  51E1               	movf	printf@c& (0+255),w,b
  8372  012B5E  B4D8               	btfsc	status,2,c
  8373  012B60  0012               	return	
  8374  012B62  D726               	goto	l2465
  8375  012B64                     __end_of_printf:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           postdec1	equ	0xFE5
  8386                           fsr1h	equ	0xFE2
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _putch *****************
  8396 ;; Defined at:
  8397 ;;		line 454 in file "Library/Console.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;  c               1    wreg     unsigned char 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  c               1   20[BANK0 ] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;Total ram usage:        1 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:   11
  8418 ;; This function calls:
  8419 ;;		_Console_PrintChar
  8420 ;; This function is called by:
  8421 ;;		_printf
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text24
  8426  016CB8                     __ptext24:
  8427                           	opt stack 0
  8428  016CB8                     _putch:
  8429                           	opt stack 18
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;incstack = 0
  8433                           ;putch@c stored from wreg
  8434  016CB8  0100               	movlb	0	; () banked
  8435  016CBA  6FCD               	movwf	putch@c& (0+255),b
  8436                           
  8437                           ;Console.c: 456: Console_PrintChar(c);
  8438  016CBC  0100               	movlb	0	; () banked
  8439  016CBE  51CD               	movf	putch@c& (0+255),w,b
  8440  016CC0  EC92  F096         	call	_Console_PrintChar
  8441  016CC4  0012               	return		;funcret
  8442  016CC6                     __end_of_putch:
  8443                           	opt stack 0
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodh	equ	0xFF4
  8449                           prodl	equ	0xFF3
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           fsr1h	equ	0xFE2
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function _Console_PrintChar *****************
  8463 ;; Defined at:
  8464 ;;		line 322 in file "Library/Console.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  pInput          1    wreg     unsigned char 
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;  pInput          1   19[BANK0 ] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  1    wreg      void 
  8471 ;; Registers used:
  8472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;Total ram usage:        4 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:   10
  8485 ;; This function calls:
  8486 ;;		_Console_Backspace
  8487 ;;		_Console_FormFeed
  8488 ;;		_Console_IncrementCursor
  8489 ;;		_Console_NewLine
  8490 ;;		_Console_ResetCursor
  8491 ;;		_Console_Tab
  8492 ;; This function is called by:
  8493 ;;		_putch
  8494 ;;		_Console_PrintString
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text25
  8499  012D24                     __ptext25:
  8500                           	opt stack 0
  8501  012D24                     _Console_PrintChar:
  8502                           	opt stack 18
  8503                           
  8504                           ;incstack = 0
  8505                           ;Console_PrintChar@pInput stored from wreg
  8506  012D24  0100               	movlb	0	; () banked
  8507  012D26  6FCC               	movwf	Console_PrintChar@pInput& (0+255),b
  8508                           
  8509                           ;Console.c: 324: switch(pInput)
  8510  012D28  D0B1               	goto	l1036
  8511  012D2A                     
  8512                           ;Console.c: 327: case '\n':
  8513                           ;Console.c: 328: Console_NewLine();
  8514  012D2A  EC8B  F0A8         	call	_Console_NewLine	;wreg free
  8515                           
  8516                           ;Console.c: 329: return;
  8517  012D2E  0012               	return	
  8518  012D30                     
  8519                           ;Console.c: 331: Console_Backspace();
  8520  012D30  ECBE  F0AF         	call	_Console_Backspace	;wreg free
  8521                           
  8522                           ;Console.c: 332: return;
  8523  012D34  0012               	return	
  8524  012D36                     
  8525                           ;Console.c: 334: Console_FormFeed();
  8526  012D36  EC0D  F0AA         	call	_Console_FormFeed	;wreg free
  8527                           
  8528                           ;Console.c: 335: return;
  8529  012D3A  0012               	return	
  8530  012D3C                     
  8531                           ;Console.c: 337: Console_Tab();
  8532  012D3C  EC5E  F0A3         	call	_Console_Tab	;wreg free
  8533                           
  8534                           ;Console.c: 338: return;
  8535  012D40  0012               	return	
  8536  012D42                     
  8537                           ;Console.c: 340: Console_IncrementCursor();
  8538  012D42  ECF7  F0AE         	call	_Console_IncrementCursor	;wreg free
  8539                           
  8540                           ;Console.c: 341: return;
  8541  012D46  0012               	return	
  8542  012D48                     
  8543                           ;Console.c: 343: Console_ResetCursor();
  8544  012D48  EC17  F0B5         	call	_Console_ResetCursor	;wreg free
  8545                           
  8546                           ;Console.c: 344: return;
  8547  012D4C  0012               	return	
  8548  012D4E                     
  8549                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8550                           
  8551                           ;Console.c: 349: default:
  8552  012D4E  C0CC  F0C9         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8553  012D52  0E7F               	movlw	127
  8554  012D54  0100               	movlb	0	; () banked
  8555  012D56  17C9               	andwf	??_Console_PrintChar& (0+255),f,b
  8556  012D58  0100               	movlb	0	; () banked
  8557  012D5A  518D               	movf	_lBufferY& (0+255),w,b
  8558  012D5C  0D14               	mullw	20
  8559  012D5E  0EB2               	movlw	low _lBuffer
  8560  012D60  0100               	movlb	0	; () banked
  8561  012D62  6FCA               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8562  012D64  0E04               	movlw	high _lBuffer
  8563  012D66  0100               	movlb	0	; () banked
  8564  012D68  6FCB               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8565  012D6A  50F3               	movf	prodl,w,c
  8566  012D6C  0100               	movlb	0	; () banked
  8567  012D6E  27CA               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8568  012D70  50F4               	movf	prodh,w,c
  8569  012D72  0100               	movlb	0	; () banked
  8570  012D74  23CB               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8571  012D76  0100               	movlb	0	; () banked
  8572  012D78  518E               	movf	_lBufferX& (0+255),w,b
  8573  012D7A  0D01               	mullw	1
  8574  012D7C  50F3               	movf	prodl,w,c
  8575  012D7E  0100               	movlb	0	; () banked
  8576  012D80  25CA               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8577  012D82  6ED9               	movwf	fsr2l,c
  8578  012D84  50F4               	movf	prodh,w,c
  8579  012D86  0100               	movlb	0	; () banked
  8580  012D88  21CB               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8581  012D8A  6EDA               	movwf	fsr2h,c
  8582  012D8C  50DF               	movf	indf2,w,c
  8583  012D8E  0B7F               	andlw	127
  8584  012D90  0100               	movlb	0	; () banked
  8585  012D92  19C9               	xorwf	??_Console_PrintChar& (0+255),w,b
  8586  012D94  B4D8               	btfsc	status,2,c
  8587  012D96  D02E               	goto	l1047
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;Console.c: 351: {
  8591                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8592  012D98  0E01               	movlw	1
  8593  012D9A  0100               	movlb	0	; () banked
  8594  012D9C  6FFF               	movwf	_change& (0+255),b
  8595                           
  8596                           ; BSR set to: 0
  8597  012D9E  0100               	movlb	0	; () banked
  8598  012DA0  518D               	movf	_lBufferY& (0+255),w,b
  8599  012DA2  0D14               	mullw	20
  8600  012DA4  0EB2               	movlw	low _lBuffer
  8601  012DA6  0100               	movlb	0	; () banked
  8602  012DA8  6FC9               	movwf	??_Console_PrintChar& (0+255),b
  8603  012DAA  0E04               	movlw	high _lBuffer
  8604  012DAC  0100               	movlb	0	; () banked
  8605  012DAE  6FCA               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8606  012DB0  50F3               	movf	prodl,w,c
  8607  012DB2  0100               	movlb	0	; () banked
  8608  012DB4  27C9               	addwf	??_Console_PrintChar& (0+255),f,b
  8609  012DB6  50F4               	movf	prodh,w,c
  8610  012DB8  0100               	movlb	0	; () banked
  8611  012DBA  23CA               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8612  012DBC  0100               	movlb	0	; () banked
  8613  012DBE  518E               	movf	_lBufferX& (0+255),w,b
  8614  012DC0  0D01               	mullw	1
  8615  012DC2  50F3               	movf	prodl,w,c
  8616  012DC4  0100               	movlb	0	; () banked
  8617  012DC6  25C9               	addwf	??_Console_PrintChar& (0+255),w,b
  8618  012DC8  6ED9               	movwf	fsr2l,c
  8619  012DCA  50F4               	movf	prodh,w,c
  8620  012DCC  0100               	movlb	0	; () banked
  8621  012DCE  21CA               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8622  012DD0  6EDA               	movwf	fsr2h,c
  8623  012DD2  0100               	movlb	0	; () banked
  8624  012DD4  51CC               	movf	Console_PrintChar@pInput& (0+255),w,b
  8625  012DD6  0980               	iorlw	128
  8626  012DD8  6EDF               	movwf	indf2,c
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  8630  012DDA  0100               	movlb	0	; () banked
  8631  012DDC  518D               	movf	_lBufferY& (0+255),w,b
  8632  012DDE  0D02               	mullw	2
  8633  012DE0  0E00               	movlw	low _lCBuffer
  8634  012DE2  24F3               	addwf	prodl,w,c
  8635  012DE4  6ED9               	movwf	fsr2l,c
  8636  012DE6  0E03               	movlw	high _lCBuffer
  8637  012DE8  20F4               	addwfc	prodh,w,c
  8638  012DEA  6EDA               	movwf	fsr2h,c
  8639  012DEC  C0FD  FFDE         	movff	_gForecolour,postinc2
  8640  012DF0  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  8641  012DF4                     l1047:
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;Console.c: 354: }
  8645                           ;Console.c: 368: if(Console_IncrementCursor())
  8646                           
  8647                           ; BSR set to: 0
  8648  012DF4  ECF7  F0AE         	call	_Console_IncrementCursor	;wreg free
  8649  012DF8  0900               	iorlw	0
  8650  012DFA  B4D8               	btfsc	status,2,c
  8651  012DFC  0012               	return	
  8652                           
  8653                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8654  012DFE  C0CC  F0C9         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8655  012E02  0E7F               	movlw	127
  8656  012E04  0100               	movlb	0	; () banked
  8657  012E06  17C9               	andwf	??_Console_PrintChar& (0+255),f,b
  8658  012E08  0100               	movlb	0	; () banked
  8659  012E0A  518D               	movf	_lBufferY& (0+255),w,b
  8660  012E0C  0D14               	mullw	20
  8661  012E0E  0EB2               	movlw	low _lBuffer
  8662  012E10  0100               	movlb	0	; () banked
  8663  012E12  6FCA               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8664  012E14  0E04               	movlw	high _lBuffer
  8665  012E16  0100               	movlb	0	; () banked
  8666  012E18  6FCB               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8667  012E1A  50F3               	movf	prodl,w,c
  8668  012E1C  0100               	movlb	0	; () banked
  8669  012E1E  27CA               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8670  012E20  50F4               	movf	prodh,w,c
  8671  012E22  0100               	movlb	0	; () banked
  8672  012E24  23CB               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8673  012E26  0100               	movlb	0	; () banked
  8674  012E28  518E               	movf	_lBufferX& (0+255),w,b
  8675  012E2A  0D01               	mullw	1
  8676  012E2C  50F3               	movf	prodl,w,c
  8677  012E2E  0100               	movlb	0	; () banked
  8678  012E30  25CA               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8679  012E32  6ED9               	movwf	fsr2l,c
  8680  012E34  50F4               	movf	prodh,w,c
  8681  012E36  0100               	movlb	0	; () banked
  8682  012E38  21CB               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8683  012E3A  6EDA               	movwf	fsr2h,c
  8684  012E3C  50DF               	movf	indf2,w,c
  8685  012E3E  0B7F               	andlw	127
  8686  012E40  0100               	movlb	0	; () banked
  8687  012E42  19C9               	xorwf	??_Console_PrintChar& (0+255),w,b
  8688  012E44  B4D8               	btfsc	status,2,c
  8689  012E46  0012               	return	
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8693  012E48  0E01               	movlw	1
  8694  012E4A  0100               	movlb	0	; () banked
  8695  012E4C  6FFF               	movwf	_change& (0+255),b
  8696                           
  8697                           ; BSR set to: 0
  8698  012E4E  0100               	movlb	0	; () banked
  8699  012E50  518D               	movf	_lBufferY& (0+255),w,b
  8700  012E52  0D14               	mullw	20
  8701  012E54  0EB2               	movlw	low _lBuffer
  8702  012E56  0100               	movlb	0	; () banked
  8703  012E58  6FC9               	movwf	??_Console_PrintChar& (0+255),b
  8704  012E5A  0E04               	movlw	high _lBuffer
  8705  012E5C  0100               	movlb	0	; () banked
  8706  012E5E  6FCA               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8707  012E60  50F3               	movf	prodl,w,c
  8708  012E62  0100               	movlb	0	; () banked
  8709  012E64  27C9               	addwf	??_Console_PrintChar& (0+255),f,b
  8710  012E66  50F4               	movf	prodh,w,c
  8711  012E68  0100               	movlb	0	; () banked
  8712  012E6A  23CA               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8713  012E6C  0100               	movlb	0	; () banked
  8714  012E6E  518E               	movf	_lBufferX& (0+255),w,b
  8715  012E70  0D01               	mullw	1
  8716  012E72  50F3               	movf	prodl,w,c
  8717  012E74  0100               	movlb	0	; () banked
  8718  012E76  25C9               	addwf	??_Console_PrintChar& (0+255),w,b
  8719  012E78  6ED9               	movwf	fsr2l,c
  8720  012E7A  50F4               	movf	prodh,w,c
  8721  012E7C  0100               	movlb	0	; () banked
  8722  012E7E  21CA               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8723  012E80  6EDA               	movwf	fsr2h,c
  8724  012E82  0100               	movlb	0	; () banked
  8725  012E84  51CC               	movf	Console_PrintChar@pInput& (0+255),w,b
  8726  012E86  0980               	iorlw	128
  8727  012E88  6EDF               	movwf	indf2,c
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;Console.c: 372: };
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;Console.c: 371: return;
  8734                           
  8735                           ; BSR set to: 0
  8736                           
  8737                           ; BSR set to: 0
  8738  012E8A  0012               	return	
  8739  012E8C                     l1036:
  8740                           
  8741                           ; BSR set to: 0
  8742  012E8C  0100               	movlb	0	; () banked
  8743  012E8E  51CC               	movf	Console_PrintChar@pInput& (0+255),w,b
  8744                           
  8745                           ; Switch size 1, requested type "space"
  8746                           ; Number of cases is 8, Range of values is 7 to 35
  8747                           ; switch strategies available:
  8748                           ; Name         Instructions Cycles
  8749                           ; simple_byte           25    13 (average)
  8750                           ;	Chosen strategy is simple_byte
  8751  012E90  0A07               	xorlw	7	; case 7
  8752  012E92  B4D8               	btfsc	status,2,c
  8753  012E94  D756               	goto	l1043
  8754  012E96  0A0F               	xorlw	15	; case 8
  8755  012E98  B4D8               	btfsc	status,2,c
  8756  012E9A  D74A               	goto	l1040
  8757  012E9C  0A01               	xorlw	1	; case 9
  8758  012E9E  B4D8               	btfsc	status,2,c
  8759  012EA0  D74D               	goto	l1042
  8760  012EA2  0A03               	xorlw	3	; case 10
  8761  012EA4  B4D8               	btfsc	status,2,c
  8762  012EA6  D741               	goto	l1037
  8763  012EA8  0A06               	xorlw	6	; case 12
  8764  012EAA  B4D8               	btfsc	status,2,c
  8765  012EAC  D744               	goto	l1041
  8766  012EAE  0A01               	xorlw	1	; case 13
  8767  012EB0  B4D8               	btfsc	status,2,c
  8768  012EB2  D73B               	goto	l1037
  8769  012EB4  0A2D               	xorlw	45	; case 32
  8770  012EB6  B4D8               	btfsc	status,2,c
  8771  012EB8  D74A               	goto	l1045
  8772  012EBA  0A03               	xorlw	3	; case 35
  8773  012EBC  B4D8               	btfsc	status,2,c
  8774  012EBE  D744               	goto	l1044
  8775  012EC0  D746               	goto	l1045
  8776  012EC2                     __end_of_Console_PrintChar:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           postinc0	equ	0xFEE
  8785                           wreg	equ	0xFE8
  8786                           postdec1	equ	0xFE5
  8787                           fsr1h	equ	0xFE2
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function _Console_Tab *****************
  8797 ;; Defined at:
  8798 ;;		line 260 in file "Library/Console.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;  c               1   15[BANK0 ] unsigned char 
  8803 ;;  i               1   14[BANK0 ] unsigned char 
  8804 ;;  t               1   13[BANK0 ] unsigned char 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      void 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;Total ram usage:        8 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    9
  8821 ;; This function calls:
  8822 ;;		_Console_ClearCursor
  8823 ;;		_Console_IncrementCursor
  8824 ;;		___awdiv
  8825 ;; This function is called by:
  8826 ;;		_Console_PrintChar
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text26
  8831  0146BC                     __ptext26:
  8832                           	opt stack 0
  8833  0146BC                     _Console_Tab:
  8834                           	opt stack 18
  8835                           
  8836                           ;Console.c: 262: UINT8 i = 0;
  8837                           
  8838                           ;incstack = 0
  8839  0146BC  0E00               	movlw	0
  8840  0146BE  0100               	movlb	0	; () banked
  8841  0146C0  6FC7               	movwf	Console_Tab@i& (0+255),b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  8845  0146C2  0EFA               	movlw	250
  8846  0146C4  2447               	addwf	_gCursor,w,c
  8847  0146C6  0100               	movlb	0	; () banked
  8848  0146C8  6FB9               	movwf	___awdiv@dividend& (0+255),b
  8849  0146CA  0EFF               	movlw	255
  8850  0146CC  2048               	addwfc	_gCursor+1,w,c
  8851  0146CE  0100               	movlb	0	; () banked
  8852  0146D0  6FBA               	movwf	(___awdiv@dividend+1)& (0+255),b
  8853  0146D2  0E00               	movlw	0
  8854  0146D4  0100               	movlb	0	; () banked
  8855  0146D6  6FBC               	movwf	(___awdiv@divisor+1)& (0+255),b
  8856  0146D8  0E06               	movlw	6
  8857  0146DA  6FBB               	movwf	___awdiv@divisor& (0+255),b
  8858  0146DC  EC1F  F0A4         	call	___awdiv	;wreg free
  8859  0146E0  0100               	movlb	0	; () banked
  8860  0146E2  51B9               	movf	?___awdiv& (0+255),w,b
  8861  0146E4  0100               	movlb	0	; () banked
  8862  0146E6  6FC8               	movwf	Console_Tab@c& (0+255),b
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;Console.c: 264: UINT8 t = c/4;
  8866  0146E8  C0C8  F0B9         	movff	Console_Tab@c,___awdiv@dividend
  8867  0146EC  0100               	movlb	0	; () banked
  8868  0146EE  6BBA               	clrf	(___awdiv@dividend+1)& (0+255),b
  8869  0146F0  0E00               	movlw	0
  8870  0146F2  0100               	movlb	0	; () banked
  8871  0146F4  6FBC               	movwf	(___awdiv@divisor+1)& (0+255),b
  8872  0146F6  0E04               	movlw	4
  8873  0146F8  6FBB               	movwf	___awdiv@divisor& (0+255),b
  8874  0146FA  EC1F  F0A4         	call	___awdiv	;wreg free
  8875  0146FE  0100               	movlb	0	; () banked
  8876  014700  51B9               	movf	?___awdiv& (0+255),w,b
  8877  014702  0100               	movlb	0	; () banked
  8878  014704  6FC6               	movwf	Console_Tab@t& (0+255),b
  8879                           
  8880                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  8881  014706  0E00               	movlw	0
  8882  014708  0100               	movlb	0	; () banked
  8883  01470A  6FC7               	movwf	Console_Tab@i& (0+255),b
  8884  01470C  D006               	goto	l1009
  8885  01470E                     
  8886                           ; BSR set to: 0
  8887                           ;Console.c: 266: {
  8888                           ;Console.c: 267: Console_ClearCursor();
  8889                           
  8890                           ; BSR set to: 0
  8891  01470E  EC72  F0B2         	call	_Console_ClearCursor	;wreg free
  8892                           
  8893                           ;Console.c: 268: Console_IncrementCursor();
  8894  014712  ECF7  F0AE         	call	_Console_IncrementCursor	;wreg free
  8895  014716  0100               	movlb	0	; () banked
  8896  014718  2BC7               	incf	Console_Tab@i& (0+255),f,b
  8897  01471A                     l1009:
  8898                           
  8899                           ; BSR set to: 0
  8900                           
  8901                           ; BSR set to: 0
  8902  01471A  0100               	movlb	0	; () banked
  8903  01471C  51C6               	movf	Console_Tab@t& (0+255),w,b
  8904  01471E  0D04               	mullw	4
  8905  014720  1EF3               	comf	prodl,f,c
  8906  014722  1EF4               	comf	prodh,f,c
  8907  014724  4AF3               	infsnz	prodl,f,c
  8908  014726  2AF4               	incf	prodh,f,c
  8909  014728  0100               	movlb	0	; () banked
  8910  01472A  51C8               	movf	Console_Tab@c& (0+255),w,b
  8911  01472C  0100               	movlb	0	; () banked
  8912  01472E  6FC1               	movwf	??_Console_Tab& (0+255),b
  8913  014730  6BC2               	clrf	(??_Console_Tab+1)& (0+255),b
  8914  014732  50F3               	movf	prodl,w,c
  8915  014734  0100               	movlb	0	; () banked
  8916  014736  27C1               	addwf	??_Console_Tab& (0+255),f,b
  8917  014738  50F4               	movf	prodh,w,c
  8918  01473A  0100               	movlb	0	; () banked
  8919  01473C  23C2               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8920  01473E  0100               	movlb	0	; () banked
  8921  014740  1FC1               	comf	??_Console_Tab& (0+255),f,b
  8922  014742  1FC2               	comf	(??_Console_Tab+1)& (0+255),f,b
  8923  014744  4BC1               	infsnz	??_Console_Tab& (0+255),f,b
  8924  014746  2BC2               	incf	(??_Console_Tab+1)& (0+255),f,b
  8925  014748  0E04               	movlw	4
  8926  01474A  0100               	movlb	0	; () banked
  8927  01474C  27C1               	addwf	??_Console_Tab& (0+255),f,b
  8928  01474E  0E00               	movlw	0
  8929  014750  23C2               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8930  014752  0100               	movlb	0	; () banked
  8931  014754  51C7               	movf	Console_Tab@i& (0+255),w,b
  8932  014756  0100               	movlb	0	; () banked
  8933  014758  6FC3               	movwf	(??_Console_Tab+2)& (0+255),b
  8934  01475A  6BC4               	clrf	(??_Console_Tab+3)& (0+255),b
  8935  01475C  0100               	movlb	0	; () banked
  8936  01475E  51C1               	movf	??_Console_Tab& (0+255),w,b
  8937  014760  0100               	movlb	0	; () banked
  8938  014762  5DC3               	subwf	(??_Console_Tab+2)& (0+255),w,b
  8939  014764  0100               	movlb	0	; () banked
  8940  014766  51C4               	movf	(??_Console_Tab+3)& (0+255),w,b
  8941  014768  0A80               	xorlw	128
  8942  01476A  0100               	movlb	0	; () banked
  8943  01476C  6FC5               	movwf	(??_Console_Tab+4)& (0+255),b
  8944  01476E  0100               	movlb	0	; () banked
  8945  014770  51C2               	movf	(??_Console_Tab+1)& (0+255),w,b
  8946  014772  0A80               	xorlw	128
  8947  014774  0100               	movlb	0	; () banked
  8948  014776  59C5               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  8949  014778  B0D8               	btfsc	status,0,c
  8950  01477A  0012               	return	
  8951  01477C  D7C8               	goto	l1010
  8952  01477E                     __end_of_Console_Tab:
  8953                           	opt stack 0
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           postinc0	equ	0xFEE
  8961                           wreg	equ	0xFE8
  8962                           postdec1	equ	0xFE5
  8963                           fsr1h	equ	0xFE2
  8964                           fsr1l	equ	0xFE1
  8965                           indf2	equ	0xFDF
  8966                           postinc2	equ	0xFDE
  8967                           postdec2	equ	0xFDD
  8968                           fsr2h	equ	0xFDA
  8969                           fsr2l	equ	0xFD9
  8970                           status	equ	0xFD8
  8971                           
  8972 ;; *************** function ___awdiv *****************
  8973 ;; Defined at:
  8974 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  dividend        2    0[BANK0 ] int 
  8977 ;;  divisor         2    2[BANK0 ] int 
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;  quotient        2    6[BANK0 ] int 
  8980 ;;  sign            1    5[BANK0 ] unsigned char 
  8981 ;;  counter         1    4[BANK0 ] unsigned char 
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  2    0[BANK0 ] int 
  8984 ;; Registers used:
  8985 ;;		wreg, status,2, status,0
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8991 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;Total ram usage:        8 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    7
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		_Console_Tab
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text27
  9006  01483E                     __ptext27:
  9007                           	opt stack 0
  9008  01483E                     ___awdiv:
  9009                           	opt stack 19
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;incstack = 0
  9013  01483E  0E00               	movlw	0
  9014  014840  0100               	movlb	0	; () banked
  9015  014842  6FBE               	movwf	___awdiv@sign& (0+255),b
  9016                           
  9017                           ; BSR set to: 0
  9018  014844  0100               	movlb	0	; () banked
  9019  014846  AFBC               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9020  014848  D008               	goto	l2655
  9021                           
  9022                           ; BSR set to: 0
  9023  01484A  0100               	movlb	0	; () banked
  9024  01484C  6DBB               	negf	___awdiv@divisor& (0+255),b
  9025  01484E  1FBC               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9026  014850  B0D8               	btfsc	status,0,c
  9027  014852  2BBC               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9028                           
  9029                           ; BSR set to: 0
  9030  014854  0E01               	movlw	1
  9031  014856  0100               	movlb	0	; () banked
  9032  014858  6FBE               	movwf	___awdiv@sign& (0+255),b
  9033  01485A                     l2655:
  9034                           
  9035                           ; BSR set to: 0
  9036                           
  9037                           ; BSR set to: 0
  9038  01485A  0100               	movlb	0	; () banked
  9039  01485C  AFBA               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9040  01485E  D008               	goto	l2656
  9041                           
  9042                           ; BSR set to: 0
  9043  014860  0100               	movlb	0	; () banked
  9044  014862  6DB9               	negf	___awdiv@dividend& (0+255),b
  9045  014864  1FBA               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9046  014866  B0D8               	btfsc	status,0,c
  9047  014868  2BBA               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9048                           
  9049                           ; BSR set to: 0
  9050  01486A  0E01               	movlw	1
  9051  01486C  0100               	movlb	0	; () banked
  9052  01486E  1BBE               	xorwf	___awdiv@sign& (0+255),f,b
  9053  014870                     l2656:
  9054                           
  9055                           ; BSR set to: 0
  9056                           
  9057                           ; BSR set to: 0
  9058  014870  0E00               	movlw	0
  9059  014872  0100               	movlb	0	; () banked
  9060  014874  6FC0               	movwf	(___awdiv@quotient+1)& (0+255),b
  9061  014876  0E00               	movlw	0
  9062  014878  6FBF               	movwf	___awdiv@quotient& (0+255),b
  9063                           
  9064                           ; BSR set to: 0
  9065  01487A  0100               	movlb	0	; () banked
  9066  01487C  51BB               	movf	___awdiv@divisor& (0+255),w,b
  9067  01487E  0100               	movlb	0	; () banked
  9068  014880  11BC               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9069  014882  B4D8               	btfsc	status,2,c
  9070  014884  D02C               	goto	l2663
  9071                           
  9072                           ; BSR set to: 0
  9073  014886  0E01               	movlw	1
  9074  014888  0100               	movlb	0	; () banked
  9075  01488A  6FBD               	movwf	___awdiv@counter& (0+255),b
  9076  01488C  D006               	goto	l2658
  9077  01488E                     
  9078                           ; BSR set to: 0
  9079                           
  9080                           ; BSR set to: 0
  9081  01488E  0100               	movlb	0	; () banked
  9082  014890  90D8               	bcf	status,0,c
  9083  014892  37BB               	rlcf	___awdiv@divisor& (0+255),f,b
  9084  014894  37BC               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9085  014896  0100               	movlb	0	; () banked
  9086  014898  2BBD               	incf	___awdiv@counter& (0+255),f,b
  9087  01489A                     l2658:
  9088                           
  9089                           ; BSR set to: 0
  9090                           
  9091                           ; BSR set to: 0
  9092  01489A  0100               	movlb	0	; () banked
  9093  01489C  AFBC               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9094  01489E  D7F7               	goto	l2659
  9095  0148A0                     u9600:
  9096                           
  9097                           ; BSR set to: 0
  9098                           
  9099                           ; BSR set to: 0
  9100                           
  9101                           ; BSR set to: 0
  9102  0148A0  0100               	movlb	0	; () banked
  9103  0148A2  90D8               	bcf	status,0,c
  9104  0148A4  37BF               	rlcf	___awdiv@quotient& (0+255),f,b
  9105  0148A6  37C0               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9106                           
  9107                           ; BSR set to: 0
  9108  0148A8  0100               	movlb	0	; () banked
  9109  0148AA  51BB               	movf	___awdiv@divisor& (0+255),w,b
  9110  0148AC  0100               	movlb	0	; () banked
  9111  0148AE  5DB9               	subwf	___awdiv@dividend& (0+255),w,b
  9112  0148B0  0100               	movlb	0	; () banked
  9113  0148B2  51BC               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9114  0148B4  0100               	movlb	0	; () banked
  9115  0148B6  59BA               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9116  0148B8  A0D8               	btfss	status,0,c
  9117  0148BA  D00A               	goto	l2662
  9118                           
  9119                           ; BSR set to: 0
  9120  0148BC  0100               	movlb	0	; () banked
  9121  0148BE  51BB               	movf	___awdiv@divisor& (0+255),w,b
  9122  0148C0  0100               	movlb	0	; () banked
  9123  0148C2  5FB9               	subwf	___awdiv@dividend& (0+255),f,b
  9124  0148C4  0100               	movlb	0	; () banked
  9125  0148C6  51BC               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9126  0148C8  0100               	movlb	0	; () banked
  9127  0148CA  5BBA               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9128                           
  9129                           ; BSR set to: 0
  9130  0148CC  0100               	movlb	0	; () banked
  9131  0148CE  81BF               	bsf	___awdiv@quotient& (0+255),0,b
  9132  0148D0                     l2662:
  9133                           
  9134                           ; BSR set to: 0
  9135                           
  9136                           ; BSR set to: 0
  9137  0148D0  0100               	movlb	0	; () banked
  9138  0148D2  90D8               	bcf	status,0,c
  9139  0148D4  33BC               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9140  0148D6  33BB               	rrcf	___awdiv@divisor& (0+255),f,b
  9141                           
  9142                           ; BSR set to: 0
  9143  0148D8  0100               	movlb	0	; () banked
  9144  0148DA  2FBD               	decfsz	___awdiv@counter& (0+255),f,b
  9145  0148DC  D7E1               	goto	u9600
  9146  0148DE                     l2663:
  9147                           
  9148                           ; BSR set to: 0
  9149                           
  9150                           ; BSR set to: 0
  9151                           
  9152                           ; BSR set to: 0
  9153  0148DE  0100               	movlb	0	; () banked
  9154  0148E0  51BE               	movf	___awdiv@sign& (0+255),w,b
  9155  0148E2  0100               	movlb	0	; () banked
  9156  0148E4  B4D8               	btfsc	status,2,c
  9157  0148E6  D005               	goto	l2664
  9158                           
  9159                           ; BSR set to: 0
  9160  0148E8  0100               	movlb	0	; () banked
  9161  0148EA  6DBF               	negf	___awdiv@quotient& (0+255),b
  9162  0148EC  1FC0               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9163  0148EE  B0D8               	btfsc	status,0,c
  9164  0148F0  2BC0               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9165  0148F2                     l2664:
  9166                           
  9167                           ; BSR set to: 0
  9168                           
  9169                           ; BSR set to: 0
  9170  0148F2  C0BF  F0B9         	movff	___awdiv@quotient,?___awdiv
  9171  0148F6  C0C0  F0BA         	movff	___awdiv@quotient+1,?___awdiv+1
  9172  0148FA  0012               	return	
  9173  0148FC                     __end_of___awdiv:
  9174                           	opt stack 0
  9175                           tblptru	equ	0xFF8
  9176                           tblptrh	equ	0xFF7
  9177                           tblptrl	equ	0xFF6
  9178                           tablat	equ	0xFF5
  9179                           prodh	equ	0xFF4
  9180                           prodl	equ	0xFF3
  9181                           postinc0	equ	0xFEE
  9182                           wreg	equ	0xFE8
  9183                           postdec1	equ	0xFE5
  9184                           fsr1h	equ	0xFE2
  9185                           fsr1l	equ	0xFE1
  9186                           indf2	equ	0xFDF
  9187                           postinc2	equ	0xFDE
  9188                           postdec2	equ	0xFDD
  9189                           fsr2h	equ	0xFDA
  9190                           fsr2l	equ	0xFD9
  9191                           status	equ	0xFD8
  9192                           
  9193 ;; *************** function _Console_IncrementCursor *****************
  9194 ;; Defined at:
  9195 ;;		line 243 in file "Library/Console.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;		None
  9198 ;; Auto vars:     Size  Location     Type
  9199 ;;		None
  9200 ;; Return value:  Size  Location     Type
  9201 ;;                  1    wreg      unsigned char 
  9202 ;; Registers used:
  9203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;Total ram usage:        2 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    8
  9216 ;; This function calls:
  9217 ;;		_Console_FormFeed
  9218 ;;		_Console_NewLine
  9219 ;; This function is called by:
  9220 ;;		_Console_Tab
  9221 ;;		_Console_PrintChar
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           	psect	text28
  9226  015DEE                     __ptext28:
  9227                           	opt stack 0
  9228  015DEE                     _Console_IncrementCursor:
  9229                           	opt stack 18
  9230                           
  9231                           ;Console.c: 246: lBufferX += 1;
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;incstack = 0
  9235  015DEE  0100               	movlb	0	; () banked
  9236  015DF0  2B8E               	incf	_lBufferX& (0+255),f,b
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;Console.c: 248: gCursor.x += 6;
  9240  015DF2  0E06               	movlw	6
  9241  015DF4  2647               	addwf	_gCursor,f,c
  9242  015DF6  0E00               	movlw	0
  9243  015DF8  2248               	addwfc	_gCursor+1,f,c
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  9247  015DFA  0E06               	movlw	6
  9248  015DFC  2447               	addwf	_gCursor,w,c
  9249  015DFE  0100               	movlb	0	; () banked
  9250  015E00  6FBD               	movwf	??_Console_IncrementCursor& (0+255),b
  9251  015E02  0E00               	movlw	0
  9252  015E04  2048               	addwfc	_gCursor+1,w,c
  9253  015E06  0100               	movlb	0	; () banked
  9254  015E08  6FBE               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9255  015E0A  0100               	movlb	0	; () banked
  9256  015E0C  BFBE               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9257  015E0E  D009               	goto	l1004
  9258  015E10  0100               	movlb	0	; () banked
  9259  015E12  51BE               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9260  015E14  E104               	bnz	u9460
  9261  015E16  0E80               	movlw	128
  9262  015E18  0100               	movlb	0	; () banked
  9263  015E1A  5DBD               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9264  015E1C  B0D8               	btfsc	status,0,c
  9265  015E1E                     u9460:
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;Console.c: 250: Console_NewLine();
  9269  015E1E  EC8B  F0A8         	call	_Console_NewLine	;wreg free
  9270  015E22                     l1004:
  9271                           
  9272                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  9273  015E22  0E08               	movlw	8
  9274  015E24  2449               	addwf	_gCursor+2,w,c
  9275  015E26  0100               	movlb	0	; () banked
  9276  015E28  6FBD               	movwf	??_Console_IncrementCursor& (0+255),b
  9277  015E2A  0E00               	movlw	0
  9278  015E2C  204A               	addwfc	_gCursor+3,w,c
  9279  015E2E  0100               	movlb	0	; () banked
  9280  015E30  6FBE               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9281  015E32  0100               	movlb	0	; () banked
  9282  015E34  BFBE               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9283  015E36  D00C               	goto	l1005
  9284  015E38  0100               	movlb	0	; () banked
  9285  015E3A  51BE               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9286  015E3C  E105               	bnz	u9470
  9287  015E3E  0E80               	movlw	128
  9288  015E40  0100               	movlb	0	; () banked
  9289  015E42  5DBD               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9290  015E44  A0D8               	btfss	status,0,c
  9291  015E46  D004               	goto	l1005
  9292  015E48                     u9470:
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;Console.c: 252: {
  9296                           ;Console.c: 253: Console_FormFeed();
  9297  015E48  EC0D  F0AA         	call	_Console_FormFeed	;wreg free
  9298                           
  9299                           ;Console.c: 254: return 1;
  9300  015E4C  0E01               	movlw	1
  9301  015E4E  0012               	return	
  9302  015E50                     l1005:
  9303                           
  9304                           ;Console.c: 255: }
  9305                           ;Console.c: 257: return 0;
  9306  015E50  0E00               	movlw	0
  9307  015E52  0012               	return	
  9308  015E54                     __end_of_Console_IncrementCursor:
  9309                           	opt stack 0
  9310                           tblptru	equ	0xFF8
  9311                           tblptrh	equ	0xFF7
  9312                           tblptrl	equ	0xFF6
  9313                           tablat	equ	0xFF5
  9314                           prodh	equ	0xFF4
  9315                           prodl	equ	0xFF3
  9316                           postinc0	equ	0xFEE
  9317                           wreg	equ	0xFE8
  9318                           postdec1	equ	0xFE5
  9319                           fsr1h	equ	0xFE2
  9320                           fsr1l	equ	0xFE1
  9321                           indf2	equ	0xFDF
  9322                           postinc2	equ	0xFDE
  9323                           postdec2	equ	0xFDD
  9324                           fsr2h	equ	0xFDA
  9325                           fsr2l	equ	0xFD9
  9326                           status	equ	0xFD8
  9327                           
  9328 ;; *************** function _Console_NewLine *****************
  9329 ;; Defined at:
  9330 ;;		line 175 in file "Library/Console.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  1    wreg      void 
  9337 ;; Registers used:
  9338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;Total ram usage:        2 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    7
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_Console_IncrementCursor
  9355 ;;		_Console_PrintChar
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text29
  9360  015116                     __ptext29:
  9361                           	opt stack 0
  9362  015116                     _Console_NewLine:
  9363                           	opt stack 18
  9364                           
  9365                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  9366                           
  9367                           ;incstack = 0
  9368  015116  D03E               	goto	l983
  9369  015118                     
  9370                           ;Console.c: 179: {
  9371                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  9372  015118  0100               	movlb	0	; () banked
  9373  01511A  518D               	movf	_lBufferY& (0+255),w,b
  9374  01511C  0D14               	mullw	20
  9375  01511E  0EB2               	movlw	low _lBuffer
  9376  015120  0100               	movlb	0	; () banked
  9377  015122  6FB9               	movwf	??_Console_NewLine& (0+255),b
  9378  015124  0E04               	movlw	high _lBuffer
  9379  015126  0100               	movlb	0	; () banked
  9380  015128  6FBA               	movwf	(??_Console_NewLine+1)& (0+255),b
  9381  01512A  50F3               	movf	prodl,w,c
  9382  01512C  0100               	movlb	0	; () banked
  9383  01512E  27B9               	addwf	??_Console_NewLine& (0+255),f,b
  9384  015130  50F4               	movf	prodh,w,c
  9385  015132  0100               	movlb	0	; () banked
  9386  015134  23BA               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9387  015136  0100               	movlb	0	; () banked
  9388  015138  518E               	movf	_lBufferX& (0+255),w,b
  9389  01513A  0D01               	mullw	1
  9390  01513C  50F3               	movf	prodl,w,c
  9391  01513E  0100               	movlb	0	; () banked
  9392  015140  25B9               	addwf	??_Console_NewLine& (0+255),w,b
  9393  015142  6ED9               	movwf	fsr2l,c
  9394  015144  50F4               	movf	prodh,w,c
  9395  015146  0100               	movlb	0	; () banked
  9396  015148  21BA               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9397  01514A  6EDA               	movwf	fsr2h,c
  9398  01514C  50DF               	movf	indf2,w,c
  9399  01514E  B4D8               	btfsc	status,2,c
  9400  015150  D01F               	goto	l985
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  9404  015152  0E01               	movlw	1
  9405  015154  0100               	movlb	0	; () banked
  9406  015156  6FFF               	movwf	_change& (0+255),b
  9407                           
  9408                           ; BSR set to: 0
  9409  015158  0100               	movlb	0	; () banked
  9410  01515A  518D               	movf	_lBufferY& (0+255),w,b
  9411  01515C  0D14               	mullw	20
  9412  01515E  0EB2               	movlw	low _lBuffer
  9413  015160  0100               	movlb	0	; () banked
  9414  015162  6FB9               	movwf	??_Console_NewLine& (0+255),b
  9415  015164  0E04               	movlw	high _lBuffer
  9416  015166  0100               	movlb	0	; () banked
  9417  015168  6FBA               	movwf	(??_Console_NewLine+1)& (0+255),b
  9418  01516A  50F3               	movf	prodl,w,c
  9419  01516C  0100               	movlb	0	; () banked
  9420  01516E  27B9               	addwf	??_Console_NewLine& (0+255),f,b
  9421  015170  50F4               	movf	prodh,w,c
  9422  015172  0100               	movlb	0	; () banked
  9423  015174  23BA               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9424  015176  0100               	movlb	0	; () banked
  9425  015178  518E               	movf	_lBufferX& (0+255),w,b
  9426  01517A  0D01               	mullw	1
  9427  01517C  50F3               	movf	prodl,w,c
  9428  01517E  0100               	movlb	0	; () banked
  9429  015180  25B9               	addwf	??_Console_NewLine& (0+255),w,b
  9430  015182  6ED9               	movwf	fsr2l,c
  9431  015184  50F4               	movf	prodh,w,c
  9432  015186  0100               	movlb	0	; () banked
  9433  015188  21BA               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9434  01518A  6EDA               	movwf	fsr2h,c
  9435  01518C  0E80               	movlw	128
  9436  01518E  6EDF               	movwf	indf2,c
  9437  015190                     l985:
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;Console.c: 182: lBufferX ++;
  9441                           
  9442                           ; BSR set to: 0
  9443  015190  0100               	movlb	0	; () banked
  9444  015192  2B8E               	incf	_lBufferX& (0+255),f,b
  9445  015194                     l983:
  9446                           
  9447                           ; BSR set to: 0
  9448  015194  0E13               	movlw	19
  9449  015196  0100               	movlb	0	; () banked
  9450  015198  658E               	cpfsgt	_lBufferX& (0+255),b
  9451  01519A  D7BE               	goto	l984
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;Console.c: 183: }
  9455                           ;Console.c: 185: lBufferX = 0;
  9456                           
  9457                           ; BSR set to: 0
  9458  01519C  0E00               	movlw	0
  9459  01519E  0100               	movlb	0	; () banked
  9460  0151A0  6F8E               	movwf	_lBufferX& (0+255),b
  9461                           
  9462                           ; BSR set to: 0
  9463                           ;Console.c: 186: lBufferY ++;
  9464  0151A2  0100               	movlb	0	; () banked
  9465  0151A4  2B8D               	incf	_lBufferY& (0+255),f,b
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;Console.c: 188: gCursor.y += 8;
  9469  0151A6  0E08               	movlw	8
  9470  0151A8  2649               	addwf	_gCursor+2,f,c
  9471  0151AA  0E00               	movlw	0
  9472  0151AC  224A               	addwfc	_gCursor+3,f,c
  9473                           
  9474                           ; BSR set to: 0
  9475                           ;Console.c: 189: gCursor.x = 6;
  9476  0151AE  0E00               	movlw	0
  9477  0151B0  6E48               	movwf	_gCursor+1,c
  9478  0151B2  0E06               	movlw	6
  9479  0151B4  6E47               	movwf	_gCursor,c
  9480                           
  9481                           ; BSR set to: 0
  9482  0151B6  0012               	return		;funcret
  9483  0151B8                     __end_of_Console_NewLine:
  9484                           	opt stack 0
  9485                           tblptru	equ	0xFF8
  9486                           tblptrh	equ	0xFF7
  9487                           tblptrl	equ	0xFF6
  9488                           tablat	equ	0xFF5
  9489                           prodh	equ	0xFF4
  9490                           prodl	equ	0xFF3
  9491                           postinc0	equ	0xFEE
  9492                           wreg	equ	0xFE8
  9493                           postdec1	equ	0xFE5
  9494                           fsr1h	equ	0xFE2
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function _Console_FormFeed *****************
  9504 ;; Defined at:
  9505 ;;		line 192 in file "Library/Console.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;		None
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  y               1    3[BANK0 ] unsigned char 
  9510 ;;  x               1    2[BANK0 ] unsigned char 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  1    wreg      void 
  9513 ;; Registers used:
  9514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;Total ram usage:        4 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    7
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		_Console_IncrementCursor
  9531 ;;		_Console_PrintChar
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text30
  9536  01541A                     __ptext30:
  9537                           	opt stack 0
  9538  01541A                     _Console_FormFeed:
  9539                           	opt stack 18
  9540                           
  9541                           ;Console.c: 195: lBufferX = 0;
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;incstack = 0
  9545  01541A  0E00               	movlw	0
  9546  01541C  0100               	movlb	0	; () banked
  9547  01541E  6F8E               	movwf	_lBufferX& (0+255),b
  9548                           
  9549                           ;Console.c: 196: lBufferY = 0;
  9550  015420  0E00               	movlw	0
  9551  015422  0100               	movlb	0	; () banked
  9552  015424  6F8D               	movwf	_lBufferY& (0+255),b
  9553                           
  9554                           ;Console.c: 197: UINT8 x, y;
  9555                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  9556  015426  0E00               	movlw	0
  9557  015428  0100               	movlb	0	; () banked
  9558  01542A  6FBC               	movwf	Console_FormFeed@y& (0+255),b
  9559  01542C                     l12543:
  9560                           
  9561                           ; BSR set to: 0
  9562  01542C  0E0E               	movlw	14
  9563  01542E  0100               	movlb	0	; () banked
  9564  015430  65BC               	cpfsgt	Console_FormFeed@y& (0+255),b
  9565  015432  D001               	goto	l990
  9566  015434  D02D               	goto	u9290
  9567  015436                     l990:
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9571                           
  9572                           ; BSR set to: 0
  9573  015436  0E00               	movlw	0
  9574  015438  0100               	movlb	0	; () banked
  9575  01543A  6FBB               	movwf	Console_FormFeed@x& (0+255),b
  9576  01543C                     l12549:
  9577                           
  9578                           ; BSR set to: 0
  9579  01543C  0E13               	movlw	19
  9580  01543E  0100               	movlb	0	; () banked
  9581  015440  65BB               	cpfsgt	Console_FormFeed@x& (0+255),b
  9582  015442  D001               	goto	l992
  9583  015444  D022               	goto	u9280
  9584  015446                     l992:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  9588                           
  9589                           ; BSR set to: 0
  9590  015446  0E01               	movlw	1
  9591  015448  0100               	movlb	0	; () banked
  9592  01544A  6FFF               	movwf	_change& (0+255),b
  9593                           
  9594                           ; BSR set to: 0
  9595  01544C  0100               	movlb	0	; () banked
  9596  01544E  51BC               	movf	Console_FormFeed@y& (0+255),w,b
  9597  015450  0D14               	mullw	20
  9598  015452  0EB2               	movlw	low _lBuffer
  9599  015454  0100               	movlb	0	; () banked
  9600  015456  6FB9               	movwf	??_Console_FormFeed& (0+255),b
  9601  015458  0E04               	movlw	high _lBuffer
  9602  01545A  0100               	movlb	0	; () banked
  9603  01545C  6FBA               	movwf	(??_Console_FormFeed+1)& (0+255),b
  9604  01545E  50F3               	movf	prodl,w,c
  9605  015460  0100               	movlb	0	; () banked
  9606  015462  27B9               	addwf	??_Console_FormFeed& (0+255),f,b
  9607  015464  50F4               	movf	prodh,w,c
  9608  015466  0100               	movlb	0	; () banked
  9609  015468  23BA               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  9610  01546A  0100               	movlb	0	; () banked
  9611  01546C  51BB               	movf	Console_FormFeed@x& (0+255),w,b
  9612  01546E  0D01               	mullw	1
  9613  015470  50F3               	movf	prodl,w,c
  9614  015472  0100               	movlb	0	; () banked
  9615  015474  25B9               	addwf	??_Console_FormFeed& (0+255),w,b
  9616  015476  6ED9               	movwf	fsr2l,c
  9617  015478  50F4               	movf	prodh,w,c
  9618  01547A  0100               	movlb	0	; () banked
  9619  01547C  21BA               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  9620  01547E  6EDA               	movwf	fsr2h,c
  9621  015480  0E80               	movlw	128
  9622  015482  6EDF               	movwf	indf2,c
  9623                           
  9624                           ; BSR set to: 0
  9625  015484  0100               	movlb	0	; () banked
  9626  015486  2BBB               	incf	Console_FormFeed@x& (0+255),f,b
  9627  015488  D7D9               	goto	l12549
  9628  01548A                     u9280:
  9629                           
  9630                           ; BSR set to: 0
  9631                           
  9632                           ; BSR set to: 0
  9633  01548A  0100               	movlb	0	; () banked
  9634  01548C  2BBC               	incf	Console_FormFeed@y& (0+255),f,b
  9635  01548E  D7CE               	goto	l12543
  9636  015490                     u9290:
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;Console.c: 204: clearall = 1;
  9640                           
  9641                           ; BSR set to: 0
  9642  015490  0E01               	movlw	1
  9643  015492  0100               	movlb	0	; () banked
  9644  015494  6F8F               	movwf	_clearall& (0+255),b
  9645                           
  9646                           ;Console.c: 205: gCursor.x = 6;
  9647  015496  0E00               	movlw	0
  9648  015498  6E48               	movwf	_gCursor+1,c
  9649  01549A  0E06               	movlw	6
  9650  01549C  6E47               	movwf	_gCursor,c
  9651                           
  9652                           ;Console.c: 206: gCursor.y = 6;
  9653  01549E  0E00               	movlw	0
  9654  0154A0  6E4A               	movwf	_gCursor+3,c
  9655  0154A2  0E06               	movlw	6
  9656  0154A4  6E49               	movwf	_gCursor+2,c
  9657                           
  9658                           ; BSR set to: 0
  9659  0154A6  0012               	return		;funcret
  9660  0154A8                     __end_of_Console_FormFeed:
  9661                           	opt stack 0
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           postinc0	equ	0xFEE
  9669                           wreg	equ	0xFE8
  9670                           postdec1	equ	0xFE5
  9671                           fsr1h	equ	0xFE2
  9672                           fsr1l	equ	0xFE1
  9673                           indf2	equ	0xFDF
  9674                           postinc2	equ	0xFDE
  9675                           postdec2	equ	0xFDD
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8
  9679                           
  9680 ;; *************** function _Console_ResetCursor *****************
  9681 ;; Defined at:
  9682 ;;		line 297 in file "Library/Console.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		wreg, status,2
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;Total ram usage:        0 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    7
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_Console_PrintChar
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text31
  9711  016A2E                     __ptext31:
  9712                           	opt stack 0
  9713  016A2E                     _Console_ResetCursor:
  9714                           	opt stack 20
  9715                           
  9716                           ;Console.c: 299: gCursor.x = 6;
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;incstack = 0
  9720  016A2E  0E00               	movlw	0
  9721  016A30  6E48               	movwf	_gCursor+1,c
  9722  016A32  0E06               	movlw	6
  9723  016A34  6E47               	movwf	_gCursor,c
  9724                           
  9725                           ;Console.c: 300: gCursor.y = 6;
  9726  016A36  0E00               	movlw	0
  9727  016A38  6E4A               	movwf	_gCursor+3,c
  9728  016A3A  0E06               	movlw	6
  9729  016A3C  6E49               	movwf	_gCursor+2,c
  9730                           
  9731                           ;Console.c: 303: lBufferX = 0;
  9732  016A3E  0E00               	movlw	0
  9733  016A40  0100               	movlb	0	; () banked
  9734  016A42  6F8E               	movwf	_lBufferX& (0+255),b
  9735                           
  9736                           ;Console.c: 304: lBufferY = 0;
  9737  016A44  0E00               	movlw	0
  9738  016A46  0100               	movlb	0	; () banked
  9739  016A48  6F8D               	movwf	_lBufferY& (0+255),b
  9740                           
  9741                           ; BSR set to: 0
  9742  016A4A  0012               	return		;funcret
  9743  016A4C                     __end_of_Console_ResetCursor:
  9744                           	opt stack 0
  9745                           tblptru	equ	0xFF8
  9746                           tblptrh	equ	0xFF7
  9747                           tblptrl	equ	0xFF6
  9748                           tablat	equ	0xFF5
  9749                           prodh	equ	0xFF4
  9750                           prodl	equ	0xFF3
  9751                           postinc0	equ	0xFEE
  9752                           wreg	equ	0xFE8
  9753                           postdec1	equ	0xFE5
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function _Console_Backspace *****************
  9764 ;; Defined at:
  9765 ;;		line 209 in file "Library/Console.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;		None
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;		None
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  1    wreg      void 
  9772 ;; Registers used:
  9773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;Total ram usage:        0 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    8
  9786 ;; This function calls:
  9787 ;;		_Console_ClearCursor
  9788 ;; This function is called by:
  9789 ;;		_Console_PrintChar
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text32
  9794  015F7C                     __ptext32:
  9795                           	opt stack 0
  9796  015F7C                     _Console_Backspace:
  9797                           	opt stack 19
  9798                           
  9799                           ;Console.c: 211: if (lBufferX > 0)
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;incstack = 0
  9803  015F7C  0100               	movlb	0	; () banked
  9804  015F7E  518E               	movf	_lBufferX& (0+255),w,b
  9805  015F80  B4D8               	btfsc	status,2,c
  9806  015F82  D007               	goto	l997
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;Console.c: 212: {
  9810                           ;Console.c: 213: gCursor.x -= 6;
  9811  015F84  0EFA               	movlw	250
  9812  015F86  2647               	addwf	_gCursor,f,c
  9813  015F88  0EFF               	movlw	255
  9814  015F8A  2248               	addwfc	_gCursor+1,f,c
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;Console.c: 216: lBufferX --;
  9818  015F8C  0100               	movlb	0	; () banked
  9819  015F8E  078E               	decf	_lBufferX& (0+255),f,b
  9820                           
  9821                           ;Console.c: 218: }
  9822  015F90  D020               	goto	l1000
  9823  015F92                     l997:
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;Console.c: 219: else if (lBufferY > 0)
  9827                           
  9828                           ; BSR set to: 0
  9829  015F92  0100               	movlb	0	; () banked
  9830  015F94  518D               	movf	_lBufferY& (0+255),w,b
  9831  015F96  B4D8               	btfsc	status,2,c
  9832  015F98  D00E               	goto	l999
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;Console.c: 220: {
  9836                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  9837  015F9A  0E00               	movlw	0
  9838  015F9C  6E48               	movwf	_gCursor+1,c
  9839  015F9E  0E72               	movlw	114
  9840  015FA0  6E47               	movwf	_gCursor,c
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;Console.c: 222: gCursor.y -= 8;
  9844  015FA2  0EF8               	movlw	248
  9845  015FA4  2649               	addwf	_gCursor+2,f,c
  9846  015FA6  0EFF               	movlw	255
  9847  015FA8  224A               	addwfc	_gCursor+3,f,c
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  9851  015FAA  0E13               	movlw	19
  9852  015FAC  0100               	movlb	0	; () banked
  9853  015FAE  6F8E               	movwf	_lBufferX& (0+255),b
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;Console.c: 226: lBufferY --;
  9857  015FB0  0100               	movlb	0	; () banked
  9858  015FB2  078D               	decf	_lBufferY& (0+255),f,b
  9859                           
  9860                           ;Console.c: 228: }
  9861  015FB4  D00E               	goto	l1000
  9862  015FB6                     l999:
  9863                           
  9864                           ; BSR set to: 0
  9865                           ;Console.c: 229: else
  9866                           ;Console.c: 230: {
  9867                           ;Console.c: 231: gCursor.x = 6;
  9868                           
  9869                           ; BSR set to: 0
  9870  015FB6  0E00               	movlw	0
  9871  015FB8  6E48               	movwf	_gCursor+1,c
  9872  015FBA  0E06               	movlw	6
  9873  015FBC  6E47               	movwf	_gCursor,c
  9874                           
  9875                           ;Console.c: 232: gCursor.y = 6;
  9876  015FBE  0E00               	movlw	0
  9877  015FC0  6E4A               	movwf	_gCursor+3,c
  9878  015FC2  0E06               	movlw	6
  9879  015FC4  6E49               	movwf	_gCursor+2,c
  9880                           
  9881                           ;Console.c: 235: lBufferX = 0;
  9882  015FC6  0E00               	movlw	0
  9883  015FC8  0100               	movlb	0	; () banked
  9884  015FCA  6F8E               	movwf	_lBufferX& (0+255),b
  9885                           
  9886                           ;Console.c: 236: lBufferY = 0;
  9887  015FCC  0E00               	movlw	0
  9888  015FCE  0100               	movlb	0	; () banked
  9889  015FD0  6F8D               	movwf	_lBufferY& (0+255),b
  9890  015FD2                     l1000:
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;Console.c: 238: }
  9894                           ;Console.c: 240: Console_ClearCursor();
  9895                           
  9896                           ; BSR set to: 0
  9897                           
  9898                           ; BSR set to: 0
  9899  015FD2  EC72  F0B2         	call	_Console_ClearCursor	;wreg free
  9900  015FD6  0012               	return		;funcret
  9901  015FD8                     __end_of_Console_Backspace:
  9902                           	opt stack 0
  9903                           tblptru	equ	0xFF8
  9904                           tblptrh	equ	0xFF7
  9905                           tblptrl	equ	0xFF6
  9906                           tablat	equ	0xFF5
  9907                           prodh	equ	0xFF4
  9908                           prodl	equ	0xFF3
  9909                           postinc0	equ	0xFEE
  9910                           wreg	equ	0xFE8
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _Console_ClearCursor *****************
  9922 ;; Defined at:
  9923 ;;		line 308 in file "Library/Console.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      void 
  9930 ;; Registers used:
  9931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;Total ram usage:        2 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:    7
  9944 ;; This function calls:
  9945 ;;		Nothing
  9946 ;; This function is called by:
  9947 ;;		_Console_Backspace
  9948 ;;		_Console_Tab
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           	psect	text33
  9953  0164E4                     __ptext33:
  9954                           	opt stack 0
  9955  0164E4                     _Console_ClearCursor:
  9956                           	opt stack 19
  9957                           
  9958                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  9959                           
  9960                           ;incstack = 0
  9961  0164E4  0E01               	movlw	1
  9962  0164E6  0100               	movlb	0	; () banked
  9963  0164E8  6FFF               	movwf	_change& (0+255),b
  9964                           
  9965                           ; BSR set to: 0
  9966  0164EA  0100               	movlb	0	; () banked
  9967  0164EC  518D               	movf	_lBufferY& (0+255),w,b
  9968  0164EE  0D14               	mullw	20
  9969  0164F0  0EB2               	movlw	low _lBuffer
  9970  0164F2  0100               	movlb	0	; () banked
  9971  0164F4  6FB9               	movwf	??_Console_ClearCursor& (0+255),b
  9972  0164F6  0E04               	movlw	high _lBuffer
  9973  0164F8  0100               	movlb	0	; () banked
  9974  0164FA  6FBA               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  9975  0164FC  50F3               	movf	prodl,w,c
  9976  0164FE  0100               	movlb	0	; () banked
  9977  016500  27B9               	addwf	??_Console_ClearCursor& (0+255),f,b
  9978  016502  50F4               	movf	prodh,w,c
  9979  016504  0100               	movlb	0	; () banked
  9980  016506  23BA               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  9981  016508  0100               	movlb	0	; () banked
  9982  01650A  518E               	movf	_lBufferX& (0+255),w,b
  9983  01650C  0D01               	mullw	1
  9984  01650E  50F3               	movf	prodl,w,c
  9985  016510  0100               	movlb	0	; () banked
  9986  016512  25B9               	addwf	??_Console_ClearCursor& (0+255),w,b
  9987  016514  6ED9               	movwf	fsr2l,c
  9988  016516  50F4               	movf	prodh,w,c
  9989  016518  0100               	movlb	0	; () banked
  9990  01651A  21BA               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  9991  01651C  6EDA               	movwf	fsr2h,c
  9992  01651E  0E80               	movlw	128
  9993  016520  6EDF               	movwf	indf2,c
  9994                           
  9995                           ; BSR set to: 0
  9996  016522  0012               	return		;funcret
  9997  016524                     __end_of_Console_ClearCursor:
  9998                           	opt stack 0
  9999                           tblptru	equ	0xFF8
 10000                           tblptrh	equ	0xFF7
 10001                           tblptrl	equ	0xFF6
 10002                           tablat	equ	0xFF5
 10003                           prodh	equ	0xFF4
 10004                           prodl	equ	0xFF3
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           postdec1	equ	0xFE5
 10008                           fsr1h	equ	0xFE2
 10009                           fsr1l	equ	0xFE1
 10010                           indf2	equ	0xFDF
 10011                           postinc2	equ	0xFDE
 10012                           postdec2	equ	0xFDD
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function ___fltol *****************
 10018 ;; Defined at:
 10019 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  f1              4   57[BANK0 ] void 
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;  exp1            1   62[BANK0 ] unsigned char 
 10024 ;;  sign1           1   61[BANK0 ] unsigned char 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  4   57[BANK0 ] long 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:       10 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    7
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_findClosestWall
 10045 ;;		_measureAndDisplayDistance
 10046 ;;		_mode1
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           	psect	text34
 10051  013C30                     __ptext34:
 10052                           	opt stack 0
 10053  013C30                     ___fltol:
 10054                           	opt stack 21
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;incstack = 0
 10058  013C30  0100               	movlb	0	; () banked
 10059  013C32  35F4               	rlcf	(___fltol@f1+2)& (0+255),w,b
 10060  013C34  35F5               	rlcf	(___fltol@f1+3)& (0+255),w,b
 10061  013C36  0100               	movlb	0	; () banked
 10062  013C38  6FF7               	movwf	___fltol@exp1& (0+255),b
 10063  013C3A  0100               	movlb	0	; () banked
 10064  013C3C  51F7               	movf	___fltol@exp1& (0+255),w,b
 10065  013C3E  A4D8               	btfss	status,2,c
 10066  013C40  D00A               	goto	l2717
 10067                           
 10068                           ; BSR set to: 0
 10069  013C42  0E00               	movlw	0
 10070  013C44  0100               	movlb	0	; () banked
 10071  013C46  6FF2               	movwf	?___fltol& (0+255),b
 10072  013C48  0E00               	movlw	0
 10073  013C4A  6FF3               	movwf	(?___fltol+1)& (0+255),b
 10074  013C4C  0E00               	movlw	0
 10075  013C4E  6FF4               	movwf	(?___fltol+2)& (0+255),b
 10076  013C50  0E00               	movlw	0
 10077  013C52  6FF5               	movwf	(?___fltol+3)& (0+255),b
 10078                           
 10079                           ; BSR set to: 0
 10080  013C54  0012               	return	
 10081  013C56                     l2717:
 10082                           
 10083                           ; BSR set to: 0
 10084                           
 10085                           ; BSR set to: 0
 10086  013C56  C0F2  F100         	movff	___fltol@f1,??___fltol
 10087  013C5A  C0F3  F101         	movff	___fltol@f1+1,??___fltol+1
 10088  013C5E  C0F4  F102         	movff	___fltol@f1+2,??___fltol+2
 10089  013C62  C0F5  F103         	movff	___fltol@f1+3,??___fltol+3
 10090  013C66  0E20               	movlw	32
 10091  013C68  D006               	goto	u11090
 10092  013C6A                     u11095:
 10093  013C6A  0101               	movlb	1	; () banked
 10094  013C6C  90D8               	bcf	status,0,c
 10095  013C6E  3303               	rrcf	(??___fltol+3)& (0+255),f,b
 10096  013C70  3302               	rrcf	(??___fltol+2)& (0+255),f,b
 10097  013C72  3301               	rrcf	(??___fltol+1)& (0+255),f,b
 10098  013C74  3300               	rrcf	??___fltol& (0+255),f,b
 10099  013C76                     u11090:
 10100  013C76  2EE8               	decfsz	wreg,f,c
 10101  013C78  D7F8               	goto	u11095
 10102  013C7A  0101               	movlb	1	; () banked
 10103  013C7C  5100               	movf	??___fltol& (0+255),w,b
 10104  013C7E  0100               	movlb	0	; () banked
 10105  013C80  6FF6               	movwf	___fltol@sign1& (0+255),b
 10106                           
 10107                           ; BSR set to: 0
 10108  013C82  0100               	movlb	0	; () banked
 10109  013C84  8FF4               	bsf	(___fltol@f1+2)& (0+255),7,b
 10110                           
 10111                           ; BSR set to: 0
 10112  013C86  0EFF               	movlw	255
 10113  013C88  0100               	movlb	0	; () banked
 10114  013C8A  17F2               	andwf	___fltol@f1& (0+255),f,b
 10115  013C8C  0EFF               	movlw	255
 10116  013C8E  17F3               	andwf	(___fltol@f1+1)& (0+255),f,b
 10117  013C90  0EFF               	movlw	255
 10118  013C92  17F4               	andwf	(___fltol@f1+2)& (0+255),f,b
 10119  013C94  0E00               	movlw	0
 10120  013C96  17F5               	andwf	(___fltol@f1+3)& (0+255),f,b
 10121                           
 10122                           ; BSR set to: 0
 10123  013C98  0E96               	movlw	150
 10124  013C9A  0100               	movlb	0	; () banked
 10125  013C9C  5FF7               	subwf	___fltol@exp1& (0+255),f,b
 10126                           
 10127                           ; BSR set to: 0
 10128  013C9E  0100               	movlb	0	; () banked
 10129  013CA0  AFF7               	btfss	___fltol@exp1& (0+255),7,b
 10130  013CA2  D01A               	goto	l2719
 10131                           
 10132                           ; BSR set to: 0
 10133  013CA4  0100               	movlb	0	; () banked
 10134  013CA6  51F7               	movf	___fltol@exp1& (0+255),w,b
 10135  013CA8  0A80               	xorlw	128
 10136  013CAA  0F97               	addlw	151
 10137  013CAC  B0D8               	btfsc	status,0,c
 10138  013CAE  D00A               	goto	l2720
 10139                           
 10140                           ; BSR set to: 0
 10141  013CB0  0E00               	movlw	0
 10142  013CB2  0100               	movlb	0	; () banked
 10143  013CB4  6FF2               	movwf	?___fltol& (0+255),b
 10144  013CB6  0E00               	movlw	0
 10145  013CB8  6FF3               	movwf	(?___fltol+1)& (0+255),b
 10146  013CBA  0E00               	movlw	0
 10147  013CBC  6FF4               	movwf	(?___fltol+2)& (0+255),b
 10148  013CBE  0E00               	movlw	0
 10149  013CC0  6FF5               	movwf	(?___fltol+3)& (0+255),b
 10150                           
 10151                           ; BSR set to: 0
 10152  013CC2  0012               	return	
 10153  013CC4                     l2720:
 10154                           
 10155                           ; BSR set to: 0
 10156                           
 10157                           ; BSR set to: 0
 10158                           
 10159                           ; BSR set to: 0
 10160  013CC4  0100               	movlb	0	; () banked
 10161  013CC6  90D8               	bcf	status,0,c
 10162  013CC8  33F5               	rrcf	(___fltol@f1+3)& (0+255),f,b
 10163  013CCA  33F4               	rrcf	(___fltol@f1+2)& (0+255),f,b
 10164  013CCC  33F3               	rrcf	(___fltol@f1+1)& (0+255),f,b
 10165  013CCE  33F2               	rrcf	___fltol@f1& (0+255),f,b
 10166                           
 10167                           ; BSR set to: 0
 10168  013CD0  0100               	movlb	0	; () banked
 10169  013CD2  3FF7               	incfsz	___fltol@exp1& (0+255),f,b
 10170  013CD4  D7F7               	goto	l2720
 10171                           
 10172                           ; BSR set to: 0
 10173  013CD6  D01B               	goto	u11130
 10174  013CD8                     l2719:
 10175                           
 10176                           ; BSR set to: 0
 10177                           
 10178                           ; BSR set to: 0
 10179  013CD8  0E1F               	movlw	31
 10180  013CDA  0100               	movlb	0	; () banked
 10181  013CDC  65F7               	cpfsgt	___fltol@exp1& (0+255),b
 10182  013CDE  D012               	goto	l2725
 10183                           
 10184                           ; BSR set to: 0
 10185  013CE0  0E00               	movlw	0
 10186  013CE2  0100               	movlb	0	; () banked
 10187  013CE4  6FF2               	movwf	?___fltol& (0+255),b
 10188  013CE6  0E00               	movlw	0
 10189  013CE8  6FF3               	movwf	(?___fltol+1)& (0+255),b
 10190  013CEA  0E00               	movlw	0
 10191  013CEC  6FF4               	movwf	(?___fltol+2)& (0+255),b
 10192  013CEE  0E00               	movlw	0
 10193  013CF0  6FF5               	movwf	(?___fltol+3)& (0+255),b
 10194                           
 10195                           ; BSR set to: 0
 10196  013CF2  0012               	return	
 10197  013CF4                     
 10198                           ; BSR set to: 0
 10199                           
 10200                           ; BSR set to: 0
 10201  013CF4  0100               	movlb	0	; () banked
 10202  013CF6  90D8               	bcf	status,0,c
 10203  013CF8  37F2               	rlcf	___fltol@f1& (0+255),f,b
 10204  013CFA  37F3               	rlcf	(___fltol@f1+1)& (0+255),f,b
 10205  013CFC  37F4               	rlcf	(___fltol@f1+2)& (0+255),f,b
 10206  013CFE  37F5               	rlcf	(___fltol@f1+3)& (0+255),f,b
 10207  013D00  0100               	movlb	0	; () banked
 10208  013D02  07F7               	decf	___fltol@exp1& (0+255),f,b
 10209  013D04                     l2725:
 10210                           
 10211                           ; BSR set to: 0
 10212                           
 10213                           ; BSR set to: 0
 10214  013D04  0100               	movlb	0	; () banked
 10215  013D06  51F7               	movf	___fltol@exp1& (0+255),w,b
 10216  013D08  0100               	movlb	0	; () banked
 10217  013D0A  A4D8               	btfss	status,2,c
 10218  013D0C  D7F3               	goto	l2726
 10219  013D0E                     u11130:
 10220                           
 10221                           ; BSR set to: 0
 10222                           
 10223                           ; BSR set to: 0
 10224                           
 10225                           ; BSR set to: 0
 10226  013D0E  0100               	movlb	0	; () banked
 10227  013D10  51F6               	movf	___fltol@sign1& (0+255),w,b
 10228  013D12  0100               	movlb	0	; () banked
 10229  013D14  B4D8               	btfsc	status,2,c
 10230  013D16  D009               	goto	l2728
 10231                           
 10232                           ; BSR set to: 0
 10233  013D18  0100               	movlb	0	; () banked
 10234  013D1A  1FF5               	comf	(___fltol@f1+3)& (0+255),f,b
 10235  013D1C  1FF4               	comf	(___fltol@f1+2)& (0+255),f,b
 10236  013D1E  1FF3               	comf	(___fltol@f1+1)& (0+255),f,b
 10237  013D20  6DF2               	negf	___fltol@f1& (0+255),b
 10238  013D22  0E00               	movlw	0
 10239  013D24  23F3               	addwfc	(___fltol@f1+1)& (0+255),f,b
 10240  013D26  23F4               	addwfc	(___fltol@f1+2)& (0+255),f,b
 10241  013D28  23F5               	addwfc	(___fltol@f1+3)& (0+255),f,b
 10242  013D2A                     l2728:
 10243                           
 10244                           ; BSR set to: 0
 10245                           
 10246                           ; BSR set to: 0
 10247  013D2A  C0F2  F0F2         	movff	___fltol@f1,?___fltol
 10248  013D2E  C0F3  F0F3         	movff	___fltol@f1+1,?___fltol+1
 10249  013D32  C0F4  F0F4         	movff	___fltol@f1+2,?___fltol+2
 10250  013D36  C0F5  F0F5         	movff	___fltol@f1+3,?___fltol+3
 10251  013D3A  0012               	return	
 10252  013D3C                     __end_of___fltol:
 10253                           	opt stack 0
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           postinc0	equ	0xFEE
 10261                           wreg	equ	0xFE8
 10262                           postdec1	equ	0xFE5
 10263                           fsr1h	equ	0xFE2
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _Motor_Speed *****************
 10273 ;; Defined at:
 10274 ;;		line 117 in file "Library/Motor.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 10277 ;;		 -> Stepper(6), 
 10278 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;		None
 10281 ;; Return value:  Size  Location     Type
 10282 ;;                  1    wreg      unsigned char 
 10283 ;; Registers used:
 10284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10290 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;Total ram usage:        4 bytes
 10295 ;; Hardware stack levels used:    1
 10296 ;; Hardware stack levels required when called:    9
 10297 ;; This function calls:
 10298 ;;		_Timer0_Init
 10299 ;; This function is called by:
 10300 ;;		_findClosestWall
 10301 ;;		_mode1
 10302 ;; This function uses a non-reentrant model
 10303 ;;
 10304                           
 10305                           	psect	text35
 10306  016906                     __ptext35:
 10307                           	opt stack 0
 10308  016906                     _Motor_Speed:
 10309                           	opt stack 19
 10310                           
 10311                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;incstack = 0
 10315  016906  0100               	movlb	0	; () banked
 10316  016908  EE20 F002          	lfsr	2,2
 10317  01690C  51D4               	movf	Motor_Speed@pMotor& (0+255),w,b
 10318  01690E  26D9               	addwf	fsr2l,f,c
 10319  016910  51D5               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 10320  016912  22DA               	addwfc	fsr2h,f,c
 10321  016914  C0D6  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 10322  016918  C0D7  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;Motor.c: 120: Timer0_Init(pFrequency);
 10326  01691C  C0D6  F0C6         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 10327  016920  C0D7  F0C7         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 10328  016924  0100               	movlb	0	; () banked
 10329  016926  6BC8               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 10330  016928  6BC9               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 10331  01692A  EC19  F09B         	call	_Timer0_Init	;wreg free
 10332  01692E  0012               	return	
 10333  016930                     __end_of_Motor_Speed:
 10334                           	opt stack 0
 10335                           tblptru	equ	0xFF8
 10336                           tblptrh	equ	0xFF7
 10337                           tblptrl	equ	0xFF6
 10338                           tablat	equ	0xFF5
 10339                           prodh	equ	0xFF4
 10340                           prodl	equ	0xFF3
 10341                           postinc0	equ	0xFEE
 10342                           wreg	equ	0xFE8
 10343                           postdec1	equ	0xFE5
 10344                           fsr1h	equ	0xFE2
 10345                           fsr1l	equ	0xFE1
 10346                           indf2	equ	0xFDF
 10347                           postinc2	equ	0xFDE
 10348                           postdec2	equ	0xFDD
 10349                           fsr2h	equ	0xFDA
 10350                           fsr2l	equ	0xFD9
 10351                           status	equ	0xFD8
 10352                           
 10353 ;; *************** function _Motor_Move *****************
 10354 ;; Defined at:
 10355 ;;		line 51 in file "Library/Motor.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 10358 ;;		 -> Stepper(6), 
 10359 ;;  pDelta          2    5[BANK0 ] short 
 10360 ;; Auto vars:     Size  Location     Type
 10361 ;;		None
 10362 ;; Return value:  Size  Location     Type
 10363 ;;                  1    wreg      unsigned char 
 10364 ;; Registers used:
 10365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10366 ;; Tracked objects:
 10367 ;;		On entry : 0/0
 10368 ;;		On exit  : 0/0
 10369 ;;		Unchanged: 0/0
 10370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10371 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;Total ram usage:        6 bytes
 10376 ;; Hardware stack levels used:    1
 10377 ;; Hardware stack levels required when called:    8
 10378 ;; This function calls:
 10379 ;;		_Timer0_Start
 10380 ;; This function is called by:
 10381 ;;		_findClosestWall
 10382 ;;		_mode1
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           	psect	text36
 10387  01670E                     __ptext36:
 10388                           	opt stack 0
 10389  01670E                     _Motor_Move:
 10390                           	opt stack 20
 10391                           
 10392                           ;Motor.c: 54: lMotor = pMotor;
 10393                           
 10394                           ;incstack = 0
 10395  01670E  C0BC  F07D         	movff	Motor_Move@pMotor,_lMotor
 10396  016712  C0BD  F07E         	movff	Motor_Move@pMotor+1,_lMotor+1
 10397                           
 10398                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 10399  016716  C0BC  FFD9         	movff	Motor_Move@pMotor,fsr2l
 10400  01671A  C0BD  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 10401  01671E  50DE               	movf	postinc2,w,c
 10402  016720  10DE               	iorwf	postinc2,w,c
 10403  016722  A4D8               	btfss	status,2,c
 10404  016724  0012               	return	
 10405                           
 10406                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 10407                           
 10408                           ;Motor.c: 59: return 0;
 10409                           ;	Return value of _Motor_Move is never used
 10410  016726  C0BC  FFD9         	movff	Motor_Move@pMotor,fsr2l
 10411  01672A  C0BD  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 10412  01672E  C0BE  FFDE         	movff	Motor_Move@pDelta,postinc2
 10413  016732  C0BF  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 10414                           
 10415                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 10416  016736  C066  F0B9         	movff	_lStepFunction,Timer0_Start@pFunction
 10417  01673A  C067  F0BA         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 10418  01673E  C068  F0BB         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 10419  016742  ECC1  F0B4         	call	_Timer0_Start	;wreg free
 10420  016746  0012               	return	
 10421  016748                     __end_of_Motor_Move:
 10422                           	opt stack 0
 10423                           tblptru	equ	0xFF8
 10424                           tblptrh	equ	0xFF7
 10425                           tblptrl	equ	0xFF6
 10426                           tablat	equ	0xFF5
 10427                           prodh	equ	0xFF4
 10428                           prodl	equ	0xFF3
 10429                           postinc0	equ	0xFEE
 10430                           wreg	equ	0xFE8
 10431                           postdec1	equ	0xFE5
 10432                           fsr1h	equ	0xFE2
 10433                           fsr1l	equ	0xFE1
 10434                           indf2	equ	0xFDF
 10435                           postinc2	equ	0xFDE
 10436                           postdec2	equ	0xFDD
 10437                           fsr2h	equ	0xFDA
 10438                           fsr2l	equ	0xFD9
 10439                           status	equ	0xFD8
 10440                           
 10441 ;; *************** function _Timer0_Start *****************
 10442 ;; Defined at:
 10443 ;;		line 75 in file "Library/Timer0.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 10446 ;;		 -> Absolute function(1), Motor_Step(1), 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;		None
 10449 ;; Return value:  Size  Location     Type
 10450 ;;                  1    wreg      void 
 10451 ;; Registers used:
 10452 ;;		wreg, status,2, status,0
 10453 ;; Tracked objects:
 10454 ;;		On entry : 0/0
 10455 ;;		On exit  : 0/0
 10456 ;;		Unchanged: 0/0
 10457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10458 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10461 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10462 ;;Total ram usage:        3 bytes
 10463 ;; Hardware stack levels used:    1
 10464 ;; Hardware stack levels required when called:    7
 10465 ;; This function calls:
 10466 ;;		Nothing
 10467 ;; This function is called by:
 10468 ;;		_Motor_Move
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           	psect	text37
 10473  016982                     __ptext37:
 10474                           	opt stack 0
 10475  016982                     _Timer0_Start:
 10476                           	opt stack 20
 10477                           
 10478                           ;Timer0.c: 77: gISR = pFunction;
 10479                           
 10480                           ;incstack = 0
 10481  016982  C0B9  F060         	movff	Timer0_Start@pFunction,_gISR
 10482  016986  C0BA  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
 10483  01698A  C0BB  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
 10484                           
 10485                           ;Timer0.c: 78: TMR0 = COUNTER;
 10486  01698E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 10487  016992  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 10488                           
 10489                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 10490  016996  50D5               	movf	4053,w,c	;volatile
 10491  016998  0100               	movlb	0	; () banked
 10492  01699A  198C               	xorwf	_INDEX& (0+255),w,b
 10493  01699C  0BF8               	andlw	-8
 10494  01699E  198C               	xorwf	_INDEX& (0+255),w,b
 10495  0169A0  6ED5               	movwf	4053,c	;volatile
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 10499  0169A2  94F2               	bcf	intcon,2,c	;volatile
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 10503  0169A4  8AF2               	bsf	intcon,5,c	;volatile
 10504                           
 10505                           ; BSR set to: 0
 10506  0169A6  0012               	return		;funcret
 10507  0169A8                     __end_of_Timer0_Start:
 10508                           	opt stack 0
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           intcon	equ	0xFF2
 10516                           postinc0	equ	0xFEE
 10517                           wreg	equ	0xFE8
 10518                           postdec1	equ	0xFE5
 10519                           fsr1h	equ	0xFE2
 10520                           fsr1l	equ	0xFE1
 10521                           indf2	equ	0xFDF
 10522                           postinc2	equ	0xFDE
 10523                           postdec2	equ	0xFDD
 10524                           fsr2h	equ	0xFDA
 10525                           fsr2l	equ	0xFD9
 10526                           status	equ	0xFD8
 10527                           
 10528 ;; *************** function _HMI_Render *****************
 10529 ;; Defined at:
 10530 ;;		line 138 in file "HMI.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;  a               2    8[BANK0 ] unsigned short 
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      void 
 10537 ;; Registers used:
 10538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;Total ram usage:        2 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    9
 10551 ;; This function calls:
 10552 ;;		_OutSeg
 10553 ;; This function is called by:
 10554 ;;		_findClosestWall
 10555 ;;		_measureAndDisplayDistance
 10556 ;;		_mode1
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text38
 10561  016564                     __ptext38:
 10562                           	opt stack 0
 10563  016564                     _HMI_Render:
 10564                           	opt stack 19
 10565                           
 10566                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;incstack = 0
 10570  016564  0E00               	movlw	0
 10571  016566  0100               	movlb	0	; () banked
 10572  016568  6FC2               	movwf	(HMI_Render@a+1)& (0+255),b
 10573  01656A  0E00               	movlw	0
 10574  01656C  6FC1               	movwf	HMI_Render@a& (0+255),b
 10575  01656E                     l14149:
 10576                           
 10577                           ; BSR set to: 0
 10578  01656E  0100               	movlb	0	; () banked
 10579  016570  51C2               	movf	(HMI_Render@a+1)& (0+255),w,b
 10580  016572  E116               	bnz	l1158
 10581  016574  0E08               	movlw	8
 10582  016576  0100               	movlb	0	; () banked
 10583  016578  5DC1               	subwf	HMI_Render@a& (0+255),w,b
 10584  01657A  B0D8               	btfsc	status,0,c
 10585  01657C  0012               	return	
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10589                           
 10590                           ; BSR set to: 0
 10591                           
 10592                           ; BSR set to: 0
 10593  01657E  C0C1  F0BC         	movff	HMI_Render@a,OutSeg@pSegment
 10594  016582  0E42               	movlw	low _HMIBoard
 10595  016584  0100               	movlb	0	; () banked
 10596  016586  25C1               	addwf	HMI_Render@a& (0+255),w,b
 10597  016588  6ED9               	movwf	fsr2l,c
 10598  01658A  0E03               	movlw	high _HMIBoard
 10599  01658C  0100               	movlb	0	; () banked
 10600  01658E  21C2               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10601  016590  6EDA               	movwf	fsr2h,c
 10602  016592  50DF               	movf	indf2,w,c
 10603  016594  EC66  F0AB         	call	_OutSeg
 10604  016598  0100               	movlb	0	; () banked
 10605  01659A  4BC1               	infsnz	HMI_Render@a& (0+255),f,b
 10606  01659C  2BC2               	incf	(HMI_Render@a+1)& (0+255),f,b
 10607  01659E  D7E7               	goto	l14149
 10608  0165A0                     l1158:
 10609                           
 10610                           ; BSR set to: 0
 10611  0165A0  0012               	return		;funcret
 10612  0165A2                     __end_of_HMI_Render:
 10613                           	opt stack 0
 10614                           tblptru	equ	0xFF8
 10615                           tblptrh	equ	0xFF7
 10616                           tblptrl	equ	0xFF6
 10617                           tablat	equ	0xFF5
 10618                           prodh	equ	0xFF4
 10619                           prodl	equ	0xFF3
 10620                           intcon	equ	0xFF2
 10621                           postinc0	equ	0xFEE
 10622                           wreg	equ	0xFE8
 10623                           postdec1	equ	0xFE5
 10624                           fsr1h	equ	0xFE2
 10625                           fsr1l	equ	0xFE1
 10626                           indf2	equ	0xFDF
 10627                           postinc2	equ	0xFDE
 10628                           postdec2	equ	0xFDD
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _OutSeg *****************
 10634 ;; Defined at:
 10635 ;;		line 54 in file "HMI.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  pInput          1    wreg     unsigned char 
 10638 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10639 ;; Auto vars:     Size  Location     Type
 10640 ;;  pInput          1    6[BANK0 ] unsigned char 
 10641 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10651 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10654 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10655 ;;Total ram usage:        5 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    8
 10658 ;; This function calls:
 10659 ;;		_SPI_Send
 10660 ;; This function is called by:
 10661 ;;		_HMI_Render
 10662 ;;		_HMI_GRender
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           	psect	text39
 10667  0156CC                     __ptext39:
 10668                           	opt stack 0
 10669  0156CC                     _OutSeg:
 10670                           	opt stack 19
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;incstack = 0
 10674                           ;OutSeg@pInput stored from wreg
 10675  0156CC  0100               	movlb	0	; () banked
 10676  0156CE  6FBF               	movwf	OutSeg@pInput& (0+255),b
 10677                           
 10678                           ;HMI.c: 58: static UINT8 cur;
 10679                           ;HMI.c: 59: volatile UINT8 out;
 10680                           ;HMI.c: 60: static UINT8 segset;
 10681                           ;HMI.c: 61: static UINT8 a;
 10682                           ;HMI.c: 83: if (pSegment <= 8)
 10683  0156D0  0E09               	movlw	9
 10684  0156D2  0100               	movlb	0	; () banked
 10685  0156D4  61BC               	cpfslt	OutSeg@pSegment& (0+255),b
 10686  0156D6  0012               	return	
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;HMI.c: 84: {
 10690                           ;HMI.c: 85: cur = pInput;
 10691  0156D8  C0BF  F03F         	movff	OutSeg@pInput,OutSeg@cur
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10695  0156DC  0E00               	movlw	0
 10696  0156DE  6E3D               	movwf	OutSeg@a,c
 10697  0156E0                     l13315:
 10698                           
 10699                           ; BSR set to: 0
 10700  0156E0  0E07               	movlw	7
 10701  0156E2  643D               	cpfsgt	OutSeg@a,c
 10702  0156E4  D001               	goto	l1146
 10703  0156E6  D027               	goto	u10040
 10704  0156E8                     l1146:
 10705                           
 10706                           ;HMI.c: 87: {
 10707                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10708                           
 10709                           ; BSR set to: 0
 10710  0156E8  C03F  F0BD         	movff	OutSeg@cur,??_OutSeg
 10711  0156EC  0E01               	movlw	1
 10712  0156EE  0100               	movlb	0	; () banked
 10713  0156F0  17BD               	andwf	??_OutSeg& (0+255),f,b
 10714  0156F2  0E06               	movlw	6
 10715  0156F4  0100               	movlb	0	; () banked
 10716  0156F6  6FBE               	movwf	(??_OutSeg+1)& (0+255),b
 10717  0156F8                     u10035:
 10718  0156F8  0100               	movlb	0	; () banked
 10719  0156FA  90D8               	bcf	status,0,c
 10720  0156FC  37BD               	rlcf	??_OutSeg& (0+255),f,b
 10721  0156FE  0100               	movlb	0	; () banked
 10722  015700  2FBE               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10723  015702  D7FA               	goto	u10035
 10724  015704  0100               	movlb	0	; () banked
 10725  015706  51BD               	movf	??_OutSeg& (0+255),w,b
 10726  015708  6E3E               	movwf	OutSeg@segset,c
 10727                           
 10728                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10729  01570A  0100               	movlb	0	; () banked
 10730  01570C  39BC               	swapf	OutSeg@pSegment& (0+255),w,b
 10731  01570E  42E8               	rrncf	wreg,f,c
 10732  015710  0BF8               	andlw	248
 10733  015712  103D               	iorwf	OutSeg@a,w,c
 10734  015714  103E               	iorwf	OutSeg@segset,w,c
 10735  015716  0100               	movlb	0	; () banked
 10736  015718  6FC0               	movwf	OutSeg@out& (0+255),b	;volatile
 10737                           
 10738                           ;HMI.c: 90: cur >>= 1;
 10739  01571A  90D8               	bcf	status,0,c
 10740  01571C  323F               	rrcf	OutSeg@cur,f,c
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10744  01571E  0E7C               	movlw	low _SPI1
 10745  015720  0100               	movlb	0	; () banked
 10746  015722  6FB9               	movwf	SPI_Send@pInput& (0+255),b
 10747  015724  0E03               	movlw	high _SPI1
 10748  015726  0100               	movlb	0	; () banked
 10749  015728  6FBA               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10750  01572A  C0C0  F0BB         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10751  01572E  ECB9  F0AD         	call	_SPI_Send	;wreg free
 10752  015732  2A3D               	incf	OutSeg@a,f,c
 10753  015734  D7D5               	goto	l13315
 10754  015736                     u10040:
 10755                           
 10756                           ;HMI.c: 96: }
 10757                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10758  015736  0E7C               	movlw	low _SPI1
 10759  015738  0100               	movlb	0	; () banked
 10760  01573A  6FB9               	movwf	SPI_Send@pInput& (0+255),b
 10761  01573C  0E03               	movlw	high _SPI1
 10762  01573E  0100               	movlb	0	; () banked
 10763  015740  6FBA               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10764  015742  0E00               	movlw	0
 10765  015744  0100               	movlb	0	; () banked
 10766  015746  6FBB               	movwf	SPI_Send@pData& (0+255),b
 10767  015748  ECB9  F0AD         	call	_SPI_Send	;wreg free
 10768  01574C  0012               	return	
 10769  01574E                     __end_of_OutSeg:
 10770                           	opt stack 0
 10771                           tblptru	equ	0xFF8
 10772                           tblptrh	equ	0xFF7
 10773                           tblptrl	equ	0xFF6
 10774                           tablat	equ	0xFF5
 10775                           prodh	equ	0xFF4
 10776                           prodl	equ	0xFF3
 10777                           intcon	equ	0xFF2
 10778                           postinc0	equ	0xFEE
 10779                           wreg	equ	0xFE8
 10780                           postdec1	equ	0xFE5
 10781                           fsr1h	equ	0xFE2
 10782                           fsr1l	equ	0xFE1
 10783                           indf2	equ	0xFDF
 10784                           postinc2	equ	0xFDE
 10785                           postdec2	equ	0xFDD
 10786                           fsr2h	equ	0xFDA
 10787                           fsr2l	equ	0xFD9
 10788                           status	equ	0xFD8
 10789                           
 10790 ;; *************** function _Console_Render *****************
 10791 ;; Defined at:
 10792 ;;		line 377 in file "Library/Console.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;  lCursor         4   38[BANK0 ] struct Point
 10797 ;;  y               1   43[BANK0 ] unsigned char 
 10798 ;;  x               1   42[BANK0 ] unsigned char 
 10799 ;;  temp            1   37[BANK0 ] unsigned char 
 10800 ;;  Temp            2    0        unsigned short 
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  1    wreg      void 
 10803 ;; Registers used:
 10804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10811 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10813 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10814 ;;Total ram usage:        9 bytes
 10815 ;; Hardware stack levels used:    1
 10816 ;; Hardware stack levels required when called:   11
 10817 ;; This function calls:
 10818 ;;		_Console_MakeField
 10819 ;;		_LCD_DrawField
 10820 ;;		_LCD_FillRectangle
 10821 ;; This function is called by:
 10822 ;;		_move_and_rotate
 10823 ;;		_findClosestWall
 10824 ;;		_mode1
 10825 ;;		_mode2
 10826 ;;		_mode4
 10827 ;;		_main
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text40
 10832  0123CA                     __ptext40:
 10833                           	opt stack 0
 10834  0123CA                     _Console_Render:
 10835                           	opt stack 17
 10836                           
 10837                           ;Console.c: 379: Colour Temp;
 10838                           ;Console.c: 380: if (change)
 10839                           
 10840                           ;incstack = 0
 10841  0123CA  0100               	movlb	0	; () banked
 10842  0123CC  51FF               	movf	_change& (0+255),w,b
 10843  0123CE  B4D8               	btfsc	status,2,c
 10844  0123D0  0012               	return	
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;Console.c: 381: {
 10848                           ;Console.c: 382: UINT8 x, y, temp;
 10849                           ;Console.c: 383: Point lCursor = {6,6};
 10850  0123D2  C3EC  F0DF         	movff	Console_Render@F6956,Console_Render@lCursor
 10851  0123D6  C3ED  F0E0         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10852  0123DA  C3EE  F0E1         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10853  0123DE  C3EF  F0E2         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;Console.c: 385: if (clearall)
 10857  0123E2  0100               	movlb	0	; () banked
 10858  0123E4  518F               	movf	_clearall& (0+255),w,b
 10859  0123E6  B4D8               	btfsc	status,2,c
 10860  0123E8  D005               	goto	l1056
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;Console.c: 386: {
 10864                           ;Console.c: 389: temp = lBufferY;
 10865  0123EA  C08D  F0DE         	movff	_lBufferY,Console_Render@temp
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10869  0123EE  0E0F               	movlw	15
 10870  0123F0  0100               	movlb	0	; () banked
 10871  0123F2  6F8D               	movwf	_lBufferY& (0+255),b
 10872  0123F4                     l1056:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;Console.c: 391: }
 10876                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10877  0123F4  0E00               	movlw	0
 10878  0123F6  0100               	movlb	0	; () banked
 10879  0123F8  6FE4               	movwf	Console_Render@y& (0+255),b
 10880  0123FA  D0DF               	goto	l1057
 10881  0123FC                     
 10882                           ; BSR set to: 0
 10883                           ;Console.c: 394: {
 10884                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10885                           
 10886                           ; BSR set to: 0
 10887  0123FC  0100               	movlb	0	; () banked
 10888  0123FE  51E4               	movf	Console_Render@y& (0+255),w,b
 10889  012400  0D02               	mullw	2
 10890  012402  0E00               	movlw	low _lCBuffer
 10891  012404  24F3               	addwf	prodl,w,c
 10892  012406  6ED9               	movwf	fsr2l,c
 10893  012408  0E03               	movlw	high _lCBuffer
 10894  01240A  20F4               	addwfc	prodh,w,c
 10895  01240C  6EDA               	movwf	fsr2h,c
 10896  01240E  CFDE F0FD          	movff	postinc2,_gForecolour
 10897  012412  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10901  012416  0E00               	movlw	0
 10902  012418  0100               	movlb	0	; () banked
 10903  01241A  6FE3               	movwf	Console_Render@x& (0+255),b
 10904  01241C                     l14451:
 10905                           
 10906                           ; BSR set to: 0
 10907  01241C  0E13               	movlw	19
 10908  01241E  0100               	movlb	0	; () banked
 10909  012420  65E3               	cpfsgt	Console_Render@x& (0+255),b
 10910  012422  D001               	goto	l1059
 10911  012424  D0BE               	goto	u11320
 10912  012426                     l1059:
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;Console.c: 397: {
 10916                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10917                           
 10918                           ; BSR set to: 0
 10919  012426  0100               	movlb	0	; () banked
 10920  012428  51E4               	movf	Console_Render@y& (0+255),w,b
 10921  01242A  0D14               	mullw	20
 10922  01242C  0EB2               	movlw	low _lBuffer
 10923  01242E  0100               	movlb	0	; () banked
 10924  012430  6FDC               	movwf	??_Console_Render& (0+255),b
 10925  012432  0E04               	movlw	high _lBuffer
 10926  012434  0100               	movlb	0	; () banked
 10927  012436  6FDD               	movwf	(??_Console_Render+1)& (0+255),b
 10928  012438  50F3               	movf	prodl,w,c
 10929  01243A  0100               	movlb	0	; () banked
 10930  01243C  27DC               	addwf	??_Console_Render& (0+255),f,b
 10931  01243E  50F4               	movf	prodh,w,c
 10932  012440  0100               	movlb	0	; () banked
 10933  012442  23DD               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10934  012444  0100               	movlb	0	; () banked
 10935  012446  51E3               	movf	Console_Render@x& (0+255),w,b
 10936  012448  0D01               	mullw	1
 10937  01244A  50F3               	movf	prodl,w,c
 10938  01244C  0100               	movlb	0	; () banked
 10939  01244E  25DC               	addwf	??_Console_Render& (0+255),w,b
 10940  012450  6ED9               	movwf	fsr2l,c
 10941  012452  50F4               	movf	prodh,w,c
 10942  012454  0100               	movlb	0	; () banked
 10943  012456  21DD               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10944  012458  6EDA               	movwf	fsr2h,c
 10945  01245A  AEDF               	btfss	indf2,7,c
 10946  01245C  D09A               	goto	l1063
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;Console.c: 399: {
 10950                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10951  01245E  0100               	movlb	0	; () banked
 10952  012460  51E4               	movf	Console_Render@y& (0+255),w,b
 10953  012462  0D14               	mullw	20
 10954  012464  0EB2               	movlw	low _lBuffer
 10955  012466  0100               	movlb	0	; () banked
 10956  012468  6FDC               	movwf	??_Console_Render& (0+255),b
 10957  01246A  0E04               	movlw	high _lBuffer
 10958  01246C  0100               	movlb	0	; () banked
 10959  01246E  6FDD               	movwf	(??_Console_Render+1)& (0+255),b
 10960  012470  50F3               	movf	prodl,w,c
 10961  012472  0100               	movlb	0	; () banked
 10962  012474  27DC               	addwf	??_Console_Render& (0+255),f,b
 10963  012476  50F4               	movf	prodh,w,c
 10964  012478  0100               	movlb	0	; () banked
 10965  01247A  23DD               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10966  01247C  0100               	movlb	0	; () banked
 10967  01247E  51E3               	movf	Console_Render@x& (0+255),w,b
 10968  012480  0D01               	mullw	1
 10969  012482  50F3               	movf	prodl,w,c
 10970  012484  0100               	movlb	0	; () banked
 10971  012486  25DC               	addwf	??_Console_Render& (0+255),w,b
 10972  012488  6ED9               	movwf	fsr2l,c
 10973  01248A  50F4               	movf	prodh,w,c
 10974  01248C  0100               	movlb	0	; () banked
 10975  01248E  21DD               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10976  012490  6EDA               	movwf	fsr2h,c
 10977  012492  0E7F               	movlw	127
 10978  012494  16DF               	andwf	indf2,f,c
 10979                           
 10980                           ;Console.c: 401: if (lBuffer[y][x])
 10981  012496  0100               	movlb	0	; () banked
 10982  012498  51E4               	movf	Console_Render@y& (0+255),w,b
 10983  01249A  0D14               	mullw	20
 10984  01249C  0EB2               	movlw	low _lBuffer
 10985  01249E  0100               	movlb	0	; () banked
 10986  0124A0  6FDC               	movwf	??_Console_Render& (0+255),b
 10987  0124A2  0E04               	movlw	high _lBuffer
 10988  0124A4  0100               	movlb	0	; () banked
 10989  0124A6  6FDD               	movwf	(??_Console_Render+1)& (0+255),b
 10990  0124A8  50F3               	movf	prodl,w,c
 10991  0124AA  0100               	movlb	0	; () banked
 10992  0124AC  27DC               	addwf	??_Console_Render& (0+255),f,b
 10993  0124AE  50F4               	movf	prodh,w,c
 10994  0124B0  0100               	movlb	0	; () banked
 10995  0124B2  23DD               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10996  0124B4  0100               	movlb	0	; () banked
 10997  0124B6  51E3               	movf	Console_Render@x& (0+255),w,b
 10998  0124B8  0D01               	mullw	1
 10999  0124BA  50F3               	movf	prodl,w,c
 11000  0124BC  0100               	movlb	0	; () banked
 11001  0124BE  25DC               	addwf	??_Console_Render& (0+255),w,b
 11002  0124C0  6ED9               	movwf	fsr2l,c
 11003  0124C2  50F4               	movf	prodh,w,c
 11004  0124C4  0100               	movlb	0	; () banked
 11005  0124C6  21DD               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11006  0124C8  6EDA               	movwf	fsr2h,c
 11007  0124CA  50DF               	movf	indf2,w,c
 11008  0124CC  B4D8               	btfsc	status,2,c
 11009  0124CE  D04A               	goto	l1062
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;Console.c: 402: {
 11013                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 11014  0124D0  C081  F0C2         	movff	_gBackcolour,LCD_FillRectangle@pColour
 11015  0124D4  C082  F0C3         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 11016  0124D8  C0DF  F0C4         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11017  0124DC  C0E0  F0C5         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11018  0124E0  C0E1  F0C6         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11019  0124E4  C0E2  F0C7         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11020  0124E8  C3F4  F0C8         	movff	_gCharSize,LCD_FillRectangle@pSize
 11021  0124EC  C3F5  F0C9         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11022  0124F0  C3F6  F0CA         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11023  0124F4  C3F7  F0CB         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11024  0124F8  EC99  F0AC         	call	_LCD_FillRectangle	;wreg free
 11025                           
 11026                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 11027  0124FC  0100               	movlb	0	; () banked
 11028  0124FE  51E4               	movf	Console_Render@y& (0+255),w,b
 11029  012500  0D14               	mullw	20
 11030  012502  0EB2               	movlw	low _lBuffer
 11031  012504  0100               	movlb	0	; () banked
 11032  012506  6FDC               	movwf	??_Console_Render& (0+255),b
 11033  012508  0E04               	movlw	high _lBuffer
 11034  01250A  0100               	movlb	0	; () banked
 11035  01250C  6FDD               	movwf	(??_Console_Render+1)& (0+255),b
 11036  01250E  50F3               	movf	prodl,w,c
 11037  012510  0100               	movlb	0	; () banked
 11038  012512  27DC               	addwf	??_Console_Render& (0+255),f,b
 11039  012514  50F4               	movf	prodh,w,c
 11040  012516  0100               	movlb	0	; () banked
 11041  012518  23DD               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11042  01251A  0100               	movlb	0	; () banked
 11043  01251C  51E3               	movf	Console_Render@x& (0+255),w,b
 11044  01251E  0D01               	mullw	1
 11045  012520  50F3               	movf	prodl,w,c
 11046  012522  0100               	movlb	0	; () banked
 11047  012524  25DC               	addwf	??_Console_Render& (0+255),w,b
 11048  012526  6ED9               	movwf	fsr2l,c
 11049  012528  50F4               	movf	prodh,w,c
 11050  01252A  0100               	movlb	0	; () banked
 11051  01252C  21DD               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11052  01252E  6EDA               	movwf	fsr2h,c
 11053  012530  50DF               	movf	indf2,w,c
 11054  012532  EC94  F0A2         	call	_Console_MakeField
 11055  012536  C0BE  F0CB         	movff	?_Console_MakeField,LCD_DrawField@pField
 11056  01253A  C0BF  F0CC         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 11057  01253E  C0DF  F0CD         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 11058  012542  C0E0  F0CE         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 11059  012546  C0E1  F0CF         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 11060  01254A  C0E2  F0D0         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 11061  01254E  C3F4  F0D1         	movff	_gCharSize,LCD_DrawField@pSize
 11062  012552  C3F5  F0D2         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 11063  012556  C3F6  F0D3         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 11064  01255A  C3F7  F0D4         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 11065  01255E  EC39  F0A8         	call	_LCD_DrawField	;wreg free
 11066                           
 11067                           ;Console.c: 405: }
 11068  012562  D017               	goto	l1063
 11069  012564                     l1062:
 11070                           
 11071                           ;Console.c: 406: else
 11072                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 11073  012564  0E00               	movlw	0
 11074  012566  0100               	movlb	0	; () banked
 11075  012568  6FC3               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 11076  01256A  0E00               	movlw	0
 11077  01256C  6FC2               	movwf	LCD_FillRectangle@pColour& (0+255),b
 11078  01256E  C0DF  F0C4         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11079  012572  C0E0  F0C5         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11080  012576  C0E1  F0C6         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11081  01257A  C0E2  F0C7         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11082  01257E  C3F4  F0C8         	movff	_gCharSize,LCD_FillRectangle@pSize
 11083  012582  C3F5  F0C9         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11084  012586  C3F6  F0CA         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11085  01258A  C3F7  F0CB         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11086  01258E  EC99  F0AC         	call	_LCD_FillRectangle	;wreg free
 11087  012592                     l1063:
 11088                           
 11089                           ;Console.c: 408: }
 11090                           ;Console.c: 409: lCursor.x += (5 + 1);
 11091  012592  0E06               	movlw	6
 11092  012594  0100               	movlb	0	; () banked
 11093  012596  27DF               	addwf	Console_Render@lCursor& (0+255),f,b
 11094  012598  0E00               	movlw	0
 11095  01259A  23E0               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 11096                           
 11097                           ; BSR set to: 0
 11098  01259C  0100               	movlb	0	; () banked
 11099  01259E  2BE3               	incf	Console_Render@x& (0+255),f,b
 11100  0125A0  D73D               	goto	l14451
 11101  0125A2                     u11320:
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;Console.c: 410: }
 11105                           ;Console.c: 411: lCursor.y += (7 + 1);
 11106                           
 11107                           ; BSR set to: 0
 11108  0125A2  0E08               	movlw	8
 11109  0125A4  0100               	movlb	0	; () banked
 11110  0125A6  27E1               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 11111  0125A8  0E00               	movlw	0
 11112  0125AA  23E2               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;Console.c: 412: lCursor.x = 6;
 11116  0125AC  0E00               	movlw	0
 11117  0125AE  0100               	movlb	0	; () banked
 11118  0125B0  6FE0               	movwf	(Console_Render@lCursor+1)& (0+255),b
 11119  0125B2  0E06               	movlw	6
 11120  0125B4  6FDF               	movwf	Console_Render@lCursor& (0+255),b
 11121                           
 11122                           ; BSR set to: 0
 11123  0125B6  0100               	movlb	0	; () banked
 11124  0125B8  2BE4               	incf	Console_Render@y& (0+255),f,b
 11125  0125BA                     l1057:
 11126                           
 11127                           ; BSR set to: 0
 11128                           
 11129                           ; BSR set to: 0
 11130  0125BA  0100               	movlb	0	; () banked
 11131  0125BC  51E4               	movf	Console_Render@y& (0+255),w,b
 11132  0125BE  0100               	movlb	0	; () banked
 11133  0125C0  5D8D               	subwf	_lBufferY& (0+255),w,b
 11134  0125C2  B0D8               	btfsc	status,0,c
 11135  0125C4  D71B               	goto	l1058
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;Console.c: 413: }
 11139                           ;Console.c: 415: if (clearall)
 11140                           
 11141                           ; BSR set to: 0
 11142  0125C6  0100               	movlb	0	; () banked
 11143  0125C8  518F               	movf	_clearall& (0+255),w,b
 11144  0125CA  B4D8               	btfsc	status,2,c
 11145  0125CC  0012               	return	
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;Console.c: 416: {
 11149                           ;Console.c: 417: clearall = 0;
 11150  0125CE  0E00               	movlw	0
 11151  0125D0  0100               	movlb	0	; () banked
 11152  0125D2  6F8F               	movwf	_clearall& (0+255),b
 11153                           
 11154                           ; BSR set to: 0
 11155                           ;Console.c: 418: lBufferY = temp;
 11156  0125D4  C0DE  F08D         	movff	Console_Render@temp,_lBufferY
 11157                           
 11158                           ; BSR set to: 0
 11159  0125D8  0012               	return	
 11160  0125DA                     __end_of_Console_Render:
 11161                           	opt stack 0
 11162                           tblptru	equ	0xFF8
 11163                           tblptrh	equ	0xFF7
 11164                           tblptrl	equ	0xFF6
 11165                           tablat	equ	0xFF5
 11166                           prodh	equ	0xFF4
 11167                           prodl	equ	0xFF3
 11168                           intcon	equ	0xFF2
 11169                           postinc0	equ	0xFEE
 11170                           wreg	equ	0xFE8
 11171                           postdec1	equ	0xFE5
 11172                           fsr1h	equ	0xFE2
 11173                           fsr1l	equ	0xFE1
 11174                           indf2	equ	0xFDF
 11175                           postinc2	equ	0xFDE
 11176                           postdec2	equ	0xFDD
 11177                           fsr2h	equ	0xFDA
 11178                           fsr2l	equ	0xFD9
 11179                           status	equ	0xFD8
 11180                           
 11181 ;; *************** function _LCD_FillRectangle *****************
 11182 ;; Defined at:
 11183 ;;		line 318 in file "Library/LCD.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;  pColour         2    9[BANK0 ] unsigned short 
 11186 ;;  pPoint          4   11[BANK0 ] struct Point
 11187 ;;  pSize           4   15[BANK0 ] struct Point
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;  j               1   22[BANK0 ] unsigned char 
 11190 ;;  i               1   21[BANK0 ] unsigned char 
 11191 ;; Return value:  Size  Location     Type
 11192 ;;                  1    wreg      void 
 11193 ;; Registers used:
 11194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11195 ;; Tracked objects:
 11196 ;;		On entry : 0/0
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11200 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11202 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11203 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;Total ram usage:       14 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:   10
 11207 ;; This function calls:
 11208 ;;		_LCD_Word_Write
 11209 ;;		_Set_Addr_Window
 11210 ;; This function is called by:
 11211 ;;		_Console_Render
 11212 ;;		_Console_ClearLine
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text41
 11217  015932                     __ptext41:
 11218                           	opt stack 0
 11219  015932                     _LCD_FillRectangle:
 11220                           	opt stack 17
 11221                           
 11222                           ;LCD.c: 320: UINT8 i = 0x00;
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;incstack = 0
 11226  015932  0E00               	movlw	0
 11227  015934  0100               	movlb	0	; () banked
 11228  015936  6FCE               	movwf	LCD_FillRectangle@i& (0+255),b
 11229                           
 11230                           ;LCD.c: 321: UINT8 j = 0x00;
 11231  015938  0E00               	movlw	0
 11232  01593A  0100               	movlb	0	; () banked
 11233  01593C  6FCF               	movwf	LCD_FillRectangle@j& (0+255),b
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 11237  01593E  C0C6  F0BE         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 11238  015942  0100               	movlb	0	; () banked
 11239  015944  51C4               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11240  015946  0100               	movlb	0	; () banked
 11241  015948  25C8               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 11242  01594A  0100               	movlb	0	; () banked
 11243  01594C  6FCC               	movwf	??_LCD_FillRectangle& (0+255),b
 11244  01594E  0100               	movlb	0	; () banked
 11245  015950  05CC               	decf	??_LCD_FillRectangle& (0+255),w,b
 11246  015952  0100               	movlb	0	; () banked
 11247  015954  6FBF               	movwf	Set_Addr_Window@xe& (0+255),b
 11248  015956  0100               	movlb	0	; () banked
 11249  015958  51C6               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 11250  01595A  0100               	movlb	0	; () banked
 11251  01595C  25CA               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 11252  01595E  0100               	movlb	0	; () banked
 11253  015960  6FCD               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 11254  015962  0100               	movlb	0	; () banked
 11255  015964  05CD               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 11256  015966  0100               	movlb	0	; () banked
 11257  015968  6FC0               	movwf	Set_Addr_Window@ye& (0+255),b
 11258  01596A  0100               	movlb	0	; () banked
 11259  01596C  51C4               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11260  01596E  EC43  F0A6         	call	_Set_Addr_Window
 11261                           
 11262                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 11263  015972  C0CA  F0CF         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 11264  015976                     l13889:
 11265  015976  0100               	movlb	0	; () banked
 11266  015978  51CF               	movf	LCD_FillRectangle@j& (0+255),w,b
 11267  01597A  0100               	movlb	0	; () banked
 11268  01597C  B4D8               	btfsc	status,2,c
 11269  01597E  0012               	return	
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 11273                           
 11274                           ; BSR set to: 0
 11275  015980  C0C8  F0CE         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 11276  015984                     l13893:
 11277                           
 11278                           ; BSR set to: 0
 11279  015984  0100               	movlb	0	; () banked
 11280  015986  51CE               	movf	LCD_FillRectangle@i& (0+255),w,b
 11281  015988  0100               	movlb	0	; () banked
 11282  01598A  B4D8               	btfsc	status,2,c
 11283  01598C  D009               	goto	u10760
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;LCD.c: 333: LCD_Word_Write(pColour);
 11287                           
 11288                           ; BSR set to: 0
 11289                           
 11290                           ; BSR set to: 0
 11291  01598E  C0C2  F0BE         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 11292  015992  C0C3  F0BF         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 11293  015996  EC35  F0B5         	call	_LCD_Word_Write	;wreg free
 11294  01599A  0100               	movlb	0	; () banked
 11295  01599C  07CE               	decf	LCD_FillRectangle@i& (0+255),f,b
 11296  01599E  D7F2               	goto	l13893
 11297  0159A0                     u10760:
 11298                           
 11299                           ; BSR set to: 0
 11300                           
 11301                           ; BSR set to: 0
 11302  0159A0  0100               	movlb	0	; () banked
 11303  0159A2  07CF               	decf	LCD_FillRectangle@j& (0+255),f,b
 11304  0159A4  D7E8               	goto	l13889
 11305  0159A6                     __end_of_LCD_FillRectangle:
 11306                           	opt stack 0
 11307                           tblptru	equ	0xFF8
 11308                           tblptrh	equ	0xFF7
 11309                           tblptrl	equ	0xFF6
 11310                           tablat	equ	0xFF5
 11311                           prodh	equ	0xFF4
 11312                           prodl	equ	0xFF3
 11313                           intcon	equ	0xFF2
 11314                           postinc0	equ	0xFEE
 11315                           wreg	equ	0xFE8
 11316                           postdec1	equ	0xFE5
 11317                           fsr1h	equ	0xFE2
 11318                           fsr1l	equ	0xFE1
 11319                           indf2	equ	0xFDF
 11320                           postinc2	equ	0xFDE
 11321                           postdec2	equ	0xFDD
 11322                           fsr2h	equ	0xFDA
 11323                           fsr2l	equ	0xFD9
 11324                           status	equ	0xFD8
 11325                           
 11326 ;; *************** function _LCD_DrawField *****************
 11327 ;; Defined at:
 11328 ;;		line 393 in file "Library/LCD.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 11331 ;;		 -> Console_MakeField@Fill(70), 
 11332 ;;  pPoint          4   20[BANK0 ] struct Point
 11333 ;;  pSize           4   24[BANK0 ] struct Point
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;  count           2   30[BANK0 ] unsigned short 
 11336 ;;  i               1   34[BANK0 ] unsigned char 
 11337 ;;  ymax            1   33[BANK0 ] unsigned char 
 11338 ;;  xmax            1   32[BANK0 ] unsigned char 
 11339 ;; Return value:  Size  Location     Type
 11340 ;;                  1    wreg      void 
 11341 ;; Registers used:
 11342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11343 ;; Tracked objects:
 11344 ;;		On entry : 0/0
 11345 ;;		On exit  : 0/0
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11348 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;Total ram usage:       17 bytes
 11353 ;; Hardware stack levels used:    1
 11354 ;; Hardware stack levels required when called:   10
 11355 ;; This function calls:
 11356 ;;		_LCD_Word_Write
 11357 ;;		_Set_Addr_Window
 11358 ;;		___wmul
 11359 ;; This function is called by:
 11360 ;;		_Console_Render
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           	psect	text42
 11365  015072                     __ptext42:
 11366                           	opt stack 0
 11367  015072                     _LCD_DrawField:
 11368                           	opt stack 17
 11369                           
 11370                           ;LCD.c: 396: UINT8 i = 0x00;
 11371                           
 11372                           ; BSR set to: 0
 11373                           ;incstack = 0
 11374  015072  0E00               	movlw	0
 11375  015074  0100               	movlb	0	; () banked
 11376  015076  6FDB               	movwf	LCD_DrawField@i& (0+255),b
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 11380  015078  0100               	movlb	0	; () banked
 11381  01507A  51CD               	movf	LCD_DrawField@pPoint& (0+255),w,b
 11382  01507C  0100               	movlb	0	; () banked
 11383  01507E  25D1               	addwf	LCD_DrawField@pSize& (0+255),w,b
 11384  015080  0100               	movlb	0	; () banked
 11385  015082  6FD9               	movwf	LCD_DrawField@xmax& (0+255),b
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 11389  015084  0100               	movlb	0	; () banked
 11390  015086  51CF               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 11391  015088  0100               	movlb	0	; () banked
 11392  01508A  25D3               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 11393  01508C  0100               	movlb	0	; () banked
 11394  01508E  6FDA               	movwf	LCD_DrawField@ymax& (0+255),b
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 11398  015090  C0D3  F0B9         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 11399  015094  C0D4  F0BA         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 11400  015098  C0D1  F0BB         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 11401  01509C  C0D2  F0BC         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 11402  0150A0  ECA4  F0B3         	call	___wmul	;wreg free
 11403  0150A4  C0B9  F0D7         	movff	?___wmul,LCD_DrawField@count
 11404  0150A8  C0BA  F0D8         	movff	?___wmul+1,LCD_DrawField@count+1
 11405                           
 11406                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 11407  0150AC  C0CF  F0BE         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 11408  0150B0  0100               	movlb	0	; () banked
 11409  0150B2  05D9               	decf	LCD_DrawField@xmax& (0+255),w,b
 11410  0150B4  0100               	movlb	0	; () banked
 11411  0150B6  6FBF               	movwf	Set_Addr_Window@xe& (0+255),b
 11412  0150B8  0100               	movlb	0	; () banked
 11413  0150BA  05DA               	decf	LCD_DrawField@ymax& (0+255),w,b
 11414  0150BC  0100               	movlb	0	; () banked
 11415  0150BE  6FC0               	movwf	Set_Addr_Window@ye& (0+255),b
 11416  0150C0  0100               	movlb	0	; () banked
 11417  0150C2  51CD               	movf	LCD_DrawField@pPoint& (0+255),w,b
 11418  0150C4  EC43  F0A6         	call	_Set_Addr_Window
 11419                           
 11420                           ;LCD.c: 403: for(i = 0; i < count; i++)
 11421  0150C8  0E00               	movlw	0
 11422  0150CA  0100               	movlb	0	; () banked
 11423  0150CC  6FDB               	movwf	LCD_DrawField@i& (0+255),b
 11424  0150CE  D013               	goto	l183
 11425  0150D0                     
 11426                           ; BSR set to: 0
 11427                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 11428                           
 11429                           ; BSR set to: 0
 11430  0150D0  0100               	movlb	0	; () banked
 11431  0150D2  51DB               	movf	LCD_DrawField@i& (0+255),w,b
 11432  0150D4  0D02               	mullw	2
 11433  0150D6  50F3               	movf	prodl,w,c
 11434  0150D8  0100               	movlb	0	; () banked
 11435  0150DA  25CB               	addwf	LCD_DrawField@pField& (0+255),w,b
 11436  0150DC  6ED9               	movwf	fsr2l,c
 11437  0150DE  50F4               	movf	prodh,w,c
 11438  0150E0  0100               	movlb	0	; () banked
 11439  0150E2  21CC               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 11440  0150E4  6EDA               	movwf	fsr2h,c
 11441  0150E6  CFDE F0BE          	movff	postinc2,LCD_Word_Write@value
 11442  0150EA  CFDD F0BF          	movff	postdec2,LCD_Word_Write@value+1
 11443  0150EE  EC35  F0B5         	call	_LCD_Word_Write	;wreg free
 11444  0150F2  0100               	movlb	0	; () banked
 11445  0150F4  2BDB               	incf	LCD_DrawField@i& (0+255),f,b
 11446  0150F6                     l183:
 11447                           
 11448                           ; BSR set to: 0
 11449                           
 11450                           ; BSR set to: 0
 11451  0150F6  0100               	movlb	0	; () banked
 11452  0150F8  51DB               	movf	LCD_DrawField@i& (0+255),w,b
 11453  0150FA  0100               	movlb	0	; () banked
 11454  0150FC  6FD5               	movwf	??_LCD_DrawField& (0+255),b
 11455  0150FE  6BD6               	clrf	(??_LCD_DrawField+1)& (0+255),b
 11456  015100  0100               	movlb	0	; () banked
 11457  015102  51D7               	movf	LCD_DrawField@count& (0+255),w,b
 11458  015104  0100               	movlb	0	; () banked
 11459  015106  5DD5               	subwf	??_LCD_DrawField& (0+255),w,b
 11460  015108  0100               	movlb	0	; () banked
 11461  01510A  51D8               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 11462  01510C  0100               	movlb	0	; () banked
 11463  01510E  59D6               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 11464  015110  B0D8               	btfsc	status,0,c
 11465  015112  0012               	return	
 11466  015114  D7DD               	goto	l184
 11467  015116                     __end_of_LCD_DrawField:
 11468                           	opt stack 0
 11469                           tblptru	equ	0xFF8
 11470                           tblptrh	equ	0xFF7
 11471                           tblptrl	equ	0xFF6
 11472                           tablat	equ	0xFF5
 11473                           prodh	equ	0xFF4
 11474                           prodl	equ	0xFF3
 11475                           intcon	equ	0xFF2
 11476                           postinc0	equ	0xFEE
 11477                           wreg	equ	0xFE8
 11478                           postdec1	equ	0xFE5
 11479                           fsr1h	equ	0xFE2
 11480                           fsr1l	equ	0xFE1
 11481                           indf2	equ	0xFDF
 11482                           postinc2	equ	0xFDE
 11483                           postdec2	equ	0xFDD
 11484                           fsr2h	equ	0xFDA
 11485                           fsr2l	equ	0xFD9
 11486                           status	equ	0xFD8
 11487                           
 11488 ;; *************** function ___wmul *****************
 11489 ;; Defined at:
 11490 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11493 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;  product         2    4[BANK0 ] unsigned int 
 11496 ;; Return value:  Size  Location     Type
 11497 ;;                  2    0[BANK0 ] unsigned int 
 11498 ;; Registers used:
 11499 ;;		wreg, status,2, status,0, prodl, prodh
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11508 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11509 ;;Total ram usage:        6 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; Hardware stack levels required when called:    7
 11512 ;; This function calls:
 11513 ;;		Nothing
 11514 ;; This function is called by:
 11515 ;;		_LCD_DrawField
 11516 ;;		_move_and_rotate
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           	psect	text43
 11521  016748                     __ptext43:
 11522                           	opt stack 0
 11523  016748                     ___wmul:
 11524                           	opt stack 19
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;incstack = 0
 11528  016748  0100               	movlb	0	; () banked
 11529  01674A  51B9               	movf	___wmul@multiplier& (0+255),w,b
 11530  01674C  0100               	movlb	0	; () banked
 11531  01674E  03BB               	mulwf	___wmul@multiplicand& (0+255),b
 11532  016750  CFF3 F0BD          	movff	prodl,___wmul@product
 11533  016754  CFF4 F0BE          	movff	prodh,___wmul@product+1
 11534  016758  0100               	movlb	0	; () banked
 11535  01675A  51B9               	movf	___wmul@multiplier& (0+255),w,b
 11536  01675C  0100               	movlb	0	; () banked
 11537  01675E  03BC               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11538  016760  50F3               	movf	prodl,w,c
 11539  016762  0100               	movlb	0	; () banked
 11540  016764  27BE               	addwf	(___wmul@product+1)& (0+255),f,b
 11541  016766  0100               	movlb	0	; () banked
 11542  016768  51BA               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11543  01676A  0100               	movlb	0	; () banked
 11544  01676C  03BB               	mulwf	___wmul@multiplicand& (0+255),b
 11545  01676E  50F3               	movf	prodl,w,c
 11546  016770  0100               	movlb	0	; () banked
 11547  016772  27BE               	addwf	(___wmul@product+1)& (0+255),f,b
 11548                           
 11549                           ; BSR set to: 0
 11550  016774  C0BD  F0B9         	movff	___wmul@product,?___wmul
 11551  016778  C0BE  F0BA         	movff	___wmul@product+1,?___wmul+1
 11552  01677C  0012               	return	
 11553  01677E                     __end_of___wmul:
 11554                           	opt stack 0
 11555                           tblptru	equ	0xFF8
 11556                           tblptrh	equ	0xFF7
 11557                           tblptrl	equ	0xFF6
 11558                           tablat	equ	0xFF5
 11559                           prodh	equ	0xFF4
 11560                           prodl	equ	0xFF3
 11561                           intcon	equ	0xFF2
 11562                           postinc0	equ	0xFEE
 11563                           wreg	equ	0xFE8
 11564                           postdec1	equ	0xFE5
 11565                           fsr1h	equ	0xFE2
 11566                           fsr1l	equ	0xFE1
 11567                           indf2	equ	0xFDF
 11568                           postinc2	equ	0xFDE
 11569                           postdec2	equ	0xFDD
 11570                           fsr2h	equ	0xFDA
 11571                           fsr2l	equ	0xFD9
 11572                           status	equ	0xFD8
 11573                           
 11574 ;; *************** function _Console_MakeField *****************
 11575 ;; Defined at:
 11576 ;;		line 435 in file "Library/Console.c"
 11577 ;; Parameters:    Size  Location     Type
 11578 ;;  pInput          1    wreg     unsigned char 
 11579 ;; Auto vars:     Size  Location     Type
 11580 ;;  pInput          1   11[BANK0 ] unsigned char 
 11581 ;;  y               1   17[BANK0 ] unsigned char 
 11582 ;;  x               1   16[BANK0 ] unsigned char 
 11583 ;;  Column          2   12[BANK0 ] PTR struct Byte
 11584 ;;		 -> Font5x7(480), 
 11585 ;;  Index           2    9[BANK0 ] unsigned short 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  2    5[BANK0 ] PTR unsigned short 
 11588 ;; Registers used:
 11589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;Total ram usage:       13 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    8
 11602 ;; This function calls:
 11603 ;;		_Byte_GetBit
 11604 ;; This function is called by:
 11605 ;;		_Console_Render
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           	psect	text44
 11610  014528                     __ptext44:
 11611                           	opt stack 0
 11612  014528                     _Console_MakeField:
 11613                           	opt stack 19
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;incstack = 0
 11617                           ;Console_MakeField@pInput stored from wreg
 11618  014528  0100               	movlb	0	; () banked
 11619  01452A  6FC4               	movwf	Console_MakeField@pInput& (0+255),b
 11620                           
 11621                           ;Console.c: 437: static Colour Fill[7][5];
 11622                           ;Console.c: 438: pInput -= 32;
 11623  01452C  0E20               	movlw	32
 11624  01452E  0100               	movlb	0	; () banked
 11625  014530  5FC4               	subwf	Console_MakeField@pInput& (0+255),f,b
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 11629  014532  0100               	movlb	0	; () banked
 11630  014534  51C4               	movf	Console_MakeField@pInput& (0+255),w,b
 11631  014536  0D05               	mullw	5
 11632  014538  CFF3 F0C2          	movff	prodl,Console_MakeField@Index
 11633  01453C  CFF4 F0C3          	movff	prodh,Console_MakeField@Index+1
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 11637  014540  0E1F               	movlw	low _Font5x7
 11638  014542  0100               	movlb	0	; () banked
 11639  014544  25C2               	addwf	Console_MakeField@Index& (0+255),w,b
 11640  014546  0100               	movlb	0	; () banked
 11641  014548  6FC5               	movwf	Console_MakeField@Column& (0+255),b
 11642  01454A  0EFD               	movlw	high _Font5x7
 11643  01454C  0100               	movlb	0	; () banked
 11644  01454E  21C3               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 11645  014550  0100               	movlb	0	; () banked
 11646  014552  6FC6               	movwf	(Console_MakeField@Column+1)& (0+255),b
 11647                           
 11648                           ; BSR set to: 0
 11649                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 11650  014554  0E00               	movlw	0
 11651  014556  0100               	movlb	0	; () banked
 11652  014558  6FC9               	movwf	Console_MakeField@x& (0+255),b
 11653  01455A                     l14115:
 11654                           
 11655                           ; BSR set to: 0
 11656  01455A  0E04               	movlw	4
 11657  01455C  0100               	movlb	0	; () banked
 11658  01455E  65C9               	cpfsgt	Console_MakeField@x& (0+255),b
 11659  014560  D001               	goto	l1077
 11660  014562  D043               	goto	u10950
 11661  014564                     l1077:
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;Console.c: 444: {
 11665                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 11666                           
 11667                           ; BSR set to: 0
 11668  014564  0E00               	movlw	0
 11669  014566  0100               	movlb	0	; () banked
 11670  014568  6FCA               	movwf	Console_MakeField@y& (0+255),b
 11671  01456A                     l14121:
 11672                           
 11673                           ; BSR set to: 0
 11674  01456A  0E06               	movlw	6
 11675  01456C  0100               	movlb	0	; () banked
 11676  01456E  65CA               	cpfsgt	Console_MakeField@y& (0+255),b
 11677  014570  D001               	goto	l1079
 11678  014572  D035               	goto	u10940
 11679  014574                     l1079:
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 11683                           
 11684                           ; BSR set to: 0
 11685  014574  C0C5  F0B9         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 11686  014578  C0C6  F0BA         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 11687  01457C  C0CA  F0BB         	movff	Console_MakeField@y,Byte_GetBit@pBit
 11688  014580  ECDA  F0B3         	call	_Byte_GetBit	;wreg free
 11689  014584  0900               	iorlw	0
 11690  014586  A4D8               	btfss	status,2,c
 11691  014588  D005               	goto	l1082
 11692  01458A  C081  F0C7         	movff	_gBackcolour,_Console_MakeField$10974
 11693  01458E  C082  F0C8         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11694  014592  D004               	goto	l1084
 11695  014594                     l1082:
 11696  014594  C0FD  F0C7         	movff	_gForecolour,_Console_MakeField$10974
 11697  014598  C0FE  F0C8         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11698  01459C                     l1084:
 11699  01459C  0100               	movlb	0	; () banked
 11700  01459E  51CA               	movf	Console_MakeField@y& (0+255),w,b
 11701  0145A0  0D0A               	mullw	10
 11702  0145A2  0E64               	movlw	low Console_MakeField@Fill
 11703  0145A4  0100               	movlb	0	; () banked
 11704  0145A6  6FC0               	movwf	??_Console_MakeField& (0+255),b
 11705  0145A8  0E04               	movlw	high Console_MakeField@Fill
 11706  0145AA  0100               	movlb	0	; () banked
 11707  0145AC  6FC1               	movwf	(??_Console_MakeField+1)& (0+255),b
 11708  0145AE  50F3               	movf	prodl,w,c
 11709  0145B0  0100               	movlb	0	; () banked
 11710  0145B2  27C0               	addwf	??_Console_MakeField& (0+255),f,b
 11711  0145B4  50F4               	movf	prodh,w,c
 11712  0145B6  0100               	movlb	0	; () banked
 11713  0145B8  23C1               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 11714  0145BA  0100               	movlb	0	; () banked
 11715  0145BC  51C9               	movf	Console_MakeField@x& (0+255),w,b
 11716  0145BE  0D02               	mullw	2
 11717  0145C0  50F3               	movf	prodl,w,c
 11718  0145C2  0100               	movlb	0	; () banked
 11719  0145C4  25C0               	addwf	??_Console_MakeField& (0+255),w,b
 11720  0145C6  6ED9               	movwf	fsr2l,c
 11721  0145C8  50F4               	movf	prodh,w,c
 11722  0145CA  0100               	movlb	0	; () banked
 11723  0145CC  21C1               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 11724  0145CE  6EDA               	movwf	fsr2h,c
 11725  0145D0  C0C7  FFDE         	movff	_Console_MakeField$10974,postinc2
 11726  0145D4  C0C8  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 11727                           
 11728                           ; BSR set to: 0
 11729  0145D8  0100               	movlb	0	; () banked
 11730  0145DA  2BCA               	incf	Console_MakeField@y& (0+255),f,b
 11731  0145DC  D7C6               	goto	l14121
 11732  0145DE                     u10940:
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;Console.c: 447: Column += 1;
 11736                           
 11737                           ; BSR set to: 0
 11738  0145DE  0100               	movlb	0	; () banked
 11739  0145E0  4BC5               	infsnz	Console_MakeField@Column& (0+255),f,b
 11740  0145E2  2BC6               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 11741  0145E4  0100               	movlb	0	; () banked
 11742  0145E6  2BC9               	incf	Console_MakeField@x& (0+255),f,b
 11743  0145E8  D7B8               	goto	l14115
 11744  0145EA                     u10950:
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;Console.c: 448: }
 11748                           ;Console.c: 449: return (ColourPtr)Fill;
 11749                           
 11750                           ; BSR set to: 0
 11751  0145EA  0E64               	movlw	low Console_MakeField@Fill
 11752  0145EC  0100               	movlb	0	; () banked
 11753  0145EE  6FBE               	movwf	?_Console_MakeField& (0+255),b
 11754  0145F0  0E04               	movlw	high Console_MakeField@Fill
 11755  0145F2  0100               	movlb	0	; () banked
 11756  0145F4  6FBF               	movwf	(?_Console_MakeField+1)& (0+255),b
 11757  0145F6  0012               	return	
 11758  0145F8                     __end_of_Console_MakeField:
 11759                           	opt stack 0
 11760                           tblptru	equ	0xFF8
 11761                           tblptrh	equ	0xFF7
 11762                           tblptrl	equ	0xFF6
 11763                           tablat	equ	0xFF5
 11764                           prodh	equ	0xFF4
 11765                           prodl	equ	0xFF3
 11766                           intcon	equ	0xFF2
 11767                           postinc0	equ	0xFEE
 11768                           wreg	equ	0xFE8
 11769                           postdec1	equ	0xFE5
 11770                           fsr1h	equ	0xFE2
 11771                           fsr1l	equ	0xFE1
 11772                           indf2	equ	0xFDF
 11773                           postinc2	equ	0xFDE
 11774                           postdec2	equ	0xFDD
 11775                           fsr2h	equ	0xFDA
 11776                           fsr2l	equ	0xFD9
 11777                           status	equ	0xFD8
 11778                           
 11779 ;; *************** function _Byte_GetBit *****************
 11780 ;; Defined at:
 11781 ;;		line 38 in file "Library/Types.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11784 ;;		 -> Font5x7(480), 
 11785 ;;  pBit            1    2[BANK0 ] unsigned char 
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;  Output          1    4[BANK0 ] unsigned char 
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  1    wreg      unsigned char 
 11790 ;; Registers used:
 11791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11797 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;Total ram usage:        5 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    7
 11804 ;; This function calls:
 11805 ;;		Nothing
 11806 ;; This function is called by:
 11807 ;;		_Console_MakeField
 11808 ;;		_Word_GetBit
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           	psect	text45
 11813  0167B4                     __ptext45:
 11814                           	opt stack 0
 11815  0167B4                     _Byte_GetBit:
 11816                           	opt stack 19
 11817                           
 11818                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;incstack = 0
 11822  0167B4  C0B9  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11823  0167B8  C0BA  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11824  0167BC                     	if	0	;tblptru may be non-zero
 11825  0167BC                     	endif
 11826  0167BC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11827  0167BC  0E00               	movlw	low (__mediumconst shr (0+16))
 11828  0167BE  6EF8               	movwf	tblptru,c
 11829  0167C0                     	endif
 11830  0167C0  0008               	tblrd		*
 11831  0167C2  CFF5 F0BD          	movff	tablat,Byte_GetBit@Output
 11832                           
 11833                           ;Types.c: 42: Output >>= pBit;
 11834  0167C6  0100               	movlb	0	; () banked
 11835  0167C8  29BB               	incf	Byte_GetBit@pBit& (0+255),w,b
 11836  0167CA  0100               	movlb	0	; () banked
 11837  0167CC  6FBC               	movwf	??_Byte_GetBit& (0+255),b
 11838  0167CE  D003               	goto	u9970
 11839  0167D0                     u9975:
 11840  0167D0  0100               	movlb	0	; () banked
 11841  0167D2  90D8               	bcf	status,0,c
 11842  0167D4  33BD               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11843  0167D6                     u9970:
 11844  0167D6  0100               	movlb	0	; () banked
 11845  0167D8  2FBC               	decfsz	??_Byte_GetBit& (0+255),f,b
 11846  0167DA  D7FA               	goto	u9975
 11847                           
 11848                           ;Types.c: 43: Output &= 1;
 11849  0167DC  0E01               	movlw	1
 11850  0167DE  0100               	movlb	0	; () banked
 11851  0167E0  17BD               	andwf	Byte_GetBit@Output& (0+255),f,b
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;Types.c: 44: return Output;
 11855  0167E2  0100               	movlb	0	; () banked
 11856  0167E4  51BD               	movf	Byte_GetBit@Output& (0+255),w,b
 11857  0167E6  0012               	return	
 11858  0167E8                     __end_of_Byte_GetBit:
 11859                           	opt stack 0
 11860                           tblptru	equ	0xFF8
 11861                           tblptrh	equ	0xFF7
 11862                           tblptrl	equ	0xFF6
 11863                           tablat	equ	0xFF5
 11864                           prodh	equ	0xFF4
 11865                           prodl	equ	0xFF3
 11866                           intcon	equ	0xFF2
 11867                           postinc0	equ	0xFEE
 11868                           wreg	equ	0xFE8
 11869                           postdec1	equ	0xFE5
 11870                           fsr1h	equ	0xFE2
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function _ADC_Voltage *****************
 11880 ;; Defined at:
 11881 ;;		line 259 in file "Library/ADC.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 11884 ;;		 -> ADC_AN0(5), 
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  output          4   53[BANK0 ] float 
 11887 ;;  ref             4   49[BANK0 ] const float 
 11888 ;;  max             4   45[BANK0 ] const float 
 11889 ;; Return value:  Size  Location     Type
 11890 ;;                  4   39[BANK0 ] float 
 11891 ;; Registers used:
 11892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11898 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;Total ram usage:       18 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; Hardware stack levels required when called:    8
 11905 ;; This function calls:
 11906 ;;		___fldiv
 11907 ;;		___flmul
 11908 ;;		___xxtofl
 11909 ;; This function is called by:
 11910 ;;		_findClosestWall
 11911 ;;		_measureAndDisplayDistance
 11912 ;;		_mode1
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           	psect	text46
 11917  0140FC                     __ptext46:
 11918                           	opt stack 0
 11919  0140FC                     _ADC_Voltage:
 11920                           	opt stack 20
 11921                           
 11922                           ;ADC.c: 261: const float max = 1024;
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;incstack = 0
 11926  0140FC  0E00               	movlw	0
 11927  0140FE  0100               	movlb	0	; () banked
 11928  014100  6FE6               	movwf	ADC_Voltage@max& (0+255),b
 11929  014102  0E00               	movlw	0
 11930  014104  6FE7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 11931  014106  0E80               	movlw	128
 11932  014108  6FE8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 11933  01410A  0E44               	movlw	68
 11934  01410C  6FE9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 11935                           
 11936                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 11937  01410E  0E33               	movlw	51
 11938  014110  0100               	movlb	0	; () banked
 11939  014112  6FEA               	movwf	ADC_Voltage@ref& (0+255),b
 11940  014114  0E33               	movlw	51
 11941  014116  6FEB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 11942  014118  0E53               	movlw	83
 11943  01411A  6FEC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 11944  01411C  0E40               	movlw	64
 11945  01411E  6FED               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;ADC.c: 263: float output = pInput->mValue;
 11949  014120  0100               	movlb	0	; () banked
 11950  014122  EE20 F001          	lfsr	2,1
 11951  014126  51E0               	movf	ADC_Voltage@pInput& (0+255),w,b
 11952  014128  26D9               	addwf	fsr2l,f,c
 11953  01412A  51E1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 11954  01412C  22DA               	addwfc	fsr2h,f,c
 11955  01412E  CFDE F0E4          	movff	postinc2,??_ADC_Voltage
 11956  014132  CFDD F0E5          	movff	postdec2,??_ADC_Voltage+1
 11957  014136  C0E4  F0B9         	movff	??_ADC_Voltage,___xxtofl@val
 11958  01413A  C0E5  F0BA         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 11959  01413E  0100               	movlb	0	; () banked
 11960  014140  6BBB               	clrf	(___xxtofl@val+2)& (0+255),b
 11961  014142  6BBC               	clrf	(___xxtofl@val+3)& (0+255),b
 11962  014144  0E00               	movlw	0
 11963  014146  ECEA  F093         	call	___xxtofl
 11964  01414A  C0B9  F0EE         	movff	?___xxtofl,ADC_Voltage@output
 11965  01414E  C0BA  F0EF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 11966  014152  C0BB  F0F0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 11967  014156  C0BC  F0F1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 11968                           
 11969                           ;ADC.c: 265: output /= max;
 11970  01415A  C0EE  F0B9         	movff	ADC_Voltage@output,___fldiv@b
 11971  01415E  C0EF  F0BA         	movff	ADC_Voltage@output+1,___fldiv@b+1
 11972  014162  C0F0  F0BB         	movff	ADC_Voltage@output+2,___fldiv@b+2
 11973  014166  C0F1  F0BC         	movff	ADC_Voltage@output+3,___fldiv@b+3
 11974  01416A  C0E6  F0BD         	movff	ADC_Voltage@max,___fldiv@a
 11975  01416E  C0E7  F0BE         	movff	ADC_Voltage@max+1,___fldiv@a+1
 11976  014172  C0E8  F0BF         	movff	ADC_Voltage@max+2,___fldiv@a+2
 11977  014176  C0E9  F0C0         	movff	ADC_Voltage@max+3,___fldiv@a+3
 11978  01417A  ECA6  F08A         	call	___fldiv	;wreg free
 11979  01417E  C0B9  F0EE         	movff	?___fldiv,ADC_Voltage@output
 11980  014182  C0BA  F0EF         	movff	?___fldiv+1,ADC_Voltage@output+1
 11981  014186  C0BB  F0F0         	movff	?___fldiv+2,ADC_Voltage@output+2
 11982  01418A  C0BC  F0F1         	movff	?___fldiv+3,ADC_Voltage@output+3
 11983                           
 11984                           ;ADC.c: 266: output *= ref;
 11985  01418E  C0EE  F0C7         	movff	ADC_Voltage@output,___flmul@b
 11986  014192  C0EF  F0C8         	movff	ADC_Voltage@output+1,___flmul@b+1
 11987  014196  C0F0  F0C9         	movff	ADC_Voltage@output+2,___flmul@b+2
 11988  01419A  C0F1  F0CA         	movff	ADC_Voltage@output+3,___flmul@b+3
 11989  01419E  C0EA  F0CB         	movff	ADC_Voltage@ref,___flmul@a
 11990  0141A2  C0EB  F0CC         	movff	ADC_Voltage@ref+1,___flmul@a+1
 11991  0141A6  C0EC  F0CD         	movff	ADC_Voltage@ref+2,___flmul@a+2
 11992  0141AA  C0ED  F0CE         	movff	ADC_Voltage@ref+3,___flmul@a+3
 11993  0141AE  EC5A  F084         	call	___flmul	;wreg free
 11994  0141B2  C0C7  F0EE         	movff	?___flmul,ADC_Voltage@output
 11995  0141B6  C0C8  F0EF         	movff	?___flmul+1,ADC_Voltage@output+1
 11996  0141BA  C0C9  F0F0         	movff	?___flmul+2,ADC_Voltage@output+2
 11997  0141BE  C0CA  F0F1         	movff	?___flmul+3,ADC_Voltage@output+3
 11998                           
 11999                           ;ADC.c: 268: return output + (float)0.000;
 12000  0141C2  C0EE  F0E0         	movff	ADC_Voltage@output,?_ADC_Voltage
 12001  0141C6  C0EF  F0E1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 12002  0141CA  C0F0  F0E2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 12003  0141CE  C0F1  F0E3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 12004  0141D2  0012               	return	
 12005  0141D4                     __end_of_ADC_Voltage:
 12006                           	opt stack 0
 12007                           tblptru	equ	0xFF8
 12008                           tblptrh	equ	0xFF7
 12009                           tblptrl	equ	0xFF6
 12010                           tablat	equ	0xFF5
 12011                           prodh	equ	0xFF4
 12012                           prodl	equ	0xFF3
 12013                           intcon	equ	0xFF2
 12014                           postinc0	equ	0xFEE
 12015                           wreg	equ	0xFE8
 12016                           postdec1	equ	0xFE5
 12017                           fsr1h	equ	0xFE2
 12018                           fsr1l	equ	0xFE1
 12019                           indf2	equ	0xFDF
 12020                           postinc2	equ	0xFDE
 12021                           postdec2	equ	0xFDD
 12022                           fsr2h	equ	0xFDA
 12023                           fsr2l	equ	0xFD9
 12024                           status	equ	0xFD8
 12025                           
 12026 ;; *************** function ___xxtofl *****************
 12027 ;; Defined at:
 12028 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;  sign            1    wreg     unsigned char 
 12031 ;;  val             4    0[BANK0 ] long 
 12032 ;; Auto vars:     Size  Location     Type
 12033 ;;  sign            1    8[BANK0 ] unsigned char 
 12034 ;;  arg             4   10[BANK0 ] unsigned long 
 12035 ;;  exp             1    9[BANK0 ] unsigned char 
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  4    0[BANK0 ] unsigned char 
 12038 ;; Registers used:
 12039 ;;		wreg, status,2, status,0
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12045 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12048 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12049 ;;Total ram usage:       14 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    7
 12052 ;; This function calls:
 12053 ;;		Nothing
 12054 ;; This function is called by:
 12055 ;;		_ADC_Voltage
 12056 ;;		_findClosestWall
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           	psect	text47
 12061  0127D4                     __ptext47:
 12062                           	opt stack 0
 12063  0127D4                     ___xxtofl:
 12064                           	opt stack 21
 12065                           
 12066                           ;incstack = 0
 12067                           ;___xxtofl@sign stored from wreg
 12068  0127D4  0100               	movlb	0	; () banked
 12069  0127D6  6FC1               	movwf	___xxtofl@sign& (0+255),b
 12070  0127D8  0100               	movlb	0	; () banked
 12071  0127DA  51C1               	movf	___xxtofl@sign& (0+255),w,b
 12072  0127DC  0100               	movlb	0	; () banked
 12073  0127DE  B4D8               	btfsc	status,2,c
 12074  0127E0  D01E               	goto	l3041
 12075                           
 12076                           ; BSR set to: 0
 12077  0127E2  0100               	movlb	0	; () banked
 12078  0127E4  AFBC               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12079  0127E6  D01B               	goto	l3041
 12080                           
 12081                           ; BSR set to: 0
 12082  0127E8  C0B9  F0BD         	movff	___xxtofl@val,??___xxtofl
 12083  0127EC  C0BA  F0BE         	movff	___xxtofl@val+1,??___xxtofl+1
 12084  0127F0  C0BB  F0BF         	movff	___xxtofl@val+2,??___xxtofl+2
 12085  0127F4  C0BC  F0C0         	movff	___xxtofl@val+3,??___xxtofl+3
 12086  0127F8  0100               	movlb	0	; () banked
 12087  0127FA  1FBD               	comf	??___xxtofl& (0+255),f,b
 12088  0127FC  1FBE               	comf	(??___xxtofl+1)& (0+255),f,b
 12089  0127FE  1FBF               	comf	(??___xxtofl+2)& (0+255),f,b
 12090  012800  1FC0               	comf	(??___xxtofl+3)& (0+255),f,b
 12091  012802  2BBD               	incf	??___xxtofl& (0+255),f,b
 12092  012804  0E00               	movlw	0
 12093  012806  23BE               	addwfc	(??___xxtofl+1)& (0+255),f,b
 12094  012808  23BF               	addwfc	(??___xxtofl+2)& (0+255),f,b
 12095  01280A  23C0               	addwfc	(??___xxtofl+3)& (0+255),f,b
 12096  01280C  C0BD  F0C3         	movff	??___xxtofl,___xxtofl@arg
 12097  012810  C0BE  F0C4         	movff	??___xxtofl+1,___xxtofl@arg+1
 12098  012814  C0BF  F0C5         	movff	??___xxtofl+2,___xxtofl@arg+2
 12099  012818  C0C0  F0C6         	movff	??___xxtofl+3,___xxtofl@arg+3
 12100  01281C  D008               	goto	l3042
 12101  01281E                     l3041:
 12102                           
 12103                           ; BSR set to: 0
 12104  01281E  C0B9  F0C3         	movff	___xxtofl@val,___xxtofl@arg
 12105  012822  C0BA  F0C4         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12106  012826  C0BB  F0C5         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12107  01282A  C0BC  F0C6         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12108  01282E                     l3042:
 12109                           
 12110                           ; BSR set to: 0
 12111                           
 12112                           ; BSR set to: 0
 12113  01282E  0100               	movlb	0	; () banked
 12114  012830  51B9               	movf	___xxtofl@val& (0+255),w,b
 12115  012832  0100               	movlb	0	; () banked
 12116  012834  11BA               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 12117  012836  0100               	movlb	0	; () banked
 12118  012838  11BB               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 12119  01283A  0100               	movlb	0	; () banked
 12120  01283C  11BC               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 12121  01283E  A4D8               	btfss	status,2,c
 12122  012840  D00A               	goto	l3043
 12123                           
 12124                           ; BSR set to: 0
 12125  012842  0E00               	movlw	0
 12126  012844  0100               	movlb	0	; () banked
 12127  012846  6FB9               	movwf	?___xxtofl& (0+255),b
 12128  012848  0E00               	movlw	0
 12129  01284A  6FBA               	movwf	(?___xxtofl+1)& (0+255),b
 12130  01284C  0E00               	movlw	0
 12131  01284E  6FBB               	movwf	(?___xxtofl+2)& (0+255),b
 12132  012850  0E00               	movlw	0
 12133  012852  6FBC               	movwf	(?___xxtofl+3)& (0+255),b
 12134                           
 12135                           ; BSR set to: 0
 12136  012854  0012               	return	
 12137  012856                     l3043:
 12138                           
 12139                           ; BSR set to: 0
 12140                           
 12141                           ; BSR set to: 0
 12142  012856  0E96               	movlw	150
 12143  012858  0100               	movlb	0	; () banked
 12144  01285A  6FC2               	movwf	___xxtofl@exp& (0+255),b
 12145  01285C  D008               	goto	l3045
 12146  01285E                     
 12147                           ; BSR set to: 0
 12148                           
 12149                           ; BSR set to: 0
 12150  01285E  0100               	movlb	0	; () banked
 12151  012860  2BC2               	incf	___xxtofl@exp& (0+255),f,b
 12152  012862  0100               	movlb	0	; () banked
 12153  012864  90D8               	bcf	status,0,c
 12154  012866  33C6               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12155  012868  33C5               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12156  01286A  33C4               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12157  01286C  33C3               	rrcf	___xxtofl@arg& (0+255),f,b
 12158  01286E                     l3045:
 12159                           
 12160                           ; BSR set to: 0
 12161                           
 12162                           ; BSR set to: 0
 12163  01286E  0E00               	movlw	0
 12164  012870  0100               	movlb	0	; () banked
 12165  012872  15C3               	andwf	___xxtofl@arg& (0+255),w,b
 12166  012874  0100               	movlb	0	; () banked
 12167  012876  6FBD               	movwf	??___xxtofl& (0+255),b
 12168  012878  0E00               	movlw	0
 12169  01287A  0100               	movlb	0	; () banked
 12170  01287C  15C4               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12171  01287E  0100               	movlb	0	; () banked
 12172  012880  6FBE               	movwf	(??___xxtofl+1)& (0+255),b
 12173  012882  0E00               	movlw	0
 12174  012884  0100               	movlb	0	; () banked
 12175  012886  15C5               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12176  012888  0100               	movlb	0	; () banked
 12177  01288A  6FBF               	movwf	(??___xxtofl+2)& (0+255),b
 12178  01288C  0EFE               	movlw	254
 12179  01288E  0100               	movlb	0	; () banked
 12180  012890  15C6               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12181  012892  0100               	movlb	0	; () banked
 12182  012894  6FC0               	movwf	(??___xxtofl+3)& (0+255),b
 12183  012896  0100               	movlb	0	; () banked
 12184  012898  51BD               	movf	??___xxtofl& (0+255),w,b
 12185  01289A  0100               	movlb	0	; () banked
 12186  01289C  11BE               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12187  01289E  0100               	movlb	0	; () banked
 12188  0128A0  11BF               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12189  0128A2  0100               	movlb	0	; () banked
 12190  0128A4  11C0               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12191  0128A6  B4D8               	btfsc	status,2,c
 12192  0128A8  D010               	goto	l3048
 12193  0128AA  D7D9               	goto	l3046
 12194  0128AC                     
 12195                           ; BSR set to: 0
 12196                           
 12197                           ; BSR set to: 0
 12198  0128AC  0100               	movlb	0	; () banked
 12199  0128AE  2BC2               	incf	___xxtofl@exp& (0+255),f,b
 12200                           
 12201                           ; BSR set to: 0
 12202  0128B0  0E01               	movlw	1
 12203  0128B2  0100               	movlb	0	; () banked
 12204  0128B4  27C3               	addwf	___xxtofl@arg& (0+255),f,b
 12205  0128B6  0E00               	movlw	0
 12206  0128B8  23C4               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 12207  0128BA  23C5               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 12208  0128BC  23C6               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 12209                           
 12210                           ; BSR set to: 0
 12211  0128BE  0100               	movlb	0	; () banked
 12212  0128C0  90D8               	bcf	status,0,c
 12213  0128C2  33C6               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12214  0128C4  33C5               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12215  0128C6  33C4               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12216  0128C8  33C3               	rrcf	___xxtofl@arg& (0+255),f,b
 12217  0128CA                     l3048:
 12218                           
 12219                           ; BSR set to: 0
 12220  0128CA  0E00               	movlw	0
 12221  0128CC  0100               	movlb	0	; () banked
 12222  0128CE  15C3               	andwf	___xxtofl@arg& (0+255),w,b
 12223  0128D0  0100               	movlb	0	; () banked
 12224  0128D2  6FBD               	movwf	??___xxtofl& (0+255),b
 12225  0128D4  0E00               	movlw	0
 12226  0128D6  0100               	movlb	0	; () banked
 12227  0128D8  15C4               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12228  0128DA  0100               	movlb	0	; () banked
 12229  0128DC  6FBE               	movwf	(??___xxtofl+1)& (0+255),b
 12230  0128DE  0E00               	movlw	0
 12231  0128E0  0100               	movlb	0	; () banked
 12232  0128E2  15C5               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12233  0128E4  0100               	movlb	0	; () banked
 12234  0128E6  6FBF               	movwf	(??___xxtofl+2)& (0+255),b
 12235  0128E8  0EFF               	movlw	255
 12236  0128EA  0100               	movlb	0	; () banked
 12237  0128EC  15C6               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12238  0128EE  0100               	movlb	0	; () banked
 12239  0128F0  6FC0               	movwf	(??___xxtofl+3)& (0+255),b
 12240  0128F2  0100               	movlb	0	; () banked
 12241  0128F4  51BD               	movf	??___xxtofl& (0+255),w,b
 12242  0128F6  0100               	movlb	0	; () banked
 12243  0128F8  11BE               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12244  0128FA  0100               	movlb	0	; () banked
 12245  0128FC  11BF               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12246  0128FE  0100               	movlb	0	; () banked
 12247  012900  11C0               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12248  012902  B4D8               	btfsc	status,2,c
 12249  012904  D009               	goto	l3051
 12250  012906  D7D2               	goto	l3049
 12251  012908                     
 12252                           ; BSR set to: 0
 12253                           
 12254                           ; BSR set to: 0
 12255  012908  0100               	movlb	0	; () banked
 12256  01290A  07C2               	decf	___xxtofl@exp& (0+255),f,b
 12257  01290C  0100               	movlb	0	; () banked
 12258  01290E  90D8               	bcf	status,0,c
 12259  012910  37C3               	rlcf	___xxtofl@arg& (0+255),f,b
 12260  012912  37C4               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 12261  012914  37C5               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 12262  012916  37C6               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 12263  012918                     l3051:
 12264                           
 12265                           ; BSR set to: 0
 12266                           
 12267                           ; BSR set to: 0
 12268  012918  0100               	movlb	0	; () banked
 12269  01291A  BFC5               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 12270  01291C  D004               	goto	u10640
 12271                           
 12272                           ; BSR set to: 0
 12273  01291E  0E02               	movlw	2
 12274  012920  0100               	movlb	0	; () banked
 12275  012922  61C2               	cpfslt	___xxtofl@exp& (0+255),b
 12276  012924  D7F1               	goto	l3052
 12277  012926                     u10640:
 12278                           
 12279                           ; BSR set to: 0
 12280                           
 12281                           ; BSR set to: 0
 12282  012926  0100               	movlb	0	; () banked
 12283  012928  B1C2               	btfsc	___xxtofl@exp& (0+255),0,b
 12284  01292A  D009               	goto	l3056
 12285                           
 12286                           ; BSR set to: 0
 12287  01292C  0EFF               	movlw	255
 12288  01292E  0100               	movlb	0	; () banked
 12289  012930  17C3               	andwf	___xxtofl@arg& (0+255),f,b
 12290  012932  0EFF               	movlw	255
 12291  012934  17C4               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 12292  012936  0E7F               	movlw	127
 12293  012938  17C5               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 12294  01293A  0EFF               	movlw	255
 12295  01293C  17C6               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 12296  01293E                     l3056:
 12297                           
 12298                           ; BSR set to: 0
 12299  01293E  0100               	movlb	0	; () banked
 12300  012940  90D8               	bcf	status,0,c
 12301  012942  33C2               	rrcf	___xxtofl@exp& (0+255),f,b
 12302  012944  C0C2  F0BD         	movff	___xxtofl@exp,??___xxtofl
 12303  012948  0100               	movlb	0	; () banked
 12304  01294A  6BBE               	clrf	(??___xxtofl+1)& (0+255),b
 12305  01294C  6BBF               	clrf	(??___xxtofl+2)& (0+255),b
 12306  01294E  6BC0               	clrf	(??___xxtofl+3)& (0+255),b
 12307  012950  C0BD  F0C0         	movff	??___xxtofl,??___xxtofl+3
 12308  012954  0100               	movlb	0	; () banked
 12309  012956  6BBF               	clrf	(??___xxtofl+2)& (0+255),b
 12310  012958  6BBE               	clrf	(??___xxtofl+1)& (0+255),b
 12311  01295A  6BBD               	clrf	??___xxtofl& (0+255),b
 12312  01295C  0100               	movlb	0	; () banked
 12313  01295E  51BD               	movf	??___xxtofl& (0+255),w,b
 12314  012960  0100               	movlb	0	; () banked
 12315  012962  13C3               	iorwf	___xxtofl@arg& (0+255),f,b
 12316  012964  0100               	movlb	0	; () banked
 12317  012966  51BE               	movf	(??___xxtofl+1)& (0+255),w,b
 12318  012968  0100               	movlb	0	; () banked
 12319  01296A  13C4               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 12320  01296C  0100               	movlb	0	; () banked
 12321  01296E  51BF               	movf	(??___xxtofl+2)& (0+255),w,b
 12322  012970  0100               	movlb	0	; () banked
 12323  012972  13C5               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 12324  012974  0100               	movlb	0	; () banked
 12325  012976  51C0               	movf	(??___xxtofl+3)& (0+255),w,b
 12326  012978  0100               	movlb	0	; () banked
 12327  01297A  13C6               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 12328                           
 12329                           ; BSR set to: 0
 12330  01297C  0100               	movlb	0	; () banked
 12331  01297E  51C1               	movf	___xxtofl@sign& (0+255),w,b
 12332  012980  0100               	movlb	0	; () banked
 12333  012982  B4D8               	btfsc	status,2,c
 12334  012984  D005               	goto	l3057
 12335                           
 12336                           ; BSR set to: 0
 12337  012986  0100               	movlb	0	; () banked
 12338  012988  AFBC               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12339  01298A  D002               	goto	l3057
 12340                           
 12341                           ; BSR set to: 0
 12342  01298C  0100               	movlb	0	; () banked
 12343  01298E  8FC6               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 12344  012990                     l3057:
 12345                           
 12346                           ; BSR set to: 0
 12347                           
 12348                           ; BSR set to: 0
 12349  012990  C0C3  F0B9         	movff	___xxtofl@arg,?___xxtofl
 12350  012994  C0C4  F0BA         	movff	___xxtofl@arg+1,?___xxtofl+1
 12351  012998  C0C5  F0BB         	movff	___xxtofl@arg+2,?___xxtofl+2
 12352  01299C  C0C6  F0BC         	movff	___xxtofl@arg+3,?___xxtofl+3
 12353  0129A0  0012               	return	
 12354  0129A2                     __end_of___xxtofl:
 12355                           	opt stack 0
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           postinc0	equ	0xFEE
 12364                           wreg	equ	0xFE8
 12365                           postdec1	equ	0xFE5
 12366                           fsr1h	equ	0xFE2
 12367                           fsr1l	equ	0xFE1
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function ___flmul *****************
 12376 ;; Defined at:
 12377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;  b               4   14[BANK0 ] unsigned char 
 12380 ;;  a               4   18[BANK0 ] unsigned char 
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;  prod            4   33[BANK0 ] struct .
 12383 ;;  grs             4   28[BANK0 ] unsigned long 
 12384 ;;  temp            2   37[BANK0 ] struct .
 12385 ;;  bexp            1   32[BANK0 ] unsigned char 
 12386 ;;  aexp            1   27[BANK0 ] unsigned char 
 12387 ;;  sign            1   26[BANK0 ] unsigned char 
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  4   14[BANK0 ] unsigned char 
 12390 ;; Registers used:
 12391 ;;		wreg, status,2, status,0, prodl, prodh
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12397 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12399 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12401 ;;Total ram usage:       25 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    7
 12404 ;; This function calls:
 12405 ;;		Nothing
 12406 ;; This function is called by:
 12407 ;;		_ADC_Voltage
 12408 ;;		_findClosestWall
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           	psect	text48
 12413  0108B4                     __ptext48:
 12414                           	opt stack 0
 12415  0108B4                     ___flmul:
 12416                           	opt stack 21
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;incstack = 0
 12420  0108B4  0100               	movlb	0	; () banked
 12421  0108B6  51CA               	movf	(___flmul@b+3)& (0+255),w,b
 12422  0108B8  0B80               	andlw	128
 12423  0108BA  0100               	movlb	0	; () banked
 12424  0108BC  6FD3               	movwf	___flmul@sign& (0+255),b
 12425  0108BE  0100               	movlb	0	; () banked
 12426  0108C0  51CA               	movf	(___flmul@b+3)& (0+255),w,b
 12427  0108C2  25CA               	addwf	(___flmul@b+3)& (0+255),w,b
 12428  0108C4  0100               	movlb	0	; () banked
 12429  0108C6  6FD9               	movwf	___flmul@bexp& (0+255),b
 12430                           
 12431                           ; BSR set to: 0
 12432  0108C8  0100               	movlb	0	; () banked
 12433  0108CA  AFC9               	btfss	(___flmul@b+2)& (0+255),7,b
 12434  0108CC  D002               	goto	l3012
 12435                           
 12436                           ; BSR set to: 0
 12437  0108CE  0100               	movlb	0	; () banked
 12438  0108D0  81D9               	bsf	___flmul@bexp& (0+255),0,b
 12439  0108D2                     l3012:
 12440                           
 12441                           ; BSR set to: 0
 12442                           
 12443                           ; BSR set to: 0
 12444  0108D2  0100               	movlb	0	; () banked
 12445  0108D4  51D9               	movf	___flmul@bexp& (0+255),w,b
 12446  0108D6  0100               	movlb	0	; () banked
 12447  0108D8  B4D8               	btfsc	status,2,c
 12448  0108DA  D010               	goto	l3013
 12449                           
 12450                           ; BSR set to: 0
 12451  0108DC  0100               	movlb	0	; () banked
 12452  0108DE  29D9               	incf	___flmul@bexp& (0+255),w,b
 12453  0108E0  A4D8               	btfss	status,2,c
 12454  0108E2  D009               	goto	l3014
 12455                           
 12456                           ; BSR set to: 0
 12457  0108E4  0E00               	movlw	0
 12458  0108E6  0100               	movlb	0	; () banked
 12459  0108E8  6FC7               	movwf	___flmul@b& (0+255),b
 12460  0108EA  0E00               	movlw	0
 12461  0108EC  6FC8               	movwf	(___flmul@b+1)& (0+255),b
 12462  0108EE  0E00               	movlw	0
 12463  0108F0  6FC9               	movwf	(___flmul@b+2)& (0+255),b
 12464  0108F2  0E00               	movlw	0
 12465  0108F4  6FCA               	movwf	(___flmul@b+3)& (0+255),b
 12466  0108F6                     l3014:
 12467                           
 12468                           ; BSR set to: 0
 12469                           
 12470                           ; BSR set to: 0
 12471  0108F6  0100               	movlb	0	; () banked
 12472  0108F8  8FC9               	bsf	(___flmul@b+2)& (0+255),7,b
 12473  0108FA  D009               	goto	l3015
 12474  0108FC                     l3013:
 12475                           
 12476                           ; BSR set to: 0
 12477                           
 12478                           ; BSR set to: 0
 12479  0108FC  0E00               	movlw	0
 12480  0108FE  0100               	movlb	0	; () banked
 12481  010900  6FC7               	movwf	___flmul@b& (0+255),b
 12482  010902  0E00               	movlw	0
 12483  010904  6FC8               	movwf	(___flmul@b+1)& (0+255),b
 12484  010906  0E00               	movlw	0
 12485  010908  6FC9               	movwf	(___flmul@b+2)& (0+255),b
 12486  01090A  0E00               	movlw	0
 12487  01090C  6FCA               	movwf	(___flmul@b+3)& (0+255),b
 12488  01090E                     l3015:
 12489                           
 12490                           ; BSR set to: 0
 12491                           
 12492                           ; BSR set to: 0
 12493  01090E  0100               	movlb	0	; () banked
 12494  010910  51CE               	movf	(___flmul@a+3)& (0+255),w,b
 12495  010912  0B80               	andlw	128
 12496  010914  0100               	movlb	0	; () banked
 12497  010916  1BD3               	xorwf	___flmul@sign& (0+255),f,b
 12498                           
 12499                           ; BSR set to: 0
 12500  010918  0100               	movlb	0	; () banked
 12501  01091A  51CE               	movf	(___flmul@a+3)& (0+255),w,b
 12502  01091C  25CE               	addwf	(___flmul@a+3)& (0+255),w,b
 12503  01091E  0100               	movlb	0	; () banked
 12504  010920  6FD4               	movwf	___flmul@aexp& (0+255),b
 12505                           
 12506                           ; BSR set to: 0
 12507  010922  0100               	movlb	0	; () banked
 12508  010924  AFCD               	btfss	(___flmul@a+2)& (0+255),7,b
 12509  010926  D002               	goto	l3016
 12510                           
 12511                           ; BSR set to: 0
 12512  010928  0100               	movlb	0	; () banked
 12513  01092A  81D4               	bsf	___flmul@aexp& (0+255),0,b
 12514  01092C                     l3016:
 12515                           
 12516                           ; BSR set to: 0
 12517                           
 12518                           ; BSR set to: 0
 12519  01092C  0100               	movlb	0	; () banked
 12520  01092E  51D4               	movf	___flmul@aexp& (0+255),w,b
 12521  010930  0100               	movlb	0	; () banked
 12522  010932  B4D8               	btfsc	status,2,c
 12523  010934  D010               	goto	l3017
 12524                           
 12525                           ; BSR set to: 0
 12526  010936  0100               	movlb	0	; () banked
 12527  010938  29D4               	incf	___flmul@aexp& (0+255),w,b
 12528  01093A  A4D8               	btfss	status,2,c
 12529  01093C  D009               	goto	l3018
 12530                           
 12531                           ; BSR set to: 0
 12532  01093E  0E00               	movlw	0
 12533  010940  0100               	movlb	0	; () banked
 12534  010942  6FCB               	movwf	___flmul@a& (0+255),b
 12535  010944  0E00               	movlw	0
 12536  010946  6FCC               	movwf	(___flmul@a+1)& (0+255),b
 12537  010948  0E00               	movlw	0
 12538  01094A  6FCD               	movwf	(___flmul@a+2)& (0+255),b
 12539  01094C  0E00               	movlw	0
 12540  01094E  6FCE               	movwf	(___flmul@a+3)& (0+255),b
 12541  010950                     l3018:
 12542                           
 12543                           ; BSR set to: 0
 12544                           
 12545                           ; BSR set to: 0
 12546  010950  0100               	movlb	0	; () banked
 12547  010952  8FCD               	bsf	(___flmul@a+2)& (0+255),7,b
 12548  010954  D009               	goto	l3019
 12549  010956                     l3017:
 12550                           
 12551                           ; BSR set to: 0
 12552                           
 12553                           ; BSR set to: 0
 12554  010956  0E00               	movlw	0
 12555  010958  0100               	movlb	0	; () banked
 12556  01095A  6FCB               	movwf	___flmul@a& (0+255),b
 12557  01095C  0E00               	movlw	0
 12558  01095E  6FCC               	movwf	(___flmul@a+1)& (0+255),b
 12559  010960  0E00               	movlw	0
 12560  010962  6FCD               	movwf	(___flmul@a+2)& (0+255),b
 12561  010964  0E00               	movlw	0
 12562  010966  6FCE               	movwf	(___flmul@a+3)& (0+255),b
 12563  010968                     l3019:
 12564                           
 12565                           ; BSR set to: 0
 12566  010968  0100               	movlb	0	; () banked
 12567  01096A  51D4               	movf	___flmul@aexp& (0+255),w,b
 12568  01096C  0100               	movlb	0	; () banked
 12569  01096E  B4D8               	btfsc	status,2,c
 12570  010970  D005               	goto	u10460
 12571                           
 12572                           ; BSR set to: 0
 12573  010972  0100               	movlb	0	; () banked
 12574  010974  51D9               	movf	___flmul@bexp& (0+255),w,b
 12575  010976  0100               	movlb	0	; () banked
 12576  010978  A4D8               	btfss	status,2,c
 12577  01097A  D00A               	goto	l3020
 12578  01097C                     u10460:
 12579                           
 12580                           ; BSR set to: 0
 12581                           
 12582                           ; BSR set to: 0
 12583  01097C  0E00               	movlw	0
 12584  01097E  0100               	movlb	0	; () banked
 12585  010980  6FC7               	movwf	?___flmul& (0+255),b
 12586  010982  0E00               	movlw	0
 12587  010984  6FC8               	movwf	(?___flmul+1)& (0+255),b
 12588  010986  0E00               	movlw	0
 12589  010988  6FC9               	movwf	(?___flmul+2)& (0+255),b
 12590  01098A  0E00               	movlw	0
 12591  01098C  6FCA               	movwf	(?___flmul+3)& (0+255),b
 12592                           
 12593                           ; BSR set to: 0
 12594  01098E  0012               	return	
 12595  010990                     l3020:
 12596                           
 12597                           ; BSR set to: 0
 12598                           
 12599                           ; BSR set to: 0
 12600  010990  0100               	movlb	0	; () banked
 12601  010992  51CD               	movf	(___flmul@a+2)& (0+255),w,b
 12602  010994  0100               	movlb	0	; () banked
 12603  010996  03C7               	mulwf	___flmul@b& (0+255),b
 12604  010998  CFF3 F0DE          	movff	prodl,___flmul@temp
 12605  01099C  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12606                           
 12607                           ; BSR set to: 0
 12608  0109A0  0100               	movlb	0	; () banked
 12609  0109A2  51DE               	movf	___flmul@temp& (0+255),w,b
 12610  0109A4  0100               	movlb	0	; () banked
 12611  0109A6  6FD5               	movwf	___flmul@grs& (0+255),b
 12612  0109A8  6BD6               	clrf	(___flmul@grs+1)& (0+255),b
 12613  0109AA  6BD7               	clrf	(___flmul@grs+2)& (0+255),b
 12614  0109AC  6BD8               	clrf	(___flmul@grs+3)& (0+255),b
 12615                           
 12616                           ; BSR set to: 0
 12617  0109AE  0100               	movlb	0	; () banked
 12618  0109B0  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12619  0109B2  0100               	movlb	0	; () banked
 12620  0109B4  6FDA               	movwf	___flmul@prod& (0+255),b
 12621  0109B6  6BDB               	clrf	(___flmul@prod+1)& (0+255),b
 12622  0109B8  6BDC               	clrf	(___flmul@prod+2)& (0+255),b
 12623  0109BA  6BDD               	clrf	(___flmul@prod+3)& (0+255),b
 12624  0109BC  0100               	movlb	0	; () banked
 12625  0109BE  51CC               	movf	(___flmul@a+1)& (0+255),w,b
 12626  0109C0  0100               	movlb	0	; () banked
 12627  0109C2  03C8               	mulwf	(___flmul@b+1)& (0+255),b
 12628  0109C4  CFF3 F0DE          	movff	prodl,___flmul@temp
 12629  0109C8  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12630                           
 12631                           ; BSR set to: 0
 12632  0109CC  0100               	movlb	0	; () banked
 12633  0109CE  51DE               	movf	___flmul@temp& (0+255),w,b
 12634  0109D0  0100               	movlb	0	; () banked
 12635  0109D2  27D5               	addwf	___flmul@grs& (0+255),f,b
 12636  0109D4  0E00               	movlw	0
 12637  0109D6  23D6               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12638  0109D8  23D7               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12639  0109DA  23D8               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12640                           
 12641                           ; BSR set to: 0
 12642  0109DC  0100               	movlb	0	; () banked
 12643  0109DE  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12644  0109E0  0100               	movlb	0	; () banked
 12645  0109E2  27DA               	addwf	___flmul@prod& (0+255),f,b
 12646  0109E4  0E00               	movlw	0
 12647  0109E6  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12648  0109E8  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12649  0109EA  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12650  0109EC  0100               	movlb	0	; () banked
 12651  0109EE  51CB               	movf	___flmul@a& (0+255),w,b
 12652  0109F0  0100               	movlb	0	; () banked
 12653  0109F2  03C9               	mulwf	(___flmul@b+2)& (0+255),b
 12654  0109F4  CFF3 F0DE          	movff	prodl,___flmul@temp
 12655  0109F8  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12656                           
 12657                           ; BSR set to: 0
 12658  0109FC  0100               	movlb	0	; () banked
 12659  0109FE  51DE               	movf	___flmul@temp& (0+255),w,b
 12660  010A00  0100               	movlb	0	; () banked
 12661  010A02  27D5               	addwf	___flmul@grs& (0+255),f,b
 12662  010A04  0E00               	movlw	0
 12663  010A06  23D6               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12664  010A08  23D7               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12665  010A0A  23D8               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12666                           
 12667                           ; BSR set to: 0
 12668  010A0C  0100               	movlb	0	; () banked
 12669  010A0E  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12670  010A10  0100               	movlb	0	; () banked
 12671  010A12  27DA               	addwf	___flmul@prod& (0+255),f,b
 12672  010A14  0E00               	movlw	0
 12673  010A16  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12674  010A18  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12675  010A1A  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12676                           
 12677                           ; BSR set to: 0
 12678  010A1C  C0D7  F0D8         	movff	___flmul@grs+2,___flmul@grs+3
 12679  010A20  C0D6  F0D7         	movff	___flmul@grs+1,___flmul@grs+2
 12680  010A24  C0D5  F0D6         	movff	___flmul@grs,___flmul@grs+1
 12681  010A28  0100               	movlb	0	; () banked
 12682  010A2A  6BD5               	clrf	___flmul@grs& (0+255),b
 12683                           
 12684                           ; BSR set to: 0
 12685  010A2C  0100               	movlb	0	; () banked
 12686  010A2E  51CB               	movf	___flmul@a& (0+255),w,b
 12687  010A30  0100               	movlb	0	; () banked
 12688  010A32  03C8               	mulwf	(___flmul@b+1)& (0+255),b
 12689  010A34  CFF3 F0DE          	movff	prodl,___flmul@temp
 12690  010A38  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12691                           
 12692                           ; BSR set to: 0
 12693  010A3C  0100               	movlb	0	; () banked
 12694  010A3E  51DE               	movf	___flmul@temp& (0+255),w,b
 12695  010A40  0100               	movlb	0	; () banked
 12696  010A42  27D5               	addwf	___flmul@grs& (0+255),f,b
 12697  010A44  0100               	movlb	0	; () banked
 12698  010A46  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12699  010A48  0100               	movlb	0	; () banked
 12700  010A4A  23D6               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12701  010A4C  0E00               	movlw	0
 12702  010A4E  0100               	movlb	0	; () banked
 12703  010A50  23D7               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12704  010A52  0E00               	movlw	0
 12705  010A54  0100               	movlb	0	; () banked
 12706  010A56  23D8               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12707                           
 12708                           ; BSR set to: 0
 12709  010A58  0100               	movlb	0	; () banked
 12710  010A5A  51CC               	movf	(___flmul@a+1)& (0+255),w,b
 12711  010A5C  0100               	movlb	0	; () banked
 12712  010A5E  03C7               	mulwf	___flmul@b& (0+255),b
 12713  010A60  CFF3 F0DE          	movff	prodl,___flmul@temp
 12714  010A64  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12715                           
 12716                           ; BSR set to: 0
 12717  010A68  0100               	movlb	0	; () banked
 12718  010A6A  51DE               	movf	___flmul@temp& (0+255),w,b
 12719  010A6C  0100               	movlb	0	; () banked
 12720  010A6E  27D5               	addwf	___flmul@grs& (0+255),f,b
 12721  010A70  0100               	movlb	0	; () banked
 12722  010A72  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12723  010A74  0100               	movlb	0	; () banked
 12724  010A76  23D6               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12725  010A78  0E00               	movlw	0
 12726  010A7A  0100               	movlb	0	; () banked
 12727  010A7C  23D7               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12728  010A7E  0E00               	movlw	0
 12729  010A80  0100               	movlb	0	; () banked
 12730  010A82  23D8               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12731                           
 12732                           ; BSR set to: 0
 12733  010A84  C0D7  F0D8         	movff	___flmul@grs+2,___flmul@grs+3
 12734  010A88  C0D6  F0D7         	movff	___flmul@grs+1,___flmul@grs+2
 12735  010A8C  C0D5  F0D6         	movff	___flmul@grs,___flmul@grs+1
 12736  010A90  0100               	movlb	0	; () banked
 12737  010A92  6BD5               	clrf	___flmul@grs& (0+255),b
 12738  010A94  0100               	movlb	0	; () banked
 12739  010A96  51CB               	movf	___flmul@a& (0+255),w,b
 12740  010A98  0100               	movlb	0	; () banked
 12741  010A9A  03C7               	mulwf	___flmul@b& (0+255),b
 12742  010A9C  CFF3 F0DE          	movff	prodl,___flmul@temp
 12743  010AA0  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12744                           
 12745                           ; BSR set to: 0
 12746  010AA4  0100               	movlb	0	; () banked
 12747  010AA6  51DE               	movf	___flmul@temp& (0+255),w,b
 12748  010AA8  0100               	movlb	0	; () banked
 12749  010AAA  27D5               	addwf	___flmul@grs& (0+255),f,b
 12750  010AAC  0100               	movlb	0	; () banked
 12751  010AAE  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12752  010AB0  0100               	movlb	0	; () banked
 12753  010AB2  23D6               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12754  010AB4  0E00               	movlw	0
 12755  010AB6  0100               	movlb	0	; () banked
 12756  010AB8  23D7               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12757  010ABA  0E00               	movlw	0
 12758  010ABC  0100               	movlb	0	; () banked
 12759  010ABE  23D8               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12760                           
 12761                           ; BSR set to: 0
 12762  010AC0  0100               	movlb	0	; () banked
 12763  010AC2  51CD               	movf	(___flmul@a+2)& (0+255),w,b
 12764  010AC4  0100               	movlb	0	; () banked
 12765  010AC6  03C8               	mulwf	(___flmul@b+1)& (0+255),b
 12766  010AC8  CFF3 F0DE          	movff	prodl,___flmul@temp
 12767  010ACC  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12768  010AD0  0100               	movlb	0	; () banked
 12769  010AD2  51DE               	movf	___flmul@temp& (0+255),w,b
 12770  010AD4  0100               	movlb	0	; () banked
 12771  010AD6  27DA               	addwf	___flmul@prod& (0+255),f,b
 12772  010AD8  0100               	movlb	0	; () banked
 12773  010ADA  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12774  010ADC  0100               	movlb	0	; () banked
 12775  010ADE  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12776  010AE0  0E00               	movlw	0
 12777  010AE2  0100               	movlb	0	; () banked
 12778  010AE4  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12779  010AE6  0E00               	movlw	0
 12780  010AE8  0100               	movlb	0	; () banked
 12781  010AEA  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12782                           
 12783                           ; BSR set to: 0
 12784  010AEC  0100               	movlb	0	; () banked
 12785  010AEE  51CC               	movf	(___flmul@a+1)& (0+255),w,b
 12786  010AF0  0100               	movlb	0	; () banked
 12787  010AF2  03C9               	mulwf	(___flmul@b+2)& (0+255),b
 12788  010AF4  CFF3 F0DE          	movff	prodl,___flmul@temp
 12789  010AF8  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12790                           
 12791                           ; BSR set to: 0
 12792  010AFC  0100               	movlb	0	; () banked
 12793  010AFE  51DE               	movf	___flmul@temp& (0+255),w,b
 12794  010B00  0100               	movlb	0	; () banked
 12795  010B02  27DA               	addwf	___flmul@prod& (0+255),f,b
 12796  010B04  0100               	movlb	0	; () banked
 12797  010B06  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12798  010B08  0100               	movlb	0	; () banked
 12799  010B0A  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12800  010B0C  0E00               	movlw	0
 12801  010B0E  0100               	movlb	0	; () banked
 12802  010B10  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12803  010B12  0E00               	movlw	0
 12804  010B14  0100               	movlb	0	; () banked
 12805  010B16  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12806  010B18  0100               	movlb	0	; () banked
 12807  010B1A  51CD               	movf	(___flmul@a+2)& (0+255),w,b
 12808  010B1C  0100               	movlb	0	; () banked
 12809  010B1E  03C9               	mulwf	(___flmul@b+2)& (0+255),b
 12810  010B20  CFF3 F0DE          	movff	prodl,___flmul@temp
 12811  010B24  CFF4 F0DF          	movff	prodh,___flmul@temp+1
 12812                           
 12813                           ; BSR set to: 0
 12814  010B28  0100               	movlb	0	; () banked
 12815  010B2A  51DE               	movf	___flmul@temp& (0+255),w,b
 12816  010B2C  0100               	movlb	0	; () banked
 12817  010B2E  6FCF               	movwf	??___flmul& (0+255),b
 12818  010B30  0100               	movlb	0	; () banked
 12819  010B32  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 12820  010B34  0100               	movlb	0	; () banked
 12821  010B36  6FD0               	movwf	(??___flmul+1)& (0+255),b
 12822  010B38  0100               	movlb	0	; () banked
 12823  010B3A  6BD1               	clrf	(??___flmul+2)& (0+255),b
 12824  010B3C  0100               	movlb	0	; () banked
 12825  010B3E  6BD2               	clrf	(??___flmul+3)& (0+255),b
 12826  010B40  C0D1  F0D2         	movff	??___flmul+2,??___flmul+3
 12827  010B44  C0D0  F0D1         	movff	??___flmul+1,??___flmul+2
 12828  010B48  C0CF  F0D0         	movff	??___flmul,??___flmul+1
 12829  010B4C  0100               	movlb	0	; () banked
 12830  010B4E  6BCF               	clrf	??___flmul& (0+255),b
 12831  010B50  0100               	movlb	0	; () banked
 12832  010B52  51CF               	movf	??___flmul& (0+255),w,b
 12833  010B54  0100               	movlb	0	; () banked
 12834  010B56  27DA               	addwf	___flmul@prod& (0+255),f,b
 12835  010B58  0100               	movlb	0	; () banked
 12836  010B5A  51D0               	movf	(??___flmul+1)& (0+255),w,b
 12837  010B5C  0100               	movlb	0	; () banked
 12838  010B5E  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12839  010B60  0100               	movlb	0	; () banked
 12840  010B62  51D1               	movf	(??___flmul+2)& (0+255),w,b
 12841  010B64  0100               	movlb	0	; () banked
 12842  010B66  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12843  010B68  0100               	movlb	0	; () banked
 12844  010B6A  51D2               	movf	(??___flmul+3)& (0+255),w,b
 12845  010B6C  0100               	movlb	0	; () banked
 12846  010B6E  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12847                           
 12848                           ; BSR set to: 0
 12849  010B70  C0D5  F0CF         	movff	___flmul@grs,??___flmul
 12850  010B74  C0D6  F0D0         	movff	___flmul@grs+1,??___flmul+1
 12851  010B78  C0D7  F0D1         	movff	___flmul@grs+2,??___flmul+2
 12852  010B7C  C0D8  F0D2         	movff	___flmul@grs+3,??___flmul+3
 12853  010B80  0E19               	movlw	25
 12854  010B82  D006               	goto	u10470
 12855  010B84                     u10475:
 12856  010B84  0100               	movlb	0	; () banked
 12857  010B86  90D8               	bcf	status,0,c
 12858  010B88  33D2               	rrcf	(??___flmul+3)& (0+255),f,b
 12859  010B8A  33D1               	rrcf	(??___flmul+2)& (0+255),f,b
 12860  010B8C  33D0               	rrcf	(??___flmul+1)& (0+255),f,b
 12861  010B8E  33CF               	rrcf	??___flmul& (0+255),f,b
 12862  010B90                     u10470:
 12863  010B90  2EE8               	decfsz	wreg,f,c
 12864  010B92  D7F8               	goto	u10475
 12865  010B94  0100               	movlb	0	; () banked
 12866  010B96  51CF               	movf	??___flmul& (0+255),w,b
 12867  010B98  0100               	movlb	0	; () banked
 12868  010B9A  27DA               	addwf	___flmul@prod& (0+255),f,b
 12869  010B9C  0100               	movlb	0	; () banked
 12870  010B9E  51D0               	movf	(??___flmul+1)& (0+255),w,b
 12871  010BA0  0100               	movlb	0	; () banked
 12872  010BA2  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12873  010BA4  0100               	movlb	0	; () banked
 12874  010BA6  51D1               	movf	(??___flmul+2)& (0+255),w,b
 12875  010BA8  0100               	movlb	0	; () banked
 12876  010BAA  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12877  010BAC  0100               	movlb	0	; () banked
 12878  010BAE  51D2               	movf	(??___flmul+3)& (0+255),w,b
 12879  010BB0  0100               	movlb	0	; () banked
 12880  010BB2  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12881                           
 12882                           ; BSR set to: 0
 12883  010BB4  C0D7  F0D8         	movff	___flmul@grs+2,___flmul@grs+3
 12884  010BB8  C0D6  F0D7         	movff	___flmul@grs+1,___flmul@grs+2
 12885  010BBC  C0D5  F0D6         	movff	___flmul@grs,___flmul@grs+1
 12886  010BC0  0100               	movlb	0	; () banked
 12887  010BC2  6BD5               	clrf	___flmul@grs& (0+255),b
 12888                           
 12889                           ; BSR set to: 0
 12890  010BC4  0100               	movlb	0	; () banked
 12891  010BC6  51D4               	movf	___flmul@aexp& (0+255),w,b
 12892  010BC8  C0D9  F0CF         	movff	___flmul@bexp,??___flmul
 12893  010BCC  0100               	movlb	0	; () banked
 12894  010BCE  6BD0               	clrf	(??___flmul+1)& (0+255),b
 12895  010BD0  0100               	movlb	0	; () banked
 12896  010BD2  27CF               	addwf	??___flmul& (0+255),f,b
 12897  010BD4  0E00               	movlw	0
 12898  010BD6  23D0               	addwfc	(??___flmul+1)& (0+255),f,b
 12899  010BD8  0E82               	movlw	130
 12900  010BDA  0100               	movlb	0	; () banked
 12901  010BDC  25CF               	addwf	??___flmul& (0+255),w,b
 12902  010BDE  0100               	movlb	0	; () banked
 12903  010BE0  6FDE               	movwf	___flmul@temp& (0+255),b
 12904  010BE2  0EFF               	movlw	255
 12905  010BE4  0100               	movlb	0	; () banked
 12906  010BE6  21D0               	addwfc	(??___flmul+1)& (0+255),w,b
 12907  010BE8  0100               	movlb	0	; () banked
 12908  010BEA  6FDF               	movwf	(___flmul@temp+1)& (0+255),b
 12909  010BEC  D015               	goto	l3024
 12910  010BEE                     
 12911                           ; BSR set to: 0
 12912                           
 12913                           ; BSR set to: 0
 12914  010BEE  0100               	movlb	0	; () banked
 12915  010BF0  90D8               	bcf	status,0,c
 12916  010BF2  37DA               	rlcf	___flmul@prod& (0+255),f,b
 12917  010BF4  37DB               	rlcf	(___flmul@prod+1)& (0+255),f,b
 12918  010BF6  37DC               	rlcf	(___flmul@prod+2)& (0+255),f,b
 12919  010BF8  37DD               	rlcf	(___flmul@prod+3)& (0+255),f,b
 12920                           
 12921                           ; BSR set to: 0
 12922  010BFA  0100               	movlb	0	; () banked
 12923  010BFC  AFD8               	btfss	(___flmul@grs+3)& (0+255),7,b
 12924  010BFE  D002               	goto	l3026
 12925                           
 12926                           ; BSR set to: 0
 12927  010C00  0100               	movlb	0	; () banked
 12928  010C02  81DA               	bsf	___flmul@prod& (0+255),0,b
 12929  010C04                     l3026:
 12930                           
 12931                           ; BSR set to: 0
 12932  010C04  0100               	movlb	0	; () banked
 12933  010C06  90D8               	bcf	status,0,c
 12934  010C08  37D5               	rlcf	___flmul@grs& (0+255),f,b
 12935  010C0A  37D6               	rlcf	(___flmul@grs+1)& (0+255),f,b
 12936  010C0C  37D7               	rlcf	(___flmul@grs+2)& (0+255),f,b
 12937  010C0E  37D8               	rlcf	(___flmul@grs+3)& (0+255),f,b
 12938  010C10  0100               	movlb	0	; () banked
 12939  010C12  07DE               	decf	___flmul@temp& (0+255),f,b
 12940  010C14  A0D8               	btfss	status,0,c
 12941  010C16  07DF               	decf	(___flmul@temp+1)& (0+255),f,b
 12942  010C18                     l3024:
 12943                           
 12944                           ; BSR set to: 0
 12945                           
 12946                           ; BSR set to: 0
 12947  010C18  0100               	movlb	0	; () banked
 12948  010C1A  AFDC               	btfss	(___flmul@prod+2)& (0+255),7,b
 12949  010C1C  D7E8               	goto	l3025
 12950                           
 12951                           ; BSR set to: 0
 12952                           
 12953                           ; BSR set to: 0
 12954  010C1E  0E00               	movlw	0
 12955  010C20  0100               	movlb	0	; () banked
 12956  010C22  6FD4               	movwf	___flmul@aexp& (0+255),b
 12957                           
 12958                           ; BSR set to: 0
 12959  010C24  0100               	movlb	0	; () banked
 12960  010C26  AFD8               	btfss	(___flmul@grs+3)& (0+255),7,b
 12961  010C28  D024               	goto	l3031
 12962                           
 12963                           ; BSR set to: 0
 12964  010C2A  0EFF               	movlw	255
 12965  010C2C  0100               	movlb	0	; () banked
 12966  010C2E  15D5               	andwf	___flmul@grs& (0+255),w,b
 12967  010C30  0100               	movlb	0	; () banked
 12968  010C32  6FCF               	movwf	??___flmul& (0+255),b
 12969  010C34  0EFF               	movlw	255
 12970  010C36  0100               	movlb	0	; () banked
 12971  010C38  15D6               	andwf	(___flmul@grs+1)& (0+255),w,b
 12972  010C3A  0100               	movlb	0	; () banked
 12973  010C3C  6FD0               	movwf	(??___flmul+1)& (0+255),b
 12974  010C3E  0EFF               	movlw	255
 12975  010C40  0100               	movlb	0	; () banked
 12976  010C42  15D7               	andwf	(___flmul@grs+2)& (0+255),w,b
 12977  010C44  0100               	movlb	0	; () banked
 12978  010C46  6FD1               	movwf	(??___flmul+2)& (0+255),b
 12979  010C48  0E7F               	movlw	127
 12980  010C4A  0100               	movlb	0	; () banked
 12981  010C4C  15D8               	andwf	(___flmul@grs+3)& (0+255),w,b
 12982  010C4E  0100               	movlb	0	; () banked
 12983  010C50  6FD2               	movwf	(??___flmul+3)& (0+255),b
 12984  010C52  0100               	movlb	0	; () banked
 12985  010C54  51CF               	movf	??___flmul& (0+255),w,b
 12986  010C56  0100               	movlb	0	; () banked
 12987  010C58  11D0               	iorwf	(??___flmul+1)& (0+255),w,b
 12988  010C5A  0100               	movlb	0	; () banked
 12989  010C5C  11D1               	iorwf	(??___flmul+2)& (0+255),w,b
 12990  010C5E  0100               	movlb	0	; () banked
 12991  010C60  11D2               	iorwf	(??___flmul+3)& (0+255),w,b
 12992  010C62  A4D8               	btfss	status,2,c
 12993  010C64  D003               	goto	u10520
 12994                           
 12995                           ; BSR set to: 0
 12996                           
 12997                           ; BSR set to: 0
 12998  010C66  0100               	movlb	0	; () banked
 12999  010C68  A1DA               	btfss	___flmul@prod& (0+255),0,b
 13000  010C6A  D003               	goto	l3031
 13001  010C6C                     u10520:
 13002                           
 13003                           ; BSR set to: 0
 13004  010C6C  0E01               	movlw	1
 13005  010C6E  0100               	movlb	0	; () banked
 13006  010C70  6FD4               	movwf	___flmul@aexp& (0+255),b
 13007  010C72                     l3031:
 13008                           
 13009                           ; BSR set to: 0
 13010                           
 13011                           ; BSR set to: 0
 13012                           
 13013                           ; BSR set to: 0
 13014  010C72  0100               	movlb	0	; () banked
 13015  010C74  51D4               	movf	___flmul@aexp& (0+255),w,b
 13016  010C76  0100               	movlb	0	; () banked
 13017  010C78  B4D8               	btfsc	status,2,c
 13018  010C7A  D023               	goto	l3033
 13019                           
 13020                           ; BSR set to: 0
 13021  010C7C  0E01               	movlw	1
 13022  010C7E  0100               	movlb	0	; () banked
 13023  010C80  27DA               	addwf	___flmul@prod& (0+255),f,b
 13024  010C82  0E00               	movlw	0
 13025  010C84  23DB               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13026  010C86  23DC               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13027  010C88  23DD               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13028                           
 13029                           ; BSR set to: 0
 13030  010C8A  0100               	movlb	0	; () banked
 13031  010C8C  A1DD               	btfss	(___flmul@prod+3)& (0+255),0,b
 13032  010C8E  D019               	goto	l3033
 13033                           
 13034                           ; BSR set to: 0
 13035  010C90  C0DA  F0CF         	movff	___flmul@prod,??___flmul
 13036  010C94  C0DB  F0D0         	movff	___flmul@prod+1,??___flmul+1
 13037  010C98  C0DC  F0D1         	movff	___flmul@prod+2,??___flmul+2
 13038  010C9C  C0DD  F0D2         	movff	___flmul@prod+3,??___flmul+3
 13039  010CA0  0100               	movlb	0	; () banked
 13040  010CA2  35D2               	rlcf	(??___flmul+3)& (0+255),w,b
 13041  010CA4  33D2               	rrcf	(??___flmul+3)& (0+255),f,b
 13042  010CA6  33D1               	rrcf	(??___flmul+2)& (0+255),f,b
 13043  010CA8  33D0               	rrcf	(??___flmul+1)& (0+255),f,b
 13044  010CAA  33CF               	rrcf	??___flmul& (0+255),f,b
 13045  010CAC  C0CF  F0DA         	movff	??___flmul,___flmul@prod
 13046  010CB0  C0D0  F0DB         	movff	??___flmul+1,___flmul@prod+1
 13047  010CB4  C0D1  F0DC         	movff	??___flmul+2,___flmul@prod+2
 13048  010CB8  C0D2  F0DD         	movff	??___flmul+3,___flmul@prod+3
 13049                           
 13050                           ; BSR set to: 0
 13051  010CBC  0100               	movlb	0	; () banked
 13052  010CBE  4BDE               	infsnz	___flmul@temp& (0+255),f,b
 13053  010CC0  2BDF               	incf	(___flmul@temp+1)& (0+255),f,b
 13054  010CC2                     l3033:
 13055                           
 13056                           ; BSR set to: 0
 13057                           
 13058                           ; BSR set to: 0
 13059                           
 13060                           ; BSR set to: 0
 13061  010CC2  0100               	movlb	0	; () banked
 13062  010CC4  BFDF               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13063  010CC6  D010               	goto	l3034
 13064  010CC8  0100               	movlb	0	; () banked
 13065  010CCA  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 13066  010CCC  E104               	bnz	u10550
 13067  010CCE  0100               	movlb	0	; () banked
 13068  010CD0  29DE               	incf	___flmul@temp& (0+255),w,b
 13069  010CD2  A0D8               	btfss	status,0,c
 13070  010CD4  D009               	goto	l3034
 13071  010CD6                     u10550:
 13072                           
 13073                           ; BSR set to: 0
 13074  010CD6  0E00               	movlw	0
 13075  010CD8  0100               	movlb	0	; () banked
 13076  010CDA  6FDA               	movwf	___flmul@prod& (0+255),b
 13077  010CDC  0E00               	movlw	0
 13078  010CDE  6FDB               	movwf	(___flmul@prod+1)& (0+255),b
 13079  010CE0  0E80               	movlw	128
 13080  010CE2  6FDC               	movwf	(___flmul@prod+2)& (0+255),b
 13081  010CE4  0E7F               	movlw	127
 13082  010CE6  D02B               	goto	L5
 13083  010CE8                     l3034:
 13084                           
 13085                           ; BSR set to: 0
 13086                           
 13087                           ; BSR set to: 0
 13088  010CE8  0100               	movlb	0	; () banked
 13089  010CEA  BFDF               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13090  010CEC  D007               	goto	u10560
 13091  010CEE  0100               	movlb	0	; () banked
 13092  010CF0  51DF               	movf	(___flmul@temp+1)& (0+255),w,b
 13093  010CF2  E111               	bnz	l3036
 13094  010CF4  0100               	movlb	0	; () banked
 13095  010CF6  05DE               	decf	___flmul@temp& (0+255),w,b
 13096  010CF8  B0D8               	btfsc	status,0,c
 13097  010CFA  D00D               	goto	l3036
 13098  010CFC                     u10560:
 13099                           
 13100                           ; BSR set to: 0
 13101  010CFC  0E00               	movlw	0
 13102  010CFE  0100               	movlb	0	; () banked
 13103  010D00  6FDA               	movwf	___flmul@prod& (0+255),b
 13104  010D02  0E00               	movlw	0
 13105  010D04  6FDB               	movwf	(___flmul@prod+1)& (0+255),b
 13106  010D06  0E00               	movlw	0
 13107  010D08  6FDC               	movwf	(___flmul@prod+2)& (0+255),b
 13108  010D0A  0E00               	movlw	0
 13109  010D0C  6FDD               	movwf	(___flmul@prod+3)& (0+255),b
 13110  010D0E  0E00               	movlw	0
 13111  010D10  0100               	movlb	0	; () banked
 13112  010D12  6FD3               	movwf	___flmul@sign& (0+255),b
 13113  010D14  D015               	goto	l3037
 13114  010D16                     l3036:
 13115                           
 13116                           ; BSR set to: 0
 13117  010D16  C0DE  F0D9         	movff	___flmul@temp,___flmul@bexp
 13118                           
 13119                           ; BSR set to: 0
 13120  010D1A  0EFF               	movlw	255
 13121  010D1C  0100               	movlb	0	; () banked
 13122  010D1E  17DA               	andwf	___flmul@prod& (0+255),f,b
 13123  010D20  0EFF               	movlw	255
 13124  010D22  17DB               	andwf	(___flmul@prod+1)& (0+255),f,b
 13125  010D24  0E7F               	movlw	127
 13126  010D26  17DC               	andwf	(___flmul@prod+2)& (0+255),f,b
 13127  010D28  0E00               	movlw	0
 13128  010D2A  17DD               	andwf	(___flmul@prod+3)& (0+255),f,b
 13129                           
 13130                           ; BSR set to: 0
 13131  010D2C  0100               	movlb	0	; () banked
 13132  010D2E  A1D9               	btfss	___flmul@bexp& (0+255),0,b
 13133  010D30  D002               	goto	l3038
 13134                           
 13135                           ; BSR set to: 0
 13136  010D32  0100               	movlb	0	; () banked
 13137  010D34  8FDC               	bsf	(___flmul@prod+2)& (0+255),7,b
 13138  010D36                     l3038:
 13139                           
 13140                           ; BSR set to: 0
 13141                           
 13142                           ; BSR set to: 0
 13143  010D36  0100               	movlb	0	; () banked
 13144  010D38  90D8               	bcf	status,0,c
 13145  010D3A  31D9               	rrcf	___flmul@bexp& (0+255),w,b
 13146  010D3C  0100               	movlb	0	; () banked
 13147  010D3E                     L5:
 13148  010D3E  6FDD               	movwf	(___flmul@prod+3)& (0+255),b
 13149  010D40                     l3037:
 13150                           
 13151                           ; BSR set to: 0
 13152                           
 13153                           ; BSR set to: 0
 13154                           
 13155                           ; BSR set to: 0
 13156  010D40  0100               	movlb	0	; () banked
 13157  010D42  51D3               	movf	___flmul@sign& (0+255),w,b
 13158  010D44  0100               	movlb	0	; () banked
 13159  010D46  13DD               	iorwf	(___flmul@prod+3)& (0+255),f,b
 13160                           
 13161                           ; BSR set to: 0
 13162  010D48  C0DA  F0C7         	movff	___flmul@prod,?___flmul
 13163  010D4C  C0DB  F0C8         	movff	___flmul@prod+1,?___flmul+1
 13164  010D50  C0DC  F0C9         	movff	___flmul@prod+2,?___flmul+2
 13165  010D54  C0DD  F0CA         	movff	___flmul@prod+3,?___flmul+3
 13166  010D58  0012               	return	
 13167  010D5A                     __end_of___flmul:
 13168                           	opt stack 0
 13169                           tblptru	equ	0xFF8
 13170                           tblptrh	equ	0xFF7
 13171                           tblptrl	equ	0xFF6
 13172                           tablat	equ	0xFF5
 13173                           prodh	equ	0xFF4
 13174                           prodl	equ	0xFF3
 13175                           intcon	equ	0xFF2
 13176                           postinc0	equ	0xFEE
 13177                           wreg	equ	0xFE8
 13178                           postdec1	equ	0xFE5
 13179                           fsr1h	equ	0xFE2
 13180                           fsr1l	equ	0xFE1
 13181                           indf2	equ	0xFDF
 13182                           postinc2	equ	0xFDE
 13183                           postdec2	equ	0xFDD
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function ___fldiv *****************
 13189 ;; Defined at:
 13190 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  b               4    0[BANK0 ] unsigned char 
 13193 ;;  a               4    4[BANK0 ] unsigned char 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;  grs             4   19[BANK0 ] unsigned long 
 13196 ;;  rem             4   13[BANK0 ] unsigned long 
 13197 ;;  new_exp         2   17[BANK0 ] int 
 13198 ;;  aexp            1   24[BANK0 ] unsigned char 
 13199 ;;  bexp            1   23[BANK0 ] unsigned char 
 13200 ;;  sign            1   12[BANK0 ] unsigned char 
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  4    0[BANK0 ] unsigned char 
 13203 ;; Registers used:
 13204 ;;		wreg, status,2, status,0
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13210 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13211 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13213 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13214 ;;Total ram usage:       25 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    7
 13217 ;; This function calls:
 13218 ;;		Nothing
 13219 ;; This function is called by:
 13220 ;;		_ADC_Voltage
 13221 ;;		_findClosestWall
 13222 ;;		_measureAndDisplayDistance
 13223 ;;		_mode1
 13224 ;; This function uses a non-reentrant model
 13225 ;;
 13226                           
 13227                           	psect	text49
 13228  01154C                     __ptext49:
 13229                           	opt stack 0
 13230  01154C                     ___fldiv:
 13231                           	opt stack 21
 13232                           
 13233                           ; BSR set to: 0
 13234                           ;incstack = 0
 13235  01154C  0100               	movlb	0	; () banked
 13236  01154E  51BC               	movf	(___fldiv@b+3)& (0+255),w,b
 13237  011550  0B80               	andlw	128
 13238  011552  0100               	movlb	0	; () banked
 13239  011554  6FC5               	movwf	___fldiv@sign& (0+255),b
 13240  011556  0100               	movlb	0	; () banked
 13241  011558  51BC               	movf	(___fldiv@b+3)& (0+255),w,b
 13242  01155A  25BC               	addwf	(___fldiv@b+3)& (0+255),w,b
 13243  01155C  0100               	movlb	0	; () banked
 13244  01155E  6FD0               	movwf	___fldiv@bexp& (0+255),b
 13245                           
 13246                           ; BSR set to: 0
 13247  011560  0100               	movlb	0	; () banked
 13248  011562  AFBB               	btfss	(___fldiv@b+2)& (0+255),7,b
 13249  011564  D002               	goto	l2978
 13250                           
 13251                           ; BSR set to: 0
 13252  011566  0100               	movlb	0	; () banked
 13253  011568  81D0               	bsf	___fldiv@bexp& (0+255),0,b
 13254  01156A                     l2978:
 13255                           
 13256                           ; BSR set to: 0
 13257                           
 13258                           ; BSR set to: 0
 13259  01156A  0100               	movlb	0	; () banked
 13260  01156C  51D0               	movf	___fldiv@bexp& (0+255),w,b
 13261  01156E  0100               	movlb	0	; () banked
 13262  011570  B4D8               	btfsc	status,2,c
 13263  011572  D012               	goto	l2979
 13264                           
 13265                           ; BSR set to: 0
 13266  011574  0100               	movlb	0	; () banked
 13267  011576  29D0               	incf	___fldiv@bexp& (0+255),w,b
 13268  011578  A4D8               	btfss	status,2,c
 13269  01157A  D009               	goto	l2980
 13270                           
 13271                           ; BSR set to: 0
 13272  01157C  0E00               	movlw	0
 13273  01157E  0100               	movlb	0	; () banked
 13274  011580  6FB9               	movwf	___fldiv@b& (0+255),b
 13275  011582  0E00               	movlw	0
 13276  011584  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13277  011586  0E00               	movlw	0
 13278  011588  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13279  01158A  0E00               	movlw	0
 13280  01158C  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13281  01158E                     l2980:
 13282                           
 13283                           ; BSR set to: 0
 13284                           
 13285                           ; BSR set to: 0
 13286  01158E  0100               	movlb	0	; () banked
 13287  011590  8FBB               	bsf	(___fldiv@b+2)& (0+255),7,b
 13288                           
 13289                           ; BSR set to: 0
 13290  011592  0E00               	movlw	0
 13291  011594  0100               	movlb	0	; () banked
 13292  011596  D008               	goto	L6
 13293  011598                     l2979:
 13294                           
 13295                           ; BSR set to: 0
 13296                           
 13297                           ; BSR set to: 0
 13298  011598  0E00               	movlw	0
 13299  01159A  0100               	movlb	0	; () banked
 13300  01159C  6FB9               	movwf	___fldiv@b& (0+255),b
 13301  01159E  0E00               	movlw	0
 13302  0115A0  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13303  0115A2  0E00               	movlw	0
 13304  0115A4  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13305  0115A6  0E00               	movlw	0
 13306  0115A8                     L6:
 13307  0115A8  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13308                           
 13309                           ; BSR set to: 0
 13310                           
 13311                           ; BSR set to: 0
 13312  0115AA  0100               	movlb	0	; () banked
 13313  0115AC  51C0               	movf	(___fldiv@a+3)& (0+255),w,b
 13314  0115AE  0B80               	andlw	128
 13315  0115B0  0100               	movlb	0	; () banked
 13316  0115B2  1BC5               	xorwf	___fldiv@sign& (0+255),f,b
 13317                           
 13318                           ; BSR set to: 0
 13319  0115B4  0100               	movlb	0	; () banked
 13320  0115B6  51C0               	movf	(___fldiv@a+3)& (0+255),w,b
 13321  0115B8  25C0               	addwf	(___fldiv@a+3)& (0+255),w,b
 13322  0115BA  0100               	movlb	0	; () banked
 13323  0115BC  6FD1               	movwf	___fldiv@aexp& (0+255),b
 13324                           
 13325                           ; BSR set to: 0
 13326  0115BE  0100               	movlb	0	; () banked
 13327  0115C0  AFBF               	btfss	(___fldiv@a+2)& (0+255),7,b
 13328  0115C2  D002               	goto	l2982
 13329                           
 13330                           ; BSR set to: 0
 13331  0115C4  0100               	movlb	0	; () banked
 13332  0115C6  81D1               	bsf	___fldiv@aexp& (0+255),0,b
 13333  0115C8                     l2982:
 13334                           
 13335                           ; BSR set to: 0
 13336                           
 13337                           ; BSR set to: 0
 13338  0115C8  0100               	movlb	0	; () banked
 13339  0115CA  51D1               	movf	___fldiv@aexp& (0+255),w,b
 13340  0115CC  0100               	movlb	0	; () banked
 13341  0115CE  B4D8               	btfsc	status,2,c
 13342  0115D0  D012               	goto	l2983
 13343                           
 13344                           ; BSR set to: 0
 13345  0115D2  0100               	movlb	0	; () banked
 13346  0115D4  29D1               	incf	___fldiv@aexp& (0+255),w,b
 13347  0115D6  A4D8               	btfss	status,2,c
 13348  0115D8  D009               	goto	l2984
 13349                           
 13350                           ; BSR set to: 0
 13351  0115DA  0E00               	movlw	0
 13352  0115DC  0100               	movlb	0	; () banked
 13353  0115DE  6FBD               	movwf	___fldiv@a& (0+255),b
 13354  0115E0  0E00               	movlw	0
 13355  0115E2  6FBE               	movwf	(___fldiv@a+1)& (0+255),b
 13356  0115E4  0E00               	movlw	0
 13357  0115E6  6FBF               	movwf	(___fldiv@a+2)& (0+255),b
 13358  0115E8  0E00               	movlw	0
 13359  0115EA  6FC0               	movwf	(___fldiv@a+3)& (0+255),b
 13360  0115EC                     l2984:
 13361                           
 13362                           ; BSR set to: 0
 13363                           
 13364                           ; BSR set to: 0
 13365  0115EC  0100               	movlb	0	; () banked
 13366  0115EE  8FBF               	bsf	(___fldiv@a+2)& (0+255),7,b
 13367                           
 13368                           ; BSR set to: 0
 13369  0115F0  0E00               	movlw	0
 13370  0115F2  0100               	movlb	0	; () banked
 13371  0115F4  D008               	goto	L7
 13372  0115F6                     l2983:
 13373                           
 13374                           ; BSR set to: 0
 13375                           
 13376                           ; BSR set to: 0
 13377  0115F6  0E00               	movlw	0
 13378  0115F8  0100               	movlb	0	; () banked
 13379  0115FA  6FBD               	movwf	___fldiv@a& (0+255),b
 13380  0115FC  0E00               	movlw	0
 13381  0115FE  6FBE               	movwf	(___fldiv@a+1)& (0+255),b
 13382  011600  0E00               	movlw	0
 13383  011602  6FBF               	movwf	(___fldiv@a+2)& (0+255),b
 13384  011604  0E00               	movlw	0
 13385  011606                     L7:
 13386  011606  6FC0               	movwf	(___fldiv@a+3)& (0+255),b
 13387                           
 13388                           ; BSR set to: 0
 13389                           
 13390                           ; BSR set to: 0
 13391  011608  0100               	movlb	0	; () banked
 13392  01160A  51BD               	movf	___fldiv@a& (0+255),w,b
 13393  01160C  0100               	movlb	0	; () banked
 13394  01160E  11BE               	iorwf	(___fldiv@a+1)& (0+255),w,b
 13395  011610  0100               	movlb	0	; () banked
 13396  011612  11BF               	iorwf	(___fldiv@a+2)& (0+255),w,b
 13397  011614  0100               	movlb	0	; () banked
 13398  011616  11C0               	iorwf	(___fldiv@a+3)& (0+255),w,b
 13399  011618  A4D8               	btfss	status,2,c
 13400  01161A  D017               	goto	l2986
 13401                           
 13402                           ; BSR set to: 0
 13403  01161C  0E00               	movlw	0
 13404  01161E  0100               	movlb	0	; () banked
 13405  011620  6FB9               	movwf	___fldiv@b& (0+255),b
 13406  011622  0E00               	movlw	0
 13407  011624  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13408  011626  0E00               	movlw	0
 13409  011628  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13410  01162A  0E00               	movlw	0
 13411  01162C  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13412                           
 13413                           ; BSR set to: 0
 13414  01162E  0100               	movlb	0	; () banked
 13415  011630  0E80               	movlw	128
 13416  011632  13BB               	iorwf	(___fldiv@b+2)& (0+255),f,b
 13417  011634  0E7F               	movlw	127
 13418  011636  13BC               	iorwf	(___fldiv@b+3)& (0+255),f,b
 13419                           
 13420                           ; BSR set to: 0
 13421  011638  C0B9  F0B9         	movff	___fldiv@b,?___fldiv
 13422  01163C  C0BA  F0BA         	movff	___fldiv@b+1,?___fldiv+1
 13423  011640  C0BB  F0BB         	movff	___fldiv@b+2,?___fldiv+2
 13424  011644  C0BC  F0BC         	movff	___fldiv@b+3,?___fldiv+3
 13425                           
 13426                           ; BSR set to: 0
 13427  011648  0012               	return	
 13428  01164A                     l2986:
 13429                           
 13430                           ; BSR set to: 0
 13431                           
 13432                           ; BSR set to: 0
 13433  01164A  0100               	movlb	0	; () banked
 13434  01164C  51D0               	movf	___fldiv@bexp& (0+255),w,b
 13435  01164E  0100               	movlb	0	; () banked
 13436  011650  A4D8               	btfss	status,2,c
 13437  011652  D012               	goto	l2988
 13438                           
 13439                           ; BSR set to: 0
 13440  011654  0E00               	movlw	0
 13441  011656  0100               	movlb	0	; () banked
 13442  011658  6FB9               	movwf	___fldiv@b& (0+255),b
 13443  01165A  0E00               	movlw	0
 13444  01165C  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13445  01165E  0E00               	movlw	0
 13446  011660  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13447  011662  0E00               	movlw	0
 13448  011664  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13449                           
 13450                           ; BSR set to: 0
 13451  011666  C0B9  F0B9         	movff	___fldiv@b,?___fldiv
 13452  01166A  C0BA  F0BA         	movff	___fldiv@b+1,?___fldiv+1
 13453  01166E  C0BB  F0BB         	movff	___fldiv@b+2,?___fldiv+2
 13454  011672  C0BC  F0BC         	movff	___fldiv@b+3,?___fldiv+3
 13455                           
 13456                           ; BSR set to: 0
 13457  011676  0012               	return	
 13458  011678                     l2988:
 13459                           
 13460                           ; BSR set to: 0
 13461                           
 13462                           ; BSR set to: 0
 13463  011678  0100               	movlb	0	; () banked
 13464  01167A  51D1               	movf	___fldiv@aexp& (0+255),w,b
 13465  01167C  0100               	movlb	0	; () banked
 13466  01167E  6FC1               	movwf	??___fldiv& (0+255),b
 13467  011680  6BC2               	clrf	(??___fldiv+1)& (0+255),b
 13468  011682  0100               	movlb	0	; () banked
 13469  011684  1FC1               	comf	??___fldiv& (0+255),f,b
 13470  011686  1FC2               	comf	(??___fldiv+1)& (0+255),f,b
 13471  011688  4BC1               	infsnz	??___fldiv& (0+255),f,b
 13472  01168A  2BC2               	incf	(??___fldiv+1)& (0+255),f,b
 13473  01168C  0100               	movlb	0	; () banked
 13474  01168E  51D0               	movf	___fldiv@bexp& (0+255),w,b
 13475  011690  0100               	movlb	0	; () banked
 13476  011692  6FC3               	movwf	(??___fldiv+2)& (0+255),b
 13477  011694  6BC4               	clrf	(??___fldiv+3)& (0+255),b
 13478  011696  0100               	movlb	0	; () banked
 13479  011698  51C1               	movf	??___fldiv& (0+255),w,b
 13480  01169A  0100               	movlb	0	; () banked
 13481  01169C  27C3               	addwf	(??___fldiv+2)& (0+255),f,b
 13482  01169E  0100               	movlb	0	; () banked
 13483  0116A0  51C2               	movf	(??___fldiv+1)& (0+255),w,b
 13484  0116A2  0100               	movlb	0	; () banked
 13485  0116A4  23C4               	addwfc	(??___fldiv+3)& (0+255),f,b
 13486  0116A6  0E7F               	movlw	127
 13487  0116A8  0100               	movlb	0	; () banked
 13488  0116AA  25C3               	addwf	(??___fldiv+2)& (0+255),w,b
 13489  0116AC  0100               	movlb	0	; () banked
 13490  0116AE  6FCA               	movwf	___fldiv@new_exp& (0+255),b
 13491  0116B0  0E00               	movlw	0
 13492  0116B2  0100               	movlb	0	; () banked
 13493  0116B4  21C4               	addwfc	(??___fldiv+3)& (0+255),w,b
 13494  0116B6  0100               	movlb	0	; () banked
 13495  0116B8  6FCB               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13496                           
 13497                           ; BSR set to: 0
 13498  0116BA  C0B9  F0C6         	movff	___fldiv@b,___fldiv@rem
 13499  0116BE  C0BA  F0C7         	movff	___fldiv@b+1,___fldiv@rem+1
 13500  0116C2  C0BB  F0C8         	movff	___fldiv@b+2,___fldiv@rem+2
 13501  0116C6  C0BC  F0C9         	movff	___fldiv@b+3,___fldiv@rem+3
 13502                           
 13503                           ; BSR set to: 0
 13504  0116CA  0E00               	movlw	0
 13505  0116CC  0100               	movlb	0	; () banked
 13506  0116CE  6FB9               	movwf	___fldiv@b& (0+255),b
 13507  0116D0  0E00               	movlw	0
 13508  0116D2  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13509  0116D4  0E00               	movlw	0
 13510  0116D6  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13511  0116D8  0E00               	movlw	0
 13512  0116DA  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13513                           
 13514                           ; BSR set to: 0
 13515  0116DC  0E00               	movlw	0
 13516  0116DE  0100               	movlb	0	; () banked
 13517  0116E0  6FCC               	movwf	___fldiv@grs& (0+255),b
 13518  0116E2  0E00               	movlw	0
 13519  0116E4  6FCD               	movwf	(___fldiv@grs+1)& (0+255),b
 13520  0116E6  0E00               	movlw	0
 13521  0116E8  6FCE               	movwf	(___fldiv@grs+2)& (0+255),b
 13522  0116EA  0E00               	movlw	0
 13523  0116EC  6FCF               	movwf	(___fldiv@grs+3)& (0+255),b
 13524                           
 13525                           ; BSR set to: 0
 13526  0116EE  0E00               	movlw	0
 13527  0116F0  0100               	movlb	0	; () banked
 13528  0116F2  6FD1               	movwf	___fldiv@aexp& (0+255),b
 13529  0116F4  D042               	goto	l2989
 13530  0116F6                     
 13531                           ; BSR set to: 0
 13532                           
 13533                           ; BSR set to: 0
 13534  0116F6  0100               	movlb	0	; () banked
 13535  0116F8  51D1               	movf	___fldiv@aexp& (0+255),w,b
 13536  0116FA  0100               	movlb	0	; () banked
 13537  0116FC  B4D8               	btfsc	status,2,c
 13538  0116FE  D017               	goto	l2991
 13539                           
 13540                           ; BSR set to: 0
 13541  011700  0100               	movlb	0	; () banked
 13542  011702  90D8               	bcf	status,0,c
 13543  011704  37C6               	rlcf	___fldiv@rem& (0+255),f,b
 13544  011706  37C7               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 13545  011708  37C8               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 13546  01170A  37C9               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 13547  01170C  0100               	movlb	0	; () banked
 13548  01170E  90D8               	bcf	status,0,c
 13549  011710  37B9               	rlcf	___fldiv@b& (0+255),f,b
 13550  011712  37BA               	rlcf	(___fldiv@b+1)& (0+255),f,b
 13551  011714  37BB               	rlcf	(___fldiv@b+2)& (0+255),f,b
 13552  011716  37BC               	rlcf	(___fldiv@b+3)& (0+255),f,b
 13553                           
 13554                           ; BSR set to: 0
 13555  011718  0100               	movlb	0	; () banked
 13556  01171A  AFCF               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13557  01171C  D002               	goto	l2992
 13558                           
 13559                           ; BSR set to: 0
 13560  01171E  0100               	movlb	0	; () banked
 13561  011720  81B9               	bsf	___fldiv@b& (0+255),0,b
 13562  011722                     l2992:
 13563                           
 13564                           ; BSR set to: 0
 13565  011722  0100               	movlb	0	; () banked
 13566  011724  90D8               	bcf	status,0,c
 13567  011726  37CC               	rlcf	___fldiv@grs& (0+255),f,b
 13568  011728  37CD               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 13569  01172A  37CE               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 13570  01172C  37CF               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 13571  01172E                     l2991:
 13572                           
 13573                           ; BSR set to: 0
 13574                           
 13575                           ; BSR set to: 0
 13576  01172E  0100               	movlb	0	; () banked
 13577  011730  51BD               	movf	___fldiv@a& (0+255),w,b
 13578  011732  0100               	movlb	0	; () banked
 13579  011734  5DC6               	subwf	___fldiv@rem& (0+255),w,b
 13580  011736  0100               	movlb	0	; () banked
 13581  011738  51BE               	movf	(___fldiv@a+1)& (0+255),w,b
 13582  01173A  0100               	movlb	0	; () banked
 13583  01173C  59C7               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 13584  01173E  0100               	movlb	0	; () banked
 13585  011740  51BF               	movf	(___fldiv@a+2)& (0+255),w,b
 13586  011742  0100               	movlb	0	; () banked
 13587  011744  59C8               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 13588  011746  0100               	movlb	0	; () banked
 13589  011748  51C0               	movf	(___fldiv@a+3)& (0+255),w,b
 13590  01174A  0100               	movlb	0	; () banked
 13591  01174C  59C9               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 13592  01174E  A0D8               	btfss	status,0,c
 13593  011750  D012               	goto	l2993
 13594                           
 13595                           ; BSR set to: 0
 13596  011752  0100               	movlb	0	; () banked
 13597  011754  8DCF               	bsf	(___fldiv@grs+3)& (0+255),6,b
 13598                           
 13599                           ; BSR set to: 0
 13600  011756  0100               	movlb	0	; () banked
 13601  011758  51BD               	movf	___fldiv@a& (0+255),w,b
 13602  01175A  0100               	movlb	0	; () banked
 13603  01175C  5FC6               	subwf	___fldiv@rem& (0+255),f,b
 13604  01175E  0100               	movlb	0	; () banked
 13605  011760  51BE               	movf	(___fldiv@a+1)& (0+255),w,b
 13606  011762  0100               	movlb	0	; () banked
 13607  011764  5BC7               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 13608  011766  0100               	movlb	0	; () banked
 13609  011768  51BF               	movf	(___fldiv@a+2)& (0+255),w,b
 13610  01176A  0100               	movlb	0	; () banked
 13611  01176C  5BC8               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 13612  01176E  0100               	movlb	0	; () banked
 13613  011770  51C0               	movf	(___fldiv@a+3)& (0+255),w,b
 13614  011772  0100               	movlb	0	; () banked
 13615  011774  5BC9               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 13616  011776                     l2993:
 13617                           
 13618                           ; BSR set to: 0
 13619                           
 13620                           ; BSR set to: 0
 13621  011776  0100               	movlb	0	; () banked
 13622  011778  2BD1               	incf	___fldiv@aexp& (0+255),f,b
 13623  01177A                     l2989:
 13624                           
 13625                           ; BSR set to: 0
 13626  01177A  0E19               	movlw	25
 13627  01177C  0100               	movlb	0	; () banked
 13628  01177E  65D1               	cpfsgt	___fldiv@aexp& (0+255),b
 13629  011780  D7BA               	goto	l2990
 13630                           
 13631                           ; BSR set to: 0
 13632                           
 13633                           ; BSR set to: 0
 13634  011782  0100               	movlb	0	; () banked
 13635  011784  51C6               	movf	___fldiv@rem& (0+255),w,b
 13636  011786  0100               	movlb	0	; () banked
 13637  011788  11C7               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 13638  01178A  0100               	movlb	0	; () banked
 13639  01178C  11C8               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 13640  01178E  0100               	movlb	0	; () banked
 13641  011790  11C9               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 13642  011792  B4D8               	btfsc	status,2,c
 13643  011794  D018               	goto	l2996
 13644                           
 13645                           ; BSR set to: 0
 13646  011796  0100               	movlb	0	; () banked
 13647  011798  81CC               	bsf	___fldiv@grs& (0+255),0,b
 13648                           
 13649                           ; BSR set to: 0
 13650  01179A  D015               	goto	l2996
 13651  01179C                     
 13652                           ; BSR set to: 0
 13653                           
 13654                           ; BSR set to: 0
 13655  01179C  0100               	movlb	0	; () banked
 13656  01179E  90D8               	bcf	status,0,c
 13657  0117A0  37B9               	rlcf	___fldiv@b& (0+255),f,b
 13658  0117A2  37BA               	rlcf	(___fldiv@b+1)& (0+255),f,b
 13659  0117A4  37BB               	rlcf	(___fldiv@b+2)& (0+255),f,b
 13660  0117A6  37BC               	rlcf	(___fldiv@b+3)& (0+255),f,b
 13661                           
 13662                           ; BSR set to: 0
 13663  0117A8  0100               	movlb	0	; () banked
 13664  0117AA  AFCF               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13665  0117AC  D002               	goto	l2998
 13666                           
 13667                           ; BSR set to: 0
 13668  0117AE  0100               	movlb	0	; () banked
 13669  0117B0  81B9               	bsf	___fldiv@b& (0+255),0,b
 13670  0117B2                     l2998:
 13671                           
 13672                           ; BSR set to: 0
 13673  0117B2  0100               	movlb	0	; () banked
 13674  0117B4  90D8               	bcf	status,0,c
 13675  0117B6  37CC               	rlcf	___fldiv@grs& (0+255),f,b
 13676  0117B8  37CD               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 13677  0117BA  37CE               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 13678  0117BC  37CF               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 13679  0117BE  0100               	movlb	0	; () banked
 13680  0117C0  07CA               	decf	___fldiv@new_exp& (0+255),f,b
 13681  0117C2  A0D8               	btfss	status,0,c
 13682  0117C4  07CB               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 13683  0117C6                     l2996:
 13684                           
 13685                           ; BSR set to: 0
 13686                           
 13687                           ; BSR set to: 0
 13688  0117C6  0100               	movlb	0	; () banked
 13689  0117C8  AFBB               	btfss	(___fldiv@b+2)& (0+255),7,b
 13690  0117CA  D7E8               	goto	l2997
 13691                           
 13692                           ; BSR set to: 0
 13693                           
 13694                           ; BSR set to: 0
 13695  0117CC  0E00               	movlw	0
 13696  0117CE  0100               	movlb	0	; () banked
 13697  0117D0  6FD1               	movwf	___fldiv@aexp& (0+255),b
 13698                           
 13699                           ; BSR set to: 0
 13700  0117D2  0100               	movlb	0	; () banked
 13701  0117D4  AFCF               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13702  0117D6  D024               	goto	l3003
 13703                           
 13704                           ; BSR set to: 0
 13705  0117D8  0EFF               	movlw	255
 13706  0117DA  0100               	movlb	0	; () banked
 13707  0117DC  15CC               	andwf	___fldiv@grs& (0+255),w,b
 13708  0117DE  0100               	movlb	0	; () banked
 13709  0117E0  6FC1               	movwf	??___fldiv& (0+255),b
 13710  0117E2  0EFF               	movlw	255
 13711  0117E4  0100               	movlb	0	; () banked
 13712  0117E6  15CD               	andwf	(___fldiv@grs+1)& (0+255),w,b
 13713  0117E8  0100               	movlb	0	; () banked
 13714  0117EA  6FC2               	movwf	(??___fldiv+1)& (0+255),b
 13715  0117EC  0EFF               	movlw	255
 13716  0117EE  0100               	movlb	0	; () banked
 13717  0117F0  15CE               	andwf	(___fldiv@grs+2)& (0+255),w,b
 13718  0117F2  0100               	movlb	0	; () banked
 13719  0117F4  6FC3               	movwf	(??___fldiv+2)& (0+255),b
 13720  0117F6  0E7F               	movlw	127
 13721  0117F8  0100               	movlb	0	; () banked
 13722  0117FA  15CF               	andwf	(___fldiv@grs+3)& (0+255),w,b
 13723  0117FC  0100               	movlb	0	; () banked
 13724  0117FE  6FC4               	movwf	(??___fldiv+3)& (0+255),b
 13725  011800  0100               	movlb	0	; () banked
 13726  011802  51C1               	movf	??___fldiv& (0+255),w,b
 13727  011804  0100               	movlb	0	; () banked
 13728  011806  11C2               	iorwf	(??___fldiv+1)& (0+255),w,b
 13729  011808  0100               	movlb	0	; () banked
 13730  01180A  11C3               	iorwf	(??___fldiv+2)& (0+255),w,b
 13731  01180C  0100               	movlb	0	; () banked
 13732  01180E  11C4               	iorwf	(??___fldiv+3)& (0+255),w,b
 13733  011810  A4D8               	btfss	status,2,c
 13734  011812  D003               	goto	u10330
 13735                           
 13736                           ; BSR set to: 0
 13737                           
 13738                           ; BSR set to: 0
 13739  011814  0100               	movlb	0	; () banked
 13740  011816  A1B9               	btfss	___fldiv@b& (0+255),0,b
 13741  011818  D003               	goto	l3003
 13742  01181A                     u10330:
 13743                           
 13744                           ; BSR set to: 0
 13745  01181A  0E01               	movlw	1
 13746  01181C  0100               	movlb	0	; () banked
 13747  01181E  6FD1               	movwf	___fldiv@aexp& (0+255),b
 13748  011820                     l3003:
 13749                           
 13750                           ; BSR set to: 0
 13751                           
 13752                           ; BSR set to: 0
 13753                           
 13754                           ; BSR set to: 0
 13755  011820  0100               	movlb	0	; () banked
 13756  011822  51D1               	movf	___fldiv@aexp& (0+255),w,b
 13757  011824  0100               	movlb	0	; () banked
 13758  011826  B4D8               	btfsc	status,2,c
 13759  011828  D023               	goto	l3005
 13760                           
 13761                           ; BSR set to: 0
 13762  01182A  0E01               	movlw	1
 13763  01182C  0100               	movlb	0	; () banked
 13764  01182E  27B9               	addwf	___fldiv@b& (0+255),f,b
 13765  011830  0E00               	movlw	0
 13766  011832  23BA               	addwfc	(___fldiv@b+1)& (0+255),f,b
 13767  011834  23BB               	addwfc	(___fldiv@b+2)& (0+255),f,b
 13768  011836  23BC               	addwfc	(___fldiv@b+3)& (0+255),f,b
 13769                           
 13770                           ; BSR set to: 0
 13771  011838  0100               	movlb	0	; () banked
 13772  01183A  A1BC               	btfss	(___fldiv@b+3)& (0+255),0,b
 13773  01183C  D019               	goto	l3005
 13774                           
 13775                           ; BSR set to: 0
 13776  01183E  C0B9  F0C1         	movff	___fldiv@b,??___fldiv
 13777  011842  C0BA  F0C2         	movff	___fldiv@b+1,??___fldiv+1
 13778  011846  C0BB  F0C3         	movff	___fldiv@b+2,??___fldiv+2
 13779  01184A  C0BC  F0C4         	movff	___fldiv@b+3,??___fldiv+3
 13780  01184E  0100               	movlb	0	; () banked
 13781  011850  35C4               	rlcf	(??___fldiv+3)& (0+255),w,b
 13782  011852  33C4               	rrcf	(??___fldiv+3)& (0+255),f,b
 13783  011854  33C3               	rrcf	(??___fldiv+2)& (0+255),f,b
 13784  011856  33C2               	rrcf	(??___fldiv+1)& (0+255),f,b
 13785  011858  33C1               	rrcf	??___fldiv& (0+255),f,b
 13786  01185A  C0C1  F0B9         	movff	??___fldiv,___fldiv@b
 13787  01185E  C0C2  F0BA         	movff	??___fldiv+1,___fldiv@b+1
 13788  011862  C0C3  F0BB         	movff	??___fldiv+2,___fldiv@b+2
 13789  011866  C0C4  F0BC         	movff	??___fldiv+3,___fldiv@b+3
 13790                           
 13791                           ; BSR set to: 0
 13792  01186A  0100               	movlb	0	; () banked
 13793  01186C  4BCA               	infsnz	___fldiv@new_exp& (0+255),f,b
 13794  01186E  2BCB               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 13795  011870                     l3005:
 13796                           
 13797                           ; BSR set to: 0
 13798                           
 13799                           ; BSR set to: 0
 13800                           
 13801                           ; BSR set to: 0
 13802  011870  0100               	movlb	0	; () banked
 13803  011872  BFCB               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 13804  011874  D014               	goto	l3006
 13805  011876  0100               	movlb	0	; () banked
 13806  011878  51CB               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 13807  01187A  E104               	bnz	u10360
 13808  01187C  0100               	movlb	0	; () banked
 13809  01187E  29CA               	incf	___fldiv@new_exp& (0+255),w,b
 13810  011880  A0D8               	btfss	status,0,c
 13811  011882  D00D               	goto	l3006
 13812  011884                     u10360:
 13813                           
 13814                           ; BSR set to: 0
 13815  011884  0E00               	movlw	0
 13816  011886  0100               	movlb	0	; () banked
 13817  011888  6FCB               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13818  01188A  69CA               	setf	___fldiv@new_exp& (0+255),b
 13819  01188C  0E00               	movlw	0
 13820  01188E  0100               	movlb	0	; () banked
 13821  011890  6FB9               	movwf	___fldiv@b& (0+255),b
 13822  011892  0E00               	movlw	0
 13823  011894  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13824  011896  0E00               	movlw	0
 13825  011898  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13826  01189A  0E00               	movlw	0
 13827  01189C  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13828  01189E                     l3006:
 13829                           
 13830                           ; BSR set to: 0
 13831                           
 13832                           ; BSR set to: 0
 13833  01189E  0100               	movlb	0	; () banked
 13834  0118A0  BFCB               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 13835  0118A2  D007               	goto	u10370
 13836  0118A4  0100               	movlb	0	; () banked
 13837  0118A6  51CB               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 13838  0118A8  E115               	bnz	l13587
 13839  0118AA  0100               	movlb	0	; () banked
 13840  0118AC  05CA               	decf	___fldiv@new_exp& (0+255),w,b
 13841  0118AE  B0D8               	btfsc	status,0,c
 13842  0118B0  D011               	goto	l3007
 13843  0118B2                     u10370:
 13844                           
 13845                           ; BSR set to: 0
 13846  0118B2  0E00               	movlw	0
 13847  0118B4  0100               	movlb	0	; () banked
 13848  0118B6  6FCB               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13849  0118B8  0E00               	movlw	0
 13850  0118BA  6FCA               	movwf	___fldiv@new_exp& (0+255),b
 13851  0118BC  0E00               	movlw	0
 13852  0118BE  0100               	movlb	0	; () banked
 13853  0118C0  6FB9               	movwf	___fldiv@b& (0+255),b
 13854  0118C2  0E00               	movlw	0
 13855  0118C4  6FBA               	movwf	(___fldiv@b+1)& (0+255),b
 13856  0118C6  0E00               	movlw	0
 13857  0118C8  6FBB               	movwf	(___fldiv@b+2)& (0+255),b
 13858  0118CA  0E00               	movlw	0
 13859  0118CC  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13860  0118CE  0E00               	movlw	0
 13861  0118D0  0100               	movlb	0	; () banked
 13862  0118D2  6FC5               	movwf	___fldiv@sign& (0+255),b
 13863  0118D4                     l3007:
 13864  0118D4                     l13587:
 13865                           
 13866                           ; BSR set to: 0
 13867  0118D4  C0CA  F0D0         	movff	___fldiv@new_exp,___fldiv@bexp
 13868                           
 13869                           ; BSR set to: 0
 13870  0118D8  0100               	movlb	0	; () banked
 13871  0118DA  A1D0               	btfss	___fldiv@bexp& (0+255),0,b
 13872  0118DC  D003               	goto	l3008
 13873                           
 13874                           ; BSR set to: 0
 13875  0118DE  0100               	movlb	0	; () banked
 13876  0118E0  8FBB               	bsf	(___fldiv@b+2)& (0+255),7,b
 13877  0118E2  D002               	goto	l3009
 13878  0118E4                     l3008:
 13879                           
 13880                           ; BSR set to: 0
 13881                           
 13882                           ; BSR set to: 0
 13883  0118E4  0100               	movlb	0	; () banked
 13884  0118E6  9FBB               	bcf	(___fldiv@b+2)& (0+255),7,b
 13885  0118E8                     l3009:
 13886                           
 13887                           ; BSR set to: 0
 13888                           
 13889                           ; BSR set to: 0
 13890  0118E8  0100               	movlb	0	; () banked
 13891  0118EA  90D8               	bcf	status,0,c
 13892  0118EC  31D0               	rrcf	___fldiv@bexp& (0+255),w,b
 13893  0118EE  0100               	movlb	0	; () banked
 13894  0118F0  6FBC               	movwf	(___fldiv@b+3)& (0+255),b
 13895                           
 13896                           ; BSR set to: 0
 13897  0118F2  0100               	movlb	0	; () banked
 13898  0118F4  51C5               	movf	___fldiv@sign& (0+255),w,b
 13899  0118F6  0100               	movlb	0	; () banked
 13900  0118F8  13BC               	iorwf	(___fldiv@b+3)& (0+255),f,b
 13901                           
 13902                           ; BSR set to: 0
 13903  0118FA  C0B9  F0B9         	movff	___fldiv@b,?___fldiv
 13904  0118FE  C0BA  F0BA         	movff	___fldiv@b+1,?___fldiv+1
 13905  011902  C0BB  F0BB         	movff	___fldiv@b+2,?___fldiv+2
 13906  011906  C0BC  F0BC         	movff	___fldiv@b+3,?___fldiv+3
 13907  01190A  0012               	return	
 13908  01190C                     __end_of___fldiv:
 13909                           	opt stack 0
 13910                           tblptru	equ	0xFF8
 13911                           tblptrh	equ	0xFF7
 13912                           tblptrl	equ	0xFF6
 13913                           tablat	equ	0xFF5
 13914                           prodh	equ	0xFF4
 13915                           prodl	equ	0xFF3
 13916                           intcon	equ	0xFF2
 13917                           postinc0	equ	0xFEE
 13918                           wreg	equ	0xFE8
 13919                           postdec1	equ	0xFE5
 13920                           fsr1h	equ	0xFE2
 13921                           fsr1l	equ	0xFE1
 13922                           indf2	equ	0xFDF
 13923                           postinc2	equ	0xFDE
 13924                           postdec2	equ	0xFDD
 13925                           fsr2h	equ	0xFDA
 13926                           fsr2l	equ	0xFD9
 13927                           status	equ	0xFD8
 13928                           
 13929 ;; *************** function _init *****************
 13930 ;; Defined at:
 13931 ;;		line 69 in file "main.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;		None
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;		None
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      void 
 13938 ;; Registers used:
 13939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;Total ram usage:        0 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:   17
 13952 ;; This function calls:
 13953 ;;		_ADC_Init
 13954 ;;		_ADC_Start
 13955 ;;		_Console_Init
 13956 ;;		_HMI_Init
 13957 ;;		_ISR_Enable
 13958 ;;		_LCD_Init
 13959 ;;		_MXK_BlockSwitchTo
 13960 ;;		_MXK_Dequeue
 13961 ;;		_MXK_Init
 13962 ;;		_MXK_Release
 13963 ;;		_Motor_Init
 13964 ;;		_delay_ms
 13965 ;;		_eusart_init
 13966 ;;		_irobot_init
 13967 ;;		_irobot_init_song_0
 13968 ;;		_irobot_led_power_on
 13969 ;; This function is called by:
 13970 ;;		_main
 13971 ;; This function uses a non-reentrant model
 13972 ;;
 13973                           
 13974                           	psect	text50
 13975  014DDA                     __ptext50:
 13976                           	opt stack 0
 13977  014DDA                     _init:
 13978                           	opt stack 13
 13979                           
 13980                           ;main.c: 71: MXK_Init();
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;incstack = 0
 13984  014DDA  ECED  F098         	call	_MXK_Init	;wreg free
 13985                           
 13986                           ;main.c: 74: ISR_Enable();
 13987  014DDE  EC9D  F0B6         	call	_ISR_Enable	;wreg free
 13988                           
 13989                           ;main.c: 77: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 13990  014DE2  0E01               	movlw	1
 13991  014DE4  ECF0  F0B2         	call	_MXK_BlockSwitchTo
 13992  014DE8  0900               	iorlw	0
 13993  014DEA  B4D8               	btfsc	status,2,c
 13994  014DEC  D00C               	goto	l2314
 13995                           
 13996                           ;main.c: 78: Console_Init();
 13997  014DEE  EC9A  F0AA         	call	_Console_Init	;wreg free
 13998                           
 13999                           ;main.c: 79: HMI_Init();
 14000  014DF2  ECED  F092         	call	_HMI_Init	;wreg free
 14001                           
 14002                           ;main.c: 80: LCD_Init();
 14003  014DF6  ECAD  F099         	call	_LCD_Init	;wreg free
 14004                           
 14005                           ;main.c: 81: if (MXK_Release())
 14006  014DFA  EC9D  F0B5         	call	_MXK_Release	;wreg free
 14007  014DFE  0900               	iorlw	0
 14008  014E00  A4D8               	btfss	status,2,c
 14009                           
 14010                           ;main.c: 82: MXK_Dequeue();
 14011  014E02  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
 14012  014E06                     l2314:
 14013                           
 14014                           ;main.c: 83: }
 14015                           ;main.c: 86: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14016  014E06  0E08               	movlw	8
 14017  014E08  ECF0  F0B2         	call	_MXK_BlockSwitchTo
 14018  014E0C  0900               	iorlw	0
 14019  014E0E  B4D8               	btfsc	status,2,c
 14020  014E10  D013               	goto	l2316
 14021                           
 14022                           ;main.c: 87: Motor_Init(&Stepper, 0b1000);
 14023  014E12  0EAE               	movlw	low _Stepper
 14024  014E14  0100               	movlb	0	; () banked
 14025  014E16  6FE6               	movwf	Motor_Init@pMotor& (0+255),b
 14026  014E18  0E00               	movlw	high _Stepper
 14027  014E1A  0100               	movlb	0	; () banked
 14028  014E1C  6FE7               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14029  014E1E  0E00               	movlw	0
 14030  014E20  0100               	movlb	0	; () banked
 14031  014E22  6FE9               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14032  014E24  0E08               	movlw	8
 14033  014E26  6FE8               	movwf	Motor_Init@pAddress& (0+255),b
 14034  014E28  EC56  F0A1         	call	_Motor_Init	;wreg free
 14035                           
 14036                           ;main.c: 88: if (MXK_Release())
 14037  014E2C  EC9D  F0B5         	call	_MXK_Release	;wreg free
 14038  014E30  0900               	iorlw	0
 14039  014E32  A4D8               	btfss	status,2,c
 14040                           
 14041                           ;main.c: 89: MXK_Dequeue();
 14042  014E34  ECD1  F0B2         	call	_MXK_Dequeue	;wreg free
 14043  014E38                     l2316:
 14044                           
 14045                           ;main.c: 90: }
 14046                           ;main.c: 93: ADC_Init(&ADC_AN0, eADC_Ch0);
 14047  014E38  0EB4               	movlw	low _ADC_AN0
 14048  014E3A  0100               	movlb	0	; () banked
 14049  014E3C  6FBD               	movwf	ADC_Init@pInput& (0+255),b
 14050  014E3E  0E00               	movlw	high _ADC_AN0
 14051  014E40  0100               	movlb	0	; () banked
 14052  014E42  6FBE               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14053  014E44  0E00               	movlw	0
 14054  014E46  0100               	movlb	0	; () banked
 14055  014E48  6FBF               	movwf	ADC_Init@pChannel& (0+255),b
 14056  014E4A  ECE5  F0AB         	call	_ADC_Init	;wreg free
 14057                           
 14058                           ;main.c: 94: float ADC_Voltage(ADCPtr plnput);
 14059                           ;main.c: 95: ADC_Start(&ADC_AN0);
 14060  014E4E  0EB4               	movlw	low _ADC_AN0
 14061  014E50  0100               	movlb	0	; () banked
 14062  014E52  6FBB               	movwf	ADC_Start@pInput& (0+255),b
 14063  014E54  0E00               	movlw	high _ADC_AN0
 14064  014E56  0100               	movlb	0	; () banked
 14065  014E58  6FBC               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14066  014E5A  EC24  F0AB         	call	_ADC_Start	;wreg free
 14067                           
 14068                           ;main.c: 97: eusart_init();
 14069  014E5E  EC26  F0B5         	call	_eusart_init	;wreg free
 14070                           
 14071                           ;main.c: 98: irobot_init();
 14072  014E62  EC63  F0B6         	call	_irobot_init	;wreg free
 14073                           
 14074                           ;main.c: 100: irobot_led_power_on(0xA);
 14075  014E66  0E0A               	movlw	10
 14076  014E68  EC8F  F0B5         	call	_irobot_led_power_on
 14077                           
 14078                           ;main.c: 101: irobot_init_song_0();
 14079  014E6C  EC07  F0B5         	call	_irobot_init_song_0	;wreg free
 14080                           
 14081                           ;main.c: 102: delay_ms(20);
 14082  014E70  0E00               	movlw	0
 14083  014E72  0100               	movlb	0	; () banked
 14084  014E74  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 14085  014E76  0E14               	movlw	20
 14086  014E78  6FB9               	movwf	delay_ms@ms& (0+255),b
 14087  014E7A  EC5A  F0AE         	call	_delay_ms	;wreg free
 14088  014E7E  0012               	return		;funcret
 14089  014E80                     __end_of_init:
 14090                           	opt stack 0
 14091                           tblptru	equ	0xFF8
 14092                           tblptrh	equ	0xFF7
 14093                           tblptrl	equ	0xFF6
 14094                           tablat	equ	0xFF5
 14095                           prodh	equ	0xFF4
 14096                           prodl	equ	0xFF3
 14097                           intcon	equ	0xFF2
 14098                           postinc0	equ	0xFEE
 14099                           wreg	equ	0xFE8
 14100                           postdec1	equ	0xFE5
 14101                           fsr1h	equ	0xFE2
 14102                           fsr1l	equ	0xFE1
 14103                           indf2	equ	0xFDF
 14104                           postinc2	equ	0xFDE
 14105                           postdec2	equ	0xFDD
 14106                           fsr2h	equ	0xFDA
 14107                           fsr2l	equ	0xFD9
 14108                           status	equ	0xFD8
 14109                           
 14110 ;; *************** function _irobot_led_power_on *****************
 14111 ;; Defined at:
 14112 ;;		line 334 in file "Library/iRobotSerial.c"
 14113 ;; Parameters:    Size  Location     Type
 14114 ;;  powerOnColou    1    wreg     unsigned char 
 14115 ;; Auto vars:     Size  Location     Type
 14116 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 14117 ;; Return value:  Size  Location     Type
 14118 ;;                  1    wreg      void 
 14119 ;; Registers used:
 14120 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14121 ;; Tracked objects:
 14122 ;;		On entry : 0/0
 14123 ;;		On exit  : 0/0
 14124 ;;		Unchanged: 0/0
 14125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14129 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14130 ;;Total ram usage:        1 bytes
 14131 ;; Hardware stack levels used:    1
 14132 ;; Hardware stack levels required when called:    9
 14133 ;; This function calls:
 14134 ;;		_irobot_leds
 14135 ;; This function is called by:
 14136 ;;		_init
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           	psect	text51
 14141  016B1E                     __ptext51:
 14142                           	opt stack 0
 14143  016B1E                     _irobot_led_power_on:
 14144                           	opt stack 20
 14145                           
 14146                           ;incstack = 0
 14147                           ;irobot_led_power_on@powerOnColour stored from wreg
 14148  016B1E  0100               	movlb	0	; () banked
 14149  016B20  6FCD               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 14150                           
 14151                           ;iRobotSerial.c: 335: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 14152  016B22  0E00               	movlw	0
 14153  016B24  0100               	movlb	0	; () banked
 14154  016B26  6FC9               	movwf	irobot_leds@LEDBit& (0+255),b
 14155  016B28  C0CD  F0CA         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 14156  016B2C  0EFF               	movlw	255
 14157  016B2E  0100               	movlb	0	; () banked
 14158  016B30  6FCB               	movwf	irobot_leds@powerLuminosity& (0+255),b
 14159  016B32  0E00               	movlw	0
 14160  016B34  EC19  F0B0         	call	_irobot_leds
 14161  016B38  0012               	return		;funcret
 14162  016B3A                     __end_of_irobot_led_power_on:
 14163                           	opt stack 0
 14164                           tblptru	equ	0xFF8
 14165                           tblptrh	equ	0xFF7
 14166                           tblptrl	equ	0xFF6
 14167                           tablat	equ	0xFF5
 14168                           prodh	equ	0xFF4
 14169                           prodl	equ	0xFF3
 14170                           intcon	equ	0xFF2
 14171                           postinc0	equ	0xFEE
 14172                           wreg	equ	0xFE8
 14173                           postdec1	equ	0xFE5
 14174                           fsr1h	equ	0xFE2
 14175                           fsr1l	equ	0xFE1
 14176                           indf2	equ	0xFDF
 14177                           postinc2	equ	0xFDE
 14178                           postdec2	equ	0xFDD
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function _irobot_leds *****************
 14184 ;; Defined at:
 14185 ;;		line 259 in file "Library/iRobotSerial.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;  isScript        1    wreg     unsigned char 
 14188 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 14189 ;;  powerColour     1   17[BANK0 ] unsigned char 
 14190 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 14191 ;; Auto vars:     Size  Location     Type
 14192 ;;  isScript        1   19[BANK0 ] unsigned char 
 14193 ;; Return value:  Size  Location     Type
 14194 ;;                  1    wreg      void 
 14195 ;; Registers used:
 14196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14197 ;; Tracked objects:
 14198 ;;		On entry : 0/0
 14199 ;;		On exit  : 0/0
 14200 ;;		Unchanged: 0/0
 14201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14202 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;Total ram usage:        4 bytes
 14207 ;; Hardware stack levels used:    1
 14208 ;; Hardware stack levels required when called:    8
 14209 ;; This function calls:
 14210 ;;		_eusart_putch
 14211 ;;		_load_iRScriptStack
 14212 ;; This function is called by:
 14213 ;;		_irobot_led_power_on
 14214 ;;		_irobot_led_power_off
 14215 ;; This function uses a non-reentrant model
 14216 ;;
 14217                           
 14218                           	psect	text52
 14219  016032                     __ptext52:
 14220                           	opt stack 0
 14221  016032                     _irobot_leds:
 14222                           	opt stack 20
 14223                           
 14224                           ;incstack = 0
 14225                           ;irobot_leds@isScript stored from wreg
 14226  016032  0100               	movlb	0	; () banked
 14227  016034  6FCC               	movwf	irobot_leds@isScript& (0+255),b
 14228                           
 14229                           ;iRobotSerial.c: 260: if (isScript) {
 14230  016036  0100               	movlb	0	; () banked
 14231  016038  51CC               	movf	irobot_leds@isScript& (0+255),w,b
 14232  01603A  0100               	movlb	0	; () banked
 14233  01603C  B4D8               	btfsc	status,2,c
 14234  01603E  D015               	goto	l2144
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;iRobotSerial.c: 261: load_iRScriptStack(4, iR_LEDS,
 14238                           ;iRobotSerial.c: 262: LEDBit, powerColour, powerLuminosity);
 14239  016040  0E00               	movlw	0
 14240  016042  0100               	movlb	0	; () banked
 14241  016044  6FBA               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 14242  016046  0E8B               	movlw	139
 14243  016048  6FB9               	movwf	?_load_iRScriptStack& (0+255),b
 14244  01604A  C0C9  F0BB         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 14245  01604E  0100               	movlb	0	; () banked
 14246  016050  6BBC               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 14247  016052  C0CA  F0BD         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 14248  016056  0100               	movlb	0	; () banked
 14249  016058  6BBE               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 14250  01605A  C0CB  F0BF         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 14251  01605E  0100               	movlb	0	; () banked
 14252  016060  6BC0               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 14253  016062  0E04               	movlw	4
 14254  016064  EC25  F0AE         	call	_load_iRScriptStack
 14255                           
 14256                           ;iRobotSerial.c: 263: } else {
 14257  016068  0012               	return	
 14258  01606A                     l2144:
 14259                           
 14260                           ;iRobotSerial.c: 264: eusart_putch(iR_LEDS);
 14261  01606A  0E8B               	movlw	139
 14262  01606C  EC6A  F0B6         	call	_eusart_putch
 14263                           
 14264                           ;iRobotSerial.c: 265: eusart_putch(LEDBit);
 14265  016070  0100               	movlb	0	; () banked
 14266  016072  51C9               	movf	irobot_leds@LEDBit& (0+255),w,b
 14267  016074  EC6A  F0B6         	call	_eusart_putch
 14268                           
 14269                           ;iRobotSerial.c: 266: eusart_putch(powerColour);
 14270  016078  0100               	movlb	0	; () banked
 14271  01607A  51CA               	movf	irobot_leds@powerColour& (0+255),w,b
 14272  01607C  EC6A  F0B6         	call	_eusart_putch
 14273                           
 14274                           ;iRobotSerial.c: 267: eusart_putch(powerLuminosity);
 14275  016080  0100               	movlb	0	; () banked
 14276  016082  51CB               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 14277  016084  EC6A  F0B6         	call	_eusart_putch
 14278  016088  0012               	return	
 14279  01608A                     __end_of_irobot_leds:
 14280                           	opt stack 0
 14281                           tblptru	equ	0xFF8
 14282                           tblptrh	equ	0xFF7
 14283                           tblptrl	equ	0xFF6
 14284                           tablat	equ	0xFF5
 14285                           prodh	equ	0xFF4
 14286                           prodl	equ	0xFF3
 14287                           intcon	equ	0xFF2
 14288                           postinc0	equ	0xFEE
 14289                           wreg	equ	0xFE8
 14290                           postdec1	equ	0xFE5
 14291                           fsr1h	equ	0xFE2
 14292                           fsr1l	equ	0xFE1
 14293                           indf2	equ	0xFDF
 14294                           postinc2	equ	0xFDE
 14295                           postdec2	equ	0xFDD
 14296                           fsr2h	equ	0xFDA
 14297                           fsr2l	equ	0xFD9
 14298                           status	equ	0xFD8
 14299                           
 14300 ;; *************** function _load_iRScriptStack *****************
 14301 ;; Defined at:
 14302 ;;		line 190 in file "Library/iRobotSerial.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;  bytesToLoad     1    wreg     unsigned char 
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 14307 ;;  i               1   15[BANK0 ] unsigned char 
 14308 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 14309 ;;		 -> ?_load_iRScriptStack(1), 
 14310 ;; Return value:  Size  Location     Type
 14311 ;;                  1    wreg      void 
 14312 ;; Registers used:
 14313 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14314 ;; Tracked objects:
 14315 ;;		On entry : 0/0
 14316 ;;		On exit  : 0/0
 14317 ;;		Unchanged: 0/0
 14318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14319 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14320 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14321 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14322 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;Total ram usage:       16 bytes
 14324 ;; Hardware stack levels used:    1
 14325 ;; Hardware stack levels required when called:    7
 14326 ;; This function calls:
 14327 ;;		Nothing
 14328 ;; This function is called by:
 14329 ;;		_irobot_move
 14330 ;;		_irobot_leds
 14331 ;;		_irobot_angle_wait
 14332 ;;		_irobot_distance_wait
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336                           	psect	text53
 14337  015C4A                     __ptext53:
 14338                           	opt stack 0
 14339  015C4A                     _load_iRScriptStack:
 14340                           	opt stack 19
 14341                           
 14342                           ;incstack = 0
 14343                           ;load_iRScriptStack@bytesToLoad stored from wreg
 14344  015C4A  0100               	movlb	0	; () banked
 14345  015C4C  6FC7               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 14346                           
 14347                           ;iRobotSerial.c: 191: va_list loadByte;
 14348                           ;iRobotSerial.c: 192: *loadByte = __va_start();
 14349  015C4E  0EB9               	movlw	low ?_load_iRScriptStack
 14350  015C50  0100               	movlb	0	; () banked
 14351  015C52  6FC5               	movwf	load_iRScriptStack@loadByte& (0+255),b
 14352  015C54  0E00               	movlw	high ?_load_iRScriptStack
 14353  015C56  0100               	movlb	0	; () banked
 14354  015C58  6FC6               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 14355                           
 14356                           ;iRobotSerial.c: 193: for (UINT8 i = 0; i < bytesToLoad; i++) {
 14357  015C5A  0E00               	movlw	0
 14358  015C5C  0100               	movlb	0	; () banked
 14359  015C5E  6FC8               	movwf	load_iRScriptStack@i& (0+255),b
 14360  015C60  D01F               	goto	l2118
 14361  015C62                     
 14362                           ; BSR set to: 0
 14363                           ;iRobotSerial.c: 194: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 14364                           
 14365                           ; BSR set to: 0
 14366  015C62  C0C5  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 14367  015C66  C0C6  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 14368  015C6A  0100               	movlb	0	; () banked
 14369  015C6C  51C8               	movf	load_iRScriptStack@i& (0+255),w,b
 14370  015C6E  C037  F0C3         	movff	_iRScriptIndex,??_load_iRScriptStack
 14371  015C72  0100               	movlb	0	; () banked
 14372  015C74  6BC4               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 14373  015C76  0100               	movlb	0	; () banked
 14374  015C78  27C3               	addwf	??_load_iRScriptStack& (0+255),f,b
 14375  015C7A  0E00               	movlw	0
 14376  015C7C  23C4               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 14377  015C7E  0E00               	movlw	low _iRScriptStack
 14378  015C80  0100               	movlb	0	; () banked
 14379  015C82  25C3               	addwf	??_load_iRScriptStack& (0+255),w,b
 14380  015C84  6EE1               	movwf	fsr1l,c
 14381  015C86  0E04               	movlw	high _iRScriptStack
 14382  015C88  0100               	movlb	0	; () banked
 14383  015C8A  21C4               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 14384  015C8C  6EE2               	movwf	fsr1h,c
 14385  015C8E  CFDF FFE7          	movff	indf2,indf1
 14386                           
 14387                           ; BSR set to: 0
 14388  015C92  0E02               	movlw	2
 14389  015C94  0100               	movlb	0	; () banked
 14390  015C96  27C5               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 14391  015C98  0E00               	movlw	0
 14392  015C9A  23C6               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 14393                           
 14394                           ; BSR set to: 0
 14395  015C9C  0100               	movlb	0	; () banked
 14396  015C9E  2BC8               	incf	load_iRScriptStack@i& (0+255),f,b
 14397  015CA0                     l2118:
 14398                           
 14399                           ; BSR set to: 0
 14400                           
 14401                           ; BSR set to: 0
 14402  015CA0  0100               	movlb	0	; () banked
 14403  015CA2  51C7               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14404  015CA4  0100               	movlb	0	; () banked
 14405  015CA6  5DC8               	subwf	load_iRScriptStack@i& (0+255),w,b
 14406  015CA8  A0D8               	btfss	status,0,c
 14407  015CAA  D7DB               	goto	l2119
 14408                           
 14409                           ; BSR set to: 0
 14410                           ;iRobotSerial.c: 195: }
 14411                           ;iRobotSerial.c: 196: ;
 14412                           ;iRobotSerial.c: 197: iRScriptIndex += bytesToLoad;
 14413                           
 14414                           ; BSR set to: 0
 14415  015CAC  0100               	movlb	0	; () banked
 14416  015CAE  51C7               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14417  015CB0  2637               	addwf	_iRScriptIndex,f,c
 14418                           
 14419                           ; BSR set to: 0
 14420  015CB2  0012               	return		;funcret
 14421  015CB4                     __end_of_load_iRScriptStack:
 14422                           	opt stack 0
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           postinc0	equ	0xFEE
 14431                           wreg	equ	0xFE8
 14432                           indf1	equ	0xFE7
 14433                           postdec1	equ	0xFE5
 14434                           fsr1h	equ	0xFE2
 14435                           fsr1l	equ	0xFE1
 14436                           indf2	equ	0xFDF
 14437                           postinc2	equ	0xFDE
 14438                           postdec2	equ	0xFDD
 14439                           fsr2h	equ	0xFDA
 14440                           fsr2l	equ	0xFD9
 14441                           status	equ	0xFD8
 14442                           
 14443 ;; *************** function _irobot_init_song_0 *****************
 14444 ;; Defined at:
 14445 ;;		line 271 in file "Library/iRobotSerial.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;		None
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;		None
 14450 ;; Return value:  Size  Location     Type
 14451 ;;                  1    wreg      void 
 14452 ;; Registers used:
 14453 ;;		wreg, cstack
 14454 ;; Tracked objects:
 14455 ;;		On entry : 0/0
 14456 ;;		On exit  : 0/0
 14457 ;;		Unchanged: 0/0
 14458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14463 ;;Total ram usage:        0 bytes
 14464 ;; Hardware stack levels used:    1
 14465 ;; Hardware stack levels required when called:    8
 14466 ;; This function calls:
 14467 ;;		_eusart_putch
 14468 ;; This function is called by:
 14469 ;;		_init
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           	psect	text54
 14474  016A0E                     __ptext54:
 14475                           	opt stack 0
 14476  016A0E                     _irobot_init_song_0:
 14477                           	opt stack 21
 14478                           
 14479                           ;iRobotSerial.c: 272: eusart_putch(iR_SONG_INIT);
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;incstack = 0
 14483  016A0E  0E8C               	movlw	140
 14484  016A10  EC6A  F0B6         	call	_eusart_putch
 14485                           
 14486                           ;iRobotSerial.c: 273: eusart_putch(0);
 14487  016A14  0E00               	movlw	0
 14488  016A16  EC6A  F0B6         	call	_eusart_putch
 14489                           
 14490                           ;iRobotSerial.c: 274: eusart_putch(1);
 14491  016A1A  0E01               	movlw	1
 14492  016A1C  EC6A  F0B6         	call	_eusart_putch
 14493                           
 14494                           ;iRobotSerial.c: 275: eusart_putch(60);
 14495  016A20  0E3C               	movlw	60
 14496  016A22  EC6A  F0B6         	call	_eusart_putch
 14497                           
 14498                           ;iRobotSerial.c: 276: eusart_putch(4);
 14499  016A26  0E04               	movlw	4
 14500  016A28  EC6A  F0B6         	call	_eusart_putch
 14501  016A2C  0012               	return		;funcret
 14502  016A2E                     __end_of_irobot_init_song_0:
 14503                           	opt stack 0
 14504                           tblptru	equ	0xFF8
 14505                           tblptrh	equ	0xFF7
 14506                           tblptrl	equ	0xFF6
 14507                           tablat	equ	0xFF5
 14508                           prodh	equ	0xFF4
 14509                           prodl	equ	0xFF3
 14510                           intcon	equ	0xFF2
 14511                           postinc0	equ	0xFEE
 14512                           wreg	equ	0xFE8
 14513                           indf1	equ	0xFE7
 14514                           postdec1	equ	0xFE5
 14515                           fsr1h	equ	0xFE2
 14516                           fsr1l	equ	0xFE1
 14517                           indf2	equ	0xFDF
 14518                           postinc2	equ	0xFDE
 14519                           postdec2	equ	0xFDD
 14520                           fsr2h	equ	0xFDA
 14521                           fsr2l	equ	0xFD9
 14522                           status	equ	0xFD8
 14523                           
 14524 ;; *************** function _irobot_init *****************
 14525 ;; Defined at:
 14526 ;;		line 215 in file "Library/iRobotSerial.c"
 14527 ;; Parameters:    Size  Location     Type
 14528 ;;		None
 14529 ;; Auto vars:     Size  Location     Type
 14530 ;;		None
 14531 ;; Return value:  Size  Location     Type
 14532 ;;                  1    wreg      void 
 14533 ;; Registers used:
 14534 ;;		wreg, cstack
 14535 ;; Tracked objects:
 14536 ;;		On entry : 0/0
 14537 ;;		On exit  : 0/0
 14538 ;;		Unchanged: 0/0
 14539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14544 ;;Total ram usage:        0 bytes
 14545 ;; Hardware stack levels used:    1
 14546 ;; Hardware stack levels required when called:    8
 14547 ;; This function calls:
 14548 ;;		_eusart_putch
 14549 ;; This function is called by:
 14550 ;;		_init
 14551 ;; This function uses a non-reentrant model
 14552 ;;
 14553                           
 14554                           	psect	text55
 14555  016CC6                     __ptext55:
 14556                           	opt stack 0
 14557  016CC6                     _irobot_init:
 14558                           	opt stack 21
 14559                           
 14560                           ;iRobotSerial.c: 216: eusart_putch(iR_START);
 14561                           
 14562                           ;incstack = 0
 14563  016CC6  0E80               	movlw	128
 14564  016CC8  EC6A  F0B6         	call	_eusart_putch
 14565                           
 14566                           ;iRobotSerial.c: 217: eusart_putch(iR_FULL_MODE);
 14567  016CCC  0E84               	movlw	132
 14568  016CCE  EC6A  F0B6         	call	_eusart_putch
 14569  016CD2  0012               	return		;funcret
 14570  016CD4                     __end_of_irobot_init:
 14571                           	opt stack 0
 14572                           tblptru	equ	0xFF8
 14573                           tblptrh	equ	0xFF7
 14574                           tblptrl	equ	0xFF6
 14575                           tablat	equ	0xFF5
 14576                           prodh	equ	0xFF4
 14577                           prodl	equ	0xFF3
 14578                           intcon	equ	0xFF2
 14579                           postinc0	equ	0xFEE
 14580                           wreg	equ	0xFE8
 14581                           indf1	equ	0xFE7
 14582                           postdec1	equ	0xFE5
 14583                           fsr1h	equ	0xFE2
 14584                           fsr1l	equ	0xFE1
 14585                           indf2	equ	0xFDF
 14586                           postinc2	equ	0xFDE
 14587                           postdec2	equ	0xFDD
 14588                           fsr2h	equ	0xFDA
 14589                           fsr2l	equ	0xFD9
 14590                           status	equ	0xFD8
 14591                           
 14592 ;; *************** function _eusart_putch *****************
 14593 ;; Defined at:
 14594 ;;		line 130 in file "Library/iRobotSerial.c"
 14595 ;; Parameters:    Size  Location     Type
 14596 ;;  eusartSendCh    1    wreg     unsigned char 
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 14599 ;; Return value:  Size  Location     Type
 14600 ;;                  1    wreg      void 
 14601 ;; Registers used:
 14602 ;;		wreg
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;Total ram usage:        1 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    7
 14615 ;; This function calls:
 14616 ;;		Nothing
 14617 ;; This function is called by:
 14618 ;;		_irobot_query_and_update
 14619 ;;		_irobot_init
 14620 ;;		_irobot_move
 14621 ;;		_irobot_leds
 14622 ;;		_irobot_init_song_0
 14623 ;;		_irobot_song_play
 14624 ;;		_irobot_script_play
 14625 ;; This function uses a non-reentrant model
 14626 ;;
 14627                           
 14628                           	psect	text56
 14629  016CD4                     __ptext56:
 14630                           	opt stack 0
 14631  016CD4                     _eusart_putch:
 14632                           	opt stack 20
 14633                           
 14634                           ;incstack = 0
 14635                           ;eusart_putch@eusartSendChar stored from wreg
 14636  016CD4  0100               	movlb	0	; () banked
 14637  016CD6  6FB9               	movwf	eusart_putch@eusartSendChar& (0+255),b
 14638  016CD8                     
 14639                           ;iRobotSerial.c: 131: while (!TXSTA1bits.TRMT) {
 14640  016CD8  A2AD               	btfss	4013,1,c	;volatile
 14641  016CDA  D7FE               	goto	l13021
 14642                           
 14643                           ;iRobotSerial.c: 132: };
 14644                           ;iRobotSerial.c: 133: TXREG1 = eusartSendChar;
 14645  016CDC  C0B9  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 14646  016CE0  0012               	return		;funcret
 14647  016CE2                     __end_of_eusart_putch:
 14648                           	opt stack 0
 14649                           tblptru	equ	0xFF8
 14650                           tblptrh	equ	0xFF7
 14651                           tblptrl	equ	0xFF6
 14652                           tablat	equ	0xFF5
 14653                           prodh	equ	0xFF4
 14654                           prodl	equ	0xFF3
 14655                           intcon	equ	0xFF2
 14656                           postinc0	equ	0xFEE
 14657                           wreg	equ	0xFE8
 14658                           indf1	equ	0xFE7
 14659                           postdec1	equ	0xFE5
 14660                           fsr1h	equ	0xFE2
 14661                           fsr1l	equ	0xFE1
 14662                           indf2	equ	0xFDF
 14663                           postinc2	equ	0xFDE
 14664                           postdec2	equ	0xFDD
 14665                           fsr2h	equ	0xFDA
 14666                           fsr2l	equ	0xFD9
 14667                           status	equ	0xFD8
 14668                           
 14669 ;; *************** function _eusart_init *****************
 14670 ;; Defined at:
 14671 ;;		line 113 in file "Library/iRobotSerial.c"
 14672 ;; Parameters:    Size  Location     Type
 14673 ;;		None
 14674 ;; Auto vars:     Size  Location     Type
 14675 ;;		None
 14676 ;; Return value:  Size  Location     Type
 14677 ;;                  1    wreg      void 
 14678 ;; Registers used:
 14679 ;;		wreg, status,2
 14680 ;; Tracked objects:
 14681 ;;		On entry : 0/0
 14682 ;;		On exit  : 0/0
 14683 ;;		Unchanged: 0/0
 14684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14689 ;;Total ram usage:        0 bytes
 14690 ;; Hardware stack levels used:    1
 14691 ;; Hardware stack levels required when called:    7
 14692 ;; This function calls:
 14693 ;;		Nothing
 14694 ;; This function is called by:
 14695 ;;		_init
 14696 ;; This function uses a non-reentrant model
 14697 ;;
 14698                           
 14699                           	psect	text57
 14700  016A4C                     __ptext57:
 14701                           	opt stack 0
 14702  016A4C                     _eusart_init:
 14703                           	opt stack 22
 14704                           
 14705                           ;iRobotSerial.c: 114: TRISCbits.TRISC6 = 0;
 14706                           
 14707                           ;incstack = 0
 14708  016A4C  9C94               	bcf	3988,6,c	;volatile
 14709                           
 14710                           ;iRobotSerial.c: 115: TRISCbits.TRISC7 = 1;
 14711  016A4E  8E94               	bsf	3988,7,c	;volatile
 14712                           
 14713                           ;iRobotSerial.c: 117: TXSTA1 = 0b00100100;
 14714  016A50  0E24               	movlw	36
 14715  016A52  6EAD               	movwf	4013,c	;volatile
 14716                           
 14717                           ;iRobotSerial.c: 118: RCSTA1 = 0b10011000;
 14718  016A54  0E98               	movlw	152
 14719  016A56  6EAC               	movwf	4012,c	;volatile
 14720                           
 14721                           ;iRobotSerial.c: 120: BAUDCON1bits.DTRXP = 0;
 14722  016A58  9A7E               	bcf	3966,5,c	;volatile
 14723                           
 14724                           ;iRobotSerial.c: 121: BAUDCON1bits.SCKP = 0;
 14725  016A5A  987E               	bcf	3966,4,c	;volatile
 14726                           
 14727                           ;iRobotSerial.c: 122: BAUDCON1bits.WUE = 0;
 14728  016A5C  927E               	bcf	3966,1,c	;volatile
 14729                           
 14730                           ;iRobotSerial.c: 123: BAUDCON1bits.ABDEN = 0;
 14731  016A5E  907E               	bcf	3966,0,c	;volatile
 14732                           
 14733                           ;iRobotSerial.c: 125: TXSTA1bits.BRGH = 1;
 14734  016A60  84AD               	bsf	4013,2,c	;volatile
 14735                           
 14736                           ;iRobotSerial.c: 126: BAUDCON1bits.BRG16 = 0;
 14737  016A62  967E               	bcf	3966,3,c	;volatile
 14738                           
 14739                           ;iRobotSerial.c: 127: SPBRG1 = 51;
 14740  016A64  0E33               	movlw	51
 14741  016A66  6EB0               	movwf	4016,c	;volatile
 14742  016A68  0012               	return		;funcret
 14743  016A6A                     __end_of_eusart_init:
 14744                           	opt stack 0
 14745                           tblptru	equ	0xFF8
 14746                           tblptrh	equ	0xFF7
 14747                           tblptrl	equ	0xFF6
 14748                           tablat	equ	0xFF5
 14749                           prodh	equ	0xFF4
 14750                           prodl	equ	0xFF3
 14751                           intcon	equ	0xFF2
 14752                           postinc0	equ	0xFEE
 14753                           wreg	equ	0xFE8
 14754                           indf1	equ	0xFE7
 14755                           postdec1	equ	0xFE5
 14756                           fsr1h	equ	0xFE2
 14757                           fsr1l	equ	0xFE1
 14758                           indf2	equ	0xFDF
 14759                           postinc2	equ	0xFDE
 14760                           postdec2	equ	0xFDD
 14761                           fsr2h	equ	0xFDA
 14762                           fsr2l	equ	0xFD9
 14763                           status	equ	0xFD8
 14764                           
 14765 ;; *************** function _Motor_Init *****************
 14766 ;; Defined at:
 14767 ;;		line 26 in file "Library/Motor.c"
 14768 ;; Parameters:    Size  Location     Type
 14769 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 14770 ;;		 -> Stepper(6), 
 14771 ;;  pAddress        2   47[BANK0 ] unsigned short 
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;		None
 14774 ;; Return value:  Size  Location     Type
 14775 ;;                  1    wreg      void 
 14776 ;; Registers used:
 14777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14778 ;; Tracked objects:
 14779 ;;		On entry : 0/0
 14780 ;;		On exit  : 0/0
 14781 ;;		Unchanged: 0/0
 14782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14783 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14786 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14787 ;;Total ram usage:        4 bytes
 14788 ;; Hardware stack levels used:    1
 14789 ;; Hardware stack levels required when called:   12
 14790 ;; This function calls:
 14791 ;;		_Port_SetPin
 14792 ;;		_Port_SetPinType
 14793 ;;		_Timer0_Init
 14794 ;; This function is called by:
 14795 ;;		_init
 14796 ;; This function uses a non-reentrant model
 14797 ;;
 14798                           
 14799                           	psect	text58
 14800  0142AC                     __ptext58:
 14801                           	opt stack 0
 14802  0142AC                     _Motor_Init:
 14803                           	opt stack 17
 14804                           
 14805                           ;Motor.c: 28: pMotor->mDelta = 0;
 14806                           
 14807                           ;incstack = 0
 14808  0142AC  C0E6  FFD9         	movff	Motor_Init@pMotor,fsr2l
 14809  0142B0  C0E7  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 14810  0142B4  0E00               	movlw	0
 14811  0142B6  6EDE               	movwf	postinc2,c
 14812  0142B8  0E00               	movlw	0
 14813  0142BA  6EDD               	movwf	postdec2,c
 14814                           
 14815                           ;Motor.c: 29: pMotor->mFrequency = 0;
 14816  0142BC  0100               	movlb	0	; () banked
 14817  0142BE  EE20 F002          	lfsr	2,2
 14818  0142C2  51E6               	movf	Motor_Init@pMotor& (0+255),w,b
 14819  0142C4  26D9               	addwf	fsr2l,f,c
 14820  0142C6  51E7               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14821  0142C8  22DA               	addwfc	fsr2h,f,c
 14822  0142CA  0E00               	movlw	0
 14823  0142CC  6EDE               	movwf	postinc2,c
 14824  0142CE  0E00               	movlw	0
 14825  0142D0  6EDD               	movwf	postdec2,c
 14826                           
 14827                           ; BSR set to: 0
 14828                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 14829  0142D2  0100               	movlb	0	; () banked
 14830  0142D4  EE20 F004          	lfsr	2,4
 14831  0142D8  51E6               	movf	Motor_Init@pMotor& (0+255),w,b
 14832  0142DA  26D9               	addwf	fsr2l,f,c
 14833  0142DC  51E7               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14834  0142DE  22DA               	addwfc	fsr2h,f,c
 14835  0142E0  C0E8  FFDE         	movff	Motor_Init@pAddress,postinc2
 14836  0142E4  C0E9  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 14837                           
 14838                           ; BSR set to: 0
 14839                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 14840  0142E8  0E90               	movlw	low _PortE
 14841  0142EA  0100               	movlb	0	; () banked
 14842  0142EC  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 14843  0142EE  0E00               	movlw	high _PortE
 14844  0142F0  0100               	movlb	0	; () banked
 14845  0142F2  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14846  0142F4  0E00               	movlw	0
 14847  0142F6  0100               	movlb	0	; () banked
 14848  0142F8  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 14849  0142FA  0E03               	movlw	3
 14850  0142FC  0100               	movlb	0	; () banked
 14851  0142FE  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 14852  014300  ECB2  F095         	call	_Port_SetPinType	;wreg free
 14853                           
 14854                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 14855  014304  0E90               	movlw	low _PortE
 14856  014306  0100               	movlb	0	; () banked
 14857  014308  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 14858  01430A  0E00               	movlw	high _PortE
 14859  01430C  0100               	movlb	0	; () banked
 14860  01430E  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14861  014310  0E01               	movlw	1
 14862  014312  0100               	movlb	0	; () banked
 14863  014314  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 14864  014316  0E03               	movlw	3
 14865  014318  0100               	movlb	0	; () banked
 14866  01431A  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 14867  01431C  ECB2  F095         	call	_Port_SetPinType	;wreg free
 14868                           
 14869                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 14870  014320  0E90               	movlw	low _PortE
 14871  014322  0100               	movlb	0	; () banked
 14872  014324  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 14873  014326  0E00               	movlw	high _PortE
 14874  014328  0100               	movlb	0	; () banked
 14875  01432A  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14876  01432C  0E00               	movlw	0
 14877  01432E  0100               	movlb	0	; () banked
 14878  014330  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 14879  014332  0E00               	movlw	0
 14880  014334  0100               	movlb	0	; () banked
 14881  014336  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 14882  014338  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 14883                           
 14884                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 14885  01433C  0E90               	movlw	low _PortE
 14886  01433E  0100               	movlb	0	; () banked
 14887  014340  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 14888  014342  0E00               	movlw	high _PortE
 14889  014344  0100               	movlb	0	; () banked
 14890  014346  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14891  014348  0E01               	movlw	1
 14892  01434A  0100               	movlb	0	; () banked
 14893  01434C  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 14894  01434E  0E00               	movlw	0
 14895  014350  0100               	movlb	0	; () banked
 14896  014352  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 14897  014354  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 14898                           
 14899                           ;Motor.c: 38: lStepFunction = Motor_Step;
 14900  014358  0EF2               	movlw	low _Motor_Step
 14901  01435A  0100               	movlb	0	; () banked
 14902  01435C  6F66               	movwf	_lStepFunction& (0+255),b
 14903  01435E  0E38               	movlw	high _Motor_Step
 14904  014360  0100               	movlb	0	; () banked
 14905  014362  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 14906  014364  0E01               	movlw	low (_Motor_Step shr (0+16))
 14907  014366  0100               	movlb	0	; () banked
 14908  014368  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;Motor.c: 39: Timer0_Init(1000);
 14912  01436A  0EE8               	movlw	232
 14913  01436C  0100               	movlb	0	; () banked
 14914  01436E  6FC6               	movwf	Timer0_Init@pFrequency& (0+255),b
 14915  014370  0E03               	movlw	3
 14916  014372  6FC7               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 14917  014374  0E00               	movlw	0
 14918  014376  6FC8               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 14919  014378  0E00               	movlw	0
 14920  01437A  6FC9               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 14921  01437C  EC19  F09B         	call	_Timer0_Init	;wreg free
 14922  014380  0012               	return		;funcret
 14923  014382                     __end_of_Motor_Init:
 14924                           	opt stack 0
 14925                           tblptru	equ	0xFF8
 14926                           tblptrh	equ	0xFF7
 14927                           tblptrl	equ	0xFF6
 14928                           tablat	equ	0xFF5
 14929                           prodh	equ	0xFF4
 14930                           prodl	equ	0xFF3
 14931                           intcon	equ	0xFF2
 14932                           postinc0	equ	0xFEE
 14933                           wreg	equ	0xFE8
 14934                           indf1	equ	0xFE7
 14935                           postdec1	equ	0xFE5
 14936                           fsr1h	equ	0xFE2
 14937                           fsr1l	equ	0xFE1
 14938                           indf2	equ	0xFDF
 14939                           postinc2	equ	0xFDE
 14940                           postdec2	equ	0xFDD
 14941                           fsr2h	equ	0xFDA
 14942                           fsr2l	equ	0xFD9
 14943                           status	equ	0xFD8
 14944                           
 14945 ;; *************** function _Timer0_Init *****************
 14946 ;; Defined at:
 14947 ;;		line 25 in file "Library/Timer0.c"
 14948 ;; Parameters:    Size  Location     Type
 14949 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14950 ;; Auto vars:     Size  Location     Type
 14951 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 14952 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 14953 ;; Return value:  Size  Location     Type
 14954 ;;                  1    wreg      void 
 14955 ;; Registers used:
 14956 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14963 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;Total ram usage:       14 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:    8
 14969 ;; This function calls:
 14970 ;;		_Timer0_Clear
 14971 ;;		___lldiv
 14972 ;; This function is called by:
 14973 ;;		_Motor_Init
 14974 ;;		_Motor_Speed
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           	psect	text59
 14979  013632                     __ptext59:
 14980                           	opt stack 0
 14981  013632                     _Timer0_Init:
 14982                           	opt stack 19
 14983                           
 14984                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 14985                           
 14986                           ;incstack = 0
 14987  013632  0E80               	movlw	128
 14988  013634  0100               	movlb	0	; () banked
 14989  013636  6FCC               	movwf	Timer0_Init@pCPUClock& (0+255),b
 14990  013638  0E8D               	movlw	141
 14991  01363A  6FCD               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 14992  01363C  0E5B               	movlw	91
 14993  01363E  6FCE               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 14994  013640  0E00               	movlw	0
 14995  013642  6FCF               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 14996                           
 14997                           ; BSR set to: 0
 14998                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 14999                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15000                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15001                           ;Timer0.c: 34: UINT32 DIVIDE;
 15002                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15003  013644  9ED5               	bcf	4053,7,c	;volatile
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;Timer0.c: 38: if (pFrequency == 0)
 15007  013646  0100               	movlb	0	; () banked
 15008  013648  51C6               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15009  01364A  0100               	movlb	0	; () banked
 15010  01364C  11C7               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15011  01364E  0100               	movlb	0	; () banked
 15012  013650  11C8               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15013  013652  0100               	movlb	0	; () banked
 15014  013654  11C9               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15015  013656  B4D8               	btfsc	status,2,c
 15016  013658  0012               	return	
 15017                           
 15018                           ; BSR set to: 0
 15019                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;Timer0.c: 39: return;
 15023  01365A  96D5               	bcf	4053,3,c	;volatile
 15024                           
 15025                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15026  01365C  9CD5               	bcf	4053,6,c	;volatile
 15027                           
 15028                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15029  01365E  9AD5               	bcf	4053,5,c	;volatile
 15030                           
 15031                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15032  013660  98D5               	bcf	4053,4,c	;volatile
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15036  013662  C0CC  F0B9         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15037  013666  C0CD  F0BA         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15038  01366A  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15039  01366E  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15040  013672  C0C6  F0BD         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15041  013676  C0C7  F0BE         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15042  01367A  C0C8  F0BF         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15043  01367E  C0C9  F0C0         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15044  013682  EC7E  F0A4         	call	___lldiv	;wreg free
 15045  013686  C0B9  F0D0         	movff	?___lldiv,Timer0_Init@DIVIDE
 15046  01368A  C0BA  F0D1         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15047  01368E  C0BB  F0D2         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15048  013692  C0BC  F0D3         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15049                           
 15050                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15051  013696  D00C               	goto	l1787
 15052  013698                     l14201:
 15053                           
 15054                           ;Timer0.c: 50: {
 15055                           ;Timer0.c: 51: INDEX ++;
 15056  013698  0100               	movlb	0	; () banked
 15057  01369A  2B8C               	incf	_INDEX& (0+255),f,b
 15058                           
 15059                           ; BSR set to: 0
 15060                           ;Timer0.c: 52: if (INDEX >= 3)
 15061  01369C  0E02               	movlw	2
 15062  01369E  0100               	movlb	0	; () banked
 15063  0136A0  658C               	cpfsgt	_INDEX& (0+255),b
 15064  0136A2  D001               	goto	l1785
 15065  0136A4  D02F               	goto	u11040
 15066  0136A6                     l1785:
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;Timer0.c: 56: if (INDEX >= 8)
 15070                           
 15071                           ; BSR set to: 0
 15072  0136A6  0E07               	movlw	7
 15073  0136A8  0100               	movlb	0	; () banked
 15074  0136AA  658C               	cpfsgt	_INDEX& (0+255),b
 15075  0136AC  D001               	goto	l1787
 15076  0136AE  0012               	return	
 15077  0136B0                     l1787:
 15078                           
 15079                           ; BSR set to: 0
 15080                           
 15081                           ; BSR set to: 0
 15082  0136B0  C0D0  F0B9         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 15083  0136B4  C0D1  F0BA         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 15084  0136B8  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 15085  0136BC  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 15086  0136C0  0100               	movlb	0	; () banked
 15087  0136C2  518C               	movf	_INDEX& (0+255),w,b
 15088  0136C4  0D02               	mullw	2
 15089  0136C6  0EE5               	movlw	low Timer0_Init@PRESCALE
 15090  0136C8  24F3               	addwf	prodl,w,c
 15091  0136CA  6EF6               	movwf	tblptrl,c
 15092  0136CC  0EFC               	movlw	high Timer0_Init@PRESCALE
 15093  0136CE  20F4               	addwfc	prodh,w,c
 15094  0136D0  6EF7               	movwf	tblptrh,c
 15095  0136D2                     	if	1	;There are 3 active tblptr bytes
 15096  0136D2  6AF8               	clrf	tblptru,c
 15097  0136D4  0E00               	movlw	low (__mediumconst shr (0+16))
 15098  0136D6  22F8               	addwfc	tblptru,f,c
 15099  0136D8                     	endif
 15100  0136D8  0009               	tblrd		*+
 15101  0136DA  CFF5 F0CA          	movff	tablat,??_Timer0_Init
 15102  0136DE  0009               	tblrd		*+
 15103  0136E0  CFF5 F0CB          	movff	tablat,??_Timer0_Init+1
 15104  0136E4  C0CA  F0BD         	movff	??_Timer0_Init,___lldiv@divisor
 15105  0136E8  C0CB  F0BE         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 15106  0136EC  0100               	movlb	0	; () banked
 15107  0136EE  6BBF               	clrf	(___lldiv@divisor+2)& (0+255),b
 15108  0136F0  6BC0               	clrf	(___lldiv@divisor+3)& (0+255),b
 15109  0136F2  EC7E  F0A4         	call	___lldiv	;wreg free
 15110  0136F6  0100               	movlb	0	; () banked
 15111  0136F8  51BC               	movf	(?___lldiv+3)& (0+255),w,b
 15112  0136FA  E1CE               	bnz	l14201
 15113  0136FC  0100               	movlb	0	; () banked
 15114  0136FE  05BB               	decf	(?___lldiv+2)& (0+255),w,b
 15115  013700  B0D8               	btfsc	status,0,c
 15116  013702  D7CA               	goto	l1784
 15117  013704                     u11040:
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;Timer0.c: 58: }
 15121                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 15122                           
 15123                           ; BSR set to: 0
 15124  013704  0100               	movlb	0	; () banked
 15125  013706  518C               	movf	_INDEX& (0+255),w,b
 15126  013708  0D02               	mullw	2
 15127  01370A  0EE5               	movlw	low Timer0_Init@PRESCALE
 15128  01370C  24F3               	addwf	prodl,w,c
 15129  01370E  6EF6               	movwf	tblptrl,c
 15130  013710  0EFC               	movlw	high Timer0_Init@PRESCALE
 15131  013712  20F4               	addwfc	prodh,w,c
 15132  013714  6EF7               	movwf	tblptrh,c
 15133  013716                     	if	1	;There are 3 active tblptr bytes
 15134  013716  6AF8               	clrf	tblptru,c
 15135  013718  0E00               	movlw	low (__mediumconst shr (0+16))
 15136  01371A  22F8               	addwfc	tblptru,f,c
 15137  01371C                     	endif
 15138  01371C  0008               	tblrd		*
 15139  01371E  CFF5 F08B          	movff	tablat,Timer0_Init@PRE
 15140                           
 15141                           ; BSR set to: 0
 15142                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 15143  013722  0EFF               	movlw	255
 15144  013724  0100               	movlb	0	; () banked
 15145  013726  25D0               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 15146  013728  0103               	movlb	3	; () banked
 15147  01372A  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 15148  01372C  0EFF               	movlw	255
 15149  01372E  0100               	movlb	0	; () banked
 15150  013730  21D1               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 15151  013732  0103               	movlb	3	; () banked
 15152  013734  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 15153  013736  0EFF               	movlw	255
 15154  013738  0100               	movlb	0	; () banked
 15155  01373A  21D2               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 15156  01373C  0103               	movlb	3	; () banked
 15157  01373E  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 15158  013740  0EFF               	movlw	255
 15159  013742  0100               	movlb	0	; () banked
 15160  013744  21D3               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 15161  013746  0103               	movlb	3	; () banked
 15162  013748  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 15163                           
 15164                           ; BSR set to: 3
 15165                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 15166  01374A  C32A  F0B9         	movff	Timer0_Init@DIV,___lldiv@dividend
 15167  01374E  C32B  F0BA         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 15168  013752  C32C  F0BB         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 15169  013756  C32D  F0BC         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 15170  01375A  0100               	movlb	0	; () banked
 15171  01375C  518B               	movf	Timer0_Init@PRE& (0+255),w,b
 15172  01375E  0100               	movlb	0	; () banked
 15173  013760  6FBD               	movwf	___lldiv@divisor& (0+255),b
 15174  013762  6BBE               	clrf	(___lldiv@divisor+1)& (0+255),b
 15175  013764  6BBF               	clrf	(___lldiv@divisor+2)& (0+255),b
 15176  013766  6BC0               	clrf	(___lldiv@divisor+3)& (0+255),b
 15177  013768  EC7E  F0A4         	call	___lldiv	;wreg free
 15178  01376C  0100               	movlb	0	; () banked
 15179  01376E  1FB9               	comf	?___lldiv& (0+255),f,b
 15180  013770  0100               	movlb	0	; () banked
 15181  013772  1FBA               	comf	(?___lldiv+1)& (0+255),f,b
 15182  013774  0100               	movlb	0	; () banked
 15183  013776  4BB9               	infsnz	?___lldiv& (0+255),f,b
 15184  013778  2BBA               	incf	(?___lldiv+1)& (0+255),f,b
 15185  01377A  0EFF               	movlw	255
 15186  01377C  0100               	movlb	0	; () banked
 15187  01377E  25B9               	addwf	?___lldiv& (0+255),w,b
 15188  013780  6E29               	movwf	_COUNTER,c
 15189  013782  0EFF               	movlw	255
 15190  013784  0100               	movlb	0	; () banked
 15191  013786  21BA               	addwfc	(?___lldiv+1)& (0+255),w,b
 15192  013788  6E2A               	movwf	_COUNTER+1,c
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;Timer0.c: 68: Timer0_Clear();
 15196  01378A  EC86  F0B6         	call	_Timer0_Clear	;wreg free
 15197                           
 15198                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 15199  01378E  8ED5               	bsf	4053,7,c	;volatile
 15200  013790  0012               	return		;funcret
 15201  013792                     __end_of_Timer0_Init:
 15202                           	opt stack 0
 15203                           tblptru	equ	0xFF8
 15204                           tblptrh	equ	0xFF7
 15205                           tblptrl	equ	0xFF6
 15206                           tablat	equ	0xFF5
 15207                           prodh	equ	0xFF4
 15208                           prodl	equ	0xFF3
 15209                           intcon	equ	0xFF2
 15210                           postinc0	equ	0xFEE
 15211                           wreg	equ	0xFE8
 15212                           indf1	equ	0xFE7
 15213                           postdec1	equ	0xFE5
 15214                           fsr1h	equ	0xFE2
 15215                           fsr1l	equ	0xFE1
 15216                           indf2	equ	0xFDF
 15217                           postinc2	equ	0xFDE
 15218                           postdec2	equ	0xFDD
 15219                           fsr2h	equ	0xFDA
 15220                           fsr2l	equ	0xFD9
 15221                           status	equ	0xFD8
 15222                           
 15223 ;; *************** function _Timer0_Clear *****************
 15224 ;; Defined at:
 15225 ;;		line 20 in file "Library/Timer0.c"
 15226 ;; Parameters:    Size  Location     Type
 15227 ;;		None
 15228 ;; Auto vars:     Size  Location     Type
 15229 ;;		None
 15230 ;; Return value:  Size  Location     Type
 15231 ;;                  1    wreg      void 
 15232 ;; Registers used:
 15233 ;;		None
 15234 ;; Tracked objects:
 15235 ;;		On entry : 0/0
 15236 ;;		On exit  : 0/0
 15237 ;;		Unchanged: 0/0
 15238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15243 ;;Total ram usage:        0 bytes
 15244 ;; Hardware stack levels used:    1
 15245 ;; Hardware stack levels required when called:    7
 15246 ;; This function calls:
 15247 ;;		Nothing
 15248 ;; This function is called by:
 15249 ;;		_Timer0_Init
 15250 ;; This function uses a non-reentrant model
 15251 ;;
 15252                           
 15253                           	psect	text60
 15254  016D0C                     __ptext60:
 15255                           	opt stack 0
 15256  016D0C                     _Timer0_Clear:
 15257                           	opt stack 19
 15258                           
 15259                           ;Timer0.c: 22: TMR0 = COUNTER;
 15260                           
 15261                           ;incstack = 0
 15262  016D0C  C029  FFD6         	movff	_COUNTER,4054	;volatile
 15263  016D10  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 15264                           
 15265                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 15266  016D14  94F2               	bcf	intcon,2,c	;volatile
 15267  016D16  0012               	return		;funcret
 15268  016D18                     __end_of_Timer0_Clear:
 15269                           	opt stack 0
 15270                           tblptru	equ	0xFF8
 15271                           tblptrh	equ	0xFF7
 15272                           tblptrl	equ	0xFF6
 15273                           tablat	equ	0xFF5
 15274                           prodh	equ	0xFF4
 15275                           prodl	equ	0xFF3
 15276                           intcon	equ	0xFF2
 15277                           postinc0	equ	0xFEE
 15278                           wreg	equ	0xFE8
 15279                           indf1	equ	0xFE7
 15280                           postdec1	equ	0xFE5
 15281                           fsr1h	equ	0xFE2
 15282                           fsr1l	equ	0xFE1
 15283                           indf2	equ	0xFDF
 15284                           postinc2	equ	0xFDE
 15285                           postdec2	equ	0xFDD
 15286                           fsr2h	equ	0xFDA
 15287                           fsr2l	equ	0xFD9
 15288                           status	equ	0xFD8
 15289                           
 15290 ;; *************** function _MXK_Init *****************
 15291 ;; Defined at:
 15292 ;;		line 33 in file "Library/MXK.c"
 15293 ;; Parameters:    Size  Location     Type
 15294 ;;		None
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;		None
 15297 ;; Return value:  Size  Location     Type
 15298 ;;                  1    wreg      void 
 15299 ;; Registers used:
 15300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15301 ;; Tracked objects:
 15302 ;;		On entry : 0/0
 15303 ;;		On exit  : 0/0
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15310 ;;Total ram usage:        0 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:   16
 15313 ;; This function calls:
 15314 ;;		_LED_Init
 15315 ;;		_Port_Init
 15316 ;;		_Port_SetPin
 15317 ;;		_Port_SetPinType
 15318 ;;		_Port_SetQuadType
 15319 ;;		_Port_SetType
 15320 ;;		_delay_ms
 15321 ;; This function is called by:
 15322 ;;		_init
 15323 ;; This function uses a non-reentrant model
 15324 ;;
 15325                           
 15326                           	psect	text61
 15327  0131DA                     __ptext61:
 15328                           	opt stack 0
 15329  0131DA                     _MXK_Init:
 15330                           	opt stack 13
 15331                           
 15332                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 15333                           
 15334                           ;incstack = 0
 15335  0131DA  0E01               	movlw	1
 15336  0131DC  6E4B               	movwf	_Bus_State,c
 15337                           
 15338                           ;MXK.c: 36: lQueue = (Function)0;
 15339  0131DE  0E00               	movlw	0
 15340  0131E0  0100               	movlb	0	; () banked
 15341  0131E2  6F63               	movwf	_lQueue& (0+255),b	;volatile
 15342  0131E4  0E00               	movlw	0
 15343  0131E6  0100               	movlb	0	; () banked
 15344  0131E8  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 15345  0131EA  0E00               	movlw	0
 15346  0131EC  0100               	movlb	0	; () banked
 15347  0131EE  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 15351  0131F0  0EBA               	movlw	low _PortA
 15352  0131F2  0101               	movlb	1	; () banked
 15353  0131F4  6F00               	movwf	Port_Init@pInput& (0+255),b
 15354  0131F6  0E03               	movlw	high _PortA
 15355  0131F8  0101               	movlb	1	; () banked
 15356  0131FA  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15357  0131FC  0E00               	movlw	0
 15358  0131FE  0101               	movlb	1	; () banked
 15359  013200  6F02               	movwf	Port_Init@pPort& (0+255),b
 15360  013202  EC61  F097         	call	_Port_Init	;wreg free
 15361                           
 15362                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 15363  013206  0EB0               	movlw	low _PortB
 15364  013208  0101               	movlb	1	; () banked
 15365  01320A  6F00               	movwf	Port_Init@pInput& (0+255),b
 15366  01320C  0E03               	movlw	high _PortB
 15367  01320E  0101               	movlb	1	; () banked
 15368  013210  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15369  013212  0E01               	movlw	1
 15370  013214  0101               	movlb	1	; () banked
 15371  013216  6F02               	movwf	Port_Init@pPort& (0+255),b
 15372  013218  EC61  F097         	call	_Port_Init	;wreg free
 15373                           
 15374                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 15375  01321C  0EA4               	movlw	low _PortC
 15376  01321E  0101               	movlb	1	; () banked
 15377  013220  6F00               	movwf	Port_Init@pInput& (0+255),b
 15378  013222  0E00               	movlw	high _PortC
 15379  013224  0101               	movlb	1	; () banked
 15380  013226  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15381  013228  0E02               	movlw	2
 15382  01322A  0101               	movlb	1	; () banked
 15383  01322C  6F02               	movwf	Port_Init@pPort& (0+255),b
 15384  01322E  EC61  F097         	call	_Port_Init	;wreg free
 15385                           
 15386                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 15387  013232  0E9A               	movlw	low _PortD
 15388  013234  0101               	movlb	1	; () banked
 15389  013236  6F00               	movwf	Port_Init@pInput& (0+255),b
 15390  013238  0E00               	movlw	high _PortD
 15391  01323A  0101               	movlb	1	; () banked
 15392  01323C  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15393  01323E  0E03               	movlw	3
 15394  013240  0101               	movlb	1	; () banked
 15395  013242  6F02               	movwf	Port_Init@pPort& (0+255),b
 15396  013244  EC61  F097         	call	_Port_Init	;wreg free
 15397                           
 15398                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 15399  013248  0E90               	movlw	low _PortE
 15400  01324A  0101               	movlb	1	; () banked
 15401  01324C  6F00               	movwf	Port_Init@pInput& (0+255),b
 15402  01324E  0E00               	movlw	high _PortE
 15403  013250  0101               	movlb	1	; () banked
 15404  013252  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15405  013254  0E04               	movlw	4
 15406  013256  0101               	movlb	1	; () banked
 15407  013258  6F02               	movwf	Port_Init@pPort& (0+255),b
 15408  01325A  EC61  F097         	call	_Port_Init	;wreg free
 15409                           
 15410                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 15411  01325E  0EC4               	movlw	low _PortF
 15412  013260  0101               	movlb	1	; () banked
 15413  013262  6F00               	movwf	Port_Init@pInput& (0+255),b
 15414  013264  0E03               	movlw	high _PortF
 15415  013266  0101               	movlb	1	; () banked
 15416  013268  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15417  01326A  0E05               	movlw	5
 15418  01326C  0101               	movlb	1	; () banked
 15419  01326E  6F02               	movwf	Port_Init@pPort& (0+255),b
 15420  013270  EC61  F097         	call	_Port_Init	;wreg free
 15421                           
 15422                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 15423  013274  0EA6               	movlw	low _PortG
 15424  013276  0101               	movlb	1	; () banked
 15425  013278  6F00               	movwf	Port_Init@pInput& (0+255),b
 15426  01327A  0E03               	movlw	high _PortG
 15427  01327C  0101               	movlb	1	; () banked
 15428  01327E  6F01               	movwf	(Port_Init@pInput+1)& (0+255),b
 15429  013280  0E06               	movlw	6
 15430  013282  0101               	movlb	1	; () banked
 15431  013284  6F02               	movwf	Port_Init@pPort& (0+255),b
 15432  013286  EC61  F097         	call	_Port_Init	;wreg free
 15433                           
 15434                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 15435  01328A  0EC4               	movlw	low _PortF
 15436  01328C  0100               	movlb	0	; () banked
 15437  01328E  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 15438  013290  0E03               	movlw	high _PortF
 15439  013292  0100               	movlb	0	; () banked
 15440  013294  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15441  013296  0E05               	movlw	5
 15442  013298  0100               	movlb	0	; () banked
 15443  01329A  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 15444  01329C  0E00               	movlw	0
 15445  01329E  0100               	movlb	0	; () banked
 15446  0132A0  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 15447  0132A2  ECB2  F095         	call	_Port_SetPinType	;wreg free
 15448                           
 15449                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 15450  0132A6  0EB0               	movlw	low _PortB
 15451  0132A8  0100               	movlb	0	; () banked
 15452  0132AA  6FEF               	movwf	Port_SetQuadType@pInput& (0+255),b
 15453  0132AC  0E03               	movlw	high _PortB
 15454  0132AE  0100               	movlb	0	; () banked
 15455  0132B0  6FF0               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 15456  0132B2  0E00               	movlw	0
 15457  0132B4  0100               	movlb	0	; () banked
 15458  0132B6  6FF1               	movwf	Port_SetQuadType@pQuad& (0+255),b
 15459  0132B8  0E00               	movlw	0
 15460  0132BA  0100               	movlb	0	; () banked
 15461  0132BC  6FF2               	movwf	Port_SetQuadType@pType& (0+255),b
 15462  0132BE  ECA5  F08F         	call	_Port_SetQuadType	;wreg free
 15463                           
 15464                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 15465  0132C2  0EC4               	movlw	low _PortF
 15466  0132C4  0100               	movlb	0	; () banked
 15467  0132C6  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 15468  0132C8  0E03               	movlw	high _PortF
 15469  0132CA  0100               	movlb	0	; () banked
 15470  0132CC  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15471  0132CE  0E06               	movlw	6
 15472  0132D0  0100               	movlb	0	; () banked
 15473  0132D2  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 15474  0132D4  0E03               	movlw	3
 15475  0132D6  0100               	movlb	0	; () banked
 15476  0132D8  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 15477  0132DA  ECB2  F095         	call	_Port_SetPinType	;wreg free
 15478                           
 15479                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 15480  0132DE  0EA6               	movlw	low _PortG
 15481  0132E0  0100               	movlb	0	; () banked
 15482  0132E2  6FF3               	movwf	Port_SetType@pInput& (0+255),b
 15483  0132E4  0E03               	movlw	high _PortG
 15484  0132E6  0100               	movlb	0	; () banked
 15485  0132E8  6FF4               	movwf	(Port_SetType@pInput+1)& (0+255),b
 15486  0132EA  0E03               	movlw	3
 15487  0132EC  0100               	movlb	0	; () banked
 15488  0132EE  6FF5               	movwf	Port_SetType@pType& (0+255),b
 15489  0132F0  ECD0  F090         	call	_Port_SetType	;wreg free
 15490                           
 15491                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 15492  0132F4  0EA6               	movlw	low _PortG
 15493  0132F6  0100               	movlb	0	; () banked
 15494  0132F8  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 15495  0132FA  0E03               	movlw	high _PortG
 15496  0132FC  0100               	movlb	0	; () banked
 15497  0132FE  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15498  013300  0E04               	movlw	4
 15499  013302  0100               	movlb	0	; () banked
 15500  013304  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 15501  013306  0E00               	movlw	0
 15502  013308  0100               	movlb	0	; () banked
 15503  01330A  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 15504  01330C  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 15505                           
 15506                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 15507  013310  0EC4               	movlw	low _PortF
 15508  013312  0100               	movlb	0	; () banked
 15509  013314  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 15510  013316  0E03               	movlw	high _PortF
 15511  013318  0100               	movlb	0	; () banked
 15512  01331A  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15513  01331C  0E06               	movlw	6
 15514  01331E  0100               	movlb	0	; () banked
 15515  013320  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 15516  013322  0E01               	movlw	1
 15517  013324  0100               	movlb	0	; () banked
 15518  013326  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 15519  013328  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 15520                           
 15521                           ;MXK.c: 55: LED_Init(eLED1);
 15522  01332C  0E00               	movlw	0
 15523  01332E  EC5C  F0AF         	call	_LED_Init
 15524                           
 15525                           ;MXK.c: 56: LED_Init(eLED2);
 15526  013332  0E01               	movlw	1
 15527  013334  EC5C  F0AF         	call	_LED_Init
 15528                           
 15529                           ;MXK.c: 58: PIR1 = 0;
 15530  013338  0E00               	movlw	0
 15531  01333A  6E9E               	movwf	3998,c	;volatile
 15532                           
 15533                           ;MXK.c: 59: PIR2 = 0;
 15534  01333C  0E00               	movlw	0
 15535  01333E  6EA1               	movwf	4001,c	;volatile
 15536                           
 15537                           ;MXK.c: 60: PIR3 = 0;
 15538  013340  0E00               	movlw	0
 15539  013342  6EA4               	movwf	4004,c	;volatile
 15540                           
 15541                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 15542  013344  8E9B               	bsf	3995,7,c	;volatile
 15543                           
 15544                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 15545  013346  8C9B               	bsf	3995,6,c	;volatile
 15546                           
 15547                           ;MXK.c: 66: delay_ms(100);
 15548  013348  0E00               	movlw	0
 15549  01334A  0100               	movlb	0	; () banked
 15550  01334C  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 15551  01334E  0E64               	movlw	100
 15552  013350  6FB9               	movwf	delay_ms@ms& (0+255),b
 15553  013352  EC5A  F0AE         	call	_delay_ms	;wreg free
 15554                           
 15555                           ;MXK.c: 68: RCONbits.IPEN = 1;
 15556  013356  8ED0               	bsf	4048,7,c	;volatile
 15557  013358  0012               	return		;funcret
 15558  01335A                     __end_of_MXK_Init:
 15559                           	opt stack 0
 15560                           tblptru	equ	0xFF8
 15561                           tblptrh	equ	0xFF7
 15562                           tblptrl	equ	0xFF6
 15563                           tablat	equ	0xFF5
 15564                           prodh	equ	0xFF4
 15565                           prodl	equ	0xFF3
 15566                           intcon	equ	0xFF2
 15567                           postinc0	equ	0xFEE
 15568                           wreg	equ	0xFE8
 15569                           indf1	equ	0xFE7
 15570                           postdec1	equ	0xFE5
 15571                           fsr1h	equ	0xFE2
 15572                           fsr1l	equ	0xFE1
 15573                           indf2	equ	0xFDF
 15574                           postinc2	equ	0xFDE
 15575                           postdec2	equ	0xFDD
 15576                           fsr2h	equ	0xFDA
 15577                           fsr2l	equ	0xFD9
 15578                           status	equ	0xFD8
 15579                           
 15580 ;; *************** function _Port_Init *****************
 15581 ;; Defined at:
 15582 ;;		line 150 in file "Library/Port.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  pInput          2    0[BANK1 ] const PTR struct Port
 15585 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15586 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15587 ;;  pPort           1    2[BANK1 ] enum E6786
 15588 ;; Auto vars:     Size  Location     Type
 15589 ;;  i               1    5[BANK1 ] unsigned char 
 15590 ;; Return value:  Size  Location     Type
 15591 ;;                  1    wreg      void 
 15592 ;; Registers used:
 15593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15594 ;; Tracked objects:
 15595 ;;		On entry : 0/0
 15596 ;;		On exit  : 0/0
 15597 ;;		Unchanged: 0/0
 15598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15599 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15600 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15601 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15602 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15603 ;;Total ram usage:        6 bytes
 15604 ;; Hardware stack levels used:    1
 15605 ;; Hardware stack levels required when called:   15
 15606 ;; This function calls:
 15607 ;;		_GetPortPORT
 15608 ;;		_GetPortProperties
 15609 ;;		_GetPortTRIS
 15610 ;;		_Port_Set
 15611 ;;		_Port_SetPinType
 15612 ;;		_Port_SetType
 15613 ;;		_Word_GetPair
 15614 ;; This function is called by:
 15615 ;;		_MXK_Init
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           	psect	text62
 15620  012EC2                     __ptext62:
 15621                           	opt stack 0
 15622  012EC2                     _Port_Init:
 15623                           	opt stack 13
 15624                           
 15625                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 15626                           
 15627                           ;incstack = 0
 15628  012EC2  0101               	movlb	1	; () banked
 15629  012EC4  5102               	movf	Port_Init@pPort& (0+255),w,b
 15630  012EC6  EC93  F0A7         	call	_GetPortProperties
 15631  012ECA  C100  FFD9         	movff	Port_Init@pInput,fsr2l
 15632  012ECE  C101  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15633  012ED2  0100               	movlb	0	; () banked
 15634  012ED4  C0B9  FFDE         	movff	?_GetPortProperties,postinc2
 15635  012ED8  0100               	movlb	0	; () banked
 15636  012EDA  C0BA  FFDD         	movff	?_GetPortProperties+1,postdec2
 15637                           
 15638                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 15639  012EDE  0101               	movlb	1	; () banked
 15640  012EE0  5102               	movf	Port_Init@pPort& (0+255),w,b
 15641  012EE2  ECE6  F0A7         	call	_GetPortPORT
 15642  012EE6  0101               	movlb	1	; () banked
 15643  012EE8  EE20 F006          	lfsr	2,6
 15644  012EEC  5100               	movf	Port_Init@pInput& (0+255),w,b
 15645  012EEE  26D9               	addwf	fsr2l,f,c
 15646  012EF0  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15647  012EF2  22DA               	addwfc	fsr2h,f,c
 15648  012EF4  0100               	movlb	0	; () banked
 15649  012EF6  C0B9  FFDE         	movff	?_GetPortPORT,postinc2
 15650  012EFA  0100               	movlb	0	; () banked
 15651  012EFC  C0BA  FFDD         	movff	?_GetPortPORT+1,postdec2
 15652                           
 15653                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 15654  012F00  0101               	movlb	1	; () banked
 15655  012F02  5102               	movf	Port_Init@pPort& (0+255),w,b
 15656  012F04  ECE6  F0A7         	call	_GetPortPORT
 15657  012F08  0101               	movlb	1	; () banked
 15658  012F0A  EE20 F004          	lfsr	2,4
 15659  012F0E  5100               	movf	Port_Init@pInput& (0+255),w,b
 15660  012F10  26D9               	addwf	fsr2l,f,c
 15661  012F12  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15662  012F14  22DA               	addwfc	fsr2h,f,c
 15663  012F16  0100               	movlb	0	; () banked
 15664  012F18  C0B9  FFDE         	movff	?_GetPortPORT,postinc2
 15665  012F1C  0100               	movlb	0	; () banked
 15666  012F1E  C0BA  FFDD         	movff	?_GetPortPORT+1,postdec2
 15667                           
 15668                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 15669  012F22  0101               	movlb	1	; () banked
 15670  012F24  5102               	movf	Port_Init@pPort& (0+255),w,b
 15671  012F26  EC40  F0A7         	call	_GetPortTRIS
 15672  012F2A  0101               	movlb	1	; () banked
 15673  012F2C  EE20 F002          	lfsr	2,2
 15674  012F30  5100               	movf	Port_Init@pInput& (0+255),w,b
 15675  012F32  26D9               	addwf	fsr2l,f,c
 15676  012F34  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15677  012F36  22DA               	addwfc	fsr2h,f,c
 15678  012F38  0100               	movlb	0	; () banked
 15679  012F3A  C0B9  FFDE         	movff	?_GetPortTRIS,postinc2
 15680  012F3E  0100               	movlb	0	; () banked
 15681  012F40  C0BA  FFDD         	movff	?_GetPortTRIS+1,postdec2
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 15685  012F44  0101               	movlb	1	; () banked
 15686  012F46  EE20 F004          	lfsr	2,4
 15687  012F4A  5100               	movf	Port_Init@pInput& (0+255),w,b
 15688  012F4C  26D9               	addwf	fsr2l,f,c
 15689  012F4E  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15690  012F50  22DA               	addwfc	fsr2h,f,c
 15691  012F52  CFDE F103          	movff	postinc2,??_Port_Init
 15692  012F56  CFDD F104          	movff	postdec2,??_Port_Init+1
 15693  012F5A  C103  FFD9         	movff	??_Port_Init,fsr2l
 15694  012F5E  C104  FFDA         	movff	??_Port_Init+1,fsr2h
 15695  012F62  0E00               	movlw	0
 15696  012F64  6EDF               	movwf	indf2,c
 15697                           
 15698                           ; BSR set to: 1
 15699                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 15700  012F66  0101               	movlb	1	; () banked
 15701  012F68  EE20 F002          	lfsr	2,2
 15702  012F6C  5100               	movf	Port_Init@pInput& (0+255),w,b
 15703  012F6E  26D9               	addwf	fsr2l,f,c
 15704  012F70  5101               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15705  012F72  22DA               	addwfc	fsr2h,f,c
 15706  012F74  CFDE F103          	movff	postinc2,??_Port_Init
 15707  012F78  CFDD F104          	movff	postdec2,??_Port_Init+1
 15708  012F7C  C103  FFD9         	movff	??_Port_Init,fsr2l
 15709  012F80  C104  FFDA         	movff	??_Port_Init+1,fsr2h
 15710  012F84  0EFF               	movlw	255
 15711  012F86  6EDF               	movwf	indf2,c
 15712                           
 15713                           ; BSR set to: 1
 15714                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 15715  012F88  C100  F0F3         	movff	Port_Init@pInput,Port_SetType@pInput
 15716  012F8C  C101  F0F4         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 15717  012F90  0E00               	movlw	0
 15718  012F92  0100               	movlb	0	; () banked
 15719  012F94  6FF5               	movwf	Port_SetType@pType& (0+255),b
 15720  012F96  ECD0  F090         	call	_Port_SetType	;wreg free
 15721                           
 15722                           ;Port.c: 166: UINT8 i;
 15723                           ;Port.c: 167: for (i=0; i<8; i++)
 15724  012F9A  0E00               	movlw	0
 15725  012F9C  0101               	movlb	1	; () banked
 15726  012F9E  6F05               	movwf	Port_Init@i& (0+255),b
 15727  012FA0                     l14409:
 15728                           
 15729                           ; BSR set to: 1
 15730  012FA0  0E07               	movlw	7
 15731  012FA2  0101               	movlb	1	; () banked
 15732  012FA4  6505               	cpfsgt	Port_Init@i& (0+255),b
 15733  012FA6  D031               	goto	l403
 15734  012FA8  D04B               	goto	u11260
 15735  012FAA                     
 15736                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 15737                           
 15738                           ; BSR set to: 1
 15739  012FAA  C100  F0DF         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15740  012FAE  C101  F0E0         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15741  012FB2  C105  F0E1         	movff	Port_Init@i,Port_SetPinType@pPin
 15742  012FB6  0E03               	movlw	3
 15743  012FB8  0100               	movlb	0	; () banked
 15744  012FBA  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 15745  012FBC  ECB2  F095         	call	_Port_SetPinType	;wreg free
 15746                           
 15747                           ;Port.c: 173: break;
 15748  012FC0  D03C               	goto	l405
 15749  012FC2                     
 15750                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 15751  012FC2  C100  F0DF         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15752  012FC6  C101  F0E0         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15753  012FCA  C105  F0E1         	movff	Port_Init@i,Port_SetPinType@pPin
 15754  012FCE  0E02               	movlw	2
 15755  012FD0  0100               	movlb	0	; () banked
 15756  012FD2  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 15757  012FD4  ECB2  F095         	call	_Port_SetPinType	;wreg free
 15758                           
 15759                           ;Port.c: 176: break;
 15760  012FD8  D030               	goto	l405
 15761  012FDA                     
 15762                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 15763  012FDA  C100  F0DF         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15764  012FDE  C101  F0E0         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15765  012FE2  C105  F0E1         	movff	Port_Init@i,Port_SetPinType@pPin
 15766  012FE6  0E01               	movlw	1
 15767  012FE8  0100               	movlb	0	; () banked
 15768  012FEA  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 15769  012FEC  ECB2  F095         	call	_Port_SetPinType	;wreg free
 15770                           
 15771                           ;Port.c: 179: break;
 15772  012FF0  D024               	goto	l405
 15773  012FF2                     
 15774                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 15775  012FF2  C100  F0DF         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15776  012FF6  C101  F0E0         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15777  012FFA  C105  F0E1         	movff	Port_Init@i,Port_SetPinType@pPin
 15778  012FFE  0E00               	movlw	0
 15779  013000  0100               	movlb	0	; () banked
 15780  013002  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 15781  013004  ECB2  F095         	call	_Port_SetPinType	;wreg free
 15782                           
 15783                           ;Port.c: 183: }
 15784                           
 15785                           ;Port.c: 182: break;
 15786  013008  D018               	goto	l405
 15787  01300A                     l403:
 15788  01300A  C100  FFD9         	movff	Port_Init@pInput,fsr2l
 15789  01300E  C101  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15790  013012  CFDE F0C5          	movff	postinc2,Word_GetPair@pInput
 15791  013016  CFDD F0C6          	movff	postdec2,Word_GetPair@pInput+1
 15792  01301A  C105  F0C7         	movff	Port_Init@i,Word_GetPair@pPair
 15793  01301E  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 15794                           
 15795                           ; Switch size 1, requested type "space"
 15796                           ; Number of cases is 4, Range of values is 0 to 3
 15797                           ; switch strategies available:
 15798                           ; Name         Instructions Cycles
 15799                           ; simple_byte           13     7 (average)
 15800                           ;	Chosen strategy is simple_byte
 15801  013022  0A00               	xorlw	0	; case 0
 15802  013024  B4D8               	btfsc	status,2,c
 15803  013026  D7C1               	goto	l404
 15804  013028  0A01               	xorlw	1	; case 1
 15805  01302A  B4D8               	btfsc	status,2,c
 15806  01302C  D7D6               	goto	l407
 15807  01302E  0A03               	xorlw	3	; case 2
 15808  013030  B4D8               	btfsc	status,2,c
 15809  013032  D7C7               	goto	l406
 15810  013034  0A01               	xorlw	1	; case 3
 15811  013036  B4D8               	btfsc	status,2,c
 15812  013038  D7DC               	goto	l408
 15813  01303A                     l405:
 15814  01303A  0101               	movlb	1	; () banked
 15815  01303C  2B05               	incf	Port_Init@i& (0+255),f,b
 15816  01303E  D7B0               	goto	l14409
 15817  013040                     u11260:
 15818                           
 15819                           ; BSR set to: 1
 15820                           ;Port.c: 184: }
 15821                           ;Port.c: 185: Port_Set(pInput, 0x00);
 15822                           
 15823                           ; BSR set to: 1
 15824  013040  C100  F0C8         	movff	Port_Init@pInput,Port_Set@pInput
 15825  013044  C101  F0C9         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 15826  013048  0E00               	movlw	0
 15827  01304A  0100               	movlb	0	; () banked
 15828  01304C  6FCA               	movwf	Port_Set@pValue& (0+255),b
 15829  01304E  EC86  F08C         	call	_Port_Set	;wreg free
 15830  013052  0012               	return		;funcret
 15831  013054                     __end_of_Port_Init:
 15832                           	opt stack 0
 15833                           tblptru	equ	0xFF8
 15834                           tblptrh	equ	0xFF7
 15835                           tblptrl	equ	0xFF6
 15836                           tablat	equ	0xFF5
 15837                           prodh	equ	0xFF4
 15838                           prodl	equ	0xFF3
 15839                           intcon	equ	0xFF2
 15840                           postinc0	equ	0xFEE
 15841                           wreg	equ	0xFE8
 15842                           indf1	equ	0xFE7
 15843                           postdec1	equ	0xFE5
 15844                           fsr1h	equ	0xFE2
 15845                           fsr1l	equ	0xFE1
 15846                           indf2	equ	0xFDF
 15847                           postinc2	equ	0xFDE
 15848                           postdec2	equ	0xFDD
 15849                           fsr2h	equ	0xFDA
 15850                           fsr2l	equ	0xFD9
 15851                           status	equ	0xFD8
 15852                           
 15853 ;; *************** function _Port_SetType *****************
 15854 ;; Defined at:
 15855 ;;		line 513 in file "Library/Port.c"
 15856 ;; Parameters:    Size  Location     Type
 15857 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 15858 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15859 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15860 ;;  pType           1   60[BANK0 ] enum E6795
 15861 ;; Auto vars:     Size  Location     Type
 15862 ;;  Output          1   63[BANK0 ] enum E6475
 15863 ;; Return value:  Size  Location     Type
 15864 ;;                  1    wreg      enum E6475
 15865 ;; Registers used:
 15866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15867 ;; Tracked objects:
 15868 ;;		On entry : 0/0
 15869 ;;		On exit  : 0/0
 15870 ;;		Unchanged: 0/0
 15871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15872 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15875 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15876 ;;Total ram usage:        6 bytes
 15877 ;; Hardware stack levels used:    1
 15878 ;; Hardware stack levels required when called:   14
 15879 ;; This function calls:
 15880 ;;		_Port_CheckPortType
 15881 ;;		_Word_SetPair
 15882 ;; This function is called by:
 15883 ;;		_Port_Init
 15884 ;;		_MXK_Init
 15885 ;; This function uses a non-reentrant model
 15886 ;;
 15887                           
 15888                           	psect	text63
 15889  0121A0                     __ptext63:
 15890                           	opt stack 0
 15891  0121A0                     _Port_SetType:
 15892                           	opt stack 14
 15893                           
 15894                           ;Port.c: 515: ePinError Output = ePinErrorState;
 15895                           
 15896                           ;incstack = 0
 15897  0121A0  0E05               	movlw	5
 15898  0121A2  0100               	movlb	0	; () banked
 15899  0121A4  6FF8               	movwf	Port_SetType@Output& (0+255),b
 15900                           
 15901                           ;Port.c: 517: switch (pType)
 15902  0121A6  D07A               	goto	l509
 15903  0121A8                     
 15904                           ; BSR set to: 0
 15905                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 15906                           
 15907                           ; BSR set to: 0
 15908  0121A8  0100               	movlb	0	; () banked
 15909  0121AA  EE20 F002          	lfsr	2,2
 15910  0121AE  51F3               	movf	Port_SetType@pInput& (0+255),w,b
 15911  0121B0  26D9               	addwf	fsr2l,f,c
 15912  0121B2  51F4               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15913  0121B4  22DA               	addwfc	fsr2h,f,c
 15914  0121B6  CFDE F0F6          	movff	postinc2,??_Port_SetType
 15915  0121BA  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
 15916  0121BE  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
 15917  0121C2  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
 15918  0121C6  0EFF               	movlw	255
 15919  0121C8  D067               	goto	L10
 15920  0121CA                     
 15921                           ; BSR set to: 0
 15922                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 15923                           
 15924                           ; BSR set to: 0
 15925  0121CA  C0F3  F0EF         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15926  0121CE  C0F4  F0F0         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15927  0121D2  0E01               	movlw	1
 15928  0121D4  0100               	movlb	0	; () banked
 15929  0121D6  6FF1               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15930  0121D8  EC5A  F0B1         	call	_Port_CheckPortType	;wreg free
 15931  0121DC  0100               	movlb	0	; () banked
 15932  0121DE  6FF8               	movwf	Port_SetType@Output& (0+255),b
 15933  0121E0  0100               	movlb	0	; () banked
 15934  0121E2  51F8               	movf	Port_SetType@Output& (0+255),w,b
 15935  0121E4  A4D8               	btfss	status,2,c
 15936  0121E6  0012               	return	
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;Port.c: 527: {
 15940                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 15941  0121E8  0100               	movlb	0	; () banked
 15942  0121EA  EE20 F002          	lfsr	2,2
 15943  0121EE  51F3               	movf	Port_SetType@pInput& (0+255),w,b
 15944  0121F0  26D9               	addwf	fsr2l,f,c
 15945  0121F2  51F4               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15946  0121F4  22DA               	addwfc	fsr2h,f,c
 15947  0121F6  CFDE F0F6          	movff	postinc2,??_Port_SetType
 15948  0121FA  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
 15949  0121FE  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
 15950  012202  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
 15951  012206  0E00               	movlw	0
 15952  012208  6EDF               	movwf	indf2,c
 15953                           
 15954                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 15955  01220A  0100               	movlb	0	; () banked
 15956  01220C  EE20 F004          	lfsr	2,4
 15957  012210  D036               	goto	L21
 15958  012212                     
 15959                           ; BSR set to: 0
 15960                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 15961                           
 15962                           ; BSR set to: 0
 15963  012212  C0F3  F0EF         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15964  012216  C0F4  F0F0         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15965  01221A  0E02               	movlw	2
 15966  01221C  0100               	movlb	0	; () banked
 15967  01221E  6FF1               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15968  012220  EC5A  F0B1         	call	_Port_CheckPortType	;wreg free
 15969  012224  0100               	movlb	0	; () banked
 15970  012226  6FF8               	movwf	Port_SetType@Output& (0+255),b
 15971  012228  0100               	movlb	0	; () banked
 15972  01222A  51F8               	movf	Port_SetType@Output& (0+255),w,b
 15973  01222C  A4D8               	btfss	status,2,c
 15974  01222E  0012               	return	
 15975                           
 15976                           ; BSR set to: 0
 15977                           ;Port.c: 538: {
 15978                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 15979  012230  0100               	movlb	0	; () banked
 15980  012232  EE20 F002          	lfsr	2,2
 15981  012236  51F3               	movf	Port_SetType@pInput& (0+255),w,b
 15982  012238  26D9               	addwf	fsr2l,f,c
 15983  01223A  51F4               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15984  01223C  22DA               	addwfc	fsr2h,f,c
 15985  01223E  CFDE F0F6          	movff	postinc2,??_Port_SetType
 15986  012242  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
 15987  012246  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
 15988  01224A  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
 15989  01224E  0EFF               	movlw	255
 15990  012250  6EDF               	movwf	indf2,c
 15991                           
 15992                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 15993  012252  0100               	movlb	0	; () banked
 15994  012254  EE20 F004          	lfsr	2,4
 15995  012258  D7AA               	goto	L11
 15996  01225A                     
 15997                           ; BSR set to: 0
 15998                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 15999                           
 16000                           ; BSR set to: 0
 16001  01225A  C0F3  F0EF         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16002  01225E  C0F4  F0F0         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16003  012262  0E00               	movlw	0
 16004  012264  0100               	movlb	0	; () banked
 16005  012266  6FF1               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16006  012268  EC5A  F0B1         	call	_Port_CheckPortType	;wreg free
 16007  01226C  0100               	movlb	0	; () banked
 16008  01226E  6FF8               	movwf	Port_SetType@Output& (0+255),b
 16009  012270  0100               	movlb	0	; () banked
 16010  012272  51F8               	movf	Port_SetType@Output& (0+255),w,b
 16011  012274  A4D8               	btfss	status,2,c
 16012  012276  0012               	return	
 16013                           
 16014                           ; BSR set to: 0
 16015                           ;Port.c: 549: {
 16016                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16017  012278  0100               	movlb	0	; () banked
 16018  01227A  EE20 F002          	lfsr	2,2
 16019  01227E                     L21:
 16020  01227E  51F3               	movf	Port_SetType@pInput& (0+255),w,b
 16021  012280  26D9               	addwf	fsr2l,f,c
 16022  012282  51F4               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16023  012284  22DA               	addwfc	fsr2h,f,c
 16024  012286  CFDE F0F6          	movff	postinc2,??_Port_SetType
 16025  01228A  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
 16026  01228E  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
 16027  012292  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
 16028  012296  0E00               	movlw	0
 16029  012298                     L10:
 16030  012298  6EDF               	movwf	indf2,c
 16031                           
 16032                           ;Port.c: 552: }
 16033  01229A  D00E               	goto	l511
 16034  01229C                     l509:
 16035                           
 16036                           ; BSR set to: 0
 16037                           
 16038                           ; BSR set to: 0
 16039  01229C  0100               	movlb	0	; () banked
 16040  01229E  51F5               	movf	Port_SetType@pType& (0+255),w,b
 16041                           
 16042                           ; Switch size 1, requested type "space"
 16043                           ; Number of cases is 4, Range of values is 0 to 3
 16044                           ; switch strategies available:
 16045                           ; Name         Instructions Cycles
 16046                           ; simple_byte           13     7 (average)
 16047                           ;	Chosen strategy is simple_byte
 16048  0122A0  0A00               	xorlw	0	; case 0
 16049  0122A2  B4D8               	btfsc	status,2,c
 16050  0122A4  D781               	goto	l510
 16051  0122A6  0A01               	xorlw	1	; case 1
 16052  0122A8  B4D8               	btfsc	status,2,c
 16053  0122AA  D78F               	goto	l512
 16054  0122AC  0A03               	xorlw	3	; case 2
 16055  0122AE  B4D8               	btfsc	status,2,c
 16056  0122B0  D7B0               	goto	l516
 16057  0122B2  0A01               	xorlw	1	; case 3
 16058  0122B4  B4D8               	btfsc	status,2,c
 16059  0122B6  D7D1               	goto	l519
 16060  0122B8                     l511:
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 16064                           
 16065                           ; BSR set to: 0
 16066  0122B8  0E08               	movlw	8
 16067  0122BA  0100               	movlb	0	; () banked
 16068  0122BC  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16069  0122BE  0100               	movlb	0	; () banked
 16070  0122C0  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16071  0122C2  0E00               	movlw	0
 16072  0122C4  0100               	movlb	0	; () banked
 16073  0122C6  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16074  0122C8  0100               	movlb	0	; () banked
 16075  0122CA  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16076  0122CC  0E00               	movlw	0
 16077  0122CE  0100               	movlb	0	; () banked
 16078  0122D0  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16079  0122D2  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16080  0122D6  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16081                           
 16082                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 16083  0122DA  0E08               	movlw	8
 16084  0122DC  0100               	movlb	0	; () banked
 16085  0122DE  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16086  0122E0  0100               	movlb	0	; () banked
 16087  0122E2  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16088  0122E4  0E00               	movlw	0
 16089  0122E6  0100               	movlb	0	; () banked
 16090  0122E8  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16091  0122EA  0100               	movlb	0	; () banked
 16092  0122EC  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16093  0122EE  0E01               	movlw	1
 16094  0122F0  0100               	movlb	0	; () banked
 16095  0122F2  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16096  0122F4  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16097  0122F8  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16098                           
 16099                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 16100  0122FC  0E08               	movlw	8
 16101  0122FE  0100               	movlb	0	; () banked
 16102  012300  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16103  012302  0100               	movlb	0	; () banked
 16104  012304  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16105  012306  0E00               	movlw	0
 16106  012308  0100               	movlb	0	; () banked
 16107  01230A  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16108  01230C  0100               	movlb	0	; () banked
 16109  01230E  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16110  012310  0E02               	movlw	2
 16111  012312  0100               	movlb	0	; () banked
 16112  012314  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16113  012316  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16114  01231A  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16115                           
 16116                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 16117  01231E  0E08               	movlw	8
 16118  012320  0100               	movlb	0	; () banked
 16119  012322  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16120  012324  0100               	movlb	0	; () banked
 16121  012326  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16122  012328  0E00               	movlw	0
 16123  01232A  0100               	movlb	0	; () banked
 16124  01232C  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16125  01232E  0100               	movlb	0	; () banked
 16126  012330  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16127  012332  0E03               	movlw	3
 16128  012334  0100               	movlb	0	; () banked
 16129  012336  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16130  012338  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16131  01233C  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16132                           
 16133                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 16134  012340  0E08               	movlw	8
 16135  012342  0100               	movlb	0	; () banked
 16136  012344  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16137  012346  0100               	movlb	0	; () banked
 16138  012348  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16139  01234A  0E00               	movlw	0
 16140  01234C  0100               	movlb	0	; () banked
 16141  01234E  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16142  012350  0100               	movlb	0	; () banked
 16143  012352  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16144  012354  0E04               	movlw	4
 16145  012356  0100               	movlb	0	; () banked
 16146  012358  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16147  01235A  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16148  01235E  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16149                           
 16150                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 16151  012362  0E08               	movlw	8
 16152  012364  0100               	movlb	0	; () banked
 16153  012366  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16154  012368  0100               	movlb	0	; () banked
 16155  01236A  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16156  01236C  0E00               	movlw	0
 16157  01236E  0100               	movlb	0	; () banked
 16158  012370  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16159  012372  0100               	movlb	0	; () banked
 16160  012374  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16161  012376  0E05               	movlw	5
 16162  012378  0100               	movlb	0	; () banked
 16163  01237A  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16164  01237C  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16165  012380  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16166                           
 16167                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 16168  012384  0E08               	movlw	8
 16169  012386  0100               	movlb	0	; () banked
 16170  012388  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16171  01238A  0100               	movlb	0	; () banked
 16172  01238C  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16173  01238E  0E00               	movlw	0
 16174  012390  0100               	movlb	0	; () banked
 16175  012392  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16176  012394  0100               	movlb	0	; () banked
 16177  012396  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16178  012398  0E06               	movlw	6
 16179  01239A  0100               	movlb	0	; () banked
 16180  01239C  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16181  01239E  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16182  0123A2  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16183                           
 16184                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 16185  0123A6  0E08               	movlw	8
 16186  0123A8  0100               	movlb	0	; () banked
 16187  0123AA  25F3               	addwf	Port_SetType@pInput& (0+255),w,b
 16188  0123AC  0100               	movlb	0	; () banked
 16189  0123AE  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 16190  0123B0  0E00               	movlw	0
 16191  0123B2  0100               	movlb	0	; () banked
 16192  0123B4  21F4               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16193  0123B6  0100               	movlb	0	; () banked
 16194  0123B8  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16195  0123BA  0E07               	movlw	7
 16196  0123BC  0100               	movlb	0	; () banked
 16197  0123BE  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 16198  0123C0  C0F5  F0CB         	movff	Port_SetType@pType,Word_SetPair@pValue
 16199  0123C4  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 16200  0123C8  0012               	return	
 16201  0123CA                     __end_of_Port_SetType:
 16202                           	opt stack 0
 16203                           tblptru	equ	0xFF8
 16204                           tblptrh	equ	0xFF7
 16205                           tblptrl	equ	0xFF6
 16206                           tablat	equ	0xFF5
 16207                           prodh	equ	0xFF4
 16208                           prodl	equ	0xFF3
 16209                           intcon	equ	0xFF2
 16210                           postinc0	equ	0xFEE
 16211                           wreg	equ	0xFE8
 16212                           indf1	equ	0xFE7
 16213                           postdec1	equ	0xFE5
 16214                           fsr1h	equ	0xFE2
 16215                           fsr1l	equ	0xFE1
 16216                           indf2	equ	0xFDF
 16217                           postinc2	equ	0xFDE
 16218                           postdec2	equ	0xFDD
 16219                           fsr2h	equ	0xFDA
 16220                           fsr2l	equ	0xFD9
 16221                           status	equ	0xFD8
 16222                           
 16223 ;; *************** function _Port_CheckPortType *****************
 16224 ;; Defined at:
 16225 ;;		line 138 in file "Library/Port.c"
 16226 ;; Parameters:    Size  Location     Type
 16227 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16228 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16229 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16230 ;;  pDrive          1   56[BANK0 ] enum E6469
 16231 ;; Auto vars:     Size  Location     Type
 16232 ;;  Output          1   57[BANK0 ] enum E6475
 16233 ;; Return value:  Size  Location     Type
 16234 ;;                  1    wreg      enum E6475
 16235 ;; Registers used:
 16236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16237 ;; Tracked objects:
 16238 ;;		On entry : 0/0
 16239 ;;		On exit  : 0/0
 16240 ;;		Unchanged: 0/0
 16241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16242 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16246 ;;Total ram usage:        4 bytes
 16247 ;; Hardware stack levels used:    1
 16248 ;; Hardware stack levels required when called:   13
 16249 ;; This function calls:
 16250 ;;		_Port_CheckQuadType
 16251 ;; This function is called by:
 16252 ;;		_Port_SetType
 16253 ;; This function uses a non-reentrant model
 16254 ;;
 16255                           
 16256                           	psect	text64
 16257  0162B4                     __ptext64:
 16258                           	opt stack 0
 16259  0162B4                     _Port_CheckPortType:
 16260                           	opt stack 14
 16261                           
 16262                           ;Port.c: 140: ePinError Output = ePinErrorState;
 16263                           
 16264                           ;incstack = 0
 16265  0162B4  0E05               	movlw	5
 16266  0162B6  0100               	movlb	0	; () banked
 16267  0162B8  6FF2               	movwf	Port_CheckPortType@Output& (0+255),b
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 16271  0162BA  C0EF  F0E8         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16272  0162BE  C0F0  F0E9         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16273  0162C2  0E00               	movlw	0
 16274  0162C4  0100               	movlb	0	; () banked
 16275  0162C6  6FEA               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16276  0162C8  C0F1  F0EB         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16277  0162CC  ECEC  F0AF         	call	_Port_CheckQuadType	;wreg free
 16278  0162D0  0100               	movlb	0	; () banked
 16279  0162D2  6FF2               	movwf	Port_CheckPortType@Output& (0+255),b
 16280  0162D4  0100               	movlb	0	; () banked
 16281  0162D6  51F2               	movf	Port_CheckPortType@Output& (0+255),w,b
 16282  0162D8  A4D8               	btfss	status,2,c
 16283  0162DA  D00D               	goto	l397
 16284                           
 16285                           ; BSR set to: 0
 16286                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 16287  0162DC  C0EF  F0E8         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16288  0162E0  C0F0  F0E9         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16289  0162E4  0E01               	movlw	1
 16290  0162E6  0100               	movlb	0	; () banked
 16291  0162E8  6FEA               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16292  0162EA  C0F1  F0EB         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16293  0162EE  ECEC  F0AF         	call	_Port_CheckQuadType	;wreg free
 16294  0162F2  0100               	movlb	0	; () banked
 16295  0162F4  6FF2               	movwf	Port_CheckPortType@Output& (0+255),b
 16296  0162F6                     l397:
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;Port.c: 146: return Output;
 16300                           
 16301                           ; BSR set to: 0
 16302  0162F6  0100               	movlb	0	; () banked
 16303  0162F8  51F2               	movf	Port_CheckPortType@Output& (0+255),w,b
 16304  0162FA  0012               	return	
 16305  0162FC                     __end_of_Port_CheckPortType:
 16306                           	opt stack 0
 16307                           tblptru	equ	0xFF8
 16308                           tblptrh	equ	0xFF7
 16309                           tblptrl	equ	0xFF6
 16310                           tablat	equ	0xFF5
 16311                           prodh	equ	0xFF4
 16312                           prodl	equ	0xFF3
 16313                           intcon	equ	0xFF2
 16314                           postinc0	equ	0xFEE
 16315                           wreg	equ	0xFE8
 16316                           indf1	equ	0xFE7
 16317                           postdec1	equ	0xFE5
 16318                           fsr1h	equ	0xFE2
 16319                           fsr1l	equ	0xFE1
 16320                           indf2	equ	0xFDF
 16321                           postinc2	equ	0xFDE
 16322                           postdec2	equ	0xFDD
 16323                           fsr2h	equ	0xFDA
 16324                           fsr2l	equ	0xFD9
 16325                           status	equ	0xFD8
 16326                           
 16327 ;; *************** function _Port_Set *****************
 16328 ;; Defined at:
 16329 ;;		line 570 in file "Library/Port.c"
 16330 ;; Parameters:    Size  Location     Type
 16331 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16332 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16333 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16334 ;;  pValue          1   17[BANK0 ] unsigned char 
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 16337 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 16338 ;;  Type            1   38[BANK0 ] enum E6795
 16339 ;; Return value:  Size  Location     Type
 16340 ;;                  1    wreg      void 
 16341 ;; Registers used:
 16342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16343 ;; Tracked objects:
 16344 ;;		On entry : 0/0
 16345 ;;		On exit  : 0/0
 16346 ;;		Unchanged: 0/0
 16347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16348 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16349 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16350 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16351 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;Total ram usage:       24 bytes
 16353 ;; Hardware stack levels used:    1
 16354 ;; Hardware stack levels required when called:   10
 16355 ;; This function calls:
 16356 ;;		_Byte_SetByte
 16357 ;;		_Word_GetPair
 16358 ;; This function is called by:
 16359 ;;		_Port_Init
 16360 ;;		_Port_Toggle
 16361 ;; This function uses a non-reentrant model
 16362 ;;
 16363                           
 16364                           	psect	text65
 16365  01190C                     __ptext65:
 16366                           	opt stack 0
 16367  01190C                     _Port_Set:
 16368                           	opt stack 17
 16369                           
 16370                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;incstack = 0
 16374  01190C  0E08               	movlw	8
 16375  01190E  0100               	movlb	0	; () banked
 16376  011910  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16377  011912  0100               	movlb	0	; () banked
 16378  011914  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16379  011916  0E00               	movlw	0
 16380  011918  0100               	movlb	0	; () banked
 16381  01191A  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16382  01191C  0100               	movlb	0	; () banked
 16383  01191E  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16384  011920  0E00               	movlw	0
 16385  011922  0100               	movlb	0	; () banked
 16386  011924  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16387  011926  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16388  01192A  0100               	movlb	0	; () banked
 16389  01192C  6FDF               	movwf	Port_Set@Type& (0+255),b
 16390                           
 16391                           ; BSR set to: 0
 16392                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 16393  01192E  0100               	movlb	0	; () banked
 16394  011930  51DF               	movf	Port_Set@Type& (0+255),w,b
 16395  011932  0100               	movlb	0	; () banked
 16396  011934  6FCB               	movwf	??_Port_Set& (0+255),b
 16397  011936  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16398  011938  0E0E               	movlw	14
 16399  01193A                     u10825:
 16400  01193A  90D8               	bcf	status,0,c
 16401  01193C  0100               	movlb	0	; () banked
 16402  01193E  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16403  011940  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16404  011942  2EE8               	decfsz	wreg,f,c
 16405  011944  D7FA               	goto	u10825
 16406  011946  0100               	movlb	0	; () banked
 16407  011948  51DF               	movf	Port_Set@Type& (0+255),w,b
 16408  01194A  0100               	movlb	0	; () banked
 16409  01194C  6FCD               	movwf	(??_Port_Set+2)& (0+255),b
 16410  01194E  6BCE               	clrf	(??_Port_Set+3)& (0+255),b
 16411  011950  0E0C               	movlw	12
 16412  011952                     u10835:
 16413  011952  90D8               	bcf	status,0,c
 16414  011954  0100               	movlb	0	; () banked
 16415  011956  37CD               	rlcf	(??_Port_Set+2)& (0+255),f,b
 16416  011958  37CE               	rlcf	(??_Port_Set+3)& (0+255),f,b
 16417  01195A  2EE8               	decfsz	wreg,f,c
 16418  01195C  D7FA               	goto	u10835
 16419  01195E  0100               	movlb	0	; () banked
 16420  011960  51DF               	movf	Port_Set@Type& (0+255),w,b
 16421  011962  0100               	movlb	0	; () banked
 16422  011964  6FCF               	movwf	(??_Port_Set+4)& (0+255),b
 16423  011966  6BD0               	clrf	(??_Port_Set+5)& (0+255),b
 16424  011968  0E0A               	movlw	10
 16425  01196A                     u10845:
 16426  01196A  90D8               	bcf	status,0,c
 16427  01196C  0100               	movlb	0	; () banked
 16428  01196E  37CF               	rlcf	(??_Port_Set+4)& (0+255),f,b
 16429  011970  37D0               	rlcf	(??_Port_Set+5)& (0+255),f,b
 16430  011972  2EE8               	decfsz	wreg,f,c
 16431  011974  D7FA               	goto	u10845
 16432  011976  0100               	movlb	0	; () banked
 16433  011978  51DF               	movf	Port_Set@Type& (0+255),w,b
 16434  01197A  0100               	movlb	0	; () banked
 16435  01197C  6FD2               	movwf	(??_Port_Set+7)& (0+255),b
 16436  01197E  6BD1               	clrf	(??_Port_Set+6)& (0+255),b
 16437  011980  0100               	movlb	0	; () banked
 16438  011982  51DF               	movf	Port_Set@Type& (0+255),w,b
 16439  011984  0100               	movlb	0	; () banked
 16440  011986  6FD3               	movwf	(??_Port_Set+8)& (0+255),b
 16441  011988  6BD4               	clrf	(??_Port_Set+9)& (0+255),b
 16442  01198A  0E06               	movlw	6
 16443  01198C                     u10855:
 16444  01198C  90D8               	bcf	status,0,c
 16445  01198E  0100               	movlb	0	; () banked
 16446  011990  37D3               	rlcf	(??_Port_Set+8)& (0+255),f,b
 16447  011992  37D4               	rlcf	(??_Port_Set+9)& (0+255),f,b
 16448  011994  2EE8               	decfsz	wreg,f,c
 16449  011996  D7FA               	goto	u10855
 16450  011998  0100               	movlb	0	; () banked
 16451  01199A  51DF               	movf	Port_Set@Type& (0+255),w,b
 16452  01199C  0100               	movlb	0	; () banked
 16453  01199E  6FD5               	movwf	(??_Port_Set+10)& (0+255),b
 16454  0119A0  6BD6               	clrf	(??_Port_Set+11)& (0+255),b
 16455  0119A2  0100               	movlb	0	; () banked
 16456  0119A4  3BD5               	swapf	(??_Port_Set+10)& (0+255),f,b
 16457  0119A6  3BD6               	swapf	(??_Port_Set+11)& (0+255),f,b
 16458  0119A8  0EF0               	movlw	240
 16459  0119AA  17D6               	andwf	(??_Port_Set+11)& (0+255),f,b
 16460  0119AC  51D5               	movf	(??_Port_Set+10)& (0+255),w,b
 16461  0119AE  0B0F               	andlw	15
 16462  0119B0  13D6               	iorwf	(??_Port_Set+11)& (0+255),f,b
 16463  0119B2  0EF0               	movlw	240
 16464  0119B4  17D5               	andwf	(??_Port_Set+10)& (0+255),f,b
 16465  0119B6  0100               	movlb	0	; () banked
 16466  0119B8  51DF               	movf	Port_Set@Type& (0+255),w,b
 16467  0119BA  0100               	movlb	0	; () banked
 16468  0119BC  6FD7               	movwf	(??_Port_Set+12)& (0+255),b
 16469  0119BE  6BD8               	clrf	(??_Port_Set+13)& (0+255),b
 16470  0119C0  0100               	movlb	0	; () banked
 16471  0119C2  90D8               	bcf	status,0,c
 16472  0119C4  37D7               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16473  0119C6  37D8               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16474  0119C8  0100               	movlb	0	; () banked
 16475  0119CA  90D8               	bcf	status,0,c
 16476  0119CC  37D7               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16477  0119CE  37D8               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16478  0119D0  0100               	movlb	0	; () banked
 16479  0119D2  51DF               	movf	Port_Set@Type& (0+255),w,b
 16480  0119D4  0100               	movlb	0	; () banked
 16481  0119D6  6FD9               	movwf	(??_Port_Set+14)& (0+255),b
 16482  0119D8  6BDA               	clrf	(??_Port_Set+15)& (0+255),b
 16483  0119DA  0100               	movlb	0	; () banked
 16484  0119DC  51D7               	movf	(??_Port_Set+12)& (0+255),w,b
 16485  0119DE  0100               	movlb	0	; () banked
 16486  0119E0  13D9               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16487  0119E2  0100               	movlb	0	; () banked
 16488  0119E4  51D8               	movf	(??_Port_Set+13)& (0+255),w,b
 16489  0119E6  0100               	movlb	0	; () banked
 16490  0119E8  13DA               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16491  0119EA  0100               	movlb	0	; () banked
 16492  0119EC  51D5               	movf	(??_Port_Set+10)& (0+255),w,b
 16493  0119EE  0100               	movlb	0	; () banked
 16494  0119F0  13D9               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16495  0119F2  0100               	movlb	0	; () banked
 16496  0119F4  51D6               	movf	(??_Port_Set+11)& (0+255),w,b
 16497  0119F6  0100               	movlb	0	; () banked
 16498  0119F8  13DA               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16499  0119FA  0100               	movlb	0	; () banked
 16500  0119FC  51D3               	movf	(??_Port_Set+8)& (0+255),w,b
 16501  0119FE  0100               	movlb	0	; () banked
 16502  011A00  13D9               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16503  011A02  0100               	movlb	0	; () banked
 16504  011A04  51D4               	movf	(??_Port_Set+9)& (0+255),w,b
 16505  011A06  0100               	movlb	0	; () banked
 16506  011A08  13DA               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16507  011A0A  0100               	movlb	0	; () banked
 16508  011A0C  51D1               	movf	(??_Port_Set+6)& (0+255),w,b
 16509  011A0E  0100               	movlb	0	; () banked
 16510  011A10  13D9               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16511  011A12  0100               	movlb	0	; () banked
 16512  011A14  51D2               	movf	(??_Port_Set+7)& (0+255),w,b
 16513  011A16  0100               	movlb	0	; () banked
 16514  011A18  13DA               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16515  011A1A  0100               	movlb	0	; () banked
 16516  011A1C  51CF               	movf	(??_Port_Set+4)& (0+255),w,b
 16517  011A1E  0100               	movlb	0	; () banked
 16518  011A20  13D9               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16519  011A22  0100               	movlb	0	; () banked
 16520  011A24  51D0               	movf	(??_Port_Set+5)& (0+255),w,b
 16521  011A26  0100               	movlb	0	; () banked
 16522  011A28  13DA               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16523  011A2A  0100               	movlb	0	; () banked
 16524  011A2C  51CD               	movf	(??_Port_Set+2)& (0+255),w,b
 16525  011A2E  0100               	movlb	0	; () banked
 16526  011A30  13D9               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16527  011A32  0100               	movlb	0	; () banked
 16528  011A34  51CE               	movf	(??_Port_Set+3)& (0+255),w,b
 16529  011A36  0100               	movlb	0	; () banked
 16530  011A38  13DA               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16531  011A3A  0100               	movlb	0	; () banked
 16532  011A3C  51CB               	movf	??_Port_Set& (0+255),w,b
 16533  011A3E  0100               	movlb	0	; () banked
 16534  011A40  11D9               	iorwf	(??_Port_Set+14)& (0+255),w,b
 16535  011A42  0100               	movlb	0	; () banked
 16536  011A44  6FDB               	movwf	Port_Set@TypeRequired& (0+255),b
 16537  011A46  0100               	movlb	0	; () banked
 16538  011A48  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16539  011A4A  0100               	movlb	0	; () banked
 16540  011A4C  11DA               	iorwf	(??_Port_Set+15)& (0+255),w,b
 16541  011A4E  0100               	movlb	0	; () banked
 16542  011A50  6FDC               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 16543                           
 16544                           ; BSR set to: 0
 16545                           ;Port.c: 574: UINT16 TypeActual = Type;
 16546  011A52  C0DF  F0DD         	movff	Port_Set@Type,Port_Set@TypeActual
 16547  011A56  0100               	movlb	0	; () banked
 16548  011A58  6BDE               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 16552  011A5A  0E08               	movlw	8
 16553  011A5C  0100               	movlb	0	; () banked
 16554  011A5E  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16555  011A60  0100               	movlb	0	; () banked
 16556  011A62  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16557  011A64  0E00               	movlw	0
 16558  011A66  0100               	movlb	0	; () banked
 16559  011A68  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16560  011A6A  0100               	movlb	0	; () banked
 16561  011A6C  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16562  011A6E  0E01               	movlw	1
 16563  011A70  0100               	movlb	0	; () banked
 16564  011A72  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16565  011A74  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16566  011A78  0100               	movlb	0	; () banked
 16567  011A7A  6FCB               	movwf	??_Port_Set& (0+255),b
 16568  011A7C  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16569  011A7E  0100               	movlb	0	; () banked
 16570  011A80  90D8               	bcf	status,0,c
 16571  011A82  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16572  011A84  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16573  011A86  0100               	movlb	0	; () banked
 16574  011A88  90D8               	bcf	status,0,c
 16575  011A8A  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16576  011A8C  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16577  011A8E  0100               	movlb	0	; () banked
 16578  011A90  51CB               	movf	??_Port_Set& (0+255),w,b
 16579  011A92  0100               	movlb	0	; () banked
 16580  011A94  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16581  011A96  0100               	movlb	0	; () banked
 16582  011A98  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16583  011A9A  0100               	movlb	0	; () banked
 16584  011A9C  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16585                           
 16586                           ; BSR set to: 0
 16587                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 16588  011A9E  0E08               	movlw	8
 16589  011AA0  0100               	movlb	0	; () banked
 16590  011AA2  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16591  011AA4  0100               	movlb	0	; () banked
 16592  011AA6  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16593  011AA8  0E00               	movlw	0
 16594  011AAA  0100               	movlb	0	; () banked
 16595  011AAC  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16596  011AAE  0100               	movlb	0	; () banked
 16597  011AB0  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16598  011AB2  0E02               	movlw	2
 16599  011AB4  0100               	movlb	0	; () banked
 16600  011AB6  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16601  011AB8  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16602  011ABC  0100               	movlb	0	; () banked
 16603  011ABE  6FCB               	movwf	??_Port_Set& (0+255),b
 16604  011AC0  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16605  011AC2  0100               	movlb	0	; () banked
 16606  011AC4  3BCB               	swapf	??_Port_Set& (0+255),f,b
 16607  011AC6  3BCC               	swapf	(??_Port_Set+1)& (0+255),f,b
 16608  011AC8  0EF0               	movlw	240
 16609  011ACA  17CC               	andwf	(??_Port_Set+1)& (0+255),f,b
 16610  011ACC  51CB               	movf	??_Port_Set& (0+255),w,b
 16611  011ACE  0B0F               	andlw	15
 16612  011AD0  13CC               	iorwf	(??_Port_Set+1)& (0+255),f,b
 16613  011AD2  0EF0               	movlw	240
 16614  011AD4  17CB               	andwf	??_Port_Set& (0+255),f,b
 16615  011AD6  0100               	movlb	0	; () banked
 16616  011AD8  51CB               	movf	??_Port_Set& (0+255),w,b
 16617  011ADA  0100               	movlb	0	; () banked
 16618  011ADC  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16619  011ADE  0100               	movlb	0	; () banked
 16620  011AE0  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16621  011AE2  0100               	movlb	0	; () banked
 16622  011AE4  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 16626  011AE6  0E08               	movlw	8
 16627  011AE8  0100               	movlb	0	; () banked
 16628  011AEA  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16629  011AEC  0100               	movlb	0	; () banked
 16630  011AEE  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16631  011AF0  0E00               	movlw	0
 16632  011AF2  0100               	movlb	0	; () banked
 16633  011AF4  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16634  011AF6  0100               	movlb	0	; () banked
 16635  011AF8  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16636  011AFA  0E03               	movlw	3
 16637  011AFC  0100               	movlb	0	; () banked
 16638  011AFE  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16639  011B00  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16640  011B04  0100               	movlb	0	; () banked
 16641  011B06  6FCB               	movwf	??_Port_Set& (0+255),b
 16642  011B08  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16643  011B0A  0E06               	movlw	6
 16644  011B0C                     u10865:
 16645  011B0C  90D8               	bcf	status,0,c
 16646  011B0E  0100               	movlb	0	; () banked
 16647  011B10  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16648  011B12  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16649  011B14  2EE8               	decfsz	wreg,f,c
 16650  011B16  D7FA               	goto	u10865
 16651  011B18  0100               	movlb	0	; () banked
 16652  011B1A  51CB               	movf	??_Port_Set& (0+255),w,b
 16653  011B1C  0100               	movlb	0	; () banked
 16654  011B1E  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16655  011B20  0100               	movlb	0	; () banked
 16656  011B22  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16657  011B24  0100               	movlb	0	; () banked
 16658  011B26  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16659                           
 16660                           ; BSR set to: 0
 16661                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 16662  011B28  0E08               	movlw	8
 16663  011B2A  0100               	movlb	0	; () banked
 16664  011B2C  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16665  011B2E  0100               	movlb	0	; () banked
 16666  011B30  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16667  011B32  0E00               	movlw	0
 16668  011B34  0100               	movlb	0	; () banked
 16669  011B36  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16670  011B38  0100               	movlb	0	; () banked
 16671  011B3A  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16672  011B3C  0E04               	movlw	4
 16673  011B3E  0100               	movlb	0	; () banked
 16674  011B40  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16675  011B42  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16676  011B46  0100               	movlb	0	; () banked
 16677  011B48  6FCB               	movwf	??_Port_Set& (0+255),b
 16678  011B4A  0100               	movlb	0	; () banked
 16679  011B4C  51CB               	movf	??_Port_Set& (0+255),w,b
 16680  011B4E  0100               	movlb	0	; () banked
 16681  011B50  6FCD               	movwf	(??_Port_Set+2)& (0+255),b
 16682  011B52  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16683  011B54  0100               	movlb	0	; () banked
 16684  011B56  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16685  011B58  0100               	movlb	0	; () banked
 16686  011B5A  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16687  011B5C  0100               	movlb	0	; () banked
 16688  011B5E  51CD               	movf	(??_Port_Set+2)& (0+255),w,b
 16689  011B60  0100               	movlb	0	; () banked
 16690  011B62  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 16694  011B64  0E08               	movlw	8
 16695  011B66  0100               	movlb	0	; () banked
 16696  011B68  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16697  011B6A  0100               	movlb	0	; () banked
 16698  011B6C  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16699  011B6E  0E00               	movlw	0
 16700  011B70  0100               	movlb	0	; () banked
 16701  011B72  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16702  011B74  0100               	movlb	0	; () banked
 16703  011B76  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16704  011B78  0E05               	movlw	5
 16705  011B7A  0100               	movlb	0	; () banked
 16706  011B7C  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16707  011B7E  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16708  011B82  0100               	movlb	0	; () banked
 16709  011B84  6FCB               	movwf	??_Port_Set& (0+255),b
 16710  011B86  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16711  011B88  0E0A               	movlw	10
 16712  011B8A                     u10875:
 16713  011B8A  90D8               	bcf	status,0,c
 16714  011B8C  0100               	movlb	0	; () banked
 16715  011B8E  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16716  011B90  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16717  011B92  2EE8               	decfsz	wreg,f,c
 16718  011B94  D7FA               	goto	u10875
 16719  011B96  0100               	movlb	0	; () banked
 16720  011B98  51CB               	movf	??_Port_Set& (0+255),w,b
 16721  011B9A  0100               	movlb	0	; () banked
 16722  011B9C  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16723  011B9E  0100               	movlb	0	; () banked
 16724  011BA0  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16725  011BA2  0100               	movlb	0	; () banked
 16726  011BA4  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16727                           
 16728                           ; BSR set to: 0
 16729                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 16730  011BA6  0E08               	movlw	8
 16731  011BA8  0100               	movlb	0	; () banked
 16732  011BAA  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16733  011BAC  0100               	movlb	0	; () banked
 16734  011BAE  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16735  011BB0  0E00               	movlw	0
 16736  011BB2  0100               	movlb	0	; () banked
 16737  011BB4  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16738  011BB6  0100               	movlb	0	; () banked
 16739  011BB8  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16740  011BBA  0E06               	movlw	6
 16741  011BBC  0100               	movlb	0	; () banked
 16742  011BBE  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16743  011BC0  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16744  011BC4  0100               	movlb	0	; () banked
 16745  011BC6  6FCB               	movwf	??_Port_Set& (0+255),b
 16746  011BC8  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16747  011BCA  0E0C               	movlw	12
 16748  011BCC                     u10885:
 16749  011BCC  90D8               	bcf	status,0,c
 16750  011BCE  0100               	movlb	0	; () banked
 16751  011BD0  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16752  011BD2  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16753  011BD4  2EE8               	decfsz	wreg,f,c
 16754  011BD6  D7FA               	goto	u10885
 16755  011BD8  0100               	movlb	0	; () banked
 16756  011BDA  51CB               	movf	??_Port_Set& (0+255),w,b
 16757  011BDC  0100               	movlb	0	; () banked
 16758  011BDE  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16759  011BE0  0100               	movlb	0	; () banked
 16760  011BE2  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16761  011BE4  0100               	movlb	0	; () banked
 16762  011BE6  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 16766  011BE8  0E08               	movlw	8
 16767  011BEA  0100               	movlb	0	; () banked
 16768  011BEC  25C8               	addwf	Port_Set@pInput& (0+255),w,b
 16769  011BEE  0100               	movlb	0	; () banked
 16770  011BF0  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 16771  011BF2  0E00               	movlw	0
 16772  011BF4  0100               	movlb	0	; () banked
 16773  011BF6  21C9               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16774  011BF8  0100               	movlb	0	; () banked
 16775  011BFA  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16776  011BFC  0E07               	movlw	7
 16777  011BFE  0100               	movlb	0	; () banked
 16778  011C00  6FC7               	movwf	Word_GetPair@pPair& (0+255),b
 16779  011C02  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 16780  011C06  0100               	movlb	0	; () banked
 16781  011C08  6FCB               	movwf	??_Port_Set& (0+255),b
 16782  011C0A  6BCC               	clrf	(??_Port_Set+1)& (0+255),b
 16783  011C0C  0E0E               	movlw	14
 16784  011C0E                     u10895:
 16785  011C0E  90D8               	bcf	status,0,c
 16786  011C10  0100               	movlb	0	; () banked
 16787  011C12  37CB               	rlcf	??_Port_Set& (0+255),f,b
 16788  011C14  37CC               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16789  011C16  2EE8               	decfsz	wreg,f,c
 16790  011C18  D7FA               	goto	u10895
 16791  011C1A  0100               	movlb	0	; () banked
 16792  011C1C  51CB               	movf	??_Port_Set& (0+255),w,b
 16793  011C1E  0100               	movlb	0	; () banked
 16794  011C20  13DD               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16795  011C22  0100               	movlb	0	; () banked
 16796  011C24  51CC               	movf	(??_Port_Set+1)& (0+255),w,b
 16797  011C26  0100               	movlb	0	; () banked
 16798  011C28  13DE               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16799                           
 16800                           ;Port.c: 584: if (TypeRequired == TypeActual)
 16801  011C2A  0100               	movlb	0	; () banked
 16802  011C2C  51DD               	movf	Port_Set@TypeActual& (0+255),w,b
 16803  011C2E  0100               	movlb	0	; () banked
 16804  011C30  19DB               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 16805  011C32  E148               	bnz	l528
 16806  011C34  0100               	movlb	0	; () banked
 16807  011C36  51DE               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 16808  011C38  0100               	movlb	0	; () banked
 16809  011C3A  19DC               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 16810  011C3C  A4D8               	btfss	status,2,c
 16811  011C3E  0012               	return	
 16812  011C40  D032               	goto	l526
 16813  011C42                     
 16814                           ; BSR set to: 0
 16815                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 16816                           
 16817                           ; BSR set to: 0
 16818  011C42  0100               	movlb	0	; () banked
 16819  011C44  EE20 F002          	lfsr	2,2
 16820  011C48  51C8               	movf	Port_Set@pInput& (0+255),w,b
 16821  011C4A  26D9               	addwf	fsr2l,f,c
 16822  011C4C  51C9               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16823  011C4E  22DA               	addwfc	fsr2h,f,c
 16824  011C50  CFDE F0B9          	movff	postinc2,Byte_SetByte@pInput
 16825  011C54  CFDD F0BA          	movff	postdec2,Byte_SetByte@pInput+1
 16826  011C58  C0CA  F0BB         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16827  011C5C  EC71  F0B6         	call	_Byte_SetByte	;wreg free
 16828                           
 16829                           ;Port.c: 594: break;
 16830  011C60  0012               	return	
 16831  011C62                     
 16832                           ;Port.c: 597: pValue = ~pValue;
 16833  011C62  0100               	movlb	0	; () banked
 16834  011C64  1FCA               	comf	Port_Set@pValue& (0+255),f,b
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 16838  011C66  0100               	movlb	0	; () banked
 16839  011C68  EE20 F002          	lfsr	2,2
 16840  011C6C  51C8               	movf	Port_Set@pInput& (0+255),w,b
 16841  011C6E  26D9               	addwf	fsr2l,f,c
 16842  011C70  51C9               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16843  011C72  22DA               	addwfc	fsr2h,f,c
 16844  011C74  CFDE F0B9          	movff	postinc2,Byte_SetByte@pInput
 16845  011C78  CFDD F0BA          	movff	postdec2,Byte_SetByte@pInput+1
 16846  011C7C  C0CA  F0BB         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16847  011C80  EC71  F0B6         	call	_Byte_SetByte	;wreg free
 16848                           
 16849                           ;Port.c: 599: break;
 16850  011C84  0012               	return	
 16851  011C86                     
 16852                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 16853  011C86  0100               	movlb	0	; () banked
 16854  011C88  EE20 F004          	lfsr	2,4
 16855  011C8C  51C8               	movf	Port_Set@pInput& (0+255),w,b
 16856  011C8E  26D9               	addwf	fsr2l,f,c
 16857  011C90  51C9               	movf	(Port_Set@pInput+1)& (0+255),w,b
 16858  011C92  22DA               	addwfc	fsr2h,f,c
 16859  011C94  CFDE F0B9          	movff	postinc2,Byte_SetByte@pInput
 16860  011C98  CFDD F0BA          	movff	postdec2,Byte_SetByte@pInput+1
 16861  011C9C  C0CA  F0BB         	movff	Port_Set@pValue,Byte_SetByte@pValue
 16862  011CA0  EC71  F0B6         	call	_Byte_SetByte	;wreg free
 16863                           
 16864                           ;Port.c: 606: }
 16865                           
 16866                           ;Port.c: 605: break;
 16867                           
 16868                           ;Port.c: 604: default:
 16869                           
 16870                           ;Port.c: 603: break;
 16871  011CA4  0012               	return	
 16872  011CA6                     l526:
 16873  011CA6  0100               	movlb	0	; () banked
 16874  011CA8  51DF               	movf	Port_Set@Type& (0+255),w,b
 16875                           
 16876                           ; Switch size 1, requested type "space"
 16877                           ; Number of cases is 4, Range of values is 0 to 3
 16878                           ; switch strategies available:
 16879                           ; Name         Instructions Cycles
 16880                           ; simple_byte           13     7 (average)
 16881                           ;	Chosen strategy is simple_byte
 16882  011CAA  0A00               	xorlw	0	; case 0
 16883  011CAC  B4D8               	btfsc	status,2,c
 16884  011CAE  0012               	return	
 16885  011CB0  0A01               	xorlw	1	; case 1
 16886  011CB2  B4D8               	btfsc	status,2,c
 16887  011CB4  D7C6               	goto	l529
 16888  011CB6  0A03               	xorlw	3	; case 2
 16889  011CB8  B4D8               	btfsc	status,2,c
 16890  011CBA  D7D3               	goto	l531
 16891  011CBC  0A01               	xorlw	1	; case 3
 16892  011CBE  A4D8               	btfss	status,2,c
 16893                           
 16894                           ; BSR set to: 0
 16895                           
 16896                           ; BSR set to: 0
 16897                           ;Port.c: 607: }
 16898  011CC0  0012               	return	
 16899  011CC2  D7E1               	goto	l532
 16900  011CC4                     l528:
 16901  011CC4  0012               	return		;funcret
 16902  011CC6                     __end_of_Port_Set:
 16903                           	opt stack 0
 16904                           tblptru	equ	0xFF8
 16905                           tblptrh	equ	0xFF7
 16906                           tblptrl	equ	0xFF6
 16907                           tablat	equ	0xFF5
 16908                           prodh	equ	0xFF4
 16909                           prodl	equ	0xFF3
 16910                           intcon	equ	0xFF2
 16911                           postinc0	equ	0xFEE
 16912                           wreg	equ	0xFE8
 16913                           indf1	equ	0xFE7
 16914                           postdec1	equ	0xFE5
 16915                           fsr1h	equ	0xFE2
 16916                           fsr1l	equ	0xFE1
 16917                           indf2	equ	0xFDF
 16918                           postinc2	equ	0xFDE
 16919                           postdec2	equ	0xFDD
 16920                           fsr2h	equ	0xFDA
 16921                           fsr2l	equ	0xFD9
 16922                           status	equ	0xFD8
 16923                           
 16924 ;; *************** function _Byte_SetByte *****************
 16925 ;; Defined at:
 16926 ;;		line 110 in file "Library/Types.c"
 16927 ;; Parameters:    Size  Location     Type
 16928 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16929 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 16930 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16931 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16932 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16933 ;;		 -> NULL(0), 
 16934 ;;  pValue          1    2[BANK0 ] unsigned char 
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;		None
 16937 ;; Return value:  Size  Location     Type
 16938 ;;                  1    wreg      void 
 16939 ;; Registers used:
 16940 ;;		fsr2l, fsr2h
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/0
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16946 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16950 ;;Total ram usage:        3 bytes
 16951 ;; Hardware stack levels used:    1
 16952 ;; Hardware stack levels required when called:    7
 16953 ;; This function calls:
 16954 ;;		Nothing
 16955 ;; This function is called by:
 16956 ;;		_Port_Set
 16957 ;;		_I2C_Init
 16958 ;; This function uses a non-reentrant model
 16959 ;;
 16960                           
 16961                           	psect	text66
 16962  016CE2                     __ptext66:
 16963                           	opt stack 0
 16964  016CE2                     _Byte_SetByte:
 16965                           	opt stack 19
 16966                           
 16967                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 16968                           
 16969                           ;incstack = 0
 16970  016CE2  C0B9  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 16971  016CE6  C0BA  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 16972  016CEA  C0BB  FFDF         	movff	Byte_SetByte@pValue,indf2
 16973  016CEE  0012               	return		;funcret
 16974  016CF0                     __end_of_Byte_SetByte:
 16975                           	opt stack 0
 16976                           tblptru	equ	0xFF8
 16977                           tblptrh	equ	0xFF7
 16978                           tblptrl	equ	0xFF6
 16979                           tablat	equ	0xFF5
 16980                           prodh	equ	0xFF4
 16981                           prodl	equ	0xFF3
 16982                           intcon	equ	0xFF2
 16983                           postinc0	equ	0xFEE
 16984                           wreg	equ	0xFE8
 16985                           indf1	equ	0xFE7
 16986                           postdec1	equ	0xFE5
 16987                           fsr1h	equ	0xFE2
 16988                           fsr1l	equ	0xFE1
 16989                           indf2	equ	0xFDF
 16990                           postinc2	equ	0xFDE
 16991                           postdec2	equ	0xFDD
 16992                           fsr2h	equ	0xFDA
 16993                           fsr2l	equ	0xFD9
 16994                           status	equ	0xFD8
 16995                           
 16996 ;; *************** function _GetPortTRIS *****************
 16997 ;; Defined at:
 16998 ;;		line 67 in file "Library/Port.c"
 16999 ;; Parameters:    Size  Location     Type
 17000 ;;  pInput          1    wreg     enum E6786
 17001 ;; Auto vars:     Size  Location     Type
 17002 ;;  pInput          1    2[BANK0 ] enum E6786
 17003 ;; Return value:  Size  Location     Type
 17004 ;;                  2    0[BANK0 ] PTR struct Byte
 17005 ;; Registers used:
 17006 ;;		wreg, status,2, status,0
 17007 ;; Tracked objects:
 17008 ;;		On entry : 0/0
 17009 ;;		On exit  : 0/0
 17010 ;;		Unchanged: 0/0
 17011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17012 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17016 ;;Total ram usage:        3 bytes
 17017 ;; Hardware stack levels used:    1
 17018 ;; Hardware stack levels required when called:    7
 17019 ;; This function calls:
 17020 ;;		Nothing
 17021 ;; This function is called by:
 17022 ;;		_Port_Init
 17023 ;; This function uses a non-reentrant model
 17024 ;;
 17025                           
 17026                           	psect	text67
 17027  014E80                     __ptext67:
 17028                           	opt stack 0
 17029  014E80                     _GetPortTRIS:
 17030                           	opt stack 20
 17031                           
 17032                           ;incstack = 0
 17033                           ;GetPortTRIS@pInput stored from wreg
 17034  014E80  0100               	movlb	0	; () banked
 17035  014E82  6FBB               	movwf	GetPortTRIS@pInput& (0+255),b
 17036                           
 17037                           ;Port.c: 69: switch (pInput)
 17038  014E84  D038               	goto	l363
 17039  014E86                     
 17040                           ;Port.c: 72: return (BytePtr)&TRISA;
 17041  014E86  0E92               	movlw	146
 17042  014E88  0100               	movlb	0	; () banked
 17043  014E8A  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17044  014E8C  0E0F               	movlw	15
 17045  014E8E  0100               	movlb	0	; () banked
 17046  014E90  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17047                           
 17048                           ; BSR set to: 0
 17049  014E92  0012               	return	
 17050  014E94                     
 17051                           ; BSR set to: 0
 17052                           ;Port.c: 74: return (BytePtr)&TRISB;
 17053                           
 17054                           ; BSR set to: 0
 17055  014E94  0E93               	movlw	147
 17056  014E96  0100               	movlb	0	; () banked
 17057  014E98  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17058  014E9A  0E0F               	movlw	15
 17059  014E9C  0100               	movlb	0	; () banked
 17060  014E9E  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17061                           
 17062                           ; BSR set to: 0
 17063  014EA0  0012               	return	
 17064  014EA2                     
 17065                           ; BSR set to: 0
 17066                           ;Port.c: 76: return (BytePtr)&TRISC;
 17067                           
 17068                           ; BSR set to: 0
 17069  014EA2  0E94               	movlw	148
 17070  014EA4  0100               	movlb	0	; () banked
 17071  014EA6  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17072  014EA8  0E0F               	movlw	15
 17073  014EAA  0100               	movlb	0	; () banked
 17074  014EAC  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17075                           
 17076                           ; BSR set to: 0
 17077  014EAE  0012               	return	
 17078  014EB0                     
 17079                           ; BSR set to: 0
 17080                           ;Port.c: 78: return (BytePtr)&TRISD;
 17081                           
 17082                           ; BSR set to: 0
 17083  014EB0  0E95               	movlw	149
 17084  014EB2  0100               	movlb	0	; () banked
 17085  014EB4  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17086  014EB6  0E0F               	movlw	15
 17087  014EB8  0100               	movlb	0	; () banked
 17088  014EBA  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17089                           
 17090                           ; BSR set to: 0
 17091  014EBC  0012               	return	
 17092  014EBE                     
 17093                           ; BSR set to: 0
 17094                           ;Port.c: 80: return (BytePtr)&TRISE;
 17095                           
 17096                           ; BSR set to: 0
 17097  014EBE  0E96               	movlw	150
 17098  014EC0  0100               	movlb	0	; () banked
 17099  014EC2  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17100  014EC4  0E0F               	movlw	15
 17101  014EC6  0100               	movlb	0	; () banked
 17102  014EC8  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17103                           
 17104                           ; BSR set to: 0
 17105  014ECA  0012               	return	
 17106  014ECC                     
 17107                           ; BSR set to: 0
 17108                           ;Port.c: 82: return (BytePtr)&TRISF;
 17109                           
 17110                           ; BSR set to: 0
 17111  014ECC  0E97               	movlw	151
 17112  014ECE  0100               	movlb	0	; () banked
 17113  014ED0  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17114  014ED2  0E0F               	movlw	15
 17115  014ED4  0100               	movlb	0	; () banked
 17116  014ED6  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17117                           
 17118                           ; BSR set to: 0
 17119  014ED8  0012               	return	
 17120  014EDA                     
 17121                           ; BSR set to: 0
 17122                           ;Port.c: 84: return (BytePtr)&TRISG;
 17123                           
 17124                           ; BSR set to: 0
 17125  014EDA  0E98               	movlw	152
 17126  014EDC  0100               	movlb	0	; () banked
 17127  014EDE  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17128  014EE0  0E0F               	movlw	15
 17129  014EE2  0100               	movlb	0	; () banked
 17130  014EE4  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17131                           
 17132                           ; BSR set to: 0
 17133  014EE6  0012               	return	
 17134  014EE8                     
 17135                           ; BSR set to: 0
 17136                           ;Port.c: 86: return (void*)0;
 17137                           
 17138                           ; BSR set to: 0
 17139  014EE8  0E00               	movlw	0
 17140  014EEA  0100               	movlb	0	; () banked
 17141  014EEC  6FB9               	movwf	?_GetPortTRIS& (0+255),b
 17142  014EEE  0E00               	movlw	0
 17143  014EF0  0100               	movlb	0	; () banked
 17144  014EF2  6FBA               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;Port.c: 87: }
 17148                           
 17149                           ; BSR set to: 0
 17150  014EF4  0012               	return	
 17151  014EF6                     l363:
 17152                           
 17153                           ; BSR set to: 0
 17154  014EF6  0100               	movlb	0	; () banked
 17155  014EF8  51BB               	movf	GetPortTRIS@pInput& (0+255),w,b
 17156                           
 17157                           ; Switch size 1, requested type "space"
 17158                           ; Number of cases is 7, Range of values is 0 to 6
 17159                           ; switch strategies available:
 17160                           ; Name         Instructions Cycles
 17161                           ; simple_byte           22    12 (average)
 17162                           ;	Chosen strategy is simple_byte
 17163  014EFA  0A00               	xorlw	0	; case 0
 17164  014EFC  B4D8               	btfsc	status,2,c
 17165  014EFE  D7C3               	goto	l364
 17166  014F00  0A01               	xorlw	1	; case 1
 17167  014F02  B4D8               	btfsc	status,2,c
 17168  014F04  D7C7               	goto	l366
 17169  014F06  0A03               	xorlw	3	; case 2
 17170  014F08  B4D8               	btfsc	status,2,c
 17171  014F0A  D7CB               	goto	l367
 17172  014F0C  0A01               	xorlw	1	; case 3
 17173  014F0E  B4D8               	btfsc	status,2,c
 17174  014F10  D7CF               	goto	l368
 17175  014F12  0A07               	xorlw	7	; case 4
 17176  014F14  B4D8               	btfsc	status,2,c
 17177  014F16  D7D3               	goto	l369
 17178  014F18  0A01               	xorlw	1	; case 5
 17179  014F1A  B4D8               	btfsc	status,2,c
 17180  014F1C  D7D7               	goto	l370
 17181  014F1E  0A03               	xorlw	3	; case 6
 17182  014F20  B4D8               	btfsc	status,2,c
 17183  014F22  D7DB               	goto	l371
 17184  014F24  D7E1               	goto	l372
 17185  014F26                     __end_of_GetPortTRIS:
 17186                           	opt stack 0
 17187                           tblptru	equ	0xFF8
 17188                           tblptrh	equ	0xFF7
 17189                           tblptrl	equ	0xFF6
 17190                           tablat	equ	0xFF5
 17191                           prodh	equ	0xFF4
 17192                           prodl	equ	0xFF3
 17193                           intcon	equ	0xFF2
 17194                           postinc0	equ	0xFEE
 17195                           wreg	equ	0xFE8
 17196                           indf1	equ	0xFE7
 17197                           postdec1	equ	0xFE5
 17198                           fsr1h	equ	0xFE2
 17199                           fsr1l	equ	0xFE1
 17200                           indf2	equ	0xFDF
 17201                           postinc2	equ	0xFDE
 17202                           postdec2	equ	0xFDD
 17203                           fsr2h	equ	0xFDA
 17204                           fsr2l	equ	0xFD9
 17205                           status	equ	0xFD8
 17206                           
 17207 ;; *************** function _GetPortProperties *****************
 17208 ;; Defined at:
 17209 ;;		line 21 in file "Library/Port.c"
 17210 ;; Parameters:    Size  Location     Type
 17211 ;;  pInput          1    wreg     enum E6786
 17212 ;; Auto vars:     Size  Location     Type
 17213 ;;  pInput          1    2[BANK0 ] enum E6786
 17214 ;; Return value:  Size  Location     Type
 17215 ;;                  2    0[BANK0 ] PTR struct PortProperty
 17216 ;; Registers used:
 17217 ;;		wreg, status,2, status,0
 17218 ;; Tracked objects:
 17219 ;;		On entry : 0/0
 17220 ;;		On exit  : 0/0
 17221 ;;		Unchanged: 0/0
 17222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17223 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17227 ;;Total ram usage:        3 bytes
 17228 ;; Hardware stack levels used:    1
 17229 ;; Hardware stack levels required when called:    7
 17230 ;; This function calls:
 17231 ;;		Nothing
 17232 ;; This function is called by:
 17233 ;;		_Port_Init
 17234 ;; This function uses a non-reentrant model
 17235 ;;
 17236                           
 17237                           	psect	text68
 17238  014F26                     __ptext68:
 17239                           	opt stack 0
 17240  014F26                     _GetPortProperties:
 17241                           	opt stack 20
 17242                           
 17243                           ; BSR set to: 0
 17244                           ;incstack = 0
 17245                           ;GetPortProperties@pInput stored from wreg
 17246  014F26  0100               	movlb	0	; () banked
 17247  014F28  6FBB               	movwf	GetPortProperties@pInput& (0+255),b
 17248                           
 17249                           ;Port.c: 23: switch (pInput)
 17250  014F2A  D038               	goto	l337
 17251  014F2C                     
 17252                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 17253  014F2C  0E0B               	movlw	low _PortA_Property
 17254  014F2E  0100               	movlb	0	; () banked
 17255  014F30  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17256  014F32  0EFF               	movlw	high _PortA_Property
 17257  014F34  0100               	movlb	0	; () banked
 17258  014F36  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17259                           
 17260                           ; BSR set to: 0
 17261  014F38  0012               	return	
 17262  014F3A                     
 17263                           ; BSR set to: 0
 17264                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 17265                           
 17266                           ; BSR set to: 0
 17267  014F3A  0E09               	movlw	low _PortB_Property
 17268  014F3C  0100               	movlb	0	; () banked
 17269  014F3E  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17270  014F40  0EFF               	movlw	high _PortB_Property
 17271  014F42  0100               	movlb	0	; () banked
 17272  014F44  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17273                           
 17274                           ; BSR set to: 0
 17275  014F46  0012               	return	
 17276  014F48                     
 17277                           ; BSR set to: 0
 17278                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 17279                           
 17280                           ; BSR set to: 0
 17281  014F48  0E07               	movlw	low _PortC_Property
 17282  014F4A  0100               	movlb	0	; () banked
 17283  014F4C  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17284  014F4E  0EFF               	movlw	high _PortC_Property
 17285  014F50  0100               	movlb	0	; () banked
 17286  014F52  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17287                           
 17288                           ; BSR set to: 0
 17289  014F54  0012               	return	
 17290  014F56                     
 17291                           ; BSR set to: 0
 17292                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 17293                           
 17294                           ; BSR set to: 0
 17295  014F56  0E05               	movlw	low _PortD_Property
 17296  014F58  0100               	movlb	0	; () banked
 17297  014F5A  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17298  014F5C  0EFF               	movlw	high _PortD_Property
 17299  014F5E  0100               	movlb	0	; () banked
 17300  014F60  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17301                           
 17302                           ; BSR set to: 0
 17303  014F62  0012               	return	
 17304  014F64                     
 17305                           ; BSR set to: 0
 17306                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 17307                           
 17308                           ; BSR set to: 0
 17309  014F64  0E03               	movlw	low _PortE_Property
 17310  014F66  0100               	movlb	0	; () banked
 17311  014F68  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17312  014F6A  0EFF               	movlw	high _PortE_Property
 17313  014F6C  0100               	movlb	0	; () banked
 17314  014F6E  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17315                           
 17316                           ; BSR set to: 0
 17317  014F70  0012               	return	
 17318  014F72                     
 17319                           ; BSR set to: 0
 17320                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 17321                           
 17322                           ; BSR set to: 0
 17323  014F72  0E01               	movlw	low _PortF_Property
 17324  014F74  0100               	movlb	0	; () banked
 17325  014F76  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17326  014F78  0EFF               	movlw	high _PortF_Property
 17327  014F7A  0100               	movlb	0	; () banked
 17328  014F7C  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17329                           
 17330                           ; BSR set to: 0
 17331  014F7E  0012               	return	
 17332  014F80                     
 17333                           ; BSR set to: 0
 17334                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 17335                           
 17336                           ; BSR set to: 0
 17337  014F80  0EFF               	movlw	low _PortG_Property
 17338  014F82  0100               	movlb	0	; () banked
 17339  014F84  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17340  014F86  0EFE               	movlw	high _PortG_Property
 17341  014F88  0100               	movlb	0	; () banked
 17342  014F8A  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17343                           
 17344                           ; BSR set to: 0
 17345  014F8C  0012               	return	
 17346  014F8E                     
 17347                           ; BSR set to: 0
 17348                           ;Port.c: 40: return (void*)0;
 17349                           
 17350                           ; BSR set to: 0
 17351  014F8E  0E00               	movlw	0
 17352  014F90  0100               	movlb	0	; () banked
 17353  014F92  6FB9               	movwf	?_GetPortProperties& (0+255),b
 17354  014F94  0E00               	movlw	0
 17355  014F96  0100               	movlb	0	; () banked
 17356  014F98  6FBA               	movwf	(?_GetPortProperties+1)& (0+255),b
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;Port.c: 41: }
 17360                           
 17361                           ; BSR set to: 0
 17362  014F9A  0012               	return	
 17363  014F9C                     l337:
 17364                           
 17365                           ; BSR set to: 0
 17366  014F9C  0100               	movlb	0	; () banked
 17367  014F9E  51BB               	movf	GetPortProperties@pInput& (0+255),w,b
 17368                           
 17369                           ; Switch size 1, requested type "space"
 17370                           ; Number of cases is 7, Range of values is 0 to 6
 17371                           ; switch strategies available:
 17372                           ; Name         Instructions Cycles
 17373                           ; simple_byte           22    12 (average)
 17374                           ;	Chosen strategy is simple_byte
 17375  014FA0  0A00               	xorlw	0	; case 0
 17376  014FA2  B4D8               	btfsc	status,2,c
 17377  014FA4  D7C3               	goto	l338
 17378  014FA6  0A01               	xorlw	1	; case 1
 17379  014FA8  B4D8               	btfsc	status,2,c
 17380  014FAA  D7C7               	goto	l340
 17381  014FAC  0A03               	xorlw	3	; case 2
 17382  014FAE  B4D8               	btfsc	status,2,c
 17383  014FB0  D7CB               	goto	l341
 17384  014FB2  0A01               	xorlw	1	; case 3
 17385  014FB4  B4D8               	btfsc	status,2,c
 17386  014FB6  D7CF               	goto	l342
 17387  014FB8  0A07               	xorlw	7	; case 4
 17388  014FBA  B4D8               	btfsc	status,2,c
 17389  014FBC  D7D3               	goto	l343
 17390  014FBE  0A01               	xorlw	1	; case 5
 17391  014FC0  B4D8               	btfsc	status,2,c
 17392  014FC2  D7D7               	goto	l344
 17393  014FC4  0A03               	xorlw	3	; case 6
 17394  014FC6  B4D8               	btfsc	status,2,c
 17395  014FC8  D7DB               	goto	l345
 17396  014FCA  D7E1               	goto	l346
 17397  014FCC                     __end_of_GetPortProperties:
 17398                           	opt stack 0
 17399                           tblptru	equ	0xFF8
 17400                           tblptrh	equ	0xFF7
 17401                           tblptrl	equ	0xFF6
 17402                           tablat	equ	0xFF5
 17403                           prodh	equ	0xFF4
 17404                           prodl	equ	0xFF3
 17405                           intcon	equ	0xFF2
 17406                           postinc0	equ	0xFEE
 17407                           wreg	equ	0xFE8
 17408                           indf1	equ	0xFE7
 17409                           postdec1	equ	0xFE5
 17410                           fsr1h	equ	0xFE2
 17411                           fsr1l	equ	0xFE1
 17412                           indf2	equ	0xFDF
 17413                           postinc2	equ	0xFDE
 17414                           postdec2	equ	0xFDD
 17415                           fsr2h	equ	0xFDA
 17416                           fsr2l	equ	0xFD9
 17417                           status	equ	0xFD8
 17418                           
 17419 ;; *************** function _GetPortPORT *****************
 17420 ;; Defined at:
 17421 ;;		line 44 in file "Library/Port.c"
 17422 ;; Parameters:    Size  Location     Type
 17423 ;;  pInput          1    wreg     enum E6786
 17424 ;; Auto vars:     Size  Location     Type
 17425 ;;  pInput          1    2[BANK0 ] enum E6786
 17426 ;; Return value:  Size  Location     Type
 17427 ;;                  2    0[BANK0 ] PTR struct Byte
 17428 ;; Registers used:
 17429 ;;		wreg, status,2, status,0
 17430 ;; Tracked objects:
 17431 ;;		On entry : 0/0
 17432 ;;		On exit  : 0/0
 17433 ;;		Unchanged: 0/0
 17434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17439 ;;Total ram usage:        3 bytes
 17440 ;; Hardware stack levels used:    1
 17441 ;; Hardware stack levels required when called:    7
 17442 ;; This function calls:
 17443 ;;		Nothing
 17444 ;; This function is called by:
 17445 ;;		_Port_Init
 17446 ;; This function uses a non-reentrant model
 17447 ;;
 17448                           
 17449                           	psect	text69
 17450  014FCC                     __ptext69:
 17451                           	opt stack 0
 17452  014FCC                     _GetPortPORT:
 17453                           	opt stack 20
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;incstack = 0
 17457                           ;GetPortPORT@pInput stored from wreg
 17458  014FCC  0100               	movlb	0	; () banked
 17459  014FCE  6FBB               	movwf	GetPortPORT@pInput& (0+255),b
 17460                           
 17461                           ;Port.c: 46: switch (pInput)
 17462  014FD0  D038               	goto	l350
 17463  014FD2                     
 17464                           ;Port.c: 49: return (BytePtr)&PORTA;
 17465  014FD2  0E80               	movlw	128
 17466  014FD4  0100               	movlb	0	; () banked
 17467  014FD6  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17468  014FD8  0E0F               	movlw	15
 17469  014FDA  0100               	movlb	0	; () banked
 17470  014FDC  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17471                           
 17472                           ; BSR set to: 0
 17473  014FDE  0012               	return	
 17474  014FE0                     
 17475                           ; BSR set to: 0
 17476                           ;Port.c: 51: return (BytePtr)&PORTB;
 17477                           
 17478                           ; BSR set to: 0
 17479  014FE0  0E81               	movlw	129
 17480  014FE2  0100               	movlb	0	; () banked
 17481  014FE4  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17482  014FE6  0E0F               	movlw	15
 17483  014FE8  0100               	movlb	0	; () banked
 17484  014FEA  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17485                           
 17486                           ; BSR set to: 0
 17487  014FEC  0012               	return	
 17488  014FEE                     
 17489                           ; BSR set to: 0
 17490                           ;Port.c: 53: return (BytePtr)&PORTC;
 17491                           
 17492                           ; BSR set to: 0
 17493  014FEE  0E82               	movlw	130
 17494  014FF0  0100               	movlb	0	; () banked
 17495  014FF2  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17496  014FF4  0E0F               	movlw	15
 17497  014FF6  0100               	movlb	0	; () banked
 17498  014FF8  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17499                           
 17500                           ; BSR set to: 0
 17501  014FFA  0012               	return	
 17502  014FFC                     
 17503                           ; BSR set to: 0
 17504                           ;Port.c: 55: return (BytePtr)&PORTD;
 17505                           
 17506                           ; BSR set to: 0
 17507  014FFC  0E83               	movlw	131
 17508  014FFE  0100               	movlb	0	; () banked
 17509  015000  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17510  015002  0E0F               	movlw	15
 17511  015004  0100               	movlb	0	; () banked
 17512  015006  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17513                           
 17514                           ; BSR set to: 0
 17515  015008  0012               	return	
 17516  01500A                     
 17517                           ; BSR set to: 0
 17518                           ;Port.c: 57: return (BytePtr)&PORTE;
 17519                           
 17520                           ; BSR set to: 0
 17521  01500A  0E84               	movlw	132
 17522  01500C  0100               	movlb	0	; () banked
 17523  01500E  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17524  015010  0E0F               	movlw	15
 17525  015012  0100               	movlb	0	; () banked
 17526  015014  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17527                           
 17528                           ; BSR set to: 0
 17529  015016  0012               	return	
 17530  015018                     
 17531                           ; BSR set to: 0
 17532                           ;Port.c: 59: return (BytePtr)&PORTF;
 17533                           
 17534                           ; BSR set to: 0
 17535  015018  0E85               	movlw	133
 17536  01501A  0100               	movlb	0	; () banked
 17537  01501C  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17538  01501E  0E0F               	movlw	15
 17539  015020  0100               	movlb	0	; () banked
 17540  015022  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17541                           
 17542                           ; BSR set to: 0
 17543  015024  0012               	return	
 17544  015026                     
 17545                           ; BSR set to: 0
 17546                           ;Port.c: 61: return (BytePtr)&PORTG;
 17547                           
 17548                           ; BSR set to: 0
 17549  015026  0E86               	movlw	134
 17550  015028  0100               	movlb	0	; () banked
 17551  01502A  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17552  01502C  0E0F               	movlw	15
 17553  01502E  0100               	movlb	0	; () banked
 17554  015030  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17555                           
 17556                           ; BSR set to: 0
 17557  015032  0012               	return	
 17558  015034                     
 17559                           ; BSR set to: 0
 17560                           ;Port.c: 63: return (void*)0;
 17561                           
 17562                           ; BSR set to: 0
 17563  015034  0E00               	movlw	0
 17564  015036  0100               	movlb	0	; () banked
 17565  015038  6FB9               	movwf	?_GetPortPORT& (0+255),b
 17566  01503A  0E00               	movlw	0
 17567  01503C  0100               	movlb	0	; () banked
 17568  01503E  6FBA               	movwf	(?_GetPortPORT+1)& (0+255),b
 17569                           
 17570                           ; BSR set to: 0
 17571                           ;Port.c: 64: }
 17572                           
 17573                           ; BSR set to: 0
 17574  015040  0012               	return	
 17575  015042                     l350:
 17576                           
 17577                           ; BSR set to: 0
 17578  015042  0100               	movlb	0	; () banked
 17579  015044  51BB               	movf	GetPortPORT@pInput& (0+255),w,b
 17580                           
 17581                           ; Switch size 1, requested type "space"
 17582                           ; Number of cases is 7, Range of values is 0 to 6
 17583                           ; switch strategies available:
 17584                           ; Name         Instructions Cycles
 17585                           ; simple_byte           22    12 (average)
 17586                           ;	Chosen strategy is simple_byte
 17587  015046  0A00               	xorlw	0	; case 0
 17588  015048  B4D8               	btfsc	status,2,c
 17589  01504A  D7C3               	goto	l351
 17590  01504C  0A01               	xorlw	1	; case 1
 17591  01504E  B4D8               	btfsc	status,2,c
 17592  015050  D7C7               	goto	l353
 17593  015052  0A03               	xorlw	3	; case 2
 17594  015054  B4D8               	btfsc	status,2,c
 17595  015056  D7CB               	goto	l354
 17596  015058  0A01               	xorlw	1	; case 3
 17597  01505A  B4D8               	btfsc	status,2,c
 17598  01505C  D7CF               	goto	l355
 17599  01505E  0A07               	xorlw	7	; case 4
 17600  015060  B4D8               	btfsc	status,2,c
 17601  015062  D7D3               	goto	l356
 17602  015064  0A01               	xorlw	1	; case 5
 17603  015066  B4D8               	btfsc	status,2,c
 17604  015068  D7D7               	goto	l357
 17605  01506A  0A03               	xorlw	3	; case 6
 17606  01506C  B4D8               	btfsc	status,2,c
 17607  01506E  D7DB               	goto	l358
 17608  015070  D7E1               	goto	l359
 17609  015072                     __end_of_GetPortPORT:
 17610                           	opt stack 0
 17611                           tblptru	equ	0xFF8
 17612                           tblptrh	equ	0xFF7
 17613                           tblptrl	equ	0xFF6
 17614                           tablat	equ	0xFF5
 17615                           prodh	equ	0xFF4
 17616                           prodl	equ	0xFF3
 17617                           intcon	equ	0xFF2
 17618                           postinc0	equ	0xFEE
 17619                           wreg	equ	0xFE8
 17620                           indf1	equ	0xFE7
 17621                           postdec1	equ	0xFE5
 17622                           fsr1h	equ	0xFE2
 17623                           fsr1l	equ	0xFE1
 17624                           indf2	equ	0xFDF
 17625                           postinc2	equ	0xFDE
 17626                           postdec2	equ	0xFDD
 17627                           fsr2h	equ	0xFDA
 17628                           fsr2l	equ	0xFD9
 17629                           status	equ	0xFD8
 17630                           
 17631 ;; *************** function _LED_Init *****************
 17632 ;; Defined at:
 17633 ;;		line 15 in file "Library/LED.c"
 17634 ;; Parameters:    Size  Location     Type
 17635 ;;  pLED            1    wreg     enum E6739
 17636 ;; Auto vars:     Size  Location     Type
 17637 ;;  pLED            1   45[BANK0 ] enum E6739
 17638 ;; Return value:  Size  Location     Type
 17639 ;;                  1    wreg      void 
 17640 ;; Registers used:
 17641 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17642 ;; Tracked objects:
 17643 ;;		On entry : 0/0
 17644 ;;		On exit  : 0/0
 17645 ;;		Unchanged: 0/0
 17646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17650 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17651 ;;Total ram usage:        1 bytes
 17652 ;; Hardware stack levels used:    1
 17653 ;; Hardware stack levels required when called:   12
 17654 ;; This function calls:
 17655 ;;		_LED_Set
 17656 ;;		_Port_SetPinType
 17657 ;; This function is called by:
 17658 ;;		_MXK_Init
 17659 ;; This function uses a non-reentrant model
 17660 ;;
 17661                           
 17662                           	psect	text70
 17663  015EB8                     __ptext70:
 17664                           	opt stack 0
 17665  015EB8                     _LED_Init:
 17666                           	opt stack 16
 17667                           
 17668                           ; BSR set to: 0
 17669                           ;incstack = 0
 17670                           ;LED_Init@pLED stored from wreg
 17671  015EB8  0100               	movlb	0	; () banked
 17672  015EBA  6FE6               	movwf	LED_Init@pLED& (0+255),b
 17673                           
 17674                           ;LED.c: 17: switch (pLED)
 17675  015EBC  D01E               	goto	l220
 17676  015EBE                     
 17677                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 17678  015EBE  0EA4               	movlw	low _PortC
 17679  015EC0  0100               	movlb	0	; () banked
 17680  015EC2  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 17681  015EC4  0E00               	movlw	high _PortC
 17682  015EC6  0100               	movlb	0	; () banked
 17683  015EC8  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17684  015ECA  0E00               	movlw	0
 17685  015ECC  0100               	movlb	0	; () banked
 17686  015ECE  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 17687  015ED0  0E03               	movlw	3
 17688  015ED2  0100               	movlb	0	; () banked
 17689  015ED4  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 17690  015ED6  ECB2  F095         	call	_Port_SetPinType	;wreg free
 17691                           
 17692                           ;LED.c: 21: break;
 17693  015EDA  D017               	goto	l222
 17694  015EDC                     
 17695                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 17696  015EDC  0EA4               	movlw	low _PortC
 17697  015EDE  0100               	movlb	0	; () banked
 17698  015EE0  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 17699  015EE2  0E00               	movlw	high _PortC
 17700  015EE4  0100               	movlb	0	; () banked
 17701  015EE6  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17702  015EE8  0E01               	movlw	1
 17703  015EEA  0100               	movlb	0	; () banked
 17704  015EEC  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 17705  015EEE  0E03               	movlw	3
 17706  015EF0  0100               	movlb	0	; () banked
 17707  015EF2  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 17708  015EF4  ECB2  F095         	call	_Port_SetPinType	;wreg free
 17709                           
 17710                           ;LED.c: 25: }
 17711                           
 17712                           ;LED.c: 24: break;
 17713  015EF8  D008               	goto	l222
 17714  015EFA                     l220:
 17715  015EFA  0100               	movlb	0	; () banked
 17716  015EFC  51E6               	movf	LED_Init@pLED& (0+255),w,b
 17717                           
 17718                           ; Switch size 1, requested type "space"
 17719                           ; Number of cases is 2, Range of values is 0 to 1
 17720                           ; switch strategies available:
 17721                           ; Name         Instructions Cycles
 17722                           ; simple_byte            7     4 (average)
 17723                           ;	Chosen strategy is simple_byte
 17724  015EFE  0A00               	xorlw	0	; case 0
 17725  015F00  B4D8               	btfsc	status,2,c
 17726  015F02  D7DD               	goto	l221
 17727  015F04  0A01               	xorlw	1	; case 1
 17728  015F06  B4D8               	btfsc	status,2,c
 17729  015F08  D7E9               	goto	l223
 17730  015F0A                     l222:
 17731                           
 17732                           ;LED.c: 26: LED_Set(pLED, 0);
 17733                           
 17734                           ; BSR set to: 0
 17735  015F0A  0E00               	movlw	0
 17736  015F0C  0100               	movlb	0	; () banked
 17737  015F0E  6FCD               	movwf	LED_Set@pValue& (0+255),b
 17738  015F10  0100               	movlb	0	; () banked
 17739  015F12  51E6               	movf	LED_Init@pLED& (0+255),w,b
 17740  015F14  EC9A  F0B0         	call	_LED_Set
 17741  015F18  0012               	return		;funcret
 17742  015F1A                     __end_of_LED_Init:
 17743                           	opt stack 0
 17744                           tblptru	equ	0xFF8
 17745                           tblptrh	equ	0xFF7
 17746                           tblptrl	equ	0xFF6
 17747                           tablat	equ	0xFF5
 17748                           prodh	equ	0xFF4
 17749                           prodl	equ	0xFF3
 17750                           intcon	equ	0xFF2
 17751                           postinc0	equ	0xFEE
 17752                           wreg	equ	0xFE8
 17753                           indf1	equ	0xFE7
 17754                           postdec1	equ	0xFE5
 17755                           fsr1h	equ	0xFE2
 17756                           fsr1l	equ	0xFE1
 17757                           indf2	equ	0xFDF
 17758                           postinc2	equ	0xFDE
 17759                           postdec2	equ	0xFDD
 17760                           fsr2h	equ	0xFDA
 17761                           fsr2l	equ	0xFD9
 17762                           status	equ	0xFD8
 17763                           
 17764 ;; *************** function _LED_Set *****************
 17765 ;; Defined at:
 17766 ;;		line 33 in file "Library/LED.c"
 17767 ;; Parameters:    Size  Location     Type
 17768 ;;  pLED            1    wreg     enum E6739
 17769 ;;  pValue          1   20[BANK0 ] unsigned char 
 17770 ;; Auto vars:     Size  Location     Type
 17771 ;;  pLED            1   21[BANK0 ] enum E6739
 17772 ;; Return value:  Size  Location     Type
 17773 ;;                  1    wreg      void 
 17774 ;; Registers used:
 17775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17776 ;; Tracked objects:
 17777 ;;		On entry : 0/0
 17778 ;;		On exit  : 0/0
 17779 ;;		Unchanged: 0/0
 17780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17781 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17785 ;;Total ram usage:        2 bytes
 17786 ;; Hardware stack levels used:    1
 17787 ;; Hardware stack levels required when called:   11
 17788 ;; This function calls:
 17789 ;;		_Port_SetPin
 17790 ;; This function is called by:
 17791 ;;		_LED_Init
 17792 ;;		_SYSTEM_Initialize
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796                           	psect	text71
 17797  016134                     __ptext71:
 17798                           	opt stack 0
 17799  016134                     _LED_Set:
 17800                           	opt stack 16
 17801                           
 17802                           ;incstack = 0
 17803                           ;LED_Set@pLED stored from wreg
 17804  016134  0100               	movlb	0	; () banked
 17805  016136  6FCE               	movwf	LED_Set@pLED& (0+255),b
 17806                           
 17807                           ;LED.c: 35: switch (pLED)
 17808  016138  D01C               	goto	l227
 17809  01613A                     
 17810                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 17811  01613A  0EA4               	movlw	low _PortC
 17812  01613C  0100               	movlb	0	; () banked
 17813  01613E  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 17814  016140  0E00               	movlw	high _PortC
 17815  016142  0100               	movlb	0	; () banked
 17816  016144  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17817  016146  0E00               	movlw	0
 17818  016148  0100               	movlb	0	; () banked
 17819  01614A  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 17820  01614C  C0CD  F0CB         	movff	LED_Set@pValue,Port_SetPin@pValue
 17821  016150  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 17822                           
 17823                           ;LED.c: 39: break;
 17824  016154  0012               	return	
 17825  016156                     
 17826                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 17827  016156  0EA4               	movlw	low _PortC
 17828  016158  0100               	movlb	0	; () banked
 17829  01615A  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 17830  01615C  0E00               	movlw	high _PortC
 17831  01615E  0100               	movlb	0	; () banked
 17832  016160  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17833  016162  0E01               	movlw	1
 17834  016164  0100               	movlb	0	; () banked
 17835  016166  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 17836  016168  C0CD  F0CB         	movff	LED_Set@pValue,Port_SetPin@pValue
 17837  01616C  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 17838                           
 17839                           ;LED.c: 43: }
 17840                           
 17841                           ;LED.c: 42: break;
 17842  016170  0012               	return	
 17843  016172                     l227:
 17844  016172  0100               	movlb	0	; () banked
 17845  016174  51CE               	movf	LED_Set@pLED& (0+255),w,b
 17846                           
 17847                           ; Switch size 1, requested type "space"
 17848                           ; Number of cases is 2, Range of values is 0 to 1
 17849                           ; switch strategies available:
 17850                           ; Name         Instructions Cycles
 17851                           ; simple_byte            7     4 (average)
 17852                           ;	Chosen strategy is simple_byte
 17853  016176  0A00               	xorlw	0	; case 0
 17854  016178  B4D8               	btfsc	status,2,c
 17855  01617A  D7DF               	goto	l228
 17856  01617C  0A01               	xorlw	1	; case 1
 17857  01617E  A4D8               	btfss	status,2,c
 17858  016180  0012               	return	
 17859  016182  D7E9               	goto	l230
 17860  016184                     __end_of_LED_Set:
 17861                           	opt stack 0
 17862                           tblptru	equ	0xFF8
 17863                           tblptrh	equ	0xFF7
 17864                           tblptrl	equ	0xFF6
 17865                           tablat	equ	0xFF5
 17866                           prodh	equ	0xFF4
 17867                           prodl	equ	0xFF3
 17868                           intcon	equ	0xFF2
 17869                           postinc0	equ	0xFEE
 17870                           wreg	equ	0xFE8
 17871                           indf1	equ	0xFE7
 17872                           postdec1	equ	0xFE5
 17873                           fsr1h	equ	0xFE2
 17874                           fsr1l	equ	0xFE1
 17875                           indf2	equ	0xFDF
 17876                           postinc2	equ	0xFDE
 17877                           postdec2	equ	0xFDD
 17878                           fsr2h	equ	0xFDA
 17879                           fsr2l	equ	0xFD9
 17880                           status	equ	0xFD8
 17881                           
 17882 ;; *************** function _MXK_Dequeue *****************
 17883 ;; Defined at:
 17884 ;;		line 153 in file "Library/MXK.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;		None
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;		None
 17889 ;; Return value:  Size  Location     Type
 17890 ;;                  1    wreg      void 
 17891 ;; Registers used:
 17892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;Total ram usage:        0 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:   12
 17905 ;; This function calls:
 17906 ;;		Absolute function
 17907 ;;		_Motor_Step
 17908 ;; This function is called by:
 17909 ;;		_init
 17910 ;;		_findClosestWall
 17911 ;;		_measureAndDisplayDistance
 17912 ;;		_mode1
 17913 ;;		_mode2
 17914 ;;		_mode4
 17915 ;;		_main
 17916 ;; This function uses a non-reentrant model
 17917 ;;
 17918                           
 17919                           	psect	text72
 17920  0165A2                     __ptext72:
 17921                           	opt stack 0
 17922  0165A2                     _MXK_Dequeue:
 17923                           	opt stack 16
 17924                           
 17925                           ;MXK.c: 155: if (lQueue)
 17926                           
 17927                           ;incstack = 0
 17928  0165A2  0100               	movlb	0	; () banked
 17929  0165A4  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17930  0165A6  0100               	movlb	0	; () banked
 17931  0165A8  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17932  0165AA  0100               	movlb	0	; () banked
 17933  0165AC  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17934  0165AE  B4D8               	btfsc	status,2,c
 17935  0165B0  D00D               	goto	u14509
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;MXK.c: 156: lQueue();
 17939  0165B2  D801               	call	u14508
 17940  0165B4  D00B               	goto	u14509
 17941  0165B6                     u14508:
 17942  0165B6  0005               	push	
 17943  0165B8  6EFA               	movwf	pclath,c
 17944  0165BA  0100               	movlb	0	; () banked
 17945  0165BC  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17946  0165BE  6EFD               	movwf	tosl,c
 17947  0165C0  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 17948  0165C2  6EFE               	movwf	tosh,c
 17949  0165C4  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 17950  0165C6  6EFF               	movwf	tosu,c
 17951  0165C8  50FA               	movf	pclath,w,c
 17952  0165CA  0012               	return		;indir
 17953  0165CC                     u14509:
 17954                           
 17955                           ;MXK.c: 157: lQueue = 0;
 17956  0165CC  0E00               	movlw	0
 17957  0165CE  0100               	movlb	0	; () banked
 17958  0165D0  6F63               	movwf	_lQueue& (0+255),b	;volatile
 17959  0165D2  0E00               	movlw	0
 17960  0165D4  0100               	movlb	0	; () banked
 17961  0165D6  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 17962  0165D8  0E00               	movlw	0
 17963  0165DA  0100               	movlb	0	; () banked
 17964  0165DC  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 17965                           
 17966                           ; BSR set to: 0
 17967  0165DE  0012               	return		;funcret
 17968  0165E0                     __end_of_MXK_Dequeue:
 17969                           	opt stack 0
 17970                           tosu	equ	0xFFF
 17971                           tosh	equ	0xFFE
 17972                           tosl	equ	0xFFD
 17973                           pclath	equ	0xFFA
 17974                           tblptru	equ	0xFF8
 17975                           tblptrh	equ	0xFF7
 17976                           tblptrl	equ	0xFF6
 17977                           tablat	equ	0xFF5
 17978                           prodh	equ	0xFF4
 17979                           prodl	equ	0xFF3
 17980                           intcon	equ	0xFF2
 17981                           postinc0	equ	0xFEE
 17982                           wreg	equ	0xFE8
 17983                           indf1	equ	0xFE7
 17984                           postdec1	equ	0xFE5
 17985                           fsr1h	equ	0xFE2
 17986                           fsr1l	equ	0xFE1
 17987                           indf2	equ	0xFDF
 17988                           postinc2	equ	0xFDE
 17989                           postdec2	equ	0xFDD
 17990                           fsr2h	equ	0xFDA
 17991                           fsr2l	equ	0xFD9
 17992                           status	equ	0xFD8
 17993                           
 17994 ;; *************** function _Motor_Step *****************
 17995 ;; Defined at:
 17996 ;;		line 75 in file "Library/Motor.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;		None
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;		None
 18001 ;; Return value:  Size  Location     Type
 18002 ;;                  1    wreg      void 
 18003 ;; Registers used:
 18004 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18014 ;;Total ram usage:        2 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:   11
 18017 ;; This function calls:
 18018 ;;		_MXK_Queue
 18019 ;;		_MXK_Release
 18020 ;;		_MXK_SwitchTo
 18021 ;;		_Port_SetPin
 18022 ;;		_Timer0_Restart
 18023 ;;		_Timer0_Stop
 18024 ;; This function is called by:
 18025 ;;		_Motor_Init
 18026 ;;		_MXK_Dequeue
 18027 ;;		_Timer0_ISR
 18028 ;; This function uses a non-reentrant model
 18029 ;;
 18030                           
 18031                           	psect	text73
 18032  0138F2                     __ptext73:
 18033                           	opt stack 0
 18034  0138F2                     _Motor_Step:
 18035                           	opt stack 0
 18036                           
 18037                           ; BSR set to: 0
 18038                           ;Skip over the trampoline to the duplicate function for level 2
 18039  0138F2  B251               	btfsc	btemp,1,c
 18040  0138F4  EF9E  F09E         	goto	i2_Motor_Step
 18041  0138F8                     _Motor_Step$intlevel0:
 18042                           	opt stack 16
 18043                           
 18044                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 18045                           
 18046                           ;incstack = 0
 18047  0138F8  0100               	movlb	0	; () banked
 18048  0138FA  EE20 F004          	lfsr	2,4
 18049  0138FE  517D               	movf	_lMotor& (0+255),w,b
 18050  013900  26D9               	addwf	fsr2l,f,c
 18051  013902  517E               	movf	(_lMotor+1)& (0+255),w,b
 18052  013904  22DA               	addwfc	fsr2h,f,c
 18053  013906  50DF               	movf	indf2,w,c
 18054  013908  EC51  F0B2         	call	_MXK_SwitchTo
 18055  01390C  0900               	iorlw	0
 18056  01390E  B4D8               	btfsc	status,2,c
 18057  013910  D07A               	goto	l1627
 18058                           
 18059                           ;Motor.c: 78: {
 18060                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 18061  013912  C07D  FFD9         	movff	_lMotor,fsr2l
 18062  013916  C07E  FFDA         	movff	_lMotor+1,fsr2h
 18063  01391A  50DE               	movf	postinc2,w,c
 18064  01391C  10DE               	iorwf	postinc2,w,c
 18065  01391E  B4D8               	btfsc	status,2,c
 18066  013920  D06D               	goto	l1628
 18067                           
 18068                           ;Motor.c: 80: {
 18069                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 18070  013922  C07D  FFD9         	movff	_lMotor,fsr2l
 18071  013926  C07E  FFDA         	movff	_lMotor+1,fsr2h
 18072  01392A  0E01               	movlw	1
 18073  01392C  BEDB               	btfsc	plusw2,7,c
 18074  01392E  D026               	goto	l1629
 18075  013930  0E01               	movlw	1
 18076  013932  50DB               	movf	plusw2,w,c
 18077  013934  E103               	bnz	u10070
 18078  013936  04DE               	decf	postinc2,w,c
 18079  013938  A0D8               	btfss	status,0,c
 18080  01393A  D020               	goto	l1629
 18081  01393C                     u10070:
 18082                           
 18083                           ;Motor.c: 83: {
 18084                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 18085  01393C  C07D  FFD9         	movff	_lMotor,fsr2l
 18086  013940  C07E  FFDA         	movff	_lMotor+1,fsr2h
 18087  013944  28DE               	incf	postinc2,w,c
 18088  013946  E104               	bnz	u10080
 18089  013948  0E7F               	movlw	127
 18090  01394A  18DE               	xorwf	postinc2,w,c
 18091  01394C  B4D8               	btfsc	status,2,c
 18092  01394E  D007               	goto	l1630
 18093  013950                     u10080:
 18094                           
 18095                           ;Motor.c: 85: lMotor->mDelta --;
 18096  013950  C07D  FFD9         	movff	_lMotor,fsr2l
 18097  013954  C07E  FFDA         	movff	_lMotor+1,fsr2h
 18098  013958  06DE               	decf	postinc2,f,c
 18099  01395A  0E00               	movlw	0
 18100  01395C  5ADD               	subwfb	postdec2,f,c
 18101  01395E                     l1630:
 18102                           
 18103                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18104  01395E  0E90               	movlw	low _PortE
 18105  013960  0100               	movlb	0	; () banked
 18106  013962  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 18107  013964  0E00               	movlw	high _PortE
 18108  013966  0100               	movlb	0	; () banked
 18109  013968  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18110  01396A  0E00               	movlw	0
 18111  01396C  0100               	movlb	0	; () banked
 18112  01396E  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 18113  013970  0E01               	movlw	1
 18114  013972  0100               	movlb	0	; () banked
 18115  013974  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 18116  013976  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 18117                           
 18118                           ;Motor.c: 88: }
 18119  01397A  D01F               	goto	l1631
 18120  01397C                     l1629:
 18121                           
 18122                           ;Motor.c: 89: else
 18123                           ;Motor.c: 90: {
 18124                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18125  01397C  C07D  FFD9         	movff	_lMotor,fsr2l
 18126  013980  C07E  FFDA         	movff	_lMotor+1,fsr2h
 18127  013984  04DE               	decf	postinc2,w,c
 18128  013986  E104               	bnz	u10090
 18129  013988  0E80               	movlw	128
 18130  01398A  18DE               	xorwf	postinc2,w,c
 18131  01398C  B4D8               	btfsc	status,2,c
 18132  01398E  D007               	goto	l1632
 18133  013990                     u10090:
 18134                           
 18135                           ;Motor.c: 92: lMotor->mDelta ++;
 18136  013990  C07D  FFD9         	movff	_lMotor,fsr2l
 18137  013994  C07E  FFDA         	movff	_lMotor+1,fsr2h
 18138  013998  2ADE               	incf	postinc2,f,c
 18139  01399A  0E00               	movlw	0
 18140  01399C  22DD               	addwfc	postdec2,f,c
 18141  01399E                     l1632:
 18142                           
 18143                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 18144  01399E  0E90               	movlw	low _PortE
 18145  0139A0  0100               	movlb	0	; () banked
 18146  0139A2  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 18147  0139A4  0E00               	movlw	high _PortE
 18148  0139A6  0100               	movlb	0	; () banked
 18149  0139A8  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18150  0139AA  0E00               	movlw	0
 18151  0139AC  0100               	movlb	0	; () banked
 18152  0139AE  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 18153  0139B0  0E00               	movlw	0
 18154  0139B2  0100               	movlb	0	; () banked
 18155  0139B4  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 18156  0139B6  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 18157  0139BA                     l1631:
 18158                           
 18159                           ;Motor.c: 95: }
 18160                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 18161  0139BA  0E90               	movlw	low _PortE
 18162  0139BC  0100               	movlb	0	; () banked
 18163  0139BE  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 18164  0139C0  0E00               	movlw	high _PortE
 18165  0139C2  0100               	movlb	0	; () banked
 18166  0139C4  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18167  0139C6  0E01               	movlw	1
 18168  0139C8  0100               	movlb	0	; () banked
 18169  0139CA  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 18170  0139CC  0E01               	movlw	1
 18171  0139CE  0100               	movlb	0	; () banked
 18172  0139D0  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 18173  0139D2  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 18174                           
 18175                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 18176  0139D6  0E90               	movlw	low _PortE
 18177  0139D8  0100               	movlb	0	; () banked
 18178  0139DA  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 18179  0139DC  0E00               	movlw	high _PortE
 18180  0139DE  0100               	movlb	0	; () banked
 18181  0139E0  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18182  0139E2  0E01               	movlw	1
 18183  0139E4  0100               	movlb	0	; () banked
 18184  0139E6  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 18185  0139E8  0E00               	movlw	0
 18186  0139EA  0100               	movlb	0	; () banked
 18187  0139EC  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 18188  0139EE  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 18189                           
 18190                           ;Motor.c: 101: MXK_Release();
 18191  0139F2  EC9D  F0B5         	call	_MXK_Release	;wreg free
 18192                           
 18193                           ;Motor.c: 102: Timer0_Restart();
 18194  0139F6  EC8C  F0B6         	call	_Timer0_Restart	;wreg free
 18195                           
 18196                           ;Motor.c: 103: return;
 18197  0139FA  0012               	return	
 18198  0139FC                     l1628:
 18199                           
 18200                           ;Motor.c: 104: }
 18201                           ;Motor.c: 105: MXK_Release();
 18202  0139FC  EC9D  F0B5         	call	_MXK_Release	;wreg free
 18203                           
 18204                           ;Motor.c: 106: Timer0_Stop();
 18205  013A00  ECB7  F0B6         	call	_Timer0_Stop	;wreg free
 18206                           
 18207                           ;Motor.c: 107: return;
 18208  013A04  0012               	return	
 18209  013A06                     l1627:
 18210                           
 18211                           ;Motor.c: 108: }
 18212                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 18213  013A06  C066  F0B9         	movff	_lStepFunction,MXK_Queue@pCallback
 18214  013A0A  C067  F0BA         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 18215  013A0E  C068  F0BB         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 18216  013A12  EC78  F0B6         	call	_MXK_Queue	;wreg free
 18217  013A16  0012               	return		;funcret
 18218  013A18                     __end_of_Motor_Step:
 18219                           	opt stack 0
 18220                           tosu	equ	0xFFF
 18221                           tosh	equ	0xFFE
 18222                           tosl	equ	0xFFD
 18223                           pclath	equ	0xFFA
 18224                           tblptru	equ	0xFF8
 18225                           tblptrh	equ	0xFF7
 18226                           tblptrl	equ	0xFF6
 18227                           tablat	equ	0xFF5
 18228                           prodh	equ	0xFF4
 18229                           prodl	equ	0xFF3
 18230                           intcon	equ	0xFF2
 18231                           postinc0	equ	0xFEE
 18232                           wreg	equ	0xFE8
 18233                           indf1	equ	0xFE7
 18234                           postdec1	equ	0xFE5
 18235                           fsr1h	equ	0xFE2
 18236                           fsr1l	equ	0xFE1
 18237                           indf2	equ	0xFDF
 18238                           postinc2	equ	0xFDE
 18239                           postdec2	equ	0xFDD
 18240                           plusw2	equ	0xFDB
 18241                           fsr2h	equ	0xFDA
 18242                           fsr2l	equ	0xFD9
 18243                           status	equ	0xFD8
 18244                           
 18245 ;; *************** function _Timer0_Stop *****************
 18246 ;; Defined at:
 18247 ;;		line 89 in file "Library/Timer0.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;		None
 18250 ;; Auto vars:     Size  Location     Type
 18251 ;;		None
 18252 ;; Return value:  Size  Location     Type
 18253 ;;                  1    wreg      void 
 18254 ;; Registers used:
 18255 ;;		None
 18256 ;; Tracked objects:
 18257 ;;		On entry : 0/0
 18258 ;;		On exit  : 0/0
 18259 ;;		Unchanged: 0/0
 18260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;Total ram usage:        0 bytes
 18266 ;; Hardware stack levels used:    1
 18267 ;; Hardware stack levels required when called:    7
 18268 ;; This function calls:
 18269 ;;		Nothing
 18270 ;; This function is called by:
 18271 ;;		_Motor_Step
 18272 ;; This function uses a non-reentrant model
 18273 ;;
 18274                           
 18275                           	psect	text74
 18276  016D6E                     __ptext74:
 18277                           	opt stack 0
 18278  016D6E                     _Timer0_Stop:
 18279                           	opt stack 19
 18280                           
 18281                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 18282                           
 18283                           ;incstack = 0
 18284  016D6E  9AF2               	bcf	intcon,5,c	;volatile
 18285                           
 18286                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 18287  016D70  94F2               	bcf	intcon,2,c	;volatile
 18288  016D72  0012               	return		;funcret
 18289  016D74                     __end_of_Timer0_Stop:
 18290                           	opt stack 0
 18291                           tosu	equ	0xFFF
 18292                           tosh	equ	0xFFE
 18293                           tosl	equ	0xFFD
 18294                           pclath	equ	0xFFA
 18295                           tblptru	equ	0xFF8
 18296                           tblptrh	equ	0xFF7
 18297                           tblptrl	equ	0xFF6
 18298                           tablat	equ	0xFF5
 18299                           prodh	equ	0xFF4
 18300                           prodl	equ	0xFF3
 18301                           intcon	equ	0xFF2
 18302                           postinc0	equ	0xFEE
 18303                           wreg	equ	0xFE8
 18304                           indf1	equ	0xFE7
 18305                           postdec1	equ	0xFE5
 18306                           fsr1h	equ	0xFE2
 18307                           fsr1l	equ	0xFE1
 18308                           indf2	equ	0xFDF
 18309                           postinc2	equ	0xFDE
 18310                           postdec2	equ	0xFDD
 18311                           plusw2	equ	0xFDB
 18312                           fsr2h	equ	0xFDA
 18313                           fsr2l	equ	0xFD9
 18314                           status	equ	0xFD8
 18315                           
 18316 ;; *************** function _Timer0_Restart *****************
 18317 ;; Defined at:
 18318 ;;		line 83 in file "Library/Timer0.c"
 18319 ;; Parameters:    Size  Location     Type
 18320 ;;		None
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;		None
 18323 ;; Return value:  Size  Location     Type
 18324 ;;                  1    wreg      void 
 18325 ;; Registers used:
 18326 ;;		None
 18327 ;; Tracked objects:
 18328 ;;		On entry : 0/0
 18329 ;;		On exit  : 0/0
 18330 ;;		Unchanged: 0/0
 18331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18336 ;;Total ram usage:        0 bytes
 18337 ;; Hardware stack levels used:    1
 18338 ;; Hardware stack levels required when called:    7
 18339 ;; This function calls:
 18340 ;;		Nothing
 18341 ;; This function is called by:
 18342 ;;		_Motor_Step
 18343 ;; This function uses a non-reentrant model
 18344 ;;
 18345                           
 18346                           	psect	text75
 18347  016D18                     __ptext75:
 18348                           	opt stack 0
 18349  016D18                     _Timer0_Restart:
 18350                           	opt stack 19
 18351                           
 18352                           ;Timer0.c: 85: TMR0 = COUNTER;
 18353                           
 18354                           ;incstack = 0
 18355  016D18  C029  FFD6         	movff	_COUNTER,4054	;volatile
 18356  016D1C  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 18357                           
 18358                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 18359  016D20  8AF2               	bsf	intcon,5,c	;volatile
 18360  016D22  0012               	return		;funcret
 18361  016D24                     __end_of_Timer0_Restart:
 18362                           	opt stack 0
 18363                           tosu	equ	0xFFF
 18364                           tosh	equ	0xFFE
 18365                           tosl	equ	0xFFD
 18366                           pclath	equ	0xFFA
 18367                           tblptru	equ	0xFF8
 18368                           tblptrh	equ	0xFF7
 18369                           tblptrl	equ	0xFF6
 18370                           tablat	equ	0xFF5
 18371                           prodh	equ	0xFF4
 18372                           prodl	equ	0xFF3
 18373                           intcon	equ	0xFF2
 18374                           postinc0	equ	0xFEE
 18375                           wreg	equ	0xFE8
 18376                           indf1	equ	0xFE7
 18377                           postdec1	equ	0xFE5
 18378                           fsr1h	equ	0xFE2
 18379                           fsr1l	equ	0xFE1
 18380                           indf2	equ	0xFDF
 18381                           postinc2	equ	0xFDE
 18382                           postdec2	equ	0xFDD
 18383                           plusw2	equ	0xFDB
 18384                           fsr2h	equ	0xFDA
 18385                           fsr2l	equ	0xFD9
 18386                           status	equ	0xFD8
 18387                           
 18388 ;; *************** function _MXK_SwitchTo *****************
 18389 ;; Defined at:
 18390 ;;		line 105 in file "Library/MXK.c"
 18391 ;; Parameters:    Size  Location     Type
 18392 ;;  pModule         1    wreg     enum E6927
 18393 ;; Auto vars:     Size  Location     Type
 18394 ;;  pModule         1    7[BANK0 ] enum E6927
 18395 ;;  CUR             1    6[BANK0 ] unsigned char 
 18396 ;; Return value:  Size  Location     Type
 18397 ;;                  1    wreg      unsigned char 
 18398 ;; Registers used:
 18399 ;;		wreg, status,2, status,0, cstack
 18400 ;; Tracked objects:
 18401 ;;		On entry : 0/0
 18402 ;;		On exit  : 0/0
 18403 ;;		Unchanged: 0/0
 18404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;Total ram usage:        2 bytes
 18410 ;; Hardware stack levels used:    1
 18411 ;; Hardware stack levels required when called:    8
 18412 ;; This function calls:
 18413 ;;		_delay_us
 18414 ;; This function is called by:
 18415 ;;		_Motor_Step
 18416 ;;		_findClosestWall
 18417 ;;		_measureAndDisplayDistance
 18418 ;;		_mode1
 18419 ;;		_mode2
 18420 ;;		_mode4
 18421 ;;		_main
 18422 ;; This function uses a non-reentrant model
 18423 ;;
 18424                           
 18425                           	psect	text76
 18426  0164A2                     __ptext76:
 18427                           	opt stack 0
 18428  0164A2                     _MXK_SwitchTo:
 18429                           	opt stack 20
 18430                           
 18431                           ;incstack = 0
 18432                           ;MXK_SwitchTo@pModule stored from wreg
 18433  0164A2  0100               	movlb	0	; () banked
 18434  0164A4  6FC0               	movwf	MXK_SwitchTo@pModule& (0+255),b
 18435                           
 18436                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 18437  0164A6  5086               	movf	3974,w,c	;volatile
 18438  0164A8  0B0F               	andlw	15
 18439  0164AA  0100               	movlb	0	; () banked
 18440  0164AC  6FBF               	movwf	MXK_SwitchTo@CUR& (0+255),b
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 18444  0164AE  504B               	movf	_Bus_State,w,c
 18445  0164B0  A4D8               	btfss	status,2,c
 18446  0164B2  D002               	goto	l1730
 18447                           
 18448                           ; BSR set to: 0
 18449                           ;MXK.c: 110: return 0;
 18450  0164B4  0E00               	movlw	0
 18451                           
 18452                           ; BSR set to: 0
 18453  0164B6  0012               	return	
 18454  0164B8                     l1730:
 18455                           
 18456                           ; BSR set to: 0
 18457                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 18458                           
 18459                           ; BSR set to: 0
 18460  0164B8  0E00               	movlw	0
 18461  0164BA  6E4B               	movwf	_Bus_State,c
 18462                           
 18463                           ; BSR set to: 0
 18464                           ;MXK.c: 114: if (CUR != pModule)
 18465  0164BC  0100               	movlb	0	; () banked
 18466  0164BE  51C0               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18467  0164C0  0100               	movlb	0	; () banked
 18468  0164C2  19BF               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 18469  0164C4  B4D8               	btfsc	status,2,c
 18470  0164C6  D00C               	goto	l1732
 18471                           
 18472                           ; BSR set to: 0
 18473                           ;MXK.c: 115: {
 18474                           ;MXK.c: 116: PORTG &= ~(0xF);
 18475  0164C8  0EF0               	movlw	240
 18476  0164CA  1686               	andwf	3974,f,c	;volatile
 18477                           
 18478                           ;MXK.c: 117: PORTG |= pModule;
 18479  0164CC  0100               	movlb	0	; () banked
 18480  0164CE  51C0               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18481  0164D0  1286               	iorwf	3974,f,c	;volatile
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;MXK.c: 120: delay_us(10);
 18485  0164D2  0E00               	movlw	0
 18486  0164D4  0100               	movlb	0	; () banked
 18487  0164D6  6FBA               	movwf	(delay_us@us+1)& (0+255),b
 18488  0164D8  0E0A               	movlw	10
 18489  0164DA  6FB9               	movwf	delay_us@us& (0+255),b
 18490  0164DC  EC71  F0B0         	call	_delay_us	;wreg free
 18491  0164E0                     l1732:
 18492                           
 18493                           ;MXK.c: 121: }
 18494                           ;MXK.c: 122: return 1;
 18495  0164E0  0E01               	movlw	1
 18496  0164E2  0012               	return	
 18497  0164E4                     __end_of_MXK_SwitchTo:
 18498                           	opt stack 0
 18499                           tosu	equ	0xFFF
 18500                           tosh	equ	0xFFE
 18501                           tosl	equ	0xFFD
 18502                           pclath	equ	0xFFA
 18503                           tblptru	equ	0xFF8
 18504                           tblptrh	equ	0xFF7
 18505                           tblptrl	equ	0xFF6
 18506                           tablat	equ	0xFF5
 18507                           prodh	equ	0xFF4
 18508                           prodl	equ	0xFF3
 18509                           intcon	equ	0xFF2
 18510                           postinc0	equ	0xFEE
 18511                           wreg	equ	0xFE8
 18512                           indf1	equ	0xFE7
 18513                           postdec1	equ	0xFE5
 18514                           fsr1h	equ	0xFE2
 18515                           fsr1l	equ	0xFE1
 18516                           indf2	equ	0xFDF
 18517                           postinc2	equ	0xFDE
 18518                           postdec2	equ	0xFDD
 18519                           plusw2	equ	0xFDB
 18520                           fsr2h	equ	0xFDA
 18521                           fsr2l	equ	0xFD9
 18522                           status	equ	0xFD8
 18523                           
 18524 ;; *************** function _MXK_Release *****************
 18525 ;; Defined at:
 18526 ;;		line 130 in file "Library/MXK.c"
 18527 ;; Parameters:    Size  Location     Type
 18528 ;;		None
 18529 ;; Auto vars:     Size  Location     Type
 18530 ;;		None
 18531 ;; Return value:  Size  Location     Type
 18532 ;;                  1    wreg      unsigned char 
 18533 ;; Registers used:
 18534 ;;		wreg, status,2, status,0
 18535 ;; Tracked objects:
 18536 ;;		On entry : 0/0
 18537 ;;		On exit  : 0/0
 18538 ;;		Unchanged: 0/0
 18539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18544 ;;Total ram usage:        0 bytes
 18545 ;; Hardware stack levels used:    1
 18546 ;; Hardware stack levels required when called:    7
 18547 ;; This function calls:
 18548 ;;		Nothing
 18549 ;; This function is called by:
 18550 ;;		_Motor_Step
 18551 ;;		_init
 18552 ;;		_findClosestWall
 18553 ;;		_measureAndDisplayDistance
 18554 ;;		_mode1
 18555 ;;		_mode2
 18556 ;;		_mode4
 18557 ;;		_main
 18558 ;; This function uses a non-reentrant model
 18559 ;;
 18560                           
 18561                           	psect	text77
 18562  016B3A                     __ptext77:
 18563                           	opt stack 0
 18564  016B3A                     _MXK_Release:
 18565                           	opt stack 21
 18566                           
 18567                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 18568                           
 18569                           ;incstack = 0
 18570  016B3A  0E01               	movlw	1
 18571  016B3C  6E4B               	movwf	_Bus_State,c
 18572                           
 18573                           ;MXK.c: 134: if (lQueue != 0)
 18574  016B3E  0100               	movlb	0	; () banked
 18575  016B40  5163               	movf	_lQueue& (0+255),w,b	;volatile
 18576  016B42  0100               	movlb	0	; () banked
 18577  016B44  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18578  016B46  0100               	movlb	0	; () banked
 18579  016B48  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18580  016B4A  B4D8               	btfsc	status,2,c
 18581  016B4C  D002               	goto	l1735
 18582                           
 18583                           ; BSR set to: 0
 18584                           ;MXK.c: 135: return 1;
 18585  016B4E  0E01               	movlw	1
 18586                           
 18587                           ; BSR set to: 0
 18588  016B50  0012               	return	
 18589  016B52                     l1735:
 18590                           
 18591                           ; BSR set to: 0
 18592                           ;MXK.c: 137: return 0;
 18593                           
 18594                           ; BSR set to: 0
 18595  016B52  0E00               	movlw	0
 18596  016B54  0012               	return	
 18597  016B56                     __end_of_MXK_Release:
 18598                           	opt stack 0
 18599                           tosu	equ	0xFFF
 18600                           tosh	equ	0xFFE
 18601                           tosl	equ	0xFFD
 18602                           pclath	equ	0xFFA
 18603                           tblptru	equ	0xFF8
 18604                           tblptrh	equ	0xFF7
 18605                           tblptrl	equ	0xFF6
 18606                           tablat	equ	0xFF5
 18607                           prodh	equ	0xFF4
 18608                           prodl	equ	0xFF3
 18609                           intcon	equ	0xFF2
 18610                           postinc0	equ	0xFEE
 18611                           wreg	equ	0xFE8
 18612                           indf1	equ	0xFE7
 18613                           postdec1	equ	0xFE5
 18614                           fsr1h	equ	0xFE2
 18615                           fsr1l	equ	0xFE1
 18616                           indf2	equ	0xFDF
 18617                           postinc2	equ	0xFDE
 18618                           postdec2	equ	0xFDD
 18619                           plusw2	equ	0xFDB
 18620                           fsr2h	equ	0xFDA
 18621                           fsr2l	equ	0xFD9
 18622                           status	equ	0xFD8
 18623                           
 18624 ;; *************** function _MXK_Queue *****************
 18625 ;; Defined at:
 18626 ;;		line 144 in file "Library/MXK.c"
 18627 ;; Parameters:    Size  Location     Type
 18628 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 18629 ;;		 -> Absolute function(1), Motor_Step(1), 
 18630 ;; Auto vars:     Size  Location     Type
 18631 ;;		None
 18632 ;; Return value:  Size  Location     Type
 18633 ;;                  1    wreg      void 
 18634 ;; Registers used:
 18635 ;;		wreg, status,2, status,0
 18636 ;; Tracked objects:
 18637 ;;		On entry : 0/0
 18638 ;;		On exit  : 0/0
 18639 ;;		Unchanged: 0/0
 18640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18641 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;Total ram usage:        3 bytes
 18646 ;; Hardware stack levels used:    1
 18647 ;; Hardware stack levels required when called:    7
 18648 ;; This function calls:
 18649 ;;		Nothing
 18650 ;; This function is called by:
 18651 ;;		_Motor_Step
 18652 ;; This function uses a non-reentrant model
 18653 ;;
 18654                           
 18655                           	psect	text78
 18656  016CF0                     __ptext78:
 18657                           	opt stack 0
 18658  016CF0                     _MXK_Queue:
 18659                           	opt stack 19
 18660                           
 18661                           ;MXK.c: 146: lQueue = pCallback;
 18662                           
 18663                           ; BSR set to: 0
 18664                           ;incstack = 0
 18665  016CF0  C0B9  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 18666  016CF4  C0BA  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 18667  016CF8  C0BB  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 18668  016CFC  0012               	return		;funcret
 18669  016CFE                     __end_of_MXK_Queue:
 18670                           	opt stack 0
 18671                           tosu	equ	0xFFF
 18672                           tosh	equ	0xFFE
 18673                           tosl	equ	0xFFD
 18674                           pclath	equ	0xFFA
 18675                           tblptru	equ	0xFF8
 18676                           tblptrh	equ	0xFF7
 18677                           tblptrl	equ	0xFF6
 18678                           tablat	equ	0xFF5
 18679                           prodh	equ	0xFF4
 18680                           prodl	equ	0xFF3
 18681                           intcon	equ	0xFF2
 18682                           postinc0	equ	0xFEE
 18683                           wreg	equ	0xFE8
 18684                           indf1	equ	0xFE7
 18685                           postdec1	equ	0xFE5
 18686                           fsr1h	equ	0xFE2
 18687                           fsr1l	equ	0xFE1
 18688                           indf2	equ	0xFDF
 18689                           postinc2	equ	0xFDE
 18690                           postdec2	equ	0xFDD
 18691                           plusw2	equ	0xFDB
 18692                           fsr2h	equ	0xFDA
 18693                           fsr2l	equ	0xFD9
 18694                           status	equ	0xFD8
 18695                           
 18696 ;; *************** function _MXK_BlockSwitchTo *****************
 18697 ;; Defined at:
 18698 ;;		line 82 in file "Library/MXK.c"
 18699 ;; Parameters:    Size  Location     Type
 18700 ;;  pModule         1    wreg     enum E6927
 18701 ;; Auto vars:     Size  Location     Type
 18702 ;;  pModule         1    7[BANK0 ] enum E6927
 18703 ;;  CUR             1    6[BANK0 ] unsigned char 
 18704 ;; Return value:  Size  Location     Type
 18705 ;;                  1    wreg      unsigned char 
 18706 ;; Registers used:
 18707 ;;		wreg, status,2, status,0, cstack
 18708 ;; Tracked objects:
 18709 ;;		On entry : 0/0
 18710 ;;		On exit  : 0/0
 18711 ;;		Unchanged: 0/0
 18712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;Total ram usage:        2 bytes
 18718 ;; Hardware stack levels used:    1
 18719 ;; Hardware stack levels required when called:    8
 18720 ;; This function calls:
 18721 ;;		_delay_us
 18722 ;; This function is called by:
 18723 ;;		_init
 18724 ;; This function uses a non-reentrant model
 18725 ;;
 18726                           
 18727                           	psect	text79
 18728  0165E0                     __ptext79:
 18729                           	opt stack 0
 18730  0165E0                     _MXK_BlockSwitchTo:
 18731                           	opt stack 21
 18732                           
 18733                           ;incstack = 0
 18734                           ;MXK_BlockSwitchTo@pModule stored from wreg
 18735  0165E0  0100               	movlb	0	; () banked
 18736  0165E2  6FC0               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 18737                           
 18738                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 18739  0165E4  5086               	movf	3974,w,c	;volatile
 18740  0165E6  0B0F               	andlw	15
 18741  0165E8  0100               	movlb	0	; () banked
 18742  0165EA  6FBF               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 18743  0165EC                     
 18744                           ; BSR set to: 0
 18745                           
 18746                           ; BSR set to: 0
 18747  0165EC  504B               	movf	_Bus_State,w,c
 18748  0165EE  B4D8               	btfsc	status,2,c
 18749  0165F0  D7FD               	goto	l1724
 18750                           
 18751                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 18752  0165F2  0E00               	movlw	0
 18753  0165F4  6E4B               	movwf	_Bus_State,c
 18754                           
 18755                           ;MXK.c: 90: if (CUR != pModule)
 18756  0165F6  0100               	movlb	0	; () banked
 18757  0165F8  51C0               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18758  0165FA  0100               	movlb	0	; () banked
 18759  0165FC  19BF               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 18760  0165FE  B4D8               	btfsc	status,2,c
 18761  016600  D00C               	goto	l1726
 18762                           
 18763                           ; BSR set to: 0
 18764                           ;MXK.c: 91: {
 18765                           ;MXK.c: 92: PORTG &= ~(0xF);
 18766  016602  0EF0               	movlw	240
 18767  016604  1686               	andwf	3974,f,c	;volatile
 18768                           
 18769                           ;MXK.c: 93: PORTG |= pModule;
 18770  016606  0100               	movlb	0	; () banked
 18771  016608  51C0               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18772  01660A  1286               	iorwf	3974,f,c	;volatile
 18773                           
 18774                           ; BSR set to: 0
 18775                           ;MXK.c: 96: delay_us(10);
 18776  01660C  0E00               	movlw	0
 18777  01660E  0100               	movlb	0	; () banked
 18778  016610  6FBA               	movwf	(delay_us@us+1)& (0+255),b
 18779  016612  0E0A               	movlw	10
 18780  016614  6FB9               	movwf	delay_us@us& (0+255),b
 18781  016616  EC71  F0B0         	call	_delay_us	;wreg free
 18782  01661A                     l1726:
 18783                           
 18784                           ;MXK.c: 97: }
 18785                           ;MXK.c: 98: return 1;
 18786  01661A  0E01               	movlw	1
 18787  01661C  0012               	return	
 18788  01661E                     __end_of_MXK_BlockSwitchTo:
 18789                           	opt stack 0
 18790                           tosu	equ	0xFFF
 18791                           tosh	equ	0xFFE
 18792                           tosl	equ	0xFFD
 18793                           pclath	equ	0xFFA
 18794                           tblptru	equ	0xFF8
 18795                           tblptrh	equ	0xFF7
 18796                           tblptrl	equ	0xFF6
 18797                           tablat	equ	0xFF5
 18798                           prodh	equ	0xFF4
 18799                           prodl	equ	0xFF3
 18800                           intcon	equ	0xFF2
 18801                           postinc0	equ	0xFEE
 18802                           wreg	equ	0xFE8
 18803                           indf1	equ	0xFE7
 18804                           postdec1	equ	0xFE5
 18805                           fsr1h	equ	0xFE2
 18806                           fsr1l	equ	0xFE1
 18807                           indf2	equ	0xFDF
 18808                           postinc2	equ	0xFDE
 18809                           postdec2	equ	0xFDD
 18810                           plusw2	equ	0xFDB
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function _delay_us *****************
 18816 ;; Defined at:
 18817 ;;		line 255 in file "Library/Types.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  us              2    0[BANK0 ] unsigned short 
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;  u               4    2[BANK0 ] unsigned long 
 18822 ;; Return value:  Size  Location     Type
 18823 ;;                  1    wreg      void 
 18824 ;; Registers used:
 18825 ;;		wreg, status,2, status,0
 18826 ;; Tracked objects:
 18827 ;;		On entry : 0/0
 18828 ;;		On exit  : 0/0
 18829 ;;		Unchanged: 0/0
 18830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18832 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;Total ram usage:        6 bytes
 18836 ;; Hardware stack levels used:    1
 18837 ;; Hardware stack levels required when called:    7
 18838 ;; This function calls:
 18839 ;;		Nothing
 18840 ;; This function is called by:
 18841 ;;		_MXK_BlockSwitchTo
 18842 ;;		_MXK_SwitchTo
 18843 ;; This function uses a non-reentrant model
 18844 ;;
 18845                           
 18846                           	psect	text80
 18847  0160E2                     __ptext80:
 18848                           	opt stack 0
 18849  0160E2                     _delay_us:
 18850                           	opt stack 20
 18851                           
 18852                           ;Types.c: 256: unsigned long u;
 18853                           ;Types.c: 257: while (us--) {
 18854                           
 18855                           ;incstack = 0
 18856  0160E2  D01C               	goto	u9410
 18857  0160E4                     l12655:
 18858                           
 18859                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 18860  0160E4  0E00               	movlw	0
 18861  0160E6  0100               	movlb	0	; () banked
 18862  0160E8  6FBB               	movwf	delay_us@u& (0+255),b
 18863  0160EA  0E00               	movlw	0
 18864  0160EC  6FBC               	movwf	(delay_us@u+1)& (0+255),b
 18865  0160EE  0E00               	movlw	0
 18866  0160F0  6FBD               	movwf	(delay_us@u+2)& (0+255),b
 18867  0160F2  0E00               	movlw	0
 18868  0160F4  6FBE               	movwf	(delay_us@u+3)& (0+255),b
 18869  0160F6                     l12657:
 18870                           
 18871                           ; BSR set to: 0
 18872  0160F6  0100               	movlb	0	; () banked
 18873  0160F8  51BB               	movf	delay_us@u& (0+255),w,b
 18874  0160FA  0100               	movlb	0	; () banked
 18875  0160FC  11BC               	iorwf	(delay_us@u+1)& (0+255),w,b
 18876  0160FE  0100               	movlb	0	; () banked
 18877  016100  11BD               	iorwf	(delay_us@u+2)& (0+255),w,b
 18878  016102  0100               	movlb	0	; () banked
 18879  016104  11BE               	iorwf	(delay_us@u+3)& (0+255),w,b
 18880  016106  A4D8               	btfss	status,2,c
 18881  016108  D009               	goto	u9410
 18882                           
 18883                           ; BSR set to: 0
 18884                           
 18885                           ; BSR set to: 0
 18886  01610A  F000               	nop		; ;# 
 18887  01610C  0E01               	movlw	1
 18888  01610E  0100               	movlb	0	; () banked
 18889  016110  27BB               	addwf	delay_us@u& (0+255),f,b
 18890  016112  0E00               	movlw	0
 18891  016114  23BC               	addwfc	(delay_us@u+1)& (0+255),f,b
 18892  016116  23BD               	addwfc	(delay_us@u+2)& (0+255),f,b
 18893  016118  23BE               	addwfc	(delay_us@u+3)& (0+255),f,b
 18894  01611A  D7ED               	goto	l12657
 18895  01611C                     u9410:
 18896                           
 18897                           ; BSR set to: 0
 18898                           
 18899                           ; BSR set to: 0
 18900  01611C  0100               	movlb	0	; () banked
 18901  01611E  07B9               	decf	delay_us@us& (0+255),f,b
 18902  016120  A0D8               	btfss	status,0,c
 18903  016122  07BA               	decf	(delay_us@us+1)& (0+255),f,b
 18904  016124  0100               	movlb	0	; () banked
 18905  016126  29B9               	incf	delay_us@us& (0+255),w,b
 18906  016128  E1DD               	bnz	l12655
 18907  01612A  0100               	movlb	0	; () banked
 18908  01612C  29BA               	incf	(delay_us@us+1)& (0+255),w,b
 18909  01612E  B4D8               	btfsc	status,2,c
 18910  016130  0012               	return	
 18911  016132  D7D8               	goto	l832
 18912  016134                     __end_of_delay_us:
 18913                           	opt stack 0
 18914                           tosu	equ	0xFFF
 18915                           tosh	equ	0xFFE
 18916                           tosl	equ	0xFFD
 18917                           pclath	equ	0xFFA
 18918                           tblptru	equ	0xFF8
 18919                           tblptrh	equ	0xFF7
 18920                           tblptrl	equ	0xFF6
 18921                           tablat	equ	0xFF5
 18922                           prodh	equ	0xFF4
 18923                           prodl	equ	0xFF3
 18924                           intcon	equ	0xFF2
 18925                           postinc0	equ	0xFEE
 18926                           wreg	equ	0xFE8
 18927                           indf1	equ	0xFE7
 18928                           postdec1	equ	0xFE5
 18929                           fsr1h	equ	0xFE2
 18930                           fsr1l	equ	0xFE1
 18931                           indf2	equ	0xFDF
 18932                           postinc2	equ	0xFDE
 18933                           postdec2	equ	0xFDD
 18934                           plusw2	equ	0xFDB
 18935                           fsr2h	equ	0xFDA
 18936                           fsr2l	equ	0xFD9
 18937                           status	equ	0xFD8
 18938                           
 18939 ;; *************** function _LCD_Init *****************
 18940 ;; Defined at:
 18941 ;;		line 172 in file "Library/LCD.c"
 18942 ;; Parameters:    Size  Location     Type
 18943 ;;		None
 18944 ;; Auto vars:     Size  Location     Type
 18945 ;;  i               2   55[BANK0 ] unsigned short 
 18946 ;; Return value:  Size  Location     Type
 18947 ;;                  1    wreg      void 
 18948 ;; Registers used:
 18949 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18950 ;; Tracked objects:
 18951 ;;		On entry : 0/0
 18952 ;;		On exit  : 0/0
 18953 ;;		Unchanged: 0/0
 18954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18958 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18959 ;;Total ram usage:        4 bytes
 18960 ;; Hardware stack levels used:    1
 18961 ;; Hardware stack levels required when called:   15
 18962 ;; This function calls:
 18963 ;;		_Configure_GPIOs
 18964 ;;		_LCD_Fill
 18965 ;;		_LCD_Write
 18966 ;;		_Set_Rotation
 18967 ;;		_delay_ms
 18968 ;; This function is called by:
 18969 ;;		_init
 18970 ;; This function uses a non-reentrant model
 18971 ;;
 18972                           
 18973                           	psect	text81
 18974  01335A                     __ptext81:
 18975                           	opt stack 0
 18976  01335A                     _LCD_Init:
 18977                           	opt stack 14
 18978                           
 18979                           ;LCD.c: 174: UINT16 i;
 18980                           ;LCD.c: 175: Configure_GPIOs();
 18981                           
 18982                           ; BSR set to: 0
 18983                           ;incstack = 0
 18984  01335A  EC81  F0AD         	call	_Configure_GPIOs	;wreg free
 18985                           
 18986                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 18987  01335E  0E00               	movlw	0
 18988  013360  0100               	movlb	0	; () banked
 18989  013362  6FF1               	movwf	(LCD_Init@i+1)& (0+255),b
 18990  013364  0E00               	movlw	0
 18991  013366  6FF0               	movwf	LCD_Init@i& (0+255),b
 18992                           
 18993                           ; BSR set to: 0
 18994  013368  0100               	movlb	0	; () banked
 18995  01336A  51F1               	movf	(LCD_Init@i+1)& (0+255),w,b
 18996  01336C  E106               	bnz	u11610
 18997  01336E  0E59               	movlw	89
 18998  013370  0100               	movlb	0	; () banked
 18999  013372  5DF0               	subwf	LCD_Init@i& (0+255),w,b
 19000  013374  B0D8               	btfsc	status,0,c
 19001  013376  D08B               	goto	u11650
 19002  013378  D001               	goto	l85
 19003  01337A                     u11610:
 19004                           
 19005                           ; BSR set to: 0
 19006  01337A  D089               	goto	u11650
 19007  01337C                     l85:
 19008                           
 19009                           ; BSR set to: 0
 19010                           ;LCD.c: 178: {
 19011                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19012                           
 19013                           ; BSR set to: 0
 19014  01337C  90D8               	bcf	status,0,c
 19015  01337E  0100               	movlb	0	; () banked
 19016  013380  35F0               	rlcf	LCD_Init@i& (0+255),w,b
 19017  013382  6EF6               	movwf	tblptrl,c
 19018  013384  0100               	movlb	0	; () banked
 19019  013386  35F1               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19020  013388  6EF7               	movwf	tblptrh,c
 19021  01338A  0E33               	movlw	low _InitList
 19022  01338C  26F6               	addwf	tblptrl,f,c
 19023  01338E  0EFC               	movlw	high _InitList
 19024  013390  22F7               	addwfc	tblptrh,f,c
 19025  013392                     	if	1	;There are 3 active tblptr bytes
 19026  013392  6AF8               	clrf	tblptru,c
 19027  013394  0E00               	movlw	low (__mediumconst shr (0+16))
 19028  013396  22F8               	addwfc	tblptru,f,c
 19029  013398                     	endif
 19030  013398  0009               	tblrd		*+
 19031  01339A  0E80               	movlw	128
 19032  01339C  18F5               	xorwf	tablat,w,c
 19033  01339E  0009               	tblrd		*+
 19034  0133A0  10F5               	iorwf	tablat,w,c
 19035  0133A2  A4D8               	btfss	status,2,c
 19036  0133A4  D022               	goto	l87
 19037                           
 19038                           ; BSR set to: 0
 19039  0133A6  0100               	movlb	0	; () banked
 19040  0133A8  51F1               	movf	(LCD_Init@i+1)& (0+255),w,b
 19041  0133AA  E11F               	bnz	l14711
 19042  0133AC  0E58               	movlw	88
 19043  0133AE  0100               	movlb	0	; () banked
 19044  0133B0  5DF0               	subwf	LCD_Init@i& (0+255),w,b
 19045  0133B2  B0D8               	btfsc	status,0,c
 19046  0133B4  D01A               	goto	l87
 19047                           
 19048                           ; BSR set to: 0
 19049                           ;LCD.c: 180: delay_ms(InitList[++i]);
 19050  0133B6  0100               	movlb	0	; () banked
 19051  0133B8  4BF0               	infsnz	LCD_Init@i& (0+255),f,b
 19052  0133BA  2BF1               	incf	(LCD_Init@i+1)& (0+255),f,b
 19053  0133BC  90D8               	bcf	status,0,c
 19054  0133BE  0100               	movlb	0	; () banked
 19055  0133C0  35F0               	rlcf	LCD_Init@i& (0+255),w,b
 19056  0133C2  6EF6               	movwf	tblptrl,c
 19057  0133C4  0100               	movlb	0	; () banked
 19058  0133C6  35F1               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19059  0133C8  6EF7               	movwf	tblptrh,c
 19060  0133CA  0E33               	movlw	low _InitList
 19061  0133CC  26F6               	addwf	tblptrl,f,c
 19062  0133CE  0EFC               	movlw	high _InitList
 19063  0133D0  22F7               	addwfc	tblptrh,f,c
 19064  0133D2                     	if	1	;There are 3 active tblptr bytes
 19065  0133D2  6AF8               	clrf	tblptru,c
 19066  0133D4  0E00               	movlw	low (__mediumconst shr (0+16))
 19067  0133D6  22F8               	addwfc	tblptru,f,c
 19068  0133D8                     	endif
 19069  0133D8  0009               	tblrd		*+
 19070  0133DA  CFF5 F0B9          	movff	tablat,delay_ms@ms
 19071  0133DE  000A               	tblrd		*-
 19072  0133E0  CFF5 F0BA          	movff	tablat,delay_ms@ms+1
 19073  0133E4  EC5A  F0AE         	call	_delay_ms	;wreg free
 19074  0133E8  D04B               	goto	l90
 19075  0133EA                     l87:
 19076  0133EA                     l14711:
 19077                           
 19078                           ;LCD.c: 181: else
 19079                           ;LCD.c: 182: {
 19080                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 19081  0133EA  90D8               	bcf	status,0,c
 19082  0133EC  0100               	movlb	0	; () banked
 19083  0133EE  35F0               	rlcf	LCD_Init@i& (0+255),w,b
 19084  0133F0  6EF6               	movwf	tblptrl,c
 19085  0133F2  0100               	movlb	0	; () banked
 19086  0133F4  35F1               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19087  0133F6  6EF7               	movwf	tblptrh,c
 19088  0133F8  0E33               	movlw	low _InitList
 19089  0133FA  26F6               	addwf	tblptrl,f,c
 19090  0133FC  0EFC               	movlw	high _InitList
 19091  0133FE  22F7               	addwfc	tblptrh,f,c
 19092  013400                     	if	1	;There are 3 active tblptr bytes
 19093  013400  6AF8               	clrf	tblptru,c
 19094  013402  0E00               	movlw	low (__mediumconst shr (0+16))
 19095  013404  22F8               	addwfc	tblptru,f,c
 19096  013406                     	endif
 19097  013406  0009               	tblrd		*+
 19098  013408  0E00               	movlw	0
 19099  01340A  5EF5               	subwf	tablat,f,c
 19100  01340C  0009               	tblrd		*+
 19101  01340E  0E01               	movlw	1
 19102  013410  5AF5               	subwfb	tablat,f,c
 19103  013412  A0D8               	btfss	status,0,c
 19104  013414  D020               	goto	l89
 19105                           
 19106                           ; BSR set to: 0
 19107  013416  0E00               	movlw	0
 19108  013418  0100               	movlb	0	; () banked
 19109  01341A  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19110  01341C  90D8               	bcf	status,0,c
 19111  01341E  0100               	movlb	0	; () banked
 19112  013420  35F0               	rlcf	LCD_Init@i& (0+255),w,b
 19113  013422  6EF6               	movwf	tblptrl,c
 19114  013424  0100               	movlb	0	; () banked
 19115  013426  35F1               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19116  013428  6EF7               	movwf	tblptrh,c
 19117  01342A  0E33               	movlw	low _InitList
 19118  01342C  26F6               	addwf	tblptrl,f,c
 19119  01342E  0EFC               	movlw	high _InitList
 19120  013430  22F7               	addwfc	tblptrh,f,c
 19121  013432                     	if	1	;There are 3 active tblptr bytes
 19122  013432  6AF8               	clrf	tblptru,c
 19123  013434  0E00               	movlw	low (__mediumconst shr (0+16))
 19124  013436  22F8               	addwfc	tblptru,f,c
 19125  013438                     	endif
 19126  013438  0009               	tblrd		*+
 19127  01343A  CFF5 F0EE          	movff	tablat,??_LCD_Init
 19128  01343E  0009               	tblrd		*+
 19129  013440  CFF5 F0EF          	movff	tablat,??_LCD_Init+1
 19130  013444  C0EF  F0EE         	movff	??_LCD_Init+1,??_LCD_Init
 19131  013448  0100               	movlb	0	; () banked
 19132  01344A  6BEF               	clrf	(??_LCD_Init+1)& (0+255),b
 19133  01344C  0100               	movlb	0	; () banked
 19134  01344E  51EE               	movf	??_LCD_Init& (0+255),w,b
 19135  013450  ECD4  F0B4         	call	_LCD_Write
 19136  013454  D015               	goto	l90
 19137  013456                     l89:
 19138                           
 19139                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 19140  013456  0E01               	movlw	1
 19141  013458  0100               	movlb	0	; () banked
 19142  01345A  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19143  01345C  90D8               	bcf	status,0,c
 19144  01345E  0100               	movlb	0	; () banked
 19145  013460  35F0               	rlcf	LCD_Init@i& (0+255),w,b
 19146  013462  6EF6               	movwf	tblptrl,c
 19147  013464  0100               	movlb	0	; () banked
 19148  013466  35F1               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19149  013468  6EF7               	movwf	tblptrh,c
 19150  01346A  0E33               	movlw	low _InitList
 19151  01346C  26F6               	addwf	tblptrl,f,c
 19152  01346E  0EFC               	movlw	high _InitList
 19153  013470  22F7               	addwfc	tblptrh,f,c
 19154  013472                     	if	1	;There are 3 active tblptr bytes
 19155  013472  6AF8               	clrf	tblptru,c
 19156  013474  0E00               	movlw	low (__mediumconst shr (0+16))
 19157  013476  22F8               	addwfc	tblptru,f,c
 19158  013478                     	endif
 19159  013478  0008               	tblrd		*
 19160  01347A  50F5               	movf	tablat,w,c
 19161  01347C  ECD4  F0B4         	call	_LCD_Write
 19162  013480                     l90:
 19163  013480  0100               	movlb	0	; () banked
 19164  013482  4BF0               	infsnz	LCD_Init@i& (0+255),f,b
 19165  013484  2BF1               	incf	(LCD_Init@i+1)& (0+255),f,b
 19166                           
 19167                           ; BSR set to: 0
 19168  013486  0100               	movlb	0	; () banked
 19169  013488  51F1               	movf	(LCD_Init@i+1)& (0+255),w,b
 19170  01348A  E101               	bnz	l14721
 19171  01348C  D770               	goto	L12
 19172  01348E                     u11650:
 19173  01348E                     l14721:
 19174                           
 19175                           ; BSR set to: 0
 19176                           ;LCD.c: 185: }
 19177                           ;LCD.c: 186: }
 19178                           ;LCD.c: 187: delay_ms(100);
 19179  01348E  0E00               	movlw	0
 19180  013490  0100               	movlb	0	; () banked
 19181  013492  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 19182  013494  0E64               	movlw	100
 19183  013496  6FB9               	movwf	delay_ms@ms& (0+255),b
 19184  013498  EC5A  F0AE         	call	_delay_ms	;wreg free
 19185                           
 19186                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 19187  01349C  0E00               	movlw	0
 19188  01349E  0100               	movlb	0	; () banked
 19189  0134A0  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19190  0134A2  0E29               	movlw	41
 19191  0134A4  ECD4  F0B4         	call	_LCD_Write
 19192                           
 19193                           ;LCD.c: 189: Set_Rotation(1);
 19194  0134A8  0E01               	movlw	1
 19195  0134AA  EC79  F0A9         	call	_Set_Rotation
 19196                           
 19197                           ;LCD.c: 191: delay_ms(100);
 19198  0134AE  0E00               	movlw	0
 19199  0134B0  0100               	movlb	0	; () banked
 19200  0134B2  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 19201  0134B4  0E64               	movlw	100
 19202  0134B6  6FB9               	movwf	delay_ms@ms& (0+255),b
 19203  0134B8  EC5A  F0AE         	call	_delay_ms	;wreg free
 19204                           
 19205                           ;LCD.c: 192: LCD_Fill(0x0000);
 19206  0134BC  0E00               	movlw	0
 19207  0134BE  0100               	movlb	0	; () banked
 19208  0134C0  6FC3               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 19209  0134C2  0E00               	movlw	0
 19210  0134C4  6FC2               	movwf	LCD_Fill@pColour& (0+255),b
 19211  0134C6  EC45  F0B0         	call	_LCD_Fill	;wreg free
 19212  0134CA  0012               	return		;funcret
 19213  0134CC                     __end_of_LCD_Init:
 19214                           	opt stack 0
 19215                           tosu	equ	0xFFF
 19216                           tosh	equ	0xFFE
 19217                           tosl	equ	0xFFD
 19218                           pclath	equ	0xFFA
 19219                           tblptru	equ	0xFF8
 19220                           tblptrh	equ	0xFF7
 19221                           tblptrl	equ	0xFF6
 19222                           tablat	equ	0xFF5
 19223                           prodh	equ	0xFF4
 19224                           prodl	equ	0xFF3
 19225                           intcon	equ	0xFF2
 19226                           postinc0	equ	0xFEE
 19227                           wreg	equ	0xFE8
 19228                           indf1	equ	0xFE7
 19229                           postdec1	equ	0xFE5
 19230                           fsr1h	equ	0xFE2
 19231                           fsr1l	equ	0xFE1
 19232                           indf2	equ	0xFDF
 19233                           postinc2	equ	0xFDE
 19234                           postdec2	equ	0xFDD
 19235                           plusw2	equ	0xFDB
 19236                           fsr2h	equ	0xFDA
 19237                           fsr2l	equ	0xFD9
 19238                           status	equ	0xFD8
 19239                           
 19240 ;; *************** function _Set_Rotation *****************
 19241 ;; Defined at:
 19242 ;;		line 248 in file "Library/LCD.c"
 19243 ;; Parameters:    Size  Location     Type
 19244 ;;  m               1    wreg     unsigned char 
 19245 ;; Auto vars:     Size  Location     Type
 19246 ;;  m               1    5[BANK0 ] unsigned char 
 19247 ;;  rotation        1    6[BANK0 ] unsigned char 
 19248 ;; Return value:  Size  Location     Type
 19249 ;;                  1    wreg      void 
 19250 ;; Registers used:
 19251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19252 ;; Tracked objects:
 19253 ;;		On entry : 0/0
 19254 ;;		On exit  : 0/0
 19255 ;;		Unchanged: 0/0
 19256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19261 ;;Total ram usage:        2 bytes
 19262 ;; Hardware stack levels used:    1
 19263 ;; Hardware stack levels required when called:    9
 19264 ;; This function calls:
 19265 ;;		_LCD_Write
 19266 ;; This function is called by:
 19267 ;;		_LCD_Init
 19268 ;; This function uses a non-reentrant model
 19269 ;;
 19270                           
 19271                           	psect	text82
 19272  0152F2                     __ptext82:
 19273                           	opt stack 0
 19274  0152F2                     _Set_Rotation:
 19275                           	opt stack 19
 19276                           
 19277                           ;incstack = 0
 19278                           ;Set_Rotation@m stored from wreg
 19279  0152F2  0100               	movlb	0	; () banked
 19280  0152F4  6FBE               	movwf	Set_Rotation@m& (0+255),b
 19281                           
 19282                           ;LCD.c: 250: UINT8 rotation = 0x00;
 19283  0152F6  0E00               	movlw	0
 19284  0152F8  0100               	movlb	0	; () banked
 19285  0152FA  6FBF               	movwf	Set_Rotation@rotation& (0+255),b
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 19289  0152FC  0E00               	movlw	0
 19290  0152FE  0100               	movlb	0	; () banked
 19291  015300  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19292  015302  0E36               	movlw	54
 19293  015304  ECD4  F0B4         	call	_LCD_Write
 19294                           
 19295                           ;LCD.c: 253: rotation = (m % 4);
 19296  015308  0100               	movlb	0	; () banked
 19297  01530A  51BE               	movf	Set_Rotation@m& (0+255),w,b
 19298  01530C  0B03               	andlw	3
 19299  01530E  0100               	movlb	0	; () banked
 19300  015310  6FBF               	movwf	Set_Rotation@rotation& (0+255),b
 19301                           
 19302                           ;LCD.c: 255: switch(rotation)
 19303  015312  D02C               	goto	l117
 19304  015314                     
 19305                           ; BSR set to: 0
 19306                           ;LCD.c: 258: {
 19307                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 19308                           
 19309                           ; BSR set to: 0
 19310  015314  0E01               	movlw	1
 19311  015316  0100               	movlb	0	; () banked
 19312  015318  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19313  01531A  0EC8               	movlw	200
 19314  01531C  ECD4  F0B4         	call	_LCD_Write
 19315                           
 19316                           ;LCD.c: 260: w = 128;
 19317  015320  0E80               	movlw	128
 19318  015322  6E50               	movwf	_w,c
 19319                           
 19320                           ;LCD.c: 261: l = 128;
 19321  015324  0E80               	movlw	128
 19322  015326  6E4F               	movwf	_l,c
 19323                           
 19324                           ;LCD.c: 262: break;
 19325  015328  0012               	return	
 19326  01532A                     
 19327                           ;LCD.c: 265: {
 19328                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 19329  01532A  0E01               	movlw	1
 19330  01532C  0100               	movlb	0	; () banked
 19331  01532E  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19332  015330  0EA8               	movlw	168
 19333  015332  ECD4  F0B4         	call	_LCD_Write
 19334                           
 19335                           ;LCD.c: 267: w = 128;
 19336  015336  0E80               	movlw	128
 19337  015338  6E50               	movwf	_w,c
 19338                           
 19339                           ;LCD.c: 268: l = 128;
 19340  01533A  0E80               	movlw	128
 19341  01533C  6E4F               	movwf	_l,c
 19342                           
 19343                           ;LCD.c: 269: break;
 19344  01533E  0012               	return	
 19345  015340                     
 19346                           ;LCD.c: 272: {
 19347                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 19348  015340  0E01               	movlw	1
 19349  015342  0100               	movlb	0	; () banked
 19350  015344  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19351  015346  0E08               	movlw	8
 19352  015348  ECD4  F0B4         	call	_LCD_Write
 19353                           
 19354                           ;LCD.c: 274: w = 128;
 19355  01534C  0E80               	movlw	128
 19356  01534E  6E50               	movwf	_w,c
 19357                           
 19358                           ;LCD.c: 275: l = 128;
 19359  015350  0E80               	movlw	128
 19360  015352  6E4F               	movwf	_l,c
 19361                           
 19362                           ;LCD.c: 276: break;
 19363  015354  0012               	return	
 19364  015356                     
 19365                           ;LCD.c: 279: {
 19366                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 19367  015356  0E01               	movlw	1
 19368  015358  0100               	movlb	0	; () banked
 19369  01535A  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19370  01535C  0E68               	movlw	104
 19371  01535E  ECD4  F0B4         	call	_LCD_Write
 19372                           
 19373                           ;LCD.c: 281: w = 128;
 19374  015362  0E80               	movlw	128
 19375  015364  6E50               	movwf	_w,c
 19376                           
 19377                           ;LCD.c: 282: l = 128;
 19378  015366  0E80               	movlw	128
 19379  015368  6E4F               	movwf	_l,c
 19380                           
 19381                           ;LCD.c: 284: }
 19382                           ;LCD.c: 285: }
 19383                           
 19384                           ;LCD.c: 283: break;
 19385  01536A  0012               	return	
 19386  01536C                     l117:
 19387  01536C  0100               	movlb	0	; () banked
 19388  01536E  51BF               	movf	Set_Rotation@rotation& (0+255),w,b
 19389                           
 19390                           ; Switch size 1, requested type "space"
 19391                           ; Number of cases is 4, Range of values is 0 to 3
 19392                           ; switch strategies available:
 19393                           ; Name         Instructions Cycles
 19394                           ; simple_byte           13     7 (average)
 19395                           ;	Chosen strategy is simple_byte
 19396  015370  0A00               	xorlw	0	; case 0
 19397  015372  B4D8               	btfsc	status,2,c
 19398  015374  D7CF               	goto	l118
 19399  015376  0A01               	xorlw	1	; case 1
 19400  015378  B4D8               	btfsc	status,2,c
 19401  01537A  D7D7               	goto	l120
 19402  01537C  0A03               	xorlw	3	; case 2
 19403  01537E  B4D8               	btfsc	status,2,c
 19404  015380  D7DF               	goto	l121
 19405  015382  0A01               	xorlw	1	; case 3
 19406  015384  A4D8               	btfss	status,2,c
 19407  015386  0012               	return	
 19408  015388  D7E6               	goto	l122
 19409  01538A                     __end_of_Set_Rotation:
 19410                           	opt stack 0
 19411                           tosu	equ	0xFFF
 19412                           tosh	equ	0xFFE
 19413                           tosl	equ	0xFFD
 19414                           pclath	equ	0xFFA
 19415                           tblptru	equ	0xFF8
 19416                           tblptrh	equ	0xFF7
 19417                           tblptrl	equ	0xFF6
 19418                           tablat	equ	0xFF5
 19419                           prodh	equ	0xFF4
 19420                           prodl	equ	0xFF3
 19421                           intcon	equ	0xFF2
 19422                           postinc0	equ	0xFEE
 19423                           wreg	equ	0xFE8
 19424                           indf1	equ	0xFE7
 19425                           postdec1	equ	0xFE5
 19426                           fsr1h	equ	0xFE2
 19427                           fsr1l	equ	0xFE1
 19428                           indf2	equ	0xFDF
 19429                           postinc2	equ	0xFDE
 19430                           postdec2	equ	0xFDD
 19431                           plusw2	equ	0xFDB
 19432                           fsr2h	equ	0xFDA
 19433                           fsr2l	equ	0xFD9
 19434                           status	equ	0xFD8
 19435                           
 19436 ;; *************** function _LCD_Fill *****************
 19437 ;; Defined at:
 19438 ;;		line 287 in file "Library/LCD.c"
 19439 ;; Parameters:    Size  Location     Type
 19440 ;;  pColour         2    9[BANK0 ] unsigned short 
 19441 ;; Auto vars:     Size  Location     Type
 19442 ;;  j               1   12[BANK0 ] unsigned char 
 19443 ;;  i               1   11[BANK0 ] unsigned char 
 19444 ;; Return value:  Size  Location     Type
 19445 ;;                  1    wreg      void 
 19446 ;; Registers used:
 19447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19448 ;; Tracked objects:
 19449 ;;		On entry : 0/0
 19450 ;;		On exit  : 0/0
 19451 ;;		Unchanged: 0/0
 19452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19453 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19456 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19457 ;;Total ram usage:        4 bytes
 19458 ;; Hardware stack levels used:    1
 19459 ;; Hardware stack levels required when called:   10
 19460 ;; This function calls:
 19461 ;;		_LCD_Word_Write
 19462 ;;		_Set_Addr_Window
 19463 ;; This function is called by:
 19464 ;;		_LCD_Init
 19465 ;; This function uses a non-reentrant model
 19466 ;;
 19467                           
 19468                           	psect	text83
 19469  01608A                     __ptext83:
 19470                           	opt stack 0
 19471  01608A                     _LCD_Fill:
 19472                           	opt stack 18
 19473                           
 19474                           ;LCD.c: 296: UINT8 i = 0x00;
 19475                           
 19476                           ;incstack = 0
 19477  01608A  0E00               	movlw	0
 19478  01608C  0100               	movlb	0	; () banked
 19479  01608E  6FC4               	movwf	LCD_Fill@i& (0+255),b
 19480                           
 19481                           ;LCD.c: 297: UINT8 j = 0x00;
 19482  016090  0E00               	movlw	0
 19483  016092  0100               	movlb	0	; () banked
 19484  016094  6FC5               	movwf	LCD_Fill@j& (0+255),b
 19485                           
 19486                           ; BSR set to: 0
 19487                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 19488  016096  0E00               	movlw	0
 19489  016098  0100               	movlb	0	; () banked
 19490  01609A  6FBE               	movwf	Set_Addr_Window@ys& (0+255),b
 19491  01609C  0450               	decf	_w,w,c
 19492  01609E  0100               	movlb	0	; () banked
 19493  0160A0  6FBF               	movwf	Set_Addr_Window@xe& (0+255),b
 19494  0160A2  044F               	decf	_l,w,c
 19495  0160A4  0100               	movlb	0	; () banked
 19496  0160A6  6FC0               	movwf	Set_Addr_Window@ye& (0+255),b
 19497  0160A8  0E00               	movlw	0
 19498  0160AA  EC43  F0A6         	call	_Set_Addr_Window
 19499                           
 19500                           ;LCD.c: 299: for (j = l; j > 0; j--)
 19501  0160AE  C04F  F0C5         	movff	_l,LCD_Fill@j
 19502  0160B2                     l14369:
 19503  0160B2  0100               	movlb	0	; () banked
 19504  0160B4  51C5               	movf	LCD_Fill@j& (0+255),w,b
 19505  0160B6  0100               	movlb	0	; () banked
 19506  0160B8  B4D8               	btfsc	status,2,c
 19507  0160BA  0012               	return	
 19508                           
 19509                           ; BSR set to: 0
 19510                           ;LCD.c: 300: for (i = w; i > 0; i--)
 19511                           
 19512                           ; BSR set to: 0
 19513  0160BC  C050  F0C4         	movff	_w,LCD_Fill@i
 19514  0160C0                     l14373:
 19515                           
 19516                           ; BSR set to: 0
 19517  0160C0  0100               	movlb	0	; () banked
 19518  0160C2  51C4               	movf	LCD_Fill@i& (0+255),w,b
 19519  0160C4  0100               	movlb	0	; () banked
 19520  0160C6  B4D8               	btfsc	status,2,c
 19521  0160C8  D009               	goto	u11230
 19522                           
 19523                           ; BSR set to: 0
 19524                           ;LCD.c: 301: LCD_Word_Write(pColour);
 19525                           
 19526                           ; BSR set to: 0
 19527                           
 19528                           ; BSR set to: 0
 19529  0160CA  C0C2  F0BE         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 19530  0160CE  C0C3  F0BF         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 19531  0160D2  EC35  F0B5         	call	_LCD_Word_Write	;wreg free
 19532  0160D6  0100               	movlb	0	; () banked
 19533  0160D8  07C4               	decf	LCD_Fill@i& (0+255),f,b
 19534  0160DA  D7F2               	goto	l14373
 19535  0160DC                     u11230:
 19536                           
 19537                           ; BSR set to: 0
 19538                           
 19539                           ; BSR set to: 0
 19540  0160DC  0100               	movlb	0	; () banked
 19541  0160DE  07C5               	decf	LCD_Fill@j& (0+255),f,b
 19542  0160E0  D7E8               	goto	l14369
 19543  0160E2                     __end_of_LCD_Fill:
 19544                           	opt stack 0
 19545                           tosu	equ	0xFFF
 19546                           tosh	equ	0xFFE
 19547                           tosl	equ	0xFFD
 19548                           pclath	equ	0xFFA
 19549                           tblptru	equ	0xFF8
 19550                           tblptrh	equ	0xFF7
 19551                           tblptrl	equ	0xFF6
 19552                           tablat	equ	0xFF5
 19553                           prodh	equ	0xFF4
 19554                           prodl	equ	0xFF3
 19555                           intcon	equ	0xFF2
 19556                           postinc0	equ	0xFEE
 19557                           wreg	equ	0xFE8
 19558                           indf1	equ	0xFE7
 19559                           postdec1	equ	0xFE5
 19560                           fsr1h	equ	0xFE2
 19561                           fsr1l	equ	0xFE1
 19562                           indf2	equ	0xFDF
 19563                           postinc2	equ	0xFDE
 19564                           postdec2	equ	0xFDD
 19565                           plusw2	equ	0xFDB
 19566                           fsr2h	equ	0xFDA
 19567                           fsr2l	equ	0xFD9
 19568                           status	equ	0xFD8
 19569                           
 19570 ;; *************** function _Set_Addr_Window *****************
 19571 ;; Defined at:
 19572 ;;		line 214 in file "Library/LCD.c"
 19573 ;; Parameters:    Size  Location     Type
 19574 ;;  xs              1    wreg     unsigned char 
 19575 ;;  ys              1    5[BANK0 ] unsigned char 
 19576 ;;  xe              1    6[BANK0 ] unsigned char 
 19577 ;;  ye              1    7[BANK0 ] unsigned char 
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;  xs              1    8[BANK0 ] unsigned char 
 19580 ;; Return value:  Size  Location     Type
 19581 ;;                  1    wreg      void 
 19582 ;; Registers used:
 19583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19589 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19593 ;;Total ram usage:        4 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:    9
 19596 ;; This function calls:
 19597 ;;		_LCD_Write
 19598 ;; This function is called by:
 19599 ;;		_LCD_Fill
 19600 ;;		_LCD_FillRectangle
 19601 ;;		_LCD_DrawField
 19602 ;;		_RAM_Address_Set
 19603 ;;		_LCD_DrawPixel
 19604 ;; This function uses a non-reentrant model
 19605 ;;
 19606                           
 19607                           	psect	text84
 19608  014C86                     __ptext84:
 19609                           	opt stack 0
 19610  014C86                     _Set_Addr_Window:
 19611                           	opt stack 17
 19612                           
 19613                           ; BSR set to: 0
 19614                           ;incstack = 0
 19615                           ;Set_Addr_Window@xs stored from wreg
 19616  014C86  0100               	movlb	0	; () banked
 19617  014C88  6FC1               	movwf	Set_Addr_Window@xs& (0+255),b
 19618                           
 19619                           ;LCD.c: 216: ys+=2;
 19620  014C8A  0E02               	movlw	2
 19621  014C8C  0100               	movlb	0	; () banked
 19622  014C8E  27BE               	addwf	Set_Addr_Window@ys& (0+255),f,b
 19623                           
 19624                           ;LCD.c: 217: ye+=2;
 19625  014C90  0E02               	movlw	2
 19626  014C92  0100               	movlb	0	; () banked
 19627  014C94  27C0               	addwf	Set_Addr_Window@ye& (0+255),f,b
 19628                           
 19629                           ;LCD.c: 218: xs+=3;
 19630  014C96  0E03               	movlw	3
 19631  014C98  0100               	movlb	0	; () banked
 19632  014C9A  27C1               	addwf	Set_Addr_Window@xs& (0+255),f,b
 19633                           
 19634                           ;LCD.c: 219: xe+=3;
 19635  014C9C  0E03               	movlw	3
 19636  014C9E  0100               	movlb	0	; () banked
 19637  014CA0  27BF               	addwf	Set_Addr_Window@xe& (0+255),f,b
 19638                           
 19639                           ; BSR set to: 0
 19640                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 19641  014CA2  0E00               	movlw	0
 19642  014CA4  0100               	movlb	0	; () banked
 19643  014CA6  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19644  014CA8  0E2A               	movlw	42
 19645  014CAA  ECD4  F0B4         	call	_LCD_Write
 19646                           
 19647                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 19648  014CAE  0E01               	movlw	1
 19649  014CB0  0100               	movlb	0	; () banked
 19650  014CB2  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19651  014CB4  0E00               	movlw	0
 19652  014CB6  ECD4  F0B4         	call	_LCD_Write
 19653                           
 19654                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 19655  014CBA  0E01               	movlw	1
 19656  014CBC  0100               	movlb	0	; () banked
 19657  014CBE  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19658  014CC0  0100               	movlb	0	; () banked
 19659  014CC2  51C1               	movf	Set_Addr_Window@xs& (0+255),w,b
 19660  014CC4  ECD4  F0B4         	call	_LCD_Write
 19661                           
 19662                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 19663  014CC8  0E01               	movlw	1
 19664  014CCA  0100               	movlb	0	; () banked
 19665  014CCC  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19666  014CCE  0E00               	movlw	0
 19667  014CD0  ECD4  F0B4         	call	_LCD_Write
 19668                           
 19669                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 19670  014CD4  0E01               	movlw	1
 19671  014CD6  0100               	movlb	0	; () banked
 19672  014CD8  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19673  014CDA  0100               	movlb	0	; () banked
 19674  014CDC  51BF               	movf	Set_Addr_Window@xe& (0+255),w,b
 19675  014CDE  ECD4  F0B4         	call	_LCD_Write
 19676                           
 19677                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 19678  014CE2  0E00               	movlw	0
 19679  014CE4  0100               	movlb	0	; () banked
 19680  014CE6  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19681  014CE8  0E2B               	movlw	43
 19682  014CEA  ECD4  F0B4         	call	_LCD_Write
 19683                           
 19684                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 19685  014CEE  0E01               	movlw	1
 19686  014CF0  0100               	movlb	0	; () banked
 19687  014CF2  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19688  014CF4  0E00               	movlw	0
 19689  014CF6  ECD4  F0B4         	call	_LCD_Write
 19690                           
 19691                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 19692  014CFA  0E01               	movlw	1
 19693  014CFC  0100               	movlb	0	; () banked
 19694  014CFE  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19695  014D00  0100               	movlb	0	; () banked
 19696  014D02  51BE               	movf	Set_Addr_Window@ys& (0+255),w,b
 19697  014D04  ECD4  F0B4         	call	_LCD_Write
 19698                           
 19699                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19700  014D08  0E01               	movlw	1
 19701  014D0A  0100               	movlb	0	; () banked
 19702  014D0C  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19703  014D0E  0E00               	movlw	0
 19704  014D10  ECD4  F0B4         	call	_LCD_Write
 19705                           
 19706                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 19707  014D14  0E01               	movlw	1
 19708  014D16  0100               	movlb	0	; () banked
 19709  014D18  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19710  014D1A  0100               	movlb	0	; () banked
 19711  014D1C  51C0               	movf	Set_Addr_Window@ye& (0+255),w,b
 19712  014D1E  ECD4  F0B4         	call	_LCD_Write
 19713                           
 19714                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 19715  014D22  0E00               	movlw	0
 19716  014D24  0100               	movlb	0	; () banked
 19717  014D26  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19718  014D28  0E2C               	movlw	44
 19719  014D2A  ECD4  F0B4         	call	_LCD_Write
 19720  014D2E  0012               	return		;funcret
 19721  014D30                     __end_of_Set_Addr_Window:
 19722                           	opt stack 0
 19723                           tosu	equ	0xFFF
 19724                           tosh	equ	0xFFE
 19725                           tosl	equ	0xFFD
 19726                           pclath	equ	0xFFA
 19727                           tblptru	equ	0xFF8
 19728                           tblptrh	equ	0xFF7
 19729                           tblptrl	equ	0xFF6
 19730                           tablat	equ	0xFF5
 19731                           prodh	equ	0xFF4
 19732                           prodl	equ	0xFF3
 19733                           intcon	equ	0xFF2
 19734                           postinc0	equ	0xFEE
 19735                           wreg	equ	0xFE8
 19736                           indf1	equ	0xFE7
 19737                           postdec1	equ	0xFE5
 19738                           fsr1h	equ	0xFE2
 19739                           fsr1l	equ	0xFE1
 19740                           indf2	equ	0xFDF
 19741                           postinc2	equ	0xFDE
 19742                           postdec2	equ	0xFDD
 19743                           plusw2	equ	0xFDB
 19744                           fsr2h	equ	0xFDA
 19745                           fsr2l	equ	0xFD9
 19746                           status	equ	0xFD8
 19747                           
 19748 ;; *************** function _LCD_Word_Write *****************
 19749 ;; Defined at:
 19750 ;;		line 198 in file "Library/LCD.c"
 19751 ;; Parameters:    Size  Location     Type
 19752 ;;  value           2    5[BANK0 ] unsigned short 
 19753 ;; Auto vars:     Size  Location     Type
 19754 ;;		None
 19755 ;; Return value:  Size  Location     Type
 19756 ;;                  1    wreg      void 
 19757 ;; Registers used:
 19758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19759 ;; Tracked objects:
 19760 ;;		On entry : 0/0
 19761 ;;		On exit  : 0/0
 19762 ;;		Unchanged: 0/0
 19763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19764 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19767 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19768 ;;Total ram usage:        2 bytes
 19769 ;; Hardware stack levels used:    1
 19770 ;; Hardware stack levels required when called:    9
 19771 ;; This function calls:
 19772 ;;		_LCD_Write
 19773 ;; This function is called by:
 19774 ;;		_LCD_Fill
 19775 ;;		_LCD_FillRectangle
 19776 ;;		_LCD_DrawField
 19777 ;;		_LCD_DrawPixel
 19778 ;; This function uses a non-reentrant model
 19779 ;;
 19780                           
 19781                           	psect	text85
 19782  016A6A                     __ptext85:
 19783                           	opt stack 0
 19784  016A6A                     _LCD_Word_Write:
 19785                           	opt stack 17
 19786                           
 19787                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 19788                           
 19789                           ;incstack = 0
 19790  016A6A  0E01               	movlw	1
 19791  016A6C  0100               	movlb	0	; () banked
 19792  016A6E  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19793  016A70  0100               	movlb	0	; () banked
 19794  016A72  51BF               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 19795  016A74  ECD4  F0B4         	call	_LCD_Write
 19796                           
 19797                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 19798  016A78  0E01               	movlw	1
 19799  016A7A  0100               	movlb	0	; () banked
 19800  016A7C  6FBC               	movwf	LCD_Write@mode& (0+255),b
 19801  016A7E  0100               	movlb	0	; () banked
 19802  016A80  51BE               	movf	LCD_Word_Write@value& (0+255),w,b
 19803  016A82  ECD4  F0B4         	call	_LCD_Write
 19804  016A86  0012               	return		;funcret
 19805  016A88                     __end_of_LCD_Word_Write:
 19806                           	opt stack 0
 19807                           tosu	equ	0xFFF
 19808                           tosh	equ	0xFFE
 19809                           tosl	equ	0xFFD
 19810                           pclath	equ	0xFFA
 19811                           tblptru	equ	0xFF8
 19812                           tblptrh	equ	0xFF7
 19813                           tblptrl	equ	0xFF6
 19814                           tablat	equ	0xFF5
 19815                           prodh	equ	0xFF4
 19816                           prodl	equ	0xFF3
 19817                           intcon	equ	0xFF2
 19818                           postinc0	equ	0xFEE
 19819                           wreg	equ	0xFE8
 19820                           indf1	equ	0xFE7
 19821                           postdec1	equ	0xFE5
 19822                           fsr1h	equ	0xFE2
 19823                           fsr1l	equ	0xFE1
 19824                           indf2	equ	0xFDF
 19825                           postinc2	equ	0xFDE
 19826                           postdec2	equ	0xFDD
 19827                           plusw2	equ	0xFDB
 19828                           fsr2h	equ	0xFDA
 19829                           fsr2l	equ	0xFD9
 19830                           status	equ	0xFD8
 19831                           
 19832 ;; *************** function _LCD_Write *****************
 19833 ;; Defined at:
 19834 ;;		line 67 in file "Library/LCD.c"
 19835 ;; Parameters:    Size  Location     Type
 19836 ;;  value           1    wreg     unsigned char 
 19837 ;;  mode            1    3[BANK0 ] enum E6761
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;  value           1    4[BANK0 ] unsigned char 
 19840 ;; Return value:  Size  Location     Type
 19841 ;;                  1    wreg      void 
 19842 ;; Registers used:
 19843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19844 ;; Tracked objects:
 19845 ;;		On entry : 0/0
 19846 ;;		On exit  : 0/0
 19847 ;;		Unchanged: 0/0
 19848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19849 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19853 ;;Total ram usage:        2 bytes
 19854 ;; Hardware stack levels used:    1
 19855 ;; Hardware stack levels required when called:    8
 19856 ;; This function calls:
 19857 ;;		_Mode_Set
 19858 ;;		_SPI_Send
 19859 ;; This function is called by:
 19860 ;;		_LCD_Init
 19861 ;;		_LCD_Word_Write
 19862 ;;		_Set_Addr_Window
 19863 ;;		_Set_Rotation
 19864 ;;		_LCD_WriteCMD
 19865 ;;		_LCD_WriteData
 19866 ;;		_LCD_Data_Write
 19867 ;;		_LCD_Data_Write_4k
 19868 ;;		_Invert_Display
 19869 ;; This function uses a non-reentrant model
 19870 ;;
 19871                           
 19872                           	psect	text86
 19873  0169A8                     __ptext86:
 19874                           	opt stack 0
 19875  0169A8                     _LCD_Write:
 19876                           	opt stack 17
 19877                           
 19878                           ;incstack = 0
 19879                           ;LCD_Write@value stored from wreg
 19880  0169A8  0100               	movlb	0	; () banked
 19881  0169AA  6FBD               	movwf	LCD_Write@value& (0+255),b
 19882                           
 19883                           ;LCD.c: 89: Mode_Set(mode);
 19884  0169AC  0100               	movlb	0	; () banked
 19885  0169AE  51BC               	movf	LCD_Write@mode& (0+255),w,b
 19886  0169B0  EC4C  F0B6         	call	_Mode_Set
 19887                           
 19888                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 19889  0169B4  0E87               	movlw	low _SPI2
 19890  0169B6  0100               	movlb	0	; () banked
 19891  0169B8  6FB9               	movwf	SPI_Send@pInput& (0+255),b
 19892  0169BA  0E03               	movlw	high _SPI2
 19893  0169BC  0100               	movlb	0	; () banked
 19894  0169BE  6FBA               	movwf	(SPI_Send@pInput+1)& (0+255),b
 19895  0169C0  C0BD  F0BB         	movff	LCD_Write@value,SPI_Send@pData
 19896  0169C4  ECB9  F0AD         	call	_SPI_Send	;wreg free
 19897  0169C8  0012               	return		;funcret
 19898  0169CA                     __end_of_LCD_Write:
 19899                           	opt stack 0
 19900                           tosu	equ	0xFFF
 19901                           tosh	equ	0xFFE
 19902                           tosl	equ	0xFFD
 19903                           pclath	equ	0xFFA
 19904                           tblptru	equ	0xFF8
 19905                           tblptrh	equ	0xFF7
 19906                           tblptrl	equ	0xFF6
 19907                           tablat	equ	0xFF5
 19908                           prodh	equ	0xFF4
 19909                           prodl	equ	0xFF3
 19910                           intcon	equ	0xFF2
 19911                           postinc0	equ	0xFEE
 19912                           wreg	equ	0xFE8
 19913                           indf1	equ	0xFE7
 19914                           postdec1	equ	0xFE5
 19915                           fsr1h	equ	0xFE2
 19916                           fsr1l	equ	0xFE1
 19917                           indf2	equ	0xFDF
 19918                           postinc2	equ	0xFDE
 19919                           postdec2	equ	0xFDD
 19920                           plusw2	equ	0xFDB
 19921                           fsr2h	equ	0xFDA
 19922                           fsr2l	equ	0xFD9
 19923                           status	equ	0xFD8
 19924                           
 19925 ;; *************** function _SPI_Send *****************
 19926 ;; Defined at:
 19927 ;;		line 226 in file "Library/SPI.c"
 19928 ;; Parameters:    Size  Location     Type
 19929 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19930 ;;		 -> SPI1(11), SPI2(11), 
 19931 ;;  pData           1    2[BANK0 ] unsigned char 
 19932 ;; Auto vars:     Size  Location     Type
 19933 ;;		None
 19934 ;; Return value:  Size  Location     Type
 19935 ;;                  1    wreg      unsigned char 
 19936 ;; Registers used:
 19937 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19938 ;; Tracked objects:
 19939 ;;		On entry : 0/0
 19940 ;;		On exit  : 0/0
 19941 ;;		Unchanged: 0/0
 19942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19943 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19946 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19947 ;;Total ram usage:        3 bytes
 19948 ;; Hardware stack levels used:    1
 19949 ;; Hardware stack levels required when called:    7
 19950 ;; This function calls:
 19951 ;;		Nothing
 19952 ;; This function is called by:
 19953 ;;		_LCD_Write
 19954 ;;		_OutSeg
 19955 ;; This function uses a non-reentrant model
 19956 ;;
 19957                           
 19958                           	psect	text87
 19959  015B72                     __ptext87:
 19960                           	opt stack 0
 19961  015B72                     _SPI_Send:
 19962                           	opt stack 19
 19963                           
 19964                           ;SPI.c: 253: switch (pInput->mChannel)
 19965                           
 19966                           ;incstack = 0
 19967  015B72  D026               	goto	l678
 19968  015B74                     
 19969                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19970  015B74  C0A8  FFD9         	movff	_PortC+4,fsr2l
 19971  015B78  C0A9  FFDA         	movff	_PortC+5,fsr2h
 19972  015B7C  0100               	movlb	0	; () banked
 19973  015B7E  94DF               	bcf	indf2,2,c
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;SPI.c: 257: SSP1BUF = pData;
 19977  015B80  C0BB  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19978  015B84                     
 19979                           ; BSR set to: 0
 19980  015B84  A0C7               	btfss	4039,0,c	;volatile
 19981  015B86  D7FE               	goto	l681
 19982                           
 19983                           ;SPI.c: 259: pData = SSP1BUF;
 19984  015B88  CFC9 F0BB          	movff	4041,SPI_Send@pData	;volatile
 19985                           
 19986                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19987  015B8C  C0A8  FFD9         	movff	_PortC+4,fsr2l
 19988  015B90  C0A9  FFDA         	movff	_PortC+5,fsr2h
 19989  015B94  0100               	movlb	0	; () banked
 19990  015B96  84DF               	bsf	indf2,2,c
 19991                           
 19992                           ; BSR set to: 0
 19993                           ;SPI.c: 261: return pData;
 19994                           ;	Return value of _SPI_Send is never used
 19995  015B98  0012               	return	
 19996  015B9A                     
 19997                           ; BSR set to: 0
 19998                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19999                           
 20000                           ; BSR set to: 0
 20001  015B9A  C09E  FFD9         	movff	_PortD+4,fsr2l
 20002  015B9E  C09F  FFDA         	movff	_PortD+5,fsr2h
 20003  015BA2  0100               	movlb	0	; () banked
 20004  015BA4  9EDF               	bcf	indf2,7,c
 20005                           
 20006                           ; BSR set to: 0
 20007                           ;SPI.c: 264: SSP2BUF = pData;
 20008  015BA6  C0BB  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20009  015BAA                     
 20010                           ; BSR set to: 0
 20011  015BAA  A06D               	btfss	3949,0,c	;volatile
 20012  015BAC  D7FE               	goto	l686
 20013                           
 20014                           ;SPI.c: 266: pData = SSP2BUF;
 20015  015BAE  CF6F F0BB          	movff	3951,SPI_Send@pData	;volatile
 20016                           
 20017                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20018  015BB2  C09E  FFD9         	movff	_PortD+4,fsr2l
 20019  015BB6  C09F  FFDA         	movff	_PortD+5,fsr2h
 20020  015BBA  0100               	movlb	0	; () banked
 20021  015BBC  8EDF               	bsf	indf2,7,c
 20022                           
 20023                           ; BSR set to: 0
 20024                           ;SPI.c: 269: };
 20025                           
 20026                           ; BSR set to: 0
 20027                           ;SPI.c: 268: return pData;
 20028                           ;	Return value of _SPI_Send is never used
 20029  015BBE  0012               	return	
 20030  015BC0                     l678:
 20031                           
 20032                           ; BSR set to: 0
 20033  015BC0  0100               	movlb	0	; () banked
 20034  015BC2  EE20 F002          	lfsr	2,2
 20035  015BC6  51B9               	movf	SPI_Send@pInput& (0+255),w,b
 20036  015BC8  26D9               	addwf	fsr2l,f,c
 20037  015BCA  51BA               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 20038  015BCC  22DA               	addwfc	fsr2h,f,c
 20039  015BCE  50DF               	movf	indf2,w,c
 20040                           
 20041                           ; Switch size 1, requested type "space"
 20042                           ; Number of cases is 2, Range of values is 0 to 1
 20043                           ; switch strategies available:
 20044                           ; Name         Instructions Cycles
 20045                           ; simple_byte            7     4 (average)
 20046                           ;	Chosen strategy is simple_byte
 20047  015BD0  0A00               	xorlw	0	; case 0
 20048  015BD2  B4D8               	btfsc	status,2,c
 20049  015BD4  D7CF               	goto	l679
 20050  015BD6  0A01               	xorlw	1	; case 1
 20051  015BD8  A4D8               	btfss	status,2,c
 20052  015BDA  0012               	return	
 20053  015BDC  D7DE               	goto	l684
 20054  015BDE                     __end_of_SPI_Send:
 20055                           	opt stack 0
 20056                           tosu	equ	0xFFF
 20057                           tosh	equ	0xFFE
 20058                           tosl	equ	0xFFD
 20059                           pclath	equ	0xFFA
 20060                           tblptru	equ	0xFF8
 20061                           tblptrh	equ	0xFF7
 20062                           tblptrl	equ	0xFF6
 20063                           tablat	equ	0xFF5
 20064                           prodh	equ	0xFF4
 20065                           prodl	equ	0xFF3
 20066                           intcon	equ	0xFF2
 20067                           postinc0	equ	0xFEE
 20068                           wreg	equ	0xFE8
 20069                           indf1	equ	0xFE7
 20070                           postdec1	equ	0xFE5
 20071                           fsr1h	equ	0xFE2
 20072                           fsr1l	equ	0xFE1
 20073                           indf2	equ	0xFDF
 20074                           postinc2	equ	0xFDE
 20075                           postdec2	equ	0xFDD
 20076                           plusw2	equ	0xFDB
 20077                           fsr2h	equ	0xFDA
 20078                           fsr2l	equ	0xFD9
 20079                           status	equ	0xFD8
 20080                           
 20081 ;; *************** function _Mode_Set *****************
 20082 ;; Defined at:
 20083 ;;		line 40 in file "Library/LCD.c"
 20084 ;; Parameters:    Size  Location     Type
 20085 ;;  pMode           1    wreg     enum E6761
 20086 ;; Auto vars:     Size  Location     Type
 20087 ;;  pMode           1    0[BANK0 ] enum E6761
 20088 ;; Return value:  Size  Location     Type
 20089 ;;                  1    wreg      void 
 20090 ;; Registers used:
 20091 ;;		wreg
 20092 ;; Tracked objects:
 20093 ;;		On entry : 0/0
 20094 ;;		On exit  : 0/0
 20095 ;;		Unchanged: 0/0
 20096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20101 ;;Total ram usage:        1 bytes
 20102 ;; Hardware stack levels used:    1
 20103 ;; Hardware stack levels required when called:    7
 20104 ;; This function calls:
 20105 ;;		Nothing
 20106 ;; This function is called by:
 20107 ;;		_LCD_Write
 20108 ;; This function uses a non-reentrant model
 20109 ;;
 20110                           
 20111                           	psect	text88
 20112  016C98                     __ptext88:
 20113                           	opt stack 0
 20114  016C98                     _Mode_Set:
 20115                           	opt stack 17
 20116                           
 20117                           ; BSR set to: 0
 20118                           ;incstack = 0
 20119                           ;Mode_Set@pMode stored from wreg
 20120  016C98  0100               	movlb	0	; () banked
 20121  016C9A  6FB9               	movwf	Mode_Set@pMode& (0+255),b
 20122                           
 20123                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 20124  016C9C  0100               	movlb	0	; () banked
 20125  016C9E  B1B9               	btfsc	Mode_Set@pMode& (0+255),0,b
 20126  016CA0  D002               	bra	u9365
 20127  016CA2  9E85               	bcf	3973,7,c	;volatile
 20128  016CA4  D001               	bra	u9366
 20129  016CA6                     u9365:
 20130  016CA6  8E85               	bsf	3973,7,c	;volatile
 20131  016CA8                     u9366:
 20132  016CA8  0012               	return		;funcret
 20133  016CAA                     __end_of_Mode_Set:
 20134                           	opt stack 0
 20135                           tosu	equ	0xFFF
 20136                           tosh	equ	0xFFE
 20137                           tosl	equ	0xFFD
 20138                           pclath	equ	0xFFA
 20139                           tblptru	equ	0xFF8
 20140                           tblptrh	equ	0xFF7
 20141                           tblptrl	equ	0xFF6
 20142                           tablat	equ	0xFF5
 20143                           prodh	equ	0xFF4
 20144                           prodl	equ	0xFF3
 20145                           intcon	equ	0xFF2
 20146                           postinc0	equ	0xFEE
 20147                           wreg	equ	0xFE8
 20148                           indf1	equ	0xFE7
 20149                           postdec1	equ	0xFE5
 20150                           fsr1h	equ	0xFE2
 20151                           fsr1l	equ	0xFE1
 20152                           indf2	equ	0xFDF
 20153                           postinc2	equ	0xFDE
 20154                           postdec2	equ	0xFDD
 20155                           plusw2	equ	0xFDB
 20156                           fsr2h	equ	0xFDA
 20157                           fsr2l	equ	0xFD9
 20158                           status	equ	0xFD8
 20159                           
 20160 ;; *************** function _Configure_GPIOs *****************
 20161 ;; Defined at:
 20162 ;;		line 46 in file "Library/LCD.c"
 20163 ;; Parameters:    Size  Location     Type
 20164 ;;		None
 20165 ;; Auto vars:     Size  Location     Type
 20166 ;;		None
 20167 ;; Return value:  Size  Location     Type
 20168 ;;                  1    wreg      void 
 20169 ;; Registers used:
 20170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20171 ;; Tracked objects:
 20172 ;;		On entry : 0/0
 20173 ;;		On exit  : 0/0
 20174 ;;		Unchanged: 0/0
 20175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20180 ;;Total ram usage:        0 bytes
 20181 ;; Hardware stack levels used:    1
 20182 ;; Hardware stack levels required when called:   14
 20183 ;; This function calls:
 20184 ;;		_LCD_Reset
 20185 ;;		_Port_SetPinType
 20186 ;;		_SPI_Init
 20187 ;;		_SPI_MaxSpeed
 20188 ;; This function is called by:
 20189 ;;		_LCD_Init
 20190 ;; This function uses a non-reentrant model
 20191 ;;
 20192                           
 20193                           	psect	text89
 20194  015B02                     __ptext89:
 20195                           	opt stack 0
 20196  015B02                     _Configure_GPIOs:
 20197                           	opt stack 14
 20198                           
 20199                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 20200                           
 20201                           ;incstack = 0
 20202  015B02  0EC4               	movlw	low _PortF
 20203  015B04  0100               	movlb	0	; () banked
 20204  015B06  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 20205  015B08  0E03               	movlw	high _PortF
 20206  015B0A  0100               	movlb	0	; () banked
 20207  015B0C  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20208  015B0E  0E07               	movlw	7
 20209  015B10  0100               	movlb	0	; () banked
 20210  015B12  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 20211  015B14  0E03               	movlw	3
 20212  015B16  0100               	movlb	0	; () banked
 20213  015B18  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 20214  015B1A  ECB2  F095         	call	_Port_SetPinType	;wreg free
 20215                           
 20216                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 20217  015B1E  0EC4               	movlw	low _PortF
 20218  015B20  0100               	movlb	0	; () banked
 20219  015B22  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 20220  015B24  0E03               	movlw	high _PortF
 20221  015B26  0100               	movlb	0	; () banked
 20222  015B28  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20223  015B2A  0E06               	movlw	6
 20224  015B2C  0100               	movlb	0	; () banked
 20225  015B2E  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 20226  015B30  0E03               	movlw	3
 20227  015B32  0100               	movlb	0	; () banked
 20228  015B34  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 20229  015B36  ECB2  F095         	call	_Port_SetPinType	;wreg free
 20230                           
 20231                           ;LCD.c: 55: LCD_Reset();
 20232  015B3A  ECC2  F0B0         	call	_LCD_Reset	;wreg free
 20233                           
 20234                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 20235  015B3E  0EC0               	movlw	192
 20236  015B40  0100               	movlb	0	; () banked
 20237  015B42  6FE6               	movwf	SPI_Init@pClock& (0+255),b
 20238  015B44  0EC6               	movlw	198
 20239  015B46  6FE7               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20240  015B48  0E2D               	movlw	45
 20241  015B4A  6FE8               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20242  015B4C  0E00               	movlw	0
 20243  015B4E  6FE9               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20244  015B50  0E01               	movlw	1
 20245  015B52  0100               	movlb	0	; () banked
 20246  015B54  6FEA               	movwf	SPI_Init@pChannel& (0+255),b
 20247  015B56  0E01               	movlw	1
 20248  015B58  0100               	movlb	0	; () banked
 20249  015B5A  6FEB               	movwf	SPI_Init@pMode& (0+255),b
 20250  015B5C  ECAD  F086         	call	_SPI_Init	;wreg free
 20251                           
 20252                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 20253  015B60  0E87               	movlw	low _SPI2
 20254  015B62  0100               	movlb	0	; () banked
 20255  015B64  6FC8               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 20256  015B66  0E03               	movlw	high _SPI2
 20257  015B68  0100               	movlb	0	; () banked
 20258  015B6A  6FC9               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 20259  015B6C  ECD3  F0AC         	call	_SPI_MaxSpeed	;wreg free
 20260  015B70  0012               	return		;funcret
 20261  015B72                     __end_of_Configure_GPIOs:
 20262                           	opt stack 0
 20263                           tosu	equ	0xFFF
 20264                           tosh	equ	0xFFE
 20265                           tosl	equ	0xFFD
 20266                           pclath	equ	0xFFA
 20267                           tblptru	equ	0xFF8
 20268                           tblptrh	equ	0xFF7
 20269                           tblptrl	equ	0xFF6
 20270                           tablat	equ	0xFF5
 20271                           prodh	equ	0xFF4
 20272                           prodl	equ	0xFF3
 20273                           intcon	equ	0xFF2
 20274                           postinc0	equ	0xFEE
 20275                           wreg	equ	0xFE8
 20276                           indf1	equ	0xFE7
 20277                           postdec1	equ	0xFE5
 20278                           fsr1h	equ	0xFE2
 20279                           fsr1l	equ	0xFE1
 20280                           indf2	equ	0xFDF
 20281                           postinc2	equ	0xFDE
 20282                           postdec2	equ	0xFDD
 20283                           plusw2	equ	0xFDB
 20284                           fsr2h	equ	0xFDA
 20285                           fsr2l	equ	0xFD9
 20286                           status	equ	0xFD8
 20287                           
 20288 ;; *************** function _SPI_MaxSpeed *****************
 20289 ;; Defined at:
 20290 ;;		line 201 in file "Library/SPI.c"
 20291 ;; Parameters:    Size  Location     Type
 20292 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20293 ;;		 -> SPI2(11), 
 20294 ;; Auto vars:     Size  Location     Type
 20295 ;;		None
 20296 ;; Return value:  Size  Location     Type
 20297 ;;                  1    wreg      void 
 20298 ;; Registers used:
 20299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20300 ;; Tracked objects:
 20301 ;;		On entry : 0/0
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20305 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20309 ;;Total ram usage:        2 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; Hardware stack levels required when called:    9
 20312 ;; This function calls:
 20313 ;;		_Byte_SetBit
 20314 ;;		_Byte_SetQuad
 20315 ;; This function is called by:
 20316 ;;		_Configure_GPIOs
 20317 ;; This function uses a non-reentrant model
 20318 ;;
 20319                           
 20320                           	psect	text90
 20321  0159A6                     __ptext90:
 20322                           	opt stack 0
 20323  0159A6                     _SPI_MaxSpeed:
 20324                           	opt stack 18
 20325                           
 20326                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20327                           
 20328                           ;incstack = 0
 20329  0159A6  0100               	movlb	0	; () banked
 20330  0159A8  EE20 F006          	lfsr	2,6
 20331  0159AC  51C8               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20332  0159AE  26D9               	addwf	fsr2l,f,c
 20333  0159B0  51C9               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20334  0159B2  22DA               	addwfc	fsr2h,f,c
 20335  0159B4  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 20336  0159B8  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 20337  0159BC  0E05               	movlw	5
 20338  0159BE  0100               	movlb	0	; () banked
 20339  0159C0  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 20340  0159C2  0E00               	movlw	0
 20341  0159C4  0100               	movlb	0	; () banked
 20342  0159C6  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 20343  0159C8  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 20344                           
 20345                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 20346  0159CC  0100               	movlb	0	; () banked
 20347  0159CE  EE20 F006          	lfsr	2,6
 20348  0159D2  51C8               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20349  0159D4  26D9               	addwf	fsr2l,f,c
 20350  0159D6  51C9               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20351  0159D8  22DA               	addwfc	fsr2h,f,c
 20352  0159DA  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 20353  0159DE  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 20354  0159E2  0E00               	movlw	0
 20355  0159E4  0100               	movlb	0	; () banked
 20356  0159E6  6FC6               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20357  0159E8  0E00               	movlw	0
 20358  0159EA  0100               	movlb	0	; () banked
 20359  0159EC  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 20360  0159EE  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 20361                           
 20362                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20363  0159F2  0100               	movlb	0	; () banked
 20364  0159F4  EE20 F006          	lfsr	2,6
 20365  0159F8  51C8               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20366  0159FA  26D9               	addwf	fsr2l,f,c
 20367  0159FC  51C9               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20368  0159FE  22DA               	addwfc	fsr2h,f,c
 20369  015A00  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 20370  015A04  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 20371  015A08  0E05               	movlw	5
 20372  015A0A  0100               	movlb	0	; () banked
 20373  015A0C  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 20374  015A0E  0E01               	movlw	1
 20375  015A10  0100               	movlb	0	; () banked
 20376  015A12  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 20377  015A14  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 20378  015A18  0012               	return		;funcret
 20379  015A1A                     __end_of_SPI_MaxSpeed:
 20380                           	opt stack 0
 20381                           tosu	equ	0xFFF
 20382                           tosh	equ	0xFFE
 20383                           tosl	equ	0xFFD
 20384                           pclath	equ	0xFFA
 20385                           tblptru	equ	0xFF8
 20386                           tblptrh	equ	0xFF7
 20387                           tblptrl	equ	0xFF6
 20388                           tablat	equ	0xFF5
 20389                           prodh	equ	0xFF4
 20390                           prodl	equ	0xFF3
 20391                           intcon	equ	0xFF2
 20392                           postinc0	equ	0xFEE
 20393                           wreg	equ	0xFE8
 20394                           indf1	equ	0xFE7
 20395                           postdec1	equ	0xFE5
 20396                           fsr1h	equ	0xFE2
 20397                           fsr1l	equ	0xFE1
 20398                           indf2	equ	0xFDF
 20399                           postinc2	equ	0xFDE
 20400                           postdec2	equ	0xFDD
 20401                           plusw2	equ	0xFDB
 20402                           fsr2h	equ	0xFDA
 20403                           fsr2l	equ	0xFD9
 20404                           status	equ	0xFD8
 20405                           
 20406 ;; *************** function _LCD_Reset *****************
 20407 ;; Defined at:
 20408 ;;		line 95 in file "Library/LCD.c"
 20409 ;; Parameters:    Size  Location     Type
 20410 ;;		None
 20411 ;; Auto vars:     Size  Location     Type
 20412 ;;		None
 20413 ;; Return value:  Size  Location     Type
 20414 ;;                  1    wreg      void 
 20415 ;; Registers used:
 20416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20417 ;; Tracked objects:
 20418 ;;		On entry : 0/0
 20419 ;;		On exit  : 0/0
 20420 ;;		Unchanged: 0/0
 20421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20426 ;;Total ram usage:        0 bytes
 20427 ;; Hardware stack levels used:    1
 20428 ;; Hardware stack levels required when called:   13
 20429 ;; This function calls:
 20430 ;;		_LED_Toggle
 20431 ;;		_Reset_High
 20432 ;;		_Reset_Low
 20433 ;;		_delay_ms
 20434 ;; This function is called by:
 20435 ;;		_Configure_GPIOs
 20436 ;; This function uses a non-reentrant model
 20437 ;;
 20438                           
 20439                           	psect	text91
 20440  016184                     __ptext91:
 20441                           	opt stack 0
 20442  016184                     _LCD_Reset:
 20443                           	opt stack 14
 20444                           
 20445                           ;LCD.c: 97: Reset_High();
 20446                           
 20447                           ;incstack = 0
 20448  016184  EC53  F0B5         	call	_Reset_High	;wreg free
 20449                           
 20450                           ;LCD.c: 98: LED_Toggle(eLED2);
 20451  016188  0E01               	movlw	1
 20452  01618A  ECA2  F0B1         	call	_LED_Toggle
 20453                           
 20454                           ;LCD.c: 99: delay_ms(0x80);
 20455  01618E  0E00               	movlw	0
 20456  016190  0100               	movlb	0	; () banked
 20457  016192  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 20458  016194  0E80               	movlw	128
 20459  016196  6FB9               	movwf	delay_ms@ms& (0+255),b
 20460  016198  EC5A  F0AE         	call	_delay_ms	;wreg free
 20461                           
 20462                           ;LCD.c: 100: LED_Toggle(eLED2);
 20463  01619C  0E01               	movlw	1
 20464  01619E  ECA2  F0B1         	call	_LED_Toggle
 20465                           
 20466                           ;LCD.c: 101: Reset_Low();
 20467  0161A2  EC44  F0B5         	call	_Reset_Low	;wreg free
 20468                           
 20469                           ;LCD.c: 102: delay_ms(0x80);
 20470  0161A6  0E00               	movlw	0
 20471  0161A8  0100               	movlb	0	; () banked
 20472  0161AA  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 20473  0161AC  0E80               	movlw	128
 20474  0161AE  6FB9               	movwf	delay_ms@ms& (0+255),b
 20475  0161B0  EC5A  F0AE         	call	_delay_ms	;wreg free
 20476                           
 20477                           ;LCD.c: 103: LED_Toggle(eLED2);
 20478  0161B4  0E01               	movlw	1
 20479  0161B6  ECA2  F0B1         	call	_LED_Toggle
 20480                           
 20481                           ;LCD.c: 104: Reset_High();
 20482  0161BA  EC53  F0B5         	call	_Reset_High	;wreg free
 20483                           
 20484                           ;LCD.c: 105: delay_ms(0x80);
 20485  0161BE  0E00               	movlw	0
 20486  0161C0  0100               	movlb	0	; () banked
 20487  0161C2  6FBA               	movwf	(delay_ms@ms+1)& (0+255),b
 20488  0161C4  0E80               	movlw	128
 20489  0161C6  6FB9               	movwf	delay_ms@ms& (0+255),b
 20490  0161C8  EC5A  F0AE         	call	_delay_ms	;wreg free
 20491                           
 20492                           ;LCD.c: 106: LED_Toggle(eLED2);
 20493  0161CC  0E01               	movlw	1
 20494  0161CE  ECA2  F0B1         	call	_LED_Toggle
 20495  0161D2  0012               	return		;funcret
 20496  0161D4                     __end_of_LCD_Reset:
 20497                           	opt stack 0
 20498                           tosu	equ	0xFFF
 20499                           tosh	equ	0xFFE
 20500                           tosl	equ	0xFFD
 20501                           pclath	equ	0xFFA
 20502                           tblptru	equ	0xFF8
 20503                           tblptrh	equ	0xFF7
 20504                           tblptrl	equ	0xFF6
 20505                           tablat	equ	0xFF5
 20506                           prodh	equ	0xFF4
 20507                           prodl	equ	0xFF3
 20508                           intcon	equ	0xFF2
 20509                           postinc0	equ	0xFEE
 20510                           wreg	equ	0xFE8
 20511                           indf1	equ	0xFE7
 20512                           postdec1	equ	0xFE5
 20513                           fsr1h	equ	0xFE2
 20514                           fsr1l	equ	0xFE1
 20515                           indf2	equ	0xFDF
 20516                           postinc2	equ	0xFDE
 20517                           postdec2	equ	0xFDD
 20518                           plusw2	equ	0xFDB
 20519                           fsr2h	equ	0xFDA
 20520                           fsr2l	equ	0xFD9
 20521                           status	equ	0xFD8
 20522                           
 20523 ;; *************** function _delay_ms *****************
 20524 ;; Defined at:
 20525 ;;		line 240 in file "Library/Types.c"
 20526 ;; Parameters:    Size  Location     Type
 20527 ;;  ms              2    0[BANK0 ] unsigned short 
 20528 ;; Auto vars:     Size  Location     Type
 20529 ;;  u               4    2[BANK0 ] volatile unsigned long 
 20530 ;; Return value:  Size  Location     Type
 20531 ;;                  1    wreg      void 
 20532 ;; Registers used:
 20533 ;;		wreg, status,2, status,0
 20534 ;; Tracked objects:
 20535 ;;		On entry : 0/0
 20536 ;;		On exit  : 0/0
 20537 ;;		Unchanged: 0/0
 20538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20540 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20542 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20543 ;;Total ram usage:        6 bytes
 20544 ;; Hardware stack levels used:    1
 20545 ;; Hardware stack levels required when called:    7
 20546 ;; This function calls:
 20547 ;;		Nothing
 20548 ;; This function is called by:
 20549 ;;		_LCD_Reset
 20550 ;;		_LCD_Init
 20551 ;;		_MXK_Init
 20552 ;;		_init
 20553 ;;		_move_and_rotate
 20554 ;;		_findClosestWall
 20555 ;;		_mode4
 20556 ;; This function uses a non-reentrant model
 20557 ;;
 20558                           
 20559                           	psect	text92
 20560  015CB4                     __ptext92:
 20561                           	opt stack 0
 20562  015CB4                     _delay_ms:
 20563                           	opt stack 21
 20564                           
 20565                           ;Types.c: 242: volatile unsigned long u;
 20566                           ;Types.c: 243: while (ms--)
 20567                           
 20568                           ;incstack = 0
 20569  015CB4  D01F               	goto	u9870
 20570  015CB6                     l13113:
 20571                           
 20572                           ;Types.c: 244: {
 20573                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 20574  015CB6  0E00               	movlw	0
 20575  015CB8  0100               	movlb	0	; () banked
 20576  015CBA  6FBB               	movwf	delay_ms@u& (0+255),b	;volatile
 20577  015CBC  0E00               	movlw	0
 20578  015CBE  6FBC               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20579  015CC0  0E00               	movlw	0
 20580  015CC2  6FBD               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20581  015CC4  0E00               	movlw	0
 20582  015CC6  6FBE               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20583  015CC8                     l13115:
 20584                           
 20585                           ; BSR set to: 0
 20586  015CC8  0100               	movlb	0	; () banked
 20587  015CCA  51BE               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 20588  015CCC  0100               	movlb	0	; () banked
 20589  015CCE  11BD               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 20590  015CD0  E111               	bnz	l13121
 20591  015CD2  0EB0               	movlw	176
 20592  015CD4  0100               	movlb	0	; () banked
 20593  015CD6  5DBB               	subwf	delay_ms@u& (0+255),w,b	;volatile
 20594  015CD8  0E04               	movlw	4
 20595  015CDA  0100               	movlb	0	; () banked
 20596  015CDC  59BC               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 20597  015CDE  B0D8               	btfsc	status,0,c
 20598  015CE0  D009               	goto	u9870
 20599                           
 20600                           ; BSR set to: 0
 20601                           
 20602                           ; BSR set to: 0
 20603  015CE2  F000               	nop		; ;# 
 20604  015CE4  0E01               	movlw	1
 20605  015CE6  0100               	movlb	0	; () banked
 20606  015CE8  27BB               	addwf	delay_ms@u& (0+255),f,b	;volatile
 20607  015CEA  0E00               	movlw	0
 20608  015CEC  23BC               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 20609  015CEE  23BD               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 20610  015CF0  23BE               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 20611  015CF2  D7EA               	goto	l13115
 20612  015CF4                     u9870:
 20613  015CF4                     l13121:
 20614  015CF4  0100               	movlb	0	; () banked
 20615  015CF6  07B9               	decf	delay_ms@ms& (0+255),f,b
 20616  015CF8  A0D8               	btfss	status,0,c
 20617  015CFA  07BA               	decf	(delay_ms@ms+1)& (0+255),f,b
 20618  015CFC  0100               	movlb	0	; () banked
 20619  015CFE  29B9               	incf	delay_ms@ms& (0+255),w,b
 20620  015D00  E1DA               	bnz	l13113
 20621  015D02  0100               	movlb	0	; () banked
 20622  015D04  29BA               	incf	(delay_ms@ms+1)& (0+255),w,b
 20623  015D06  A4D8               	btfss	status,2,c
 20624  015D08  D7D6               	goto	l824
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;Types.c: 251: }
 20628                           ;Types.c: 252: }
 20629                           ;Types.c: 253: u = 0x8008;
 20630                           
 20631                           ; BSR set to: 0
 20632  015D0A  0E08               	movlw	8
 20633  015D0C  0100               	movlb	0	; () banked
 20634  015D0E  6FBB               	movwf	delay_ms@u& (0+255),b	;volatile
 20635  015D10  0E80               	movlw	128
 20636  015D12  6FBC               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20637  015D14  0E00               	movlw	0
 20638  015D16  6FBD               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20639  015D18  0E00               	movlw	0
 20640  015D1A  6FBE               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20641                           
 20642                           ; BSR set to: 0
 20643  015D1C  0012               	return		;funcret
 20644  015D1E                     __end_of_delay_ms:
 20645                           	opt stack 0
 20646                           tosu	equ	0xFFF
 20647                           tosh	equ	0xFFE
 20648                           tosl	equ	0xFFD
 20649                           pclath	equ	0xFFA
 20650                           tblptru	equ	0xFF8
 20651                           tblptrh	equ	0xFF7
 20652                           tblptrl	equ	0xFF6
 20653                           tablat	equ	0xFF5
 20654                           prodh	equ	0xFF4
 20655                           prodl	equ	0xFF3
 20656                           intcon	equ	0xFF2
 20657                           postinc0	equ	0xFEE
 20658                           wreg	equ	0xFE8
 20659                           indf1	equ	0xFE7
 20660                           postdec1	equ	0xFE5
 20661                           fsr1h	equ	0xFE2
 20662                           fsr1l	equ	0xFE1
 20663                           indf2	equ	0xFDF
 20664                           postinc2	equ	0xFDE
 20665                           postdec2	equ	0xFDD
 20666                           plusw2	equ	0xFDB
 20667                           fsr2h	equ	0xFDA
 20668                           fsr2l	equ	0xFD9
 20669                           status	equ	0xFD8
 20670                           
 20671 ;; *************** function _Reset_Low *****************
 20672 ;; Defined at:
 20673 ;;		line 32 in file "Library/LCD.c"
 20674 ;; Parameters:    Size  Location     Type
 20675 ;;		None
 20676 ;; Auto vars:     Size  Location     Type
 20677 ;;		None
 20678 ;; Return value:  Size  Location     Type
 20679 ;;                  1    wreg      void 
 20680 ;; Registers used:
 20681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20682 ;; Tracked objects:
 20683 ;;		On entry : 0/0
 20684 ;;		On exit  : 0/0
 20685 ;;		Unchanged: 0/0
 20686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20691 ;;Total ram usage:        0 bytes
 20692 ;; Hardware stack levels used:    1
 20693 ;; Hardware stack levels required when called:   11
 20694 ;; This function calls:
 20695 ;;		_Port_SetPin
 20696 ;; This function is called by:
 20697 ;;		_LCD_Reset
 20698 ;; This function uses a non-reentrant model
 20699 ;;
 20700                           
 20701                           	psect	text93
 20702  016A88                     __ptext93:
 20703                           	opt stack 0
 20704  016A88                     _Reset_Low:
 20705                           	opt stack 15
 20706                           
 20707                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 20708                           
 20709                           ; BSR set to: 0
 20710                           ;incstack = 0
 20711  016A88  0EC4               	movlw	low _PortF
 20712  016A8A  0100               	movlb	0	; () banked
 20713  016A8C  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 20714  016A8E  0E03               	movlw	high _PortF
 20715  016A90  0100               	movlb	0	; () banked
 20716  016A92  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20717  016A94  0E06               	movlw	6
 20718  016A96  0100               	movlb	0	; () banked
 20719  016A98  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 20720  016A9A  0E01               	movlw	1
 20721  016A9C  0100               	movlb	0	; () banked
 20722  016A9E  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 20723  016AA0  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 20724  016AA4  0012               	return		;funcret
 20725  016AA6                     __end_of_Reset_Low:
 20726                           	opt stack 0
 20727                           tosu	equ	0xFFF
 20728                           tosh	equ	0xFFE
 20729                           tosl	equ	0xFFD
 20730                           pclath	equ	0xFFA
 20731                           tblptru	equ	0xFF8
 20732                           tblptrh	equ	0xFF7
 20733                           tblptrl	equ	0xFF6
 20734                           tablat	equ	0xFF5
 20735                           prodh	equ	0xFF4
 20736                           prodl	equ	0xFF3
 20737                           intcon	equ	0xFF2
 20738                           postinc0	equ	0xFEE
 20739                           wreg	equ	0xFE8
 20740                           indf1	equ	0xFE7
 20741                           postdec1	equ	0xFE5
 20742                           fsr1h	equ	0xFE2
 20743                           fsr1l	equ	0xFE1
 20744                           indf2	equ	0xFDF
 20745                           postinc2	equ	0xFDE
 20746                           postdec2	equ	0xFDD
 20747                           plusw2	equ	0xFDB
 20748                           fsr2h	equ	0xFDA
 20749                           fsr2l	equ	0xFD9
 20750                           status	equ	0xFD8
 20751                           
 20752 ;; *************** function _Reset_High *****************
 20753 ;; Defined at:
 20754 ;;		line 36 in file "Library/LCD.c"
 20755 ;; Parameters:    Size  Location     Type
 20756 ;;		None
 20757 ;; Auto vars:     Size  Location     Type
 20758 ;;		None
 20759 ;; Return value:  Size  Location     Type
 20760 ;;                  1    wreg      void 
 20761 ;; Registers used:
 20762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20763 ;; Tracked objects:
 20764 ;;		On entry : 0/0
 20765 ;;		On exit  : 0/0
 20766 ;;		Unchanged: 0/0
 20767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20772 ;;Total ram usage:        0 bytes
 20773 ;; Hardware stack levels used:    1
 20774 ;; Hardware stack levels required when called:   11
 20775 ;; This function calls:
 20776 ;;		_Port_SetPin
 20777 ;; This function is called by:
 20778 ;;		_LCD_Reset
 20779 ;; This function uses a non-reentrant model
 20780 ;;
 20781                           
 20782                           	psect	text94
 20783  016AA6                     __ptext94:
 20784                           	opt stack 0
 20785  016AA6                     _Reset_High:
 20786                           	opt stack 15
 20787                           
 20788                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 20789                           
 20790                           ;incstack = 0
 20791  016AA6  0EC4               	movlw	low _PortF
 20792  016AA8  0100               	movlb	0	; () banked
 20793  016AAA  6FC8               	movwf	Port_SetPin@pInput& (0+255),b
 20794  016AAC  0E03               	movlw	high _PortF
 20795  016AAE  0100               	movlb	0	; () banked
 20796  016AB0  6FC9               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20797  016AB2  0E06               	movlw	6
 20798  016AB4  0100               	movlb	0	; () banked
 20799  016AB6  6FCA               	movwf	Port_SetPin@pPin& (0+255),b
 20800  016AB8  0E00               	movlw	0
 20801  016ABA  0100               	movlb	0	; () banked
 20802  016ABC  6FCB               	movwf	Port_SetPin@pValue& (0+255),b
 20803  016ABE  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 20804  016AC2  0012               	return		;funcret
 20805  016AC4                     __end_of_Reset_High:
 20806                           	opt stack 0
 20807                           tosu	equ	0xFFF
 20808                           tosh	equ	0xFFE
 20809                           tosl	equ	0xFFD
 20810                           pclath	equ	0xFFA
 20811                           tblptru	equ	0xFF8
 20812                           tblptrh	equ	0xFF7
 20813                           tblptrl	equ	0xFF6
 20814                           tablat	equ	0xFF5
 20815                           prodh	equ	0xFF4
 20816                           prodl	equ	0xFF3
 20817                           intcon	equ	0xFF2
 20818                           postinc0	equ	0xFEE
 20819                           wreg	equ	0xFE8
 20820                           indf1	equ	0xFE7
 20821                           postdec1	equ	0xFE5
 20822                           fsr1h	equ	0xFE2
 20823                           fsr1l	equ	0xFE1
 20824                           indf2	equ	0xFDF
 20825                           postinc2	equ	0xFDE
 20826                           postdec2	equ	0xFDD
 20827                           plusw2	equ	0xFDB
 20828                           fsr2h	equ	0xFDA
 20829                           fsr2l	equ	0xFD9
 20830                           status	equ	0xFD8
 20831                           
 20832 ;; *************** function _ISR_Enable *****************
 20833 ;; Defined at:
 20834 ;;		line 27 in file "Library/ISR.c"
 20835 ;; Parameters:    Size  Location     Type
 20836 ;;		None
 20837 ;; Auto vars:     Size  Location     Type
 20838 ;;		None
 20839 ;; Return value:  Size  Location     Type
 20840 ;;                  1    wreg      void 
 20841 ;; Registers used:
 20842 ;;		None
 20843 ;; Tracked objects:
 20844 ;;		On entry : 0/0
 20845 ;;		On exit  : 0/0
 20846 ;;		Unchanged: 0/0
 20847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;Total ram usage:        0 bytes
 20853 ;; Hardware stack levels used:    1
 20854 ;; Hardware stack levels required when called:    7
 20855 ;; This function calls:
 20856 ;;		Nothing
 20857 ;; This function is called by:
 20858 ;;		_init
 20859 ;; This function uses a non-reentrant model
 20860 ;;
 20861                           
 20862                           	psect	text95
 20863  016D3A                     __ptext95:
 20864                           	opt stack 0
 20865  016D3A                     _ISR_Enable:
 20866                           	opt stack 22
 20867                           
 20868                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 20869                           
 20870                           ;incstack = 0
 20871  016D3A  8CF2               	bsf	intcon,6,c	;volatile
 20872                           
 20873                           ;ISR.c: 30: INTCONbits.GIE = 1;
 20874  016D3C  8EF2               	bsf	intcon,7,c	;volatile
 20875                           
 20876                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 20877  016D3E  88F2               	bsf	intcon,4,c	;volatile
 20878                           
 20879                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 20880  016D40  92F2               	bcf	intcon,1,c	;volatile
 20881  016D42  0012               	return		;funcret
 20882  016D44                     __end_of_ISR_Enable:
 20883                           	opt stack 0
 20884                           tosu	equ	0xFFF
 20885                           tosh	equ	0xFFE
 20886                           tosl	equ	0xFFD
 20887                           pclath	equ	0xFFA
 20888                           tblptru	equ	0xFF8
 20889                           tblptrh	equ	0xFF7
 20890                           tblptrl	equ	0xFF6
 20891                           tablat	equ	0xFF5
 20892                           prodh	equ	0xFF4
 20893                           prodl	equ	0xFF3
 20894                           intcon	equ	0xFF2
 20895                           postinc0	equ	0xFEE
 20896                           wreg	equ	0xFE8
 20897                           indf1	equ	0xFE7
 20898                           postdec1	equ	0xFE5
 20899                           fsr1h	equ	0xFE2
 20900                           fsr1l	equ	0xFE1
 20901                           indf2	equ	0xFDF
 20902                           postinc2	equ	0xFDE
 20903                           postdec2	equ	0xFDD
 20904                           plusw2	equ	0xFDB
 20905                           fsr2h	equ	0xFDA
 20906                           fsr2l	equ	0xFD9
 20907                           status	equ	0xFD8
 20908                           
 20909 ;; *************** function _HMI_Init *****************
 20910 ;; Defined at:
 20911 ;;		line 104 in file "HMI.c"
 20912 ;; Parameters:    Size  Location     Type
 20913 ;;		None
 20914 ;; Auto vars:     Size  Location     Type
 20915 ;;  in              2   59[BANK0 ] unsigned short 
 20916 ;; Return value:  Size  Location     Type
 20917 ;;                  1    wreg      void 
 20918 ;; Registers used:
 20919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20920 ;; Tracked objects:
 20921 ;;		On entry : 0/0
 20922 ;;		On exit  : 0/0
 20923 ;;		Unchanged: 0/0
 20924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20929 ;;Total ram usage:        2 bytes
 20930 ;; Hardware stack levels used:    1
 20931 ;; Hardware stack levels required when called:   16
 20932 ;; This function calls:
 20933 ;;		_Button_Init
 20934 ;;		_SPI_Init
 20935 ;;		_SPI_MinSpeed
 20936 ;; This function is called by:
 20937 ;;		_init
 20938 ;; This function uses a non-reentrant model
 20939 ;;
 20940                           
 20941                           	psect	text96
 20942  0125DA                     __ptext96:
 20943                           	opt stack 0
 20944  0125DA                     _HMI_Init:
 20945                           	opt stack 13
 20946                           
 20947                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 20948                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 20949                           
 20950                           ;incstack = 0
 20951  0125DA  0E72               	movlw	low (_HMIBoard+48)
 20952  0125DC  0101               	movlb	1	; () banked
 20953  0125DE  6F00               	movwf	Button_Init@pInput& (0+255),b
 20954  0125E0  0E03               	movlw	high (_HMIBoard+48)
 20955  0125E2  0101               	movlb	1	; () banked
 20956  0125E4  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20957  0125E6  0E00               	movlw	0
 20958  0125E8  0101               	movlb	1	; () banked
 20959  0125EA  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20960  0125EC  0E02               	movlw	2
 20961  0125EE  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20962  0125F0  0E74               	movlw	low _HMI_InitButtons
 20963  0125F2  0101               	movlb	1	; () banked
 20964  0125F4  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20965  0125F6  0E6D               	movlw	high _HMI_InitButtons
 20966  0125F8  0101               	movlb	1	; () banked
 20967  0125FA  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20968  0125FC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20969  0125FE  0101               	movlb	1	; () banked
 20970  012600  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20971  012602  0EBC               	movlw	low _HMI_DIPSwitch
 20972  012604  0101               	movlb	1	; () banked
 20973  012606  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20974  012608  0E6B               	movlw	high _HMI_DIPSwitch
 20975  01260A  0101               	movlb	1	; () banked
 20976  01260C  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20977  01260E  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 20978  012610  0101               	movlb	1	; () banked
 20979  012612  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20980  012614  0E04               	movlw	low _Event_NULL
 20981  012616  0101               	movlb	1	; () banked
 20982  012618  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20983  01261A  0E14               	movlw	high _Event_NULL
 20984  01261C  0101               	movlb	1	; () banked
 20985  01261E  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20986  012620  0E00               	movlw	low (_Event_NULL shr (0+16))
 20987  012622  0101               	movlb	1	; () banked
 20988  012624  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20989  012626  ECC1  F0A1         	call	_Button_Init	;wreg free
 20990                           
 20991                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 20992                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 20993  01262A  0E54               	movlw	low (_HMIBoard+18)
 20994  01262C  0101               	movlb	1	; () banked
 20995  01262E  6F00               	movwf	Button_Init@pInput& (0+255),b
 20996  012630  0E03               	movlw	high (_HMIBoard+18)
 20997  012632  0101               	movlb	1	; () banked
 20998  012634  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20999  012636  0E00               	movlw	0
 21000  012638  0101               	movlb	1	; () banked
 21001  01263A  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21002  01263C  0E02               	movlw	2
 21003  01263E  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21004  012640  0E74               	movlw	low _HMI_InitButtons
 21005  012642  0101               	movlb	1	; () banked
 21006  012644  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21007  012646  0E6D               	movlw	high _HMI_InitButtons
 21008  012648  0101               	movlb	1	; () banked
 21009  01264A  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21010  01264C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21011  01264E  0101               	movlb	1	; () banked
 21012  012650  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21013  012652  0E1C               	movlw	low _HMI_LeftSwitch
 21014  012654  0101               	movlb	1	; () banked
 21015  012656  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21016  012658  0E6C               	movlw	high _HMI_LeftSwitch
 21017  01265A  0101               	movlb	1	; () banked
 21018  01265C  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21019  01265E  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 21020  012660  0101               	movlb	1	; () banked
 21021  012662  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21022  012664  0E04               	movlw	low _Event_NULL
 21023  012666  0101               	movlb	1	; () banked
 21024  012668  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21025  01266A  0E14               	movlw	high _Event_NULL
 21026  01266C  0101               	movlb	1	; () banked
 21027  01266E  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21028  012670  0E00               	movlw	low (_Event_NULL shr (0+16))
 21029  012672  0101               	movlb	1	; () banked
 21030  012674  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21031  012676  ECC1  F0A1         	call	_Button_Init	;wreg free
 21032                           
 21033                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 21034                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 21035  01267A  0E4A               	movlw	low (_HMIBoard+8)
 21036  01267C  0101               	movlb	1	; () banked
 21037  01267E  6F00               	movwf	Button_Init@pInput& (0+255),b
 21038  012680  0E03               	movlw	high (_HMIBoard+8)
 21039  012682  0101               	movlb	1	; () banked
 21040  012684  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21041  012686  0E00               	movlw	0
 21042  012688  0101               	movlb	1	; () banked
 21043  01268A  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21044  01268C  0E02               	movlw	2
 21045  01268E  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21046  012690  0E74               	movlw	low _HMI_InitButtons
 21047  012692  0101               	movlb	1	; () banked
 21048  012694  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21049  012696  0E6D               	movlw	high _HMI_InitButtons
 21050  012698  0101               	movlb	1	; () banked
 21051  01269A  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21052  01269C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21053  01269E  0101               	movlb	1	; () banked
 21054  0126A0  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21055  0126A2  0E04               	movlw	low _HMI_RightSwitch
 21056  0126A4  0101               	movlb	1	; () banked
 21057  0126A6  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21058  0126A8  0E6C               	movlw	high _HMI_RightSwitch
 21059  0126AA  0101               	movlb	1	; () banked
 21060  0126AC  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21061  0126AE  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 21062  0126B0  0101               	movlb	1	; () banked
 21063  0126B2  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21064  0126B4  0E04               	movlw	low _Event_NULL
 21065  0126B6  0101               	movlb	1	; () banked
 21066  0126B8  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21067  0126BA  0E14               	movlw	high _Event_NULL
 21068  0126BC  0101               	movlb	1	; () banked
 21069  0126BE  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21070  0126C0  0E00               	movlw	low (_Event_NULL shr (0+16))
 21071  0126C2  0101               	movlb	1	; () banked
 21072  0126C4  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21073  0126C6  ECC1  F0A1         	call	_Button_Init	;wreg free
 21074                           
 21075                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 21076                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 21077  0126CA  0E5E               	movlw	low (_HMIBoard+28)
 21078  0126CC  0101               	movlb	1	; () banked
 21079  0126CE  6F00               	movwf	Button_Init@pInput& (0+255),b
 21080  0126D0  0E03               	movlw	high (_HMIBoard+28)
 21081  0126D2  0101               	movlb	1	; () banked
 21082  0126D4  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21083  0126D6  0E00               	movlw	0
 21084  0126D8  0101               	movlb	1	; () banked
 21085  0126DA  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21086  0126DC  0E02               	movlw	2
 21087  0126DE  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21088  0126E0  0E74               	movlw	low _HMI_InitButtons
 21089  0126E2  0101               	movlb	1	; () banked
 21090  0126E4  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21091  0126E6  0E6D               	movlw	high _HMI_InitButtons
 21092  0126E8  0101               	movlb	1	; () banked
 21093  0126EA  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21094  0126EC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21095  0126EE  0101               	movlb	1	; () banked
 21096  0126F0  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21097  0126F2  0EEC               	movlw	low _HMI_UpSwitch
 21098  0126F4  0101               	movlb	1	; () banked
 21099  0126F6  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21100  0126F8  0E6B               	movlw	high _HMI_UpSwitch
 21101  0126FA  0101               	movlb	1	; () banked
 21102  0126FC  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21103  0126FE  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 21104  012700  0101               	movlb	1	; () banked
 21105  012702  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21106  012704  0E04               	movlw	low _Event_NULL
 21107  012706  0101               	movlb	1	; () banked
 21108  012708  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21109  01270A  0E14               	movlw	high _Event_NULL
 21110  01270C  0101               	movlb	1	; () banked
 21111  01270E  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21112  012710  0E00               	movlw	low (_Event_NULL shr (0+16))
 21113  012712  0101               	movlb	1	; () banked
 21114  012714  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21115  012716  ECC1  F0A1         	call	_Button_Init	;wreg free
 21116                           
 21117                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 21118                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 21119  01271A  0E68               	movlw	low (_HMIBoard+38)
 21120  01271C  0101               	movlb	1	; () banked
 21121  01271E  6F00               	movwf	Button_Init@pInput& (0+255),b
 21122  012720  0E03               	movlw	high (_HMIBoard+38)
 21123  012722  0101               	movlb	1	; () banked
 21124  012724  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21125  012726  0E00               	movlw	0
 21126  012728  0101               	movlb	1	; () banked
 21127  01272A  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21128  01272C  0E02               	movlw	2
 21129  01272E  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21130  012730  0E74               	movlw	low _HMI_InitButtons
 21131  012732  0101               	movlb	1	; () banked
 21132  012734  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21133  012736  0E6D               	movlw	high _HMI_InitButtons
 21134  012738  0101               	movlb	1	; () banked
 21135  01273A  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21136  01273C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21137  01273E  0101               	movlb	1	; () banked
 21138  012740  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21139  012742  0ED4               	movlw	low _HMI_DownSwitch
 21140  012744  0101               	movlb	1	; () banked
 21141  012746  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21142  012748  0E6B               	movlw	high _HMI_DownSwitch
 21143  01274A  0101               	movlb	1	; () banked
 21144  01274C  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21145  01274E  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 21146  012750  0101               	movlb	1	; () banked
 21147  012752  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21148  012754  0E04               	movlw	low _Event_NULL
 21149  012756  0101               	movlb	1	; () banked
 21150  012758  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21151  01275A  0E14               	movlw	high _Event_NULL
 21152  01275C  0101               	movlb	1	; () banked
 21153  01275E  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21154  012760  0E00               	movlw	low (_Event_NULL shr (0+16))
 21155  012762  0101               	movlb	1	; () banked
 21156  012764  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21157  012766  ECC1  F0A1         	call	_Button_Init	;wreg free
 21158                           
 21159                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 21160  01276A  0EA0               	movlw	160
 21161  01276C  0100               	movlb	0	; () banked
 21162  01276E  6FE6               	movwf	SPI_Init@pClock& (0+255),b
 21163  012770  0E86               	movlw	134
 21164  012772  6FE7               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21165  012774  0E01               	movlw	1
 21166  012776  6FE8               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21167  012778  0E00               	movlw	0
 21168  01277A  6FE9               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21169  01277C  0E00               	movlw	0
 21170  01277E  0100               	movlb	0	; () banked
 21171  012780  6FEA               	movwf	SPI_Init@pChannel& (0+255),b
 21172  012782  0E02               	movlw	2
 21173  012784  0100               	movlb	0	; () banked
 21174  012786  6FEB               	movwf	SPI_Init@pMode& (0+255),b
 21175  012788  ECAD  F086         	call	_SPI_Init	;wreg free
 21176                           
 21177                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 21178  01278C  0E7C               	movlw	low _SPI1
 21179  01278E  0100               	movlb	0	; () banked
 21180  012790  6FC8               	movwf	SPI_MinSpeed@pInput& (0+255),b
 21181  012792  0E03               	movlw	high _SPI1
 21182  012794  0100               	movlb	0	; () banked
 21183  012796  6FC9               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 21184  012798  EC0D  F0AD         	call	_SPI_MinSpeed	;wreg free
 21185                           
 21186                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 21187  01279C  0E00               	movlw	0
 21188  01279E  0100               	movlb	0	; () banked
 21189  0127A0  6FF5               	movwf	(HMI_Init@in+1)& (0+255),b
 21190  0127A2  0E00               	movlw	0
 21191  0127A4  6FF4               	movwf	HMI_Init@in& (0+255),b
 21192  0127A6                     l14761:
 21193                           
 21194                           ; BSR set to: 0
 21195  0127A6  0100               	movlb	0	; () banked
 21196  0127A8  51F5               	movf	(HMI_Init@in+1)& (0+255),w,b
 21197  0127AA  E113               	bnz	l1153
 21198  0127AC  0E08               	movlw	8
 21199  0127AE  0100               	movlb	0	; () banked
 21200  0127B0  5DF4               	subwf	HMI_Init@in& (0+255),w,b
 21201  0127B2  B0D8               	btfsc	status,0,c
 21202  0127B4  0012               	return	
 21203                           
 21204                           ; BSR set to: 0
 21205                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 21206                           
 21207                           ; BSR set to: 0
 21208                           
 21209                           ; BSR set to: 0
 21210  0127B6  0E42               	movlw	low _HMIBoard
 21211  0127B8  0100               	movlb	0	; () banked
 21212  0127BA  25F4               	addwf	HMI_Init@in& (0+255),w,b
 21213  0127BC  6ED9               	movwf	fsr2l,c
 21214  0127BE  0E03               	movlw	high _HMIBoard
 21215  0127C0  0100               	movlb	0	; () banked
 21216  0127C2  21F5               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 21217  0127C4  6EDA               	movwf	fsr2h,c
 21218  0127C6  0E00               	movlw	0
 21219  0127C8  6EDF               	movwf	indf2,c
 21220                           
 21221                           ; BSR set to: 0
 21222  0127CA  0100               	movlb	0	; () banked
 21223  0127CC  4BF4               	infsnz	HMI_Init@in& (0+255),f,b
 21224  0127CE  2BF5               	incf	(HMI_Init@in+1)& (0+255),f,b
 21225  0127D0  D7EA               	goto	l14761
 21226  0127D2                     l1153:
 21227                           
 21228                           ; BSR set to: 0
 21229  0127D2  0012               	return		;funcret
 21230  0127D4                     __end_of_HMI_Init:
 21231                           	opt stack 0
 21232                           tosu	equ	0xFFF
 21233                           tosh	equ	0xFFE
 21234                           tosl	equ	0xFFD
 21235                           pclath	equ	0xFFA
 21236                           tblptru	equ	0xFF8
 21237                           tblptrh	equ	0xFF7
 21238                           tblptrl	equ	0xFF6
 21239                           tablat	equ	0xFF5
 21240                           prodh	equ	0xFF4
 21241                           prodl	equ	0xFF3
 21242                           intcon	equ	0xFF2
 21243                           postinc0	equ	0xFEE
 21244                           wreg	equ	0xFE8
 21245                           indf1	equ	0xFE7
 21246                           postdec1	equ	0xFE5
 21247                           fsr1h	equ	0xFE2
 21248                           fsr1l	equ	0xFE1
 21249                           indf2	equ	0xFDF
 21250                           postinc2	equ	0xFDE
 21251                           postdec2	equ	0xFDD
 21252                           plusw2	equ	0xFDB
 21253                           fsr2h	equ	0xFDA
 21254                           fsr2l	equ	0xFD9
 21255                           status	equ	0xFD8
 21256                           
 21257 ;; *************** function _SPI_MinSpeed *****************
 21258 ;; Defined at:
 21259 ;;		line 190 in file "Library/SPI.c"
 21260 ;; Parameters:    Size  Location     Type
 21261 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21262 ;;		 -> SPI1(11), 
 21263 ;; Auto vars:     Size  Location     Type
 21264 ;;		None
 21265 ;; Return value:  Size  Location     Type
 21266 ;;                  1    wreg      void 
 21267 ;; Registers used:
 21268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21269 ;; Tracked objects:
 21270 ;;		On entry : 0/0
 21271 ;;		On exit  : 0/0
 21272 ;;		Unchanged: 0/0
 21273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21274 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21278 ;;Total ram usage:        2 bytes
 21279 ;; Hardware stack levels used:    1
 21280 ;; Hardware stack levels required when called:    9
 21281 ;; This function calls:
 21282 ;;		_Byte_SetBit
 21283 ;;		_Byte_SetQuad
 21284 ;; This function is called by:
 21285 ;;		_HMI_Init
 21286 ;; This function uses a non-reentrant model
 21287 ;;
 21288                           
 21289                           	psect	text97
 21290  015A1A                     __ptext97:
 21291                           	opt stack 0
 21292  015A1A                     _SPI_MinSpeed:
 21293                           	opt stack 19
 21294                           
 21295                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;incstack = 0
 21299  015A1A  0100               	movlb	0	; () banked
 21300  015A1C  EE20 F006          	lfsr	2,6
 21301  015A20  51C8               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21302  015A22  26D9               	addwf	fsr2l,f,c
 21303  015A24  51C9               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21304  015A26  22DA               	addwfc	fsr2h,f,c
 21305  015A28  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21306  015A2C  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21307  015A30  0E05               	movlw	5
 21308  015A32  0100               	movlb	0	; () banked
 21309  015A34  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21310  015A36  0E00               	movlw	0
 21311  015A38  0100               	movlb	0	; () banked
 21312  015A3A  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21313  015A3C  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21314                           
 21315                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 21316  015A40  0100               	movlb	0	; () banked
 21317  015A42  EE20 F006          	lfsr	2,6
 21318  015A46  51C8               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21319  015A48  26D9               	addwf	fsr2l,f,c
 21320  015A4A  51C9               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21321  015A4C  22DA               	addwfc	fsr2h,f,c
 21322  015A4E  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 21323  015A52  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 21324  015A56  0E00               	movlw	0
 21325  015A58  0100               	movlb	0	; () banked
 21326  015A5A  6FC6               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21327  015A5C  0E02               	movlw	2
 21328  015A5E  0100               	movlb	0	; () banked
 21329  015A60  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 21330  015A62  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 21331                           
 21332                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21333  015A66  0100               	movlb	0	; () banked
 21334  015A68  EE20 F006          	lfsr	2,6
 21335  015A6C  51C8               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21336  015A6E  26D9               	addwf	fsr2l,f,c
 21337  015A70  51C9               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21338  015A72  22DA               	addwfc	fsr2h,f,c
 21339  015A74  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21340  015A78  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21341  015A7C  0E05               	movlw	5
 21342  015A7E  0100               	movlb	0	; () banked
 21343  015A80  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21344  015A82  0E01               	movlw	1
 21345  015A84  0100               	movlb	0	; () banked
 21346  015A86  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21347  015A88  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21348  015A8C  0012               	return		;funcret
 21349  015A8E                     __end_of_SPI_MinSpeed:
 21350                           	opt stack 0
 21351                           tosu	equ	0xFFF
 21352                           tosh	equ	0xFFE
 21353                           tosl	equ	0xFFD
 21354                           pclath	equ	0xFFA
 21355                           tblptru	equ	0xFF8
 21356                           tblptrh	equ	0xFF7
 21357                           tblptrl	equ	0xFF6
 21358                           tablat	equ	0xFF5
 21359                           prodh	equ	0xFF4
 21360                           prodl	equ	0xFF3
 21361                           intcon	equ	0xFF2
 21362                           postinc0	equ	0xFEE
 21363                           wreg	equ	0xFE8
 21364                           indf1	equ	0xFE7
 21365                           postdec1	equ	0xFE5
 21366                           fsr1h	equ	0xFE2
 21367                           fsr1l	equ	0xFE1
 21368                           indf2	equ	0xFDF
 21369                           postinc2	equ	0xFDE
 21370                           postdec2	equ	0xFDD
 21371                           plusw2	equ	0xFDB
 21372                           fsr2h	equ	0xFDA
 21373                           fsr2l	equ	0xFD9
 21374                           status	equ	0xFD8
 21375                           
 21376 ;; *************** function _SPI_Init *****************
 21377 ;; Defined at:
 21378 ;;		line 12 in file "Library/SPI.c"
 21379 ;; Parameters:    Size  Location     Type
 21380 ;;  pClock          4   45[BANK0 ] unsigned long 
 21381 ;;  pChannel        1   49[BANK0 ] enum E6744
 21382 ;;  pMode           1   50[BANK0 ] enum E6748
 21383 ;; Auto vars:     Size  Location     Type
 21384 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 21385 ;;		 -> SPI1(11), SPI2(11), 
 21386 ;; Return value:  Size  Location     Type
 21387 ;;                  1    wreg      void 
 21388 ;; Registers used:
 21389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21390 ;; Tracked objects:
 21391 ;;		On entry : 0/0
 21392 ;;		On exit  : 0/0
 21393 ;;		Unchanged: 0/0
 21394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21395 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21398 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21399 ;;Total ram usage:        8 bytes
 21400 ;; Hardware stack levels used:    1
 21401 ;; Hardware stack levels required when called:   12
 21402 ;; This function calls:
 21403 ;;		_Byte_SetBit
 21404 ;;		_Byte_SetQuad
 21405 ;;		_Port_SetPinType
 21406 ;;		_SPI_DCS
 21407 ;;		_SPI_DisableISR
 21408 ;;		_Timer2_Init
 21409 ;; This function is called by:
 21410 ;;		_Configure_GPIOs
 21411 ;;		_HMI_Init
 21412 ;; This function uses a non-reentrant model
 21413 ;;
 21414                           
 21415                           	psect	text98
 21416  010D5A                     __ptext98:
 21417                           	opt stack 0
 21418  010D5A                     _SPI_Init:
 21419                           	opt stack 15
 21420                           
 21421                           ;SPI.c: 14: SPIPtr pInput;
 21422                           ;SPI.c: 16: switch (pChannel)
 21423                           
 21424                           ;incstack = 0
 21425  010D5A  D00C               	goto	l597
 21426  010D5C                     
 21427                           ;SPI.c: 19: pInput = &SPI1;
 21428  010D5C  0E7C               	movlw	low _SPI1
 21429  010D5E  0100               	movlb	0	; () banked
 21430  010D60  6FEC               	movwf	SPI_Init@pInput& (0+255),b
 21431  010D62  0E03               	movlw	high _SPI1
 21432  010D64  D004               	goto	L13
 21433  010D66                     
 21434                           ; BSR set to: 0
 21435                           ;SPI.c: 22: pInput = &SPI2;
 21436                           
 21437                           ; BSR set to: 0
 21438  010D66  0E87               	movlw	low _SPI2
 21439  010D68  0100               	movlb	0	; () banked
 21440  010D6A  6FEC               	movwf	SPI_Init@pInput& (0+255),b
 21441  010D6C  0E03               	movlw	high _SPI2
 21442  010D6E                     L13:
 21443  010D6E  0100               	movlb	0	; () banked
 21444  010D70  6FED               	movwf	(SPI_Init@pInput+1)& (0+255),b
 21445                           
 21446                           ; BSR set to: 0
 21447                           ;SPI.c: 24: };
 21448                           
 21449                           ;SPI.c: 23: break;
 21450  010D72  D008               	goto	l599
 21451  010D74                     l597:
 21452                           
 21453                           ; BSR set to: 0
 21454  010D74  0100               	movlb	0	; () banked
 21455  010D76  51EA               	movf	SPI_Init@pChannel& (0+255),w,b
 21456                           
 21457                           ; Switch size 1, requested type "space"
 21458                           ; Number of cases is 2, Range of values is 0 to 1
 21459                           ; switch strategies available:
 21460                           ; Name         Instructions Cycles
 21461                           ; simple_byte            7     4 (average)
 21462                           ;	Chosen strategy is simple_byte
 21463  010D78  0A00               	xorlw	0	; case 0
 21464  010D7A  B4D8               	btfsc	status,2,c
 21465  010D7C  D7EF               	goto	l598
 21466  010D7E  0A01               	xorlw	1	; case 1
 21467  010D80  B4D8               	btfsc	status,2,c
 21468  010D82  D7F1               	goto	l600
 21469  010D84                     l599:
 21470                           
 21471                           ; BSR set to: 0
 21472                           ;SPI.c: 26: pInput->mChannel = pChannel;
 21473                           
 21474                           ; BSR set to: 0
 21475  010D84  0100               	movlb	0	; () banked
 21476  010D86  EE20 F002          	lfsr	2,2
 21477  010D8A  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21478  010D8C  26D9               	addwf	fsr2l,f,c
 21479  010D8E  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21480  010D90  22DA               	addwfc	fsr2h,f,c
 21481  010D92  C0EA  FFDF         	movff	SPI_Init@pChannel,indf2
 21482                           
 21483                           ;SPI.c: 35: switch (pChannel)
 21484  010D96  D0B1               	goto	l601
 21485  010D98                     
 21486                           ; BSR set to: 0
 21487                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 21488                           
 21489                           ; BSR set to: 0
 21490  010D98  0EA4               	movlw	low _PortC
 21491  010D9A  0100               	movlb	0	; () banked
 21492  010D9C  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21493  010D9E  0E00               	movlw	high _PortC
 21494  010DA0  0100               	movlb	0	; () banked
 21495  010DA2  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21496  010DA4  0E02               	movlw	2
 21497  010DA6  0100               	movlb	0	; () banked
 21498  010DA8  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21499  010DAA  0E03               	movlw	3
 21500  010DAC  0100               	movlb	0	; () banked
 21501  010DAE  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21502  010DB0  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21503                           
 21504                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 21505  010DB4  0EA4               	movlw	low _PortC
 21506  010DB6  0100               	movlb	0	; () banked
 21507  010DB8  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21508  010DBA  0E00               	movlw	high _PortC
 21509  010DBC  0100               	movlb	0	; () banked
 21510  010DBE  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21511  010DC0  0E03               	movlw	3
 21512  010DC2  0100               	movlb	0	; () banked
 21513  010DC4  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21514  010DC6  0E03               	movlw	3
 21515  010DC8  0100               	movlb	0	; () banked
 21516  010DCA  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21517  010DCC  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21518                           
 21519                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 21520  010DD0  0EA4               	movlw	low _PortC
 21521  010DD2  0100               	movlb	0	; () banked
 21522  010DD4  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21523  010DD6  0E00               	movlw	high _PortC
 21524  010DD8  0100               	movlb	0	; () banked
 21525  010DDA  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21526  010DDC  0E05               	movlw	5
 21527  010DDE  0100               	movlb	0	; () banked
 21528  010DE0  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21529  010DE2  0E03               	movlw	3
 21530  010DE4  0100               	movlb	0	; () banked
 21531  010DE6  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21532  010DE8  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21533                           
 21534                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 21535  010DEC  0EA4               	movlw	low _PortC
 21536  010DEE  0100               	movlb	0	; () banked
 21537  010DF0  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21538  010DF2  0E00               	movlw	high _PortC
 21539  010DF4  0100               	movlb	0	; () banked
 21540  010DF6  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21541  010DF8  0E04               	movlw	4
 21542  010DFA  0100               	movlb	0	; () banked
 21543  010DFC  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21544  010DFE  0E00               	movlw	0
 21545  010E00  0100               	movlb	0	; () banked
 21546  010E02  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21547  010E04  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21548                           
 21549                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 21550  010E08  0100               	movlb	0	; () banked
 21551  010E0A  EE20 F003          	lfsr	2,3
 21552  010E0E  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21553  010E10  26D9               	addwf	fsr2l,f,c
 21554  010E12  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21555  010E14  22DA               	addwfc	fsr2h,f,c
 21556  010E16  0EC7               	movlw	199
 21557  010E18  6EDE               	movwf	postinc2,c
 21558  010E1A  0E0F               	movlw	15
 21559  010E1C  6EDD               	movwf	postdec2,c
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 21563  010E1E  0100               	movlb	0	; () banked
 21564  010E20  EE20 F006          	lfsr	2,6
 21565  010E24  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21566  010E26  26D9               	addwf	fsr2l,f,c
 21567  010E28  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21568  010E2A  22DA               	addwfc	fsr2h,f,c
 21569  010E2C  0EC6               	movlw	198
 21570  010E2E  6EDE               	movwf	postinc2,c
 21571  010E30  0E0F               	movlw	15
 21572  010E32  6EDD               	movwf	postdec2,c
 21573                           
 21574                           ; BSR set to: 0
 21575                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 21576  010E34  0100               	movlb	0	; () banked
 21577  010E36  EE20 F009          	lfsr	2,9
 21578  010E3A  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21579  010E3C  26D9               	addwf	fsr2l,f,c
 21580  010E3E  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21581  010E40  22DA               	addwfc	fsr2h,f,c
 21582  010E42  0EC9               	movlw	201
 21583  010E44  D056               	goto	L14
 21584  010E46                     
 21585                           ; BSR set to: 0
 21586                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 21587                           
 21588                           ; BSR set to: 0
 21589  010E46  0E9A               	movlw	low _PortD
 21590  010E48  0100               	movlb	0	; () banked
 21591  010E4A  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21592  010E4C  0E00               	movlw	high _PortD
 21593  010E4E  0100               	movlb	0	; () banked
 21594  010E50  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21595  010E52  0E07               	movlw	7
 21596  010E54  0100               	movlb	0	; () banked
 21597  010E56  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21598  010E58  0E03               	movlw	3
 21599  010E5A  0100               	movlb	0	; () banked
 21600  010E5C  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21601  010E5E  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21602                           
 21603                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 21604  010E62  0E9A               	movlw	low _PortD
 21605  010E64  0100               	movlb	0	; () banked
 21606  010E66  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21607  010E68  0E00               	movlw	high _PortD
 21608  010E6A  0100               	movlb	0	; () banked
 21609  010E6C  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21610  010E6E  0E06               	movlw	6
 21611  010E70  0100               	movlb	0	; () banked
 21612  010E72  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21613  010E74  0E03               	movlw	3
 21614  010E76  0100               	movlb	0	; () banked
 21615  010E78  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21616  010E7A  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21617                           
 21618                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 21619  010E7E  0E9A               	movlw	low _PortD
 21620  010E80  0100               	movlb	0	; () banked
 21621  010E82  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21622  010E84  0E00               	movlw	high _PortD
 21623  010E86  0100               	movlb	0	; () banked
 21624  010E88  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21625  010E8A  0E04               	movlw	4
 21626  010E8C  0100               	movlb	0	; () banked
 21627  010E8E  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21628  010E90  0E03               	movlw	3
 21629  010E92  0100               	movlb	0	; () banked
 21630  010E94  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21631  010E96  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21632                           
 21633                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 21634  010E9A  0E9A               	movlw	low _PortD
 21635  010E9C  0100               	movlb	0	; () banked
 21636  010E9E  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 21637  010EA0  0E00               	movlw	high _PortD
 21638  010EA2  0100               	movlb	0	; () banked
 21639  010EA4  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21640  010EA6  0E05               	movlw	5
 21641  010EA8  0100               	movlb	0	; () banked
 21642  010EAA  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 21643  010EAC  0E00               	movlw	0
 21644  010EAE  0100               	movlb	0	; () banked
 21645  010EB0  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 21646  010EB2  ECB2  F095         	call	_Port_SetPinType	;wreg free
 21647                           
 21648                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 21649  010EB6  0100               	movlb	0	; () banked
 21650  010EB8  EE20 F003          	lfsr	2,3
 21651  010EBC  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21652  010EBE  26D9               	addwf	fsr2l,f,c
 21653  010EC0  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21654  010EC2  22DA               	addwfc	fsr2h,f,c
 21655  010EC4  0E6D               	movlw	109
 21656  010EC6  6EDE               	movwf	postinc2,c
 21657  010EC8  0E0F               	movlw	15
 21658  010ECA  6EDD               	movwf	postdec2,c
 21659                           
 21660                           ; BSR set to: 0
 21661                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 21662  010ECC  0100               	movlb	0	; () banked
 21663  010ECE  EE20 F006          	lfsr	2,6
 21664  010ED2  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21665  010ED4  26D9               	addwf	fsr2l,f,c
 21666  010ED6  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21667  010ED8  22DA               	addwfc	fsr2h,f,c
 21668  010EDA  0E6C               	movlw	108
 21669  010EDC  6EDE               	movwf	postinc2,c
 21670  010EDE  0E0F               	movlw	15
 21671  010EE0  6EDD               	movwf	postdec2,c
 21672                           
 21673                           ; BSR set to: 0
 21674                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 21675  010EE2  0100               	movlb	0	; () banked
 21676  010EE4  EE20 F009          	lfsr	2,9
 21677  010EE8  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21678  010EEA  26D9               	addwf	fsr2l,f,c
 21679  010EEC  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21680  010EEE  22DA               	addwfc	fsr2h,f,c
 21681  010EF0  0E6F               	movlw	111
 21682  010EF2                     L14:
 21683  010EF2  6EDE               	movwf	postinc2,c
 21684  010EF4  0E0F               	movlw	15
 21685  010EF6  6EDD               	movwf	postdec2,c
 21686                           
 21687                           ;SPI.c: 68: break;
 21688  010EF8  D009               	goto	l603
 21689  010EFA                     l601:
 21690                           
 21691                           ; BSR set to: 0
 21692                           
 21693                           ; BSR set to: 0
 21694  010EFA  0100               	movlb	0	; () banked
 21695  010EFC  51EA               	movf	SPI_Init@pChannel& (0+255),w,b
 21696                           
 21697                           ; Switch size 1, requested type "space"
 21698                           ; Number of cases is 2, Range of values is 0 to 1
 21699                           ; switch strategies available:
 21700                           ; Name         Instructions Cycles
 21701                           ; simple_byte            7     4 (average)
 21702                           ;	Chosen strategy is simple_byte
 21703  010EFE  0A00               	xorlw	0	; case 0
 21704  010F00  B4D8               	btfsc	status,2,c
 21705  010F02  D74A               	goto	l602
 21706  010F04  0A01               	xorlw	1	; case 1
 21707  010F06  A4D8               	btfss	status,2,c
 21708  010F08  0012               	return	
 21709  010F0A  D79D               	goto	l604
 21710  010F0C                     l603:
 21711                           
 21712                           ; BSR set to: 0
 21713                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21714                           
 21715                           ; BSR set to: 0
 21716  010F0C  0100               	movlb	0	; () banked
 21717  010F0E  EE20 F006          	lfsr	2,6
 21718  010F12  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21719  010F14  26D9               	addwf	fsr2l,f,c
 21720  010F16  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21721  010F18  22DA               	addwfc	fsr2h,f,c
 21722  010F1A  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21723  010F1E  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21724  010F22  0E05               	movlw	5
 21725  010F24  0100               	movlb	0	; () banked
 21726  010F26  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21727  010F28  0E00               	movlw	0
 21728  010F2A  0100               	movlb	0	; () banked
 21729  010F2C  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21730  010F2E  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21731                           
 21732                           ;SPI.c: 77: switch(pMode)
 21733  010F32  D09C               	goto	l607
 21734  010F34                     
 21735                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 21736  010F34  0100               	movlb	0	; () banked
 21737  010F36  EE20 F006          	lfsr	2,6
 21738  010F3A  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21739  010F3C  26D9               	addwf	fsr2l,f,c
 21740  010F3E  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21741  010F40  22DA               	addwfc	fsr2h,f,c
 21742  010F42  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21743  010F46  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21744  010F4A  0E04               	movlw	4
 21745  010F4C  0100               	movlb	0	; () banked
 21746  010F4E  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21747  010F50  0E00               	movlw	0
 21748  010F52  0100               	movlb	0	; () banked
 21749  010F54  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21750  010F56  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21751                           
 21752                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 21753  010F5A  0100               	movlb	0	; () banked
 21754  010F5C  EE20 F003          	lfsr	2,3
 21755  010F60  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21756  010F62  26D9               	addwf	fsr2l,f,c
 21757  010F64  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21758  010F66  22DA               	addwfc	fsr2h,f,c
 21759  010F68  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21760  010F6C  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21761  010F70  0E06               	movlw	6
 21762  010F72  0100               	movlb	0	; () banked
 21763  010F74  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21764  010F76  0E00               	movlw	0
 21765  010F78  0100               	movlb	0	; () banked
 21766  010F7A  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21767  010F7C  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21768                           
 21769                           ;SPI.c: 82: break;
 21770  010F80  D084               	goto	l609
 21771  010F82                     
 21772                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 21773  010F82  0100               	movlb	0	; () banked
 21774  010F84  EE20 F006          	lfsr	2,6
 21775  010F88  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21776  010F8A  26D9               	addwf	fsr2l,f,c
 21777  010F8C  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21778  010F8E  22DA               	addwfc	fsr2h,f,c
 21779  010F90  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21780  010F94  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21781  010F98  0E04               	movlw	4
 21782  010F9A  0100               	movlb	0	; () banked
 21783  010F9C  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21784  010F9E  0E00               	movlw	0
 21785  010FA0  0100               	movlb	0	; () banked
 21786  010FA2  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21787  010FA4  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21788                           
 21789                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 21790  010FA8  0100               	movlb	0	; () banked
 21791  010FAA  EE20 F003          	lfsr	2,3
 21792  010FAE  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21793  010FB0  26D9               	addwf	fsr2l,f,c
 21794  010FB2  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21795  010FB4  22DA               	addwfc	fsr2h,f,c
 21796  010FB6  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21797  010FBA  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21798  010FBE  0E06               	movlw	6
 21799  010FC0  0100               	movlb	0	; () banked
 21800  010FC2  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21801  010FC4  0E01               	movlw	1
 21802  010FC6  0100               	movlb	0	; () banked
 21803  010FC8  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21804  010FCA  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21805                           
 21806                           ;SPI.c: 86: break;
 21807  010FCE  D05D               	goto	l609
 21808  010FD0                     
 21809                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 21810  010FD0  0100               	movlb	0	; () banked
 21811  010FD2  EE20 F006          	lfsr	2,6
 21812  010FD6  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21813  010FD8  26D9               	addwf	fsr2l,f,c
 21814  010FDA  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21815  010FDC  22DA               	addwfc	fsr2h,f,c
 21816  010FDE  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21817  010FE2  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21818  010FE6  0E04               	movlw	4
 21819  010FE8  0100               	movlb	0	; () banked
 21820  010FEA  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21821  010FEC  0E01               	movlw	1
 21822  010FEE  0100               	movlb	0	; () banked
 21823  010FF0  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21824  010FF2  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21825                           
 21826                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 21827  010FF6  0100               	movlb	0	; () banked
 21828  010FF8  EE20 F003          	lfsr	2,3
 21829  010FFC  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21830  010FFE  26D9               	addwf	fsr2l,f,c
 21831  011000  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21832  011002  22DA               	addwfc	fsr2h,f,c
 21833  011004  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21834  011008  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21835  01100C  0E06               	movlw	6
 21836  01100E  0100               	movlb	0	; () banked
 21837  011010  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21838  011012  0E00               	movlw	0
 21839  011014  0100               	movlb	0	; () banked
 21840  011016  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21841  011018  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21842                           
 21843                           ;SPI.c: 90: break;
 21844  01101C  D036               	goto	l609
 21845  01101E                     
 21846                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 21847  01101E  0100               	movlb	0	; () banked
 21848  011020  EE20 F006          	lfsr	2,6
 21849  011024  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21850  011026  26D9               	addwf	fsr2l,f,c
 21851  011028  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21852  01102A  22DA               	addwfc	fsr2h,f,c
 21853  01102C  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21854  011030  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21855  011034  0E04               	movlw	4
 21856  011036  0100               	movlb	0	; () banked
 21857  011038  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21858  01103A  0E01               	movlw	1
 21859  01103C  0100               	movlb	0	; () banked
 21860  01103E  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21861  011040  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21862                           
 21863                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 21864  011044  0100               	movlb	0	; () banked
 21865  011046  EE20 F003          	lfsr	2,3
 21866  01104A  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21867  01104C  26D9               	addwf	fsr2l,f,c
 21868  01104E  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21869  011050  22DA               	addwfc	fsr2h,f,c
 21870  011052  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21871  011056  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21872  01105A  0E06               	movlw	6
 21873  01105C  0100               	movlb	0	; () banked
 21874  01105E  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21875  011060  0E01               	movlw	1
 21876  011062  0100               	movlb	0	; () banked
 21877  011064  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21878  011066  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21879                           
 21880                           ;SPI.c: 94: break;
 21881  01106A  D00F               	goto	l609
 21882  01106C                     l607:
 21883  01106C  0100               	movlb	0	; () banked
 21884  01106E  51EB               	movf	SPI_Init@pMode& (0+255),w,b
 21885                           
 21886                           ; Switch size 1, requested type "space"
 21887                           ; Number of cases is 4, Range of values is 0 to 3
 21888                           ; switch strategies available:
 21889                           ; Name         Instructions Cycles
 21890                           ; simple_byte           13     7 (average)
 21891                           ;	Chosen strategy is simple_byte
 21892  011070  0A00               	xorlw	0	; case 0
 21893  011072  B4D8               	btfsc	status,2,c
 21894  011074  D75F               	goto	l608
 21895  011076  0A01               	xorlw	1	; case 1
 21896  011078  B4D8               	btfsc	status,2,c
 21897  01107A  D783               	goto	l610
 21898  01107C  0A03               	xorlw	3	; case 2
 21899  01107E  B4D8               	btfsc	status,2,c
 21900  011080  D7A7               	goto	l611
 21901  011082  0A01               	xorlw	1	; case 3
 21902  011084  A4D8               	btfss	status,2,c
 21903  011086  0012               	return	
 21904  011088  D7CA               	goto	l612
 21905  01108A                     l609:
 21906                           
 21907                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 21908                           
 21909                           ; BSR set to: 0
 21910  01108A  0100               	movlb	0	; () banked
 21911  01108C  EE20 F006          	lfsr	2,6
 21912  011090  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21913  011092  26D9               	addwf	fsr2l,f,c
 21914  011094  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21915  011096  22DA               	addwfc	fsr2h,f,c
 21916  011098  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21917  01109C  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21918  0110A0  0E07               	movlw	7
 21919  0110A2  0100               	movlb	0	; () banked
 21920  0110A4  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21921  0110A6  0E00               	movlw	0
 21922  0110A8  0100               	movlb	0	; () banked
 21923  0110AA  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21924  0110AC  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21925                           
 21926                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 21927  0110B0  0100               	movlb	0	; () banked
 21928  0110B2  EE20 F006          	lfsr	2,6
 21929  0110B6  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 21930  0110B8  26D9               	addwf	fsr2l,f,c
 21931  0110BA  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21932  0110BC  22DA               	addwfc	fsr2h,f,c
 21933  0110BE  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 21934  0110C2  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 21935  0110C6  0E06               	movlw	6
 21936  0110C8  0100               	movlb	0	; () banked
 21937  0110CA  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 21938  0110CC  0E00               	movlw	0
 21939  0110CE  0100               	movlb	0	; () banked
 21940  0110D0  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 21941  0110D2  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 21942                           
 21943                           ;SPI.c: 106: Timer2_Init(pClock);
 21944  0110D6  C0E6  F0C6         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 21945  0110DA  C0E7  F0C7         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 21946  0110DE  C0E8  F0C8         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 21947  0110E2  C0E9  F0C9         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 21948  0110E6  ECC9  F09B         	call	_Timer2_Init	;wreg free
 21949                           
 21950                           ;SPI.c: 112: SPI_DisableISR(pInput);
 21951  0110EA  C0EC  F0B9         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 21952  0110EE  C0ED  F0BA         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 21953  0110F2  ECAD  F0B4         	call	_SPI_DisableISR	;wreg free
 21954                           
 21955                           ;SPI.c: 116: switch (pChannel)
 21956  0110F6  D004               	goto	l614
 21957  0110F8                     l615:
 21958                           
 21959                           ; BSR set to: 0
 21960  0110F8  869F               	bsf	3999,3,c	;volatile
 21961  0110FA  D00B               	goto	l616
 21962  0110FC                     l617:
 21963                           
 21964                           ; BSR set to: 0
 21965  0110FC  8EA5               	bsf	4005,7,c	;volatile
 21966  0110FE  D009               	goto	l616
 21967  011100                     l614:
 21968                           
 21969                           ; BSR set to: 0
 21970  011100  0100               	movlb	0	; () banked
 21971  011102  51EA               	movf	SPI_Init@pChannel& (0+255),w,b
 21972                           
 21973                           ; Switch size 1, requested type "space"
 21974                           ; Number of cases is 2, Range of values is 0 to 1
 21975                           ; switch strategies available:
 21976                           ; Name         Instructions Cycles
 21977                           ; simple_byte            7     4 (average)
 21978                           ;	Chosen strategy is simple_byte
 21979  011104  0A00               	xorlw	0	; case 0
 21980  011106  B4D8               	btfsc	status,2,c
 21981  011108  D7F7               	goto	l615
 21982  01110A  0A01               	xorlw	1	; case 1
 21983  01110C  A4D8               	btfss	status,2,c
 21984  01110E  0012               	return	
 21985  011110  D7F5               	goto	l617
 21986  011112                     l616:
 21987                           
 21988                           ; BSR set to: 0
 21989                           ;SPI.c: 124: SPI_DCS(pInput);
 21990                           
 21991                           ; BSR set to: 0
 21992  011112  C0EC  F0B9         	movff	SPI_Init@pInput,SPI_DCS@pInput
 21993  011116  C0ED  F0BA         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 21994  01111A  EC0D  F0B4         	call	_SPI_DCS	;wreg free
 21995                           
 21996                           ;SPI.c: 126: pInput->mBusy = 0;
 21997  01111E  C0EC  FFD9         	movff	SPI_Init@pInput,fsr2l
 21998  011122  C0ED  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 21999  011126  0E00               	movlw	0
 22000  011128  6EDF               	movwf	indf2,c
 22001                           
 22002                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 22003  01112A  0100               	movlb	0	; () banked
 22004  01112C  EE20 F006          	lfsr	2,6
 22005  011130  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 22006  011132  26D9               	addwf	fsr2l,f,c
 22007  011134  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22008  011136  22DA               	addwfc	fsr2h,f,c
 22009  011138  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 22010  01113C  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 22011  011140  0E00               	movlw	0
 22012  011142  0100               	movlb	0	; () banked
 22013  011144  6FC6               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22014  011146  0E03               	movlw	3
 22015  011148  0100               	movlb	0	; () banked
 22016  01114A  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 22017  01114C  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 22018                           
 22019                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22020  011150  0100               	movlb	0	; () banked
 22021  011152  EE20 F006          	lfsr	2,6
 22022  011156  51EC               	movf	SPI_Init@pInput& (0+255),w,b
 22023  011158  26D9               	addwf	fsr2l,f,c
 22024  01115A  51ED               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22025  01115C  22DA               	addwfc	fsr2h,f,c
 22026  01115E  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 22027  011162  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 22028  011166  0E05               	movlw	5
 22029  011168  0100               	movlb	0	; () banked
 22030  01116A  6FBB               	movwf	Byte_SetBit@pBit& (0+255),b
 22031  01116C  0E01               	movlw	1
 22032  01116E  0100               	movlb	0	; () banked
 22033  011170  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 22034  011172  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 22035  011176  0012               	return		;funcret
 22036  011178                     __end_of_SPI_Init:
 22037                           	opt stack 0
 22038                           tosu	equ	0xFFF
 22039                           tosh	equ	0xFFE
 22040                           tosl	equ	0xFFD
 22041                           pclath	equ	0xFFA
 22042                           tblptru	equ	0xFF8
 22043                           tblptrh	equ	0xFF7
 22044                           tblptrl	equ	0xFF6
 22045                           tablat	equ	0xFF5
 22046                           prodh	equ	0xFF4
 22047                           prodl	equ	0xFF3
 22048                           intcon	equ	0xFF2
 22049                           postinc0	equ	0xFEE
 22050                           wreg	equ	0xFE8
 22051                           indf1	equ	0xFE7
 22052                           postdec1	equ	0xFE5
 22053                           fsr1h	equ	0xFE2
 22054                           fsr1l	equ	0xFE1
 22055                           indf2	equ	0xFDF
 22056                           postinc2	equ	0xFDE
 22057                           postdec2	equ	0xFDD
 22058                           plusw2	equ	0xFDB
 22059                           fsr2h	equ	0xFDA
 22060                           fsr2l	equ	0xFD9
 22061                           status	equ	0xFD8
 22062                           
 22063 ;; *************** function _Timer2_Init *****************
 22064 ;; Defined at:
 22065 ;;		line 10 in file "Library/Timer2.c"
 22066 ;; Parameters:    Size  Location     Type
 22067 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 22068 ;; Auto vars:     Size  Location     Type
 22069 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 22070 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 22071 ;;  RDIV            4   18[BANK0 ] unsigned long 
 22072 ;; Return value:  Size  Location     Type
 22073 ;;                  1    wreg      void 
 22074 ;; Registers used:
 22075 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22076 ;; Tracked objects:
 22077 ;;		On entry : 0/0
 22078 ;;		On exit  : 0/0
 22079 ;;		Unchanged: 0/0
 22080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22082 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22084 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22085 ;;Total ram usage:       17 bytes
 22086 ;; Hardware stack levels used:    1
 22087 ;; Hardware stack levels required when called:    8
 22088 ;; This function calls:
 22089 ;;		_Timer2_Clear
 22090 ;;		___lldiv
 22091 ;; This function is called by:
 22092 ;;		_SPI_Init
 22093 ;; This function uses a non-reentrant model
 22094 ;;
 22095                           
 22096                           	psect	text99
 22097  013792                     __ptext99:
 22098                           	opt stack 0
 22099  013792                     _Timer2_Init:
 22100                           	opt stack 18
 22101                           
 22102                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 22103                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 22104                           ;Timer2.c: 14: static UINT8 PRE = 0;
 22105                           ;Timer2.c: 15: static UINT32 DIV = 0;
 22106                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 22107                           
 22108                           ;incstack = 0
 22109  013792  0E00               	movlw	0
 22110  013794  0100               	movlb	0	; () banked
 22111  013796  6FCF               	movwf	Timer2_Init@pCPUClock& (0+255),b
 22112  013798  0E6C               	movlw	108
 22113  01379A  6FD0               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 22114  01379C  0EDC               	movlw	220
 22115  01379E  6FD1               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 22116  0137A0  0E02               	movlw	2
 22117  0137A2  6FD2               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 22118                           
 22119                           ; BSR set to: 0
 22120                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 22121                           ;Timer2.c: 20: pFrequency *= 2;
 22122  0137A4  0100               	movlb	0	; () banked
 22123  0137A6  90D8               	bcf	status,0,c
 22124  0137A8  37C6               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 22125  0137AA  37C7               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 22126  0137AC  37C8               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 22127  0137AE  37C9               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 22128                           
 22129                           ; BSR set to: 0
 22130                           ;Timer2.c: 23: pCPUClock /= 4;
 22131  0137B0  0E02               	movlw	2
 22132  0137B2  0100               	movlb	0	; () banked
 22133  0137B4  6FCA               	movwf	??_Timer2_Init& (0+255),b
 22134  0137B6                     u9935:
 22135  0137B6  90D8               	bcf	status,0,c
 22136  0137B8  0100               	movlb	0	; () banked
 22137  0137BA  33D2               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 22138  0137BC  33D1               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 22139  0137BE  33D0               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 22140  0137C0  33CF               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 22141  0137C2  0100               	movlb	0	; () banked
 22142  0137C4  2FCA               	decfsz	??_Timer2_Init& (0+255),f,b
 22143  0137C6  D7F7               	goto	u9935
 22144                           
 22145                           ; BSR set to: 0
 22146                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 22147  0137C8  C0CF  F0B9         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 22148  0137CC  C0D0  F0BA         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 22149  0137D0  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 22150  0137D4  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 22151  0137D8  C0C6  F0BD         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 22152  0137DC  C0C7  F0BE         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 22153  0137E0  C0C8  F0BF         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 22154  0137E4  C0C9  F0C0         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 22155  0137E8  EC7E  F0A4         	call	___lldiv	;wreg free
 22156  0137EC  C0B9  F0D3         	movff	?___lldiv,Timer2_Init@DIVIDE
 22157  0137F0  C0BA  F0D4         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 22158  0137F4  C0BB  F0D5         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 22159  0137F8  C0BC  F0D6         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 22160                           
 22161                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 22162  0137FC  D010               	goto	l1828
 22163  0137FE                     l13195:
 22164                           
 22165                           ;Timer2.c: 28: {
 22166                           ;Timer2.c: 29: RDIV = 0;
 22167  0137FE  0E00               	movlw	0
 22168  013800  0100               	movlb	0	; () banked
 22169  013802  6FCB               	movwf	Timer2_Init@RDIV& (0+255),b
 22170  013804  0E00               	movlw	0
 22171  013806  6FCC               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 22172  013808  0E00               	movlw	0
 22173  01380A  6FCD               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 22174  01380C  0E00               	movlw	0
 22175  01380E  6FCE               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 22176                           
 22177                           ; BSR set to: 0
 22178                           ;Timer2.c: 30: INDEX ++;
 22179  013810  0100               	movlb	0	; () banked
 22180  013812  2B8A               	incf	Timer2_Init@INDEX& (0+255),f,b
 22181                           
 22182                           ; BSR set to: 0
 22183                           ;Timer2.c: 31: if (INDEX >= 3)
 22184  013814  0E02               	movlw	2
 22185  013816  0100               	movlb	0	; () banked
 22186  013818  658A               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 22187  01381A  D001               	goto	l1828
 22188  01381C  D026               	goto	u9950
 22189  01381E                     l1828:
 22190                           
 22191                           ; BSR set to: 0
 22192                           
 22193                           ; BSR set to: 0
 22194  01381E  C0D3  F0B9         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 22195  013822  C0D4  F0BA         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 22196  013826  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 22197  01382A  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 22198  01382E  0100               	movlb	0	; () banked
 22199  013830  518A               	movf	Timer2_Init@INDEX& (0+255),w,b
 22200  013832  0D01               	mullw	1
 22201  013834  0E1C               	movlw	low Timer2_Init@PRESCALE
 22202  013836  24F3               	addwf	prodl,w,c
 22203  013838  6EF6               	movwf	tblptrl,c
 22204  01383A  0EFD               	movlw	high Timer2_Init@PRESCALE
 22205  01383C  20F4               	addwfc	prodh,w,c
 22206  01383E  6EF7               	movwf	tblptrh,c
 22207  013840                     	if	1	;There are 3 active tblptr bytes
 22208  013840  6AF8               	clrf	tblptru,c
 22209  013842  0E00               	movlw	low (__mediumconst shr (0+16))
 22210  013844  22F8               	addwfc	tblptru,f,c
 22211  013846                     	endif
 22212  013846  0008               	tblrd		*
 22213  013848  50F5               	movf	tablat,w,c
 22214  01384A  0100               	movlb	0	; () banked
 22215  01384C  6FBD               	movwf	___lldiv@divisor& (0+255),b
 22216  01384E  6BBE               	clrf	(___lldiv@divisor+1)& (0+255),b
 22217  013850  6BBF               	clrf	(___lldiv@divisor+2)& (0+255),b
 22218  013852  6BC0               	clrf	(___lldiv@divisor+3)& (0+255),b
 22219  013854  EC7E  F0A4         	call	___lldiv	;wreg free
 22220  013858  0100               	movlb	0	; () banked
 22221  01385A  51BC               	movf	(?___lldiv+3)& (0+255),w,b
 22222  01385C  0100               	movlb	0	; () banked
 22223  01385E  11BB               	iorwf	(?___lldiv+2)& (0+255),w,b
 22224  013860  E1CE               	bnz	l13195
 22225  013862  0100               	movlb	0	; () banked
 22226  013864  05BA               	decf	(?___lldiv+1)& (0+255),w,b
 22227  013866  B0D8               	btfsc	status,0,c
 22228  013868  D7CA               	goto	l1827
 22229  01386A                     u9950:
 22230                           
 22231                           ; BSR set to: 0
 22232                           ;Timer2.c: 33: }
 22233                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 22234                           
 22235                           ; BSR set to: 0
 22236  01386A  50CA               	movf	4042,w,c	;volatile
 22237  01386C  0100               	movlb	0	; () banked
 22238  01386E  198A               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22239  013870  0BFC               	andlw	-4
 22240  013872  198A               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22241  013874  6ECA               	movwf	4042,c	;volatile
 22242                           
 22243                           ; BSR set to: 0
 22244                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 22245  013876  84CA               	bsf	4042,2,c	;volatile
 22246                           
 22247                           ; BSR set to: 0
 22248                           ;Timer2.c: 44: Timer2_Clear();
 22249  013878  ECAB  F0B6         	call	_Timer2_Clear	;wreg free
 22250                           
 22251                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 22252  01387C  0100               	movlb	0	; () banked
 22253  01387E  518A               	movf	Timer2_Init@INDEX& (0+255),w,b
 22254  013880  0D01               	mullw	1
 22255  013882  0E1C               	movlw	low Timer2_Init@PRESCALE
 22256  013884  24F3               	addwf	prodl,w,c
 22257  013886  6EF6               	movwf	tblptrl,c
 22258  013888  0EFD               	movlw	high Timer2_Init@PRESCALE
 22259  01388A  20F4               	addwfc	prodh,w,c
 22260  01388C  6EF7               	movwf	tblptrh,c
 22261  01388E                     	if	1	;There are 3 active tblptr bytes
 22262  01388E  6AF8               	clrf	tblptru,c
 22263  013890  0E00               	movlw	low (__mediumconst shr (0+16))
 22264  013892  22F8               	addwfc	tblptru,f,c
 22265  013894                     	endif
 22266  013894  0008               	tblrd		*
 22267  013896  CFF5 F089          	movff	tablat,Timer2_Init@PRE
 22268                           
 22269                           ; BSR set to: 0
 22270                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 22271  01389A  0EFF               	movlw	255
 22272  01389C  0100               	movlb	0	; () banked
 22273  01389E  25D3               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 22274  0138A0  0103               	movlb	3	; () banked
 22275  0138A2  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 22276  0138A4  0EFF               	movlw	255
 22277  0138A6  0100               	movlb	0	; () banked
 22278  0138A8  21D4               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 22279  0138AA  0103               	movlb	3	; () banked
 22280  0138AC  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 22281  0138AE  0EFF               	movlw	255
 22282  0138B0  0100               	movlb	0	; () banked
 22283  0138B2  21D5               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 22284  0138B4  0103               	movlb	3	; () banked
 22285  0138B6  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 22286  0138B8  0EFF               	movlw	255
 22287  0138BA  0100               	movlb	0	; () banked
 22288  0138BC  21D6               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 22289  0138BE  0103               	movlb	3	; () banked
 22290  0138C0  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 22291                           
 22292                           ; BSR set to: 3
 22293                           ;Timer2.c: 48: INDEX = DIV/PRE;
 22294  0138C2  C326  F0B9         	movff	Timer2_Init@DIV,___lldiv@dividend
 22295  0138C6  C327  F0BA         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 22296  0138CA  C328  F0BB         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 22297  0138CE  C329  F0BC         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 22298  0138D2  0100               	movlb	0	; () banked
 22299  0138D4  5189               	movf	Timer2_Init@PRE& (0+255),w,b
 22300  0138D6  0100               	movlb	0	; () banked
 22301  0138D8  6FBD               	movwf	___lldiv@divisor& (0+255),b
 22302  0138DA  6BBE               	clrf	(___lldiv@divisor+1)& (0+255),b
 22303  0138DC  6BBF               	clrf	(___lldiv@divisor+2)& (0+255),b
 22304  0138DE  6BC0               	clrf	(___lldiv@divisor+3)& (0+255),b
 22305  0138E0  EC7E  F0A4         	call	___lldiv	;wreg free
 22306  0138E4  0100               	movlb	0	; () banked
 22307  0138E6  51B9               	movf	?___lldiv& (0+255),w,b
 22308  0138E8  0100               	movlb	0	; () banked
 22309  0138EA  6F8A               	movwf	Timer2_Init@INDEX& (0+255),b
 22310                           
 22311                           ; BSR set to: 0
 22312                           ;Timer2.c: 49: PR2 = INDEX;
 22313  0138EC  C08A  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 22314                           
 22315                           ; BSR set to: 0
 22316  0138F0  0012               	return		;funcret
 22317  0138F2                     __end_of_Timer2_Init:
 22318                           	opt stack 0
 22319                           tosu	equ	0xFFF
 22320                           tosh	equ	0xFFE
 22321                           tosl	equ	0xFFD
 22322                           pclath	equ	0xFFA
 22323                           tblptru	equ	0xFF8
 22324                           tblptrh	equ	0xFF7
 22325                           tblptrl	equ	0xFF6
 22326                           tablat	equ	0xFF5
 22327                           prodh	equ	0xFF4
 22328                           prodl	equ	0xFF3
 22329                           intcon	equ	0xFF2
 22330                           postinc0	equ	0xFEE
 22331                           wreg	equ	0xFE8
 22332                           indf1	equ	0xFE7
 22333                           postdec1	equ	0xFE5
 22334                           fsr1h	equ	0xFE2
 22335                           fsr1l	equ	0xFE1
 22336                           indf2	equ	0xFDF
 22337                           postinc2	equ	0xFDE
 22338                           postdec2	equ	0xFDD
 22339                           plusw2	equ	0xFDB
 22340                           fsr2h	equ	0xFDA
 22341                           fsr2l	equ	0xFD9
 22342                           status	equ	0xFD8
 22343                           
 22344 ;; *************** function ___lldiv *****************
 22345 ;; Defined at:
 22346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 22347 ;; Parameters:    Size  Location     Type
 22348 ;;  dividend        4    0[BANK0 ] unsigned long 
 22349 ;;  divisor         4    4[BANK0 ] unsigned long 
 22350 ;; Auto vars:     Size  Location     Type
 22351 ;;  quotient        4    8[BANK0 ] unsigned long 
 22352 ;;  counter         1   12[BANK0 ] unsigned char 
 22353 ;; Return value:  Size  Location     Type
 22354 ;;                  4    0[BANK0 ] unsigned long 
 22355 ;; Registers used:
 22356 ;;		wreg, status,2, status,0
 22357 ;; Tracked objects:
 22358 ;;		On entry : 0/0
 22359 ;;		On exit  : 0/0
 22360 ;;		Unchanged: 0/0
 22361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22362 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22363 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22365 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22366 ;;Total ram usage:       13 bytes
 22367 ;; Hardware stack levels used:    1
 22368 ;; Hardware stack levels required when called:    7
 22369 ;; This function calls:
 22370 ;;		Nothing
 22371 ;; This function is called by:
 22372 ;;		_Timer0_Init
 22373 ;;		_Timer2_Init
 22374 ;;		_rand_between
 22375 ;;		_I2C_Init
 22376 ;; This function uses a non-reentrant model
 22377 ;;
 22378                           
 22379                           	psect	text100
 22380  0148FC                     __ptext100:
 22381                           	opt stack 0
 22382  0148FC                     ___lldiv:
 22383                           	opt stack 19
 22384                           
 22385                           ; BSR set to: 0
 22386                           ;incstack = 0
 22387  0148FC  0E00               	movlw	0
 22388  0148FE  0100               	movlb	0	; () banked
 22389  014900  6FC1               	movwf	___lldiv@quotient& (0+255),b
 22390  014902  0E00               	movlw	0
 22391  014904  6FC2               	movwf	(___lldiv@quotient+1)& (0+255),b
 22392  014906  0E00               	movlw	0
 22393  014908  6FC3               	movwf	(___lldiv@quotient+2)& (0+255),b
 22394  01490A  0E00               	movlw	0
 22395  01490C  6FC4               	movwf	(___lldiv@quotient+3)& (0+255),b
 22396                           
 22397                           ; BSR set to: 0
 22398  01490E  0100               	movlb	0	; () banked
 22399  014910  51BD               	movf	___lldiv@divisor& (0+255),w,b
 22400  014912  0100               	movlb	0	; () banked
 22401  014914  11BE               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 22402  014916  0100               	movlb	0	; () banked
 22403  014918  11BF               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 22404  01491A  0100               	movlb	0	; () banked
 22405  01491C  11C0               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 22406  01491E  B4D8               	btfsc	status,2,c
 22407  014920  D042               	goto	l2843
 22408                           
 22409                           ; BSR set to: 0
 22410  014922  0E01               	movlw	1
 22411  014924  0100               	movlb	0	; () banked
 22412  014926  6FC5               	movwf	___lldiv@counter& (0+255),b
 22413  014928  D008               	goto	l2838
 22414  01492A                     
 22415                           ; BSR set to: 0
 22416                           
 22417                           ; BSR set to: 0
 22418  01492A  0100               	movlb	0	; () banked
 22419  01492C  90D8               	bcf	status,0,c
 22420  01492E  37BD               	rlcf	___lldiv@divisor& (0+255),f,b
 22421  014930  37BE               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 22422  014932  37BF               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 22423  014934  37C0               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 22424  014936  0100               	movlb	0	; () banked
 22425  014938  2BC5               	incf	___lldiv@counter& (0+255),f,b
 22426  01493A                     l2838:
 22427                           
 22428                           ; BSR set to: 0
 22429                           
 22430                           ; BSR set to: 0
 22431  01493A  0100               	movlb	0	; () banked
 22432  01493C  AFC0               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 22433  01493E  D7F5               	goto	l2839
 22434  014940                     u9810:
 22435                           
 22436                           ; BSR set to: 0
 22437                           
 22438                           ; BSR set to: 0
 22439                           
 22440                           ; BSR set to: 0
 22441  014940  0100               	movlb	0	; () banked
 22442  014942  90D8               	bcf	status,0,c
 22443  014944  37C1               	rlcf	___lldiv@quotient& (0+255),f,b
 22444  014946  37C2               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 22445  014948  37C3               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 22446  01494A  37C4               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 22447                           
 22448                           ; BSR set to: 0
 22449  01494C  0100               	movlb	0	; () banked
 22450  01494E  51BD               	movf	___lldiv@divisor& (0+255),w,b
 22451  014950  0100               	movlb	0	; () banked
 22452  014952  5DB9               	subwf	___lldiv@dividend& (0+255),w,b
 22453  014954  0100               	movlb	0	; () banked
 22454  014956  51BE               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22455  014958  0100               	movlb	0	; () banked
 22456  01495A  59BA               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 22457  01495C  0100               	movlb	0	; () banked
 22458  01495E  51BF               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22459  014960  0100               	movlb	0	; () banked
 22460  014962  59BB               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 22461  014964  0100               	movlb	0	; () banked
 22462  014966  51C0               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22463  014968  0100               	movlb	0	; () banked
 22464  01496A  59BC               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 22465  01496C  A0D8               	btfss	status,0,c
 22466  01496E  D012               	goto	l2842
 22467                           
 22468                           ; BSR set to: 0
 22469  014970  0100               	movlb	0	; () banked
 22470  014972  51BD               	movf	___lldiv@divisor& (0+255),w,b
 22471  014974  0100               	movlb	0	; () banked
 22472  014976  5FB9               	subwf	___lldiv@dividend& (0+255),f,b
 22473  014978  0100               	movlb	0	; () banked
 22474  01497A  51BE               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22475  01497C  0100               	movlb	0	; () banked
 22476  01497E  5BBA               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 22477  014980  0100               	movlb	0	; () banked
 22478  014982  51BF               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22479  014984  0100               	movlb	0	; () banked
 22480  014986  5BBB               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 22481  014988  0100               	movlb	0	; () banked
 22482  01498A  51C0               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22483  01498C  0100               	movlb	0	; () banked
 22484  01498E  5BBC               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 22485                           
 22486                           ; BSR set to: 0
 22487  014990  0100               	movlb	0	; () banked
 22488  014992  81C1               	bsf	___lldiv@quotient& (0+255),0,b
 22489  014994                     l2842:
 22490                           
 22491                           ; BSR set to: 0
 22492                           
 22493                           ; BSR set to: 0
 22494  014994  0100               	movlb	0	; () banked
 22495  014996  90D8               	bcf	status,0,c
 22496  014998  33C0               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 22497  01499A  33BF               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 22498  01499C  33BE               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 22499  01499E  33BD               	rrcf	___lldiv@divisor& (0+255),f,b
 22500                           
 22501                           ; BSR set to: 0
 22502  0149A0  0100               	movlb	0	; () banked
 22503  0149A2  2FC5               	decfsz	___lldiv@counter& (0+255),f,b
 22504  0149A4  D7CD               	goto	u9810
 22505  0149A6                     l2843:
 22506                           
 22507                           ; BSR set to: 0
 22508                           
 22509                           ; BSR set to: 0
 22510  0149A6  C0C1  F0B9         	movff	___lldiv@quotient,?___lldiv
 22511  0149AA  C0C2  F0BA         	movff	___lldiv@quotient+1,?___lldiv+1
 22512  0149AE  C0C3  F0BB         	movff	___lldiv@quotient+2,?___lldiv+2
 22513  0149B2  C0C4  F0BC         	movff	___lldiv@quotient+3,?___lldiv+3
 22514                           
 22515                           ; BSR set to: 0
 22516  0149B6  0012               	return		;funcret
 22517  0149B8                     __end_of___lldiv:
 22518                           	opt stack 0
 22519                           tosu	equ	0xFFF
 22520                           tosh	equ	0xFFE
 22521                           tosl	equ	0xFFD
 22522                           pclath	equ	0xFFA
 22523                           tblptru	equ	0xFF8
 22524                           tblptrh	equ	0xFF7
 22525                           tblptrl	equ	0xFF6
 22526                           tablat	equ	0xFF5
 22527                           prodh	equ	0xFF4
 22528                           prodl	equ	0xFF3
 22529                           intcon	equ	0xFF2
 22530                           postinc0	equ	0xFEE
 22531                           wreg	equ	0xFE8
 22532                           indf1	equ	0xFE7
 22533                           postdec1	equ	0xFE5
 22534                           fsr1h	equ	0xFE2
 22535                           fsr1l	equ	0xFE1
 22536                           indf2	equ	0xFDF
 22537                           postinc2	equ	0xFDE
 22538                           postdec2	equ	0xFDD
 22539                           plusw2	equ	0xFDB
 22540                           fsr2h	equ	0xFDA
 22541                           fsr2l	equ	0xFD9
 22542                           status	equ	0xFD8
 22543                           
 22544 ;; *************** function _Timer2_Clear *****************
 22545 ;; Defined at:
 22546 ;;		line 3 in file "Library/Timer2.c"
 22547 ;; Parameters:    Size  Location     Type
 22548 ;;		None
 22549 ;; Auto vars:     Size  Location     Type
 22550 ;;		None
 22551 ;; Return value:  Size  Location     Type
 22552 ;;                  1    wreg      void 
 22553 ;; Registers used:
 22554 ;;		None
 22555 ;; Tracked objects:
 22556 ;;		On entry : 0/0
 22557 ;;		On exit  : 0/0
 22558 ;;		Unchanged: 0/0
 22559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22564 ;;Total ram usage:        0 bytes
 22565 ;; Hardware stack levels used:    1
 22566 ;; Hardware stack levels required when called:    7
 22567 ;; This function calls:
 22568 ;;		Nothing
 22569 ;; This function is called by:
 22570 ;;		_Timer2_Init
 22571 ;; This function uses a non-reentrant model
 22572 ;;
 22573                           
 22574                           	psect	text101
 22575  016D56                     __ptext101:
 22576                           	opt stack 0
 22577  016D56                     _Timer2_Clear:
 22578                           	opt stack 18
 22579                           
 22580                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 22581                           
 22582                           ; BSR set to: 0
 22583                           ;incstack = 0
 22584  016D56  929E               	bcf	3998,1,c	;volatile
 22585                           
 22586                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 22587  016D58  929D               	bcf	3997,1,c	;volatile
 22588                           
 22589                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 22590  016D5A  929F               	bcf	3999,1,c	;volatile
 22591  016D5C  0012               	return		;funcret
 22592  016D5E                     __end_of_Timer2_Clear:
 22593                           	opt stack 0
 22594                           tosu	equ	0xFFF
 22595                           tosh	equ	0xFFE
 22596                           tosl	equ	0xFFD
 22597                           pclath	equ	0xFFA
 22598                           tblptru	equ	0xFF8
 22599                           tblptrh	equ	0xFF7
 22600                           tblptrl	equ	0xFF6
 22601                           tablat	equ	0xFF5
 22602                           prodh	equ	0xFF4
 22603                           prodl	equ	0xFF3
 22604                           intcon	equ	0xFF2
 22605                           postinc0	equ	0xFEE
 22606                           wreg	equ	0xFE8
 22607                           indf1	equ	0xFE7
 22608                           postdec1	equ	0xFE5
 22609                           fsr1h	equ	0xFE2
 22610                           fsr1l	equ	0xFE1
 22611                           indf2	equ	0xFDF
 22612                           postinc2	equ	0xFDE
 22613                           postdec2	equ	0xFDD
 22614                           plusw2	equ	0xFDB
 22615                           fsr2h	equ	0xFDA
 22616                           fsr2l	equ	0xFD9
 22617                           status	equ	0xFD8
 22618                           
 22619 ;; *************** function _SPI_DisableISR *****************
 22620 ;; Defined at:
 22621 ;;		line 181 in file "Library/SPI.c"
 22622 ;; Parameters:    Size  Location     Type
 22623 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 22624 ;;		 -> SPI1(11), SPI2(11), 
 22625 ;; Auto vars:     Size  Location     Type
 22626 ;;		None
 22627 ;; Return value:  Size  Location     Type
 22628 ;;                  1    wreg      void 
 22629 ;; Registers used:
 22630 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22631 ;; Tracked objects:
 22632 ;;		On entry : 0/0
 22633 ;;		On exit  : 0/0
 22634 ;;		Unchanged: 0/0
 22635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22636 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22640 ;;Total ram usage:        2 bytes
 22641 ;; Hardware stack levels used:    1
 22642 ;; Hardware stack levels required when called:    7
 22643 ;; This function calls:
 22644 ;;		Nothing
 22645 ;; This function is called by:
 22646 ;;		_SPI_Init
 22647 ;; This function uses a non-reentrant model
 22648 ;;
 22649                           
 22650                           	psect	text102
 22651  01695A                     __ptext102:
 22652                           	opt stack 0
 22653  01695A                     _SPI_DisableISR:
 22654                           	opt stack 19
 22655                           
 22656                           ;SPI.c: 183: switch (pInput->mChannel)
 22657                           
 22658                           ;incstack = 0
 22659  01695A  D004               	goto	l654
 22660  01695C                     l655:
 22661                           
 22662                           ; BSR set to: 0
 22663  01695C  969D               	bcf	3997,3,c	;volatile
 22664  01695E  0012               	return	
 22665  016960                     l657:
 22666                           
 22667                           ; BSR set to: 0
 22668  016960  9EA3               	bcf	4003,7,c	;volatile
 22669                           
 22670                           ; BSR set to: 0
 22671                           ;SPI.c: 188: };
 22672                           
 22673                           ; BSR set to: 0
 22674                           
 22675                           ;SPI.c: 187: default: return;
 22676  016962  0012               	return	
 22677  016964                     l654:
 22678                           
 22679                           ; BSR set to: 0
 22680  016964  0100               	movlb	0	; () banked
 22681  016966  EE20 F002          	lfsr	2,2
 22682  01696A  51B9               	movf	SPI_DisableISR@pInput& (0+255),w,b
 22683  01696C  26D9               	addwf	fsr2l,f,c
 22684  01696E  51BA               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 22685  016970  22DA               	addwfc	fsr2h,f,c
 22686  016972  50DF               	movf	indf2,w,c
 22687                           
 22688                           ; Switch size 1, requested type "space"
 22689                           ; Number of cases is 2, Range of values is 0 to 1
 22690                           ; switch strategies available:
 22691                           ; Name         Instructions Cycles
 22692                           ; simple_byte            7     4 (average)
 22693                           ;	Chosen strategy is simple_byte
 22694  016974  0A00               	xorlw	0	; case 0
 22695  016976  B4D8               	btfsc	status,2,c
 22696  016978  D7F1               	goto	l655
 22697  01697A  0A01               	xorlw	1	; case 1
 22698  01697C  A4D8               	btfss	status,2,c
 22699  01697E  0012               	return	
 22700  016980  D7EF               	goto	l657
 22701  016982                     __end_of_SPI_DisableISR:
 22702                           	opt stack 0
 22703                           tosu	equ	0xFFF
 22704                           tosh	equ	0xFFE
 22705                           tosl	equ	0xFFD
 22706                           pclath	equ	0xFFA
 22707                           tblptru	equ	0xFF8
 22708                           tblptrh	equ	0xFF7
 22709                           tblptrl	equ	0xFF6
 22710                           tablat	equ	0xFF5
 22711                           prodh	equ	0xFF4
 22712                           prodl	equ	0xFF3
 22713                           intcon	equ	0xFF2
 22714                           postinc0	equ	0xFEE
 22715                           wreg	equ	0xFE8
 22716                           indf1	equ	0xFE7
 22717                           postdec1	equ	0xFE5
 22718                           fsr1h	equ	0xFE2
 22719                           fsr1l	equ	0xFE1
 22720                           indf2	equ	0xFDF
 22721                           postinc2	equ	0xFDE
 22722                           postdec2	equ	0xFDD
 22723                           plusw2	equ	0xFDB
 22724                           fsr2h	equ	0xFDA
 22725                           fsr2l	equ	0xFD9
 22726                           status	equ	0xFD8
 22727                           
 22728 ;; *************** function _SPI_DCS *****************
 22729 ;; Defined at:
 22730 ;;		line 219 in file "Library/SPI.c"
 22731 ;; Parameters:    Size  Location     Type
 22732 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 22733 ;;		 -> SPI1(11), SPI2(11), 
 22734 ;; Auto vars:     Size  Location     Type
 22735 ;;		None
 22736 ;; Return value:  Size  Location     Type
 22737 ;;                  1    wreg      void 
 22738 ;; Registers used:
 22739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22740 ;; Tracked objects:
 22741 ;;		On entry : 0/0
 22742 ;;		On exit  : 0/0
 22743 ;;		Unchanged: 0/0
 22744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22749 ;;Total ram usage:        2 bytes
 22750 ;; Hardware stack levels used:    1
 22751 ;; Hardware stack levels required when called:    7
 22752 ;; This function calls:
 22753 ;;		Nothing
 22754 ;; This function is called by:
 22755 ;;		_SPI_Init
 22756 ;; This function uses a non-reentrant model
 22757 ;;
 22758                           
 22759                           	psect	text103
 22760  01681A                     __ptext103:
 22761                           	opt stack 0
 22762  01681A                     _SPI_DCS:
 22763                           	opt stack 19
 22764                           
 22765                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 22766                           
 22767                           ; BSR set to: 0
 22768                           ;incstack = 0
 22769  01681A  0100               	movlb	0	; () banked
 22770  01681C  EE20 F002          	lfsr	2,2
 22771  016820  51B9               	movf	SPI_DCS@pInput& (0+255),w,b
 22772  016822  26D9               	addwf	fsr2l,f,c
 22773  016824  51BA               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 22774  016826  22DA               	addwfc	fsr2h,f,c
 22775  016828  50DF               	movf	indf2,w,c
 22776  01682A  A4D8               	btfss	status,2,c
 22777  01682C  D007               	goto	l673
 22778                           
 22779                           ; BSR set to: 0
 22780                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 22781  01682E  C0A8  FFD9         	movff	_PortC+4,fsr2l
 22782  016832  C0A9  FFDA         	movff	_PortC+5,fsr2h
 22783  016836  0100               	movlb	0	; () banked
 22784  016838  84DF               	bsf	indf2,2,c
 22785  01683A  0012               	return	
 22786  01683C                     l673:
 22787                           
 22788                           ; BSR set to: 0
 22789                           ;SPI.c: 223: else
 22790                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 22791                           
 22792                           ; BSR set to: 0
 22793  01683C  C09E  FFD9         	movff	_PortD+4,fsr2l
 22794  016840  C09F  FFDA         	movff	_PortD+5,fsr2h
 22795  016844  0100               	movlb	0	; () banked
 22796  016846  8EDF               	bsf	indf2,7,c
 22797  016848  0012               	return	
 22798  01684A                     __end_of_SPI_DCS:
 22799                           	opt stack 0
 22800                           tosu	equ	0xFFF
 22801                           tosh	equ	0xFFE
 22802                           tosl	equ	0xFFD
 22803                           pclath	equ	0xFFA
 22804                           tblptru	equ	0xFF8
 22805                           tblptrh	equ	0xFF7
 22806                           tblptrl	equ	0xFF6
 22807                           tablat	equ	0xFF5
 22808                           prodh	equ	0xFF4
 22809                           prodl	equ	0xFF3
 22810                           intcon	equ	0xFF2
 22811                           postinc0	equ	0xFEE
 22812                           wreg	equ	0xFE8
 22813                           indf1	equ	0xFE7
 22814                           postdec1	equ	0xFE5
 22815                           fsr1h	equ	0xFE2
 22816                           fsr1l	equ	0xFE1
 22817                           indf2	equ	0xFDF
 22818                           postinc2	equ	0xFDE
 22819                           postdec2	equ	0xFDD
 22820                           plusw2	equ	0xFDB
 22821                           fsr2h	equ	0xFDA
 22822                           fsr2l	equ	0xFD9
 22823                           status	equ	0xFD8
 22824                           
 22825 ;; *************** function _Button_Init *****************
 22826 ;; Defined at:
 22827 ;;		line 18 in file "Library/Button.c"
 22828 ;; Parameters:    Size  Location     Type
 22829 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 22830 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 22831 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 22832 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 22833 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 22834 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 22835 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 22836 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 22837 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 22838 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 22839 ;; Auto vars:     Size  Location     Type
 22840 ;;		None
 22841 ;; Return value:  Size  Location     Type
 22842 ;;                  1    wreg      void 
 22843 ;; Registers used:
 22844 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22845 ;; Tracked objects:
 22846 ;;		On entry : 0/0
 22847 ;;		On exit  : 0/0
 22848 ;;		Unchanged: 0/0
 22849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22850 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22853 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22854 ;;Total ram usage:       13 bytes
 22855 ;; Hardware stack levels used:    1
 22856 ;; Hardware stack levels required when called:   15
 22857 ;; This function calls:
 22858 ;;		_HMI_InitButtons
 22859 ;;		_MXK_InitDIPSwitch
 22860 ;;		_MXK_InitTestButton
 22861 ;; This function is called by:
 22862 ;;		_HMI_Init
 22863 ;;		_FunctInitButton
 22864 ;; This function uses a non-reentrant model
 22865 ;;
 22866                           
 22867                           	psect	text104
 22868  014382                     __ptext104:
 22869                           	opt stack 0
 22870  014382                     _Button_Init:
 22871                           	opt stack 13
 22872                           
 22873                           ;Button.c: 21: if(pInput==(void*)0)
 22874                           
 22875                           ; BSR set to: 0
 22876                           ;incstack = 0
 22877  014382  0101               	movlb	1	; () banked
 22878  014384  5100               	movf	Button_Init@pInput& (0+255),w,b
 22879  014386  0101               	movlb	1	; () banked
 22880  014388  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 22881  01438A  B4D8               	btfsc	status,2,c
 22882  01438C  0012               	return	
 22883                           
 22884                           ; BSR set to: 1
 22885                           ;Button.c: 23: if(pInitIO==(void*)0)
 22886                           
 22887                           ; BSR set to: 1
 22888                           
 22889                           ; BSR set to: 1
 22890                           ;Button.c: 22: return;
 22891  01438E  0101               	movlb	1	; () banked
 22892  014390  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 22893  014392  0101               	movlb	1	; () banked
 22894  014394  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 22895  014396  0101               	movlb	1	; () banked
 22896  014398  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 22897  01439A  B4D8               	btfsc	status,2,c
 22898  01439C  0012               	return	
 22899                           
 22900                           ; BSR set to: 1
 22901                           ;Button.c: 25: if(pGetState==(void*)0)
 22902                           
 22903                           ; BSR set to: 1
 22904                           
 22905                           ; BSR set to: 1
 22906                           ;Button.c: 24: return;
 22907  01439E  0101               	movlb	1	; () banked
 22908  0143A0  5107               	movf	Button_Init@pGetState& (0+255),w,b
 22909  0143A2  0101               	movlb	1	; () banked
 22910  0143A4  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 22911  0143A6  0101               	movlb	1	; () banked
 22912  0143A8  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 22913  0143AA  B4D8               	btfsc	status,2,c
 22914  0143AC  0012               	return	
 22915                           
 22916                           ; BSR set to: 1
 22917                           ;Button.c: 27: if(pFunction==(void*)0)
 22918                           
 22919                           ; BSR set to: 1
 22920                           
 22921                           ; BSR set to: 1
 22922                           ;Button.c: 26: return;
 22923  0143AE  0101               	movlb	1	; () banked
 22924  0143B0  510A               	movf	Button_Init@pFunction& (0+255),w,b
 22925  0143B2  0101               	movlb	1	; () banked
 22926  0143B4  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 22927  0143B6  0101               	movlb	1	; () banked
 22928  0143B8  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 22929  0143BA  B4D8               	btfsc	status,2,c
 22930  0143BC  0012               	return	
 22931                           
 22932                           ; BSR set to: 1
 22933                           ;Button.c: 30: if(pThreshold == 0)
 22934                           
 22935                           ; BSR set to: 1
 22936                           
 22937                           ; BSR set to: 1
 22938                           ;Button.c: 28: return;
 22939  0143BE  0101               	movlb	1	; () banked
 22940  0143C0  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 22941  0143C2  0101               	movlb	1	; () banked
 22942  0143C4  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 22943  0143C6  A4D8               	btfss	status,2,c
 22944  0143C8  D005               	goto	l8
 22945                           
 22946                           ; BSR set to: 1
 22947                           ;Button.c: 31: pThreshold = 1;
 22948  0143CA  0E00               	movlw	0
 22949  0143CC  0101               	movlb	1	; () banked
 22950  0143CE  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22951  0143D0  0E01               	movlw	1
 22952  0143D2  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 22953  0143D4                     l8:
 22954                           
 22955                           ; BSR set to: 1
 22956                           ;Button.c: 34: pInput->mState = 0;
 22957                           
 22958                           ; BSR set to: 1
 22959  0143D4  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 22960  0143D8  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 22961  0143DC  0E00               	movlw	0
 22962  0143DE  6EDF               	movwf	indf2,c
 22963                           
 22964                           ; BSR set to: 1
 22965                           ;Button.c: 35: pInput->mCount = 0;
 22966  0143E0  0101               	movlb	1	; () banked
 22967  0143E2  EE20 F001          	lfsr	2,1
 22968  0143E6  5100               	movf	Button_Init@pInput& (0+255),w,b
 22969  0143E8  26D9               	addwf	fsr2l,f,c
 22970  0143EA  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22971  0143EC  22DA               	addwfc	fsr2h,f,c
 22972  0143EE  0E00               	movlw	0
 22973  0143F0  6EDF               	movwf	indf2,c
 22974                           
 22975                           ; BSR set to: 1
 22976                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 22977  0143F2  0101               	movlb	1	; () banked
 22978  0143F4  EE20 F002          	lfsr	2,2
 22979  0143F8  5100               	movf	Button_Init@pInput& (0+255),w,b
 22980  0143FA  26D9               	addwf	fsr2l,f,c
 22981  0143FC  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22982  0143FE  22DA               	addwfc	fsr2h,f,c
 22983  014400  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 22984  014404  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 22985                           
 22986                           ; BSR set to: 1
 22987                           ;Button.c: 37: pInput->mFunction = pFunction;
 22988  014408  0101               	movlb	1	; () banked
 22989  01440A  EE20 F004          	lfsr	2,4
 22990  01440E  5100               	movf	Button_Init@pInput& (0+255),w,b
 22991  014410  26D9               	addwf	fsr2l,f,c
 22992  014412  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22993  014414  22DA               	addwfc	fsr2h,f,c
 22994  014416  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 22995  01441A  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 22996  01441E  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 22997                           
 22998                           ; BSR set to: 1
 22999                           ;Button.c: 38: pInput->mGetState = pGetState;
 23000  014422  0101               	movlb	1	; () banked
 23001  014424  EE20 F007          	lfsr	2,7
 23002  014428  5100               	movf	Button_Init@pInput& (0+255),w,b
 23003  01442A  26D9               	addwf	fsr2l,f,c
 23004  01442C  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23005  01442E  22DA               	addwfc	fsr2h,f,c
 23006  014430  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 23007  014434  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 23008  014438  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 23009                           
 23010                           ; BSR set to: 1
 23011                           ;Button.c: 41: pInitIO();
 23012  01443C  D801               	call	u11208
 23013  01443E  0012               	return	
 23014  014440                     u11208:
 23015  014440  0005               	push	
 23016  014442  6EFA               	movwf	pclath,c
 23017  014444  0101               	movlb	1	; () banked
 23018  014446  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 23019  014448  6EFD               	movwf	tosl,c
 23020  01444A  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 23021  01444C  6EFE               	movwf	tosh,c
 23022  01444E  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 23023  014450  6EFF               	movwf	tosu,c
 23024  014452  50FA               	movf	pclath,w,c
 23025  014454  0012               	return		;indir
 23026  014456                     __end_of_Button_Init:
 23027                           	opt stack 0
 23028                           tosu	equ	0xFFF
 23029                           tosh	equ	0xFFE
 23030                           tosl	equ	0xFFD
 23031                           pclath	equ	0xFFA
 23032                           tblptru	equ	0xFF8
 23033                           tblptrh	equ	0xFF7
 23034                           tblptrl	equ	0xFF6
 23035                           tablat	equ	0xFF5
 23036                           prodh	equ	0xFF4
 23037                           prodl	equ	0xFF3
 23038                           intcon	equ	0xFF2
 23039                           postinc0	equ	0xFEE
 23040                           wreg	equ	0xFE8
 23041                           indf1	equ	0xFE7
 23042                           postdec1	equ	0xFE5
 23043                           fsr1h	equ	0xFE2
 23044                           fsr1l	equ	0xFE1
 23045                           indf2	equ	0xFDF
 23046                           postinc2	equ	0xFDE
 23047                           postdec2	equ	0xFDD
 23048                           plusw2	equ	0xFDB
 23049                           fsr2h	equ	0xFDA
 23050                           fsr2l	equ	0xFD9
 23051                           status	equ	0xFD8
 23052                           
 23053 ;; *************** function _MXK_InitDIPSwitch *****************
 23054 ;; Defined at:
 23055 ;;		line 20 in file "Library/MXK.c"
 23056 ;; Parameters:    Size  Location     Type
 23057 ;;		None
 23058 ;; Auto vars:     Size  Location     Type
 23059 ;;		None
 23060 ;; Return value:  Size  Location     Type
 23061 ;;                  1    wreg      void 
 23062 ;; Registers used:
 23063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23064 ;; Tracked objects:
 23065 ;;		On entry : 0/0
 23066 ;;		On exit  : 0/0
 23067 ;;		Unchanged: 0/0
 23068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23073 ;;Total ram usage:        0 bytes
 23074 ;; Hardware stack levels used:    1
 23075 ;; Hardware stack levels required when called:   14
 23076 ;; This function calls:
 23077 ;;		_Port_SetQuadType
 23078 ;; This function is called by:
 23079 ;;		_FunctInitButton
 23080 ;;		_Button_Init
 23081 ;; This function uses a non-reentrant model
 23082 ;;
 23083                           
 23084                           	psect	text105
 23085  016AC4                     __ptext105:
 23086                           	opt stack 0
 23087  016AC4                     _MXK_InitDIPSwitch:
 23088                           	opt stack 13
 23089                           
 23090                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 23091                           
 23092                           ;incstack = 0
 23093  016AC4  0E9A               	movlw	low _PortD
 23094  016AC6  0100               	movlb	0	; () banked
 23095  016AC8  6FEF               	movwf	Port_SetQuadType@pInput& (0+255),b
 23096  016ACA  0E00               	movlw	high _PortD
 23097  016ACC  0100               	movlb	0	; () banked
 23098  016ACE  6FF0               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 23099  016AD0  0E00               	movlw	0
 23100  016AD2  0100               	movlb	0	; () banked
 23101  016AD4  6FF1               	movwf	Port_SetQuadType@pQuad& (0+255),b
 23102  016AD6  0E00               	movlw	0
 23103  016AD8  0100               	movlb	0	; () banked
 23104  016ADA  6FF2               	movwf	Port_SetQuadType@pType& (0+255),b
 23105  016ADC  ECA5  F08F         	call	_Port_SetQuadType	;wreg free
 23106  016AE0  0012               	return		;funcret
 23107  016AE2                     __end_of_MXK_InitDIPSwitch:
 23108                           	opt stack 0
 23109                           tosu	equ	0xFFF
 23110                           tosh	equ	0xFFE
 23111                           tosl	equ	0xFFD
 23112                           pclath	equ	0xFFA
 23113                           tblptru	equ	0xFF8
 23114                           tblptrh	equ	0xFF7
 23115                           tblptrl	equ	0xFF6
 23116                           tablat	equ	0xFF5
 23117                           prodh	equ	0xFF4
 23118                           prodl	equ	0xFF3
 23119                           intcon	equ	0xFF2
 23120                           postinc0	equ	0xFEE
 23121                           wreg	equ	0xFE8
 23122                           indf1	equ	0xFE7
 23123                           postdec1	equ	0xFE5
 23124                           fsr1h	equ	0xFE2
 23125                           fsr1l	equ	0xFE1
 23126                           indf2	equ	0xFDF
 23127                           postinc2	equ	0xFDE
 23128                           postdec2	equ	0xFDD
 23129                           plusw2	equ	0xFDB
 23130                           fsr2h	equ	0xFDA
 23131                           fsr2l	equ	0xFD9
 23132                           status	equ	0xFD8
 23133                           
 23134 ;; *************** function _HMI_InitButtons *****************
 23135 ;; Defined at:
 23136 ;;		line 21 in file "HMI.c"
 23137 ;; Parameters:    Size  Location     Type
 23138 ;;		None
 23139 ;; Auto vars:     Size  Location     Type
 23140 ;;		None
 23141 ;; Return value:  Size  Location     Type
 23142 ;;                  1    wreg      void 
 23143 ;; Registers used:
 23144 ;;		wreg, status,2
 23145 ;; Tracked objects:
 23146 ;;		On entry : 0/0
 23147 ;;		On exit  : 0/0
 23148 ;;		Unchanged: 0/0
 23149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23154 ;;Total ram usage:        0 bytes
 23155 ;; Hardware stack levels used:    1
 23156 ;; Hardware stack levels required when called:    7
 23157 ;; This function calls:
 23158 ;;		Nothing
 23159 ;; This function is called by:
 23160 ;;		_HMI_Init
 23161 ;;		_Button_Init
 23162 ;; This function uses a non-reentrant model
 23163 ;;
 23164                           
 23165                           	psect	text106
 23166  016D74                     __ptext106:
 23167                           	opt stack 0
 23168  016D74                     _HMI_InitButtons:
 23169                           	opt stack 20
 23170                           
 23171                           ;HMI.c: 23: TRISE = 0xFC;
 23172                           
 23173                           ;incstack = 0
 23174  016D74  0EFC               	movlw	252
 23175  016D76  6E96               	movwf	3990,c	;volatile
 23176  016D78  0012               	return		;funcret
 23177  016D7A                     __end_of_HMI_InitButtons:
 23178                           	opt stack 0
 23179                           tosu	equ	0xFFF
 23180                           tosh	equ	0xFFE
 23181                           tosl	equ	0xFFD
 23182                           pclath	equ	0xFFA
 23183                           tblptru	equ	0xFF8
 23184                           tblptrh	equ	0xFF7
 23185                           tblptrl	equ	0xFF6
 23186                           tablat	equ	0xFF5
 23187                           prodh	equ	0xFF4
 23188                           prodl	equ	0xFF3
 23189                           intcon	equ	0xFF2
 23190                           postinc0	equ	0xFEE
 23191                           wreg	equ	0xFE8
 23192                           indf1	equ	0xFE7
 23193                           postdec1	equ	0xFE5
 23194                           fsr1h	equ	0xFE2
 23195                           fsr1l	equ	0xFE1
 23196                           indf2	equ	0xFDF
 23197                           postinc2	equ	0xFDE
 23198                           postdec2	equ	0xFDD
 23199                           plusw2	equ	0xFDB
 23200                           fsr2h	equ	0xFDA
 23201                           fsr2l	equ	0xFD9
 23202                           status	equ	0xFD8
 23203                           
 23204 ;; *************** function _MXK_InitTestButton *****************
 23205 ;; Defined at:
 23206 ;;		line 10 in file "Library/MXK.c"
 23207 ;; Parameters:    Size  Location     Type
 23208 ;;		None
 23209 ;; Auto vars:     Size  Location     Type
 23210 ;;		None
 23211 ;; Return value:  Size  Location     Type
 23212 ;;                  1    wreg      void 
 23213 ;; Registers used:
 23214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23215 ;; Tracked objects:
 23216 ;;		On entry : 0/0
 23217 ;;		On exit  : 0/0
 23218 ;;		Unchanged: 0/0
 23219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23224 ;;Total ram usage:        0 bytes
 23225 ;; Hardware stack levels used:    1
 23226 ;; Hardware stack levels required when called:   12
 23227 ;; This function calls:
 23228 ;;		_Port_SetPinType
 23229 ;; This function is called by:
 23230 ;;		_FunctInitButton
 23231 ;;		_Button_Init
 23232 ;; This function uses a non-reentrant model
 23233 ;;
 23234                           
 23235                           	psect	text107
 23236  016AE2                     __ptext107:
 23237                           	opt stack 0
 23238  016AE2                     _MXK_InitTestButton:
 23239                           	opt stack 15
 23240                           
 23241                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 23242                           
 23243                           ;incstack = 0
 23244  016AE2  0EB0               	movlw	low _PortB
 23245  016AE4  0100               	movlb	0	; () banked
 23246  016AE6  6FDF               	movwf	Port_SetPinType@pInput& (0+255),b
 23247  016AE8  0E03               	movlw	high _PortB
 23248  016AEA  0100               	movlb	0	; () banked
 23249  016AEC  6FE0               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23250  016AEE  0E04               	movlw	4
 23251  016AF0  0100               	movlb	0	; () banked
 23252  016AF2  6FE1               	movwf	Port_SetPinType@pPin& (0+255),b
 23253  016AF4  0E00               	movlw	0
 23254  016AF6  0100               	movlb	0	; () banked
 23255  016AF8  6FE2               	movwf	Port_SetPinType@pType& (0+255),b
 23256  016AFA  ECB2  F095         	call	_Port_SetPinType	;wreg free
 23257  016AFE  0012               	return		;funcret
 23258  016B00                     __end_of_MXK_InitTestButton:
 23259                           	opt stack 0
 23260                           tosu	equ	0xFFF
 23261                           tosh	equ	0xFFE
 23262                           tosl	equ	0xFFD
 23263                           pclath	equ	0xFFA
 23264                           tblptru	equ	0xFF8
 23265                           tblptrh	equ	0xFF7
 23266                           tblptrl	equ	0xFF6
 23267                           tablat	equ	0xFF5
 23268                           prodh	equ	0xFF4
 23269                           prodl	equ	0xFF3
 23270                           intcon	equ	0xFF2
 23271                           postinc0	equ	0xFEE
 23272                           wreg	equ	0xFE8
 23273                           indf1	equ	0xFE7
 23274                           postdec1	equ	0xFE5
 23275                           fsr1h	equ	0xFE2
 23276                           fsr1l	equ	0xFE1
 23277                           indf2	equ	0xFDF
 23278                           postinc2	equ	0xFDE
 23279                           postdec2	equ	0xFDD
 23280                           plusw2	equ	0xFDB
 23281                           fsr2h	equ	0xFDA
 23282                           fsr2l	equ	0xFD9
 23283                           status	equ	0xFD8
 23284                           
 23285 ;; *************** function _Port_SetPinType *****************
 23286 ;; Defined at:
 23287 ;;		line 189 in file "Library/Port.c"
 23288 ;; Parameters:    Size  Location     Type
 23289 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23290 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23291 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23292 ;;  pPin            1   40[BANK0 ] enum E6750
 23293 ;;  pType           1   41[BANK0 ] enum E6795
 23294 ;; Auto vars:     Size  Location     Type
 23295 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 23296 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 23297 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 23298 ;;  Output          1   42[BANK0 ] enum E6475
 23299 ;; Return value:  Size  Location     Type
 23300 ;;                  1    wreg      enum E6475
 23301 ;; Registers used:
 23302 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23303 ;; Tracked objects:
 23304 ;;		On entry : 0/0
 23305 ;;		On exit  : 0/0
 23306 ;;		Unchanged: 0/0
 23307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23308 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23309 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23311 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23312 ;;Total ram usage:        7 bytes
 23313 ;; Hardware stack levels used:    1
 23314 ;; Hardware stack levels required when called:   11
 23315 ;; This function calls:
 23316 ;;		_Byte_SetBit
 23317 ;;		_PortProperty_Valid
 23318 ;;		_Word_SetPair
 23319 ;; This function is called by:
 23320 ;;		_Configure_GPIOs
 23321 ;;		_LED_Init
 23322 ;;		_Port_Init
 23323 ;;		_SPI_Init
 23324 ;;		_Motor_Init
 23325 ;;		_MXK_InitTestButton
 23326 ;;		_MXK_Init
 23327 ;;		_I2C_Init
 23328 ;; This function uses a non-reentrant model
 23329 ;;
 23330                           
 23331                           	psect	text108
 23332  012B64                     __ptext108:
 23333                           	opt stack 0
 23334  012B64                     _Port_SetPinType:
 23335                           	opt stack 17
 23336                           
 23337                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 23338                           
 23339                           ;incstack = 0
 23340  012B64  C0DF  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 23341  012B68  C0E0  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 23342  012B6C  CFDE F0E4          	movff	postinc2,Port_SetPinType@Props
 23343  012B70  CFDD F0E5          	movff	postdec2,Port_SetPinType@Props+1
 23344                           
 23345                           ;Port.c: 192: ePinError Output = ePinErrorState;
 23346  012B74  0E05               	movlw	5
 23347  012B76  0100               	movlb	0	; () banked
 23348  012B78  6FE3               	movwf	Port_SetPinType@Output& (0+255),b
 23349                           
 23350                           ;Port.c: 193: switch (pType)
 23351  012B7A  D0B5               	goto	l412
 23352  012B7C                     
 23353                           ; BSR set to: 0
 23354                           ;Port.c: 197: {
 23355                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23356                           
 23357                           ; BSR set to: 0
 23358  012B7C  0100               	movlb	0	; () banked
 23359  012B7E  EE20 F002          	lfsr	2,2
 23360  012B82  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23361  012B84  26D9               	addwf	fsr2l,f,c
 23362  012B86  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23363  012B88  22DA               	addwfc	fsr2h,f,c
 23364  012B8A  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23365  012B8E  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23366  012B92  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23367  012B96  0E01               	movlw	1
 23368  012B98  0100               	movlb	0	; () banked
 23369  012B9A  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23370  012B9C  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23371                           
 23372                           ;Port.c: 203: break;
 23373  012BA0  D0B0               	goto	l414
 23374  012BA2                     
 23375                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 23376  012BA2  C0E4  F0C8         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23377  012BA6  C0E5  F0C9         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23378  012BAA  0E01               	movlw	1
 23379  012BAC  0100               	movlb	0	; () banked
 23380  012BAE  6FCA               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23381  012BB0  C0E1  F0CB         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23382  012BB4  ECA7  F0AB         	call	_PortProperty_Valid	;wreg free
 23383  012BB8  0100               	movlb	0	; () banked
 23384  012BBA  6FE3               	movwf	Port_SetPinType@Output& (0+255),b
 23385  012BBC  0100               	movlb	0	; () banked
 23386  012BBE  51E3               	movf	Port_SetPinType@Output& (0+255),w,b
 23387  012BC0  A4D8               	btfss	status,2,c
 23388  012BC2  0012               	return	
 23389                           
 23390                           ; BSR set to: 0
 23391                           ;Port.c: 208: {
 23392                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 23393  012BC4  0100               	movlb	0	; () banked
 23394  012BC6  EE20 F002          	lfsr	2,2
 23395  012BCA  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23396  012BCC  26D9               	addwf	fsr2l,f,c
 23397  012BCE  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23398  012BD0  22DA               	addwfc	fsr2h,f,c
 23399  012BD2  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23400  012BD6  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23401  012BDA  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23402  012BDE  0E00               	movlw	0
 23403  012BE0  0100               	movlb	0	; () banked
 23404  012BE2  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23405  012BE4  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23406                           
 23407                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 23408  012BE8  0100               	movlb	0	; () banked
 23409  012BEA  EE20 F004          	lfsr	2,4
 23410  012BEE  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23411  012BF0  26D9               	addwf	fsr2l,f,c
 23412  012BF2  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23413  012BF4  22DA               	addwfc	fsr2h,f,c
 23414  012BF6  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23415  012BFA  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23416  012BFE  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23417  012C02  0E00               	movlw	0
 23418  012C04  0100               	movlb	0	; () banked
 23419  012C06  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23420  012C08  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23421                           
 23422                           ;Port.c: 214: break;
 23423  012C0C  D07A               	goto	l414
 23424  012C0E                     
 23425                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 23426                           
 23427                           ;Port.c: 218: case eTypeOutputOpenSource:
 23428  012C0E  C0E4  F0C8         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23429  012C12  C0E5  F0C9         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23430  012C16  0E02               	movlw	2
 23431  012C18  0100               	movlb	0	; () banked
 23432  012C1A  6FCA               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23433  012C1C  C0E1  F0CB         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23434  012C20  ECA7  F0AB         	call	_PortProperty_Valid	;wreg free
 23435  012C24  0100               	movlb	0	; () banked
 23436  012C26  6FE3               	movwf	Port_SetPinType@Output& (0+255),b
 23437  012C28  0100               	movlb	0	; () banked
 23438  012C2A  51E3               	movf	Port_SetPinType@Output& (0+255),w,b
 23439  012C2C  A4D8               	btfss	status,2,c
 23440  012C2E  0012               	return	
 23441                           
 23442                           ; BSR set to: 0
 23443                           ;Port.c: 220: {
 23444                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23445  012C30  0100               	movlb	0	; () banked
 23446  012C32  EE20 F002          	lfsr	2,2
 23447  012C36  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23448  012C38  26D9               	addwf	fsr2l,f,c
 23449  012C3A  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23450  012C3C  22DA               	addwfc	fsr2h,f,c
 23451  012C3E  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23452  012C42  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23453  012C46  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23454  012C4A  0E01               	movlw	1
 23455  012C4C  0100               	movlb	0	; () banked
 23456  012C4E  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23457  012C50  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23458                           
 23459                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 23460  012C54  0100               	movlb	0	; () banked
 23461  012C56  EE20 F004          	lfsr	2,4
 23462  012C5A  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23463  012C5C  26D9               	addwf	fsr2l,f,c
 23464  012C5E  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23465  012C60  22DA               	addwfc	fsr2h,f,c
 23466  012C62  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23467  012C66  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23468  012C6A  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23469  012C6E  0E01               	movlw	1
 23470  012C70  0100               	movlb	0	; () banked
 23471  012C72  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23472  012C74  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23473                           
 23474                           ;Port.c: 226: break;
 23475  012C78  D044               	goto	l414
 23476  012C7A                     
 23477                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 23478                           
 23479                           ;Port.c: 230: case eTypeOutputPushPull:
 23480  012C7A  C0E4  F0C8         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 23481  012C7E  C0E5  F0C9         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 23482  012C82  0E00               	movlw	0
 23483  012C84  0100               	movlb	0	; () banked
 23484  012C86  6FCA               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 23485  012C88  C0E1  F0CB         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 23486  012C8C  ECA7  F0AB         	call	_PortProperty_Valid	;wreg free
 23487  012C90  0100               	movlb	0	; () banked
 23488  012C92  6FE3               	movwf	Port_SetPinType@Output& (0+255),b
 23489  012C94  0100               	movlb	0	; () banked
 23490  012C96  51E3               	movf	Port_SetPinType@Output& (0+255),w,b
 23491  012C98  A4D8               	btfss	status,2,c
 23492  012C9A  0012               	return	
 23493                           
 23494                           ; BSR set to: 0
 23495                           ;Port.c: 232: {
 23496                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 23497  012C9C  0100               	movlb	0	; () banked
 23498  012C9E  EE20 F002          	lfsr	2,2
 23499  012CA2  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23500  012CA4  26D9               	addwf	fsr2l,f,c
 23501  012CA6  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23502  012CA8  22DA               	addwfc	fsr2h,f,c
 23503  012CAA  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23504  012CAE  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23505  012CB2  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23506  012CB6  0E00               	movlw	0
 23507  012CB8  0100               	movlb	0	; () banked
 23508  012CBA  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23509  012CBC  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23510                           
 23511                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 23512  012CC0  0100               	movlb	0	; () banked
 23513  012CC2  EE20 F004          	lfsr	2,4
 23514  012CC6  51DF               	movf	Port_SetPinType@pInput& (0+255),w,b
 23515  012CC8  26D9               	addwf	fsr2l,f,c
 23516  012CCA  51E0               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23517  012CCC  22DA               	addwfc	fsr2h,f,c
 23518  012CCE  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 23519  012CD2  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 23520  012CD6  C0E1  F0BB         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23521  012CDA  0E00               	movlw	0
 23522  012CDC  0100               	movlb	0	; () banked
 23523  012CDE  6FBC               	movwf	Byte_SetBit@pValue& (0+255),b
 23524  012CE0  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 23525                           
 23526                           ;Port.c: 239: }
 23527                           
 23528                           ;Port.c: 238: break;
 23529  012CE4  D00E               	goto	l414
 23530  012CE6                     l412:
 23531  012CE6  0100               	movlb	0	; () banked
 23532  012CE8  51E2               	movf	Port_SetPinType@pType& (0+255),w,b
 23533                           
 23534                           ; Switch size 1, requested type "space"
 23535                           ; Number of cases is 4, Range of values is 0 to 3
 23536                           ; switch strategies available:
 23537                           ; Name         Instructions Cycles
 23538                           ; simple_byte           13     7 (average)
 23539                           ;	Chosen strategy is simple_byte
 23540  012CEA  0A00               	xorlw	0	; case 0
 23541  012CEC  B4D8               	btfsc	status,2,c
 23542  012CEE  D746               	goto	l413
 23543  012CF0  0A01               	xorlw	1	; case 1
 23544  012CF2  B4D8               	btfsc	status,2,c
 23545  012CF4  D756               	goto	l415
 23546  012CF6  0A03               	xorlw	3	; case 2
 23547  012CF8  B4D8               	btfsc	status,2,c
 23548  012CFA  D789               	goto	l417
 23549  012CFC  0A01               	xorlw	1	; case 3
 23550  012CFE  B4D8               	btfsc	status,2,c
 23551  012D00  D7BC               	goto	l421
 23552  012D02                     l414:
 23553                           
 23554                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 23555                           
 23556                           ; BSR set to: 0
 23557  012D02  0E08               	movlw	8
 23558  012D04  0100               	movlb	0	; () banked
 23559  012D06  25DF               	addwf	Port_SetPinType@pInput& (0+255),w,b
 23560  012D08  0100               	movlb	0	; () banked
 23561  012D0A  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 23562  012D0C  0E00               	movlw	0
 23563  012D0E  0100               	movlb	0	; () banked
 23564  012D10  21E0               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 23565  012D12  0100               	movlb	0	; () banked
 23566  012D14  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23567  012D16  C0E1  F0CA         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 23568  012D1A  C0E2  F0CB         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 23569  012D1E  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 23570  012D22  0012               	return	
 23571  012D24                     __end_of_Port_SetPinType:
 23572                           	opt stack 0
 23573                           tosu	equ	0xFFF
 23574                           tosh	equ	0xFFE
 23575                           tosl	equ	0xFFD
 23576                           pclath	equ	0xFFA
 23577                           tblptru	equ	0xFF8
 23578                           tblptrh	equ	0xFF7
 23579                           tblptrl	equ	0xFF6
 23580                           tablat	equ	0xFF5
 23581                           prodh	equ	0xFF4
 23582                           prodl	equ	0xFF3
 23583                           intcon	equ	0xFF2
 23584                           postinc0	equ	0xFEE
 23585                           wreg	equ	0xFE8
 23586                           indf1	equ	0xFE7
 23587                           postdec1	equ	0xFE5
 23588                           fsr1h	equ	0xFE2
 23589                           fsr1l	equ	0xFE1
 23590                           indf2	equ	0xFDF
 23591                           postinc2	equ	0xFDE
 23592                           postdec2	equ	0xFDD
 23593                           plusw2	equ	0xFDB
 23594                           fsr2h	equ	0xFDA
 23595                           fsr2l	equ	0xFD9
 23596                           status	equ	0xFD8
 23597                           
 23598 ;; *************** function _Port_SetQuadType *****************
 23599 ;; Defined at:
 23600 ;;		line 399 in file "Library/Port.c"
 23601 ;; Parameters:    Size  Location     Type
 23602 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 23603 ;;		 -> PortB(10), PortD(10), 
 23604 ;;  pQuad           1   56[BANK0 ] enum E6776
 23605 ;;  pType           1   57[BANK0 ] enum E6795
 23606 ;; Auto vars:     Size  Location     Type
 23607 ;;  Output          1   58[BANK0 ] enum E6475
 23608 ;; Return value:  Size  Location     Type
 23609 ;;                  1    wreg      enum E6475
 23610 ;; Registers used:
 23611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23612 ;; Tracked objects:
 23613 ;;		On entry : 0/0
 23614 ;;		On exit  : 0/0
 23615 ;;		Unchanged: 0/0
 23616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23620 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23621 ;;Total ram usage:        5 bytes
 23622 ;; Hardware stack levels used:    1
 23623 ;; Hardware stack levels required when called:   13
 23624 ;; This function calls:
 23625 ;;		_Byte_SetQuad
 23626 ;;		_Port_CheckQuadType
 23627 ;;		_Word_SetPair
 23628 ;; This function is called by:
 23629 ;;		_MXK_InitDIPSwitch
 23630 ;;		_MXK_Init
 23631 ;; This function uses a non-reentrant model
 23632 ;;
 23633                           
 23634                           	psect	text109
 23635  011F4A                     __ptext109:
 23636                           	opt stack 0
 23637  011F4A                     _Port_SetQuadType:
 23638                           	opt stack 15
 23639                           
 23640                           ;Port.c: 401: ePinError Output = ePinErrorState;
 23641                           
 23642                           ;incstack = 0
 23643  011F4A  0E05               	movlw	5
 23644  011F4C  0100               	movlb	0	; () banked
 23645  011F4E  6FF3               	movwf	Port_SetQuadType@Output& (0+255),b
 23646                           
 23647                           ;Port.c: 403: switch (pType)
 23648  011F50  D0C7               	goto	l476
 23649  011F52                     
 23650                           ; BSR set to: 0
 23651                           ;Port.c: 407: {
 23652                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 23653                           
 23654                           ; BSR set to: 0
 23655  011F52  0100               	movlb	0	; () banked
 23656  011F54  EE20 F002          	lfsr	2,2
 23657  011F58  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23658  011F5A  26D9               	addwf	fsr2l,f,c
 23659  011F5C  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23660  011F5E  22DA               	addwfc	fsr2h,f,c
 23661  011F60  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23662  011F64  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23663  011F68  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23664  011F6C  0E0F               	movlw	15
 23665  011F6E  0100               	movlb	0	; () banked
 23666  011F70  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23667  011F72  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23668                           
 23669                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23670  011F76  0100               	movlb	0	; () banked
 23671  011F78  EE20 F004          	lfsr	2,4
 23672  011F7C  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23673  011F7E  26D9               	addwf	fsr2l,f,c
 23674  011F80  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23675  011F82  22DA               	addwfc	fsr2h,f,c
 23676  011F84  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23677  011F88  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23678  011F8C  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23679  011F90  0E00               	movlw	0
 23680  011F92  0100               	movlb	0	; () banked
 23681  011F94  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23682  011F96  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23683                           
 23684                           ;Port.c: 413: }
 23685                           ;Port.c: 415: break;
 23686  011F9A  D0B0               	goto	l478
 23687  011F9C                     
 23688                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23689  011F9C  C0EF  F0E8         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23690  011FA0  C0F0  F0E9         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23691  011FA4  C0F1  F0EA         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23692  011FA8  0E03               	movlw	3
 23693  011FAA  0100               	movlb	0	; () banked
 23694  011FAC  6FEB               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23695  011FAE  ECEC  F0AF         	call	_Port_CheckQuadType	;wreg free
 23696  011FB2  0100               	movlb	0	; () banked
 23697  011FB4  6FF3               	movwf	Port_SetQuadType@Output& (0+255),b
 23698  011FB6  0100               	movlb	0	; () banked
 23699  011FB8  51F3               	movf	Port_SetQuadType@Output& (0+255),w,b
 23700  011FBA  A4D8               	btfss	status,2,c
 23701  011FBC  0012               	return	
 23702                           
 23703                           ; BSR set to: 0
 23704                           ;Port.c: 418: {
 23705                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 23706  011FBE  0100               	movlb	0	; () banked
 23707  011FC0  EE20 F002          	lfsr	2,2
 23708  011FC4  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23709  011FC6  26D9               	addwf	fsr2l,f,c
 23710  011FC8  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23711  011FCA  22DA               	addwfc	fsr2h,f,c
 23712  011FCC  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23713  011FD0  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23714  011FD4  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23715  011FD8  0E00               	movlw	0
 23716  011FDA  0100               	movlb	0	; () banked
 23717  011FDC  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23718  011FDE  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23719                           
 23720                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23721  011FE2  0100               	movlb	0	; () banked
 23722  011FE4  EE20 F004          	lfsr	2,4
 23723  011FE8  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23724  011FEA  26D9               	addwf	fsr2l,f,c
 23725  011FEC  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23726  011FEE  22DA               	addwfc	fsr2h,f,c
 23727  011FF0  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23728  011FF4  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23729  011FF8  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23730  011FFC  0E00               	movlw	0
 23731  011FFE  0100               	movlb	0	; () banked
 23732  012000  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23733  012002  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23734                           
 23735                           ;Port.c: 424: }
 23736  012006  D07A               	goto	l478
 23737  012008                     
 23738                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23739  012008  C0EF  F0E8         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23740  01200C  C0F0  F0E9         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23741  012010  C0F1  F0EA         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23742  012014  0E03               	movlw	3
 23743  012016  0100               	movlb	0	; () banked
 23744  012018  6FEB               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23745  01201A  ECEC  F0AF         	call	_Port_CheckQuadType	;wreg free
 23746  01201E  0100               	movlb	0	; () banked
 23747  012020  6FF3               	movwf	Port_SetQuadType@Output& (0+255),b
 23748  012022  0100               	movlb	0	; () banked
 23749  012024  51F3               	movf	Port_SetQuadType@Output& (0+255),w,b
 23750  012026  A4D8               	btfss	status,2,c
 23751  012028  0012               	return	
 23752                           
 23753                           ; BSR set to: 0
 23754                           ;Port.c: 429: {
 23755                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 23756  01202A  0100               	movlb	0	; () banked
 23757  01202C  EE20 F002          	lfsr	2,2
 23758  012030  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23759  012032  26D9               	addwf	fsr2l,f,c
 23760  012034  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23761  012036  22DA               	addwfc	fsr2h,f,c
 23762  012038  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23763  01203C  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23764  012040  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23765  012044  0E0F               	movlw	15
 23766  012046  0100               	movlb	0	; () banked
 23767  012048  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23768  01204A  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23769                           
 23770                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 23771  01204E  0100               	movlb	0	; () banked
 23772  012050  EE20 F004          	lfsr	2,4
 23773  012054  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23774  012056  26D9               	addwf	fsr2l,f,c
 23775  012058  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23776  01205A  22DA               	addwfc	fsr2h,f,c
 23777  01205C  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23778  012060  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23779  012064  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23780  012068  0E0F               	movlw	15
 23781  01206A  0100               	movlb	0	; () banked
 23782  01206C  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23783  01206E  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23784                           
 23785                           ;Port.c: 435: }
 23786  012072  D044               	goto	l478
 23787  012074                     
 23788                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 23789  012074  C0EF  F0E8         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 23790  012078  C0F0  F0E9         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 23791  01207C  C0F1  F0EA         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 23792  012080  0E03               	movlw	3
 23793  012082  0100               	movlb	0	; () banked
 23794  012084  6FEB               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 23795  012086  ECEC  F0AF         	call	_Port_CheckQuadType	;wreg free
 23796  01208A  0100               	movlb	0	; () banked
 23797  01208C  6FF3               	movwf	Port_SetQuadType@Output& (0+255),b
 23798  01208E  0100               	movlb	0	; () banked
 23799  012090  51F3               	movf	Port_SetQuadType@Output& (0+255),w,b
 23800  012092  A4D8               	btfss	status,2,c
 23801  012094  0012               	return	
 23802                           
 23803                           ; BSR set to: 0
 23804                           ;Port.c: 440: {
 23805                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 23806  012096  0100               	movlb	0	; () banked
 23807  012098  EE20 F002          	lfsr	2,2
 23808  01209C  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23809  01209E  26D9               	addwf	fsr2l,f,c
 23810  0120A0  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23811  0120A2  22DA               	addwfc	fsr2h,f,c
 23812  0120A4  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23813  0120A8  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23814  0120AC  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23815  0120B0  0E00               	movlw	0
 23816  0120B2  0100               	movlb	0	; () banked
 23817  0120B4  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23818  0120B6  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23819                           
 23820                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 23821  0120BA  0100               	movlb	0	; () banked
 23822  0120BC  EE20 F004          	lfsr	2,4
 23823  0120C0  51EF               	movf	Port_SetQuadType@pInput& (0+255),w,b
 23824  0120C2  26D9               	addwf	fsr2l,f,c
 23825  0120C4  51F0               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23826  0120C6  22DA               	addwfc	fsr2h,f,c
 23827  0120C8  CFDE F0C4          	movff	postinc2,Byte_SetQuad@pInput
 23828  0120CC  CFDD F0C5          	movff	postdec2,Byte_SetQuad@pInput+1
 23829  0120D0  C0F1  F0C6         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 23830  0120D4  0E00               	movlw	0
 23831  0120D6  0100               	movlb	0	; () banked
 23832  0120D8  6FC7               	movwf	Byte_SetQuad@pValue& (0+255),b
 23833  0120DA  ECF6  F0B4         	call	_Byte_SetQuad	;wreg free
 23834                           
 23835                           ;Port.c: 446: }
 23836  0120DE  D00E               	goto	l478
 23837  0120E0                     l476:
 23838  0120E0  0100               	movlb	0	; () banked
 23839  0120E2  51F2               	movf	Port_SetQuadType@pType& (0+255),w,b
 23840                           
 23841                           ; Switch size 1, requested type "space"
 23842                           ; Number of cases is 4, Range of values is 0 to 3
 23843                           ; switch strategies available:
 23844                           ; Name         Instructions Cycles
 23845                           ; simple_byte           13     7 (average)
 23846                           ;	Chosen strategy is simple_byte
 23847  0120E4  0A00               	xorlw	0	; case 0
 23848  0120E6  B4D8               	btfsc	status,2,c
 23849  0120E8  D734               	goto	l477
 23850  0120EA  0A01               	xorlw	1	; case 1
 23851  0120EC  B4D8               	btfsc	status,2,c
 23852  0120EE  D756               	goto	l479
 23853  0120F0  0A03               	xorlw	3	; case 2
 23854  0120F2  B4D8               	btfsc	status,2,c
 23855  0120F4  D789               	goto	l483
 23856  0120F6  0A01               	xorlw	1	; case 3
 23857  0120F8  B4D8               	btfsc	status,2,c
 23858  0120FA  D7BC               	goto	l486
 23859  0120FC                     l478:
 23860                           
 23861                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 23862                           
 23863                           ; BSR set to: 0
 23864  0120FC  0E08               	movlw	8
 23865  0120FE  0100               	movlb	0	; () banked
 23866  012100  25EF               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23867  012102  0100               	movlb	0	; () banked
 23868  012104  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 23869  012106  0E00               	movlw	0
 23870  012108  0100               	movlb	0	; () banked
 23871  01210A  21F0               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23872  01210C  0100               	movlb	0	; () banked
 23873  01210E  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23874  012110  0100               	movlb	0	; () banked
 23875  012112  51F1               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23876  012114  0D04               	mullw	4
 23877  012116  CFF3 F0CA          	movff	prodl,Word_SetPair@pPair
 23878  01211A  C0F2  F0CB         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23879  01211E  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 23880                           
 23881                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 23882  012122  0E08               	movlw	8
 23883  012124  0100               	movlb	0	; () banked
 23884  012126  25EF               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23885  012128  0100               	movlb	0	; () banked
 23886  01212A  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 23887  01212C  0E00               	movlw	0
 23888  01212E  0100               	movlb	0	; () banked
 23889  012130  21F0               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23890  012132  0100               	movlb	0	; () banked
 23891  012134  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23892  012136  0100               	movlb	0	; () banked
 23893  012138  51F1               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23894  01213A  0D04               	mullw	4
 23895  01213C  28F3               	incf	prodl,w,c
 23896  01213E  0100               	movlb	0	; () banked
 23897  012140  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 23898  012142  C0F2  F0CB         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23899  012146  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 23900                           
 23901                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 23902  01214A  0E08               	movlw	8
 23903  01214C  0100               	movlb	0	; () banked
 23904  01214E  25EF               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23905  012150  0100               	movlb	0	; () banked
 23906  012152  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 23907  012154  0E00               	movlw	0
 23908  012156  0100               	movlb	0	; () banked
 23909  012158  21F0               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23910  01215A  0100               	movlb	0	; () banked
 23911  01215C  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23912  01215E  0100               	movlb	0	; () banked
 23913  012160  51F1               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23914  012162  0D04               	mullw	4
 23915  012164  50F3               	movf	prodl,w,c
 23916  012166  0F02               	addlw	2
 23917  012168  0100               	movlb	0	; () banked
 23918  01216A  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 23919  01216C  C0F2  F0CB         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23920  012170  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 23921                           
 23922                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 23923  012174  0E08               	movlw	8
 23924  012176  0100               	movlb	0	; () banked
 23925  012178  25EF               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 23926  01217A  0100               	movlb	0	; () banked
 23927  01217C  6FC8               	movwf	Word_SetPair@pInput& (0+255),b
 23928  01217E  0E00               	movlw	0
 23929  012180  0100               	movlb	0	; () banked
 23930  012182  21F0               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 23931  012184  0100               	movlb	0	; () banked
 23932  012186  6FC9               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 23933  012188  0100               	movlb	0	; () banked
 23934  01218A  51F1               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 23935  01218C  0D04               	mullw	4
 23936  01218E  50F3               	movf	prodl,w,c
 23937  012190  0F03               	addlw	3
 23938  012192  0100               	movlb	0	; () banked
 23939  012194  6FCA               	movwf	Word_SetPair@pPair& (0+255),b
 23940  012196  C0F2  F0CB         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23941  01219A  ECE9  F0B1         	call	_Word_SetPair	;wreg free
 23942  01219E  0012               	return	
 23943  0121A0                     __end_of_Port_SetQuadType:
 23944                           	opt stack 0
 23945                           tosu	equ	0xFFF
 23946                           tosh	equ	0xFFE
 23947                           tosl	equ	0xFFD
 23948                           pclath	equ	0xFFA
 23949                           tblptru	equ	0xFF8
 23950                           tblptrh	equ	0xFF7
 23951                           tblptrl	equ	0xFF6
 23952                           tablat	equ	0xFF5
 23953                           prodh	equ	0xFF4
 23954                           prodl	equ	0xFF3
 23955                           intcon	equ	0xFF2
 23956                           postinc0	equ	0xFEE
 23957                           wreg	equ	0xFE8
 23958                           indf1	equ	0xFE7
 23959                           postdec1	equ	0xFE5
 23960                           fsr1h	equ	0xFE2
 23961                           fsr1l	equ	0xFE1
 23962                           indf2	equ	0xFDF
 23963                           postinc2	equ	0xFDE
 23964                           postdec2	equ	0xFDD
 23965                           plusw2	equ	0xFDB
 23966                           fsr2h	equ	0xFDA
 23967                           fsr2l	equ	0xFD9
 23968                           status	equ	0xFD8
 23969                           
 23970 ;; *************** function _Word_SetPair *****************
 23971 ;; Defined at:
 23972 ;;		line 149 in file "Library/Types.c"
 23973 ;; Parameters:    Size  Location     Type
 23974 ;;  pInput          2   15[BANK0 ] PTR struct Word
 23975 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23976 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23977 ;;  pPair           1   17[BANK0 ] unsigned char 
 23978 ;;  pValue          1   18[BANK0 ] unsigned char 
 23979 ;; Auto vars:     Size  Location     Type
 23980 ;;		None
 23981 ;; Return value:  Size  Location     Type
 23982 ;;                  1    wreg      void 
 23983 ;; Registers used:
 23984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23985 ;; Tracked objects:
 23986 ;;		On entry : 0/0
 23987 ;;		On exit  : 0/0
 23988 ;;		Unchanged: 0/0
 23989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23994 ;;Total ram usage:        4 bytes
 23995 ;; Hardware stack levels used:    1
 23996 ;; Hardware stack levels required when called:    9
 23997 ;; This function calls:
 23998 ;;		_Byte_SetPair
 23999 ;; This function is called by:
 24000 ;;		_Port_SetPinType
 24001 ;;		_Port_SetQuadType
 24002 ;;		_Port_SetType
 24003 ;;		_Port_SetPairType
 24004 ;;		_PortProperty_Init
 24005 ;; This function uses a non-reentrant model
 24006 ;;
 24007                           
 24008                           	psect	text110
 24009  0163D2                     __ptext110:
 24010                           	opt stack 0
 24011  0163D2                     _Word_SetPair:
 24012                           	opt stack 18
 24013                           
 24014                           ;Types.c: 151: if (pPair >= 4)
 24015                           
 24016                           ;incstack = 0
 24017  0163D2  0E03               	movlw	3
 24018  0163D4  0100               	movlb	0	; () banked
 24019  0163D6  65CA               	cpfsgt	Word_SetPair@pPair& (0+255),b
 24020  0163D8  D014               	goto	l776
 24021                           
 24022                           ; BSR set to: 0
 24023                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 24024  0163DA  0E01               	movlw	1
 24025  0163DC  0100               	movlb	0	; () banked
 24026  0163DE  25C8               	addwf	Word_SetPair@pInput& (0+255),w,b
 24027  0163E0  0100               	movlb	0	; () banked
 24028  0163E2  6FC4               	movwf	Byte_SetPair@pInput& (0+255),b
 24029  0163E4  0E00               	movlw	0
 24030  0163E6  0100               	movlb	0	; () banked
 24031  0163E8  21C9               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 24032  0163EA  0100               	movlb	0	; () banked
 24033  0163EC  6FC5               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 24034  0163EE  0100               	movlb	0	; () banked
 24035  0163F0  51CA               	movf	Word_SetPair@pPair& (0+255),w,b
 24036  0163F2  0FFC               	addlw	252
 24037  0163F4  0100               	movlb	0	; () banked
 24038  0163F6  6FC6               	movwf	Byte_SetPair@pPair& (0+255),b
 24039  0163F8  C0CB  F0C7         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24040  0163FC  ECE5  F0B4         	call	_Byte_SetPair	;wreg free
 24041  016400  0012               	return	
 24042  016402                     l776:
 24043                           
 24044                           ;Types.c: 153: else
 24045                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 24046  016402  C0C8  F0C4         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 24047  016406  C0C9  F0C5         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 24048  01640A  C0CA  F0C6         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 24049  01640E  C0CB  F0C7         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24050  016412  ECE5  F0B4         	call	_Byte_SetPair	;wreg free
 24051  016416  0012               	return	
 24052  016418                     __end_of_Word_SetPair:
 24053                           	opt stack 0
 24054                           tosu	equ	0xFFF
 24055                           tosh	equ	0xFFE
 24056                           tosl	equ	0xFFD
 24057                           pclath	equ	0xFFA
 24058                           tblptru	equ	0xFF8
 24059                           tblptrh	equ	0xFF7
 24060                           tblptrl	equ	0xFF6
 24061                           tablat	equ	0xFF5
 24062                           prodh	equ	0xFF4
 24063                           prodl	equ	0xFF3
 24064                           intcon	equ	0xFF2
 24065                           postinc0	equ	0xFEE
 24066                           wreg	equ	0xFE8
 24067                           indf1	equ	0xFE7
 24068                           postdec1	equ	0xFE5
 24069                           fsr1h	equ	0xFE2
 24070                           fsr1l	equ	0xFE1
 24071                           indf2	equ	0xFDF
 24072                           postinc2	equ	0xFDE
 24073                           postdec2	equ	0xFDD
 24074                           plusw2	equ	0xFDB
 24075                           fsr2h	equ	0xFDA
 24076                           fsr2l	equ	0xFD9
 24077                           status	equ	0xFD8
 24078                           
 24079 ;; *************** function _Byte_SetPair *****************
 24080 ;; Defined at:
 24081 ;;		line 83 in file "Library/Types.c"
 24082 ;; Parameters:    Size  Location     Type
 24083 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24084 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24085 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24086 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 24087 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 24088 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 24089 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 24090 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 24091 ;;		 -> NULL(0), 
 24092 ;;  pPair           1   13[BANK0 ] unsigned char 
 24093 ;;  pValue          1   14[BANK0 ] unsigned char 
 24094 ;; Auto vars:     Size  Location     Type
 24095 ;;		None
 24096 ;; Return value:  Size  Location     Type
 24097 ;;                  1    wreg      void 
 24098 ;; Registers used:
 24099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24100 ;; Tracked objects:
 24101 ;;		On entry : 0/0
 24102 ;;		On exit  : 0/0
 24103 ;;		Unchanged: 0/0
 24104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24105 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24109 ;;Total ram usage:        4 bytes
 24110 ;; Hardware stack levels used:    1
 24111 ;; Hardware stack levels required when called:    8
 24112 ;; This function calls:
 24113 ;;		_Byte_SetZone
 24114 ;; This function is called by:
 24115 ;;		_Word_SetPair
 24116 ;;		_Port_SetPairType
 24117 ;;		_Port_SetPair
 24118 ;; This function uses a non-reentrant model
 24119 ;;
 24120                           
 24121                           	psect	text111
 24122  0169CA                     __ptext111:
 24123                           	opt stack 0
 24124  0169CA                     _Byte_SetPair:
 24125                           	opt stack 18
 24126                           
 24127                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 24128                           
 24129                           ;incstack = 0
 24130  0169CA  C0C4  F0B9         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 24131  0169CE  C0C5  F0BA         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 24132  0169D2  0E04               	movlw	4
 24133  0169D4  0100               	movlb	0	; () banked
 24134  0169D6  6FBB               	movwf	Byte_SetZone@pMax& (0+255),b
 24135  0169D8  C0C6  F0BC         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 24136  0169DC  0E02               	movlw	2
 24137  0169DE  0100               	movlb	0	; () banked
 24138  0169E0  6FBD               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24139  0169E2  C0C7  F0BE         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 24140  0169E6  EC39  F0A5         	call	_Byte_SetZone	;wreg free
 24141  0169EA  0012               	return		;funcret
 24142  0169EC                     __end_of_Byte_SetPair:
 24143                           	opt stack 0
 24144                           tosu	equ	0xFFF
 24145                           tosh	equ	0xFFE
 24146                           tosl	equ	0xFFD
 24147                           pclath	equ	0xFFA
 24148                           tblptru	equ	0xFF8
 24149                           tblptrh	equ	0xFF7
 24150                           tblptrl	equ	0xFF6
 24151                           tablat	equ	0xFF5
 24152                           prodh	equ	0xFF4
 24153                           prodl	equ	0xFF3
 24154                           intcon	equ	0xFF2
 24155                           postinc0	equ	0xFEE
 24156                           wreg	equ	0xFE8
 24157                           indf1	equ	0xFE7
 24158                           postdec1	equ	0xFE5
 24159                           fsr1h	equ	0xFE2
 24160                           fsr1l	equ	0xFE1
 24161                           indf2	equ	0xFDF
 24162                           postinc2	equ	0xFDE
 24163                           postdec2	equ	0xFDD
 24164                           plusw2	equ	0xFDB
 24165                           fsr2h	equ	0xFDA
 24166                           fsr2l	equ	0xFD9
 24167                           status	equ	0xFD8
 24168                           
 24169 ;; *************** function _Port_CheckQuadType *****************
 24170 ;; Defined at:
 24171 ;;		line 126 in file "Library/Port.c"
 24172 ;; Parameters:    Size  Location     Type
 24173 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 24174 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24175 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24176 ;;  pQuad           1   49[BANK0 ] enum E6776
 24177 ;;  pDrive          1   50[BANK0 ] enum E6469
 24178 ;; Auto vars:     Size  Location     Type
 24179 ;;  Output          1   53[BANK0 ] enum E6475
 24180 ;;  Pair2           1   52[BANK0 ] enum E6760
 24181 ;;  Pair1           1   51[BANK0 ] enum E6760
 24182 ;; Return value:  Size  Location     Type
 24183 ;;                  1    wreg      enum E6475
 24184 ;; Registers used:
 24185 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24186 ;; Tracked objects:
 24187 ;;		On entry : 0/0
 24188 ;;		On exit  : 0/0
 24189 ;;		Unchanged: 0/0
 24190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24192 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24194 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24195 ;;Total ram usage:        7 bytes
 24196 ;; Hardware stack levels used:    1
 24197 ;; Hardware stack levels required when called:   12
 24198 ;; This function calls:
 24199 ;;		_Port_CheckPairType
 24200 ;; This function is called by:
 24201 ;;		_Port_CheckPortType
 24202 ;;		_Port_SetQuadType
 24203 ;; This function uses a non-reentrant model
 24204 ;;
 24205                           
 24206                           	psect	text112
 24207  015FD8                     __ptext112:
 24208                           	opt stack 0
 24209  015FD8                     _Port_CheckQuadType:
 24210                           	opt stack 14
 24211                           
 24212                           ;Port.c: 128: ePinError Output = ePinErrorState;
 24213                           
 24214                           ;incstack = 0
 24215  015FD8  0E05               	movlw	5
 24216  015FDA  0100               	movlb	0	; () banked
 24217  015FDC  6FEE               	movwf	Port_CheckQuadType@Output& (0+255),b
 24218                           
 24219                           ; BSR set to: 0
 24220                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 24221  015FDE  0100               	movlb	0	; () banked
 24222  015FE0  51EA               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24223  015FE2  0D02               	mullw	2
 24224  015FE4  CFF3 F0EC          	movff	prodl,Port_CheckQuadType@Pair1
 24225                           
 24226                           ; BSR set to: 0
 24227                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 24228  015FE8  0100               	movlb	0	; () banked
 24229  015FEA  51EA               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24230  015FEC  0D02               	mullw	2
 24231  015FEE  28F3               	incf	prodl,w,c
 24232  015FF0  0100               	movlb	0	; () banked
 24233  015FF2  6FED               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 24234                           
 24235                           ; BSR set to: 0
 24236                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 24237  015FF4  C0E8  F0DF         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 24238  015FF8  C0E9  F0E0         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 24239  015FFC  C0EC  F0E1         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 24240  016000  C0EB  F0E2         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 24241  016004  EC8F  F0AE         	call	_Port_CheckPairType	;wreg free
 24242  016008  0100               	movlb	0	; () banked
 24243  01600A  6FEE               	movwf	Port_CheckQuadType@Output& (0+255),b
 24244  01600C  0100               	movlb	0	; () banked
 24245  01600E  51EE               	movf	Port_CheckQuadType@Output& (0+255),w,b
 24246  016010  A4D8               	btfss	status,2,c
 24247  016012  D00C               	goto	l393
 24248                           
 24249                           ; BSR set to: 0
 24250                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 24251  016014  C0E8  F0DF         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 24252  016018  C0E9  F0E0         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 24253  01601C  C0ED  F0E1         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 24254  016020  C0EB  F0E2         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 24255  016024  EC8F  F0AE         	call	_Port_CheckPairType	;wreg free
 24256  016028  0100               	movlb	0	; () banked
 24257  01602A  6FEE               	movwf	Port_CheckQuadType@Output& (0+255),b
 24258  01602C                     l393:
 24259                           
 24260                           ; BSR set to: 0
 24261                           ;Port.c: 136: return Output;
 24262                           
 24263                           ; BSR set to: 0
 24264  01602C  0100               	movlb	0	; () banked
 24265  01602E  51EE               	movf	Port_CheckQuadType@Output& (0+255),w,b
 24266  016030  0012               	return	
 24267  016032                     __end_of_Port_CheckQuadType:
 24268                           	opt stack 0
 24269                           tosu	equ	0xFFF
 24270                           tosh	equ	0xFFE
 24271                           tosl	equ	0xFFD
 24272                           pclath	equ	0xFFA
 24273                           tblptru	equ	0xFF8
 24274                           tblptrh	equ	0xFF7
 24275                           tblptrl	equ	0xFF6
 24276                           tablat	equ	0xFF5
 24277                           prodh	equ	0xFF4
 24278                           prodl	equ	0xFF3
 24279                           intcon	equ	0xFF2
 24280                           postinc0	equ	0xFEE
 24281                           wreg	equ	0xFE8
 24282                           indf1	equ	0xFE7
 24283                           postdec1	equ	0xFE5
 24284                           fsr1h	equ	0xFE2
 24285                           fsr1l	equ	0xFE1
 24286                           indf2	equ	0xFDF
 24287                           postinc2	equ	0xFDE
 24288                           postdec2	equ	0xFDD
 24289                           plusw2	equ	0xFDB
 24290                           fsr2h	equ	0xFDA
 24291                           fsr2l	equ	0xFD9
 24292                           status	equ	0xFD8
 24293                           
 24294 ;; *************** function _Port_CheckPairType *****************
 24295 ;; Defined at:
 24296 ;;		line 112 in file "Library/Port.c"
 24297 ;; Parameters:    Size  Location     Type
 24298 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24299 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24300 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24301 ;;  pPair           1   40[BANK0 ] enum E6760
 24302 ;;  pDrive          1   41[BANK0 ] enum E6469
 24303 ;; Auto vars:     Size  Location     Type
 24304 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 24305 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24306 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24307 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24308 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24309 ;;  Output          1   44[BANK0 ] enum E6475
 24310 ;;  Pin2            1   43[BANK0 ] enum E6750
 24311 ;;  Pin1            1   42[BANK0 ] enum E6750
 24312 ;; Return value:  Size  Location     Type
 24313 ;;                  1    wreg      enum E6475
 24314 ;; Registers used:
 24315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24316 ;; Tracked objects:
 24317 ;;		On entry : 0/0
 24318 ;;		On exit  : 0/0
 24319 ;;		Unchanged: 0/0
 24320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24321 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24322 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24324 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24325 ;;Total ram usage:        9 bytes
 24326 ;; Hardware stack levels used:    1
 24327 ;; Hardware stack levels required when called:   11
 24328 ;; This function calls:
 24329 ;;		_PortProperty_Valid
 24330 ;; This function is called by:
 24331 ;;		_Port_CheckQuadType
 24332 ;;		_Port_SetPairType
 24333 ;; This function uses a non-reentrant model
 24334 ;;
 24335                           
 24336                           	psect	text113
 24337  015D1E                     __ptext113:
 24338                           	opt stack 0
 24339  015D1E                     _Port_CheckPairType:
 24340                           	opt stack 14
 24341                           
 24342                           ;Port.c: 114: ePinError Output = ePinErrorState;
 24343                           
 24344                           ; BSR set to: 0
 24345                           ;incstack = 0
 24346  015D1E  0E05               	movlw	5
 24347  015D20  0100               	movlb	0	; () banked
 24348  015D22  6FE5               	movwf	Port_CheckPairType@Output& (0+255),b
 24349                           
 24350                           ; BSR set to: 0
 24351                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 24352  015D24  C0DF  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 24353  015D28  C0E0  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 24354  015D2C  CFDE F0E6          	movff	postinc2,Port_CheckPairType@Props
 24355  015D30  CFDD F0E7          	movff	postdec2,Port_CheckPairType@Props+1
 24356                           
 24357                           ; BSR set to: 0
 24358                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 24359  015D34  0100               	movlb	0	; () banked
 24360  015D36  51E1               	movf	Port_CheckPairType@pPair& (0+255),w,b
 24361  015D38  0D02               	mullw	2
 24362  015D3A  CFF3 F0E3          	movff	prodl,Port_CheckPairType@Pin1
 24363                           
 24364                           ; BSR set to: 0
 24365                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 24366  015D3E  0100               	movlb	0	; () banked
 24367  015D40  51E1               	movf	Port_CheckPairType@pPair& (0+255),w,b
 24368  015D42  0D02               	mullw	2
 24369  015D44  28F3               	incf	prodl,w,c
 24370  015D46  0100               	movlb	0	; () banked
 24371  015D48  6FE4               	movwf	Port_CheckPairType@Pin2& (0+255),b
 24372                           
 24373                           ; BSR set to: 0
 24374                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 24375  015D4A  C0E6  F0C8         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 24376  015D4E  C0E7  F0C9         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 24377  015D52  C0E2  F0CA         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 24378  015D56  C0E3  F0CB         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 24379  015D5A  ECA7  F0AB         	call	_PortProperty_Valid	;wreg free
 24380  015D5E  0100               	movlb	0	; () banked
 24381  015D60  6FE5               	movwf	Port_CheckPairType@Output& (0+255),b
 24382  015D62  0100               	movlb	0	; () banked
 24383  015D64  51E5               	movf	Port_CheckPairType@Output& (0+255),w,b
 24384  015D66  A4D8               	btfss	status,2,c
 24385  015D68  D00C               	goto	l389
 24386                           
 24387                           ; BSR set to: 0
 24388                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 24389  015D6A  C0E6  F0C8         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 24390  015D6E  C0E7  F0C9         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 24391  015D72  C0E2  F0CA         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 24392  015D76  C0E4  F0CB         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 24393  015D7A  ECA7  F0AB         	call	_PortProperty_Valid	;wreg free
 24394  015D7E  0100               	movlb	0	; () banked
 24395  015D80  6FE5               	movwf	Port_CheckPairType@Output& (0+255),b
 24396  015D82                     l389:
 24397                           
 24398                           ; BSR set to: 0
 24399                           ;Port.c: 124: return Output;
 24400                           
 24401                           ; BSR set to: 0
 24402  015D82  0100               	movlb	0	; () banked
 24403  015D84  51E5               	movf	Port_CheckPairType@Output& (0+255),w,b
 24404  015D86  0012               	return	
 24405  015D88                     __end_of_Port_CheckPairType:
 24406                           	opt stack 0
 24407                           tosu	equ	0xFFF
 24408                           tosh	equ	0xFFE
 24409                           tosl	equ	0xFFD
 24410                           pclath	equ	0xFFA
 24411                           tblptru	equ	0xFF8
 24412                           tblptrh	equ	0xFF7
 24413                           tblptrl	equ	0xFF6
 24414                           tablat	equ	0xFF5
 24415                           prodh	equ	0xFF4
 24416                           prodl	equ	0xFF3
 24417                           intcon	equ	0xFF2
 24418                           postinc0	equ	0xFEE
 24419                           wreg	equ	0xFE8
 24420                           indf1	equ	0xFE7
 24421                           postdec1	equ	0xFE5
 24422                           fsr1h	equ	0xFE2
 24423                           fsr1l	equ	0xFE1
 24424                           indf2	equ	0xFDF
 24425                           postinc2	equ	0xFDE
 24426                           postdec2	equ	0xFDD
 24427                           plusw2	equ	0xFDB
 24428                           fsr2h	equ	0xFDA
 24429                           fsr2l	equ	0xFD9
 24430                           status	equ	0xFD8
 24431                           
 24432 ;; *************** function _PortProperty_Valid *****************
 24433 ;; Defined at:
 24434 ;;		line 220 in file "Library/Types.c"
 24435 ;; Parameters:    Size  Location     Type
 24436 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 24437 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24438 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24439 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24440 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24441 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 24442 ;;  pPin            1   18[BANK0 ] unsigned char 
 24443 ;; Auto vars:     Size  Location     Type
 24444 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 24445 ;;  Pair            1   37[BANK0 ] enum E6469
 24446 ;; Return value:  Size  Location     Type
 24447 ;;                  1    wreg      enum E6475
 24448 ;; Registers used:
 24449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24450 ;; Tracked objects:
 24451 ;;		On entry : 0/0
 24452 ;;		On exit  : 0/0
 24453 ;;		Unchanged: 0/0
 24454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24455 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24456 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24458 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24459 ;;Total ram usage:       23 bytes
 24460 ;; Hardware stack levels used:    1
 24461 ;; Hardware stack levels required when called:   10
 24462 ;; This function calls:
 24463 ;;		_Word_GetPair
 24464 ;; This function is called by:
 24465 ;;		_Port_CheckPairType
 24466 ;;		_Port_SetPinType
 24467 ;; This function uses a non-reentrant model
 24468 ;;
 24469                           
 24470                           	psect	text114
 24471  01574E                     __ptext114:
 24472                           	opt stack 0
 24473  01574E                     _PortProperty_Valid:
 24474                           	opt stack 17
 24475                           
 24476                           ;Types.c: 222: ePinDrive Pair;
 24477                           ;Types.c: 223: const ePinError Errors[4][4] =
 24478                           ;Types.c: 224: {
 24479                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 24480                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 24481                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 24482                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 24483                           ;Types.c: 230: };
 24484                           
 24485                           ; BSR set to: 0
 24486                           ;incstack = 0
 24487  01574E  0EF5               	movlw	low PortProperty_Valid@F6830
 24488  015750  6EF6               	movwf	tblptrl,c
 24489  015752                     	if	1	;There is more than 1 active tblptr byte
 24490  015752  0EFC               	movlw	high PortProperty_Valid@F6830
 24491  015754  6EF7               	movwf	tblptrh,c
 24492  015756                     	endif
 24493  015756                     	if	1	;There are 3 active tblptr bytes
 24494  015756  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 24495  015758  6EF8               	movwf	tblptru,c
 24496  01575A                     	endif
 24497  01575A  EE20  F0CE         	lfsr	2,PortProperty_Valid@Errors
 24498  01575E  0E0F               	movlw	15
 24499  015760                     u9160:
 24500  015760  0009               	tblrd		*+
 24501  015762  CFF5 FFDE          	movff	tablat,postinc2
 24502  015766  06E8               	decf	wreg,f,c
 24503  015768  E2FB               	bc	u9160
 24504                           
 24505                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 24506  01576A  C0C8  F0C5         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 24507  01576E  C0C9  F0C6         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 24508  015772  C0CB  F0C7         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 24509  015776  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 24510  01577A  0100               	movlb	0	; () banked
 24511  01577C  6FDE               	movwf	PortProperty_Valid@Pair& (0+255),b
 24512                           
 24513                           ; BSR set to: 0
 24514                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 24515  01577E  0E04               	movlw	4
 24516  015780  0100               	movlb	0	; () banked
 24517  015782  61CA               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 24518  015784  D020               	goto	l819
 24519                           
 24520                           ; BSR set to: 0
 24521  015786  0E04               	movlw	4
 24522  015788  0100               	movlb	0	; () banked
 24523  01578A  61DE               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 24524  01578C  D01C               	goto	l819
 24525                           
 24526                           ; BSR set to: 0
 24527                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 24528  01578E  0100               	movlb	0	; () banked
 24529  015790  51CA               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 24530  015792  0D04               	mullw	4
 24531  015794  0ECE               	movlw	low PortProperty_Valid@Errors
 24532  015796  0100               	movlb	0	; () banked
 24533  015798  6FCC               	movwf	??_PortProperty_Valid& (0+255),b
 24534  01579A  0E00               	movlw	high PortProperty_Valid@Errors
 24535  01579C  0100               	movlb	0	; () banked
 24536  01579E  6FCD               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 24537  0157A0  50F3               	movf	prodl,w,c
 24538  0157A2  0100               	movlb	0	; () banked
 24539  0157A4  27CC               	addwf	??_PortProperty_Valid& (0+255),f,b
 24540  0157A6  50F4               	movf	prodh,w,c
 24541  0157A8  0100               	movlb	0	; () banked
 24542  0157AA  23CD               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 24543  0157AC  0100               	movlb	0	; () banked
 24544  0157AE  51DE               	movf	PortProperty_Valid@Pair& (0+255),w,b
 24545  0157B0  0D01               	mullw	1
 24546  0157B2  50F3               	movf	prodl,w,c
 24547  0157B4  0100               	movlb	0	; () banked
 24548  0157B6  25CC               	addwf	??_PortProperty_Valid& (0+255),w,b
 24549  0157B8  6ED9               	movwf	fsr2l,c
 24550  0157BA  50F4               	movf	prodh,w,c
 24551  0157BC  0100               	movlb	0	; () banked
 24552  0157BE  21CD               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 24553  0157C0  6EDA               	movwf	fsr2h,c
 24554  0157C2  50DF               	movf	indf2,w,c
 24555                           
 24556                           ; BSR set to: 0
 24557  0157C4  0012               	return	
 24558  0157C6                     l819:
 24559                           
 24560                           ; BSR set to: 0
 24561                           ;Types.c: 237: return ePinErrorState;
 24562                           
 24563                           ; BSR set to: 0
 24564  0157C6  0E05               	movlw	5
 24565  0157C8  0012               	return	
 24566  0157CA                     __end_of_PortProperty_Valid:
 24567                           	opt stack 0
 24568                           tosu	equ	0xFFF
 24569                           tosh	equ	0xFFE
 24570                           tosl	equ	0xFFD
 24571                           pclath	equ	0xFFA
 24572                           tblptru	equ	0xFF8
 24573                           tblptrh	equ	0xFF7
 24574                           tblptrl	equ	0xFF6
 24575                           tablat	equ	0xFF5
 24576                           prodh	equ	0xFF4
 24577                           prodl	equ	0xFF3
 24578                           intcon	equ	0xFF2
 24579                           postinc0	equ	0xFEE
 24580                           wreg	equ	0xFE8
 24581                           indf1	equ	0xFE7
 24582                           postdec1	equ	0xFE5
 24583                           fsr1h	equ	0xFE2
 24584                           fsr1l	equ	0xFE1
 24585                           indf2	equ	0xFDF
 24586                           postinc2	equ	0xFDE
 24587                           postdec2	equ	0xFDD
 24588                           plusw2	equ	0xFDB
 24589                           fsr2h	equ	0xFDA
 24590                           fsr2l	equ	0xFD9
 24591                           status	equ	0xFD8
 24592                           
 24593 ;; *************** function _Byte_SetQuad *****************
 24594 ;; Defined at:
 24595 ;;		line 101 in file "Library/Types.c"
 24596 ;; Parameters:    Size  Location     Type
 24597 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24598 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 24599 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24600 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24601 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24602 ;;		 -> NULL(0), 
 24603 ;;  pQuad           1   13[BANK0 ] unsigned char 
 24604 ;;  pValue          1   14[BANK0 ] unsigned char 
 24605 ;; Auto vars:     Size  Location     Type
 24606 ;;		None
 24607 ;; Return value:  Size  Location     Type
 24608 ;;                  1    wreg      void 
 24609 ;; Registers used:
 24610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24611 ;; Tracked objects:
 24612 ;;		On entry : 0/0
 24613 ;;		On exit  : 0/0
 24614 ;;		Unchanged: 0/0
 24615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24616 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24619 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24620 ;;Total ram usage:        4 bytes
 24621 ;; Hardware stack levels used:    1
 24622 ;; Hardware stack levels required when called:    8
 24623 ;; This function calls:
 24624 ;;		_Byte_SetZone
 24625 ;; This function is called by:
 24626 ;;		_Port_SetQuadType
 24627 ;;		_SPI_Init
 24628 ;;		_SPI_MinSpeed
 24629 ;;		_SPI_MaxSpeed
 24630 ;;		_Port_SetQuad
 24631 ;;		_Word_SetQuad
 24632 ;;		_I2C_Init
 24633 ;; This function uses a non-reentrant model
 24634 ;;
 24635                           
 24636                           	psect	text115
 24637  0169EC                     __ptext115:
 24638                           	opt stack 0
 24639  0169EC                     _Byte_SetQuad:
 24640                           	opt stack 19
 24641                           
 24642                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 24643                           
 24644                           ; BSR set to: 0
 24645                           ;incstack = 0
 24646  0169EC  C0C4  F0B9         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 24647  0169F0  C0C5  F0BA         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 24648  0169F4  0E02               	movlw	2
 24649  0169F6  0100               	movlb	0	; () banked
 24650  0169F8  6FBB               	movwf	Byte_SetZone@pMax& (0+255),b
 24651  0169FA  C0C6  F0BC         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 24652  0169FE  0E04               	movlw	4
 24653  016A00  0100               	movlb	0	; () banked
 24654  016A02  6FBD               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24655  016A04  C0C7  F0BE         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 24656  016A08  EC39  F0A5         	call	_Byte_SetZone	;wreg free
 24657  016A0C  0012               	return		;funcret
 24658  016A0E                     __end_of_Byte_SetQuad:
 24659                           	opt stack 0
 24660                           tosu	equ	0xFFF
 24661                           tosh	equ	0xFFE
 24662                           tosl	equ	0xFFD
 24663                           pclath	equ	0xFFA
 24664                           tblptru	equ	0xFF8
 24665                           tblptrh	equ	0xFF7
 24666                           tblptrl	equ	0xFF6
 24667                           tablat	equ	0xFF5
 24668                           prodh	equ	0xFF4
 24669                           prodl	equ	0xFF3
 24670                           intcon	equ	0xFF2
 24671                           postinc0	equ	0xFEE
 24672                           wreg	equ	0xFE8
 24673                           indf1	equ	0xFE7
 24674                           postdec1	equ	0xFE5
 24675                           fsr1h	equ	0xFE2
 24676                           fsr1l	equ	0xFE1
 24677                           indf2	equ	0xFDF
 24678                           postinc2	equ	0xFDE
 24679                           postdec2	equ	0xFDD
 24680                           plusw2	equ	0xFDB
 24681                           fsr2h	equ	0xFDA
 24682                           fsr2l	equ	0xFD9
 24683                           status	equ	0xFD8
 24684                           
 24685 ;; *************** function _Byte_SetZone *****************
 24686 ;; Defined at:
 24687 ;;		line 47 in file "Library/Types.c"
 24688 ;; Parameters:    Size  Location     Type
 24689 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24690 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24691 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24692 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 24693 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 24694 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24695 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24696 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24697 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24698 ;;  pMax            1    2[BANK0 ] unsigned char 
 24699 ;;  pChunk          1    3[BANK0 ] unsigned char 
 24700 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 24701 ;;  pValue          1    5[BANK0 ] unsigned char 
 24702 ;; Auto vars:     Size  Location     Type
 24703 ;;  MASK            1   10[BANK0 ] unsigned char 
 24704 ;;  Offset          1    9[BANK0 ] unsigned char 
 24705 ;; Return value:  Size  Location     Type
 24706 ;;                  1    wreg      void 
 24707 ;; Registers used:
 24708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 24709 ;; Tracked objects:
 24710 ;;		On entry : 0/0
 24711 ;;		On exit  : 0/0
 24712 ;;		Unchanged: 0/0
 24713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24714 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24716 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24717 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24718 ;;Total ram usage:       11 bytes
 24719 ;; Hardware stack levels used:    1
 24720 ;; Hardware stack levels required when called:    7
 24721 ;; This function calls:
 24722 ;;		Nothing
 24723 ;; This function is called by:
 24724 ;;		_Byte_SetPair
 24725 ;;		_Byte_SetQuad
 24726 ;;		_Byte_SetTriple
 24727 ;; This function uses a non-reentrant model
 24728 ;;
 24729                           
 24730                           	psect	text116
 24731  014A72                     __ptext116:
 24732                           	opt stack 0
 24733  014A72                     _Byte_SetZone:
 24734                           	opt stack 18
 24735                           
 24736                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 24737                           
 24738                           ;incstack = 0
 24739  014A72  0100               	movlb	0	; () banked
 24740  014A74  51BD               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 24741  014A76  0D01               	mullw	1
 24742  014A78  0E0F               	movlw	low _MASKS
 24743  014A7A  24F3               	addwf	prodl,w,c
 24744  014A7C  6EF6               	movwf	tblptrl,c
 24745  014A7E  0EFD               	movlw	high _MASKS
 24746  014A80  20F4               	addwfc	prodh,w,c
 24747  014A82  6EF7               	movwf	tblptrh,c
 24748  014A84                     	if	1	;There are 3 active tblptr bytes
 24749  014A84  6AF8               	clrf	tblptru,c
 24750  014A86  0E00               	movlw	low (__mediumconst shr (0+16))
 24751  014A88  22F8               	addwfc	tblptru,f,c
 24752  014A8A                     	endif
 24753  014A8A  0008               	tblrd		*
 24754  014A8C  CFF5 F0C3          	movff	tablat,Byte_SetZone@MASK
 24755                           
 24756                           ; BSR set to: 0
 24757                           ;Types.c: 50: UINT8 Offset = 0;
 24758  014A90  0E00               	movlw	0
 24759  014A92  0100               	movlb	0	; () banked
 24760  014A94  6FC2               	movwf	Byte_SetZone@Offset& (0+255),b
 24761                           
 24762                           ;Types.c: 52: while (pChunk >= pMax)
 24763  014A96  D006               	goto	l726
 24764  014A98                     
 24765                           ; BSR set to: 0
 24766                           ;Types.c: 53: {
 24767                           ;Types.c: 54: pChunk -= pMax;
 24768                           
 24769                           ; BSR set to: 0
 24770  014A98  0100               	movlb	0	; () banked
 24771  014A9A  51BB               	movf	Byte_SetZone@pMax& (0+255),w,b
 24772  014A9C  0100               	movlb	0	; () banked
 24773  014A9E  5FBC               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 24774                           
 24775                           ; BSR set to: 0
 24776                           ;Types.c: 55: Offset += 1;
 24777  014AA0  0100               	movlb	0	; () banked
 24778  014AA2  2BC2               	incf	Byte_SetZone@Offset& (0+255),f,b
 24779  014AA4                     l726:
 24780                           
 24781                           ; BSR set to: 0
 24782                           
 24783                           ; BSR set to: 0
 24784  014AA4  0100               	movlb	0	; () banked
 24785  014AA6  51BB               	movf	Byte_SetZone@pMax& (0+255),w,b
 24786  014AA8  0100               	movlb	0	; () banked
 24787  014AAA  5DBC               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 24788  014AAC  B0D8               	btfsc	status,0,c
 24789  014AAE  D7F4               	goto	l727
 24790                           
 24791                           ; BSR set to: 0
 24792                           ;Types.c: 56: }
 24793                           ;Types.c: 57: pChunk *= pChunkSize;
 24794                           
 24795                           ; BSR set to: 0
 24796  014AB0  0100               	movlb	0	; () banked
 24797  014AB2  51BD               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 24798  014AB4  0100               	movlb	0	; () banked
 24799  014AB6  03BC               	mulwf	Byte_SetZone@pChunk& (0+255),b
 24800  014AB8  50F3               	movf	prodl,w,c
 24801  014ABA  6FBC               	movwf	Byte_SetZone@pChunk& (0+255),b
 24802                           
 24803                           ; BSR set to: 0
 24804                           ;Types.c: 58: pChunk += Offset;
 24805  014ABC  0100               	movlb	0	; () banked
 24806  014ABE  51C2               	movf	Byte_SetZone@Offset& (0+255),w,b
 24807  014AC0  0100               	movlb	0	; () banked
 24808  014AC2  27BC               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 24809                           
 24810                           ; BSR set to: 0
 24811                           ;Types.c: 60: pValue &= MASK;
 24812  014AC4  0100               	movlb	0	; () banked
 24813  014AC6  51C3               	movf	Byte_SetZone@MASK& (0+255),w,b
 24814  014AC8  0100               	movlb	0	; () banked
 24815  014ACA  17BE               	andwf	Byte_SetZone@pValue& (0+255),f,b
 24816                           
 24817                           ; BSR set to: 0
 24818                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 24819  014ACC  C0BC  F0BF         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 24820  014AD0  C0C3  F0C0         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 24821  014AD4  0100               	movlb	0	; () banked
 24822  014AD6  2BBF               	incf	??_Byte_SetZone& (0+255),f,b
 24823  014AD8  D003               	goto	u9214
 24824  014ADA                     u9215:
 24825  014ADA  0100               	movlb	0	; () banked
 24826  014ADC  90D8               	bcf	status,0,c
 24827  014ADE  37C0               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 24828  014AE0                     u9214:
 24829  014AE0  0100               	movlb	0	; () banked
 24830  014AE2  2FBF               	decfsz	??_Byte_SetZone& (0+255),f,b
 24831  014AE4  D7FA               	goto	u9215
 24832  014AE6  0100               	movlb	0	; () banked
 24833  014AE8  51C0               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 24834  014AEA  0AFF               	xorlw	255
 24835  014AEC  0100               	movlb	0	; () banked
 24836  014AEE  6FC1               	movwf	(??_Byte_SetZone+2)& (0+255),b
 24837  014AF0  C0B9  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 24838  014AF4  C0BA  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 24839  014AF8  0100               	movlb	0	; () banked
 24840  014AFA  51C1               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 24841  014AFC  16DF               	andwf	indf2,f,c
 24842                           
 24843                           ; BSR set to: 0
 24844                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 24845  014AFE  C0BC  F0BF         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 24846  014B02  C0BE  F0C0         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 24847  014B06  0100               	movlb	0	; () banked
 24848  014B08  2BBF               	incf	??_Byte_SetZone& (0+255),f,b
 24849  014B0A  D003               	goto	u9224
 24850  014B0C                     u9225:
 24851  014B0C  0100               	movlb	0	; () banked
 24852  014B0E  90D8               	bcf	status,0,c
 24853  014B10  37C0               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 24854  014B12                     u9224:
 24855  014B12  0100               	movlb	0	; () banked
 24856  014B14  2FBF               	decfsz	??_Byte_SetZone& (0+255),f,b
 24857  014B16  D7FA               	goto	u9225
 24858  014B18  C0B9  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 24859  014B1C  C0BA  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 24860  014B20  0100               	movlb	0	; () banked
 24861  014B22  51C0               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 24862  014B24  12DF               	iorwf	indf2,f,c
 24863                           
 24864                           ; BSR set to: 0
 24865  014B26  0012               	return		;funcret
 24866  014B28                     __end_of_Byte_SetZone:
 24867                           	opt stack 0
 24868                           tosu	equ	0xFFF
 24869                           tosh	equ	0xFFE
 24870                           tosl	equ	0xFFD
 24871                           pclath	equ	0xFFA
 24872                           tblptru	equ	0xFF8
 24873                           tblptrh	equ	0xFF7
 24874                           tblptrl	equ	0xFF6
 24875                           tablat	equ	0xFF5
 24876                           prodh	equ	0xFF4
 24877                           prodl	equ	0xFF3
 24878                           intcon	equ	0xFF2
 24879                           postinc0	equ	0xFEE
 24880                           wreg	equ	0xFE8
 24881                           indf1	equ	0xFE7
 24882                           postdec1	equ	0xFE5
 24883                           fsr1h	equ	0xFE2
 24884                           fsr1l	equ	0xFE1
 24885                           indf2	equ	0xFDF
 24886                           postinc2	equ	0xFDE
 24887                           postdec2	equ	0xFDD
 24888                           plusw2	equ	0xFDB
 24889                           fsr2h	equ	0xFDA
 24890                           fsr2l	equ	0xFD9
 24891                           status	equ	0xFD8
 24892                           
 24893 ;; *************** function _Console_Init *****************
 24894 ;; Defined at:
 24895 ;;		line 157 in file "Library/Console.c"
 24896 ;; Parameters:    Size  Location     Type
 24897 ;;		None
 24898 ;; Auto vars:     Size  Location     Type
 24899 ;;  y               1    3[BANK0 ] unsigned char 
 24900 ;;  x               1    2[BANK0 ] unsigned char 
 24901 ;; Return value:  Size  Location     Type
 24902 ;;                  1    wreg      void 
 24903 ;; Registers used:
 24904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24905 ;; Tracked objects:
 24906 ;;		On entry : 0/0
 24907 ;;		On exit  : 0/0
 24908 ;;		Unchanged: 0/0
 24909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24911 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24913 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24914 ;;Total ram usage:        4 bytes
 24915 ;; Hardware stack levels used:    1
 24916 ;; Hardware stack levels required when called:    7
 24917 ;; This function calls:
 24918 ;;		Nothing
 24919 ;; This function is called by:
 24920 ;;		_init
 24921 ;; This function uses a non-reentrant model
 24922 ;;
 24923                           
 24924                           	psect	text117
 24925  015534                     __ptext117:
 24926                           	opt stack 0
 24927  015534                     _Console_Init:
 24928                           	opt stack 22
 24929                           
 24930                           ;Console.c: 160: lBufferX = 0;
 24931                           
 24932                           ; BSR set to: 0
 24933                           ;incstack = 0
 24934  015534  0E00               	movlw	0
 24935  015536  0100               	movlb	0	; () banked
 24936  015538  6F8E               	movwf	_lBufferX& (0+255),b
 24937                           
 24938                           ;Console.c: 161: lBufferY = 0;
 24939  01553A  0E00               	movlw	0
 24940  01553C  0100               	movlb	0	; () banked
 24941  01553E  6F8D               	movwf	_lBufferY& (0+255),b
 24942                           
 24943                           ;Console.c: 163: UINT8 x, y;
 24944                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24945  015540  0E00               	movlw	0
 24946  015542  0100               	movlb	0	; () banked
 24947  015544  6FBB               	movwf	Console_Init@x& (0+255),b
 24948  015546                     l14733:
 24949                           
 24950                           ; BSR set to: 0
 24951  015546  0E13               	movlw	19
 24952  015548  0100               	movlb	0	; () banked
 24953  01554A  65BB               	cpfsgt	Console_Init@x& (0+255),b
 24954  01554C  D001               	goto	l976
 24955  01554E  0012               	return	
 24956  015550                     l976:
 24957                           
 24958                           ; BSR set to: 0
 24959                           ;Console.c: 165: {
 24960                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24961                           
 24962                           ; BSR set to: 0
 24963  015550  0E00               	movlw	0
 24964  015552  0100               	movlb	0	; () banked
 24965  015554  6FBC               	movwf	Console_Init@y& (0+255),b
 24966  015556                     l14739:
 24967                           
 24968                           ; BSR set to: 0
 24969  015556  0E0E               	movlw	14
 24970  015558  0100               	movlb	0	; () banked
 24971  01555A  65BC               	cpfsgt	Console_Init@y& (0+255),b
 24972  01555C  D001               	goto	l978
 24973  01555E  D02C               	goto	u11680
 24974  015560                     l978:
 24975                           
 24976                           ; BSR set to: 0
 24977                           ;Console.c: 167: {
 24978                           ;Console.c: 168: lBuffer[y][x] = '\0';
 24979                           
 24980                           ; BSR set to: 0
 24981  015560  0100               	movlb	0	; () banked
 24982  015562  51BC               	movf	Console_Init@y& (0+255),w,b
 24983  015564  0D14               	mullw	20
 24984  015566  0EB2               	movlw	low _lBuffer
 24985  015568  0100               	movlb	0	; () banked
 24986  01556A  6FB9               	movwf	??_Console_Init& (0+255),b
 24987  01556C  0E04               	movlw	high _lBuffer
 24988  01556E  0100               	movlb	0	; () banked
 24989  015570  6FBA               	movwf	(??_Console_Init+1)& (0+255),b
 24990  015572  50F3               	movf	prodl,w,c
 24991  015574  0100               	movlb	0	; () banked
 24992  015576  27B9               	addwf	??_Console_Init& (0+255),f,b
 24993  015578  50F4               	movf	prodh,w,c
 24994  01557A  0100               	movlb	0	; () banked
 24995  01557C  23BA               	addwfc	(??_Console_Init+1)& (0+255),f,b
 24996  01557E  0100               	movlb	0	; () banked
 24997  015580  51BB               	movf	Console_Init@x& (0+255),w,b
 24998  015582  0D01               	mullw	1
 24999  015584  50F3               	movf	prodl,w,c
 25000  015586  0100               	movlb	0	; () banked
 25001  015588  25B9               	addwf	??_Console_Init& (0+255),w,b
 25002  01558A  6ED9               	movwf	fsr2l,c
 25003  01558C  50F4               	movf	prodh,w,c
 25004  01558E  0100               	movlb	0	; () banked
 25005  015590  21BA               	addwfc	(??_Console_Init+1)& (0+255),w,b
 25006  015592  6EDA               	movwf	fsr2h,c
 25007  015594  0E00               	movlw	0
 25008  015596  6EDF               	movwf	indf2,c
 25009                           
 25010                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 25011  015598  0100               	movlb	0	; () banked
 25012  01559A  51BC               	movf	Console_Init@y& (0+255),w,b
 25013  01559C  0D02               	mullw	2
 25014  01559E  0E00               	movlw	low _lCBuffer
 25015  0155A0  24F3               	addwf	prodl,w,c
 25016  0155A2  6ED9               	movwf	fsr2l,c
 25017  0155A4  0E03               	movlw	high _lCBuffer
 25018  0155A6  20F4               	addwfc	prodh,w,c
 25019  0155A8  6EDA               	movwf	fsr2h,c
 25020  0155AA  0EFF               	movlw	255
 25021  0155AC  6EDE               	movwf	postinc2,c
 25022  0155AE  0EFF               	movlw	255
 25023  0155B0  6EDD               	movwf	postdec2,c
 25024                           
 25025                           ; BSR set to: 0
 25026  0155B2  0100               	movlb	0	; () banked
 25027  0155B4  2BBC               	incf	Console_Init@y& (0+255),f,b
 25028  0155B6  D7CF               	goto	l14739
 25029  0155B8                     u11680:
 25030                           
 25031                           ; BSR set to: 0
 25032                           
 25033                           ; BSR set to: 0
 25034  0155B8  0100               	movlb	0	; () banked
 25035  0155BA  2BBB               	incf	Console_Init@x& (0+255),f,b
 25036  0155BC  D7C4               	goto	l14733
 25037  0155BE                     __end_of_Console_Init:
 25038                           	opt stack 0
 25039                           tosu	equ	0xFFF
 25040                           tosh	equ	0xFFE
 25041                           tosl	equ	0xFFD
 25042                           pclath	equ	0xFFA
 25043                           tblptru	equ	0xFF8
 25044                           tblptrh	equ	0xFF7
 25045                           tblptrl	equ	0xFF6
 25046                           tablat	equ	0xFF5
 25047                           prodh	equ	0xFF4
 25048                           prodl	equ	0xFF3
 25049                           intcon	equ	0xFF2
 25050                           postinc0	equ	0xFEE
 25051                           wreg	equ	0xFE8
 25052                           indf1	equ	0xFE7
 25053                           postdec1	equ	0xFE5
 25054                           fsr1h	equ	0xFE2
 25055                           fsr1l	equ	0xFE1
 25056                           indf2	equ	0xFDF
 25057                           postinc2	equ	0xFDE
 25058                           postdec2	equ	0xFDD
 25059                           plusw2	equ	0xFDB
 25060                           fsr2h	equ	0xFDA
 25061                           fsr2l	equ	0xFD9
 25062                           status	equ	0xFD8
 25063                           
 25064 ;; *************** function _ADC_Start *****************
 25065 ;; Defined at:
 25066 ;;		line 114 in file "Library/ADC.c"
 25067 ;; Parameters:    Size  Location     Type
 25068 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 25069 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 25070 ;;		 -> NULL(0), 
 25071 ;; Auto vars:     Size  Location     Type
 25072 ;;		None
 25073 ;; Return value:  Size  Location     Type
 25074 ;;                  1    wreg      void 
 25075 ;; Registers used:
 25076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25077 ;; Tracked objects:
 25078 ;;		On entry : 0/0
 25079 ;;		On exit  : 0/0
 25080 ;;		Unchanged: 0/0
 25081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25082 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25085 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25086 ;;Total ram usage:        4 bytes
 25087 ;; Hardware stack levels used:    1
 25088 ;; Hardware stack levels required when called:    8
 25089 ;; This function calls:
 25090 ;;		_ADC_Off
 25091 ;;		_ADC_On
 25092 ;;		_ADC_SetChannel
 25093 ;; This function is called by:
 25094 ;;		_init
 25095 ;;		_findClosestWall
 25096 ;;		_measureAndDisplayDistance
 25097 ;;		_mode1
 25098 ;;		_FunctADC
 25099 ;; This function uses a non-reentrant model
 25100 ;;
 25101                           
 25102                           	psect	text118
 25103  015648                     __ptext118:
 25104                           	opt stack 0
 25105  015648                     _ADC_Start:
 25106                           	opt stack 20
 25107                           
 25108                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 25109                           
 25110                           ; BSR set to: 0
 25111                           ;incstack = 0
 25112  015648  B2C2               	btfsc	4034,1,c	;volatile
 25113  01564A  0012               	return	
 25114  01564C                     
 25115                           ;ADC.c: 128: {
 25116                           ;ADC.c: 129: ADC_Off();
 25117                           
 25118                           ;ADC.c: 127: for(;;)
 25119  01564C  ECAF  F0B6         	call	_ADC_Off	;wreg free
 25120                           
 25121                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 25122  015650  C0BB  FFD9         	movff	ADC_Start@pInput,fsr2l
 25123  015654  C0BC  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 25124  015658  50DF               	movf	indf2,w,c
 25125  01565A  ECAB  F0B5         	call	_ADC_SetChannel
 25126                           
 25127                           ;ADC.c: 131: ADC_On();
 25128  01565E  ECBD  F0B6         	call	_ADC_On	;wreg free
 25129                           
 25130                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 25131  015662  82C2               	bsf	4034,1,c	;volatile
 25132  015664  B2C2               	btfsc	4034,1,c	;volatile
 25133  015666  D7FE               	goto	l1280
 25134                           
 25135                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 25136  015668  50C3               	movf	4035,w,c	;volatile
 25137  01566A  CFC4 F0BD          	movff	4036,??_ADC_Start	;volatile
 25138  01566E  0100               	movlb	0	; () banked
 25139  015670  6BBE               	clrf	(??_ADC_Start+1)& (0+255),b
 25140  015672  C0BD  F0BE         	movff	??_ADC_Start,??_ADC_Start+1
 25141  015676  0100               	movlb	0	; () banked
 25142  015678  6BBD               	clrf	??_ADC_Start& (0+255),b
 25143  01567A  0100               	movlb	0	; () banked
 25144  01567C  13BD               	iorwf	??_ADC_Start& (0+255),f,b
 25145  01567E  0E00               	movlw	0
 25146  015680  13BE               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 25147  015682  0100               	movlb	0	; () banked
 25148  015684  EE20 F001          	lfsr	2,1
 25149  015688  51BB               	movf	ADC_Start@pInput& (0+255),w,b
 25150  01568A  26D9               	addwf	fsr2l,f,c
 25151  01568C  51BC               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25152  01568E  22DA               	addwfc	fsr2h,f,c
 25153  015690  C0BD  FFDE         	movff	??_ADC_Start,postinc2
 25154  015694  C0BE  FFDD         	movff	??_ADC_Start+1,postdec2
 25155                           
 25156                           ;ADC.c: 141: if (pInput->mNext == 0)
 25157  015698  0100               	movlb	0	; () banked
 25158  01569A  EE20 F003          	lfsr	2,3
 25159  01569E  51BB               	movf	ADC_Start@pInput& (0+255),w,b
 25160  0156A0  26D9               	addwf	fsr2l,f,c
 25161  0156A2  51BC               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25162  0156A4  22DA               	addwfc	fsr2h,f,c
 25163  0156A6  50DE               	movf	postinc2,w,c
 25164  0156A8  10DE               	iorwf	postinc2,w,c
 25165  0156AA  B4D8               	btfsc	status,2,c
 25166  0156AC  D00C               	goto	l1283
 25167                           
 25168                           ; BSR set to: 0
 25169                           ;ADC.c: 145: pInput = pInput->mNext;
 25170                           
 25171                           ; BSR set to: 0
 25172                           
 25173                           ; BSR set to: 0
 25174                           ;ADC.c: 142: break;
 25175  0156AE  0100               	movlb	0	; () banked
 25176  0156B0  EE20 F003          	lfsr	2,3
 25177  0156B4  51BB               	movf	ADC_Start@pInput& (0+255),w,b
 25178  0156B6  26D9               	addwf	fsr2l,f,c
 25179  0156B8  51BC               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 25180  0156BA  22DA               	addwfc	fsr2h,f,c
 25181  0156BC  CFDE F0BB          	movff	postinc2,ADC_Start@pInput
 25182  0156C0  CFDD F0BC          	movff	postdec2,ADC_Start@pInput+1
 25183                           
 25184                           ;ADC.c: 146: }
 25185  0156C4  D7C3               	goto	l1276
 25186  0156C6                     l1283:
 25187                           
 25188                           ; BSR set to: 0
 25189                           ;ADC.c: 147: ADC_Off();
 25190                           
 25191                           ; BSR set to: 0
 25192  0156C6  ECAF  F0B6         	call	_ADC_Off	;wreg free
 25193  0156CA  0012               	return		;funcret
 25194  0156CC                     __end_of_ADC_Start:
 25195                           	opt stack 0
 25196                           tosu	equ	0xFFF
 25197                           tosh	equ	0xFFE
 25198                           tosl	equ	0xFFD
 25199                           pclath	equ	0xFFA
 25200                           tblptru	equ	0xFF8
 25201                           tblptrh	equ	0xFF7
 25202                           tblptrl	equ	0xFF6
 25203                           tablat	equ	0xFF5
 25204                           prodh	equ	0xFF4
 25205                           prodl	equ	0xFF3
 25206                           intcon	equ	0xFF2
 25207                           postinc0	equ	0xFEE
 25208                           wreg	equ	0xFE8
 25209                           indf1	equ	0xFE7
 25210                           postdec1	equ	0xFE5
 25211                           fsr1h	equ	0xFE2
 25212                           fsr1l	equ	0xFE1
 25213                           indf2	equ	0xFDF
 25214                           postinc2	equ	0xFDE
 25215                           postdec2	equ	0xFDD
 25216                           plusw2	equ	0xFDB
 25217                           fsr2h	equ	0xFDA
 25218                           fsr2l	equ	0xFD9
 25219                           status	equ	0xFD8
 25220                           
 25221 ;; *************** function _ADC_Init *****************
 25222 ;; Defined at:
 25223 ;;		line 19 in file "Library/ADC.c"
 25224 ;; Parameters:    Size  Location     Type
 25225 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 25226 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 25227 ;;  pChannel        1    6[BANK0 ] enum E6742
 25228 ;; Auto vars:     Size  Location     Type
 25229 ;;		None
 25230 ;; Return value:  Size  Location     Type
 25231 ;;                  1    wreg      void 
 25232 ;; Registers used:
 25233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25234 ;; Tracked objects:
 25235 ;;		On entry : 0/0
 25236 ;;		On exit  : 0/0
 25237 ;;		Unchanged: 0/0
 25238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25239 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25242 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25243 ;;Total ram usage:        3 bytes
 25244 ;; Hardware stack levels used:    1
 25245 ;; Hardware stack levels required when called:    9
 25246 ;; This function calls:
 25247 ;;		_ADC_Calibrate
 25248 ;;		_ADC_ClockDivision
 25249 ;;		_ADC_ConversionTime
 25250 ;;		_ADC_SetChannel
 25251 ;;		_ADC_SetupIO
 25252 ;; This function is called by:
 25253 ;;		_init
 25254 ;;		_FunctInitADC
 25255 ;; This function uses a non-reentrant model
 25256 ;;
 25257                           
 25258                           	psect	text119
 25259  0157CA                     __ptext119:
 25260                           	opt stack 0
 25261  0157CA                     _ADC_Init:
 25262                           	opt stack 20
 25263                           
 25264                           ;ADC.c: 21: if(pInput==(void*)0)
 25265                           
 25266                           ;incstack = 0
 25267  0157CA  0100               	movlb	0	; () banked
 25268  0157CC  51BD               	movf	ADC_Init@pInput& (0+255),w,b
 25269  0157CE  0100               	movlb	0	; () banked
 25270  0157D0  11BE               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 25271  0157D2  B4D8               	btfsc	status,2,c
 25272  0157D4  0012               	return	
 25273                           
 25274                           ; BSR set to: 0
 25275                           ;ADC.c: 25: lCurrent = pInput;
 25276                           
 25277                           ; BSR set to: 0
 25278                           
 25279                           ; BSR set to: 0
 25280                           ;ADC.c: 22: return;
 25281  0157D6  C0BD  F07F         	movff	ADC_Init@pInput,_lCurrent
 25282  0157DA  C0BE  F080         	movff	ADC_Init@pInput+1,_lCurrent+1
 25283                           
 25284                           ; BSR set to: 0
 25285                           ;ADC.c: 27: pInput->mChannel = pChannel;
 25286  0157DE  C0BD  FFD9         	movff	ADC_Init@pInput,fsr2l
 25287  0157E2  C0BE  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 25288  0157E6  C0BF  FFDF         	movff	ADC_Init@pChannel,indf2
 25289                           
 25290                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 25291  0157EA  0100               	movlb	0	; () banked
 25292  0157EC  EE20 F003          	lfsr	2,3
 25293  0157F0  51BD               	movf	ADC_Init@pInput& (0+255),w,b
 25294  0157F2  26D9               	addwf	fsr2l,f,c
 25295  0157F4  51BE               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 25296  0157F6  22DA               	addwfc	fsr2h,f,c
 25297  0157F8  0E00               	movlw	0
 25298  0157FA  6EDE               	movwf	postinc2,c
 25299  0157FC  0E00               	movlw	0
 25300  0157FE  6EDD               	movwf	postdec2,c
 25301                           
 25302                           ;ADC.c: 29: pInput->mValue = 0;
 25303  015800  0100               	movlb	0	; () banked
 25304  015802  EE20 F001          	lfsr	2,1
 25305  015806  51BD               	movf	ADC_Init@pInput& (0+255),w,b
 25306  015808  26D9               	addwf	fsr2l,f,c
 25307  01580A  51BE               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 25308  01580C  22DA               	addwfc	fsr2h,f,c
 25309  01580E  0E00               	movlw	0
 25310  015810  6EDE               	movwf	postinc2,c
 25311  015812  0E00               	movlw	0
 25312  015814  6EDD               	movwf	postdec2,c
 25313                           
 25314                           ; BSR set to: 0
 25315                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 25316  015816  0100               	movlb	0	; () banked
 25317  015818  51BF               	movf	ADC_Init@pChannel& (0+255),w,b
 25318  01581A  ECAB  F0B5         	call	_ADC_SetChannel
 25319                           
 25320                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 25321  01581E  9EC2               	bcf	4034,7,c	;volatile
 25322                           
 25323                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 25324  015820  9CC2               	bcf	4034,6,c	;volatile
 25325                           
 25326                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 25327  015822  8EC1               	bsf	4033,7,c	;volatile
 25328                           
 25329                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 25330  015824  8CC1               	bsf	4033,6,c	;volatile
 25331                           
 25332                           ;ADC.c: 43: ADC_ConversionTime(12);
 25333  015826  0E0C               	movlw	12
 25334  015828  EC7E  F0B1         	call	_ADC_ConversionTime
 25335                           
 25336                           ;ADC.c: 47: ADC_ClockDivision(16);
 25337  01582C  0E10               	movlw	16
 25338  01582E  ECDF  F0AA         	call	_ADC_ClockDivision
 25339                           
 25340                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 25341  015832  0100               	movlb	0	; () banked
 25342  015834  51BF               	movf	ADC_Init@pChannel& (0+255),w,b
 25343  015836  ECF4  F0B3         	call	_ADC_SetupIO
 25344                           
 25345                           ;ADC.c: 58: ADC_Initialised = 1;
 25346  01583A  0E01               	movlw	1
 25347  01583C  6E3C               	movwf	_ADC_Initialised,c
 25348                           
 25349                           ;ADC.c: 61: ADC_Calibrate();
 25350  01583E  EC30  F0B6         	call	_ADC_Calibrate	;wreg free
 25351  015842  0012               	return		;funcret
 25352  015844                     __end_of_ADC_Init:
 25353                           	opt stack 0
 25354                           tosu	equ	0xFFF
 25355                           tosh	equ	0xFFE
 25356                           tosl	equ	0xFFD
 25357                           pclath	equ	0xFFA
 25358                           tblptru	equ	0xFF8
 25359                           tblptrh	equ	0xFF7
 25360                           tblptrl	equ	0xFF6
 25361                           tablat	equ	0xFF5
 25362                           prodh	equ	0xFF4
 25363                           prodl	equ	0xFF3
 25364                           intcon	equ	0xFF2
 25365                           postinc0	equ	0xFEE
 25366                           wreg	equ	0xFE8
 25367                           indf1	equ	0xFE7
 25368                           postdec1	equ	0xFE5
 25369                           fsr1h	equ	0xFE2
 25370                           fsr1l	equ	0xFE1
 25371                           indf2	equ	0xFDF
 25372                           postinc2	equ	0xFDE
 25373                           postdec2	equ	0xFDD
 25374                           plusw2	equ	0xFDB
 25375                           fsr2h	equ	0xFDA
 25376                           fsr2l	equ	0xFD9
 25377                           status	equ	0xFD8
 25378                           
 25379 ;; *************** function _ADC_SetupIO *****************
 25380 ;; Defined at:
 25381 ;;		line 150 in file "Library/ADC.c"
 25382 ;; Parameters:    Size  Location     Type
 25383 ;;  pChannel        1    wreg     enum E6742
 25384 ;; Auto vars:     Size  Location     Type
 25385 ;;  pChannel        1    2[BANK0 ] enum E6742
 25386 ;;  MASK            1    3[BANK0 ] unsigned char 
 25387 ;; Return value:  Size  Location     Type
 25388 ;;                  1    wreg      void 
 25389 ;; Registers used:
 25390 ;;		wreg, status,2, status,0
 25391 ;; Tracked objects:
 25392 ;;		On entry : 0/0
 25393 ;;		On exit  : 0/0
 25394 ;;		Unchanged: 0/0
 25395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25398 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25399 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25400 ;;Total ram usage:        4 bytes
 25401 ;; Hardware stack levels used:    1
 25402 ;; Hardware stack levels required when called:    7
 25403 ;; This function calls:
 25404 ;;		Nothing
 25405 ;; This function is called by:
 25406 ;;		_ADC_Init
 25407 ;; This function uses a non-reentrant model
 25408 ;;
 25409                           
 25410                           	psect	text120
 25411  0167E8                     __ptext120:
 25412                           	opt stack 0
 25413  0167E8                     _ADC_SetupIO:
 25414                           	opt stack 21
 25415                           
 25416                           ;incstack = 0
 25417                           ;ADC_SetupIO@pChannel stored from wreg
 25418  0167E8  0100               	movlb	0	; () banked
 25419  0167EA  6FBB               	movwf	ADC_SetupIO@pChannel& (0+255),b
 25420                           
 25421                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 25422  0167EC  C0BB  F0B9         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 25423  0167F0  0E01               	movlw	1
 25424  0167F2  0100               	movlb	0	; () banked
 25425  0167F4  6FBA               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 25426  0167F6  0100               	movlb	0	; () banked
 25427  0167F8  2BB9               	incf	??_ADC_SetupIO& (0+255),f,b
 25428  0167FA  D003               	goto	u11404
 25429  0167FC                     u11405:
 25430  0167FC  0100               	movlb	0	; () banked
 25431  0167FE  90D8               	bcf	status,0,c
 25432  016800  37BA               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 25433  016802                     u11404:
 25434  016802  0100               	movlb	0	; () banked
 25435  016804  2FB9               	decfsz	??_ADC_SetupIO& (0+255),f,b
 25436  016806  D7FA               	goto	u11405
 25437  016808  0100               	movlb	0	; () banked
 25438  01680A  51BA               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 25439  01680C  0AFF               	xorlw	255
 25440  01680E  0100               	movlb	0	; () banked
 25441  016810  6FBC               	movwf	ADC_SetupIO@MASK& (0+255),b
 25442                           
 25443                           ;ADC.c: 153: ANCON0 &= MASK;
 25444  016812  0100               	movlb	0	; () banked
 25445  016814  51BC               	movf	ADC_SetupIO@MASK& (0+255),w,b
 25446  016816  16C1               	andwf	4033,f,c	;volatile
 25447                           
 25448                           ; BSR set to: 0
 25449  016818  0012               	return		;funcret
 25450  01681A                     __end_of_ADC_SetupIO:
 25451                           	opt stack 0
 25452                           tosu	equ	0xFFF
 25453                           tosh	equ	0xFFE
 25454                           tosl	equ	0xFFD
 25455                           pclath	equ	0xFFA
 25456                           tblptru	equ	0xFF8
 25457                           tblptrh	equ	0xFF7
 25458                           tblptrl	equ	0xFF6
 25459                           tablat	equ	0xFF5
 25460                           prodh	equ	0xFF4
 25461                           prodl	equ	0xFF3
 25462                           intcon	equ	0xFF2
 25463                           postinc0	equ	0xFEE
 25464                           wreg	equ	0xFE8
 25465                           indf1	equ	0xFE7
 25466                           postdec1	equ	0xFE5
 25467                           fsr1h	equ	0xFE2
 25468                           fsr1l	equ	0xFE1
 25469                           indf2	equ	0xFDF
 25470                           postinc2	equ	0xFDE
 25471                           postdec2	equ	0xFDD
 25472                           plusw2	equ	0xFDB
 25473                           fsr2h	equ	0xFDA
 25474                           fsr2l	equ	0xFD9
 25475                           status	equ	0xFD8
 25476                           
 25477 ;; *************** function _ADC_SetChannel *****************
 25478 ;; Defined at:
 25479 ;;		line 155 in file "Library/ADC.c"
 25480 ;; Parameters:    Size  Location     Type
 25481 ;;  pChannel        1    wreg     enum E6742
 25482 ;; Auto vars:     Size  Location     Type
 25483 ;;  pChannel        1    1[BANK0 ] enum E6742
 25484 ;; Return value:  Size  Location     Type
 25485 ;;                  1    wreg      void 
 25486 ;; Registers used:
 25487 ;;		wreg, status,2, status,0
 25488 ;; Tracked objects:
 25489 ;;		On entry : 0/0
 25490 ;;		On exit  : 0/0
 25491 ;;		Unchanged: 0/0
 25492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25497 ;;Total ram usage:        2 bytes
 25498 ;; Hardware stack levels used:    1
 25499 ;; Hardware stack levels required when called:    7
 25500 ;; This function calls:
 25501 ;;		Nothing
 25502 ;; This function is called by:
 25503 ;;		_ADC_Init
 25504 ;;		_ADC_Start
 25505 ;;		_ADC_ISR
 25506 ;;		_ADC_Sample
 25507 ;; This function uses a non-reentrant model
 25508 ;;
 25509                           
 25510                           	psect	text121
 25511  016B56                     __ptext121:
 25512                           	opt stack 0
 25513  016B56                     _ADC_SetChannel:
 25514                           	opt stack 20
 25515                           
 25516                           ; BSR set to: 0
 25517                           ;incstack = 0
 25518                           ;ADC_SetChannel@pChannel stored from wreg
 25519  016B56  0100               	movlb	0	; () banked
 25520  016B58  6FBA               	movwf	ADC_SetChannel@pChannel& (0+255),b
 25521                           
 25522                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 25523  016B5A  C0BA  F0B9         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 25524  016B5E  0100               	movlb	0	; () banked
 25525  016B60  47B9               	rlncf	??_ADC_SetChannel& (0+255),f,b
 25526  016B62  47B9               	rlncf	??_ADC_SetChannel& (0+255),f,b
 25527  016B64  50C2               	movf	4034,w,c	;volatile
 25528  016B66  0100               	movlb	0	; () banked
 25529  016B68  19B9               	xorwf	??_ADC_SetChannel& (0+255),w,b
 25530  016B6A  0BC3               	andlw	-61
 25531  016B6C  19B9               	xorwf	??_ADC_SetChannel& (0+255),w,b
 25532  016B6E  6EC2               	movwf	4034,c	;volatile
 25533                           
 25534                           ; BSR set to: 0
 25535  016B70  0012               	return		;funcret
 25536  016B72                     __end_of_ADC_SetChannel:
 25537                           	opt stack 0
 25538                           tosu	equ	0xFFF
 25539                           tosh	equ	0xFFE
 25540                           tosl	equ	0xFFD
 25541                           pclath	equ	0xFFA
 25542                           tblptru	equ	0xFF8
 25543                           tblptrh	equ	0xFF7
 25544                           tblptrl	equ	0xFF6
 25545                           tablat	equ	0xFF5
 25546                           prodh	equ	0xFF4
 25547                           prodl	equ	0xFF3
 25548                           intcon	equ	0xFF2
 25549                           postinc0	equ	0xFEE
 25550                           wreg	equ	0xFE8
 25551                           indf1	equ	0xFE7
 25552                           postdec1	equ	0xFE5
 25553                           fsr1h	equ	0xFE2
 25554                           fsr1l	equ	0xFE1
 25555                           indf2	equ	0xFDF
 25556                           postinc2	equ	0xFDE
 25557                           postdec2	equ	0xFDD
 25558                           plusw2	equ	0xFDB
 25559                           fsr2h	equ	0xFDA
 25560                           fsr2l	equ	0xFD9
 25561                           status	equ	0xFD8
 25562                           
 25563 ;; *************** function _ADC_ConversionTime *****************
 25564 ;; Defined at:
 25565 ;;		line 199 in file "Library/ADC.c"
 25566 ;; Parameters:    Size  Location     Type
 25567 ;;  pCount          1    wreg     unsigned char 
 25568 ;; Auto vars:     Size  Location     Type
 25569 ;;  pCount          1    1[BANK0 ] unsigned char 
 25570 ;; Return value:  Size  Location     Type
 25571 ;;                  1    wreg      void 
 25572 ;; Registers used:
 25573 ;;		wreg, status,2, status,0
 25574 ;; Tracked objects:
 25575 ;;		On entry : 0/0
 25576 ;;		On exit  : 0/0
 25577 ;;		Unchanged: 0/0
 25578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25583 ;;Total ram usage:        2 bytes
 25584 ;; Hardware stack levels used:    1
 25585 ;; Hardware stack levels required when called:    7
 25586 ;; This function calls:
 25587 ;;		Nothing
 25588 ;; This function is called by:
 25589 ;;		_ADC_Init
 25590 ;; This function uses a non-reentrant model
 25591 ;;
 25592                           
 25593                           	psect	text122
 25594  0162FC                     __ptext122:
 25595                           	opt stack 0
 25596  0162FC                     _ADC_ConversionTime:
 25597                           	opt stack 21
 25598                           
 25599                           ; BSR set to: 0
 25600                           ;incstack = 0
 25601                           ;ADC_ConversionTime@pCount stored from wreg
 25602  0162FC  0100               	movlb	0	; () banked
 25603  0162FE  6FBA               	movwf	ADC_ConversionTime@pCount& (0+255),b
 25604                           
 25605                           ;ADC.c: 201: if (pCount == 10)
 25606  016300  0E0A               	movlw	10
 25607  016302  0100               	movlb	0	; () banked
 25608  016304  19BA               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25609  016306  B4D8               	btfsc	status,2,c
 25610  016308  D00A               	goto	u11370
 25611                           
 25612                           ; BSR set to: 0
 25613                           ;ADC.c: 203: else if (pCount == 14)
 25614                           
 25615                           ; BSR set to: 0
 25616                           
 25617                           ; BSR set to: 0
 25618                           ;ADC.c: 202: pCount -= 2;
 25619  01630A  0E0E               	movlw	14
 25620  01630C  0100               	movlb	0	; () banked
 25621  01630E  19BA               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25622  016310  B4D8               	btfsc	status,2,c
 25623  016312  D005               	goto	u11370
 25624                           
 25625                           ; BSR set to: 0
 25626                           ;ADC.c: 205: else if (pCount == 18)
 25627                           
 25628                           ; BSR set to: 0
 25629                           
 25630                           ; BSR set to: 0
 25631                           ;ADC.c: 204: pCount -= 2;
 25632  016314  0E12               	movlw	18
 25633  016316  0100               	movlb	0	; () banked
 25634  016318  19BA               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 25635  01631A  A4D8               	btfss	status,2,c
 25636  01631C  D003               	goto	l1313
 25637  01631E                     u11370:
 25638                           
 25639                           ; BSR set to: 0
 25640                           ;ADC.c: 206: pCount -= 2;
 25641  01631E  0E02               	movlw	2
 25642  016320  0100               	movlb	0	; () banked
 25643  016322  5FBA               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 25644  016324                     l1313:
 25645                           
 25646                           ; BSR set to: 0
 25647                           ;ADC.c: 208: pCount <<= 1;
 25648                           
 25649                           ; BSR set to: 0
 25650                           
 25651                           ; BSR set to: 0
 25652  016324  0100               	movlb	0	; () banked
 25653  016326  90D8               	bcf	status,0,c
 25654  016328  37BA               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 25655                           
 25656                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 25657  01632A  C0BA  F0B9         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 25658  01632E  0100               	movlb	0	; () banked
 25659  016330  47B9               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25660  016332  47B9               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25661  016334  47B9               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 25662  016336  50C1               	movf	4033,w,c	;volatile
 25663  016338  0100               	movlb	0	; () banked
 25664  01633A  19B9               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 25665  01633C  0BC7               	andlw	-57
 25666  01633E  19B9               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 25667  016340  6EC1               	movwf	4033,c	;volatile
 25668                           
 25669                           ; BSR set to: 0
 25670  016342  0012               	return		;funcret
 25671  016344                     __end_of_ADC_ConversionTime:
 25672                           	opt stack 0
 25673                           tosu	equ	0xFFF
 25674                           tosh	equ	0xFFE
 25675                           tosl	equ	0xFFD
 25676                           pclath	equ	0xFFA
 25677                           tblptru	equ	0xFF8
 25678                           tblptrh	equ	0xFF7
 25679                           tblptrl	equ	0xFF6
 25680                           tablat	equ	0xFF5
 25681                           prodh	equ	0xFF4
 25682                           prodl	equ	0xFF3
 25683                           intcon	equ	0xFF2
 25684                           postinc0	equ	0xFEE
 25685                           wreg	equ	0xFE8
 25686                           indf1	equ	0xFE7
 25687                           postdec1	equ	0xFE5
 25688                           fsr1h	equ	0xFE2
 25689                           fsr1l	equ	0xFE1
 25690                           indf2	equ	0xFDF
 25691                           postinc2	equ	0xFDE
 25692                           postdec2	equ	0xFDD
 25693                           plusw2	equ	0xFDB
 25694                           fsr2h	equ	0xFDA
 25695                           fsr2l	equ	0xFD9
 25696                           status	equ	0xFD8
 25697                           
 25698 ;; *************** function _ADC_ClockDivision *****************
 25699 ;; Defined at:
 25700 ;;		line 159 in file "Library/ADC.c"
 25701 ;; Parameters:    Size  Location     Type
 25702 ;;  pDivide         1    wreg     unsigned char 
 25703 ;; Auto vars:     Size  Location     Type
 25704 ;;  pDivide         1    0[BANK0 ] unsigned char 
 25705 ;;  unfound         1    2[BANK0 ] unsigned char 
 25706 ;;  reg             1    1[BANK0 ] unsigned char 
 25707 ;; Return value:  Size  Location     Type
 25708 ;;                  1    wreg      void 
 25709 ;; Registers used:
 25710 ;;		wreg, status,2, status,0
 25711 ;; Tracked objects:
 25712 ;;		On entry : 0/0
 25713 ;;		On exit  : 0/0
 25714 ;;		Unchanged: 0/0
 25715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25717 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25719 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25720 ;;Total ram usage:        3 bytes
 25721 ;; Hardware stack levels used:    1
 25722 ;; Hardware stack levels required when called:    7
 25723 ;; This function calls:
 25724 ;;		Nothing
 25725 ;; This function is called by:
 25726 ;;		_ADC_Init
 25727 ;; This function uses a non-reentrant model
 25728 ;;
 25729                           
 25730                           	psect	text123
 25731  0155BE                     __ptext123:
 25732                           	opt stack 0
 25733  0155BE                     _ADC_ClockDivision:
 25734                           	opt stack 21
 25735                           
 25736                           ; BSR set to: 0
 25737                           ;incstack = 0
 25738                           ;ADC_ClockDivision@pDivide stored from wreg
 25739  0155BE  0100               	movlb	0	; () banked
 25740  0155C0  6FB9               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 25741                           
 25742                           ;ADC.c: 161: UINT8 reg = 0;
 25743  0155C2  0E00               	movlw	0
 25744  0155C4  0100               	movlb	0	; () banked
 25745  0155C6  6FBA               	movwf	ADC_ClockDivision@reg& (0+255),b
 25746                           
 25747                           ;ADC.c: 162: bool unfound = 1;
 25748  0155C8  0E01               	movlw	1
 25749  0155CA  D002               	goto	L15
 25750  0155CC                     
 25751                           ; BSR set to: 0
 25752                           ;ADC.c: 167: reg = 0;
 25753                           
 25754                           ; BSR set to: 0
 25755  0155CC  0E00               	movlw	0
 25756  0155CE  D00C               	goto	L20
 25757  0155D0                     L15:
 25758  0155D0  0100               	movlb	0	; () banked
 25759  0155D2  6FBB               	movwf	ADC_ClockDivision@unfound& (0+255),b
 25760                           
 25761                           ;ADC.c: 169: break;
 25762  0155D4  D02D               	goto	l1296
 25763  0155D6                     
 25764                           ; BSR set to: 0
 25765                           ;ADC.c: 171: reg = 0b100;
 25766                           
 25767                           ; BSR set to: 0
 25768  0155D6  0E04               	movlw	4
 25769  0155D8  D007               	goto	L20
 25770  0155DA                     
 25771                           ; BSR set to: 0
 25772                           ;ADC.c: 175: reg = 0b001;
 25773                           
 25774                           ; BSR set to: 0
 25775  0155DA  0E01               	movlw	1
 25776  0155DC  D005               	goto	L20
 25777  0155DE                     
 25778                           ; BSR set to: 0
 25779                           ;ADC.c: 179: reg = 0b101;
 25780                           
 25781                           ; BSR set to: 0
 25782  0155DE  0E05               	movlw	5
 25783  0155E0  D003               	goto	L20
 25784  0155E2                     
 25785                           ; BSR set to: 0
 25786                           ;ADC.c: 183: reg = 0b010;
 25787                           
 25788                           ; BSR set to: 0
 25789  0155E2  0E02               	movlw	2
 25790  0155E4  D001               	goto	L20
 25791  0155E6                     
 25792                           ; BSR set to: 0
 25793                           ;ADC.c: 187: reg = 0b110;
 25794                           
 25795                           ; BSR set to: 0
 25796  0155E6  0E06               	movlw	6
 25797  0155E8                     L20:
 25798  0155E8  0100               	movlb	0	; () banked
 25799  0155EA  6FBA               	movwf	ADC_ClockDivision@reg& (0+255),b
 25800                           
 25801                           ;ADC.c: 188: unfound = 0;
 25802  0155EC  0E00               	movlw	0
 25803  0155EE  D7F0               	goto	L15
 25804  0155F0                     
 25805                           ; BSR set to: 0
 25806                           ;ADC.c: 191: if (pDivide > 2)
 25807                           
 25808                           ; BSR set to: 0
 25809  0155F0  0E02               	movlw	2
 25810  0155F2  0100               	movlb	0	; () banked
 25811  0155F4  65B9               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 25812  0155F6  D003               	goto	l1303
 25813                           
 25814                           ; BSR set to: 0
 25815                           ;ADC.c: 192: pDivide--;
 25816  0155F8  0100               	movlb	0	; () banked
 25817  0155FA  07B9               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 25818  0155FC  D019               	goto	l1296
 25819  0155FE                     l1303:
 25820                           
 25821                           ; BSR set to: 0
 25822                           ;ADC.c: 193: else
 25823                           ;ADC.c: 194: pDivide = 2;
 25824                           
 25825                           ; BSR set to: 0
 25826  0155FE  0E02               	movlw	2
 25827  015600  0100               	movlb	0	; () banked
 25828  015602  6FB9               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 25829                           
 25830                           ; BSR set to: 0
 25831                           ;ADC.c: 195: };
 25832  015604  D015               	goto	l1296
 25833  015606                     
 25834                           ; BSR set to: 0
 25835                           
 25836                           ; BSR set to: 0
 25837  015606  0100               	movlb	0	; () banked
 25838  015608  51B9               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 25839                           
 25840                           ; Switch size 1, requested type "space"
 25841                           ; Number of cases is 6, Range of values is 2 to 64
 25842                           ; switch strategies available:
 25843                           ; Name         Instructions Cycles
 25844                           ; simple_byte           19    10 (average)
 25845                           ;	Chosen strategy is simple_byte
 25846  01560A  0A02               	xorlw	2	; case 2
 25847  01560C  B4D8               	btfsc	status,2,c
 25848  01560E  D7DE               	goto	l1295
 25849  015610  0A06               	xorlw	6	; case 4
 25850  015612  B4D8               	btfsc	status,2,c
 25851  015614  D7E0               	goto	l1297
 25852  015616  0A0C               	xorlw	12	; case 8
 25853  015618  B4D8               	btfsc	status,2,c
 25854  01561A  D7DF               	goto	l1298
 25855  01561C  0A18               	xorlw	24	; case 16
 25856  01561E  B4D8               	btfsc	status,2,c
 25857  015620  D7DE               	goto	l1299
 25858  015622  0A30               	xorlw	48	; case 32
 25859  015624  B4D8               	btfsc	status,2,c
 25860  015626  D7DD               	goto	l1300
 25861  015628  0A60               	xorlw	96	; case 64
 25862  01562A  B4D8               	btfsc	status,2,c
 25863  01562C  D7DC               	goto	l1301
 25864  01562E  D7E0               	goto	l1302
 25865  015630                     l1296:
 25866                           
 25867                           ; BSR set to: 0
 25868                           
 25869                           ; BSR set to: 0
 25870                           
 25871                           ; BSR set to: 0
 25872  015630  0100               	movlb	0	; () banked
 25873  015632  51BB               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 25874  015634  0100               	movlb	0	; () banked
 25875  015636  A4D8               	btfss	status,2,c
 25876  015638  D7E6               	goto	l1294
 25877                           
 25878                           ; BSR set to: 0
 25879                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 25880                           
 25881                           ; BSR set to: 0
 25882  01563A  50C1               	movf	4033,w,c	;volatile
 25883  01563C  0100               	movlb	0	; () banked
 25884  01563E  19BA               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 25885  015640  0BF8               	andlw	-8
 25886  015642  19BA               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 25887  015644  6EC1               	movwf	4033,c	;volatile
 25888                           
 25889                           ; BSR set to: 0
 25890  015646  0012               	return		;funcret
 25891  015648                     __end_of_ADC_ClockDivision:
 25892                           	opt stack 0
 25893                           tosu	equ	0xFFF
 25894                           tosh	equ	0xFFE
 25895                           tosl	equ	0xFFD
 25896                           pclath	equ	0xFFA
 25897                           tblptru	equ	0xFF8
 25898                           tblptrh	equ	0xFF7
 25899                           tblptrl	equ	0xFF6
 25900                           tablat	equ	0xFF5
 25901                           prodh	equ	0xFF4
 25902                           prodl	equ	0xFF3
 25903                           intcon	equ	0xFF2
 25904                           postinc0	equ	0xFEE
 25905                           wreg	equ	0xFE8
 25906                           indf1	equ	0xFE7
 25907                           postdec1	equ	0xFE5
 25908                           fsr1h	equ	0xFE2
 25909                           fsr1l	equ	0xFE1
 25910                           indf2	equ	0xFDF
 25911                           postinc2	equ	0xFDE
 25912                           postdec2	equ	0xFDD
 25913                           plusw2	equ	0xFDB
 25914                           fsr2h	equ	0xFDA
 25915                           fsr2l	equ	0xFD9
 25916                           status	equ	0xFD8
 25917                           
 25918 ;; *************** function _ADC_Calibrate *****************
 25919 ;; Defined at:
 25920 ;;		line 63 in file "Library/ADC.c"
 25921 ;; Parameters:    Size  Location     Type
 25922 ;;		None
 25923 ;; Auto vars:     Size  Location     Type
 25924 ;;		None
 25925 ;; Return value:  Size  Location     Type
 25926 ;;                  1    wreg      void 
 25927 ;; Registers used:
 25928 ;;		cstack
 25929 ;; Tracked objects:
 25930 ;;		On entry : 0/0
 25931 ;;		On exit  : 0/0
 25932 ;;		Unchanged: 0/0
 25933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25938 ;;Total ram usage:        0 bytes
 25939 ;; Hardware stack levels used:    1
 25940 ;; Hardware stack levels required when called:    8
 25941 ;; This function calls:
 25942 ;;		_ADC_Off
 25943 ;;		_ADC_On
 25944 ;; This function is called by:
 25945 ;;		_ADC_Init
 25946 ;; This function uses a non-reentrant model
 25947 ;;
 25948                           
 25949                           	psect	text124
 25950  016C60                     __ptext124:
 25951                           	opt stack 0
 25952  016C60                     _ADC_Calibrate:
 25953                           	opt stack 20
 25954                           
 25955                           ;ADC.c: 65: ADC_On();
 25956                           
 25957                           ; BSR set to: 0
 25958                           ;incstack = 0
 25959  016C60  ECBD  F0B6         	call	_ADC_On	;wreg free
 25960                           
 25961                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 25962  016C64  8CC1               	bsf	4033,6,c	;volatile
 25963                           
 25964                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 25965  016C66  82C2               	bsf	4034,1,c	;volatile
 25966  016C68  B2C2               	btfsc	4034,1,c	;volatile
 25967  016C6A  D7FE               	goto	l1254
 25968                           
 25969                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 25970  016C6C  9CC1               	bcf	4033,6,c	;volatile
 25971                           
 25972                           ;ADC.c: 73: ADC_Off();
 25973  016C6E  ECAF  F0B6         	call	_ADC_Off	;wreg free
 25974  016C72  0012               	return		;funcret
 25975  016C74                     __end_of_ADC_Calibrate:
 25976                           	opt stack 0
 25977                           tosu	equ	0xFFF
 25978                           tosh	equ	0xFFE
 25979                           tosl	equ	0xFFD
 25980                           pclath	equ	0xFFA
 25981                           tblptru	equ	0xFF8
 25982                           tblptrh	equ	0xFF7
 25983                           tblptrl	equ	0xFF6
 25984                           tablat	equ	0xFF5
 25985                           prodh	equ	0xFF4
 25986                           prodl	equ	0xFF3
 25987                           intcon	equ	0xFF2
 25988                           postinc0	equ	0xFEE
 25989                           wreg	equ	0xFE8
 25990                           indf1	equ	0xFE7
 25991                           postdec1	equ	0xFE5
 25992                           fsr1h	equ	0xFE2
 25993                           fsr1l	equ	0xFE1
 25994                           indf2	equ	0xFDF
 25995                           postinc2	equ	0xFDE
 25996                           postdec2	equ	0xFDD
 25997                           plusw2	equ	0xFDB
 25998                           fsr2h	equ	0xFDA
 25999                           fsr2l	equ	0xFD9
 26000                           status	equ	0xFD8
 26001                           
 26002 ;; *************** function _ADC_On *****************
 26003 ;; Defined at:
 26004 ;;		line 85 in file "Library/ADC.c"
 26005 ;; Parameters:    Size  Location     Type
 26006 ;;		None
 26007 ;; Auto vars:     Size  Location     Type
 26008 ;;		None
 26009 ;; Return value:  Size  Location     Type
 26010 ;;                  1    wreg      void 
 26011 ;; Registers used:
 26012 ;;		None
 26013 ;; Tracked objects:
 26014 ;;		On entry : 0/0
 26015 ;;		On exit  : 0/0
 26016 ;;		Unchanged: 0/0
 26017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26022 ;;Total ram usage:        0 bytes
 26023 ;; Hardware stack levels used:    1
 26024 ;; Hardware stack levels required when called:    7
 26025 ;; This function calls:
 26026 ;;		Nothing
 26027 ;; This function is called by:
 26028 ;;		_ADC_Calibrate
 26029 ;;		_ADC_Start
 26030 ;;		_ADC_ISR
 26031 ;;		_ADC_Sample
 26032 ;; This function uses a non-reentrant model
 26033 ;;
 26034                           
 26035                           	psect	text125
 26036  016D7A                     __ptext125:
 26037                           	opt stack 0
 26038  016D7A                     _ADC_On:
 26039                           	opt stack 20
 26040                           
 26041                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 26042                           
 26043                           ;incstack = 0
 26044  016D7A  80C2               	bsf	4034,0,c	;volatile
 26045                           
 26046                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 26047  016D7C  9C9E               	bcf	3998,6,c	;volatile
 26048  016D7E  0012               	return		;funcret
 26049  016D80                     __end_of_ADC_On:
 26050                           	opt stack 0
 26051                           tosu	equ	0xFFF
 26052                           tosh	equ	0xFFE
 26053                           tosl	equ	0xFFD
 26054                           pclath	equ	0xFFA
 26055                           tblptru	equ	0xFF8
 26056                           tblptrh	equ	0xFF7
 26057                           tblptrl	equ	0xFF6
 26058                           tablat	equ	0xFF5
 26059                           prodh	equ	0xFF4
 26060                           prodl	equ	0xFF3
 26061                           intcon	equ	0xFF2
 26062                           postinc0	equ	0xFEE
 26063                           wreg	equ	0xFE8
 26064                           indf1	equ	0xFE7
 26065                           postdec1	equ	0xFE5
 26066                           fsr1h	equ	0xFE2
 26067                           fsr1l	equ	0xFE1
 26068                           indf2	equ	0xFDF
 26069                           postinc2	equ	0xFDE
 26070                           postdec2	equ	0xFDD
 26071                           plusw2	equ	0xFDB
 26072                           fsr2h	equ	0xFDA
 26073                           fsr2l	equ	0xFD9
 26074                           status	equ	0xFD8
 26075                           
 26076 ;; *************** function _ADC_Off *****************
 26077 ;; Defined at:
 26078 ;;		line 94 in file "Library/ADC.c"
 26079 ;; Parameters:    Size  Location     Type
 26080 ;;		None
 26081 ;; Auto vars:     Size  Location     Type
 26082 ;;		None
 26083 ;; Return value:  Size  Location     Type
 26084 ;;                  1    wreg      void 
 26085 ;; Registers used:
 26086 ;;		None
 26087 ;; Tracked objects:
 26088 ;;		On entry : 0/0
 26089 ;;		On exit  : 0/0
 26090 ;;		Unchanged: 0/0
 26091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26096 ;;Total ram usage:        0 bytes
 26097 ;; Hardware stack levels used:    1
 26098 ;; Hardware stack levels required when called:    7
 26099 ;; This function calls:
 26100 ;;		Nothing
 26101 ;; This function is called by:
 26102 ;;		_ADC_Calibrate
 26103 ;;		_ADC_Start
 26104 ;;		_ADC_ISR
 26105 ;;		_ADC_Sample
 26106 ;; This function uses a non-reentrant model
 26107 ;;
 26108                           
 26109                           	psect	text126
 26110  016D5E                     __ptext126:
 26111                           	opt stack 0
 26112  016D5E                     _ADC_Off:
 26113                           	opt stack 20
 26114                           
 26115                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 26116                           
 26117                           ;incstack = 0
 26118  016D5E  90C2               	bcf	4034,0,c	;volatile
 26119                           
 26120                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 26121  016D60  9C9E               	bcf	3998,6,c	;volatile
 26122                           
 26123                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 26124  016D62  9C9D               	bcf	3997,6,c	;volatile
 26125  016D64  0012               	return		;funcret
 26126  016D66                     __end_of_ADC_Off:
 26127                           	opt stack 0
 26128                           tosu	equ	0xFFF
 26129                           tosh	equ	0xFFE
 26130                           tosl	equ	0xFFD
 26131                           pclath	equ	0xFFA
 26132                           tblptru	equ	0xFF8
 26133                           tblptrh	equ	0xFF7
 26134                           tblptrl	equ	0xFF6
 26135                           tablat	equ	0xFF5
 26136                           prodh	equ	0xFF4
 26137                           prodl	equ	0xFF3
 26138                           intcon	equ	0xFF2
 26139                           postinc0	equ	0xFEE
 26140                           wreg	equ	0xFE8
 26141                           indf1	equ	0xFE7
 26142                           postdec1	equ	0xFE5
 26143                           fsr1h	equ	0xFE2
 26144                           fsr1l	equ	0xFE1
 26145                           indf2	equ	0xFDF
 26146                           postinc2	equ	0xFDE
 26147                           postdec2	equ	0xFDD
 26148                           plusw2	equ	0xFDB
 26149                           fsr2h	equ	0xFDA
 26150                           fsr2l	equ	0xFD9
 26151                           status	equ	0xFD8
 26152                           
 26153 ;; *************** function _getMode *****************
 26154 ;; Defined at:
 26155 ;;		line 109 in file "main.c"
 26156 ;; Parameters:    Size  Location     Type
 26157 ;;		None
 26158 ;; Auto vars:     Size  Location     Type
 26159 ;;		None
 26160 ;; Return value:  Size  Location     Type
 26161 ;;                  1    wreg      void 
 26162 ;; Registers used:
 26163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26164 ;; Tracked objects:
 26165 ;;		On entry : 0/0
 26166 ;;		On exit  : 0/0
 26167 ;;		Unchanged: 0/0
 26168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26173 ;;Total ram usage:        0 bytes
 26174 ;; Hardware stack levels used:    1
 26175 ;; Hardware stack levels required when called:   16
 26176 ;; This function calls:
 26177 ;;		_HMI_DIPSwitch
 26178 ;;		_HMI_DownSwitch
 26179 ;;		_HMI_LeftSwitch
 26180 ;;		_HMI_Poll
 26181 ;;		_HMI_RightSwitch
 26182 ;;		_HMI_UpSwitch
 26183 ;;		_MXK_DIPSwitch
 26184 ;;		_MXK_TestButton
 26185 ;; This function is called by:
 26186 ;;		_main
 26187 ;; This function uses a non-reentrant model
 26188 ;;
 26189                           
 26190                           	psect	text127
 26191  01477E                     __ptext127:
 26192                           	opt stack 0
 26193  01477E                     _getMode:
 26194                           	opt stack 14
 26195                           
 26196                           ;main.c: 110: HMI_Poll();
 26197                           
 26198                           ;incstack = 0
 26199  01477E  EC47  F0AD         	call	_HMI_Poll	;wreg free
 26200                           
 26201                           ;main.c: 111: mode = 0;
 26202  014782  0E00               	movlw	0
 26203  014784  0103               	movlb	3	; () banked
 26204  014786  6F3D               	movwf	(_mode+1)& (0+255),b
 26205  014788  0E00               	movlw	0
 26206  01478A  6F3C               	movwf	_mode& (0+255),b
 26207                           
 26208                           ; BSR set to: 3
 26209                           ;main.c: 112: if (HMIBoard.mUp.mGetState()) {
 26210  01478C  EE23  F065         	lfsr	2,_HMIBoard+35
 26211  014790  D801               	call	u12388
 26212  014792  D00A               	goto	u12389
 26213  014794                     u12388:
 26214  014794  0005               	push	
 26215  014796  6EFA               	movwf	pclath,c
 26216  014798  50DE               	movf	postinc2,w,c
 26217  01479A  6EFD               	movwf	tosl,c
 26218  01479C  50DE               	movf	postinc2,w,c
 26219  01479E  6EFE               	movwf	tosh,c
 26220  0147A0  50DE               	movf	postinc2,w,c
 26221  0147A2  6EFF               	movwf	tosu,c
 26222  0147A4  50FA               	movf	pclath,w,c
 26223  0147A6  0012               	return		;indir
 26224  0147A8                     u12389:
 26225  0147A8  0900               	iorlw	0
 26226  0147AA  B4D8               	btfsc	status,2,c
 26227  0147AC  D005               	goto	l2322
 26228                           
 26229                           ;main.c: 113: mode = 1;
 26230  0147AE  0E00               	movlw	0
 26231  0147B0  0103               	movlb	3	; () banked
 26232  0147B2  6F3D               	movwf	(_mode+1)& (0+255),b
 26233  0147B4  0E01               	movlw	1
 26234  0147B6  6F3C               	movwf	_mode& (0+255),b
 26235  0147B8                     l2322:
 26236                           
 26237                           ;main.c: 114: }
 26238                           ;main.c: 115: if (HMIBoard.mRight.mGetState()) {
 26239                           
 26240                           ; BSR set to: 3
 26241  0147B8  EE23  F051         	lfsr	2,_HMIBoard+15
 26242  0147BC  D801               	call	u12408
 26243  0147BE  D00A               	goto	u12409
 26244  0147C0                     u12408:
 26245  0147C0  0005               	push	
 26246  0147C2  6EFA               	movwf	pclath,c
 26247  0147C4  50DE               	movf	postinc2,w,c
 26248  0147C6  6EFD               	movwf	tosl,c
 26249  0147C8  50DE               	movf	postinc2,w,c
 26250  0147CA  6EFE               	movwf	tosh,c
 26251  0147CC  50DE               	movf	postinc2,w,c
 26252  0147CE  6EFF               	movwf	tosu,c
 26253  0147D0  50FA               	movf	pclath,w,c
 26254  0147D2  0012               	return		;indir
 26255  0147D4                     u12409:
 26256  0147D4  0900               	iorlw	0
 26257  0147D6  B4D8               	btfsc	status,2,c
 26258  0147D8  D005               	goto	l2323
 26259                           
 26260                           ;main.c: 116: mode = 2;
 26261  0147DA  0E00               	movlw	0
 26262  0147DC  0103               	movlb	3	; () banked
 26263  0147DE  6F3D               	movwf	(_mode+1)& (0+255),b
 26264  0147E0  0E02               	movlw	2
 26265  0147E2  6F3C               	movwf	_mode& (0+255),b
 26266  0147E4                     l2323:
 26267                           
 26268                           ;main.c: 117: }
 26269                           ;main.c: 118: if (HMIBoard.mDown.mGetState()) {
 26270                           
 26271                           ; BSR set to: 3
 26272  0147E4  EE23  F06F         	lfsr	2,_HMIBoard+45
 26273  0147E8  D801               	call	u12428
 26274  0147EA  D00A               	goto	u12429
 26275  0147EC                     u12428:
 26276  0147EC  0005               	push	
 26277  0147EE  6EFA               	movwf	pclath,c
 26278  0147F0  50DE               	movf	postinc2,w,c
 26279  0147F2  6EFD               	movwf	tosl,c
 26280  0147F4  50DE               	movf	postinc2,w,c
 26281  0147F6  6EFE               	movwf	tosh,c
 26282  0147F8  50DE               	movf	postinc2,w,c
 26283  0147FA  6EFF               	movwf	tosu,c
 26284  0147FC  50FA               	movf	pclath,w,c
 26285  0147FE  0012               	return		;indir
 26286  014800                     u12429:
 26287  014800  0900               	iorlw	0
 26288  014802  B4D8               	btfsc	status,2,c
 26289  014804  D005               	goto	l2324
 26290                           
 26291                           ;main.c: 119: mode = 3;
 26292  014806  0E00               	movlw	0
 26293  014808  0103               	movlb	3	; () banked
 26294  01480A  6F3D               	movwf	(_mode+1)& (0+255),b
 26295  01480C  0E03               	movlw	3
 26296  01480E  6F3C               	movwf	_mode& (0+255),b
 26297  014810                     l2324:
 26298                           
 26299                           ;main.c: 120: }
 26300                           ;main.c: 121: if (HMIBoard.mLeft.mGetState()) {
 26301                           
 26302                           ; BSR set to: 3
 26303  014810  EE23  F05B         	lfsr	2,_HMIBoard+25
 26304  014814  D801               	call	u12448
 26305  014816  D00A               	goto	u12449
 26306  014818                     u12448:
 26307  014818  0005               	push	
 26308  01481A  6EFA               	movwf	pclath,c
 26309  01481C  50DE               	movf	postinc2,w,c
 26310  01481E  6EFD               	movwf	tosl,c
 26311  014820  50DE               	movf	postinc2,w,c
 26312  014822  6EFE               	movwf	tosh,c
 26313  014824  50DE               	movf	postinc2,w,c
 26314  014826  6EFF               	movwf	tosu,c
 26315  014828  50FA               	movf	pclath,w,c
 26316  01482A  0012               	return		;indir
 26317  01482C                     u12449:
 26318  01482C  0900               	iorlw	0
 26319  01482E  B4D8               	btfsc	status,2,c
 26320  014830  0012               	return	
 26321                           
 26322                           ;main.c: 122: mode = 4;
 26323  014832  0E00               	movlw	0
 26324  014834  0103               	movlb	3	; () banked
 26325  014836  6F3D               	movwf	(_mode+1)& (0+255),b
 26326  014838  0E04               	movlw	4
 26327  01483A  6F3C               	movwf	_mode& (0+255),b
 26328  01483C  0012               	return	
 26329  01483E                     __end_of_getMode:
 26330                           	opt stack 0
 26331                           tosu	equ	0xFFF
 26332                           tosh	equ	0xFFE
 26333                           tosl	equ	0xFFD
 26334                           pclath	equ	0xFFA
 26335                           tblptru	equ	0xFF8
 26336                           tblptrh	equ	0xFF7
 26337                           tblptrl	equ	0xFF6
 26338                           tablat	equ	0xFF5
 26339                           prodh	equ	0xFF4
 26340                           prodl	equ	0xFF3
 26341                           intcon	equ	0xFF2
 26342                           postinc0	equ	0xFEE
 26343                           wreg	equ	0xFE8
 26344                           indf1	equ	0xFE7
 26345                           postdec1	equ	0xFE5
 26346                           fsr1h	equ	0xFE2
 26347                           fsr1l	equ	0xFE1
 26348                           indf2	equ	0xFDF
 26349                           postinc2	equ	0xFDE
 26350                           postdec2	equ	0xFDD
 26351                           plusw2	equ	0xFDB
 26352                           fsr2h	equ	0xFDA
 26353                           fsr2l	equ	0xFD9
 26354                           status	equ	0xFD8
 26355                           
 26356 ;; *************** function _HMI_Poll *****************
 26357 ;; Defined at:
 26358 ;;		line 252 in file "HMI.c"
 26359 ;; Parameters:    Size  Location     Type
 26360 ;;		None
 26361 ;; Auto vars:     Size  Location     Type
 26362 ;;		None
 26363 ;; Return value:  Size  Location     Type
 26364 ;;                  1    wreg      void 
 26365 ;; Registers used:
 26366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26367 ;; Tracked objects:
 26368 ;;		On entry : 0/0
 26369 ;;		On exit  : 0/0
 26370 ;;		Unchanged: 0/0
 26371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26376 ;;Total ram usage:        0 bytes
 26377 ;; Hardware stack levels used:    1
 26378 ;; Hardware stack levels required when called:   15
 26379 ;; This function calls:
 26380 ;;		_Button_Poll
 26381 ;; This function is called by:
 26382 ;;		_getMode
 26383 ;;		_safeToGo
 26384 ;;		_main
 26385 ;; This function uses a non-reentrant model
 26386 ;;
 26387                           
 26388                           	psect	text128
 26389  015A8E                     __ptext128:
 26390                           	opt stack 0
 26391  015A8E                     _HMI_Poll:
 26392                           	opt stack 13
 26393                           
 26394                           ;HMI.c: 254: TRISE = 0xFC;
 26395                           
 26396                           ;incstack = 0
 26397  015A8E  0EFC               	movlw	252
 26398  015A90  6E96               	movwf	3990,c	;volatile
 26399                           
 26400                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 26401  015A92  0E72               	movlw	low (_HMIBoard+48)
 26402  015A94  0100               	movlb	0	; () banked
 26403  015A96  6FD4               	movwf	Button_Poll@pButton& (0+255),b
 26404  015A98  0E03               	movlw	high (_HMIBoard+48)
 26405  015A9A  0100               	movlb	0	; () banked
 26406  015A9C  6FD5               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26407  015A9E  0E01               	movlw	1
 26408  015AA0  0100               	movlb	0	; () banked
 26409  015AA2  6FD6               	movwf	Button_Poll@pIncrement& (0+255),b
 26410  015AA4  EC66  F09A         	call	_Button_Poll	;wreg free
 26411                           
 26412                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 26413  015AA8  0E54               	movlw	low (_HMIBoard+18)
 26414  015AAA  0100               	movlb	0	; () banked
 26415  015AAC  6FD4               	movwf	Button_Poll@pButton& (0+255),b
 26416  015AAE  0E03               	movlw	high (_HMIBoard+18)
 26417  015AB0  0100               	movlb	0	; () banked
 26418  015AB2  6FD5               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26419  015AB4  0E01               	movlw	1
 26420  015AB6  0100               	movlb	0	; () banked
 26421  015AB8  6FD6               	movwf	Button_Poll@pIncrement& (0+255),b
 26422  015ABA  EC66  F09A         	call	_Button_Poll	;wreg free
 26423                           
 26424                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 26425  015ABE  0E4A               	movlw	low (_HMIBoard+8)
 26426  015AC0  0100               	movlb	0	; () banked
 26427  015AC2  6FD4               	movwf	Button_Poll@pButton& (0+255),b
 26428  015AC4  0E03               	movlw	high (_HMIBoard+8)
 26429  015AC6  0100               	movlb	0	; () banked
 26430  015AC8  6FD5               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26431  015ACA  0E01               	movlw	1
 26432  015ACC  0100               	movlb	0	; () banked
 26433  015ACE  6FD6               	movwf	Button_Poll@pIncrement& (0+255),b
 26434  015AD0  EC66  F09A         	call	_Button_Poll	;wreg free
 26435                           
 26436                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 26437  015AD4  0E5E               	movlw	low (_HMIBoard+28)
 26438  015AD6  0100               	movlb	0	; () banked
 26439  015AD8  6FD4               	movwf	Button_Poll@pButton& (0+255),b
 26440  015ADA  0E03               	movlw	high (_HMIBoard+28)
 26441  015ADC  0100               	movlb	0	; () banked
 26442  015ADE  6FD5               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26443  015AE0  0E01               	movlw	1
 26444  015AE2  0100               	movlb	0	; () banked
 26445  015AE4  6FD6               	movwf	Button_Poll@pIncrement& (0+255),b
 26446  015AE6  EC66  F09A         	call	_Button_Poll	;wreg free
 26447                           
 26448                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 26449  015AEA  0E68               	movlw	low (_HMIBoard+38)
 26450  015AEC  0100               	movlb	0	; () banked
 26451  015AEE  6FD4               	movwf	Button_Poll@pButton& (0+255),b
 26452  015AF0  0E03               	movlw	high (_HMIBoard+38)
 26453  015AF2  0100               	movlb	0	; () banked
 26454  015AF4  6FD5               	movwf	(Button_Poll@pButton+1)& (0+255),b
 26455  015AF6  0E01               	movlw	1
 26456  015AF8  0100               	movlb	0	; () banked
 26457  015AFA  6FD6               	movwf	Button_Poll@pIncrement& (0+255),b
 26458  015AFC  EC66  F09A         	call	_Button_Poll	;wreg free
 26459  015B00  0012               	return		;funcret
 26460  015B02                     __end_of_HMI_Poll:
 26461                           	opt stack 0
 26462                           tosu	equ	0xFFF
 26463                           tosh	equ	0xFFE
 26464                           tosl	equ	0xFFD
 26465                           pclath	equ	0xFFA
 26466                           tblptru	equ	0xFF8
 26467                           tblptrh	equ	0xFF7
 26468                           tblptrl	equ	0xFF6
 26469                           tablat	equ	0xFF5
 26470                           prodh	equ	0xFF4
 26471                           prodl	equ	0xFF3
 26472                           intcon	equ	0xFF2
 26473                           postinc0	equ	0xFEE
 26474                           wreg	equ	0xFE8
 26475                           indf1	equ	0xFE7
 26476                           postdec1	equ	0xFE5
 26477                           fsr1h	equ	0xFE2
 26478                           fsr1l	equ	0xFE1
 26479                           indf2	equ	0xFDF
 26480                           postinc2	equ	0xFDE
 26481                           postdec2	equ	0xFDD
 26482                           plusw2	equ	0xFDB
 26483                           fsr2h	equ	0xFDA
 26484                           fsr2l	equ	0xFD9
 26485                           status	equ	0xFD8
 26486                           
 26487 ;; *************** function _Button_Poll *****************
 26488 ;; Defined at:
 26489 ;;		line 57 in file "Library/Button.c"
 26490 ;; Parameters:    Size  Location     Type
 26491 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 26492 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 26493 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 26494 ;; Auto vars:     Size  Location     Type
 26495 ;;  Pin             1   35[BANK0 ] unsigned char 
 26496 ;; Return value:  Size  Location     Type
 26497 ;;                  1    wreg      unsigned char 
 26498 ;; Registers used:
 26499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26500 ;; Tracked objects:
 26501 ;;		On entry : 0/0
 26502 ;;		On exit  : 0/0
 26503 ;;		Unchanged: 0/0
 26504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26505 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26507 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26508 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26509 ;;Total ram usage:        9 bytes
 26510 ;; Hardware stack levels used:    1
 26511 ;; Hardware stack levels required when called:   14
 26512 ;; This function calls:
 26513 ;;		_Event_DIPSwitch
 26514 ;;		_Event_NULL
 26515 ;;		_Event_TestButton
 26516 ;;		_HMI_DIPSwitch
 26517 ;;		_HMI_DownSwitch
 26518 ;;		_HMI_LeftSwitch
 26519 ;;		_HMI_RightSwitch
 26520 ;;		_HMI_UpSwitch
 26521 ;;		_MXK_DIPSwitch
 26522 ;;		_MXK_TestButton
 26523 ;; This function is called by:
 26524 ;;		_HMI_Poll
 26525 ;;		_MXK_Poll
 26526 ;; This function uses a non-reentrant model
 26527 ;;
 26528                           
 26529                           	psect	text129
 26530  0134CC                     __ptext129:
 26531                           	opt stack 0
 26532  0134CC                     _Button_Poll:
 26533                           	opt stack 13
 26534                           
 26535                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 26536                           
 26537                           ;incstack = 0
 26538  0134CC  0100               	movlb	0	; () banked
 26539  0134CE  EE20 F007          	lfsr	2,7
 26540  0134D2  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26541  0134D4  26D9               	addwf	fsr2l,f,c
 26542  0134D6  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26543  0134D8  22DA               	addwfc	fsr2h,f,c
 26544  0134DA  D801               	call	u10688
 26545  0134DC  D00A               	goto	u10689
 26546  0134DE                     u10688:
 26547  0134DE  0005               	push	
 26548  0134E0  6EFA               	movwf	pclath,c
 26549  0134E2  50DE               	movf	postinc2,w,c
 26550  0134E4  6EFD               	movwf	tosl,c
 26551  0134E6  50DE               	movf	postinc2,w,c
 26552  0134E8  6EFE               	movwf	tosh,c
 26553  0134EA  50DE               	movf	postinc2,w,c
 26554  0134EC  6EFF               	movwf	tosu,c
 26555  0134EE  50FA               	movf	pclath,w,c
 26556  0134F0  0012               	return		;indir
 26557  0134F2                     u10689:
 26558  0134F2  0100               	movlb	0	; () banked
 26559  0134F4  6FDC               	movwf	Button_Poll@Pin& (0+255),b
 26560                           
 26561                           ; BSR set to: 0
 26562                           ;Button.c: 61: if (pButton->mState == Pin)
 26563  0134F6  C0D4  FFD9         	movff	Button_Poll@pButton,fsr2l
 26564  0134FA  C0D5  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 26565  0134FE  0100               	movlb	0	; () banked
 26566  013500  51DC               	movf	Button_Poll@Pin& (0+255),w,b
 26567  013502  18DE               	xorwf	postinc2,w,c
 26568  013504  A4D8               	btfss	status,2,c
 26569  013506  D021               	goto	l11
 26570                           
 26571                           ; BSR set to: 0
 26572                           ;Button.c: 62: {
 26573                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 26574  013508  0100               	movlb	0	; () banked
 26575  01350A  EE20 F001          	lfsr	2,1
 26576  01350E  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26577  013510  26D9               	addwf	fsr2l,f,c
 26578  013512  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26579  013514  22DA               	addwfc	fsr2h,f,c
 26580  013516  0100               	movlb	0	; () banked
 26581  013518  51D6               	movf	Button_Poll@pIncrement& (0+255),w,b
 26582  01351A  5CDE               	subwf	postinc2,w,c
 26583  01351C  B0D8               	btfsc	status,0,c
 26584  01351E  D00A               	goto	l12
 26585                           
 26586                           ; BSR set to: 0
 26587                           ;Button.c: 66: pButton->mCount = 0;
 26588  013520  0100               	movlb	0	; () banked
 26589  013522  EE20 F001          	lfsr	2,1
 26590  013526  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26591  013528  26D9               	addwf	fsr2l,f,c
 26592  01352A  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26593  01352C  22DA               	addwfc	fsr2h,f,c
 26594  01352E  0E00               	movlw	0
 26595  013530  6EDF               	movwf	indf2,c
 26596  013532  0012               	return	
 26597  013534                     l12:
 26598                           
 26599                           ; BSR set to: 0
 26600                           ;Button.c: 67: else
 26601                           ;Button.c: 68: pButton->mCount -= pIncrement;
 26602                           
 26603                           ; BSR set to: 0
 26604  013534  0100               	movlb	0	; () banked
 26605  013536  EE20 F001          	lfsr	2,1
 26606  01353A  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26607  01353C  26D9               	addwf	fsr2l,f,c
 26608  01353E  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26609  013540  22DA               	addwfc	fsr2h,f,c
 26610  013542  0100               	movlb	0	; () banked
 26611  013544  51D6               	movf	Button_Poll@pIncrement& (0+255),w,b
 26612  013546  5EDF               	subwf	indf2,f,c
 26613                           
 26614                           ; BSR set to: 0
 26615                           ;Button.c: 69: }
 26616  013548  0012               	return	
 26617  01354A                     l11:
 26618                           
 26619                           ; BSR set to: 0
 26620                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 26621                           
 26622                           ; BSR set to: 0
 26623  01354A  0100               	movlb	0	; () banked
 26624  01354C  EE20 F001          	lfsr	2,1
 26625  013550  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26626  013552  26D9               	addwf	fsr2l,f,c
 26627  013554  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26628  013556  22DA               	addwfc	fsr2h,f,c
 26629  013558  50DF               	movf	indf2,w,c
 26630  01355A  0100               	movlb	0	; () banked
 26631  01355C  6FD7               	movwf	??_Button_Poll& (0+255),b
 26632  01355E  6BD8               	clrf	(??_Button_Poll+1)& (0+255),b
 26633  013560  0100               	movlb	0	; () banked
 26634  013562  51D6               	movf	Button_Poll@pIncrement& (0+255),w,b
 26635  013564  0100               	movlb	0	; () banked
 26636  013566  27D7               	addwf	??_Button_Poll& (0+255),f,b
 26637  013568  0E00               	movlw	0
 26638  01356A  23D8               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 26639  01356C  0100               	movlb	0	; () banked
 26640  01356E  EE20 F001          	lfsr	2,1
 26641  013572  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26642  013574  26D9               	addwf	fsr2l,f,c
 26643  013576  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26644  013578  22DA               	addwfc	fsr2h,f,c
 26645  01357A  50DF               	movf	indf2,w,c
 26646  01357C  0100               	movlb	0	; () banked
 26647  01357E  6FD9               	movwf	(??_Button_Poll+2)& (0+255),b
 26648  013580  6BDA               	clrf	(??_Button_Poll+3)& (0+255),b
 26649  013582  0100               	movlb	0	; () banked
 26650  013584  51D7               	movf	??_Button_Poll& (0+255),w,b
 26651  013586  0100               	movlb	0	; () banked
 26652  013588  5DD9               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26653  01358A  0100               	movlb	0	; () banked
 26654  01358C  51DA               	movf	(??_Button_Poll+3)& (0+255),w,b
 26655  01358E  0A80               	xorlw	128
 26656  013590  0100               	movlb	0	; () banked
 26657  013592  6FDB               	movwf	(??_Button_Poll+4)& (0+255),b
 26658  013594  0100               	movlb	0	; () banked
 26659  013596  51D8               	movf	(??_Button_Poll+1)& (0+255),w,b
 26660  013598  0A80               	xorlw	128
 26661  01359A  0100               	movlb	0	; () banked
 26662  01359C  59DB               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 26663  01359E  B0D8               	btfsc	status,0,c
 26664  0135A0  0012               	return	
 26665                           
 26666                           ; BSR set to: 0
 26667                           ;Button.c: 73: {
 26668                           ;Button.c: 75: pButton->mCount += pIncrement;
 26669  0135A2  0100               	movlb	0	; () banked
 26670  0135A4  EE20 F001          	lfsr	2,1
 26671  0135A8  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26672  0135AA  26D9               	addwf	fsr2l,f,c
 26673  0135AC  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26674  0135AE  22DA               	addwfc	fsr2h,f,c
 26675  0135B0  0100               	movlb	0	; () banked
 26676  0135B2  51D6               	movf	Button_Poll@pIncrement& (0+255),w,b
 26677  0135B4  26DF               	addwf	indf2,f,c
 26678                           
 26679                           ; BSR set to: 0
 26680                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 26681  0135B6  0100               	movlb	0	; () banked
 26682  0135B8  EE20 F002          	lfsr	2,2
 26683  0135BC  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26684  0135BE  26D9               	addwf	fsr2l,f,c
 26685  0135C0  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26686  0135C2  22DA               	addwfc	fsr2h,f,c
 26687  0135C4  0100               	movlb	0	; () banked
 26688  0135C6  EE10 F001          	lfsr	1,1
 26689  0135CA  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26690  0135CC  26E1               	addwf	fsr1l,f,c
 26691  0135CE  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26692  0135D0  22E2               	addwfc	fsr1h,f,c
 26693  0135D2  50E7               	movf	indf1,w,c
 26694  0135D4  0100               	movlb	0	; () banked
 26695  0135D6  6FD9               	movwf	(??_Button_Poll+2)& (0+255),b
 26696  0135D8  6BDA               	clrf	(??_Button_Poll+3)& (0+255),b
 26697  0135DA  50DE               	movf	postinc2,w,c
 26698  0135DC  0100               	movlb	0	; () banked
 26699  0135DE  5DD9               	subwf	(??_Button_Poll+2)& (0+255),w,b
 26700  0135E0  50DE               	movf	postinc2,w,c
 26701  0135E2  0100               	movlb	0	; () banked
 26702  0135E4  59DA               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 26703  0135E6  A0D8               	btfss	status,0,c
 26704  0135E8  0012               	return	
 26705                           
 26706                           ; BSR set to: 0
 26707                           ;Button.c: 77: {
 26708                           ;Button.c: 79: pButton->mState = Pin;
 26709  0135EA  C0D4  FFD9         	movff	Button_Poll@pButton,fsr2l
 26710  0135EE  C0D5  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 26711  0135F2  C0DC  FFDF         	movff	Button_Poll@Pin,indf2
 26712                           
 26713                           ; BSR set to: 0
 26714                           ;Button.c: 80: pButton->mCount = 0;
 26715  0135F6  0100               	movlb	0	; () banked
 26716  0135F8  EE20 F001          	lfsr	2,1
 26717  0135FC  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26718  0135FE  26D9               	addwf	fsr2l,f,c
 26719  013600  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26720  013602  22DA               	addwfc	fsr2h,f,c
 26721  013604  0E00               	movlw	0
 26722  013606  6EDF               	movwf	indf2,c
 26723                           
 26724                           ; BSR set to: 0
 26725                           ;Button.c: 83: pButton->mFunction(Pin);
 26726  013608  0100               	movlb	0	; () banked
 26727  01360A  EE20 F004          	lfsr	2,4
 26728  01360E  51D4               	movf	Button_Poll@pButton& (0+255),w,b
 26729  013610  26D9               	addwf	fsr2l,f,c
 26730  013612  51D5               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 26731  013614  22DA               	addwfc	fsr2h,f,c
 26732  013616  D801               	call	u10738
 26733  013618  0012               	return	
 26734  01361A                     u10738:
 26735  01361A  0005               	push	
 26736  01361C  6EFA               	movwf	pclath,c
 26737  01361E  50DE               	movf	postinc2,w,c
 26738  013620  6EFD               	movwf	tosl,c
 26739  013622  50DE               	movf	postinc2,w,c
 26740  013624  6EFE               	movwf	tosh,c
 26741  013626  50DE               	movf	postinc2,w,c
 26742  013628  6EFF               	movwf	tosu,c
 26743  01362A  50FA               	movf	pclath,w,c
 26744  01362C  0100               	movlb	0	; () banked
 26745  01362E  51DC               	movf	Button_Poll@Pin& (0+255),w,b
 26746  013630  0012               	return		;indir
 26747  013632                     __end_of_Button_Poll:
 26748                           	opt stack 0
 26749                           tosu	equ	0xFFF
 26750                           tosh	equ	0xFFE
 26751                           tosl	equ	0xFFD
 26752                           pclath	equ	0xFFA
 26753                           tblptru	equ	0xFF8
 26754                           tblptrh	equ	0xFF7
 26755                           tblptrl	equ	0xFF6
 26756                           tablat	equ	0xFF5
 26757                           prodh	equ	0xFF4
 26758                           prodl	equ	0xFF3
 26759                           intcon	equ	0xFF2
 26760                           postinc0	equ	0xFEE
 26761                           wreg	equ	0xFE8
 26762                           indf1	equ	0xFE7
 26763                           postdec1	equ	0xFE5
 26764                           fsr1h	equ	0xFE2
 26765                           fsr1l	equ	0xFE1
 26766                           indf2	equ	0xFDF
 26767                           postinc2	equ	0xFDE
 26768                           postdec2	equ	0xFDD
 26769                           plusw2	equ	0xFDB
 26770                           fsr2h	equ	0xFDA
 26771                           fsr2l	equ	0xFD9
 26772                           status	equ	0xFD8
 26773                           
 26774 ;; *************** function _MXK_DIPSwitch *****************
 26775 ;; Defined at:
 26776 ;;		line 24 in file "Library/MXK.c"
 26777 ;; Parameters:    Size  Location     Type
 26778 ;;		None
 26779 ;; Auto vars:     Size  Location     Type
 26780 ;;		None
 26781 ;; Return value:  Size  Location     Type
 26782 ;;                  1    wreg      unsigned char 
 26783 ;; Registers used:
 26784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26785 ;; Tracked objects:
 26786 ;;		On entry : 0/0
 26787 ;;		On exit  : 0/0
 26788 ;;		Unchanged: 0/0
 26789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26794 ;;Total ram usage:        0 bytes
 26795 ;; Hardware stack levels used:    1
 26796 ;; Hardware stack levels required when called:    8
 26797 ;; This function calls:
 26798 ;;		_Port_GetQuad
 26799 ;; This function is called by:
 26800 ;;		_FunctInitButton
 26801 ;;		_Button_Poll
 26802 ;;		_getMode
 26803 ;; This function uses a non-reentrant model
 26804 ;;
 26805                           
 26806                           	psect	text130
 26807  016BA4                     __ptext130:
 26808                           	opt stack 0
 26809  016BA4                     _MXK_DIPSwitch:
 26810                           	opt stack 18
 26811                           
 26812                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 26813                           
 26814                           ;incstack = 0
 26815  016BA4  0E9A               	movlw	low _PortD
 26816  016BA6  0100               	movlb	0	; () banked
 26817  016BA8  6FB9               	movwf	Port_GetQuad@pInput& (0+255),b
 26818  016BAA  0E00               	movlw	high _PortD
 26819  016BAC  0100               	movlb	0	; () banked
 26820  016BAE  6FBA               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 26821  016BB0  0E00               	movlw	0
 26822  016BB2  0100               	movlb	0	; () banked
 26823  016BB4  6FBB               	movwf	Port_GetQuad@pQuad& (0+255),b
 26824  016BB6  EC35  F0B1         	call	_Port_GetQuad
 26825  016BBA  0012               	return	
 26826  016BBC                     __end_of_MXK_DIPSwitch:
 26827                           	opt stack 0
 26828                           tosu	equ	0xFFF
 26829                           tosh	equ	0xFFE
 26830                           tosl	equ	0xFFD
 26831                           pclath	equ	0xFFA
 26832                           tblptru	equ	0xFF8
 26833                           tblptrh	equ	0xFF7
 26834                           tblptrl	equ	0xFF6
 26835                           tablat	equ	0xFF5
 26836                           prodh	equ	0xFF4
 26837                           prodl	equ	0xFF3
 26838                           intcon	equ	0xFF2
 26839                           postinc0	equ	0xFEE
 26840                           wreg	equ	0xFE8
 26841                           indf1	equ	0xFE7
 26842                           postdec1	equ	0xFE5
 26843                           fsr1h	equ	0xFE2
 26844                           fsr1l	equ	0xFE1
 26845                           indf2	equ	0xFDF
 26846                           postinc2	equ	0xFDE
 26847                           postdec2	equ	0xFDD
 26848                           plusw2	equ	0xFDB
 26849                           fsr2h	equ	0xFDA
 26850                           fsr2l	equ	0xFD9
 26851                           status	equ	0xFD8
 26852                           
 26853 ;; *************** function _HMI_DIPSwitch *****************
 26854 ;; Defined at:
 26855 ;;		line 47 in file "HMI.c"
 26856 ;; Parameters:    Size  Location     Type
 26857 ;;		None
 26858 ;; Auto vars:     Size  Location     Type
 26859 ;;		None
 26860 ;; Return value:  Size  Location     Type
 26861 ;;                  1    wreg      unsigned char 
 26862 ;; Registers used:
 26863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26864 ;; Tracked objects:
 26865 ;;		On entry : 0/0
 26866 ;;		On exit  : 0/0
 26867 ;;		Unchanged: 0/0
 26868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26873 ;;Total ram usage:        0 bytes
 26874 ;; Hardware stack levels used:    1
 26875 ;; Hardware stack levels required when called:    8
 26876 ;; This function calls:
 26877 ;;		_Port_GetQuad
 26878 ;; This function is called by:
 26879 ;;		_HMI_Init
 26880 ;;		_Button_Poll
 26881 ;;		_getMode
 26882 ;; This function uses a non-reentrant model
 26883 ;;
 26884                           
 26885                           	psect	text131
 26886  016BBC                     __ptext131:
 26887                           	opt stack 0
 26888  016BBC                     _HMI_DIPSwitch:
 26889                           	opt stack 18
 26890                           
 26891                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 26892                           
 26893                           ;incstack = 0
 26894  016BBC  0E90               	movlw	low _PortE
 26895  016BBE  0100               	movlb	0	; () banked
 26896  016BC0  6FB9               	movwf	Port_GetQuad@pInput& (0+255),b
 26897  016BC2  0E00               	movlw	high _PortE
 26898  016BC4  0100               	movlb	0	; () banked
 26899  016BC6  6FBA               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 26900  016BC8  0E00               	movlw	0
 26901  016BCA  0100               	movlb	0	; () banked
 26902  016BCC  6FBB               	movwf	Port_GetQuad@pQuad& (0+255),b
 26903  016BCE  EC35  F0B1         	call	_Port_GetQuad	;wreg free
 26904  016BD2  0012               	return	
 26905  016BD4                     __end_of_HMI_DIPSwitch:
 26906                           	opt stack 0
 26907                           tosu	equ	0xFFF
 26908                           tosh	equ	0xFFE
 26909                           tosl	equ	0xFFD
 26910                           pclath	equ	0xFFA
 26911                           tblptru	equ	0xFF8
 26912                           tblptrh	equ	0xFF7
 26913                           tblptrl	equ	0xFF6
 26914                           tablat	equ	0xFF5
 26915                           prodh	equ	0xFF4
 26916                           prodl	equ	0xFF3
 26917                           intcon	equ	0xFF2
 26918                           postinc0	equ	0xFEE
 26919                           wreg	equ	0xFE8
 26920                           indf1	equ	0xFE7
 26921                           postdec1	equ	0xFE5
 26922                           fsr1h	equ	0xFE2
 26923                           fsr1l	equ	0xFE1
 26924                           indf2	equ	0xFDF
 26925                           postinc2	equ	0xFDE
 26926                           postdec2	equ	0xFDD
 26927                           plusw2	equ	0xFDB
 26928                           fsr2h	equ	0xFDA
 26929                           fsr2l	equ	0xFD9
 26930                           status	equ	0xFD8
 26931                           
 26932 ;; *************** function _HMI_DownSwitch *****************
 26933 ;; Defined at:
 26934 ;;		line 42 in file "HMI.c"
 26935 ;; Parameters:    Size  Location     Type
 26936 ;;		None
 26937 ;; Auto vars:     Size  Location     Type
 26938 ;;		None
 26939 ;; Return value:  Size  Location     Type
 26940 ;;                  1    wreg      unsigned char 
 26941 ;; Registers used:
 26942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26943 ;; Tracked objects:
 26944 ;;		On entry : 0/0
 26945 ;;		On exit  : 0/0
 26946 ;;		Unchanged: 0/0
 26947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26952 ;;Total ram usage:        0 bytes
 26953 ;; Hardware stack levels used:    1
 26954 ;; Hardware stack levels required when called:    8
 26955 ;; This function calls:
 26956 ;;		_Port_GetPin
 26957 ;; This function is called by:
 26958 ;;		_HMI_Init
 26959 ;;		_Button_Poll
 26960 ;;		_getMode
 26961 ;; This function uses a non-reentrant model
 26962 ;;
 26963                           
 26964                           	psect	text132
 26965  016BD4                     __ptext132:
 26966                           	opt stack 0
 26967  016BD4                     _HMI_DownSwitch:
 26968                           	opt stack 18
 26969                           
 26970                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 26971                           
 26972                           ;incstack = 0
 26973  016BD4  0E90               	movlw	low _PortE
 26974  016BD6  0100               	movlb	0	; () banked
 26975  016BD8  6FB9               	movwf	Port_GetPin@pInput& (0+255),b
 26976  016BDA  0E00               	movlw	high _PortE
 26977  016BDC  0100               	movlb	0	; () banked
 26978  016BDE  6FBA               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26979  016BE0  0E06               	movlw	6
 26980  016BE2  0100               	movlb	0	; () banked
 26981  016BE4  6FBB               	movwf	Port_GetPin@pPin& (0+255),b
 26982  016BE6  EC0C  F0B2         	call	_Port_GetPin	;wreg free
 26983  016BEA  0012               	return	
 26984  016BEC                     __end_of_HMI_DownSwitch:
 26985                           	opt stack 0
 26986                           tosu	equ	0xFFF
 26987                           tosh	equ	0xFFE
 26988                           tosl	equ	0xFFD
 26989                           pclath	equ	0xFFA
 26990                           tblptru	equ	0xFF8
 26991                           tblptrh	equ	0xFF7
 26992                           tblptrl	equ	0xFF6
 26993                           tablat	equ	0xFF5
 26994                           prodh	equ	0xFF4
 26995                           prodl	equ	0xFF3
 26996                           intcon	equ	0xFF2
 26997                           postinc0	equ	0xFEE
 26998                           wreg	equ	0xFE8
 26999                           indf1	equ	0xFE7
 27000                           postdec1	equ	0xFE5
 27001                           fsr1h	equ	0xFE2
 27002                           fsr1l	equ	0xFE1
 27003                           indf2	equ	0xFDF
 27004                           postinc2	equ	0xFDE
 27005                           postdec2	equ	0xFDD
 27006                           plusw2	equ	0xFDB
 27007                           fsr2h	equ	0xFDA
 27008                           fsr2l	equ	0xFD9
 27009                           status	equ	0xFD8
 27010                           
 27011 ;; *************** function _HMI_UpSwitch *****************
 27012 ;; Defined at:
 27013 ;;		line 37 in file "HMI.c"
 27014 ;; Parameters:    Size  Location     Type
 27015 ;;		None
 27016 ;; Auto vars:     Size  Location     Type
 27017 ;;		None
 27018 ;; Return value:  Size  Location     Type
 27019 ;;                  1    wreg      unsigned char 
 27020 ;; Registers used:
 27021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27022 ;; Tracked objects:
 27023 ;;		On entry : 0/0
 27024 ;;		On exit  : 0/0
 27025 ;;		Unchanged: 0/0
 27026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27031 ;;Total ram usage:        0 bytes
 27032 ;; Hardware stack levels used:    1
 27033 ;; Hardware stack levels required when called:    8
 27034 ;; This function calls:
 27035 ;;		_Port_GetPin
 27036 ;; This function is called by:
 27037 ;;		_HMI_Init
 27038 ;;		_Button_Poll
 27039 ;;		_getMode
 27040 ;; This function uses a non-reentrant model
 27041 ;;
 27042                           
 27043                           	psect	text133
 27044  016BEC                     __ptext133:
 27045                           	opt stack 0
 27046  016BEC                     _HMI_UpSwitch:
 27047                           	opt stack 18
 27048                           
 27049                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 27050                           
 27051                           ;incstack = 0
 27052  016BEC  0E90               	movlw	low _PortE
 27053  016BEE  0100               	movlb	0	; () banked
 27054  016BF0  6FB9               	movwf	Port_GetPin@pInput& (0+255),b
 27055  016BF2  0E00               	movlw	high _PortE
 27056  016BF4  0100               	movlb	0	; () banked
 27057  016BF6  6FBA               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27058  016BF8  0E07               	movlw	7
 27059  016BFA  0100               	movlb	0	; () banked
 27060  016BFC  6FBB               	movwf	Port_GetPin@pPin& (0+255),b
 27061  016BFE  EC0C  F0B2         	call	_Port_GetPin	;wreg free
 27062  016C02  0012               	return	
 27063  016C04                     __end_of_HMI_UpSwitch:
 27064                           	opt stack 0
 27065                           tosu	equ	0xFFF
 27066                           tosh	equ	0xFFE
 27067                           tosl	equ	0xFFD
 27068                           pclath	equ	0xFFA
 27069                           tblptru	equ	0xFF8
 27070                           tblptrh	equ	0xFF7
 27071                           tblptrl	equ	0xFF6
 27072                           tablat	equ	0xFF5
 27073                           prodh	equ	0xFF4
 27074                           prodl	equ	0xFF3
 27075                           intcon	equ	0xFF2
 27076                           postinc0	equ	0xFEE
 27077                           wreg	equ	0xFE8
 27078                           indf1	equ	0xFE7
 27079                           postdec1	equ	0xFE5
 27080                           fsr1h	equ	0xFE2
 27081                           fsr1l	equ	0xFE1
 27082                           indf2	equ	0xFDF
 27083                           postinc2	equ	0xFDE
 27084                           postdec2	equ	0xFDD
 27085                           plusw2	equ	0xFDB
 27086                           fsr2h	equ	0xFDA
 27087                           fsr2l	equ	0xFD9
 27088                           status	equ	0xFD8
 27089                           
 27090 ;; *************** function _HMI_RightSwitch *****************
 27091 ;; Defined at:
 27092 ;;		line 32 in file "HMI.c"
 27093 ;; Parameters:    Size  Location     Type
 27094 ;;		None
 27095 ;; Auto vars:     Size  Location     Type
 27096 ;;		None
 27097 ;; Return value:  Size  Location     Type
 27098 ;;                  1    wreg      unsigned char 
 27099 ;; Registers used:
 27100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27101 ;; Tracked objects:
 27102 ;;		On entry : 0/0
 27103 ;;		On exit  : 0/0
 27104 ;;		Unchanged: 0/0
 27105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27110 ;;Total ram usage:        0 bytes
 27111 ;; Hardware stack levels used:    1
 27112 ;; Hardware stack levels required when called:    8
 27113 ;; This function calls:
 27114 ;;		_Port_GetPin
 27115 ;; This function is called by:
 27116 ;;		_HMI_Init
 27117 ;;		_Button_Poll
 27118 ;;		_getMode
 27119 ;; This function uses a non-reentrant model
 27120 ;;
 27121                           
 27122                           	psect	text134
 27123  016C04                     __ptext134:
 27124                           	opt stack 0
 27125  016C04                     _HMI_RightSwitch:
 27126                           	opt stack 18
 27127                           
 27128                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 27129                           
 27130                           ;incstack = 0
 27131  016C04  0E90               	movlw	low _PortE
 27132  016C06  0100               	movlb	0	; () banked
 27133  016C08  6FB9               	movwf	Port_GetPin@pInput& (0+255),b
 27134  016C0A  0E00               	movlw	high _PortE
 27135  016C0C  0100               	movlb	0	; () banked
 27136  016C0E  6FBA               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27137  016C10  0E04               	movlw	4
 27138  016C12  0100               	movlb	0	; () banked
 27139  016C14  6FBB               	movwf	Port_GetPin@pPin& (0+255),b
 27140  016C16  EC0C  F0B2         	call	_Port_GetPin	;wreg free
 27141  016C1A  0012               	return	
 27142  016C1C                     __end_of_HMI_RightSwitch:
 27143                           	opt stack 0
 27144                           tosu	equ	0xFFF
 27145                           tosh	equ	0xFFE
 27146                           tosl	equ	0xFFD
 27147                           pclath	equ	0xFFA
 27148                           tblptru	equ	0xFF8
 27149                           tblptrh	equ	0xFF7
 27150                           tblptrl	equ	0xFF6
 27151                           tablat	equ	0xFF5
 27152                           prodh	equ	0xFF4
 27153                           prodl	equ	0xFF3
 27154                           intcon	equ	0xFF2
 27155                           postinc0	equ	0xFEE
 27156                           wreg	equ	0xFE8
 27157                           indf1	equ	0xFE7
 27158                           postdec1	equ	0xFE5
 27159                           fsr1h	equ	0xFE2
 27160                           fsr1l	equ	0xFE1
 27161                           indf2	equ	0xFDF
 27162                           postinc2	equ	0xFDE
 27163                           postdec2	equ	0xFDD
 27164                           plusw2	equ	0xFDB
 27165                           fsr2h	equ	0xFDA
 27166                           fsr2l	equ	0xFD9
 27167                           status	equ	0xFD8
 27168                           
 27169 ;; *************** function _HMI_LeftSwitch *****************
 27170 ;; Defined at:
 27171 ;;		line 27 in file "HMI.c"
 27172 ;; Parameters:    Size  Location     Type
 27173 ;;		None
 27174 ;; Auto vars:     Size  Location     Type
 27175 ;;		None
 27176 ;; Return value:  Size  Location     Type
 27177 ;;                  1    wreg      unsigned char 
 27178 ;; Registers used:
 27179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27180 ;; Tracked objects:
 27181 ;;		On entry : 0/0
 27182 ;;		On exit  : 0/0
 27183 ;;		Unchanged: 0/0
 27184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27189 ;;Total ram usage:        0 bytes
 27190 ;; Hardware stack levels used:    1
 27191 ;; Hardware stack levels required when called:    8
 27192 ;; This function calls:
 27193 ;;		_Port_GetPin
 27194 ;; This function is called by:
 27195 ;;		_HMI_Init
 27196 ;;		_Button_Poll
 27197 ;;		_getMode
 27198 ;; This function uses a non-reentrant model
 27199 ;;
 27200                           
 27201                           	psect	text135
 27202  016C1C                     __ptext135:
 27203                           	opt stack 0
 27204  016C1C                     _HMI_LeftSwitch:
 27205                           	opt stack 18
 27206                           
 27207                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 27208                           
 27209                           ;incstack = 0
 27210  016C1C  0E90               	movlw	low _PortE
 27211  016C1E  0100               	movlb	0	; () banked
 27212  016C20  6FB9               	movwf	Port_GetPin@pInput& (0+255),b
 27213  016C22  0E00               	movlw	high _PortE
 27214  016C24  0100               	movlb	0	; () banked
 27215  016C26  6FBA               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27216  016C28  0E05               	movlw	5
 27217  016C2A  0100               	movlb	0	; () banked
 27218  016C2C  6FBB               	movwf	Port_GetPin@pPin& (0+255),b
 27219  016C2E  EC0C  F0B2         	call	_Port_GetPin	;wreg free
 27220  016C32  0012               	return	
 27221  016C34                     __end_of_HMI_LeftSwitch:
 27222                           	opt stack 0
 27223                           tosu	equ	0xFFF
 27224                           tosh	equ	0xFFE
 27225                           tosl	equ	0xFFD
 27226                           pclath	equ	0xFFA
 27227                           tblptru	equ	0xFF8
 27228                           tblptrh	equ	0xFF7
 27229                           tblptrl	equ	0xFF6
 27230                           tablat	equ	0xFF5
 27231                           prodh	equ	0xFF4
 27232                           prodl	equ	0xFF3
 27233                           intcon	equ	0xFF2
 27234                           postinc0	equ	0xFEE
 27235                           wreg	equ	0xFE8
 27236                           indf1	equ	0xFE7
 27237                           postdec1	equ	0xFE5
 27238                           fsr1h	equ	0xFE2
 27239                           fsr1l	equ	0xFE1
 27240                           indf2	equ	0xFDF
 27241                           postinc2	equ	0xFDE
 27242                           postdec2	equ	0xFDD
 27243                           plusw2	equ	0xFDB
 27244                           fsr2h	equ	0xFDA
 27245                           fsr2l	equ	0xFD9
 27246                           status	equ	0xFD8
 27247                           
 27248 ;; *************** function _MXK_TestButton *****************
 27249 ;; Defined at:
 27250 ;;		line 14 in file "Library/MXK.c"
 27251 ;; Parameters:    Size  Location     Type
 27252 ;;		None
 27253 ;; Auto vars:     Size  Location     Type
 27254 ;;		None
 27255 ;; Return value:  Size  Location     Type
 27256 ;;                  1    wreg      unsigned char 
 27257 ;; Registers used:
 27258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27259 ;; Tracked objects:
 27260 ;;		On entry : 0/0
 27261 ;;		On exit  : 0/0
 27262 ;;		Unchanged: 0/0
 27263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27268 ;;Total ram usage:        0 bytes
 27269 ;; Hardware stack levels used:    1
 27270 ;; Hardware stack levels required when called:    8
 27271 ;; This function calls:
 27272 ;;		_Port_GetPin
 27273 ;; This function is called by:
 27274 ;;		_FunctInitButton
 27275 ;;		_Button_Poll
 27276 ;;		_getMode
 27277 ;; This function uses a non-reentrant model
 27278 ;;
 27279                           
 27280                           	psect	text136
 27281  016C34                     __ptext136:
 27282                           	opt stack 0
 27283  016C34                     _MXK_TestButton:
 27284                           	opt stack 18
 27285                           
 27286                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 27287                           
 27288                           ;incstack = 0
 27289  016C34  0EB0               	movlw	low _PortB
 27290  016C36  0100               	movlb	0	; () banked
 27291  016C38  6FB9               	movwf	Port_GetPin@pInput& (0+255),b
 27292  016C3A  0E03               	movlw	high _PortB
 27293  016C3C  0100               	movlb	0	; () banked
 27294  016C3E  6FBA               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27295  016C40  0E04               	movlw	4
 27296  016C42  0100               	movlb	0	; () banked
 27297  016C44  6FBB               	movwf	Port_GetPin@pPin& (0+255),b
 27298  016C46  EC0C  F0B2         	call	_Port_GetPin	;wreg free
 27299  016C4A  0012               	return	
 27300  016C4C                     __end_of_MXK_TestButton:
 27301                           	opt stack 0
 27302                           tosu	equ	0xFFF
 27303                           tosh	equ	0xFFE
 27304                           tosl	equ	0xFFD
 27305                           pclath	equ	0xFFA
 27306                           tblptru	equ	0xFF8
 27307                           tblptrh	equ	0xFF7
 27308                           tblptrl	equ	0xFF6
 27309                           tablat	equ	0xFF5
 27310                           prodh	equ	0xFF4
 27311                           prodl	equ	0xFF3
 27312                           intcon	equ	0xFF2
 27313                           postinc0	equ	0xFEE
 27314                           wreg	equ	0xFE8
 27315                           indf1	equ	0xFE7
 27316                           postdec1	equ	0xFE5
 27317                           fsr1h	equ	0xFE2
 27318                           fsr1l	equ	0xFE1
 27319                           indf2	equ	0xFDF
 27320                           postinc2	equ	0xFDE
 27321                           postdec2	equ	0xFDD
 27322                           plusw2	equ	0xFDB
 27323                           fsr2h	equ	0xFDA
 27324                           fsr2l	equ	0xFD9
 27325                           status	equ	0xFD8
 27326                           
 27327 ;; *************** function _Port_GetQuad *****************
 27328 ;; Defined at:
 27329 ;;		line 498 in file "Library/Port.c"
 27330 ;; Parameters:    Size  Location     Type
 27331 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 27332 ;;		 -> PortE(10), PortD(10), 
 27333 ;;  pQuad           1    2[BANK0 ] enum E6776
 27334 ;; Auto vars:     Size  Location     Type
 27335 ;;  Output          1    5[BANK0 ] unsigned char 
 27336 ;; Return value:  Size  Location     Type
 27337 ;;                  1    wreg      unsigned char 
 27338 ;; Registers used:
 27339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27340 ;; Tracked objects:
 27341 ;;		On entry : 0/0
 27342 ;;		On exit  : 0/0
 27343 ;;		Unchanged: 0/0
 27344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27345 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27348 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27349 ;;Total ram usage:        6 bytes
 27350 ;; Hardware stack levels used:    1
 27351 ;; Hardware stack levels required when called:    7
 27352 ;; This function calls:
 27353 ;;		Nothing
 27354 ;; This function is called by:
 27355 ;;		_HMI_DIPSwitch
 27356 ;;		_MXK_DIPSwitch
 27357 ;;		_Port_ToggleQuad
 27358 ;; This function uses a non-reentrant model
 27359 ;;
 27360                           
 27361                           	psect	text137
 27362  01626A                     __ptext137:
 27363                           	opt stack 0
 27364  01626A                     _Port_GetQuad:
 27365                           	opt stack 18
 27366                           
 27367                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 27368                           
 27369                           ;incstack = 0
 27370  01626A  0100               	movlb	0	; () banked
 27371  01626C  EE20 F006          	lfsr	2,6
 27372  016270  51B9               	movf	Port_GetQuad@pInput& (0+255),w,b
 27373  016272  26D9               	addwf	fsr2l,f,c
 27374  016274  51BA               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 27375  016276  22DA               	addwfc	fsr2h,f,c
 27376  016278  CFDE F0BC          	movff	postinc2,??_Port_GetQuad
 27377  01627C  CFDD F0BD          	movff	postdec2,??_Port_GetQuad+1
 27378  016280  C0BC  FFD9         	movff	??_Port_GetQuad,fsr2l
 27379  016284  C0BD  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 27380  016288  50DF               	movf	indf2,w,c
 27381  01628A  0100               	movlb	0	; () banked
 27382  01628C  6FBE               	movwf	Port_GetQuad@Output& (0+255),b
 27383                           
 27384                           ; BSR set to: 0
 27385                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 27386  01628E  0100               	movlb	0	; () banked
 27387  016290  51BB               	movf	Port_GetQuad@pQuad& (0+255),w,b
 27388  016292  0D04               	mullw	4
 27389  016294  28F3               	incf	prodl,w,c
 27390  016296  0100               	movlb	0	; () banked
 27391  016298  6FBC               	movwf	??_Port_GetQuad& (0+255),b
 27392  01629A  D003               	goto	u9650
 27393  01629C                     u9655:
 27394  01629C  0100               	movlb	0	; () banked
 27395  01629E  90D8               	bcf	status,0,c
 27396  0162A0  33BE               	rrcf	Port_GetQuad@Output& (0+255),f,b
 27397  0162A2                     u9650:
 27398  0162A2  0100               	movlb	0	; () banked
 27399  0162A4  2FBC               	decfsz	??_Port_GetQuad& (0+255),f,b
 27400  0162A6  D7FA               	goto	u9655
 27401                           
 27402                           ;Port.c: 502: Output &= 0xF;
 27403  0162A8  0E0F               	movlw	15
 27404  0162AA  0100               	movlb	0	; () banked
 27405  0162AC  17BE               	andwf	Port_GetQuad@Output& (0+255),f,b
 27406                           
 27407                           ; BSR set to: 0
 27408                           ;Port.c: 503: return Output;
 27409  0162AE  0100               	movlb	0	; () banked
 27410  0162B0  51BE               	movf	Port_GetQuad@Output& (0+255),w,b
 27411  0162B2  0012               	return	
 27412  0162B4                     __end_of_Port_GetQuad:
 27413                           	opt stack 0
 27414                           tosu	equ	0xFFF
 27415                           tosh	equ	0xFFE
 27416                           tosl	equ	0xFFD
 27417                           pclath	equ	0xFFA
 27418                           tblptru	equ	0xFF8
 27419                           tblptrh	equ	0xFF7
 27420                           tblptrl	equ	0xFF6
 27421                           tablat	equ	0xFF5
 27422                           prodh	equ	0xFF4
 27423                           prodl	equ	0xFF3
 27424                           intcon	equ	0xFF2
 27425                           postinc0	equ	0xFEE
 27426                           wreg	equ	0xFE8
 27427                           indf1	equ	0xFE7
 27428                           postdec1	equ	0xFE5
 27429                           fsr1h	equ	0xFE2
 27430                           fsr1l	equ	0xFE1
 27431                           indf2	equ	0xFDF
 27432                           postinc2	equ	0xFDE
 27433                           postdec2	equ	0xFDD
 27434                           plusw2	equ	0xFDB
 27435                           fsr2h	equ	0xFDA
 27436                           fsr2l	equ	0xFD9
 27437                           status	equ	0xFD8
 27438                           
 27439 ;; *************** function _Event_DIPSwitch *****************
 27440 ;; Defined at:
 27441 ;;		line 22 in file "Events.c"
 27442 ;; Parameters:    Size  Location     Type
 27443 ;;  pState          1    wreg     unsigned char 
 27444 ;; Auto vars:     Size  Location     Type
 27445 ;;  pState          1   25[BANK0 ] unsigned char 
 27446 ;;  Bar             1   26[BANK0 ] unsigned char 
 27447 ;; Return value:  Size  Location     Type
 27448 ;;                  1    wreg      void 
 27449 ;; Registers used:
 27450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27451 ;; Tracked objects:
 27452 ;;		On entry : 0/0
 27453 ;;		On exit  : 0/0
 27454 ;;		Unchanged: 0/0
 27455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27460 ;;Total ram usage:        2 bytes
 27461 ;; Hardware stack levels used:    1
 27462 ;; Hardware stack levels required when called:   13
 27463 ;; This function calls:
 27464 ;;		_HMI_GetBar
 27465 ;;		_HMI_SetBar
 27466 ;;		_LED_Toggle
 27467 ;; This function is called by:
 27468 ;;		_FunctInitButton
 27469 ;;		_Button_Poll
 27470 ;; This function uses a non-reentrant model
 27471 ;;
 27472                           
 27473                           	psect	text138
 27474  0168AA                     __ptext138:
 27475                           	opt stack 0
 27476  0168AA                     _Event_DIPSwitch:
 27477                           	opt stack 13
 27478                           
 27479                           ; BSR set to: 0
 27480                           ;incstack = 0
 27481                           ;Event_DIPSwitch@pState stored from wreg
 27482  0168AA  0100               	movlb	0	; () banked
 27483  0168AC  6FD2               	movwf	Event_DIPSwitch@pState& (0+255),b
 27484                           
 27485                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 27486  0168AE  ECC0  F0B6         	call	_HMI_GetBar	;wreg free
 27487  0168B2  0100               	movlb	0	; () banked
 27488  0168B4  6FD3               	movwf	Event_DIPSwitch@Bar& (0+255),b
 27489                           
 27490                           ; BSR set to: 0
 27491                           ;Events.c: 25: Bar &= 0x0F;
 27492  0168B6  0E0F               	movlw	15
 27493  0168B8  0100               	movlb	0	; () banked
 27494  0168BA  17D3               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 27495                           
 27496                           ; BSR set to: 0
 27497                           ;Events.c: 26: pState <<= 4;
 27498  0168BC  0100               	movlb	0	; () banked
 27499  0168BE  3BD2               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 27500  0168C0  0EF0               	movlw	240
 27501  0168C2  17D2               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 27502                           
 27503                           ; BSR set to: 0
 27504                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 27505  0168C4  0100               	movlb	0	; () banked
 27506  0168C6  51D2               	movf	Event_DIPSwitch@pState& (0+255),w,b
 27507  0168C8  0100               	movlb	0	; () banked
 27508  0168CA  11D3               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 27509  0168CC  ECA2  F0B6         	call	_HMI_SetBar
 27510                           
 27511                           ;Events.c: 32: LED_Toggle(eLED1);
 27512  0168D0  0E00               	movlw	0
 27513  0168D2  ECA2  F0B1         	call	_LED_Toggle
 27514  0168D6  0012               	return		;funcret
 27515  0168D8                     __end_of_Event_DIPSwitch:
 27516                           	opt stack 0
 27517                           tosu	equ	0xFFF
 27518                           tosh	equ	0xFFE
 27519                           tosl	equ	0xFFD
 27520                           pclath	equ	0xFFA
 27521                           tblptru	equ	0xFF8
 27522                           tblptrh	equ	0xFF7
 27523                           tblptrl	equ	0xFF6
 27524                           tablat	equ	0xFF5
 27525                           prodh	equ	0xFF4
 27526                           prodl	equ	0xFF3
 27527                           intcon	equ	0xFF2
 27528                           postinc0	equ	0xFEE
 27529                           wreg	equ	0xFE8
 27530                           indf1	equ	0xFE7
 27531                           postdec1	equ	0xFE5
 27532                           fsr1h	equ	0xFE2
 27533                           fsr1l	equ	0xFE1
 27534                           indf2	equ	0xFDF
 27535                           postinc2	equ	0xFDE
 27536                           postdec2	equ	0xFDD
 27537                           plusw2	equ	0xFDB
 27538                           fsr2h	equ	0xFDA
 27539                           fsr2l	equ	0xFD9
 27540                           status	equ	0xFD8
 27541                           
 27542 ;; *************** function _Event_NULL *****************
 27543 ;; Defined at:
 27544 ;;		line 9 in file "Events.c"
 27545 ;; Parameters:    Size  Location     Type
 27546 ;;  pState          1    wreg     unsigned char 
 27547 ;; Auto vars:     Size  Location     Type
 27548 ;;  pState          1    0[COMRAM] unsigned char 
 27549 ;; Return value:  Size  Location     Type
 27550 ;;                  1    wreg      void 
 27551 ;; Registers used:
 27552 ;;		wreg
 27553 ;; Tracked objects:
 27554 ;;		On entry : 0/0
 27555 ;;		On exit  : 0/0
 27556 ;;		Unchanged: 0/0
 27557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27562 ;;Total ram usage:        0 bytes
 27563 ;; Hardware stack levels used:    1
 27564 ;; Hardware stack levels required when called:    7
 27565 ;; This function calls:
 27566 ;;		Nothing
 27567 ;; This function is called by:
 27568 ;;		_HMI_Init
 27569 ;;		_Button_Poll
 27570 ;; This function uses a non-reentrant model
 27571 ;;
 27572                           
 27573                           	psect	text139
 27574  001404                     __ptext139:
 27575                           	opt stack 0
 27576  001404                     _Event_NULL:
 27577                           	opt stack 19
 27578                           
 27579                           ;incstack = 0
 27580  001404  0012               	return		;funcret
 27581  001406                     __end_of_Event_NULL:
 27582                           	opt stack 0
 27583                           tosu	equ	0xFFF
 27584                           tosh	equ	0xFFE
 27585                           tosl	equ	0xFFD
 27586                           pclath	equ	0xFFA
 27587                           tblptru	equ	0xFF8
 27588                           tblptrh	equ	0xFF7
 27589                           tblptrl	equ	0xFF6
 27590                           tablat	equ	0xFF5
 27591                           prodh	equ	0xFF4
 27592                           prodl	equ	0xFF3
 27593                           intcon	equ	0xFF2
 27594                           postinc0	equ	0xFEE
 27595                           wreg	equ	0xFE8
 27596                           indf1	equ	0xFE7
 27597                           postdec1	equ	0xFE5
 27598                           fsr1h	equ	0xFE2
 27599                           fsr1l	equ	0xFE1
 27600                           indf2	equ	0xFDF
 27601                           postinc2	equ	0xFDE
 27602                           postdec2	equ	0xFDD
 27603                           plusw2	equ	0xFDB
 27604                           fsr2h	equ	0xFDA
 27605                           fsr2l	equ	0xFD9
 27606                           status	equ	0xFD8
 27607                           
 27608 ;; *************** function _Event_TestButton *****************
 27609 ;; Defined at:
 27610 ;;		line 52 in file "Events.c"
 27611 ;; Parameters:    Size  Location     Type
 27612 ;;  pState          1    wreg     unsigned char 
 27613 ;; Auto vars:     Size  Location     Type
 27614 ;;  pState          1   25[BANK0 ] unsigned char 
 27615 ;; Return value:  Size  Location     Type
 27616 ;;                  1    wreg      void 
 27617 ;; Registers used:
 27618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27619 ;; Tracked objects:
 27620 ;;		On entry : 0/0
 27621 ;;		On exit  : 0/0
 27622 ;;		Unchanged: 0/0
 27623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27627 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27628 ;;Total ram usage:        1 bytes
 27629 ;; Hardware stack levels used:    1
 27630 ;; Hardware stack levels required when called:   13
 27631 ;; This function calls:
 27632 ;;		_HMI_SetButton
 27633 ;;		_HMI_SetNumber
 27634 ;;		_LED_Toggle
 27635 ;; This function is called by:
 27636 ;;		_FunctInitButton
 27637 ;;		_Button_Poll
 27638 ;; This function uses a non-reentrant model
 27639 ;;
 27640                           
 27641                           	psect	text140
 27642  016698                     __ptext140:
 27643                           	opt stack 0
 27644  016698                     _Event_TestButton:
 27645                           	opt stack 13
 27646                           
 27647                           ;incstack = 0
 27648                           ;Event_TestButton@pState stored from wreg
 27649  016698  0100               	movlb	0	; () banked
 27650  01669A  6FD2               	movwf	Event_TestButton@pState& (0+255),b
 27651                           
 27652                           ;Events.c: 56: static UINT8 j = 0;
 27653                           ;Events.c: 60: if (pState == 0)
 27654  01669C  0100               	movlb	0	; () banked
 27655  01669E  51D2               	movf	Event_TestButton@pState& (0+255),w,b
 27656  0166A0  0100               	movlb	0	; () banked
 27657  0166A2  A4D8               	btfss	status,2,c
 27658  0166A4  D013               	goto	l1873
 27659                           
 27660                           ; BSR set to: 0
 27661                           ;Events.c: 61: {
 27662                           ;Events.c: 62: j++;
 27663  0166A6  0100               	movlb	0	; () banked
 27664  0166A8  2B88               	incf	Event_TestButton@j& (0+255),f,b
 27665                           
 27666                           ; BSR set to: 0
 27667                           ;Events.c: 63: val += j;
 27668  0166AA  0100               	movlb	0	; () banked
 27669  0166AC  5188               	movf	Event_TestButton@j& (0+255),w,b
 27670  0166AE  0100               	movlb	0	; () banked
 27671  0166B0  277B               	addwf	_val& (0+255),f,b
 27672  0166B2  0E00               	movlw	0
 27673  0166B4  237C               	addwfc	(_val+1)& (0+255),f,b
 27674                           
 27675                           ; BSR set to: 0
 27676                           ;Events.c: 64: HMI_SetNumber( val );
 27677  0166B6  C07B  F0CF         	movff	_val,HMI_SetNumber@pInput
 27678  0166BA  C07C  F0D0         	movff	_val+1,HMI_SetNumber@pInput+1
 27679  0166BE  EC98  F0B4         	call	_HMI_SetNumber	;wreg free
 27680                           
 27681                           ;Events.c: 67: HMI_SetButton( j & 3 );
 27682  0166C2  0100               	movlb	0	; () banked
 27683  0166C4  5188               	movf	Event_TestButton@j& (0+255),w,b
 27684  0166C6  0B03               	andlw	3
 27685  0166C8  ECC5  F0A9         	call	_HMI_SetButton
 27686  0166CC                     l1873:
 27687                           
 27688                           ;Events.c: 68: }
 27689                           ;Events.c: 72: LED_Toggle(eLED1);
 27690  0166CC  0E00               	movlw	0
 27691  0166CE  ECA2  F0B1         	call	_LED_Toggle
 27692  0166D2  0012               	return		;funcret
 27693  0166D4                     __end_of_Event_TestButton:
 27694                           	opt stack 0
 27695                           tosu	equ	0xFFF
 27696                           tosh	equ	0xFFE
 27697                           tosl	equ	0xFFD
 27698                           pclath	equ	0xFFA
 27699                           tblptru	equ	0xFF8
 27700                           tblptrh	equ	0xFF7
 27701                           tblptrl	equ	0xFF6
 27702                           tablat	equ	0xFF5
 27703                           prodh	equ	0xFF4
 27704                           prodl	equ	0xFF3
 27705                           intcon	equ	0xFF2
 27706                           postinc0	equ	0xFEE
 27707                           wreg	equ	0xFE8
 27708                           indf1	equ	0xFE7
 27709                           postdec1	equ	0xFE5
 27710                           fsr1h	equ	0xFE2
 27711                           fsr1l	equ	0xFE1
 27712                           indf2	equ	0xFDF
 27713                           postinc2	equ	0xFDE
 27714                           postdec2	equ	0xFDD
 27715                           plusw2	equ	0xFDB
 27716                           fsr2h	equ	0xFDA
 27717                           fsr2l	equ	0xFD9
 27718                           status	equ	0xFD8
 27719                           
 27720 ;; *************** function _HMI_SetNumber *****************
 27721 ;; Defined at:
 27722 ;;		line 221 in file "HMI.c"
 27723 ;; Parameters:    Size  Location     Type
 27724 ;;  pInput          2   22[BANK0 ] int 
 27725 ;; Auto vars:     Size  Location     Type
 27726 ;;		None
 27727 ;; Return value:  Size  Location     Type
 27728 ;;                  1    wreg      void 
 27729 ;; Registers used:
 27730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27731 ;; Tracked objects:
 27732 ;;		On entry : 0/0
 27733 ;;		On exit  : 0/0
 27734 ;;		Unchanged: 0/0
 27735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27740 ;;Total ram usage:        2 bytes
 27741 ;; Hardware stack levels used:    1
 27742 ;; Hardware stack levels required when called:    9
 27743 ;; This function calls:
 27744 ;;		_HMI_SetSegments
 27745 ;;		_itos
 27746 ;; This function is called by:
 27747 ;;		_Event_TestButton
 27748 ;;		_findClosestWall
 27749 ;;		_measureAndDisplayDistance
 27750 ;;		_mode1
 27751 ;;		_Event_HMI_UpButton
 27752 ;;		_Event_HMI_DownButton
 27753 ;; This function uses a non-reentrant model
 27754 ;;
 27755                           
 27756                           	psect	text141
 27757  016930                     __ptext141:
 27758                           	opt stack 0
 27759  016930                     _HMI_SetNumber:
 27760                           	opt stack 16
 27761                           
 27762                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 27763                           
 27764                           ;incstack = 0
 27765  016930  C0CF  F0C5         	movff	HMI_SetNumber@pInput,itos@input
 27766  016934  C0D0  F0C6         	movff	HMI_SetNumber@pInput+1,itos@input+1
 27767  016938  0E42               	movlw	low _HMIBoard
 27768  01693A  0100               	movlb	0	; () banked
 27769  01693C  6FC7               	movwf	itos@destination& (0+255),b
 27770  01693E  0E03               	movlw	high _HMIBoard
 27771  016940  0100               	movlb	0	; () banked
 27772  016942  6FC8               	movwf	(itos@destination+1)& (0+255),b
 27773  016944  ECEA  F0A0         	call	_itos	;wreg free
 27774                           
 27775                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 27776  016948  0E42               	movlw	low _HMIBoard
 27777  01694A  0100               	movlb	0	; () banked
 27778  01694C  6FBA               	movwf	HMI_SetSegments@pString& (0+255),b
 27779  01694E  0E03               	movlw	high _HMIBoard
 27780  016950  0100               	movlb	0	; () banked
 27781  016952  6FBB               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 27782  016954  ECDC  F0A4         	call	_HMI_SetSegments	;wreg free
 27783  016958  0012               	return		;funcret
 27784  01695A                     __end_of_HMI_SetNumber:
 27785                           	opt stack 0
 27786                           tosu	equ	0xFFF
 27787                           tosh	equ	0xFFE
 27788                           tosl	equ	0xFFD
 27789                           pclath	equ	0xFFA
 27790                           tblptru	equ	0xFF8
 27791                           tblptrh	equ	0xFF7
 27792                           tblptrl	equ	0xFF6
 27793                           tablat	equ	0xFF5
 27794                           prodh	equ	0xFF4
 27795                           prodl	equ	0xFF3
 27796                           intcon	equ	0xFF2
 27797                           postinc0	equ	0xFEE
 27798                           wreg	equ	0xFE8
 27799                           indf1	equ	0xFE7
 27800                           postdec1	equ	0xFE5
 27801                           fsr1h	equ	0xFE2
 27802                           fsr1l	equ	0xFE1
 27803                           indf2	equ	0xFDF
 27804                           postinc2	equ	0xFDE
 27805                           postdec2	equ	0xFDD
 27806                           plusw2	equ	0xFDB
 27807                           fsr2h	equ	0xFDA
 27808                           fsr2l	equ	0xFD9
 27809                           status	equ	0xFD8
 27810                           
 27811 ;; *************** function _itos *****************
 27812 ;; Defined at:
 27813 ;;		line 369 in file "Library/Types.c"
 27814 ;; Parameters:    Size  Location     Type
 27815 ;;  input           2   12[BANK0 ] unsigned short 
 27816 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 27817 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27818 ;; Auto vars:     Size  Location     Type
 27819 ;;  Out             2   20[BANK0 ] unsigned short 
 27820 ;;  Length          2   18[BANK0 ] unsigned short 
 27821 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 27822 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27823 ;; Return value:  Size  Location     Type
 27824 ;;                  1    wreg      void 
 27825 ;; Registers used:
 27826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27827 ;; Tracked objects:
 27828 ;;		On entry : 0/0
 27829 ;;		On exit  : 0/0
 27830 ;;		Unchanged: 0/0
 27831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27833 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27835 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27836 ;;Total ram usage:       10 bytes
 27837 ;; Hardware stack levels used:    1
 27838 ;; Hardware stack levels required when called:    8
 27839 ;; This function calls:
 27840 ;;		___lwdiv
 27841 ;;		___lwmod
 27842 ;;		_reverse
 27843 ;; This function is called by:
 27844 ;;		_HMI_SetNumber
 27845 ;; This function uses a non-reentrant model
 27846 ;;
 27847                           
 27848                           	psect	text142
 27849  0141D4                     __ptext142:
 27850                           	opt stack 0
 27851  0141D4                     _itos:
 27852                           	opt stack 16
 27853                           
 27854                           ;Types.c: 371: UINT16 Out = input;
 27855                           
 27856                           ;incstack = 0
 27857  0141D4  C0C5  F0CD         	movff	itos@input,itos@Out
 27858  0141D8  C0C6  F0CE         	movff	itos@input+1,itos@Out+1
 27859                           
 27860                           ;Types.c: 372: UINT16 Length = 0;
 27861  0141DC  0E00               	movlw	0
 27862  0141DE  0100               	movlb	0	; () banked
 27863  0141E0  6FCC               	movwf	(itos@Length+1)& (0+255),b
 27864  0141E2  0E00               	movlw	0
 27865  0141E4  6FCB               	movwf	itos@Length& (0+255),b
 27866                           
 27867                           ; BSR set to: 0
 27868                           ;Types.c: 373: char *Data = destination;
 27869  0141E6  C0C7  F0C9         	movff	itos@destination,itos@Data
 27870  0141EA  C0C8  F0CA         	movff	itos@destination+1,itos@Data+1
 27871                           
 27872                           ; BSR set to: 0
 27873                           ;Types.c: 374: if(Out == 0)
 27874  0141EE  0100               	movlb	0	; () banked
 27875  0141F0  51CD               	movf	itos@Out& (0+255),w,b
 27876  0141F2  0100               	movlb	0	; () banked
 27877  0141F4  11CE               	iorwf	(itos@Out+1)& (0+255),w,b
 27878  0141F6  A4D8               	btfss	status,2,c
 27879  0141F8  D034               	goto	l929
 27880                           
 27881                           ; BSR set to: 0
 27882                           ;Types.c: 375: {
 27883                           ;Types.c: 376: Data[0] = (UINT16)'0';
 27884  0141FA  C0C9  FFD9         	movff	itos@Data,fsr2l
 27885  0141FE  C0CA  FFDA         	movff	itos@Data+1,fsr2h
 27886  014202  0E30               	movlw	48
 27887  014204  6EDF               	movwf	indf2,c
 27888                           
 27889                           ; BSR set to: 0
 27890                           ;Types.c: 377: Length = 1;
 27891  014206  0E00               	movlw	0
 27892  014208  0100               	movlb	0	; () banked
 27893  01420A  6FCC               	movwf	(itos@Length+1)& (0+255),b
 27894  01420C  0E01               	movlw	1
 27895  01420E  6FCB               	movwf	itos@Length& (0+255),b
 27896                           
 27897                           ;Types.c: 378: }
 27898  014210  D040               	goto	l928
 27899  014212                     
 27900                           ; BSR set to: 0
 27901                           ;Types.c: 382: {
 27902                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 27903                           
 27904                           ; BSR set to: 0
 27905  014212  C0CD  F0C0         	movff	itos@Out,___lwmod@dividend
 27906  014216  C0CE  F0C1         	movff	itos@Out+1,___lwmod@dividend+1
 27907  01421A  0E00               	movlw	0
 27908  01421C  0100               	movlb	0	; () banked
 27909  01421E  6FC3               	movwf	(___lwmod@divisor+1)& (0+255),b
 27910  014220  0E0A               	movlw	10
 27911  014222  6FC2               	movwf	___lwmod@divisor& (0+255),b
 27912  014224  EC8D  F0AF         	call	___lwmod	;wreg free
 27913  014228  0100               	movlb	0	; () banked
 27914  01422A  51C0               	movf	?___lwmod& (0+255),w,b
 27915  01422C  0F30               	addlw	48
 27916  01422E  C0C9  FFD9         	movff	itos@Data,fsr2l
 27917  014232  C0CA  FFDA         	movff	itos@Data+1,fsr2h
 27918  014236  6EDF               	movwf	indf2,c
 27919                           
 27920                           ; BSR set to: 0
 27921                           ;Types.c: 384: Out /= 10;
 27922  014238  C0CD  F0B9         	movff	itos@Out,___lwdiv@dividend
 27923  01423C  C0CE  F0BA         	movff	itos@Out+1,___lwdiv@dividend+1
 27924  014240  0E00               	movlw	0
 27925  014242  0100               	movlb	0	; () banked
 27926  014244  6FBC               	movwf	(___lwdiv@divisor+1)& (0+255),b
 27927  014246  0E0A               	movlw	10
 27928  014248  6FBB               	movwf	___lwdiv@divisor& (0+255),b
 27929  01424A  EC22  F0AC         	call	___lwdiv	;wreg free
 27930  01424E  C0B9  F0CD         	movff	?___lwdiv,itos@Out
 27931  014252  C0BA  F0CE         	movff	?___lwdiv+1,itos@Out+1
 27932                           
 27933                           ;Types.c: 385: Length ++;
 27934  014256  0100               	movlb	0	; () banked
 27935  014258  4BCB               	infsnz	itos@Length& (0+255),f,b
 27936  01425A  2BCC               	incf	(itos@Length+1)& (0+255),f,b
 27937                           
 27938                           ; BSR set to: 0
 27939                           ;Types.c: 386: Data++;
 27940  01425C  0100               	movlb	0	; () banked
 27941  01425E  4BC9               	infsnz	itos@Data& (0+255),f,b
 27942  014260  2BCA               	incf	(itos@Data+1)& (0+255),f,b
 27943  014262                     l929:
 27944                           
 27945                           ; BSR set to: 0
 27946                           
 27947                           ; BSR set to: 0
 27948  014262  0100               	movlb	0	; () banked
 27949  014264  51CD               	movf	itos@Out& (0+255),w,b
 27950  014266  0100               	movlb	0	; () banked
 27951  014268  11CE               	iorwf	(itos@Out+1)& (0+255),w,b
 27952  01426A  B4D8               	btfsc	status,2,c
 27953  01426C  D008               	goto	u9450
 27954                           
 27955                           ; BSR set to: 0
 27956  01426E  0100               	movlb	0	; () banked
 27957  014270  51CC               	movf	(itos@Length+1)& (0+255),w,b
 27958  014272  E105               	bnz	l12689
 27959  014274  0E06               	movlw	6
 27960  014276  0100               	movlb	0	; () banked
 27961  014278  5DCB               	subwf	itos@Length& (0+255),w,b
 27962  01427A  A0D8               	btfss	status,0,c
 27963  01427C  D7CA               	goto	l930
 27964  01427E                     u9450:
 27965  01427E                     l12689:
 27966                           
 27967                           ; BSR set to: 0
 27968                           ;Types.c: 387: }
 27969                           ;Types.c: 388: reverse(destination, Length);
 27970  01427E  C0C7  F0B9         	movff	itos@destination,reverse@input
 27971  014282  C0C8  F0BA         	movff	itos@destination+1,reverse@input+1
 27972  014286  C0CB  F0BB         	movff	itos@Length,reverse@length
 27973  01428A  C0CC  F0BC         	movff	itos@Length+1,reverse@length+1
 27974  01428E  ECEF  F0AD         	call	_reverse	;wreg free
 27975  014292                     l928:
 27976                           
 27977                           ;Types.c: 389: }
 27978                           ;Types.c: 390: destination[Length] = '\0';
 27979  014292  0100               	movlb	0	; () banked
 27980  014294  51CB               	movf	itos@Length& (0+255),w,b
 27981  014296  0100               	movlb	0	; () banked
 27982  014298  25C7               	addwf	itos@destination& (0+255),w,b
 27983  01429A  6ED9               	movwf	fsr2l,c
 27984  01429C  0100               	movlb	0	; () banked
 27985  01429E  51CC               	movf	(itos@Length+1)& (0+255),w,b
 27986  0142A0  0100               	movlb	0	; () banked
 27987  0142A2  21C8               	addwfc	(itos@destination+1)& (0+255),w,b
 27988  0142A4  6EDA               	movwf	fsr2h,c
 27989  0142A6  0E00               	movlw	0
 27990  0142A8  6EDF               	movwf	indf2,c
 27991                           
 27992                           ; BSR set to: 0
 27993  0142AA  0012               	return		;funcret
 27994  0142AC                     __end_of_itos:
 27995                           	opt stack 0
 27996                           tosu	equ	0xFFF
 27997                           tosh	equ	0xFFE
 27998                           tosl	equ	0xFFD
 27999                           pclath	equ	0xFFA
 28000                           tblptru	equ	0xFF8
 28001                           tblptrh	equ	0xFF7
 28002                           tblptrl	equ	0xFF6
 28003                           tablat	equ	0xFF5
 28004                           prodh	equ	0xFF4
 28005                           prodl	equ	0xFF3
 28006                           intcon	equ	0xFF2
 28007                           postinc0	equ	0xFEE
 28008                           wreg	equ	0xFE8
 28009                           indf1	equ	0xFE7
 28010                           postdec1	equ	0xFE5
 28011                           fsr1h	equ	0xFE2
 28012                           fsr1l	equ	0xFE1
 28013                           indf2	equ	0xFDF
 28014                           postinc2	equ	0xFDE
 28015                           postdec2	equ	0xFDD
 28016                           plusw2	equ	0xFDB
 28017                           fsr2h	equ	0xFDA
 28018                           fsr2l	equ	0xFD9
 28019                           status	equ	0xFD8
 28020                           
 28021 ;; *************** function _reverse *****************
 28022 ;; Defined at:
 28023 ;;		line 357 in file "Library/Types.c"
 28024 ;; Parameters:    Size  Location     Type
 28025 ;;  input           2    0[BANK0 ] PTR unsigned char 
 28026 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28027 ;;  length          2    2[BANK0 ] unsigned short 
 28028 ;; Auto vars:     Size  Location     Type
 28029 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 28030 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28031 ;;  tempVar         1    4[BANK0 ] unsigned char 
 28032 ;; Return value:  Size  Location     Type
 28033 ;;                  1    wreg      void 
 28034 ;; Registers used:
 28035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28036 ;; Tracked objects:
 28037 ;;		On entry : 0/0
 28038 ;;		On exit  : 0/0
 28039 ;;		Unchanged: 0/0
 28040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28041 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28042 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28044 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28045 ;;Total ram usage:        7 bytes
 28046 ;; Hardware stack levels used:    1
 28047 ;; Hardware stack levels required when called:    7
 28048 ;; This function calls:
 28049 ;;		Nothing
 28050 ;; This function is called by:
 28051 ;;		_itos
 28052 ;; This function uses a non-reentrant model
 28053 ;;
 28054                           
 28055                           	psect	text143
 28056  015BDE                     __ptext143:
 28057                           	opt stack 0
 28058  015BDE                     _reverse:
 28059                           	opt stack 16
 28060                           
 28061                           ;Types.c: 359: char tempVar,
 28062                           ;Types.c: 360: *iterator = input + length;
 28063                           
 28064                           ; BSR set to: 0
 28065                           ;incstack = 0
 28066  015BDE  0100               	movlb	0	; () banked
 28067  015BE0  51BB               	movf	reverse@length& (0+255),w,b
 28068  015BE2  0100               	movlb	0	; () banked
 28069  015BE4  25B9               	addwf	reverse@input& (0+255),w,b
 28070  015BE6  0100               	movlb	0	; () banked
 28071  015BE8  6FBE               	movwf	reverse@iterator& (0+255),b
 28072  015BEA  0100               	movlb	0	; () banked
 28073  015BEC  51BC               	movf	(reverse@length+1)& (0+255),w,b
 28074  015BEE  0100               	movlb	0	; () banked
 28075  015BF0  21BA               	addwfc	(reverse@input+1)& (0+255),w,b
 28076  015BF2  0100               	movlb	0	; () banked
 28077  015BF4  6FBF               	movwf	(reverse@iterator+1)& (0+255),b
 28078                           
 28079                           ;Types.c: 362: while ( --iterator > input )
 28080  015BF6  D01A               	goto	l921
 28081  015BF8                     
 28082                           ; BSR set to: 0
 28083                           ;Types.c: 363: {
 28084                           ;Types.c: 364: tempVar = *input;
 28085                           
 28086                           ; BSR set to: 0
 28087  015BF8  C0B9  FFD9         	movff	reverse@input,fsr2l
 28088  015BFC  C0BA  FFDA         	movff	reverse@input+1,fsr2h
 28089  015C00  50DF               	movf	indf2,w,c
 28090  015C02  0100               	movlb	0	; () banked
 28091  015C04  6FBD               	movwf	reverse@tempVar& (0+255),b
 28092                           
 28093                           ; BSR set to: 0
 28094                           ;Types.c: 365: *input++=*iterator;
 28095  015C06  C0BE  FFD9         	movff	reverse@iterator,fsr2l
 28096  015C0A  C0BF  FFDA         	movff	reverse@iterator+1,fsr2h
 28097  015C0E  C0B9  FFE1         	movff	reverse@input,fsr1l
 28098  015C12  C0BA  FFE2         	movff	reverse@input+1,fsr1h
 28099  015C16  CFDF FFE7          	movff	indf2,indf1
 28100                           
 28101                           ; BSR set to: 0
 28102  015C1A  0100               	movlb	0	; () banked
 28103  015C1C  4BB9               	infsnz	reverse@input& (0+255),f,b
 28104  015C1E  2BBA               	incf	(reverse@input+1)& (0+255),f,b
 28105                           
 28106                           ; BSR set to: 0
 28107                           ;Types.c: 366: *iterator=tempVar;
 28108  015C20  C0BE  FFD9         	movff	reverse@iterator,fsr2l
 28109  015C24  C0BF  FFDA         	movff	reverse@iterator+1,fsr2h
 28110  015C28  C0BD  FFDF         	movff	reverse@tempVar,indf2
 28111  015C2C                     l921:
 28112                           
 28113                           ; BSR set to: 0
 28114                           
 28115                           ; BSR set to: 0
 28116  015C2C  0100               	movlb	0	; () banked
 28117  015C2E  07BE               	decf	reverse@iterator& (0+255),f,b
 28118  015C30  A0D8               	btfss	status,0,c
 28119  015C32  07BF               	decf	(reverse@iterator+1)& (0+255),f,b
 28120  015C34  0100               	movlb	0	; () banked
 28121  015C36  51BE               	movf	reverse@iterator& (0+255),w,b
 28122  015C38  0100               	movlb	0	; () banked
 28123  015C3A  5DB9               	subwf	reverse@input& (0+255),w,b
 28124  015C3C  0100               	movlb	0	; () banked
 28125  015C3E  51BF               	movf	(reverse@iterator+1)& (0+255),w,b
 28126  015C40  0100               	movlb	0	; () banked
 28127  015C42  59BA               	subwfb	(reverse@input+1)& (0+255),w,b
 28128  015C44  B0D8               	btfsc	status,0,c
 28129  015C46  0012               	return	
 28130  015C48  D7D7               	goto	l922
 28131  015C4A                     __end_of_reverse:
 28132                           	opt stack 0
 28133                           tosu	equ	0xFFF
 28134                           tosh	equ	0xFFE
 28135                           tosl	equ	0xFFD
 28136                           pclath	equ	0xFFA
 28137                           tblptru	equ	0xFF8
 28138                           tblptrh	equ	0xFF7
 28139                           tblptrl	equ	0xFF6
 28140                           tablat	equ	0xFF5
 28141                           prodh	equ	0xFF4
 28142                           prodl	equ	0xFF3
 28143                           intcon	equ	0xFF2
 28144                           postinc0	equ	0xFEE
 28145                           wreg	equ	0xFE8
 28146                           indf1	equ	0xFE7
 28147                           postdec1	equ	0xFE5
 28148                           fsr1h	equ	0xFE2
 28149                           fsr1l	equ	0xFE1
 28150                           indf2	equ	0xFDF
 28151                           postinc2	equ	0xFDE
 28152                           postdec2	equ	0xFDD
 28153                           plusw2	equ	0xFDB
 28154                           fsr2h	equ	0xFDA
 28155                           fsr2l	equ	0xFD9
 28156                           status	equ	0xFD8
 28157                           
 28158 ;; *************** function ___lwmod *****************
 28159 ;; Defined at:
 28160 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 28161 ;; Parameters:    Size  Location     Type
 28162 ;;  dividend        2    7[BANK0 ] unsigned int 
 28163 ;;  divisor         2    9[BANK0 ] unsigned int 
 28164 ;; Auto vars:     Size  Location     Type
 28165 ;;  counter         1   11[BANK0 ] unsigned char 
 28166 ;; Return value:  Size  Location     Type
 28167 ;;                  2    7[BANK0 ] unsigned int 
 28168 ;; Registers used:
 28169 ;;		wreg, status,2, status,0
 28170 ;; Tracked objects:
 28171 ;;		On entry : 0/0
 28172 ;;		On exit  : 0/0
 28173 ;;		Unchanged: 0/0
 28174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28175 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28178 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28179 ;;Total ram usage:        5 bytes
 28180 ;; Hardware stack levels used:    1
 28181 ;; Hardware stack levels required when called:    7
 28182 ;; This function calls:
 28183 ;;		Nothing
 28184 ;; This function is called by:
 28185 ;;		_itos
 28186 ;;		_printf
 28187 ;; This function uses a non-reentrant model
 28188 ;;
 28189                           
 28190                           	psect	text144
 28191  015F1A                     __ptext144:
 28192                           	opt stack 0
 28193  015F1A                     ___lwmod:
 28194                           	opt stack 22
 28195                           
 28196                           ; BSR set to: 0
 28197                           ;incstack = 0
 28198  015F1A  0100               	movlb	0	; () banked
 28199  015F1C  51C2               	movf	___lwmod@divisor& (0+255),w,b
 28200  015F1E  0100               	movlb	0	; () banked
 28201  015F20  11C3               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 28202  015F22  B4D8               	btfsc	status,2,c
 28203  015F24  D026               	goto	l2906
 28204                           
 28205                           ; BSR set to: 0
 28206  015F26  0E01               	movlw	1
 28207  015F28  0100               	movlb	0	; () banked
 28208  015F2A  6FC4               	movwf	___lwmod@counter& (0+255),b
 28209  015F2C  D006               	goto	l2901
 28210  015F2E                     
 28211                           ; BSR set to: 0
 28212                           
 28213                           ; BSR set to: 0
 28214  015F2E  0100               	movlb	0	; () banked
 28215  015F30  90D8               	bcf	status,0,c
 28216  015F32  37C2               	rlcf	___lwmod@divisor& (0+255),f,b
 28217  015F34  37C3               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 28218  015F36  0100               	movlb	0	; () banked
 28219  015F38  2BC4               	incf	___lwmod@counter& (0+255),f,b
 28220  015F3A                     l2901:
 28221                           
 28222                           ; BSR set to: 0
 28223                           
 28224                           ; BSR set to: 0
 28225  015F3A  0100               	movlb	0	; () banked
 28226  015F3C  AFC3               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 28227  015F3E  D7F7               	goto	l2902
 28228  015F40                     u9340:
 28229                           
 28230                           ; BSR set to: 0
 28231                           
 28232                           ; BSR set to: 0
 28233                           
 28234                           ; BSR set to: 0
 28235  015F40  0100               	movlb	0	; () banked
 28236  015F42  51C2               	movf	___lwmod@divisor& (0+255),w,b
 28237  015F44  0100               	movlb	0	; () banked
 28238  015F46  5DC0               	subwf	___lwmod@dividend& (0+255),w,b
 28239  015F48  0100               	movlb	0	; () banked
 28240  015F4A  51C3               	movf	(___lwmod@divisor+1)& (0+255),w,b
 28241  015F4C  0100               	movlb	0	; () banked
 28242  015F4E  59C1               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 28243  015F50  A0D8               	btfss	status,0,c
 28244  015F52  D008               	goto	l2905
 28245                           
 28246                           ; BSR set to: 0
 28247  015F54  0100               	movlb	0	; () banked
 28248  015F56  51C2               	movf	___lwmod@divisor& (0+255),w,b
 28249  015F58  0100               	movlb	0	; () banked
 28250  015F5A  5FC0               	subwf	___lwmod@dividend& (0+255),f,b
 28251  015F5C  0100               	movlb	0	; () banked
 28252  015F5E  51C3               	movf	(___lwmod@divisor+1)& (0+255),w,b
 28253  015F60  0100               	movlb	0	; () banked
 28254  015F62  5BC1               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 28255  015F64                     l2905:
 28256                           
 28257                           ; BSR set to: 0
 28258                           
 28259                           ; BSR set to: 0
 28260  015F64  0100               	movlb	0	; () banked
 28261  015F66  90D8               	bcf	status,0,c
 28262  015F68  33C3               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 28263  015F6A  33C2               	rrcf	___lwmod@divisor& (0+255),f,b
 28264                           
 28265                           ; BSR set to: 0
 28266  015F6C  0100               	movlb	0	; () banked
 28267  015F6E  2FC4               	decfsz	___lwmod@counter& (0+255),f,b
 28268  015F70  D7E7               	goto	u9340
 28269  015F72                     l2906:
 28270                           
 28271                           ; BSR set to: 0
 28272                           
 28273                           ; BSR set to: 0
 28274  015F72  C0C0  F0C0         	movff	___lwmod@dividend,?___lwmod
 28275  015F76  C0C1  F0C1         	movff	___lwmod@dividend+1,?___lwmod+1
 28276                           
 28277                           ; BSR set to: 0
 28278  015F7A  0012               	return		;funcret
 28279  015F7C                     __end_of___lwmod:
 28280                           	opt stack 0
 28281                           tosu	equ	0xFFF
 28282                           tosh	equ	0xFFE
 28283                           tosl	equ	0xFFD
 28284                           pclath	equ	0xFFA
 28285                           tblptru	equ	0xFF8
 28286                           tblptrh	equ	0xFF7
 28287                           tblptrl	equ	0xFF6
 28288                           tablat	equ	0xFF5
 28289                           prodh	equ	0xFF4
 28290                           prodl	equ	0xFF3
 28291                           intcon	equ	0xFF2
 28292                           postinc0	equ	0xFEE
 28293                           wreg	equ	0xFE8
 28294                           indf1	equ	0xFE7
 28295                           postdec1	equ	0xFE5
 28296                           fsr1h	equ	0xFE2
 28297                           fsr1l	equ	0xFE1
 28298                           indf2	equ	0xFDF
 28299                           postinc2	equ	0xFDE
 28300                           postdec2	equ	0xFDD
 28301                           plusw2	equ	0xFDB
 28302                           fsr2h	equ	0xFDA
 28303                           fsr2l	equ	0xFD9
 28304                           status	equ	0xFD8
 28305                           
 28306 ;; *************** function ___lwdiv *****************
 28307 ;; Defined at:
 28308 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 28309 ;; Parameters:    Size  Location     Type
 28310 ;;  dividend        2    0[BANK0 ] unsigned int 
 28311 ;;  divisor         2    2[BANK0 ] unsigned int 
 28312 ;; Auto vars:     Size  Location     Type
 28313 ;;  quotient        2    5[BANK0 ] unsigned int 
 28314 ;;  counter         1    4[BANK0 ] unsigned char 
 28315 ;; Return value:  Size  Location     Type
 28316 ;;                  2    0[BANK0 ] unsigned int 
 28317 ;; Registers used:
 28318 ;;		wreg, status,2, status,0
 28319 ;; Tracked objects:
 28320 ;;		On entry : 0/0
 28321 ;;		On exit  : 0/0
 28322 ;;		Unchanged: 0/0
 28323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28325 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28327 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28328 ;;Total ram usage:        7 bytes
 28329 ;; Hardware stack levels used:    1
 28330 ;; Hardware stack levels required when called:    7
 28331 ;; This function calls:
 28332 ;;		Nothing
 28333 ;; This function is called by:
 28334 ;;		_itos
 28335 ;;		_printf
 28336 ;; This function uses a non-reentrant model
 28337 ;;
 28338                           
 28339                           	psect	text145
 28340  015844                     __ptext145:
 28341                           	opt stack 0
 28342  015844                     ___lwdiv:
 28343                           	opt stack 22
 28344                           
 28345                           ; BSR set to: 0
 28346                           ;incstack = 0
 28347  015844  0E00               	movlw	0
 28348  015846  0100               	movlb	0	; () banked
 28349  015848  6FBF               	movwf	(___lwdiv@quotient+1)& (0+255),b
 28350  01584A  0E00               	movlw	0
 28351  01584C  6FBE               	movwf	___lwdiv@quotient& (0+255),b
 28352                           
 28353                           ; BSR set to: 0
 28354  01584E  0100               	movlb	0	; () banked
 28355  015850  51BB               	movf	___lwdiv@divisor& (0+255),w,b
 28356  015852  0100               	movlb	0	; () banked
 28357  015854  11BC               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 28358  015856  B4D8               	btfsc	status,2,c
 28359  015858  D02C               	goto	l2896
 28360                           
 28361                           ; BSR set to: 0
 28362  01585A  0E01               	movlw	1
 28363  01585C  0100               	movlb	0	; () banked
 28364  01585E  6FBD               	movwf	___lwdiv@counter& (0+255),b
 28365  015860  D006               	goto	l2891
 28366  015862                     
 28367                           ; BSR set to: 0
 28368                           
 28369                           ; BSR set to: 0
 28370  015862  0100               	movlb	0	; () banked
 28371  015864  90D8               	bcf	status,0,c
 28372  015866  37BB               	rlcf	___lwdiv@divisor& (0+255),f,b
 28373  015868  37BC               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 28374  01586A  0100               	movlb	0	; () banked
 28375  01586C  2BBD               	incf	___lwdiv@counter& (0+255),f,b
 28376  01586E                     l2891:
 28377                           
 28378                           ; BSR set to: 0
 28379                           
 28380                           ; BSR set to: 0
 28381  01586E  0100               	movlb	0	; () banked
 28382  015870  AFBC               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 28383  015872  D7F7               	goto	l2892
 28384  015874                     u9310:
 28385                           
 28386                           ; BSR set to: 0
 28387                           
 28388                           ; BSR set to: 0
 28389                           
 28390                           ; BSR set to: 0
 28391  015874  0100               	movlb	0	; () banked
 28392  015876  90D8               	bcf	status,0,c
 28393  015878  37BE               	rlcf	___lwdiv@quotient& (0+255),f,b
 28394  01587A  37BF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 28395                           
 28396                           ; BSR set to: 0
 28397  01587C  0100               	movlb	0	; () banked
 28398  01587E  51BB               	movf	___lwdiv@divisor& (0+255),w,b
 28399  015880  0100               	movlb	0	; () banked
 28400  015882  5DB9               	subwf	___lwdiv@dividend& (0+255),w,b
 28401  015884  0100               	movlb	0	; () banked
 28402  015886  51BC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 28403  015888  0100               	movlb	0	; () banked
 28404  01588A  59BA               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 28405  01588C  A0D8               	btfss	status,0,c
 28406  01588E  D00A               	goto	l2895
 28407                           
 28408                           ; BSR set to: 0
 28409  015890  0100               	movlb	0	; () banked
 28410  015892  51BB               	movf	___lwdiv@divisor& (0+255),w,b
 28411  015894  0100               	movlb	0	; () banked
 28412  015896  5FB9               	subwf	___lwdiv@dividend& (0+255),f,b
 28413  015898  0100               	movlb	0	; () banked
 28414  01589A  51BC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 28415  01589C  0100               	movlb	0	; () banked
 28416  01589E  5BBA               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 28417                           
 28418                           ; BSR set to: 0
 28419  0158A0  0100               	movlb	0	; () banked
 28420  0158A2  81BE               	bsf	___lwdiv@quotient& (0+255),0,b
 28421  0158A4                     l2895:
 28422                           
 28423                           ; BSR set to: 0
 28424                           
 28425                           ; BSR set to: 0
 28426  0158A4  0100               	movlb	0	; () banked
 28427  0158A6  90D8               	bcf	status,0,c
 28428  0158A8  33BC               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 28429  0158AA  33BB               	rrcf	___lwdiv@divisor& (0+255),f,b
 28430                           
 28431                           ; BSR set to: 0
 28432  0158AC  0100               	movlb	0	; () banked
 28433  0158AE  2FBD               	decfsz	___lwdiv@counter& (0+255),f,b
 28434  0158B0  D7E1               	goto	u9310
 28435  0158B2                     l2896:
 28436                           
 28437                           ; BSR set to: 0
 28438                           
 28439                           ; BSR set to: 0
 28440  0158B2  C0BE  F0B9         	movff	___lwdiv@quotient,?___lwdiv
 28441  0158B6  C0BF  F0BA         	movff	___lwdiv@quotient+1,?___lwdiv+1
 28442                           
 28443                           ; BSR set to: 0
 28444  0158BA  0012               	return		;funcret
 28445  0158BC                     __end_of___lwdiv:
 28446                           	opt stack 0
 28447                           tosu	equ	0xFFF
 28448                           tosh	equ	0xFFE
 28449                           tosl	equ	0xFFD
 28450                           pclath	equ	0xFFA
 28451                           tblptru	equ	0xFF8
 28452                           tblptrh	equ	0xFF7
 28453                           tblptrl	equ	0xFF6
 28454                           tablat	equ	0xFF5
 28455                           prodh	equ	0xFF4
 28456                           prodl	equ	0xFF3
 28457                           intcon	equ	0xFF2
 28458                           postinc0	equ	0xFEE
 28459                           wreg	equ	0xFE8
 28460                           indf1	equ	0xFE7
 28461                           postdec1	equ	0xFE5
 28462                           fsr1h	equ	0xFE2
 28463                           fsr1l	equ	0xFE1
 28464                           indf2	equ	0xFDF
 28465                           postinc2	equ	0xFDE
 28466                           postdec2	equ	0xFDD
 28467                           plusw2	equ	0xFDB
 28468                           fsr2h	equ	0xFDA
 28469                           fsr2l	equ	0xFD9
 28470                           status	equ	0xFD8
 28471                           
 28472 ;; *************** function _HMI_SetSegments *****************
 28473 ;; Defined at:
 28474 ;;		line 226 in file "HMI.c"
 28475 ;; Parameters:    Size  Location     Type
 28476 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 28477 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 28478 ;; Auto vars:     Size  Location     Type
 28479 ;;  in              2    4[BANK0 ] unsigned short 
 28480 ;; Return value:  Size  Location     Type
 28481 ;;                  1    wreg      void 
 28482 ;; Registers used:
 28483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28484 ;; Tracked objects:
 28485 ;;		On entry : 0/0
 28486 ;;		On exit  : 0/0
 28487 ;;		Unchanged: 0/0
 28488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28490 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28492 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28493 ;;Total ram usage:        5 bytes
 28494 ;; Hardware stack levels used:    1
 28495 ;; Hardware stack levels required when called:    8
 28496 ;; This function calls:
 28497 ;;		_ToSegment
 28498 ;; This function is called by:
 28499 ;;		_HMI_SetNumber
 28500 ;; This function uses a non-reentrant model
 28501 ;;
 28502                           
 28503                           	psect	text146
 28504  0149B8                     __ptext146:
 28505                           	opt stack 0
 28506  0149B8                     _HMI_SetSegments:
 28507                           	opt stack 16
 28508                           
 28509                           ;HMI.c: 228: UINT16 in=0;
 28510                           
 28511                           ; BSR set to: 0
 28512                           ;incstack = 0
 28513  0149B8  0E00               	movlw	0
 28514  0149BA  0100               	movlb	0	; () banked
 28515  0149BC  6FBE               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 28516  0149BE  0E00               	movlw	0
 28517  0149C0  6FBD               	movwf	HMI_SetSegments@in& (0+255),b
 28518                           
 28519                           ;HMI.c: 229: while(*pString)
 28520  0149C2  D038               	goto	l1202
 28521  0149C4                     
 28522                           ; BSR set to: 0
 28523                           ;HMI.c: 230: {
 28524                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 28525                           
 28526                           ; BSR set to: 0
 28527  0149C4  0E42               	movlw	low _HMIBoard
 28528  0149C6  0100               	movlb	0	; () banked
 28529  0149C8  25BD               	addwf	HMI_SetSegments@in& (0+255),w,b
 28530  0149CA  6ED9               	movwf	fsr2l,c
 28531  0149CC  0E03               	movlw	high _HMIBoard
 28532  0149CE  0100               	movlb	0	; () banked
 28533  0149D0  21BE               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28534  0149D2  6EDA               	movwf	fsr2h,c
 28535  0149D4  C0BA  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 28536  0149D8  C0BB  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 28537  0149DC  50E7               	movf	indf1,w,c
 28538  0149DE  EC63  F08E         	call	_ToSegment
 28539  0149E2  6EDF               	movwf	indf2,c
 28540                           
 28541                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 28542  0149E4  0E42               	movlw	low _HMIBoard
 28543  0149E6  0100               	movlb	0	; () banked
 28544  0149E8  25BD               	addwf	HMI_SetSegments@in& (0+255),w,b
 28545  0149EA  6ED9               	movwf	fsr2l,c
 28546  0149EC  0E03               	movlw	high _HMIBoard
 28547  0149EE  0100               	movlb	0	; () banked
 28548  0149F0  21BE               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28549  0149F2  6EDA               	movwf	fsr2h,c
 28550  0149F4  0E80               	movlw	128
 28551  0149F6  18DE               	xorwf	postinc2,w,c
 28552  0149F8  A4D8               	btfss	status,2,c
 28553  0149FA  D00E               	goto	l1201
 28554                           
 28555                           ; BSR set to: 0
 28556                           ;HMI.c: 234: {
 28557                           ;HMI.c: 235: in--;
 28558  0149FC  0100               	movlb	0	; () banked
 28559  0149FE  07BD               	decf	HMI_SetSegments@in& (0+255),f,b
 28560  014A00  A0D8               	btfss	status,0,c
 28561  014A02  07BE               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 28562                           
 28563                           ; BSR set to: 0
 28564                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 28565  014A04  0E42               	movlw	low _HMIBoard
 28566  014A06  0100               	movlb	0	; () banked
 28567  014A08  25BD               	addwf	HMI_SetSegments@in& (0+255),w,b
 28568  014A0A  6ED9               	movwf	fsr2l,c
 28569  014A0C  0E03               	movlw	high _HMIBoard
 28570  014A0E  0100               	movlb	0	; () banked
 28571  014A10  21BE               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28572  014A12  6EDA               	movwf	fsr2h,c
 28573  014A14  0E00               	movlw	0
 28574  014A16  8EDB               	bsf	plusw2,7,c
 28575  014A18                     l1201:
 28576                           
 28577                           ; BSR set to: 0
 28578                           ;HMI.c: 237: }
 28579                           ;HMI.c: 239: pString++;
 28580                           
 28581                           ; BSR set to: 0
 28582  014A18  0100               	movlb	0	; () banked
 28583  014A1A  4BBA               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 28584  014A1C  2BBB               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 28585                           
 28586                           ; BSR set to: 0
 28587                           ;HMI.c: 240: in++;
 28588  014A1E  0100               	movlb	0	; () banked
 28589  014A20  4BBD               	infsnz	HMI_SetSegments@in& (0+255),f,b
 28590  014A22  2BBE               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 28591                           
 28592                           ; BSR set to: 0
 28593                           ;HMI.c: 241: if (in>=6)
 28594  014A24  0100               	movlb	0	; () banked
 28595  014A26  51BE               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 28596  014A28  E11A               	bnz	l12741
 28597  014A2A  0E06               	movlw	6
 28598  014A2C  0100               	movlb	0	; () banked
 28599  014A2E  5DBD               	subwf	HMI_SetSegments@in& (0+255),w,b
 28600  014A30  B0D8               	btfsc	status,0,c
 28601  014A32  D015               	goto	l1204
 28602  014A34                     l1202:
 28603                           
 28604                           ; BSR set to: 0
 28605                           
 28606                           ; BSR set to: 0
 28607                           
 28608                           ; BSR set to: 0
 28609  014A34  C0BA  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 28610  014A38  C0BB  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 28611  014A3C  50DF               	movf	indf2,w,c
 28612  014A3E  B4D8               	btfsc	status,2,c
 28613  014A40  D00E               	goto	l1204
 28614  014A42  D7C0               	goto	l1200
 28615  014A44                     
 28616                           ; BSR set to: 0
 28617                           ;HMI.c: 245: {
 28618                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 28619                           
 28620                           ; BSR set to: 0
 28621  014A44  0E42               	movlw	low _HMIBoard
 28622  014A46  0100               	movlb	0	; () banked
 28623  014A48  25BD               	addwf	HMI_SetSegments@in& (0+255),w,b
 28624  014A4A  6ED9               	movwf	fsr2l,c
 28625  014A4C  0E03               	movlw	high _HMIBoard
 28626  014A4E  0100               	movlb	0	; () banked
 28627  014A50  21BE               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 28628  014A52  6EDA               	movwf	fsr2h,c
 28629  014A54  0E00               	movlw	0
 28630  014A56  6EDF               	movwf	indf2,c
 28631                           
 28632                           ; BSR set to: 0
 28633                           ;HMI.c: 247: in++;
 28634  014A58  0100               	movlb	0	; () banked
 28635  014A5A  4BBD               	infsnz	HMI_SetSegments@in& (0+255),f,b
 28636  014A5C  2BBE               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 28637  014A5E                     l1204:
 28638  014A5E                     l12741:
 28639                           
 28640                           ; BSR set to: 0
 28641  014A5E  0100               	movlb	0	; () banked
 28642  014A60  51BE               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 28643  014A62  E106               	bnz	l1207
 28644  014A64  0E06               	movlw	6
 28645  014A66  0100               	movlb	0	; () banked
 28646  014A68  5DBD               	subwf	HMI_SetSegments@in& (0+255),w,b
 28647  014A6A  B0D8               	btfsc	status,0,c
 28648  014A6C  0012               	return	
 28649  014A6E  D7EA               	goto	l1205
 28650  014A70                     l1207:
 28651                           
 28652                           ; BSR set to: 0
 28653  014A70  0012               	return		;funcret
 28654  014A72                     __end_of_HMI_SetSegments:
 28655                           	opt stack 0
 28656                           tosu	equ	0xFFF
 28657                           tosh	equ	0xFFE
 28658                           tosl	equ	0xFFD
 28659                           pclath	equ	0xFFA
 28660                           tblptru	equ	0xFF8
 28661                           tblptrh	equ	0xFF7
 28662                           tblptrl	equ	0xFF6
 28663                           tablat	equ	0xFF5
 28664                           prodh	equ	0xFF4
 28665                           prodl	equ	0xFF3
 28666                           intcon	equ	0xFF2
 28667                           postinc0	equ	0xFEE
 28668                           wreg	equ	0xFE8
 28669                           indf1	equ	0xFE7
 28670                           postdec1	equ	0xFE5
 28671                           fsr1h	equ	0xFE2
 28672                           fsr1l	equ	0xFE1
 28673                           indf2	equ	0xFDF
 28674                           postinc2	equ	0xFDE
 28675                           postdec2	equ	0xFDD
 28676                           plusw2	equ	0xFDB
 28677                           fsr2h	equ	0xFDA
 28678                           fsr2l	equ	0xFD9
 28679                           status	equ	0xFD8
 28680                           
 28681 ;; *************** function _ToSegment *****************
 28682 ;; Defined at:
 28683 ;;		line 284 in file "Library/Types.c"
 28684 ;; Parameters:    Size  Location     Type
 28685 ;;  pCHR            1    wreg     unsigned char 
 28686 ;; Auto vars:     Size  Location     Type
 28687 ;;  pCHR            1    0[BANK0 ] unsigned char 
 28688 ;; Return value:  Size  Location     Type
 28689 ;;                  1    wreg      unsigned char 
 28690 ;; Registers used:
 28691 ;;		wreg, status,2, status,0
 28692 ;; Tracked objects:
 28693 ;;		On entry : 0/0
 28694 ;;		On exit  : 0/0
 28695 ;;		Unchanged: 0/0
 28696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28701 ;;Total ram usage:        1 bytes
 28702 ;; Hardware stack levels used:    1
 28703 ;; Hardware stack levels required when called:    7
 28704 ;; This function calls:
 28705 ;;		Nothing
 28706 ;; This function is called by:
 28707 ;;		_HMI_SetSegments
 28708 ;; This function uses a non-reentrant model
 28709 ;;
 28710                           
 28711                           	psect	text147
 28712  011CC6                     __ptext147:
 28713                           	opt stack 0
 28714  011CC6                     _ToSegment:
 28715                           	opt stack 16
 28716                           
 28717                           ; BSR set to: 0
 28718                           ;incstack = 0
 28719                           ;ToSegment@pCHR stored from wreg
 28720  011CC6  0100               	movlb	0	; () banked
 28721  011CC8  6FB9               	movwf	ToSegment@pCHR& (0+255),b
 28722                           
 28723                           ;Types.c: 286: switch(pCHR)
 28724  011CCA  D07E               	goto	l853
 28725  011CCC  0E3F               	movlw	63
 28726  011CCE  0012               	return	
 28727  011CD0  0E06               	movlw	6
 28728  011CD2  0012               	return	
 28729  011CD4  0E5B               	movlw	91
 28730  011CD6  0012               	return	
 28731  011CD8  0E4F               	movlw	79
 28732  011CDA  0012               	return	
 28733  011CDC  0E66               	movlw	102
 28734  011CDE  0012               	return	
 28735  011CE0  0E6D               	movlw	109
 28736  011CE2  0012               	return	
 28737  011CE4  0E7D               	movlw	125
 28738  011CE6  0012               	return	
 28739  011CE8  0E07               	movlw	7
 28740  011CEA  0012               	return	
 28741  011CEC  0E7F               	movlw	127
 28742  011CEE  0012               	return	
 28743  011CF0  0E6F               	movlw	111
 28744  011CF2  0012               	return	
 28745  011CF4  0E5F               	movlw	95
 28746  011CF6  0012               	return	
 28747  011CF8  0E7C               	movlw	124
 28748  011CFA  0012               	return	
 28749  011CFC  0E58               	movlw	88
 28750  011CFE  0012               	return	
 28751  011D00  0E5E               	movlw	94
 28752  011D02  0012               	return	
 28753  011D04  0E7B               	movlw	123
 28754  011D06  0012               	return	
 28755  011D08  0E71               	movlw	113
 28756  011D0A  0012               	return	
 28757  011D0C  0E6F               	movlw	111
 28758  011D0E  0012               	return	
 28759  011D10  0E74               	movlw	116
 28760  011D12  0012               	return	
 28761  011D14  0E04               	movlw	4
 28762  011D16  0012               	return	
 28763  011D18  0E0E               	movlw	14
 28764  011D1A  0012               	return	
 28765  011D1C  0E7A               	movlw	122
 28766  011D1E  0012               	return	
 28767  011D20  0E06               	movlw	6
 28768  011D22  0012               	return	
 28769  011D24  0E14               	movlw	20
 28770  011D26  0012               	return	
 28771  011D28  0E54               	movlw	84
 28772  011D2A  0012               	return	
 28773  011D2C  0E5C               	movlw	92
 28774  011D2E  0012               	return	
 28775  011D30  0E73               	movlw	115
 28776  011D32  0012               	return	
 28777  011D34  0E67               	movlw	103
 28778  011D36  0012               	return	
 28779  011D38  0E50               	movlw	80
 28780  011D3A  0012               	return	
 28781  011D3C  0E6D               	movlw	109
 28782  011D3E  0012               	return	
 28783  011D40  0E78               	movlw	120
 28784  011D42  0012               	return	
 28785  011D44  0E1C               	movlw	28
 28786  011D46  0012               	return	
 28787  011D48  0E62               	movlw	98
 28788  011D4A  0012               	return	
 28789  011D4C  0E2A               	movlw	42
 28790  011D4E  0012               	return	
 28791  011D50  0E64               	movlw	100
 28792  011D52  0012               	return	
 28793  011D54  0E6E               	movlw	110
 28794  011D56  0012               	return	
 28795  011D58  0E5B               	movlw	91
 28796  011D5A  0012               	return	
 28797  011D5C  0E77               	movlw	119
 28798  011D5E  0012               	return	
 28799  011D60  0E7F               	movlw	127
 28800  011D62  0012               	return	
 28801  011D64  0E39               	movlw	57
 28802  011D66  0012               	return	
 28803  011D68  0E3F               	movlw	63
 28804  011D6A  0012               	return	
 28805  011D6C  0E79               	movlw	121
 28806  011D6E  0012               	return	
 28807  011D70  0E71               	movlw	113
 28808  011D72  0012               	return	
 28809  011D74  0E3D               	movlw	61
 28810  011D76  0012               	return	
 28811  011D78  0E76               	movlw	118
 28812  011D7A  0012               	return	
 28813  011D7C  0E06               	movlw	6
 28814  011D7E  0012               	return	
 28815  011D80  0E1E               	movlw	30
 28816  011D82  0012               	return	
 28817  011D84  0E57               	movlw	87
 28818  011D86  0012               	return	
 28819  011D88  0E38               	movlw	56
 28820  011D8A  0012               	return	
 28821  011D8C  0E76               	movlw	118
 28822  011D8E  0012               	return	
 28823  011D90  0E76               	movlw	118
 28824  011D92  0012               	return	
 28825  011D94  0E3F               	movlw	63
 28826  011D96  0012               	return	
 28827  011D98  0E73               	movlw	115
 28828  011D9A  0012               	return	
 28829  011D9C  0E3F               	movlw	63
 28830  011D9E  0012               	return	
 28831  011DA0  0E77               	movlw	119
 28832  011DA2  0012               	return	
 28833  011DA4  0E6D               	movlw	109
 28834  011DA6  0012               	return	
 28835  011DA8  0E31               	movlw	49
 28836  011DAA  0012               	return	
 28837  011DAC  0E3E               	movlw	62
 28838  011DAE  0012               	return	
 28839  011DB0  0E3E               	movlw	62
 28840  011DB2  0012               	return	
 28841  011DB4  0E7E               	movlw	126
 28842  011DB6  0012               	return	
 28843  011DB8  0E76               	movlw	118
 28844  011DBA  0012               	return	
 28845  011DBC  0E66               	movlw	102
 28846  011DBE  0012               	return	
 28847  011DC0  0E5B               	movlw	91
 28848  011DC2  0012               	return	
 28849  011DC4  0E80               	movlw	128
 28850  011DC6  0012               	return	
 28851  011DC8                     l853:
 28852  011DC8  0100               	movlb	0	; () banked
 28853  011DCA  51B9               	movf	ToSegment@pCHR& (0+255),w,b
 28854                           
 28855                           ; Switch size 1, requested type "space"
 28856                           ; Number of cases is 63, Range of values is 46 to 122
 28857                           ; switch strategies available:
 28858                           ; Name         Instructions Cycles
 28859                           ; simple_byte          190    96 (average)
 28860                           ;	Chosen strategy is simple_byte
 28861  011DCC  0A2E               	xorlw	46	; case 46
 28862  011DCE  B4D8               	btfsc	status,2,c
 28863  011DD0  D7F9               	goto	l917
 28864  011DD2  0A1E               	xorlw	30	; case 48
 28865  011DD4  B4D8               	btfsc	status,2,c
 28866  011DD6  D77A               	goto	l854
 28867  011DD8  0A01               	xorlw	1	; case 49
 28868  011DDA  B4D8               	btfsc	status,2,c
 28869  011DDC  D779               	goto	l856
 28870  011DDE  0A03               	xorlw	3	; case 50
 28871  011DE0  B4D8               	btfsc	status,2,c
 28872  011DE2  D778               	goto	l857
 28873  011DE4  0A01               	xorlw	1	; case 51
 28874  011DE6  B4D8               	btfsc	status,2,c
 28875  011DE8  D777               	goto	l858
 28876  011DEA  0A07               	xorlw	7	; case 52
 28877  011DEC  B4D8               	btfsc	status,2,c
 28878  011DEE  D776               	goto	l859
 28879  011DF0  0A01               	xorlw	1	; case 53
 28880  011DF2  B4D8               	btfsc	status,2,c
 28881  011DF4  D775               	goto	l860
 28882  011DF6  0A03               	xorlw	3	; case 54
 28883  011DF8  B4D8               	btfsc	status,2,c
 28884  011DFA  D774               	goto	l861
 28885  011DFC  0A01               	xorlw	1	; case 55
 28886  011DFE  B4D8               	btfsc	status,2,c
 28887  011E00  D773               	goto	l862
 28888  011E02  0A0F               	xorlw	15	; case 56
 28889  011E04  B4D8               	btfsc	status,2,c
 28890  011E06  D772               	goto	l863
 28891  011E08  0A01               	xorlw	1	; case 57
 28892  011E0A  B4D8               	btfsc	status,2,c
 28893  011E0C  D771               	goto	l864
 28894  011E0E  0A78               	xorlw	120	; case 65
 28895  011E10  B4D8               	btfsc	status,2,c
 28896  011E12  D7A4               	goto	l891
 28897  011E14  0A03               	xorlw	3	; case 66
 28898  011E16  B4D8               	btfsc	status,2,c
 28899  011E18  D7A3               	goto	l892
 28900  011E1A  0A01               	xorlw	1	; case 67
 28901  011E1C  B4D8               	btfsc	status,2,c
 28902  011E1E  D7A2               	goto	l893
 28903  011E20  0A07               	xorlw	7	; case 68
 28904  011E22  B4D8               	btfsc	status,2,c
 28905  011E24  D7A1               	goto	l894
 28906  011E26  0A01               	xorlw	1	; case 69
 28907  011E28  B4D8               	btfsc	status,2,c
 28908  011E2A  D7A0               	goto	l895
 28909  011E2C  0A03               	xorlw	3	; case 70
 28910  011E2E  B4D8               	btfsc	status,2,c
 28911  011E30  D79F               	goto	l896
 28912  011E32  0A01               	xorlw	1	; case 71
 28913  011E34  B4D8               	btfsc	status,2,c
 28914  011E36  D79E               	goto	l897
 28915  011E38  0A0F               	xorlw	15	; case 72
 28916  011E3A  B4D8               	btfsc	status,2,c
 28917  011E3C  D79D               	goto	l898
 28918  011E3E  0A01               	xorlw	1	; case 73
 28919  011E40  B4D8               	btfsc	status,2,c
 28920  011E42  D79C               	goto	l899
 28921  011E44  0A03               	xorlw	3	; case 74
 28922  011E46  B4D8               	btfsc	status,2,c
 28923  011E48  D79B               	goto	l900
 28924  011E4A  0A01               	xorlw	1	; case 75
 28925  011E4C  B4D8               	btfsc	status,2,c
 28926  011E4E  D79A               	goto	l901
 28927  011E50  0A07               	xorlw	7	; case 76
 28928  011E52  B4D8               	btfsc	status,2,c
 28929  011E54  D799               	goto	l902
 28930  011E56  0A01               	xorlw	1	; case 77
 28931  011E58  B4D8               	btfsc	status,2,c
 28932  011E5A  D798               	goto	l903
 28933  011E5C  0A03               	xorlw	3	; case 78
 28934  011E5E  B4D8               	btfsc	status,2,c
 28935  011E60  D797               	goto	l904
 28936  011E62  0A01               	xorlw	1	; case 79
 28937  011E64  B4D8               	btfsc	status,2,c
 28938  011E66  D796               	goto	l905
 28939  011E68  0A1F               	xorlw	31	; case 80
 28940  011E6A  B4D8               	btfsc	status,2,c
 28941  011E6C  D795               	goto	l906
 28942  011E6E  0A01               	xorlw	1	; case 81
 28943  011E70  B4D8               	btfsc	status,2,c
 28944  011E72  D794               	goto	l907
 28945  011E74  0A03               	xorlw	3	; case 82
 28946  011E76  B4D8               	btfsc	status,2,c
 28947  011E78  D793               	goto	l908
 28948  011E7A  0A01               	xorlw	1	; case 83
 28949  011E7C  B4D8               	btfsc	status,2,c
 28950  011E7E  D792               	goto	l909
 28951  011E80  0A07               	xorlw	7	; case 84
 28952  011E82  B4D8               	btfsc	status,2,c
 28953  011E84  D791               	goto	l910
 28954  011E86  0A01               	xorlw	1	; case 85
 28955  011E88  B4D8               	btfsc	status,2,c
 28956  011E8A  D790               	goto	l911
 28957  011E8C  0A03               	xorlw	3	; case 86
 28958  011E8E  B4D8               	btfsc	status,2,c
 28959  011E90  D78F               	goto	l912
 28960  011E92  0A01               	xorlw	1	; case 87
 28961  011E94  B4D8               	btfsc	status,2,c
 28962  011E96  D78E               	goto	l913
 28963  011E98  0A0F               	xorlw	15	; case 88
 28964  011E9A  B4D8               	btfsc	status,2,c
 28965  011E9C  D78D               	goto	l914
 28966  011E9E  0A01               	xorlw	1	; case 89
 28967  011EA0  B4D8               	btfsc	status,2,c
 28968  011EA2  D78C               	goto	l915
 28969  011EA4  0A03               	xorlw	3	; case 90
 28970  011EA6  B4D8               	btfsc	status,2,c
 28971  011EA8  D78B               	goto	l916
 28972  011EAA  0A3B               	xorlw	59	; case 97
 28973  011EAC  B4D8               	btfsc	status,2,c
 28974  011EAE  D722               	goto	l865
 28975  011EB0  0A03               	xorlw	3	; case 98
 28976  011EB2  B4D8               	btfsc	status,2,c
 28977  011EB4  D721               	goto	l866
 28978  011EB6  0A01               	xorlw	1	; case 99
 28979  011EB8  B4D8               	btfsc	status,2,c
 28980  011EBA  D720               	goto	l867
 28981  011EBC  0A07               	xorlw	7	; case 100
 28982  011EBE  B4D8               	btfsc	status,2,c
 28983  011EC0  D71F               	goto	l868
 28984  011EC2  0A01               	xorlw	1	; case 101
 28985  011EC4  B4D8               	btfsc	status,2,c
 28986  011EC6  D71E               	goto	l869
 28987  011EC8  0A03               	xorlw	3	; case 102
 28988  011ECA  B4D8               	btfsc	status,2,c
 28989  011ECC  D71D               	goto	l870
 28990  011ECE  0A01               	xorlw	1	; case 103
 28991  011ED0  B4D8               	btfsc	status,2,c
 28992  011ED2  D71C               	goto	l871
 28993  011ED4  0A0F               	xorlw	15	; case 104
 28994  011ED6  B4D8               	btfsc	status,2,c
 28995  011ED8  D71B               	goto	l872
 28996  011EDA  0A01               	xorlw	1	; case 105
 28997  011EDC  B4D8               	btfsc	status,2,c
 28998  011EDE  D71A               	goto	l873
 28999  011EE0  0A03               	xorlw	3	; case 106
 29000  011EE2  B4D8               	btfsc	status,2,c
 29001  011EE4  D719               	goto	l874
 29002  011EE6  0A01               	xorlw	1	; case 107
 29003  011EE8  B4D8               	btfsc	status,2,c
 29004  011EEA  D718               	goto	l875
 29005  011EEC  0A07               	xorlw	7	; case 108
 29006  011EEE  B4D8               	btfsc	status,2,c
 29007  011EF0  D717               	goto	l876
 29008  011EF2  0A01               	xorlw	1	; case 109
 29009  011EF4  B4D8               	btfsc	status,2,c
 29010  011EF6  D716               	goto	l877
 29011  011EF8  0A03               	xorlw	3	; case 110
 29012  011EFA  B4D8               	btfsc	status,2,c
 29013  011EFC  D715               	goto	l878
 29014  011EFE  0A01               	xorlw	1	; case 111
 29015  011F00  B4D8               	btfsc	status,2,c
 29016  011F02  D714               	goto	l879
 29017  011F04  0A1F               	xorlw	31	; case 112
 29018  011F06  B4D8               	btfsc	status,2,c
 29019  011F08  D713               	goto	l880
 29020  011F0A  0A01               	xorlw	1	; case 113
 29021  011F0C  B4D8               	btfsc	status,2,c
 29022  011F0E  D712               	goto	l881
 29023  011F10  0A03               	xorlw	3	; case 114
 29024  011F12  B4D8               	btfsc	status,2,c
 29025  011F14  D711               	goto	l882
 29026  011F16  0A01               	xorlw	1	; case 115
 29027  011F18  B4D8               	btfsc	status,2,c
 29028  011F1A  D710               	goto	l883
 29029  011F1C  0A07               	xorlw	7	; case 116
 29030  011F1E  B4D8               	btfsc	status,2,c
 29031  011F20  D70F               	goto	l884
 29032  011F22  0A01               	xorlw	1	; case 117
 29033  011F24  B4D8               	btfsc	status,2,c
 29034  011F26  D70E               	goto	l885
 29035  011F28  0A03               	xorlw	3	; case 118
 29036  011F2A  B4D8               	btfsc	status,2,c
 29037  011F2C  D70D               	goto	l886
 29038  011F2E  0A01               	xorlw	1	; case 119
 29039  011F30  B4D8               	btfsc	status,2,c
 29040  011F32  D70C               	goto	l887
 29041  011F34  0A0F               	xorlw	15	; case 120
 29042  011F36  B4D8               	btfsc	status,2,c
 29043  011F38  D70B               	goto	l888
 29044  011F3A  0A01               	xorlw	1	; case 121
 29045  011F3C  B4D8               	btfsc	status,2,c
 29046  011F3E  D70A               	goto	l889
 29047  011F40  0A03               	xorlw	3	; case 122
 29048  011F42  B4D8               	btfsc	status,2,c
 29049  011F44  D709               	goto	l890
 29050                           
 29051                           ;Types.c: 354: return 0;
 29052                           
 29053                           ; BSR set to: 0
 29054  011F46  0E00               	movlw	0
 29055  011F48  0012               	return	
 29056  011F4A                     __end_of_ToSegment:
 29057                           	opt stack 0
 29058                           tosu	equ	0xFFF
 29059                           tosh	equ	0xFFE
 29060                           tosl	equ	0xFFD
 29061                           pclath	equ	0xFFA
 29062                           tblptru	equ	0xFF8
 29063                           tblptrh	equ	0xFF7
 29064                           tblptrl	equ	0xFF6
 29065                           tablat	equ	0xFF5
 29066                           prodh	equ	0xFF4
 29067                           prodl	equ	0xFF3
 29068                           intcon	equ	0xFF2
 29069                           postinc0	equ	0xFEE
 29070                           wreg	equ	0xFE8
 29071                           indf1	equ	0xFE7
 29072                           postdec1	equ	0xFE5
 29073                           fsr1h	equ	0xFE2
 29074                           fsr1l	equ	0xFE1
 29075                           indf2	equ	0xFDF
 29076                           postinc2	equ	0xFDE
 29077                           postdec2	equ	0xFDD
 29078                           plusw2	equ	0xFDB
 29079                           fsr2h	equ	0xFDA
 29080                           fsr2l	equ	0xFD9
 29081                           status	equ	0xFD8
 29082                           
 29083 ;; *************** function _HMI_SetButton *****************
 29084 ;; Defined at:
 29085 ;;		line 186 in file "HMI.c"
 29086 ;; Parameters:    Size  Location     Type
 29087 ;;  pValue          1    wreg     unsigned char 
 29088 ;; Auto vars:     Size  Location     Type
 29089 ;;  pValue          1    6[BANK0 ] unsigned char 
 29090 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 29091 ;;  v               1    7[BANK0 ] unsigned char 
 29092 ;; Return value:  Size  Location     Type
 29093 ;;                  1    wreg      void 
 29094 ;; Registers used:
 29095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29096 ;; Tracked objects:
 29097 ;;		On entry : 0/0
 29098 ;;		On exit  : 0/0
 29099 ;;		Unchanged: 0/0
 29100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29102 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29104 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29105 ;;Total ram usage:        8 bytes
 29106 ;; Hardware stack levels used:    1
 29107 ;; Hardware stack levels required when called:    7
 29108 ;; This function calls:
 29109 ;;		Nothing
 29110 ;; This function is called by:
 29111 ;;		_Event_TestButton
 29112 ;; This function uses a non-reentrant model
 29113 ;;
 29114                           
 29115                           	psect	text148
 29116  01538A                     __ptext148:
 29117                           	opt stack 0
 29118  01538A                     _HMI_SetButton:
 29119                           	opt stack 18
 29120                           
 29121                           ;incstack = 0
 29122                           ;HMI_SetButton@pValue stored from wreg
 29123  01538A  0100               	movlb	0	; () banked
 29124  01538C  6FBF               	movwf	HMI_SetButton@pValue& (0+255),b
 29125                           
 29126                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 29127  01538E  0E18               	movlw	low HMI_SetButton@F7213
 29128  015390  6EF6               	movwf	tblptrl,c
 29129  015392                     	if	1	;There is more than 1 active tblptr byte
 29130  015392  0EFD               	movlw	high HMI_SetButton@F7213
 29131  015394  6EF7               	movwf	tblptrh,c
 29132  015396                     	endif
 29133  015396                     	if	1	;There are 3 active tblptr bytes
 29134  015396  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 29135  015398  6EF8               	movwf	tblptru,c
 29136  01539A                     	endif
 29137  01539A  0009               	tblrd		*+
 29138  01539C  CFF5 F0BB          	movff	tablat,HMI_SetButton@reindex
 29139  0153A0  0009               	tblrd		*+
 29140  0153A2  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex+1
 29141  0153A6  0009               	tblrd		*+
 29142  0153A8  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+2
 29143  0153AC  000A               	tblrd		*-
 29144  0153AE  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+3
 29145                           
 29146                           ;HMI.c: 189: UINT8 v = 0b00010001;
 29147  0153B2  0E11               	movlw	17
 29148  0153B4  0100               	movlb	0	; () banked
 29149  0153B6  6FC0               	movwf	HMI_SetButton@v& (0+255),b
 29150                           
 29151                           ; BSR set to: 0
 29152                           ;HMI.c: 190: pValue &= 3;
 29153  0153B8  0E03               	movlw	3
 29154  0153BA  0100               	movlb	0	; () banked
 29155  0153BC  17BF               	andwf	HMI_SetButton@pValue& (0+255),f,b
 29156                           
 29157                           ; BSR set to: 0
 29158                           ;HMI.c: 191: v = v << reindex[pValue];
 29159  0153BE  0100               	movlb	0	; () banked
 29160  0153C0  51BF               	movf	HMI_SetButton@pValue& (0+255),w,b
 29161  0153C2  0D01               	mullw	1
 29162  0153C4  0EBB               	movlw	low HMI_SetButton@reindex
 29163  0153C6  24F3               	addwf	prodl,w,c
 29164  0153C8  6ED9               	movwf	fsr2l,c
 29165  0153CA  0E00               	movlw	high HMI_SetButton@reindex
 29166  0153CC  20F4               	addwfc	prodh,w,c
 29167  0153CE  6EDA               	movwf	fsr2h,c
 29168  0153D0  50DF               	movf	indf2,w,c
 29169  0153D2  0100               	movlb	0	; () banked
 29170  0153D4  6FB9               	movwf	??_HMI_SetButton& (0+255),b
 29171  0153D6  C0C0  F0BA         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 29172  0153DA  0100               	movlb	0	; () banked
 29173  0153DC  2BB9               	incf	??_HMI_SetButton& (0+255),f,b
 29174  0153DE  D003               	goto	u9694
 29175  0153E0                     u9695:
 29176  0153E0  0100               	movlb	0	; () banked
 29177  0153E2  90D8               	bcf	status,0,c
 29178  0153E4  37BA               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 29179  0153E6                     u9694:
 29180  0153E6  0100               	movlb	0	; () banked
 29181  0153E8  2FB9               	decfsz	??_HMI_SetButton& (0+255),f,b
 29182  0153EA  D7FA               	goto	u9695
 29183  0153EC  0100               	movlb	0	; () banked
 29184  0153EE  51BA               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 29185  0153F0  0100               	movlb	0	; () banked
 29186  0153F2  6FC0               	movwf	HMI_SetButton@v& (0+255),b
 29187                           
 29188                           ; BSR set to: 0
 29189                           ;HMI.c: 192: v = v >> 4;
 29190  0153F4  0100               	movlb	0	; () banked
 29191  0153F6  39C0               	swapf	HMI_SetButton@v& (0+255),w,b
 29192  0153F8  0B0F               	andlw	15
 29193  0153FA  0100               	movlb	0	; () banked
 29194  0153FC  6FC0               	movwf	HMI_SetButton@v& (0+255),b
 29195                           
 29196                           ; BSR set to: 0
 29197                           ;HMI.c: 193: v = v & 0x0F;
 29198  0153FE  0100               	movlb	0	; () banked
 29199  015400  51C0               	movf	HMI_SetButton@v& (0+255),w,b
 29200  015402  0B0F               	andlw	15
 29201  015404  0100               	movlb	0	; () banked
 29202  015406  6FC0               	movwf	HMI_SetButton@v& (0+255),b
 29203                           
 29204                           ; BSR set to: 0
 29205                           ;HMI.c: 194: HMIBoard.pButton = v;
 29206  015408  0103               	movlb	3	; () banked
 29207  01540A  5148               	movf	(_HMIBoard+6)& (0+255),w,b
 29208  01540C  0100               	movlb	0	; () banked
 29209  01540E  19C0               	xorwf	HMI_SetButton@v& (0+255),w,b
 29210  015410  0BF0               	andlw	-16
 29211  015412  19C0               	xorwf	HMI_SetButton@v& (0+255),w,b
 29212  015414  0103               	movlb	3	; () banked
 29213  015416  6F48               	movwf	(_HMIBoard+6)& (0+255),b
 29214                           
 29215                           ; BSR set to: 3
 29216  015418  0012               	return		;funcret
 29217  01541A                     __end_of_HMI_SetButton:
 29218                           	opt stack 0
 29219                           tosu	equ	0xFFF
 29220                           tosh	equ	0xFFE
 29221                           tosl	equ	0xFFD
 29222                           pclath	equ	0xFFA
 29223                           tblptru	equ	0xFF8
 29224                           tblptrh	equ	0xFF7
 29225                           tblptrl	equ	0xFF6
 29226                           tablat	equ	0xFF5
 29227                           prodh	equ	0xFF4
 29228                           prodl	equ	0xFF3
 29229                           intcon	equ	0xFF2
 29230                           postinc0	equ	0xFEE
 29231                           wreg	equ	0xFE8
 29232                           indf1	equ	0xFE7
 29233                           postdec1	equ	0xFE5
 29234                           fsr1h	equ	0xFE2
 29235                           fsr1l	equ	0xFE1
 29236                           indf2	equ	0xFDF
 29237                           postinc2	equ	0xFDE
 29238                           postdec2	equ	0xFDD
 29239                           plusw2	equ	0xFDB
 29240                           fsr2h	equ	0xFDA
 29241                           fsr2l	equ	0xFD9
 29242                           status	equ	0xFD8
 29243                           
 29244 ;; *************** function _LED_Toggle *****************
 29245 ;; Defined at:
 29246 ;;		line 50 in file "Library/LED.c"
 29247 ;; Parameters:    Size  Location     Type
 29248 ;;  pLED            1    wreg     enum E6739
 29249 ;; Auto vars:     Size  Location     Type
 29250 ;;  pLED            1   24[BANK0 ] enum E6739
 29251 ;; Return value:  Size  Location     Type
 29252 ;;                  1    wreg      void 
 29253 ;; Registers used:
 29254 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29255 ;; Tracked objects:
 29256 ;;		On entry : 0/0
 29257 ;;		On exit  : 0/0
 29258 ;;		Unchanged: 0/0
 29259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29263 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29264 ;;Total ram usage:        1 bytes
 29265 ;; Hardware stack levels used:    1
 29266 ;; Hardware stack levels required when called:   12
 29267 ;; This function calls:
 29268 ;;		_Port_TogglePin
 29269 ;; This function is called by:
 29270 ;;		_LCD_Reset
 29271 ;;		_Event_DIPSwitch
 29272 ;;		_Event_TestButton
 29273 ;;		_Event_ADCSequenceComplete
 29274 ;;		_Event_HMI_DIPSwitch
 29275 ;;		_Event_HMI_LeftButton
 29276 ;;		_Event_HMI_RightButton
 29277 ;;		_Event_HMI_UpButton
 29278 ;;		_Event_HMI_DownButton
 29279 ;; This function uses a non-reentrant model
 29280 ;;
 29281                           
 29282                           	psect	text149
 29283  016344                     __ptext149:
 29284                           	opt stack 0
 29285  016344                     _LED_Toggle:
 29286                           	opt stack 13
 29287                           
 29288                           ; BSR set to: 3
 29289                           ;incstack = 0
 29290                           ;LED_Toggle@pLED stored from wreg
 29291  016344  0100               	movlb	0	; () banked
 29292  016346  6FD1               	movwf	LED_Toggle@pLED& (0+255),b
 29293                           
 29294                           ;LED.c: 52: switch (pLED)
 29295  016348  D018               	goto	l234
 29296  01634A                     
 29297                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 29298  01634A  0EA4               	movlw	low _PortC
 29299  01634C  0100               	movlb	0	; () banked
 29300  01634E  6FCD               	movwf	Port_TogglePin@pInput& (0+255),b
 29301  016350  0E00               	movlw	high _PortC
 29302  016352  0100               	movlb	0	; () banked
 29303  016354  6FCE               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 29304  016356  0E00               	movlw	0
 29305  016358  0100               	movlb	0	; () banked
 29306  01635A  6FCF               	movwf	Port_TogglePin@pPin& (0+255),b
 29307  01635C  EC25  F0B4         	call	_Port_TogglePin	;wreg free
 29308                           
 29309                           ;LED.c: 56: break;
 29310  016360  0012               	return	
 29311  016362                     
 29312                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 29313  016362  0EA4               	movlw	low _PortC
 29314  016364  0100               	movlb	0	; () banked
 29315  016366  6FCD               	movwf	Port_TogglePin@pInput& (0+255),b
 29316  016368  0E00               	movlw	high _PortC
 29317  01636A  0100               	movlb	0	; () banked
 29318  01636C  6FCE               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 29319  01636E  0E01               	movlw	1
 29320  016370  0100               	movlb	0	; () banked
 29321  016372  6FCF               	movwf	Port_TogglePin@pPin& (0+255),b
 29322  016374  EC25  F0B4         	call	_Port_TogglePin	;wreg free
 29323                           
 29324                           ;LED.c: 60: }
 29325                           
 29326                           ;LED.c: 59: break;
 29327  016378  0012               	return	
 29328  01637A                     l234:
 29329  01637A  0100               	movlb	0	; () banked
 29330  01637C  51D1               	movf	LED_Toggle@pLED& (0+255),w,b
 29331                           
 29332                           ; Switch size 1, requested type "space"
 29333                           ; Number of cases is 2, Range of values is 0 to 1
 29334                           ; switch strategies available:
 29335                           ; Name         Instructions Cycles
 29336                           ; simple_byte            7     4 (average)
 29337                           ;	Chosen strategy is simple_byte
 29338  01637E  0A00               	xorlw	0	; case 0
 29339  016380  B4D8               	btfsc	status,2,c
 29340  016382  D7E3               	goto	l235
 29341  016384  0A01               	xorlw	1	; case 1
 29342  016386  A4D8               	btfss	status,2,c
 29343  016388  0012               	return	
 29344  01638A  D7EB               	goto	l237
 29345  01638C                     __end_of_LED_Toggle:
 29346                           	opt stack 0
 29347                           tosu	equ	0xFFF
 29348                           tosh	equ	0xFFE
 29349                           tosl	equ	0xFFD
 29350                           pclath	equ	0xFFA
 29351                           tblptru	equ	0xFF8
 29352                           tblptrh	equ	0xFF7
 29353                           tblptrl	equ	0xFF6
 29354                           tablat	equ	0xFF5
 29355                           prodh	equ	0xFF4
 29356                           prodl	equ	0xFF3
 29357                           intcon	equ	0xFF2
 29358                           postinc0	equ	0xFEE
 29359                           wreg	equ	0xFE8
 29360                           indf1	equ	0xFE7
 29361                           postdec1	equ	0xFE5
 29362                           fsr1h	equ	0xFE2
 29363                           fsr1l	equ	0xFE1
 29364                           indf2	equ	0xFDF
 29365                           postinc2	equ	0xFDE
 29366                           postdec2	equ	0xFDD
 29367                           plusw2	equ	0xFDB
 29368                           fsr2h	equ	0xFDA
 29369                           fsr2l	equ	0xFD9
 29370                           status	equ	0xFD8
 29371                           
 29372 ;; *************** function _Port_TogglePin *****************
 29373 ;; Defined at:
 29374 ;;		line 278 in file "Library/Port.c"
 29375 ;; Parameters:    Size  Location     Type
 29376 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 29377 ;;		 -> PortC(10), 
 29378 ;;  pPin            1   22[BANK0 ] enum E6750
 29379 ;; Auto vars:     Size  Location     Type
 29380 ;;  Value           1   23[BANK0 ] unsigned char 
 29381 ;; Return value:  Size  Location     Type
 29382 ;;                  1    wreg      void 
 29383 ;; Registers used:
 29384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29385 ;; Tracked objects:
 29386 ;;		On entry : 0/0
 29387 ;;		On exit  : 0/0
 29388 ;;		Unchanged: 0/0
 29389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29390 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29393 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29394 ;;Total ram usage:        4 bytes
 29395 ;; Hardware stack levels used:    1
 29396 ;; Hardware stack levels required when called:   11
 29397 ;; This function calls:
 29398 ;;		_Port_GetPin
 29399 ;;		_Port_SetPin
 29400 ;; This function is called by:
 29401 ;;		_LED_Toggle
 29402 ;; This function uses a non-reentrant model
 29403 ;;
 29404                           
 29405                           	psect	text150
 29406  01684A                     __ptext150:
 29407                           	opt stack 0
 29408  01684A                     _Port_TogglePin:
 29409                           	opt stack 13
 29410                           
 29411                           ;Port.c: 280: UINT8 Value;
 29412                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 29413                           
 29414                           ;incstack = 0
 29415  01684A  C0CD  F0B9         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 29416  01684E  C0CE  F0BA         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 29417  016852  C0CF  F0BB         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 29418  016856  EC0C  F0B2         	call	_Port_GetPin	;wreg free
 29419  01685A  0100               	movlb	0	; () banked
 29420  01685C  6FD0               	movwf	Port_TogglePin@Value& (0+255),b
 29421                           
 29422                           ; BSR set to: 0
 29423                           ;Port.c: 282: Value ^= 0x01;
 29424  01685E  0E01               	movlw	1
 29425  016860  0100               	movlb	0	; () banked
 29426  016862  1BD0               	xorwf	Port_TogglePin@Value& (0+255),f,b
 29427                           
 29428                           ; BSR set to: 0
 29429                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 29430  016864  C0CD  F0C8         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 29431  016868  C0CE  F0C9         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 29432  01686C  C0CF  F0CA         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 29433  016870  C0D0  F0CB         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 29434  016874  ECFC  F0A2         	call	_Port_SetPin	;wreg free
 29435  016878  0012               	return		;funcret
 29436  01687A                     __end_of_Port_TogglePin:
 29437                           	opt stack 0
 29438                           tosu	equ	0xFFF
 29439                           tosh	equ	0xFFE
 29440                           tosl	equ	0xFFD
 29441                           pclath	equ	0xFFA
 29442                           tblptru	equ	0xFF8
 29443                           tblptrh	equ	0xFF7
 29444                           tblptrl	equ	0xFF6
 29445                           tablat	equ	0xFF5
 29446                           prodh	equ	0xFF4
 29447                           prodl	equ	0xFF3
 29448                           intcon	equ	0xFF2
 29449                           postinc0	equ	0xFEE
 29450                           wreg	equ	0xFE8
 29451                           indf1	equ	0xFE7
 29452                           postdec1	equ	0xFE5
 29453                           fsr1h	equ	0xFE2
 29454                           fsr1l	equ	0xFE1
 29455                           indf2	equ	0xFDF
 29456                           postinc2	equ	0xFDE
 29457                           postdec2	equ	0xFDD
 29458                           plusw2	equ	0xFDB
 29459                           fsr2h	equ	0xFDA
 29460                           fsr2l	equ	0xFD9
 29461                           status	equ	0xFD8
 29462                           
 29463 ;; *************** function _Port_SetPin *****************
 29464 ;; Defined at:
 29465 ;;		line 247 in file "Library/Port.c"
 29466 ;; Parameters:    Size  Location     Type
 29467 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 29468 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29469 ;;  pPin            1   17[BANK0 ] enum E6750
 29470 ;;  pValue          1   18[BANK0 ] unsigned char 
 29471 ;; Auto vars:     Size  Location     Type
 29472 ;;  Type            1   19[BANK0 ] enum E6795
 29473 ;; Return value:  Size  Location     Type
 29474 ;;                  1    wreg      void 
 29475 ;; Registers used:
 29476 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29477 ;; Tracked objects:
 29478 ;;		On entry : 0/0
 29479 ;;		On exit  : 0/0
 29480 ;;		Unchanged: 0/0
 29481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29482 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29485 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29486 ;;Total ram usage:        5 bytes
 29487 ;; Hardware stack levels used:    1
 29488 ;; Hardware stack levels required when called:   10
 29489 ;; This function calls:
 29490 ;;		_Byte_SetBit
 29491 ;;		_Word_GetPair
 29492 ;; This function is called by:
 29493 ;;		_Reset_Low
 29494 ;;		_Reset_High
 29495 ;;		_LED_Set
 29496 ;;		_Port_TogglePin
 29497 ;;		_Motor_Init
 29498 ;;		_Motor_Step
 29499 ;;		_MXK_Init
 29500 ;; This function uses a non-reentrant model
 29501 ;;
 29502                           
 29503                           	psect	text151
 29504  0145F8                     __ptext151:
 29505                           	opt stack 0
 29506  0145F8                     _Port_SetPin:
 29507                           	opt stack 13
 29508                           
 29509                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29510                           
 29511                           ;incstack = 0
 29512  0145F8  0E08               	movlw	8
 29513  0145FA  0100               	movlb	0	; () banked
 29514  0145FC  25C8               	addwf	Port_SetPin@pInput& (0+255),w,b
 29515  0145FE  0100               	movlb	0	; () banked
 29516  014600  6FC5               	movwf	Word_GetPair@pInput& (0+255),b
 29517  014602  0E00               	movlw	0
 29518  014604  0100               	movlb	0	; () banked
 29519  014606  21C9               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 29520  014608  0100               	movlb	0	; () banked
 29521  01460A  6FC6               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 29522  01460C  C0CA  F0C7         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 29523  014610  EC0F  F0B3         	call	_Word_GetPair	;wreg free
 29524  014614  0100               	movlb	0	; () banked
 29525  014616  6FCC               	movwf	Port_SetPin@Type& (0+255),b
 29526                           
 29527                           ;Port.c: 250: switch (Type)
 29528  014618  D042               	goto	l427
 29529  01461A                     
 29530                           ; BSR set to: 0
 29531                           ;Port.c: 256: pValue &= 1;
 29532                           
 29533                           ; BSR set to: 0
 29534  01461A  0E01               	movlw	1
 29535  01461C  0100               	movlb	0	; () banked
 29536  01461E  17CB               	andwf	Port_SetPin@pValue& (0+255),f,b
 29537                           
 29538                           ; BSR set to: 0
 29539                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29540  014620  0100               	movlb	0	; () banked
 29541  014622  EE20 F002          	lfsr	2,2
 29542  014626  51C8               	movf	Port_SetPin@pInput& (0+255),w,b
 29543  014628  26D9               	addwf	fsr2l,f,c
 29544  01462A  51C9               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29545  01462C  22DA               	addwfc	fsr2h,f,c
 29546  01462E  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 29547  014632  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 29548  014636  C0CA  F0BB         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29549  01463A  C0CB  F0BC         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29550  01463E  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 29551                           
 29552                           ;Port.c: 258: break;
 29553  014642  0012               	return	
 29554  014644                     
 29555                           ;Port.c: 261: pValue &= 1;
 29556  014644  0E01               	movlw	1
 29557  014646  0100               	movlb	0	; () banked
 29558  014648  17CB               	andwf	Port_SetPin@pValue& (0+255),f,b
 29559                           
 29560                           ;Port.c: 262: pValue ^= 1;
 29561  01464A  0E01               	movlw	1
 29562  01464C  0100               	movlb	0	; () banked
 29563  01464E  1BCB               	xorwf	Port_SetPin@pValue& (0+255),f,b
 29564                           
 29565                           ; BSR set to: 0
 29566                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29567  014650  0100               	movlb	0	; () banked
 29568  014652  EE20 F002          	lfsr	2,2
 29569  014656  51C8               	movf	Port_SetPin@pInput& (0+255),w,b
 29570  014658  26D9               	addwf	fsr2l,f,c
 29571  01465A  51C9               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29572  01465C  22DA               	addwfc	fsr2h,f,c
 29573  01465E  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 29574  014662  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 29575  014666  C0CA  F0BB         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29576  01466A  C0CB  F0BC         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29577  01466E  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 29578                           
 29579                           ;Port.c: 264: break;
 29580  014672  0012               	return	
 29581  014674                     
 29582                           ;Port.c: 266: pValue &= 1;
 29583  014674  0E01               	movlw	1
 29584  014676  0100               	movlb	0	; () banked
 29585  014678  17CB               	andwf	Port_SetPin@pValue& (0+255),f,b
 29586                           
 29587                           ; BSR set to: 0
 29588                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29589  01467A  0100               	movlb	0	; () banked
 29590  01467C  EE20 F004          	lfsr	2,4
 29591  014680  51C8               	movf	Port_SetPin@pInput& (0+255),w,b
 29592  014682  26D9               	addwf	fsr2l,f,c
 29593  014684  51C9               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 29594  014686  22DA               	addwfc	fsr2h,f,c
 29595  014688  CFDE F0B9          	movff	postinc2,Byte_SetBit@pInput
 29596  01468C  CFDD F0BA          	movff	postdec2,Byte_SetBit@pInput+1
 29597  014690  C0CA  F0BB         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 29598  014694  C0CB  F0BC         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 29599  014698  EC2A  F0AF         	call	_Byte_SetBit	;wreg free
 29600                           
 29601                           ;Port.c: 269: }
 29602                           
 29603                           ;Port.c: 268: break;
 29604  01469C  0012               	return	
 29605  01469E                     l427:
 29606  01469E  0100               	movlb	0	; () banked
 29607  0146A0  51CC               	movf	Port_SetPin@Type& (0+255),w,b
 29608                           
 29609                           ; Switch size 1, requested type "space"
 29610                           ; Number of cases is 4, Range of values is 0 to 3
 29611                           ; switch strategies available:
 29612                           ; Name         Instructions Cycles
 29613                           ; simple_byte           13     7 (average)
 29614                           ;	Chosen strategy is simple_byte
 29615  0146A2  0A00               	xorlw	0	; case 0
 29616  0146A4  B4D8               	btfsc	status,2,c
 29617  0146A6  0012               	return	
 29618  0146A8  0A01               	xorlw	1	; case 1
 29619  0146AA  B4D8               	btfsc	status,2,c
 29620  0146AC  D7B6               	goto	l430
 29621  0146AE  0A03               	xorlw	3	; case 2
 29622  0146B0  B4D8               	btfsc	status,2,c
 29623  0146B2  D7C8               	goto	l432
 29624  0146B4  0A01               	xorlw	1	; case 3
 29625  0146B6  A4D8               	btfss	status,2,c
 29626  0146B8  0012               	return	
 29627  0146BA  D7DC               	goto	l433
 29628  0146BC                     __end_of_Port_SetPin:
 29629                           	opt stack 0
 29630                           tosu	equ	0xFFF
 29631                           tosh	equ	0xFFE
 29632                           tosl	equ	0xFFD
 29633                           pclath	equ	0xFFA
 29634                           tblptru	equ	0xFF8
 29635                           tblptrh	equ	0xFF7
 29636                           tblptrl	equ	0xFF6
 29637                           tablat	equ	0xFF5
 29638                           prodh	equ	0xFF4
 29639                           prodl	equ	0xFF3
 29640                           intcon	equ	0xFF2
 29641                           postinc0	equ	0xFEE
 29642                           wreg	equ	0xFE8
 29643                           indf1	equ	0xFE7
 29644                           postdec1	equ	0xFE5
 29645                           fsr1h	equ	0xFE2
 29646                           fsr1l	equ	0xFE1
 29647                           indf2	equ	0xFDF
 29648                           postinc2	equ	0xFDE
 29649                           postdec2	equ	0xFDD
 29650                           plusw2	equ	0xFDB
 29651                           fsr2h	equ	0xFDA
 29652                           fsr2l	equ	0xFD9
 29653                           status	equ	0xFD8
 29654                           
 29655 ;; *************** function _Word_GetPair *****************
 29656 ;; Defined at:
 29657 ;;		line 156 in file "Library/Types.c"
 29658 ;; Parameters:    Size  Location     Type
 29659 ;;  pInput          2   12[BANK0 ] PTR struct Word
 29660 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29661 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29662 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29663 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29664 ;;  pPair           1   14[BANK0 ] unsigned char 
 29665 ;; Auto vars:     Size  Location     Type
 29666 ;;		None
 29667 ;; Return value:  Size  Location     Type
 29668 ;;                  1    wreg      unsigned char 
 29669 ;; Registers used:
 29670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29671 ;; Tracked objects:
 29672 ;;		On entry : 0/0
 29673 ;;		On exit  : 0/0
 29674 ;;		Unchanged: 0/0
 29675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29676 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29679 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29680 ;;Total ram usage:        3 bytes
 29681 ;; Hardware stack levels used:    1
 29682 ;; Hardware stack levels required when called:    9
 29683 ;; This function calls:
 29684 ;;		_Byte_GetPair
 29685 ;; This function is called by:
 29686 ;;		_Port_Init
 29687 ;;		_Port_SetPin
 29688 ;;		_Port_Set
 29689 ;;		_PortProperty_Valid
 29690 ;;		_Port_SetPair
 29691 ;;		_Port_SetQuad
 29692 ;; This function uses a non-reentrant model
 29693 ;;
 29694                           
 29695                           	psect	text152
 29696  01661E                     __ptext152:
 29697                           	opt stack 0
 29698  01661E                     _Word_GetPair:
 29699                           	opt stack 13
 29700                           
 29701                           ;Types.c: 158: if (pPair >= 4)
 29702                           
 29703                           ;incstack = 0
 29704  01661E  0E03               	movlw	3
 29705  016620  0100               	movlb	0	; () banked
 29706  016622  65C7               	cpfsgt	Word_GetPair@pPair& (0+255),b
 29707  016624  D012               	goto	l781
 29708                           
 29709                           ; BSR set to: 0
 29710                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29711  016626  0E01               	movlw	1
 29712  016628  0100               	movlb	0	; () banked
 29713  01662A  25C5               	addwf	Word_GetPair@pInput& (0+255),w,b
 29714  01662C  0100               	movlb	0	; () banked
 29715  01662E  6FC2               	movwf	Byte_GetPair@pInput& (0+255),b
 29716  016630  0E00               	movlw	0
 29717  016632  0100               	movlb	0	; () banked
 29718  016634  21C6               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 29719  016636  0100               	movlb	0	; () banked
 29720  016638  6FC3               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 29721  01663A  0100               	movlb	0	; () banked
 29722  01663C  51C7               	movf	Word_GetPair@pPair& (0+255),w,b
 29723  01663E  0FFC               	addlw	252
 29724  016640  0100               	movlb	0	; () banked
 29725  016642  6FC4               	movwf	Byte_GetPair@pPair& (0+255),b
 29726  016644  EC80  F0B5         	call	_Byte_GetPair	;wreg free
 29727  016648  0012               	return	
 29728  01664A                     l781:
 29729                           
 29730                           ;Types.c: 160: else
 29731                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29732  01664A  C0C5  F0C2         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 29733  01664E  C0C6  F0C3         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 29734  016652  C0C7  F0C4         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 29735  016656  EC80  F0B5         	call	_Byte_GetPair	;wreg free
 29736  01665A  0012               	return	
 29737  01665C                     __end_of_Word_GetPair:
 29738                           	opt stack 0
 29739                           tosu	equ	0xFFF
 29740                           tosh	equ	0xFFE
 29741                           tosl	equ	0xFFD
 29742                           pclath	equ	0xFFA
 29743                           tblptru	equ	0xFF8
 29744                           tblptrh	equ	0xFF7
 29745                           tblptrl	equ	0xFF6
 29746                           tablat	equ	0xFF5
 29747                           prodh	equ	0xFF4
 29748                           prodl	equ	0xFF3
 29749                           intcon	equ	0xFF2
 29750                           postinc0	equ	0xFEE
 29751                           wreg	equ	0xFE8
 29752                           indf1	equ	0xFE7
 29753                           postdec1	equ	0xFE5
 29754                           fsr1h	equ	0xFE2
 29755                           fsr1l	equ	0xFE1
 29756                           indf2	equ	0xFDF
 29757                           postinc2	equ	0xFDE
 29758                           postdec2	equ	0xFDD
 29759                           plusw2	equ	0xFDB
 29760                           fsr2h	equ	0xFDA
 29761                           fsr2l	equ	0xFD9
 29762                           status	equ	0xFD8
 29763                           
 29764 ;; *************** function _Byte_GetPair *****************
 29765 ;; Defined at:
 29766 ;;		line 87 in file "Library/Types.c"
 29767 ;; Parameters:    Size  Location     Type
 29768 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 29769 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29770 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29771 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29772 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29773 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29774 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29775 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29776 ;;		 -> NULL(0), 
 29777 ;;  pPair           1   11[BANK0 ] unsigned char 
 29778 ;; Auto vars:     Size  Location     Type
 29779 ;;		None
 29780 ;; Return value:  Size  Location     Type
 29781 ;;                  1    wreg      unsigned char 
 29782 ;; Registers used:
 29783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29784 ;; Tracked objects:
 29785 ;;		On entry : 0/0
 29786 ;;		On exit  : 0/0
 29787 ;;		Unchanged: 0/0
 29788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29789 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29793 ;;Total ram usage:        3 bytes
 29794 ;; Hardware stack levels used:    1
 29795 ;; Hardware stack levels required when called:    8
 29796 ;; This function calls:
 29797 ;;		_Byte_GetZone
 29798 ;; This function is called by:
 29799 ;;		_Word_GetPair
 29800 ;; This function uses a non-reentrant model
 29801 ;;
 29802                           
 29803                           	psect	text153
 29804  016B00                     __ptext153:
 29805                           	opt stack 0
 29806  016B00                     _Byte_GetPair:
 29807                           	opt stack 13
 29808                           
 29809                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29810                           
 29811                           ;incstack = 0
 29812  016B00  C0C2  F0B9         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 29813  016B04  C0C3  F0BA         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 29814  016B08  0E04               	movlw	4
 29815  016B0A  0100               	movlb	0	; () banked
 29816  016B0C  6FBB               	movwf	Byte_GetZone@pMax& (0+255),b
 29817  016B0E  C0C4  F0BC         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 29818  016B12  0E02               	movlw	2
 29819  016B14  0100               	movlb	0	; () banked
 29820  016B16  6FBD               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 29821  016B18  EC2B  F0A9         	call	_Byte_GetZone	;wreg free
 29822  016B1C  0012               	return	
 29823  016B1E                     __end_of_Byte_GetPair:
 29824                           	opt stack 0
 29825                           tosu	equ	0xFFF
 29826                           tosh	equ	0xFFE
 29827                           tosl	equ	0xFFD
 29828                           pclath	equ	0xFFA
 29829                           tblptru	equ	0xFF8
 29830                           tblptrh	equ	0xFF7
 29831                           tblptrl	equ	0xFF6
 29832                           tablat	equ	0xFF5
 29833                           prodh	equ	0xFF4
 29834                           prodl	equ	0xFF3
 29835                           intcon	equ	0xFF2
 29836                           postinc0	equ	0xFEE
 29837                           wreg	equ	0xFE8
 29838                           indf1	equ	0xFE7
 29839                           postdec1	equ	0xFE5
 29840                           fsr1h	equ	0xFE2
 29841                           fsr1l	equ	0xFE1
 29842                           indf2	equ	0xFDF
 29843                           postinc2	equ	0xFDE
 29844                           postdec2	equ	0xFDD
 29845                           plusw2	equ	0xFDB
 29846                           fsr2h	equ	0xFDA
 29847                           fsr2l	equ	0xFD9
 29848                           status	equ	0xFD8
 29849                           
 29850 ;; *************** function _Byte_GetZone *****************
 29851 ;; Defined at:
 29852 ;;		line 64 in file "Library/Types.c"
 29853 ;; Parameters:    Size  Location     Type
 29854 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 29855 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29856 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29857 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29858 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29859 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29860 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29861 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29862 ;;		 -> NULL(0), 
 29863 ;;  pMax            1    2[BANK0 ] unsigned char 
 29864 ;;  pChunk          1    3[BANK0 ] unsigned char 
 29865 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 29866 ;; Auto vars:     Size  Location     Type
 29867 ;;  Output          1    8[BANK0 ] unsigned char 
 29868 ;;  Offset          1    7[BANK0 ] unsigned char 
 29869 ;;  MASK            1    6[BANK0 ] unsigned char 
 29870 ;; Return value:  Size  Location     Type
 29871 ;;                  1    wreg      unsigned char 
 29872 ;; Registers used:
 29873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29874 ;; Tracked objects:
 29875 ;;		On entry : 0/0
 29876 ;;		On exit  : 0/0
 29877 ;;		Unchanged: 0/0
 29878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29879 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29880 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29882 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29883 ;;Total ram usage:        9 bytes
 29884 ;; Hardware stack levels used:    1
 29885 ;; Hardware stack levels required when called:    7
 29886 ;; This function calls:
 29887 ;;		Nothing
 29888 ;; This function is called by:
 29889 ;;		_Byte_GetPair
 29890 ;;		_Byte_GetTriple
 29891 ;;		_Byte_GetQuad
 29892 ;; This function uses a non-reentrant model
 29893 ;;
 29894                           
 29895                           	psect	text154
 29896  015256                     __ptext154:
 29897                           	opt stack 0
 29898  015256                     _Byte_GetZone:
 29899                           	opt stack 13
 29900                           
 29901                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29902                           
 29903                           ;incstack = 0
 29904  015256  C0B9  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 29905  01525A  C0BA  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 29906  01525E  0E00               	movlw	low (__mediumconst shr (0+16))
 29907  015260  6EF8               	movwf	tblptru,c
 29908  015262  0E0F               	movlw	(high __ramtop+-1)
 29909  015264  64F7               	cpfsgt	tblptrh,c
 29910  015266  D003               	bra	u9107
 29911  015268  0008               	tblrd		*
 29912  01526A  50F5               	movf	tablat,w,c
 29913  01526C  D005               	bra	u9100
 29914  01526E                     u9107:
 29915  01526E  CFF6 FFE9          	movff	tblptrl,fsr0l
 29916  015272  CFF7 FFEA          	movff	tblptrh,fsr0h
 29917  015276  50EF               	movf	indf0,w,c
 29918  015278                     u9100:
 29919  015278  0100               	movlb	0	; () banked
 29920  01527A  6FC1               	movwf	Byte_GetZone@Output& (0+255),b
 29921                           
 29922                           ; BSR set to: 0
 29923                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29924  01527C  0100               	movlb	0	; () banked
 29925  01527E  51BD               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29926  015280  0D01               	mullw	1
 29927  015282  0E0F               	movlw	low _MASKS
 29928  015284  24F3               	addwf	prodl,w,c
 29929  015286  6EF6               	movwf	tblptrl,c
 29930  015288  0EFD               	movlw	high _MASKS
 29931  01528A  20F4               	addwfc	prodh,w,c
 29932  01528C  6EF7               	movwf	tblptrh,c
 29933  01528E                     	if	1	;There are 3 active tblptr bytes
 29934  01528E  6AF8               	clrf	tblptru,c
 29935  015290  0E00               	movlw	low (__mediumconst shr (0+16))
 29936  015292  22F8               	addwfc	tblptru,f,c
 29937  015294                     	endif
 29938  015294  0008               	tblrd		*
 29939  015296  CFF5 F0BF          	movff	tablat,Byte_GetZone@MASK
 29940                           
 29941                           ; BSR set to: 0
 29942                           ;Types.c: 68: UINT8 Offset = 0;
 29943  01529A  0E00               	movlw	0
 29944  01529C  0100               	movlb	0	; () banked
 29945  01529E  6FC0               	movwf	Byte_GetZone@Offset& (0+255),b
 29946                           
 29947                           ;Types.c: 70: while (pChunk >= pMax)
 29948  0152A0  D006               	goto	l732
 29949  0152A2                     
 29950                           ; BSR set to: 0
 29951                           ;Types.c: 71: {
 29952                           ;Types.c: 72: pChunk -= pMax;
 29953                           
 29954                           ; BSR set to: 0
 29955  0152A2  0100               	movlb	0	; () banked
 29956  0152A4  51BB               	movf	Byte_GetZone@pMax& (0+255),w,b
 29957  0152A6  0100               	movlb	0	; () banked
 29958  0152A8  5FBC               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 29959                           
 29960                           ; BSR set to: 0
 29961                           ;Types.c: 73: Offset += 1;
 29962  0152AA  0100               	movlb	0	; () banked
 29963  0152AC  2BC0               	incf	Byte_GetZone@Offset& (0+255),f,b
 29964  0152AE                     l732:
 29965                           
 29966                           ; BSR set to: 0
 29967                           
 29968                           ; BSR set to: 0
 29969  0152AE  0100               	movlb	0	; () banked
 29970  0152B0  51BB               	movf	Byte_GetZone@pMax& (0+255),w,b
 29971  0152B2  0100               	movlb	0	; () banked
 29972  0152B4  5DBC               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 29973  0152B6  B0D8               	btfsc	status,0,c
 29974  0152B8  D7F4               	goto	l733
 29975                           
 29976                           ; BSR set to: 0
 29977                           ;Types.c: 74: }
 29978                           ;Types.c: 75: pChunk *= pChunkSize;
 29979                           
 29980                           ; BSR set to: 0
 29981  0152BA  0100               	movlb	0	; () banked
 29982  0152BC  51BD               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29983  0152BE  0100               	movlb	0	; () banked
 29984  0152C0  03BC               	mulwf	Byte_GetZone@pChunk& (0+255),b
 29985  0152C2  50F3               	movf	prodl,w,c
 29986  0152C4  6FBC               	movwf	Byte_GetZone@pChunk& (0+255),b
 29987                           
 29988                           ; BSR set to: 0
 29989                           ;Types.c: 76: pChunk += Offset;
 29990  0152C6  0100               	movlb	0	; () banked
 29991  0152C8  51C0               	movf	Byte_GetZone@Offset& (0+255),w,b
 29992  0152CA  0100               	movlb	0	; () banked
 29993  0152CC  27BC               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 29994                           
 29995                           ; BSR set to: 0
 29996                           ;Types.c: 78: Output >>= pChunk;
 29997  0152CE  0100               	movlb	0	; () banked
 29998  0152D0  29BC               	incf	Byte_GetZone@pChunk& (0+255),w,b
 29999  0152D2  0100               	movlb	0	; () banked
 30000  0152D4  6FBE               	movwf	??_Byte_GetZone& (0+255),b
 30001  0152D6  D003               	goto	u9120
 30002  0152D8                     u9125:
 30003  0152D8  0100               	movlb	0	; () banked
 30004  0152DA  90D8               	bcf	status,0,c
 30005  0152DC  33C1               	rrcf	Byte_GetZone@Output& (0+255),f,b
 30006  0152DE                     u9120:
 30007  0152DE  0100               	movlb	0	; () banked
 30008  0152E0  2FBE               	decfsz	??_Byte_GetZone& (0+255),f,b
 30009  0152E2  D7FA               	goto	u9125
 30010                           
 30011                           ;Types.c: 79: Output &= MASK;
 30012  0152E4  0100               	movlb	0	; () banked
 30013  0152E6  51BF               	movf	Byte_GetZone@MASK& (0+255),w,b
 30014  0152E8  0100               	movlb	0	; () banked
 30015  0152EA  17C1               	andwf	Byte_GetZone@Output& (0+255),f,b
 30016                           
 30017                           ; BSR set to: 0
 30018                           ;Types.c: 80: return Output;
 30019  0152EC  0100               	movlb	0	; () banked
 30020  0152EE  51C1               	movf	Byte_GetZone@Output& (0+255),w,b
 30021  0152F0  0012               	return	
 30022  0152F2                     __end_of_Byte_GetZone:
 30023                           	opt stack 0
 30024                           tosu	equ	0xFFF
 30025                           tosh	equ	0xFFE
 30026                           tosl	equ	0xFFD
 30027                           pclath	equ	0xFFA
 30028                           tblptru	equ	0xFF8
 30029                           tblptrh	equ	0xFF7
 30030                           tblptrl	equ	0xFF6
 30031                           tablat	equ	0xFF5
 30032                           prodh	equ	0xFF4
 30033                           prodl	equ	0xFF3
 30034                           intcon	equ	0xFF2
 30035                           indf0	equ	0xFEF
 30036                           postinc0	equ	0xFEE
 30037                           fsr0h	equ	0xFEA
 30038                           fsr0l	equ	0xFE9
 30039                           wreg	equ	0xFE8
 30040                           indf1	equ	0xFE7
 30041                           postdec1	equ	0xFE5
 30042                           fsr1h	equ	0xFE2
 30043                           fsr1l	equ	0xFE1
 30044                           indf2	equ	0xFDF
 30045                           postinc2	equ	0xFDE
 30046                           postdec2	equ	0xFDD
 30047                           plusw2	equ	0xFDB
 30048                           fsr2h	equ	0xFDA
 30049                           fsr2l	equ	0xFD9
 30050                           status	equ	0xFD8
 30051                           
 30052 ;; *************** function _Byte_SetBit *****************
 30053 ;; Defined at:
 30054 ;;		line 32 in file "Library/Types.c"
 30055 ;; Parameters:    Size  Location     Type
 30056 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 30057 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30058 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30059 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30060 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30061 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30062 ;;		 -> NULL(0), 
 30063 ;;  pBit            1    2[BANK0 ] unsigned char 
 30064 ;;  pValue          1    3[BANK0 ] unsigned char 
 30065 ;; Auto vars:     Size  Location     Type
 30066 ;;		None
 30067 ;; Return value:  Size  Location     Type
 30068 ;;                  1    wreg      void 
 30069 ;; Registers used:
 30070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30071 ;; Tracked objects:
 30072 ;;		On entry : 0/0
 30073 ;;		On exit  : 0/0
 30074 ;;		Unchanged: 0/0
 30075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30076 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30078 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30079 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30080 ;;Total ram usage:        7 bytes
 30081 ;; Hardware stack levels used:    1
 30082 ;; Hardware stack levels required when called:    7
 30083 ;; This function calls:
 30084 ;;		Nothing
 30085 ;; This function is called by:
 30086 ;;		_Port_SetPinType
 30087 ;;		_Port_SetPin
 30088 ;;		_SPI_Init
 30089 ;;		_SPI_MinSpeed
 30090 ;;		_SPI_MaxSpeed
 30091 ;;		_Word_SetBit
 30092 ;;		_I2C_Init
 30093 ;; This function uses a non-reentrant model
 30094 ;;
 30095                           
 30096                           	psect	text155
 30097  015E54                     __ptext155:
 30098                           	opt stack 0
 30099  015E54                     _Byte_SetBit:
 30100                           	opt stack 15
 30101                           
 30102                           ;Types.c: 34: pValue &= 1;
 30103                           
 30104                           ; BSR set to: 0
 30105                           ;incstack = 0
 30106  015E54  0E01               	movlw	1
 30107  015E56  0100               	movlb	0	; () banked
 30108  015E58  17BC               	andwf	Byte_SetBit@pValue& (0+255),f,b
 30109                           
 30110                           ; BSR set to: 0
 30111                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30112  015E5A  C0BB  F0BD         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 30113  015E5E  0E01               	movlw	1
 30114  015E60  0100               	movlb	0	; () banked
 30115  015E62  6FBE               	movwf	(??_Byte_SetBit+1)& (0+255),b
 30116  015E64  0100               	movlb	0	; () banked
 30117  015E66  2BBD               	incf	??_Byte_SetBit& (0+255),f,b
 30118  015E68  D003               	goto	u9144
 30119  015E6A                     u9145:
 30120  015E6A  0100               	movlb	0	; () banked
 30121  015E6C  90D8               	bcf	status,0,c
 30122  015E6E  37BE               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 30123  015E70                     u9144:
 30124  015E70  0100               	movlb	0	; () banked
 30125  015E72  2FBD               	decfsz	??_Byte_SetBit& (0+255),f,b
 30126  015E74  D7FA               	goto	u9145
 30127  015E76  0100               	movlb	0	; () banked
 30128  015E78  51BE               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 30129  015E7A  0AFF               	xorlw	255
 30130  015E7C  0100               	movlb	0	; () banked
 30131  015E7E  6FBF               	movwf	(??_Byte_SetBit+2)& (0+255),b
 30132  015E80  C0B9  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 30133  015E84  C0BA  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 30134  015E88  0100               	movlb	0	; () banked
 30135  015E8A  51BF               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 30136  015E8C  16DF               	andwf	indf2,f,c
 30137                           
 30138                           ; BSR set to: 0
 30139                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30140  015E8E  C0BB  F0BD         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 30141  015E92  C0BC  F0BE         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 30142  015E96  0100               	movlb	0	; () banked
 30143  015E98  2BBD               	incf	??_Byte_SetBit& (0+255),f,b
 30144  015E9A  D003               	goto	u9154
 30145  015E9C                     u9155:
 30146  015E9C  0100               	movlb	0	; () banked
 30147  015E9E  90D8               	bcf	status,0,c
 30148  015EA0  37BE               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 30149  015EA2                     u9154:
 30150  015EA2  0100               	movlb	0	; () banked
 30151  015EA4  2FBD               	decfsz	??_Byte_SetBit& (0+255),f,b
 30152  015EA6  D7FA               	goto	u9155
 30153  015EA8  C0B9  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 30154  015EAC  C0BA  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 30155  015EB0  0100               	movlb	0	; () banked
 30156  015EB2  51BE               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 30157  015EB4  12DF               	iorwf	indf2,f,c
 30158                           
 30159                           ; BSR set to: 0
 30160  015EB6  0012               	return		;funcret
 30161  015EB8                     __end_of_Byte_SetBit:
 30162                           	opt stack 0
 30163                           tosu	equ	0xFFF
 30164                           tosh	equ	0xFFE
 30165                           tosl	equ	0xFFD
 30166                           pclath	equ	0xFFA
 30167                           tblptru	equ	0xFF8
 30168                           tblptrh	equ	0xFF7
 30169                           tblptrl	equ	0xFF6
 30170                           tablat	equ	0xFF5
 30171                           prodh	equ	0xFF4
 30172                           prodl	equ	0xFF3
 30173                           intcon	equ	0xFF2
 30174                           indf0	equ	0xFEF
 30175                           postinc0	equ	0xFEE
 30176                           fsr0h	equ	0xFEA
 30177                           fsr0l	equ	0xFE9
 30178                           wreg	equ	0xFE8
 30179                           indf1	equ	0xFE7
 30180                           postdec1	equ	0xFE5
 30181                           fsr1h	equ	0xFE2
 30182                           fsr1l	equ	0xFE1
 30183                           indf2	equ	0xFDF
 30184                           postinc2	equ	0xFDE
 30185                           postdec2	equ	0xFDD
 30186                           plusw2	equ	0xFDB
 30187                           fsr2h	equ	0xFDA
 30188                           fsr2l	equ	0xFD9
 30189                           status	equ	0xFD8
 30190                           
 30191 ;; *************** function _Port_GetPin *****************
 30192 ;; Defined at:
 30193 ;;		line 271 in file "Library/Port.c"
 30194 ;; Parameters:    Size  Location     Type
 30195 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 30196 ;;		 -> PortB(10), PortE(10), PortC(10), 
 30197 ;;  pPin            1    2[BANK0 ] enum E6750
 30198 ;; Auto vars:     Size  Location     Type
 30199 ;;  Output          1    5[BANK0 ] unsigned char 
 30200 ;; Return value:  Size  Location     Type
 30201 ;;                  1    wreg      unsigned char 
 30202 ;; Registers used:
 30203 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30204 ;; Tracked objects:
 30205 ;;		On entry : 0/0
 30206 ;;		On exit  : 0/0
 30207 ;;		Unchanged: 0/0
 30208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30209 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30212 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30213 ;;Total ram usage:        6 bytes
 30214 ;; Hardware stack levels used:    1
 30215 ;; Hardware stack levels required when called:    7
 30216 ;; This function calls:
 30217 ;;		Nothing
 30218 ;; This function is called by:
 30219 ;;		_Port_TogglePin
 30220 ;;		_HMI_LeftSwitch
 30221 ;;		_HMI_RightSwitch
 30222 ;;		_HMI_UpSwitch
 30223 ;;		_HMI_DownSwitch
 30224 ;;		_MXK_TestButton
 30225 ;; This function uses a non-reentrant model
 30226 ;;
 30227                           
 30228                           	psect	text156
 30229  016418                     __ptext156:
 30230                           	opt stack 0
 30231  016418                     _Port_GetPin:
 30232                           	opt stack 18
 30233                           
 30234                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 30235                           
 30236                           ; BSR set to: 0
 30237                           ;incstack = 0
 30238  016418  0100               	movlb	0	; () banked
 30239  01641A  EE20 F006          	lfsr	2,6
 30240  01641E  51B9               	movf	Port_GetPin@pInput& (0+255),w,b
 30241  016420  26D9               	addwf	fsr2l,f,c
 30242  016422  51BA               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 30243  016424  22DA               	addwfc	fsr2h,f,c
 30244  016426  CFDE F0BC          	movff	postinc2,??_Port_GetPin
 30245  01642A  CFDD F0BD          	movff	postdec2,??_Port_GetPin+1
 30246  01642E  C0BC  FFD9         	movff	??_Port_GetPin,fsr2l
 30247  016432  C0BD  FFDA         	movff	??_Port_GetPin+1,fsr2h
 30248  016436  50DF               	movf	indf2,w,c
 30249  016438  0100               	movlb	0	; () banked
 30250  01643A  6FBE               	movwf	Port_GetPin@Output& (0+255),b
 30251                           
 30252                           ; BSR set to: 0
 30253                           ;Port.c: 274: Output >>= (UINT8)pPin;
 30254  01643C  0100               	movlb	0	; () banked
 30255  01643E  29BB               	incf	Port_GetPin@pPin& (0+255),w,b
 30256  016440  0100               	movlb	0	; () banked
 30257  016442  6FBC               	movwf	??_Port_GetPin& (0+255),b
 30258  016444  D003               	goto	u9190
 30259  016446                     u9195:
 30260  016446  0100               	movlb	0	; () banked
 30261  016448  90D8               	bcf	status,0,c
 30262  01644A  33BE               	rrcf	Port_GetPin@Output& (0+255),f,b
 30263  01644C                     u9190:
 30264  01644C  0100               	movlb	0	; () banked
 30265  01644E  2FBC               	decfsz	??_Port_GetPin& (0+255),f,b
 30266  016450  D7FA               	goto	u9195
 30267                           
 30268                           ;Port.c: 275: Output &= 1;
 30269  016452  0E01               	movlw	1
 30270  016454  0100               	movlb	0	; () banked
 30271  016456  17BE               	andwf	Port_GetPin@Output& (0+255),f,b
 30272                           
 30273                           ; BSR set to: 0
 30274                           ;Port.c: 276: return Output;
 30275  016458  0100               	movlb	0	; () banked
 30276  01645A  51BE               	movf	Port_GetPin@Output& (0+255),w,b
 30277  01645C  0012               	return	
 30278  01645E                     __end_of_Port_GetPin:
 30279                           	opt stack 0
 30280                           tosu	equ	0xFFF
 30281                           tosh	equ	0xFFE
 30282                           tosl	equ	0xFFD
 30283                           pclath	equ	0xFFA
 30284                           tblptru	equ	0xFF8
 30285                           tblptrh	equ	0xFF7
 30286                           tblptrl	equ	0xFF6
 30287                           tablat	equ	0xFF5
 30288                           prodh	equ	0xFF4
 30289                           prodl	equ	0xFF3
 30290                           intcon	equ	0xFF2
 30291                           indf0	equ	0xFEF
 30292                           postinc0	equ	0xFEE
 30293                           fsr0h	equ	0xFEA
 30294                           fsr0l	equ	0xFE9
 30295                           wreg	equ	0xFE8
 30296                           indf1	equ	0xFE7
 30297                           postdec1	equ	0xFE5
 30298                           fsr1h	equ	0xFE2
 30299                           fsr1l	equ	0xFE1
 30300                           indf2	equ	0xFDF
 30301                           postinc2	equ	0xFDE
 30302                           postdec2	equ	0xFDD
 30303                           plusw2	equ	0xFDB
 30304                           fsr2h	equ	0xFDA
 30305                           fsr2l	equ	0xFD9
 30306                           status	equ	0xFD8
 30307                           
 30308 ;; *************** function _HMI_SetBar *****************
 30309 ;; Defined at:
 30310 ;;		line 205 in file "HMI.c"
 30311 ;; Parameters:    Size  Location     Type
 30312 ;;  pValue          1    wreg     unsigned char 
 30313 ;; Auto vars:     Size  Location     Type
 30314 ;;  pValue          1    0[BANK0 ] unsigned char 
 30315 ;; Return value:  Size  Location     Type
 30316 ;;                  1    wreg      void 
 30317 ;; Registers used:
 30318 ;;		wreg
 30319 ;; Tracked objects:
 30320 ;;		On entry : 0/0
 30321 ;;		On exit  : 0/0
 30322 ;;		Unchanged: 0/0
 30323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30328 ;;Total ram usage:        1 bytes
 30329 ;; Hardware stack levels used:    1
 30330 ;; Hardware stack levels required when called:    7
 30331 ;; This function calls:
 30332 ;;		Nothing
 30333 ;; This function is called by:
 30334 ;;		_Event_DIPSwitch
 30335 ;;		_Event_HMI_DIPSwitch
 30336 ;;		_Event_HMI_LeftButton
 30337 ;;		_Event_HMI_RightButton
 30338 ;; This function uses a non-reentrant model
 30339 ;;
 30340                           
 30341                           	psect	text157
 30342  016D44                     __ptext157:
 30343                           	opt stack 0
 30344  016D44                     _HMI_SetBar:
 30345                           	opt stack 18
 30346                           
 30347                           ; BSR set to: 0
 30348                           ;incstack = 0
 30349                           ;HMI_SetBar@pValue stored from wreg
 30350  016D44  0100               	movlb	0	; () banked
 30351  016D46  6FB9               	movwf	HMI_SetBar@pValue& (0+255),b
 30352                           
 30353                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 30354  016D48  C0B9  F349         	movff	HMI_SetBar@pValue,_HMIBoard+7
 30355  016D4C  0012               	return		;funcret
 30356  016D4E                     __end_of_HMI_SetBar:
 30357                           	opt stack 0
 30358                           tosu	equ	0xFFF
 30359                           tosh	equ	0xFFE
 30360                           tosl	equ	0xFFD
 30361                           pclath	equ	0xFFA
 30362                           tblptru	equ	0xFF8
 30363                           tblptrh	equ	0xFF7
 30364                           tblptrl	equ	0xFF6
 30365                           tablat	equ	0xFF5
 30366                           prodh	equ	0xFF4
 30367                           prodl	equ	0xFF3
 30368                           intcon	equ	0xFF2
 30369                           indf0	equ	0xFEF
 30370                           postinc0	equ	0xFEE
 30371                           fsr0h	equ	0xFEA
 30372                           fsr0l	equ	0xFE9
 30373                           wreg	equ	0xFE8
 30374                           indf1	equ	0xFE7
 30375                           postdec1	equ	0xFE5
 30376                           fsr1h	equ	0xFE2
 30377                           fsr1l	equ	0xFE1
 30378                           indf2	equ	0xFDF
 30379                           postinc2	equ	0xFDE
 30380                           postdec2	equ	0xFDD
 30381                           plusw2	equ	0xFDB
 30382                           fsr2h	equ	0xFDA
 30383                           fsr2l	equ	0xFD9
 30384                           status	equ	0xFD8
 30385                           
 30386 ;; *************** function _HMI_GetBar *****************
 30387 ;; Defined at:
 30388 ;;		line 209 in file "HMI.c"
 30389 ;; Parameters:    Size  Location     Type
 30390 ;;		None
 30391 ;; Auto vars:     Size  Location     Type
 30392 ;;		None
 30393 ;; Return value:  Size  Location     Type
 30394 ;;                  1    wreg      unsigned char 
 30395 ;; Registers used:
 30396 ;;		wreg, status,2
 30397 ;; Tracked objects:
 30398 ;;		On entry : 0/0
 30399 ;;		On exit  : 0/0
 30400 ;;		Unchanged: 0/0
 30401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30406 ;;Total ram usage:        0 bytes
 30407 ;; Hardware stack levels used:    1
 30408 ;; Hardware stack levels required when called:    7
 30409 ;; This function calls:
 30410 ;;		Nothing
 30411 ;; This function is called by:
 30412 ;;		_Event_DIPSwitch
 30413 ;;		_Event_HMI_DIPSwitch
 30414 ;; This function uses a non-reentrant model
 30415 ;;
 30416                           
 30417                           	psect	text158
 30418  016D80                     __ptext158:
 30419                           	opt stack 0
 30420  016D80                     _HMI_GetBar:
 30421                           	opt stack 18
 30422                           
 30423                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 30424                           
 30425                           ;incstack = 0
 30426  016D80  0103               	movlb	3	; () banked
 30427  016D82  5149               	movf	(_HMIBoard+7)& (0+255),w,b
 30428  016D84  0012               	return	
 30429  016D86                     __end_of_HMI_GetBar:
 30430                           	opt stack 0
 30431                           tosu	equ	0xFFF
 30432                           tosh	equ	0xFFE
 30433                           tosl	equ	0xFFD
 30434                           pclath	equ	0xFFA
 30435                           tblptru	equ	0xFF8
 30436                           tblptrh	equ	0xFF7
 30437                           tblptrl	equ	0xFF6
 30438                           tablat	equ	0xFF5
 30439                           prodh	equ	0xFF4
 30440                           prodl	equ	0xFF3
 30441                           intcon	equ	0xFF2
 30442                           indf0	equ	0xFEF
 30443                           postinc0	equ	0xFEE
 30444                           fsr0h	equ	0xFEA
 30445                           fsr0l	equ	0xFE9
 30446                           wreg	equ	0xFE8
 30447                           indf1	equ	0xFE7
 30448                           postdec1	equ	0xFE5
 30449                           fsr1h	equ	0xFE2
 30450                           fsr1l	equ	0xFE1
 30451                           indf2	equ	0xFDF
 30452                           postinc2	equ	0xFDE
 30453                           postdec2	equ	0xFDD
 30454                           plusw2	equ	0xFDB
 30455                           fsr2h	equ	0xFDA
 30456                           fsr2l	equ	0xFD9
 30457                           status	equ	0xFD8
 30458                           
 30459 ;; *************** function _ISR_Function *****************
 30460 ;; Defined at:
 30461 ;;		line 38 in file "Library/ISR.c"
 30462 ;; Parameters:    Size  Location     Type
 30463 ;;		None
 30464 ;; Auto vars:     Size  Location     Type
 30465 ;;		None
 30466 ;; Return value:  Size  Location     Type
 30467 ;;                  1    wreg      void 
 30468 ;; Registers used:
 30469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30470 ;; Tracked objects:
 30471 ;;		On entry : 0/0
 30472 ;;		On exit  : 0/0
 30473 ;;		Unchanged: 0/0
 30474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30477 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30478 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30479 ;;Total ram usage:       18 bytes
 30480 ;; Hardware stack levels used:    1
 30481 ;; Hardware stack levels required when called:    6
 30482 ;; This function calls:
 30483 ;;		_Timer0_ISR
 30484 ;; This function is called by:
 30485 ;;		Interrupt level 2
 30486 ;; This function uses a non-reentrant model
 30487 ;;
 30488                           
 30489                           	psect	intcode
 30490  001408                     __pintcode:
 30491                           	opt stack 0
 30492  001408                     _ISR_Function:
 30493                           	opt stack 13
 30494                           
 30495                           ; BSR set to: 3
 30496                           ;incstack = 0
 30497  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 30498  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 30499  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 30500  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 30501  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 30502  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 30503  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 30504  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 30505  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 30506  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 30507  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 30508  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 30509  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 30510  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 30511  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 30512  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 30513  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 30514  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 30515  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 30516                           
 30517                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 30518  001452  92F2               	bcf	intcon,1,c	;volatile
 30519                           
 30520                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 30521  001454  B4F2               	btfsc	intcon,2,c	;volatile
 30522  001456  AAF2               	btfss	intcon,5,c	;volatile
 30523  001458  D002               	goto	i2l1590
 30524                           
 30525                           ;ISR.c: 68: Timer0_ISR();
 30526  00145A  EC6C  F0B4         	call	_Timer0_ISR	;wreg free
 30527  00145E                     i2l1590:
 30528  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 30529  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 30530  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 30531  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 30532  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 30533  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 30534  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 30535  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 30536  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 30537  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 30538  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 30539  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 30540  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 30541  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 30542  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 30543  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 30544  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 30545  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 30546  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 30547  0014A8  0011               	retfie		f
 30548  0014AA                     __end_of_ISR_Function:
 30549                           	opt stack 0
 30550                           tosu	equ	0xFFF
 30551                           tosh	equ	0xFFE
 30552                           tosl	equ	0xFFD
 30553                           pclatu	equ	0xFFB
 30554                           pclath	equ	0xFFA
 30555                           tblptru	equ	0xFF8
 30556                           tblptrh	equ	0xFF7
 30557                           tblptrl	equ	0xFF6
 30558                           tablat	equ	0xFF5
 30559                           prodh	equ	0xFF4
 30560                           prodl	equ	0xFF3
 30561                           intcon	equ	0xFF2
 30562                           indf0	equ	0xFEF
 30563                           postinc0	equ	0xFEE
 30564                           fsr0h	equ	0xFEA
 30565                           fsr0l	equ	0xFE9
 30566                           wreg	equ	0xFE8
 30567                           indf1	equ	0xFE7
 30568                           postdec1	equ	0xFE5
 30569                           fsr1h	equ	0xFE2
 30570                           fsr1l	equ	0xFE1
 30571                           indf2	equ	0xFDF
 30572                           postinc2	equ	0xFDE
 30573                           postdec2	equ	0xFDD
 30574                           plusw2	equ	0xFDB
 30575                           fsr2h	equ	0xFDA
 30576                           fsr2l	equ	0xFD9
 30577                           status	equ	0xFD8
 30578                           
 30579 ;; *************** function _Timer0_ISR *****************
 30580 ;; Defined at:
 30581 ;;		line 94 in file "Library/Timer0.c"
 30582 ;; Parameters:    Size  Location     Type
 30583 ;;		None
 30584 ;; Auto vars:     Size  Location     Type
 30585 ;;		None
 30586 ;; Return value:  Size  Location     Type
 30587 ;;                  1    wreg      void 
 30588 ;; Registers used:
 30589 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30590 ;; Tracked objects:
 30591 ;;		On entry : 0/0
 30592 ;;		On exit  : 0/0
 30593 ;;		Unchanged: 0/0
 30594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30599 ;;Total ram usage:        0 bytes
 30600 ;; Hardware stack levels used:    1
 30601 ;; Hardware stack levels required when called:    5
 30602 ;; This function calls:
 30603 ;;		Absolute function
 30604 ;;		i2_Motor_Step
 30605 ;;		i2_Timer0_Stop
 30606 ;; This function is called by:
 30607 ;;		_ISR_Function
 30608 ;; This function uses a non-reentrant model
 30609 ;;
 30610                           
 30611                           	psect	text160
 30612  0168D8                     __ptext160:
 30613                           	opt stack 0
 30614  0168D8                     _Timer0_ISR:
 30615                           	opt stack 13
 30616                           
 30617                           ;Timer0.c: 96: Timer0_Stop();
 30618                           
 30619                           ;incstack = 0
 30620  0168D8  ECC3  F0B6         	call	i2_Timer0_Stop	;wreg free
 30621                           
 30622                           ;Timer0.c: 99: if (gISR != 0)
 30623  0168DC  0100               	movlb	0	; () banked
 30624  0168DE  5160               	movf	_gISR& (0+255),w,b
 30625  0168E0  0100               	movlb	0	; () banked
 30626  0168E2  1161               	iorwf	(_gISR+1)& (0+255),w,b
 30627  0168E4  0100               	movlb	0	; () banked
 30628  0168E6  1162               	iorwf	(_gISR+2)& (0+255),w,b
 30629  0168E8  B4D8               	btfsc	status,2,c
 30630  0168EA  0012               	return	
 30631                           
 30632                           ; BSR set to: 0
 30633                           ;Timer0.c: 100: gISR();
 30634  0168EC  D801               	call	i2u1486_48
 30635  0168EE  0012               	return	
 30636  0168F0                     i2u1486_48:
 30637  0168F0  0005               	push	
 30638  0168F2  6EFA               	movwf	pclath,c
 30639  0168F4  0100               	movlb	0	; () banked
 30640  0168F6  5160               	movf	_gISR& (0+255),w,b
 30641  0168F8  6EFD               	movwf	tosl,c
 30642  0168FA  5161               	movf	(_gISR+1)& (0+255),w,b
 30643  0168FC  6EFE               	movwf	tosh,c
 30644  0168FE  5162               	movf	(_gISR+2)& (0+255),w,b
 30645  016900  6EFF               	movwf	tosu,c
 30646  016902  50FA               	movf	pclath,w,c
 30647  016904  0012               	return		;indir
 30648  016906                     __end_of_Timer0_ISR:
 30649                           	opt stack 0
 30650                           tosu	equ	0xFFF
 30651                           tosh	equ	0xFFE
 30652                           tosl	equ	0xFFD
 30653                           pclatu	equ	0xFFB
 30654                           pclath	equ	0xFFA
 30655                           tblptru	equ	0xFF8
 30656                           tblptrh	equ	0xFF7
 30657                           tblptrl	equ	0xFF6
 30658                           tablat	equ	0xFF5
 30659                           prodh	equ	0xFF4
 30660                           prodl	equ	0xFF3
 30661                           intcon	equ	0xFF2
 30662                           indf0	equ	0xFEF
 30663                           postinc0	equ	0xFEE
 30664                           fsr0h	equ	0xFEA
 30665                           fsr0l	equ	0xFE9
 30666                           wreg	equ	0xFE8
 30667                           indf1	equ	0xFE7
 30668                           postdec1	equ	0xFE5
 30669                           fsr1h	equ	0xFE2
 30670                           fsr1l	equ	0xFE1
 30671                           indf2	equ	0xFDF
 30672                           postinc2	equ	0xFDE
 30673                           postdec2	equ	0xFDD
 30674                           plusw2	equ	0xFDB
 30675                           fsr2h	equ	0xFDA
 30676                           fsr2l	equ	0xFD9
 30677                           status	equ	0xFD8
 30678                           
 30679 ;; *************** function i2_Motor_Step *****************
 30680 ;; Defined at:
 30681 ;;		line 75 in file "Library/Motor.c"
 30682 ;; Parameters:    Size  Location     Type
 30683 ;;		None
 30684 ;; Auto vars:     Size  Location     Type
 30685 ;;		None
 30686 ;; Return value:  Size  Location     Type
 30687 ;;                  1    wreg      void 
 30688 ;; Registers used:
 30689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30690 ;; Tracked objects:
 30691 ;;		On entry : 0/0
 30692 ;;		On exit  : 0/0
 30693 ;;		Unchanged: 0/0
 30694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30699 ;;Total ram usage:        2 bytes
 30700 ;; Hardware stack levels used:    1
 30701 ;; Hardware stack levels required when called:    4
 30702 ;; This function calls:
 30703 ;;		i2_MXK_Queue
 30704 ;;		i2_MXK_Release
 30705 ;;		i2_MXK_SwitchTo
 30706 ;;		i2_Port_SetPin
 30707 ;;		i2_Timer0_Restart
 30708 ;;		i2_Timer0_Stop
 30709 ;; This function is called by:
 30710 ;; This function uses a non-reentrant model
 30711 ;;
 30712                           
 30713                           	psect	text161
 30714  013D3C                     __ptext161:
 30715                           	opt stack 0
 30716  013D3C                     i2_Motor_Step:
 30717                           	opt stack 13
 30718                           
 30719                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 30720                           
 30721                           ;incstack = 0
 30722  013D3C  0100               	movlb	0	; () banked
 30723  013D3E  EE20 F004          	lfsr	2,4
 30724  013D42  517D               	movf	_lMotor& (0+255),w,b
 30725  013D44  26D9               	addwf	fsr2l,f,c
 30726  013D46  517E               	movf	(_lMotor+1)& (0+255),w,b
 30727  013D48  22DA               	addwfc	fsr2h,f,c
 30728  013D4A  50DF               	movf	indf2,w,c
 30729  013D4C  ECBF  F0B3         	call	i2_MXK_SwitchTo
 30730  013D50  0900               	iorlw	0
 30731  013D52  B4D8               	btfsc	status,2,c
 30732  013D54  D06A               	goto	i2l1627
 30733                           
 30734                           ;Motor.c: 78: {
 30735                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 30736  013D56  C07D  FFD9         	movff	_lMotor,fsr2l
 30737  013D5A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 30738  013D5E  50DE               	movf	postinc2,w,c
 30739  013D60  10DE               	iorwf	postinc2,w,c
 30740  013D62  B4D8               	btfsc	status,2,c
 30741  013D64  D05D               	goto	i2l1628
 30742                           
 30743                           ;Motor.c: 80: {
 30744                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 30745  013D66  C07D  FFD9         	movff	_lMotor,fsr2l
 30746  013D6A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 30747  013D6E  0E01               	movlw	1
 30748  013D70  BEDB               	btfsc	plusw2,7,c
 30749  013D72  D022               	goto	i2l1629
 30750  013D74  0E01               	movlw	1
 30751  013D76  50DB               	movf	plusw2,w,c
 30752  013D78  E103               	bnz	i2u775_40
 30753  013D7A  04DE               	decf	postinc2,w,c
 30754  013D7C  A0D8               	btfss	status,0,c
 30755  013D7E  D01C               	goto	i2l1629
 30756  013D80                     i2u775_40:
 30757                           
 30758                           ;Motor.c: 83: {
 30759                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 30760  013D80  C07D  FFD9         	movff	_lMotor,fsr2l
 30761  013D84  C07E  FFDA         	movff	_lMotor+1,fsr2h
 30762  013D88  28DE               	incf	postinc2,w,c
 30763  013D8A  E104               	bnz	i2u776_40
 30764  013D8C  0E7F               	movlw	127
 30765  013D8E  18DE               	xorwf	postinc2,w,c
 30766  013D90  B4D8               	btfsc	status,2,c
 30767  013D92  D007               	goto	i2l1630
 30768  013D94                     i2u776_40:
 30769                           
 30770                           ;Motor.c: 85: lMotor->mDelta --;
 30771  013D94  C07D  FFD9         	movff	_lMotor,fsr2l
 30772  013D98  C07E  FFDA         	movff	_lMotor+1,fsr2h
 30773  013D9C  06DE               	decf	postinc2,f,c
 30774  013D9E  0E00               	movlw	0
 30775  013DA0  5ADD               	subwfb	postdec2,f,c
 30776  013DA2                     i2l1630:
 30777                           
 30778                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 30779  013DA2  0E90               	movlw	low _PortE
 30780  013DA4  6E10               	movwf	i2Port_SetPin@pInput,c
 30781  013DA6  0E00               	movlw	high _PortE
 30782  013DA8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30783  013DAA  0E00               	movlw	0
 30784  013DAC  6E12               	movwf	i2Port_SetPin@pPin,c
 30785  013DAE  0E01               	movlw	1
 30786  013DB0  6E13               	movwf	i2Port_SetPin@pValue,c
 30787  013DB2  EC98  F0A6         	call	i2_Port_SetPin	;wreg free
 30788                           
 30789                           ;Motor.c: 88: }
 30790  013DB6  D01B               	goto	i2l1631
 30791  013DB8                     i2l1629:
 30792                           
 30793                           ;Motor.c: 89: else
 30794                           ;Motor.c: 90: {
 30795                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 30796  013DB8  C07D  FFD9         	movff	_lMotor,fsr2l
 30797  013DBC  C07E  FFDA         	movff	_lMotor+1,fsr2h
 30798  013DC0  04DE               	decf	postinc2,w,c
 30799  013DC2  E104               	bnz	i2u777_40
 30800  013DC4  0E80               	movlw	128
 30801  013DC6  18DE               	xorwf	postinc2,w,c
 30802  013DC8  B4D8               	btfsc	status,2,c
 30803  013DCA  D007               	goto	i2l1632
 30804  013DCC                     i2u777_40:
 30805                           
 30806                           ;Motor.c: 92: lMotor->mDelta ++;
 30807  013DCC  C07D  FFD9         	movff	_lMotor,fsr2l
 30808  013DD0  C07E  FFDA         	movff	_lMotor+1,fsr2h
 30809  013DD4  2ADE               	incf	postinc2,f,c
 30810  013DD6  0E00               	movlw	0
 30811  013DD8  22DD               	addwfc	postdec2,f,c
 30812  013DDA                     i2l1632:
 30813                           
 30814                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 30815  013DDA  0E90               	movlw	low _PortE
 30816  013DDC  6E10               	movwf	i2Port_SetPin@pInput,c
 30817  013DDE  0E00               	movlw	high _PortE
 30818  013DE0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30819  013DE2  0E00               	movlw	0
 30820  013DE4  6E12               	movwf	i2Port_SetPin@pPin,c
 30821  013DE6  0E00               	movlw	0
 30822  013DE8  6E13               	movwf	i2Port_SetPin@pValue,c
 30823  013DEA  EC98  F0A6         	call	i2_Port_SetPin	;wreg free
 30824  013DEE                     i2l1631:
 30825                           
 30826                           ;Motor.c: 95: }
 30827                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 30828  013DEE  0E90               	movlw	low _PortE
 30829  013DF0  6E10               	movwf	i2Port_SetPin@pInput,c
 30830  013DF2  0E00               	movlw	high _PortE
 30831  013DF4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30832  013DF6  0E01               	movlw	1
 30833  013DF8  6E12               	movwf	i2Port_SetPin@pPin,c
 30834  013DFA  0E01               	movlw	1
 30835  013DFC  6E13               	movwf	i2Port_SetPin@pValue,c
 30836  013DFE  EC98  F0A6         	call	i2_Port_SetPin	;wreg free
 30837                           
 30838                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 30839  013E02  0E90               	movlw	low _PortE
 30840  013E04  6E10               	movwf	i2Port_SetPin@pInput,c
 30841  013E06  0E00               	movlw	high _PortE
 30842  013E08  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30843  013E0A  0E01               	movlw	1
 30844  013E0C  6E12               	movwf	i2Port_SetPin@pPin,c
 30845  013E0E  0E00               	movlw	0
 30846  013E10  6E13               	movwf	i2Port_SetPin@pValue,c
 30847  013E12  EC98  F0A6         	call	i2_Port_SetPin	;wreg free
 30848                           
 30849                           ;Motor.c: 101: MXK_Release();
 30850  013E16  ECC6  F0B6         	call	i2_MXK_Release	;wreg free
 30851                           
 30852                           ;Motor.c: 102: Timer0_Restart();
 30853  013E1A  EC92  F0B6         	call	i2_Timer0_Restart	;wreg free
 30854                           
 30855                           ;Motor.c: 103: return;
 30856  013E1E  0012               	return	
 30857  013E20                     i2l1628:
 30858                           
 30859                           ;Motor.c: 104: }
 30860                           ;Motor.c: 105: MXK_Release();
 30861  013E20  ECC6  F0B6         	call	i2_MXK_Release	;wreg free
 30862                           
 30863                           ;Motor.c: 106: Timer0_Stop();
 30864  013E24  ECC3  F0B6         	call	i2_Timer0_Stop	;wreg free
 30865                           
 30866                           ;Motor.c: 107: return;
 30867  013E28  0012               	return	
 30868  013E2A                     i2l1627:
 30869                           
 30870                           ;Motor.c: 108: }
 30871                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 30872  013E2A  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 30873  013E2E  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 30874  013E32  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 30875  013E36  EC7F  F0B6         	call	i2_MXK_Queue	;wreg free
 30876  013E3A  0012               	return		;funcret
 30877  013E3C                     __end_ofi2_Motor_Step:
 30878                           	opt stack 0
 30879                           tosu	equ	0xFFF
 30880                           tosh	equ	0xFFE
 30881                           tosl	equ	0xFFD
 30882                           pclatu	equ	0xFFB
 30883                           pclath	equ	0xFFA
 30884                           tblptru	equ	0xFF8
 30885                           tblptrh	equ	0xFF7
 30886                           tblptrl	equ	0xFF6
 30887                           tablat	equ	0xFF5
 30888                           prodh	equ	0xFF4
 30889                           prodl	equ	0xFF3
 30890                           intcon	equ	0xFF2
 30891                           indf0	equ	0xFEF
 30892                           postinc0	equ	0xFEE
 30893                           fsr0h	equ	0xFEA
 30894                           fsr0l	equ	0xFE9
 30895                           wreg	equ	0xFE8
 30896                           indf1	equ	0xFE7
 30897                           postdec1	equ	0xFE5
 30898                           fsr1h	equ	0xFE2
 30899                           fsr1l	equ	0xFE1
 30900                           indf2	equ	0xFDF
 30901                           postinc2	equ	0xFDE
 30902                           postdec2	equ	0xFDD
 30903                           plusw2	equ	0xFDB
 30904                           fsr2h	equ	0xFDA
 30905                           fsr2l	equ	0xFD9
 30906                           status	equ	0xFD8
 30907                           
 30908 ;; *************** function i2_Timer0_Stop *****************
 30909 ;; Defined at:
 30910 ;;		line 89 in file "Library/Timer0.c"
 30911 ;; Parameters:    Size  Location     Type
 30912 ;;		None
 30913 ;; Auto vars:     Size  Location     Type
 30914 ;;		None
 30915 ;; Return value:  Size  Location     Type
 30916 ;;                  1    wreg      void 
 30917 ;; Registers used:
 30918 ;;		None
 30919 ;; Tracked objects:
 30920 ;;		On entry : 0/0
 30921 ;;		On exit  : 0/0
 30922 ;;		Unchanged: 0/0
 30923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30928 ;;Total ram usage:        0 bytes
 30929 ;; Hardware stack levels used:    1
 30930 ;; This function calls:
 30931 ;;		Nothing
 30932 ;; This function is called by:
 30933 ;;		_Timer0_ISR
 30934 ;;		i2_Motor_Step
 30935 ;; This function uses a non-reentrant model
 30936 ;;
 30937                           
 30938                           	psect	text162
 30939  016D86                     __ptext162:
 30940                           	opt stack 0
 30941  016D86                     i2_Timer0_Stop:
 30942                           	opt stack 17
 30943                           
 30944                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30945                           
 30946                           ;incstack = 0
 30947  016D86  9AF2               	bcf	intcon,5,c	;volatile
 30948                           
 30949                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30950  016D88  94F2               	bcf	intcon,2,c	;volatile
 30951  016D8A  0012               	return		;funcret
 30952  016D8C                     __end_ofi2_Timer0_Stop:
 30953                           	opt stack 0
 30954                           tosu	equ	0xFFF
 30955                           tosh	equ	0xFFE
 30956                           tosl	equ	0xFFD
 30957                           pclatu	equ	0xFFB
 30958                           pclath	equ	0xFFA
 30959                           tblptru	equ	0xFF8
 30960                           tblptrh	equ	0xFF7
 30961                           tblptrl	equ	0xFF6
 30962                           tablat	equ	0xFF5
 30963                           prodh	equ	0xFF4
 30964                           prodl	equ	0xFF3
 30965                           intcon	equ	0xFF2
 30966                           indf0	equ	0xFEF
 30967                           postinc0	equ	0xFEE
 30968                           fsr0h	equ	0xFEA
 30969                           fsr0l	equ	0xFE9
 30970                           wreg	equ	0xFE8
 30971                           indf1	equ	0xFE7
 30972                           postdec1	equ	0xFE5
 30973                           fsr1h	equ	0xFE2
 30974                           fsr1l	equ	0xFE1
 30975                           indf2	equ	0xFDF
 30976                           postinc2	equ	0xFDE
 30977                           postdec2	equ	0xFDD
 30978                           plusw2	equ	0xFDB
 30979                           fsr2h	equ	0xFDA
 30980                           fsr2l	equ	0xFD9
 30981                           status	equ	0xFD8
 30982                           
 30983 ;; *************** function i2_Timer0_Restart *****************
 30984 ;; Defined at:
 30985 ;;		line 83 in file "Library/Timer0.c"
 30986 ;; Parameters:    Size  Location     Type
 30987 ;;		None
 30988 ;; Auto vars:     Size  Location     Type
 30989 ;;		None
 30990 ;; Return value:  Size  Location     Type
 30991 ;;                  1    wreg      void 
 30992 ;; Registers used:
 30993 ;;		None
 30994 ;; Tracked objects:
 30995 ;;		On entry : 0/0
 30996 ;;		On exit  : 0/0
 30997 ;;		Unchanged: 0/0
 30998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31003 ;;Total ram usage:        0 bytes
 31004 ;; Hardware stack levels used:    1
 31005 ;; This function calls:
 31006 ;;		Nothing
 31007 ;; This function is called by:
 31008 ;;		i2_Motor_Step
 31009 ;; This function uses a non-reentrant model
 31010 ;;
 31011                           
 31012                           	psect	text163
 31013  016D24                     __ptext163:
 31014                           	opt stack 0
 31015  016D24                     i2_Timer0_Restart:
 31016                           	opt stack 16
 31017                           
 31018                           ;Timer0.c: 85: TMR0 = COUNTER;
 31019                           
 31020                           ;incstack = 0
 31021  016D24  C029  FFD6         	movff	_COUNTER,4054	;volatile
 31022  016D28  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 31023                           
 31024                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 31025  016D2C  8AF2               	bsf	intcon,5,c	;volatile
 31026  016D2E  0012               	return		;funcret
 31027  016D30                     __end_ofi2_Timer0_Restart:
 31028                           	opt stack 0
 31029                           tosu	equ	0xFFF
 31030                           tosh	equ	0xFFE
 31031                           tosl	equ	0xFFD
 31032                           pclatu	equ	0xFFB
 31033                           pclath	equ	0xFFA
 31034                           tblptru	equ	0xFF8
 31035                           tblptrh	equ	0xFF7
 31036                           tblptrl	equ	0xFF6
 31037                           tablat	equ	0xFF5
 31038                           prodh	equ	0xFF4
 31039                           prodl	equ	0xFF3
 31040                           intcon	equ	0xFF2
 31041                           indf0	equ	0xFEF
 31042                           postinc0	equ	0xFEE
 31043                           fsr0h	equ	0xFEA
 31044                           fsr0l	equ	0xFE9
 31045                           wreg	equ	0xFE8
 31046                           indf1	equ	0xFE7
 31047                           postdec1	equ	0xFE5
 31048                           fsr1h	equ	0xFE2
 31049                           fsr1l	equ	0xFE1
 31050                           indf2	equ	0xFDF
 31051                           postinc2	equ	0xFDE
 31052                           postdec2	equ	0xFDD
 31053                           plusw2	equ	0xFDB
 31054                           fsr2h	equ	0xFDA
 31055                           fsr2l	equ	0xFD9
 31056                           status	equ	0xFD8
 31057                           
 31058 ;; *************** function i2_Port_SetPin *****************
 31059 ;; Defined at:
 31060 ;;		line 247 in file "Library/Port.c"
 31061 ;; Parameters:    Size  Location     Type
 31062 ;;  pInput          2   15[COMRAM] const PTR struct Port
 31063 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 31064 ;;  pPin            1   17[COMRAM] enum E6750
 31065 ;;  pValue          1   18[COMRAM] unsigned char 
 31066 ;; Auto vars:     Size  Location     Type
 31067 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 31068 ;; Return value:  Size  Location     Type
 31069 ;;                  1    wreg      void 
 31070 ;; Registers used:
 31071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31072 ;; Tracked objects:
 31073 ;;		On entry : 0/0
 31074 ;;		On exit  : 0/0
 31075 ;;		Unchanged: 0/0
 31076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31080 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31081 ;;Total ram usage:        5 bytes
 31082 ;; Hardware stack levels used:    1
 31083 ;; Hardware stack levels required when called:    3
 31084 ;; This function calls:
 31085 ;;		i2_Byte_SetBit
 31086 ;;		i2_Word_GetPair
 31087 ;; This function is called by:
 31088 ;;		i2_Motor_Step
 31089 ;; This function uses a non-reentrant model
 31090 ;;
 31091                           
 31092                           	psect	text164
 31093  014D30                     __ptext164:
 31094                           	opt stack 0
 31095  014D30                     i2_Port_SetPin:
 31096                           	opt stack 13
 31097                           
 31098                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 31099                           
 31100                           ;incstack = 0
 31101  014D30  0E08               	movlw	8
 31102  014D32  2410               	addwf	i2Port_SetPin@pInput,w,c
 31103  014D34  6E0D               	movwf	i2Word_GetPair@pInput,c
 31104  014D36  0E00               	movlw	0
 31105  014D38  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 31106  014D3A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 31107  014D3C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 31108  014D40  EC3D  F0B4         	call	i2_Word_GetPair	;wreg free
 31109  014D44  6E14               	movwf	i2Port_SetPin@Type,c
 31110                           
 31111                           ;Port.c: 250: switch (Type)
 31112  014D46  D03B               	goto	i2l427
 31113  014D48                     
 31114                           ;Port.c: 256: pValue &= 1;
 31115  014D48  0E01               	movlw	1
 31116  014D4A  1613               	andwf	i2Port_SetPin@pValue,f,c
 31117                           
 31118                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31119  014D4C  EE20 F002          	lfsr	2,2
 31120  014D50  5010               	movf	i2Port_SetPin@pInput,w,c
 31121  014D52  26D9               	addwf	fsr2l,f,c
 31122  014D54  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31123  014D56  22DA               	addwfc	fsr2h,f,c
 31124  014D58  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31125  014D5C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31126  014D60  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31127  014D64  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31128  014D68  ECEA  F0B0         	call	i2_Byte_SetBit	;wreg free
 31129                           
 31130                           ;Port.c: 258: break;
 31131  014D6C  0012               	return	
 31132  014D6E                     
 31133                           ;Port.c: 261: pValue &= 1;
 31134  014D6E  0E01               	movlw	1
 31135  014D70  1613               	andwf	i2Port_SetPin@pValue,f,c
 31136                           
 31137                           ;Port.c: 262: pValue ^= 1;
 31138  014D72  0E01               	movlw	1
 31139  014D74  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 31140                           
 31141                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31142  014D76  EE20 F002          	lfsr	2,2
 31143  014D7A  5010               	movf	i2Port_SetPin@pInput,w,c
 31144  014D7C  26D9               	addwf	fsr2l,f,c
 31145  014D7E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31146  014D80  22DA               	addwfc	fsr2h,f,c
 31147  014D82  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31148  014D86  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31149  014D8A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31150  014D8E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31151  014D92  ECEA  F0B0         	call	i2_Byte_SetBit	;wreg free
 31152                           
 31153                           ;Port.c: 264: break;
 31154  014D96  0012               	return	
 31155  014D98                     
 31156                           ;Port.c: 266: pValue &= 1;
 31157  014D98  0E01               	movlw	1
 31158  014D9A  1613               	andwf	i2Port_SetPin@pValue,f,c
 31159                           
 31160                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 31161  014D9C  EE20 F004          	lfsr	2,4
 31162  014DA0  5010               	movf	i2Port_SetPin@pInput,w,c
 31163  014DA2  26D9               	addwf	fsr2l,f,c
 31164  014DA4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31165  014DA6  22DA               	addwfc	fsr2h,f,c
 31166  014DA8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31167  014DAC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31168  014DB0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31169  014DB4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31170  014DB8  ECEA  F0B0         	call	i2_Byte_SetBit	;wreg free
 31171                           
 31172                           ;Port.c: 269: }
 31173                           
 31174                           ;Port.c: 268: break;
 31175  014DBC  0012               	return	
 31176  014DBE                     i2l427:
 31177  014DBE  5014               	movf	i2Port_SetPin@Type,w,c
 31178                           
 31179                           ; Switch size 1, requested type "space"
 31180                           ; Number of cases is 4, Range of values is 0 to 3
 31181                           ; switch strategies available:
 31182                           ; Name         Instructions Cycles
 31183                           ; simple_byte           13     7 (average)
 31184                           ;	Chosen strategy is simple_byte
 31185  014DC0  0A00               	xorlw	0	; case 0
 31186  014DC2  B4D8               	btfsc	status,2,c
 31187  014DC4  0012               	return	
 31188  014DC6  0A01               	xorlw	1	; case 1
 31189  014DC8  B4D8               	btfsc	status,2,c
 31190  014DCA  D7BE               	goto	i2l430
 31191  014DCC  0A03               	xorlw	3	; case 2
 31192  014DCE  B4D8               	btfsc	status,2,c
 31193  014DD0  D7CE               	goto	i2l432
 31194  014DD2  0A01               	xorlw	1	; case 3
 31195  014DD4  A4D8               	btfss	status,2,c
 31196  014DD6  0012               	return	
 31197  014DD8  D7DF               	goto	i2l433
 31198  014DDA                     __end_ofi2_Port_SetPin:
 31199                           	opt stack 0
 31200                           tosu	equ	0xFFF
 31201                           tosh	equ	0xFFE
 31202                           tosl	equ	0xFFD
 31203                           pclatu	equ	0xFFB
 31204                           pclath	equ	0xFFA
 31205                           tblptru	equ	0xFF8
 31206                           tblptrh	equ	0xFF7
 31207                           tblptrl	equ	0xFF6
 31208                           tablat	equ	0xFF5
 31209                           prodh	equ	0xFF4
 31210                           prodl	equ	0xFF3
 31211                           intcon	equ	0xFF2
 31212                           indf0	equ	0xFEF
 31213                           postinc0	equ	0xFEE
 31214                           fsr0h	equ	0xFEA
 31215                           fsr0l	equ	0xFE9
 31216                           wreg	equ	0xFE8
 31217                           indf1	equ	0xFE7
 31218                           postdec1	equ	0xFE5
 31219                           fsr1h	equ	0xFE2
 31220                           fsr1l	equ	0xFE1
 31221                           indf2	equ	0xFDF
 31222                           postinc2	equ	0xFDE
 31223                           postdec2	equ	0xFDD
 31224                           plusw2	equ	0xFDB
 31225                           fsr2h	equ	0xFDA
 31226                           fsr2l	equ	0xFD9
 31227                           status	equ	0xFD8
 31228                           
 31229 ;; *************** function i2_Word_GetPair *****************
 31230 ;; Defined at:
 31231 ;;		line 156 in file "Library/Types.c"
 31232 ;; Parameters:    Size  Location     Type
 31233 ;;  pInput          2   12[COMRAM] PTR struct Word
 31234 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 31235 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 31236 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 31237 ;;		 -> PortC(10), PortF(10), NULL(0), 
 31238 ;;  pPair           1   14[COMRAM] unsigned char 
 31239 ;; Auto vars:     Size  Location     Type
 31240 ;;		None
 31241 ;; Return value:  Size  Location     Type
 31242 ;;                  1    wreg      unsigned char 
 31243 ;; Registers used:
 31244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31245 ;; Tracked objects:
 31246 ;;		On entry : 0/0
 31247 ;;		On exit  : 0/0
 31248 ;;		Unchanged: 0/0
 31249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31250 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31253 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31254 ;;Total ram usage:        3 bytes
 31255 ;; Hardware stack levels used:    1
 31256 ;; Hardware stack levels required when called:    2
 31257 ;; This function calls:
 31258 ;;		i2_Byte_GetPair
 31259 ;; This function is called by:
 31260 ;;		i2_Port_SetPin
 31261 ;; This function uses a non-reentrant model
 31262 ;;
 31263                           
 31264                           	psect	text165
 31265  01687A                     __ptext165:
 31266                           	opt stack 0
 31267  01687A                     i2_Word_GetPair:
 31268                           	opt stack 13
 31269                           
 31270                           ;Types.c: 158: if (pPair >= 4)
 31271                           
 31272                           ;incstack = 0
 31273  01687A  0E03               	movlw	3
 31274  01687C  640F               	cpfsgt	i2Word_GetPair@pPair,c
 31275  01687E  D00C               	goto	i2l781
 31276                           
 31277                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 31278  016880  0E01               	movlw	1
 31279  016882  240D               	addwf	i2Word_GetPair@pInput,w,c
 31280  016884  6E0A               	movwf	i2Byte_GetPair@pInput,c
 31281  016886  0E00               	movlw	0
 31282  016888  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 31283  01688A  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 31284  01688C  500F               	movf	i2Word_GetPair@pPair,w,c
 31285  01688E  0FFC               	addlw	252
 31286  016890  6E0C               	movwf	i2Byte_GetPair@pPair,c
 31287  016892  ECB9  F0B5         	call	i2_Byte_GetPair	;wreg free
 31288  016896  0012               	return	
 31289  016898                     i2l781:
 31290                           
 31291                           ;Types.c: 160: else
 31292                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 31293  016898  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 31294  01689C  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 31295  0168A0  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 31296  0168A4  ECB9  F0B5         	call	i2_Byte_GetPair	;wreg free
 31297  0168A8  0012               	return	
 31298  0168AA                     __end_ofi2_Word_GetPair:
 31299                           	opt stack 0
 31300                           tosu	equ	0xFFF
 31301                           tosh	equ	0xFFE
 31302                           tosl	equ	0xFFD
 31303                           pclatu	equ	0xFFB
 31304                           pclath	equ	0xFFA
 31305                           tblptru	equ	0xFF8
 31306                           tblptrh	equ	0xFF7
 31307                           tblptrl	equ	0xFF6
 31308                           tablat	equ	0xFF5
 31309                           prodh	equ	0xFF4
 31310                           prodl	equ	0xFF3
 31311                           intcon	equ	0xFF2
 31312                           indf0	equ	0xFEF
 31313                           postinc0	equ	0xFEE
 31314                           fsr0h	equ	0xFEA
 31315                           fsr0l	equ	0xFE9
 31316                           wreg	equ	0xFE8
 31317                           indf1	equ	0xFE7
 31318                           postdec1	equ	0xFE5
 31319                           fsr1h	equ	0xFE2
 31320                           fsr1l	equ	0xFE1
 31321                           indf2	equ	0xFDF
 31322                           postinc2	equ	0xFDE
 31323                           postdec2	equ	0xFDD
 31324                           plusw2	equ	0xFDB
 31325                           fsr2h	equ	0xFDA
 31326                           fsr2l	equ	0xFD9
 31327                           status	equ	0xFD8
 31328                           
 31329 ;; *************** function i2_Byte_GetPair *****************
 31330 ;; Defined at:
 31331 ;;		line 87 in file "Library/Types.c"
 31332 ;; Parameters:    Size  Location     Type
 31333 ;;  pInput          2    9[COMRAM] PTR struct Byte
 31334 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31335 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31336 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31337 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31338 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31339 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31340 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31341 ;;		 -> NULL(0), 
 31342 ;;  pPair           1   11[COMRAM] unsigned char 
 31343 ;; Auto vars:     Size  Location     Type
 31344 ;;		None
 31345 ;; Return value:  Size  Location     Type
 31346 ;;                  1    wreg      unsigned char 
 31347 ;; Registers used:
 31348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31349 ;; Tracked objects:
 31350 ;;		On entry : 0/0
 31351 ;;		On exit  : 0/0
 31352 ;;		Unchanged: 0/0
 31353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31354 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31358 ;;Total ram usage:        3 bytes
 31359 ;; Hardware stack levels used:    1
 31360 ;; Hardware stack levels required when called:    1
 31361 ;; This function calls:
 31362 ;;		i2_Byte_GetZone
 31363 ;; This function is called by:
 31364 ;;		i2_Word_GetPair
 31365 ;; This function uses a non-reentrant model
 31366 ;;
 31367                           
 31368                           	psect	text166
 31369  016B72                     __ptext166:
 31370                           	opt stack 0
 31371  016B72                     i2_Byte_GetPair:
 31372                           	opt stack 13
 31373                           
 31374                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 31375                           
 31376                           ;incstack = 0
 31377  016B72  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 31378  016B76  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 31379  016B7A  0E04               	movlw	4
 31380  016B7C  6E03               	movwf	i2Byte_GetZone@pMax,c
 31381  016B7E  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 31382  016B82  0E02               	movlw	2
 31383  016B84  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 31384  016B86  EC5E  F0AC         	call	i2_Byte_GetZone	;wreg free
 31385  016B8A  0012               	return	
 31386  016B8C                     __end_ofi2_Byte_GetPair:
 31387                           	opt stack 0
 31388                           tosu	equ	0xFFF
 31389                           tosh	equ	0xFFE
 31390                           tosl	equ	0xFFD
 31391                           pclatu	equ	0xFFB
 31392                           pclath	equ	0xFFA
 31393                           tblptru	equ	0xFF8
 31394                           tblptrh	equ	0xFF7
 31395                           tblptrl	equ	0xFF6
 31396                           tablat	equ	0xFF5
 31397                           prodh	equ	0xFF4
 31398                           prodl	equ	0xFF3
 31399                           intcon	equ	0xFF2
 31400                           indf0	equ	0xFEF
 31401                           postinc0	equ	0xFEE
 31402                           fsr0h	equ	0xFEA
 31403                           fsr0l	equ	0xFE9
 31404                           wreg	equ	0xFE8
 31405                           indf1	equ	0xFE7
 31406                           postdec1	equ	0xFE5
 31407                           fsr1h	equ	0xFE2
 31408                           fsr1l	equ	0xFE1
 31409                           indf2	equ	0xFDF
 31410                           postinc2	equ	0xFDE
 31411                           postdec2	equ	0xFDD
 31412                           plusw2	equ	0xFDB
 31413                           fsr2h	equ	0xFDA
 31414                           fsr2l	equ	0xFD9
 31415                           status	equ	0xFD8
 31416                           
 31417 ;; *************** function i2_Byte_GetZone *****************
 31418 ;; Defined at:
 31419 ;;		line 64 in file "Library/Types.c"
 31420 ;; Parameters:    Size  Location     Type
 31421 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31422 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31423 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31424 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31425 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31426 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31427 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31428 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31429 ;;		 -> NULL(0), 
 31430 ;;  pMax            1    2[COMRAM] unsigned char 
 31431 ;;  pChunk          1    3[COMRAM] unsigned char 
 31432 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 31433 ;; Auto vars:     Size  Location     Type
 31434 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 31435 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 31436 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 31437 ;; Return value:  Size  Location     Type
 31438 ;;                  1    wreg      unsigned char 
 31439 ;; Registers used:
 31440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 31441 ;; Tracked objects:
 31442 ;;		On entry : 0/0
 31443 ;;		On exit  : 0/0
 31444 ;;		Unchanged: 0/0
 31445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31446 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31447 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31449 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31450 ;;Total ram usage:        9 bytes
 31451 ;; Hardware stack levels used:    1
 31452 ;; This function calls:
 31453 ;;		Nothing
 31454 ;; This function is called by:
 31455 ;;		i2_Byte_GetPair
 31456 ;; This function uses a non-reentrant model
 31457 ;;
 31458                           
 31459                           	psect	text167
 31460  0158BC                     __ptext167:
 31461                           	opt stack 0
 31462  0158BC                     i2_Byte_GetZone:
 31463                           	opt stack 13
 31464                           
 31465                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 31466                           
 31467                           ;incstack = 0
 31468  0158BC  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 31469  0158C0  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 31470  0158C4  0E00               	movlw	low (__mediumconst shr (0+16))
 31471  0158C6  6EF8               	movwf	tblptru,c
 31472  0158C8  0E0F               	movlw	(high __ramtop+-1)
 31473  0158CA  64F7               	cpfsgt	tblptrh,c
 31474  0158CC  D003               	bra	i2u532_47
 31475  0158CE  0008               	tblrd		*
 31476  0158D0  50F5               	movf	tablat,w,c
 31477  0158D2  D005               	bra	i2u532_40
 31478  0158D4                     i2u532_47:
 31479  0158D4  CFF6 FFE9          	movff	tblptrl,fsr0l
 31480  0158D8  CFF7 FFEA          	movff	tblptrh,fsr0h
 31481  0158DC  50EF               	movf	indf0,w,c
 31482  0158DE                     i2u532_40:
 31483  0158DE  6E09               	movwf	i2Byte_GetZone@Output,c
 31484                           
 31485                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 31486  0158E0  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31487  0158E2  0D01               	mullw	1
 31488  0158E4  0E0F               	movlw	low _MASKS
 31489  0158E6  24F3               	addwf	prodl,w,c
 31490  0158E8  6EF6               	movwf	tblptrl,c
 31491  0158EA  0EFD               	movlw	high _MASKS
 31492  0158EC  20F4               	addwfc	prodh,w,c
 31493  0158EE  6EF7               	movwf	tblptrh,c
 31494  0158F0                     	if	1	;There are 3 active tblptr bytes
 31495  0158F0  6AF8               	clrf	tblptru,c
 31496  0158F2  0E00               	movlw	low (__mediumconst shr (0+16))
 31497  0158F4  22F8               	addwfc	tblptru,f,c
 31498  0158F6                     	endif
 31499  0158F6  0008               	tblrd		*
 31500  0158F8  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 31501                           
 31502                           ;Types.c: 68: UINT8 Offset = 0;
 31503  0158FC  0E00               	movlw	0
 31504  0158FE  6E08               	movwf	i2Byte_GetZone@Offset,c
 31505                           
 31506                           ;Types.c: 70: while (pChunk >= pMax)
 31507  015900  D003               	goto	i2l732
 31508  015902                     
 31509                           ;Types.c: 71: {
 31510                           ;Types.c: 72: pChunk -= pMax;
 31511  015902  5003               	movf	i2Byte_GetZone@pMax,w,c
 31512  015904  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 31513                           
 31514                           ;Types.c: 73: Offset += 1;
 31515  015906  2A08               	incf	i2Byte_GetZone@Offset,f,c
 31516  015908                     i2l732:
 31517  015908  5003               	movf	i2Byte_GetZone@pMax,w,c
 31518  01590A  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 31519  01590C  B0D8               	btfsc	status,0,c
 31520  01590E  D7F9               	goto	i2l733
 31521                           
 31522                           ;Types.c: 74: }
 31523                           ;Types.c: 75: pChunk *= pChunkSize;
 31524  015910  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31525  015912  0204               	mulwf	i2Byte_GetZone@pChunk,c
 31526  015914  50F3               	movf	prodl,w,c
 31527  015916  6E04               	movwf	i2Byte_GetZone@pChunk,c
 31528                           
 31529                           ;Types.c: 76: pChunk += Offset;
 31530  015918  5008               	movf	i2Byte_GetZone@Offset,w,c
 31531  01591A  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 31532                           
 31533                           ;Types.c: 78: Output >>= pChunk;
 31534  01591C  2804               	incf	i2Byte_GetZone@pChunk,w,c
 31535  01591E  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 31536  015920  D002               	goto	i2u534_40
 31537  015922                     i2u534_45:
 31538  015922  90D8               	bcf	status,0,c
 31539  015924  3209               	rrcf	i2Byte_GetZone@Output,f,c
 31540  015926                     i2u534_40:
 31541  015926  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 31542  015928  D7FC               	goto	i2u534_45
 31543                           
 31544                           ;Types.c: 79: Output &= MASK;
 31545  01592A  5007               	movf	i2Byte_GetZone@MASK,w,c
 31546  01592C  1609               	andwf	i2Byte_GetZone@Output,f,c
 31547                           
 31548                           ;Types.c: 80: return Output;
 31549  01592E  5009               	movf	i2Byte_GetZone@Output,w,c
 31550  015930  0012               	return	
 31551  015932                     __end_ofi2_Byte_GetZone:
 31552                           	opt stack 0
 31553                           tosu	equ	0xFFF
 31554                           tosh	equ	0xFFE
 31555                           tosl	equ	0xFFD
 31556                           pclatu	equ	0xFFB
 31557                           pclath	equ	0xFFA
 31558                           tblptru	equ	0xFF8
 31559                           tblptrh	equ	0xFF7
 31560                           tblptrl	equ	0xFF6
 31561                           tablat	equ	0xFF5
 31562                           prodh	equ	0xFF4
 31563                           prodl	equ	0xFF3
 31564                           intcon	equ	0xFF2
 31565                           indf0	equ	0xFEF
 31566                           postinc0	equ	0xFEE
 31567                           fsr0h	equ	0xFEA
 31568                           fsr0l	equ	0xFE9
 31569                           wreg	equ	0xFE8
 31570                           indf1	equ	0xFE7
 31571                           postdec1	equ	0xFE5
 31572                           fsr1h	equ	0xFE2
 31573                           fsr1l	equ	0xFE1
 31574                           indf2	equ	0xFDF
 31575                           postinc2	equ	0xFDE
 31576                           postdec2	equ	0xFDD
 31577                           plusw2	equ	0xFDB
 31578                           fsr2h	equ	0xFDA
 31579                           fsr2l	equ	0xFD9
 31580                           status	equ	0xFD8
 31581                           
 31582 ;; *************** function i2_Byte_SetBit *****************
 31583 ;; Defined at:
 31584 ;;		line 32 in file "Library/Types.c"
 31585 ;; Parameters:    Size  Location     Type
 31586 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31587 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 31588 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 31589 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 31590 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 31591 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 31592 ;;		 -> NULL(0), 
 31593 ;;  pBit            1    2[COMRAM] unsigned char 
 31594 ;;  pValue          1    3[COMRAM] unsigned char 
 31595 ;; Auto vars:     Size  Location     Type
 31596 ;;		None
 31597 ;; Return value:  Size  Location     Type
 31598 ;;                  1    wreg      void 
 31599 ;; Registers used:
 31600 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 31601 ;; Tracked objects:
 31602 ;;		On entry : 0/0
 31603 ;;		On exit  : 0/0
 31604 ;;		Unchanged: 0/0
 31605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31606 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31608 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31609 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31610 ;;Total ram usage:        7 bytes
 31611 ;; Hardware stack levels used:    1
 31612 ;; This function calls:
 31613 ;;		Nothing
 31614 ;; This function is called by:
 31615 ;;		i2_Port_SetPin
 31616 ;; This function uses a non-reentrant model
 31617 ;;
 31618                           
 31619                           	psect	text168
 31620  0161D4                     __ptext168:
 31621                           	opt stack 0
 31622  0161D4                     i2_Byte_SetBit:
 31623                           	opt stack 15
 31624                           
 31625                           ;Types.c: 34: pValue &= 1;
 31626                           
 31627                           ;incstack = 0
 31628  0161D4  0E01               	movlw	1
 31629  0161D6  1604               	andwf	i2Byte_SetBit@pValue,f,c
 31630                           
 31631                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 31632  0161D8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31633  0161DC  0E01               	movlw	1
 31634  0161DE  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 31635  0161E0  2A05               	incf	??i2_Byte_SetBit,f,c
 31636  0161E2  D002               	goto	i2u667_44
 31637  0161E4                     i2u667_45:
 31638  0161E4  90D8               	bcf	status,0,c
 31639  0161E6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31640  0161E8                     i2u667_44:
 31641  0161E8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31642  0161EA  D7FC               	goto	i2u667_45
 31643  0161EC  5006               	movf	??i2_Byte_SetBit+1,w,c
 31644  0161EE  0AFF               	xorlw	255
 31645  0161F0  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 31646  0161F2  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31647  0161F6  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31648  0161FA  5007               	movf	??i2_Byte_SetBit+2,w,c
 31649  0161FC  16DF               	andwf	indf2,f,c
 31650                           
 31651                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 31652  0161FE  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31653  016202  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 31654  016206  2A05               	incf	??i2_Byte_SetBit,f,c
 31655  016208  D002               	goto	i2u668_44
 31656  01620A                     i2u668_45:
 31657  01620A  90D8               	bcf	status,0,c
 31658  01620C  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31659  01620E                     i2u668_44:
 31660  01620E  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31661  016210  D7FC               	goto	i2u668_45
 31662  016212  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31663  016216  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31664  01621A  5006               	movf	??i2_Byte_SetBit+1,w,c
 31665  01621C  12DF               	iorwf	indf2,f,c
 31666  01621E  0012               	return		;funcret
 31667  016220                     __end_ofi2_Byte_SetBit:
 31668                           	opt stack 0
 31669                           tosu	equ	0xFFF
 31670                           tosh	equ	0xFFE
 31671                           tosl	equ	0xFFD
 31672                           pclatu	equ	0xFFB
 31673                           pclath	equ	0xFFA
 31674                           tblptru	equ	0xFF8
 31675                           tblptrh	equ	0xFF7
 31676                           tblptrl	equ	0xFF6
 31677                           tablat	equ	0xFF5
 31678                           prodh	equ	0xFF4
 31679                           prodl	equ	0xFF3
 31680                           intcon	equ	0xFF2
 31681                           indf0	equ	0xFEF
 31682                           postinc0	equ	0xFEE
 31683                           fsr0h	equ	0xFEA
 31684                           fsr0l	equ	0xFE9
 31685                           wreg	equ	0xFE8
 31686                           indf1	equ	0xFE7
 31687                           postdec1	equ	0xFE5
 31688                           fsr1h	equ	0xFE2
 31689                           fsr1l	equ	0xFE1
 31690                           indf2	equ	0xFDF
 31691                           postinc2	equ	0xFDE
 31692                           postdec2	equ	0xFDD
 31693                           plusw2	equ	0xFDB
 31694                           fsr2h	equ	0xFDA
 31695                           fsr2l	equ	0xFD9
 31696                           status	equ	0xFD8
 31697                           
 31698 ;; *************** function i2_MXK_SwitchTo *****************
 31699 ;; Defined at:
 31700 ;;		line 105 in file "Library/MXK.c"
 31701 ;; Parameters:    Size  Location     Type
 31702 ;;  pModule         1    wreg     enum E6927
 31703 ;; Auto vars:     Size  Location     Type
 31704 ;;  pModule         1    7[COMRAM] enum E6927
 31705 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 31706 ;; Return value:  Size  Location     Type
 31707 ;;                  1    wreg      unsigned char 
 31708 ;; Registers used:
 31709 ;;		wreg, status,2, status,0, cstack
 31710 ;; Tracked objects:
 31711 ;;		On entry : 0/0
 31712 ;;		On exit  : 0/0
 31713 ;;		Unchanged: 0/0
 31714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31719 ;;Total ram usage:        2 bytes
 31720 ;; Hardware stack levels used:    1
 31721 ;; Hardware stack levels required when called:    1
 31722 ;; This function calls:
 31723 ;;		i2_delay_us
 31724 ;; This function is called by:
 31725 ;;		i2_Motor_Step
 31726 ;; This function uses a non-reentrant model
 31727 ;;
 31728                           
 31729                           	psect	text169
 31730  01677E                     __ptext169:
 31731                           	opt stack 0
 31732  01677E                     i2_MXK_SwitchTo:
 31733                           	opt stack 15
 31734                           
 31735                           ;incstack = 0
 31736                           ;i2MXK_SwitchTo@pModule stored from wreg
 31737  01677E  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 31738                           
 31739                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 31740  016780  5086               	movf	3974,w,c	;volatile
 31741  016782  0B0F               	andlw	15
 31742  016784  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 31743                           
 31744                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 31745  016786  504B               	movf	_Bus_State,w,c
 31746  016788  A4D8               	btfss	status,2,c
 31747  01678A  D002               	goto	i2l1730
 31748                           
 31749                           ;MXK.c: 110: return 0;
 31750  01678C  0E00               	movlw	0
 31751  01678E  0012               	return	
 31752  016790                     i2l1730:
 31753                           
 31754                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 31755  016790  0E00               	movlw	0
 31756  016792  6E4B               	movwf	_Bus_State,c
 31757                           
 31758                           ;MXK.c: 114: if (CUR != pModule)
 31759  016794  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31760  016796  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 31761  016798  B4D8               	btfsc	status,2,c
 31762  01679A  D00A               	goto	i2l1732
 31763                           
 31764                           ;MXK.c: 115: {
 31765                           ;MXK.c: 116: PORTG &= ~(0xF);
 31766  01679C  0EF0               	movlw	240
 31767  01679E  1686               	andwf	3974,f,c	;volatile
 31768                           
 31769                           ;MXK.c: 117: PORTG |= pModule;
 31770  0167A0  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31771  0167A2  1286               	iorwf	3974,f,c	;volatile
 31772                           
 31773                           ;MXK.c: 120: delay_us(10);
 31774  0167A4  0E00               	movlw	0
 31775  0167A6  6E02               	movwf	i2delay_us@us+1,c
 31776  0167A8  0E0A               	movlw	10
 31777  0167AA  6E01               	movwf	i2delay_us@us,c
 31778  0167AC  EC92  F0B2         	call	i2_delay_us	;wreg free
 31779  0167B0                     i2l1732:
 31780                           
 31781                           ;MXK.c: 121: }
 31782                           ;MXK.c: 122: return 1;
 31783  0167B0  0E01               	movlw	1
 31784  0167B2  0012               	return	
 31785  0167B4                     __end_ofi2_MXK_SwitchTo:
 31786                           	opt stack 0
 31787                           tosu	equ	0xFFF
 31788                           tosh	equ	0xFFE
 31789                           tosl	equ	0xFFD
 31790                           pclatu	equ	0xFFB
 31791                           pclath	equ	0xFFA
 31792                           tblptru	equ	0xFF8
 31793                           tblptrh	equ	0xFF7
 31794                           tblptrl	equ	0xFF6
 31795                           tablat	equ	0xFF5
 31796                           prodh	equ	0xFF4
 31797                           prodl	equ	0xFF3
 31798                           intcon	equ	0xFF2
 31799                           indf0	equ	0xFEF
 31800                           postinc0	equ	0xFEE
 31801                           fsr0h	equ	0xFEA
 31802                           fsr0l	equ	0xFE9
 31803                           wreg	equ	0xFE8
 31804                           indf1	equ	0xFE7
 31805                           postdec1	equ	0xFE5
 31806                           fsr1h	equ	0xFE2
 31807                           fsr1l	equ	0xFE1
 31808                           indf2	equ	0xFDF
 31809                           postinc2	equ	0xFDE
 31810                           postdec2	equ	0xFDD
 31811                           plusw2	equ	0xFDB
 31812                           fsr2h	equ	0xFDA
 31813                           fsr2l	equ	0xFD9
 31814                           status	equ	0xFD8
 31815                           
 31816 ;; *************** function i2_delay_us *****************
 31817 ;; Defined at:
 31818 ;;		line 255 in file "Library/Types.c"
 31819 ;; Parameters:    Size  Location     Type
 31820 ;;  us              2    0[COMRAM] unsigned short 
 31821 ;; Auto vars:     Size  Location     Type
 31822 ;;  delay_us        4    2[COMRAM] unsigned long 
 31823 ;; Return value:  Size  Location     Type
 31824 ;;                  1    wreg      void 
 31825 ;; Registers used:
 31826 ;;		wreg, status,2, status,0
 31827 ;; Tracked objects:
 31828 ;;		On entry : 0/0
 31829 ;;		On exit  : 0/0
 31830 ;;		Unchanged: 0/0
 31831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31833 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31836 ;;Total ram usage:        6 bytes
 31837 ;; Hardware stack levels used:    1
 31838 ;; This function calls:
 31839 ;;		Nothing
 31840 ;; This function is called by:
 31841 ;;		i2_MXK_SwitchTo
 31842 ;; This function uses a non-reentrant model
 31843 ;;
 31844                           
 31845                           	psect	text170
 31846  016524                     __ptext170:
 31847                           	opt stack 0
 31848  016524                     i2_delay_us:
 31849                           	opt stack 15
 31850                           
 31851                           ;Types.c: 256: unsigned long u;
 31852                           ;Types.c: 257: while (us--) {
 31853                           
 31854                           ;incstack = 0
 31855  016524  D016               	goto	i2u671_40
 31856  016526                     i2l9927:
 31857                           
 31858                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 31859  016526  0E00               	movlw	0
 31860  016528  6E03               	movwf	i2delay_us@u,c
 31861  01652A  0E00               	movlw	0
 31862  01652C  6E04               	movwf	i2delay_us@u+1,c
 31863  01652E  0E00               	movlw	0
 31864  016530  6E05               	movwf	i2delay_us@u+2,c
 31865  016532  0E00               	movlw	0
 31866  016534  6E06               	movwf	i2delay_us@u+3,c
 31867  016536                     i2l9929:
 31868  016536  5003               	movf	i2delay_us@u,w,c
 31869  016538  1004               	iorwf	i2delay_us@u+1,w,c
 31870  01653A  1005               	iorwf	i2delay_us@u+2,w,c
 31871  01653C  1006               	iorwf	i2delay_us@u+3,w,c
 31872  01653E  A4D8               	btfss	status,2,c
 31873  016540  D008               	goto	i2u671_40
 31874  016542  F000               	nop		; ;# 
 31875  016544  0E01               	movlw	1
 31876  016546  2603               	addwf	i2delay_us@u,f,c
 31877  016548  0E00               	movlw	0
 31878  01654A  2204               	addwfc	i2delay_us@u+1,f,c
 31879  01654C  2205               	addwfc	i2delay_us@u+2,f,c
 31880  01654E  2206               	addwfc	i2delay_us@u+3,f,c
 31881  016550  D7F2               	goto	i2l9929
 31882  016552                     i2u671_40:
 31883  016552  0601               	decf	i2delay_us@us,f,c
 31884  016554  A0D8               	btfss	status,0,c
 31885  016556  0602               	decf	i2delay_us@us+1,f,c
 31886  016558  2801               	incf	i2delay_us@us,w,c
 31887  01655A  E1E5               	bnz	i2l9927
 31888  01655C  2802               	incf	i2delay_us@us+1,w,c
 31889  01655E  B4D8               	btfsc	status,2,c
 31890  016560  0012               	return	
 31891  016562  D7E1               	goto	i2l832
 31892  016564                     __end_ofi2_delay_us:
 31893                           	opt stack 0
 31894                           tosu	equ	0xFFF
 31895                           tosh	equ	0xFFE
 31896                           tosl	equ	0xFFD
 31897                           pclatu	equ	0xFFB
 31898                           pclath	equ	0xFFA
 31899                           tblptru	equ	0xFF8
 31900                           tblptrh	equ	0xFF7
 31901                           tblptrl	equ	0xFF6
 31902                           tablat	equ	0xFF5
 31903                           prodh	equ	0xFF4
 31904                           prodl	equ	0xFF3
 31905                           intcon	equ	0xFF2
 31906                           indf0	equ	0xFEF
 31907                           postinc0	equ	0xFEE
 31908                           fsr0h	equ	0xFEA
 31909                           fsr0l	equ	0xFE9
 31910                           wreg	equ	0xFE8
 31911                           indf1	equ	0xFE7
 31912                           postdec1	equ	0xFE5
 31913                           fsr1h	equ	0xFE2
 31914                           fsr1l	equ	0xFE1
 31915                           indf2	equ	0xFDF
 31916                           postinc2	equ	0xFDE
 31917                           postdec2	equ	0xFDD
 31918                           plusw2	equ	0xFDB
 31919                           fsr2h	equ	0xFDA
 31920                           fsr2l	equ	0xFD9
 31921                           status	equ	0xFD8
 31922                           
 31923 ;; *************** function i2_MXK_Release *****************
 31924 ;; Defined at:
 31925 ;;		line 130 in file "Library/MXK.c"
 31926 ;; Parameters:    Size  Location     Type
 31927 ;;		None
 31928 ;; Auto vars:     Size  Location     Type
 31929 ;;		None
 31930 ;; Return value:  Size  Location     Type
 31931 ;;                  1    wreg      unsigned char 
 31932 ;; Registers used:
 31933 ;;		wreg, status,2, status,0
 31934 ;; Tracked objects:
 31935 ;;		On entry : 0/0
 31936 ;;		On exit  : 0/0
 31937 ;;		Unchanged: 0/0
 31938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31943 ;;Total ram usage:        0 bytes
 31944 ;; Hardware stack levels used:    1
 31945 ;; This function calls:
 31946 ;;		Nothing
 31947 ;; This function is called by:
 31948 ;;		i2_Motor_Step
 31949 ;; This function uses a non-reentrant model
 31950 ;;
 31951                           
 31952                           	psect	text171
 31953  016D8C                     __ptext171:
 31954                           	opt stack 0
 31955  016D8C                     i2_MXK_Release:
 31956                           	opt stack 16
 31957                           
 31958                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31959                           
 31960                           ;incstack = 0
 31961  016D8C  0E01               	movlw	1
 31962  016D8E  6E4B               	movwf	_Bus_State,c
 31963                           
 31964                           ;MXK.c: 135: return 1;
 31965                           ;	Return value of i2_MXK_Release is never used
 31966  016D90  0012               	return	
 31967  016D92                     __end_ofi2_MXK_Release:
 31968                           	opt stack 0
 31969                           tosu	equ	0xFFF
 31970                           tosh	equ	0xFFE
 31971                           tosl	equ	0xFFD
 31972                           pclatu	equ	0xFFB
 31973                           pclath	equ	0xFFA
 31974                           tblptru	equ	0xFF8
 31975                           tblptrh	equ	0xFF7
 31976                           tblptrl	equ	0xFF6
 31977                           tablat	equ	0xFF5
 31978                           prodh	equ	0xFF4
 31979                           prodl	equ	0xFF3
 31980                           intcon	equ	0xFF2
 31981                           indf0	equ	0xFEF
 31982                           postinc0	equ	0xFEE
 31983                           fsr0h	equ	0xFEA
 31984                           fsr0l	equ	0xFE9
 31985                           wreg	equ	0xFE8
 31986                           indf1	equ	0xFE7
 31987                           postdec1	equ	0xFE5
 31988                           fsr1h	equ	0xFE2
 31989                           fsr1l	equ	0xFE1
 31990                           indf2	equ	0xFDF
 31991                           postinc2	equ	0xFDE
 31992                           postdec2	equ	0xFDD
 31993                           plusw2	equ	0xFDB
 31994                           fsr2h	equ	0xFDA
 31995                           fsr2l	equ	0xFD9
 31996                           status	equ	0xFD8
 31997                           
 31998 ;; *************** function i2_MXK_Queue *****************
 31999 ;; Defined at:
 32000 ;;		line 144 in file "Library/MXK.c"
 32001 ;; Parameters:    Size  Location     Type
 32002 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 32003 ;;		 -> Absolute function(1), Motor_Step(1), 
 32004 ;; Auto vars:     Size  Location     Type
 32005 ;;		None
 32006 ;; Return value:  Size  Location     Type
 32007 ;;                  1    wreg      void 
 32008 ;; Registers used:
 32009 ;;		wreg, status,2, status,0
 32010 ;; Tracked objects:
 32011 ;;		On entry : 0/0
 32012 ;;		On exit  : 0/0
 32013 ;;		Unchanged: 0/0
 32014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32015 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32018 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32019 ;;Total ram usage:        3 bytes
 32020 ;; Hardware stack levels used:    1
 32021 ;; This function calls:
 32022 ;;		Nothing
 32023 ;; This function is called by:
 32024 ;;		i2_Motor_Step
 32025 ;; This function uses a non-reentrant model
 32026 ;;
 32027                           
 32028                           	psect	text172
 32029  016CFE                     __ptext172:
 32030                           	opt stack 0
 32031  016CFE                     i2_MXK_Queue:
 32032                           	opt stack 16
 32033                           
 32034                           ;MXK.c: 146: lQueue = pCallback;
 32035                           
 32036                           ;incstack = 0
 32037  016CFE  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 32038  016D02  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 32039  016D06  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 32040  016D0A  0012               	return		;funcret
 32041  016D0C                     __end_ofi2_MXK_Queue:
 32042                           	opt stack 0
 32043                           tosu	equ	0xFFF
 32044                           tosh	equ	0xFFE
 32045                           tosl	equ	0xFFD
 32046                           pclatu	equ	0xFFB
 32047                           pclath	equ	0xFFA
 32048                           tblptru	equ	0xFF8
 32049                           tblptrh	equ	0xFF7
 32050                           tblptrl	equ	0xFF6
 32051                           tablat	equ	0xFF5
 32052                           prodh	equ	0xFF4
 32053                           prodl	equ	0xFF3
 32054                           intcon	equ	0xFF2
 32055                           indf0	equ	0xFEF
 32056                           postinc0	equ	0xFEE
 32057                           fsr0h	equ	0xFEA
 32058                           fsr0l	equ	0xFE9
 32059                           wreg	equ	0xFE8
 32060                           indf1	equ	0xFE7
 32061                           postdec1	equ	0xFE5
 32062                           fsr1h	equ	0xFE2
 32063                           fsr1l	equ	0xFE1
 32064                           indf2	equ	0xFDF
 32065                           postinc2	equ	0xFDE
 32066                           postdec2	equ	0xFDD
 32067                           plusw2	equ	0xFDB
 32068                           fsr2h	equ	0xFDA
 32069                           fsr2l	equ	0xFD9
 32070                           status	equ	0xFD8
 32071                           tosu	equ	0xFFF
 32072                           tosh	equ	0xFFE
 32073                           tosl	equ	0xFFD
 32074                           pclatu	equ	0xFFB
 32075                           pclath	equ	0xFFA
 32076                           tblptru	equ	0xFF8
 32077                           tblptrh	equ	0xFF7
 32078                           tblptrl	equ	0xFF6
 32079                           tablat	equ	0xFF5
 32080                           prodh	equ	0xFF4
 32081                           prodl	equ	0xFF3
 32082                           intcon	equ	0xFF2
 32083                           indf0	equ	0xFEF
 32084                           postinc0	equ	0xFEE
 32085                           fsr0h	equ	0xFEA
 32086                           fsr0l	equ	0xFE9
 32087                           wreg	equ	0xFE8
 32088                           indf1	equ	0xFE7
 32089                           postdec1	equ	0xFE5
 32090                           fsr1h	equ	0xFE2
 32091                           fsr1l	equ	0xFE1
 32092                           indf2	equ	0xFDF
 32093                           postinc2	equ	0xFDE
 32094                           postdec2	equ	0xFDD
 32095                           plusw2	equ	0xFDB
 32096                           fsr2h	equ	0xFDA
 32097                           fsr2l	equ	0xFD9
 32098                           status	equ	0xFD8
 32099                           
 32100                           	psect	text173
 32101  000000                     __ptext173:
 32102                           	opt stack 0
 32103                           tosu	equ	0xFFF
 32104                           tosh	equ	0xFFE
 32105                           tosl	equ	0xFFD
 32106                           pclatu	equ	0xFFB
 32107                           pclath	equ	0xFFA
 32108                           tblptru	equ	0xFF8
 32109                           tblptrh	equ	0xFF7
 32110                           tblptrl	equ	0xFF6
 32111                           tablat	equ	0xFF5
 32112                           prodh	equ	0xFF4
 32113                           prodl	equ	0xFF3
 32114                           intcon	equ	0xFF2
 32115                           indf0	equ	0xFEF
 32116                           postinc0	equ	0xFEE
 32117                           fsr0h	equ	0xFEA
 32118                           fsr0l	equ	0xFE9
 32119                           wreg	equ	0xFE8
 32120                           indf1	equ	0xFE7
 32121                           postdec1	equ	0xFE5
 32122                           fsr1h	equ	0xFE2
 32123                           fsr1l	equ	0xFE1
 32124                           indf2	equ	0xFDF
 32125                           postinc2	equ	0xFDE
 32126                           postdec2	equ	0xFDD
 32127                           plusw2	equ	0xFDB
 32128                           fsr2h	equ	0xFDA
 32129                           fsr2l	equ	0xFD9
 32130                           status	equ	0xFD8
 32131                           
 32132                           	psect	rparam
 32133  0000                     tosu	equ	0xFFF
 32134                           tosh	equ	0xFFE
 32135                           tosl	equ	0xFFD
 32136                           pclatu	equ	0xFFB
 32137                           pclath	equ	0xFFA
 32138                           tblptru	equ	0xFF8
 32139                           tblptrh	equ	0xFF7
 32140                           tblptrl	equ	0xFF6
 32141                           tablat	equ	0xFF5
 32142                           prodh	equ	0xFF4
 32143                           prodl	equ	0xFF3
 32144                           intcon	equ	0xFF2
 32145                           indf0	equ	0xFEF
 32146                           postinc0	equ	0xFEE
 32147                           fsr0h	equ	0xFEA
 32148                           fsr0l	equ	0xFE9
 32149                           wreg	equ	0xFE8
 32150                           indf1	equ	0xFE7
 32151                           postdec1	equ	0xFE5
 32152                           fsr1h	equ	0xFE2
 32153                           fsr1l	equ	0xFE1
 32154                           indf2	equ	0xFDF
 32155                           postinc2	equ	0xFDE
 32156                           postdec2	equ	0xFDD
 32157                           plusw2	equ	0xFDB
 32158                           fsr2h	equ	0xFDA
 32159                           fsr2l	equ	0xFD9
 32160                           status	equ	0xFD8
 32161                           
 32162                           	psect	temp
 32163  000051                     btemp:
 32164                           	opt stack 0
 32165  000051                     	ds	1
 32166  0000                     int$flags	set	btemp
 32167  0000                     wtemp6	set	btemp+1
 32168                           tosu	equ	0xFFF
 32169                           tosh	equ	0xFFE
 32170                           tosl	equ	0xFFD
 32171                           pclatu	equ	0xFFB
 32172                           pclath	equ	0xFFA
 32173                           tblptru	equ	0xFF8
 32174                           tblptrh	equ	0xFF7
 32175                           tblptrl	equ	0xFF6
 32176                           tablat	equ	0xFF5
 32177                           prodh	equ	0xFF4
 32178                           prodl	equ	0xFF3
 32179                           intcon	equ	0xFF2
 32180                           indf0	equ	0xFEF
 32181                           postinc0	equ	0xFEE
 32182                           fsr0h	equ	0xFEA
 32183                           fsr0l	equ	0xFE9
 32184                           wreg	equ	0xFE8
 32185                           indf1	equ	0xFE7
 32186                           postdec1	equ	0xFE5
 32187                           fsr1h	equ	0xFE2
 32188                           fsr1l	equ	0xFE1
 32189                           indf2	equ	0xFDF
 32190                           postinc2	equ	0xFDE
 32191                           postdec2	equ	0xFDD
 32192                           plusw2	equ	0xFDB
 32193                           fsr2h	equ	0xFDA
 32194                           fsr2l	equ	0xFD9
 32195                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        31
    BSS         825
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     64     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      6     256
    BANK4           256      8     178
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[21]), STR_17(CODE[21]), 
		 -> STR_16(CODE[21]), STR_15(CODE[3]), STR_14(CODE[76]), STR_13(CODE[3]), 
		 -> STR_12(CODE[14]), STR_11(CODE[3]), STR_10(CODE[46]), STR_9(CODE[3]), 
		 -> STR_8(CODE[46]), STR_7(CODE[3]), STR_6(CODE[60]), STR_5(CODE[3]), 
		 -> STR_4(CODE[60]), STR_3(CODE[3]), STR_2(CODE[14]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _mode3->_move_and_rotate
    _measureAndDisplayDistance->___fltol
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _measureAndDisplayDistance->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _mode4->_findClosestWall

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_mode1

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2272046
                                              6 BANK4      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
          _measureAndDisplayDistance
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  306202
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                    _findClosestWall
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     18    18      0  125274
                                              0 BANK3      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                           _delay_ms
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  215533
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      1     1      0  121433
                                             63 BANK0      1     1      0
                     _Console_Render
                             ___wmul
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       11     7      4   10329
                                             29 BANK0     11     7      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                0     0      0  233598
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
          _measureAndDisplayDistance
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _measureAndDisplayDistance                            4     4      0   56547
                                              4 BANK1      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            ___fldiv
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  202240
                                              0 BANK3      2     2      0
                                              0 BANK4      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   94100
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    7403
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1857
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    5359
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    2435
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4   10249
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     848
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3369
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    4615
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0 1000680
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  363072
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              0 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  292340
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262573
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   95197
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    2078
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1678
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   97279
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85621
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85621
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   38253
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    5158
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _measureAndDisplayDistance
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _measureAndDisplayDistance
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       ___fldiv
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       ___wmul
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _measureAndDisplayDistance
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
         _ADC_Voltage
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         ___fldiv
         ___fltol
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
             ___xxtofl
           ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _delay_ms
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      8      B2      14       69.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      6     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4A2      12        0.0%
DATA                 0      0     5CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Sep 16 23:24:44 2017

                                 _update_angle 6C86                                  i2_Timer0_Stop 6D86  
                             SPI_Init@pChannel 00EA                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3D3C                                              _A 004C  
                        __end_of_irobot_rotate 3C30                                              l8 43D4  
                                 ___fldiv@aexp 00D1                                   ___fldiv@bexp 00D0  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6B1E                                   ___fldiv@sign 00C5  
                                           l11 354A                                             l12 3534  
                                           l90 3480                                             l85 337C  
                                           l87 33EA                                             l89 3456  
                                 ___awdiv@sign 00BE                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BB                                  _HMI_DIPSwitch 6BBC  
                           LCD_DrawField@pSize 00D1                             LCD_DrawField@count 00D7  
                   __end_of_irobot_stop_motion 63D2                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6D24                           ADC_ClockDivision@reg 00BA  
                                          l120 532A                                            l121 5340  
                                          l122 5356                                            l220 5EFA  
                                          l117 536C                                            l221 5EBE  
                                          l118 5314                                            l230 6156  
                                          l222 5F0A                                            l223 5EDC  
                                  ?_LED_Toggle 0001                                            l234 637A  
                                          l235 634A                                            l227 6172  
                                          l403 300A                                            l412 2CE6  
                                          l228 613A                                            l340 4F3A  
                                          l404 2FAA                                            l237 6362  
                                          l421 2C7A                                            l413 2B7C  
                                          l341 4F48                                            l405 303A  
                                ??_Console_Tab 00C1                                            l430 461A  
                                          l414 2D02                                            l350 5042  
                                          l342 4F56                                            l510 21A8  
                                          l406 2FC2                                            l415 2BA2  
                                          l351 4FD2                                            l343 4F64  
                                          l511 22B8                                            l407 2FDA  
                                          l183 50F6                                            l432 4644  
                                          l600 0D66                                            l344 4F72  
                                          l512 21CA                                            l408 2FF2  
                                          l184 50D0                                            l433 4674  
                                          l417 2C0E                                            l601 0EFA  
                                          l353 4FE0                                            l337 4F9C  
                                          l345 4F80                                            l610 0F82  
                                          l602 0D98                                            l354 4FEE  
                                          l346 4F8E                                            l338 4F2C  
                                          l370 4ECC                                            l427 469E  
                                          l611 0FD0                                            l603 0F0C  
                                          l355 4FFC                                            l363 4EF6  
                                          l371 4EDA                                            l531 1C62  
                                  ?_HMI_GetBar 0001                                            l612 101E  
                                          l604 0E46                                            l356 500A  
                                          l372 4EE8                                            l364 4E86  
                                          l532 1C86                                            l516 2212  
                                          l357 5018                                            l509 229C  
                                          l614 1100                                            l358 5026  
                                          l366 4E94                                            l526 1CA6  
                                          l615 10F8                                            l607 106C  
                                          l359 5034                                            l367 4EA2  
                                          l519 225A                                            l616 1112  
                                          l608 0F34                                            l368 4EB0  
                                          l528 1CC4                                            l393 602C  
                                          l617 10FC                                            l609 108A  
                                          l369 4EBE                                            l529 1C42  
                                          l483 2008                                            l732 52AE  
                                          l900 1D80                                            l476 20E0  
                                          l733 52A2                                            l901 1D84  
                                          l389 5D82                                            l477 1F52  
                                          l397 62F6                                            l910 1DA8  
                                          l902 1D88                                            l726 4AA4  
                                          l478 20FC                                            l486 2074  
                                          l654 6964                                            l911 1DAC  
                                          l903 1D8C                                            l727 4A98  
                                          l479 1F9C                                            l655 695C  
                                          l912 1DB0                                            l904 1D90  
                                          l824 5CB6                                            l832 60E4  
                                          l913 1DB4                                            l905 1D94  
                                          l921 5C2C                                            l673 683C  
                                          l657 6960                                            l681 5B84  
                                          l914 1DB8                                            l906 1D98  
                                          l922 5BF8                                            l930 4212  
                                          l915 1DBC                                            l907 1D9C  
                                          l819 57C6                                            l916 1DC0  
                                          l908 1DA0                                            l860 1CE0  
                                          l684 5B9A                                            l781 664A  
                                          l853 1DC8                                            l917 1DC4  
                                          l909 1DA4                                            l861 1CE4  
                                          l597 0D74                                            l870 1D08  
                                          l862 1CE8                                            l854 1CCC  
                                          l598 0D5C                                            l678 5BC0  
                                          l686 5BAA                                            l871 1D0C  
                                          l863 1CEC                                            l599 0D84  
                                          l679 5B74                                            l880 1D30  
                                          l872 1D10                                            l864 1CF0  
                                          l856 1CD0                                            l928 4292  
                                          l776 6402                                            l881 1D34  
                                          l873 1D14                                            l865 1CF4  
                                          l857 1CD4                                            l929 4262  
                                          l890 1D58                                            l882 1D38  
                                          l874 1D18                                            l866 1CF8  
                                          l858 1CD8                                            l891 1D5C  
                                          l883 1D3C                                            l875 1D1C  
                                          l867 1CFC                                            l859 1CDC  
                                          l892 1D60                                            l884 1D40  
                                          l876 1D20                                            l868 1D00  
                                          l893 1D64                                            l885 1D44  
                                          l877 1D24                                            l869 1D04  
                                          l894 1D68                                            l886 1D48  
                                          l878 1D28                                            l990 5436  
                                          l895 1D6C                                            l887 1D4C  
                                          l879 1D2C                                            l983 5194  
                                          l896 1D70                                            l888 1D50  
                                          l976 5550                                            l992 5446  
                                          l984 5118                                            l897 1D74  
                                          l889 1D54                                            l985 5190  
                                          l898 1D78                                            l978 5560  
                                          l899 1D7C                                            l997 5F92  
                                          l999 5FB6                                            _PR2 000FCB  
                                          _dip 033E                                            _val 007B  
                              __end_of_ADC_Off 6D66                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D2                                   _Word_GetPair 661E  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C0                     __end_of_ADC_ConversionTime 6344  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00C9                             Console_MakeField@y 00CA  
                                   _TXSTA1bits 000FAD                                _update_distance 6C74  
                                 Console_Tab@c 00C8                                   Console_Tab@i 00C7  
                          LCD_DrawField@pField 00CB                                   Console_Tab@t 00C6  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D4  
                                 ___flmul@bexp 00D9                                     i2_delay_us 6524  
                         Port_Set@TypeRequired 00DB                                   ___flmul@sign 00D3  
                                 ___flmul@temp 00DE                                   ___flmul@prod 00DA  
                            Console_FormFeed@x 00BB                              Console_FormFeed@y 00BC  
                          LCD_DrawField@pPoint 00CD                                 ?_LCD_DrawField 00CB  
                        Port_SetPinType@Output 00E3                                Port_SetPin@Type 00CC  
                              Port_SetPin@pPin 00CA                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C2                                __end_of_LED_Set 6184  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4D30  
                                 ___fltol@exp1 00F7                                   _Word_SetPair 63D2  
                                         l1000 5FD2                                           l1010 470E  
                                         l1004 5E22                                  ?_Byte_GetZone 00B9  
                                         l1005 5E50                                           l1200 49C4  
                                         l1040 2D30                                           l1201 4A18  
                                         l1009 471A                                           l1041 2D36  
                                         l1202 4A34                                           l1042 2D3C  
                                         l1043 2D42                                           l1204 4A5E  
                                         l1300 55E2                                           l1036 2E8C  
                                         l1044 2D48                                           l1205 4A44  
                                         l1301 55E6                                           l1045 2D4E  
                                         l1037 2D2A                                           l2021 5DB2  
                                         l2101 31CC                                           l1302 55F0  
                                         l1062 2564                                           l2110 6498  
                                         l2030 5DAA                                           l2022 5D8E  
                                         l2102 3110                                           l1207 4A70  
                                         l1303 55FE                                           l1063 2592  
                                         l1047 2DF4                                           l2031 5DAE  
                                         l2103 3158                                           l1056 23F4  
                                         l2112 6484                                           l2024 5D92  
                                         l2040 3E58                                           l2104 3116  
                                         l1313 6324                                           l1153 27D2  
                                         l1057 25BA                                           l2025 5D96  
                                         l2041 3E5E                                           l1082 4594  
                                         l1058 23FC                                           l1146 56E8  
                                         l2114 648C                                           l2026 5D9A  
                                         l2042 3E64                                           l3003 1820  
                                         l1059 2426                                           l2027 5D9E  
                                         l2035 3EF0                                           l2051 3EC4  
                                         l2043 3E6A                                           l3020 0990  
                                         l3012 08D2                                           l1084 459C  
                                         l2028 5DA2                                           l2044 3E70  
                                         l2036 3E42                                           l3005 1870  
                                         l3013 08FC                                           l1077 4564  
                                         l2029 5DA6                                           l1254 6C68  
                                         l2118 5CA0                                           l3006 189E  
                                         l3014 08F6                                           l1158 65A0  
                                         l2070 5510                                           l2062 54CA  
                                         l2046 3E84                                           l2038 3E4C  
                                         l2119 5C62                                           l3007 18D4  
                                         l3031 0C72                                           l3015 090E  
                                         l1079 4574                                           l2039 3E52  
                                         l1280 5664                                           l2144 606A  
                                         l3008 18E4                                           l3024 0C18  
                                         l3016 092C                                           l3009 18E8  
                                         l3033 0CC2                                           l3025 0BEE  
                                         l3017 0956                                           l3041 281E  
                                         l2049 3EB0                                           l2401 132A  
                                         l2322 47B8                                           l2314 4E06  
                                         l3034 0CE8                                           l3026 0C04  
                                         l3018 0950                                           l3042 282E  
                                         l2074 552E                                           l2066 54EA  
                                         l2058 54B0                                           l2162 3BBA  
                                         l2323 47E4                                           l1283 56C6  
                                         l3019 0968                                           l3051 2918  
                                         l3043 2856                                           l2139 4BB0  
                                         l2411 1536                                           l2403 13EC  
                                         l2163 3BA6                                           l2324 4810  
                                         l1276 564C                                           l2316 4E38  
                                         l3036 0D16                                           l3052 2908  
                                         l2332 6264                                           l2412 149C  
                                         l2404 134A                                           l2420 3FEA  
                                         l2156 3B52                                           l3037 0D40  
                                         l3045 286E                                           l2173 63B6  
                                         l2421 3F9C                                           l1294 5606  
                                         l1630 395E                                           l3038 0D36  
                                         l3046 285E                                           l2414 14D4  
                                         l2406 1382                                           l2166 3C08  
                                         l2158 3B58                                           l2350 0288  
                                         l2430 3A60                                           l1295 55CC  
                                         l1631 39BA                                           l2095 30CC  
                                         l2167 3BE2                                           l2159 3B7A  
                                         l2351 01E6                                           l2343 004E  
                                         l2431 3A48                                           l1296 5630  
                                         l1632 399E                                           l3056 293E  
                                         l3048 28CA                                           l2096 3086  
                                         l2336 44B4                                           l2360 0414  
                                         l1297 55D6                                           l3057 2990  
                                         l3049 28AC                                           l2329 6248  
                                         l2337 4466                                           l2361 0874  
                                         l2353 021E                                           l2345 00F0  
                                         l1298 55DA                                           l1730 64B8  
                                         l2098 30FC                                           l2362 0424  
                                         l2346 017C                                           l2442 401A  
                                         l1299 55DE                                           l1627 3A06  
                                         l2099 30E0                                           l2371 06A6  
                                         l2443 40C6                                           l1724 65EC  
                                         l1732 64E0                                           l1628 39FC  
                                         l2372 0604                                           l2364 046C  
                                         l2356 0302                                           l2348 01C6  
                                         l2436 3B16                                           l2444 4020  
                                         l1629 397C                                           l2381 07DA  
                                         l2445 40F6                                           l1726 661A  
                                         l2382 0830                                           l2374 063C  
                                         l2366 050E                                           l2358 0388  
                                         l2446 4026                                           l1735 6B52  
                                         l2383 0866                                           l2367 059A  
                                         l2359 03DE                                           l2447 402C  
                                         l2720 3CC4                                           l2472 2A30  
                                         l2448 4032                                           l2473 29CC  
                                         l2465 29B0                                           l2377 0720  
                                         l2369 05E4                                           l2449 4038  
                                         l2482 2AD8                                           l2474 29E4  
                                         l2466 29C4                                           l2394 11DA  
                                         l1827 37FE                                           l2483 2B36  
                                         l2467 29F4                                           l2475 29EE  
                                         l2379 079C                                           l1828 381E  
                                         l2484 2ADE                                           l2476 2A68  
                                         l2396 120E                                           l2901 5F3A  
                                         l2725 3D04                                           l2717 3C56  
                                         l2902 5F2E                                           l2726 3CF4  
                                         l2662 48D0                                           l2478 2A82  
                                         l2398 12AE                                           l2719 3CD8  
                                         l2663 48DE                                           l2655 485A  
                                         l2399 12DE                                           l1784 3698  
                                         l2728 3D2A                                           l2664 48F2  
                                         l2656 4870                                           l2905 5F64  
                                         l1873 66CC                                           l1785 36A6  
                                         l2906 5F72                                           l2842 4994  
                                         l2658 489A                                           l2843 49A6  
                                         l1787 36B0                                           l2659 488E  
                                         l2838 493A                                           l2839 492A  
                                         l2891 586E                                           l2892 5862  
                                         l2980 158E                                           l2990 16F6  
                                         l2982 15C8                                           l2895 58A4  
                                         l2991 172E                                           l2983 15F6  
                                         l2896 58B2                                           l2992 1722  
                                         l2984 15EC                                           l2993 1776  
                                         l2986 164A                                           l2978 156A  
                                         l2979 1598                                           l2996 17C6  
                                         l2988 1678                                           l2997 179C  
                                         l2989 177A                                           l2998 17B2  
                               ??_Console_Init 00B9                          Port_SetPinType@pInput 00DF  
                                         STR_1 FFFB                                           STR_2 FFED  
                                         STR_3 FFFB                                           STR_4 FF59  
                                         STR_5 FFFB                                           STR_6 FF59  
                                         STR_7 FFFB                                           STR_8 FF95  
                                         STR_9 FFFB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 5072  
                     __end_of_irobot_song_play 6C60                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9100 5278                                           u9120 52DE  
                          __end_of_GetPortTRIS 4F26                                           u9107 526E  
                                         u9125 52D8                                           u9310 5874  
                                         u9214 4AE0                                           u9215 4ADA  
                                         u9144 5E70                                           u9224 4B12  
                                         u9160 5760                                           u9145 5E6A  
                                         u9225 4B0C                                           u9154 5EA2  
                                         u9410 611C                                           u9155 5E9C  
                                         u9340 5F40                                           u9190 644C  
                                         u9280 548A                                           u9600 48A0  
                                         u9450 427E                                           u9290 5490  
                                         u9195 6446                                           u9460 5E1E  
                                         u9365 6CA6                                           u9366 6CA8  
                                         u9470 5E48                                           u9650 62A2  
                                         u9810 4940                                           _SPI1 037C  
                                         _SPI2 0387                                           u9655 629C  
                                         u9780 6478                                           u9694 53E6  
                                         u9950 386A                                           u9870 5CF4  
                                         u9695 53E0                                           u9935 37B6  
                                         _TMR0 000FD6                                           u9970 67D6  
                                         u9975 67D0                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00BE                                           _gISR 0060  
                           Event_DIPSwitch@Bar 00D3                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00BC                                  _iRVirtualWall 0030  
                         __size_of_ADC_SetupIO 0032                             SPI_MaxSpeed@pInput 00C8  
                                         _dist 0069                                  ?_Byte_SetByte 00B9  
                                ?_Byte_SetPair 00C4                                __end_of_SPI_DCS 684A  
                                         _main 4016                     irobot_leds@powerLuminosity 00CB  
                                         _init 4DDA                                           _mode 033C  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C4  
                                         _itos 41D4                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 00B9                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 5844  
                                ??_Byte_SetBit 00BD                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 00BE  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 00CA  
                            Timer0_Init@DIVIDE 00D0                                ?_SPI_DisableISR 00B9  
                             Motor_Move@pMotor 00BC                            HMI_SetButton@pValue 00BF  
                   ?_measureAndDisplayDistance 0001                                  Console_Init@x 00BB  
                                Console_Init@y 00BC                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00BF  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6A0E  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 60E2  
                             __end_of_LCD_Init 34CC                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 5F1A  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F4  
                      GetPortProperties@pInput 00BB                                  ??_Button_Poll 00D7  
                             __end_of_HMI_Init 27D4                                          l13021 6CD8  
                                        l13113 5CB6                                          l13121 5CF4  
                                        l13115 5CC8                                          l14201 3698  
                                        l14121 456A                                          l14115 455A  
                                        l13315 56E0                                          l12543 542C  
                                        l13195 37FE                                          l12741 4A5E  
                                        l14149 656E                                          l12549 543C  
                                        l12655 60E4                                          l12657 60F6  
                                        l14409 2FA0                                          l14451 241C  
                                        l14373 60C0                                          l14711 33EA  
                                        l17111 01E6                                          l12689 427E  
                                        l14369 60B2                                          l14721 348E  
                                        l13587 18D4                                          l14733 5546  
                             __end_of_HMI_Poll 5B02                                          l14655 2A88  
                                        l14761 27A6                                          l17217 06A6  
                                        l17153 03DE                                          l17129 0288  
                                        l14739 5556                                          l13893 5984  
                                        l17245 0830                                          l14599 3BBA  
                                        l17239 079C                                          l13889 5976  
                                        l17357 134A                                          l17391 149C  
                                        l17375 13EC                                          l17199 0604  
                                        _I2C1T 0040                                          _I2C2T 03CE  
                                ___fltol@sign1 00F6                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 190C  
                              __end_of___awdiv 48FC                          irobot_rotate@isScript 00DC  
                                        ?_itos 00C5                                          STR_10 FF95  
                                        STR_11 FFFB                                          STR_20 FFC3  
                                        STR_12 FFED                                          STR_13 FFFB  
                                        STR_14 FF0D                                          STR_15 FFFB  
                                        STR_16 FFD8                                          STR_17 FFC3  
                                        STR_18 FFC3                                          STR_19 FFC3  
                              __end_of___flmul 0D5A                                __end_of___fltol 3D3C  
                              _Event_DIPSwitch 68AA                                __end_of___lldiv 49B8  
                                        u10040 5736                                          u10035 56F8  
                                        u10070 393C                                          u10080 3950  
                                        u11040 3704                                          u10090 3990  
                                        u10330 181A                                          u11130 3D0E  
                                        u11230 60DC                                          u11208 4440  
                                        u10360 1884                                          u10520 0C6C  
                                        u11320 25A2                                          u10370 18B2  
                                        u11090 3C76                        __size_of_HMI_LeftSwitch 0018  
                                        u11404 6802                                          u11260 3040  
                                        u10460 097C                                ___awdiv@divisor 00BB  
                                        u11405 67FC                                          u10550 0CD6  
                                        u10470 0B90                                          u11095 3C6A  
                                        u10560 0CFC                                          u10640 2926  
                                        u11440 3B46                                          u11370 631E  
                                        u11610 337A                                          u10475 0B84  
                                        u11550 2AC4                                          u11470 3BDA  
                                        u12408 47C0                                          u10760 59A0  
                                        u12409 47D4                                          u10825 193A  
                                        u10738 361A                                          u11650 348E  
                                        u11570 2B42                                          u15010 1400  
                                        u11490 3C28                                          u10835 1952  
                                        u12428 47EC                                          u10940 45DE  
                                        u12429 4800                                          u10845 196A  
                                        u10950 45EA                                          u15110 3A76  
                                        u10855 198C                                          u10688 34DE  
                                        u12448 4818                                          u11680 55B8  
                                        u10689 34F2                                          u12449 482C  
                                        u10865 1B0C                                          u11770 623C  
                                        u10875 1B8A                                          u12388 4794  
                                        u11780 625E                                          u12389 47A8  
                                        u10885 1BCC                                          u15150 3A96  
                                        u10895 1C0E                                          u14508 65B6  
                                        u14620 029C                                          u14509 65CC  
                                        u14800 077E                                          u14810 0794  
                                        u14650 0316                                          u14651 0314  
                                        u14830 0816                                          u14670 03C4  
                                        u14760 06BA                                          u14790 0734  
                                        u14791 0732                                          _INDEX 008C  
                              __end_of___lwdiv 58BC                                          _MASKS FD0F  
                              __end_of___lwmod 5F7C                                          i2l430 4D48  
                                        i2l432 4D6E                                          i2l433 4D98  
                                        i2l427 4DBE                                          i2l732 5908  
                                        i2l733 5902                                          i2l832 6526  
                                        i2l781 6898                                ___awdiv@counter 00BD  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00CF                                __end_of_getMode 483E  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03BA  
                                        _PortB 03B0                                          _PortC 00A4  
                                        _PortD 009A                                          _PortE 0090  
                                        _PortF 03C4                                          _PortG 03A6  
                      __end_of_Port_SetPinType 2D24                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C5                          ??_irobot_led_power_on 00CD  
                                        _angle 033A                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CE                                __end_of_dpowers FD0F  
                               ??_Byte_GetZone 00BE                      irobot_move@moveTurnRadius 00CB  
                                        _mode1 1178                                          _mode2 3F2C  
                                        _mode3 665C                                          _mode4 3A18  
                               Button_Poll@Pin 00DC                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 477E                               __end_of_MXK_Init 335A  
                     __size_of_sort_iRBumpDrop 008C                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 6CB8  
                             __end_of_SPI_Init 1178                               __end_of_SPI_Send 5BDE  
                        __end_ofi2_MXK_Release 6D92                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 5C4A  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00BC  
                            __end_of_ADC_Start 56CC                                 ??_Byte_SetPair 00C8  
                               ??_Byte_SetQuad 00C8                                          plusw2 000FDB  
                               ??_Byte_SetZone 00BF                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 5B02                                _findClosestWall 0000  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 00BA                                 _LCD_Word_Write 6A6A  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 04AA  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00C9  
                                 ?_irobot_init 0001                                __initialization 4BD8  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 00C9  
                          __end_of_Byte_GetBit 67E8                         irobot_leds@powerColour 00CA  
                                 __end_of_main 40FC                                   __end_of_init 4E80  
             irobot_query_and_update@packetIDs 00CE                                   __end_of_itos 42AC  
                         HMI_SetButton@reindex 00BB                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 5EB8                               __end_of_InitList FCE5  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 6CAA  
                                    ??_ADC_Off 00B9                        __end_of_update_distance 6C86  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 00C1  
                                       ??_main 04B0                                         ??_init 00F9  
                                       ??_itos 00C9                        _Console_MakeField$10974 00C7  
                                __activetblptr 000003                              Port_SetPin@pInput 00C8  
                            __end_of_LCD_Reset 61D4                              Port_SetPin@pValue 00CB  
                                    ??_LED_Set 00CE                              _MXK_InitDIPSwitch 6AC4  
                            GetPortPORT@pInput 00BB                         Port_CheckPairType@Pin1 00E3  
                       Port_CheckPairType@Pin2 00E4                              __end_of_LCD_Write 69CA  
                                  _GetPortPORT 4FCC                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 4E80                                ??_LCD_DrawField 00D5  
                   __end_of_PortProperty_Valid 57CA                               __end_of_Port_Set 1CC6  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 4456                            __end_of_Button_Poll 3632  
                            Word_GetPair@pPair 00C7                        LCD_FillRectangle@pPoint 00C4  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 538A  
                                    ??_SPI_DCS 00BB                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                             _angleToClosestWall 006B  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 6D7A                                  _HMI_SetNumber 6930  
                       Port_SetQuadType@Output 00F3                                         _ANCON0 000FC1  
                             ___awdiv@dividend 00B9                                         ?_putch 0001  
                             ??_Console_Render 00DC                                  ToSegment@pCHR 00B9  
                             _Console_FormFeed 541A                         Port_SetQuadType@pInput 00EF  
                                       i2l1630 3DA2                                         i2l1631 3DEE  
                                       i2l1632 3DDA                                         i2l1730 6790  
                                       i2l1627 3E2A                                         i2l1732 67B0  
                                       i2l1628 3E20                                         i2l1629 3DB8  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9927 6526  
                                       i2l9929 6536                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 6A88  
                               _Timer0_Restart 6D18                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F4                                         _TXREG1 000FAE  
                             __end_of___xxtofl 29A2                                 i2_MXK_SwitchTo 677E  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 00BB  
                                   _Reset_High 6AA6                             Console_Render@temp 00DE  
                               ??_HMI_UpSwitch 00BF                                 OutSeg@pSegment 00BC  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 00D0  
                       ADC_SetChannel@pChannel 00BA                               __end_of_delay_ms 5D1E  
                                 LED_Init@pLED 00E6                               __end_of_delay_us 6134  
                                ??_Timer0_Init 00CA                                  ??_Timer2_Init 00CA  
                                ??_Timer0_Stop 00B9                                     _Timer0_ISR 68D8  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 00D3  
                               __CFG_XINST$OFF 000000                                         _TimerX 00F9  
                                       _OutSeg 56CC                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 42AC                     __end_of_load_iRScriptStack 5CB4  
                                   _Motor_Move 670E                                         _iRWall 0035  
                                ??_Motor_Speed 00D8                                     _Motor_Step 38F2  
                          rx_assign@byteNumber 00BB                        __end_of_Event_DIPSwitch 68D8  
                                       ___wmul 6748                                ??_HMI_DIPSwitch 00BF  
                load_iRScriptStack@bytesToLoad 00C7                                      ??___fldiv 00C1  
                                    ??___awdiv 00BD                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 00CF  
                                       _lMotor 007D                                      ??___fltol 0100  
                                    ??___lldiv 00C1                                         _lQueue 0063  
                                   _TestButton 039C                                      ??___lwdiv 00BD  
                           __size_of_ToSegment 0284                                      ??___lwmod 00C4  
                     __end_of_Port_SetQuadType 21A0                                         _corner 03F8  
                     i2Byte_GetZone@pChunkSize 0005                               __end_of_safeToGo 626A  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 55BE  
                            GetPortTRIS@pInput 00BB                             __size_of_Reset_Low 001E  
                                       clear_0 4C40                                         clear_1 4C52  
                                       clear_2 4C5E                                         clear_3 4C6A  
                                       clear_4 4C76                               ___awdiv@quotient 00BF  
                   irobot_stop_motion@isScript 00D2                                  ?_eusart_getch 0001  
                                   Port_Init@i 0105                                     _iRDistance 0077  
                            __end_of_MXK_Queue 6CFE                     __end_ofHMI_SetButton@F7213 FD1C  
                                    ??_getMode 00DD                                     _iRBumpLeft 0086  
                                       _printf 29A2                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 6AE2                                  _ADC_Calibrate 6C60  
                                   _iRDropLeft 0084                                 HMI_SetButton@v 00C0  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BA  
                                  _Console_Tab 46BC                            LCD_Word_Write@value 00BE  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BC                       Port_CheckPortType@Output 00F2  
                                    ?_ADC_Init 00BD                             _twos_complement_of 645E  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC32  
                  __end_ofTimer2_Init@PRESCALE FD1F                       Port_CheckPortType@pDrive 00F1  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00EF  
                                ??_Port_SetPin 00CC                                      ??_reverse 00BD  
                                   _StepRotate 0071                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00DF                                         putch@c 00CD  
                            Motor_Speed@pMotor 00D4                                 ?_HMI_SetNumber 00CF  
                               i2_Word_GetPair 687A                        __end_of_Configure_GPIOs 5B72  
                          irobot_leds@isScript 00CC                        __end_of_findClosestWall 08B4  
                             ??_MXK_TestButton 00BF                         __end_of_Timer0_Restart 6D24  
                                Set_Rotation@m 00BE                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00B9                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 67B4  
                                 ___xxtofl@arg 00C3                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C2                                   ___xxtofl@val 00B9  
                        _update_bump_and_cliff 66D4                                ?_LCD_Word_Write 00BE  
                                   __accesstop 0060                        __end_of__initialization 4C7C  
                                    ?_LCD_Fill 00C2          irobot_query_and_update@packetVariable 00D2  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EB  
                                  _Byte_GetBit 67B4                                     _Stepstomin 006F  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 6D30  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C1  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00B9  
                                   ___fltol@f1 00F2                                    _Byte_SetBit 5E54  
                                __end_of_MASKS FD18                                 _PortA_Property FF0B  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C4  
                                    LCD_Fill@j 00C5                            load_iRScriptStack@i 00C8  
                                    LCD_Init@i 00F0                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF09                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 6D66                                   __pidataBANK3 6CAA  
            irobot_move_straight@straightSpeed 00D2                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6B1E                                Console_Render@x 00E3  
                              Console_Render@y 00E4                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FCE5  
                         __end_of_Byte_GetZone 52F2                                  __end_of_mode1 154C  
                                __end_of_mode2 4016                                  __end_of_mode3 6698  
                                __end_of_mode4 3B24                           ??_twos_complement_of 00BB  
                            irobot_leds@LEDBit 00C9                                 _PortC_Property FF07  
                          __end_of_Timer0_Init 3792                                  __end_of_putch 6CC6  
                               ??_eusart_getch 00B9                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 38F2                            __end_of_Timer0_Stop 6D74  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E6  
                             ?_update_distance 0001                                      ?_SPI_Send 00B9  
                               ??_eusart_putch 00B9                                    _Button_Init 4382  
                            Port_SetType@pType 00F5                                    _Button_Poll 34CC  
                         __end_of_Byte_SetByte 6CF0                           __end_of_Byte_SetPair 69EC  
                               _HMI_LeftSwitch 6C1C                                 _PortD_Property FF05  
                         __end_of_Byte_SetQuad 6A0E                                   ??_LED_Toggle 00D1  
                                 ??_HMI_GetBar 00B9                     eusart_putch@eusartSendChar 00B9  
                         __end_of_Byte_SetZone 4B28                            __end_of_Motor_Speed 6930  
                               _HMI_DownSwitch 6BD4                                  SPI_Send@pData 00BB  
                        __end_of_MXK_DIPSwitch 6BBC                                   ??_HMI_SetBar 00B9  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C1  
                               _PortE_Property FF03                                     ??_ADC_Init 00C0  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 68AA  
                      irobot_rotate@angleTotal 00DF                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00EC                        Port_CheckQuadType@Pair2 00ED  
                     MXK_BlockSwitchTo@pModule 00C0                                        ??_mode1 03FA  
                                      ??_mode2 00F8                                        ??_mode3 00F9  
                                      ??_mode4 00F8                                        ?_ADC_On 0001  
                            _Console_Backspace 5F7C                                ?_Timer0_Restart 0001  
                                      ??_putch 00CD                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 64E4                              __end_of_ToSegment 1F4A  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 645E                             _irobot_stop_motion 638C  
                      Port_CheckQuadType@pQuad 00EA                                reverse@iterator 00BE  
                             ??_SPI_DisableISR 00BB                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 6AA6                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C4  
                                   ??_LCD_Init 00EE                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 46BC                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CD                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00B9                                     ??_LED_Init 00E6  
                     ADC_ClockDivision@pDivide 00B9                             Byte_SetByte@pValue 00BB  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 62FC                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F4                             ??_irobot_song_play 00BA  
                                   ??_HMI_Poll 00DD                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E6                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00B9                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 3054                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E1                             __end_of_LED_Toggle 638C  
                           __end_of_HMI_GetBar 6D86                       LCD_FillRectangle@pColour 00C2  
                                   _angleTotal 0340                            ??_Console_Backspace 00BB  
                            Set_Addr_Window@xe 00BF                              Set_Addr_Window@ye 00C0  
                            Set_Addr_Window@xs 00C1                              Set_Addr_Window@ys 00BE  
                  ??_measureAndDisplayDistance 00F8                                        ?_OutSeg 00BC  
                                  ?_Motor_Init 00E6                             Byte_SetPair@pInput 00C4  
                                  ?_Motor_Move 00BC                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C7                             __end_of_HMI_SetBar 6D4E  
                       __end_of_PortC_Property FF09                             Word_GetPair@pInput 00C5  
                           __end_of_HMI_Render 65A2                                 ??_Set_Rotation 00BE  
                                    ?_Port_Set 00C8                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 00B9                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00BE                                   ??_ISR_Enable 00B9  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 6C34  
                       __end_of_PortD_Property FF07                                        _ADC_AN0 00B4  
                                      _ADC_AN1 03DF                                        _ADC_AN2 03DA  
                                      _ADC_AN3 03D5                                     ??_MXK_Init 00F9  
                            Port_GetPin@pInput 00B9                              _Console_MakeField 4528  
                                      _ADC_Off 6D5E                              ??_Console_NewLine 00B9  
                     ADC_ClockDivision@unfound 00BB                         __end_of_HMI_DownSwitch 6BEC  
                                   ??_SPI_Init 00EC                         Event_TestButton@pState 00D2  
                                   ??_SPI_Send 00BC                                        ?_printf 00CE  
                            ??_HMI_InitButtons 00B9                     __size_of_MXK_InitDIPSwitch 001E  
                     __size_of_move_and_rotate 00D2                         __end_of_PortE_Property FF05  
                          Console_Render@F6956 03EC                             ?_Console_MakeField 00BE  
                                      _COUNTER 0029                                ??_HMI_SetButton 00B9  
                         __end_of_HMI_UpSwitch 6C04                           ??_irobot_stop_motion 00D2  
                                      _LED_Set 6134                        _Console_IncrementCursor 5DEE  
                                    ?___xxtofl 00B9                         __end_of_PortF_Property FF03  
                                  _gBackcolour 0081                                ??_HMI_SetNumber 00D1  
                                    _I2C1_Done 0337                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 0334                                      _I2C1_More 0331  
                                    _I2C2_More 032E                                      ?_delay_ms 00B9  
                    __end_of_Console_Backspace 5FD8                                      ?_delay_us 00B9  
                          __size_of_Event_NULL 0002                     __end_of_MXK_InitTestButton 6B00  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 00F0  
                         ??_ADC_ConversionTime 00B9                         __end_of_PortG_Property FF01  
                          ??_Console_MakeField 00C0                        __size_of_ADC_SetChannel 001C  
                                      _IRValue 006D                                        _SPI_DCS 681A  
                         __size_ofi2_MXK_Queue 000E                                  ??_ADC_SetupIO 00B9  
                             ?_Configure_GPIOs 0001                               ?_findClosestWall 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 010C                               ADC_Init@pChannel 00BF  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00E4  
                           __end_of_ISR_Enable 6D44                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 00B9  
                            Event_TestButton@j 0088                                      ?_safeToGo 0001  
                                   ??_Mode_Set 00B9                                 ??_Timer2_Clear 00B9  
                                      _Font5x7 FD1F                           i2Byte_GetZone@pChunk 0004  
                     ADC_ConversionTime@pCount 00BA                                        _MinDist 00FB  
                         i2Byte_GetZone@pInput 0001                                 ??_Timer0_Start 00BC  
                         SPI_DisableISR@pInput 00B9                                  ?_Port_GetQuad 00B9  
                              Byte_SetBit@pBit 00BB                           Port_TogglePin@pInput 00CD  
                        __end_ofi2_Byte_SetBit 6220                                      _ADC_Start 5648  
                                      __Hparam 0000                              Port_GetQuad@pQuad 00BB  
                                  _Timer0_Init 3632                                    _Timer2_Init 3792  
                                      __Lparam 0000                                    _Timer0_Stop 6D6E  
                        __size_of_Console_Init 008A                                        OutSeg@a 003D  
              __end_ofPortProperty_Valid@F6830 FD05                                        _iRAngle 0075  
                                LCD_Write@mode 00BC                                __size_of_OutSeg 0082  
                                   ??_Port_Set 00CB                      __end_of_Console_MakeField 45F8  
                            _Console_PrintChar 2D24                                    _Motor_Speed 6906  
                                      _Stepper 00AE                                  ?_Port_SetType 00F3  
                                      _gCursor 0047                                        ___fldiv 154C  
                                      ___awdiv 483E                          ??_Console_ClearCursor 00B9  
                                      ___flmul 08B4                                        ___fltol 3C30  
                                      _lBuffer 04B2                                        ___lldiv 48FC  
                              __size_of___wmul 0036                                ??_ADC_Calibrate 00B9  
                                      ___lwdiv 5844                                        ___lwmod 5F1A  
                              ?_HMI_LeftSwitch 0001                       __end_of_Console_FormFeed 54A8  
                           ?_Console_PrintChar 0001                                        __pcinit 4BD8  
                              ?_HMI_DownSwitch 0001                                        __ramtop 1000  
                                      _getMode 477E                                        __ptext0 4016  
                                      __ptext1 3A18                                        __ptext2 0000  
                                      __ptext3 665C                                        __ptext4 4456  
                                      __ptext5 3B24                                        __ptext6 3F2C  
                                      __ptext7 51B8                                        __ptext8 6B8C  
                                      __ptext9 1178                                __size_of_printf 01C2  
                                    _T0CONbits 000FD5                    __end_of_irobot_led_power_on 6B3A  
                            i2MXK_SwitchTo@CUR 0007                                        _dpowers FD05  
                                    _T2CONbits 000FCA                                  LED_Set@pValue 00CD  
                          __size_of_Reset_High 001E                          Event_DIPSwitch@pState 00D2  
                                   ??___xxtofl 00BD                                   ?_GetPortPORT 00B9  
                                 ?_GetPortTRIS 00B9                            ??_Console_PrintChar 00C9  
                                  _Port_GetPin 6418                      _measureAndDisplayDistance 51B8  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E8  
                          LCD_DrawRectangle@p4 03E4                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BB                                     ??_delay_us 00BB  
                                      _reverse 5BDE                                      _DIPSwitch 0392  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 45F8  
                                  _iRBumpRight 0087                                 LCD_DrawField@i 00DB  
                                    _LCD_Reset 6184                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 69A8                                    _iRDropRight 0085  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00B9  
                         end_of_initialization 4C7C                            ADC_SetupIO@pChannel 00BB  
                            ??_get_packet_size 00B9  irobot_query_and_update@numberOfPacketRequests 00D1  
                                   delay_us@us 00B9                              ??_HMI_SetSegments 00BC  
                      Console_PrintChar@pInput 00CC                                   _Console_Init 5534  
                         __end_of_eusart_getch 6D56                        _irobot_query_and_update 3054  
                                   ??_safeToGo 00DD                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 5D88                           __end_of_eusart_putch 6CE2  
                                      itos@Out 00CD                                 ??_Port_GetQuad 00BC  
                           _PortProperty_Valid 574E                             Byte_SetQuad@pInput 00C4  
                           SPI_MinSpeed@pInput 00C8                             Byte_SetQuad@pValue 00C7  
                          __end_of_ADC_SetupIO 681A                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                      i2u1486_48 68F0  
                              ___lldiv@divisor 00BD                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BB                              ??_HMI_RightSwitch 00BF  
                              ___lldiv@counter 00C5                      __end_of_Console_PrintChar 2EC2  
                          __end_of_ADC_Voltage 41D4                                 ??_Port_SetType 00F6  
                   __end_of_Port_CheckQuadType 6032                                        printf@c 00E1  
                                      printf@f 00CE                                 Port_Init@pPort 0102  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C2                              __end_of_rx_assign 3F2C  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C8                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 62FC                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 6564                             Button_Init@pInitIO 0104  
                                _irobot_rotate 3B24                          Timer0_Init@pFrequency 00C6  
                            ?_Port_SetQuadType 00EF                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BD                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F3  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00BF  
                        Console_Render@lCursor 00DF                             _load_iRScriptStack 5C4A  
                                    _MXK_Queue 6CF0                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C1                               Byte_GetZone@pMax 00BB  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C5                                _Set_Addr_Window 4C86  
                               SPI_Init@pClock 00E6                               ??_LCD_Word_Write 00C0  
                              _sort_iRBumpDrop 54A8                              ??_move_and_rotate 00F8  
                                  ___fldiv@grs 00CC                                    ___fldiv@rem 00C6  
                        __end_of_LCD_DrawField 5116                                 Port_Set@pInput 00C8  
                               SPI_Init@pInput 00EC                           ??_PortProperty_Valid 00CC  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CA  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 538A  
                                   ?_LCD_Write 00BC                                   _Byte_GetPair 6B00  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00B9  
                                 _Byte_GetZone 5256                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00D9                              LCD_DrawField@ymax 00DA  
                               __end_of_ADC_On 6D80                                 _Port_TogglePin 684A  
                             _Event_TestButton 6698                                    ___flmul@grs 00D5  
                         Port_SetPinType@Props 00E4                                   ?_Byte_GetBit 00B9  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 6CE2  
                                 _Byte_SetPair 69CA                                ADC_SetupIO@MASK 00BC  
                                 _Byte_SetQuad 69EC                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4A72                           Port_SetPinType@pType 00E2  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00B9  
                                ?_SPI_MaxSpeed 00C8                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00B9                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C8  
                        __end_ofi2_Timer0_Stop 6D8C                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D6  
                               __end_of_OutSeg 574E                           ??_load_iRScriptStack 00C3  
                 __end_of_irobot_move_straight 6BA4                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 677E                          __end_of_HMI_DIPSwitch 6BD4  
                                __pidataCOMRAM 6D30                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D4                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 6D18                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6D5E                                 __end_of_printf 2B64  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00B9  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C5  
                             ??_Timer0_Restart 00B9                           __end_of_Timer0_Start 69A8  
                           Port_SetType@Output 00F8                            start_initialization 4BD8  
                                   ?_MXK_Queue 00B9                       PortProperty_Valid@Errors 00CE  
                             ??i2_MXK_SwitchTo 0007                             _correctOrientation 0083  
                            _LCD_FillRectangle 5932                             Port_SetType@pInput 00F3  
                               _ADC_SetChannel 6B56                                     HMI_Init@in 00F4  
                          HMI_SetNumber@pInput 00CF                          __end_ofi2_Port_SetPin 4DDA  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 00BA  
                       __end_of_Port_TogglePin 687A                                  ?_Word_SetPair 00C8  
                            Byte_SetBit@pInput 00B9                                       ??_ADC_On 00B9  
                               ??_MXK_SwitchTo 00BF                              Byte_SetBit@pValue 00BC  
                           ?_LCD_FillRectangle 00C2                      ??_irobot_query_and_update 00C9  
                          _Console_ResetCursor 6A2E                    PortProperty_Valid@pPinDrive 00CA  
                                  _ADC_SetupIO 67E8                           MXK_BlockSwitchTo@CUR 00BF  
                     PortProperty_Valid@pInput 00C8                                  i2_MXK_Release 6D8C  
                                  _ADC_Voltage 40FC                         LCD_FillRectangle@pSize 00C8  
                               SPI_Send@pInput 00B9                                   ??_Reset_High 00CD  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00CA  
                        Port_SetQuadType@pQuad 00F1                                      _ToSegment 1CC6  
                          ??_LCD_FillRectangle 00CC                          Port_SetQuadType@pType 00F2  
                              _Console_NewLine 5116                                 ??_SPI_MinSpeed 00CA  
                                  ??_ADC_Start 00BD                                   _HMI_UpSwitch 6BEC  
                                    _Reset_Low 6A88                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 6D74                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 00D6  
                               ADC_Init@pInput 00BD                                      _gCharSize 03F4  
                             Timer2_Init@INDEX 008A                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 00EA  
                                     ??_OutSeg 00BD                                      OutSeg@out 00C0  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 00C0  
                                 ??_Motor_Step 00CD                                      _iRAngleSS 031E  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 00C2                                       ??___wmul 00BD  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2EC2  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03EC  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00BC  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 00B9                             Byte_SetZone@pValue 00BE  
                                Mode_Set@pMode 00B9                                       ??_printf 00DA  
                      __end_of_Set_Addr_Window 4D30                       Port_CheckQuadType@Output 00EE  
                      __end_of_sort_iRBumpDrop 5534                                      _gLineSize 03F0  
                     Port_CheckQuadType@pDrive 00EB                                 ??_Word_GetPair 00C8  
                     Port_CheckQuadType@pInput 00E8                           __end_of_Port_GetQuad 62B4  
                                    ___fldiv@a 00BD                                      ___fldiv@b 00B9  
                    __end_of_LCD_FillRectangle 59A6                                    __pbssBIGRAM 04B2  
                       __end_of_ADC_SetChannel 6B72                                       ?_LED_Set 00CD  
                                    ___flmul@a 00CB                                      ___flmul@b 00C7  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 00BB  
                           __end_of_Reset_High 6AC4                                  __pcstackBANK0 00B9  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK3 03FA                                  __pcstackBANK4 04AA  
                      ??_update_bump_and_cliff 00D6                                     itos@Length 00CB  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CC  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 6906                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D2                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 23CA                                       ?_SPI_DCS 00B9  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CD  
                                ??_eusart_init 00B9                                    ??_LCD_Write 00BD  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 4382                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 6748                             __end_of_Motor_Step 3A18  
                        Timer2_Init@pFrequency 00C6                                 ?i2_MXK_Release 0001  
           __size_of_measureAndDisplayDistance 009E                       Port_CheckPairType@Output 00E5  
            twos_complement_of@complementValue 00B9                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00E2                       Port_CheckPairType@pInput 00DF  
                               reverse@tempVar 00BD                             _MXK_InitTestButton 6AE2  
                                   ?_Reset_Low 0001                              __size_of_safeToGo 004A  
                                 ?_Timer0_Init 00C6                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 00C6                               ??_HMI_LeftSwitch 00BF  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 00B9  
                                ??_irobot_leds 00CC                                  ??_irobot_init 00BA  
                              ??_irobot_rotate 00DA                                  ??_irobot_move 00CD  
                                _lStepFunction 0066                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 00C6                               ??_HMI_DownSwitch 00BF  
                                    __pintcode 1408                                  __pmediumconst FC32  
                                 ?_Motor_Speed 00D4                          ??_Console_ResetCursor 00B9  
                                     ?___fldiv 00B9                                       ?___awdiv 00B9  
                                    __ptext100 48FC                                      __ptext101 6D56  
                                    __ptext110 63D2                                      __ptext102 695A  
                                    __ptext111 69CA                                      __ptext103 681A  
                                    __ptext120 67E8                                      __ptext112 5FD8  
                                    __ptext104 4382                                      __ptext121 6B56  
                                    __ptext113 5D1E                                      __ptext105 6AC4  
                                    __ptext130 6BA4                                      __ptext122 62FC  
                                    __ptext114 574E                                      __ptext106 6D74  
                                    __ptext131 6BBC                                      __ptext123 55BE  
                                    __ptext115 69EC                                      __ptext107 6AE2  
                                    __ptext140 6698                                      __ptext132 6BD4  
                                    __ptext124 6C60                                      __ptext116 4A72  
                                    __ptext108 2B64                                      __ptext141 6930  
                                    __ptext133 6BEC                                      __ptext125 6D7A  
                                    __ptext117 5534                                      __ptext109 1F4A  
                                    __ptext150 684A                                      __ptext142 41D4  
                                    __ptext134 6C04                                      __ptext126 6D5E  
                                    __ptext118 5648                                      __ptext151 45F8  
                                    __ptext143 5BDE                                      __ptext135 6C1C  
                                    __ptext127 477E                                      __ptext119 57CA  
                                    __ptext160 68D8                                      __ptext152 661E  
                                    __ptext144 5F1A                                      __ptext136 6C34  
                                    __ptext128 5A8E                                      __ptext161 3D3C  
                                    __ptext153 6B00                                      __ptext145 5844  
                                    __ptext137 626A                                      __ptext129 34CC  
                                    __ptext170 6524                                      __ptext162 6D86  
                                    __ptext154 5256                                      __ptext146 49B8  
                                    __ptext138 68AA                                      __ptext171 6D8C  
                                    __ptext163 6D24                                      __ptext155 5E54  
                                    __ptext147 1CC6                                      __ptext139 1404  
              __end_of_irobot_query_and_update 31DA                                      __ptext172 6CFE  
                                    __ptext164 4D30                                      __ptext156 6418  
                                    __ptext148 538A                                      __ptext173 0000  
                                    __ptext165 687A                                      __ptext157 6D44  
                                    __ptext149 6344                                      __ptext166 6B72  
                                    __ptext158 6D80                                      _pShiftVal 0079  
                                    __ptext167 58BC                                      __ptext168 61D4  
                                    __ptext169 677E                                       ?___flmul 00C7  
                                     ?___fltol 00F2                                       ?___lldiv 00B9  
                                   ?_Port_Init 0100                           Timer0_Init@pCPUClock 00CC  
                                     ?___lwdiv 00B9                                       ?___lwmod 00C0  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 4F26                                       ?_getMode 0001  
                                 _eusart_getch 6D4E                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 5D88                                   _eusart_putch 6CD4  
                           ??_Console_FormFeed 00B9                                _HMI_SetSegments 49B8  
                           ?_GetPortProperties 00B9                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BC                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00B9                                       _ADC_Init 57CA  
                 irobot_rotate@rotateDirection 00DD                          __end_of_HMI_SetButton 541A  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00B9  
                         irobot_move@moveSpeed 00C9                                   ?_Port_SetPin 00C8  
                        __end_of_HMI_SetNumber 695A                               ___lwdiv@quotient 00BE  
                              _HMI_RightSwitch 6C04                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00EA  
                               __size_of_mode3 003C                                 __size_of_mode4 010C  
                          ??_GetPortProperties 00BB                        __end_of_Console_NewLine 51B8  
                         ??_MXK_InitTestButton 00E6                             Byte_GetPair@pInput 00C2  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 6D7A  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 6B8C  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 6B72  
                                     _LCD_Fill 608A                                       _LCD_Init 335A  
                               ___wmul@product 00BD                                       _HMIBoard 0342  
                               i2_Byte_GetZone 58BC                                       _LED_Init 5EB8  
                                    delay_ms@u 00BB                             Button_Poll@pButton 00D4  
                                    delay_us@u 00BB                                       _HMI_Init 25DA  
                                     _HMI_Poll 5A8E                             MXK_Queue@pCallback 00B9  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6A6A  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 6524  
            __end_of_measureAndDisplayDistance 5256                       __size_of_Configure_GPIOs 0070  
                     __size_of_findClosestWall 08B4                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C6                                       _PIR1bits 000F9E  
                                     i2u532_40 58DE                                       i2u532_47 58D4  
                                     _PIR3bits 000FA4                                       i2u534_40 5926  
                                     i2u534_45 5922                                       i2u671_40 6552  
                                     i2u667_44 61E8                                       i2u667_45 61E4  
                                     i2u668_44 620E                                       i2u668_45 620A  
                                     i2u775_40 3D80                                       i2u776_40 3D94  
                                     i2u777_40 3DCC                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                                    _mode1$15611 04AC  
                         i2Word_GetPair@pInput 000D                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00BA                               HMI_SetBar@pValue 00B9  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00E3  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 4FCC                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 52F2                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 64E4                             _Port_CheckPairType 5D1E  
                                     _MXK_Init 31DA                          __size_of_Timer0_Start 0026  
                              _move_and_rotate 4456                                MXK_SwitchTo@CUR 00BF  
                        __end_of_ADC_Calibrate 6C74                            __end_of_irobot_leds 608A  
                                     _SPI_Init 0D5A                            __end_of_irobot_init 6CD4  
                     __end_of_Event_TestButton 66D4                                       _SPI_Send 5B72  
                          __end_of_irobot_move 4BD8                                      _rx_assign 3E3C  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 00BE  
                            ___wmul@multiplier 00B9                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 00BD                                     printf@flag 00DC  
                         Timer2_Init@pCPUClock 00CF                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 5A1A  
                                   printf@prec 00DB                          Motor_Speed@pFrequency 00D6  
                            Byte_GetBit@pInput 00B9                            Port_SetPinType@pPin 00E1  
                         __size_of_Button_Poll 0166                                  _MXK_DIPSwitch 6BA4  
                           _Port_CheckQuadType 5FD8                            ?_Port_CheckPairType 00DF  
                         __end_of_SPI_MinSpeed 5A8E                                  ??_MXK_Dequeue 00CF  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 62B4                           __end_of_update_angle 6C98  
                        Button_Poll@pIncrement 00D6                        PortProperty_Valid@F6830 FCF5  
                         __end_ofi2_Motor_Step 3E3C                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 4BEC  
                                    copy_data1 4C0C                                      copy_data2 4C2C  
                                ??_MXK_Release 00B9                         __end_ofi2_Byte_GetPair 6B8C  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00E8                          ?_irobot_move_straight 00D2  
                       __end_ofi2_Byte_GetZone 5932                            __end_ofi2_MXK_Queue 6D0C  
              _measureAndDisplayDistance$15610 0104                            ?_Port_CheckPortType 00EF  
                              itos@destination 00C7                                       _InitList FC33  
                   __end_of_irobot_init_song_0 6A2E                           _Motor_Step$intlevel0 38F8  
                                     _Mode_Set 6C98                             Port_GetQuad@Output 00BE  
                            ??_update_distance 00D6                                    ??_ToSegment 00B9  
                                 _ISR_Function 1408                                   _Timer0_Clear 6D0C  
                           Port_GetQuad@pInput 00B9                                   _Timer2_Clear 6D56  
                         __end_of_Word_GetPair 665C                                       _lCBuffer 0300  
                         ??_Port_CheckPairType 00E3                                    ??_Reset_Low 00CD  
                                     __Hrparam 0000                                   _Timer0_Start 6982  
                                 OutSeg@pInput 00BF                                 _Console_Render 23CA  
                                     __Lrparam 0000                                Timer2_Init@RDIV 00CB  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                               LCD_Write@value 00BD                                       _Port_Set 190C  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 6418                        __end_of_get_packet_size 5DEE  
                                  ??_Port_Init 0103                        __end_of_HMI_SetSegments 4A72  
                         ??_Port_CheckQuadType 00EC                               __size_of___fldiv 03C0  
                             _irobot_song_play 6C4C                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 65E0                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00F2                               __size_of___lwmod 0062  
                                     _lBufferX 008E                                       _lBufferY 008D  
                          Timer2_Init@PRESCALE FD1C                          _findClosestWall$15609 03FC  
                                   ?_rx_assign 00BA                                LCD_Fill@pColour 00C2  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 007F                               __size_of_getMode 00C0  
                      __end_of_HMI_RightSwitch 6C1C                         Byte_GetZone@pChunkSize 00BD  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00BD  
                        __size_of_Port_SetType 022A                                  reverse@length 00BB  
                                    itos@input 00C5                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 27D4                            irobot_move@isScript 00D1  
                           Motor_Init@pAddress 00E8                                       _delay_ms 5CB4  
                                     _delay_us 60E2                                       _clearall 008F  
                              ___lwdiv@divisor 00BB                                ___lwdiv@counter 00BD  
                              Port_GetPin@pPin 00BB                                       __ptext10 6220  
                                     __ptext11 6C74                                       __ptext20 4B28  
                                     __ptext12 66D4                                       __ptext21 645E  
                                     __ptext13 6C86                                       __ptext30 541A  
                                     __ptext22 6C4C                                       __ptext14 3054  
                                     __ptext31 6A2E                                       __ptext23 29A2  
                                     __ptext15 3E3C                                       __ptext40 23CA  
                                     __ptext32 5F7C                                       __ptext24 6CB8  
                                     __ptext16 54A8                                       __ptext41 5932  
                                     __ptext33 64E4                                       __ptext25 2D24  
                                     __ptext17 5D88                                       __ptext50 4DDA  
                                     __ptext42 5072                                       __ptext34 3C30  
                                     __ptext26 46BC                                       __ptext18 6D4E  
                                     __ptext51 6B1E                                       __ptext43 6748  
                                     __ptext35 6906                                       __ptext27 483E  
                                     __ptext19 638C                                       __ptext60 6D0C  
                                     __ptext52 6032                                       __ptext44 4528  
                                     __ptext36 670E                                       __ptext28 5DEE  
                                     __ptext61 31DA                                       __ptext53 5C4A  
                                     __ptext45 67B4                                       __ptext37 6982  
                                     __ptext29 5116                                       __ptext70 5EB8  
                                     __ptext62 2EC2                                       __ptext54 6A0E  
                                     __ptext46 40FC                                       __ptext38 6564  
                                     __ptext71 6134                                       __ptext63 21A0  
                                     __ptext55 6CC6                                       __ptext47 27D4  
                                     __ptext39 56CC                            ??_MXK_BlockSwitchTo 00BF  
                                     __ptext80 60E2                                       __ptext72 65A2  
                                     __ptext64 62B4                                       __ptext56 6CD4  
                                     __ptext48 08B4                                       __ptext81 335A  
                                     __ptext73 38F2                                       __ptext65 190C  
                                     __ptext57 6A4C                                       __ptext49 154C  
                                     __ptext90 59A6                                       __ptext82 52F2  
                                     __ptext74 6D6E                                       __ptext66 6CE2  
                                     __ptext58 42AC                                       __ptext91 6184  
                                     __ptext83 608A                                       __ptext75 6D18  
                                     __ptext67 4E80                                       __ptext59 3632  
                                     __ptext92 5CB4                                       __ptext84 4C86  
                                     __ptext76 64A2                                       __ptext68 4F26  
                                     __ptext93 6A88                                       __ptext85 6A6A  
                                     __ptext77 6B3A                                       __ptext69 4FCC  
                                     __ptext94 6AA6                                       __ptext86 69A8  
                                     __ptext78 6CF0                                       __ptext95 6D3A  
                                     __ptext87 5B72                                       __ptext79 65E0  
                                     __ptext96 25DA                                       __ptext88 6C98  
                                     __ptext97 5A1A                                       __ptext89 5B02  
                                     __ptext98 0D5A                                       __ptext99 3792  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 55BE  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 6A4C  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00D2                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00E0  
                          __end_of_MXK_Dequeue 65E0                              HMI_SetSegments@in 00BD  
                        Button_Init@pThreshold 0102                                       _safeToGo 6220  
                                __size_of_main 00E6                                  __size_of_init 00A6  
                                __size_of_itos 00D8                              Byte_GetPair@pPair 00C4  
                       __end_of_Console_Render 25DA                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                                   _Port_GetQuad 626A  
                          __end_of_MXK_Release 6B56                                 _MXK_TestButton 6C34  
                                i2_Byte_SetBit 61D4                        __end_of_move_and_rotate 4528  
                          ??_ADC_ClockDivision 00B9                                   _iRDistanceSS 0322  
                                  _irobot_leds 6032                                    _irobot_init 6CC6  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 4B28  
                               ADC_Voltage@max 00E6                                 ADC_Voltage@ref 00EA  
                    __end_of_MXK_BlockSwitchTo 661E                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 21A0                                   Port_Set@Type 00DF  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EE                              ??_findClosestWall 03FA  
                                    printf@val 00DF                                   _SSP1STATbits 000FC7  
                         __size_of_Motor_Speed 002A                                 Timer0_Init@DIV 032A  
                               Timer0_Init@PRE 008B                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 6344                                     _HMI_GetBar 6D80  
                         Button_Init@pGetState 0107                         PortProperty_Valid@Pair 00DE  
                             ??_Port_TogglePin 00D0                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 00CB  
                                   _HMI_SetBar 6D44                                     _HMI_Render 6564  
                             Byte_SetZone@MASK 00C3                                    i2_MXK_Queue 6CFE  
                    __end_of_ADC_ClockDivision 5648                                 Timer2_Init@DIV 0326  
                               Timer2_Init@PRE 0089                               Byte_SetZone@pMax 00BB  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 00D4                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 010A                                       itos@Data 00C9  
                __end_of_update_bump_and_cliff 670E                             LCD_FillRectangle@i 00CE  
                           LCD_FillRectangle@j 00CF                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 00B9  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 00C0  
                             ___lldiv@dividend 00B9                         __end_of_MXK_TestButton 6C4C  
                              ?_Console_Render 0001                                  _iRScriptIndex 0037  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 0400                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 00D5                       irobot_query_and_update@j 00D3  
                               _SPI_DisableISR 695A                     __end_of_twos_complement_of 64A2  
                     irobot_rotate@rotateAngle 00D6                                Port_Init@pInput 0100  
                                     printf@ap 00DD                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 00D8  
                                   _ISR_Enable 6D3A                               ?_HMI_SetSegments 00BA  
                      Console_MakeField@Column 00C5                          __size_of_SPI_MaxSpeed 0074  
                             ??_ADC_SetChannel 00B9                                  SPI_DCS@pInput 00B9  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 00BF  
                                  ??_rx_assign 00BC                          __size_of_update_angle 0012  
                        __size_ofi2_Motor_Step 0100                              ADC_Voltage@pInput 00E0  
                      Console_MakeField@pInput 00C4                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 00C1                                  ??_GetPortPORT 00BB  
                              ___lwmod@divisor 00C2                                  ??_GetPortTRIS 00BB  
                        Timer0_Start@pFunction 00B9                             Word_SetPair@pInput 00C8  
                              ___lwmod@counter 00C4                             Word_SetPair@pValue 00CB  
                     ?_irobot_query_and_update 00BF                               Motor_Init@pMotor 00E6  
                                  _MXK_Dequeue 65A2                              ADC_Voltage@output 00EE  
                                _distanceTotal 0073                                 LED_Toggle@pLED 00D1  
                                _LCD_DrawField 5072                               _Port_SetQuadType 1F4A  
                                  _MXK_Release 6B3A                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 64A2                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D4                             Byte_GetZone@Offset 00C0  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00CA  
                              _Port_SetPinType 2B64                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00C1                             Byte_GetZone@pChunk 00BC  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 6A4C  
                           Byte_GetZone@pInput 00B9                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 5E54                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 6982                                   _SPI_MaxSpeed 59A6  
            irobot_query_and_update@streamSize 00D0                                   _SPI_MinSpeed 5A1A  
                           Port_Set@TypeActual 00DD                               ?_move_and_rotate 0001  
