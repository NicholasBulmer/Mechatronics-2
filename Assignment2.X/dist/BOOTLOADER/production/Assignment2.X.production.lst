

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Sep 14 15:47:23 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1,inline
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1,inline
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1,inline
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   194                           	psect	text170,global,reloc=2,class=CODE,delta=1
   195                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   196                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   197  0000                     
   198                           ; Version 1.43
   199                           ; Generated 25/07/2017 GMT
   200                           ; 
   201                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   202                           ; All rights reserved.
   203                           ; 
   204                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   205                           ; 
   206                           ; Redistribution and use in source and binary forms, with or without modification, are
   207                           ; permitted provided that the following conditions are met:
   208                           ; 
   209                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   210                           ;        conditions and the following disclaimer.
   211                           ; 
   212                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   213                           ;        of conditions and the following disclaimer in the documentation and/or other
   214                           ;        materials provided with the distribution.
   215                           ; 
   216                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   217                           ;        software without specific prior written permission.
   218                           ; 
   219                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   220                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   221                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   222                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   223                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   224                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   225                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   226                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   227                           ; 
   228                           ; 
   229                           ; Code-generator required, PIC18F67J50 Definitions
   230                           ; 
   231                           ; SFR Addresses
   232  0000                     
   233                           	psect	idataCOMRAM
   234  016668                     __pidataCOMRAM:
   235                           	opt stack 0
   236                           
   237                           ;initializer for _gCursor
   238  016668  0006               	dw	6
   239  01666A  0006               	dw	6
   240                           
   241                           ;initializer for _Bus_State
   242  01666C  01                 	db	1
   243                           
   244                           ;initializer for _A
   245  01666D  41                 	db	65
   246                           
   247                           ;initializer for _a
   248  01666E  61                 	db	97
   249                           
   250                           ;initializer for _zero
   251  01666F  30                 	db	48
   252                           
   253                           ;initializer for _l
   254  016670  80                 	db	128
   255                           
   256                           ;initializer for _w
   257  016671  80                 	db	128
   258                           
   259                           	psect	idataBANK0
   260  01669E                     __pidataBANK0:
   261                           	opt stack 0
   262                           
   263                           ;initializer for _TimerX
   264  01669E  0008               	dw	8
   265                           
   266                           ;initializer for _MinDist
   267  0166A0  03E8               	dw	1000
   268                           
   269                           ;initializer for _gForecolour
   270  0166A2  FFFF               	dw	65535
   271                           
   272                           ;initializer for _change
   273  0166A4  01                 	db	1
   274                           
   275                           	psect	idataBANK3
   276  016638                     __pidataBANK3:
   277                           	opt stack 0
   278                           
   279                           ;initializer for Console_Render@F6956
   280  016638  0006               	dw	6
   281  01663A  0006               	dw	6
   282                           
   283                           ;initializer for _gLineSize
   284  01663C  0080               	dw	128
   285  01663E  0007               	dw	7
   286                           
   287                           ;initializer for _gCharSize
   288  016640  0005               	dw	5
   289  016642  0007               	dw	7
   290                           
   291                           	psect	mediumconst
   292  00FC7E                     __pmediumconst:
   293                           	opt stack 0
   294  00FC7E  00                 	db	0
   295  00FC7F                     _InitList:
   296                           	opt stack 0
   297  00FC7F  1100               	dw	4352
   298  00FC81  0080               	dw	128
   299  00FC83  012C               	dw	300
   300  00FC85  B100               	dw	45312
   301  00FC87  0002               	dw	2
   302  00FC89  0035               	dw	53
   303  00FC8B  0036               	dw	54
   304  00FC8D  B200               	dw	45568
   305  00FC8F  0002               	dw	2
   306  00FC91  0035               	dw	53
   307  00FC93  0036               	dw	54
   308  00FC95  B300               	dw	45824
   309  00FC97  0002               	dw	2
   310  00FC99  0035               	dw	53
   311  00FC9B  0036               	dw	54
   312  00FC9D  0002               	dw	2
   313  00FC9F  0035               	dw	53
   314  00FCA1  0036               	dw	54
   315  00FCA3  B400               	dw	46080
   316  00FCA5  0000               	dw	0
   317  00FCA7  C000               	dw	49152
   318  00FCA9  00A2               	dw	162
   319  00FCAB  0002               	dw	2
   320  00FCAD  0084               	dw	132
   321  00FCAF  C100               	dw	49408
   322  00FCB1  00C5               	dw	197
   323  00FCB3  C200               	dw	49664
   324  00FCB5  000D               	dw	13
   325  00FCB7  0000               	dw	0
   326  00FCB9  C300               	dw	49920
   327  00FCBB  008D               	dw	141
   328  00FCBD  002A               	dw	42
   329  00FCBF  C400               	dw	50176
   330  00FCC1  008D               	dw	141
   331  00FCC3  00EE               	dw	238
   332  00FCC5  C500               	dw	50432
   333  00FCC7  000A               	dw	10
   334  00FCC9  3600               	dw	13824
   335  00FCCB  00C8               	dw	200
   336  00FCCD  E000               	dw	57344
   337  00FCCF  0012               	dw	18
   338  00FCD1  001C               	dw	28
   339  00FCD3  0010               	dw	16
   340  00FCD5  0018               	dw	24
   341  00FCD7  0033               	dw	51
   342  00FCD9  002C               	dw	44
   343  00FCDB  0025               	dw	37
   344  00FCDD  0028               	dw	40
   345  00FCDF  0028               	dw	40
   346  00FCE1  0027               	dw	39
   347  00FCE3  002F               	dw	47
   348  00FCE5  003C               	dw	60
   349  00FCE7  0000               	dw	0
   350  00FCE9  0003               	dw	3
   351  00FCEB  0003               	dw	3
   352  00FCED  0010               	dw	16
   353  00FCEF  0080               	dw	128
   354  00FCF1  0078               	dw	120
   355  00FCF3  E100               	dw	57600
   356  00FCF5  0012               	dw	18
   357  00FCF7  001C               	dw	28
   358  00FCF9  0010               	dw	16
   359  00FCFB  0018               	dw	24
   360  00FCFD  002D               	dw	45
   361  00FCFF  0028               	dw	40
   362  00FD01  0023               	dw	35
   363  00FD03  0028               	dw	40
   364  00FD05  0028               	dw	40
   365  00FD07  0026               	dw	38
   366  00FD09  002F               	dw	47
   367  00FD0B  003B               	dw	59
   368  00FD0D  0000               	dw	0
   369  00FD0F  0003               	dw	3
   370  00FD11  0003               	dw	3
   371  00FD13  0010               	dw	16
   372  00FD15  3A00               	dw	14848
   373  00FD17  0005               	dw	5
   374  00FD19  2A00               	dw	10752
   375  00FD1B  0000               	dw	0
   376  00FD1D  0002               	dw	2
   377  00FD1F  0000               	dw	0
   378  00FD21  0081               	dw	129
   379  00FD23  2B00               	dw	11008
   380  00FD25  0000               	dw	0
   381  00FD27  0003               	dw	3
   382  00FD29  0000               	dw	0
   383  00FD2B  00A2               	dw	162
   384  00FD2D  2900               	dw	10496
   385  00FD2F  2C00               	dw	11264
   386  00FD31                     __end_of_InitList:
   387                           	opt stack 0
   388  00FD31                     Timer0_Init@PRESCALE:
   389                           	opt stack 0
   390  00FD31  0002               	dw	2
   391  00FD33  0004               	dw	4
   392  00FD35  0008               	dw	8
   393  00FD37  0010               	dw	16
   394  00FD39  0020               	dw	32
   395  00FD3B  0040               	dw	64
   396  00FD3D  0080               	dw	128
   397  00FD3F  0100               	dw	256
   398  00FD41                     __end_ofTimer0_Init@PRESCALE:
   399                           	opt stack 0
   400  00FD41                     PortProperty_Valid@F6830:
   401                           	opt stack 0
   402  00FD41  00                 	db	0
   403  00FD42  01                 	db	1
   404  00FD43  02                 	db	2
   405  00FD44  00                 	db	0
   406  00FD45  01                 	db	1
   407  00FD46  00                 	db	0
   408  00FD47  01                 	db	1
   409  00FD48  00                 	db	0
   410  00FD49  02                 	db	2
   411  00FD4A  02                 	db	2
   412  00FD4B  00                 	db	0
   413  00FD4C  00                 	db	0
   414  00FD4D  03                 	db	3
   415  00FD4E  03                 	db	3
   416  00FD4F  03                 	db	3
   417  00FD50  00                 	db	0
   418  00FD51                     __end_ofPortProperty_Valid@F6830:
   419                           	opt stack 0
   420  00FD51                     _dpowers:
   421                           	opt stack 0
   422  00FD51  0001               	dw	1
   423  00FD53  000A               	dw	10
   424  00FD55  0064               	dw	100
   425  00FD57  03E8               	dw	1000
   426  00FD59  2710               	dw	10000
   427  00FD5B                     __end_of_dpowers:
   428                           	opt stack 0
   429  00FD5B                     _MASKS:
   430                           	opt stack 0
   431  00FD5B  00                 	db	0
   432  00FD5C  01                 	db	1
   433  00FD5D  03                 	db	3
   434  00FD5E  07                 	db	7
   435  00FD5F  0F                 	db	15
   436  00FD60  1F                 	db	31
   437  00FD61  3F                 	db	63
   438  00FD62  7F                 	db	127
   439  00FD63  FF                 	db	255
   440  00FD64                     __end_of_MASKS:
   441                           	opt stack 0
   442  00FD64                     HMI_SetButton@F7213:
   443                           	opt stack 0
   444  00FD64  00                 	db	0
   445  00FD65  02                 	db	2
   446  00FD66  01                 	db	1
   447  00FD67  03                 	db	3
   448  00FD68                     __end_ofHMI_SetButton@F7213:
   449                           	opt stack 0
   450  00FD68                     Timer2_Init@PRESCALE:
   451                           	opt stack 0
   452  00FD68  01                 	db	1
   453  00FD69  04                 	db	4
   454  00FD6A  10                 	db	16
   455  00FD6B                     __end_ofTimer2_Init@PRESCALE:
   456                           	opt stack 0
   457  00FD6B                     _Font5x7:
   458                           	opt stack 0
   459  00FD6B  00                 	db	0
   460  00FD6C  00                 	db	0
   461  00FD6D  00                 	db	0
   462  00FD6E  00                 	db	0
   463  00FD6F  00                 	db	0
   464  00FD70  00                 	db	0
   465  00FD71  00                 	db	0
   466  00FD72  5F                 	db	95
   467  00FD73  00                 	db	0
   468  00FD74  00                 	db	0
   469  00FD75  00                 	db	0
   470  00FD76  07                 	db	7
   471  00FD77  00                 	db	0
   472  00FD78  07                 	db	7
   473  00FD79  00                 	db	0
   474  00FD7A  14                 	db	20
   475  00FD7B  7F                 	db	127
   476  00FD7C  14                 	db	20
   477  00FD7D  7F                 	db	127
   478  00FD7E  14                 	db	20
   479  00FD7F  24                 	db	36
   480  00FD80  2A                 	db	42
   481  00FD81  7F                 	db	127
   482  00FD82  2A                 	db	42
   483  00FD83  12                 	db	18
   484  00FD84  23                 	db	35
   485  00FD85  13                 	db	19
   486  00FD86  08                 	db	8
   487  00FD87  64                 	db	100
   488  00FD88  62                 	db	98
   489  00FD89  36                 	db	54
   490  00FD8A  49                 	db	73
   491  00FD8B  55                 	db	85
   492  00FD8C  22                 	db	34
   493  00FD8D  50                 	db	80
   494  00FD8E  00                 	db	0
   495  00FD8F  05                 	db	5
   496  00FD90  03                 	db	3
   497  00FD91  00                 	db	0
   498  00FD92  00                 	db	0
   499  00FD93  00                 	db	0
   500  00FD94  1C                 	db	28
   501  00FD95  22                 	db	34
   502  00FD96  41                 	db	65
   503  00FD97  00                 	db	0
   504  00FD98  00                 	db	0
   505  00FD99  41                 	db	65
   506  00FD9A  22                 	db	34
   507  00FD9B  1C                 	db	28
   508  00FD9C  00                 	db	0
   509  00FD9D  08                 	db	8
   510  00FD9E  2A                 	db	42
   511  00FD9F  1C                 	db	28
   512  00FDA0  2A                 	db	42
   513  00FDA1  08                 	db	8
   514  00FDA2  08                 	db	8
   515  00FDA3  08                 	db	8
   516  00FDA4  3E                 	db	62
   517  00FDA5  08                 	db	8
   518  00FDA6  08                 	db	8
   519  00FDA7  00                 	db	0
   520  00FDA8  50                 	db	80
   521  00FDA9  30                 	db	48
   522  00FDAA  00                 	db	0
   523  00FDAB  00                 	db	0
   524  00FDAC  08                 	db	8
   525  00FDAD  08                 	db	8
   526  00FDAE  08                 	db	8
   527  00FDAF  08                 	db	8
   528  00FDB0  08                 	db	8
   529  00FDB1  00                 	db	0
   530  00FDB2  60                 	db	96
   531  00FDB3  60                 	db	96
   532  00FDB4  00                 	db	0
   533  00FDB5  00                 	db	0
   534  00FDB6  20                 	db	32
   535  00FDB7  10                 	db	16
   536  00FDB8  08                 	db	8
   537  00FDB9  04                 	db	4
   538  00FDBA  02                 	db	2
   539  00FDBB  3E                 	db	62
   540  00FDBC  51                 	db	81
   541  00FDBD  49                 	db	73
   542  00FDBE  45                 	db	69
   543  00FDBF  3E                 	db	62
   544  00FDC0  00                 	db	0
   545  00FDC1  42                 	db	66
   546  00FDC2  7F                 	db	127
   547  00FDC3  40                 	db	64
   548  00FDC4  00                 	db	0
   549  00FDC5  42                 	db	66
   550  00FDC6  61                 	db	97
   551  00FDC7  51                 	db	81
   552  00FDC8  49                 	db	73
   553  00FDC9  46                 	db	70
   554  00FDCA  21                 	db	33
   555  00FDCB  41                 	db	65
   556  00FDCC  45                 	db	69
   557  00FDCD  4B                 	db	75
   558  00FDCE  31                 	db	49
   559  00FDCF  18                 	db	24
   560  00FDD0  14                 	db	20
   561  00FDD1  12                 	db	18
   562  00FDD2  7F                 	db	127
   563  00FDD3  10                 	db	16
   564  00FDD4  27                 	db	39
   565  00FDD5  45                 	db	69
   566  00FDD6  45                 	db	69
   567  00FDD7  45                 	db	69
   568  00FDD8  39                 	db	57
   569  00FDD9  3C                 	db	60
   570  00FDDA  4A                 	db	74
   571  00FDDB  49                 	db	73
   572  00FDDC  49                 	db	73
   573  00FDDD  30                 	db	48
   574  00FDDE  01                 	db	1
   575  00FDDF  71                 	db	113
   576  00FDE0  09                 	db	9
   577  00FDE1  05                 	db	5
   578  00FDE2  03                 	db	3
   579  00FDE3  36                 	db	54
   580  00FDE4  49                 	db	73
   581  00FDE5  49                 	db	73
   582  00FDE6  49                 	db	73
   583  00FDE7  36                 	db	54
   584  00FDE8  06                 	db	6
   585  00FDE9  49                 	db	73
   586  00FDEA  49                 	db	73
   587  00FDEB  29                 	db	41
   588  00FDEC  1E                 	db	30
   589  00FDED  00                 	db	0
   590  00FDEE  36                 	db	54
   591  00FDEF  36                 	db	54
   592  00FDF0  00                 	db	0
   593  00FDF1  00                 	db	0
   594  00FDF2  00                 	db	0
   595  00FDF3  56                 	db	86
   596  00FDF4  36                 	db	54
   597  00FDF5  00                 	db	0
   598  00FDF6  00                 	db	0
   599  00FDF7  00                 	db	0
   600  00FDF8  08                 	db	8
   601  00FDF9  14                 	db	20
   602  00FDFA  22                 	db	34
   603  00FDFB  41                 	db	65
   604  00FDFC  14                 	db	20
   605  00FDFD  14                 	db	20
   606  00FDFE  14                 	db	20
   607  00FDFF  14                 	db	20
   608  00FE00  14                 	db	20
   609  00FE01  41                 	db	65
   610  00FE02  22                 	db	34
   611  00FE03  14                 	db	20
   612  00FE04  08                 	db	8
   613  00FE05  00                 	db	0
   614  00FE06  02                 	db	2
   615  00FE07  01                 	db	1
   616  00FE08  51                 	db	81
   617  00FE09  09                 	db	9
   618  00FE0A  06                 	db	6
   619  00FE0B  32                 	db	50
   620  00FE0C  49                 	db	73
   621  00FE0D  79                 	db	121
   622  00FE0E  41                 	db	65
   623  00FE0F  3E                 	db	62
   624  00FE10  7E                 	db	126
   625  00FE11  11                 	db	17
   626  00FE12  11                 	db	17
   627  00FE13  11                 	db	17
   628  00FE14  7E                 	db	126
   629  00FE15  7F                 	db	127
   630  00FE16  49                 	db	73
   631  00FE17  49                 	db	73
   632  00FE18  49                 	db	73
   633  00FE19  36                 	db	54
   634  00FE1A  3E                 	db	62
   635  00FE1B  41                 	db	65
   636  00FE1C  41                 	db	65
   637  00FE1D  41                 	db	65
   638  00FE1E  22                 	db	34
   639  00FE1F  7F                 	db	127
   640  00FE20  41                 	db	65
   641  00FE21  41                 	db	65
   642  00FE22  22                 	db	34
   643  00FE23  1C                 	db	28
   644  00FE24  7F                 	db	127
   645  00FE25  49                 	db	73
   646  00FE26  49                 	db	73
   647  00FE27  49                 	db	73
   648  00FE28  41                 	db	65
   649  00FE29  7F                 	db	127
   650  00FE2A  09                 	db	9
   651  00FE2B  09                 	db	9
   652  00FE2C  01                 	db	1
   653  00FE2D  01                 	db	1
   654  00FE2E  3E                 	db	62
   655  00FE2F  41                 	db	65
   656  00FE30  41                 	db	65
   657  00FE31  51                 	db	81
   658  00FE32  32                 	db	50
   659  00FE33  7F                 	db	127
   660  00FE34  08                 	db	8
   661  00FE35  08                 	db	8
   662  00FE36  08                 	db	8
   663  00FE37  7F                 	db	127
   664  00FE38  00                 	db	0
   665  00FE39  41                 	db	65
   666  00FE3A  7F                 	db	127
   667  00FE3B  41                 	db	65
   668  00FE3C  00                 	db	0
   669  00FE3D  20                 	db	32
   670  00FE3E  40                 	db	64
   671  00FE3F  41                 	db	65
   672  00FE40  3F                 	db	63
   673  00FE41  01                 	db	1
   674  00FE42  7F                 	db	127
   675  00FE43  08                 	db	8
   676  00FE44  14                 	db	20
   677  00FE45  22                 	db	34
   678  00FE46  41                 	db	65
   679  00FE47  7F                 	db	127
   680  00FE48  40                 	db	64
   681  00FE49  40                 	db	64
   682  00FE4A  40                 	db	64
   683  00FE4B  40                 	db	64
   684  00FE4C  7F                 	db	127
   685  00FE4D  02                 	db	2
   686  00FE4E  04                 	db	4
   687  00FE4F  02                 	db	2
   688  00FE50  7F                 	db	127
   689  00FE51  7F                 	db	127
   690  00FE52  04                 	db	4
   691  00FE53  08                 	db	8
   692  00FE54  10                 	db	16
   693  00FE55  7F                 	db	127
   694  00FE56  3E                 	db	62
   695  00FE57  41                 	db	65
   696  00FE58  41                 	db	65
   697  00FE59  41                 	db	65
   698  00FE5A  3E                 	db	62
   699  00FE5B  7F                 	db	127
   700  00FE5C  09                 	db	9
   701  00FE5D  09                 	db	9
   702  00FE5E  09                 	db	9
   703  00FE5F  06                 	db	6
   704  00FE60  3E                 	db	62
   705  00FE61  41                 	db	65
   706  00FE62  51                 	db	81
   707  00FE63  21                 	db	33
   708  00FE64  5E                 	db	94
   709  00FE65  7F                 	db	127
   710  00FE66  09                 	db	9
   711  00FE67  19                 	db	25
   712  00FE68  29                 	db	41
   713  00FE69  46                 	db	70
   714  00FE6A  46                 	db	70
   715  00FE6B  49                 	db	73
   716  00FE6C  49                 	db	73
   717  00FE6D  49                 	db	73
   718  00FE6E  31                 	db	49
   719  00FE6F  01                 	db	1
   720  00FE70  01                 	db	1
   721  00FE71  7F                 	db	127
   722  00FE72  01                 	db	1
   723  00FE73  01                 	db	1
   724  00FE74  3F                 	db	63
   725  00FE75  40                 	db	64
   726  00FE76  40                 	db	64
   727  00FE77  40                 	db	64
   728  00FE78  3F                 	db	63
   729  00FE79  1F                 	db	31
   730  00FE7A  20                 	db	32
   731  00FE7B  40                 	db	64
   732  00FE7C  20                 	db	32
   733  00FE7D  1F                 	db	31
   734  00FE7E  7F                 	db	127
   735  00FE7F  20                 	db	32
   736  00FE80  18                 	db	24
   737  00FE81  20                 	db	32
   738  00FE82  7F                 	db	127
   739  00FE83  63                 	db	99
   740  00FE84  14                 	db	20
   741  00FE85  08                 	db	8
   742  00FE86  14                 	db	20
   743  00FE87  63                 	db	99
   744  00FE88  03                 	db	3
   745  00FE89  04                 	db	4
   746  00FE8A  78                 	db	120
   747  00FE8B  04                 	db	4
   748  00FE8C  03                 	db	3
   749  00FE8D  61                 	db	97
   750  00FE8E  51                 	db	81
   751  00FE8F  49                 	db	73
   752  00FE90  45                 	db	69
   753  00FE91  43                 	db	67
   754  00FE92  00                 	db	0
   755  00FE93  00                 	db	0
   756  00FE94  7F                 	db	127
   757  00FE95  41                 	db	65
   758  00FE96  41                 	db	65
   759  00FE97  02                 	db	2
   760  00FE98  04                 	db	4
   761  00FE99  08                 	db	8
   762  00FE9A  10                 	db	16
   763  00FE9B  20                 	db	32
   764  00FE9C  41                 	db	65
   765  00FE9D  41                 	db	65
   766  00FE9E  7F                 	db	127
   767  00FE9F  00                 	db	0
   768  00FEA0  00                 	db	0
   769  00FEA1  04                 	db	4
   770  00FEA2  02                 	db	2
   771  00FEA3  01                 	db	1
   772  00FEA4  02                 	db	2
   773  00FEA5  04                 	db	4
   774  00FEA6  40                 	db	64
   775  00FEA7  40                 	db	64
   776  00FEA8  40                 	db	64
   777  00FEA9  40                 	db	64
   778  00FEAA  40                 	db	64
   779  00FEAB  00                 	db	0
   780  00FEAC  01                 	db	1
   781  00FEAD  02                 	db	2
   782  00FEAE  04                 	db	4
   783  00FEAF  00                 	db	0
   784  00FEB0  20                 	db	32
   785  00FEB1  54                 	db	84
   786  00FEB2  54                 	db	84
   787  00FEB3  54                 	db	84
   788  00FEB4  78                 	db	120
   789  00FEB5  7F                 	db	127
   790  00FEB6  48                 	db	72
   791  00FEB7  44                 	db	68
   792  00FEB8  44                 	db	68
   793  00FEB9  38                 	db	56
   794  00FEBA  38                 	db	56
   795  00FEBB  44                 	db	68
   796  00FEBC  44                 	db	68
   797  00FEBD  44                 	db	68
   798  00FEBE  20                 	db	32
   799  00FEBF  38                 	db	56
   800  00FEC0  44                 	db	68
   801  00FEC1  44                 	db	68
   802  00FEC2  48                 	db	72
   803  00FEC3  7F                 	db	127
   804  00FEC4  38                 	db	56
   805  00FEC5  54                 	db	84
   806  00FEC6  54                 	db	84
   807  00FEC7  54                 	db	84
   808  00FEC8  18                 	db	24
   809  00FEC9  08                 	db	8
   810  00FECA  7E                 	db	126
   811  00FECB  09                 	db	9
   812  00FECC  01                 	db	1
   813  00FECD  02                 	db	2
   814  00FECE  08                 	db	8
   815  00FECF  14                 	db	20
   816  00FED0  54                 	db	84
   817  00FED1  54                 	db	84
   818  00FED2  3C                 	db	60
   819  00FED3  7F                 	db	127
   820  00FED4  08                 	db	8
   821  00FED5  04                 	db	4
   822  00FED6  04                 	db	4
   823  00FED7  78                 	db	120
   824  00FED8  00                 	db	0
   825  00FED9  44                 	db	68
   826  00FEDA  7D                 	db	125
   827  00FEDB  40                 	db	64
   828  00FEDC  00                 	db	0
   829  00FEDD  20                 	db	32
   830  00FEDE  40                 	db	64
   831  00FEDF  44                 	db	68
   832  00FEE0  3D                 	db	61
   833  00FEE1  00                 	db	0
   834  00FEE2  00                 	db	0
   835  00FEE3  7F                 	db	127
   836  00FEE4  10                 	db	16
   837  00FEE5  28                 	db	40
   838  00FEE6  44                 	db	68
   839  00FEE7  00                 	db	0
   840  00FEE8  41                 	db	65
   841  00FEE9  7F                 	db	127
   842  00FEEA  40                 	db	64
   843  00FEEB  00                 	db	0
   844  00FEEC  7C                 	db	124
   845  00FEED  04                 	db	4
   846  00FEEE  18                 	db	24
   847  00FEEF  04                 	db	4
   848  00FEF0  78                 	db	120
   849  00FEF1  7C                 	db	124
   850  00FEF2  08                 	db	8
   851  00FEF3  04                 	db	4
   852  00FEF4  04                 	db	4
   853  00FEF5  78                 	db	120
   854  00FEF6  38                 	db	56
   855  00FEF7  44                 	db	68
   856  00FEF8  44                 	db	68
   857  00FEF9  44                 	db	68
   858  00FEFA  38                 	db	56
   859  00FEFB  7C                 	db	124
   860  00FEFC  14                 	db	20
   861  00FEFD  14                 	db	20
   862  00FEFE  14                 	db	20
   863  00FEFF  08                 	db	8
   864  00FF00  08                 	db	8
   865  00FF01  14                 	db	20
   866  00FF02  14                 	db	20
   867  00FF03  18                 	db	24
   868  00FF04  7C                 	db	124
   869  00FF05  7C                 	db	124
   870  00FF06  08                 	db	8
   871  00FF07  04                 	db	4
   872  00FF08  04                 	db	4
   873  00FF09  08                 	db	8
   874  00FF0A  48                 	db	72
   875  00FF0B  54                 	db	84
   876  00FF0C  54                 	db	84
   877  00FF0D  54                 	db	84
   878  00FF0E  20                 	db	32
   879  00FF0F  04                 	db	4
   880  00FF10  3F                 	db	63
   881  00FF11  44                 	db	68
   882  00FF12  40                 	db	64
   883  00FF13  20                 	db	32
   884  00FF14  3C                 	db	60
   885  00FF15  40                 	db	64
   886  00FF16  40                 	db	64
   887  00FF17  20                 	db	32
   888  00FF18  7C                 	db	124
   889  00FF19  1C                 	db	28
   890  00FF1A  20                 	db	32
   891  00FF1B  40                 	db	64
   892  00FF1C  20                 	db	32
   893  00FF1D  1C                 	db	28
   894  00FF1E  3C                 	db	60
   895  00FF1F  40                 	db	64
   896  00FF20  30                 	db	48
   897  00FF21  40                 	db	64
   898  00FF22  3C                 	db	60
   899  00FF23  44                 	db	68
   900  00FF24  28                 	db	40
   901  00FF25  10                 	db	16
   902  00FF26  28                 	db	40
   903  00FF27  44                 	db	68
   904  00FF28  0C                 	db	12
   905  00FF29  50                 	db	80
   906  00FF2A  50                 	db	80
   907  00FF2B  50                 	db	80
   908  00FF2C  3C                 	db	60
   909  00FF2D  44                 	db	68
   910  00FF2E  64                 	db	100
   911  00FF2F  54                 	db	84
   912  00FF30  4C                 	db	76
   913  00FF31  44                 	db	68
   914  00FF32  00                 	db	0
   915  00FF33  08                 	db	8
   916  00FF34  36                 	db	54
   917  00FF35  41                 	db	65
   918  00FF36  00                 	db	0
   919  00FF37  00                 	db	0
   920  00FF38  00                 	db	0
   921  00FF39  7F                 	db	127
   922  00FF3A  00                 	db	0
   923  00FF3B  00                 	db	0
   924  00FF3C  00                 	db	0
   925  00FF3D  41                 	db	65
   926  00FF3E  36                 	db	54
   927  00FF3F  08                 	db	8
   928  00FF40  00                 	db	0
   929  00FF41  08                 	db	8
   930  00FF42  08                 	db	8
   931  00FF43  2A                 	db	42
   932  00FF44  1C                 	db	28
   933  00FF45  08                 	db	8
   934  00FF46  08                 	db	8
   935  00FF47  1C                 	db	28
   936  00FF48  2A                 	db	42
   937  00FF49  08                 	db	8
   938  00FF4A  08                 	db	8
   939  00FF4B                     __end_of_Font5x7:
   940                           	opt stack 0
   941  00FF4B                     _PortG_Property:
   942                           	opt stack 0
   943  00FF4B  FC00               	dw	64512
   944  00FF4D                     __end_of_PortG_Property:
   945                           	opt stack 0
   946  00FF4D                     _PortF_Property:
   947                           	opt stack 0
   948  00FF4D  0FFF               	dw	4095
   949  00FF4F                     __end_of_PortF_Property:
   950                           	opt stack 0
   951  00FF4F                     _PortE_Property:
   952                           	opt stack 0
   953  00FF4F  0000               	dw	0
   954  00FF51                     __end_of_PortE_Property:
   955                           	opt stack 0
   956  00FF51                     _PortD_Property:
   957                           	opt stack 0
   958  00FF51  FFFF               	dw	65535
   959  00FF53                     __end_of_PortD_Property:
   960                           	opt stack 0
   961  00FF53                     _PortC_Property:
   962                           	opt stack 0
   963  00FF53  FFF0               	dw	65520
   964  00FF55                     __end_of_PortC_Property:
   965                           	opt stack 0
   966  00FF55                     _PortB_Property:
   967                           	opt stack 0
   968  00FF55  FF00               	dw	65280
   969  00FF57                     __end_of_PortB_Property:
   970                           	opt stack 0
   971  00FF57                     _PortA_Property:
   972                           	opt stack 0
   973  00FF57  00FF               	dw	255
   974  00FF59                     __end_of_PortA_Property:
   975                           	opt stack 0
   976  0000                     _TMR0	set	4054
   977  0000                     _RCREG1	set	4015
   978  0000                     _TXREG1	set	4014
   979  0000                     _SPBRG1	set	4016
   980  0000                     _TXSTA1bits	set	4013
   981  0000                     _BAUDCON1bits	set	3966
   982  0000                     _RCSTA1	set	4012
   983  0000                     _TXSTA1	set	4013
   984  0000                     _TRISCbits	set	3988
   985  0000                     _PR2	set	4043
   986  0000                     _T2CONbits	set	4042
   987  0000                     _T0CONbits	set	4053
   988  0000                     _RCONbits	set	4048
   989  0000                     _OSCTUNEbits	set	3995
   990  0000                     _PIR3	set	4004
   991  0000                     _PIR2	set	4001
   992  0000                     _PIR1	set	3998
   993  0000                     _INTCONbits	set	4082
   994  0000                     _SSP2CON2bits	set	3947
   995  0000                     _SSP1CON2bits	set	4037
   996  0000                     _SSP1ADD	set	4040
   997  0000                     _ANCON0	set	4033
   998  0000                     _ADRESL	set	4035
   999  0000                     _ADRESH	set	4036
  1000  0000                     _ADCON1bits	set	4033
  1001  0000                     _ADCON0bits	set	4034
  1002  0000                     _SSP2CON1bits	set	3948
  1003  0000                     _SSP1CON1bits	set	4038
  1004  0000                     _SSP2STATbits	set	3949
  1005  0000                     _SSP1STATbits	set	4039
  1006  0000                     _PIE3bits	set	4003
  1007  0000                     _PIE1bits	set	3997
  1008  0000                     _PIR3bits	set	4004
  1009  0000                     _PIR1bits	set	3998
  1010  0000                     _IPR3bits	set	4005
  1011  0000                     _IPR1bits	set	3999
  1012  0000                     _PORTFbits	set	3973
  1013  0000                     _SSP2CON2	set	3947
  1014  0000                     _SSP1CON2	set	4037
  1015  0000                     _SSP2BUF	set	3951
  1016  0000                     _SSP2CON1	set	3948
  1017  0000                     _SSP2STAT	set	3949
  1018  0000                     _SSP1BUF	set	4041
  1019  0000                     _SSP1CON1	set	4038
  1020  0000                     _SSP1STAT	set	4039
  1021  0000                     _LATG	set	3983
  1022  0000                     _LATF	set	3982
  1023  0000                     _LATE	set	3981
  1024  0000                     _LATD	set	3980
  1025  0000                     _LATC	set	3979
  1026  0000                     _LATB	set	3978
  1027  0000                     _LATA	set	3977
  1028  0000                     _TRISG	set	3992
  1029  0000                     _TRISF	set	3991
  1030  0000                     _TRISE	set	3990
  1031  0000                     _TRISD	set	3989
  1032  0000                     _TRISC	set	3988
  1033  0000                     _TRISB	set	3987
  1034  0000                     _TRISA	set	3986
  1035  0000                     _PORTG	set	3974
  1036  0000                     _PORTF	set	3973
  1037  0000                     _PORTE	set	3972
  1038  0000                     _PORTD	set	3971
  1039  0000                     _PORTC	set	3970
  1040  0000                     _PORTB	set	3969
  1041  0000                     _PORTA	set	3968
  1042  00FF59                     STR_8:
  1043  00FF59  43                 	db	67	;'C'
  1044  00FF5A  6C                 	db	108	;'l'
  1045  00FF5B  6F                 	db	111	;'o'
  1046  00FF5C  73                 	db	115	;'s'
  1047  00FF5D  65                 	db	101	;'e'
  1048  00FF5E  73                 	db	115	;'s'
  1049  00FF5F  74                 	db	116	;'t'
  1050  00FF60  20                 	db	32
  1051  00FF61  57                 	db	87	;'W'
  1052  00FF62  61                 	db	97	;'a'
  1053  00FF63  6C                 	db	108	;'l'
  1054  00FF64  6C                 	db	108	;'l'
  1055  00FF65  3A                 	db	58	;':'
  1056  00FF66  25                 	db	37
  1057  00FF67  75                 	db	117	;'u'
  1058  00FF68  0A                 	db	10
  1059  00FF69  43                 	db	67	;'C'
  1060  00FF6A  6C                 	db	108	;'l'
  1061  00FF6B  6F                 	db	111	;'o'
  1062  00FF6C  73                 	db	115	;'s'
  1063  00FF6D  65                 	db	101	;'e'
  1064  00FF6E  73                 	db	115	;'s'
  1065  00FF6F  74                 	db	116	;'t'
  1066  00FF70  20                 	db	32
  1067  00FF71  41                 	db	65	;'A'
  1068  00FF72  6E                 	db	110	;'n'
  1069  00FF73  67                 	db	103	;'g'
  1070  00FF74  6C                 	db	108	;'l'
  1071  00FF75  65                 	db	101	;'e'
  1072  00FF76  3A                 	db	58	;':'
  1073  00FF77  25                 	db	37
  1074  00FF78  75                 	db	117	;'u'
  1075  00FF79  0A                 	db	10
  1076  00FF7A  4C                 	db	76	;'L'
  1077  00FF7B  65                 	db	101	;'e'
  1078  00FF7C  66                 	db	102	;'f'
  1079  00FF7D  74                 	db	116	;'t'
  1080  00FF7E  20                 	db	32
  1081  00FF7F  42                 	db	66	;'B'
  1082  00FF80  75                 	db	117	;'u'
  1083  00FF81  6D                 	db	109	;'m'
  1084  00FF82  70                 	db	112	;'p'
  1085  00FF83  3A                 	db	58	;':'
  1086  00FF84  25                 	db	37
  1087  00FF85  75                 	db	117	;'u'
  1088  00FF86  0A                 	db	10
  1089  00FF87  52                 	db	82	;'R'
  1090  00FF88  69                 	db	105	;'i'
  1091  00FF89  67                 	db	103	;'g'
  1092  00FF8A  68                 	db	104	;'h'
  1093  00FF8B  74                 	db	116	;'t'
  1094  00FF8C  42                 	db	66	;'B'
  1095  00FF8D  75                 	db	117	;'u'
  1096  00FF8E  6D                 	db	109	;'m'
  1097  00FF8F  70                 	db	112	;'p'
  1098  00FF90  3A                 	db	58	;':'
  1099  00FF91  25                 	db	37
  1100  00FF92  75                 	db	117	;'u'
  1101  00FF93  0A                 	db	10
  1102  00FF94  00                 	db	0
  1103  00FF95                     STR_2:
  1104  00FF95  54                 	db	84	;'T'
  1105  00FF96  6F                 	db	111	;'o'
  1106  00FF97  74                 	db	116	;'t'
  1107  00FF98  61                 	db	97	;'a'
  1108  00FF99  6C                 	db	108	;'l'
  1109  00FF9A  20                 	db	32
  1110  00FF9B  44                 	db	68	;'D'
  1111  00FF9C  69                 	db	105	;'i'
  1112  00FF9D  73                 	db	115	;'s'
  1113  00FF9E  74                 	db	116	;'t'
  1114  00FF9F  61                 	db	97	;'a'
  1115  00FFA0  6E                 	db	110	;'n'
  1116  00FFA1  63                 	db	99	;'c'
  1117  00FFA2  65                 	db	101	;'e'
  1118  00FFA3  3A                 	db	58	;':'
  1119  00FFA4  25                 	db	37
  1120  00FFA5  75                 	db	117	;'u'
  1121  00FFA6  0A                 	db	10
  1122  00FFA7  4C                 	db	76	;'L'
  1123  00FFA8  65                 	db	101	;'e'
  1124  00FFA9  66                 	db	102	;'f'
  1125  00FFAA  74                 	db	116	;'t'
  1126  00FFAB  20                 	db	32
  1127  00FFAC  42                 	db	66	;'B'
  1128  00FFAD  75                 	db	117	;'u'
  1129  00FFAE  6D                 	db	109	;'m'
  1130  00FFAF  70                 	db	112	;'p'
  1131  00FFB0  3A                 	db	58	;':'
  1132  00FFB1  25                 	db	37
  1133  00FFB2  75                 	db	117	;'u'
  1134  00FFB3  0A                 	db	10
  1135  00FFB4  52                 	db	82	;'R'
  1136  00FFB5  69                 	db	105	;'i'
  1137  00FFB6  67                 	db	103	;'g'
  1138  00FFB7  68                 	db	104	;'h'
  1139  00FFB8  74                 	db	116	;'t'
  1140  00FFB9  20                 	db	32
  1141  00FFBA  42                 	db	66	;'B'
  1142  00FFBB  75                 	db	117	;'u'
  1143  00FFBC  6D                 	db	109	;'m'
  1144  00FFBD  70                 	db	112	;'p'
  1145  00FFBE  3A                 	db	58	;':'
  1146  00FFBF  25                 	db	37
  1147  00FFC0  75                 	db	117	;'u'
  1148  00FFC1  0A                 	db	10
  1149  00FFC2  00                 	db	0
  1150  00FFC3                     STR_11:
  1151  00FFC3  20                 	db	32
  1152  00FFC4  20                 	db	32
  1153  00FFC5  20                 	db	32
  1154  00FFC6  20                 	db	32
  1155  00FFC7  20                 	db	32
  1156  00FFC8  20                 	db	32
  1157  00FFC9  20                 	db	32
  1158  00FFCA  20                 	db	32
  1159  00FFCB  20                 	db	32
  1160  00FFCC  20                 	db	32
  1161  00FFCD  20                 	db	32
  1162  00FFCE  20                 	db	32
  1163  00FFCF  20                 	db	32
  1164  00FFD0  20                 	db	32
  1165  00FFD1  20                 	db	32
  1166  00FFD2  20                 	db	32
  1167  00FFD3  20                 	db	32
  1168  00FFD4  20                 	db	32
  1169  00FFD5  20                 	db	32
  1170  00FFD6  0A                 	db	10
  1171  00FFD7  00                 	db	0
  1172  00FFD8                     STR_10:
  1173  00FFD8  50                 	db	80	;'P'
  1174  00FFD9  6C                 	db	108	;'l'
  1175  00FFDA  65                 	db	101	;'e'
  1176  00FFDB  61                 	db	97	;'a'
  1177  00FFDC  73                 	db	115	;'s'
  1178  00FFDD  65                 	db	101	;'e'
  1179  00FFDE  20                 	db	32
  1180  00FFDF  73                 	db	115	;'s'
  1181  00FFE0  65                 	db	101	;'e'
  1182  00FFE1  6C                 	db	108	;'l'
  1183  00FFE2  65                 	db	101	;'e'
  1184  00FFE3  63                 	db	99	;'c'
  1185  00FFE4  74                 	db	116	;'t'
  1186  00FFE5  20                 	db	32
  1187  00FFE6  6D                 	db	109	;'m'
  1188  00FFE7  6F                 	db	111	;'o'
  1189  00FFE8  64                 	db	100	;'d'
  1190  00FFE9  65                 	db	101	;'e'
  1191  00FFEA  2E                 	db	46
  1192  00FFEB  0A                 	db	10
  1193  00FFEC  00                 	db	0
  1194  00FFED                     STR_6:
  1195  00FFED  44                 	db	68	;'D'
  1196  00FFEE  69                 	db	105	;'i'
  1197  00FFEF  73                 	db	115	;'s'
  1198  00FFF0  74                 	db	116	;'t'
  1199  00FFF1  61                 	db	97	;'a'
  1200  00FFF2  6E                 	db	110	;'n'
  1201  00FFF3  63                 	db	99	;'c'
  1202  00FFF4  65                 	db	101	;'e'
  1203  00FFF5  3A                 	db	58	;':'
  1204  00FFF6  20                 	db	32
  1205  00FFF7  25                 	db	37
  1206  00FFF8  64                 	db	100	;'d'
  1207  00FFF9  0A                 	db	10
  1208  00FFFA  00                 	db	0
  1209  00FFFB                     STR_1:
  1210  00FFFB  25                 	db	37
  1211  00FFFC  63                 	db	99	;'c'
  1212  00FFFD  00                 	db	0
  1213  0000                     
  1214                           ; #config settings
  1215  00FFFE  00                 	db	0	; dummy byte at the end
  1216  0000                     
  1217                           	psect	cinit
  1218  0144F8                     __pcinit:
  1219                           	opt stack 0
  1220  0144F8                     start_initialization:
  1221                           	opt stack 0
  1222  0144F8                     __initialization:
  1223                           	opt stack 0
  1224                           
  1225                           ; Initialize objects allocated to BANK3 (12 bytes)
  1226                           ; load TBLPTR registers with __pidataBANK3
  1227  0144F8  0E38               	movlw	low __pidataBANK3
  1228  0144FA  6EF6               	movwf	tblptrl,c
  1229  0144FC  0E66               	movlw	high __pidataBANK3
  1230  0144FE  6EF7               	movwf	tblptrh,c
  1231  014500  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1232  014502  6EF8               	movwf	tblptru,c
  1233  014504  EE03  F0E6         	lfsr	0,__pdataBANK3
  1234  014508  EE10 F00C          	lfsr	1,12
  1235  01450C                     copy_data0:
  1236  01450C  0009               	tblrd		*+
  1237  01450E  CFF5 FFEE          	movff	tablat,postinc0
  1238  014512  50E5               	movf	postdec1,w,c
  1239  014514  50E1               	movf	fsr1l,w,c
  1240  014516  E1FA               	bnz	copy_data0
  1241                           
  1242                           ; Initialize objects allocated to BANK0 (7 bytes)
  1243                           ; load TBLPTR registers with __pidataBANK0
  1244  014518  0E9E               	movlw	low __pidataBANK0
  1245  01451A  6EF6               	movwf	tblptrl,c
  1246  01451C  0E66               	movlw	high __pidataBANK0
  1247  01451E  6EF7               	movwf	tblptrh,c
  1248  014520  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1249  014522  6EF8               	movwf	tblptru,c
  1250  014524  EE00  F0F9         	lfsr	0,__pdataBANK0
  1251  014528  EE10 F007          	lfsr	1,7
  1252  01452C                     copy_data1:
  1253  01452C  0009               	tblrd		*+
  1254  01452E  CFF5 FFEE          	movff	tablat,postinc0
  1255  014532  50E5               	movf	postdec1,w,c
  1256  014534  50E1               	movf	fsr1l,w,c
  1257  014536  E1FA               	bnz	copy_data1
  1258                           
  1259                           ; Initialize objects allocated to COMRAM (10 bytes)
  1260                           ; load TBLPTR registers with __pidataCOMRAM
  1261  014538  0E68               	movlw	low __pidataCOMRAM
  1262  01453A  6EF6               	movwf	tblptrl,c
  1263  01453C  0E66               	movlw	high __pidataCOMRAM
  1264  01453E  6EF7               	movwf	tblptrh,c
  1265  014540  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1266  014542  6EF8               	movwf	tblptru,c
  1267  014544  EE00  F047         	lfsr	0,__pdataCOMRAM
  1268  014548  EE10 F00A          	lfsr	1,10
  1269  01454C                     copy_data2:
  1270  01454C  0009               	tblrd		*+
  1271  01454E  CFF5 FFEE          	movff	tablat,postinc0
  1272  014552  50E5               	movf	postdec1,w,c
  1273  014554  50E1               	movf	fsr1l,w,c
  1274  014556  E1FA               	bnz	copy_data2
  1275                           
  1276                           ; Clear objects allocated to BIGRAM (300 bytes)
  1277  014558  EE04  F0C8         	lfsr	0,__pbssBIGRAM
  1278  01455C  EE11 F02C          	lfsr	1,300
  1279  014560                     clear_0:
  1280  014560  6AEE               	clrf	postinc0,c
  1281  014562  50E5               	movf	postdec1,w,c
  1282  014564  50E1               	movf	fsr1l,w,c
  1283  014566  E1FC               	bnz	clear_0
  1284  014568  50E2               	movf	fsr1h,w,c
  1285  01456A  E1FA               	bnz	clear_0
  1286                           
  1287                           ; Clear objects allocated to BANK4 (200 bytes)
  1288  01456C  EE04  F000         	lfsr	0,__pbssBANK4
  1289  014570  0EC8               	movlw	200
  1290  014572                     clear_1:
  1291  014572  6AEE               	clrf	postinc0,c
  1292  014574  06E8               	decf	wreg,f,c
  1293  014576  E1FD               	bnz	clear_1
  1294                           
  1295                           ; Clear objects allocated to BANK3 (230 bytes)
  1296  014578  EE03  F000         	lfsr	0,__pbssBANK3
  1297  01457C  0EE6               	movlw	230
  1298  01457E                     clear_2:
  1299  01457E  6AEE               	clrf	postinc0,c
  1300  014580  06E8               	decf	wreg,f,c
  1301  014582  E1FD               	bnz	clear_2
  1302                           
  1303                           ; Clear objects allocated to BANK0 (64 bytes)
  1304  014584  EE00  F0B9         	lfsr	0,__pbssBANK0
  1305  014588  0E40               	movlw	64
  1306  01458A                     clear_3:
  1307  01458A  6AEE               	clrf	postinc0,c
  1308  01458C  06E8               	decf	wreg,f,c
  1309  01458E  E1FD               	bnz	clear_3
  1310                           
  1311                           ; Clear objects allocated to COMRAM (30 bytes)
  1312  014590  EE00  F029         	lfsr	0,__pbssCOMRAM
  1313  014594  0E1E               	movlw	30
  1314  014596                     clear_4:
  1315  014596  6AEE               	clrf	postinc0,c
  1316  014598  06E8               	decf	wreg,f,c
  1317  01459A  E1FD               	bnz	clear_4
  1318  01459C                     end_of_initialization:
  1319                           	opt stack 0
  1320  01459C                     __end_of__initialization:
  1321                           	opt stack 0
  1322  01459C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1323  01459E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1324  0145A0  0100               	movlb	0
  1325  0145A2  EF07  F09D         	goto	_main	;jump to C main() function
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           fsr1h	equ	0xFE2
  1334                           fsr1l	equ	0xFE1
  1335                           
  1336                           	psect	bssCOMRAM
  1337  000029                     __pbssCOMRAM:
  1338                           	opt stack 0
  1339  000029                     _COUNTER:
  1340                           	opt stack 0
  1341  000029                     	ds	2
  1342  00002B                     HMI_GRender@a:
  1343                           	opt stack 0
  1344  00002B                     	ds	2
  1345  00002D                     SPI_Send9@dat:
  1346                           	opt stack 0
  1347  00002D                     	ds	2
  1348  00002F                     _iRDropCaster:
  1349                           	opt stack 0
  1350  00002F                     	ds	1
  1351  000030                     _iRVirtualWall:
  1352                           	opt stack 0
  1353  000030                     	ds	1
  1354  000031                     _iRCliffR:
  1355                           	opt stack 0
  1356  000031                     	ds	1
  1357  000032                     _iRCliffFR:
  1358                           	opt stack 0
  1359  000032                     	ds	1
  1360  000033                     _iRCliffFL:
  1361                           	opt stack 0
  1362  000033                     	ds	1
  1363  000034                     _iRCliffL:
  1364                           	opt stack 0
  1365  000034                     	ds	1
  1366  000035                     _iRWall:
  1367                           	opt stack 0
  1368  000035                     	ds	1
  1369  000036                     _iRBumpDrop:
  1370                           	opt stack 0
  1371  000036                     	ds	1
  1372  000037                     _iRScriptIndex:
  1373                           	opt stack 0
  1374  000037                     	ds	1
  1375  000038                     _u:
  1376                           	opt stack 0
  1377  000038                     	ds	1
  1378  000039                     _j:
  1379                           	opt stack 0
  1380  000039                     	ds	1
  1381  00003A                     _i:
  1382                           	opt stack 0
  1383  00003A                     	ds	1
  1384  00003B                     rand@screw:
  1385                           	opt stack 0
  1386  00003B                     	ds	1
  1387  00003C                     _ADC_Initialised:
  1388                           	opt stack 0
  1389  00003C                     	ds	1
  1390  00003D                     OutSeg@a:
  1391                           	opt stack 0
  1392  00003D                     	ds	1
  1393  00003E                     OutSeg@segset:
  1394                           	opt stack 0
  1395  00003E                     	ds	1
  1396  00003F                     OutSeg@cur:
  1397                           	opt stack 0
  1398  00003F                     	ds	1
  1399  000040                     _I2C1T:
  1400                           	opt stack 0
  1401  000040                     	ds	7
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           postdec1	equ	0xFE5
  1409                           fsr1h	equ	0xFE2
  1410                           fsr1l	equ	0xFE1
  1411                           
  1412                           	psect	dataCOMRAM
  1413  000047                     __pdataCOMRAM:
  1414                           	opt stack 0
  1415  000047                     _gCursor:
  1416                           	opt stack 0
  1417  000047                     	ds	4
  1418  00004B                     _Bus_State:
  1419                           	opt stack 0
  1420  00004B                     	ds	1
  1421  00004C                     	ds	1
  1422  00004D                     	ds	1
  1423  00004E                     	ds	1
  1424  00004F                     _l:
  1425                           	opt stack 0
  1426  00004F                     	ds	1
  1427  000050                     _w:
  1428                           	opt stack 0
  1429  000050                     	ds	1
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec1	equ	0xFE5
  1437                           fsr1h	equ	0xFE2
  1438                           fsr1l	equ	0xFE1
  1439                           
  1440                           	psect	bssBANK0
  1441  0000B9                     __pbssBANK0:
  1442                           	opt stack 0
  1443  0000B9                     _gISR:
  1444                           	opt stack 0
  1445  0000B9                     	ds	3
  1446  0000BC                     _lQueue:
  1447                           	opt stack 0
  1448  0000BC                     	ds	3
  1449  0000BF                     _lStepFunction:
  1450                           	opt stack 0
  1451  0000BF                     	ds	3
  1452  0000C2                     _dist:
  1453                           	opt stack 0
  1454  0000C2                     	ds	2
  1455  0000C4                     _IRValue:
  1456                           	opt stack 0
  1457  0000C4                     	ds	2
  1458  0000C6                     _Stepstomin:
  1459                           	opt stack 0
  1460  0000C6                     	ds	2
  1461  0000C8                     _StepRotate:
  1462                           	opt stack 0
  1463  0000C8                     	ds	2
  1464  0000CA                     _mode:
  1465                           	opt stack 0
  1466  0000CA                     	ds	2
  1467  0000CC                     _angleTotal:
  1468                           	opt stack 0
  1469  0000CC                     	ds	2
  1470  0000CE                     _distanceTotal:
  1471                           	opt stack 0
  1472  0000CE                     	ds	2
  1473  0000D0                     _iRAngle:
  1474                           	opt stack 0
  1475  0000D0                     	ds	2
  1476  0000D2                     _iRDistance:
  1477                           	opt stack 0
  1478  0000D2                     	ds	2
  1479  0000D4                     _pShiftVal:
  1480                           	opt stack 0
  1481  0000D4                     	ds	2
  1482  0000D6                     _val:
  1483                           	opt stack 0
  1484  0000D6                     	ds	2
  1485  0000D8                     _lMotor:
  1486                           	opt stack 0
  1487  0000D8                     	ds	2
  1488  0000DA                     _lCurrent:
  1489                           	opt stack 0
  1490  0000DA                     	ds	2
  1491  0000DC                     _gBackcolour:
  1492                           	opt stack 0
  1493  0000DC                     	ds	2
  1494  0000DE                     _iRDropLeft:
  1495                           	opt stack 0
  1496  0000DE                     	ds	1
  1497  0000DF                     _iRDropRight:
  1498                           	opt stack 0
  1499  0000DF                     	ds	1
  1500  0000E0                     _iRBumpLeft:
  1501                           	opt stack 0
  1502  0000E0                     	ds	1
  1503  0000E1                     _iRBumpRight:
  1504                           	opt stack 0
  1505  0000E1                     	ds	1
  1506  0000E2                     Event_TestButton@j:
  1507                           	opt stack 0
  1508  0000E2                     	ds	1
  1509  0000E3                     Timer2_Init@PRE:
  1510                           	opt stack 0
  1511  0000E3                     	ds	1
  1512  0000E4                     Timer2_Init@INDEX:
  1513                           	opt stack 0
  1514  0000E4                     	ds	1
  1515  0000E5                     Timer0_Init@PRE:
  1516                           	opt stack 0
  1517  0000E5                     	ds	1
  1518  0000E6                     _INDEX:
  1519                           	opt stack 0
  1520  0000E6                     	ds	1
  1521  0000E7                     _lBufferY:
  1522                           	opt stack 0
  1523  0000E7                     	ds	1
  1524  0000E8                     _lBufferX:
  1525                           	opt stack 0
  1526  0000E8                     	ds	1
  1527  0000E9                     _clearall:
  1528                           	opt stack 0
  1529  0000E9                     	ds	1
  1530  0000EA                     _PortC:
  1531                           	opt stack 0
  1532  0000EA                     	ds	10
  1533  0000F4                     _ADC_AN0:
  1534                           	opt stack 0
  1535  0000F4                     	ds	5
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           
  1546                           	psect	dataBANK0
  1547  0000F9                     __pdataBANK0:
  1548                           	opt stack 0
  1549  0000F9                     _TimerX:
  1550                           	opt stack 0
  1551  0000F9                     	ds	2
  1552  0000FB                     _MinDist:
  1553                           	opt stack 0
  1554  0000FB                     	ds	2
  1555  0000FD                     _gForecolour:
  1556                           	opt stack 0
  1557  0000FD                     	ds	2
  1558  0000FF                     _change:
  1559                           	opt stack 0
  1560  0000FF                     	ds	1
  1561                           tblptru	equ	0xFF8
  1562                           tblptrh	equ	0xFF7
  1563                           tblptrl	equ	0xFF6
  1564                           tablat	equ	0xFF5
  1565                           postinc0	equ	0xFEE
  1566                           wreg	equ	0xFE8
  1567                           postdec1	equ	0xFE5
  1568                           fsr1h	equ	0xFE2
  1569                           fsr1l	equ	0xFE1
  1570                           
  1571                           	psect	bssBANK3
  1572  000300                     __pbssBANK3:
  1573                           	opt stack 0
  1574  000300                     _stepsToMinDegrees:
  1575                           	opt stack 0
  1576  000300                     	ds	4
  1577  000304                     _iRAngleSS:
  1578                           	opt stack 0
  1579  000304                     	ds	4
  1580  000308                     _iRDistanceSS:
  1581                           	opt stack 0
  1582  000308                     	ds	4
  1583  00030C                     Timer2_Init@DIV:
  1584                           	opt stack 0
  1585  00030C                     	ds	4
  1586  000310                     Timer0_Init@DIV:
  1587                           	opt stack 0
  1588  000310                     	ds	4
  1589  000314                     _I2C2_More:
  1590                           	opt stack 0
  1591  000314                     	ds	3
  1592  000317                     _I2C1_More:
  1593                           	opt stack 0
  1594  000317                     	ds	3
  1595  00031A                     _I2C2_Done:
  1596                           	opt stack 0
  1597  00031A                     	ds	3
  1598  00031D                     _I2C1_Done:
  1599                           	opt stack 0
  1600  00031D                     	ds	3
  1601  000320                     _dip:
  1602                           	opt stack 0
  1603  000320                     	ds	2
  1604  000322                     _HMIBoard:
  1605                           	opt stack 0
  1606  000322                     	ds	58
  1607  00035C                     _SPI1:
  1608                           	opt stack 0
  1609  00035C                     	ds	11
  1610  000367                     _SPI2:
  1611                           	opt stack 0
  1612  000367                     	ds	11
  1613  000372                     _DIPSwitch:
  1614                           	opt stack 0
  1615  000372                     	ds	10
  1616  00037C                     _TestButton:
  1617                           	opt stack 0
  1618  00037C                     	ds	10
  1619  000386                     _PortG:
  1620                           	opt stack 0
  1621  000386                     	ds	10
  1622  000390                     _PortE:
  1623                           	opt stack 0
  1624  000390                     	ds	10
  1625  00039A                     _PortD:
  1626                           	opt stack 0
  1627  00039A                     	ds	10
  1628  0003A4                     _PortB:
  1629                           	opt stack 0
  1630  0003A4                     	ds	10
  1631  0003AE                     _PortA:
  1632                           	opt stack 0
  1633  0003AE                     	ds	10
  1634  0003B8                     _PortF:
  1635                           	opt stack 0
  1636  0003B8                     	ds	10
  1637  0003C2                     _I2C2T:
  1638                           	opt stack 0
  1639  0003C2                     	ds	7
  1640  0003C9                     _Stepper:
  1641                           	opt stack 0
  1642  0003C9                     	ds	6
  1643  0003CF                     _ADC_AN3:
  1644                           	opt stack 0
  1645  0003CF                     	ds	5
  1646  0003D4                     _ADC_AN2:
  1647                           	opt stack 0
  1648  0003D4                     	ds	5
  1649  0003D9                     _ADC_AN1:
  1650                           	opt stack 0
  1651  0003D9                     	ds	5
  1652  0003DE                     LCD_DrawRectangle@p4:
  1653                           	opt stack 0
  1654  0003DE                     	ds	4
  1655  0003E2                     LCD_DrawRectangle@p2:
  1656                           	opt stack 0
  1657  0003E2                     	ds	4
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           postdec1	equ	0xFE5
  1665                           fsr1h	equ	0xFE2
  1666                           fsr1l	equ	0xFE1
  1667                           
  1668                           	psect	dataBANK3
  1669  0003E6                     __pdataBANK3:
  1670                           	opt stack 0
  1671  0003E6                     Console_Render@F6956:
  1672                           	opt stack 0
  1673  0003E6                     	ds	4
  1674  0003EA                     _gLineSize:
  1675                           	opt stack 0
  1676  0003EA                     	ds	4
  1677  0003EE                     _gCharSize:
  1678                           	opt stack 0
  1679  0003EE                     	ds	4
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1h	equ	0xFE2
  1688                           fsr1l	equ	0xFE1
  1689                           
  1690                           	psect	bssBANK4
  1691  000400                     __pbssBANK4:
  1692                           	opt stack 0
  1693  000400                     _lCBuffer:
  1694                           	opt stack 0
  1695  000400                     	ds	30
  1696  00041E                     _iRScriptStack:
  1697                           	opt stack 0
  1698  00041E                     	ds	100
  1699  000482                     Console_MakeField@Fill:
  1700                           	opt stack 0
  1701  000482                     	ds	70
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           postinc0	equ	0xFEE
  1707                           wreg	equ	0xFE8
  1708                           postdec1	equ	0xFE5
  1709                           fsr1h	equ	0xFE2
  1710                           fsr1l	equ	0xFE1
  1711                           
  1712                           	psect	bssBIGRAM
  1713  0004C8                     __pbssBIGRAM:
  1714                           	opt stack 0
  1715  0004C8                     _lBuffer:
  1716                           	opt stack 0
  1717  0004C8                     	ds	300
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1h	equ	0xFE2
  1726                           fsr1l	equ	0xFE1
  1727                           
  1728                           	psect	cstackBANK3
  1729  0003F2                     __pcstackBANK3:
  1730                           	opt stack 0
  1731  0003F2                     ??_mode1:
  1732  0003F2                     _mode4$15590:
  1733                           	opt stack 0
  1734                           
  1735                           ; 4 bytes @ 0x0
  1736  0003F2                     	ds	2
  1737  0003F4                     mode1@moveto:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x2
  1741  0003F4                     	ds	2
  1742  0003F6                     _mode1$15589:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x4
  1746  0003F6                     	ds	4
  1747  0003FA                     ??_main:
  1748                           
  1749                           ; 1 bytes @ 0x8
  1750  0003FA                     	ds	2
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           
  1761                           	psect	cstackBANK2
  1762  000200                     __pcstackBANK2:
  1763                           	opt stack 0
  1764  000200                     irobot_query_and_update@TXArray:
  1765                           	opt stack 0
  1766                           
  1767                           ; 256 bytes @ 0x0
  1768  000200                     	ds	256
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1h	equ	0xFE2
  1777                           fsr1l	equ	0xFE1
  1778                           
  1779                           	psect	cstackBANK1
  1780  000100                     __pcstackBANK1:
  1781                           	opt stack 0
  1782  000100                     ??___fltol:
  1783  000100                     irobot_query_and_update@RXArray:
  1784                           	opt stack 0
  1785                           
  1786                           ; 256 bytes @ 0x0
  1787  000100                     	ds	256
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           postdec1	equ	0xFE5
  1795                           fsr1h	equ	0xFE2
  1796                           fsr1l	equ	0xFE1
  1797                           
  1798                           	psect	cstackBANK0
  1799  000060                     __pcstackBANK0:
  1800                           	opt stack 0
  1801  000060                     ??_Console_ClearCursor:
  1802  000060                     ??_ADC_SetChannel:
  1803  000060                     ??_ADC_ConversionTime:
  1804  000060                     ??_ADC_SetupIO:
  1805  000060                     ??_sort_iRBumpDrop:
  1806  000060                     ?_load_iRScriptStack:
  1807                           	opt stack 0
  1808  000060                     ??_Console_Init:
  1809  000060                     ??_Console_NewLine:
  1810  000060                     ??_Console_FormFeed:
  1811  000060                     ??_HMI_SetButton:
  1812  000060                     ?_GetPortProperties:
  1813                           	opt stack 0
  1814  000060                     ?_GetPortPORT:
  1815                           	opt stack 0
  1816  000060                     ?_GetPortTRIS:
  1817                           	opt stack 0
  1818  000060                     ?_twos_complement_of:
  1819                           	opt stack 0
  1820  000060                     ?___wmul:
  1821                           	opt stack 0
  1822  000060                     ?___awdiv:
  1823                           	opt stack 0
  1824  000060                     ?___lwdiv:
  1825                           	opt stack 0
  1826  000060                     ?___lldiv:
  1827                           	opt stack 0
  1828  000060                     ?___xxtofl:
  1829                           	opt stack 0
  1830  000060                     Mode_Set@pMode:
  1831                           	opt stack 0
  1832  000060                     ToSegment@pCHR:
  1833                           	opt stack 0
  1834  000060                     HMI_SetBar@pValue:
  1835                           	opt stack 0
  1836  000060                     ADC_ClockDivision@pDivide:
  1837                           	opt stack 0
  1838  000060                     get_packet_size@packetID:
  1839                           	opt stack 0
  1840  000060                     eusart_putch@eusartSendChar:
  1841                           	opt stack 0
  1842  000060                     Port_GetPin@pInput:
  1843                           	opt stack 0
  1844  000060                     Port_GetQuad@pInput:
  1845                           	opt stack 0
  1846  000060                     SPI_DisableISR@pInput:
  1847                           	opt stack 0
  1848  000060                     SPI_DCS@pInput:
  1849                           	opt stack 0
  1850  000060                     SPI_Send@pInput:
  1851                           	opt stack 0
  1852  000060                     Byte_SetBit@pInput:
  1853                           	opt stack 0
  1854  000060                     Byte_GetBit@pInput:
  1855                           	opt stack 0
  1856  000060                     Byte_SetZone@pInput:
  1857                           	opt stack 0
  1858  000060                     Byte_GetZone@pInput:
  1859                           	opt stack 0
  1860  000060                     Byte_SetByte@pInput:
  1861                           	opt stack 0
  1862  000060                     delay_ms@ms:
  1863                           	opt stack 0
  1864  000060                     delay_us@us:
  1865                           	opt stack 0
  1866  000060                     reverse@input:
  1867                           	opt stack 0
  1868  000060                     twos_complement_of@complementValue:
  1869                           	opt stack 0
  1870  000060                     ___wmul@multiplier:
  1871                           	opt stack 0
  1872  000060                     ___awdiv@dividend:
  1873                           	opt stack 0
  1874  000060                     ___lwdiv@dividend:
  1875                           	opt stack 0
  1876  000060                     MXK_Queue@pCallback:
  1877                           	opt stack 0
  1878  000060                     Timer0_Start@pFunction:
  1879                           	opt stack 0
  1880  000060                     ___lldiv@dividend:
  1881                           	opt stack 0
  1882  000060                     ___xxtofl@val:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x0
  1886  000060                     	ds	1
  1887  000061                     ADC_SetChannel@pChannel:
  1888                           	opt stack 0
  1889  000061                     ADC_ClockDivision@reg:
  1890                           	opt stack 0
  1891  000061                     ADC_ConversionTime@pCount:
  1892                           	opt stack 0
  1893  000061                     rx_assign@packetIDValue:
  1894                           	opt stack 0
  1895  000061                     irobot_song_play@songNumber:
  1896                           	opt stack 0
  1897  000061                     HMI_SetSegments@pString:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x1
  1901  000061                     	ds	1
  1902  000062                     GetPortProperties@pInput:
  1903                           	opt stack 0
  1904  000062                     GetPortPORT@pInput:
  1905                           	opt stack 0
  1906  000062                     GetPortTRIS@pInput:
  1907                           	opt stack 0
  1908  000062                     Port_GetPin@pPin:
  1909                           	opt stack 0
  1910  000062                     Port_GetQuad@pQuad:
  1911                           	opt stack 0
  1912  000062                     SPI_Send@pData:
  1913                           	opt stack 0
  1914  000062                     Byte_SetBit@pBit:
  1915                           	opt stack 0
  1916  000062                     Byte_GetBit@pBit:
  1917                           	opt stack 0
  1918  000062                     Byte_SetZone@pMax:
  1919                           	opt stack 0
  1920  000062                     Byte_GetZone@pMax:
  1921                           	opt stack 0
  1922  000062                     Byte_SetByte@pValue:
  1923                           	opt stack 0
  1924  000062                     Console_Init@x:
  1925                           	opt stack 0
  1926  000062                     Console_FormFeed@x:
  1927                           	opt stack 0
  1928  000062                     ADC_SetupIO@pChannel:
  1929                           	opt stack 0
  1930  000062                     ADC_ClockDivision@unfound:
  1931                           	opt stack 0
  1932  000062                     rx_assign@byteNumber:
  1933                           	opt stack 0
  1934  000062                     reverse@length:
  1935                           	opt stack 0
  1936  000062                     ADC_Start@pInput:
  1937                           	opt stack 0
  1938  000062                     ___wmul@multiplicand:
  1939                           	opt stack 0
  1940  000062                     ___awdiv@divisor:
  1941                           	opt stack 0
  1942  000062                     ___lwdiv@divisor:
  1943                           	opt stack 0
  1944  000062                     delay_ms@u:
  1945                           	opt stack 0
  1946  000062                     delay_us@u:
  1947                           	opt stack 0
  1948  000062                     HMI_SetButton@reindex:
  1949                           	opt stack 0
  1950                           
  1951                           ; 4 bytes @ 0x2
  1952  000062                     	ds	1
  1953  000063                     ??_Port_GetPin:
  1954  000063                     ??_Port_GetQuad:
  1955  000063                     ??_Byte_GetBit:
  1956  000063                     ??_rx_assign:
  1957  000063                     LCD_Write@mode:
  1958                           	opt stack 0
  1959  000063                     Byte_SetBit@pValue:
  1960                           	opt stack 0
  1961  000063                     Byte_SetZone@pChunk:
  1962                           	opt stack 0
  1963  000063                     Byte_GetZone@pChunk:
  1964                           	opt stack 0
  1965  000063                     Console_Init@y:
  1966                           	opt stack 0
  1967  000063                     Console_FormFeed@y:
  1968                           	opt stack 0
  1969  000063                     OutSeg@pSegment:
  1970                           	opt stack 0
  1971  000063                     ADC_SetupIO@MASK:
  1972                           	opt stack 0
  1973  000063                     Motor_Move@pMotor:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x3
  1977  000063                     	ds	1
  1978  000064                     ??_Byte_SetBit:
  1979  000064                     ??_Console_IncrementCursor:
  1980  000064                     ??_OutSeg:
  1981  000064                     ??_ADC_Start:
  1982  000064                     ??___xxtofl:
  1983  000064                     LCD_Write@value:
  1984                           	opt stack 0
  1985  000064                     Byte_GetBit@Output:
  1986                           	opt stack 0
  1987  000064                     Byte_SetZone@pChunkSize:
  1988                           	opt stack 0
  1989  000064                     Byte_GetZone@pChunkSize:
  1990                           	opt stack 0
  1991  000064                     reverse@tempVar:
  1992                           	opt stack 0
  1993  000064                     ___awdiv@counter:
  1994                           	opt stack 0
  1995  000064                     ___lwdiv@counter:
  1996                           	opt stack 0
  1997  000064                     HMI_SetSegments@in:
  1998                           	opt stack 0
  1999  000064                     ADC_Init@pInput:
  2000                           	opt stack 0
  2001  000064                     ___wmul@product:
  2002                           	opt stack 0
  2003  000064                     ___lldiv@divisor:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0x4
  2007  000064                     	ds	1
  2008  000065                     ??_Byte_GetZone:
  2009  000065                     ?_Console_MakeField:
  2010                           	opt stack 0
  2011  000065                     Set_Addr_Window@ys:
  2012                           	opt stack 0
  2013  000065                     Set_Rotation@m:
  2014                           	opt stack 0
  2015  000065                     Port_GetPin@Output:
  2016                           	opt stack 0
  2017  000065                     Port_GetQuad@Output:
  2018                           	opt stack 0
  2019  000065                     Byte_SetZone@pValue:
  2020                           	opt stack 0
  2021  000065                     rx_assign@packetID:
  2022                           	opt stack 0
  2023  000065                     ___awdiv@sign:
  2024                           	opt stack 0
  2025  000065                     LCD_Word_Write@value:
  2026                           	opt stack 0
  2027  000065                     reverse@iterator:
  2028                           	opt stack 0
  2029  000065                     Motor_Move@pDelta:
  2030                           	opt stack 0
  2031  000065                     ___lwdiv@quotient:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x5
  2035  000065                     	ds	1
  2036  000066                     ?_irobot_query_and_update:
  2037                           	opt stack 0
  2038  000066                     ??_Byte_SetZone:
  2039  000066                     Set_Addr_Window@xe:
  2040                           	opt stack 0
  2041  000066                     Set_Rotation@rotation:
  2042                           	opt stack 0
  2043  000066                     Byte_GetZone@MASK:
  2044                           	opt stack 0
  2045  000066                     OutSeg@pInput:
  2046                           	opt stack 0
  2047  000066                     HMI_SetButton@pValue:
  2048                           	opt stack 0
  2049  000066                     ADC_Init@pChannel:
  2050                           	opt stack 0
  2051  000066                     MXK_BlockSwitchTo@CUR:
  2052                           	opt stack 0
  2053  000066                     MXK_SwitchTo@CUR:
  2054                           	opt stack 0
  2055  000066                     ___awdiv@quotient:
  2056                           	opt stack 0
  2057                           
  2058                           ; 2 bytes @ 0x6
  2059  000066                     	ds	1
  2060  000067                     ??_Console_MakeField:
  2061  000067                     ?___lwmod:
  2062                           	opt stack 0
  2063  000067                     Set_Addr_Window@ye:
  2064                           	opt stack 0
  2065  000067                     Byte_GetZone@Offset:
  2066                           	opt stack 0
  2067  000067                     OutSeg@out:
  2068                           	opt stack 0
  2069  000067                     HMI_SetButton@v:
  2070                           	opt stack 0
  2071  000067                     MXK_BlockSwitchTo@pModule:
  2072                           	opt stack 0
  2073  000067                     MXK_SwitchTo@pModule:
  2074                           	opt stack 0
  2075  000067                     ___lwmod@dividend:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x7
  2079  000067                     	ds	1
  2080  000068                     ??_Console_Tab:
  2081  000068                     Set_Addr_Window@xs:
  2082                           	opt stack 0
  2083  000068                     Byte_GetZone@Output:
  2084                           	opt stack 0
  2085  000068                     ___xxtofl@sign:
  2086                           	opt stack 0
  2087  000068                     HMI_Render@a:
  2088                           	opt stack 0
  2089  000068                     ___lldiv@quotient:
  2090                           	opt stack 0
  2091                           
  2092                           ; 4 bytes @ 0x8
  2093  000068                     	ds	1
  2094  000069                     Byte_SetZone@Offset:
  2095                           	opt stack 0
  2096  000069                     ___xxtofl@exp:
  2097                           	opt stack 0
  2098  000069                     LCD_Fill@pColour:
  2099                           	opt stack 0
  2100  000069                     LCD_FillRectangle@pColour:
  2101                           	opt stack 0
  2102  000069                     Byte_GetPair@pInput:
  2103                           	opt stack 0
  2104  000069                     Console_MakeField@Index:
  2105                           	opt stack 0
  2106  000069                     ___lwmod@divisor:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x9
  2110  000069                     	ds	1
  2111  00006A                     ??_load_iRScriptStack:
  2112  00006A                     Byte_SetZone@MASK:
  2113                           	opt stack 0
  2114  00006A                     ___xxtofl@arg:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0xA
  2118  00006A                     	ds	1
  2119  00006B                     LCD_Fill@i:
  2120                           	opt stack 0
  2121  00006B                     Byte_GetPair@pPair:
  2122                           	opt stack 0
  2123  00006B                     Console_MakeField@pInput:
  2124                           	opt stack 0
  2125  00006B                     ___lwmod@counter:
  2126                           	opt stack 0
  2127  00006B                     Byte_SetPair@pInput:
  2128                           	opt stack 0
  2129  00006B                     Byte_SetQuad@pInput:
  2130                           	opt stack 0
  2131  00006B                     LCD_FillRectangle@pPoint:
  2132                           	opt stack 0
  2133                           
  2134                           ; 4 bytes @ 0xB
  2135  00006B                     	ds	1
  2136  00006C                     LCD_Fill@j:
  2137                           	opt stack 0
  2138  00006C                     ___lldiv@counter:
  2139                           	opt stack 0
  2140  00006C                     Word_GetPair@pInput:
  2141                           	opt stack 0
  2142  00006C                     itos@input:
  2143                           	opt stack 0
  2144  00006C                     Console_MakeField@Column:
  2145                           	opt stack 0
  2146  00006C                     load_iRScriptStack@loadByte:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0xC
  2150  00006C                     	ds	1
  2151  00006D                     Byte_SetPair@pPair:
  2152                           	opt stack 0
  2153  00006D                     Byte_SetQuad@pQuad:
  2154                           	opt stack 0
  2155  00006D                     Console_Tab@t:
  2156                           	opt stack 0
  2157  00006D                     Timer0_Init@pFrequency:
  2158                           	opt stack 0
  2159  00006D                     Timer2_Init@pFrequency:
  2160                           	opt stack 0
  2161                           
  2162                           ; 4 bytes @ 0xD
  2163  00006D                     	ds	1
  2164  00006E                     ?___fldiv:
  2165                           	opt stack 0
  2166  00006E                     Byte_SetPair@pValue:
  2167                           	opt stack 0
  2168  00006E                     Byte_SetQuad@pValue:
  2169                           	opt stack 0
  2170  00006E                     Word_GetPair@pPair:
  2171                           	opt stack 0
  2172  00006E                     Console_Tab@i:
  2173                           	opt stack 0
  2174  00006E                     load_iRScriptStack@bytesToLoad:
  2175                           	opt stack 0
  2176  00006E                     itos@destination:
  2177                           	opt stack 0
  2178  00006E                     _Console_MakeField$10974:
  2179                           	opt stack 0
  2180  00006E                     ___fldiv@b:
  2181                           	opt stack 0
  2182                           
  2183                           ; 4 bytes @ 0xE
  2184  00006E                     	ds	1
  2185  00006F                     Console_Tab@c:
  2186                           	opt stack 0
  2187  00006F                     load_iRScriptStack@i:
  2188                           	opt stack 0
  2189  00006F                     Port_SetPin@pInput:
  2190                           	opt stack 0
  2191  00006F                     Port_Set@pInput:
  2192                           	opt stack 0
  2193  00006F                     SPI_MinSpeed@pInput:
  2194                           	opt stack 0
  2195  00006F                     SPI_MaxSpeed@pInput:
  2196                           	opt stack 0
  2197  00006F                     Word_SetPair@pInput:
  2198                           	opt stack 0
  2199  00006F                     PortProperty_Valid@pInput:
  2200                           	opt stack 0
  2201  00006F                     LCD_FillRectangle@pSize:
  2202                           	opt stack 0
  2203                           
  2204                           ; 4 bytes @ 0xF
  2205  00006F                     	ds	1
  2206  000070                     ??_irobot_query_and_update:
  2207  000070                     ??_Console_PrintChar:
  2208  000070                     Console_MakeField@x:
  2209                           	opt stack 0
  2210  000070                     irobot_leds@LEDBit:
  2211                           	opt stack 0
  2212  000070                     itos@Data:
  2213                           	opt stack 0
  2214  000070                     irobot_move@moveSpeed:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x10
  2218  000070                     	ds	1
  2219  000071                     ??_Timer2_Init:
  2220  000071                     ??_Timer0_Init:
  2221  000071                     Port_SetPin@pPin:
  2222                           	opt stack 0
  2223  000071                     Port_Set@pValue:
  2224                           	opt stack 0
  2225  000071                     Word_SetPair@pPair:
  2226                           	opt stack 0
  2227  000071                     PortProperty_Valid@pPinDrive:
  2228                           	opt stack 0
  2229  000071                     Console_MakeField@y:
  2230                           	opt stack 0
  2231  000071                     irobot_leds@powerColour:
  2232                           	opt stack 0
  2233                           
  2234                           ; 1 bytes @ 0x11
  2235  000071                     	ds	1
  2236  000072                     ??_Port_Set:
  2237  000072                     Port_SetPin@pValue:
  2238                           	opt stack 0
  2239  000072                     Word_SetPair@pValue:
  2240                           	opt stack 0
  2241  000072                     PortProperty_Valid@pPin:
  2242                           	opt stack 0
  2243  000072                     irobot_leds@powerLuminosity:
  2244                           	opt stack 0
  2245  000072                     LCD_DrawField@pField:
  2246                           	opt stack 0
  2247  000072                     itos@Length:
  2248                           	opt stack 0
  2249  000072                     irobot_move@moveTurnRadius:
  2250                           	opt stack 0
  2251  000072                     Timer2_Init@RDIV:
  2252                           	opt stack 0
  2253  000072                     ___fldiv@a:
  2254                           	opt stack 0
  2255                           
  2256                           ; 4 bytes @ 0x12
  2257  000072                     	ds	1
  2258  000073                     ??_PortProperty_Valid:
  2259  000073                     ??_LCD_FillRectangle:
  2260  000073                     Port_SetPin@Type:
  2261                           	opt stack 0
  2262  000073                     Console_PrintChar@pInput:
  2263                           	opt stack 0
  2264  000073                     irobot_leds@isScript:
  2265                           	opt stack 0
  2266  000073                     Timer0_Init@pCPUClock:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x13
  2270  000073                     	ds	1
  2271  000074                     ??_irobot_move:
  2272  000074                     LED_Set@pValue:
  2273                           	opt stack 0
  2274  000074                     putch@c:
  2275                           	opt stack 0
  2276  000074                     irobot_led_power_on@powerOnColour:
  2277                           	opt stack 0
  2278  000074                     Port_TogglePin@pInput:
  2279                           	opt stack 0
  2280  000074                     itos@Out:
  2281                           	opt stack 0
  2282  000074                     LCD_DrawField@pPoint:
  2283                           	opt stack 0
  2284                           
  2285                           ; 4 bytes @ 0x14
  2286  000074                     	ds	1
  2287  000075                     ?_printf:
  2288                           	opt stack 0
  2289  000075                     LCD_FillRectangle@i:
  2290                           	opt stack 0
  2291  000075                     LED_Set@pLED:
  2292                           	opt stack 0
  2293  000075                     irobot_query_and_update@packetIDs:
  2294                           	opt stack 0
  2295  000075                     printf@f:
  2296                           	opt stack 0
  2297  000075                     PortProperty_Valid@Errors:
  2298                           	opt stack 0
  2299                           
  2300                           ; 16 bytes @ 0x15
  2301  000075                     	ds	1
  2302  000076                     ??___fldiv:
  2303  000076                     LCD_FillRectangle@j:
  2304                           	opt stack 0
  2305  000076                     Port_TogglePin@pPin:
  2306                           	opt stack 0
  2307  000076                     HMI_SetNumber@pInput:
  2308                           	opt stack 0
  2309  000076                     Timer2_Init@pCPUClock:
  2310                           	opt stack 0
  2311                           
  2312                           ; 4 bytes @ 0x16
  2313  000076                     	ds	1
  2314  000077                     Port_TogglePin@Value:
  2315                           	opt stack 0
  2316  000077                     irobot_query_and_update@streamSize:
  2317                           	opt stack 0
  2318  000077                     Timer0_Init@DIVIDE:
  2319                           	opt stack 0
  2320                           
  2321                           ; 4 bytes @ 0x17
  2322  000077                     	ds	1
  2323  000078                     LED_Toggle@pLED:
  2324                           	opt stack 0
  2325  000078                     irobot_query_and_update@numberOfPacketRequests:
  2326                           	opt stack 0
  2327  000078                     irobot_move@isScript:
  2328                           	opt stack 0
  2329  000078                     LCD_DrawField@pSize:
  2330                           	opt stack 0
  2331                           
  2332                           ; 4 bytes @ 0x18
  2333  000078                     	ds	1
  2334  000079                     Event_DIPSwitch@pState:
  2335                           	opt stack 0
  2336  000079                     Event_TestButton@pState:
  2337                           	opt stack 0
  2338  000079                     irobot_query_and_update@packetVariable:
  2339                           	opt stack 0
  2340  000079                     irobot_stop_motion@isScript:
  2341                           	opt stack 0
  2342  000079                     irobot_move_straight@straightSpeed:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x19
  2346  000079                     	ds	1
  2347  00007A                     Event_DIPSwitch@Bar:
  2348                           	opt stack 0
  2349  00007A                     irobot_query_and_update@j:
  2350                           	opt stack 0
  2351  00007A                     ___fldiv@sign:
  2352                           	opt stack 0
  2353  00007A                     Timer2_Init@DIVIDE:
  2354                           	opt stack 0
  2355                           
  2356                           ; 4 bytes @ 0x1A
  2357  00007A                     	ds	1
  2358  00007B                     irobot_query_and_update@startIndex:
  2359                           	opt stack 0
  2360  00007B                     Button_Poll@pButton:
  2361                           	opt stack 0
  2362  00007B                     Motor_Speed@pMotor:
  2363                           	opt stack 0
  2364  00007B                     ___fldiv@rem:
  2365                           	opt stack 0
  2366                           
  2367                           ; 4 bytes @ 0x1B
  2368  00007B                     	ds	1
  2369  00007C                     ??_LCD_DrawField:
  2370  00007C                     irobot_query_and_update@i:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x1C
  2374  00007C                     	ds	1
  2375  00007D                     Button_Poll@pIncrement:
  2376                           	opt stack 0
  2377  00007D                     Motor_Speed@pFrequency:
  2378                           	opt stack 0
  2379  00007D                     irobot_rotate@rotateAngle:
  2380                           	opt stack 0
  2381                           
  2382                           ; 2 bytes @ 0x1D
  2383  00007D                     	ds	1
  2384  00007E                     ??_Button_Poll:
  2385  00007E                     LCD_DrawField@count:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x1E
  2389  00007E                     	ds	1
  2390  00007F                     ??_printf:
  2391  00007F                     irobot_rotate@rotateSpeed:
  2392                           	opt stack 0
  2393  00007F                     ___fldiv@new_exp:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x1F
  2397  00007F                     	ds	1
  2398  000080                     LCD_DrawField@xmax:
  2399                           	opt stack 0
  2400  000080                     printf@prec:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x20
  2404  000080                     	ds	1
  2405  000081                     ??_irobot_rotate:
  2406  000081                     LCD_DrawField@ymax:
  2407                           	opt stack 0
  2408  000081                     printf@flag:
  2409                           	opt stack 0
  2410  000081                     ___fldiv@grs:
  2411                           	opt stack 0
  2412                           
  2413                           ; 4 bytes @ 0x21
  2414  000081                     	ds	1
  2415  000082                     LCD_DrawField@i:
  2416                           	opt stack 0
  2417  000082                     irobot_rotate@isScript:
  2418                           	opt stack 0
  2419  000082                     Port_Set@TypeRequired:
  2420                           	opt stack 0
  2421  000082                     printf@ap:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x22
  2425  000082                     	ds	1
  2426  000083                     ??_Console_Render:
  2427  000083                     Button_Poll@Pin:
  2428                           	opt stack 0
  2429  000083                     irobot_rotate@angleTotal:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x23
  2433  000083                     	ds	1
  2434  000084                     Port_Set@TypeActual:
  2435                           	opt stack 0
  2436  000084                     printf@val:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x24
  2440  000084                     	ds	1
  2441  000085                     PortProperty_Valid@Pair:
  2442                           	opt stack 0
  2443  000085                     Console_Render@temp:
  2444                           	opt stack 0
  2445  000085                     ___fldiv@bexp:
  2446                           	opt stack 0
  2447  000085                     irobot_rotate@rotateDirection:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x25
  2451  000085                     	ds	1
  2452  000086                     Port_Set@Type:
  2453                           	opt stack 0
  2454  000086                     printf@c:
  2455                           	opt stack 0
  2456  000086                     ___fldiv@aexp:
  2457                           	opt stack 0
  2458  000086                     Port_CheckPairType@pInput:
  2459                           	opt stack 0
  2460  000086                     Port_SetPinType@pInput:
  2461                           	opt stack 0
  2462  000086                     Console_Render@lCursor:
  2463                           	opt stack 0
  2464                           
  2465                           ; 4 bytes @ 0x26
  2466  000086                     	ds	1
  2467  000087                     ?___flmul:
  2468                           	opt stack 0
  2469  000087                     ___flmul@b:
  2470                           	opt stack 0
  2471                           
  2472                           ; 4 bytes @ 0x27
  2473  000087                     	ds	1
  2474  000088                     Port_CheckPairType@pPair:
  2475                           	opt stack 0
  2476  000088                     Port_SetPinType@pPin:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x28
  2480  000088                     	ds	1
  2481  000089                     Port_CheckPairType@pDrive:
  2482                           	opt stack 0
  2483  000089                     Port_SetPinType@pType:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0x29
  2487  000089                     	ds	1
  2488  00008A                     Port_CheckPairType@Pin1:
  2489                           	opt stack 0
  2490  00008A                     Port_SetPinType@Output:
  2491                           	opt stack 0
  2492  00008A                     Console_Render@x:
  2493                           	opt stack 0
  2494                           
  2495                           ; 1 bytes @ 0x2A
  2496  00008A                     	ds	1
  2497  00008B                     Port_CheckPairType@Pin2:
  2498                           	opt stack 0
  2499  00008B                     Console_Render@y:
  2500                           	opt stack 0
  2501  00008B                     Port_SetPinType@Props:
  2502                           	opt stack 0
  2503  00008B                     ___flmul@a:
  2504                           	opt stack 0
  2505                           
  2506                           ; 4 bytes @ 0x2B
  2507  00008B                     	ds	1
  2508  00008C                     Port_CheckPairType@Output:
  2509                           	opt stack 0
  2510  00008C                     mode2@dist:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x2C
  2514  00008C                     	ds	1
  2515  00008D                     LED_Init@pLED:
  2516                           	opt stack 0
  2517  00008D                     Port_CheckPairType@Props:
  2518                           	opt stack 0
  2519  00008D                     Motor_Init@pMotor:
  2520                           	opt stack 0
  2521  00008D                     SPI_Init@pClock:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0x2D
  2525  00008D                     	ds	2
  2526  00008F                     ??___flmul:
  2527  00008F                     Port_CheckQuadType@pInput:
  2528                           	opt stack 0
  2529  00008F                     Motor_Init@pAddress:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x2F
  2533  00008F                     	ds	2
  2534  000091                     Port_CheckQuadType@pQuad:
  2535                           	opt stack 0
  2536  000091                     SPI_Init@pChannel:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x31
  2540  000091                     	ds	1
  2541  000092                     Port_CheckQuadType@pDrive:
  2542                           	opt stack 0
  2543  000092                     SPI_Init@pMode:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x32
  2547  000092                     	ds	1
  2548  000093                     Port_CheckQuadType@Pair1:
  2549                           	opt stack 0
  2550  000093                     ___flmul@sign:
  2551                           	opt stack 0
  2552  000093                     SPI_Init@pInput:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x33
  2556  000093                     	ds	1
  2557  000094                     Port_CheckQuadType@Pair2:
  2558                           	opt stack 0
  2559  000094                     ___flmul@aexp:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0x34
  2563  000094                     	ds	1
  2564  000095                     ??_LCD_Init:
  2565  000095                     Port_CheckQuadType@Output:
  2566                           	opt stack 0
  2567  000095                     ___flmul@grs:
  2568                           	opt stack 0
  2569                           
  2570                           ; 4 bytes @ 0x35
  2571  000095                     	ds	1
  2572  000096                     Port_CheckPortType@pInput:
  2573                           	opt stack 0
  2574  000096                     Port_SetQuadType@pInput:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x36
  2578  000096                     	ds	1
  2579  000097                     LCD_Init@i:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x37
  2583  000097                     	ds	1
  2584  000098                     Port_CheckPortType@pDrive:
  2585                           	opt stack 0
  2586  000098                     Port_SetQuadType@pQuad:
  2587                           	opt stack 0
  2588                           
  2589                           ; 1 bytes @ 0x38
  2590  000098                     	ds	1
  2591  000099                     Port_CheckPortType@Output:
  2592                           	opt stack 0
  2593  000099                     Port_SetQuadType@pType:
  2594                           	opt stack 0
  2595  000099                     ___flmul@bexp:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x39
  2599  000099                     	ds	1
  2600  00009A                     Port_SetQuadType@Output:
  2601                           	opt stack 0
  2602  00009A                     Port_SetType@pInput:
  2603                           	opt stack 0
  2604  00009A                     ___flmul@prod:
  2605                           	opt stack 0
  2606                           
  2607                           ; 4 bytes @ 0x3A
  2608  00009A                     	ds	1
  2609  00009B                     Button_Init@pInput:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x3B
  2613  00009B                     	ds	1
  2614  00009C                     Port_SetType@pType:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x3C
  2618  00009C                     	ds	1
  2619  00009D                     ??_Port_SetType:
  2620  00009D                     Button_Init@pThreshold:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x3D
  2624  00009D                     	ds	1
  2625  00009E                     ___flmul@temp:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x3E
  2629  00009E                     	ds	1
  2630  00009F                     Port_SetType@Output:
  2631                           	opt stack 0
  2632  00009F                     Button_Init@pInitIO:
  2633                           	opt stack 0
  2634                           
  2635                           ; 3 bytes @ 0x3F
  2636  00009F                     	ds	1
  2637  0000A0                     ?_ADC_Voltage:
  2638                           	opt stack 0
  2639  0000A0                     Port_Init@pInput:
  2640                           	opt stack 0
  2641  0000A0                     ADC_Voltage@pInput:
  2642                           	opt stack 0
  2643                           
  2644                           ; 2 bytes @ 0x40
  2645  0000A0                     	ds	2
  2646  0000A2                     Port_Init@pPort:
  2647                           	opt stack 0
  2648  0000A2                     Button_Init@pGetState:
  2649                           	opt stack 0
  2650                           
  2651                           ; 3 bytes @ 0x42
  2652  0000A2                     	ds	1
  2653  0000A3                     ??_Port_Init:
  2654                           
  2655                           ; 1 bytes @ 0x43
  2656  0000A3                     	ds	1
  2657  0000A4                     ??_ADC_Voltage:
  2658                           
  2659                           ; 1 bytes @ 0x44
  2660  0000A4                     	ds	1
  2661  0000A5                     Port_Init@i:
  2662                           	opt stack 0
  2663  0000A5                     Button_Init@pFunction:
  2664                           	opt stack 0
  2665                           
  2666                           ; 3 bytes @ 0x45
  2667  0000A5                     	ds	1
  2668  0000A6                     ADC_Voltage@max:
  2669                           	opt stack 0
  2670                           
  2671                           ; 4 bytes @ 0x46
  2672  0000A6                     	ds	2
  2673  0000A8                     HMI_Init@in:
  2674                           	opt stack 0
  2675                           
  2676                           ; 2 bytes @ 0x48
  2677  0000A8                     	ds	2
  2678  0000AA                     ADC_Voltage@ref:
  2679                           	opt stack 0
  2680                           
  2681                           ; 4 bytes @ 0x4A
  2682  0000AA                     	ds	4
  2683  0000AE                     ADC_Voltage@output:
  2684                           	opt stack 0
  2685                           
  2686                           ; 4 bytes @ 0x4E
  2687  0000AE                     	ds	4
  2688  0000B2                     ?___fltol:
  2689                           	opt stack 0
  2690  0000B2                     ___fltol@f1:
  2691                           	opt stack 0
  2692                           
  2693                           ; 4 bytes @ 0x52
  2694  0000B2                     	ds	4
  2695  0000B6                     ___fltol@sign1:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x56
  2699  0000B6                     	ds	1
  2700  0000B7                     ___fltol@exp1:
  2701                           	opt stack 0
  2702                           
  2703                           ; 1 bytes @ 0x57
  2704  0000B7                     	ds	1
  2705  0000B8                     ??_mode4:
  2706                           
  2707                           ; 1 bytes @ 0x58
  2708  0000B8                     	ds	1
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           postinc0	equ	0xFEE
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           fsr1h	equ	0xFE2
  2717                           fsr1l	equ	0xFE1
  2718                           
  2719                           	psect	cstackCOMRAM
  2720  000001                     __pcstackCOMRAM:
  2721                           	opt stack 0
  2722  000001                     i2Byte_SetBit@pInput:
  2723                           	opt stack 0
  2724  000001                     i2Byte_GetZone@pInput:
  2725                           	opt stack 0
  2726  000001                     i2delay_us@us:
  2727                           	opt stack 0
  2728  000001                     i2MXK_Queue@pCallback:
  2729                           	opt stack 0
  2730                           
  2731                           ; 3 bytes @ 0x0
  2732  000001                     	ds	2
  2733  000003                     i2Byte_SetBit@pBit:
  2734                           	opt stack 0
  2735  000003                     i2Byte_GetZone@pMax:
  2736                           	opt stack 0
  2737  000003                     i2delay_us@u:
  2738                           	opt stack 0
  2739                           
  2740                           ; 4 bytes @ 0x2
  2741  000003                     	ds	1
  2742  000004                     i2Byte_SetBit@pValue:
  2743                           	opt stack 0
  2744  000004                     i2Byte_GetZone@pChunk:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0x3
  2748  000004                     	ds	1
  2749  000005                     ??i2_Byte_SetBit:
  2750  000005                     i2Byte_GetZone@pChunkSize:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x4
  2754  000005                     	ds	1
  2755  000006                     ??i2_Byte_GetZone:
  2756                           
  2757                           ; 1 bytes @ 0x5
  2758  000006                     	ds	1
  2759  000007                     i2Byte_GetZone@MASK:
  2760                           	opt stack 0
  2761  000007                     i2MXK_SwitchTo@CUR:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x6
  2765  000007                     	ds	1
  2766  000008                     i2Byte_GetZone@Offset:
  2767                           	opt stack 0
  2768  000008                     i2MXK_SwitchTo@pModule:
  2769                           	opt stack 0
  2770                           
  2771                           ; 1 bytes @ 0x7
  2772  000008                     	ds	1
  2773  000009                     i2Byte_GetZone@Output:
  2774                           	opt stack 0
  2775                           
  2776                           ; 1 bytes @ 0x8
  2777  000009                     	ds	1
  2778  00000A                     i2Byte_GetPair@pInput:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x9
  2782  00000A                     	ds	2
  2783  00000C                     i2Byte_GetPair@pPair:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0xB
  2787  00000C                     	ds	1
  2788  00000D                     i2Word_GetPair@pInput:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0xC
  2792  00000D                     	ds	2
  2793  00000F                     i2Word_GetPair@pPair:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0xE
  2797  00000F                     	ds	1
  2798  000010                     i2Port_SetPin@pInput:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0xF
  2802  000010                     	ds	2
  2803  000012                     i2Port_SetPin@pPin:
  2804                           	opt stack 0
  2805                           
  2806                           ; 1 bytes @ 0x11
  2807  000012                     	ds	1
  2808  000013                     i2Port_SetPin@pValue:
  2809                           	opt stack 0
  2810                           
  2811                           ; 1 bytes @ 0x12
  2812  000013                     	ds	1
  2813  000014                     i2Port_SetPin@Type:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x13
  2817  000014                     	ds	1
  2818  000015                     
  2819                           ; 1 bytes @ 0x14
  2820  000015                     	ds	2
  2821  000017                     ??_ISR_Function:
  2822                           
  2823                           ; 1 bytes @ 0x16
  2824  000017                     	ds	18
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1h	equ	0xFE2
  2833                           fsr1l	equ	0xFE1
  2834                           
  2835 ;;
  2836 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2837 ;;
  2838 ;; *************** function _main *****************
  2839 ;; Defined at:
  2840 ;;		line 345 in file "main.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        2 bytes
  2859 ;; Hardware stack levels required when called:   18
  2860 ;; This function calls:
  2861 ;;		_Console_Render
  2862 ;;		_HMI_Poll
  2863 ;;		_MXK_Dequeue
  2864 ;;		_MXK_Release
  2865 ;;		_MXK_SwitchTo
  2866 ;;		_getMode
  2867 ;;		_init
  2868 ;;		_mode1
  2869 ;;		_mode2
  2870 ;;		_mode3
  2871 ;;		_mode4
  2872 ;;		_printf
  2873 ;; This function is called by:
  2874 ;;		Startup code after reset
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text0
  2879  013A0E                     __ptext0:
  2880                           	opt stack 0
  2881  013A0E                     _main:
  2882                           	opt stack 13
  2883                           
  2884                           ;main.c: 347: init();
  2885                           
  2886                           ;incstack = 0
  2887  013A0E  ECD2  F0A3         	call	_init	;wreg free
  2888  013A12                     l2399:
  2889                           
  2890                           ;main.c: 350: getMode();
  2891  013A12  EC4F  F0A0         	call	_getMode	;wreg free
  2892                           
  2893                           ;main.c: 351: switch (mode) {
  2894  013A16  D053               	goto	l2400
  2895  013A18                     
  2896                           ;main.c: 353: mode1();
  2897  013A18  EC7A  F086         	call	_mode1	;wreg free
  2898                           
  2899                           ;main.c: 354: break;
  2900  013A1C  D7FA               	goto	l2399
  2901  013A1E                     
  2902                           ;main.c: 356: mode2();
  2903  013A1E  EC59  F09A         	call	_mode2	;wreg free
  2904                           
  2905                           ;main.c: 357: break;
  2906  013A22  D7F7               	goto	l2399
  2907  013A24                     
  2908                           ;main.c: 359: mode3();
  2909  013A24  ECCE  F0B2         	call	_mode3	;wreg free
  2910                           
  2911                           ;main.c: 360: break;
  2912  013A28  D7F4               	goto	l2399
  2913  013A2A                     
  2914                           ;main.c: 362: mode4();
  2915  013A2A  EC53  F082         	call	_mode4	;wreg free
  2916                           
  2917                           ;main.c: 363: break;
  2918  013A2E  D7F1               	goto	l2399
  2919  013A30                     
  2920                           ;main.c: 365: if (MXK_SwitchTo(eMXK_HMI)) {
  2921  013A30  0E01               	movlw	1
  2922  013A32  EC03  F0AF         	call	_MXK_SwitchTo
  2923  013A36  0900               	iorlw	0
  2924  013A38  B4D8               	btfsc	status,2,c
  2925  013A3A  D7EB               	goto	l2399
  2926                           
  2927                           ;main.c: 366: printf("%c", (char)35);
  2928  013A3C  0EFB               	movlw	low STR_1
  2929  013A3E  0100               	movlb	0	; () banked
  2930  013A40  6F75               	movwf	printf@f& (0+255),b
  2931  013A42  0EFF               	movlw	high STR_1
  2932  013A44  0100               	movlb	0	; () banked
  2933  013A46  6F76               	movwf	(printf@f+1)& (0+255),b
  2934  013A48  0E00               	movlw	0
  2935  013A4A  0100               	movlb	0	; () banked
  2936  013A4C  6F78               	movwf	(?_printf+3)& (0+255),b
  2937  013A4E  0E23               	movlw	35
  2938  013A50  6F77               	movwf	(?_printf+2)& (0+255),b
  2939  013A52  ECB1  F092         	call	_printf	;wreg free
  2940                           
  2941                           ;main.c: 367: printf("Please select mode.\n");
  2942  013A56  0ED8               	movlw	low STR_10
  2943  013A58  0100               	movlb	0	; () banked
  2944  013A5A  6F75               	movwf	printf@f& (0+255),b
  2945  013A5C  0EFF               	movlw	high STR_10
  2946  013A5E  0100               	movlb	0	; () banked
  2947  013A60  6F76               	movwf	(printf@f+1)& (0+255),b
  2948  013A62  ECB1  F092         	call	_printf	;wreg free
  2949                           
  2950                           ;main.c: 368: printf("                   \n");
  2951  013A66  0EC3               	movlw	low STR_11
  2952  013A68  0100               	movlb	0	; () banked
  2953  013A6A  6F75               	movwf	printf@f& (0+255),b
  2954  013A6C  0EFF               	movlw	high STR_11
  2955  013A6E  0100               	movlb	0	; () banked
  2956  013A70  6F76               	movwf	(printf@f+1)& (0+255),b
  2957  013A72  ECB1  F092         	call	_printf	;wreg free
  2958                           
  2959                           ;main.c: 369: printf("                   \n");
  2960  013A76  0EC3               	movlw	low STR_11
  2961  013A78  0100               	movlb	0	; () banked
  2962  013A7A  6F75               	movwf	printf@f& (0+255),b
  2963  013A7C  0EFF               	movlw	high STR_11
  2964  013A7E  0100               	movlb	0	; () banked
  2965  013A80  6F76               	movwf	(printf@f+1)& (0+255),b
  2966  013A82  ECB1  F092         	call	_printf	;wreg free
  2967                           
  2968                           ;main.c: 370: printf("                   \n");
  2969  013A86  0EC3               	movlw	low STR_11
  2970  013A88  0100               	movlb	0	; () banked
  2971  013A8A  6F75               	movwf	printf@f& (0+255),b
  2972  013A8C  0EFF               	movlw	high STR_11
  2973  013A8E  0100               	movlb	0	; () banked
  2974  013A90  6F76               	movwf	(printf@f+1)& (0+255),b
  2975  013A92  ECB1  F092         	call	_printf	;wreg free
  2976                           
  2977                           ;main.c: 371: printf("                   \n");
  2978  013A96  0EC3               	movlw	low STR_11
  2979  013A98  0100               	movlb	0	; () banked
  2980  013A9A  6F75               	movwf	printf@f& (0+255),b
  2981  013A9C  0EFF               	movlw	high STR_11
  2982  013A9E  0100               	movlb	0	; () banked
  2983  013AA0  6F76               	movwf	(printf@f+1)& (0+255),b
  2984  013AA2  ECB1  F092         	call	_printf	;wreg free
  2985                           
  2986                           ;main.c: 372: Console_Render();
  2987  013AA6  ECC5  F08F         	call	_Console_Render	;wreg free
  2988                           
  2989                           ;main.c: 373: HMI_Poll();
  2990  013AAA  EC1E  F0AA         	call	_HMI_Poll	;wreg free
  2991                           
  2992                           ;main.c: 374: if (MXK_Release())
  2993  013AAE  EC31  F0B2         	call	_MXK_Release	;wreg free
  2994  013AB2  0900               	iorlw	0
  2995  013AB4  B4D8               	btfsc	status,2,c
  2996  013AB6  D7AD               	goto	l2399
  2997                           
  2998                           ;main.c: 375: MXK_Dequeue();
  2999  013AB8  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  3000                           
  3001                           ;main.c: 376: }
  3002                           ;main.c: 377: }
  3003  013ABC  D7AA               	goto	l2399
  3004  013ABE                     l2400:
  3005  013ABE  C0CA  F3FA         	movff	_mode,??_main
  3006  013AC2  C0CB  F3FB         	movff	_mode+1,??_main+1
  3007                           
  3008                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3009                           ; Switch size 1, requested type "space"
  3010                           ; Number of cases is 1, Range of values is 0 to 0
  3011                           ; switch strategies available:
  3012                           ; Name         Instructions Cycles
  3013                           ; simple_byte            4     3 (average)
  3014                           ;	Chosen strategy is simple_byte
  3015  013AC6  0103               	movlb	3	; () banked
  3016  013AC8  51FB               	movf	(??_main+1)& (0+255),w,b
  3017  013ACA  0A00               	xorlw	0	; case 0
  3018  013ACC  A4D8               	btfss	status,2,c
  3019  013ACE  D7B0               	goto	l2406
  3020                           
  3021                           ; BSR set to: 3
  3022                           ; Switch size 1, requested type "space"
  3023                           ; Number of cases is 4, Range of values is 1 to 4
  3024                           ; switch strategies available:
  3025                           ; Name         Instructions Cycles
  3026                           ; simple_byte           13     7 (average)
  3027                           ;	Chosen strategy is simple_byte
  3028  013AD0  0103               	movlb	3	; () banked
  3029  013AD2  51FA               	movf	??_main& (0+255),w,b
  3030  013AD4  0A01               	xorlw	1	; case 1
  3031  013AD6  B4D8               	btfsc	status,2,c
  3032  013AD8  D79F               	goto	l2401
  3033  013ADA  0A03               	xorlw	3	; case 2
  3034  013ADC  B4D8               	btfsc	status,2,c
  3035  013ADE  D79F               	goto	l2403
  3036  013AE0  0A01               	xorlw	1	; case 3
  3037  013AE2  B4D8               	btfsc	status,2,c
  3038  013AE4  D79F               	goto	l2404
  3039  013AE6  0A07               	xorlw	7	; case 4
  3040  013AE8  B4D8               	btfsc	status,2,c
  3041  013AEA  D79F               	goto	l2405
  3042  013AEC  D7A1               	goto	l2406
  3043  013AEE                     __end_of_main:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           postinc0	equ	0xFEE
  3050                           wreg	equ	0xFE8
  3051                           postdec1	equ	0xFE5
  3052                           fsr1h	equ	0xFE2
  3053                           fsr1l	equ	0xFE1
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function _mode4 *****************
  3057 ;; Defined at:
  3058 ;;		line 268 in file "main.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;		None
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;		None
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Totals:         0       1       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;Total ram usage:        5 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:   16
  3079 ;; This function calls:
  3080 ;;		_ADC_Start
  3081 ;;		_ADC_Voltage
  3082 ;;		_Console_Render
  3083 ;;		_HMI_Poll
  3084 ;;		_HMI_Render
  3085 ;;		_HMI_SetNumber
  3086 ;;		_MXK_Dequeue
  3087 ;;		_MXK_Release
  3088 ;;		_MXK_SwitchTo
  3089 ;;		_Motor_Move
  3090 ;;		_Motor_Speed
  3091 ;;		___fldiv
  3092 ;;		___flmul
  3093 ;;		___fltol
  3094 ;;		___xxtofl
  3095 ;;		_irobot_move_straight
  3096 ;;		_irobot_rotate
  3097 ;;		_irobot_song_play
  3098 ;;		_irobot_stop_motion
  3099 ;;		_printf
  3100 ;;		_update_angle
  3101 ;;		_update_bump_and_cliff
  3102 ;;		_update_distance
  3103 ;; This function is called by:
  3104 ;;		_main
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text1
  3109  0104A6                     __ptext1:
  3110                           	opt stack 0
  3111  0104A6                     _mode4:
  3112                           	opt stack 14
  3113                           
  3114                           ;main.c: 269: update_bump_and_cliff();
  3115                           
  3116                           ; BSR set to: 3
  3117                           ;incstack = 0
  3118  0104A6  ECFE  F0AF         	call	_update_bump_and_cliff	;wreg free
  3119                           
  3120                           ;main.c: 270: update_distance();
  3121  0104AA  ECD7  F0B2         	call	_update_distance	;wreg free
  3122                           
  3123                           ;main.c: 271: update_angle();
  3124  0104AE  ECE0  F0B2         	call	_update_angle	;wreg free
  3125                           
  3126                           ;main.c: 275: if (iRBumpLeft || iRBumpRight) {
  3127  0104B2  0100               	movlb	0	; () banked
  3128  0104B4  51E0               	movf	_iRBumpLeft& (0+255),w,b
  3129  0104B6  A4D8               	btfss	status,2,c
  3130  0104B8  D004               	goto	u13890
  3131                           
  3132                           ; BSR set to: 0
  3133  0104BA  0100               	movlb	0	; () banked
  3134  0104BC  51E1               	movf	_iRBumpRight& (0+255),w,b
  3135  0104BE  B4D8               	btfsc	status,2,c
  3136  0104C0  D006               	goto	l2369
  3137  0104C2                     u13890:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;main.c: 276: irobot_song_play(0);
  3141                           
  3142                           ; BSR set to: 0
  3143  0104C2  0E00               	movlw	0
  3144  0104C4  ECBA  F0B2         	call	_irobot_song_play
  3145                           
  3146                           ;main.c: 277: irobot_stop_motion(0);
  3147  0104C8  0E00               	movlw	0
  3148  0104CA  EC78  F0AE         	call	_irobot_stop_motion
  3149  0104CE                     l2369:
  3150                           
  3151                           ;main.c: 278: }
  3152                           ;main.c: 279: if (angleTotal > 83) {
  3153  0104CE  0100               	movlb	0	; () banked
  3154  0104D0  BFCD               	btfsc	(_angleTotal+1)& (0+255),7,b
  3155  0104D2  D00B               	goto	l2372
  3156  0104D4  0100               	movlb	0	; () banked
  3157  0104D6  51CD               	movf	(_angleTotal+1)& (0+255),w,b
  3158  0104D8  E105               	bnz	u13900
  3159  0104DA  0E54               	movlw	84
  3160  0104DC  0100               	movlb	0	; () banked
  3161  0104DE  5DCC               	subwf	_angleTotal& (0+255),w,b
  3162  0104E0  A0D8               	btfss	status,0,c
  3163  0104E2  D003               	goto	l2372
  3164  0104E4                     u13900:
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 280: irobot_stop_motion(0);
  3168  0104E4  0E00               	movlw	0
  3169  0104E6  EC78  F0AE         	call	_irobot_stop_motion
  3170  0104EA                     l2372:
  3171                           
  3172                           ;main.c: 281: }
  3173                           ;main.c: 282: HMI_Poll();
  3174  0104EA  EC1E  F0AA         	call	_HMI_Poll	;wreg free
  3175                           
  3176                           ;main.c: 283: StepRotate = 0;
  3177  0104EE  0E00               	movlw	0
  3178  0104F0  0100               	movlb	0	; () banked
  3179  0104F2  6FC9               	movwf	(_StepRotate+1)& (0+255),b
  3180  0104F4  0E00               	movlw	0
  3181  0104F6  6FC8               	movwf	_StepRotate& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;main.c: 284: MinDist = 1000;
  3185  0104F8  0E03               	movlw	3
  3186  0104FA  0100               	movlb	0	; () banked
  3187  0104FC  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3188  0104FE  0EE8               	movlw	232
  3189  010500  6FFB               	movwf	_MinDist& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 285: Stepstomin = 0;
  3193  010502  0E00               	movlw	0
  3194  010504  0100               	movlb	0	; () banked
  3195  010506  6FC7               	movwf	(_Stepstomin+1)& (0+255),b
  3196  010508  0E00               	movlw	0
  3197  01050A  6FC6               	movwf	_Stepstomin& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 286: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3201  01050C  0E00               	movlw	0
  3202  01050E  0100               	movlb	0	; () banked
  3203  010510  6F72               	movwf	___fldiv@a& (0+255),b
  3204  010512  0E00               	movlw	0
  3205  010514  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3206  010516  0EC8               	movlw	200
  3207  010518  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3208  01051A  0E43               	movlw	67
  3209  01051C  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3210  01051E  C0C6  F060         	movff	_Stepstomin,___xxtofl@val
  3211  010522  C0C7  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3212  010526  0100               	movlb	0	; () banked
  3213  010528  0E00               	movlw	0
  3214  01052A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3215  01052C  0EFF               	movlw	-1
  3216  01052E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3217  010530  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3218  010532  0E01               	movlw	1
  3219  010534  ECCA  F091         	call	___xxtofl
  3220  010538  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3221  01053C  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3222  010540  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3223  010544  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3224  010548  EC86  F088         	call	___fldiv	;wreg free
  3225  01054C  C06E  F087         	movff	?___fldiv,___flmul@b
  3226  010550  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3227  010554  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3228  010558  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3229  01055C  0E00               	movlw	0
  3230  01055E  0100               	movlb	0	; () banked
  3231  010560  6F8B               	movwf	___flmul@a& (0+255),b
  3232  010562  0E00               	movlw	0
  3233  010564  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3234  010566  0EB4               	movlw	180
  3235  010568  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3236  01056A  0E43               	movlw	67
  3237  01056C  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3238  01056E  EC00  F080         	call	___flmul	;wreg free
  3239  010572  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3240  010576  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3241  01057A  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3242  01057E  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3243                           
  3244                           ;main.c: 287: IRValue = 0;
  3245  010582  0E00               	movlw	0
  3246  010584  0100               	movlb	0	; () banked
  3247  010586  6FC5               	movwf	(_IRValue+1)& (0+255),b
  3248  010588  0E00               	movlw	0
  3249  01058A  6FC4               	movwf	_IRValue& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;main.c: 288: TimerX = 8;
  3253  01058C  0E00               	movlw	0
  3254  01058E  0100               	movlb	0	; () banked
  3255  010590  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3256  010592  0E08               	movlw	8
  3257  010594  6FF9               	movwf	_TimerX& (0+255),b
  3258                           
  3259                           ;main.c: 289: while (StepRotate < 400) {
  3260  010596  D12B               	goto	l2387
  3261  010598                     
  3262                           ; BSR set to: 0
  3263                           ;main.c: 290: StepRotate++;
  3264                           
  3265                           ; BSR set to: 0
  3266  010598  0100               	movlb	0	; () banked
  3267  01059A  4BC8               	infsnz	_StepRotate& (0+255),f,b
  3268  01059C  2BC9               	incf	(_StepRotate+1)& (0+255),f,b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 291: ADC_Start(&ADC_AN0);
  3272  01059E  0EF4               	movlw	low _ADC_AN0
  3273  0105A0  0100               	movlb	0	; () banked
  3274  0105A2  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3275  0105A4  0E00               	movlw	high _ADC_AN0
  3276  0105A6  0100               	movlb	0	; () banked
  3277  0105A8  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3278  0105AA  ECBA  F0A7         	call	_ADC_Start	;wreg free
  3279                           
  3280                           ;main.c: 292: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3281  0105AE  0EF4               	movlw	low _ADC_AN0
  3282  0105B0  0100               	movlb	0	; () banked
  3283  0105B2  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3284  0105B4  0E00               	movlw	high _ADC_AN0
  3285  0105B6  0100               	movlb	0	; () banked
  3286  0105B8  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3287  0105BA  EC77  F09D         	call	_ADC_Voltage	;wreg free
  3288  0105BE  C0A0  F3F2         	movff	?_ADC_Voltage,_mode4$15590
  3289  0105C2  C0A1  F3F3         	movff	?_ADC_Voltage+1,_mode4$15590+1
  3290  0105C6  C0A2  F3F4         	movff	?_ADC_Voltage+2,_mode4$15590+2
  3291  0105CA  C0A3  F3F5         	movff	?_ADC_Voltage+3,_mode4$15590+3
  3292                           
  3293                           ;main.c: 292: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3294  0105CE  C3F2  F072         	movff	_mode4$15590,___fldiv@a
  3295  0105D2  C3F3  F073         	movff	_mode4$15590+1,___fldiv@a+1
  3296  0105D6  C3F4  F074         	movff	_mode4$15590+2,___fldiv@a+2
  3297  0105DA  C3F5  F075         	movff	_mode4$15590+3,___fldiv@a+3
  3298  0105DE  0E00               	movlw	0
  3299  0105E0  0100               	movlb	0	; () banked
  3300  0105E2  6F6E               	movwf	___fldiv@b& (0+255),b
  3301  0105E4  0E00               	movlw	0
  3302  0105E6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3303  0105E8  0E6C               	movlw	108
  3304  0105EA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3305  0105EC  0E42               	movlw	66
  3306  0105EE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3307  0105F0  EC86  F088         	call	___fldiv	;wreg free
  3308  0105F4  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3309  0105F8  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3310  0105FC  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3311  010600  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3312  010604  EC89  F09B         	call	___fltol	;wreg free
  3313  010608  C0B2  F0C4         	movff	?___fltol,_IRValue
  3314  01060C  C0B3  F0C5         	movff	?___fltol+1,_IRValue+1
  3315                           
  3316                           ;main.c: 293: if (MXK_SwitchTo(eMXK_HMI)) {
  3317  010610  0E01               	movlw	1
  3318  010612  EC03  F0AF         	call	_MXK_SwitchTo
  3319  010616  0900               	iorlw	0
  3320  010618  B4D8               	btfsc	status,2,c
  3321  01061A  D00E               	goto	l2376
  3322                           
  3323                           ;main.c: 294: HMI_SetNumber(IRValue);
  3324  01061C  C0C4  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3325  010620  C0C5  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3326  010624  EC2C  F0B1         	call	_HMI_SetNumber	;wreg free
  3327                           
  3328                           ;main.c: 295: HMI_Render();
  3329  010628  EC64  F0AF         	call	_HMI_Render	;wreg free
  3330                           
  3331                           ;main.c: 296: if (MXK_Release())
  3332  01062C  EC31  F0B2         	call	_MXK_Release	;wreg free
  3333  010630  0900               	iorlw	0
  3334  010632  A4D8               	btfss	status,2,c
  3335                           
  3336                           ;main.c: 297: MXK_Dequeue();
  3337  010634  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  3338  010638                     l2376:
  3339                           
  3340                           ;main.c: 298: }
  3341                           ;main.c: 299: if (IRValue < MinDist) {
  3342  010638  0100               	movlb	0	; () banked
  3343  01063A  51FB               	movf	_MinDist& (0+255),w,b
  3344  01063C  0100               	movlb	0	; () banked
  3345  01063E  5DC4               	subwf	_IRValue& (0+255),w,b
  3346  010640  0100               	movlb	0	; () banked
  3347  010642  51C5               	movf	(_IRValue+1)& (0+255),w,b
  3348  010644  0A80               	xorlw	128
  3349  010646  0100               	movlb	0	; () banked
  3350  010648  6FB8               	movwf	??_mode4& (0+255),b
  3351  01064A  0100               	movlb	0	; () banked
  3352  01064C  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3353  01064E  0A80               	xorlw	128
  3354  010650  0100               	movlb	0	; () banked
  3355  010652  59B8               	subwfb	??_mode4& (0+255),w,b
  3356  010654  B0D8               	btfsc	status,0,c
  3357  010656  D008               	goto	l2377
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 300: MinDist = IRValue;
  3361  010658  C0C4  F0FB         	movff	_IRValue,_MinDist
  3362  01065C  C0C5  F0FC         	movff	_IRValue+1,_MinDist+1
  3363                           
  3364                           ;main.c: 301: Stepstomin = StepRotate;
  3365  010660  C0C8  F0C6         	movff	_StepRotate,_Stepstomin
  3366  010664  C0C9  F0C7         	movff	_StepRotate+1,_Stepstomin+1
  3367  010668                     l2377:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 302: }
  3371                           ;main.c: 303: if (MXK_SwitchTo(eMXK_Motor)) {
  3372                           
  3373                           ; BSR set to: 0
  3374  010668  0E08               	movlw	8
  3375  01066A  EC03  F0AF         	call	_MXK_SwitchTo
  3376  01066E  0900               	iorlw	0
  3377  010670  B4D8               	btfsc	status,2,c
  3378  010672  D01F               	goto	l2379
  3379                           
  3380                           ;main.c: 304: Motor_Speed(&Stepper, (50));
  3381  010674  0EC9               	movlw	low _Stepper
  3382  010676  0100               	movlb	0	; () banked
  3383  010678  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3384  01067A  0E03               	movlw	high _Stepper
  3385  01067C  0100               	movlb	0	; () banked
  3386  01067E  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3387  010680  0E00               	movlw	0
  3388  010682  0100               	movlb	0	; () banked
  3389  010684  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3390  010686  0E32               	movlw	50
  3391  010688  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3392  01068A  EC17  F0B1         	call	_Motor_Speed	;wreg free
  3393                           
  3394                           ;main.c: 305: Motor_Move(&Stepper, -1);
  3395  01068E  0EC9               	movlw	low _Stepper
  3396  010690  0100               	movlb	0	; () banked
  3397  010692  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3398  010694  0E03               	movlw	high _Stepper
  3399  010696  0100               	movlb	0	; () banked
  3400  010698  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3401  01069A  0EFF               	movlw	255
  3402  01069C  0100               	movlb	0	; () banked
  3403  01069E  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3404  0106A0  6965               	setf	Motor_Move@pDelta& (0+255),b
  3405  0106A2  EC1B  F0B0         	call	_Motor_Move	;wreg free
  3406                           
  3407                           ;main.c: 306: if (MXK_Release())
  3408  0106A6  EC31  F0B2         	call	_MXK_Release	;wreg free
  3409  0106AA  0900               	iorlw	0
  3410  0106AC  A4D8               	btfss	status,2,c
  3411                           
  3412                           ;main.c: 307: MXK_Dequeue();
  3413  0106AE  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  3414  0106B2                     l2379:
  3415                           
  3416                           ;main.c: 308: }
  3417                           ;main.c: 309: TimerX = 10;
  3418  0106B2  0E00               	movlw	0
  3419  0106B4  0100               	movlb	0	; () banked
  3420  0106B6  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3421  0106B8  0E0A               	movlw	10
  3422  0106BA  6FF9               	movwf	_TimerX& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 310: if (TimerX > 0) {
  3426  0106BC  0100               	movlb	0	; () banked
  3427  0106BE  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3428  0106C0  D063               	goto	u13990
  3429  0106C2  0100               	movlb	0	; () banked
  3430  0106C4  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3431  0106C6  E156               	bnz	l16592
  3432  0106C8  0100               	movlb	0	; () banked
  3433  0106CA  05F9               	decf	_TimerX& (0+255),w,b
  3434  0106CC  B0D8               	btfsc	status,0,c
  3435  0106CE  D052               	goto	l2381
  3436  0106D0  D05B               	goto	u13990
  3437  0106D2                     l16574:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;main.c: 312: ADC_Start(&ADC_AN0);
  3441  0106D2  0EF4               	movlw	low _ADC_AN0
  3442  0106D4  0100               	movlb	0	; () banked
  3443  0106D6  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3444  0106D8  0E00               	movlw	high _ADC_AN0
  3445  0106DA  0100               	movlb	0	; () banked
  3446  0106DC  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3447  0106DE  ECBA  F0A7         	call	_ADC_Start	;wreg free
  3448                           
  3449                           ;main.c: 313: if (MXK_SwitchTo(eMXK_HMI)) {
  3450  0106E2  0E01               	movlw	1
  3451  0106E4  EC03  F0AF         	call	_MXK_SwitchTo
  3452  0106E8  0900               	iorlw	0
  3453  0106EA  B4D8               	btfsc	status,2,c
  3454  0106EC  D00E               	goto	l2384
  3455                           
  3456                           ;main.c: 314: HMI_SetNumber(IRValue);
  3457  0106EE  C0C4  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3458  0106F2  C0C5  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3459  0106F6  EC2C  F0B1         	call	_HMI_SetNumber	;wreg free
  3460                           
  3461                           ;main.c: 315: HMI_Render();
  3462  0106FA  EC64  F0AF         	call	_HMI_Render	;wreg free
  3463                           
  3464                           ;main.c: 316: if (MXK_Release())
  3465  0106FE  EC31  F0B2         	call	_MXK_Release	;wreg free
  3466  010702  0900               	iorlw	0
  3467  010704  A4D8               	btfss	status,2,c
  3468                           
  3469                           ;main.c: 317: MXK_Dequeue();
  3470  010706  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  3471  01070A                     l2384:
  3472                           
  3473                           ;main.c: 318: }
  3474                           ;main.c: 319: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3475  01070A  0EF4               	movlw	low _ADC_AN0
  3476  01070C  0100               	movlb	0	; () banked
  3477  01070E  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3478  010710  0E00               	movlw	high _ADC_AN0
  3479  010712  0100               	movlb	0	; () banked
  3480  010714  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3481  010716  EC77  F09D         	call	_ADC_Voltage	;wreg free
  3482  01071A  C0A0  F3F2         	movff	?_ADC_Voltage,_mode4$15590
  3483  01071E  C0A1  F3F3         	movff	?_ADC_Voltage+1,_mode4$15590+1
  3484  010722  C0A2  F3F4         	movff	?_ADC_Voltage+2,_mode4$15590+2
  3485  010726  C0A3  F3F5         	movff	?_ADC_Voltage+3,_mode4$15590+3
  3486                           
  3487                           ;main.c: 318: }
  3488                           ;main.c: 319: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3489  01072A  C3F2  F072         	movff	_mode4$15590,___fldiv@a
  3490  01072E  C3F3  F073         	movff	_mode4$15590+1,___fldiv@a+1
  3491  010732  C3F4  F074         	movff	_mode4$15590+2,___fldiv@a+2
  3492  010736  C3F5  F075         	movff	_mode4$15590+3,___fldiv@a+3
  3493  01073A  0E00               	movlw	0
  3494  01073C  0100               	movlb	0	; () banked
  3495  01073E  6F6E               	movwf	___fldiv@b& (0+255),b
  3496  010740  0E00               	movlw	0
  3497  010742  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3498  010744  0E6C               	movlw	108
  3499  010746  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3500  010748  0E42               	movlw	66
  3501  01074A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3502  01074C  EC86  F088         	call	___fldiv	;wreg free
  3503  010750  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3504  010754  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3505  010758  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3506  01075C  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3507  010760  EC89  F09B         	call	___fltol	;wreg free
  3508  010764  C0B2  F0C4         	movff	?___fltol,_IRValue
  3509  010768  C0B3  F0C5         	movff	?___fltol+1,_IRValue+1
  3510                           
  3511                           ;main.c: 320: TimerX--;
  3512  01076C  0100               	movlb	0	; () banked
  3513  01076E  07F9               	decf	_TimerX& (0+255),f,b
  3514  010770  A0D8               	btfss	status,0,c
  3515  010772  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3516  010774                     l2381:
  3517  010774                     l16592:
  3518                           
  3519                           ; BSR set to: 0
  3520  010774  0100               	movlb	0	; () banked
  3521  010776  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3522  010778  D007               	goto	u13990
  3523  01077A  0100               	movlb	0	; () banked
  3524  01077C  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3525  01077E  E1A9               	bnz	l16574
  3526  010780  0100               	movlb	0	; () banked
  3527  010782  05F9               	decf	_TimerX& (0+255),w,b
  3528  010784  B0D8               	btfsc	status,0,c
  3529  010786  D7A5               	goto	l2382
  3530  010788                     u13990:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;main.c: 321: }
  3534                           ;main.c: 322: }
  3535                           ;main.c: 323: if (MXK_SwitchTo(eMXK_HMI)) {
  3536                           
  3537                           ; BSR set to: 0
  3538                           
  3539                           ; BSR set to: 0
  3540  010788  0E01               	movlw	1
  3541  01078A  EC03  F0AF         	call	_MXK_SwitchTo
  3542  01078E  0900               	iorlw	0
  3543  010790  B4D8               	btfsc	status,2,c
  3544  010792  D02D               	goto	l2387
  3545                           
  3546                           ;main.c: 324: printf("%c", (char)35);
  3547  010794  0EFB               	movlw	low STR_1
  3548  010796  0100               	movlb	0	; () banked
  3549  010798  6F75               	movwf	printf@f& (0+255),b
  3550  01079A  0EFF               	movlw	high STR_1
  3551  01079C  0100               	movlb	0	; () banked
  3552  01079E  6F76               	movwf	(printf@f+1)& (0+255),b
  3553  0107A0  0E00               	movlw	0
  3554  0107A2  0100               	movlb	0	; () banked
  3555  0107A4  6F78               	movwf	(?_printf+3)& (0+255),b
  3556  0107A6  0E23               	movlw	35
  3557  0107A8  6F77               	movwf	(?_printf+2)& (0+255),b
  3558  0107AA  ECB1  F092         	call	_printf	;wreg free
  3559                           
  3560                           ;main.c: 325: printf("Closest Wall:%u\nClosest Angle:%u\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, Stepstomin, iRBumpLeft, iRBumpRight);
  3561  0107AE  0E59               	movlw	low STR_8
  3562  0107B0  0100               	movlb	0	; () banked
  3563  0107B2  6F75               	movwf	printf@f& (0+255),b
  3564  0107B4  0EFF               	movlw	high STR_8
  3565  0107B6  0100               	movlb	0	; () banked
  3566  0107B8  6F76               	movwf	(printf@f+1)& (0+255),b
  3567  0107BA  C0FB  F077         	movff	_MinDist,?_printf+2
  3568  0107BE  C0FC  F078         	movff	_MinDist+1,?_printf+3
  3569  0107C2  C0C6  F079         	movff	_Stepstomin,?_printf+4
  3570  0107C6  C0C7  F07A         	movff	_Stepstomin+1,?_printf+5
  3571  0107CA  C0E0  F07B         	movff	_iRBumpLeft,?_printf+6
  3572  0107CE  0100               	movlb	0	; () banked
  3573  0107D0  6B7C               	clrf	(?_printf+7)& (0+255),b
  3574  0107D2  C0E1  F07D         	movff	_iRBumpRight,?_printf+8
  3575  0107D6  0100               	movlb	0	; () banked
  3576  0107D8  6B7E               	clrf	(?_printf+9)& (0+255),b
  3577  0107DA  ECB1  F092         	call	_printf	;wreg free
  3578                           
  3579                           ;main.c: 326: Console_Render();
  3580  0107DE  ECC5  F08F         	call	_Console_Render	;wreg free
  3581                           
  3582                           ;main.c: 327: if (MXK_Release())
  3583  0107E2  EC31  F0B2         	call	_MXK_Release	;wreg free
  3584  0107E6  0900               	iorlw	0
  3585  0107E8  A4D8               	btfss	status,2,c
  3586                           
  3587                           ;main.c: 328: MXK_Dequeue();
  3588  0107EA  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  3589  0107EE                     l2387:
  3590  0107EE  0100               	movlb	0	; () banked
  3591  0107F0  BFC9               	btfsc	(_StepRotate+1)& (0+255),7,b
  3592  0107F2  D6D2               	goto	l2374
  3593  0107F4  0E90               	movlw	144
  3594  0107F6  0100               	movlb	0	; () banked
  3595  0107F8  5DC8               	subwf	_StepRotate& (0+255),w,b
  3596  0107FA  0E01               	movlw	1
  3597  0107FC  0100               	movlb	0	; () banked
  3598  0107FE  59C9               	subwfb	(_StepRotate+1)& (0+255),w,b
  3599  010800  A0D8               	btfss	status,0,c
  3600  010802  D6CA               	goto	l2374
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;main.c: 329: }
  3604                           ;main.c: 330: }
  3605                           ;main.c: 331: stepsToMinDegrees = Stepstomin * 0.75;
  3606                           
  3607                           ; BSR set to: 0
  3608  010804  C0C6  F060         	movff	_Stepstomin,___xxtofl@val
  3609  010808  C0C7  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3610  01080C  0100               	movlb	0	; () banked
  3611  01080E  0E00               	movlw	0
  3612  010810  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3613  010812  0EFF               	movlw	-1
  3614  010814  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3615  010816  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3616  010818  0E01               	movlw	1
  3617  01081A  ECCA  F091         	call	___xxtofl
  3618  01081E  C060  F087         	movff	?___xxtofl,___flmul@b
  3619  010822  C061  F088         	movff	?___xxtofl+1,___flmul@b+1
  3620  010826  C062  F089         	movff	?___xxtofl+2,___flmul@b+2
  3621  01082A  C063  F08A         	movff	?___xxtofl+3,___flmul@b+3
  3622  01082E  0E00               	movlw	0
  3623  010830  0100               	movlb	0	; () banked
  3624  010832  6F8B               	movwf	___flmul@a& (0+255),b
  3625  010834  0E00               	movlw	0
  3626  010836  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3627  010838  0E40               	movlw	64
  3628  01083A  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3629  01083C  0E3F               	movlw	63
  3630  01083E  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3631  010840  EC00  F080         	call	___flmul	;wreg free
  3632  010844  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3633  010848  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3634  01084C  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3635  010850  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3636                           
  3637                           ;main.c: 332: Stepstomin = (int) stepsToMinDegrees;
  3638  010854  C300  F0B2         	movff	_stepsToMinDegrees,___fltol@f1
  3639  010858  C301  F0B3         	movff	_stepsToMinDegrees+1,___fltol@f1+1
  3640  01085C  C302  F0B4         	movff	_stepsToMinDegrees+2,___fltol@f1+2
  3641  010860  C303  F0B5         	movff	_stepsToMinDegrees+3,___fltol@f1+3
  3642  010864  EC89  F09B         	call	___fltol	;wreg free
  3643  010868  C0B2  F0C6         	movff	?___fltol,_Stepstomin
  3644  01086C  C0B3  F0C7         	movff	?___fltol+1,_Stepstomin+1
  3645                           
  3646                           ;main.c: 333: irobot_rotate(0, Stepstomin - 90, 200);
  3647  010870  0EA6               	movlw	166
  3648  010872  0100               	movlb	0	; () banked
  3649  010874  25C6               	addwf	_Stepstomin& (0+255),w,b
  3650  010876  0100               	movlb	0	; () banked
  3651  010878  6F7D               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3652  01087A  0EFF               	movlw	255
  3653  01087C  0100               	movlb	0	; () banked
  3654  01087E  21C7               	addwfc	(_Stepstomin+1)& (0+255),w,b
  3655  010880  0100               	movlb	0	; () banked
  3656  010882  6F7E               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3657  010884  0E00               	movlw	0
  3658  010886  0100               	movlb	0	; () banked
  3659  010888  6F80               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3660  01088A  0EC8               	movlw	200
  3661  01088C  6F7F               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3662  01088E  0E00               	movlw	0
  3663  010890  ECD3  F0A2         	call	_irobot_rotate
  3664                           
  3665                           ;main.c: 334: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3666  010894  D009               	goto	l2389
  3667  010896                     
  3668                           ;main.c: 336: irobot_move_straight(200);
  3669  010896  0E00               	movlw	0
  3670  010898  0100               	movlb	0	; () banked
  3671  01089A  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3672  01089C  0EC8               	movlw	200
  3673  01089E  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3674  0108A0  EC5A  F0B2         	call	_irobot_move_straight	;wreg free
  3675                           
  3676                           ;main.c: 337: update_bump_and_cliff();
  3677  0108A4  ECFE  F0AF         	call	_update_bump_and_cliff	;wreg free
  3678  0108A8                     l2389:
  3679  0108A8  0100               	movlb	0	; () banked
  3680  0108AA  51E0               	movf	_iRBumpLeft& (0+255),w,b
  3681  0108AC  A4D8               	btfss	status,2,c
  3682  0108AE  D00C               	goto	u14060
  3683                           
  3684                           ; BSR set to: 0
  3685  0108B0  0100               	movlb	0	; () banked
  3686  0108B2  51E1               	movf	_iRBumpRight& (0+255),w,b
  3687  0108B4  A4D8               	btfss	status,2,c
  3688  0108B6  D008               	goto	u14060
  3689                           
  3690                           ; BSR set to: 0
  3691  0108B8  0100               	movlb	0	; () banked
  3692  0108BA  51DF               	movf	_iRDropRight& (0+255),w,b
  3693  0108BC  A4D8               	btfss	status,2,c
  3694  0108BE  D004               	goto	u14060
  3695                           
  3696                           ; BSR set to: 0
  3697  0108C0  0100               	movlb	0	; () banked
  3698  0108C2  51DE               	movf	_iRDropLeft& (0+255),w,b
  3699  0108C4  B4D8               	btfsc	status,2,c
  3700  0108C6  D7E7               	goto	l2390
  3701  0108C8                     u14060:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;main.c: 338: }
  3705                           ;main.c: 339: irobot_song_play(0);
  3706                           
  3707                           ; BSR set to: 0
  3708                           
  3709                           ; BSR set to: 0
  3710  0108C8  0E00               	movlw	0
  3711  0108CA  ECBA  F0B2         	call	_irobot_song_play
  3712                           
  3713                           ;main.c: 340: irobot_stop_motion(0);
  3714  0108CE  0E00               	movlw	0
  3715  0108D0  EC78  F0AE         	call	_irobot_stop_motion
  3716  0108D4  0012               	return		;funcret
  3717  0108D6                     __end_of_mode4:
  3718                           	opt stack 0
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           postinc0	equ	0xFEE
  3724                           wreg	equ	0xFE8
  3725                           postdec1	equ	0xFE5
  3726                           fsr1h	equ	0xFE2
  3727                           fsr1l	equ	0xFE1
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _mode3 *****************
  3731 ;; Defined at:
  3732 ;;		line 259 in file "main.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      void 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;Total ram usage:        0 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:   13
  3753 ;; This function calls:
  3754 ;;		_move_and_rotate
  3755 ;; This function is called by:
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text2
  3761  01659C                     __ptext2:
  3762                           	opt stack 0
  3763  01659C                     _mode3:
  3764                           	opt stack 17
  3765                           
  3766                           ;main.c: 260: move_and_rotate();
  3767                           
  3768                           ;incstack = 0
  3769  01659C  ECFC  F0A7         	call	_move_and_rotate	;wreg free
  3770                           
  3771                           ;main.c: 261: move_and_rotate();
  3772  0165A0  ECFC  F0A7         	call	_move_and_rotate	;wreg free
  3773                           
  3774                           ;main.c: 262: move_and_rotate();
  3775  0165A4  ECFC  F0A7         	call	_move_and_rotate	;wreg free
  3776                           
  3777                           ;main.c: 263: move_and_rotate();
  3778  0165A8  ECFC  F0A7         	call	_move_and_rotate	;wreg free
  3779  0165AC  0012               	return		;funcret
  3780  0165AE                     __end_of_mode3:
  3781                           	opt stack 0
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           postinc0	equ	0xFEE
  3787                           wreg	equ	0xFE8
  3788                           postdec1	equ	0xFE5
  3789                           fsr1h	equ	0xFE2
  3790                           fsr1l	equ	0xFE1
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _move_and_rotate *****************
  3794 ;; Defined at:
  3795 ;;		line 121 in file "main.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:   12
  3816 ;; This function calls:
  3817 ;;		_delay_ms
  3818 ;;		_irobot_move_straight
  3819 ;;		_irobot_rotate
  3820 ;;		_irobot_stop_motion
  3821 ;;		_update_distance
  3822 ;; This function is called by:
  3823 ;;		_mode3
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text3
  3828  014FF8                     __ptext3:
  3829                           	opt stack 0
  3830  014FF8                     _move_and_rotate:
  3831                           	opt stack 17
  3832                           
  3833                           ;main.c: 122: dist = 0;
  3834                           
  3835                           ;incstack = 0
  3836  014FF8  0E00               	movlw	0
  3837  014FFA  0100               	movlb	0	; () banked
  3838  014FFC  6FC3               	movwf	(_dist+1)& (0+255),b
  3839  014FFE  0E00               	movlw	0
  3840  015000  6FC2               	movwf	_dist& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;main.c: 123: irobot_move_straight(100);
  3844  015002  0E00               	movlw	0
  3845  015004  0100               	movlb	0	; () banked
  3846  015006  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3847  015008  0E64               	movlw	100
  3848  01500A  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3849  01500C  EC5A  F0B2         	call	_irobot_move_straight	;wreg free
  3850                           
  3851                           ;main.c: 124: while (dist < 1000) {
  3852  015010  D00A               	goto	l2318
  3853  015012                     
  3854                           ;main.c: 125: update_distance();
  3855  015012  ECD7  F0B2         	call	_update_distance	;wreg free
  3856                           
  3857                           ;main.c: 126: dist += iRDistance;
  3858  015016  0100               	movlb	0	; () banked
  3859  015018  51D2               	movf	_iRDistance& (0+255),w,b
  3860  01501A  0100               	movlb	0	; () banked
  3861  01501C  27C2               	addwf	_dist& (0+255),f,b
  3862  01501E  0100               	movlb	0	; () banked
  3863  015020  51D3               	movf	(_iRDistance+1)& (0+255),w,b
  3864  015022  0100               	movlb	0	; () banked
  3865  015024  23C3               	addwfc	(_dist+1)& (0+255),f,b
  3866  015026                     l2318:
  3867                           
  3868                           ; BSR set to: 0
  3869  015026  0100               	movlb	0	; () banked
  3870  015028  BFC3               	btfsc	(_dist+1)& (0+255),7,b
  3871  01502A  D7F3               	goto	l2319
  3872  01502C  0EE8               	movlw	232
  3873  01502E  0100               	movlb	0	; () banked
  3874  015030  5DC2               	subwf	_dist& (0+255),w,b
  3875  015032  0E03               	movlw	3
  3876  015034  0100               	movlb	0	; () banked
  3877  015036  59C3               	subwfb	(_dist+1)& (0+255),w,b
  3878  015038  A0D8               	btfss	status,0,c
  3879  01503A  D7EB               	goto	l2319
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;main.c: 127: }
  3883                           ;main.c: 128: irobot_stop_motion(0);
  3884                           
  3885                           ; BSR set to: 0
  3886  01503C  0E00               	movlw	0
  3887  01503E  EC78  F0AE         	call	_irobot_stop_motion
  3888                           
  3889                           ;main.c: 129: delay_ms(100);
  3890  015042  0E00               	movlw	0
  3891  015044  0100               	movlb	0	; () banked
  3892  015046  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3893  015048  0E64               	movlw	100
  3894  01504A  6F60               	movwf	delay_ms@ms& (0+255),b
  3895  01504C  EC31  F0AB         	call	_delay_ms	;wreg free
  3896                           
  3897                           ;main.c: 130: irobot_rotate(0, 67, 200);
  3898  015050  0E00               	movlw	0
  3899  015052  0100               	movlb	0	; () banked
  3900  015054  6F7E               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3901  015056  0E43               	movlw	67
  3902  015058  6F7D               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3903  01505A  0E00               	movlw	0
  3904  01505C  0100               	movlb	0	; () banked
  3905  01505E  6F80               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3906  015060  0EC8               	movlw	200
  3907  015062  6F7F               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3908  015064  0E00               	movlw	0
  3909  015066  ECD3  F0A2         	call	_irobot_rotate
  3910                           
  3911                           ;main.c: 131: delay_ms(100);
  3912  01506A  0E00               	movlw	0
  3913  01506C  0100               	movlb	0	; () banked
  3914  01506E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3915  015070  0E64               	movlw	100
  3916  015072  6F60               	movwf	delay_ms@ms& (0+255),b
  3917  015074  EC31  F0AB         	call	_delay_ms	;wreg free
  3918  015078  0012               	return		;funcret
  3919  01507A                     __end_of_move_and_rotate:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           fsr1h	equ	0xFE2
  3929                           fsr1l	equ	0xFE1
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _irobot_rotate *****************
  3933 ;; Defined at:
  3934 ;;		line 280 in file "Library/iRobotSerial.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  isScript        1    wreg     unsigned char 
  3937 ;;  rotateAngle     2   29[BANK0 ] short 
  3938 ;;  rotateSpeed     2   31[BANK0 ] short 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  isScript        1   34[BANK0 ] unsigned char 
  3941 ;;  rotateDirect    2   37[BANK0 ] short 
  3942 ;;  angleTotal      2   35[BANK0 ] short 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:       10 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:   11
  3959 ;; This function calls:
  3960 ;;		_irobot_move
  3961 ;;		_irobot_stop_motion
  3962 ;;		_update_angle
  3963 ;; This function is called by:
  3964 ;;		_move_and_rotate
  3965 ;;		_mode4
  3966 ;;		_irobot_rotate_to
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text4
  3971  0145A6                     __ptext4:
  3972                           	opt stack 0
  3973  0145A6                     _irobot_rotate:
  3974                           	opt stack 18
  3975                           
  3976                           ;incstack = 0
  3977                           ;irobot_rotate@isScript stored from wreg
  3978  0145A6  0100               	movlb	0	; () banked
  3979  0145A8  6F82               	movwf	irobot_rotate@isScript& (0+255),b
  3980                           
  3981                           ;iRobotSerial.c: 281: INT16 angleTotal = 0;
  3982  0145AA  0E00               	movlw	0
  3983  0145AC  0100               	movlb	0	; () banked
  3984  0145AE  6F84               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  3985  0145B0  0E00               	movlw	0
  3986  0145B2  6F83               	movwf	irobot_rotate@angleTotal& (0+255),b
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;iRobotSerial.c: 282: INT16 rotateDirection;
  3990                           ;iRobotSerial.c: 284: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateDire
      +                          ction = iR_CONST_CW);
  3991  0145B4  0100               	movlb	0	; () banked
  3992  0145B6  BF7E               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  3993  0145B8  D00D               	goto	l2156
  3994  0145BA  0100               	movlb	0	; () banked
  3995  0145BC  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3996  0145BE  E104               	bnz	u10270
  3997  0145C0  0100               	movlb	0	; () banked
  3998  0145C2  057D               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  3999  0145C4  A0D8               	btfss	status,0,c
  4000  0145C6  D006               	goto	l2156
  4001  0145C8                     u10270:
  4002                           
  4003                           ; BSR set to: 0
  4004  0145C8  0E00               	movlw	0
  4005  0145CA  0100               	movlb	0	; () banked
  4006  0145CC  6F86               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4007  0145CE  0E01               	movlw	1
  4008  0145D0  6F85               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4009  0145D2  D003               	goto	l2158
  4010  0145D4                     l2156:
  4011                           
  4012                           ; BSR set to: 0
  4013  0145D4  0100               	movlb	0	; () banked
  4014  0145D6  6985               	setf	irobot_rotate@rotateDirection& (0+255),b
  4015  0145D8  6986               	setf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4016  0145DA                     l2158:
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;iRobotSerial.c: 285: if (isScript) {
  4020                           
  4021                           ; BSR set to: 0
  4022  0145DA  0100               	movlb	0	; () banked
  4023  0145DC  5182               	movf	irobot_rotate@isScript& (0+255),w,b
  4024  0145DE  0100               	movlb	0	; () banked
  4025  0145E0  B4D8               	btfsc	status,2,c
  4026  0145E2  D00C               	goto	l2159
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;iRobotSerial.c: 286: irobot_move(1, rotateSpeed, rotateDirection);
  4030  0145E4  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4031  0145E8  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4032  0145EC  C085  F072         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4033  0145F0  C086  F073         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4034  0145F4  0E01               	movlw	1
  4035  0145F6  EC24  F0A2         	call	_irobot_move
  4036                           
  4037                           ;iRobotSerial.c: 287: }
  4038  0145FA  0012               	return	
  4039  0145FC                     l2159:
  4040                           
  4041                           ;iRobotSerial.c: 288: else {
  4042                           ;iRobotSerial.c: 289: irobot_move(0, rotateSpeed, rotateDirection);
  4043  0145FC  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4044  014600  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4045  014604  C085  F072         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4046  014608  C086  F073         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4047  01460C  0E00               	movlw	0
  4048  01460E  EC24  F0A2         	call	_irobot_move
  4049                           
  4050                           ;iRobotSerial.c: 290: while (angleTotal < rotateAngle) {
  4051  014612  D00A               	goto	l2161
  4052  014614                     
  4053                           ;iRobotSerial.c: 291: update_angle();
  4054  014614  ECE0  F0B2         	call	_update_angle	;wreg free
  4055                           
  4056                           ;iRobotSerial.c: 292: angleTotal += iRAngle;
  4057  014618  0100               	movlb	0	; () banked
  4058  01461A  51D0               	movf	_iRAngle& (0+255),w,b
  4059  01461C  0100               	movlb	0	; () banked
  4060  01461E  2783               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4061  014620  0100               	movlb	0	; () banked
  4062  014622  51D1               	movf	(_iRAngle+1)& (0+255),w,b
  4063  014624  0100               	movlb	0	; () banked
  4064  014626  2384               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4065  014628                     l2161:
  4066                           
  4067                           ; BSR set to: 0
  4068  014628  0100               	movlb	0	; () banked
  4069  01462A  517D               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4070  01462C  0100               	movlb	0	; () banked
  4071  01462E  5D83               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4072  014630  0100               	movlb	0	; () banked
  4073  014632  5184               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4074  014634  0A80               	xorlw	128
  4075  014636  0100               	movlb	0	; () banked
  4076  014638  6F81               	movwf	??_irobot_rotate& (0+255),b
  4077  01463A  0100               	movlb	0	; () banked
  4078  01463C  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4079  01463E  0A80               	xorlw	128
  4080  014640  0100               	movlb	0	; () banked
  4081  014642  5981               	subwfb	??_irobot_rotate& (0+255),w,b
  4082  014644  A0D8               	btfss	status,0,c
  4083  014646  D7E6               	goto	l2162
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;iRobotSerial.c: 293: }
  4087                           ;iRobotSerial.c: 294: irobot_stop_motion(0);
  4088                           
  4089                           ; BSR set to: 0
  4090  014648  0E00               	movlw	0
  4091  01464A  EC78  F0AE         	call	_irobot_stop_motion
  4092  01464E  0012               	return	
  4093  014650                     __end_of_irobot_rotate:
  4094                           	opt stack 0
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           postinc0	equ	0xFEE
  4100                           wreg	equ	0xFE8
  4101                           postdec1	equ	0xFE5
  4102                           fsr1h	equ	0xFE2
  4103                           fsr1l	equ	0xFE1
  4104                           status	equ	0xFD8
  4105                           
  4106 ;; *************** function _mode2 *****************
  4107 ;; Defined at:
  4108 ;;		line 221 in file "main.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  dist            2   44[BANK0 ] int 
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;Total ram usage:        2 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:   16
  4129 ;; This function calls:
  4130 ;;		_Console_Render
  4131 ;;		_HMI_Poll
  4132 ;;		_MXK_Dequeue
  4133 ;;		_MXK_Release
  4134 ;;		_MXK_SwitchTo
  4135 ;;		_irobot_move_straight
  4136 ;;		_irobot_song_play
  4137 ;;		_irobot_stop_motion
  4138 ;;		_printf
  4139 ;;		_update_angle
  4140 ;;		_update_bump_and_cliff
  4141 ;;		_update_distance
  4142 ;; This function is called by:
  4143 ;;		_main
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text5
  4148  0134B2                     __ptext5:
  4149                           	opt stack 0
  4150  0134B2                     _mode2:
  4151                           	opt stack 14
  4152                           
  4153                           ;main.c: 222: update_bump_and_cliff();
  4154                           
  4155                           ;incstack = 0
  4156  0134B2  ECFE  F0AF         	call	_update_bump_and_cliff	;wreg free
  4157                           
  4158                           ;main.c: 223: update_distance();
  4159  0134B6  ECD7  F0B2         	call	_update_distance	;wreg free
  4160                           
  4161                           ;main.c: 224: update_angle();
  4162  0134BA  ECE0  F0B2         	call	_update_angle	;wreg free
  4163                           
  4164                           ;main.c: 226: angleTotal += iRAngle;
  4165  0134BE  0100               	movlb	0	; () banked
  4166  0134C0  51D0               	movf	_iRAngle& (0+255),w,b
  4167  0134C2  0100               	movlb	0	; () banked
  4168  0134C4  27CC               	addwf	_angleTotal& (0+255),f,b
  4169  0134C6  0100               	movlb	0	; () banked
  4170  0134C8  51D1               	movf	(_iRAngle+1)& (0+255),w,b
  4171  0134CA  0100               	movlb	0	; () banked
  4172  0134CC  23CD               	addwfc	(_angleTotal+1)& (0+255),f,b
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;main.c: 228: if (iRBumpLeft || iRBumpRight) {
  4176  0134CE  0100               	movlb	0	; () banked
  4177  0134D0  51E0               	movf	_iRBumpLeft& (0+255),w,b
  4178  0134D2  A4D8               	btfss	status,2,c
  4179  0134D4  D004               	goto	u13830
  4180                           
  4181                           ; BSR set to: 0
  4182  0134D6  0100               	movlb	0	; () banked
  4183  0134D8  51E1               	movf	_iRBumpRight& (0+255),w,b
  4184  0134DA  B4D8               	btfsc	status,2,c
  4185  0134DC  D006               	goto	l2354
  4186  0134DE                     u13830:
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;main.c: 229: irobot_song_play(0);
  4190                           
  4191                           ; BSR set to: 0
  4192  0134DE  0E00               	movlw	0
  4193  0134E0  ECBA  F0B2         	call	_irobot_song_play
  4194                           
  4195                           ;main.c: 230: irobot_stop_motion(0);
  4196  0134E4  0E00               	movlw	0
  4197  0134E6  EC78  F0AE         	call	_irobot_stop_motion
  4198  0134EA                     l2354:
  4199                           
  4200                           ;main.c: 231: }
  4201                           ;main.c: 232: if (angleTotal > 90) {
  4202  0134EA  0100               	movlb	0	; () banked
  4203  0134EC  BFCD               	btfsc	(_angleTotal+1)& (0+255),7,b
  4204  0134EE  D00B               	goto	l2357
  4205  0134F0  0100               	movlb	0	; () banked
  4206  0134F2  51CD               	movf	(_angleTotal+1)& (0+255),w,b
  4207  0134F4  E105               	bnz	u13840
  4208  0134F6  0E5B               	movlw	91
  4209  0134F8  0100               	movlb	0	; () banked
  4210  0134FA  5DCC               	subwf	_angleTotal& (0+255),w,b
  4211  0134FC  A0D8               	btfss	status,0,c
  4212  0134FE  D003               	goto	l2357
  4213  013500                     u13840:
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;main.c: 233: irobot_stop_motion(0);
  4217  013500  0E00               	movlw	0
  4218  013502  EC78  F0AE         	call	_irobot_stop_motion
  4219  013506                     l2357:
  4220                           
  4221                           ;main.c: 234: }
  4222                           ;main.c: 235: HMI_Poll();
  4223  013506  EC1E  F0AA         	call	_HMI_Poll	;wreg free
  4224                           
  4225                           ;main.c: 236: if (MXK_SwitchTo(eMXK_HMI)) {
  4226  01350A  0E01               	movlw	1
  4227  01350C  EC03  F0AF         	call	_MXK_SwitchTo
  4228  013510  0900               	iorlw	0
  4229  013512  B4D8               	btfsc	status,2,c
  4230  013514  0012               	return	
  4231                           
  4232                           ;main.c: 237: printf("%c", (char)35);
  4233  013516  0EFB               	movlw	low STR_1
  4234  013518  0100               	movlb	0	; () banked
  4235  01351A  6F75               	movwf	printf@f& (0+255),b
  4236  01351C  0EFF               	movlw	high STR_1
  4237  01351E  0100               	movlb	0	; () banked
  4238  013520  6F76               	movwf	(printf@f+1)& (0+255),b
  4239  013522  0E00               	movlw	0
  4240  013524  0100               	movlb	0	; () banked
  4241  013526  6F78               	movwf	(?_printf+3)& (0+255),b
  4242  013528  0E23               	movlw	35
  4243  01352A  6F77               	movwf	(?_printf+2)& (0+255),b
  4244  01352C  ECB1  F092         	call	_printf	;wreg free
  4245                           
  4246                           ;main.c: 238: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4247  013530  0E95               	movlw	low STR_2
  4248  013532  0100               	movlb	0	; () banked
  4249  013534  6F75               	movwf	printf@f& (0+255),b
  4250  013536  0EFF               	movlw	high STR_2
  4251  013538  0100               	movlb	0	; () banked
  4252  01353A  6F76               	movwf	(printf@f+1)& (0+255),b
  4253  01353C  C0CE  F077         	movff	_distanceTotal,?_printf+2
  4254  013540  C0CF  F078         	movff	_distanceTotal+1,?_printf+3
  4255  013544  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  4256  013548  0100               	movlb	0	; () banked
  4257  01354A  6B7A               	clrf	(?_printf+5)& (0+255),b
  4258  01354C  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  4259  013550  0100               	movlb	0	; () banked
  4260  013552  6B7C               	clrf	(?_printf+7)& (0+255),b
  4261  013554  ECB1  F092         	call	_printf	;wreg free
  4262                           
  4263                           ;main.c: 239: Console_Render();
  4264  013558  ECC5  F08F         	call	_Console_Render	;wreg free
  4265                           
  4266                           ;main.c: 241: int dist = 0;
  4267  01355C  0E00               	movlw	0
  4268  01355E  0100               	movlb	0	; () banked
  4269  013560  6F8D               	movwf	(mode2@dist+1)& (0+255),b
  4270  013562  0E00               	movlw	0
  4271  013564  6F8C               	movwf	mode2@dist& (0+255),b
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;main.c: 242: irobot_move_straight(200);
  4275  013566  0E00               	movlw	0
  4276  013568  0100               	movlb	0	; () banked
  4277  01356A  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4278  01356C  0EC8               	movlw	200
  4279  01356E  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4280  013570  EC5A  F0B2         	call	_irobot_move_straight	;wreg free
  4281                           
  4282                           ;main.c: 243: while (dist < 5000) {
  4283  013574  D025               	goto	l2359
  4284  013576                     
  4285                           ;main.c: 244: update_distance();
  4286  013576  ECD7  F0B2         	call	_update_distance	;wreg free
  4287                           
  4288                           ;main.c: 245: dist += iRDistance;
  4289  01357A  0100               	movlb	0	; () banked
  4290  01357C  51D2               	movf	_iRDistance& (0+255),w,b
  4291  01357E  0100               	movlb	0	; () banked
  4292  013580  278C               	addwf	mode2@dist& (0+255),f,b
  4293  013582  0100               	movlb	0	; () banked
  4294  013584  51D3               	movf	(_iRDistance+1)& (0+255),w,b
  4295  013586  0100               	movlb	0	; () banked
  4296  013588  238D               	addwfc	(mode2@dist+1)& (0+255),f,b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;main.c: 246: printf("%c", (char)35);
  4300  01358A  0EFB               	movlw	low STR_1
  4301  01358C  0100               	movlb	0	; () banked
  4302  01358E  6F75               	movwf	printf@f& (0+255),b
  4303  013590  0EFF               	movlw	high STR_1
  4304  013592  0100               	movlb	0	; () banked
  4305  013594  6F76               	movwf	(printf@f+1)& (0+255),b
  4306  013596  0E00               	movlw	0
  4307  013598  0100               	movlb	0	; () banked
  4308  01359A  6F78               	movwf	(?_printf+3)& (0+255),b
  4309  01359C  0E23               	movlw	35
  4310  01359E  6F77               	movwf	(?_printf+2)& (0+255),b
  4311  0135A0  ECB1  F092         	call	_printf	;wreg free
  4312                           
  4313                           ;main.c: 247: printf("Distance: %d\n", dist);
  4314  0135A4  0EED               	movlw	low STR_6
  4315  0135A6  0100               	movlb	0	; () banked
  4316  0135A8  6F75               	movwf	printf@f& (0+255),b
  4317  0135AA  0EFF               	movlw	high STR_6
  4318  0135AC  0100               	movlb	0	; () banked
  4319  0135AE  6F76               	movwf	(printf@f+1)& (0+255),b
  4320  0135B0  C08C  F077         	movff	mode2@dist,?_printf+2
  4321  0135B4  C08D  F078         	movff	mode2@dist+1,?_printf+3
  4322  0135B8  ECB1  F092         	call	_printf	;wreg free
  4323                           
  4324                           ;main.c: 248: Console_Render();
  4325  0135BC  ECC5  F08F         	call	_Console_Render	;wreg free
  4326  0135C0                     l2359:
  4327  0135C0  0100               	movlb	0	; () banked
  4328  0135C2  BF8D               	btfsc	(mode2@dist+1)& (0+255),7,b
  4329  0135C4  D7D8               	goto	l2360
  4330  0135C6  0E88               	movlw	136
  4331  0135C8  0100               	movlb	0	; () banked
  4332  0135CA  5D8C               	subwf	mode2@dist& (0+255),w,b
  4333  0135CC  0E13               	movlw	19
  4334  0135CE  0100               	movlb	0	; () banked
  4335  0135D0  598D               	subwfb	(mode2@dist+1)& (0+255),w,b
  4336  0135D2  A0D8               	btfss	status,0,c
  4337  0135D4  D7D0               	goto	l2360
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;main.c: 249: }
  4341                           ;main.c: 250: irobot_stop_motion(0);
  4342                           
  4343                           ; BSR set to: 0
  4344  0135D6  0E00               	movlw	0
  4345  0135D8  EC78  F0AE         	call	_irobot_stop_motion
  4346                           
  4347                           ;main.c: 252: if (MXK_Release())
  4348  0135DC  EC31  F0B2         	call	_MXK_Release	;wreg free
  4349  0135E0  0900               	iorlw	0
  4350  0135E2  B4D8               	btfsc	status,2,c
  4351  0135E4  0012               	return	
  4352                           
  4353                           ;main.c: 253: MXK_Dequeue();
  4354  0135E6  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  4355  0135EA  0012               	return	
  4356  0135EC                     __end_of_mode2:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postdec1	equ	0xFE5
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           status	equ	0xFD8
  4368                           
  4369 ;; *************** function _irobot_move_straight *****************
  4370 ;; Defined at:
  4371 ;;		line 314 in file "Library/iRobotSerial.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  straightSpee    2   25[BANK0 ] short 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4385 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;Total ram usage:        2 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    9
  4392 ;; This function calls:
  4393 ;;		_irobot_move
  4394 ;; This function is called by:
  4395 ;;		_move_and_rotate
  4396 ;;		_mode2
  4397 ;;		_mode4
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text6
  4402  0164B4                     __ptext6:
  4403                           	opt stack 0
  4404  0164B4                     _irobot_move_straight:
  4405                           	opt stack 20
  4406                           
  4407                           ;iRobotSerial.c: 315: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4408                           
  4409                           ;incstack = 0
  4410  0164B4  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4411  0164B8  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4412  0164BC  0E7F               	movlw	127
  4413  0164BE  0100               	movlb	0	; () banked
  4414  0164C0  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4415  0164C2  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  4416  0164C4  0E00               	movlw	0
  4417  0164C6  EC24  F0A2         	call	_irobot_move
  4418  0164CA  0012               	return		;funcret
  4419  0164CC                     __end_of_irobot_move_straight:
  4420                           	opt stack 0
  4421                           tblptru	equ	0xFF8
  4422                           tblptrh	equ	0xFF7
  4423                           tblptrl	equ	0xFF6
  4424                           tablat	equ	0xFF5
  4425                           postinc0	equ	0xFEE
  4426                           wreg	equ	0xFE8
  4427                           postdec1	equ	0xFE5
  4428                           fsr1h	equ	0xFE2
  4429                           fsr1l	equ	0xFE1
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _mode1 *****************
  4433 ;; Defined at:
  4434 ;;		line 136 in file "main.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  moveto          2    2[BANK3 ] int 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;Total ram usage:        8 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:   16
  4455 ;; This function calls:
  4456 ;;		_ADC_Start
  4457 ;;		_ADC_Voltage
  4458 ;;		_Console_Render
  4459 ;;		_HMI_Poll
  4460 ;;		_HMI_Render
  4461 ;;		_HMI_SetNumber
  4462 ;;		_MXK_Dequeue
  4463 ;;		_MXK_Release
  4464 ;;		_MXK_SwitchTo
  4465 ;;		_Motor_Move
  4466 ;;		_Motor_Speed
  4467 ;;		___fldiv
  4468 ;;		___fltol
  4469 ;;		_irobot_song_play
  4470 ;;		_irobot_stop_motion
  4471 ;;		_printf
  4472 ;;		_update_angle
  4473 ;;		_update_bump_and_cliff
  4474 ;;		_update_distance
  4475 ;; This function is called by:
  4476 ;;		_main
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text7
  4481  010CF4                     __ptext7:
  4482                           	opt stack 0
  4483  010CF4                     _mode1:
  4484                           	opt stack 14
  4485                           
  4486                           ;main.c: 137: update_bump_and_cliff();
  4487                           
  4488                           ;incstack = 0
  4489  010CF4  ECFE  F0AF         	call	_update_bump_and_cliff	;wreg free
  4490                           
  4491                           ;main.c: 138: update_distance();
  4492  010CF8  ECD7  F0B2         	call	_update_distance	;wreg free
  4493                           
  4494                           ;main.c: 139: update_angle();
  4495  010CFC  ECE0  F0B2         	call	_update_angle	;wreg free
  4496                           
  4497                           ;main.c: 143: if (iRBumpLeft || iRBumpRight) {
  4498  010D00  0100               	movlb	0	; () banked
  4499  010D02  51E0               	movf	_iRBumpLeft& (0+255),w,b
  4500  010D04  A4D8               	btfss	status,2,c
  4501  010D06  D004               	goto	u13630
  4502                           
  4503                           ; BSR set to: 0
  4504  010D08  0100               	movlb	0	; () banked
  4505  010D0A  51E1               	movf	_iRBumpRight& (0+255),w,b
  4506  010D0C  B4D8               	btfsc	status,2,c
  4507  010D0E  D006               	goto	l2324
  4508  010D10                     u13630:
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;main.c: 144: irobot_song_play(0);
  4512                           
  4513                           ; BSR set to: 0
  4514  010D10  0E00               	movlw	0
  4515  010D12  ECBA  F0B2         	call	_irobot_song_play
  4516                           
  4517                           ;main.c: 145: irobot_stop_motion(0);
  4518  010D16  0E00               	movlw	0
  4519  010D18  EC78  F0AE         	call	_irobot_stop_motion
  4520  010D1C                     l2324:
  4521                           
  4522                           ;main.c: 146: }
  4523                           ;main.c: 147: if (angleTotal > 83) {
  4524  010D1C  0100               	movlb	0	; () banked
  4525  010D1E  BFCD               	btfsc	(_angleTotal+1)& (0+255),7,b
  4526  010D20  D00B               	goto	l2327
  4527  010D22  0100               	movlb	0	; () banked
  4528  010D24  51CD               	movf	(_angleTotal+1)& (0+255),w,b
  4529  010D26  E105               	bnz	u13640
  4530  010D28  0E54               	movlw	84
  4531  010D2A  0100               	movlb	0	; () banked
  4532  010D2C  5DCC               	subwf	_angleTotal& (0+255),w,b
  4533  010D2E  A0D8               	btfss	status,0,c
  4534  010D30  D003               	goto	l2327
  4535  010D32                     u13640:
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;main.c: 148: irobot_stop_motion(0);
  4539  010D32  0E00               	movlw	0
  4540  010D34  EC78  F0AE         	call	_irobot_stop_motion
  4541  010D38                     l2327:
  4542                           
  4543                           ;main.c: 149: }
  4544                           ;main.c: 151: if (MXK_SwitchTo(eMXK_HMI)) {
  4545  010D38  0E01               	movlw	1
  4546  010D3A  EC03  F0AF         	call	_MXK_SwitchTo
  4547  010D3E  0900               	iorlw	0
  4548  010D40  B4D8               	btfsc	status,2,c
  4549  010D42  D029               	goto	l2329
  4550                           
  4551                           ;main.c: 152: printf("%c", (char)35);
  4552  010D44  0EFB               	movlw	low STR_1
  4553  010D46  0100               	movlb	0	; () banked
  4554  010D48  6F75               	movwf	printf@f& (0+255),b
  4555  010D4A  0EFF               	movlw	high STR_1
  4556  010D4C  0100               	movlb	0	; () banked
  4557  010D4E  6F76               	movwf	(printf@f+1)& (0+255),b
  4558  010D50  0E00               	movlw	0
  4559  010D52  0100               	movlb	0	; () banked
  4560  010D54  6F78               	movwf	(?_printf+3)& (0+255),b
  4561  010D56  0E23               	movlw	35
  4562  010D58  6F77               	movwf	(?_printf+2)& (0+255),b
  4563  010D5A  ECB1  F092         	call	_printf	;wreg free
  4564                           
  4565                           ;main.c: 153: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4566  010D5E  0E95               	movlw	low STR_2
  4567  010D60  0100               	movlb	0	; () banked
  4568  010D62  6F75               	movwf	printf@f& (0+255),b
  4569  010D64  0EFF               	movlw	high STR_2
  4570  010D66  0100               	movlb	0	; () banked
  4571  010D68  6F76               	movwf	(printf@f+1)& (0+255),b
  4572  010D6A  C0CE  F077         	movff	_distanceTotal,?_printf+2
  4573  010D6E  C0CF  F078         	movff	_distanceTotal+1,?_printf+3
  4574  010D72  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  4575  010D76  0100               	movlb	0	; () banked
  4576  010D78  6B7A               	clrf	(?_printf+5)& (0+255),b
  4577  010D7A  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  4578  010D7E  0100               	movlb	0	; () banked
  4579  010D80  6B7C               	clrf	(?_printf+7)& (0+255),b
  4580  010D82  ECB1  F092         	call	_printf	;wreg free
  4581                           
  4582                           ;main.c: 154: Console_Render();
  4583  010D86  ECC5  F08F         	call	_Console_Render	;wreg free
  4584                           
  4585                           ;main.c: 155: if (MXK_Release())
  4586  010D8A  EC31  F0B2         	call	_MXK_Release	;wreg free
  4587  010D8E  0900               	iorlw	0
  4588  010D90  A4D8               	btfss	status,2,c
  4589                           
  4590                           ;main.c: 156: MXK_Dequeue();
  4591  010D92  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  4592  010D96                     l2329:
  4593                           
  4594                           ;main.c: 157: }
  4595                           ;main.c: 158: HMI_Poll();
  4596  010D96  EC1E  F0AA         	call	_HMI_Poll	;wreg free
  4597                           
  4598                           ;main.c: 159: StepRotate = 0;
  4599  010D9A  0E00               	movlw	0
  4600  010D9C  0100               	movlb	0	; () banked
  4601  010D9E  6FC9               	movwf	(_StepRotate+1)& (0+255),b
  4602  010DA0  0E00               	movlw	0
  4603  010DA2  6FC8               	movwf	_StepRotate& (0+255),b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;main.c: 160: MinDist = 1000;
  4607  010DA4  0E03               	movlw	3
  4608  010DA6  0100               	movlb	0	; () banked
  4609  010DA8  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4610  010DAA  0EE8               	movlw	232
  4611  010DAC  6FFB               	movwf	_MinDist& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;main.c: 161: Stepstomin = 0;
  4615  010DAE  0E00               	movlw	0
  4616  010DB0  0100               	movlb	0	; () banked
  4617  010DB2  6FC7               	movwf	(_Stepstomin+1)& (0+255),b
  4618  010DB4  0E00               	movlw	0
  4619  010DB6  6FC6               	movwf	_Stepstomin& (0+255),b
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;main.c: 162: IRValue = 0;
  4623  010DB8  0E00               	movlw	0
  4624  010DBA  0100               	movlb	0	; () banked
  4625  010DBC  6FC5               	movwf	(_IRValue+1)& (0+255),b
  4626  010DBE  0E00               	movlw	0
  4627  010DC0  6FC4               	movwf	_IRValue& (0+255),b
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;main.c: 163: TimerX = 8;
  4631  010DC2  0E00               	movlw	0
  4632  010DC4  0100               	movlb	0	; () banked
  4633  010DC6  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4634  010DC8  0E08               	movlw	8
  4635  010DCA  6FF9               	movwf	_TimerX& (0+255),b
  4636                           
  4637                           ;main.c: 164: while (StepRotate < 400) {
  4638  010DCC  D0F9               	goto	u13750
  4639  010DCE                     
  4640                           ; BSR set to: 0
  4641                           ;main.c: 165: StepRotate++;
  4642                           
  4643                           ; BSR set to: 0
  4644  010DCE  0100               	movlb	0	; () banked
  4645  010DD0  4BC8               	infsnz	_StepRotate& (0+255),f,b
  4646  010DD2  2BC9               	incf	(_StepRotate+1)& (0+255),f,b
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;main.c: 166: ADC_Start(&ADC_AN0);
  4650  010DD4  0EF4               	movlw	low _ADC_AN0
  4651  010DD6  0100               	movlb	0	; () banked
  4652  010DD8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4653  010DDA  0E00               	movlw	high _ADC_AN0
  4654  010DDC  0100               	movlb	0	; () banked
  4655  010DDE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4656  010DE0  ECBA  F0A7         	call	_ADC_Start	;wreg free
  4657                           
  4658                           ;main.c: 167: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4659  010DE4  0EF4               	movlw	low _ADC_AN0
  4660  010DE6  0100               	movlb	0	; () banked
  4661  010DE8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4662  010DEA  0E00               	movlw	high _ADC_AN0
  4663  010DEC  0100               	movlb	0	; () banked
  4664  010DEE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4665  010DF0  EC77  F09D         	call	_ADC_Voltage	;wreg free
  4666  010DF4  C0A0  F3F6         	movff	?_ADC_Voltage,_mode1$15589
  4667  010DF8  C0A1  F3F7         	movff	?_ADC_Voltage+1,_mode1$15589+1
  4668  010DFC  C0A2  F3F8         	movff	?_ADC_Voltage+2,_mode1$15589+2
  4669  010E00  C0A3  F3F9         	movff	?_ADC_Voltage+3,_mode1$15589+3
  4670                           
  4671                           ;main.c: 167: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4672  010E04  C3F6  F072         	movff	_mode1$15589,___fldiv@a
  4673  010E08  C3F7  F073         	movff	_mode1$15589+1,___fldiv@a+1
  4674  010E0C  C3F8  F074         	movff	_mode1$15589+2,___fldiv@a+2
  4675  010E10  C3F9  F075         	movff	_mode1$15589+3,___fldiv@a+3
  4676  010E14  0E00               	movlw	0
  4677  010E16  0100               	movlb	0	; () banked
  4678  010E18  6F6E               	movwf	___fldiv@b& (0+255),b
  4679  010E1A  0E00               	movlw	0
  4680  010E1C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4681  010E1E  0E6C               	movlw	108
  4682  010E20  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4683  010E22  0E42               	movlw	66
  4684  010E24  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4685  010E26  EC86  F088         	call	___fldiv	;wreg free
  4686  010E2A  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4687  010E2E  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4688  010E32  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4689  010E36  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4690  010E3A  EC89  F09B         	call	___fltol	;wreg free
  4691  010E3E  C0B2  F0C4         	movff	?___fltol,_IRValue
  4692  010E42  C0B3  F0C5         	movff	?___fltol+1,_IRValue+1
  4693                           
  4694                           ;main.c: 168: if (MXK_SwitchTo(eMXK_HMI)) {
  4695  010E46  0E01               	movlw	1
  4696  010E48  EC03  F0AF         	call	_MXK_SwitchTo
  4697  010E4C  0900               	iorlw	0
  4698  010E4E  B4D8               	btfsc	status,2,c
  4699  010E50  D00E               	goto	l2333
  4700                           
  4701                           ;main.c: 169: HMI_SetNumber(IRValue);
  4702  010E52  C0C4  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4703  010E56  C0C5  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4704  010E5A  EC2C  F0B1         	call	_HMI_SetNumber	;wreg free
  4705                           
  4706                           ;main.c: 170: HMI_Render();
  4707  010E5E  EC64  F0AF         	call	_HMI_Render	;wreg free
  4708                           
  4709                           ;main.c: 171: if (MXK_Release())
  4710  010E62  EC31  F0B2         	call	_MXK_Release	;wreg free
  4711  010E66  0900               	iorlw	0
  4712  010E68  A4D8               	btfss	status,2,c
  4713                           
  4714                           ;main.c: 172: MXK_Dequeue();
  4715  010E6A  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  4716  010E6E                     l2333:
  4717                           
  4718                           ;main.c: 173: }
  4719                           ;main.c: 174: if (IRValue < MinDist) {
  4720  010E6E  0100               	movlb	0	; () banked
  4721  010E70  51FB               	movf	_MinDist& (0+255),w,b
  4722  010E72  0100               	movlb	0	; () banked
  4723  010E74  5DC4               	subwf	_IRValue& (0+255),w,b
  4724  010E76  0100               	movlb	0	; () banked
  4725  010E78  51C5               	movf	(_IRValue+1)& (0+255),w,b
  4726  010E7A  0A80               	xorlw	128
  4727  010E7C  0103               	movlb	3	; () banked
  4728  010E7E  6FF2               	movwf	??_mode1& (0+255),b
  4729  010E80  0100               	movlb	0	; () banked
  4730  010E82  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4731  010E84  0A80               	xorlw	128
  4732  010E86  0103               	movlb	3	; () banked
  4733  010E88  59F2               	subwfb	??_mode1& (0+255),w,b
  4734  010E8A  B0D8               	btfsc	status,0,c
  4735  010E8C  D008               	goto	l2334
  4736                           
  4737                           ; BSR set to: 3
  4738                           ;main.c: 175: MinDist = IRValue;
  4739  010E8E  C0C4  F0FB         	movff	_IRValue,_MinDist
  4740  010E92  C0C5  F0FC         	movff	_IRValue+1,_MinDist+1
  4741                           
  4742                           ;main.c: 176: Stepstomin = StepRotate;
  4743  010E96  C0C8  F0C6         	movff	_StepRotate,_Stepstomin
  4744  010E9A  C0C9  F0C7         	movff	_StepRotate+1,_Stepstomin+1
  4745  010E9E                     l2334:
  4746                           
  4747                           ; BSR set to: 3
  4748                           ;main.c: 177: }
  4749                           ;main.c: 178: if (MXK_SwitchTo(eMXK_Motor)) {
  4750                           
  4751                           ; BSR set to: 3
  4752  010E9E  0E08               	movlw	8
  4753  010EA0  EC03  F0AF         	call	_MXK_SwitchTo
  4754  010EA4  0900               	iorlw	0
  4755  010EA6  B4D8               	btfsc	status,2,c
  4756  010EA8  D020               	goto	l2336
  4757                           
  4758                           ;main.c: 179: Motor_Speed(&Stepper, (50));
  4759  010EAA  0EC9               	movlw	low _Stepper
  4760  010EAC  0100               	movlb	0	; () banked
  4761  010EAE  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4762  010EB0  0E03               	movlw	high _Stepper
  4763  010EB2  0100               	movlb	0	; () banked
  4764  010EB4  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4765  010EB6  0E00               	movlw	0
  4766  010EB8  0100               	movlb	0	; () banked
  4767  010EBA  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4768  010EBC  0E32               	movlw	50
  4769  010EBE  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4770  010EC0  EC17  F0B1         	call	_Motor_Speed	;wreg free
  4771                           
  4772                           ;main.c: 180: Motor_Move(&Stepper, 1);
  4773  010EC4  0EC9               	movlw	low _Stepper
  4774  010EC6  0100               	movlb	0	; () banked
  4775  010EC8  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4776  010ECA  0E03               	movlw	high _Stepper
  4777  010ECC  0100               	movlb	0	; () banked
  4778  010ECE  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4779  010ED0  0E00               	movlw	0
  4780  010ED2  0100               	movlb	0	; () banked
  4781  010ED4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4782  010ED6  0E01               	movlw	1
  4783  010ED8  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4784  010EDA  EC1B  F0B0         	call	_Motor_Move	;wreg free
  4785                           
  4786                           ;main.c: 181: if (MXK_Release())
  4787  010EDE  EC31  F0B2         	call	_MXK_Release	;wreg free
  4788  010EE2  0900               	iorlw	0
  4789  010EE4  A4D8               	btfss	status,2,c
  4790                           
  4791                           ;main.c: 182: MXK_Dequeue();
  4792  010EE6  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  4793  010EEA                     l2336:
  4794                           
  4795                           ;main.c: 183: }
  4796                           ;main.c: 184: TimerX = 10;
  4797  010EEA  0E00               	movlw	0
  4798  010EEC  0100               	movlb	0	; () banked
  4799  010EEE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4800  010EF0  0E0A               	movlw	10
  4801  010EF2  6FF9               	movwf	_TimerX& (0+255),b
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;main.c: 185: if (TimerX > 0) {
  4805  010EF4  0100               	movlb	0	; () banked
  4806  010EF6  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4807  010EF8  D063               	goto	u13750
  4808  010EFA  0100               	movlb	0	; () banked
  4809  010EFC  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4810  010EFE  E156               	bnz	l16430
  4811  010F00  0100               	movlb	0	; () banked
  4812  010F02  05F9               	decf	_TimerX& (0+255),w,b
  4813  010F04  B0D8               	btfsc	status,0,c
  4814  010F06  D052               	goto	l2338
  4815  010F08  D05B               	goto	u13750
  4816  010F0A                     l16412:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;main.c: 187: ADC_Start(&ADC_AN0);
  4820  010F0A  0EF4               	movlw	low _ADC_AN0
  4821  010F0C  0100               	movlb	0	; () banked
  4822  010F0E  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4823  010F10  0E00               	movlw	high _ADC_AN0
  4824  010F12  0100               	movlb	0	; () banked
  4825  010F14  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4826  010F16  ECBA  F0A7         	call	_ADC_Start	;wreg free
  4827                           
  4828                           ;main.c: 188: if (MXK_SwitchTo(eMXK_HMI)) {
  4829  010F1A  0E01               	movlw	1
  4830  010F1C  EC03  F0AF         	call	_MXK_SwitchTo
  4831  010F20  0900               	iorlw	0
  4832  010F22  B4D8               	btfsc	status,2,c
  4833  010F24  D00E               	goto	l2341
  4834                           
  4835                           ;main.c: 189: HMI_SetNumber(IRValue);
  4836  010F26  C0C4  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4837  010F2A  C0C5  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4838  010F2E  EC2C  F0B1         	call	_HMI_SetNumber	;wreg free
  4839                           
  4840                           ;main.c: 190: HMI_Render();
  4841  010F32  EC64  F0AF         	call	_HMI_Render	;wreg free
  4842                           
  4843                           ;main.c: 191: if (MXK_Release())
  4844  010F36  EC31  F0B2         	call	_MXK_Release	;wreg free
  4845  010F3A  0900               	iorlw	0
  4846  010F3C  A4D8               	btfss	status,2,c
  4847                           
  4848                           ;main.c: 192: MXK_Dequeue();
  4849  010F3E  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  4850  010F42                     l2341:
  4851                           
  4852                           ;main.c: 193: }
  4853                           ;main.c: 194: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4854  010F42  0EF4               	movlw	low _ADC_AN0
  4855  010F44  0100               	movlb	0	; () banked
  4856  010F46  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4857  010F48  0E00               	movlw	high _ADC_AN0
  4858  010F4A  0100               	movlb	0	; () banked
  4859  010F4C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4860  010F4E  EC77  F09D         	call	_ADC_Voltage	;wreg free
  4861  010F52  C0A0  F3F6         	movff	?_ADC_Voltage,_mode1$15589
  4862  010F56  C0A1  F3F7         	movff	?_ADC_Voltage+1,_mode1$15589+1
  4863  010F5A  C0A2  F3F8         	movff	?_ADC_Voltage+2,_mode1$15589+2
  4864  010F5E  C0A3  F3F9         	movff	?_ADC_Voltage+3,_mode1$15589+3
  4865                           
  4866                           ;main.c: 193: }
  4867                           ;main.c: 194: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4868  010F62  C3F6  F072         	movff	_mode1$15589,___fldiv@a
  4869  010F66  C3F7  F073         	movff	_mode1$15589+1,___fldiv@a+1
  4870  010F6A  C3F8  F074         	movff	_mode1$15589+2,___fldiv@a+2
  4871  010F6E  C3F9  F075         	movff	_mode1$15589+3,___fldiv@a+3
  4872  010F72  0E00               	movlw	0
  4873  010F74  0100               	movlb	0	; () banked
  4874  010F76  6F6E               	movwf	___fldiv@b& (0+255),b
  4875  010F78  0E00               	movlw	0
  4876  010F7A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4877  010F7C  0E6C               	movlw	108
  4878  010F7E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4879  010F80  0E42               	movlw	66
  4880  010F82  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4881  010F84  EC86  F088         	call	___fldiv	;wreg free
  4882  010F88  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4883  010F8C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4884  010F90  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4885  010F94  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4886  010F98  EC89  F09B         	call	___fltol	;wreg free
  4887  010F9C  C0B2  F0C4         	movff	?___fltol,_IRValue
  4888  010FA0  C0B3  F0C5         	movff	?___fltol+1,_IRValue+1
  4889                           
  4890                           ;main.c: 195: TimerX--;
  4891  010FA4  0100               	movlb	0	; () banked
  4892  010FA6  07F9               	decf	_TimerX& (0+255),f,b
  4893  010FA8  A0D8               	btfss	status,0,c
  4894  010FAA  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4895  010FAC                     l2338:
  4896  010FAC                     l16430:
  4897                           
  4898                           ; BSR set to: 0
  4899  010FAC  0100               	movlb	0	; () banked
  4900  010FAE  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4901  010FB0  D007               	goto	u13750
  4902  010FB2  0100               	movlb	0	; () banked
  4903  010FB4  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4904  010FB6  E1A9               	bnz	l16412
  4905  010FB8  0100               	movlb	0	; () banked
  4906  010FBA  05F9               	decf	_TimerX& (0+255),w,b
  4907  010FBC  B0D8               	btfsc	status,0,c
  4908  010FBE  D7A5               	goto	l2339
  4909  010FC0                     u13750:
  4910                           
  4911                           ; BSR set to: 0
  4912                           
  4913                           ; BSR set to: 0
  4914                           
  4915                           ; BSR set to: 0
  4916                           
  4917                           ; BSR set to: 0
  4918  010FC0  0100               	movlb	0	; () banked
  4919  010FC2  BFC9               	btfsc	(_StepRotate+1)& (0+255),7,b
  4920  010FC4  D704               	goto	l2331
  4921  010FC6  0E90               	movlw	144
  4922  010FC8  0100               	movlb	0	; () banked
  4923  010FCA  5DC8               	subwf	_StepRotate& (0+255),w,b
  4924  010FCC  0E01               	movlw	1
  4925  010FCE  0100               	movlb	0	; () banked
  4926  010FD0  59C9               	subwfb	(_StepRotate+1)& (0+255),w,b
  4927  010FD2  A0D8               	btfss	status,0,c
  4928  010FD4  D6FC               	goto	l2331
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;main.c: 196: }
  4932                           ;main.c: 197: }
  4933                           ;main.c: 198: }
  4934                           ;main.c: 199: if (MXK_SwitchTo(eMXK_Motor)) {
  4935                           
  4936                           ; BSR set to: 0
  4937  010FD6  0E08               	movlw	8
  4938  010FD8  EC03  F0AF         	call	_MXK_SwitchTo
  4939  010FDC  0900               	iorlw	0
  4940  010FDE  B4D8               	btfsc	status,2,c
  4941  010FE0  D08A               	goto	l2346
  4942                           
  4943                           ;main.c: 200: Motor_Speed(&Stepper, (50));
  4944  010FE2  0EC9               	movlw	low _Stepper
  4945  010FE4  0100               	movlb	0	; () banked
  4946  010FE6  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4947  010FE8  0E03               	movlw	high _Stepper
  4948  010FEA  0100               	movlb	0	; () banked
  4949  010FEC  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4950  010FEE  0E00               	movlw	0
  4951  010FF0  0100               	movlb	0	; () banked
  4952  010FF2  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4953  010FF4  0E32               	movlw	50
  4954  010FF6  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4955  010FF8  EC17  F0B1         	call	_Motor_Speed	;wreg free
  4956                           
  4957                           ;main.c: 201: int moveto = 400 - Stepstomin;
  4958  010FFC  C0C6  F3F2         	movff	_Stepstomin,??_mode1
  4959  011000  C0C7  F3F3         	movff	_Stepstomin+1,??_mode1+1
  4960  011004  0103               	movlb	3	; () banked
  4961  011006  1FF2               	comf	??_mode1& (0+255),f,b
  4962  011008  1FF3               	comf	(??_mode1+1)& (0+255),f,b
  4963  01100A  4BF2               	infsnz	??_mode1& (0+255),f,b
  4964  01100C  2BF3               	incf	(??_mode1+1)& (0+255),f,b
  4965  01100E  0E90               	movlw	144
  4966  011010  0103               	movlb	3	; () banked
  4967  011012  25F2               	addwf	??_mode1& (0+255),w,b
  4968  011014  0103               	movlb	3	; () banked
  4969  011016  6FF4               	movwf	mode1@moveto& (0+255),b
  4970  011018  0E01               	movlw	1
  4971  01101A  0103               	movlb	3	; () banked
  4972  01101C  21F3               	addwfc	(??_mode1+1)& (0+255),w,b
  4973  01101E  0103               	movlb	3	; () banked
  4974  011020  6FF5               	movwf	(mode1@moveto+1)& (0+255),b
  4975                           
  4976                           ; BSR set to: 3
  4977                           ;main.c: 203: Motor_Move(&Stepper, (-moveto));
  4978  011022  0EC9               	movlw	low _Stepper
  4979  011024  0100               	movlb	0	; () banked
  4980  011026  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4981  011028  0E03               	movlw	high _Stepper
  4982  01102A  0100               	movlb	0	; () banked
  4983  01102C  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4984  01102E  C3F4  F3F2         	movff	mode1@moveto,??_mode1
  4985  011032  C3F5  F3F3         	movff	mode1@moveto+1,??_mode1+1
  4986  011036  0103               	movlb	3	; () banked
  4987  011038  1FF2               	comf	??_mode1& (0+255),f,b
  4988  01103A  1FF3               	comf	(??_mode1+1)& (0+255),f,b
  4989  01103C  4BF2               	infsnz	??_mode1& (0+255),f,b
  4990  01103E  2BF3               	incf	(??_mode1+1)& (0+255),f,b
  4991  011040  C3F2  F065         	movff	??_mode1,Motor_Move@pDelta
  4992  011044  C3F3  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  4993  011048  EC1B  F0B0         	call	_Motor_Move	;wreg free
  4994                           
  4995                           ;main.c: 204: if (MXK_Release())
  4996  01104C  EC31  F0B2         	call	_MXK_Release	;wreg free
  4997  011050  0900               	iorlw	0
  4998  011052  B4D8               	btfsc	status,2,c
  4999  011054  D050               	goto	l2346
  5000                           
  5001                           ;main.c: 205: MXK_Dequeue();
  5002  011056  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  5003                           
  5004                           ;main.c: 206: }
  5005                           ;main.c: 207: while (Stepper.mDelta > 0) {
  5006  01105A  D04D               	goto	l2346
  5007  01105C                     l16446:
  5008                           
  5009                           ;main.c: 208: ADC_Start(&ADC_AN0);
  5010  01105C  0EF4               	movlw	low _ADC_AN0
  5011  01105E  0100               	movlb	0	; () banked
  5012  011060  6F62               	movwf	ADC_Start@pInput& (0+255),b
  5013  011062  0E00               	movlw	high _ADC_AN0
  5014  011064  0100               	movlb	0	; () banked
  5015  011066  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5016  011068  ECBA  F0A7         	call	_ADC_Start	;wreg free
  5017                           
  5018                           ;main.c: 209: if (MXK_SwitchTo(eMXK_HMI)) {
  5019  01106C  0E01               	movlw	1
  5020  01106E  EC03  F0AF         	call	_MXK_SwitchTo
  5021  011072  0900               	iorlw	0
  5022  011074  B4D8               	btfsc	status,2,c
  5023  011076  D00E               	goto	l2349
  5024                           
  5025                           ;main.c: 210: HMI_SetNumber(IRValue);
  5026  011078  C0C4  F076         	movff	_IRValue,HMI_SetNumber@pInput
  5027  01107C  C0C5  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5028  011080  EC2C  F0B1         	call	_HMI_SetNumber	;wreg free
  5029                           
  5030                           ;main.c: 211: HMI_Render();
  5031  011084  EC64  F0AF         	call	_HMI_Render	;wreg free
  5032                           
  5033                           ;main.c: 212: if (MXK_Release())
  5034  011088  EC31  F0B2         	call	_MXK_Release	;wreg free
  5035  01108C  0900               	iorlw	0
  5036  01108E  A4D8               	btfss	status,2,c
  5037                           
  5038                           ;main.c: 213: MXK_Dequeue();
  5039  011090  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
  5040  011094                     l2349:
  5041                           
  5042                           ;main.c: 214: }
  5043                           ;main.c: 215: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5044  011094  0EF4               	movlw	low _ADC_AN0
  5045  011096  0100               	movlb	0	; () banked
  5046  011098  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  5047  01109A  0E00               	movlw	high _ADC_AN0
  5048  01109C  0100               	movlb	0	; () banked
  5049  01109E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5050  0110A0  EC77  F09D         	call	_ADC_Voltage	;wreg free
  5051  0110A4  C0A0  F3F6         	movff	?_ADC_Voltage,_mode1$15589
  5052  0110A8  C0A1  F3F7         	movff	?_ADC_Voltage+1,_mode1$15589+1
  5053  0110AC  C0A2  F3F8         	movff	?_ADC_Voltage+2,_mode1$15589+2
  5054  0110B0  C0A3  F3F9         	movff	?_ADC_Voltage+3,_mode1$15589+3
  5055                           
  5056                           ;main.c: 214: }
  5057                           ;main.c: 215: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5058  0110B4  C3F6  F072         	movff	_mode1$15589,___fldiv@a
  5059  0110B8  C3F7  F073         	movff	_mode1$15589+1,___fldiv@a+1
  5060  0110BC  C3F8  F074         	movff	_mode1$15589+2,___fldiv@a+2
  5061  0110C0  C3F9  F075         	movff	_mode1$15589+3,___fldiv@a+3
  5062  0110C4  0E00               	movlw	0
  5063  0110C6  0100               	movlb	0	; () banked
  5064  0110C8  6F6E               	movwf	___fldiv@b& (0+255),b
  5065  0110CA  0E00               	movlw	0
  5066  0110CC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  5067  0110CE  0E6C               	movlw	108
  5068  0110D0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  5069  0110D2  0E42               	movlw	66
  5070  0110D4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  5071  0110D6  EC86  F088         	call	___fldiv	;wreg free
  5072  0110DA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  5073  0110DE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  5074  0110E2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  5075  0110E6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  5076  0110EA  EC89  F09B         	call	___fltol	;wreg free
  5077  0110EE  C0B2  F0C4         	movff	?___fltol,_IRValue
  5078  0110F2  C0B3  F0C5         	movff	?___fltol+1,_IRValue+1
  5079  0110F6                     l2346:
  5080  0110F6  0103               	movlb	3	; () banked
  5081  0110F8  BFCA               	btfsc	(_Stepper+1)& (0+255),7,b
  5082  0110FA  0012               	return	
  5083  0110FC  0103               	movlb	3	; () banked
  5084  0110FE  51CA               	movf	(_Stepper+1)& (0+255),w,b
  5085  011100  E1AD               	bnz	l16446
  5086  011102  0103               	movlb	3	; () banked
  5087  011104  05C9               	decf	_Stepper& (0+255),w,b
  5088  011106  A0D8               	btfss	status,0,c
  5089  011108  0012               	return	
  5090  01110A  D7A8               	goto	l2347
  5091  01110C                     __end_of_mode1:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           postinc0	equ	0xFEE
  5098                           wreg	equ	0xFE8
  5099                           postdec1	equ	0xFE5
  5100                           fsr1h	equ	0xFE2
  5101                           fsr1l	equ	0xFE1
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _update_distance *****************
  5105 ;; Defined at:
  5106 ;;		line 326 in file "Library/iRobotSerial.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:   10
  5127 ;; This function calls:
  5128 ;;		_irobot_query_and_update
  5129 ;; This function is called by:
  5130 ;;		_move_and_rotate
  5131 ;;		_mode1
  5132 ;;		_mode2
  5133 ;;		_mode4
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text8
  5138  0165AE                     __ptext8:
  5139                           	opt stack 0
  5140  0165AE                     _update_distance:
  5141                           	opt stack 19
  5142                           
  5143                           ;iRobotSerial.c: 327: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5144                           
  5145                           ; BSR set to: 3
  5146                           ;incstack = 0
  5147  0165AE  0E00               	movlw	0
  5148  0165B0  0100               	movlb	0	; () banked
  5149  0165B2  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5150  0165B4  0E13               	movlw	19
  5151  0165B6  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5152  0165B8  0E01               	movlw	1
  5153  0165BA  EC0A  F096         	call	_irobot_query_and_update
  5154  0165BE  0012               	return		;funcret
  5155  0165C0                     __end_of_update_distance:
  5156                           	opt stack 0
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           postinc0	equ	0xFEE
  5162                           wreg	equ	0xFE8
  5163                           postdec1	equ	0xFE5
  5164                           fsr1h	equ	0xFE2
  5165                           fsr1l	equ	0xFE1
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function _update_bump_and_cliff *****************
  5169 ;; Defined at:
  5170 ;;		line 319 in file "Library/iRobotSerial.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      void 
  5177 ;; Registers used:
  5178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:   10
  5191 ;; This function calls:
  5192 ;;		_irobot_query_and_update
  5193 ;; This function is called by:
  5194 ;;		_mode1
  5195 ;;		_mode2
  5196 ;;		_mode4
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text9
  5201  015FFC                     __ptext9:
  5202                           	opt stack 0
  5203  015FFC                     _update_bump_and_cliff:
  5204                           	opt stack 19
  5205                           
  5206                           ;iRobotSerial.c: 320: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5207                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5208                           ;iRobotSerial.c: 322: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5209                           
  5210                           ;incstack = 0
  5211  015FFC  0E00               	movlw	0
  5212  015FFE  0100               	movlb	0	; () banked
  5213  016000  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5214  016002  0E07               	movlw	7
  5215  016004  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5216  016006  0E00               	movlw	0
  5217  016008  0100               	movlb	0	; () banked
  5218  01600A  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5219  01600C  0E09               	movlw	9
  5220  01600E  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5221  016010  0E00               	movlw	0
  5222  016012  0100               	movlb	0	; () banked
  5223  016014  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5224  016016  0E0A               	movlw	10
  5225  016018  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5226  01601A  0E00               	movlw	0
  5227  01601C  0100               	movlb	0	; () banked
  5228  01601E  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5229  016020  0E0B               	movlw	11
  5230  016022  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5231  016024  0E00               	movlw	0
  5232  016026  0100               	movlb	0	; () banked
  5233  016028  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5234  01602A  0E0C               	movlw	12
  5235  01602C  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5236  01602E  0E05               	movlw	5
  5237  016030  EC0A  F096         	call	_irobot_query_and_update
  5238  016034  0012               	return		;funcret
  5239  016036                     __end_of_update_bump_and_cliff:
  5240                           	opt stack 0
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1h	equ	0xFE2
  5249                           fsr1l	equ	0xFE1
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function _update_angle *****************
  5253 ;; Defined at:
  5254 ;;		line 331 in file "Library/iRobotSerial.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:   10
  5275 ;; This function calls:
  5276 ;;		_irobot_query_and_update
  5277 ;; This function is called by:
  5278 ;;		_irobot_rotate
  5279 ;;		_mode1
  5280 ;;		_mode2
  5281 ;;		_mode4
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text10
  5286  0165C0                     __ptext10:
  5287                           	opt stack 0
  5288  0165C0                     _update_angle:
  5289                           	opt stack 19
  5290                           
  5291                           ;iRobotSerial.c: 332: irobot_query_and_update(1, iR_PKT_ANGLE);
  5292                           
  5293                           ;incstack = 0
  5294  0165C0  0E00               	movlw	0
  5295  0165C2  0100               	movlb	0	; () banked
  5296  0165C4  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5297  0165C6  0E14               	movlw	20
  5298  0165C8  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5299  0165CA  0E01               	movlw	1
  5300  0165CC  EC0A  F096         	call	_irobot_query_and_update
  5301  0165D0  0012               	return		;funcret
  5302  0165D2                     __end_of_update_angle:
  5303                           	opt stack 0
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1h	equ	0xFE2
  5312                           fsr1l	equ	0xFE1
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function _irobot_query_and_update *****************
  5316 ;; Defined at:
  5317 ;;		line 130 in file "Library/iRobotSerial.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  numberOfPack    1    wreg     unsigned char 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5322 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5323 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5324 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5325 ;;		 -> ?_irobot_query_and_update(1), 
  5326 ;;  i               1   28[BANK0 ] unsigned char 
  5327 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5328 ;;  j               1   26[BANK0 ] unsigned char 
  5329 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5330 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5340 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;Total ram usage:      535 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    9
  5347 ;; This function calls:
  5348 ;;		_eusart_getch
  5349 ;;		_eusart_putch
  5350 ;;		_get_packet_size
  5351 ;;		_rx_assign
  5352 ;; This function is called by:
  5353 ;;		_update_bump_and_cliff
  5354 ;;		_update_distance
  5355 ;;		_update_angle
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text11
  5360  012C14                     __ptext11:
  5361                           	opt stack 0
  5362  012C14                     _irobot_query_and_update:
  5363                           	opt stack 19
  5364                           
  5365                           ;incstack = 0
  5366                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5367  012C14  0100               	movlb	0	; () banked
  5368  012C16  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5369                           
  5370                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5371  012C18  0E00               	movlw	0
  5372  012C1A  0100               	movlb	0	; () banked
  5373  012C1C  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5374  012C1E  0E00               	movlw	0
  5375  012C20  0100               	movlb	0	; () banked
  5376  012C22  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5377                           
  5378                           ;iRobotSerial.c: 133: va_list packetIDs;
  5379                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5380  012C24  0E66               	movlw	low ?_irobot_query_and_update
  5381  012C26  0100               	movlb	0	; () banked
  5382  012C28  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5383  012C2A  0E00               	movlw	high ?_irobot_query_and_update
  5384  012C2C  0100               	movlb	0	; () banked
  5385  012C2E  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5389  012C30  0E95               	movlw	149
  5390  012C32  EC00  F0B3         	call	_eusart_putch
  5391                           
  5392                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5393  012C36  0100               	movlb	0	; () banked
  5394  012C38  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5395  012C3A  EC00  F0B3         	call	_eusart_putch
  5396                           
  5397                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  5398  012C3E  0E00               	movlw	0
  5399  012C40  0100               	movlb	0	; () banked
  5400  012C42  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5401  012C44  D023               	goto	l2095
  5402  012C46                     
  5403                           ; BSR set to: 0
  5404                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5405                           
  5406                           ; BSR set to: 0
  5407  012C46  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5408  012C4A  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5409  012C4E  50DF               	movf	indf2,w,c
  5410  012C50  0100               	movlb	0	; () banked
  5411  012C52  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5412                           
  5413                           ; BSR set to: 0
  5414  012C54  0E02               	movlw	2
  5415  012C56  0100               	movlb	0	; () banked
  5416  012C58  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5417  012C5A  0E00               	movlw	0
  5418  012C5C  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5422  012C5E  0100               	movlb	0	; () banked
  5423  012C60  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5424  012C62  EC9B  F0AB         	call	_get_packet_size
  5425  012C66  0100               	movlb	0	; () banked
  5426  012C68  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5430  012C6A  0100               	movlb	0	; () banked
  5431  012C6C  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5432  012C6E  0D01               	mullw	1
  5433  012C70  0E00               	movlw	low irobot_query_and_update@TXArray
  5434  012C72  24F3               	addwf	prodl,w,c
  5435  012C74  6ED9               	movwf	fsr2l,c
  5436  012C76  0E02               	movlw	high irobot_query_and_update@TXArray
  5437  012C78  20F4               	addwfc	prodh,w,c
  5438  012C7A  6EDA               	movwf	fsr2h,c
  5439  012C7C  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5443  012C80  0100               	movlb	0	; () banked
  5444  012C82  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5445  012C84  EC00  F0B3         	call	_eusart_putch
  5446  012C88  0100               	movlb	0	; () banked
  5447  012C8A  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5448  012C8C                     l2095:
  5449                           
  5450                           ; BSR set to: 0
  5451                           
  5452                           ; BSR set to: 0
  5453  012C8C  0100               	movlb	0	; () banked
  5454  012C8E  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5455  012C90  0100               	movlb	0	; () banked
  5456  012C92  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5457  012C94  A0D8               	btfss	status,0,c
  5458  012C96  D7D7               	goto	l2096
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;iRobotSerial.c: 142: }
  5462                           ;iRobotSerial.c: 143: ;
  5463                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5464                           
  5465                           ; BSR set to: 0
  5466  012C98  0E00               	movlw	0
  5467  012C9A  0100               	movlb	0	; () banked
  5468  012C9C  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5469  012C9E  D00E               	goto	l2098
  5470  012CA0                     
  5471                           ; BSR set to: 0
  5472                           
  5473                           ; BSR set to: 0
  5474  012CA0  0100               	movlb	0	; () banked
  5475  012CA2  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5476  012CA4  0D01               	mullw	1
  5477  012CA6  0E00               	movlw	low irobot_query_and_update@RXArray
  5478  012CA8  24F3               	addwf	prodl,w,c
  5479  012CAA  6ED9               	movwf	fsr2l,c
  5480  012CAC  0E01               	movlw	high irobot_query_and_update@RXArray
  5481  012CAE  20F4               	addwfc	prodh,w,c
  5482  012CB0  6EDA               	movwf	fsr2h,c
  5483  012CB2  EC43  F0B3         	call	_eusart_getch	;wreg free
  5484  012CB6  6EDF               	movwf	indf2,c
  5485  012CB8  0100               	movlb	0	; () banked
  5486  012CBA  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5487  012CBC                     l2098:
  5488                           
  5489                           ; BSR set to: 0
  5490                           
  5491                           ; BSR set to: 0
  5492  012CBC  0100               	movlb	0	; () banked
  5493  012CBE  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5494  012CC0  0100               	movlb	0	; () banked
  5495  012CC2  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5496  012CC4  A0D8               	btfss	status,0,c
  5497  012CC6  D7EC               	goto	l2099
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  5501                           
  5502                           ; BSR set to: 0
  5503  012CC8  0E00               	movlw	0
  5504  012CCA  0100               	movlb	0	; () banked
  5505  012CCC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5506  012CCE  D05E               	goto	l2101
  5507  012CD0                     l2102:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5511  012CD0  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5512  012CD4  D021               	goto	l2103
  5513  012CD6                     
  5514                           ; BSR set to: 0
  5515                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5516                           
  5517                           ; BSR set to: 0
  5518  012CD6  0100               	movlb	0	; () banked
  5519  012CD8  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5520  012CDA  0D01               	mullw	1
  5521  012CDC  0E00               	movlw	low irobot_query_and_update@RXArray
  5522  012CDE  24F3               	addwf	prodl,w,c
  5523  012CE0  6ED9               	movwf	fsr2l,c
  5524  012CE2  0E01               	movlw	high irobot_query_and_update@RXArray
  5525  012CE4  20F4               	addwfc	prodh,w,c
  5526  012CE6  6EDA               	movwf	fsr2h,c
  5527  012CE8  50DF               	movf	indf2,w,c
  5528  012CEA  0100               	movlb	0	; () banked
  5529  012CEC  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5530  012CEE  0100               	movlb	0	; () banked
  5531  012CF0  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5532  012CF2  0800               	sublw	0
  5533  012CF4  0100               	movlb	0	; () banked
  5534  012CF6  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5535  012CF8  0100               	movlb	0	; () banked
  5536  012CFA  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5537  012CFC  0100               	movlb	0	; () banked
  5538  012CFE  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5539  012D00  0D01               	mullw	1
  5540  012D02  0E00               	movlw	low irobot_query_and_update@TXArray
  5541  012D04  24F3               	addwf	prodl,w,c
  5542  012D06  6ED9               	movwf	fsr2l,c
  5543  012D08  0E02               	movlw	high irobot_query_and_update@TXArray
  5544  012D0A  20F4               	addwfc	prodh,w,c
  5545  012D0C  6EDA               	movwf	fsr2h,c
  5546  012D0E  50DF               	movf	indf2,w,c
  5547  012D10  EC8F  F09C         	call	_rx_assign
  5548  012D14  0100               	movlb	0	; () banked
  5549  012D16  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5550  012D18                     l2103:
  5551                           
  5552                           ; BSR set to: 0
  5553                           
  5554                           ; BSR set to: 0
  5555  012D18  0100               	movlb	0	; () banked
  5556  012D1A  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5557  012D1C  0D01               	mullw	1
  5558  012D1E  0E00               	movlw	low irobot_query_and_update@TXArray
  5559  012D20  24F3               	addwf	prodl,w,c
  5560  012D22  6ED9               	movwf	fsr2l,c
  5561  012D24  0E02               	movlw	high irobot_query_and_update@TXArray
  5562  012D26  20F4               	addwfc	prodh,w,c
  5563  012D28  6EDA               	movwf	fsr2h,c
  5564  012D2A  50DF               	movf	indf2,w,c
  5565  012D2C  EC9B  F0AB         	call	_get_packet_size
  5566  012D30  0100               	movlb	0	; () banked
  5567  012D32  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5568  012D34  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5569  012D36  0100               	movlb	0	; () banked
  5570  012D38  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5571  012D3A  0100               	movlb	0	; () banked
  5572  012D3C  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5573  012D3E  0E00               	movlw	0
  5574  012D40  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5575  012D42  0100               	movlb	0	; () banked
  5576  012D44  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5577  012D46  0100               	movlb	0	; () banked
  5578  012D48  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5579  012D4A  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5580  012D4C  0100               	movlb	0	; () banked
  5581  012D4E  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5582  012D50  0100               	movlb	0	; () banked
  5583  012D52  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5584  012D54  0100               	movlb	0	; () banked
  5585  012D56  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5586  012D58  0A80               	xorlw	128
  5587  012D5A  0100               	movlb	0	; () banked
  5588  012D5C  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5589  012D5E  0100               	movlb	0	; () banked
  5590  012D60  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5591  012D62  0A80               	xorlw	128
  5592  012D64  0100               	movlb	0	; () banked
  5593  012D66  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5594  012D68  A0D8               	btfss	status,0,c
  5595  012D6A  D7B5               	goto	l2104
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;iRobotSerial.c: 150: }
  5599                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5600                           
  5601                           ; BSR set to: 0
  5602  012D6C  0100               	movlb	0	; () banked
  5603  012D6E  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5604  012D70  0D01               	mullw	1
  5605  012D72  0E00               	movlw	low irobot_query_and_update@TXArray
  5606  012D74  24F3               	addwf	prodl,w,c
  5607  012D76  6ED9               	movwf	fsr2l,c
  5608  012D78  0E02               	movlw	high irobot_query_and_update@TXArray
  5609  012D7A  20F4               	addwfc	prodh,w,c
  5610  012D7C  6EDA               	movwf	fsr2h,c
  5611  012D7E  50DF               	movf	indf2,w,c
  5612  012D80  EC9B  F0AB         	call	_get_packet_size
  5613  012D84  0100               	movlb	0	; () banked
  5614  012D86  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5615                           
  5616                           ; BSR set to: 0
  5617  012D88  0100               	movlb	0	; () banked
  5618  012D8A  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5619  012D8C                     l2101:
  5620                           
  5621                           ; BSR set to: 0
  5622                           
  5623                           ; BSR set to: 0
  5624  012D8C  0100               	movlb	0	; () banked
  5625  012D8E  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5626  012D90  0100               	movlb	0	; () banked
  5627  012D92  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5628  012D94  B0D8               	btfsc	status,0,c
  5629  012D96  0012               	return	
  5630  012D98  D79B               	goto	l2102
  5631  012D9A                     __end_of_irobot_query_and_update:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           postdec1	equ	0xFE5
  5642                           fsr1h	equ	0xFE2
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _rx_assign *****************
  5650 ;; Defined at:
  5651 ;;		line 74 in file "Library/iRobotSerial.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  packetID        1    wreg     unsigned char 
  5654 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5655 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  packetID        1    5[BANK0 ] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5667 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;Total ram usage:        5 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    8
  5674 ;; This function calls:
  5675 ;;		_sort_iRBumpDrop
  5676 ;; This function is called by:
  5677 ;;		_irobot_query_and_update
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text12
  5682  01391E                     __ptext12:
  5683                           	opt stack 0
  5684  01391E                     _rx_assign:
  5685                           	opt stack 19
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;incstack = 0
  5689                           ;rx_assign@packetID stored from wreg
  5690  01391E  0100               	movlb	0	; () banked
  5691  013920  6F65               	movwf	rx_assign@packetID& (0+255),b
  5692                           
  5693                           ;iRobotSerial.c: 75: switch (packetID) {
  5694  013922  D057               	goto	l2035
  5695  013924                     l2036:
  5696                           
  5697                           ; BSR set to: 0
  5698  013924  C061  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5699                           
  5700                           ; BSR set to: 0
  5701  013928  ECEA  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5702  01392C  0012               	return	
  5703  01392E                     l2038:
  5704                           
  5705                           ; BSR set to: 0
  5706  01392E  C061  F035         	movff	rx_assign@packetIDValue,_iRWall
  5707  013932  0012               	return	
  5708  013934                     l2039:
  5709                           
  5710                           ; BSR set to: 0
  5711  013934  C061  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5712  013938  0012               	return	
  5713  01393A                     l2040:
  5714                           
  5715                           ; BSR set to: 0
  5716  01393A  C061  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5717  01393E  0012               	return	
  5718  013940                     l2041:
  5719                           
  5720                           ; BSR set to: 0
  5721  013940  C061  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5722  013944  0012               	return	
  5723  013946                     l2042:
  5724                           
  5725                           ; BSR set to: 0
  5726  013946  C061  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5727  01394A  0012               	return	
  5728  01394C                     l2043:
  5729                           
  5730                           ; BSR set to: 0
  5731  01394C  C061  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5732  013950  0012               	return	
  5733  013952                     
  5734                           ; BSR set to: 0
  5735                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5736                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5737                           
  5738                           ; BSR set to: 0
  5739  013952  0100               	movlb	0	; () banked
  5740  013954  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5741  013956  0100               	movlb	0	; () banked
  5742  013958  A4D8               	btfss	status,2,c
  5743  01395A  D005               	goto	l2046
  5744                           
  5745                           ; BSR set to: 0
  5746  01395C  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5747  013960  0103               	movlb	3	; () banked
  5748  013962  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5749  013964  0012               	return	
  5750  013966                     l2046:
  5751                           
  5752                           ; BSR set to: 0
  5753  013966  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5754  01396A  0103               	movlb	3	; () banked
  5755  01396C  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5756                           
  5757                           ; BSR set to: 3
  5758  01396E  0103               	movlb	3	; () banked
  5759  013970  5108               	movf	_iRDistanceSS& (0+255),w,b
  5760  013972  0100               	movlb	0	; () banked
  5761  013974  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5762  013976  6B63               	clrf	??_rx_assign& (0+255),b
  5763  013978  0103               	movlb	3	; () banked
  5764  01397A  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5765  01397C  0100               	movlb	0	; () banked
  5766  01397E  2563               	addwf	??_rx_assign& (0+255),w,b
  5767  013980  0100               	movlb	0	; () banked
  5768  013982  6FD2               	movwf	_iRDistance& (0+255),b
  5769  013984  0103               	movlb	3	; () banked
  5770  013986  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5771  013988  0100               	movlb	0	; () banked
  5772  01398A  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5773  01398C  0100               	movlb	0	; () banked
  5774  01398E  6FD3               	movwf	(_iRDistance+1)& (0+255),b
  5775                           
  5776                           ; BSR set to: 0
  5777  013990  0012               	return	
  5778  013992                     
  5779                           ; BSR set to: 0
  5780                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5781                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5782                           
  5783                           ; BSR set to: 0
  5784  013992  0100               	movlb	0	; () banked
  5785  013994  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5786  013996  0100               	movlb	0	; () banked
  5787  013998  A4D8               	btfss	status,2,c
  5788  01399A  D005               	goto	l2051
  5789                           
  5790                           ; BSR set to: 0
  5791  01399C  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5792  0139A0  0103               	movlb	3	; () banked
  5793  0139A2  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5794  0139A4  0012               	return	
  5795  0139A6                     l2051:
  5796                           
  5797                           ; BSR set to: 0
  5798  0139A6  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5799  0139AA  0103               	movlb	3	; () banked
  5800  0139AC  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5801                           
  5802                           ; BSR set to: 3
  5803  0139AE  0103               	movlb	3	; () banked
  5804  0139B0  5104               	movf	_iRAngleSS& (0+255),w,b
  5805  0139B2  0100               	movlb	0	; () banked
  5806  0139B4  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5807  0139B6  6B63               	clrf	??_rx_assign& (0+255),b
  5808  0139B8  0103               	movlb	3	; () banked
  5809  0139BA  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5810  0139BC  0100               	movlb	0	; () banked
  5811  0139BE  2563               	addwf	??_rx_assign& (0+255),w,b
  5812  0139C0  0100               	movlb	0	; () banked
  5813  0139C2  6FD0               	movwf	_iRAngle& (0+255),b
  5814  0139C4  0103               	movlb	3	; () banked
  5815  0139C6  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5816  0139C8  0100               	movlb	0	; () banked
  5817  0139CA  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5818  0139CC  0100               	movlb	0	; () banked
  5819  0139CE  6FD1               	movwf	(_iRAngle+1)& (0+255),b
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;iRobotSerial.c: 89: }
  5823                           
  5824                           ; BSR set to: 0
  5825  0139D0  0012               	return	
  5826  0139D2                     l2035:
  5827                           
  5828                           ; BSR set to: 0
  5829  0139D2  0100               	movlb	0	; () banked
  5830  0139D4  5165               	movf	rx_assign@packetID& (0+255),w,b
  5831                           
  5832                           ; Switch size 1, requested type "space"
  5833                           ; Number of cases is 9, Range of values is 7 to 20
  5834                           ; switch strategies available:
  5835                           ; Name         Instructions Cycles
  5836                           ; simple_byte           28    15 (average)
  5837                           ;	Chosen strategy is simple_byte
  5838  0139D6  0A07               	xorlw	7	; case 7
  5839  0139D8  B4D8               	btfsc	status,2,c
  5840  0139DA  D7A4               	goto	l2036
  5841  0139DC  0A0F               	xorlw	15	; case 8
  5842  0139DE  B4D8               	btfsc	status,2,c
  5843  0139E0  D7A6               	goto	l2038
  5844  0139E2  0A01               	xorlw	1	; case 9
  5845  0139E4  B4D8               	btfsc	status,2,c
  5846  0139E6  D7A6               	goto	l2039
  5847  0139E8  0A03               	xorlw	3	; case 10
  5848  0139EA  B4D8               	btfsc	status,2,c
  5849  0139EC  D7A6               	goto	l2040
  5850  0139EE  0A01               	xorlw	1	; case 11
  5851  0139F0  B4D8               	btfsc	status,2,c
  5852  0139F2  D7A6               	goto	l2041
  5853  0139F4  0A07               	xorlw	7	; case 12
  5854  0139F6  B4D8               	btfsc	status,2,c
  5855  0139F8  D7A6               	goto	l2042
  5856  0139FA  0A01               	xorlw	1	; case 13
  5857  0139FC  B4D8               	btfsc	status,2,c
  5858  0139FE  D7A6               	goto	l2043
  5859  013A00  0A1E               	xorlw	30	; case 19
  5860  013A02  B4D8               	btfsc	status,2,c
  5861  013A04  D7A6               	goto	l2044
  5862  013A06  0A07               	xorlw	7	; case 20
  5863  013A08  A4D8               	btfss	status,2,c
  5864  013A0A  0012               	return	
  5865  013A0C  D7C2               	goto	l2049
  5866  013A0E                     __end_of_rx_assign:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1h	equ	0xFE2
  5878                           fsr1l	equ	0xFE1
  5879                           indf2	equ	0xFDF
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _sort_iRBumpDrop *****************
  5885 ;; Defined at:
  5886 ;;		line 92 in file "Library/iRobotSerial.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    7
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_rx_assign
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text13
  5915  014DD4                     __ptext13:
  5916                           	opt stack 0
  5917  014DD4                     _sort_iRBumpDrop:
  5918                           	opt stack 19
  5919                           
  5920                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5921                           
  5922                           ;incstack = 0
  5923  014DD4  A036               	btfss	_iRBumpDrop,0,c
  5924  014DD6  D002               	goto	l2058
  5925  014DD8  0E01               	movlw	1
  5926  014DDA  D001               	goto	L1
  5927  014DDC                     l2058:
  5928                           
  5929                           ; BSR set to: 0
  5930  014DDC  0E00               	movlw	0
  5931  014DDE                     L1:
  5932  014DDE  0100               	movlb	0	; () banked
  5933  014DE0  6FE1               	movwf	_iRBumpRight& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5937                           
  5938                           ; BSR set to: 0
  5939  014DE2  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5940  014DE6  0100               	movlb	0	; () banked
  5941  014DE8  90D8               	bcf	status,0,c
  5942  014DEA  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5943  014DEC  0100               	movlb	0	; () banked
  5944  014DEE  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5945  014DF0  D002               	goto	l2062
  5946                           
  5947                           ; BSR set to: 0
  5948  014DF2  0E01               	movlw	1
  5949  014DF4  D001               	goto	L2
  5950  014DF6                     l2062:
  5951                           
  5952                           ; BSR set to: 0
  5953                           
  5954                           ; BSR set to: 0
  5955  014DF6  0E00               	movlw	0
  5956  014DF8                     L2:
  5957  014DF8  0100               	movlb	0	; () banked
  5958  014DFA  6FE0               	movwf	_iRBumpLeft& (0+255),b
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5962                           
  5963                           ; BSR set to: 0
  5964  014DFC  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5965  014E00  0100               	movlb	0	; () banked
  5966  014E02  90D8               	bcf	status,0,c
  5967  014E04  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5968  014E06  0100               	movlb	0	; () banked
  5969  014E08  90D8               	bcf	status,0,c
  5970  014E0A  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5971  014E0C  0100               	movlb	0	; () banked
  5972  014E0E  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5973  014E10  D002               	goto	l2066
  5974                           
  5975                           ; BSR set to: 0
  5976  014E12  0E01               	movlw	1
  5977  014E14  D001               	goto	L3
  5978  014E16                     l2066:
  5979                           
  5980                           ; BSR set to: 0
  5981                           
  5982                           ; BSR set to: 0
  5983  014E16  0E00               	movlw	0
  5984  014E18                     L3:
  5985  014E18  0100               	movlb	0	; () banked
  5986  014E1A  6FDF               	movwf	_iRDropRight& (0+255),b
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5990                           
  5991                           ; BSR set to: 0
  5992  014E1C  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5993  014E20  0100               	movlb	0	; () banked
  5994  014E22  90D8               	bcf	status,0,c
  5995  014E24  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5996  014E26  0100               	movlb	0	; () banked
  5997  014E28  90D8               	bcf	status,0,c
  5998  014E2A  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5999  014E2C  0100               	movlb	0	; () banked
  6000  014E2E  90D8               	bcf	status,0,c
  6001  014E30  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6002  014E32  0100               	movlb	0	; () banked
  6003  014E34  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6004  014E36  D002               	goto	l2070
  6005                           
  6006                           ; BSR set to: 0
  6007  014E38  0E01               	movlw	1
  6008  014E3A  D001               	goto	L4
  6009  014E3C                     l2070:
  6010                           
  6011                           ; BSR set to: 0
  6012                           
  6013                           ; BSR set to: 0
  6014  014E3C  0E00               	movlw	0
  6015  014E3E                     L4:
  6016  014E3E  0100               	movlb	0	; () banked
  6017  014E40  6FDE               	movwf	_iRDropLeft& (0+255),b
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  6021                           
  6022                           ; BSR set to: 0
  6023  014E42  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6024  014E46  0100               	movlb	0	; () banked
  6025  014E48  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6026  014E4A  0E0F               	movlw	15
  6027  014E4C  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6028  014E4E  0100               	movlb	0	; () banked
  6029  014E50  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6030  014E52  D003               	goto	l2074
  6031                           
  6032                           ; BSR set to: 0
  6033  014E54  0E01               	movlw	1
  6034  014E56  6E2F               	movwf	_iRDropCaster,c
  6035  014E58  0012               	return	
  6036  014E5A                     l2074:
  6037                           
  6038                           ; BSR set to: 0
  6039                           
  6040                           ; BSR set to: 0
  6041  014E5A  0E00               	movlw	0
  6042  014E5C  6E2F               	movwf	_iRDropCaster,c
  6043  014E5E  0012               	return	
  6044  014E60                     __end_of_sort_iRBumpDrop:
  6045                           	opt stack 0
  6046                           tblptru	equ	0xFF8
  6047                           tblptrh	equ	0xFF7
  6048                           tblptrl	equ	0xFF6
  6049                           tablat	equ	0xFF5
  6050                           prodh	equ	0xFF4
  6051                           prodl	equ	0xFF3
  6052                           postinc0	equ	0xFEE
  6053                           wreg	equ	0xFE8
  6054                           postdec1	equ	0xFE5
  6055                           fsr1h	equ	0xFE2
  6056                           fsr1l	equ	0xFE1
  6057                           indf2	equ	0xFDF
  6058                           fsr2h	equ	0xFDA
  6059                           fsr2l	equ	0xFD9
  6060                           status	equ	0xFD8
  6061                           
  6062 ;; *************** function _get_packet_size *****************
  6063 ;; Defined at:
  6064 ;;		line 60 in file "Library/iRobotSerial.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  packetID        1    wreg     unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  packetID        1    0[BANK0 ] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      unsigned char 
  6071 ;; Registers used:
  6072 ;;		wreg, status,2, status,0
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;Total ram usage:        1 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    7
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_irobot_query_and_update
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text14
  6093  015736                     __ptext14:
  6094                           	opt stack 0
  6095  015736                     _get_packet_size:
  6096                           	opt stack 20
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;incstack = 0
  6100                           ;get_packet_size@packetID stored from wreg
  6101  015736  0100               	movlb	0	; () banked
  6102  015738  6F60               	movwf	get_packet_size@packetID& (0+255),b
  6103                           
  6104                           ;iRobotSerial.c: 61: switch (packetID) {
  6105  01573A  D012               	goto	l2021
  6106  01573C  0E01               	movlw	1
  6107  01573E  0012               	return	
  6108  015740  0E01               	movlw	1
  6109  015742  0012               	return	
  6110  015744  0E01               	movlw	1
  6111  015746  0012               	return	
  6112  015748  0E01               	movlw	1
  6113  01574A  0012               	return	
  6114  01574C  0E01               	movlw	1
  6115  01574E  0012               	return	
  6116  015750  0E01               	movlw	1
  6117  015752  0012               	return	
  6118  015754  0E01               	movlw	1
  6119  015756  0012               	return	
  6120  015758  0E02               	movlw	2
  6121  01575A  0012               	return	
  6122  01575C  0E02               	movlw	2
  6123                           
  6124                           ;iRobotSerial.c: 71: }
  6125  01575E  0012               	return	
  6126  015760                     l2021:
  6127  015760  0100               	movlb	0	; () banked
  6128  015762  5160               	movf	get_packet_size@packetID& (0+255),w,b
  6129                           
  6130                           ; Switch size 1, requested type "space"
  6131                           ; Number of cases is 9, Range of values is 7 to 20
  6132                           ; switch strategies available:
  6133                           ; Name         Instructions Cycles
  6134                           ; simple_byte           28    15 (average)
  6135                           ;	Chosen strategy is simple_byte
  6136  015764  0A07               	xorlw	7	; case 7
  6137  015766  B4D8               	btfsc	status,2,c
  6138  015768  D7E9               	goto	l2022
  6139  01576A  0A0F               	xorlw	15	; case 8
  6140  01576C  B4D8               	btfsc	status,2,c
  6141  01576E  D7E8               	goto	l2024
  6142  015770  0A01               	xorlw	1	; case 9
  6143  015772  B4D8               	btfsc	status,2,c
  6144  015774  D7E7               	goto	l2025
  6145  015776  0A03               	xorlw	3	; case 10
  6146  015778  B4D8               	btfsc	status,2,c
  6147  01577A  D7E6               	goto	l2026
  6148  01577C  0A01               	xorlw	1	; case 11
  6149  01577E  B4D8               	btfsc	status,2,c
  6150  015780  D7E5               	goto	l2027
  6151  015782  0A07               	xorlw	7	; case 12
  6152  015784  B4D8               	btfsc	status,2,c
  6153  015786  D7E4               	goto	l2028
  6154  015788  0A01               	xorlw	1	; case 13
  6155  01578A  B4D8               	btfsc	status,2,c
  6156  01578C  D7E3               	goto	l2029
  6157  01578E  0A1E               	xorlw	30	; case 19
  6158  015790  B4D8               	btfsc	status,2,c
  6159  015792  D7E2               	goto	l2030
  6160  015794  0A07               	xorlw	7	; case 20
  6161  015796  A4D8               	btfss	status,2,c
  6162  015798  0012               	return	
  6163  01579A  D7E0               	goto	l2031
  6164  01579C                     __end_of_get_packet_size:
  6165                           	opt stack 0
  6166                           tblptru	equ	0xFF8
  6167                           tblptrh	equ	0xFF7
  6168                           tblptrl	equ	0xFF6
  6169                           tablat	equ	0xFF5
  6170                           prodh	equ	0xFF4
  6171                           prodl	equ	0xFF3
  6172                           postinc0	equ	0xFEE
  6173                           wreg	equ	0xFE8
  6174                           postdec1	equ	0xFE5
  6175                           fsr1h	equ	0xFE2
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           fsr2h	equ	0xFDA
  6179                           fsr2l	equ	0xFD9
  6180                           status	equ	0xFD8
  6181                           
  6182 ;; *************** function _eusart_getch *****************
  6183 ;; Defined at:
  6184 ;;		line 125 in file "Library/iRobotSerial.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;		None
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;		None
  6189 ;; Return value:  Size  Location     Type
  6190 ;;                  1    wreg      unsigned char 
  6191 ;; Registers used:
  6192 ;;		wreg, status,2
  6193 ;; Tracked objects:
  6194 ;;		On entry : 0/0
  6195 ;;		On exit  : 0/0
  6196 ;;		Unchanged: 0/0
  6197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;Total ram usage:        0 bytes
  6203 ;; Hardware stack levels used:    1
  6204 ;; Hardware stack levels required when called:    7
  6205 ;; This function calls:
  6206 ;;		Nothing
  6207 ;; This function is called by:
  6208 ;;		_irobot_query_and_update
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text15
  6213  016686                     __ptext15:
  6214                           	opt stack 0
  6215  016686                     _eusart_getch:
  6216                           	opt stack 20
  6217                           
  6218                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6219                           
  6220                           ;incstack = 0
  6221  016686  AA9E               	btfss	3998,5,c	;volatile
  6222  016688  D7FE               	goto	_eusart_getch
  6223                           
  6224                           ;iRobotSerial.c: 127: return RCREG1;
  6225  01668A  50AF               	movf	4015,w,c	;volatile
  6226  01668C  0012               	return	
  6227  01668E                     __end_of_eusart_getch:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           postinc0	equ	0xFEE
  6236                           wreg	equ	0xFE8
  6237                           postdec1	equ	0xFE5
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _printf *****************
  6246 ;; Defined at:
  6247 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6250 ;;		 -> STR_14(21), STR_13(21), STR_12(21), STR_11(21), 
  6251 ;;		 -> STR_10(21), STR_9(3), STR_8(60), STR_7(3), 
  6252 ;;		 -> STR_6(14), STR_5(3), STR_4(46), STR_3(3), 
  6253 ;;		 -> STR_2(46), STR_1(3), 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  tmpval          4    0        struct .
  6256 ;;  cp              3    0        PTR const unsigned char 
  6257 ;;  val             2   36[BANK0 ] unsigned int 
  6258 ;;  ap              2   34[BANK0 ] PTR void [1]
  6259 ;;		 -> ?_printf(2), 
  6260 ;;  len             2    0        unsigned int 
  6261 ;;  c               1   38[BANK0 ] char 
  6262 ;;  flag            1   33[BANK0 ] unsigned char 
  6263 ;;  prec            1   32[BANK0 ] char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  2   21[BANK0 ] int 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:       18 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   12
  6280 ;; This function calls:
  6281 ;;		___lwdiv
  6282 ;;		___lwmod
  6283 ;;		_putch
  6284 ;; This function is called by:
  6285 ;;		_mode1
  6286 ;;		_mode2
  6287 ;;		_mode4
  6288 ;;		_main
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	text16
  6293  012562                     __ptext16:
  6294                           	opt stack 0
  6295  012562                     _printf:
  6296                           	opt stack 18
  6297                           
  6298                           ;doprnt.c: 466: va_list ap;
  6299                           ;doprnt.c: 499: signed char c;
  6300                           ;doprnt.c: 506: signed char prec;
  6301                           ;doprnt.c: 508: unsigned char flag;
  6302                           ;doprnt.c: 523: union {
  6303                           ;doprnt.c: 524: unsigned long vd;
  6304                           ;doprnt.c: 525: double integ;
  6305                           ;doprnt.c: 526: } tmpval;
  6306                           ;doprnt.c: 528: unsigned int val;
  6307                           ;doprnt.c: 529: unsigned len;
  6308                           ;doprnt.c: 530: const char * cp;
  6309                           ;doprnt.c: 533: *ap = __va_start();
  6310                           
  6311                           ;incstack = 0
  6312  012562  0E77               	movlw	low (?_printf+2)
  6313  012564  0100               	movlb	0	; () banked
  6314  012566  6F82               	movwf	printf@ap& (0+255),b
  6315  012568  0E00               	movlw	high (?_printf+2)
  6316  01256A  0100               	movlb	0	; () banked
  6317  01256C  6F83               	movwf	(printf@ap+1)& (0+255),b
  6318                           
  6319                           ;doprnt.c: 536: while(c = *f++) {
  6320  01256E  D0C9               	goto	u11210
  6321  012570                     
  6322                           ; BSR set to: 0
  6323                           ;doprnt.c: 538: if(c != '%')
  6324                           
  6325                           ; BSR set to: 0
  6326  012570  0E25               	movlw	37
  6327  012572  0100               	movlb	0	; () banked
  6328  012574  1986               	xorwf	printf@c& (0+255),w,b
  6329  012576  B4D8               	btfsc	status,2,c
  6330  012578  D005               	goto	l2423
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;doprnt.c: 540: {
  6334                           ;doprnt.c: 541: (putch(c) );
  6335  01257A  0100               	movlb	0	; () banked
  6336  01257C  5186               	movf	printf@c& (0+255),w,b
  6337  01257E  ECF2  F0B2         	call	_putch
  6338                           
  6339                           ;doprnt.c: 542: continue;
  6340  012582  D0BF               	goto	u11210
  6341  012584                     l2423:
  6342                           
  6343                           ;doprnt.c: 543: }
  6344                           ;doprnt.c: 548: flag = 0;
  6345  012584  0E00               	movlw	0
  6346  012586  0100               	movlb	0	; () banked
  6347  012588  6F81               	movwf	printf@flag& (0+255),b
  6348                           
  6349                           ;doprnt.c: 635: switch(c = *f++) {
  6350  01258A  D014               	goto	l2424
  6351  01258C                     
  6352                           ; BSR set to: 0
  6353                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6354                           
  6355                           ; BSR set to: 0
  6356  01258C  C082  FFD9         	movff	printf@ap,fsr2l
  6357  012590  C083  FFDA         	movff	printf@ap+1,fsr2h
  6358  012594  50DF               	movf	indf2,w,c
  6359  012596  0100               	movlb	0	; () banked
  6360  012598  6F86               	movwf	printf@c& (0+255),b
  6361                           
  6362                           ; BSR set to: 0
  6363  01259A  0E02               	movlw	2
  6364  01259C  0100               	movlb	0	; () banked
  6365  01259E  2782               	addwf	printf@ap& (0+255),f,b
  6366  0125A0  0E00               	movlw	0
  6367  0125A2  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  6368  0125A4                     
  6369                           ; BSR set to: 0
  6370                           ;doprnt.c: 809: (putch(c) );
  6371                           
  6372                           ; BSR set to: 0
  6373  0125A4  0100               	movlb	0	; () banked
  6374  0125A6  5186               	movf	printf@c& (0+255),w,b
  6375  0125A8  ECF2  F0B2         	call	_putch
  6376                           
  6377                           ;doprnt.c: 810: continue;
  6378  0125AC  D0AA               	goto	u11210
  6379  0125AE                     
  6380                           ;doprnt.c: 818: flag |= 0x40;
  6381  0125AE  0100               	movlb	0	; () banked
  6382  0125B0  8D81               	bsf	printf@flag& (0+255),6,b
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;doprnt.c: 822: }
  6386                           
  6387                           ;doprnt.c: 819: break;
  6388  0125B2  D01E               	goto	l2429
  6389  0125B4                     l2424:
  6390                           
  6391                           ; BSR set to: 0
  6392                           
  6393                           ; BSR set to: 0
  6394  0125B4  C075  FFF6         	movff	printf@f,tblptrl
  6395  0125B8  C076  FFF7         	movff	printf@f+1,tblptrh
  6396  0125BC  0100               	movlb	0	; () banked
  6397  0125BE  4B75               	infsnz	printf@f& (0+255),f,b
  6398  0125C0  2B76               	incf	(printf@f+1)& (0+255),f,b
  6399  0125C2                     	if	0	;tblptru may be non-zero
  6400  0125C2                     	endif
  6401  0125C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6402  0125C2  0E00               	movlw	low (__mediumconst shr (0+16))
  6403  0125C4  6EF8               	movwf	tblptru,c
  6404  0125C6                     	endif
  6405  0125C6  0008               	tblrd		*
  6406  0125C8  CFF5 F086          	movff	tablat,printf@c
  6407  0125CC  0100               	movlb	0	; () banked
  6408  0125CE  5186               	movf	printf@c& (0+255),w,b
  6409                           
  6410                           ; Switch size 1, requested type "space"
  6411                           ; Number of cases is 5, Range of values is 0 to 117
  6412                           ; switch strategies available:
  6413                           ; Name         Instructions Cycles
  6414                           ; simple_byte           16     9 (average)
  6415                           ;	Chosen strategy is simple_byte
  6416  0125D0  0A00               	xorlw	0	; case 0
  6417  0125D2  B4D8               	btfsc	status,2,c
  6418  0125D4  0012               	return	
  6419  0125D6  0A63               	xorlw	99	; case 99
  6420  0125D8  B4D8               	btfsc	status,2,c
  6421  0125DA  D7D8               	goto	l2430
  6422  0125DC  0A07               	xorlw	7	; case 100
  6423  0125DE  B4D8               	btfsc	status,2,c
  6424  0125E0  D007               	goto	l2429
  6425  0125E2  0A0D               	xorlw	13	; case 105
  6426  0125E4  B4D8               	btfsc	status,2,c
  6427  0125E6  D004               	goto	l2429
  6428  0125E8  0A1C               	xorlw	28	; case 117
  6429  0125EA  B4D8               	btfsc	status,2,c
  6430  0125EC  D7E0               	goto	l2432
  6431  0125EE  D7DA               	goto	l2431
  6432  0125F0                     l2429:
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6436  0125F0  0100               	movlb	0	; () banked
  6437  0125F2  BD81               	btfsc	printf@flag& (0+255),6,b
  6438  0125F4  D019               	goto	l2433
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;doprnt.c: 1253: {
  6442                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6443  0125F6  C082  FFD9         	movff	printf@ap,fsr2l
  6444  0125FA  C083  FFDA         	movff	printf@ap+1,fsr2h
  6445  0125FE  CFDE F084          	movff	postinc2,printf@val
  6446  012602  CFDD F085          	movff	postdec2,printf@val+1
  6447                           
  6448                           ; BSR set to: 0
  6449  012606  0E02               	movlw	2
  6450  012608  0100               	movlb	0	; () banked
  6451  01260A  2782               	addwf	printf@ap& (0+255),f,b
  6452  01260C  0E00               	movlw	0
  6453  01260E  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;doprnt.c: 1261: if((int)val < 0) {
  6457  012610  0100               	movlb	0	; () banked
  6458  012612  AF85               	btfss	(printf@val+1)& (0+255),7,b
  6459  012614  D016               	goto	l2435
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;doprnt.c: 1262: flag |= 0x03;
  6463  012616  0E03               	movlw	3
  6464  012618  0100               	movlb	0	; () banked
  6465  01261A  1381               	iorwf	printf@flag& (0+255),f,b
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;doprnt.c: 1263: val = -val;
  6469  01261C  0100               	movlb	0	; () banked
  6470  01261E  6D84               	negf	printf@val& (0+255),b
  6471  012620  1F85               	comf	(printf@val+1)& (0+255),f,b
  6472  012622  B0D8               	btfsc	status,0,c
  6473  012624  2B85               	incf	(printf@val+1)& (0+255),f,b
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;doprnt.c: 1264: }
  6477                           ;doprnt.c: 1266: }
  6478  012626  D00D               	goto	l2435
  6479  012628                     l2433:
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;doprnt.c: 1268: else
  6483                           ;doprnt.c: 1273: {
  6484                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6485                           
  6486                           ; BSR set to: 0
  6487  012628  C082  FFD9         	movff	printf@ap,fsr2l
  6488  01262C  C083  FFDA         	movff	printf@ap+1,fsr2h
  6489  012630  CFDE F084          	movff	postinc2,printf@val
  6490  012634  CFDD F085          	movff	postdec2,printf@val+1
  6491                           
  6492                           ; BSR set to: 0
  6493  012638  0E02               	movlw	2
  6494  01263A  0100               	movlb	0	; () banked
  6495  01263C  2782               	addwf	printf@ap& (0+255),f,b
  6496  01263E  0E00               	movlw	0
  6497  012640  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  6498  012642                     l2435:
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;doprnt.c: 1287: }
  6502                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6503                           
  6504                           ; BSR set to: 0
  6505  012642  0E01               	movlw	1
  6506  012644  0100               	movlb	0	; () banked
  6507  012646  6F86               	movwf	printf@c& (0+255),b
  6508  012648                     l14508:
  6509                           
  6510                           ; BSR set to: 0
  6511  012648  0E05               	movlw	5
  6512  01264A  0100               	movlb	0	; () banked
  6513  01264C  1986               	xorwf	printf@c& (0+255),w,b
  6514  01264E  B4D8               	btfsc	status,2,c
  6515  012650  D019               	goto	u11190
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;doprnt.c: 1306: if(val < dpowers[c])
  6519                           
  6520                           ; BSR set to: 0
  6521                           
  6522                           ; BSR set to: 0
  6523  012652  0100               	movlb	0	; () banked
  6524  012654  5186               	movf	printf@c& (0+255),w,b
  6525  012656  0D02               	mullw	2
  6526  012658  0E51               	movlw	low _dpowers
  6527  01265A  24F3               	addwf	prodl,w,c
  6528  01265C  6EF6               	movwf	tblptrl,c
  6529  01265E  0EFD               	movlw	high _dpowers
  6530  012660  20F4               	addwfc	prodh,w,c
  6531  012662  6EF7               	movwf	tblptrh,c
  6532  012664                     	if	1	;There are 3 active tblptr bytes
  6533  012664  6AF8               	clrf	tblptru,c
  6534  012666  0E00               	movlw	low (__mediumconst shr (0+16))
  6535  012668  22F8               	addwfc	tblptru,f,c
  6536  01266A                     	endif
  6537  01266A  0009               	tblrd		*+
  6538  01266C  50F5               	movf	tablat,w,c
  6539  01266E  0100               	movlb	0	; () banked
  6540  012670  5D84               	subwf	printf@val& (0+255),w,b
  6541  012672  0009               	tblrd		*+
  6542  012674  50F5               	movf	tablat,w,c
  6543  012676  0100               	movlb	0	; () banked
  6544  012678  5985               	subwfb	(printf@val+1)& (0+255),w,b
  6545  01267A  A0D8               	btfss	status,0,c
  6546  01267C  D003               	goto	u11190
  6547                           
  6548                           ; BSR set to: 0
  6549                           
  6550                           ; BSR set to: 0
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;doprnt.c: 1307: break;
  6554  01267E  0100               	movlb	0	; () banked
  6555  012680  2B86               	incf	printf@c& (0+255),f,b
  6556  012682  D7E2               	goto	l14508
  6557  012684                     u11190:
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;doprnt.c: 1422: {
  6561                           ;doprnt.c: 1438: if(flag & 0x03)
  6562                           
  6563                           ; BSR set to: 0
  6564  012684  C081  F07F         	movff	printf@flag,??_printf
  6565  012688  0E03               	movlw	3
  6566  01268A  0100               	movlb	0	; () banked
  6567  01268C  177F               	andwf	??_printf& (0+255),f,b
  6568  01268E  B4D8               	btfsc	status,2,c
  6569  012690  D003               	goto	l2439
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;doprnt.c: 1439: (putch('-') );
  6573  012692  0E2D               	movlw	45
  6574  012694  ECF2  F0B2         	call	_putch
  6575  012698                     l2439:
  6576                           
  6577                           ;doprnt.c: 1469: }
  6578                           ;doprnt.c: 1472: prec = c;
  6579  012698  C086  F080         	movff	printf@c,printf@prec
  6580                           
  6581                           ;doprnt.c: 1474: while(prec--) {
  6582  01269C  D02C               	goto	l2440
  6583  01269E                     
  6584                           ;doprnt.c: 1478: {
  6585                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6586  01269E  0100               	movlb	0	; () banked
  6587  0126A0  5180               	movf	printf@prec& (0+255),w,b
  6588  0126A2  0D02               	mullw	2
  6589  0126A4  0E51               	movlw	low _dpowers
  6590  0126A6  24F3               	addwf	prodl,w,c
  6591  0126A8  6EF6               	movwf	tblptrl,c
  6592  0126AA  0EFD               	movlw	high _dpowers
  6593  0126AC  20F4               	addwfc	prodh,w,c
  6594  0126AE  6EF7               	movwf	tblptrh,c
  6595  0126B0                     	if	1	;There are 3 active tblptr bytes
  6596  0126B0  6AF8               	clrf	tblptru,c
  6597  0126B2  0E00               	movlw	low (__mediumconst shr (0+16))
  6598  0126B4  22F8               	addwfc	tblptru,f,c
  6599  0126B6                     	endif
  6600  0126B6  0009               	tblrd		*+
  6601  0126B8  CFF5 F062          	movff	tablat,___lwdiv@divisor
  6602  0126BC  000A               	tblrd		*-
  6603  0126BE  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  6604  0126C2  C084  F060         	movff	printf@val,___lwdiv@dividend
  6605  0126C6  C085  F061         	movff	printf@val+1,___lwdiv@dividend+1
  6606  0126CA  ECF9  F0A8         	call	___lwdiv	;wreg free
  6607  0126CE  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  6608  0126D2  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  6609  0126D6  0E00               	movlw	0
  6610  0126D8  0100               	movlb	0	; () banked
  6611  0126DA  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6612  0126DC  0E0A               	movlw	10
  6613  0126DE  6F69               	movwf	___lwmod@divisor& (0+255),b
  6614  0126E0  EC64  F0AC         	call	___lwmod	;wreg free
  6615  0126E4  0100               	movlb	0	; () banked
  6616  0126E6  5167               	movf	?___lwmod& (0+255),w,b
  6617  0126E8  0F30               	addlw	48
  6618  0126EA  0100               	movlb	0	; () banked
  6619  0126EC  6F86               	movwf	printf@c& (0+255),b
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;doprnt.c: 1523: }
  6623                           ;doprnt.c: 1524: (putch(c) );
  6624  0126EE  0100               	movlb	0	; () banked
  6625  0126F0  5186               	movf	printf@c& (0+255),w,b
  6626  0126F2  ECF2  F0B2         	call	_putch
  6627  0126F6                     l2440:
  6628  0126F6  0100               	movlb	0	; () banked
  6629  0126F8  0780               	decf	printf@prec& (0+255),f,b
  6630  0126FA  0100               	movlb	0	; () banked
  6631  0126FC  2980               	incf	printf@prec& (0+255),w,b
  6632  0126FE  A4D8               	btfss	status,2,c
  6633  012700  D7CE               	goto	l2441
  6634  012702                     u11210:
  6635                           
  6636                           ; BSR set to: 0
  6637                           
  6638                           ; BSR set to: 0
  6639  012702  C075  FFF6         	movff	printf@f,tblptrl
  6640  012706  C076  FFF7         	movff	printf@f+1,tblptrh
  6641  01270A  0100               	movlb	0	; () banked
  6642  01270C  4B75               	infsnz	printf@f& (0+255),f,b
  6643  01270E  2B76               	incf	(printf@f+1)& (0+255),f,b
  6644  012710                     	if	0	;tblptru may be non-zero
  6645  012710                     	endif
  6646  012710                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6647  012710  0E00               	movlw	low (__mediumconst shr (0+16))
  6648  012712  6EF8               	movwf	tblptru,c
  6649  012714                     	endif
  6650  012714  0008               	tblrd		*
  6651  012716  CFF5 F086          	movff	tablat,printf@c
  6652  01271A  0100               	movlb	0	; () banked
  6653  01271C  5186               	movf	printf@c& (0+255),w,b
  6654  01271E  B4D8               	btfsc	status,2,c
  6655  012720  0012               	return	
  6656  012722  D726               	goto	l2422
  6657  012724                     __end_of_printf:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           postinc0	equ	0xFEE
  6666                           wreg	equ	0xFE8
  6667                           postdec1	equ	0xFE5
  6668                           fsr1h	equ	0xFE2
  6669                           fsr1l	equ	0xFE1
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           fsr2h	equ	0xFDA
  6674                           fsr2l	equ	0xFD9
  6675                           status	equ	0xFD8
  6676                           
  6677 ;; *************** function _putch *****************
  6678 ;; Defined at:
  6679 ;;		line 454 in file "Library/Console.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  c               1    wreg     unsigned char 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  c               1   20[BANK0 ] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;Total ram usage:        1 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:   11
  6700 ;; This function calls:
  6701 ;;		_Console_PrintChar
  6702 ;; This function is called by:
  6703 ;;		_printf
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text17
  6708  0165E4                     __ptext17:
  6709                           	opt stack 0
  6710  0165E4                     _putch:
  6711                           	opt stack 18
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;incstack = 0
  6715                           ;putch@c stored from wreg
  6716  0165E4  0100               	movlb	0	; () banked
  6717  0165E6  6F74               	movwf	putch@c& (0+255),b
  6718                           
  6719                           ;Console.c: 456: Console_PrintChar(c);
  6720  0165E8  0100               	movlb	0	; () banked
  6721  0165EA  5174               	movf	putch@c& (0+255),w,b
  6722  0165EC  EC72  F094         	call	_Console_PrintChar
  6723  0165F0  0012               	return		;funcret
  6724  0165F2                     __end_of_putch:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           postinc0	equ	0xFEE
  6733                           wreg	equ	0xFE8
  6734                           postdec1	equ	0xFE5
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _Console_PrintChar *****************
  6745 ;; Defined at:
  6746 ;;		line 322 in file "Library/Console.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  pInput          1    wreg     unsigned char 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  pInput          1   19[BANK0 ] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      void 
  6753 ;; Registers used:
  6754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:        4 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:   10
  6767 ;; This function calls:
  6768 ;;		_Console_Backspace
  6769 ;;		_Console_FormFeed
  6770 ;;		_Console_IncrementCursor
  6771 ;;		_Console_NewLine
  6772 ;;		_Console_ResetCursor
  6773 ;;		_Console_Tab
  6774 ;; This function is called by:
  6775 ;;		_putch
  6776 ;;		_Console_PrintString
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text18
  6781  0128E4                     __ptext18:
  6782                           	opt stack 0
  6783  0128E4                     _Console_PrintChar:
  6784                           	opt stack 18
  6785                           
  6786                           ;incstack = 0
  6787                           ;Console_PrintChar@pInput stored from wreg
  6788  0128E4  0100               	movlb	0	; () banked
  6789  0128E6  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  6790                           
  6791                           ;Console.c: 324: switch(pInput)
  6792  0128E8  D0B1               	goto	l1036
  6793  0128EA                     
  6794                           ;Console.c: 327: case '\n':
  6795                           ;Console.c: 328: Console_NewLine();
  6796  0128EA  EC70  F0A5         	call	_Console_NewLine	;wreg free
  6797                           
  6798                           ;Console.c: 329: return;
  6799  0128EE  0012               	return	
  6800  0128F0                     
  6801                           ;Console.c: 331: Console_Backspace();
  6802  0128F0  EC95  F0AC         	call	_Console_Backspace	;wreg free
  6803                           
  6804                           ;Console.c: 332: return;
  6805  0128F4  0012               	return	
  6806  0128F6                     
  6807                           ;Console.c: 334: Console_FormFeed();
  6808  0128F6  ECA3  F0A6         	call	_Console_FormFeed	;wreg free
  6809                           
  6810                           ;Console.c: 335: return;
  6811  0128FA  0012               	return	
  6812  0128FC                     
  6813                           ;Console.c: 337: Console_Tab();
  6814  0128FC  ECEE  F09F         	call	_Console_Tab	;wreg free
  6815                           
  6816                           ;Console.c: 338: return;
  6817  012900  0012               	return	
  6818  012902                     
  6819                           ;Console.c: 340: Console_IncrementCursor();
  6820  012902  ECCE  F0AB         	call	_Console_IncrementCursor	;wreg free
  6821                           
  6822                           ;Console.c: 341: return;
  6823  012906  0012               	return	
  6824  012908                     
  6825                           ;Console.c: 343: Console_ResetCursor();
  6826  012908  ECAB  F0B1         	call	_Console_ResetCursor	;wreg free
  6827                           
  6828                           ;Console.c: 344: return;
  6829  01290C  0012               	return	
  6830  01290E                     
  6831                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6832                           
  6833                           ;Console.c: 349: default:
  6834  01290E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6835  012912  0E7F               	movlw	127
  6836  012914  0100               	movlb	0	; () banked
  6837  012916  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6838  012918  0100               	movlb	0	; () banked
  6839  01291A  51E7               	movf	_lBufferY& (0+255),w,b
  6840  01291C  0D14               	mullw	20
  6841  01291E  0EC8               	movlw	low _lBuffer
  6842  012920  0100               	movlb	0	; () banked
  6843  012922  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6844  012924  0E04               	movlw	high _lBuffer
  6845  012926  0100               	movlb	0	; () banked
  6846  012928  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6847  01292A  50F3               	movf	prodl,w,c
  6848  01292C  0100               	movlb	0	; () banked
  6849  01292E  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6850  012930  50F4               	movf	prodh,w,c
  6851  012932  0100               	movlb	0	; () banked
  6852  012934  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6853  012936  0100               	movlb	0	; () banked
  6854  012938  51E8               	movf	_lBufferX& (0+255),w,b
  6855  01293A  0D01               	mullw	1
  6856  01293C  50F3               	movf	prodl,w,c
  6857  01293E  0100               	movlb	0	; () banked
  6858  012940  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6859  012942  6ED9               	movwf	fsr2l,c
  6860  012944  50F4               	movf	prodh,w,c
  6861  012946  0100               	movlb	0	; () banked
  6862  012948  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6863  01294A  6EDA               	movwf	fsr2h,c
  6864  01294C  50DF               	movf	indf2,w,c
  6865  01294E  0B7F               	andlw	127
  6866  012950  0100               	movlb	0	; () banked
  6867  012952  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6868  012954  B4D8               	btfsc	status,2,c
  6869  012956  D02E               	goto	l1047
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;Console.c: 351: {
  6873                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6874  012958  0E01               	movlw	1
  6875  01295A  0100               	movlb	0	; () banked
  6876  01295C  6FFF               	movwf	_change& (0+255),b
  6877                           
  6878                           ; BSR set to: 0
  6879  01295E  0100               	movlb	0	; () banked
  6880  012960  51E7               	movf	_lBufferY& (0+255),w,b
  6881  012962  0D14               	mullw	20
  6882  012964  0EC8               	movlw	low _lBuffer
  6883  012966  0100               	movlb	0	; () banked
  6884  012968  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6885  01296A  0E04               	movlw	high _lBuffer
  6886  01296C  0100               	movlb	0	; () banked
  6887  01296E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6888  012970  50F3               	movf	prodl,w,c
  6889  012972  0100               	movlb	0	; () banked
  6890  012974  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6891  012976  50F4               	movf	prodh,w,c
  6892  012978  0100               	movlb	0	; () banked
  6893  01297A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6894  01297C  0100               	movlb	0	; () banked
  6895  01297E  51E8               	movf	_lBufferX& (0+255),w,b
  6896  012980  0D01               	mullw	1
  6897  012982  50F3               	movf	prodl,w,c
  6898  012984  0100               	movlb	0	; () banked
  6899  012986  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6900  012988  6ED9               	movwf	fsr2l,c
  6901  01298A  50F4               	movf	prodh,w,c
  6902  01298C  0100               	movlb	0	; () banked
  6903  01298E  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6904  012990  6EDA               	movwf	fsr2h,c
  6905  012992  0100               	movlb	0	; () banked
  6906  012994  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6907  012996  0980               	iorlw	128
  6908  012998  6EDF               	movwf	indf2,c
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  6912  01299A  0100               	movlb	0	; () banked
  6913  01299C  51E7               	movf	_lBufferY& (0+255),w,b
  6914  01299E  0D02               	mullw	2
  6915  0129A0  0E00               	movlw	low _lCBuffer
  6916  0129A2  24F3               	addwf	prodl,w,c
  6917  0129A4  6ED9               	movwf	fsr2l,c
  6918  0129A6  0E04               	movlw	high _lCBuffer
  6919  0129A8  20F4               	addwfc	prodh,w,c
  6920  0129AA  6EDA               	movwf	fsr2h,c
  6921  0129AC  C0FD  FFDE         	movff	_gForecolour,postinc2
  6922  0129B0  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  6923  0129B4                     l1047:
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;Console.c: 354: }
  6927                           ;Console.c: 368: if(Console_IncrementCursor())
  6928                           
  6929                           ; BSR set to: 0
  6930  0129B4  ECCE  F0AB         	call	_Console_IncrementCursor	;wreg free
  6931  0129B8  0900               	iorlw	0
  6932  0129BA  B4D8               	btfsc	status,2,c
  6933  0129BC  0012               	return	
  6934                           
  6935                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6936  0129BE  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6937  0129C2  0E7F               	movlw	127
  6938  0129C4  0100               	movlb	0	; () banked
  6939  0129C6  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6940  0129C8  0100               	movlb	0	; () banked
  6941  0129CA  51E7               	movf	_lBufferY& (0+255),w,b
  6942  0129CC  0D14               	mullw	20
  6943  0129CE  0EC8               	movlw	low _lBuffer
  6944  0129D0  0100               	movlb	0	; () banked
  6945  0129D2  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6946  0129D4  0E04               	movlw	high _lBuffer
  6947  0129D6  0100               	movlb	0	; () banked
  6948  0129D8  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6949  0129DA  50F3               	movf	prodl,w,c
  6950  0129DC  0100               	movlb	0	; () banked
  6951  0129DE  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6952  0129E0  50F4               	movf	prodh,w,c
  6953  0129E2  0100               	movlb	0	; () banked
  6954  0129E4  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6955  0129E6  0100               	movlb	0	; () banked
  6956  0129E8  51E8               	movf	_lBufferX& (0+255),w,b
  6957  0129EA  0D01               	mullw	1
  6958  0129EC  50F3               	movf	prodl,w,c
  6959  0129EE  0100               	movlb	0	; () banked
  6960  0129F0  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6961  0129F2  6ED9               	movwf	fsr2l,c
  6962  0129F4  50F4               	movf	prodh,w,c
  6963  0129F6  0100               	movlb	0	; () banked
  6964  0129F8  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6965  0129FA  6EDA               	movwf	fsr2h,c
  6966  0129FC  50DF               	movf	indf2,w,c
  6967  0129FE  0B7F               	andlw	127
  6968  012A00  0100               	movlb	0	; () banked
  6969  012A02  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6970  012A04  B4D8               	btfsc	status,2,c
  6971  012A06  0012               	return	
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6975  012A08  0E01               	movlw	1
  6976  012A0A  0100               	movlb	0	; () banked
  6977  012A0C  6FFF               	movwf	_change& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980  012A0E  0100               	movlb	0	; () banked
  6981  012A10  51E7               	movf	_lBufferY& (0+255),w,b
  6982  012A12  0D14               	mullw	20
  6983  012A14  0EC8               	movlw	low _lBuffer
  6984  012A16  0100               	movlb	0	; () banked
  6985  012A18  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6986  012A1A  0E04               	movlw	high _lBuffer
  6987  012A1C  0100               	movlb	0	; () banked
  6988  012A1E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6989  012A20  50F3               	movf	prodl,w,c
  6990  012A22  0100               	movlb	0	; () banked
  6991  012A24  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6992  012A26  50F4               	movf	prodh,w,c
  6993  012A28  0100               	movlb	0	; () banked
  6994  012A2A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6995  012A2C  0100               	movlb	0	; () banked
  6996  012A2E  51E8               	movf	_lBufferX& (0+255),w,b
  6997  012A30  0D01               	mullw	1
  6998  012A32  50F3               	movf	prodl,w,c
  6999  012A34  0100               	movlb	0	; () banked
  7000  012A36  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  7001  012A38  6ED9               	movwf	fsr2l,c
  7002  012A3A  50F4               	movf	prodh,w,c
  7003  012A3C  0100               	movlb	0	; () banked
  7004  012A3E  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7005  012A40  6EDA               	movwf	fsr2h,c
  7006  012A42  0100               	movlb	0	; () banked
  7007  012A44  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  7008  012A46  0980               	iorlw	128
  7009  012A48  6EDF               	movwf	indf2,c
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;Console.c: 372: };
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;Console.c: 371: return;
  7016                           
  7017                           ; BSR set to: 0
  7018                           
  7019                           ; BSR set to: 0
  7020  012A4A  0012               	return	
  7021  012A4C                     l1036:
  7022                           
  7023                           ; BSR set to: 0
  7024  012A4C  0100               	movlb	0	; () banked
  7025  012A4E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  7026                           
  7027                           ; Switch size 1, requested type "space"
  7028                           ; Number of cases is 8, Range of values is 7 to 35
  7029                           ; switch strategies available:
  7030                           ; Name         Instructions Cycles
  7031                           ; simple_byte           25    13 (average)
  7032                           ;	Chosen strategy is simple_byte
  7033  012A50  0A07               	xorlw	7	; case 7
  7034  012A52  B4D8               	btfsc	status,2,c
  7035  012A54  D756               	goto	l1043
  7036  012A56  0A0F               	xorlw	15	; case 8
  7037  012A58  B4D8               	btfsc	status,2,c
  7038  012A5A  D74A               	goto	l1040
  7039  012A5C  0A01               	xorlw	1	; case 9
  7040  012A5E  B4D8               	btfsc	status,2,c
  7041  012A60  D74D               	goto	l1042
  7042  012A62  0A03               	xorlw	3	; case 10
  7043  012A64  B4D8               	btfsc	status,2,c
  7044  012A66  D741               	goto	l1037
  7045  012A68  0A06               	xorlw	6	; case 12
  7046  012A6A  B4D8               	btfsc	status,2,c
  7047  012A6C  D744               	goto	l1041
  7048  012A6E  0A01               	xorlw	1	; case 13
  7049  012A70  B4D8               	btfsc	status,2,c
  7050  012A72  D73B               	goto	l1037
  7051  012A74  0A2D               	xorlw	45	; case 32
  7052  012A76  B4D8               	btfsc	status,2,c
  7053  012A78  D74A               	goto	l1045
  7054  012A7A  0A03               	xorlw	3	; case 35
  7055  012A7C  B4D8               	btfsc	status,2,c
  7056  012A7E  D744               	goto	l1044
  7057  012A80  D746               	goto	l1045
  7058  012A82                     __end_of_Console_PrintChar:
  7059                           	opt stack 0
  7060                           tblptru	equ	0xFF8
  7061                           tblptrh	equ	0xFF7
  7062                           tblptrl	equ	0xFF6
  7063                           tablat	equ	0xFF5
  7064                           prodh	equ	0xFF4
  7065                           prodl	equ	0xFF3
  7066                           postinc0	equ	0xFEE
  7067                           wreg	equ	0xFE8
  7068                           postdec1	equ	0xFE5
  7069                           fsr1h	equ	0xFE2
  7070                           fsr1l	equ	0xFE1
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           fsr2h	equ	0xFDA
  7075                           fsr2l	equ	0xFD9
  7076                           status	equ	0xFD8
  7077                           
  7078 ;; *************** function _Console_Tab *****************
  7079 ;; Defined at:
  7080 ;;		line 260 in file "Library/Console.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  c               1   15[BANK0 ] unsigned char 
  7085 ;;  i               1   14[BANK0 ] unsigned char 
  7086 ;;  t               1   13[BANK0 ] unsigned char 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;Total ram usage:        8 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    9
  7103 ;; This function calls:
  7104 ;;		_Console_ClearCursor
  7105 ;;		_Console_IncrementCursor
  7106 ;;		___awdiv
  7107 ;; This function is called by:
  7108 ;;		_Console_PrintChar
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text19
  7113  013FDC                     __ptext19:
  7114                           	opt stack 0
  7115  013FDC                     _Console_Tab:
  7116                           	opt stack 18
  7117                           
  7118                           ;Console.c: 262: UINT8 i = 0;
  7119                           
  7120                           ;incstack = 0
  7121  013FDC  0E00               	movlw	0
  7122  013FDE  0100               	movlb	0	; () banked
  7123  013FE0  6F6E               	movwf	Console_Tab@i& (0+255),b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7127  013FE2  0EFA               	movlw	250
  7128  013FE4  2447               	addwf	_gCursor,w,c
  7129  013FE6  0100               	movlb	0	; () banked
  7130  013FE8  6F60               	movwf	___awdiv@dividend& (0+255),b
  7131  013FEA  0EFF               	movlw	255
  7132  013FEC  2048               	addwfc	_gCursor+1,w,c
  7133  013FEE  0100               	movlb	0	; () banked
  7134  013FF0  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  7135  013FF2  0E00               	movlw	0
  7136  013FF4  0100               	movlb	0	; () banked
  7137  013FF6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  7138  013FF8  0E06               	movlw	6
  7139  013FFA  6F62               	movwf	___awdiv@divisor& (0+255),b
  7140  013FFC  ECAF  F0A0         	call	___awdiv	;wreg free
  7141  014000  0100               	movlb	0	; () banked
  7142  014002  5160               	movf	?___awdiv& (0+255),w,b
  7143  014004  0100               	movlb	0	; () banked
  7144  014006  6F6F               	movwf	Console_Tab@c& (0+255),b
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;Console.c: 264: UINT8 t = c/4;
  7148  014008  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  7149  01400C  0100               	movlb	0	; () banked
  7150  01400E  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  7151  014010  0E00               	movlw	0
  7152  014012  0100               	movlb	0	; () banked
  7153  014014  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  7154  014016  0E04               	movlw	4
  7155  014018  6F62               	movwf	___awdiv@divisor& (0+255),b
  7156  01401A  ECAF  F0A0         	call	___awdiv	;wreg free
  7157  01401E  0100               	movlb	0	; () banked
  7158  014020  5160               	movf	?___awdiv& (0+255),w,b
  7159  014022  0100               	movlb	0	; () banked
  7160  014024  6F6D               	movwf	Console_Tab@t& (0+255),b
  7161                           
  7162                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7163  014026  0E00               	movlw	0
  7164  014028  0100               	movlb	0	; () banked
  7165  01402A  6F6E               	movwf	Console_Tab@i& (0+255),b
  7166  01402C  D006               	goto	l1009
  7167  01402E                     
  7168                           ; BSR set to: 0
  7169                           ;Console.c: 266: {
  7170                           ;Console.c: 267: Console_ClearCursor();
  7171                           
  7172                           ; BSR set to: 0
  7173  01402E  EC24  F0AF         	call	_Console_ClearCursor	;wreg free
  7174                           
  7175                           ;Console.c: 268: Console_IncrementCursor();
  7176  014032  ECCE  F0AB         	call	_Console_IncrementCursor	;wreg free
  7177  014036  0100               	movlb	0	; () banked
  7178  014038  2B6E               	incf	Console_Tab@i& (0+255),f,b
  7179  01403A                     l1009:
  7180                           
  7181                           ; BSR set to: 0
  7182                           
  7183                           ; BSR set to: 0
  7184  01403A  0100               	movlb	0	; () banked
  7185  01403C  516D               	movf	Console_Tab@t& (0+255),w,b
  7186  01403E  0D04               	mullw	4
  7187  014040  1EF3               	comf	prodl,f,c
  7188  014042  1EF4               	comf	prodh,f,c
  7189  014044  4AF3               	infsnz	prodl,f,c
  7190  014046  2AF4               	incf	prodh,f,c
  7191  014048  0100               	movlb	0	; () banked
  7192  01404A  516F               	movf	Console_Tab@c& (0+255),w,b
  7193  01404C  0100               	movlb	0	; () banked
  7194  01404E  6F68               	movwf	??_Console_Tab& (0+255),b
  7195  014050  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  7196  014052  50F3               	movf	prodl,w,c
  7197  014054  0100               	movlb	0	; () banked
  7198  014056  2768               	addwf	??_Console_Tab& (0+255),f,b
  7199  014058  50F4               	movf	prodh,w,c
  7200  01405A  0100               	movlb	0	; () banked
  7201  01405C  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7202  01405E  0100               	movlb	0	; () banked
  7203  014060  1F68               	comf	??_Console_Tab& (0+255),f,b
  7204  014062  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  7205  014064  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  7206  014066  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  7207  014068  0E04               	movlw	4
  7208  01406A  0100               	movlb	0	; () banked
  7209  01406C  2768               	addwf	??_Console_Tab& (0+255),f,b
  7210  01406E  0E00               	movlw	0
  7211  014070  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7212  014072  0100               	movlb	0	; () banked
  7213  014074  516E               	movf	Console_Tab@i& (0+255),w,b
  7214  014076  0100               	movlb	0	; () banked
  7215  014078  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  7216  01407A  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  7217  01407C  0100               	movlb	0	; () banked
  7218  01407E  5168               	movf	??_Console_Tab& (0+255),w,b
  7219  014080  0100               	movlb	0	; () banked
  7220  014082  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7221  014084  0100               	movlb	0	; () banked
  7222  014086  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  7223  014088  0A80               	xorlw	128
  7224  01408A  0100               	movlb	0	; () banked
  7225  01408C  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  7226  01408E  0100               	movlb	0	; () banked
  7227  014090  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  7228  014092  0A80               	xorlw	128
  7229  014094  0100               	movlb	0	; () banked
  7230  014096  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7231  014098  B0D8               	btfsc	status,0,c
  7232  01409A  0012               	return	
  7233  01409C  D7C8               	goto	l1010
  7234  01409E                     __end_of_Console_Tab:
  7235                           	opt stack 0
  7236                           tblptru	equ	0xFF8
  7237                           tblptrh	equ	0xFF7
  7238                           tblptrl	equ	0xFF6
  7239                           tablat	equ	0xFF5
  7240                           prodh	equ	0xFF4
  7241                           prodl	equ	0xFF3
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           postdec1	equ	0xFE5
  7245                           fsr1h	equ	0xFE2
  7246                           fsr1l	equ	0xFE1
  7247                           indf2	equ	0xFDF
  7248                           postinc2	equ	0xFDE
  7249                           postdec2	equ	0xFDD
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function ___awdiv *****************
  7255 ;; Defined at:
  7256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  dividend        2    0[BANK0 ] int 
  7259 ;;  divisor         2    2[BANK0 ] int 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;  quotient        2    6[BANK0 ] int 
  7262 ;;  sign            1    5[BANK0 ] unsigned char 
  7263 ;;  counter         1    4[BANK0 ] unsigned char 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  2    0[BANK0 ] int 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;Total ram usage:        8 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    7
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_Console_Tab
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text20
  7288  01415E                     __ptext20:
  7289                           	opt stack 0
  7290  01415E                     ___awdiv:
  7291                           	opt stack 19
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;incstack = 0
  7295  01415E  0E00               	movlw	0
  7296  014160  0100               	movlb	0	; () banked
  7297  014162  6F65               	movwf	___awdiv@sign& (0+255),b
  7298                           
  7299                           ; BSR set to: 0
  7300  014164  0100               	movlb	0	; () banked
  7301  014166  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7302  014168  D008               	goto	l2612
  7303                           
  7304                           ; BSR set to: 0
  7305  01416A  0100               	movlb	0	; () banked
  7306  01416C  6D62               	negf	___awdiv@divisor& (0+255),b
  7307  01416E  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7308  014170  B0D8               	btfsc	status,0,c
  7309  014172  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7310                           
  7311                           ; BSR set to: 0
  7312  014174  0E01               	movlw	1
  7313  014176  0100               	movlb	0	; () banked
  7314  014178  6F65               	movwf	___awdiv@sign& (0+255),b
  7315  01417A                     l2612:
  7316                           
  7317                           ; BSR set to: 0
  7318                           
  7319                           ; BSR set to: 0
  7320  01417A  0100               	movlb	0	; () banked
  7321  01417C  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7322  01417E  D008               	goto	l2613
  7323                           
  7324                           ; BSR set to: 0
  7325  014180  0100               	movlb	0	; () banked
  7326  014182  6D60               	negf	___awdiv@dividend& (0+255),b
  7327  014184  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7328  014186  B0D8               	btfsc	status,0,c
  7329  014188  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7330                           
  7331                           ; BSR set to: 0
  7332  01418A  0E01               	movlw	1
  7333  01418C  0100               	movlb	0	; () banked
  7334  01418E  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7335  014190                     l2613:
  7336                           
  7337                           ; BSR set to: 0
  7338                           
  7339                           ; BSR set to: 0
  7340  014190  0E00               	movlw	0
  7341  014192  0100               	movlb	0	; () banked
  7342  014194  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7343  014196  0E00               	movlw	0
  7344  014198  6F66               	movwf	___awdiv@quotient& (0+255),b
  7345                           
  7346                           ; BSR set to: 0
  7347  01419A  0100               	movlb	0	; () banked
  7348  01419C  5162               	movf	___awdiv@divisor& (0+255),w,b
  7349  01419E  0100               	movlb	0	; () banked
  7350  0141A0  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7351  0141A2  B4D8               	btfsc	status,2,c
  7352  0141A4  D02C               	goto	l2620
  7353                           
  7354                           ; BSR set to: 0
  7355  0141A6  0E01               	movlw	1
  7356  0141A8  0100               	movlb	0	; () banked
  7357  0141AA  6F64               	movwf	___awdiv@counter& (0+255),b
  7358  0141AC  D006               	goto	l2615
  7359  0141AE                     
  7360                           ; BSR set to: 0
  7361                           
  7362                           ; BSR set to: 0
  7363  0141AE  0100               	movlb	0	; () banked
  7364  0141B0  90D8               	bcf	status,0,c
  7365  0141B2  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7366  0141B4  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7367  0141B6  0100               	movlb	0	; () banked
  7368  0141B8  2B64               	incf	___awdiv@counter& (0+255),f,b
  7369  0141BA                     l2615:
  7370                           
  7371                           ; BSR set to: 0
  7372                           
  7373                           ; BSR set to: 0
  7374  0141BA  0100               	movlb	0	; () banked
  7375  0141BC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7376  0141BE  D7F7               	goto	l2616
  7377  0141C0                     u9240:
  7378                           
  7379                           ; BSR set to: 0
  7380                           
  7381                           ; BSR set to: 0
  7382                           
  7383                           ; BSR set to: 0
  7384  0141C0  0100               	movlb	0	; () banked
  7385  0141C2  90D8               	bcf	status,0,c
  7386  0141C4  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7387  0141C6  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7388                           
  7389                           ; BSR set to: 0
  7390  0141C8  0100               	movlb	0	; () banked
  7391  0141CA  5162               	movf	___awdiv@divisor& (0+255),w,b
  7392  0141CC  0100               	movlb	0	; () banked
  7393  0141CE  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7394  0141D0  0100               	movlb	0	; () banked
  7395  0141D2  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7396  0141D4  0100               	movlb	0	; () banked
  7397  0141D6  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7398  0141D8  A0D8               	btfss	status,0,c
  7399  0141DA  D00A               	goto	l2619
  7400                           
  7401                           ; BSR set to: 0
  7402  0141DC  0100               	movlb	0	; () banked
  7403  0141DE  5162               	movf	___awdiv@divisor& (0+255),w,b
  7404  0141E0  0100               	movlb	0	; () banked
  7405  0141E2  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7406  0141E4  0100               	movlb	0	; () banked
  7407  0141E6  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7408  0141E8  0100               	movlb	0	; () banked
  7409  0141EA  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7410                           
  7411                           ; BSR set to: 0
  7412  0141EC  0100               	movlb	0	; () banked
  7413  0141EE  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7414  0141F0                     l2619:
  7415                           
  7416                           ; BSR set to: 0
  7417                           
  7418                           ; BSR set to: 0
  7419  0141F0  0100               	movlb	0	; () banked
  7420  0141F2  90D8               	bcf	status,0,c
  7421  0141F4  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7422  0141F6  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7423                           
  7424                           ; BSR set to: 0
  7425  0141F8  0100               	movlb	0	; () banked
  7426  0141FA  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7427  0141FC  D7E1               	goto	u9240
  7428  0141FE                     l2620:
  7429                           
  7430                           ; BSR set to: 0
  7431                           
  7432                           ; BSR set to: 0
  7433                           
  7434                           ; BSR set to: 0
  7435  0141FE  0100               	movlb	0	; () banked
  7436  014200  5165               	movf	___awdiv@sign& (0+255),w,b
  7437  014202  0100               	movlb	0	; () banked
  7438  014204  B4D8               	btfsc	status,2,c
  7439  014206  D005               	goto	l2621
  7440                           
  7441                           ; BSR set to: 0
  7442  014208  0100               	movlb	0	; () banked
  7443  01420A  6D66               	negf	___awdiv@quotient& (0+255),b
  7444  01420C  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7445  01420E  B0D8               	btfsc	status,0,c
  7446  014210  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7447  014212                     l2621:
  7448                           
  7449                           ; BSR set to: 0
  7450                           
  7451                           ; BSR set to: 0
  7452  014212  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7453  014216  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7454  01421A  0012               	return	
  7455  01421C                     __end_of___awdiv:
  7456                           	opt stack 0
  7457                           tblptru	equ	0xFF8
  7458                           tblptrh	equ	0xFF7
  7459                           tblptrl	equ	0xFF6
  7460                           tablat	equ	0xFF5
  7461                           prodh	equ	0xFF4
  7462                           prodl	equ	0xFF3
  7463                           postinc0	equ	0xFEE
  7464                           wreg	equ	0xFE8
  7465                           postdec1	equ	0xFE5
  7466                           fsr1h	equ	0xFE2
  7467                           fsr1l	equ	0xFE1
  7468                           indf2	equ	0xFDF
  7469                           postinc2	equ	0xFDE
  7470                           postdec2	equ	0xFDD
  7471                           fsr2h	equ	0xFDA
  7472                           fsr2l	equ	0xFD9
  7473                           status	equ	0xFD8
  7474                           
  7475 ;; *************** function _Console_IncrementCursor *****************
  7476 ;; Defined at:
  7477 ;;		line 243 in file "Library/Console.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;		None
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      unsigned char 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;Total ram usage:        2 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    8
  7498 ;; This function calls:
  7499 ;;		_Console_FormFeed
  7500 ;;		_Console_NewLine
  7501 ;; This function is called by:
  7502 ;;		_Console_Tab
  7503 ;;		_Console_PrintChar
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text21
  7508  01579C                     __ptext21:
  7509                           	opt stack 0
  7510  01579C                     _Console_IncrementCursor:
  7511                           	opt stack 18
  7512                           
  7513                           ;Console.c: 246: lBufferX += 1;
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;incstack = 0
  7517  01579C  0100               	movlb	0	; () banked
  7518  01579E  2BE8               	incf	_lBufferX& (0+255),f,b
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;Console.c: 248: gCursor.x += 6;
  7522  0157A0  0E06               	movlw	6
  7523  0157A2  2647               	addwf	_gCursor,f,c
  7524  0157A4  0E00               	movlw	0
  7525  0157A6  2248               	addwfc	_gCursor+1,f,c
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7529  0157A8  0E06               	movlw	6
  7530  0157AA  2447               	addwf	_gCursor,w,c
  7531  0157AC  0100               	movlb	0	; () banked
  7532  0157AE  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7533  0157B0  0E00               	movlw	0
  7534  0157B2  2048               	addwfc	_gCursor+1,w,c
  7535  0157B4  0100               	movlb	0	; () banked
  7536  0157B6  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7537  0157B8  0100               	movlb	0	; () banked
  7538  0157BA  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7539  0157BC  D009               	goto	l1004
  7540  0157BE  0100               	movlb	0	; () banked
  7541  0157C0  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7542  0157C2  E104               	bnz	u9080
  7543  0157C4  0E80               	movlw	128
  7544  0157C6  0100               	movlb	0	; () banked
  7545  0157C8  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7546  0157CA  B0D8               	btfsc	status,0,c
  7547  0157CC                     u9080:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;Console.c: 250: Console_NewLine();
  7551  0157CC  EC70  F0A5         	call	_Console_NewLine	;wreg free
  7552  0157D0                     l1004:
  7553                           
  7554                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7555  0157D0  0E08               	movlw	8
  7556  0157D2  2449               	addwf	_gCursor+2,w,c
  7557  0157D4  0100               	movlb	0	; () banked
  7558  0157D6  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7559  0157D8  0E00               	movlw	0
  7560  0157DA  204A               	addwfc	_gCursor+3,w,c
  7561  0157DC  0100               	movlb	0	; () banked
  7562  0157DE  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7563  0157E0  0100               	movlb	0	; () banked
  7564  0157E2  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7565  0157E4  D00C               	goto	l1005
  7566  0157E6  0100               	movlb	0	; () banked
  7567  0157E8  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7568  0157EA  E105               	bnz	u9090
  7569  0157EC  0E80               	movlw	128
  7570  0157EE  0100               	movlb	0	; () banked
  7571  0157F0  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7572  0157F2  A0D8               	btfss	status,0,c
  7573  0157F4  D004               	goto	l1005
  7574  0157F6                     u9090:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;Console.c: 252: {
  7578                           ;Console.c: 253: Console_FormFeed();
  7579  0157F6  ECA3  F0A6         	call	_Console_FormFeed	;wreg free
  7580                           
  7581                           ;Console.c: 254: return 1;
  7582  0157FA  0E01               	movlw	1
  7583  0157FC  0012               	return	
  7584  0157FE                     l1005:
  7585                           
  7586                           ;Console.c: 255: }
  7587                           ;Console.c: 257: return 0;
  7588  0157FE  0E00               	movlw	0
  7589  015800  0012               	return	
  7590  015802                     __end_of_Console_IncrementCursor:
  7591                           	opt stack 0
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1h	equ	0xFE2
  7602                           fsr1l	equ	0xFE1
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _Console_NewLine *****************
  7611 ;; Defined at:
  7612 ;;		line 175 in file "Library/Console.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;Total ram usage:        2 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    7
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_Console_IncrementCursor
  7637 ;;		_Console_PrintChar
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text22
  7642  014AE0                     __ptext22:
  7643                           	opt stack 0
  7644  014AE0                     _Console_NewLine:
  7645                           	opt stack 18
  7646                           
  7647                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  7648                           
  7649                           ;incstack = 0
  7650  014AE0  D03E               	goto	l983
  7651  014AE2                     
  7652                           ;Console.c: 179: {
  7653                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  7654  014AE2  0100               	movlb	0	; () banked
  7655  014AE4  51E7               	movf	_lBufferY& (0+255),w,b
  7656  014AE6  0D14               	mullw	20
  7657  014AE8  0EC8               	movlw	low _lBuffer
  7658  014AEA  0100               	movlb	0	; () banked
  7659  014AEC  6F60               	movwf	??_Console_NewLine& (0+255),b
  7660  014AEE  0E04               	movlw	high _lBuffer
  7661  014AF0  0100               	movlb	0	; () banked
  7662  014AF2  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7663  014AF4  50F3               	movf	prodl,w,c
  7664  014AF6  0100               	movlb	0	; () banked
  7665  014AF8  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7666  014AFA  50F4               	movf	prodh,w,c
  7667  014AFC  0100               	movlb	0	; () banked
  7668  014AFE  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7669  014B00  0100               	movlb	0	; () banked
  7670  014B02  51E8               	movf	_lBufferX& (0+255),w,b
  7671  014B04  0D01               	mullw	1
  7672  014B06  50F3               	movf	prodl,w,c
  7673  014B08  0100               	movlb	0	; () banked
  7674  014B0A  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7675  014B0C  6ED9               	movwf	fsr2l,c
  7676  014B0E  50F4               	movf	prodh,w,c
  7677  014B10  0100               	movlb	0	; () banked
  7678  014B12  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7679  014B14  6EDA               	movwf	fsr2h,c
  7680  014B16  50DF               	movf	indf2,w,c
  7681  014B18  B4D8               	btfsc	status,2,c
  7682  014B1A  D01F               	goto	l985
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  7686  014B1C  0E01               	movlw	1
  7687  014B1E  0100               	movlb	0	; () banked
  7688  014B20  6FFF               	movwf	_change& (0+255),b
  7689                           
  7690                           ; BSR set to: 0
  7691  014B22  0100               	movlb	0	; () banked
  7692  014B24  51E7               	movf	_lBufferY& (0+255),w,b
  7693  014B26  0D14               	mullw	20
  7694  014B28  0EC8               	movlw	low _lBuffer
  7695  014B2A  0100               	movlb	0	; () banked
  7696  014B2C  6F60               	movwf	??_Console_NewLine& (0+255),b
  7697  014B2E  0E04               	movlw	high _lBuffer
  7698  014B30  0100               	movlb	0	; () banked
  7699  014B32  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7700  014B34  50F3               	movf	prodl,w,c
  7701  014B36  0100               	movlb	0	; () banked
  7702  014B38  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7703  014B3A  50F4               	movf	prodh,w,c
  7704  014B3C  0100               	movlb	0	; () banked
  7705  014B3E  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7706  014B40  0100               	movlb	0	; () banked
  7707  014B42  51E8               	movf	_lBufferX& (0+255),w,b
  7708  014B44  0D01               	mullw	1
  7709  014B46  50F3               	movf	prodl,w,c
  7710  014B48  0100               	movlb	0	; () banked
  7711  014B4A  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7712  014B4C  6ED9               	movwf	fsr2l,c
  7713  014B4E  50F4               	movf	prodh,w,c
  7714  014B50  0100               	movlb	0	; () banked
  7715  014B52  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7716  014B54  6EDA               	movwf	fsr2h,c
  7717  014B56  0E80               	movlw	128
  7718  014B58  6EDF               	movwf	indf2,c
  7719  014B5A                     l985:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;Console.c: 182: lBufferX ++;
  7723                           
  7724                           ; BSR set to: 0
  7725  014B5A  0100               	movlb	0	; () banked
  7726  014B5C  2BE8               	incf	_lBufferX& (0+255),f,b
  7727  014B5E                     l983:
  7728                           
  7729                           ; BSR set to: 0
  7730  014B5E  0E13               	movlw	19
  7731  014B60  0100               	movlb	0	; () banked
  7732  014B62  65E8               	cpfsgt	_lBufferX& (0+255),b
  7733  014B64  D7BE               	goto	l984
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;Console.c: 183: }
  7737                           ;Console.c: 185: lBufferX = 0;
  7738                           
  7739                           ; BSR set to: 0
  7740  014B66  0E00               	movlw	0
  7741  014B68  0100               	movlb	0	; () banked
  7742  014B6A  6FE8               	movwf	_lBufferX& (0+255),b
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;Console.c: 186: lBufferY ++;
  7746  014B6C  0100               	movlb	0	; () banked
  7747  014B6E  2BE7               	incf	_lBufferY& (0+255),f,b
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;Console.c: 188: gCursor.y += 8;
  7751  014B70  0E08               	movlw	8
  7752  014B72  2649               	addwf	_gCursor+2,f,c
  7753  014B74  0E00               	movlw	0
  7754  014B76  224A               	addwfc	_gCursor+3,f,c
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;Console.c: 189: gCursor.x = 6;
  7758  014B78  0E00               	movlw	0
  7759  014B7A  6E48               	movwf	_gCursor+1,c
  7760  014B7C  0E06               	movlw	6
  7761  014B7E  6E47               	movwf	_gCursor,c
  7762                           
  7763                           ; BSR set to: 0
  7764  014B80  0012               	return		;funcret
  7765  014B82                     __end_of_Console_NewLine:
  7766                           	opt stack 0
  7767                           tblptru	equ	0xFF8
  7768                           tblptrh	equ	0xFF7
  7769                           tblptrl	equ	0xFF6
  7770                           tablat	equ	0xFF5
  7771                           prodh	equ	0xFF4
  7772                           prodl	equ	0xFF3
  7773                           postinc0	equ	0xFEE
  7774                           wreg	equ	0xFE8
  7775                           postdec1	equ	0xFE5
  7776                           fsr1h	equ	0xFE2
  7777                           fsr1l	equ	0xFE1
  7778                           indf2	equ	0xFDF
  7779                           postinc2	equ	0xFDE
  7780                           postdec2	equ	0xFDD
  7781                           fsr2h	equ	0xFDA
  7782                           fsr2l	equ	0xFD9
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function _Console_FormFeed *****************
  7786 ;; Defined at:
  7787 ;;		line 192 in file "Library/Console.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  y               1    3[BANK0 ] unsigned char 
  7792 ;;  x               1    2[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;Total ram usage:        4 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    7
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_Console_IncrementCursor
  7813 ;;		_Console_PrintChar
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text23
  7818  014D46                     __ptext23:
  7819                           	opt stack 0
  7820  014D46                     _Console_FormFeed:
  7821                           	opt stack 18
  7822                           
  7823                           ;Console.c: 195: lBufferX = 0;
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;incstack = 0
  7827  014D46  0E00               	movlw	0
  7828  014D48  0100               	movlb	0	; () banked
  7829  014D4A  6FE8               	movwf	_lBufferX& (0+255),b
  7830                           
  7831                           ;Console.c: 196: lBufferY = 0;
  7832  014D4C  0E00               	movlw	0
  7833  014D4E  0100               	movlb	0	; () banked
  7834  014D50  6FE7               	movwf	_lBufferY& (0+255),b
  7835                           
  7836                           ;Console.c: 197: UINT8 x, y;
  7837                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7838  014D52  0E00               	movlw	0
  7839  014D54  0100               	movlb	0	; () banked
  7840  014D56  6F63               	movwf	Console_FormFeed@y& (0+255),b
  7841  014D58                     l12234:
  7842                           
  7843                           ; BSR set to: 0
  7844  014D58  0E0E               	movlw	14
  7845  014D5A  0100               	movlb	0	; () banked
  7846  014D5C  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  7847  014D5E  D001               	goto	l990
  7848  014D60  D02D               	goto	u8880
  7849  014D62                     l990:
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7853                           
  7854                           ; BSR set to: 0
  7855  014D62  0E00               	movlw	0
  7856  014D64  0100               	movlb	0	; () banked
  7857  014D66  6F62               	movwf	Console_FormFeed@x& (0+255),b
  7858  014D68                     l12240:
  7859                           
  7860                           ; BSR set to: 0
  7861  014D68  0E13               	movlw	19
  7862  014D6A  0100               	movlb	0	; () banked
  7863  014D6C  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  7864  014D6E  D001               	goto	l992
  7865  014D70  D022               	goto	u8870
  7866  014D72                     l992:
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7870                           
  7871                           ; BSR set to: 0
  7872  014D72  0E01               	movlw	1
  7873  014D74  0100               	movlb	0	; () banked
  7874  014D76  6FFF               	movwf	_change& (0+255),b
  7875                           
  7876                           ; BSR set to: 0
  7877  014D78  0100               	movlb	0	; () banked
  7878  014D7A  5163               	movf	Console_FormFeed@y& (0+255),w,b
  7879  014D7C  0D14               	mullw	20
  7880  014D7E  0EC8               	movlw	low _lBuffer
  7881  014D80  0100               	movlb	0	; () banked
  7882  014D82  6F60               	movwf	??_Console_FormFeed& (0+255),b
  7883  014D84  0E04               	movlw	high _lBuffer
  7884  014D86  0100               	movlb	0	; () banked
  7885  014D88  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7886  014D8A  50F3               	movf	prodl,w,c
  7887  014D8C  0100               	movlb	0	; () banked
  7888  014D8E  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  7889  014D90  50F4               	movf	prodh,w,c
  7890  014D92  0100               	movlb	0	; () banked
  7891  014D94  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7892  014D96  0100               	movlb	0	; () banked
  7893  014D98  5162               	movf	Console_FormFeed@x& (0+255),w,b
  7894  014D9A  0D01               	mullw	1
  7895  014D9C  50F3               	movf	prodl,w,c
  7896  014D9E  0100               	movlb	0	; () banked
  7897  014DA0  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  7898  014DA2  6ED9               	movwf	fsr2l,c
  7899  014DA4  50F4               	movf	prodh,w,c
  7900  014DA6  0100               	movlb	0	; () banked
  7901  014DA8  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7902  014DAA  6EDA               	movwf	fsr2h,c
  7903  014DAC  0E80               	movlw	128
  7904  014DAE  6EDF               	movwf	indf2,c
  7905                           
  7906                           ; BSR set to: 0
  7907  014DB0  0100               	movlb	0	; () banked
  7908  014DB2  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  7909  014DB4  D7D9               	goto	l12240
  7910  014DB6                     u8870:
  7911                           
  7912                           ; BSR set to: 0
  7913                           
  7914                           ; BSR set to: 0
  7915  014DB6  0100               	movlb	0	; () banked
  7916  014DB8  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  7917  014DBA  D7CE               	goto	l12234
  7918  014DBC                     u8880:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;Console.c: 204: clearall = 1;
  7922                           
  7923                           ; BSR set to: 0
  7924  014DBC  0E01               	movlw	1
  7925  014DBE  0100               	movlb	0	; () banked
  7926  014DC0  6FE9               	movwf	_clearall& (0+255),b
  7927                           
  7928                           ;Console.c: 205: gCursor.x = 6;
  7929  014DC2  0E00               	movlw	0
  7930  014DC4  6E48               	movwf	_gCursor+1,c
  7931  014DC6  0E06               	movlw	6
  7932  014DC8  6E47               	movwf	_gCursor,c
  7933                           
  7934                           ;Console.c: 206: gCursor.y = 6;
  7935  014DCA  0E00               	movlw	0
  7936  014DCC  6E4A               	movwf	_gCursor+3,c
  7937  014DCE  0E06               	movlw	6
  7938  014DD0  6E49               	movwf	_gCursor+2,c
  7939                           
  7940                           ; BSR set to: 0
  7941  014DD2  0012               	return		;funcret
  7942  014DD4                     __end_of_Console_FormFeed:
  7943                           	opt stack 0
  7944                           tblptru	equ	0xFF8
  7945                           tblptrh	equ	0xFF7
  7946                           tblptrl	equ	0xFF6
  7947                           tablat	equ	0xFF5
  7948                           prodh	equ	0xFF4
  7949                           prodl	equ	0xFF3
  7950                           postinc0	equ	0xFEE
  7951                           wreg	equ	0xFE8
  7952                           postdec1	equ	0xFE5
  7953                           fsr1h	equ	0xFE2
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962 ;; *************** function _Console_ResetCursor *****************
  7963 ;; Defined at:
  7964 ;;		line 297 in file "Library/Console.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;		None
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;		None
  7969 ;; Return value:  Size  Location     Type
  7970 ;;                  1    wreg      void 
  7971 ;; Registers used:
  7972 ;;		wreg, status,2
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;Total ram usage:        0 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; Hardware stack levels required when called:    7
  7985 ;; This function calls:
  7986 ;;		Nothing
  7987 ;; This function is called by:
  7988 ;;		_Console_PrintChar
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text24
  7993  016356                     __ptext24:
  7994                           	opt stack 0
  7995  016356                     _Console_ResetCursor:
  7996                           	opt stack 20
  7997                           
  7998                           ;Console.c: 299: gCursor.x = 6;
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;incstack = 0
  8002  016356  0E00               	movlw	0
  8003  016358  6E48               	movwf	_gCursor+1,c
  8004  01635A  0E06               	movlw	6
  8005  01635C  6E47               	movwf	_gCursor,c
  8006                           
  8007                           ;Console.c: 300: gCursor.y = 6;
  8008  01635E  0E00               	movlw	0
  8009  016360  6E4A               	movwf	_gCursor+3,c
  8010  016362  0E06               	movlw	6
  8011  016364  6E49               	movwf	_gCursor+2,c
  8012                           
  8013                           ;Console.c: 303: lBufferX = 0;
  8014  016366  0E00               	movlw	0
  8015  016368  0100               	movlb	0	; () banked
  8016  01636A  6FE8               	movwf	_lBufferX& (0+255),b
  8017                           
  8018                           ;Console.c: 304: lBufferY = 0;
  8019  01636C  0E00               	movlw	0
  8020  01636E  0100               	movlb	0	; () banked
  8021  016370  6FE7               	movwf	_lBufferY& (0+255),b
  8022                           
  8023                           ; BSR set to: 0
  8024  016372  0012               	return		;funcret
  8025  016374                     __end_of_Console_ResetCursor:
  8026                           	opt stack 0
  8027                           tblptru	equ	0xFF8
  8028                           tblptrh	equ	0xFF7
  8029                           tblptrl	equ	0xFF6
  8030                           tablat	equ	0xFF5
  8031                           prodh	equ	0xFF4
  8032                           prodl	equ	0xFF3
  8033                           postinc0	equ	0xFEE
  8034                           wreg	equ	0xFE8
  8035                           postdec1	equ	0xFE5
  8036                           fsr1h	equ	0xFE2
  8037                           fsr1l	equ	0xFE1
  8038                           indf2	equ	0xFDF
  8039                           postinc2	equ	0xFDE
  8040                           postdec2	equ	0xFDD
  8041                           fsr2h	equ	0xFDA
  8042                           fsr2l	equ	0xFD9
  8043                           status	equ	0xFD8
  8044                           
  8045 ;; *************** function _Console_Backspace *****************
  8046 ;; Defined at:
  8047 ;;		line 209 in file "Library/Console.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;		None
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;		None
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;Total ram usage:        0 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    8
  8068 ;; This function calls:
  8069 ;;		_Console_ClearCursor
  8070 ;; This function is called by:
  8071 ;;		_Console_PrintChar
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text25
  8076  01592A                     __ptext25:
  8077                           	opt stack 0
  8078  01592A                     _Console_Backspace:
  8079                           	opt stack 19
  8080                           
  8081                           ;Console.c: 211: if (lBufferX > 0)
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;incstack = 0
  8085  01592A  0100               	movlb	0	; () banked
  8086  01592C  51E8               	movf	_lBufferX& (0+255),w,b
  8087  01592E  B4D8               	btfsc	status,2,c
  8088  015930  D007               	goto	l997
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;Console.c: 212: {
  8092                           ;Console.c: 213: gCursor.x -= 6;
  8093  015932  0EFA               	movlw	250
  8094  015934  2647               	addwf	_gCursor,f,c
  8095  015936  0EFF               	movlw	255
  8096  015938  2248               	addwfc	_gCursor+1,f,c
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;Console.c: 216: lBufferX --;
  8100  01593A  0100               	movlb	0	; () banked
  8101  01593C  07E8               	decf	_lBufferX& (0+255),f,b
  8102                           
  8103                           ;Console.c: 218: }
  8104  01593E  D020               	goto	l1000
  8105  015940                     l997:
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;Console.c: 219: else if (lBufferY > 0)
  8109                           
  8110                           ; BSR set to: 0
  8111  015940  0100               	movlb	0	; () banked
  8112  015942  51E7               	movf	_lBufferY& (0+255),w,b
  8113  015944  B4D8               	btfsc	status,2,c
  8114  015946  D00E               	goto	l999
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;Console.c: 220: {
  8118                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8119  015948  0E00               	movlw	0
  8120  01594A  6E48               	movwf	_gCursor+1,c
  8121  01594C  0E72               	movlw	114
  8122  01594E  6E47               	movwf	_gCursor,c
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;Console.c: 222: gCursor.y -= 8;
  8126  015950  0EF8               	movlw	248
  8127  015952  2649               	addwf	_gCursor+2,f,c
  8128  015954  0EFF               	movlw	255
  8129  015956  224A               	addwfc	_gCursor+3,f,c
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8133  015958  0E13               	movlw	19
  8134  01595A  0100               	movlb	0	; () banked
  8135  01595C  6FE8               	movwf	_lBufferX& (0+255),b
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;Console.c: 226: lBufferY --;
  8139  01595E  0100               	movlb	0	; () banked
  8140  015960  07E7               	decf	_lBufferY& (0+255),f,b
  8141                           
  8142                           ;Console.c: 228: }
  8143  015962  D00E               	goto	l1000
  8144  015964                     l999:
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;Console.c: 229: else
  8148                           ;Console.c: 230: {
  8149                           ;Console.c: 231: gCursor.x = 6;
  8150                           
  8151                           ; BSR set to: 0
  8152  015964  0E00               	movlw	0
  8153  015966  6E48               	movwf	_gCursor+1,c
  8154  015968  0E06               	movlw	6
  8155  01596A  6E47               	movwf	_gCursor,c
  8156                           
  8157                           ;Console.c: 232: gCursor.y = 6;
  8158  01596C  0E00               	movlw	0
  8159  01596E  6E4A               	movwf	_gCursor+3,c
  8160  015970  0E06               	movlw	6
  8161  015972  6E49               	movwf	_gCursor+2,c
  8162                           
  8163                           ;Console.c: 235: lBufferX = 0;
  8164  015974  0E00               	movlw	0
  8165  015976  0100               	movlb	0	; () banked
  8166  015978  6FE8               	movwf	_lBufferX& (0+255),b
  8167                           
  8168                           ;Console.c: 236: lBufferY = 0;
  8169  01597A  0E00               	movlw	0
  8170  01597C  0100               	movlb	0	; () banked
  8171  01597E  6FE7               	movwf	_lBufferY& (0+255),b
  8172  015980                     l1000:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;Console.c: 238: }
  8176                           ;Console.c: 240: Console_ClearCursor();
  8177                           
  8178                           ; BSR set to: 0
  8179                           
  8180                           ; BSR set to: 0
  8181  015980  EC24  F0AF         	call	_Console_ClearCursor	;wreg free
  8182  015984  0012               	return		;funcret
  8183  015986                     __end_of_Console_Backspace:
  8184                           	opt stack 0
  8185                           tblptru	equ	0xFF8
  8186                           tblptrh	equ	0xFF7
  8187                           tblptrl	equ	0xFF6
  8188                           tablat	equ	0xFF5
  8189                           prodh	equ	0xFF4
  8190                           prodl	equ	0xFF3
  8191                           postinc0	equ	0xFEE
  8192                           wreg	equ	0xFE8
  8193                           postdec1	equ	0xFE5
  8194                           fsr1h	equ	0xFE2
  8195                           fsr1l	equ	0xFE1
  8196                           indf2	equ	0xFDF
  8197                           postinc2	equ	0xFDE
  8198                           postdec2	equ	0xFDD
  8199                           fsr2h	equ	0xFDA
  8200                           fsr2l	equ	0xFD9
  8201                           status	equ	0xFD8
  8202                           
  8203 ;; *************** function _Console_ClearCursor *****************
  8204 ;; Defined at:
  8205 ;;		line 308 in file "Library/Console.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;		None
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;		None
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      void 
  8212 ;; Registers used:
  8213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;Total ram usage:        2 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    7
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_Console_Backspace
  8230 ;;		_Console_Tab
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           	psect	text26
  8235  015E48                     __ptext26:
  8236                           	opt stack 0
  8237  015E48                     _Console_ClearCursor:
  8238                           	opt stack 19
  8239                           
  8240                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8241                           
  8242                           ;incstack = 0
  8243  015E48  0E01               	movlw	1
  8244  015E4A  0100               	movlb	0	; () banked
  8245  015E4C  6FFF               	movwf	_change& (0+255),b
  8246                           
  8247                           ; BSR set to: 0
  8248  015E4E  0100               	movlb	0	; () banked
  8249  015E50  51E7               	movf	_lBufferY& (0+255),w,b
  8250  015E52  0D14               	mullw	20
  8251  015E54  0EC8               	movlw	low _lBuffer
  8252  015E56  0100               	movlb	0	; () banked
  8253  015E58  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  8254  015E5A  0E04               	movlw	high _lBuffer
  8255  015E5C  0100               	movlb	0	; () banked
  8256  015E5E  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8257  015E60  50F3               	movf	prodl,w,c
  8258  015E62  0100               	movlb	0	; () banked
  8259  015E64  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  8260  015E66  50F4               	movf	prodh,w,c
  8261  015E68  0100               	movlb	0	; () banked
  8262  015E6A  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8263  015E6C  0100               	movlb	0	; () banked
  8264  015E6E  51E8               	movf	_lBufferX& (0+255),w,b
  8265  015E70  0D01               	mullw	1
  8266  015E72  50F3               	movf	prodl,w,c
  8267  015E74  0100               	movlb	0	; () banked
  8268  015E76  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  8269  015E78  6ED9               	movwf	fsr2l,c
  8270  015E7A  50F4               	movf	prodh,w,c
  8271  015E7C  0100               	movlb	0	; () banked
  8272  015E7E  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8273  015E80  6EDA               	movwf	fsr2h,c
  8274  015E82  0E80               	movlw	128
  8275  015E84  6EDF               	movwf	indf2,c
  8276                           
  8277                           ; BSR set to: 0
  8278  015E86  0012               	return		;funcret
  8279  015E88                     __end_of_Console_ClearCursor:
  8280                           	opt stack 0
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           postinc0	equ	0xFEE
  8288                           wreg	equ	0xFE8
  8289                           postdec1	equ	0xFE5
  8290                           fsr1h	equ	0xFE2
  8291                           fsr1l	equ	0xFE1
  8292                           indf2	equ	0xFDF
  8293                           postinc2	equ	0xFDE
  8294                           postdec2	equ	0xFDD
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function _irobot_stop_motion *****************
  8300 ;; Defined at:
  8301 ;;		line 299 in file "Library/iRobotSerial.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  isScript        1    wreg     unsigned char 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  isScript        1   25[BANK0 ] unsigned char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;Total ram usage:        1 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    9
  8322 ;; This function calls:
  8323 ;;		_irobot_move
  8324 ;; This function is called by:
  8325 ;;		_irobot_rotate
  8326 ;;		_move_and_rotate
  8327 ;;		_mode1
  8328 ;;		_mode2
  8329 ;;		_mode4
  8330 ;;		_irobot_move_to_simple
  8331 ;;		_irobot_rotate_to
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text27
  8336  015CF0                     __ptext27:
  8337                           	opt stack 0
  8338  015CF0                     _irobot_stop_motion:
  8339                           	opt stack 20
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;incstack = 0
  8343                           ;irobot_stop_motion@isScript stored from wreg
  8344  015CF0  0100               	movlb	0	; () banked
  8345  015CF2  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
  8346                           
  8347                           ;iRobotSerial.c: 300: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  8348  015CF4  0100               	movlb	0	; () banked
  8349  015CF6  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
  8350  015CF8  0100               	movlb	0	; () banked
  8351  015CFA  B4D8               	btfsc	status,2,c
  8352  015CFC  D00E               	goto	l2168
  8353                           
  8354                           ; BSR set to: 0
  8355  015CFE  0E00               	movlw	0
  8356  015D00  0100               	movlb	0	; () banked
  8357  015D02  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8358  015D04  0E00               	movlw	0
  8359  015D06  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8360  015D08  0E00               	movlw	0
  8361  015D0A  0100               	movlb	0	; () banked
  8362  015D0C  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8363  015D0E  0E00               	movlw	0
  8364  015D10  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8365  015D12  0E01               	movlw	1
  8366  015D14  EC24  F0A2         	call	_irobot_move
  8367  015D18  0012               	return	
  8368  015D1A                     l2168:
  8369  015D1A  0E00               	movlw	0
  8370  015D1C  0100               	movlb	0	; () banked
  8371  015D1E  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8372  015D20  0E00               	movlw	0
  8373  015D22  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8374  015D24  0E00               	movlw	0
  8375  015D26  0100               	movlb	0	; () banked
  8376  015D28  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8377  015D2A  0E00               	movlw	0
  8378  015D2C  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8379  015D2E  0E00               	movlw	0
  8380  015D30  EC24  F0A2         	call	_irobot_move
  8381  015D34  0012               	return	
  8382  015D36                     __end_of_irobot_stop_motion:
  8383                           	opt stack 0
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           postinc0	equ	0xFEE
  8391                           wreg	equ	0xFE8
  8392                           postdec1	equ	0xFE5
  8393                           fsr1h	equ	0xFE2
  8394                           fsr1l	equ	0xFE1
  8395                           indf2	equ	0xFDF
  8396                           postinc2	equ	0xFDE
  8397                           postdec2	equ	0xFDD
  8398                           fsr2h	equ	0xFDA
  8399                           fsr2l	equ	0xFD9
  8400                           status	equ	0xFD8
  8401                           
  8402 ;; *************** function _irobot_move *****************
  8403 ;; Defined at:
  8404 ;;		line 220 in file "Library/iRobotSerial.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  isScript        1    wreg     unsigned char 
  8407 ;;  moveSpeed       2   16[BANK0 ] short 
  8408 ;;  moveTurnRadi    2   18[BANK0 ] short 
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  isScript        1   24[BANK0 ] unsigned char 
  8411 ;; Return value:  Size  Location     Type
  8412 ;;                  1    wreg      void 
  8413 ;; Registers used:
  8414 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8415 ;; Tracked objects:
  8416 ;;		On entry : 0/0
  8417 ;;		On exit  : 0/0
  8418 ;;		Unchanged: 0/0
  8419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;Total ram usage:        9 bytes
  8425 ;; Hardware stack levels used:    1
  8426 ;; Hardware stack levels required when called:    8
  8427 ;; This function calls:
  8428 ;;		_eusart_putch
  8429 ;;		_load_iRScriptStack
  8430 ;;		_twos_complement_of
  8431 ;; This function is called by:
  8432 ;;		_irobot_rotate
  8433 ;;		_irobot_stop_motion
  8434 ;;		_irobot_move_straight
  8435 ;;		_irobot_move_to_simple
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           	psect	text28
  8440  014448                     __ptext28:
  8441                           	opt stack 0
  8442  014448                     _irobot_move:
  8443                           	opt stack 20
  8444                           
  8445                           ;incstack = 0
  8446                           ;irobot_move@isScript stored from wreg
  8447  014448  0100               	movlb	0	; () banked
  8448  01444A  6F78               	movwf	irobot_move@isScript& (0+255),b
  8449                           
  8450                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  8451  01444C  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  8452  014450  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  8453  014454  ECE1  F0AE         	call	_twos_complement_of	;wreg free
  8454  014458  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
  8455  01445C  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  8456                           
  8457                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  8458  014460  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  8459  014464  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  8460  014468  ECE1  F0AE         	call	_twos_complement_of	;wreg free
  8461  01446C  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  8462  014470  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  8463                           
  8464                           ;iRobotSerial.c: 224: if (isScript) {
  8465  014474  0100               	movlb	0	; () banked
  8466  014476  5178               	movf	irobot_move@isScript& (0+255),w,b
  8467  014478  0100               	movlb	0	; () banked
  8468  01447A  B4D8               	btfsc	status,2,c
  8469  01447C  D029               	goto	l2139
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  8473                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  8474                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  8475  01447E  0E00               	movlw	0
  8476  014480  0100               	movlb	0	; () banked
  8477  014482  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  8478  014484  0E89               	movlw	137
  8479  014486  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  8480  014488  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8481  01448C  0100               	movlb	0	; () banked
  8482  01448E  6B75               	clrf	(??_irobot_move+1)& (0+255),b
  8483  014490  BF74               	btfsc	??_irobot_move& (0+255),7,b
  8484  014492  6975               	setf	(??_irobot_move+1)& (0+255),b
  8485  014494  0100               	movlb	0	; () banked
  8486  014496  5174               	movf	??_irobot_move& (0+255),w,b
  8487  014498  0100               	movlb	0	; () banked
  8488  01449A  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8489  01449C  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8490  01449E  0100               	movlb	0	; () banked
  8491  0144A0  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8492  0144A2  0100               	movlb	0	; () banked
  8493  0144A4  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8494  0144A6  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8495  0144A8  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8496  0144AC  0100               	movlb	0	; () banked
  8497  0144AE  6B77               	clrf	(??_irobot_move+3)& (0+255),b
  8498  0144B0  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8499  0144B2  6977               	setf	(??_irobot_move+3)& (0+255),b
  8500  0144B4  0100               	movlb	0	; () banked
  8501  0144B6  5176               	movf	(??_irobot_move+2)& (0+255),w,b
  8502  0144B8  0100               	movlb	0	; () banked
  8503  0144BA  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8504  0144BC  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8505  0144BE  0100               	movlb	0	; () banked
  8506  0144C0  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8507  0144C2  0100               	movlb	0	; () banked
  8508  0144C4  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8509  0144C6  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8510  0144C8  0E05               	movlw	5
  8511  0144CA  ECFC  F0AA         	call	_load_iRScriptStack
  8512                           
  8513                           ;iRobotSerial.c: 228: }
  8514  0144CE  0012               	return	
  8515  0144D0                     l2139:
  8516                           
  8517                           ;iRobotSerial.c: 229: else{
  8518                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  8519  0144D0  0E89               	movlw	137
  8520  0144D2  EC00  F0B3         	call	_eusart_putch
  8521                           
  8522                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8523  0144D6  0100               	movlb	0	; () banked
  8524  0144D8  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8525  0144DA  EC00  F0B3         	call	_eusart_putch
  8526                           
  8527                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  8528  0144DE  0100               	movlb	0	; () banked
  8529  0144E0  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8530  0144E2  EC00  F0B3         	call	_eusart_putch
  8531                           
  8532                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8533  0144E6  0100               	movlb	0	; () banked
  8534  0144E8  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8535  0144EA  EC00  F0B3         	call	_eusart_putch
  8536                           
  8537                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  8538  0144EE  0100               	movlb	0	; () banked
  8539  0144F0  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8540  0144F2  EC00  F0B3         	call	_eusart_putch
  8541  0144F6  0012               	return	
  8542  0144F8                     __end_of_irobot_move:
  8543                           	opt stack 0
  8544                           tblptru	equ	0xFF8
  8545                           tblptrh	equ	0xFF7
  8546                           tblptrl	equ	0xFF6
  8547                           tablat	equ	0xFF5
  8548                           prodh	equ	0xFF4
  8549                           prodl	equ	0xFF3
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           fsr1h	equ	0xFE2
  8554                           fsr1l	equ	0xFE1
  8555                           indf2	equ	0xFDF
  8556                           postinc2	equ	0xFDE
  8557                           postdec2	equ	0xFDD
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function _twos_complement_of *****************
  8563 ;; Defined at:
  8564 ;;		line 167 in file "Library/iRobotSerial.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  complementVa    2    0[BANK0 ] short 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;		None
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  2    0[BANK0 ] unsigned short 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8578 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;Total ram usage:        2 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    7
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_irobot_move
  8589 ;;		_irobot_angle_wait
  8590 ;;		_irobot_distance_wait
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           	psect	text29
  8595  015DC2                     __ptext29:
  8596                           	opt stack 0
  8597  015DC2                     _twos_complement_of:
  8598                           	opt stack 20
  8599                           
  8600                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  8601                           
  8602                           ;incstack = 0
  8603  015DC2  0100               	movlb	0	; () banked
  8604  015DC4  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8605  015DC6  D01A               	goto	l2110
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8609  015DC8  0100               	movlb	0	; () banked
  8610  015DCA  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8611  015DCC  D007               	goto	u9190
  8612  015DCE  0100               	movlb	0	; () banked
  8613  015DD0  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8614  015DD2  E10A               	bnz	l2112
  8615  015DD4  0100               	movlb	0	; () banked
  8616  015DD6  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
  8617  015DD8  B0D8               	btfsc	status,0,c
  8618  015DDA  D006               	goto	l2112
  8619  015DDC                     u9190:
  8620                           
  8621                           ; BSR set to: 0
  8622  015DDC  0100               	movlb	0	; () banked
  8623  015DDE  6D60               	negf	twos_complement_of@complementValue& (0+255),b
  8624  015DE0  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8625  015DE2  B0D8               	btfsc	status,0,c
  8626  015DE4  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8627  015DE6  D004               	goto	l2114
  8628  015DE8                     l2112:
  8629                           
  8630                           ; BSR set to: 0
  8631  015DE8  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8632  015DEC  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8633  015DF0                     l2114:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  8637                           
  8638                           ; BSR set to: 0
  8639  015DF0  0100               	movlb	0	; () banked
  8640  015DF2  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
  8641  015DF4  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8642                           
  8643                           ;iRobotSerial.c: 171: complementValue += 1;
  8644  015DF6  0100               	movlb	0	; () banked
  8645  015DF8  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8646  015DFA  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8647  015DFC                     l2110:
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;iRobotSerial.c: 172: }
  8651                           ;iRobotSerial.c: 173: return complementValue;
  8652                           
  8653                           ; BSR set to: 0
  8654  015DFC  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8655  015E00  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8656  015E04  0012               	return	
  8657  015E06                     __end_of_twos_complement_of:
  8658                           	opt stack 0
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           postinc0	equ	0xFEE
  8666                           wreg	equ	0xFE8
  8667                           postdec1	equ	0xFE5
  8668                           fsr1h	equ	0xFE2
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function _irobot_song_play *****************
  8678 ;; Defined at:
  8679 ;;		line 274 in file "Library/iRobotSerial.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  songNumber      1    wreg     unsigned char 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:        1 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    8
  8700 ;; This function calls:
  8701 ;;		_eusart_putch
  8702 ;; This function is called by:
  8703 ;;		_mode1
  8704 ;;		_mode2
  8705 ;;		_mode4
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           	psect	text30
  8710  016574                     __ptext30:
  8711                           	opt stack 0
  8712  016574                     _irobot_song_play:
  8713                           	opt stack 21
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;incstack = 0
  8717                           ;irobot_song_play@songNumber stored from wreg
  8718  016574  0100               	movlb	0	; () banked
  8719  016576  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
  8720                           
  8721                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  8722  016578  0E8D               	movlw	141
  8723  01657A  EC00  F0B3         	call	_eusart_putch
  8724                           
  8725                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  8726  01657E  0100               	movlb	0	; () banked
  8727  016580  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
  8728  016582  EC00  F0B3         	call	_eusart_putch
  8729  016586  0012               	return		;funcret
  8730  016588                     __end_of_irobot_song_play:
  8731                           	opt stack 0
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           postinc0	equ	0xFEE
  8739                           wreg	equ	0xFE8
  8740                           postdec1	equ	0xFE5
  8741                           fsr1h	equ	0xFE2
  8742                           fsr1l	equ	0xFE1
  8743                           indf2	equ	0xFDF
  8744                           postinc2	equ	0xFDE
  8745                           postdec2	equ	0xFDD
  8746                           fsr2h	equ	0xFDA
  8747                           fsr2l	equ	0xFD9
  8748                           status	equ	0xFD8
  8749                           
  8750 ;; *************** function ___fltol *****************
  8751 ;; Defined at:
  8752 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;  f1              4   82[BANK0 ] void 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  exp1            1   87[BANK0 ] unsigned char 
  8757 ;;  sign1           1   86[BANK0 ] unsigned char 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  4   82[BANK0 ] long 
  8760 ;; Registers used:
  8761 ;;		wreg, status,2, status,0
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8767 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;Total ram usage:       10 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    7
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_mode1
  8778 ;;		_mode4
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text31
  8783  013712                     __ptext31:
  8784                           	opt stack 0
  8785  013712                     ___fltol:
  8786                           	opt stack 22
  8787                           
  8788                           ;incstack = 0
  8789  013712  0100               	movlb	0	; () banked
  8790  013714  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8791  013716  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8792  013718  0100               	movlb	0	; () banked
  8793  01371A  6FB7               	movwf	___fltol@exp1& (0+255),b
  8794  01371C  0100               	movlb	0	; () banked
  8795  01371E  51B7               	movf	___fltol@exp1& (0+255),w,b
  8796  013720  A4D8               	btfss	status,2,c
  8797  013722  D00A               	goto	l2674
  8798                           
  8799                           ; BSR set to: 0
  8800  013724  0E00               	movlw	0
  8801  013726  0100               	movlb	0	; () banked
  8802  013728  6FB2               	movwf	?___fltol& (0+255),b
  8803  01372A  0E00               	movlw	0
  8804  01372C  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8805  01372E  0E00               	movlw	0
  8806  013730  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8807  013732  0E00               	movlw	0
  8808  013734  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8809                           
  8810                           ; BSR set to: 0
  8811  013736  0012               	return	
  8812  013738                     l2674:
  8813                           
  8814                           ; BSR set to: 0
  8815                           
  8816                           ; BSR set to: 0
  8817  013738  C0B2  F100         	movff	___fltol@f1,??___fltol
  8818  01373C  C0B3  F101         	movff	___fltol@f1+1,??___fltol+1
  8819  013740  C0B4  F102         	movff	___fltol@f1+2,??___fltol+2
  8820  013744  C0B5  F103         	movff	___fltol@f1+3,??___fltol+3
  8821  013748  0E20               	movlw	32
  8822  01374A  D006               	goto	u11240
  8823  01374C                     u11245:
  8824  01374C  0101               	movlb	1	; () banked
  8825  01374E  90D8               	bcf	status,0,c
  8826  013750  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  8827  013752  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  8828  013754  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  8829  013756  3300               	rrcf	??___fltol& (0+255),f,b
  8830  013758                     u11240:
  8831  013758  2EE8               	decfsz	wreg,f,c
  8832  01375A  D7F8               	goto	u11245
  8833  01375C  0101               	movlb	1	; () banked
  8834  01375E  5100               	movf	??___fltol& (0+255),w,b
  8835  013760  0100               	movlb	0	; () banked
  8836  013762  6FB6               	movwf	___fltol@sign1& (0+255),b
  8837                           
  8838                           ; BSR set to: 0
  8839  013764  0100               	movlb	0	; () banked
  8840  013766  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
  8841                           
  8842                           ; BSR set to: 0
  8843  013768  0EFF               	movlw	255
  8844  01376A  0100               	movlb	0	; () banked
  8845  01376C  17B2               	andwf	___fltol@f1& (0+255),f,b
  8846  01376E  0EFF               	movlw	255
  8847  013770  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8848  013772  0EFF               	movlw	255
  8849  013774  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8850  013776  0E00               	movlw	0
  8851  013778  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8852                           
  8853                           ; BSR set to: 0
  8854  01377A  0E96               	movlw	150
  8855  01377C  0100               	movlb	0	; () banked
  8856  01377E  5FB7               	subwf	___fltol@exp1& (0+255),f,b
  8857                           
  8858                           ; BSR set to: 0
  8859  013780  0100               	movlb	0	; () banked
  8860  013782  AFB7               	btfss	___fltol@exp1& (0+255),7,b
  8861  013784  D01A               	goto	l2676
  8862                           
  8863                           ; BSR set to: 0
  8864  013786  0100               	movlb	0	; () banked
  8865  013788  51B7               	movf	___fltol@exp1& (0+255),w,b
  8866  01378A  0A80               	xorlw	128
  8867  01378C  0F97               	addlw	151
  8868  01378E  B0D8               	btfsc	status,0,c
  8869  013790  D00A               	goto	l2677
  8870                           
  8871                           ; BSR set to: 0
  8872  013792  0E00               	movlw	0
  8873  013794  0100               	movlb	0	; () banked
  8874  013796  6FB2               	movwf	?___fltol& (0+255),b
  8875  013798  0E00               	movlw	0
  8876  01379A  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8877  01379C  0E00               	movlw	0
  8878  01379E  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8879  0137A0  0E00               	movlw	0
  8880  0137A2  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8881                           
  8882                           ; BSR set to: 0
  8883  0137A4  0012               	return	
  8884  0137A6                     l2677:
  8885                           
  8886                           ; BSR set to: 0
  8887                           
  8888                           ; BSR set to: 0
  8889                           
  8890                           ; BSR set to: 0
  8891  0137A6  0100               	movlb	0	; () banked
  8892  0137A8  90D8               	bcf	status,0,c
  8893  0137AA  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8894  0137AC  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8895  0137AE  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8896  0137B0  33B2               	rrcf	___fltol@f1& (0+255),f,b
  8897                           
  8898                           ; BSR set to: 0
  8899  0137B2  0100               	movlb	0	; () banked
  8900  0137B4  3FB7               	incfsz	___fltol@exp1& (0+255),f,b
  8901  0137B6  D7F7               	goto	l2677
  8902                           
  8903                           ; BSR set to: 0
  8904  0137B8  D01B               	goto	u11280
  8905  0137BA                     l2676:
  8906                           
  8907                           ; BSR set to: 0
  8908                           
  8909                           ; BSR set to: 0
  8910  0137BA  0E1F               	movlw	31
  8911  0137BC  0100               	movlb	0	; () banked
  8912  0137BE  65B7               	cpfsgt	___fltol@exp1& (0+255),b
  8913  0137C0  D012               	goto	l2682
  8914                           
  8915                           ; BSR set to: 0
  8916  0137C2  0E00               	movlw	0
  8917  0137C4  0100               	movlb	0	; () banked
  8918  0137C6  6FB2               	movwf	?___fltol& (0+255),b
  8919  0137C8  0E00               	movlw	0
  8920  0137CA  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8921  0137CC  0E00               	movlw	0
  8922  0137CE  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8923  0137D0  0E00               	movlw	0
  8924  0137D2  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8925                           
  8926                           ; BSR set to: 0
  8927  0137D4  0012               	return	
  8928  0137D6                     
  8929                           ; BSR set to: 0
  8930                           
  8931                           ; BSR set to: 0
  8932  0137D6  0100               	movlb	0	; () banked
  8933  0137D8  90D8               	bcf	status,0,c
  8934  0137DA  37B2               	rlcf	___fltol@f1& (0+255),f,b
  8935  0137DC  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8936  0137DE  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8937  0137E0  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8938  0137E2  0100               	movlb	0	; () banked
  8939  0137E4  07B7               	decf	___fltol@exp1& (0+255),f,b
  8940  0137E6                     l2682:
  8941                           
  8942                           ; BSR set to: 0
  8943                           
  8944                           ; BSR set to: 0
  8945  0137E6  0100               	movlb	0	; () banked
  8946  0137E8  51B7               	movf	___fltol@exp1& (0+255),w,b
  8947  0137EA  0100               	movlb	0	; () banked
  8948  0137EC  A4D8               	btfss	status,2,c
  8949  0137EE  D7F3               	goto	l2683
  8950  0137F0                     u11280:
  8951                           
  8952                           ; BSR set to: 0
  8953                           
  8954                           ; BSR set to: 0
  8955                           
  8956                           ; BSR set to: 0
  8957  0137F0  0100               	movlb	0	; () banked
  8958  0137F2  51B6               	movf	___fltol@sign1& (0+255),w,b
  8959  0137F4  0100               	movlb	0	; () banked
  8960  0137F6  B4D8               	btfsc	status,2,c
  8961  0137F8  D009               	goto	l2685
  8962                           
  8963                           ; BSR set to: 0
  8964  0137FA  0100               	movlb	0	; () banked
  8965  0137FC  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
  8966  0137FE  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
  8967  013800  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
  8968  013802  6DB2               	negf	___fltol@f1& (0+255),b
  8969  013804  0E00               	movlw	0
  8970  013806  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8971  013808  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8972  01380A  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8973  01380C                     l2685:
  8974                           
  8975                           ; BSR set to: 0
  8976                           
  8977                           ; BSR set to: 0
  8978  01380C  C0B2  F0B2         	movff	___fltol@f1,?___fltol
  8979  013810  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
  8980  013814  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
  8981  013818  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
  8982  01381C  0012               	return	
  8983  01381E                     __end_of___fltol:
  8984                           	opt stack 0
  8985                           tblptru	equ	0xFF8
  8986                           tblptrh	equ	0xFF7
  8987                           tblptrl	equ	0xFF6
  8988                           tablat	equ	0xFF5
  8989                           prodh	equ	0xFF4
  8990                           prodl	equ	0xFF3
  8991                           postinc0	equ	0xFEE
  8992                           wreg	equ	0xFE8
  8993                           postdec1	equ	0xFE5
  8994                           fsr1h	equ	0xFE2
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function _Motor_Speed *****************
  9004 ;; Defined at:
  9005 ;;		line 117 in file "Library/Motor.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9008 ;;		 -> Stepper(6), 
  9009 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      unsigned char 
  9014 ;; Registers used:
  9015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        4 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    9
  9028 ;; This function calls:
  9029 ;;		_Timer0_Init
  9030 ;; This function is called by:
  9031 ;;		_mode1
  9032 ;;		_mode4
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text32
  9037  01622E                     __ptext32:
  9038                           	opt stack 0
  9039  01622E                     _Motor_Speed:
  9040                           	opt stack 20
  9041                           
  9042                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;incstack = 0
  9046  01622E  0100               	movlb	0	; () banked
  9047  016230  EE20 F002          	lfsr	2,2
  9048  016234  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  9049  016236  26D9               	addwf	fsr2l,f,c
  9050  016238  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9051  01623A  22DA               	addwfc	fsr2h,f,c
  9052  01623C  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9053  016240  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9057  016244  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9058  016248  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9059  01624C  0100               	movlb	0	; () banked
  9060  01624E  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9061  016250  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9062  016252  ECF9  F098         	call	_Timer0_Init	;wreg free
  9063  016256  0012               	return	
  9064  016258                     __end_of_Motor_Speed:
  9065                           	opt stack 0
  9066                           tblptru	equ	0xFF8
  9067                           tblptrh	equ	0xFF7
  9068                           tblptrl	equ	0xFF6
  9069                           tablat	equ	0xFF5
  9070                           prodh	equ	0xFF4
  9071                           prodl	equ	0xFF3
  9072                           postinc0	equ	0xFEE
  9073                           wreg	equ	0xFE8
  9074                           postdec1	equ	0xFE5
  9075                           fsr1h	equ	0xFE2
  9076                           fsr1l	equ	0xFE1
  9077                           indf2	equ	0xFDF
  9078                           postinc2	equ	0xFDE
  9079                           postdec2	equ	0xFDD
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function _Motor_Move *****************
  9085 ;; Defined at:
  9086 ;;		line 51 in file "Library/Motor.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9089 ;;		 -> Stepper(6), 
  9090 ;;  pDelta          2    5[BANK0 ] short 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      unsigned char 
  9095 ;; Registers used:
  9096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;Total ram usage:        6 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    8
  9109 ;; This function calls:
  9110 ;;		_Timer0_Start
  9111 ;; This function is called by:
  9112 ;;		_mode1
  9113 ;;		_mode4
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text33
  9118  016036                     __ptext33:
  9119                           	opt stack 0
  9120  016036                     _Motor_Move:
  9121                           	opt stack 21
  9122                           
  9123                           ;Motor.c: 54: lMotor = pMotor;
  9124                           
  9125                           ;incstack = 0
  9126  016036  C063  F0D8         	movff	Motor_Move@pMotor,_lMotor
  9127  01603A  C064  F0D9         	movff	Motor_Move@pMotor+1,_lMotor+1
  9128                           
  9129                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9130  01603E  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9131  016042  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9132  016046  50DE               	movf	postinc2,w,c
  9133  016048  10DE               	iorwf	postinc2,w,c
  9134  01604A  A4D8               	btfss	status,2,c
  9135  01604C  0012               	return	
  9136                           
  9137                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9138                           
  9139                           ;Motor.c: 59: return 0;
  9140                           ;	Return value of _Motor_Move is never used
  9141  01604E  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9142  016052  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9143  016056  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  9144  01605A  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9145                           
  9146                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9147  01605E  C0BF  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  9148  016062  C0C0  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9149  016066  C0C1  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9150  01606A  EC55  F0B1         	call	_Timer0_Start	;wreg free
  9151  01606E  0012               	return	
  9152  016070                     __end_of_Motor_Move:
  9153                           	opt stack 0
  9154                           tblptru	equ	0xFF8
  9155                           tblptrh	equ	0xFF7
  9156                           tblptrl	equ	0xFF6
  9157                           tablat	equ	0xFF5
  9158                           prodh	equ	0xFF4
  9159                           prodl	equ	0xFF3
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           postdec1	equ	0xFE5
  9163                           fsr1h	equ	0xFE2
  9164                           fsr1l	equ	0xFE1
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _Timer0_Start *****************
  9173 ;; Defined at:
  9174 ;;		line 75 in file "Library/Timer0.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9177 ;;		 -> Absolute function(1), Motor_Step(1), 
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;		None
  9180 ;; Return value:  Size  Location     Type
  9181 ;;                  1    wreg      void 
  9182 ;; Registers used:
  9183 ;;		wreg, status,2, status,0
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9189 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;Total ram usage:        3 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    7
  9196 ;; This function calls:
  9197 ;;		Nothing
  9198 ;; This function is called by:
  9199 ;;		_Motor_Move
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           	psect	text34
  9204  0162AA                     __ptext34:
  9205                           	opt stack 0
  9206  0162AA                     _Timer0_Start:
  9207                           	opt stack 21
  9208                           
  9209                           ;Timer0.c: 77: gISR = pFunction;
  9210                           
  9211                           ;incstack = 0
  9212  0162AA  C060  F0B9         	movff	Timer0_Start@pFunction,_gISR
  9213  0162AE  C061  F0BA         	movff	Timer0_Start@pFunction+1,_gISR+1
  9214  0162B2  C062  F0BB         	movff	Timer0_Start@pFunction+2,_gISR+2
  9215                           
  9216                           ;Timer0.c: 78: TMR0 = COUNTER;
  9217  0162B6  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9218  0162BA  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9219                           
  9220                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9221  0162BE  50D5               	movf	4053,w,c	;volatile
  9222  0162C0  0100               	movlb	0	; () banked
  9223  0162C2  19E6               	xorwf	_INDEX& (0+255),w,b
  9224  0162C4  0BF8               	andlw	-8
  9225  0162C6  19E6               	xorwf	_INDEX& (0+255),w,b
  9226  0162C8  6ED5               	movwf	4053,c	;volatile
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9230  0162CA  94F2               	bcf	intcon,2,c	;volatile
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9234  0162CC  8AF2               	bsf	intcon,5,c	;volatile
  9235                           
  9236                           ; BSR set to: 0
  9237  0162CE  0012               	return		;funcret
  9238  0162D0                     __end_of_Timer0_Start:
  9239                           	opt stack 0
  9240                           tblptru	equ	0xFF8
  9241                           tblptrh	equ	0xFF7
  9242                           tblptrl	equ	0xFF6
  9243                           tablat	equ	0xFF5
  9244                           prodh	equ	0xFF4
  9245                           prodl	equ	0xFF3
  9246                           intcon	equ	0xFF2
  9247                           postinc0	equ	0xFEE
  9248                           wreg	equ	0xFE8
  9249                           postdec1	equ	0xFE5
  9250                           fsr1h	equ	0xFE2
  9251                           fsr1l	equ	0xFE1
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _HMI_Render *****************
  9260 ;; Defined at:
  9261 ;;		line 138 in file "HMI.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  a               2    8[BANK0 ] unsigned short 
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  1    wreg      void 
  9268 ;; Registers used:
  9269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;Total ram usage:        2 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    9
  9282 ;; This function calls:
  9283 ;;		_OutSeg
  9284 ;; This function is called by:
  9285 ;;		_mode1
  9286 ;;		_mode4
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text35
  9291  015EC8                     __ptext35:
  9292                           	opt stack 0
  9293  015EC8                     _HMI_Render:
  9294                           	opt stack 20
  9295                           
  9296                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;incstack = 0
  9300  015EC8  0E00               	movlw	0
  9301  015ECA  0100               	movlb	0	; () banked
  9302  015ECC  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  9303  015ECE  0E00               	movlw	0
  9304  015ED0  6F68               	movwf	HMI_Render@a& (0+255),b
  9305  015ED2                     l14224:
  9306                           
  9307                           ; BSR set to: 0
  9308  015ED2  0100               	movlb	0	; () banked
  9309  015ED4  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  9310  015ED6  E116               	bnz	l1158
  9311  015ED8  0E08               	movlw	8
  9312  015EDA  0100               	movlb	0	; () banked
  9313  015EDC  5D68               	subwf	HMI_Render@a& (0+255),w,b
  9314  015EDE  B0D8               	btfsc	status,0,c
  9315  015EE0  0012               	return	
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9319                           
  9320                           ; BSR set to: 0
  9321                           
  9322                           ; BSR set to: 0
  9323  015EE2  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  9324  015EE6  0E22               	movlw	low _HMIBoard
  9325  015EE8  0100               	movlb	0	; () banked
  9326  015EEA  2568               	addwf	HMI_Render@a& (0+255),w,b
  9327  015EEC  6ED9               	movwf	fsr2l,c
  9328  015EEE  0E03               	movlw	high _HMIBoard
  9329  015EF0  0100               	movlb	0	; () banked
  9330  015EF2  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9331  015EF4  6EDA               	movwf	fsr2h,c
  9332  015EF6  50DF               	movf	indf2,w,c
  9333  015EF8  EC3D  F0A8         	call	_OutSeg
  9334  015EFC  0100               	movlb	0	; () banked
  9335  015EFE  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  9336  015F00  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  9337  015F02  D7E7               	goto	l14224
  9338  015F04                     l1158:
  9339                           
  9340                           ; BSR set to: 0
  9341  015F04  0012               	return		;funcret
  9342  015F06                     __end_of_HMI_Render:
  9343                           	opt stack 0
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           postinc0	equ	0xFEE
  9352                           wreg	equ	0xFE8
  9353                           postdec1	equ	0xFE5
  9354                           fsr1h	equ	0xFE2
  9355                           fsr1l	equ	0xFE1
  9356                           indf2	equ	0xFDF
  9357                           postinc2	equ	0xFDE
  9358                           postdec2	equ	0xFDD
  9359                           fsr2h	equ	0xFDA
  9360                           fsr2l	equ	0xFD9
  9361                           status	equ	0xFD8
  9362                           
  9363 ;; *************** function _OutSeg *****************
  9364 ;; Defined at:
  9365 ;;		line 54 in file "HMI.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;  pInput          1    wreg     unsigned char 
  9368 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;  pInput          1    6[BANK0 ] unsigned char 
  9371 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;                  1    wreg      void 
  9374 ;; Registers used:
  9375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9381 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;Total ram usage:        5 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    8
  9388 ;; This function calls:
  9389 ;;		_SPI_Send
  9390 ;; This function is called by:
  9391 ;;		_HMI_Render
  9392 ;;		_HMI_GRender
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           	psect	text36
  9397  01507A                     __ptext36:
  9398                           	opt stack 0
  9399  01507A                     _OutSeg:
  9400                           	opt stack 20
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;incstack = 0
  9404                           ;OutSeg@pInput stored from wreg
  9405  01507A  0100               	movlb	0	; () banked
  9406  01507C  6F66               	movwf	OutSeg@pInput& (0+255),b
  9407                           
  9408                           ;HMI.c: 58: static UINT8 cur;
  9409                           ;HMI.c: 59: volatile UINT8 out;
  9410                           ;HMI.c: 60: static UINT8 segset;
  9411                           ;HMI.c: 61: static UINT8 a;
  9412                           ;HMI.c: 83: if (pSegment <= 8)
  9413  01507E  0E09               	movlw	9
  9414  015080  0100               	movlb	0	; () banked
  9415  015082  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  9416  015084  0012               	return	
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;HMI.c: 84: {
  9420                           ;HMI.c: 85: cur = pInput;
  9421  015086  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9425  01508A  0E00               	movlw	0
  9426  01508C  6E3D               	movwf	OutSeg@a,c
  9427  01508E                     l13616:
  9428                           
  9429                           ; BSR set to: 0
  9430  01508E  0E07               	movlw	7
  9431  015090  643D               	cpfsgt	OutSeg@a,c
  9432  015092  D001               	goto	l1146
  9433  015094  D027               	goto	u10090
  9434  015096                     l1146:
  9435                           
  9436                           ;HMI.c: 87: {
  9437                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9438                           
  9439                           ; BSR set to: 0
  9440  015096  C03F  F064         	movff	OutSeg@cur,??_OutSeg
  9441  01509A  0E01               	movlw	1
  9442  01509C  0100               	movlb	0	; () banked
  9443  01509E  1764               	andwf	??_OutSeg& (0+255),f,b
  9444  0150A0  0E06               	movlw	6
  9445  0150A2  0100               	movlb	0	; () banked
  9446  0150A4  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  9447  0150A6                     u10085:
  9448  0150A6  0100               	movlb	0	; () banked
  9449  0150A8  90D8               	bcf	status,0,c
  9450  0150AA  3764               	rlcf	??_OutSeg& (0+255),f,b
  9451  0150AC  0100               	movlb	0	; () banked
  9452  0150AE  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9453  0150B0  D7FA               	goto	u10085
  9454  0150B2  0100               	movlb	0	; () banked
  9455  0150B4  5164               	movf	??_OutSeg& (0+255),w,b
  9456  0150B6  6E3E               	movwf	OutSeg@segset,c
  9457                           
  9458                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9459  0150B8  0100               	movlb	0	; () banked
  9460  0150BA  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  9461  0150BC  42E8               	rrncf	wreg,f,c
  9462  0150BE  0BF8               	andlw	248
  9463  0150C0  103D               	iorwf	OutSeg@a,w,c
  9464  0150C2  103E               	iorwf	OutSeg@segset,w,c
  9465  0150C4  0100               	movlb	0	; () banked
  9466  0150C6  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  9467                           
  9468                           ;HMI.c: 90: cur >>= 1;
  9469  0150C8  90D8               	bcf	status,0,c
  9470  0150CA  323F               	rrcf	OutSeg@cur,f,c
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9474  0150CC  0E5C               	movlw	low _SPI1
  9475  0150CE  0100               	movlb	0	; () banked
  9476  0150D0  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9477  0150D2  0E03               	movlw	high _SPI1
  9478  0150D4  0100               	movlb	0	; () banked
  9479  0150D6  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9480  0150D8  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9481  0150DC  EC90  F0AA         	call	_SPI_Send	;wreg free
  9482  0150E0  2A3D               	incf	OutSeg@a,f,c
  9483  0150E2  D7D5               	goto	l13616
  9484  0150E4                     u10090:
  9485                           
  9486                           ;HMI.c: 96: }
  9487                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9488  0150E4  0E5C               	movlw	low _SPI1
  9489  0150E6  0100               	movlb	0	; () banked
  9490  0150E8  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9491  0150EA  0E03               	movlw	high _SPI1
  9492  0150EC  0100               	movlb	0	; () banked
  9493  0150EE  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9494  0150F0  0E00               	movlw	0
  9495  0150F2  0100               	movlb	0	; () banked
  9496  0150F4  6F62               	movwf	SPI_Send@pData& (0+255),b
  9497  0150F6  EC90  F0AA         	call	_SPI_Send	;wreg free
  9498  0150FA  0012               	return	
  9499  0150FC                     __end_of_OutSeg:
  9500                           	opt stack 0
  9501                           tblptru	equ	0xFF8
  9502                           tblptrh	equ	0xFF7
  9503                           tblptrl	equ	0xFF6
  9504                           tablat	equ	0xFF5
  9505                           prodh	equ	0xFF4
  9506                           prodl	equ	0xFF3
  9507                           intcon	equ	0xFF2
  9508                           postinc0	equ	0xFEE
  9509                           wreg	equ	0xFE8
  9510                           postdec1	equ	0xFE5
  9511                           fsr1h	equ	0xFE2
  9512                           fsr1l	equ	0xFE1
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function _Console_Render *****************
  9521 ;; Defined at:
  9522 ;;		line 377 in file "Library/Console.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  lCursor         4   38[BANK0 ] struct Point
  9527 ;;  y               1   43[BANK0 ] unsigned char 
  9528 ;;  x               1   42[BANK0 ] unsigned char 
  9529 ;;  temp            1   37[BANK0 ] unsigned char 
  9530 ;;  Temp            2    0        unsigned short 
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      void 
  9533 ;; Registers used:
  9534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9541 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9543 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9544 ;;Total ram usage:        9 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:   11
  9547 ;; This function calls:
  9548 ;;		_Console_MakeField
  9549 ;;		_LCD_DrawField
  9550 ;;		_LCD_FillRectangle
  9551 ;; This function is called by:
  9552 ;;		_mode1
  9553 ;;		_mode2
  9554 ;;		_mode4
  9555 ;;		_main
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text37
  9560  011F8A                     __ptext37:
  9561                           	opt stack 0
  9562  011F8A                     _Console_Render:
  9563                           	opt stack 18
  9564                           
  9565                           ;Console.c: 379: Colour Temp;
  9566                           ;Console.c: 380: if (change)
  9567                           
  9568                           ;incstack = 0
  9569  011F8A  0100               	movlb	0	; () banked
  9570  011F8C  51FF               	movf	_change& (0+255),w,b
  9571  011F8E  B4D8               	btfsc	status,2,c
  9572  011F90  0012               	return	
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;Console.c: 381: {
  9576                           ;Console.c: 382: UINT8 x, y, temp;
  9577                           ;Console.c: 383: Point lCursor = {6,6};
  9578  011F92  C3E6  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  9579  011F96  C3E7  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9580  011F9A  C3E8  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9581  011F9E  C3E9  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;Console.c: 385: if (clearall)
  9585  011FA2  0100               	movlb	0	; () banked
  9586  011FA4  51E9               	movf	_clearall& (0+255),w,b
  9587  011FA6  B4D8               	btfsc	status,2,c
  9588  011FA8  D005               	goto	l1056
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;Console.c: 386: {
  9592                           ;Console.c: 389: temp = lBufferY;
  9593  011FAA  C0E7  F085         	movff	_lBufferY,Console_Render@temp
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9597  011FAE  0E0F               	movlw	15
  9598  011FB0  0100               	movlb	0	; () banked
  9599  011FB2  6FE7               	movwf	_lBufferY& (0+255),b
  9600  011FB4                     l1056:
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;Console.c: 391: }
  9604                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9605  011FB4  0E00               	movlw	0
  9606  011FB6  0100               	movlb	0	; () banked
  9607  011FB8  6F8B               	movwf	Console_Render@y& (0+255),b
  9608  011FBA  D0DF               	goto	l1057
  9609  011FBC                     
  9610                           ; BSR set to: 0
  9611                           ;Console.c: 394: {
  9612                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9613                           
  9614                           ; BSR set to: 0
  9615  011FBC  0100               	movlb	0	; () banked
  9616  011FBE  518B               	movf	Console_Render@y& (0+255),w,b
  9617  011FC0  0D02               	mullw	2
  9618  011FC2  0E00               	movlw	low _lCBuffer
  9619  011FC4  24F3               	addwf	prodl,w,c
  9620  011FC6  6ED9               	movwf	fsr2l,c
  9621  011FC8  0E04               	movlw	high _lCBuffer
  9622  011FCA  20F4               	addwfc	prodh,w,c
  9623  011FCC  6EDA               	movwf	fsr2h,c
  9624  011FCE  CFDE F0FD          	movff	postinc2,_gForecolour
  9625  011FD2  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9629  011FD6  0E00               	movlw	0
  9630  011FD8  0100               	movlb	0	; () banked
  9631  011FDA  6F8A               	movwf	Console_Render@x& (0+255),b
  9632  011FDC                     l14170:
  9633                           
  9634                           ; BSR set to: 0
  9635  011FDC  0E13               	movlw	19
  9636  011FDE  0100               	movlb	0	; () banked
  9637  011FE0  658A               	cpfsgt	Console_Render@x& (0+255),b
  9638  011FE2  D001               	goto	l1059
  9639  011FE4  D0BE               	goto	u10960
  9640  011FE6                     l1059:
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;Console.c: 397: {
  9644                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9645                           
  9646                           ; BSR set to: 0
  9647  011FE6  0100               	movlb	0	; () banked
  9648  011FE8  518B               	movf	Console_Render@y& (0+255),w,b
  9649  011FEA  0D14               	mullw	20
  9650  011FEC  0EC8               	movlw	low _lBuffer
  9651  011FEE  0100               	movlb	0	; () banked
  9652  011FF0  6F83               	movwf	??_Console_Render& (0+255),b
  9653  011FF2  0E04               	movlw	high _lBuffer
  9654  011FF4  0100               	movlb	0	; () banked
  9655  011FF6  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9656  011FF8  50F3               	movf	prodl,w,c
  9657  011FFA  0100               	movlb	0	; () banked
  9658  011FFC  2783               	addwf	??_Console_Render& (0+255),f,b
  9659  011FFE  50F4               	movf	prodh,w,c
  9660  012000  0100               	movlb	0	; () banked
  9661  012002  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9662  012004  0100               	movlb	0	; () banked
  9663  012006  518A               	movf	Console_Render@x& (0+255),w,b
  9664  012008  0D01               	mullw	1
  9665  01200A  50F3               	movf	prodl,w,c
  9666  01200C  0100               	movlb	0	; () banked
  9667  01200E  2583               	addwf	??_Console_Render& (0+255),w,b
  9668  012010  6ED9               	movwf	fsr2l,c
  9669  012012  50F4               	movf	prodh,w,c
  9670  012014  0100               	movlb	0	; () banked
  9671  012016  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9672  012018  6EDA               	movwf	fsr2h,c
  9673  01201A  AEDF               	btfss	indf2,7,c
  9674  01201C  D09A               	goto	l1063
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;Console.c: 399: {
  9678                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9679  01201E  0100               	movlb	0	; () banked
  9680  012020  518B               	movf	Console_Render@y& (0+255),w,b
  9681  012022  0D14               	mullw	20
  9682  012024  0EC8               	movlw	low _lBuffer
  9683  012026  0100               	movlb	0	; () banked
  9684  012028  6F83               	movwf	??_Console_Render& (0+255),b
  9685  01202A  0E04               	movlw	high _lBuffer
  9686  01202C  0100               	movlb	0	; () banked
  9687  01202E  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9688  012030  50F3               	movf	prodl,w,c
  9689  012032  0100               	movlb	0	; () banked
  9690  012034  2783               	addwf	??_Console_Render& (0+255),f,b
  9691  012036  50F4               	movf	prodh,w,c
  9692  012038  0100               	movlb	0	; () banked
  9693  01203A  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9694  01203C  0100               	movlb	0	; () banked
  9695  01203E  518A               	movf	Console_Render@x& (0+255),w,b
  9696  012040  0D01               	mullw	1
  9697  012042  50F3               	movf	prodl,w,c
  9698  012044  0100               	movlb	0	; () banked
  9699  012046  2583               	addwf	??_Console_Render& (0+255),w,b
  9700  012048  6ED9               	movwf	fsr2l,c
  9701  01204A  50F4               	movf	prodh,w,c
  9702  01204C  0100               	movlb	0	; () banked
  9703  01204E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9704  012050  6EDA               	movwf	fsr2h,c
  9705  012052  0E7F               	movlw	127
  9706  012054  16DF               	andwf	indf2,f,c
  9707                           
  9708                           ;Console.c: 401: if (lBuffer[y][x])
  9709  012056  0100               	movlb	0	; () banked
  9710  012058  518B               	movf	Console_Render@y& (0+255),w,b
  9711  01205A  0D14               	mullw	20
  9712  01205C  0EC8               	movlw	low _lBuffer
  9713  01205E  0100               	movlb	0	; () banked
  9714  012060  6F83               	movwf	??_Console_Render& (0+255),b
  9715  012062  0E04               	movlw	high _lBuffer
  9716  012064  0100               	movlb	0	; () banked
  9717  012066  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9718  012068  50F3               	movf	prodl,w,c
  9719  01206A  0100               	movlb	0	; () banked
  9720  01206C  2783               	addwf	??_Console_Render& (0+255),f,b
  9721  01206E  50F4               	movf	prodh,w,c
  9722  012070  0100               	movlb	0	; () banked
  9723  012072  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9724  012074  0100               	movlb	0	; () banked
  9725  012076  518A               	movf	Console_Render@x& (0+255),w,b
  9726  012078  0D01               	mullw	1
  9727  01207A  50F3               	movf	prodl,w,c
  9728  01207C  0100               	movlb	0	; () banked
  9729  01207E  2583               	addwf	??_Console_Render& (0+255),w,b
  9730  012080  6ED9               	movwf	fsr2l,c
  9731  012082  50F4               	movf	prodh,w,c
  9732  012084  0100               	movlb	0	; () banked
  9733  012086  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9734  012088  6EDA               	movwf	fsr2h,c
  9735  01208A  50DF               	movf	indf2,w,c
  9736  01208C  B4D8               	btfsc	status,2,c
  9737  01208E  D04A               	goto	l1062
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;Console.c: 402: {
  9741                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9742  012090  C0DC  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9743  012094  C0DD  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9744  012098  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9745  01209C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9746  0120A0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9747  0120A4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9748  0120A8  C3EE  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9749  0120AC  C3EF  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9750  0120B0  C3F0  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9751  0120B4  C3F1  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9752  0120B8  EC70  F0A9         	call	_LCD_FillRectangle	;wreg free
  9753                           
  9754                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9755  0120BC  0100               	movlb	0	; () banked
  9756  0120BE  518B               	movf	Console_Render@y& (0+255),w,b
  9757  0120C0  0D14               	mullw	20
  9758  0120C2  0EC8               	movlw	low _lBuffer
  9759  0120C4  0100               	movlb	0	; () banked
  9760  0120C6  6F83               	movwf	??_Console_Render& (0+255),b
  9761  0120C8  0E04               	movlw	high _lBuffer
  9762  0120CA  0100               	movlb	0	; () banked
  9763  0120CC  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9764  0120CE  50F3               	movf	prodl,w,c
  9765  0120D0  0100               	movlb	0	; () banked
  9766  0120D2  2783               	addwf	??_Console_Render& (0+255),f,b
  9767  0120D4  50F4               	movf	prodh,w,c
  9768  0120D6  0100               	movlb	0	; () banked
  9769  0120D8  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9770  0120DA  0100               	movlb	0	; () banked
  9771  0120DC  518A               	movf	Console_Render@x& (0+255),w,b
  9772  0120DE  0D01               	mullw	1
  9773  0120E0  50F3               	movf	prodl,w,c
  9774  0120E2  0100               	movlb	0	; () banked
  9775  0120E4  2583               	addwf	??_Console_Render& (0+255),w,b
  9776  0120E6  6ED9               	movwf	fsr2l,c
  9777  0120E8  50F4               	movf	prodh,w,c
  9778  0120EA  0100               	movlb	0	; () banked
  9779  0120EC  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9780  0120EE  6EDA               	movwf	fsr2h,c
  9781  0120F0  50DF               	movf	indf2,w,c
  9782  0120F2  EC24  F09F         	call	_Console_MakeField
  9783  0120F6  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  9784  0120FA  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9785  0120FE  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9786  012102  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9787  012106  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9788  01210A  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9789  01210E  C3EE  F078         	movff	_gCharSize,LCD_DrawField@pSize
  9790  012112  C3EF  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9791  012116  C3F0  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9792  01211A  C3F1  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9793  01211E  EC1E  F0A5         	call	_LCD_DrawField	;wreg free
  9794                           
  9795                           ;Console.c: 405: }
  9796  012122  D017               	goto	l1063
  9797  012124                     l1062:
  9798                           
  9799                           ;Console.c: 406: else
  9800                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9801  012124  0E00               	movlw	0
  9802  012126  0100               	movlb	0	; () banked
  9803  012128  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9804  01212A  0E00               	movlw	0
  9805  01212C  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9806  01212E  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9807  012132  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9808  012136  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9809  01213A  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9810  01213E  C3EE  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9811  012142  C3EF  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9812  012146  C3F0  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9813  01214A  C3F1  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9814  01214E  EC70  F0A9         	call	_LCD_FillRectangle	;wreg free
  9815  012152                     l1063:
  9816                           
  9817                           ;Console.c: 408: }
  9818                           ;Console.c: 409: lCursor.x += (5 + 1);
  9819  012152  0E06               	movlw	6
  9820  012154  0100               	movlb	0	; () banked
  9821  012156  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  9822  012158  0E00               	movlw	0
  9823  01215A  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9824                           
  9825                           ; BSR set to: 0
  9826  01215C  0100               	movlb	0	; () banked
  9827  01215E  2B8A               	incf	Console_Render@x& (0+255),f,b
  9828  012160  D73D               	goto	l14170
  9829  012162                     u10960:
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;Console.c: 410: }
  9833                           ;Console.c: 411: lCursor.y += (7 + 1);
  9834                           
  9835                           ; BSR set to: 0
  9836  012162  0E08               	movlw	8
  9837  012164  0100               	movlb	0	; () banked
  9838  012166  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9839  012168  0E00               	movlw	0
  9840  01216A  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;Console.c: 412: lCursor.x = 6;
  9844  01216C  0E00               	movlw	0
  9845  01216E  0100               	movlb	0	; () banked
  9846  012170  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9847  012172  0E06               	movlw	6
  9848  012174  6F86               	movwf	Console_Render@lCursor& (0+255),b
  9849                           
  9850                           ; BSR set to: 0
  9851  012176  0100               	movlb	0	; () banked
  9852  012178  2B8B               	incf	Console_Render@y& (0+255),f,b
  9853  01217A                     l1057:
  9854                           
  9855                           ; BSR set to: 0
  9856                           
  9857                           ; BSR set to: 0
  9858  01217A  0100               	movlb	0	; () banked
  9859  01217C  518B               	movf	Console_Render@y& (0+255),w,b
  9860  01217E  0100               	movlb	0	; () banked
  9861  012180  5DE7               	subwf	_lBufferY& (0+255),w,b
  9862  012182  B0D8               	btfsc	status,0,c
  9863  012184  D71B               	goto	l1058
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;Console.c: 413: }
  9867                           ;Console.c: 415: if (clearall)
  9868                           
  9869                           ; BSR set to: 0
  9870  012186  0100               	movlb	0	; () banked
  9871  012188  51E9               	movf	_clearall& (0+255),w,b
  9872  01218A  B4D8               	btfsc	status,2,c
  9873  01218C  0012               	return	
  9874                           
  9875                           ; BSR set to: 0
  9876                           ;Console.c: 416: {
  9877                           ;Console.c: 417: clearall = 0;
  9878  01218E  0E00               	movlw	0
  9879  012190  0100               	movlb	0	; () banked
  9880  012192  6FE9               	movwf	_clearall& (0+255),b
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;Console.c: 418: lBufferY = temp;
  9884  012194  C085  F0E7         	movff	Console_Render@temp,_lBufferY
  9885                           
  9886                           ; BSR set to: 0
  9887  012198  0012               	return	
  9888  01219A                     __end_of_Console_Render:
  9889                           	opt stack 0
  9890                           tblptru	equ	0xFF8
  9891                           tblptrh	equ	0xFF7
  9892                           tblptrl	equ	0xFF6
  9893                           tablat	equ	0xFF5
  9894                           prodh	equ	0xFF4
  9895                           prodl	equ	0xFF3
  9896                           intcon	equ	0xFF2
  9897                           postinc0	equ	0xFEE
  9898                           wreg	equ	0xFE8
  9899                           postdec1	equ	0xFE5
  9900                           fsr1h	equ	0xFE2
  9901                           fsr1l	equ	0xFE1
  9902                           indf2	equ	0xFDF
  9903                           postinc2	equ	0xFDE
  9904                           postdec2	equ	0xFDD
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _LCD_FillRectangle *****************
  9910 ;; Defined at:
  9911 ;;		line 318 in file "Library/LCD.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  pColour         2    9[BANK0 ] unsigned short 
  9914 ;;  pPoint          4   11[BANK0 ] struct Point
  9915 ;;  pSize           4   15[BANK0 ] struct Point
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;  j               1   22[BANK0 ] unsigned char 
  9918 ;;  i               1   21[BANK0 ] unsigned char 
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  1    wreg      void 
  9921 ;; Registers used:
  9922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9928 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;Total ram usage:       14 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:   10
  9935 ;; This function calls:
  9936 ;;		_LCD_Word_Write
  9937 ;;		_Set_Addr_Window
  9938 ;; This function is called by:
  9939 ;;		_Console_Render
  9940 ;;		_Console_ClearLine
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text38
  9945  0152E0                     __ptext38:
  9946                           	opt stack 0
  9947  0152E0                     _LCD_FillRectangle:
  9948                           	opt stack 18
  9949                           
  9950                           ;LCD.c: 320: UINT8 i = 0x00;
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;incstack = 0
  9954  0152E0  0E00               	movlw	0
  9955  0152E2  0100               	movlb	0	; () banked
  9956  0152E4  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  9957                           
  9958                           ;LCD.c: 321: UINT8 j = 0x00;
  9959  0152E6  0E00               	movlw	0
  9960  0152E8  0100               	movlb	0	; () banked
  9961  0152EA  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9965  0152EC  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9966  0152F0  0100               	movlb	0	; () banked
  9967  0152F2  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9968  0152F4  0100               	movlb	0	; () banked
  9969  0152F6  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  9970  0152F8  0100               	movlb	0	; () banked
  9971  0152FA  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  9972  0152FC  0100               	movlb	0	; () banked
  9973  0152FE  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  9974  015300  0100               	movlb	0	; () banked
  9975  015302  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9976  015304  0100               	movlb	0	; () banked
  9977  015306  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  9978  015308  0100               	movlb	0	; () banked
  9979  01530A  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  9980  01530C  0100               	movlb	0	; () banked
  9981  01530E  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  9982  015310  0100               	movlb	0	; () banked
  9983  015312  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  9984  015314  0100               	movlb	0	; () banked
  9985  015316  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9986  015318  0100               	movlb	0	; () banked
  9987  01531A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9988  01531C  EC28  F0A3         	call	_Set_Addr_Window
  9989                           
  9990                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  9991  015320  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  9992  015324                     l13486:
  9993  015324  0100               	movlb	0	; () banked
  9994  015326  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  9995  015328  0100               	movlb	0	; () banked
  9996  01532A  B4D8               	btfsc	status,2,c
  9997  01532C  0012               	return	
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10001                           
 10002                           ; BSR set to: 0
 10003  01532E  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10004  015332                     l13490:
 10005                           
 10006                           ; BSR set to: 0
 10007  015332  0100               	movlb	0	; () banked
 10008  015334  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 10009  015336  0100               	movlb	0	; () banked
 10010  015338  B4D8               	btfsc	status,2,c
 10011  01533A  D009               	goto	u9960
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10015                           
 10016                           ; BSR set to: 0
 10017                           
 10018                           ; BSR set to: 0
 10019  01533C  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10020  015340  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10021  015344  ECC9  F0B1         	call	_LCD_Word_Write	;wreg free
 10022  015348  0100               	movlb	0	; () banked
 10023  01534A  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 10024  01534C  D7F2               	goto	l13490
 10025  01534E                     u9960:
 10026                           
 10027                           ; BSR set to: 0
 10028                           
 10029                           ; BSR set to: 0
 10030  01534E  0100               	movlb	0	; () banked
 10031  015350  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 10032  015352  D7E8               	goto	l13486
 10033  015354                     __end_of_LCD_FillRectangle:
 10034                           	opt stack 0
 10035                           tblptru	equ	0xFF8
 10036                           tblptrh	equ	0xFF7
 10037                           tblptrl	equ	0xFF6
 10038                           tablat	equ	0xFF5
 10039                           prodh	equ	0xFF4
 10040                           prodl	equ	0xFF3
 10041                           intcon	equ	0xFF2
 10042                           postinc0	equ	0xFEE
 10043                           wreg	equ	0xFE8
 10044                           postdec1	equ	0xFE5
 10045                           fsr1h	equ	0xFE2
 10046                           fsr1l	equ	0xFE1
 10047                           indf2	equ	0xFDF
 10048                           postinc2	equ	0xFDE
 10049                           postdec2	equ	0xFDD
 10050                           fsr2h	equ	0xFDA
 10051                           fsr2l	equ	0xFD9
 10052                           status	equ	0xFD8
 10053                           
 10054 ;; *************** function _LCD_DrawField *****************
 10055 ;; Defined at:
 10056 ;;		line 393 in file "Library/LCD.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10059 ;;		 -> Console_MakeField@Fill(70), 
 10060 ;;  pPoint          4   20[BANK0 ] struct Point
 10061 ;;  pSize           4   24[BANK0 ] struct Point
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;  count           2   30[BANK0 ] unsigned short 
 10064 ;;  i               1   34[BANK0 ] unsigned char 
 10065 ;;  ymax            1   33[BANK0 ] unsigned char 
 10066 ;;  xmax            1   32[BANK0 ] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  1    wreg      void 
 10069 ;; Registers used:
 10070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10076 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;Total ram usage:       17 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:   10
 10083 ;; This function calls:
 10084 ;;		_LCD_Word_Write
 10085 ;;		_Set_Addr_Window
 10086 ;;		___wmul
 10087 ;; This function is called by:
 10088 ;;		_Console_Render
 10089 ;; This function uses a non-reentrant model
 10090 ;;
 10091                           
 10092                           	psect	text39
 10093  014A3C                     __ptext39:
 10094                           	opt stack 0
 10095  014A3C                     _LCD_DrawField:
 10096                           	opt stack 18
 10097                           
 10098                           ;LCD.c: 396: UINT8 i = 0x00;
 10099                           
 10100                           ; BSR set to: 0
 10101                           ;incstack = 0
 10102  014A3C  0E00               	movlw	0
 10103  014A3E  0100               	movlb	0	; () banked
 10104  014A40  6F82               	movwf	LCD_DrawField@i& (0+255),b
 10105                           
 10106                           ; BSR set to: 0
 10107                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10108  014A42  0100               	movlb	0	; () banked
 10109  014A44  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10110  014A46  0100               	movlb	0	; () banked
 10111  014A48  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10112  014A4A  0100               	movlb	0	; () banked
 10113  014A4C  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10117  014A4E  0100               	movlb	0	; () banked
 10118  014A50  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10119  014A52  0100               	movlb	0	; () banked
 10120  014A54  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10121  014A56  0100               	movlb	0	; () banked
 10122  014A58  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10126  014A5A  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10127  014A5E  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10128  014A62  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10129  014A66  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10130  014A6A  EC38  F0B0         	call	___wmul	;wreg free
 10131  014A6E  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 10132  014A72  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 10133                           
 10134                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10135  014A76  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10136  014A7A  0100               	movlb	0	; () banked
 10137  014A7C  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 10138  014A7E  0100               	movlb	0	; () banked
 10139  014A80  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 10140  014A82  0100               	movlb	0	; () banked
 10141  014A84  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 10142  014A86  0100               	movlb	0	; () banked
 10143  014A88  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 10144  014A8A  0100               	movlb	0	; () banked
 10145  014A8C  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10146  014A8E  EC28  F0A3         	call	_Set_Addr_Window
 10147                           
 10148                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10149  014A92  0E00               	movlw	0
 10150  014A94  0100               	movlb	0	; () banked
 10151  014A96  6F82               	movwf	LCD_DrawField@i& (0+255),b
 10152  014A98  D013               	goto	l183
 10153  014A9A                     
 10154                           ; BSR set to: 0
 10155                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10156                           
 10157                           ; BSR set to: 0
 10158  014A9A  0100               	movlb	0	; () banked
 10159  014A9C  5182               	movf	LCD_DrawField@i& (0+255),w,b
 10160  014A9E  0D02               	mullw	2
 10161  014AA0  50F3               	movf	prodl,w,c
 10162  014AA2  0100               	movlb	0	; () banked
 10163  014AA4  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 10164  014AA6  6ED9               	movwf	fsr2l,c
 10165  014AA8  50F4               	movf	prodh,w,c
 10166  014AAA  0100               	movlb	0	; () banked
 10167  014AAC  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10168  014AAE  6EDA               	movwf	fsr2h,c
 10169  014AB0  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 10170  014AB4  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 10171  014AB8  ECC9  F0B1         	call	_LCD_Word_Write	;wreg free
 10172  014ABC  0100               	movlb	0	; () banked
 10173  014ABE  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 10174  014AC0                     l183:
 10175                           
 10176                           ; BSR set to: 0
 10177                           
 10178                           ; BSR set to: 0
 10179  014AC0  0100               	movlb	0	; () banked
 10180  014AC2  5182               	movf	LCD_DrawField@i& (0+255),w,b
 10181  014AC4  0100               	movlb	0	; () banked
 10182  014AC6  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 10183  014AC8  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10184  014ACA  0100               	movlb	0	; () banked
 10185  014ACC  517E               	movf	LCD_DrawField@count& (0+255),w,b
 10186  014ACE  0100               	movlb	0	; () banked
 10187  014AD0  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 10188  014AD2  0100               	movlb	0	; () banked
 10189  014AD4  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10190  014AD6  0100               	movlb	0	; () banked
 10191  014AD8  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10192  014ADA  B0D8               	btfsc	status,0,c
 10193  014ADC  0012               	return	
 10194  014ADE  D7DD               	goto	l184
 10195  014AE0                     __end_of_LCD_DrawField:
 10196                           	opt stack 0
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           postdec1	equ	0xFE5
 10207                           fsr1h	equ	0xFE2
 10208                           fsr1l	equ	0xFE1
 10209                           indf2	equ	0xFDF
 10210                           postinc2	equ	0xFDE
 10211                           postdec2	equ	0xFDD
 10212                           fsr2h	equ	0xFDA
 10213                           fsr2l	equ	0xFD9
 10214                           status	equ	0xFD8
 10215                           
 10216 ;; *************** function ___wmul *****************
 10217 ;; Defined at:
 10218 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10221 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  product         2    4[BANK0 ] unsigned int 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  2    0[BANK0 ] unsigned int 
 10226 ;; Registers used:
 10227 ;;		wreg, status,2, status,0, prodl, prodh
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10233 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;Total ram usage:        6 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:    7
 10240 ;; This function calls:
 10241 ;;		Nothing
 10242 ;; This function is called by:
 10243 ;;		_LCD_DrawField
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           	psect	text40
 10248  016070                     __ptext40:
 10249                           	opt stack 0
 10250  016070                     ___wmul:
 10251                           	opt stack 20
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;incstack = 0
 10255  016070  0100               	movlb	0	; () banked
 10256  016072  5160               	movf	___wmul@multiplier& (0+255),w,b
 10257  016074  0100               	movlb	0	; () banked
 10258  016076  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10259  016078  CFF3 F064          	movff	prodl,___wmul@product
 10260  01607C  CFF4 F065          	movff	prodh,___wmul@product+1
 10261  016080  0100               	movlb	0	; () banked
 10262  016082  5160               	movf	___wmul@multiplier& (0+255),w,b
 10263  016084  0100               	movlb	0	; () banked
 10264  016086  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10265  016088  50F3               	movf	prodl,w,c
 10266  01608A  0100               	movlb	0	; () banked
 10267  01608C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10268  01608E  0100               	movlb	0	; () banked
 10269  016090  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10270  016092  0100               	movlb	0	; () banked
 10271  016094  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10272  016096  50F3               	movf	prodl,w,c
 10273  016098  0100               	movlb	0	; () banked
 10274  01609A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10275                           
 10276                           ; BSR set to: 0
 10277  01609C  C064  F060         	movff	___wmul@product,?___wmul
 10278  0160A0  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10279  0160A4  0012               	return	
 10280  0160A6                     __end_of___wmul:
 10281                           	opt stack 0
 10282                           tblptru	equ	0xFF8
 10283                           tblptrh	equ	0xFF7
 10284                           tblptrl	equ	0xFF6
 10285                           tablat	equ	0xFF5
 10286                           prodh	equ	0xFF4
 10287                           prodl	equ	0xFF3
 10288                           intcon	equ	0xFF2
 10289                           postinc0	equ	0xFEE
 10290                           wreg	equ	0xFE8
 10291                           postdec1	equ	0xFE5
 10292                           fsr1h	equ	0xFE2
 10293                           fsr1l	equ	0xFE1
 10294                           indf2	equ	0xFDF
 10295                           postinc2	equ	0xFDE
 10296                           postdec2	equ	0xFDD
 10297                           fsr2h	equ	0xFDA
 10298                           fsr2l	equ	0xFD9
 10299                           status	equ	0xFD8
 10300                           
 10301 ;; *************** function _Console_MakeField *****************
 10302 ;; Defined at:
 10303 ;;		line 435 in file "Library/Console.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;  pInput          1    wreg     unsigned char 
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;  pInput          1   11[BANK0 ] unsigned char 
 10308 ;;  y               1   17[BANK0 ] unsigned char 
 10309 ;;  x               1   16[BANK0 ] unsigned char 
 10310 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10311 ;;		 -> Font5x7(480), 
 10312 ;;  Index           2    9[BANK0 ] unsigned short 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  2    5[BANK0 ] PTR unsigned short 
 10315 ;; Registers used:
 10316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;Total ram usage:       13 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    8
 10329 ;; This function calls:
 10330 ;;		_Byte_GetBit
 10331 ;; This function is called by:
 10332 ;;		_Console_Render
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           	psect	text41
 10337  013E48                     __ptext41:
 10338                           	opt stack 0
 10339  013E48                     _Console_MakeField:
 10340                           	opt stack 20
 10341                           
 10342                           ; BSR set to: 0
 10343                           ;incstack = 0
 10344                           ;Console_MakeField@pInput stored from wreg
 10345  013E48  0100               	movlb	0	; () banked
 10346  013E4A  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 10347                           
 10348                           ;Console.c: 437: static Colour Fill[7][5];
 10349                           ;Console.c: 438: pInput -= 32;
 10350  013E4C  0E20               	movlw	32
 10351  013E4E  0100               	movlb	0	; () banked
 10352  013E50  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10356  013E52  0100               	movlb	0	; () banked
 10357  013E54  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 10358  013E56  0D05               	mullw	5
 10359  013E58  CFF3 F069          	movff	prodl,Console_MakeField@Index
 10360  013E5C  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10364  013E60  0E6B               	movlw	low _Font5x7
 10365  013E62  0100               	movlb	0	; () banked
 10366  013E64  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 10367  013E66  0100               	movlb	0	; () banked
 10368  013E68  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 10369  013E6A  0EFD               	movlw	high _Font5x7
 10370  013E6C  0100               	movlb	0	; () banked
 10371  013E6E  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10372  013E70  0100               	movlb	0	; () banked
 10373  013E72  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10377  013E74  0E00               	movlw	0
 10378  013E76  0100               	movlb	0	; () banked
 10379  013E78  6F70               	movwf	Console_MakeField@x& (0+255),b
 10380  013E7A                     l13580:
 10381                           
 10382                           ; BSR set to: 0
 10383  013E7A  0E04               	movlw	4
 10384  013E7C  0100               	movlb	0	; () banked
 10385  013E7E  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 10386  013E80  D001               	goto	l1077
 10387  013E82  D043               	goto	u10050
 10388  013E84                     l1077:
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;Console.c: 444: {
 10392                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10393                           
 10394                           ; BSR set to: 0
 10395  013E84  0E00               	movlw	0
 10396  013E86  0100               	movlb	0	; () banked
 10397  013E88  6F71               	movwf	Console_MakeField@y& (0+255),b
 10398  013E8A                     l13586:
 10399                           
 10400                           ; BSR set to: 0
 10401  013E8A  0E06               	movlw	6
 10402  013E8C  0100               	movlb	0	; () banked
 10403  013E8E  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 10404  013E90  D001               	goto	l1079
 10405  013E92  D035               	goto	u10040
 10406  013E94                     l1079:
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10410                           
 10411                           ; BSR set to: 0
 10412  013E94  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10413  013E98  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10414  013E9C  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10415  013EA0  EC6E  F0B0         	call	_Byte_GetBit	;wreg free
 10416  013EA4  0900               	iorlw	0
 10417  013EA6  A4D8               	btfss	status,2,c
 10418  013EA8  D005               	goto	l1082
 10419  013EAA  C0DC  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 10420  013EAE  C0DD  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10421  013EB2  D004               	goto	l1084
 10422  013EB4                     l1082:
 10423  013EB4  C0FD  F06E         	movff	_gForecolour,_Console_MakeField$10974
 10424  013EB8  C0FE  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10425  013EBC                     l1084:
 10426  013EBC  0100               	movlb	0	; () banked
 10427  013EBE  5171               	movf	Console_MakeField@y& (0+255),w,b
 10428  013EC0  0D0A               	mullw	10
 10429  013EC2  0E82               	movlw	low Console_MakeField@Fill
 10430  013EC4  0100               	movlb	0	; () banked
 10431  013EC6  6F67               	movwf	??_Console_MakeField& (0+255),b
 10432  013EC8  0E04               	movlw	high Console_MakeField@Fill
 10433  013ECA  0100               	movlb	0	; () banked
 10434  013ECC  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 10435  013ECE  50F3               	movf	prodl,w,c
 10436  013ED0  0100               	movlb	0	; () banked
 10437  013ED2  2767               	addwf	??_Console_MakeField& (0+255),f,b
 10438  013ED4  50F4               	movf	prodh,w,c
 10439  013ED6  0100               	movlb	0	; () banked
 10440  013ED8  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10441  013EDA  0100               	movlb	0	; () banked
 10442  013EDC  5170               	movf	Console_MakeField@x& (0+255),w,b
 10443  013EDE  0D02               	mullw	2
 10444  013EE0  50F3               	movf	prodl,w,c
 10445  013EE2  0100               	movlb	0	; () banked
 10446  013EE4  2567               	addwf	??_Console_MakeField& (0+255),w,b
 10447  013EE6  6ED9               	movwf	fsr2l,c
 10448  013EE8  50F4               	movf	prodh,w,c
 10449  013EEA  0100               	movlb	0	; () banked
 10450  013EEC  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10451  013EEE  6EDA               	movwf	fsr2h,c
 10452  013EF0  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 10453  013EF4  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10454                           
 10455                           ; BSR set to: 0
 10456  013EF8  0100               	movlb	0	; () banked
 10457  013EFA  2B71               	incf	Console_MakeField@y& (0+255),f,b
 10458  013EFC  D7C6               	goto	l13586
 10459  013EFE                     u10040:
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;Console.c: 447: Column += 1;
 10463                           
 10464                           ; BSR set to: 0
 10465  013EFE  0100               	movlb	0	; () banked
 10466  013F00  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 10467  013F02  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10468  013F04  0100               	movlb	0	; () banked
 10469  013F06  2B70               	incf	Console_MakeField@x& (0+255),f,b
 10470  013F08  D7B8               	goto	l13580
 10471  013F0A                     u10050:
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;Console.c: 448: }
 10475                           ;Console.c: 449: return (ColourPtr)Fill;
 10476                           
 10477                           ; BSR set to: 0
 10478  013F0A  0E82               	movlw	low Console_MakeField@Fill
 10479  013F0C  0100               	movlb	0	; () banked
 10480  013F0E  6F65               	movwf	?_Console_MakeField& (0+255),b
 10481  013F10  0E04               	movlw	high Console_MakeField@Fill
 10482  013F12  0100               	movlb	0	; () banked
 10483  013F14  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 10484  013F16  0012               	return	
 10485  013F18                     __end_of_Console_MakeField:
 10486                           	opt stack 0
 10487                           tblptru	equ	0xFF8
 10488                           tblptrh	equ	0xFF7
 10489                           tblptrl	equ	0xFF6
 10490                           tablat	equ	0xFF5
 10491                           prodh	equ	0xFF4
 10492                           prodl	equ	0xFF3
 10493                           intcon	equ	0xFF2
 10494                           postinc0	equ	0xFEE
 10495                           wreg	equ	0xFE8
 10496                           postdec1	equ	0xFE5
 10497                           fsr1h	equ	0xFE2
 10498                           fsr1l	equ	0xFE1
 10499                           indf2	equ	0xFDF
 10500                           postinc2	equ	0xFDE
 10501                           postdec2	equ	0xFDD
 10502                           fsr2h	equ	0xFDA
 10503                           fsr2l	equ	0xFD9
 10504                           status	equ	0xFD8
 10505                           
 10506 ;; *************** function _Byte_GetBit *****************
 10507 ;; Defined at:
 10508 ;;		line 38 in file "Library/Types.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10511 ;;		 -> Font5x7(480), 
 10512 ;;  pBit            1    2[BANK0 ] unsigned char 
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  Output          1    4[BANK0 ] unsigned char 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      unsigned char 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10524 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;Total ram usage:        5 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    7
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_Console_MakeField
 10535 ;;		_Word_GetBit
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           	psect	text42
 10540  0160DC                     __ptext42:
 10541                           	opt stack 0
 10542  0160DC                     _Byte_GetBit:
 10543                           	opt stack 20
 10544                           
 10545                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10546                           
 10547                           ; BSR set to: 0
 10548                           ;incstack = 0
 10549  0160DC  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10550  0160E0  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10551  0160E4                     	if	0	;tblptru may be non-zero
 10552  0160E4                     	endif
 10553  0160E4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10554  0160E4  0E00               	movlw	low (__mediumconst shr (0+16))
 10555  0160E6  6EF8               	movwf	tblptru,c
 10556  0160E8                     	endif
 10557  0160E8  0008               	tblrd		*
 10558  0160EA  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 10559                           
 10560                           ;Types.c: 42: Output >>= pBit;
 10561  0160EE  0100               	movlb	0	; () banked
 10562  0160F0  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 10563  0160F2  0100               	movlb	0	; () banked
 10564  0160F4  6F63               	movwf	??_Byte_GetBit& (0+255),b
 10565  0160F6  D003               	goto	u9690
 10566  0160F8                     u9695:
 10567  0160F8  0100               	movlb	0	; () banked
 10568  0160FA  90D8               	bcf	status,0,c
 10569  0160FC  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10570  0160FE                     u9690:
 10571  0160FE  0100               	movlb	0	; () banked
 10572  016100  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 10573  016102  D7FA               	goto	u9695
 10574                           
 10575                           ;Types.c: 43: Output &= 1;
 10576  016104  0E01               	movlw	1
 10577  016106  0100               	movlb	0	; () banked
 10578  016108  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;Types.c: 44: return Output;
 10582  01610A  0100               	movlb	0	; () banked
 10583  01610C  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 10584  01610E  0012               	return	
 10585  016110                     __end_of_Byte_GetBit:
 10586                           	opt stack 0
 10587                           tblptru	equ	0xFF8
 10588                           tblptrh	equ	0xFF7
 10589                           tblptrl	equ	0xFF6
 10590                           tablat	equ	0xFF5
 10591                           prodh	equ	0xFF4
 10592                           prodl	equ	0xFF3
 10593                           intcon	equ	0xFF2
 10594                           postinc0	equ	0xFEE
 10595                           wreg	equ	0xFE8
 10596                           postdec1	equ	0xFE5
 10597                           fsr1h	equ	0xFE2
 10598                           fsr1l	equ	0xFE1
 10599                           indf2	equ	0xFDF
 10600                           postinc2	equ	0xFDE
 10601                           postdec2	equ	0xFDD
 10602                           fsr2h	equ	0xFDA
 10603                           fsr2l	equ	0xFD9
 10604                           status	equ	0xFD8
 10605                           
 10606 ;; *************** function _ADC_Voltage *****************
 10607 ;; Defined at:
 10608 ;;		line 259 in file "Library/ADC.c"
 10609 ;; Parameters:    Size  Location     Type
 10610 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 10611 ;;		 -> ADC_AN0(5), 
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  output          4   78[BANK0 ] float 
 10614 ;;  ref             4   74[BANK0 ] const float 
 10615 ;;  max             4   70[BANK0 ] const float 
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  4   64[BANK0 ] float 
 10618 ;; Registers used:
 10619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10625 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;Total ram usage:       18 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:    8
 10632 ;; This function calls:
 10633 ;;		___fldiv
 10634 ;;		___flmul
 10635 ;;		___xxtofl
 10636 ;; This function is called by:
 10637 ;;		_mode1
 10638 ;;		_mode4
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text43
 10643  013AEE                     __ptext43:
 10644                           	opt stack 0
 10645  013AEE                     _ADC_Voltage:
 10646                           	opt stack 21
 10647                           
 10648                           ;ADC.c: 261: const float max = 1024;
 10649                           
 10650                           ; BSR set to: 0
 10651                           ;incstack = 0
 10652  013AEE  0E00               	movlw	0
 10653  013AF0  0100               	movlb	0	; () banked
 10654  013AF2  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 10655  013AF4  0E00               	movlw	0
 10656  013AF6  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10657  013AF8  0E80               	movlw	128
 10658  013AFA  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10659  013AFC  0E44               	movlw	68
 10660  013AFE  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10661                           
 10662                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10663  013B00  0E33               	movlw	51
 10664  013B02  0100               	movlb	0	; () banked
 10665  013B04  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 10666  013B06  0E33               	movlw	51
 10667  013B08  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10668  013B0A  0E53               	movlw	83
 10669  013B0C  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10670  013B0E  0E40               	movlw	64
 10671  013B10  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;ADC.c: 263: float output = pInput->mValue;
 10675  013B12  0100               	movlb	0	; () banked
 10676  013B14  EE20 F001          	lfsr	2,1
 10677  013B18  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 10678  013B1A  26D9               	addwf	fsr2l,f,c
 10679  013B1C  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10680  013B1E  22DA               	addwfc	fsr2h,f,c
 10681  013B20  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 10682  013B24  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 10683  013B28  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 10684  013B2C  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10685  013B30  0100               	movlb	0	; () banked
 10686  013B32  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 10687  013B34  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 10688  013B36  0E00               	movlw	0
 10689  013B38  ECCA  F091         	call	___xxtofl
 10690  013B3C  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 10691  013B40  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10692  013B44  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10693  013B48  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10694                           
 10695                           ;ADC.c: 265: output /= max;
 10696  013B4C  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 10697  013B50  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10698  013B54  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10699  013B58  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10700  013B5C  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 10701  013B60  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10702  013B64  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10703  013B68  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10704  013B6C  EC86  F088         	call	___fldiv	;wreg free
 10705  013B70  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 10706  013B74  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 10707  013B78  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 10708  013B7C  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 10709                           
 10710                           ;ADC.c: 266: output *= ref;
 10711  013B80  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 10712  013B84  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 10713  013B88  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 10714  013B8C  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 10715  013B90  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 10716  013B94  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10717  013B98  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10718  013B9C  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10719  013BA0  EC00  F080         	call	___flmul	;wreg free
 10720  013BA4  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 10721  013BA8  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 10722  013BAC  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 10723  013BB0  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 10724                           
 10725                           ;ADC.c: 268: return output + (float)0.000;
 10726  013BB4  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 10727  013BB8  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10728  013BBC  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10729  013BC0  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10730  013BC4  0012               	return	
 10731  013BC6                     __end_of_ADC_Voltage:
 10732                           	opt stack 0
 10733                           tblptru	equ	0xFF8
 10734                           tblptrh	equ	0xFF7
 10735                           tblptrl	equ	0xFF6
 10736                           tablat	equ	0xFF5
 10737                           prodh	equ	0xFF4
 10738                           prodl	equ	0xFF3
 10739                           intcon	equ	0xFF2
 10740                           postinc0	equ	0xFEE
 10741                           wreg	equ	0xFE8
 10742                           postdec1	equ	0xFE5
 10743                           fsr1h	equ	0xFE2
 10744                           fsr1l	equ	0xFE1
 10745                           indf2	equ	0xFDF
 10746                           postinc2	equ	0xFDE
 10747                           postdec2	equ	0xFDD
 10748                           fsr2h	equ	0xFDA
 10749                           fsr2l	equ	0xFD9
 10750                           status	equ	0xFD8
 10751                           
 10752 ;; *************** function ___xxtofl *****************
 10753 ;; Defined at:
 10754 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10755 ;; Parameters:    Size  Location     Type
 10756 ;;  sign            1    wreg     unsigned char 
 10757 ;;  val             4    0[BANK0 ] long 
 10758 ;; Auto vars:     Size  Location     Type
 10759 ;;  sign            1    8[BANK0 ] unsigned char 
 10760 ;;  arg             4   10[BANK0 ] unsigned long 
 10761 ;;  exp             1    9[BANK0 ] unsigned char 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  4    0[BANK0 ] unsigned char 
 10764 ;; Registers used:
 10765 ;;		wreg, status,2, status,0
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;Total ram usage:       14 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    7
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		_ADC_Voltage
 10782 ;;		_mode4
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text44
 10787  012394                     __ptext44:
 10788                           	opt stack 0
 10789  012394                     ___xxtofl:
 10790                           	opt stack 22
 10791                           
 10792                           ;incstack = 0
 10793                           ;___xxtofl@sign stored from wreg
 10794  012394  0100               	movlb	0	; () banked
 10795  012396  6F68               	movwf	___xxtofl@sign& (0+255),b
 10796  012398  0100               	movlb	0	; () banked
 10797  01239A  5168               	movf	___xxtofl@sign& (0+255),w,b
 10798  01239C  0100               	movlb	0	; () banked
 10799  01239E  B4D8               	btfsc	status,2,c
 10800  0123A0  D01E               	goto	l2998
 10801                           
 10802                           ; BSR set to: 0
 10803  0123A2  0100               	movlb	0	; () banked
 10804  0123A4  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10805  0123A6  D01B               	goto	l2998
 10806                           
 10807                           ; BSR set to: 0
 10808  0123A8  C060  F064         	movff	___xxtofl@val,??___xxtofl
 10809  0123AC  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 10810  0123B0  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 10811  0123B4  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 10812  0123B8  0100               	movlb	0	; () banked
 10813  0123BA  1F64               	comf	??___xxtofl& (0+255),f,b
 10814  0123BC  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 10815  0123BE  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 10816  0123C0  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 10817  0123C2  2B64               	incf	??___xxtofl& (0+255),f,b
 10818  0123C4  0E00               	movlw	0
 10819  0123C6  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10820  0123C8  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10821  0123CA  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10822  0123CC  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 10823  0123D0  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 10824  0123D4  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 10825  0123D8  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 10826  0123DC  D008               	goto	l2999
 10827  0123DE                     l2998:
 10828                           
 10829                           ; BSR set to: 0
 10830  0123DE  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 10831  0123E2  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10832  0123E6  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10833  0123EA  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10834  0123EE                     l2999:
 10835                           
 10836                           ; BSR set to: 0
 10837                           
 10838                           ; BSR set to: 0
 10839  0123EE  0100               	movlb	0	; () banked
 10840  0123F0  5160               	movf	___xxtofl@val& (0+255),w,b
 10841  0123F2  0100               	movlb	0	; () banked
 10842  0123F4  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10843  0123F6  0100               	movlb	0	; () banked
 10844  0123F8  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10845  0123FA  0100               	movlb	0	; () banked
 10846  0123FC  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10847  0123FE  A4D8               	btfss	status,2,c
 10848  012400  D00A               	goto	l3000
 10849                           
 10850                           ; BSR set to: 0
 10851  012402  0E00               	movlw	0
 10852  012404  0100               	movlb	0	; () banked
 10853  012406  6F60               	movwf	?___xxtofl& (0+255),b
 10854  012408  0E00               	movlw	0
 10855  01240A  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 10856  01240C  0E00               	movlw	0
 10857  01240E  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 10858  012410  0E00               	movlw	0
 10859  012412  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 10860                           
 10861                           ; BSR set to: 0
 10862  012414  0012               	return	
 10863  012416                     l3000:
 10864                           
 10865                           ; BSR set to: 0
 10866                           
 10867                           ; BSR set to: 0
 10868  012416  0E96               	movlw	150
 10869  012418  0100               	movlb	0	; () banked
 10870  01241A  6F69               	movwf	___xxtofl@exp& (0+255),b
 10871  01241C  D008               	goto	l3002
 10872  01241E                     
 10873                           ; BSR set to: 0
 10874                           
 10875                           ; BSR set to: 0
 10876  01241E  0100               	movlb	0	; () banked
 10877  012420  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10878  012422  0100               	movlb	0	; () banked
 10879  012424  90D8               	bcf	status,0,c
 10880  012426  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10881  012428  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10882  01242A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10883  01242C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10884  01242E                     l3002:
 10885                           
 10886                           ; BSR set to: 0
 10887                           
 10888                           ; BSR set to: 0
 10889  01242E  0E00               	movlw	0
 10890  012430  0100               	movlb	0	; () banked
 10891  012432  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10892  012434  0100               	movlb	0	; () banked
 10893  012436  6F64               	movwf	??___xxtofl& (0+255),b
 10894  012438  0E00               	movlw	0
 10895  01243A  0100               	movlb	0	; () banked
 10896  01243C  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10897  01243E  0100               	movlb	0	; () banked
 10898  012440  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10899  012442  0E00               	movlw	0
 10900  012444  0100               	movlb	0	; () banked
 10901  012446  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10902  012448  0100               	movlb	0	; () banked
 10903  01244A  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10904  01244C  0EFE               	movlw	254
 10905  01244E  0100               	movlb	0	; () banked
 10906  012450  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10907  012452  0100               	movlb	0	; () banked
 10908  012454  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10909  012456  0100               	movlb	0	; () banked
 10910  012458  5164               	movf	??___xxtofl& (0+255),w,b
 10911  01245A  0100               	movlb	0	; () banked
 10912  01245C  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10913  01245E  0100               	movlb	0	; () banked
 10914  012460  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10915  012462  0100               	movlb	0	; () banked
 10916  012464  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10917  012466  B4D8               	btfsc	status,2,c
 10918  012468  D010               	goto	l3005
 10919  01246A  D7D9               	goto	l3003
 10920  01246C                     
 10921                           ; BSR set to: 0
 10922                           
 10923                           ; BSR set to: 0
 10924  01246C  0100               	movlb	0	; () banked
 10925  01246E  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10926                           
 10927                           ; BSR set to: 0
 10928  012470  0E01               	movlw	1
 10929  012472  0100               	movlb	0	; () banked
 10930  012474  276A               	addwf	___xxtofl@arg& (0+255),f,b
 10931  012476  0E00               	movlw	0
 10932  012478  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 10933  01247A  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 10934  01247C  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 10935                           
 10936                           ; BSR set to: 0
 10937  01247E  0100               	movlb	0	; () banked
 10938  012480  90D8               	bcf	status,0,c
 10939  012482  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10940  012484  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10941  012486  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10942  012488  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10943  01248A                     l3005:
 10944                           
 10945                           ; BSR set to: 0
 10946  01248A  0E00               	movlw	0
 10947  01248C  0100               	movlb	0	; () banked
 10948  01248E  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10949  012490  0100               	movlb	0	; () banked
 10950  012492  6F64               	movwf	??___xxtofl& (0+255),b
 10951  012494  0E00               	movlw	0
 10952  012496  0100               	movlb	0	; () banked
 10953  012498  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10954  01249A  0100               	movlb	0	; () banked
 10955  01249C  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10956  01249E  0E00               	movlw	0
 10957  0124A0  0100               	movlb	0	; () banked
 10958  0124A2  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10959  0124A4  0100               	movlb	0	; () banked
 10960  0124A6  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10961  0124A8  0EFF               	movlw	255
 10962  0124AA  0100               	movlb	0	; () banked
 10963  0124AC  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10964  0124AE  0100               	movlb	0	; () banked
 10965  0124B0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10966  0124B2  0100               	movlb	0	; () banked
 10967  0124B4  5164               	movf	??___xxtofl& (0+255),w,b
 10968  0124B6  0100               	movlb	0	; () banked
 10969  0124B8  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10970  0124BA  0100               	movlb	0	; () banked
 10971  0124BC  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10972  0124BE  0100               	movlb	0	; () banked
 10973  0124C0  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10974  0124C2  B4D8               	btfsc	status,2,c
 10975  0124C4  D009               	goto	l3008
 10976  0124C6  D7D2               	goto	l3006
 10977  0124C8                     
 10978                           ; BSR set to: 0
 10979                           
 10980                           ; BSR set to: 0
 10981  0124C8  0100               	movlb	0	; () banked
 10982  0124CA  0769               	decf	___xxtofl@exp& (0+255),f,b
 10983  0124CC  0100               	movlb	0	; () banked
 10984  0124CE  90D8               	bcf	status,0,c
 10985  0124D0  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 10986  0124D2  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 10987  0124D4  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 10988  0124D6  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 10989  0124D8                     l3008:
 10990                           
 10991                           ; BSR set to: 0
 10992                           
 10993                           ; BSR set to: 0
 10994  0124D8  0100               	movlb	0	; () banked
 10995  0124DA  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 10996  0124DC  D004               	goto	u10780
 10997                           
 10998                           ; BSR set to: 0
 10999  0124DE  0E02               	movlw	2
 11000  0124E0  0100               	movlb	0	; () banked
 11001  0124E2  6169               	cpfslt	___xxtofl@exp& (0+255),b
 11002  0124E4  D7F1               	goto	l3009
 11003  0124E6                     u10780:
 11004                           
 11005                           ; BSR set to: 0
 11006                           
 11007                           ; BSR set to: 0
 11008  0124E6  0100               	movlb	0	; () banked
 11009  0124E8  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 11010  0124EA  D009               	goto	l3013
 11011                           
 11012                           ; BSR set to: 0
 11013  0124EC  0EFF               	movlw	255
 11014  0124EE  0100               	movlb	0	; () banked
 11015  0124F0  176A               	andwf	___xxtofl@arg& (0+255),f,b
 11016  0124F2  0EFF               	movlw	255
 11017  0124F4  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11018  0124F6  0E7F               	movlw	127
 11019  0124F8  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11020  0124FA  0EFF               	movlw	255
 11021  0124FC  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11022  0124FE                     l3013:
 11023                           
 11024                           ; BSR set to: 0
 11025  0124FE  0100               	movlb	0	; () banked
 11026  012500  90D8               	bcf	status,0,c
 11027  012502  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 11028  012504  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 11029  012508  0100               	movlb	0	; () banked
 11030  01250A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 11031  01250C  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 11032  01250E  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 11033  012510  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 11034  012514  0100               	movlb	0	; () banked
 11035  012516  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 11036  012518  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 11037  01251A  6B64               	clrf	??___xxtofl& (0+255),b
 11038  01251C  0100               	movlb	0	; () banked
 11039  01251E  5164               	movf	??___xxtofl& (0+255),w,b
 11040  012520  0100               	movlb	0	; () banked
 11041  012522  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 11042  012524  0100               	movlb	0	; () banked
 11043  012526  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 11044  012528  0100               	movlb	0	; () banked
 11045  01252A  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11046  01252C  0100               	movlb	0	; () banked
 11047  01252E  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 11048  012530  0100               	movlb	0	; () banked
 11049  012532  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11050  012534  0100               	movlb	0	; () banked
 11051  012536  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 11052  012538  0100               	movlb	0	; () banked
 11053  01253A  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11054                           
 11055                           ; BSR set to: 0
 11056  01253C  0100               	movlb	0	; () banked
 11057  01253E  5168               	movf	___xxtofl@sign& (0+255),w,b
 11058  012540  0100               	movlb	0	; () banked
 11059  012542  B4D8               	btfsc	status,2,c
 11060  012544  D005               	goto	l3014
 11061                           
 11062                           ; BSR set to: 0
 11063  012546  0100               	movlb	0	; () banked
 11064  012548  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11065  01254A  D002               	goto	l3014
 11066                           
 11067                           ; BSR set to: 0
 11068  01254C  0100               	movlb	0	; () banked
 11069  01254E  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11070  012550                     l3014:
 11071                           
 11072                           ; BSR set to: 0
 11073                           
 11074                           ; BSR set to: 0
 11075  012550  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 11076  012554  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 11077  012558  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 11078  01255C  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 11079  012560  0012               	return	
 11080  012562                     __end_of___xxtofl:
 11081                           	opt stack 0
 11082                           tblptru	equ	0xFF8
 11083                           tblptrh	equ	0xFF7
 11084                           tblptrl	equ	0xFF6
 11085                           tablat	equ	0xFF5
 11086                           prodh	equ	0xFF4
 11087                           prodl	equ	0xFF3
 11088                           intcon	equ	0xFF2
 11089                           postinc0	equ	0xFEE
 11090                           wreg	equ	0xFE8
 11091                           postdec1	equ	0xFE5
 11092                           fsr1h	equ	0xFE2
 11093                           fsr1l	equ	0xFE1
 11094                           indf2	equ	0xFDF
 11095                           postinc2	equ	0xFDE
 11096                           postdec2	equ	0xFDD
 11097                           fsr2h	equ	0xFDA
 11098                           fsr2l	equ	0xFD9
 11099                           status	equ	0xFD8
 11100                           
 11101 ;; *************** function ___flmul *****************
 11102 ;; Defined at:
 11103 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11104 ;; Parameters:    Size  Location     Type
 11105 ;;  b               4   39[BANK0 ] unsigned char 
 11106 ;;  a               4   43[BANK0 ] unsigned char 
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;  prod            4   58[BANK0 ] struct .
 11109 ;;  grs             4   53[BANK0 ] unsigned long 
 11110 ;;  temp            2   62[BANK0 ] struct .
 11111 ;;  bexp            1   57[BANK0 ] unsigned char 
 11112 ;;  aexp            1   52[BANK0 ] unsigned char 
 11113 ;;  sign            1   51[BANK0 ] unsigned char 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;                  4   39[BANK0 ] unsigned char 
 11116 ;; Registers used:
 11117 ;;		wreg, status,2, status,0, prodl, prodh
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11123 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;Total ram usage:       25 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:    7
 11130 ;; This function calls:
 11131 ;;		Nothing
 11132 ;; This function is called by:
 11133 ;;		_ADC_Voltage
 11134 ;;		_mode4
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           	psect	text45
 11139  010000                     __ptext45:
 11140                           	opt stack 0
 11141  010000                     ___flmul:
 11142                           	opt stack 22
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;incstack = 0
 11146  010000  0100               	movlb	0	; () banked
 11147  010002  518A               	movf	(___flmul@b+3)& (0+255),w,b
 11148  010004  0B80               	andlw	128
 11149  010006  0100               	movlb	0	; () banked
 11150  010008  6F93               	movwf	___flmul@sign& (0+255),b
 11151  01000A  0100               	movlb	0	; () banked
 11152  01000C  518A               	movf	(___flmul@b+3)& (0+255),w,b
 11153  01000E  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 11154  010010  0100               	movlb	0	; () banked
 11155  010012  6F99               	movwf	___flmul@bexp& (0+255),b
 11156                           
 11157                           ; BSR set to: 0
 11158  010014  0100               	movlb	0	; () banked
 11159  010016  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 11160  010018  D002               	goto	l2969
 11161                           
 11162                           ; BSR set to: 0
 11163  01001A  0100               	movlb	0	; () banked
 11164  01001C  8199               	bsf	___flmul@bexp& (0+255),0,b
 11165  01001E                     l2969:
 11166                           
 11167                           ; BSR set to: 0
 11168                           
 11169                           ; BSR set to: 0
 11170  01001E  0100               	movlb	0	; () banked
 11171  010020  5199               	movf	___flmul@bexp& (0+255),w,b
 11172  010022  0100               	movlb	0	; () banked
 11173  010024  B4D8               	btfsc	status,2,c
 11174  010026  D010               	goto	l2970
 11175                           
 11176                           ; BSR set to: 0
 11177  010028  0100               	movlb	0	; () banked
 11178  01002A  2999               	incf	___flmul@bexp& (0+255),w,b
 11179  01002C  A4D8               	btfss	status,2,c
 11180  01002E  D009               	goto	l2971
 11181                           
 11182                           ; BSR set to: 0
 11183  010030  0E00               	movlw	0
 11184  010032  0100               	movlb	0	; () banked
 11185  010034  6F87               	movwf	___flmul@b& (0+255),b
 11186  010036  0E00               	movlw	0
 11187  010038  6F88               	movwf	(___flmul@b+1)& (0+255),b
 11188  01003A  0E00               	movlw	0
 11189  01003C  6F89               	movwf	(___flmul@b+2)& (0+255),b
 11190  01003E  0E00               	movlw	0
 11191  010040  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 11192  010042                     l2971:
 11193                           
 11194                           ; BSR set to: 0
 11195                           
 11196                           ; BSR set to: 0
 11197  010042  0100               	movlb	0	; () banked
 11198  010044  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 11199  010046  D009               	goto	l2972
 11200  010048                     l2970:
 11201                           
 11202                           ; BSR set to: 0
 11203                           
 11204                           ; BSR set to: 0
 11205  010048  0E00               	movlw	0
 11206  01004A  0100               	movlb	0	; () banked
 11207  01004C  6F87               	movwf	___flmul@b& (0+255),b
 11208  01004E  0E00               	movlw	0
 11209  010050  6F88               	movwf	(___flmul@b+1)& (0+255),b
 11210  010052  0E00               	movlw	0
 11211  010054  6F89               	movwf	(___flmul@b+2)& (0+255),b
 11212  010056  0E00               	movlw	0
 11213  010058  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 11214  01005A                     l2972:
 11215                           
 11216                           ; BSR set to: 0
 11217                           
 11218                           ; BSR set to: 0
 11219  01005A  0100               	movlb	0	; () banked
 11220  01005C  518E               	movf	(___flmul@a+3)& (0+255),w,b
 11221  01005E  0B80               	andlw	128
 11222  010060  0100               	movlb	0	; () banked
 11223  010062  1B93               	xorwf	___flmul@sign& (0+255),f,b
 11224                           
 11225                           ; BSR set to: 0
 11226  010064  0100               	movlb	0	; () banked
 11227  010066  518E               	movf	(___flmul@a+3)& (0+255),w,b
 11228  010068  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 11229  01006A  0100               	movlb	0	; () banked
 11230  01006C  6F94               	movwf	___flmul@aexp& (0+255),b
 11231                           
 11232                           ; BSR set to: 0
 11233  01006E  0100               	movlb	0	; () banked
 11234  010070  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 11235  010072  D002               	goto	l2973
 11236                           
 11237                           ; BSR set to: 0
 11238  010074  0100               	movlb	0	; () banked
 11239  010076  8194               	bsf	___flmul@aexp& (0+255),0,b
 11240  010078                     l2973:
 11241                           
 11242                           ; BSR set to: 0
 11243                           
 11244                           ; BSR set to: 0
 11245  010078  0100               	movlb	0	; () banked
 11246  01007A  5194               	movf	___flmul@aexp& (0+255),w,b
 11247  01007C  0100               	movlb	0	; () banked
 11248  01007E  B4D8               	btfsc	status,2,c
 11249  010080  D010               	goto	l2974
 11250                           
 11251                           ; BSR set to: 0
 11252  010082  0100               	movlb	0	; () banked
 11253  010084  2994               	incf	___flmul@aexp& (0+255),w,b
 11254  010086  A4D8               	btfss	status,2,c
 11255  010088  D009               	goto	l2975
 11256                           
 11257                           ; BSR set to: 0
 11258  01008A  0E00               	movlw	0
 11259  01008C  0100               	movlb	0	; () banked
 11260  01008E  6F8B               	movwf	___flmul@a& (0+255),b
 11261  010090  0E00               	movlw	0
 11262  010092  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 11263  010094  0E00               	movlw	0
 11264  010096  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 11265  010098  0E00               	movlw	0
 11266  01009A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 11267  01009C                     l2975:
 11268                           
 11269                           ; BSR set to: 0
 11270                           
 11271                           ; BSR set to: 0
 11272  01009C  0100               	movlb	0	; () banked
 11273  01009E  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 11274  0100A0  D009               	goto	l2976
 11275  0100A2                     l2974:
 11276                           
 11277                           ; BSR set to: 0
 11278                           
 11279                           ; BSR set to: 0
 11280  0100A2  0E00               	movlw	0
 11281  0100A4  0100               	movlb	0	; () banked
 11282  0100A6  6F8B               	movwf	___flmul@a& (0+255),b
 11283  0100A8  0E00               	movlw	0
 11284  0100AA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 11285  0100AC  0E00               	movlw	0
 11286  0100AE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 11287  0100B0  0E00               	movlw	0
 11288  0100B2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 11289  0100B4                     l2976:
 11290                           
 11291                           ; BSR set to: 0
 11292  0100B4  0100               	movlb	0	; () banked
 11293  0100B6  5194               	movf	___flmul@aexp& (0+255),w,b
 11294  0100B8  0100               	movlb	0	; () banked
 11295  0100BA  B4D8               	btfsc	status,2,c
 11296  0100BC  D005               	goto	u10600
 11297                           
 11298                           ; BSR set to: 0
 11299  0100BE  0100               	movlb	0	; () banked
 11300  0100C0  5199               	movf	___flmul@bexp& (0+255),w,b
 11301  0100C2  0100               	movlb	0	; () banked
 11302  0100C4  A4D8               	btfss	status,2,c
 11303  0100C6  D00A               	goto	l2977
 11304  0100C8                     u10600:
 11305                           
 11306                           ; BSR set to: 0
 11307                           
 11308                           ; BSR set to: 0
 11309  0100C8  0E00               	movlw	0
 11310  0100CA  0100               	movlb	0	; () banked
 11311  0100CC  6F87               	movwf	?___flmul& (0+255),b
 11312  0100CE  0E00               	movlw	0
 11313  0100D0  6F88               	movwf	(?___flmul+1)& (0+255),b
 11314  0100D2  0E00               	movlw	0
 11315  0100D4  6F89               	movwf	(?___flmul+2)& (0+255),b
 11316  0100D6  0E00               	movlw	0
 11317  0100D8  6F8A               	movwf	(?___flmul+3)& (0+255),b
 11318                           
 11319                           ; BSR set to: 0
 11320  0100DA  0012               	return	
 11321  0100DC                     l2977:
 11322                           
 11323                           ; BSR set to: 0
 11324                           
 11325                           ; BSR set to: 0
 11326  0100DC  0100               	movlb	0	; () banked
 11327  0100DE  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11328  0100E0  0100               	movlb	0	; () banked
 11329  0100E2  0387               	mulwf	___flmul@b& (0+255),b
 11330  0100E4  CFF3 F09E          	movff	prodl,___flmul@temp
 11331  0100E8  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11332                           
 11333                           ; BSR set to: 0
 11334  0100EC  0100               	movlb	0	; () banked
 11335  0100EE  519E               	movf	___flmul@temp& (0+255),w,b
 11336  0100F0  0100               	movlb	0	; () banked
 11337  0100F2  6F95               	movwf	___flmul@grs& (0+255),b
 11338  0100F4  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 11339  0100F6  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 11340  0100F8  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 11341                           
 11342                           ; BSR set to: 0
 11343  0100FA  0100               	movlb	0	; () banked
 11344  0100FC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11345  0100FE  0100               	movlb	0	; () banked
 11346  010100  6F9A               	movwf	___flmul@prod& (0+255),b
 11347  010102  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 11348  010104  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 11349  010106  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 11350  010108  0100               	movlb	0	; () banked
 11351  01010A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11352  01010C  0100               	movlb	0	; () banked
 11353  01010E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11354  010110  CFF3 F09E          	movff	prodl,___flmul@temp
 11355  010114  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11356                           
 11357                           ; BSR set to: 0
 11358  010118  0100               	movlb	0	; () banked
 11359  01011A  519E               	movf	___flmul@temp& (0+255),w,b
 11360  01011C  0100               	movlb	0	; () banked
 11361  01011E  2795               	addwf	___flmul@grs& (0+255),f,b
 11362  010120  0E00               	movlw	0
 11363  010122  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11364  010124  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11365  010126  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11366                           
 11367                           ; BSR set to: 0
 11368  010128  0100               	movlb	0	; () banked
 11369  01012A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11370  01012C  0100               	movlb	0	; () banked
 11371  01012E  279A               	addwf	___flmul@prod& (0+255),f,b
 11372  010130  0E00               	movlw	0
 11373  010132  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11374  010134  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11375  010136  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11376  010138  0100               	movlb	0	; () banked
 11377  01013A  518B               	movf	___flmul@a& (0+255),w,b
 11378  01013C  0100               	movlb	0	; () banked
 11379  01013E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11380  010140  CFF3 F09E          	movff	prodl,___flmul@temp
 11381  010144  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11382                           
 11383                           ; BSR set to: 0
 11384  010148  0100               	movlb	0	; () banked
 11385  01014A  519E               	movf	___flmul@temp& (0+255),w,b
 11386  01014C  0100               	movlb	0	; () banked
 11387  01014E  2795               	addwf	___flmul@grs& (0+255),f,b
 11388  010150  0E00               	movlw	0
 11389  010152  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11390  010154  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11391  010156  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11392                           
 11393                           ; BSR set to: 0
 11394  010158  0100               	movlb	0	; () banked
 11395  01015A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11396  01015C  0100               	movlb	0	; () banked
 11397  01015E  279A               	addwf	___flmul@prod& (0+255),f,b
 11398  010160  0E00               	movlw	0
 11399  010162  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11400  010164  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11401  010166  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11402                           
 11403                           ; BSR set to: 0
 11404  010168  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11405  01016C  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11406  010170  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11407  010174  0100               	movlb	0	; () banked
 11408  010176  6B95               	clrf	___flmul@grs& (0+255),b
 11409                           
 11410                           ; BSR set to: 0
 11411  010178  0100               	movlb	0	; () banked
 11412  01017A  518B               	movf	___flmul@a& (0+255),w,b
 11413  01017C  0100               	movlb	0	; () banked
 11414  01017E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11415  010180  CFF3 F09E          	movff	prodl,___flmul@temp
 11416  010184  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11417                           
 11418                           ; BSR set to: 0
 11419  010188  0100               	movlb	0	; () banked
 11420  01018A  519E               	movf	___flmul@temp& (0+255),w,b
 11421  01018C  0100               	movlb	0	; () banked
 11422  01018E  2795               	addwf	___flmul@grs& (0+255),f,b
 11423  010190  0100               	movlb	0	; () banked
 11424  010192  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11425  010194  0100               	movlb	0	; () banked
 11426  010196  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11427  010198  0E00               	movlw	0
 11428  01019A  0100               	movlb	0	; () banked
 11429  01019C  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11430  01019E  0E00               	movlw	0
 11431  0101A0  0100               	movlb	0	; () banked
 11432  0101A2  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11433                           
 11434                           ; BSR set to: 0
 11435  0101A4  0100               	movlb	0	; () banked
 11436  0101A6  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11437  0101A8  0100               	movlb	0	; () banked
 11438  0101AA  0387               	mulwf	___flmul@b& (0+255),b
 11439  0101AC  CFF3 F09E          	movff	prodl,___flmul@temp
 11440  0101B0  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11441                           
 11442                           ; BSR set to: 0
 11443  0101B4  0100               	movlb	0	; () banked
 11444  0101B6  519E               	movf	___flmul@temp& (0+255),w,b
 11445  0101B8  0100               	movlb	0	; () banked
 11446  0101BA  2795               	addwf	___flmul@grs& (0+255),f,b
 11447  0101BC  0100               	movlb	0	; () banked
 11448  0101BE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11449  0101C0  0100               	movlb	0	; () banked
 11450  0101C2  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11451  0101C4  0E00               	movlw	0
 11452  0101C6  0100               	movlb	0	; () banked
 11453  0101C8  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11454  0101CA  0E00               	movlw	0
 11455  0101CC  0100               	movlb	0	; () banked
 11456  0101CE  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11457                           
 11458                           ; BSR set to: 0
 11459  0101D0  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11460  0101D4  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11461  0101D8  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11462  0101DC  0100               	movlb	0	; () banked
 11463  0101DE  6B95               	clrf	___flmul@grs& (0+255),b
 11464  0101E0  0100               	movlb	0	; () banked
 11465  0101E2  518B               	movf	___flmul@a& (0+255),w,b
 11466  0101E4  0100               	movlb	0	; () banked
 11467  0101E6  0387               	mulwf	___flmul@b& (0+255),b
 11468  0101E8  CFF3 F09E          	movff	prodl,___flmul@temp
 11469  0101EC  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11470                           
 11471                           ; BSR set to: 0
 11472  0101F0  0100               	movlb	0	; () banked
 11473  0101F2  519E               	movf	___flmul@temp& (0+255),w,b
 11474  0101F4  0100               	movlb	0	; () banked
 11475  0101F6  2795               	addwf	___flmul@grs& (0+255),f,b
 11476  0101F8  0100               	movlb	0	; () banked
 11477  0101FA  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11478  0101FC  0100               	movlb	0	; () banked
 11479  0101FE  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11480  010200  0E00               	movlw	0
 11481  010202  0100               	movlb	0	; () banked
 11482  010204  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11483  010206  0E00               	movlw	0
 11484  010208  0100               	movlb	0	; () banked
 11485  01020A  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11486                           
 11487                           ; BSR set to: 0
 11488  01020C  0100               	movlb	0	; () banked
 11489  01020E  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11490  010210  0100               	movlb	0	; () banked
 11491  010212  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11492  010214  CFF3 F09E          	movff	prodl,___flmul@temp
 11493  010218  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11494  01021C  0100               	movlb	0	; () banked
 11495  01021E  519E               	movf	___flmul@temp& (0+255),w,b
 11496  010220  0100               	movlb	0	; () banked
 11497  010222  279A               	addwf	___flmul@prod& (0+255),f,b
 11498  010224  0100               	movlb	0	; () banked
 11499  010226  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11500  010228  0100               	movlb	0	; () banked
 11501  01022A  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11502  01022C  0E00               	movlw	0
 11503  01022E  0100               	movlb	0	; () banked
 11504  010230  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11505  010232  0E00               	movlw	0
 11506  010234  0100               	movlb	0	; () banked
 11507  010236  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11508                           
 11509                           ; BSR set to: 0
 11510  010238  0100               	movlb	0	; () banked
 11511  01023A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11512  01023C  0100               	movlb	0	; () banked
 11513  01023E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11514  010240  CFF3 F09E          	movff	prodl,___flmul@temp
 11515  010244  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11516                           
 11517                           ; BSR set to: 0
 11518  010248  0100               	movlb	0	; () banked
 11519  01024A  519E               	movf	___flmul@temp& (0+255),w,b
 11520  01024C  0100               	movlb	0	; () banked
 11521  01024E  279A               	addwf	___flmul@prod& (0+255),f,b
 11522  010250  0100               	movlb	0	; () banked
 11523  010252  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11524  010254  0100               	movlb	0	; () banked
 11525  010256  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11526  010258  0E00               	movlw	0
 11527  01025A  0100               	movlb	0	; () banked
 11528  01025C  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11529  01025E  0E00               	movlw	0
 11530  010260  0100               	movlb	0	; () banked
 11531  010262  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11532  010264  0100               	movlb	0	; () banked
 11533  010266  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11534  010268  0100               	movlb	0	; () banked
 11535  01026A  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11536  01026C  CFF3 F09E          	movff	prodl,___flmul@temp
 11537  010270  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11538                           
 11539                           ; BSR set to: 0
 11540  010274  0100               	movlb	0	; () banked
 11541  010276  519E               	movf	___flmul@temp& (0+255),w,b
 11542  010278  0100               	movlb	0	; () banked
 11543  01027A  6F8F               	movwf	??___flmul& (0+255),b
 11544  01027C  0100               	movlb	0	; () banked
 11545  01027E  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11546  010280  0100               	movlb	0	; () banked
 11547  010282  6F90               	movwf	(??___flmul+1)& (0+255),b
 11548  010284  0100               	movlb	0	; () banked
 11549  010286  6B91               	clrf	(??___flmul+2)& (0+255),b
 11550  010288  0100               	movlb	0	; () banked
 11551  01028A  6B92               	clrf	(??___flmul+3)& (0+255),b
 11552  01028C  C091  F092         	movff	??___flmul+2,??___flmul+3
 11553  010290  C090  F091         	movff	??___flmul+1,??___flmul+2
 11554  010294  C08F  F090         	movff	??___flmul,??___flmul+1
 11555  010298  0100               	movlb	0	; () banked
 11556  01029A  6B8F               	clrf	??___flmul& (0+255),b
 11557  01029C  0100               	movlb	0	; () banked
 11558  01029E  518F               	movf	??___flmul& (0+255),w,b
 11559  0102A0  0100               	movlb	0	; () banked
 11560  0102A2  279A               	addwf	___flmul@prod& (0+255),f,b
 11561  0102A4  0100               	movlb	0	; () banked
 11562  0102A6  5190               	movf	(??___flmul+1)& (0+255),w,b
 11563  0102A8  0100               	movlb	0	; () banked
 11564  0102AA  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11565  0102AC  0100               	movlb	0	; () banked
 11566  0102AE  5191               	movf	(??___flmul+2)& (0+255),w,b
 11567  0102B0  0100               	movlb	0	; () banked
 11568  0102B2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11569  0102B4  0100               	movlb	0	; () banked
 11570  0102B6  5192               	movf	(??___flmul+3)& (0+255),w,b
 11571  0102B8  0100               	movlb	0	; () banked
 11572  0102BA  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11573                           
 11574                           ; BSR set to: 0
 11575  0102BC  C095  F08F         	movff	___flmul@grs,??___flmul
 11576  0102C0  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 11577  0102C4  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 11578  0102C8  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 11579  0102CC  0E19               	movlw	25
 11580  0102CE  D006               	goto	u10610
 11581  0102D0                     u10615:
 11582  0102D0  0100               	movlb	0	; () banked
 11583  0102D2  90D8               	bcf	status,0,c
 11584  0102D4  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 11585  0102D6  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 11586  0102D8  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 11587  0102DA  338F               	rrcf	??___flmul& (0+255),f,b
 11588  0102DC                     u10610:
 11589  0102DC  2EE8               	decfsz	wreg,f,c
 11590  0102DE  D7F8               	goto	u10615
 11591  0102E0  0100               	movlb	0	; () banked
 11592  0102E2  518F               	movf	??___flmul& (0+255),w,b
 11593  0102E4  0100               	movlb	0	; () banked
 11594  0102E6  279A               	addwf	___flmul@prod& (0+255),f,b
 11595  0102E8  0100               	movlb	0	; () banked
 11596  0102EA  5190               	movf	(??___flmul+1)& (0+255),w,b
 11597  0102EC  0100               	movlb	0	; () banked
 11598  0102EE  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11599  0102F0  0100               	movlb	0	; () banked
 11600  0102F2  5191               	movf	(??___flmul+2)& (0+255),w,b
 11601  0102F4  0100               	movlb	0	; () banked
 11602  0102F6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11603  0102F8  0100               	movlb	0	; () banked
 11604  0102FA  5192               	movf	(??___flmul+3)& (0+255),w,b
 11605  0102FC  0100               	movlb	0	; () banked
 11606  0102FE  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11607                           
 11608                           ; BSR set to: 0
 11609  010300  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11610  010304  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11611  010308  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11612  01030C  0100               	movlb	0	; () banked
 11613  01030E  6B95               	clrf	___flmul@grs& (0+255),b
 11614                           
 11615                           ; BSR set to: 0
 11616  010310  0100               	movlb	0	; () banked
 11617  010312  5194               	movf	___flmul@aexp& (0+255),w,b
 11618  010314  C099  F08F         	movff	___flmul@bexp,??___flmul
 11619  010318  0100               	movlb	0	; () banked
 11620  01031A  6B90               	clrf	(??___flmul+1)& (0+255),b
 11621  01031C  0100               	movlb	0	; () banked
 11622  01031E  278F               	addwf	??___flmul& (0+255),f,b
 11623  010320  0E00               	movlw	0
 11624  010322  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 11625  010324  0E82               	movlw	130
 11626  010326  0100               	movlb	0	; () banked
 11627  010328  258F               	addwf	??___flmul& (0+255),w,b
 11628  01032A  0100               	movlb	0	; () banked
 11629  01032C  6F9E               	movwf	___flmul@temp& (0+255),b
 11630  01032E  0EFF               	movlw	255
 11631  010330  0100               	movlb	0	; () banked
 11632  010332  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 11633  010334  0100               	movlb	0	; () banked
 11634  010336  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 11635  010338  D015               	goto	l2981
 11636  01033A                     
 11637                           ; BSR set to: 0
 11638                           
 11639                           ; BSR set to: 0
 11640  01033A  0100               	movlb	0	; () banked
 11641  01033C  90D8               	bcf	status,0,c
 11642  01033E  379A               	rlcf	___flmul@prod& (0+255),f,b
 11643  010340  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11644  010342  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11645  010344  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11646                           
 11647                           ; BSR set to: 0
 11648  010346  0100               	movlb	0	; () banked
 11649  010348  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 11650  01034A  D002               	goto	l2983
 11651                           
 11652                           ; BSR set to: 0
 11653  01034C  0100               	movlb	0	; () banked
 11654  01034E  819A               	bsf	___flmul@prod& (0+255),0,b
 11655  010350                     l2983:
 11656                           
 11657                           ; BSR set to: 0
 11658  010350  0100               	movlb	0	; () banked
 11659  010352  90D8               	bcf	status,0,c
 11660  010354  3795               	rlcf	___flmul@grs& (0+255),f,b
 11661  010356  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11662  010358  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11663  01035A  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11664  01035C  0100               	movlb	0	; () banked
 11665  01035E  079E               	decf	___flmul@temp& (0+255),f,b
 11666  010360  A0D8               	btfss	status,0,c
 11667  010362  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 11668  010364                     l2981:
 11669                           
 11670                           ; BSR set to: 0
 11671                           
 11672                           ; BSR set to: 0
 11673  010364  0100               	movlb	0	; () banked
 11674  010366  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 11675  010368  D7E8               	goto	l2982
 11676                           
 11677                           ; BSR set to: 0
 11678                           
 11679                           ; BSR set to: 0
 11680  01036A  0E00               	movlw	0
 11681  01036C  0100               	movlb	0	; () banked
 11682  01036E  6F94               	movwf	___flmul@aexp& (0+255),b
 11683                           
 11684                           ; BSR set to: 0
 11685  010370  0100               	movlb	0	; () banked
 11686  010372  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 11687  010374  D024               	goto	l2988
 11688                           
 11689                           ; BSR set to: 0
 11690  010376  0EFF               	movlw	255
 11691  010378  0100               	movlb	0	; () banked
 11692  01037A  1595               	andwf	___flmul@grs& (0+255),w,b
 11693  01037C  0100               	movlb	0	; () banked
 11694  01037E  6F8F               	movwf	??___flmul& (0+255),b
 11695  010380  0EFF               	movlw	255
 11696  010382  0100               	movlb	0	; () banked
 11697  010384  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 11698  010386  0100               	movlb	0	; () banked
 11699  010388  6F90               	movwf	(??___flmul+1)& (0+255),b
 11700  01038A  0EFF               	movlw	255
 11701  01038C  0100               	movlb	0	; () banked
 11702  01038E  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 11703  010390  0100               	movlb	0	; () banked
 11704  010392  6F91               	movwf	(??___flmul+2)& (0+255),b
 11705  010394  0E7F               	movlw	127
 11706  010396  0100               	movlb	0	; () banked
 11707  010398  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 11708  01039A  0100               	movlb	0	; () banked
 11709  01039C  6F92               	movwf	(??___flmul+3)& (0+255),b
 11710  01039E  0100               	movlb	0	; () banked
 11711  0103A0  518F               	movf	??___flmul& (0+255),w,b
 11712  0103A2  0100               	movlb	0	; () banked
 11713  0103A4  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 11714  0103A6  0100               	movlb	0	; () banked
 11715  0103A8  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 11716  0103AA  0100               	movlb	0	; () banked
 11717  0103AC  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 11718  0103AE  A4D8               	btfss	status,2,c
 11719  0103B0  D003               	goto	u10660
 11720                           
 11721                           ; BSR set to: 0
 11722                           
 11723                           ; BSR set to: 0
 11724  0103B2  0100               	movlb	0	; () banked
 11725  0103B4  A19A               	btfss	___flmul@prod& (0+255),0,b
 11726  0103B6  D003               	goto	l2988
 11727  0103B8                     u10660:
 11728                           
 11729                           ; BSR set to: 0
 11730  0103B8  0E01               	movlw	1
 11731  0103BA  0100               	movlb	0	; () banked
 11732  0103BC  6F94               	movwf	___flmul@aexp& (0+255),b
 11733  0103BE                     l2988:
 11734                           
 11735                           ; BSR set to: 0
 11736                           
 11737                           ; BSR set to: 0
 11738                           
 11739                           ; BSR set to: 0
 11740  0103BE  0100               	movlb	0	; () banked
 11741  0103C0  5194               	movf	___flmul@aexp& (0+255),w,b
 11742  0103C2  0100               	movlb	0	; () banked
 11743  0103C4  B4D8               	btfsc	status,2,c
 11744  0103C6  D023               	goto	l2990
 11745                           
 11746                           ; BSR set to: 0
 11747  0103C8  0E01               	movlw	1
 11748  0103CA  0100               	movlb	0	; () banked
 11749  0103CC  279A               	addwf	___flmul@prod& (0+255),f,b
 11750  0103CE  0E00               	movlw	0
 11751  0103D0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11752  0103D2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11753  0103D4  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11754                           
 11755                           ; BSR set to: 0
 11756  0103D6  0100               	movlb	0	; () banked
 11757  0103D8  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 11758  0103DA  D019               	goto	l2990
 11759                           
 11760                           ; BSR set to: 0
 11761  0103DC  C09A  F08F         	movff	___flmul@prod,??___flmul
 11762  0103E0  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 11763  0103E4  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 11764  0103E8  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 11765  0103EC  0100               	movlb	0	; () banked
 11766  0103EE  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 11767  0103F0  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 11768  0103F2  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 11769  0103F4  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 11770  0103F6  338F               	rrcf	??___flmul& (0+255),f,b
 11771  0103F8  C08F  F09A         	movff	??___flmul,___flmul@prod
 11772  0103FC  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 11773  010400  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 11774  010404  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 11775                           
 11776                           ; BSR set to: 0
 11777  010408  0100               	movlb	0	; () banked
 11778  01040A  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 11779  01040C  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 11780  01040E                     l2990:
 11781                           
 11782                           ; BSR set to: 0
 11783                           
 11784                           ; BSR set to: 0
 11785                           
 11786                           ; BSR set to: 0
 11787  01040E  0100               	movlb	0	; () banked
 11788  010410  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11789  010412  D010               	goto	l2991
 11790  010414  0100               	movlb	0	; () banked
 11791  010416  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11792  010418  E104               	bnz	u10690
 11793  01041A  0100               	movlb	0	; () banked
 11794  01041C  299E               	incf	___flmul@temp& (0+255),w,b
 11795  01041E  A0D8               	btfss	status,0,c
 11796  010420  D009               	goto	l2991
 11797  010422                     u10690:
 11798                           
 11799                           ; BSR set to: 0
 11800  010422  0E00               	movlw	0
 11801  010424  0100               	movlb	0	; () banked
 11802  010426  6F9A               	movwf	___flmul@prod& (0+255),b
 11803  010428  0E00               	movlw	0
 11804  01042A  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 11805  01042C  0E80               	movlw	128
 11806  01042E  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 11807  010430  0E7F               	movlw	127
 11808  010432  D02B               	goto	L5
 11809  010434                     l2991:
 11810                           
 11811                           ; BSR set to: 0
 11812                           
 11813                           ; BSR set to: 0
 11814  010434  0100               	movlb	0	; () banked
 11815  010436  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11816  010438  D007               	goto	u10700
 11817  01043A  0100               	movlb	0	; () banked
 11818  01043C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11819  01043E  E111               	bnz	l2993
 11820  010440  0100               	movlb	0	; () banked
 11821  010442  059E               	decf	___flmul@temp& (0+255),w,b
 11822  010444  B0D8               	btfsc	status,0,c
 11823  010446  D00D               	goto	l2993
 11824  010448                     u10700:
 11825                           
 11826                           ; BSR set to: 0
 11827  010448  0E00               	movlw	0
 11828  01044A  0100               	movlb	0	; () banked
 11829  01044C  6F9A               	movwf	___flmul@prod& (0+255),b
 11830  01044E  0E00               	movlw	0
 11831  010450  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 11832  010452  0E00               	movlw	0
 11833  010454  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 11834  010456  0E00               	movlw	0
 11835  010458  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 11836  01045A  0E00               	movlw	0
 11837  01045C  0100               	movlb	0	; () banked
 11838  01045E  6F93               	movwf	___flmul@sign& (0+255),b
 11839  010460  D015               	goto	l2994
 11840  010462                     l2993:
 11841                           
 11842                           ; BSR set to: 0
 11843  010462  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 11844                           
 11845                           ; BSR set to: 0
 11846  010466  0EFF               	movlw	255
 11847  010468  0100               	movlb	0	; () banked
 11848  01046A  179A               	andwf	___flmul@prod& (0+255),f,b
 11849  01046C  0EFF               	movlw	255
 11850  01046E  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 11851  010470  0E7F               	movlw	127
 11852  010472  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 11853  010474  0E00               	movlw	0
 11854  010476  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 11855                           
 11856                           ; BSR set to: 0
 11857  010478  0100               	movlb	0	; () banked
 11858  01047A  A199               	btfss	___flmul@bexp& (0+255),0,b
 11859  01047C  D002               	goto	l2995
 11860                           
 11861                           ; BSR set to: 0
 11862  01047E  0100               	movlb	0	; () banked
 11863  010480  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 11864  010482                     l2995:
 11865                           
 11866                           ; BSR set to: 0
 11867                           
 11868                           ; BSR set to: 0
 11869  010482  0100               	movlb	0	; () banked
 11870  010484  90D8               	bcf	status,0,c
 11871  010486  3199               	rrcf	___flmul@bexp& (0+255),w,b
 11872  010488  0100               	movlb	0	; () banked
 11873  01048A                     L5:
 11874  01048A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 11875  01048C                     l2994:
 11876                           
 11877                           ; BSR set to: 0
 11878                           
 11879                           ; BSR set to: 0
 11880                           
 11881                           ; BSR set to: 0
 11882  01048C  0100               	movlb	0	; () banked
 11883  01048E  5193               	movf	___flmul@sign& (0+255),w,b
 11884  010490  0100               	movlb	0	; () banked
 11885  010492  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11886                           
 11887                           ; BSR set to: 0
 11888  010494  C09A  F087         	movff	___flmul@prod,?___flmul
 11889  010498  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 11890  01049C  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 11891  0104A0  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 11892  0104A4  0012               	return	
 11893  0104A6                     __end_of___flmul:
 11894                           	opt stack 0
 11895                           tblptru	equ	0xFF8
 11896                           tblptrh	equ	0xFF7
 11897                           tblptrl	equ	0xFF6
 11898                           tablat	equ	0xFF5
 11899                           prodh	equ	0xFF4
 11900                           prodl	equ	0xFF3
 11901                           intcon	equ	0xFF2
 11902                           postinc0	equ	0xFEE
 11903                           wreg	equ	0xFE8
 11904                           postdec1	equ	0xFE5
 11905                           fsr1h	equ	0xFE2
 11906                           fsr1l	equ	0xFE1
 11907                           indf2	equ	0xFDF
 11908                           postinc2	equ	0xFDE
 11909                           postdec2	equ	0xFDD
 11910                           fsr2h	equ	0xFDA
 11911                           fsr2l	equ	0xFD9
 11912                           status	equ	0xFD8
 11913                           
 11914 ;; *************** function ___fldiv *****************
 11915 ;; Defined at:
 11916 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 11917 ;; Parameters:    Size  Location     Type
 11918 ;;  b               4   14[BANK0 ] unsigned char 
 11919 ;;  a               4   18[BANK0 ] unsigned char 
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;  grs             4   33[BANK0 ] unsigned long 
 11922 ;;  rem             4   27[BANK0 ] unsigned long 
 11923 ;;  new_exp         2   31[BANK0 ] int 
 11924 ;;  aexp            1   38[BANK0 ] unsigned char 
 11925 ;;  bexp            1   37[BANK0 ] unsigned char 
 11926 ;;  sign            1   26[BANK0 ] unsigned char 
 11927 ;; Return value:  Size  Location     Type
 11928 ;;                  4   14[BANK0 ] unsigned char 
 11929 ;; Registers used:
 11930 ;;		wreg, status,2, status,0
 11931 ;; Tracked objects:
 11932 ;;		On entry : 0/0
 11933 ;;		On exit  : 0/0
 11934 ;;		Unchanged: 0/0
 11935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11936 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11940 ;;Total ram usage:       25 bytes
 11941 ;; Hardware stack levels used:    1
 11942 ;; Hardware stack levels required when called:    7
 11943 ;; This function calls:
 11944 ;;		Nothing
 11945 ;; This function is called by:
 11946 ;;		_ADC_Voltage
 11947 ;;		_mode1
 11948 ;;		_mode4
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           	psect	text46
 11953  01110C                     __ptext46:
 11954                           	opt stack 0
 11955  01110C                     ___fldiv:
 11956                           	opt stack 22
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;incstack = 0
 11960  01110C  0100               	movlb	0	; () banked
 11961  01110E  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 11962  011110  0B80               	andlw	128
 11963  011112  0100               	movlb	0	; () banked
 11964  011114  6F7A               	movwf	___fldiv@sign& (0+255),b
 11965  011116  0100               	movlb	0	; () banked
 11966  011118  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 11967  01111A  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 11968  01111C  0100               	movlb	0	; () banked
 11969  01111E  6F85               	movwf	___fldiv@bexp& (0+255),b
 11970                           
 11971                           ; BSR set to: 0
 11972  011120  0100               	movlb	0	; () banked
 11973  011122  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 11974  011124  D002               	goto	l2935
 11975                           
 11976                           ; BSR set to: 0
 11977  011126  0100               	movlb	0	; () banked
 11978  011128  8185               	bsf	___fldiv@bexp& (0+255),0,b
 11979  01112A                     l2935:
 11980                           
 11981                           ; BSR set to: 0
 11982                           
 11983                           ; BSR set to: 0
 11984  01112A  0100               	movlb	0	; () banked
 11985  01112C  5185               	movf	___fldiv@bexp& (0+255),w,b
 11986  01112E  0100               	movlb	0	; () banked
 11987  011130  B4D8               	btfsc	status,2,c
 11988  011132  D012               	goto	l2936
 11989                           
 11990                           ; BSR set to: 0
 11991  011134  0100               	movlb	0	; () banked
 11992  011136  2985               	incf	___fldiv@bexp& (0+255),w,b
 11993  011138  A4D8               	btfss	status,2,c
 11994  01113A  D009               	goto	l2937
 11995                           
 11996                           ; BSR set to: 0
 11997  01113C  0E00               	movlw	0
 11998  01113E  0100               	movlb	0	; () banked
 11999  011140  6F6E               	movwf	___fldiv@b& (0+255),b
 12000  011142  0E00               	movlw	0
 12001  011144  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12002  011146  0E00               	movlw	0
 12003  011148  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12004  01114A  0E00               	movlw	0
 12005  01114C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12006  01114E                     l2937:
 12007                           
 12008                           ; BSR set to: 0
 12009                           
 12010                           ; BSR set to: 0
 12011  01114E  0100               	movlb	0	; () banked
 12012  011150  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 12013                           
 12014                           ; BSR set to: 0
 12015  011152  0E00               	movlw	0
 12016  011154  0100               	movlb	0	; () banked
 12017  011156  D008               	goto	L6
 12018  011158                     l2936:
 12019                           
 12020                           ; BSR set to: 0
 12021                           
 12022                           ; BSR set to: 0
 12023  011158  0E00               	movlw	0
 12024  01115A  0100               	movlb	0	; () banked
 12025  01115C  6F6E               	movwf	___fldiv@b& (0+255),b
 12026  01115E  0E00               	movlw	0
 12027  011160  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12028  011162  0E00               	movlw	0
 12029  011164  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12030  011166  0E00               	movlw	0
 12031  011168                     L6:
 12032  011168  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12033                           
 12034                           ; BSR set to: 0
 12035                           
 12036                           ; BSR set to: 0
 12037  01116A  0100               	movlb	0	; () banked
 12038  01116C  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12039  01116E  0B80               	andlw	128
 12040  011170  0100               	movlb	0	; () banked
 12041  011172  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 12042                           
 12043                           ; BSR set to: 0
 12044  011174  0100               	movlb	0	; () banked
 12045  011176  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12046  011178  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 12047  01117A  0100               	movlb	0	; () banked
 12048  01117C  6F86               	movwf	___fldiv@aexp& (0+255),b
 12049                           
 12050                           ; BSR set to: 0
 12051  01117E  0100               	movlb	0	; () banked
 12052  011180  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 12053  011182  D002               	goto	l2939
 12054                           
 12055                           ; BSR set to: 0
 12056  011184  0100               	movlb	0	; () banked
 12057  011186  8186               	bsf	___fldiv@aexp& (0+255),0,b
 12058  011188                     l2939:
 12059                           
 12060                           ; BSR set to: 0
 12061                           
 12062                           ; BSR set to: 0
 12063  011188  0100               	movlb	0	; () banked
 12064  01118A  5186               	movf	___fldiv@aexp& (0+255),w,b
 12065  01118C  0100               	movlb	0	; () banked
 12066  01118E  B4D8               	btfsc	status,2,c
 12067  011190  D012               	goto	l2940
 12068                           
 12069                           ; BSR set to: 0
 12070  011192  0100               	movlb	0	; () banked
 12071  011194  2986               	incf	___fldiv@aexp& (0+255),w,b
 12072  011196  A4D8               	btfss	status,2,c
 12073  011198  D009               	goto	l2941
 12074                           
 12075                           ; BSR set to: 0
 12076  01119A  0E00               	movlw	0
 12077  01119C  0100               	movlb	0	; () banked
 12078  01119E  6F72               	movwf	___fldiv@a& (0+255),b
 12079  0111A0  0E00               	movlw	0
 12080  0111A2  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 12081  0111A4  0E00               	movlw	0
 12082  0111A6  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 12083  0111A8  0E00               	movlw	0
 12084  0111AA  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 12085  0111AC                     l2941:
 12086                           
 12087                           ; BSR set to: 0
 12088                           
 12089                           ; BSR set to: 0
 12090  0111AC  0100               	movlb	0	; () banked
 12091  0111AE  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 12092                           
 12093                           ; BSR set to: 0
 12094  0111B0  0E00               	movlw	0
 12095  0111B2  0100               	movlb	0	; () banked
 12096  0111B4  D008               	goto	L7
 12097  0111B6                     l2940:
 12098                           
 12099                           ; BSR set to: 0
 12100                           
 12101                           ; BSR set to: 0
 12102  0111B6  0E00               	movlw	0
 12103  0111B8  0100               	movlb	0	; () banked
 12104  0111BA  6F72               	movwf	___fldiv@a& (0+255),b
 12105  0111BC  0E00               	movlw	0
 12106  0111BE  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 12107  0111C0  0E00               	movlw	0
 12108  0111C2  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 12109  0111C4  0E00               	movlw	0
 12110  0111C6                     L7:
 12111  0111C6  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 12112                           
 12113                           ; BSR set to: 0
 12114                           
 12115                           ; BSR set to: 0
 12116  0111C8  0100               	movlb	0	; () banked
 12117  0111CA  5172               	movf	___fldiv@a& (0+255),w,b
 12118  0111CC  0100               	movlb	0	; () banked
 12119  0111CE  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12120  0111D0  0100               	movlb	0	; () banked
 12121  0111D2  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12122  0111D4  0100               	movlb	0	; () banked
 12123  0111D6  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12124  0111D8  A4D8               	btfss	status,2,c
 12125  0111DA  D017               	goto	l2943
 12126                           
 12127                           ; BSR set to: 0
 12128  0111DC  0E00               	movlw	0
 12129  0111DE  0100               	movlb	0	; () banked
 12130  0111E0  6F6E               	movwf	___fldiv@b& (0+255),b
 12131  0111E2  0E00               	movlw	0
 12132  0111E4  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12133  0111E6  0E00               	movlw	0
 12134  0111E8  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12135  0111EA  0E00               	movlw	0
 12136  0111EC  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12137                           
 12138                           ; BSR set to: 0
 12139  0111EE  0100               	movlb	0	; () banked
 12140  0111F0  0E80               	movlw	128
 12141  0111F2  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12142  0111F4  0E7F               	movlw	127
 12143  0111F6  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12144                           
 12145                           ; BSR set to: 0
 12146  0111F8  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12147  0111FC  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12148  011200  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12149  011204  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12150                           
 12151                           ; BSR set to: 0
 12152  011208  0012               	return	
 12153  01120A                     l2943:
 12154                           
 12155                           ; BSR set to: 0
 12156                           
 12157                           ; BSR set to: 0
 12158  01120A  0100               	movlb	0	; () banked
 12159  01120C  5185               	movf	___fldiv@bexp& (0+255),w,b
 12160  01120E  0100               	movlb	0	; () banked
 12161  011210  A4D8               	btfss	status,2,c
 12162  011212  D012               	goto	l2945
 12163                           
 12164                           ; BSR set to: 0
 12165  011214  0E00               	movlw	0
 12166  011216  0100               	movlb	0	; () banked
 12167  011218  6F6E               	movwf	___fldiv@b& (0+255),b
 12168  01121A  0E00               	movlw	0
 12169  01121C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12170  01121E  0E00               	movlw	0
 12171  011220  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12172  011222  0E00               	movlw	0
 12173  011224  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12174                           
 12175                           ; BSR set to: 0
 12176  011226  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12177  01122A  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12178  01122E  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12179  011232  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12180                           
 12181                           ; BSR set to: 0
 12182  011236  0012               	return	
 12183  011238                     l2945:
 12184                           
 12185                           ; BSR set to: 0
 12186                           
 12187                           ; BSR set to: 0
 12188  011238  0100               	movlb	0	; () banked
 12189  01123A  5186               	movf	___fldiv@aexp& (0+255),w,b
 12190  01123C  0100               	movlb	0	; () banked
 12191  01123E  6F76               	movwf	??___fldiv& (0+255),b
 12192  011240  6B77               	clrf	(??___fldiv+1)& (0+255),b
 12193  011242  0100               	movlb	0	; () banked
 12194  011244  1F76               	comf	??___fldiv& (0+255),f,b
 12195  011246  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 12196  011248  4B76               	infsnz	??___fldiv& (0+255),f,b
 12197  01124A  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 12198  01124C  0100               	movlb	0	; () banked
 12199  01124E  5185               	movf	___fldiv@bexp& (0+255),w,b
 12200  011250  0100               	movlb	0	; () banked
 12201  011252  6F78               	movwf	(??___fldiv+2)& (0+255),b
 12202  011254  6B79               	clrf	(??___fldiv+3)& (0+255),b
 12203  011256  0100               	movlb	0	; () banked
 12204  011258  5176               	movf	??___fldiv& (0+255),w,b
 12205  01125A  0100               	movlb	0	; () banked
 12206  01125C  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 12207  01125E  0100               	movlb	0	; () banked
 12208  011260  5177               	movf	(??___fldiv+1)& (0+255),w,b
 12209  011262  0100               	movlb	0	; () banked
 12210  011264  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 12211  011266  0E7F               	movlw	127
 12212  011268  0100               	movlb	0	; () banked
 12213  01126A  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 12214  01126C  0100               	movlb	0	; () banked
 12215  01126E  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 12216  011270  0E00               	movlw	0
 12217  011272  0100               	movlb	0	; () banked
 12218  011274  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 12219  011276  0100               	movlb	0	; () banked
 12220  011278  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12221                           
 12222                           ; BSR set to: 0
 12223  01127A  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 12224  01127E  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 12225  011282  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 12226  011286  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 12227                           
 12228                           ; BSR set to: 0
 12229  01128A  0E00               	movlw	0
 12230  01128C  0100               	movlb	0	; () banked
 12231  01128E  6F6E               	movwf	___fldiv@b& (0+255),b
 12232  011290  0E00               	movlw	0
 12233  011292  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12234  011294  0E00               	movlw	0
 12235  011296  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12236  011298  0E00               	movlw	0
 12237  01129A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12238                           
 12239                           ; BSR set to: 0
 12240  01129C  0E00               	movlw	0
 12241  01129E  0100               	movlb	0	; () banked
 12242  0112A0  6F81               	movwf	___fldiv@grs& (0+255),b
 12243  0112A2  0E00               	movlw	0
 12244  0112A4  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 12245  0112A6  0E00               	movlw	0
 12246  0112A8  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 12247  0112AA  0E00               	movlw	0
 12248  0112AC  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 12249                           
 12250                           ; BSR set to: 0
 12251  0112AE  0E00               	movlw	0
 12252  0112B0  0100               	movlb	0	; () banked
 12253  0112B2  6F86               	movwf	___fldiv@aexp& (0+255),b
 12254  0112B4  D042               	goto	l2946
 12255  0112B6                     
 12256                           ; BSR set to: 0
 12257                           
 12258                           ; BSR set to: 0
 12259  0112B6  0100               	movlb	0	; () banked
 12260  0112B8  5186               	movf	___fldiv@aexp& (0+255),w,b
 12261  0112BA  0100               	movlb	0	; () banked
 12262  0112BC  B4D8               	btfsc	status,2,c
 12263  0112BE  D017               	goto	l2948
 12264                           
 12265                           ; BSR set to: 0
 12266  0112C0  0100               	movlb	0	; () banked
 12267  0112C2  90D8               	bcf	status,0,c
 12268  0112C4  377B               	rlcf	___fldiv@rem& (0+255),f,b
 12269  0112C6  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12270  0112C8  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12271  0112CA  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12272  0112CC  0100               	movlb	0	; () banked
 12273  0112CE  90D8               	bcf	status,0,c
 12274  0112D0  376E               	rlcf	___fldiv@b& (0+255),f,b
 12275  0112D2  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12276  0112D4  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12277  0112D6  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12278                           
 12279                           ; BSR set to: 0
 12280  0112D8  0100               	movlb	0	; () banked
 12281  0112DA  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12282  0112DC  D002               	goto	l2949
 12283                           
 12284                           ; BSR set to: 0
 12285  0112DE  0100               	movlb	0	; () banked
 12286  0112E0  816E               	bsf	___fldiv@b& (0+255),0,b
 12287  0112E2                     l2949:
 12288                           
 12289                           ; BSR set to: 0
 12290  0112E2  0100               	movlb	0	; () banked
 12291  0112E4  90D8               	bcf	status,0,c
 12292  0112E6  3781               	rlcf	___fldiv@grs& (0+255),f,b
 12293  0112E8  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12294  0112EA  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12295  0112EC  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12296  0112EE                     l2948:
 12297                           
 12298                           ; BSR set to: 0
 12299                           
 12300                           ; BSR set to: 0
 12301  0112EE  0100               	movlb	0	; () banked
 12302  0112F0  5172               	movf	___fldiv@a& (0+255),w,b
 12303  0112F2  0100               	movlb	0	; () banked
 12304  0112F4  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 12305  0112F6  0100               	movlb	0	; () banked
 12306  0112F8  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 12307  0112FA  0100               	movlb	0	; () banked
 12308  0112FC  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12309  0112FE  0100               	movlb	0	; () banked
 12310  011300  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 12311  011302  0100               	movlb	0	; () banked
 12312  011304  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12313  011306  0100               	movlb	0	; () banked
 12314  011308  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12315  01130A  0100               	movlb	0	; () banked
 12316  01130C  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12317  01130E  A0D8               	btfss	status,0,c
 12318  011310  D012               	goto	l2950
 12319                           
 12320                           ; BSR set to: 0
 12321  011312  0100               	movlb	0	; () banked
 12322  011314  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12323                           
 12324                           ; BSR set to: 0
 12325  011316  0100               	movlb	0	; () banked
 12326  011318  5172               	movf	___fldiv@a& (0+255),w,b
 12327  01131A  0100               	movlb	0	; () banked
 12328  01131C  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 12329  01131E  0100               	movlb	0	; () banked
 12330  011320  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 12331  011322  0100               	movlb	0	; () banked
 12332  011324  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12333  011326  0100               	movlb	0	; () banked
 12334  011328  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 12335  01132A  0100               	movlb	0	; () banked
 12336  01132C  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12337  01132E  0100               	movlb	0	; () banked
 12338  011330  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12339  011332  0100               	movlb	0	; () banked
 12340  011334  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12341  011336                     l2950:
 12342                           
 12343                           ; BSR set to: 0
 12344                           
 12345                           ; BSR set to: 0
 12346  011336  0100               	movlb	0	; () banked
 12347  011338  2B86               	incf	___fldiv@aexp& (0+255),f,b
 12348  01133A                     l2946:
 12349                           
 12350                           ; BSR set to: 0
 12351  01133A  0E19               	movlw	25
 12352  01133C  0100               	movlb	0	; () banked
 12353  01133E  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 12354  011340  D7BA               	goto	l2947
 12355                           
 12356                           ; BSR set to: 0
 12357                           
 12358                           ; BSR set to: 0
 12359  011342  0100               	movlb	0	; () banked
 12360  011344  517B               	movf	___fldiv@rem& (0+255),w,b
 12361  011346  0100               	movlb	0	; () banked
 12362  011348  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12363  01134A  0100               	movlb	0	; () banked
 12364  01134C  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12365  01134E  0100               	movlb	0	; () banked
 12366  011350  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12367  011352  B4D8               	btfsc	status,2,c
 12368  011354  D018               	goto	l2953
 12369                           
 12370                           ; BSR set to: 0
 12371  011356  0100               	movlb	0	; () banked
 12372  011358  8181               	bsf	___fldiv@grs& (0+255),0,b
 12373                           
 12374                           ; BSR set to: 0
 12375  01135A  D015               	goto	l2953
 12376  01135C                     
 12377                           ; BSR set to: 0
 12378                           
 12379                           ; BSR set to: 0
 12380  01135C  0100               	movlb	0	; () banked
 12381  01135E  90D8               	bcf	status,0,c
 12382  011360  376E               	rlcf	___fldiv@b& (0+255),f,b
 12383  011362  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12384  011364  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12385  011366  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12386                           
 12387                           ; BSR set to: 0
 12388  011368  0100               	movlb	0	; () banked
 12389  01136A  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12390  01136C  D002               	goto	l2955
 12391                           
 12392                           ; BSR set to: 0
 12393  01136E  0100               	movlb	0	; () banked
 12394  011370  816E               	bsf	___fldiv@b& (0+255),0,b
 12395  011372                     l2955:
 12396                           
 12397                           ; BSR set to: 0
 12398  011372  0100               	movlb	0	; () banked
 12399  011374  90D8               	bcf	status,0,c
 12400  011376  3781               	rlcf	___fldiv@grs& (0+255),f,b
 12401  011378  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12402  01137A  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12403  01137C  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12404  01137E  0100               	movlb	0	; () banked
 12405  011380  077F               	decf	___fldiv@new_exp& (0+255),f,b
 12406  011382  A0D8               	btfss	status,0,c
 12407  011384  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12408  011386                     l2953:
 12409                           
 12410                           ; BSR set to: 0
 12411                           
 12412                           ; BSR set to: 0
 12413  011386  0100               	movlb	0	; () banked
 12414  011388  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 12415  01138A  D7E8               	goto	l2954
 12416                           
 12417                           ; BSR set to: 0
 12418                           
 12419                           ; BSR set to: 0
 12420  01138C  0E00               	movlw	0
 12421  01138E  0100               	movlb	0	; () banked
 12422  011390  6F86               	movwf	___fldiv@aexp& (0+255),b
 12423                           
 12424                           ; BSR set to: 0
 12425  011392  0100               	movlb	0	; () banked
 12426  011394  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12427  011396  D024               	goto	l2960
 12428                           
 12429                           ; BSR set to: 0
 12430  011398  0EFF               	movlw	255
 12431  01139A  0100               	movlb	0	; () banked
 12432  01139C  1581               	andwf	___fldiv@grs& (0+255),w,b
 12433  01139E  0100               	movlb	0	; () banked
 12434  0113A0  6F76               	movwf	??___fldiv& (0+255),b
 12435  0113A2  0EFF               	movlw	255
 12436  0113A4  0100               	movlb	0	; () banked
 12437  0113A6  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12438  0113A8  0100               	movlb	0	; () banked
 12439  0113AA  6F77               	movwf	(??___fldiv+1)& (0+255),b
 12440  0113AC  0EFF               	movlw	255
 12441  0113AE  0100               	movlb	0	; () banked
 12442  0113B0  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12443  0113B2  0100               	movlb	0	; () banked
 12444  0113B4  6F78               	movwf	(??___fldiv+2)& (0+255),b
 12445  0113B6  0E7F               	movlw	127
 12446  0113B8  0100               	movlb	0	; () banked
 12447  0113BA  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12448  0113BC  0100               	movlb	0	; () banked
 12449  0113BE  6F79               	movwf	(??___fldiv+3)& (0+255),b
 12450  0113C0  0100               	movlb	0	; () banked
 12451  0113C2  5176               	movf	??___fldiv& (0+255),w,b
 12452  0113C4  0100               	movlb	0	; () banked
 12453  0113C6  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 12454  0113C8  0100               	movlb	0	; () banked
 12455  0113CA  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 12456  0113CC  0100               	movlb	0	; () banked
 12457  0113CE  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 12458  0113D0  A4D8               	btfss	status,2,c
 12459  0113D2  D003               	goto	u10470
 12460                           
 12461                           ; BSR set to: 0
 12462                           
 12463                           ; BSR set to: 0
 12464  0113D4  0100               	movlb	0	; () banked
 12465  0113D6  A16E               	btfss	___fldiv@b& (0+255),0,b
 12466  0113D8  D003               	goto	l2960
 12467  0113DA                     u10470:
 12468                           
 12469                           ; BSR set to: 0
 12470  0113DA  0E01               	movlw	1
 12471  0113DC  0100               	movlb	0	; () banked
 12472  0113DE  6F86               	movwf	___fldiv@aexp& (0+255),b
 12473  0113E0                     l2960:
 12474                           
 12475                           ; BSR set to: 0
 12476                           
 12477                           ; BSR set to: 0
 12478                           
 12479                           ; BSR set to: 0
 12480  0113E0  0100               	movlb	0	; () banked
 12481  0113E2  5186               	movf	___fldiv@aexp& (0+255),w,b
 12482  0113E4  0100               	movlb	0	; () banked
 12483  0113E6  B4D8               	btfsc	status,2,c
 12484  0113E8  D023               	goto	l2962
 12485                           
 12486                           ; BSR set to: 0
 12487  0113EA  0E01               	movlw	1
 12488  0113EC  0100               	movlb	0	; () banked
 12489  0113EE  276E               	addwf	___fldiv@b& (0+255),f,b
 12490  0113F0  0E00               	movlw	0
 12491  0113F2  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12492  0113F4  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12493  0113F6  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12494                           
 12495                           ; BSR set to: 0
 12496  0113F8  0100               	movlb	0	; () banked
 12497  0113FA  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 12498  0113FC  D019               	goto	l2962
 12499                           
 12500                           ; BSR set to: 0
 12501  0113FE  C06E  F076         	movff	___fldiv@b,??___fldiv
 12502  011402  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 12503  011406  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 12504  01140A  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 12505  01140E  0100               	movlb	0	; () banked
 12506  011410  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 12507  011412  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 12508  011414  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 12509  011416  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 12510  011418  3376               	rrcf	??___fldiv& (0+255),f,b
 12511  01141A  C076  F06E         	movff	??___fldiv,___fldiv@b
 12512  01141E  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 12513  011422  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 12514  011426  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 12515                           
 12516                           ; BSR set to: 0
 12517  01142A  0100               	movlb	0	; () banked
 12518  01142C  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 12519  01142E  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12520  011430                     l2962:
 12521                           
 12522                           ; BSR set to: 0
 12523                           
 12524                           ; BSR set to: 0
 12525                           
 12526                           ; BSR set to: 0
 12527  011430  0100               	movlb	0	; () banked
 12528  011432  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12529  011434  D014               	goto	l2963
 12530  011436  0100               	movlb	0	; () banked
 12531  011438  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12532  01143A  E104               	bnz	u10500
 12533  01143C  0100               	movlb	0	; () banked
 12534  01143E  297F               	incf	___fldiv@new_exp& (0+255),w,b
 12535  011440  A0D8               	btfss	status,0,c
 12536  011442  D00D               	goto	l2963
 12537  011444                     u10500:
 12538                           
 12539                           ; BSR set to: 0
 12540  011444  0E00               	movlw	0
 12541  011446  0100               	movlb	0	; () banked
 12542  011448  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12543  01144A  697F               	setf	___fldiv@new_exp& (0+255),b
 12544  01144C  0E00               	movlw	0
 12545  01144E  0100               	movlb	0	; () banked
 12546  011450  6F6E               	movwf	___fldiv@b& (0+255),b
 12547  011452  0E00               	movlw	0
 12548  011454  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12549  011456  0E00               	movlw	0
 12550  011458  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12551  01145A  0E00               	movlw	0
 12552  01145C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12553  01145E                     l2963:
 12554                           
 12555                           ; BSR set to: 0
 12556                           
 12557                           ; BSR set to: 0
 12558  01145E  0100               	movlb	0	; () banked
 12559  011460  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12560  011462  D007               	goto	u10510
 12561  011464  0100               	movlb	0	; () banked
 12562  011466  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12563  011468  E115               	bnz	l13912
 12564  01146A  0100               	movlb	0	; () banked
 12565  01146C  057F               	decf	___fldiv@new_exp& (0+255),w,b
 12566  01146E  B0D8               	btfsc	status,0,c
 12567  011470  D011               	goto	l2964
 12568  011472                     u10510:
 12569                           
 12570                           ; BSR set to: 0
 12571  011472  0E00               	movlw	0
 12572  011474  0100               	movlb	0	; () banked
 12573  011476  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12574  011478  0E00               	movlw	0
 12575  01147A  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 12576  01147C  0E00               	movlw	0
 12577  01147E  0100               	movlb	0	; () banked
 12578  011480  6F6E               	movwf	___fldiv@b& (0+255),b
 12579  011482  0E00               	movlw	0
 12580  011484  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12581  011486  0E00               	movlw	0
 12582  011488  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12583  01148A  0E00               	movlw	0
 12584  01148C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12585  01148E  0E00               	movlw	0
 12586  011490  0100               	movlb	0	; () banked
 12587  011492  6F7A               	movwf	___fldiv@sign& (0+255),b
 12588  011494                     l2964:
 12589  011494                     l13912:
 12590                           
 12591                           ; BSR set to: 0
 12592  011494  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 12593                           
 12594                           ; BSR set to: 0
 12595  011498  0100               	movlb	0	; () banked
 12596  01149A  A185               	btfss	___fldiv@bexp& (0+255),0,b
 12597  01149C  D003               	goto	l2965
 12598                           
 12599                           ; BSR set to: 0
 12600  01149E  0100               	movlb	0	; () banked
 12601  0114A0  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 12602  0114A2  D002               	goto	l2966
 12603  0114A4                     l2965:
 12604                           
 12605                           ; BSR set to: 0
 12606                           
 12607                           ; BSR set to: 0
 12608  0114A4  0100               	movlb	0	; () banked
 12609  0114A6  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 12610  0114A8                     l2966:
 12611                           
 12612                           ; BSR set to: 0
 12613                           
 12614                           ; BSR set to: 0
 12615  0114A8  0100               	movlb	0	; () banked
 12616  0114AA  90D8               	bcf	status,0,c
 12617  0114AC  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 12618  0114AE  0100               	movlb	0	; () banked
 12619  0114B0  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12620                           
 12621                           ; BSR set to: 0
 12622  0114B2  0100               	movlb	0	; () banked
 12623  0114B4  517A               	movf	___fldiv@sign& (0+255),w,b
 12624  0114B6  0100               	movlb	0	; () banked
 12625  0114B8  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12626                           
 12627                           ; BSR set to: 0
 12628  0114BA  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12629  0114BE  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12630  0114C2  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12631  0114C6  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12632  0114CA  0012               	return	
 12633  0114CC                     __end_of___fldiv:
 12634                           	opt stack 0
 12635                           tblptru	equ	0xFF8
 12636                           tblptrh	equ	0xFF7
 12637                           tblptrl	equ	0xFF6
 12638                           tablat	equ	0xFF5
 12639                           prodh	equ	0xFF4
 12640                           prodl	equ	0xFF3
 12641                           intcon	equ	0xFF2
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           postdec1	equ	0xFE5
 12645                           fsr1h	equ	0xFE2
 12646                           fsr1l	equ	0xFE1
 12647                           indf2	equ	0xFDF
 12648                           postinc2	equ	0xFDE
 12649                           postdec2	equ	0xFDD
 12650                           fsr2h	equ	0xFDA
 12651                           fsr2l	equ	0xFD9
 12652                           status	equ	0xFD8
 12653                           
 12654 ;; *************** function _init *****************
 12655 ;; Defined at:
 12656 ;;		line 63 in file "main.c"
 12657 ;; Parameters:    Size  Location     Type
 12658 ;;		None
 12659 ;; Auto vars:     Size  Location     Type
 12660 ;;		None
 12661 ;; Return value:  Size  Location     Type
 12662 ;;                  1    wreg      void 
 12663 ;; Registers used:
 12664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12665 ;; Tracked objects:
 12666 ;;		On entry : 0/0
 12667 ;;		On exit  : 0/0
 12668 ;;		Unchanged: 0/0
 12669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12674 ;;Total ram usage:        0 bytes
 12675 ;; Hardware stack levels used:    1
 12676 ;; Hardware stack levels required when called:   17
 12677 ;; This function calls:
 12678 ;;		_ADC_Init
 12679 ;;		_ADC_Start
 12680 ;;		_Console_Init
 12681 ;;		_HMI_Init
 12682 ;;		_ISR_Enable
 12683 ;;		_LCD_Init
 12684 ;;		_MXK_BlockSwitchTo
 12685 ;;		_MXK_Dequeue
 12686 ;;		_MXK_Init
 12687 ;;		_MXK_Release
 12688 ;;		_Motor_Init
 12689 ;;		_delay_ms
 12690 ;;		_eusart_init
 12691 ;;		_irobot_init
 12692 ;;		_irobot_init_song_0
 12693 ;;		_irobot_led_power_on
 12694 ;; This function is called by:
 12695 ;;		_main
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699                           	psect	text47
 12700  0147A4                     __ptext47:
 12701                           	opt stack 0
 12702  0147A4                     _init:
 12703                           	opt stack 13
 12704                           
 12705                           ;main.c: 65: MXK_Init();
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;incstack = 0
 12709  0147A4  ECCD  F096         	call	_MXK_Init	;wreg free
 12710                           
 12711                           ;main.c: 68: ISR_Enable();
 12712  0147A8  EC39  F0B3         	call	_ISR_Enable	;wreg free
 12713                           
 12714                           ;main.c: 71: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12715  0147AC  0E01               	movlw	1
 12716  0147AE  ECA2  F0AF         	call	_MXK_BlockSwitchTo
 12717  0147B2  0900               	iorlw	0
 12718  0147B4  B4D8               	btfsc	status,2,c
 12719  0147B6  D00C               	goto	l2303
 12720                           
 12721                           ;main.c: 72: Console_Init();
 12722  0147B8  EC30  F0A7         	call	_Console_Init	;wreg free
 12723                           
 12724                           ;main.c: 73: HMI_Init();
 12725  0147BC  ECCD  F090         	call	_HMI_Init	;wreg free
 12726                           
 12727                           ;main.c: 74: LCD_Init();
 12728  0147C0  EC8D  F097         	call	_LCD_Init	;wreg free
 12729                           
 12730                           ;main.c: 75: if (MXK_Release())
 12731  0147C4  EC31  F0B2         	call	_MXK_Release	;wreg free
 12732  0147C8  0900               	iorlw	0
 12733  0147CA  A4D8               	btfss	status,2,c
 12734                           
 12735                           ;main.c: 76: MXK_Dequeue();
 12736  0147CC  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
 12737  0147D0                     l2303:
 12738                           
 12739                           ;main.c: 77: }
 12740                           ;main.c: 80: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12741  0147D0  0E08               	movlw	8
 12742  0147D2  ECA2  F0AF         	call	_MXK_BlockSwitchTo
 12743  0147D6  0900               	iorlw	0
 12744  0147D8  B4D8               	btfsc	status,2,c
 12745  0147DA  D013               	goto	l2305
 12746                           
 12747                           ;main.c: 81: Motor_Init(&Stepper, 0b1000);
 12748  0147DC  0EC9               	movlw	low _Stepper
 12749  0147DE  0100               	movlb	0	; () banked
 12750  0147E0  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 12751  0147E2  0E03               	movlw	high _Stepper
 12752  0147E4  0100               	movlb	0	; () banked
 12753  0147E6  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12754  0147E8  0E00               	movlw	0
 12755  0147EA  0100               	movlb	0	; () banked
 12756  0147EC  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12757  0147EE  0E08               	movlw	8
 12758  0147F0  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 12759  0147F2  EC4F  F09E         	call	_Motor_Init	;wreg free
 12760                           
 12761                           ;main.c: 82: if (MXK_Release())
 12762  0147F6  EC31  F0B2         	call	_MXK_Release	;wreg free
 12763  0147FA  0900               	iorlw	0
 12764  0147FC  A4D8               	btfss	status,2,c
 12765                           
 12766                           ;main.c: 83: MXK_Dequeue();
 12767  0147FE  EC83  F0AF         	call	_MXK_Dequeue	;wreg free
 12768  014802                     l2305:
 12769                           
 12770                           ;main.c: 84: }
 12771                           ;main.c: 87: ADC_Init(&ADC_AN0, eADC_Ch0);
 12772  014802  0EF4               	movlw	low _ADC_AN0
 12773  014804  0100               	movlb	0	; () banked
 12774  014806  6F64               	movwf	ADC_Init@pInput& (0+255),b
 12775  014808  0E00               	movlw	high _ADC_AN0
 12776  01480A  0100               	movlb	0	; () banked
 12777  01480C  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12778  01480E  0E00               	movlw	0
 12779  014810  0100               	movlb	0	; () banked
 12780  014812  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 12781  014814  ECBC  F0A8         	call	_ADC_Init	;wreg free
 12782                           
 12783                           ;main.c: 88: float ADC_Voltage(ADCPtr plnput);
 12784                           ;main.c: 89: ADC_Start(&ADC_AN0);
 12785  014818  0EF4               	movlw	low _ADC_AN0
 12786  01481A  0100               	movlb	0	; () banked
 12787  01481C  6F62               	movwf	ADC_Start@pInput& (0+255),b
 12788  01481E  0E00               	movlw	high _ADC_AN0
 12789  014820  0100               	movlb	0	; () banked
 12790  014822  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 12791  014824  ECBA  F0A7         	call	_ADC_Start	;wreg free
 12792                           
 12793                           ;main.c: 91: eusart_init();
 12794  014828  ECBA  F0B1         	call	_eusart_init	;wreg free
 12795                           
 12796                           ;main.c: 92: irobot_init();
 12797  01482C  ECF9  F0B2         	call	_irobot_init	;wreg free
 12798                           
 12799                           ;main.c: 94: irobot_led_power_on(0xA);
 12800  014830  0E0A               	movlw	10
 12801  014832  EC23  F0B2         	call	_irobot_led_power_on
 12802                           
 12803                           ;main.c: 95: irobot_init_song_0();
 12804  014836  EC9B  F0B1         	call	_irobot_init_song_0	;wreg free
 12805                           
 12806                           ;main.c: 96: delay_ms(20);
 12807  01483A  0E00               	movlw	0
 12808  01483C  0100               	movlb	0	; () banked
 12809  01483E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12810  014840  0E14               	movlw	20
 12811  014842  6F60               	movwf	delay_ms@ms& (0+255),b
 12812  014844  EC31  F0AB         	call	_delay_ms	;wreg free
 12813  014848  0012               	return		;funcret
 12814  01484A                     __end_of_init:
 12815                           	opt stack 0
 12816                           tblptru	equ	0xFF8
 12817                           tblptrh	equ	0xFF7
 12818                           tblptrl	equ	0xFF6
 12819                           tablat	equ	0xFF5
 12820                           prodh	equ	0xFF4
 12821                           prodl	equ	0xFF3
 12822                           intcon	equ	0xFF2
 12823                           postinc0	equ	0xFEE
 12824                           wreg	equ	0xFE8
 12825                           postdec1	equ	0xFE5
 12826                           fsr1h	equ	0xFE2
 12827                           fsr1l	equ	0xFE1
 12828                           indf2	equ	0xFDF
 12829                           postinc2	equ	0xFDE
 12830                           postdec2	equ	0xFDD
 12831                           fsr2h	equ	0xFDA
 12832                           fsr2l	equ	0xFD9
 12833                           status	equ	0xFD8
 12834                           
 12835 ;; *************** function _irobot_led_power_on *****************
 12836 ;; Defined at:
 12837 ;;		line 304 in file "Library/iRobotSerial.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;  powerOnColou    1    wreg     unsigned char 
 12840 ;; Auto vars:     Size  Location     Type
 12841 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 12842 ;; Return value:  Size  Location     Type
 12843 ;;                  1    wreg      void 
 12844 ;; Registers used:
 12845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;Total ram usage:        1 bytes
 12856 ;; Hardware stack levels used:    1
 12857 ;; Hardware stack levels required when called:    9
 12858 ;; This function calls:
 12859 ;;		_irobot_leds
 12860 ;; This function is called by:
 12861 ;;		_init
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text48
 12866  016446                     __ptext48:
 12867                           	opt stack 0
 12868  016446                     _irobot_led_power_on:
 12869                           	opt stack 20
 12870                           
 12871                           ;incstack = 0
 12872                           ;irobot_led_power_on@powerOnColour stored from wreg
 12873  016446  0100               	movlb	0	; () banked
 12874  016448  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 12875                           
 12876                           ;iRobotSerial.c: 305: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 12877  01644A  0E00               	movlw	0
 12878  01644C  0100               	movlb	0	; () banked
 12879  01644E  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 12880  016450  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 12881  016454  0EFF               	movlw	255
 12882  016456  0100               	movlb	0	; () banked
 12883  016458  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 12884  01645A  0E00               	movlw	0
 12885  01645C  ECF0  F0AC         	call	_irobot_leds
 12886  016460  0012               	return		;funcret
 12887  016462                     __end_of_irobot_led_power_on:
 12888                           	opt stack 0
 12889                           tblptru	equ	0xFF8
 12890                           tblptrh	equ	0xFF7
 12891                           tblptrl	equ	0xFF6
 12892                           tablat	equ	0xFF5
 12893                           prodh	equ	0xFF4
 12894                           prodl	equ	0xFF3
 12895                           intcon	equ	0xFF2
 12896                           postinc0	equ	0xFEE
 12897                           wreg	equ	0xFE8
 12898                           postdec1	equ	0xFE5
 12899                           fsr1h	equ	0xFE2
 12900                           fsr1l	equ	0xFE1
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           postdec2	equ	0xFDD
 12904                           fsr2h	equ	0xFDA
 12905                           fsr2l	equ	0xFD9
 12906                           status	equ	0xFD8
 12907                           
 12908 ;; *************** function _irobot_leds *****************
 12909 ;; Defined at:
 12910 ;;		line 239 in file "Library/iRobotSerial.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;  isScript        1    wreg     unsigned char 
 12913 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 12914 ;;  powerColour     1   17[BANK0 ] unsigned char 
 12915 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;  isScript        1   19[BANK0 ] unsigned char 
 12918 ;; Return value:  Size  Location     Type
 12919 ;;                  1    wreg      void 
 12920 ;; Registers used:
 12921 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12922 ;; Tracked objects:
 12923 ;;		On entry : 0/0
 12924 ;;		On exit  : 0/0
 12925 ;;		Unchanged: 0/0
 12926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12927 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;Total ram usage:        4 bytes
 12932 ;; Hardware stack levels used:    1
 12933 ;; Hardware stack levels required when called:    8
 12934 ;; This function calls:
 12935 ;;		_eusart_putch
 12936 ;;		_load_iRScriptStack
 12937 ;; This function is called by:
 12938 ;;		_irobot_led_power_on
 12939 ;;		_irobot_led_power_off
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text49
 12944  0159E0                     __ptext49:
 12945                           	opt stack 0
 12946  0159E0                     _irobot_leds:
 12947                           	opt stack 20
 12948                           
 12949                           ;incstack = 0
 12950                           ;irobot_leds@isScript stored from wreg
 12951  0159E0  0100               	movlb	0	; () banked
 12952  0159E2  6F73               	movwf	irobot_leds@isScript& (0+255),b
 12953                           
 12954                           ;iRobotSerial.c: 240: if (isScript) {
 12955  0159E4  0100               	movlb	0	; () banked
 12956  0159E6  5173               	movf	irobot_leds@isScript& (0+255),w,b
 12957  0159E8  0100               	movlb	0	; () banked
 12958  0159EA  B4D8               	btfsc	status,2,c
 12959  0159EC  D015               	goto	l2144
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 12963                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 12964  0159EE  0E00               	movlw	0
 12965  0159F0  0100               	movlb	0	; () banked
 12966  0159F2  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 12967  0159F4  0E8B               	movlw	139
 12968  0159F6  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 12969  0159F8  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 12970  0159FC  0100               	movlb	0	; () banked
 12971  0159FE  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 12972  015A00  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 12973  015A04  0100               	movlb	0	; () banked
 12974  015A06  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 12975  015A08  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 12976  015A0C  0100               	movlb	0	; () banked
 12977  015A0E  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 12978  015A10  0E04               	movlw	4
 12979  015A12  ECFC  F0AA         	call	_load_iRScriptStack
 12980                           
 12981                           ;iRobotSerial.c: 243: }
 12982  015A16  0012               	return	
 12983  015A18                     l2144:
 12984                           
 12985                           ;iRobotSerial.c: 244: else{
 12986                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 12987  015A18  0E8B               	movlw	139
 12988  015A1A  EC00  F0B3         	call	_eusart_putch
 12989                           
 12990                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 12991  015A1E  0100               	movlb	0	; () banked
 12992  015A20  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 12993  015A22  EC00  F0B3         	call	_eusart_putch
 12994                           
 12995                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 12996  015A26  0100               	movlb	0	; () banked
 12997  015A28  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 12998  015A2A  EC00  F0B3         	call	_eusart_putch
 12999                           
 13000                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 13001  015A2E  0100               	movlb	0	; () banked
 13002  015A30  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13003  015A32  EC00  F0B3         	call	_eusart_putch
 13004  015A36  0012               	return	
 13005  015A38                     __end_of_irobot_leds:
 13006                           	opt stack 0
 13007                           tblptru	equ	0xFF8
 13008                           tblptrh	equ	0xFF7
 13009                           tblptrl	equ	0xFF6
 13010                           tablat	equ	0xFF5
 13011                           prodh	equ	0xFF4
 13012                           prodl	equ	0xFF3
 13013                           intcon	equ	0xFF2
 13014                           postinc0	equ	0xFEE
 13015                           wreg	equ	0xFE8
 13016                           postdec1	equ	0xFE5
 13017                           fsr1h	equ	0xFE2
 13018                           fsr1l	equ	0xFE1
 13019                           indf2	equ	0xFDF
 13020                           postinc2	equ	0xFDE
 13021                           postdec2	equ	0xFDD
 13022                           fsr2h	equ	0xFDA
 13023                           fsr2l	equ	0xFD9
 13024                           status	equ	0xFD8
 13025                           
 13026 ;; *************** function _load_iRScriptStack *****************
 13027 ;; Defined at:
 13028 ;;		line 176 in file "Library/iRobotSerial.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;  bytesToLoad     1    wreg     unsigned char 
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13033 ;;  i               1   15[BANK0 ] unsigned char 
 13034 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13035 ;;		 -> ?_load_iRScriptStack(1), 
 13036 ;; Return value:  Size  Location     Type
 13037 ;;                  1    wreg      void 
 13038 ;; Registers used:
 13039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13040 ;; Tracked objects:
 13041 ;;		On entry : 0/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13045 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;Total ram usage:       16 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:    7
 13052 ;; This function calls:
 13053 ;;		Nothing
 13054 ;; This function is called by:
 13055 ;;		_irobot_move
 13056 ;;		_irobot_leds
 13057 ;;		_irobot_angle_wait
 13058 ;;		_irobot_distance_wait
 13059 ;; This function uses a non-reentrant model
 13060 ;;
 13061                           
 13062                           	psect	text50
 13063  0155F8                     __ptext50:
 13064                           	opt stack 0
 13065  0155F8                     _load_iRScriptStack:
 13066                           	opt stack 20
 13067                           
 13068                           ;incstack = 0
 13069                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13070  0155F8  0100               	movlb	0	; () banked
 13071  0155FA  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13072                           
 13073                           ;iRobotSerial.c: 177: va_list loadByte;
 13074                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 13075  0155FC  0E60               	movlw	low ?_load_iRScriptStack
 13076  0155FE  0100               	movlb	0	; () banked
 13077  015600  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13078  015602  0E00               	movlw	high ?_load_iRScriptStack
 13079  015604  0100               	movlb	0	; () banked
 13080  015606  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13081                           
 13082                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13083  015608  0E00               	movlw	0
 13084  01560A  0100               	movlb	0	; () banked
 13085  01560C  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 13086  01560E  D01F               	goto	l2118
 13087  015610                     
 13088                           ; BSR set to: 0
 13089                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13090                           
 13091                           ; BSR set to: 0
 13092  015610  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13093  015614  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13094  015618  0100               	movlb	0	; () banked
 13095  01561A  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 13096  01561C  C037  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 13097  015620  0100               	movlb	0	; () banked
 13098  015622  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13099  015624  0100               	movlb	0	; () banked
 13100  015626  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 13101  015628  0E00               	movlw	0
 13102  01562A  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13103  01562C  0E1E               	movlw	low _iRScriptStack
 13104  01562E  0100               	movlb	0	; () banked
 13105  015630  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 13106  015632  6EE1               	movwf	fsr1l,c
 13107  015634  0E04               	movlw	high _iRScriptStack
 13108  015636  0100               	movlb	0	; () banked
 13109  015638  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13110  01563A  6EE2               	movwf	fsr1h,c
 13111  01563C  CFDF FFE7          	movff	indf2,indf1
 13112                           
 13113                           ; BSR set to: 0
 13114  015640  0E02               	movlw	2
 13115  015642  0100               	movlb	0	; () banked
 13116  015644  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13117  015646  0E00               	movlw	0
 13118  015648  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13119                           
 13120                           ; BSR set to: 0
 13121  01564A  0100               	movlb	0	; () banked
 13122  01564C  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 13123  01564E                     l2118:
 13124                           
 13125                           ; BSR set to: 0
 13126                           
 13127                           ; BSR set to: 0
 13128  01564E  0100               	movlb	0	; () banked
 13129  015650  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13130  015652  0100               	movlb	0	; () banked
 13131  015654  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 13132  015656  A0D8               	btfss	status,0,c
 13133  015658  D7DB               	goto	l2119
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;iRobotSerial.c: 181: }
 13137                           ;iRobotSerial.c: 182: ;
 13138                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 13139                           
 13140                           ; BSR set to: 0
 13141  01565A  0100               	movlb	0	; () banked
 13142  01565C  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13143  01565E  2637               	addwf	_iRScriptIndex,f,c
 13144                           
 13145                           ; BSR set to: 0
 13146  015660  0012               	return		;funcret
 13147  015662                     __end_of_load_iRScriptStack:
 13148                           	opt stack 0
 13149                           tblptru	equ	0xFF8
 13150                           tblptrh	equ	0xFF7
 13151                           tblptrl	equ	0xFF6
 13152                           tablat	equ	0xFF5
 13153                           prodh	equ	0xFF4
 13154                           prodl	equ	0xFF3
 13155                           intcon	equ	0xFF2
 13156                           postinc0	equ	0xFEE
 13157                           wreg	equ	0xFE8
 13158                           indf1	equ	0xFE7
 13159                           postdec1	equ	0xFE5
 13160                           fsr1h	equ	0xFE2
 13161                           fsr1l	equ	0xFE1
 13162                           indf2	equ	0xFDF
 13163                           postinc2	equ	0xFDE
 13164                           postdec2	equ	0xFDD
 13165                           fsr2h	equ	0xFDA
 13166                           fsr2l	equ	0xFD9
 13167                           status	equ	0xFD8
 13168                           
 13169 ;; *************** function _irobot_init_song_0 *****************
 13170 ;; Defined at:
 13171 ;;		line 252 in file "Library/iRobotSerial.c"
 13172 ;; Parameters:    Size  Location     Type
 13173 ;;		None
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;		None
 13176 ;; Return value:  Size  Location     Type
 13177 ;;                  1    wreg      void 
 13178 ;; Registers used:
 13179 ;;		wreg, cstack
 13180 ;; Tracked objects:
 13181 ;;		On entry : 0/0
 13182 ;;		On exit  : 0/0
 13183 ;;		Unchanged: 0/0
 13184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;Total ram usage:        0 bytes
 13190 ;; Hardware stack levels used:    1
 13191 ;; Hardware stack levels required when called:    8
 13192 ;; This function calls:
 13193 ;;		_eusart_putch
 13194 ;; This function is called by:
 13195 ;;		_init
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199                           	psect	text51
 13200  016336                     __ptext51:
 13201                           	opt stack 0
 13202  016336                     _irobot_init_song_0:
 13203                           	opt stack 21
 13204                           
 13205                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;incstack = 0
 13209  016336  0E8C               	movlw	140
 13210  016338  EC00  F0B3         	call	_eusart_putch
 13211                           
 13212                           ;iRobotSerial.c: 254: eusart_putch(0);
 13213  01633C  0E00               	movlw	0
 13214  01633E  EC00  F0B3         	call	_eusart_putch
 13215                           
 13216                           ;iRobotSerial.c: 255: eusart_putch(1);
 13217  016342  0E01               	movlw	1
 13218  016344  EC00  F0B3         	call	_eusart_putch
 13219                           
 13220                           ;iRobotSerial.c: 256: eusart_putch(60);
 13221  016348  0E3C               	movlw	60
 13222  01634A  EC00  F0B3         	call	_eusart_putch
 13223                           
 13224                           ;iRobotSerial.c: 257: eusart_putch(4);
 13225  01634E  0E04               	movlw	4
 13226  016350  EC00  F0B3         	call	_eusart_putch
 13227  016354  0012               	return		;funcret
 13228  016356                     __end_of_irobot_init_song_0:
 13229                           	opt stack 0
 13230                           tblptru	equ	0xFF8
 13231                           tblptrh	equ	0xFF7
 13232                           tblptrl	equ	0xFF6
 13233                           tablat	equ	0xFF5
 13234                           prodh	equ	0xFF4
 13235                           prodl	equ	0xFF3
 13236                           intcon	equ	0xFF2
 13237                           postinc0	equ	0xFEE
 13238                           wreg	equ	0xFE8
 13239                           indf1	equ	0xFE7
 13240                           postdec1	equ	0xFE5
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function _irobot_init *****************
 13251 ;; Defined at:
 13252 ;;		line 198 in file "Library/iRobotSerial.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;		None
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;		None
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      void 
 13259 ;; Registers used:
 13260 ;;		wreg, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;Total ram usage:        0 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    8
 13273 ;; This function calls:
 13274 ;;		_eusart_putch
 13275 ;; This function is called by:
 13276 ;;		_init
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           	psect	text52
 13281  0165F2                     __ptext52:
 13282                           	opt stack 0
 13283  0165F2                     _irobot_init:
 13284                           	opt stack 21
 13285                           
 13286                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 13287                           
 13288                           ;incstack = 0
 13289  0165F2  0E80               	movlw	128
 13290  0165F4  EC00  F0B3         	call	_eusart_putch
 13291                           
 13292                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 13293  0165F8  0E84               	movlw	132
 13294  0165FA  EC00  F0B3         	call	_eusart_putch
 13295  0165FE  0012               	return		;funcret
 13296  016600                     __end_of_irobot_init:
 13297                           	opt stack 0
 13298                           tblptru	equ	0xFF8
 13299                           tblptrh	equ	0xFF7
 13300                           tblptrl	equ	0xFF6
 13301                           tablat	equ	0xFF5
 13302                           prodh	equ	0xFF4
 13303                           prodl	equ	0xFF3
 13304                           intcon	equ	0xFF2
 13305                           postinc0	equ	0xFEE
 13306                           wreg	equ	0xFE8
 13307                           indf1	equ	0xFE7
 13308                           postdec1	equ	0xFE5
 13309                           fsr1h	equ	0xFE2
 13310                           fsr1l	equ	0xFE1
 13311                           indf2	equ	0xFDF
 13312                           postinc2	equ	0xFDE
 13313                           postdec2	equ	0xFDD
 13314                           fsr2h	equ	0xFDA
 13315                           fsr2l	equ	0xFD9
 13316                           status	equ	0xFD8
 13317                           
 13318 ;; *************** function _eusart_putch *****************
 13319 ;; Defined at:
 13320 ;;		line 120 in file "Library/iRobotSerial.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  eusartSendCh    1    wreg     unsigned char 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		wreg
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13338 ;;Total ram usage:        1 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    7
 13341 ;; This function calls:
 13342 ;;		Nothing
 13343 ;; This function is called by:
 13344 ;;		_irobot_query_and_update
 13345 ;;		_irobot_init
 13346 ;;		_irobot_move
 13347 ;;		_irobot_leds
 13348 ;;		_irobot_init_song_0
 13349 ;;		_irobot_song_play
 13350 ;;		_irobot_script_play
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           	psect	text53
 13355  016600                     __ptext53:
 13356                           	opt stack 0
 13357  016600                     _eusart_putch:
 13358                           	opt stack 20
 13359                           
 13360                           ;incstack = 0
 13361                           ;eusart_putch@eusartSendChar stored from wreg
 13362  016600  0100               	movlb	0	; () banked
 13363  016602  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13364  016604                     
 13365                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13366  016604  A2AD               	btfss	4013,1,c	;volatile
 13367  016606  D7FE               	goto	l12520
 13368                           
 13369                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13370  016608  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13371  01660C  0012               	return		;funcret
 13372  01660E                     __end_of_eusart_putch:
 13373                           	opt stack 0
 13374                           tblptru	equ	0xFF8
 13375                           tblptrh	equ	0xFF7
 13376                           tblptrl	equ	0xFF6
 13377                           tablat	equ	0xFF5
 13378                           prodh	equ	0xFF4
 13379                           prodl	equ	0xFF3
 13380                           intcon	equ	0xFF2
 13381                           postinc0	equ	0xFEE
 13382                           wreg	equ	0xFE8
 13383                           indf1	equ	0xFE7
 13384                           postdec1	equ	0xFE5
 13385                           fsr1h	equ	0xFE2
 13386                           fsr1l	equ	0xFE1
 13387                           indf2	equ	0xFDF
 13388                           postinc2	equ	0xFDE
 13389                           postdec2	equ	0xFDD
 13390                           fsr2h	equ	0xFDA
 13391                           fsr2l	equ	0xFD9
 13392                           status	equ	0xFD8
 13393                           
 13394 ;; *************** function _eusart_init *****************
 13395 ;; Defined at:
 13396 ;;		line 103 in file "Library/iRobotSerial.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;		None
 13399 ;; Auto vars:     Size  Location     Type
 13400 ;;		None
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  1    wreg      void 
 13403 ;; Registers used:
 13404 ;;		wreg, status,2
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13414 ;;Total ram usage:        0 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    7
 13417 ;; This function calls:
 13418 ;;		Nothing
 13419 ;; This function is called by:
 13420 ;;		_init
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           	psect	text54
 13425  016374                     __ptext54:
 13426                           	opt stack 0
 13427  016374                     _eusart_init:
 13428                           	opt stack 22
 13429                           
 13430                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13431                           
 13432                           ;incstack = 0
 13433  016374  9C94               	bcf	3988,6,c	;volatile
 13434                           
 13435                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13436  016376  8E94               	bsf	3988,7,c	;volatile
 13437                           
 13438                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13439  016378  0E24               	movlw	36
 13440  01637A  6EAD               	movwf	4013,c	;volatile
 13441                           
 13442                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13443  01637C  0E98               	movlw	152
 13444  01637E  6EAC               	movwf	4012,c	;volatile
 13445                           
 13446                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13447  016380  9A7E               	bcf	3966,5,c	;volatile
 13448                           
 13449                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13450  016382  987E               	bcf	3966,4,c	;volatile
 13451                           
 13452                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13453  016384  927E               	bcf	3966,1,c	;volatile
 13454                           
 13455                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13456  016386  907E               	bcf	3966,0,c	;volatile
 13457                           
 13458                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13459  016388  84AD               	bsf	4013,2,c	;volatile
 13460                           
 13461                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13462  01638A  967E               	bcf	3966,3,c	;volatile
 13463                           
 13464                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13465  01638C  0E33               	movlw	51
 13466  01638E  6EB0               	movwf	4016,c	;volatile
 13467  016390  0012               	return		;funcret
 13468  016392                     __end_of_eusart_init:
 13469                           	opt stack 0
 13470                           tblptru	equ	0xFF8
 13471                           tblptrh	equ	0xFF7
 13472                           tblptrl	equ	0xFF6
 13473                           tablat	equ	0xFF5
 13474                           prodh	equ	0xFF4
 13475                           prodl	equ	0xFF3
 13476                           intcon	equ	0xFF2
 13477                           postinc0	equ	0xFEE
 13478                           wreg	equ	0xFE8
 13479                           indf1	equ	0xFE7
 13480                           postdec1	equ	0xFE5
 13481                           fsr1h	equ	0xFE2
 13482                           fsr1l	equ	0xFE1
 13483                           indf2	equ	0xFDF
 13484                           postinc2	equ	0xFDE
 13485                           postdec2	equ	0xFDD
 13486                           fsr2h	equ	0xFDA
 13487                           fsr2l	equ	0xFD9
 13488                           status	equ	0xFD8
 13489                           
 13490 ;; *************** function _Motor_Init *****************
 13491 ;; Defined at:
 13492 ;;		line 26 in file "Library/Motor.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13495 ;;		 -> Stepper(6), 
 13496 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;		None
 13499 ;; Return value:  Size  Location     Type
 13500 ;;                  1    wreg      void 
 13501 ;; Registers used:
 13502 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13512 ;;Total ram usage:        4 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; Hardware stack levels required when called:   12
 13515 ;; This function calls:
 13516 ;;		_Port_SetPin
 13517 ;;		_Port_SetPinType
 13518 ;;		_Timer0_Init
 13519 ;; This function is called by:
 13520 ;;		_init
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           	psect	text55
 13525  013C9E                     __ptext55:
 13526                           	opt stack 0
 13527  013C9E                     _Motor_Init:
 13528                           	opt stack 17
 13529                           
 13530                           ;Motor.c: 28: pMotor->mDelta = 0;
 13531                           
 13532                           ;incstack = 0
 13533  013C9E  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13534  013CA2  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13535  013CA6  0E00               	movlw	0
 13536  013CA8  6EDE               	movwf	postinc2,c
 13537  013CAA  0E00               	movlw	0
 13538  013CAC  6EDD               	movwf	postdec2,c
 13539                           
 13540                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13541  013CAE  0100               	movlb	0	; () banked
 13542  013CB0  EE20 F002          	lfsr	2,2
 13543  013CB4  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 13544  013CB6  26D9               	addwf	fsr2l,f,c
 13545  013CB8  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13546  013CBA  22DA               	addwfc	fsr2h,f,c
 13547  013CBC  0E00               	movlw	0
 13548  013CBE  6EDE               	movwf	postinc2,c
 13549  013CC0  0E00               	movlw	0
 13550  013CC2  6EDD               	movwf	postdec2,c
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13554  013CC4  0100               	movlb	0	; () banked
 13555  013CC6  EE20 F004          	lfsr	2,4
 13556  013CCA  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 13557  013CCC  26D9               	addwf	fsr2l,f,c
 13558  013CCE  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13559  013CD0  22DA               	addwfc	fsr2h,f,c
 13560  013CD2  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 13561  013CD6  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13565  013CDA  0E90               	movlw	low _PortE
 13566  013CDC  0100               	movlb	0	; () banked
 13567  013CDE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13568  013CE0  0E03               	movlw	high _PortE
 13569  013CE2  0100               	movlb	0	; () banked
 13570  013CE4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13571  013CE6  0E00               	movlw	0
 13572  013CE8  0100               	movlb	0	; () banked
 13573  013CEA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13574  013CEC  0E03               	movlw	3
 13575  013CEE  0100               	movlb	0	; () banked
 13576  013CF0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13577  013CF2  EC92  F093         	call	_Port_SetPinType	;wreg free
 13578                           
 13579                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13580  013CF6  0E90               	movlw	low _PortE
 13581  013CF8  0100               	movlb	0	; () banked
 13582  013CFA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13583  013CFC  0E03               	movlw	high _PortE
 13584  013CFE  0100               	movlb	0	; () banked
 13585  013D00  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13586  013D02  0E01               	movlw	1
 13587  013D04  0100               	movlb	0	; () banked
 13588  013D06  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13589  013D08  0E03               	movlw	3
 13590  013D0A  0100               	movlb	0	; () banked
 13591  013D0C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13592  013D0E  EC92  F093         	call	_Port_SetPinType	;wreg free
 13593                           
 13594                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13595  013D12  0E90               	movlw	low _PortE
 13596  013D14  0100               	movlb	0	; () banked
 13597  013D16  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13598  013D18  0E03               	movlw	high _PortE
 13599  013D1A  0100               	movlb	0	; () banked
 13600  013D1C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13601  013D1E  0E00               	movlw	0
 13602  013D20  0100               	movlb	0	; () banked
 13603  013D22  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13604  013D24  0E00               	movlw	0
 13605  013D26  0100               	movlb	0	; () banked
 13606  013D28  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13607  013D2A  EC8C  F09F         	call	_Port_SetPin	;wreg free
 13608                           
 13609                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13610  013D2E  0E90               	movlw	low _PortE
 13611  013D30  0100               	movlb	0	; () banked
 13612  013D32  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13613  013D34  0E03               	movlw	high _PortE
 13614  013D36  0100               	movlb	0	; () banked
 13615  013D38  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13616  013D3A  0E01               	movlw	1
 13617  013D3C  0100               	movlb	0	; () banked
 13618  013D3E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13619  013D40  0E00               	movlw	0
 13620  013D42  0100               	movlb	0	; () banked
 13621  013D44  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13622  013D46  EC8C  F09F         	call	_Port_SetPin	;wreg free
 13623                           
 13624                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13625  013D4A  0EEC               	movlw	low _Motor_Step
 13626  013D4C  0100               	movlb	0	; () banked
 13627  013D4E  6FBF               	movwf	_lStepFunction& (0+255),b
 13628  013D50  0E35               	movlw	high _Motor_Step
 13629  013D52  0100               	movlb	0	; () banked
 13630  013D54  6FC0               	movwf	(_lStepFunction+1)& (0+255),b
 13631  013D56  0E01               	movlw	low (_Motor_Step shr (0+16))
 13632  013D58  0100               	movlb	0	; () banked
 13633  013D5A  6FC1               	movwf	(_lStepFunction+2)& (0+255),b
 13634                           
 13635                           ; BSR set to: 0
 13636                           ;Motor.c: 39: Timer0_Init(1000);
 13637  013D5C  0EE8               	movlw	232
 13638  013D5E  0100               	movlb	0	; () banked
 13639  013D60  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 13640  013D62  0E03               	movlw	3
 13641  013D64  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13642  013D66  0E00               	movlw	0
 13643  013D68  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13644  013D6A  0E00               	movlw	0
 13645  013D6C  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13646  013D6E  ECF9  F098         	call	_Timer0_Init	;wreg free
 13647  013D72  0012               	return		;funcret
 13648  013D74                     __end_of_Motor_Init:
 13649                           	opt stack 0
 13650                           tblptru	equ	0xFF8
 13651                           tblptrh	equ	0xFF7
 13652                           tblptrl	equ	0xFF6
 13653                           tablat	equ	0xFF5
 13654                           prodh	equ	0xFF4
 13655                           prodl	equ	0xFF3
 13656                           intcon	equ	0xFF2
 13657                           postinc0	equ	0xFEE
 13658                           wreg	equ	0xFE8
 13659                           indf1	equ	0xFE7
 13660                           postdec1	equ	0xFE5
 13661                           fsr1h	equ	0xFE2
 13662                           fsr1l	equ	0xFE1
 13663                           indf2	equ	0xFDF
 13664                           postinc2	equ	0xFDE
 13665                           postdec2	equ	0xFDD
 13666                           fsr2h	equ	0xFDA
 13667                           fsr2l	equ	0xFD9
 13668                           status	equ	0xFD8
 13669                           
 13670 ;; *************** function _Timer0_Init *****************
 13671 ;; Defined at:
 13672 ;;		line 25 in file "Library/Timer0.c"
 13673 ;; Parameters:    Size  Location     Type
 13674 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13677 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13678 ;; Return value:  Size  Location     Type
 13679 ;;                  1    wreg      void 
 13680 ;; Registers used:
 13681 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13691 ;;Total ram usage:       14 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; Hardware stack levels required when called:    8
 13694 ;; This function calls:
 13695 ;;		_Timer0_Clear
 13696 ;;		___lldiv
 13697 ;; This function is called by:
 13698 ;;		_Motor_Init
 13699 ;;		_Motor_Speed
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text56
 13704  0131F2                     __ptext56:
 13705                           	opt stack 0
 13706  0131F2                     _Timer0_Init:
 13707                           	opt stack 20
 13708                           
 13709                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13710                           
 13711                           ;incstack = 0
 13712  0131F2  0E80               	movlw	128
 13713  0131F4  0100               	movlb	0	; () banked
 13714  0131F6  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13715  0131F8  0E8D               	movlw	141
 13716  0131FA  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13717  0131FC  0E5B               	movlw	91
 13718  0131FE  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13719  013200  0E00               	movlw	0
 13720  013202  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13724                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13725                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13726                           ;Timer0.c: 34: UINT32 DIVIDE;
 13727                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13728  013204  9ED5               	bcf	4053,7,c	;volatile
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;Timer0.c: 38: if (pFrequency == 0)
 13732  013206  0100               	movlb	0	; () banked
 13733  013208  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13734  01320A  0100               	movlb	0	; () banked
 13735  01320C  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13736  01320E  0100               	movlb	0	; () banked
 13737  013210  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13738  013212  0100               	movlb	0	; () banked
 13739  013214  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13740  013216  B4D8               	btfsc	status,2,c
 13741  013218  0012               	return	
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13745                           
 13746                           ; BSR set to: 0
 13747                           ;Timer0.c: 39: return;
 13748  01321A  96D5               	bcf	4053,3,c	;volatile
 13749                           
 13750                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13751  01321C  9CD5               	bcf	4053,6,c	;volatile
 13752                           
 13753                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13754  01321E  9AD5               	bcf	4053,5,c	;volatile
 13755                           
 13756                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13757  013220  98D5               	bcf	4053,4,c	;volatile
 13758                           
 13759                           ; BSR set to: 0
 13760                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13761  013222  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13762  013226  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13763  01322A  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13764  01322E  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13765  013232  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13766  013236  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13767  01323A  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13768  01323E  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13769  013242  EC0E  F0A1         	call	___lldiv	;wreg free
 13770  013246  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 13771  01324A  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13772  01324E  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13773  013252  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13774                           
 13775                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13776  013256  D00C               	goto	l1787
 13777  013258                     l13690:
 13778                           
 13779                           ;Timer0.c: 50: {
 13780                           ;Timer0.c: 51: INDEX ++;
 13781  013258  0100               	movlb	0	; () banked
 13782  01325A  2BE6               	incf	_INDEX& (0+255),f,b
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;Timer0.c: 52: if (INDEX >= 3)
 13786  01325C  0E02               	movlw	2
 13787  01325E  0100               	movlb	0	; () banked
 13788  013260  65E6               	cpfsgt	_INDEX& (0+255),b
 13789  013262  D001               	goto	l1785
 13790  013264  D02F               	goto	u10200
 13791  013266                     l1785:
 13792                           
 13793                           ; BSR set to: 0
 13794                           ;Timer0.c: 56: if (INDEX >= 8)
 13795                           
 13796                           ; BSR set to: 0
 13797  013266  0E07               	movlw	7
 13798  013268  0100               	movlb	0	; () banked
 13799  01326A  65E6               	cpfsgt	_INDEX& (0+255),b
 13800  01326C  D001               	goto	l1787
 13801  01326E  0012               	return	
 13802  013270                     l1787:
 13803                           
 13804                           ; BSR set to: 0
 13805                           
 13806                           ; BSR set to: 0
 13807  013270  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 13808  013274  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 13809  013278  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 13810  01327C  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 13811  013280  0100               	movlb	0	; () banked
 13812  013282  51E6               	movf	_INDEX& (0+255),w,b
 13813  013284  0D02               	mullw	2
 13814  013286  0E31               	movlw	low Timer0_Init@PRESCALE
 13815  013288  24F3               	addwf	prodl,w,c
 13816  01328A  6EF6               	movwf	tblptrl,c
 13817  01328C  0EFD               	movlw	high Timer0_Init@PRESCALE
 13818  01328E  20F4               	addwfc	prodh,w,c
 13819  013290  6EF7               	movwf	tblptrh,c
 13820  013292                     	if	1	;There are 3 active tblptr bytes
 13821  013292  6AF8               	clrf	tblptru,c
 13822  013294  0E00               	movlw	low (__mediumconst shr (0+16))
 13823  013296  22F8               	addwfc	tblptru,f,c
 13824  013298                     	endif
 13825  013298  0009               	tblrd		*+
 13826  01329A  CFF5 F071          	movff	tablat,??_Timer0_Init
 13827  01329E  0009               	tblrd		*+
 13828  0132A0  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 13829  0132A4  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 13830  0132A8  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 13831  0132AC  0100               	movlb	0	; () banked
 13832  0132AE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13833  0132B0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13834  0132B2  EC0E  F0A1         	call	___lldiv	;wreg free
 13835  0132B6  0100               	movlb	0	; () banked
 13836  0132B8  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13837  0132BA  E1CE               	bnz	l13690
 13838  0132BC  0100               	movlb	0	; () banked
 13839  0132BE  0562               	decf	(?___lldiv+2)& (0+255),w,b
 13840  0132C0  B0D8               	btfsc	status,0,c
 13841  0132C2  D7CA               	goto	l1784
 13842  0132C4                     u10200:
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;Timer0.c: 58: }
 13846                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 13847                           
 13848                           ; BSR set to: 0
 13849  0132C4  0100               	movlb	0	; () banked
 13850  0132C6  51E6               	movf	_INDEX& (0+255),w,b
 13851  0132C8  0D02               	mullw	2
 13852  0132CA  0E31               	movlw	low Timer0_Init@PRESCALE
 13853  0132CC  24F3               	addwf	prodl,w,c
 13854  0132CE  6EF6               	movwf	tblptrl,c
 13855  0132D0  0EFD               	movlw	high Timer0_Init@PRESCALE
 13856  0132D2  20F4               	addwfc	prodh,w,c
 13857  0132D4  6EF7               	movwf	tblptrh,c
 13858  0132D6                     	if	1	;There are 3 active tblptr bytes
 13859  0132D6  6AF8               	clrf	tblptru,c
 13860  0132D8  0E00               	movlw	low (__mediumconst shr (0+16))
 13861  0132DA  22F8               	addwfc	tblptru,f,c
 13862  0132DC                     	endif
 13863  0132DC  0008               	tblrd		*
 13864  0132DE  CFF5 F0E5          	movff	tablat,Timer0_Init@PRE
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 13868  0132E2  0EFF               	movlw	255
 13869  0132E4  0100               	movlb	0	; () banked
 13870  0132E6  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 13871  0132E8  0103               	movlb	3	; () banked
 13872  0132EA  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 13873  0132EC  0EFF               	movlw	255
 13874  0132EE  0100               	movlb	0	; () banked
 13875  0132F0  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 13876  0132F2  0103               	movlb	3	; () banked
 13877  0132F4  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 13878  0132F6  0EFF               	movlw	255
 13879  0132F8  0100               	movlb	0	; () banked
 13880  0132FA  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 13881  0132FC  0103               	movlb	3	; () banked
 13882  0132FE  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 13883  013300  0EFF               	movlw	255
 13884  013302  0100               	movlb	0	; () banked
 13885  013304  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 13886  013306  0103               	movlb	3	; () banked
 13887  013308  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 13888                           
 13889                           ; BSR set to: 3
 13890                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 13891  01330A  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 13892  01330E  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 13893  013312  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 13894  013316  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 13895  01331A  0100               	movlb	0	; () banked
 13896  01331C  51E5               	movf	Timer0_Init@PRE& (0+255),w,b
 13897  01331E  0100               	movlb	0	; () banked
 13898  013320  6F64               	movwf	___lldiv@divisor& (0+255),b
 13899  013322  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13900  013324  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13901  013326  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13902  013328  EC0E  F0A1         	call	___lldiv	;wreg free
 13903  01332C  0100               	movlb	0	; () banked
 13904  01332E  1F60               	comf	?___lldiv& (0+255),f,b
 13905  013330  0100               	movlb	0	; () banked
 13906  013332  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 13907  013334  0100               	movlb	0	; () banked
 13908  013336  4B60               	infsnz	?___lldiv& (0+255),f,b
 13909  013338  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 13910  01333A  0EFF               	movlw	255
 13911  01333C  0100               	movlb	0	; () banked
 13912  01333E  2560               	addwf	?___lldiv& (0+255),w,b
 13913  013340  6E29               	movwf	_COUNTER,c
 13914  013342  0EFF               	movlw	255
 13915  013344  0100               	movlb	0	; () banked
 13916  013346  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 13917  013348  6E2A               	movwf	_COUNTER+1,c
 13918                           
 13919                           ; BSR set to: 0
 13920                           ;Timer0.c: 68: Timer0_Clear();
 13921  01334A  EC22  F0B3         	call	_Timer0_Clear	;wreg free
 13922                           
 13923                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 13924  01334E  8ED5               	bsf	4053,7,c	;volatile
 13925  013350  0012               	return		;funcret
 13926  013352                     __end_of_Timer0_Init:
 13927                           	opt stack 0
 13928                           tblptru	equ	0xFF8
 13929                           tblptrh	equ	0xFF7
 13930                           tblptrl	equ	0xFF6
 13931                           tablat	equ	0xFF5
 13932                           prodh	equ	0xFF4
 13933                           prodl	equ	0xFF3
 13934                           intcon	equ	0xFF2
 13935                           postinc0	equ	0xFEE
 13936                           wreg	equ	0xFE8
 13937                           indf1	equ	0xFE7
 13938                           postdec1	equ	0xFE5
 13939                           fsr1h	equ	0xFE2
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           postdec2	equ	0xFDD
 13944                           fsr2h	equ	0xFDA
 13945                           fsr2l	equ	0xFD9
 13946                           status	equ	0xFD8
 13947                           
 13948 ;; *************** function _Timer0_Clear *****************
 13949 ;; Defined at:
 13950 ;;		line 20 in file "Library/Timer0.c"
 13951 ;; Parameters:    Size  Location     Type
 13952 ;;		None
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;		None
 13955 ;; Return value:  Size  Location     Type
 13956 ;;                  1    wreg      void 
 13957 ;; Registers used:
 13958 ;;		None
 13959 ;; Tracked objects:
 13960 ;;		On entry : 0/0
 13961 ;;		On exit  : 0/0
 13962 ;;		Unchanged: 0/0
 13963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13968 ;;Total ram usage:        0 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; Hardware stack levels required when called:    7
 13971 ;; This function calls:
 13972 ;;		Nothing
 13973 ;; This function is called by:
 13974 ;;		_Timer0_Init
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           	psect	text57
 13979  016644                     __ptext57:
 13980                           	opt stack 0
 13981  016644                     _Timer0_Clear:
 13982                           	opt stack 20
 13983                           
 13984                           ;Timer0.c: 22: TMR0 = COUNTER;
 13985                           
 13986                           ;incstack = 0
 13987  016644  C029  FFD6         	movff	_COUNTER,4054	;volatile
 13988  016648  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 13989                           
 13990                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 13991  01664C  94F2               	bcf	intcon,2,c	;volatile
 13992  01664E  0012               	return		;funcret
 13993  016650                     __end_of_Timer0_Clear:
 13994                           	opt stack 0
 13995                           tblptru	equ	0xFF8
 13996                           tblptrh	equ	0xFF7
 13997                           tblptrl	equ	0xFF6
 13998                           tablat	equ	0xFF5
 13999                           prodh	equ	0xFF4
 14000                           prodl	equ	0xFF3
 14001                           intcon	equ	0xFF2
 14002                           postinc0	equ	0xFEE
 14003                           wreg	equ	0xFE8
 14004                           indf1	equ	0xFE7
 14005                           postdec1	equ	0xFE5
 14006                           fsr1h	equ	0xFE2
 14007                           fsr1l	equ	0xFE1
 14008                           indf2	equ	0xFDF
 14009                           postinc2	equ	0xFDE
 14010                           postdec2	equ	0xFDD
 14011                           fsr2h	equ	0xFDA
 14012                           fsr2l	equ	0xFD9
 14013                           status	equ	0xFD8
 14014                           
 14015 ;; *************** function _MXK_Init *****************
 14016 ;; Defined at:
 14017 ;;		line 33 in file "Library/MXK.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;		None
 14020 ;; Auto vars:     Size  Location     Type
 14021 ;;		None
 14022 ;; Return value:  Size  Location     Type
 14023 ;;                  1    wreg      void 
 14024 ;; Registers used:
 14025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14026 ;; Tracked objects:
 14027 ;;		On entry : 0/0
 14028 ;;		On exit  : 0/0
 14029 ;;		Unchanged: 0/0
 14030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;Total ram usage:        0 bytes
 14036 ;; Hardware stack levels used:    1
 14037 ;; Hardware stack levels required when called:   16
 14038 ;; This function calls:
 14039 ;;		_LED_Init
 14040 ;;		_Port_Init
 14041 ;;		_Port_SetPin
 14042 ;;		_Port_SetPinType
 14043 ;;		_Port_SetQuadType
 14044 ;;		_Port_SetType
 14045 ;;		_delay_ms
 14046 ;; This function is called by:
 14047 ;;		_init
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           	psect	text58
 14052  012D9A                     __ptext58:
 14053                           	opt stack 0
 14054  012D9A                     _MXK_Init:
 14055                           	opt stack 13
 14056                           
 14057                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14058                           
 14059                           ;incstack = 0
 14060  012D9A  0E01               	movlw	1
 14061  012D9C  6E4B               	movwf	_Bus_State,c
 14062                           
 14063                           ;MXK.c: 36: lQueue = (Function)0;
 14064  012D9E  0E00               	movlw	0
 14065  012DA0  0100               	movlb	0	; () banked
 14066  012DA2  6FBC               	movwf	_lQueue& (0+255),b	;volatile
 14067  012DA4  0E00               	movlw	0
 14068  012DA6  0100               	movlb	0	; () banked
 14069  012DA8  6FBD               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14070  012DAA  0E00               	movlw	0
 14071  012DAC  0100               	movlb	0	; () banked
 14072  012DAE  6FBE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14076  012DB0  0EAE               	movlw	low _PortA
 14077  012DB2  0100               	movlb	0	; () banked
 14078  012DB4  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14079  012DB6  0E03               	movlw	high _PortA
 14080  012DB8  0100               	movlb	0	; () banked
 14081  012DBA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14082  012DBC  0E00               	movlw	0
 14083  012DBE  0100               	movlb	0	; () banked
 14084  012DC0  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14085  012DC2  EC41  F095         	call	_Port_Init	;wreg free
 14086                           
 14087                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14088  012DC6  0EA4               	movlw	low _PortB
 14089  012DC8  0100               	movlb	0	; () banked
 14090  012DCA  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14091  012DCC  0E03               	movlw	high _PortB
 14092  012DCE  0100               	movlb	0	; () banked
 14093  012DD0  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14094  012DD2  0E01               	movlw	1
 14095  012DD4  0100               	movlb	0	; () banked
 14096  012DD6  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14097  012DD8  EC41  F095         	call	_Port_Init	;wreg free
 14098                           
 14099                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14100  012DDC  0EEA               	movlw	low _PortC
 14101  012DDE  0100               	movlb	0	; () banked
 14102  012DE0  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14103  012DE2  0E00               	movlw	high _PortC
 14104  012DE4  0100               	movlb	0	; () banked
 14105  012DE6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14106  012DE8  0E02               	movlw	2
 14107  012DEA  0100               	movlb	0	; () banked
 14108  012DEC  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14109  012DEE  EC41  F095         	call	_Port_Init	;wreg free
 14110                           
 14111                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14112  012DF2  0E9A               	movlw	low _PortD
 14113  012DF4  0100               	movlb	0	; () banked
 14114  012DF6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14115  012DF8  0E03               	movlw	high _PortD
 14116  012DFA  0100               	movlb	0	; () banked
 14117  012DFC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14118  012DFE  0E03               	movlw	3
 14119  012E00  0100               	movlb	0	; () banked
 14120  012E02  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14121  012E04  EC41  F095         	call	_Port_Init	;wreg free
 14122                           
 14123                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14124  012E08  0E90               	movlw	low _PortE
 14125  012E0A  0100               	movlb	0	; () banked
 14126  012E0C  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14127  012E0E  0E03               	movlw	high _PortE
 14128  012E10  0100               	movlb	0	; () banked
 14129  012E12  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14130  012E14  0E04               	movlw	4
 14131  012E16  0100               	movlb	0	; () banked
 14132  012E18  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14133  012E1A  EC41  F095         	call	_Port_Init	;wreg free
 14134                           
 14135                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14136  012E1E  0EB8               	movlw	low _PortF
 14137  012E20  0100               	movlb	0	; () banked
 14138  012E22  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14139  012E24  0E03               	movlw	high _PortF
 14140  012E26  0100               	movlb	0	; () banked
 14141  012E28  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14142  012E2A  0E05               	movlw	5
 14143  012E2C  0100               	movlb	0	; () banked
 14144  012E2E  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14145  012E30  EC41  F095         	call	_Port_Init	;wreg free
 14146                           
 14147                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14148  012E34  0E86               	movlw	low _PortG
 14149  012E36  0100               	movlb	0	; () banked
 14150  012E38  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14151  012E3A  0E03               	movlw	high _PortG
 14152  012E3C  0100               	movlb	0	; () banked
 14153  012E3E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14154  012E40  0E06               	movlw	6
 14155  012E42  0100               	movlb	0	; () banked
 14156  012E44  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14157  012E46  EC41  F095         	call	_Port_Init	;wreg free
 14158                           
 14159                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14160  012E4A  0EB8               	movlw	low _PortF
 14161  012E4C  0100               	movlb	0	; () banked
 14162  012E4E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14163  012E50  0E03               	movlw	high _PortF
 14164  012E52  0100               	movlb	0	; () banked
 14165  012E54  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14166  012E56  0E05               	movlw	5
 14167  012E58  0100               	movlb	0	; () banked
 14168  012E5A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14169  012E5C  0E00               	movlw	0
 14170  012E5E  0100               	movlb	0	; () banked
 14171  012E60  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14172  012E62  EC92  F093         	call	_Port_SetPinType	;wreg free
 14173                           
 14174                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14175  012E66  0EA4               	movlw	low _PortB
 14176  012E68  0100               	movlb	0	; () banked
 14177  012E6A  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 14178  012E6C  0E03               	movlw	high _PortB
 14179  012E6E  0100               	movlb	0	; () banked
 14180  012E70  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14181  012E72  0E00               	movlw	0
 14182  012E74  0100               	movlb	0	; () banked
 14183  012E76  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14184  012E78  0E00               	movlw	0
 14185  012E7A  0100               	movlb	0	; () banked
 14186  012E7C  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 14187  012E7E  EC85  F08D         	call	_Port_SetQuadType	;wreg free
 14188                           
 14189                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14190  012E82  0EB8               	movlw	low _PortF
 14191  012E84  0100               	movlb	0	; () banked
 14192  012E86  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14193  012E88  0E03               	movlw	high _PortF
 14194  012E8A  0100               	movlb	0	; () banked
 14195  012E8C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14196  012E8E  0E06               	movlw	6
 14197  012E90  0100               	movlb	0	; () banked
 14198  012E92  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14199  012E94  0E03               	movlw	3
 14200  012E96  0100               	movlb	0	; () banked
 14201  012E98  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14202  012E9A  EC92  F093         	call	_Port_SetPinType	;wreg free
 14203                           
 14204                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14205  012E9E  0E86               	movlw	low _PortG
 14206  012EA0  0100               	movlb	0	; () banked
 14207  012EA2  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 14208  012EA4  0E03               	movlw	high _PortG
 14209  012EA6  0100               	movlb	0	; () banked
 14210  012EA8  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14211  012EAA  0E03               	movlw	3
 14212  012EAC  0100               	movlb	0	; () banked
 14213  012EAE  6F9C               	movwf	Port_SetType@pType& (0+255),b
 14214  012EB0  ECB0  F08E         	call	_Port_SetType	;wreg free
 14215                           
 14216                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14217  012EB4  0E86               	movlw	low _PortG
 14218  012EB6  0100               	movlb	0	; () banked
 14219  012EB8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14220  012EBA  0E03               	movlw	high _PortG
 14221  012EBC  0100               	movlb	0	; () banked
 14222  012EBE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14223  012EC0  0E04               	movlw	4
 14224  012EC2  0100               	movlb	0	; () banked
 14225  012EC4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14226  012EC6  0E00               	movlw	0
 14227  012EC8  0100               	movlb	0	; () banked
 14228  012ECA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14229  012ECC  EC8C  F09F         	call	_Port_SetPin	;wreg free
 14230                           
 14231                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14232  012ED0  0EB8               	movlw	low _PortF
 14233  012ED2  0100               	movlb	0	; () banked
 14234  012ED4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14235  012ED6  0E03               	movlw	high _PortF
 14236  012ED8  0100               	movlb	0	; () banked
 14237  012EDA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14238  012EDC  0E06               	movlw	6
 14239  012EDE  0100               	movlb	0	; () banked
 14240  012EE0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14241  012EE2  0E01               	movlw	1
 14242  012EE4  0100               	movlb	0	; () banked
 14243  012EE6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14244  012EE8  EC8C  F09F         	call	_Port_SetPin	;wreg free
 14245                           
 14246                           ;MXK.c: 55: LED_Init(eLED1);
 14247  012EEC  0E00               	movlw	0
 14248  012EEE  EC33  F0AC         	call	_LED_Init
 14249                           
 14250                           ;MXK.c: 56: LED_Init(eLED2);
 14251  012EF2  0E01               	movlw	1
 14252  012EF4  EC33  F0AC         	call	_LED_Init
 14253                           
 14254                           ;MXK.c: 58: PIR1 = 0;
 14255  012EF8  0E00               	movlw	0
 14256  012EFA  6E9E               	movwf	3998,c	;volatile
 14257                           
 14258                           ;MXK.c: 59: PIR2 = 0;
 14259  012EFC  0E00               	movlw	0
 14260  012EFE  6EA1               	movwf	4001,c	;volatile
 14261                           
 14262                           ;MXK.c: 60: PIR3 = 0;
 14263  012F00  0E00               	movlw	0
 14264  012F02  6EA4               	movwf	4004,c	;volatile
 14265                           
 14266                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14267  012F04  8E9B               	bsf	3995,7,c	;volatile
 14268                           
 14269                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14270  012F06  8C9B               	bsf	3995,6,c	;volatile
 14271                           
 14272                           ;MXK.c: 66: delay_ms(100);
 14273  012F08  0E00               	movlw	0
 14274  012F0A  0100               	movlb	0	; () banked
 14275  012F0C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14276  012F0E  0E64               	movlw	100
 14277  012F10  6F60               	movwf	delay_ms@ms& (0+255),b
 14278  012F12  EC31  F0AB         	call	_delay_ms	;wreg free
 14279                           
 14280                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14281  012F16  8ED0               	bsf	4048,7,c	;volatile
 14282  012F18  0012               	return		;funcret
 14283  012F1A                     __end_of_MXK_Init:
 14284                           	opt stack 0
 14285                           tblptru	equ	0xFF8
 14286                           tblptrh	equ	0xFF7
 14287                           tblptrl	equ	0xFF6
 14288                           tablat	equ	0xFF5
 14289                           prodh	equ	0xFF4
 14290                           prodl	equ	0xFF3
 14291                           intcon	equ	0xFF2
 14292                           postinc0	equ	0xFEE
 14293                           wreg	equ	0xFE8
 14294                           indf1	equ	0xFE7
 14295                           postdec1	equ	0xFE5
 14296                           fsr1h	equ	0xFE2
 14297                           fsr1l	equ	0xFE1
 14298                           indf2	equ	0xFDF
 14299                           postinc2	equ	0xFDE
 14300                           postdec2	equ	0xFDD
 14301                           fsr2h	equ	0xFDA
 14302                           fsr2l	equ	0xFD9
 14303                           status	equ	0xFD8
 14304                           
 14305 ;; *************** function _Port_Init *****************
 14306 ;; Defined at:
 14307 ;;		line 150 in file "Library/Port.c"
 14308 ;; Parameters:    Size  Location     Type
 14309 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 14310 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14311 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14312 ;;  pPort           1   66[BANK0 ] enum E6786
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;  i               1   69[BANK0 ] unsigned char 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14324 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;Total ram usage:        6 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:   15
 14331 ;; This function calls:
 14332 ;;		_GetPortPORT
 14333 ;;		_GetPortProperties
 14334 ;;		_GetPortTRIS
 14335 ;;		_Port_Set
 14336 ;;		_Port_SetPinType
 14337 ;;		_Port_SetType
 14338 ;;		_Word_GetPair
 14339 ;; This function is called by:
 14340 ;;		_MXK_Init
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           	psect	text59
 14345  012A82                     __ptext59:
 14346                           	opt stack 0
 14347  012A82                     _Port_Init:
 14348                           	opt stack 13
 14349                           
 14350                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14351                           
 14352                           ;incstack = 0
 14353  012A82  0100               	movlb	0	; () banked
 14354  012A84  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14355  012A86  EC78  F0A4         	call	_GetPortProperties
 14356  012A8A  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14357  012A8E  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14358  012A92  0100               	movlb	0	; () banked
 14359  012A94  C060  FFDE         	movff	?_GetPortProperties,postinc2
 14360  012A98  0100               	movlb	0	; () banked
 14361  012A9A  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 14362                           
 14363                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14364  012A9E  0100               	movlb	0	; () banked
 14365  012AA0  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14366  012AA2  ECCB  F0A4         	call	_GetPortPORT
 14367  012AA6  0100               	movlb	0	; () banked
 14368  012AA8  EE20 F006          	lfsr	2,6
 14369  012AAC  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14370  012AAE  26D9               	addwf	fsr2l,f,c
 14371  012AB0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14372  012AB2  22DA               	addwfc	fsr2h,f,c
 14373  012AB4  0100               	movlb	0	; () banked
 14374  012AB6  C060  FFDE         	movff	?_GetPortPORT,postinc2
 14375  012ABA  0100               	movlb	0	; () banked
 14376  012ABC  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 14377                           
 14378                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14379  012AC0  0100               	movlb	0	; () banked
 14380  012AC2  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14381  012AC4  ECCB  F0A4         	call	_GetPortPORT
 14382  012AC8  0100               	movlb	0	; () banked
 14383  012ACA  EE20 F004          	lfsr	2,4
 14384  012ACE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14385  012AD0  26D9               	addwf	fsr2l,f,c
 14386  012AD2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14387  012AD4  22DA               	addwfc	fsr2h,f,c
 14388  012AD6  0100               	movlb	0	; () banked
 14389  012AD8  C060  FFDE         	movff	?_GetPortPORT,postinc2
 14390  012ADC  0100               	movlb	0	; () banked
 14391  012ADE  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 14392                           
 14393                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14394  012AE2  0100               	movlb	0	; () banked
 14395  012AE4  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14396  012AE6  EC25  F0A4         	call	_GetPortTRIS
 14397  012AEA  0100               	movlb	0	; () banked
 14398  012AEC  EE20 F002          	lfsr	2,2
 14399  012AF0  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14400  012AF2  26D9               	addwf	fsr2l,f,c
 14401  012AF4  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14402  012AF6  22DA               	addwfc	fsr2h,f,c
 14403  012AF8  0100               	movlb	0	; () banked
 14404  012AFA  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 14405  012AFE  0100               	movlb	0	; () banked
 14406  012B00  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14410  012B04  0100               	movlb	0	; () banked
 14411  012B06  EE20 F004          	lfsr	2,4
 14412  012B0A  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14413  012B0C  26D9               	addwf	fsr2l,f,c
 14414  012B0E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14415  012B10  22DA               	addwfc	fsr2h,f,c
 14416  012B12  CFDE F0A3          	movff	postinc2,??_Port_Init
 14417  012B16  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 14418  012B1A  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 14419  012B1E  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 14420  012B22  0E00               	movlw	0
 14421  012B24  6EDF               	movwf	indf2,c
 14422                           
 14423                           ; BSR set to: 0
 14424                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14425  012B26  0100               	movlb	0	; () banked
 14426  012B28  EE20 F002          	lfsr	2,2
 14427  012B2C  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14428  012B2E  26D9               	addwf	fsr2l,f,c
 14429  012B30  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14430  012B32  22DA               	addwfc	fsr2h,f,c
 14431  012B34  CFDE F0A3          	movff	postinc2,??_Port_Init
 14432  012B38  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 14433  012B3C  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 14434  012B40  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 14435  012B44  0EFF               	movlw	255
 14436  012B46  6EDF               	movwf	indf2,c
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14440  012B48  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 14441  012B4C  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14442  012B50  0E00               	movlw	0
 14443  012B52  0100               	movlb	0	; () banked
 14444  012B54  6F9C               	movwf	Port_SetType@pType& (0+255),b
 14445  012B56  ECB0  F08E         	call	_Port_SetType	;wreg free
 14446                           
 14447                           ;Port.c: 166: UINT8 i;
 14448                           ;Port.c: 167: for (i=0; i<8; i++)
 14449  012B5A  0E00               	movlw	0
 14450  012B5C  0100               	movlb	0	; () banked
 14451  012B5E  6FA5               	movwf	Port_Init@i& (0+255),b
 14452  012B60                     l13544:
 14453                           
 14454                           ; BSR set to: 0
 14455  012B60  0E07               	movlw	7
 14456  012B62  0100               	movlb	0	; () banked
 14457  012B64  65A5               	cpfsgt	Port_Init@i& (0+255),b
 14458  012B66  D031               	goto	l403
 14459  012B68  D04B               	goto	u10000
 14460  012B6A                     
 14461                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14462                           
 14463                           ; BSR set to: 0
 14464  012B6A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14465  012B6E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14466  012B72  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14467  012B76  0E03               	movlw	3
 14468  012B78  0100               	movlb	0	; () banked
 14469  012B7A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14470  012B7C  EC92  F093         	call	_Port_SetPinType	;wreg free
 14471                           
 14472                           ;Port.c: 173: break;
 14473  012B80  D03C               	goto	l405
 14474  012B82                     
 14475                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14476  012B82  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14477  012B86  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14478  012B8A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14479  012B8E  0E02               	movlw	2
 14480  012B90  0100               	movlb	0	; () banked
 14481  012B92  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14482  012B94  EC92  F093         	call	_Port_SetPinType	;wreg free
 14483                           
 14484                           ;Port.c: 176: break;
 14485  012B98  D030               	goto	l405
 14486  012B9A                     
 14487                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14488  012B9A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14489  012B9E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14490  012BA2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14491  012BA6  0E01               	movlw	1
 14492  012BA8  0100               	movlb	0	; () banked
 14493  012BAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14494  012BAC  EC92  F093         	call	_Port_SetPinType	;wreg free
 14495                           
 14496                           ;Port.c: 179: break;
 14497  012BB0  D024               	goto	l405
 14498  012BB2                     
 14499                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14500  012BB2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14501  012BB6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14502  012BBA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14503  012BBE  0E00               	movlw	0
 14504  012BC0  0100               	movlb	0	; () banked
 14505  012BC2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14506  012BC4  EC92  F093         	call	_Port_SetPinType	;wreg free
 14507                           
 14508                           ;Port.c: 183: }
 14509                           
 14510                           ;Port.c: 182: break;
 14511  012BC8  D018               	goto	l405
 14512  012BCA                     l403:
 14513  012BCA  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14514  012BCE  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14515  012BD2  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 14516  012BD6  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 14517  012BDA  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 14518  012BDE  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 14519                           
 14520                           ; Switch size 1, requested type "space"
 14521                           ; Number of cases is 4, Range of values is 0 to 3
 14522                           ; switch strategies available:
 14523                           ; Name         Instructions Cycles
 14524                           ; simple_byte           13     7 (average)
 14525                           ;	Chosen strategy is simple_byte
 14526  012BE2  0A00               	xorlw	0	; case 0
 14527  012BE4  B4D8               	btfsc	status,2,c
 14528  012BE6  D7C1               	goto	l404
 14529  012BE8  0A01               	xorlw	1	; case 1
 14530  012BEA  B4D8               	btfsc	status,2,c
 14531  012BEC  D7D6               	goto	l407
 14532  012BEE  0A03               	xorlw	3	; case 2
 14533  012BF0  B4D8               	btfsc	status,2,c
 14534  012BF2  D7C7               	goto	l406
 14535  012BF4  0A01               	xorlw	1	; case 3
 14536  012BF6  B4D8               	btfsc	status,2,c
 14537  012BF8  D7DC               	goto	l408
 14538  012BFA                     l405:
 14539  012BFA  0100               	movlb	0	; () banked
 14540  012BFC  2BA5               	incf	Port_Init@i& (0+255),f,b
 14541  012BFE  D7B0               	goto	l13544
 14542  012C00                     u10000:
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;Port.c: 184: }
 14546                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14547                           
 14548                           ; BSR set to: 0
 14549  012C00  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 14550  012C04  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14551  012C08  0E00               	movlw	0
 14552  012C0A  0100               	movlb	0	; () banked
 14553  012C0C  6F71               	movwf	Port_Set@pValue& (0+255),b
 14554  012C0E  EC66  F08A         	call	_Port_Set	;wreg free
 14555  012C12  0012               	return		;funcret
 14556  012C14                     __end_of_Port_Init:
 14557                           	opt stack 0
 14558                           tblptru	equ	0xFF8
 14559                           tblptrh	equ	0xFF7
 14560                           tblptrl	equ	0xFF6
 14561                           tablat	equ	0xFF5
 14562                           prodh	equ	0xFF4
 14563                           prodl	equ	0xFF3
 14564                           intcon	equ	0xFF2
 14565                           postinc0	equ	0xFEE
 14566                           wreg	equ	0xFE8
 14567                           indf1	equ	0xFE7
 14568                           postdec1	equ	0xFE5
 14569                           fsr1h	equ	0xFE2
 14570                           fsr1l	equ	0xFE1
 14571                           indf2	equ	0xFDF
 14572                           postinc2	equ	0xFDE
 14573                           postdec2	equ	0xFDD
 14574                           fsr2h	equ	0xFDA
 14575                           fsr2l	equ	0xFD9
 14576                           status	equ	0xFD8
 14577                           
 14578 ;; *************** function _Port_SetType *****************
 14579 ;; Defined at:
 14580 ;;		line 513 in file "Library/Port.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14583 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14584 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14585 ;;  pType           1   60[BANK0 ] enum E6795
 14586 ;; Auto vars:     Size  Location     Type
 14587 ;;  Output          1   63[BANK0 ] enum E6475
 14588 ;; Return value:  Size  Location     Type
 14589 ;;                  1    wreg      enum E6475
 14590 ;; Registers used:
 14591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14592 ;; Tracked objects:
 14593 ;;		On entry : 0/0
 14594 ;;		On exit  : 0/0
 14595 ;;		Unchanged: 0/0
 14596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14597 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14600 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14601 ;;Total ram usage:        6 bytes
 14602 ;; Hardware stack levels used:    1
 14603 ;; Hardware stack levels required when called:   14
 14604 ;; This function calls:
 14605 ;;		_Port_CheckPortType
 14606 ;;		_Word_SetPair
 14607 ;; This function is called by:
 14608 ;;		_Port_Init
 14609 ;;		_MXK_Init
 14610 ;; This function uses a non-reentrant model
 14611 ;;
 14612                           
 14613                           	psect	text60
 14614  011D60                     __ptext60:
 14615                           	opt stack 0
 14616  011D60                     _Port_SetType:
 14617                           	opt stack 14
 14618                           
 14619                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14620                           
 14621                           ;incstack = 0
 14622  011D60  0E05               	movlw	5
 14623  011D62  0100               	movlb	0	; () banked
 14624  011D64  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14625                           
 14626                           ;Port.c: 517: switch (pType)
 14627  011D66  D07A               	goto	l509
 14628  011D68                     
 14629                           ; BSR set to: 0
 14630                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14631                           
 14632                           ; BSR set to: 0
 14633  011D68  0100               	movlb	0	; () banked
 14634  011D6A  EE20 F002          	lfsr	2,2
 14635  011D6E  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14636  011D70  26D9               	addwf	fsr2l,f,c
 14637  011D72  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14638  011D74  22DA               	addwfc	fsr2h,f,c
 14639  011D76  CFDE F09D          	movff	postinc2,??_Port_SetType
 14640  011D7A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14641  011D7E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14642  011D82  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14643  011D86  0EFF               	movlw	255
 14644  011D88  D067               	goto	L10
 14645  011D8A                     
 14646                           ; BSR set to: 0
 14647                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14648                           
 14649                           ; BSR set to: 0
 14650  011D8A  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14651  011D8E  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14652  011D92  0E01               	movlw	1
 14653  011D94  0100               	movlb	0	; () banked
 14654  011D96  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14655  011D98  EC0C  F0AE         	call	_Port_CheckPortType	;wreg free
 14656  011D9C  0100               	movlb	0	; () banked
 14657  011D9E  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14658  011DA0  0100               	movlb	0	; () banked
 14659  011DA2  519F               	movf	Port_SetType@Output& (0+255),w,b
 14660  011DA4  A4D8               	btfss	status,2,c
 14661  011DA6  0012               	return	
 14662                           
 14663                           ; BSR set to: 0
 14664                           ;Port.c: 527: {
 14665                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14666  011DA8  0100               	movlb	0	; () banked
 14667  011DAA  EE20 F002          	lfsr	2,2
 14668  011DAE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14669  011DB0  26D9               	addwf	fsr2l,f,c
 14670  011DB2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14671  011DB4  22DA               	addwfc	fsr2h,f,c
 14672  011DB6  CFDE F09D          	movff	postinc2,??_Port_SetType
 14673  011DBA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14674  011DBE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14675  011DC2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14676  011DC6  0E00               	movlw	0
 14677  011DC8  6EDF               	movwf	indf2,c
 14678                           
 14679                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14680  011DCA  0100               	movlb	0	; () banked
 14681  011DCC  EE20 F004          	lfsr	2,4
 14682  011DD0  D036               	goto	L21
 14683  011DD2                     
 14684                           ; BSR set to: 0
 14685                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14686                           
 14687                           ; BSR set to: 0
 14688  011DD2  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14689  011DD6  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14690  011DDA  0E02               	movlw	2
 14691  011DDC  0100               	movlb	0	; () banked
 14692  011DDE  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14693  011DE0  EC0C  F0AE         	call	_Port_CheckPortType	;wreg free
 14694  011DE4  0100               	movlb	0	; () banked
 14695  011DE6  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14696  011DE8  0100               	movlb	0	; () banked
 14697  011DEA  519F               	movf	Port_SetType@Output& (0+255),w,b
 14698  011DEC  A4D8               	btfss	status,2,c
 14699  011DEE  0012               	return	
 14700                           
 14701                           ; BSR set to: 0
 14702                           ;Port.c: 538: {
 14703                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14704  011DF0  0100               	movlb	0	; () banked
 14705  011DF2  EE20 F002          	lfsr	2,2
 14706  011DF6  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14707  011DF8  26D9               	addwf	fsr2l,f,c
 14708  011DFA  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14709  011DFC  22DA               	addwfc	fsr2h,f,c
 14710  011DFE  CFDE F09D          	movff	postinc2,??_Port_SetType
 14711  011E02  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14712  011E06  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14713  011E0A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14714  011E0E  0EFF               	movlw	255
 14715  011E10  6EDF               	movwf	indf2,c
 14716                           
 14717                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14718  011E12  0100               	movlb	0	; () banked
 14719  011E14  EE20 F004          	lfsr	2,4
 14720  011E18  D7AA               	goto	L11
 14721  011E1A                     
 14722                           ; BSR set to: 0
 14723                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14724                           
 14725                           ; BSR set to: 0
 14726  011E1A  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14727  011E1E  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14728  011E22  0E00               	movlw	0
 14729  011E24  0100               	movlb	0	; () banked
 14730  011E26  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14731  011E28  EC0C  F0AE         	call	_Port_CheckPortType	;wreg free
 14732  011E2C  0100               	movlb	0	; () banked
 14733  011E2E  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14734  011E30  0100               	movlb	0	; () banked
 14735  011E32  519F               	movf	Port_SetType@Output& (0+255),w,b
 14736  011E34  A4D8               	btfss	status,2,c
 14737  011E36  0012               	return	
 14738                           
 14739                           ; BSR set to: 0
 14740                           ;Port.c: 549: {
 14741                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14742  011E38  0100               	movlb	0	; () banked
 14743  011E3A  EE20 F002          	lfsr	2,2
 14744  011E3E                     L21:
 14745  011E3E  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14746  011E40  26D9               	addwf	fsr2l,f,c
 14747  011E42  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14748  011E44  22DA               	addwfc	fsr2h,f,c
 14749  011E46  CFDE F09D          	movff	postinc2,??_Port_SetType
 14750  011E4A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14751  011E4E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14752  011E52  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14753  011E56  0E00               	movlw	0
 14754  011E58                     L10:
 14755  011E58  6EDF               	movwf	indf2,c
 14756                           
 14757                           ;Port.c: 552: }
 14758  011E5A  D00E               	goto	l511
 14759  011E5C                     l509:
 14760                           
 14761                           ; BSR set to: 0
 14762                           
 14763                           ; BSR set to: 0
 14764  011E5C  0100               	movlb	0	; () banked
 14765  011E5E  519C               	movf	Port_SetType@pType& (0+255),w,b
 14766                           
 14767                           ; Switch size 1, requested type "space"
 14768                           ; Number of cases is 4, Range of values is 0 to 3
 14769                           ; switch strategies available:
 14770                           ; Name         Instructions Cycles
 14771                           ; simple_byte           13     7 (average)
 14772                           ;	Chosen strategy is simple_byte
 14773  011E60  0A00               	xorlw	0	; case 0
 14774  011E62  B4D8               	btfsc	status,2,c
 14775  011E64  D781               	goto	l510
 14776  011E66  0A01               	xorlw	1	; case 1
 14777  011E68  B4D8               	btfsc	status,2,c
 14778  011E6A  D78F               	goto	l512
 14779  011E6C  0A03               	xorlw	3	; case 2
 14780  011E6E  B4D8               	btfsc	status,2,c
 14781  011E70  D7B0               	goto	l516
 14782  011E72  0A01               	xorlw	1	; case 3
 14783  011E74  B4D8               	btfsc	status,2,c
 14784  011E76  D7D1               	goto	l519
 14785  011E78                     l511:
 14786                           
 14787                           ; BSR set to: 0
 14788                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14789                           
 14790                           ; BSR set to: 0
 14791  011E78  0E08               	movlw	8
 14792  011E7A  0100               	movlb	0	; () banked
 14793  011E7C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14794  011E7E  0100               	movlb	0	; () banked
 14795  011E80  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14796  011E82  0E00               	movlw	0
 14797  011E84  0100               	movlb	0	; () banked
 14798  011E86  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14799  011E88  0100               	movlb	0	; () banked
 14800  011E8A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14801  011E8C  0E00               	movlw	0
 14802  011E8E  0100               	movlb	0	; () banked
 14803  011E90  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14804  011E92  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14805  011E96  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14806                           
 14807                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14808  011E9A  0E08               	movlw	8
 14809  011E9C  0100               	movlb	0	; () banked
 14810  011E9E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14811  011EA0  0100               	movlb	0	; () banked
 14812  011EA2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14813  011EA4  0E00               	movlw	0
 14814  011EA6  0100               	movlb	0	; () banked
 14815  011EA8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14816  011EAA  0100               	movlb	0	; () banked
 14817  011EAC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14818  011EAE  0E01               	movlw	1
 14819  011EB0  0100               	movlb	0	; () banked
 14820  011EB2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14821  011EB4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14822  011EB8  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14823                           
 14824                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14825  011EBC  0E08               	movlw	8
 14826  011EBE  0100               	movlb	0	; () banked
 14827  011EC0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14828  011EC2  0100               	movlb	0	; () banked
 14829  011EC4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14830  011EC6  0E00               	movlw	0
 14831  011EC8  0100               	movlb	0	; () banked
 14832  011ECA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14833  011ECC  0100               	movlb	0	; () banked
 14834  011ECE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14835  011ED0  0E02               	movlw	2
 14836  011ED2  0100               	movlb	0	; () banked
 14837  011ED4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14838  011ED6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14839  011EDA  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14840                           
 14841                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14842  011EDE  0E08               	movlw	8
 14843  011EE0  0100               	movlb	0	; () banked
 14844  011EE2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14845  011EE4  0100               	movlb	0	; () banked
 14846  011EE6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14847  011EE8  0E00               	movlw	0
 14848  011EEA  0100               	movlb	0	; () banked
 14849  011EEC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14850  011EEE  0100               	movlb	0	; () banked
 14851  011EF0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14852  011EF2  0E03               	movlw	3
 14853  011EF4  0100               	movlb	0	; () banked
 14854  011EF6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14855  011EF8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14856  011EFC  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14857                           
 14858                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14859  011F00  0E08               	movlw	8
 14860  011F02  0100               	movlb	0	; () banked
 14861  011F04  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14862  011F06  0100               	movlb	0	; () banked
 14863  011F08  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14864  011F0A  0E00               	movlw	0
 14865  011F0C  0100               	movlb	0	; () banked
 14866  011F0E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14867  011F10  0100               	movlb	0	; () banked
 14868  011F12  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14869  011F14  0E04               	movlw	4
 14870  011F16  0100               	movlb	0	; () banked
 14871  011F18  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14872  011F1A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14873  011F1E  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14874                           
 14875                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14876  011F22  0E08               	movlw	8
 14877  011F24  0100               	movlb	0	; () banked
 14878  011F26  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14879  011F28  0100               	movlb	0	; () banked
 14880  011F2A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14881  011F2C  0E00               	movlw	0
 14882  011F2E  0100               	movlb	0	; () banked
 14883  011F30  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14884  011F32  0100               	movlb	0	; () banked
 14885  011F34  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14886  011F36  0E05               	movlw	5
 14887  011F38  0100               	movlb	0	; () banked
 14888  011F3A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14889  011F3C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14890  011F40  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14891                           
 14892                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 14893  011F44  0E08               	movlw	8
 14894  011F46  0100               	movlb	0	; () banked
 14895  011F48  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14896  011F4A  0100               	movlb	0	; () banked
 14897  011F4C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14898  011F4E  0E00               	movlw	0
 14899  011F50  0100               	movlb	0	; () banked
 14900  011F52  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14901  011F54  0100               	movlb	0	; () banked
 14902  011F56  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14903  011F58  0E06               	movlw	6
 14904  011F5A  0100               	movlb	0	; () banked
 14905  011F5C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14906  011F5E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14907  011F62  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14908                           
 14909                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 14910  011F66  0E08               	movlw	8
 14911  011F68  0100               	movlb	0	; () banked
 14912  011F6A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14913  011F6C  0100               	movlb	0	; () banked
 14914  011F6E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14915  011F70  0E00               	movlw	0
 14916  011F72  0100               	movlb	0	; () banked
 14917  011F74  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14918  011F76  0100               	movlb	0	; () banked
 14919  011F78  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14920  011F7A  0E07               	movlw	7
 14921  011F7C  0100               	movlb	0	; () banked
 14922  011F7E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14923  011F80  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14924  011F84  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 14925  011F88  0012               	return	
 14926  011F8A                     __end_of_Port_SetType:
 14927                           	opt stack 0
 14928                           tblptru	equ	0xFF8
 14929                           tblptrh	equ	0xFF7
 14930                           tblptrl	equ	0xFF6
 14931                           tablat	equ	0xFF5
 14932                           prodh	equ	0xFF4
 14933                           prodl	equ	0xFF3
 14934                           intcon	equ	0xFF2
 14935                           postinc0	equ	0xFEE
 14936                           wreg	equ	0xFE8
 14937                           indf1	equ	0xFE7
 14938                           postdec1	equ	0xFE5
 14939                           fsr1h	equ	0xFE2
 14940                           fsr1l	equ	0xFE1
 14941                           indf2	equ	0xFDF
 14942                           postinc2	equ	0xFDE
 14943                           postdec2	equ	0xFDD
 14944                           fsr2h	equ	0xFDA
 14945                           fsr2l	equ	0xFD9
 14946                           status	equ	0xFD8
 14947                           
 14948 ;; *************** function _Port_CheckPortType *****************
 14949 ;; Defined at:
 14950 ;;		line 138 in file "Library/Port.c"
 14951 ;; Parameters:    Size  Location     Type
 14952 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14953 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14954 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14955 ;;  pDrive          1   56[BANK0 ] enum E6469
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;  Output          1   57[BANK0 ] enum E6475
 14958 ;; Return value:  Size  Location     Type
 14959 ;;                  1    wreg      enum E6475
 14960 ;; Registers used:
 14961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14967 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14970 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14971 ;;Total ram usage:        4 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:   13
 14974 ;; This function calls:
 14975 ;;		_Port_CheckQuadType
 14976 ;; This function is called by:
 14977 ;;		_Port_SetType
 14978 ;; This function uses a non-reentrant model
 14979 ;;
 14980                           
 14981                           	psect	text61
 14982  015C18                     __ptext61:
 14983                           	opt stack 0
 14984  015C18                     _Port_CheckPortType:
 14985                           	opt stack 14
 14986                           
 14987                           ;Port.c: 140: ePinError Output = ePinErrorState;
 14988                           
 14989                           ;incstack = 0
 14990  015C18  0E05               	movlw	5
 14991  015C1A  0100               	movlb	0	; () banked
 14992  015C1C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 14996  015C1E  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14997  015C22  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14998  015C26  0E00               	movlw	0
 14999  015C28  0100               	movlb	0	; () banked
 15000  015C2A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15001  015C2C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15002  015C30  ECC3  F0AC         	call	_Port_CheckQuadType	;wreg free
 15003  015C34  0100               	movlb	0	; () banked
 15004  015C36  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 15005  015C38  0100               	movlb	0	; () banked
 15006  015C3A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 15007  015C3C  A4D8               	btfss	status,2,c
 15008  015C3E  D00D               	goto	l397
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15012  015C40  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15013  015C44  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15014  015C48  0E01               	movlw	1
 15015  015C4A  0100               	movlb	0	; () banked
 15016  015C4C  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15017  015C4E  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15018  015C52  ECC3  F0AC         	call	_Port_CheckQuadType	;wreg free
 15019  015C56  0100               	movlb	0	; () banked
 15020  015C58  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 15021  015C5A                     l397:
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;Port.c: 146: return Output;
 15025                           
 15026                           ; BSR set to: 0
 15027  015C5A  0100               	movlb	0	; () banked
 15028  015C5C  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 15029  015C5E  0012               	return	
 15030  015C60                     __end_of_Port_CheckPortType:
 15031                           	opt stack 0
 15032                           tblptru	equ	0xFF8
 15033                           tblptrh	equ	0xFF7
 15034                           tblptrl	equ	0xFF6
 15035                           tablat	equ	0xFF5
 15036                           prodh	equ	0xFF4
 15037                           prodl	equ	0xFF3
 15038                           intcon	equ	0xFF2
 15039                           postinc0	equ	0xFEE
 15040                           wreg	equ	0xFE8
 15041                           indf1	equ	0xFE7
 15042                           postdec1	equ	0xFE5
 15043                           fsr1h	equ	0xFE2
 15044                           fsr1l	equ	0xFE1
 15045                           indf2	equ	0xFDF
 15046                           postinc2	equ	0xFDE
 15047                           postdec2	equ	0xFDD
 15048                           fsr2h	equ	0xFDA
 15049                           fsr2l	equ	0xFD9
 15050                           status	equ	0xFD8
 15051                           
 15052 ;; *************** function _Port_Set *****************
 15053 ;; Defined at:
 15054 ;;		line 570 in file "Library/Port.c"
 15055 ;; Parameters:    Size  Location     Type
 15056 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15057 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15058 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15059 ;;  pValue          1   17[BANK0 ] unsigned char 
 15060 ;; Auto vars:     Size  Location     Type
 15061 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15062 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15063 ;;  Type            1   38[BANK0 ] enum E6795
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      void 
 15066 ;; Registers used:
 15067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15068 ;; Tracked objects:
 15069 ;;		On entry : 0/0
 15070 ;;		On exit  : 0/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15073 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15074 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15075 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15076 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;Total ram usage:       24 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; Hardware stack levels required when called:   10
 15080 ;; This function calls:
 15081 ;;		_Byte_SetByte
 15082 ;;		_Word_GetPair
 15083 ;; This function is called by:
 15084 ;;		_Port_Init
 15085 ;;		_Port_Toggle
 15086 ;; This function uses a non-reentrant model
 15087 ;;
 15088                           
 15089                           	psect	text62
 15090  0114CC                     __ptext62:
 15091                           	opt stack 0
 15092  0114CC                     _Port_Set:
 15093                           	opt stack 17
 15094                           
 15095                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;incstack = 0
 15099  0114CC  0E08               	movlw	8
 15100  0114CE  0100               	movlb	0	; () banked
 15101  0114D0  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15102  0114D2  0100               	movlb	0	; () banked
 15103  0114D4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15104  0114D6  0E00               	movlw	0
 15105  0114D8  0100               	movlb	0	; () banked
 15106  0114DA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15107  0114DC  0100               	movlb	0	; () banked
 15108  0114DE  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15109  0114E0  0E00               	movlw	0
 15110  0114E2  0100               	movlb	0	; () banked
 15111  0114E4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15112  0114E6  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15113  0114EA  0100               	movlb	0	; () banked
 15114  0114EC  6F86               	movwf	Port_Set@Type& (0+255),b
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15118  0114EE  0100               	movlb	0	; () banked
 15119  0114F0  5186               	movf	Port_Set@Type& (0+255),w,b
 15120  0114F2  0100               	movlb	0	; () banked
 15121  0114F4  6F72               	movwf	??_Port_Set& (0+255),b
 15122  0114F6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15123  0114F8  0E0E               	movlw	14
 15124  0114FA                     u9605:
 15125  0114FA  90D8               	bcf	status,0,c
 15126  0114FC  0100               	movlb	0	; () banked
 15127  0114FE  3772               	rlcf	??_Port_Set& (0+255),f,b
 15128  011500  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15129  011502  2EE8               	decfsz	wreg,f,c
 15130  011504  D7FA               	goto	u9605
 15131  011506  0100               	movlb	0	; () banked
 15132  011508  5186               	movf	Port_Set@Type& (0+255),w,b
 15133  01150A  0100               	movlb	0	; () banked
 15134  01150C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 15135  01150E  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 15136  011510  0E0C               	movlw	12
 15137  011512                     u9615:
 15138  011512  90D8               	bcf	status,0,c
 15139  011514  0100               	movlb	0	; () banked
 15140  011516  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15141  011518  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15142  01151A  2EE8               	decfsz	wreg,f,c
 15143  01151C  D7FA               	goto	u9615
 15144  01151E  0100               	movlb	0	; () banked
 15145  011520  5186               	movf	Port_Set@Type& (0+255),w,b
 15146  011522  0100               	movlb	0	; () banked
 15147  011524  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 15148  011526  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 15149  011528  0E0A               	movlw	10
 15150  01152A                     u9625:
 15151  01152A  90D8               	bcf	status,0,c
 15152  01152C  0100               	movlb	0	; () banked
 15153  01152E  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15154  011530  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15155  011532  2EE8               	decfsz	wreg,f,c
 15156  011534  D7FA               	goto	u9625
 15157  011536  0100               	movlb	0	; () banked
 15158  011538  5186               	movf	Port_Set@Type& (0+255),w,b
 15159  01153A  0100               	movlb	0	; () banked
 15160  01153C  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 15161  01153E  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 15162  011540  0100               	movlb	0	; () banked
 15163  011542  5186               	movf	Port_Set@Type& (0+255),w,b
 15164  011544  0100               	movlb	0	; () banked
 15165  011546  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 15166  011548  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 15167  01154A  0E06               	movlw	6
 15168  01154C                     u9635:
 15169  01154C  90D8               	bcf	status,0,c
 15170  01154E  0100               	movlb	0	; () banked
 15171  011550  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15172  011552  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15173  011554  2EE8               	decfsz	wreg,f,c
 15174  011556  D7FA               	goto	u9635
 15175  011558  0100               	movlb	0	; () banked
 15176  01155A  5186               	movf	Port_Set@Type& (0+255),w,b
 15177  01155C  0100               	movlb	0	; () banked
 15178  01155E  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 15179  011560  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 15180  011562  0100               	movlb	0	; () banked
 15181  011564  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 15182  011566  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 15183  011568  0EF0               	movlw	240
 15184  01156A  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 15185  01156C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 15186  01156E  0B0F               	andlw	15
 15187  011570  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15188  011572  0EF0               	movlw	240
 15189  011574  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 15190  011576  0100               	movlb	0	; () banked
 15191  011578  5186               	movf	Port_Set@Type& (0+255),w,b
 15192  01157A  0100               	movlb	0	; () banked
 15193  01157C  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 15194  01157E  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 15195  011580  0100               	movlb	0	; () banked
 15196  011582  90D8               	bcf	status,0,c
 15197  011584  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15198  011586  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15199  011588  0100               	movlb	0	; () banked
 15200  01158A  90D8               	bcf	status,0,c
 15201  01158C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15202  01158E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15203  011590  0100               	movlb	0	; () banked
 15204  011592  5186               	movf	Port_Set@Type& (0+255),w,b
 15205  011594  0100               	movlb	0	; () banked
 15206  011596  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 15207  011598  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 15208  01159A  0100               	movlb	0	; () banked
 15209  01159C  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 15210  01159E  0100               	movlb	0	; () banked
 15211  0115A0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15212  0115A2  0100               	movlb	0	; () banked
 15213  0115A4  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 15214  0115A6  0100               	movlb	0	; () banked
 15215  0115A8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15216  0115AA  0100               	movlb	0	; () banked
 15217  0115AC  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 15218  0115AE  0100               	movlb	0	; () banked
 15219  0115B0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15220  0115B2  0100               	movlb	0	; () banked
 15221  0115B4  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 15222  0115B6  0100               	movlb	0	; () banked
 15223  0115B8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15224  0115BA  0100               	movlb	0	; () banked
 15225  0115BC  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 15226  0115BE  0100               	movlb	0	; () banked
 15227  0115C0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15228  0115C2  0100               	movlb	0	; () banked
 15229  0115C4  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 15230  0115C6  0100               	movlb	0	; () banked
 15231  0115C8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15232  0115CA  0100               	movlb	0	; () banked
 15233  0115CC  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 15234  0115CE  0100               	movlb	0	; () banked
 15235  0115D0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15236  0115D2  0100               	movlb	0	; () banked
 15237  0115D4  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 15238  0115D6  0100               	movlb	0	; () banked
 15239  0115D8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15240  0115DA  0100               	movlb	0	; () banked
 15241  0115DC  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 15242  0115DE  0100               	movlb	0	; () banked
 15243  0115E0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15244  0115E2  0100               	movlb	0	; () banked
 15245  0115E4  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 15246  0115E6  0100               	movlb	0	; () banked
 15247  0115E8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15248  0115EA  0100               	movlb	0	; () banked
 15249  0115EC  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 15250  0115EE  0100               	movlb	0	; () banked
 15251  0115F0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15252  0115F2  0100               	movlb	0	; () banked
 15253  0115F4  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 15254  0115F6  0100               	movlb	0	; () banked
 15255  0115F8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15256  0115FA  0100               	movlb	0	; () banked
 15257  0115FC  5172               	movf	??_Port_Set& (0+255),w,b
 15258  0115FE  0100               	movlb	0	; () banked
 15259  011600  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15260  011602  0100               	movlb	0	; () banked
 15261  011604  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 15262  011606  0100               	movlb	0	; () banked
 15263  011608  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15264  01160A  0100               	movlb	0	; () banked
 15265  01160C  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15266  01160E  0100               	movlb	0	; () banked
 15267  011610  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15268                           
 15269                           ; BSR set to: 0
 15270                           ;Port.c: 574: UINT16 TypeActual = Type;
 15271  011612  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 15272  011616  0100               	movlb	0	; () banked
 15273  011618  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15274                           
 15275                           ; BSR set to: 0
 15276                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15277  01161A  0E08               	movlw	8
 15278  01161C  0100               	movlb	0	; () banked
 15279  01161E  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15280  011620  0100               	movlb	0	; () banked
 15281  011622  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15282  011624  0E00               	movlw	0
 15283  011626  0100               	movlb	0	; () banked
 15284  011628  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15285  01162A  0100               	movlb	0	; () banked
 15286  01162C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15287  01162E  0E01               	movlw	1
 15288  011630  0100               	movlb	0	; () banked
 15289  011632  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15290  011634  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15291  011638  0100               	movlb	0	; () banked
 15292  01163A  6F72               	movwf	??_Port_Set& (0+255),b
 15293  01163C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15294  01163E  0100               	movlb	0	; () banked
 15295  011640  90D8               	bcf	status,0,c
 15296  011642  3772               	rlcf	??_Port_Set& (0+255),f,b
 15297  011644  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15298  011646  0100               	movlb	0	; () banked
 15299  011648  90D8               	bcf	status,0,c
 15300  01164A  3772               	rlcf	??_Port_Set& (0+255),f,b
 15301  01164C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15302  01164E  0100               	movlb	0	; () banked
 15303  011650  5172               	movf	??_Port_Set& (0+255),w,b
 15304  011652  0100               	movlb	0	; () banked
 15305  011654  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15306  011656  0100               	movlb	0	; () banked
 15307  011658  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15308  01165A  0100               	movlb	0	; () banked
 15309  01165C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15313  01165E  0E08               	movlw	8
 15314  011660  0100               	movlb	0	; () banked
 15315  011662  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15316  011664  0100               	movlb	0	; () banked
 15317  011666  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15318  011668  0E00               	movlw	0
 15319  01166A  0100               	movlb	0	; () banked
 15320  01166C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15321  01166E  0100               	movlb	0	; () banked
 15322  011670  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15323  011672  0E02               	movlw	2
 15324  011674  0100               	movlb	0	; () banked
 15325  011676  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15326  011678  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15327  01167C  0100               	movlb	0	; () banked
 15328  01167E  6F72               	movwf	??_Port_Set& (0+255),b
 15329  011680  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15330  011682  0100               	movlb	0	; () banked
 15331  011684  3B72               	swapf	??_Port_Set& (0+255),f,b
 15332  011686  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 15333  011688  0EF0               	movlw	240
 15334  01168A  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 15335  01168C  5172               	movf	??_Port_Set& (0+255),w,b
 15336  01168E  0B0F               	andlw	15
 15337  011690  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15338  011692  0EF0               	movlw	240
 15339  011694  1772               	andwf	??_Port_Set& (0+255),f,b
 15340  011696  0100               	movlb	0	; () banked
 15341  011698  5172               	movf	??_Port_Set& (0+255),w,b
 15342  01169A  0100               	movlb	0	; () banked
 15343  01169C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15344  01169E  0100               	movlb	0	; () banked
 15345  0116A0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15346  0116A2  0100               	movlb	0	; () banked
 15347  0116A4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15351  0116A6  0E08               	movlw	8
 15352  0116A8  0100               	movlb	0	; () banked
 15353  0116AA  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15354  0116AC  0100               	movlb	0	; () banked
 15355  0116AE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15356  0116B0  0E00               	movlw	0
 15357  0116B2  0100               	movlb	0	; () banked
 15358  0116B4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15359  0116B6  0100               	movlb	0	; () banked
 15360  0116B8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15361  0116BA  0E03               	movlw	3
 15362  0116BC  0100               	movlb	0	; () banked
 15363  0116BE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15364  0116C0  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15365  0116C4  0100               	movlb	0	; () banked
 15366  0116C6  6F72               	movwf	??_Port_Set& (0+255),b
 15367  0116C8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15368  0116CA  0E06               	movlw	6
 15369  0116CC                     u9645:
 15370  0116CC  90D8               	bcf	status,0,c
 15371  0116CE  0100               	movlb	0	; () banked
 15372  0116D0  3772               	rlcf	??_Port_Set& (0+255),f,b
 15373  0116D2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15374  0116D4  2EE8               	decfsz	wreg,f,c
 15375  0116D6  D7FA               	goto	u9645
 15376  0116D8  0100               	movlb	0	; () banked
 15377  0116DA  5172               	movf	??_Port_Set& (0+255),w,b
 15378  0116DC  0100               	movlb	0	; () banked
 15379  0116DE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15380  0116E0  0100               	movlb	0	; () banked
 15381  0116E2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15382  0116E4  0100               	movlb	0	; () banked
 15383  0116E6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15384                           
 15385                           ; BSR set to: 0
 15386                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15387  0116E8  0E08               	movlw	8
 15388  0116EA  0100               	movlb	0	; () banked
 15389  0116EC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15390  0116EE  0100               	movlb	0	; () banked
 15391  0116F0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15392  0116F2  0E00               	movlw	0
 15393  0116F4  0100               	movlb	0	; () banked
 15394  0116F6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15395  0116F8  0100               	movlb	0	; () banked
 15396  0116FA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15397  0116FC  0E04               	movlw	4
 15398  0116FE  0100               	movlb	0	; () banked
 15399  011700  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15400  011702  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15401  011706  0100               	movlb	0	; () banked
 15402  011708  6F72               	movwf	??_Port_Set& (0+255),b
 15403  01170A  0100               	movlb	0	; () banked
 15404  01170C  5172               	movf	??_Port_Set& (0+255),w,b
 15405  01170E  0100               	movlb	0	; () banked
 15406  011710  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 15407  011712  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15408  011714  0100               	movlb	0	; () banked
 15409  011716  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15410  011718  0100               	movlb	0	; () banked
 15411  01171A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15412  01171C  0100               	movlb	0	; () banked
 15413  01171E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 15414  011720  0100               	movlb	0	; () banked
 15415  011722  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15416                           
 15417                           ; BSR set to: 0
 15418                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15419  011724  0E08               	movlw	8
 15420  011726  0100               	movlb	0	; () banked
 15421  011728  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15422  01172A  0100               	movlb	0	; () banked
 15423  01172C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15424  01172E  0E00               	movlw	0
 15425  011730  0100               	movlb	0	; () banked
 15426  011732  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15427  011734  0100               	movlb	0	; () banked
 15428  011736  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15429  011738  0E05               	movlw	5
 15430  01173A  0100               	movlb	0	; () banked
 15431  01173C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15432  01173E  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15433  011742  0100               	movlb	0	; () banked
 15434  011744  6F72               	movwf	??_Port_Set& (0+255),b
 15435  011746  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15436  011748  0E0A               	movlw	10
 15437  01174A                     u9655:
 15438  01174A  90D8               	bcf	status,0,c
 15439  01174C  0100               	movlb	0	; () banked
 15440  01174E  3772               	rlcf	??_Port_Set& (0+255),f,b
 15441  011750  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15442  011752  2EE8               	decfsz	wreg,f,c
 15443  011754  D7FA               	goto	u9655
 15444  011756  0100               	movlb	0	; () banked
 15445  011758  5172               	movf	??_Port_Set& (0+255),w,b
 15446  01175A  0100               	movlb	0	; () banked
 15447  01175C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15448  01175E  0100               	movlb	0	; () banked
 15449  011760  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15450  011762  0100               	movlb	0	; () banked
 15451  011764  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15455  011766  0E08               	movlw	8
 15456  011768  0100               	movlb	0	; () banked
 15457  01176A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15458  01176C  0100               	movlb	0	; () banked
 15459  01176E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15460  011770  0E00               	movlw	0
 15461  011772  0100               	movlb	0	; () banked
 15462  011774  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15463  011776  0100               	movlb	0	; () banked
 15464  011778  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15465  01177A  0E06               	movlw	6
 15466  01177C  0100               	movlb	0	; () banked
 15467  01177E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15468  011780  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15469  011784  0100               	movlb	0	; () banked
 15470  011786  6F72               	movwf	??_Port_Set& (0+255),b
 15471  011788  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15472  01178A  0E0C               	movlw	12
 15473  01178C                     u9665:
 15474  01178C  90D8               	bcf	status,0,c
 15475  01178E  0100               	movlb	0	; () banked
 15476  011790  3772               	rlcf	??_Port_Set& (0+255),f,b
 15477  011792  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15478  011794  2EE8               	decfsz	wreg,f,c
 15479  011796  D7FA               	goto	u9665
 15480  011798  0100               	movlb	0	; () banked
 15481  01179A  5172               	movf	??_Port_Set& (0+255),w,b
 15482  01179C  0100               	movlb	0	; () banked
 15483  01179E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15484  0117A0  0100               	movlb	0	; () banked
 15485  0117A2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15486  0117A4  0100               	movlb	0	; () banked
 15487  0117A6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15491  0117A8  0E08               	movlw	8
 15492  0117AA  0100               	movlb	0	; () banked
 15493  0117AC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15494  0117AE  0100               	movlb	0	; () banked
 15495  0117B0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15496  0117B2  0E00               	movlw	0
 15497  0117B4  0100               	movlb	0	; () banked
 15498  0117B6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15499  0117B8  0100               	movlb	0	; () banked
 15500  0117BA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15501  0117BC  0E07               	movlw	7
 15502  0117BE  0100               	movlb	0	; () banked
 15503  0117C0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15504  0117C2  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 15505  0117C6  0100               	movlb	0	; () banked
 15506  0117C8  6F72               	movwf	??_Port_Set& (0+255),b
 15507  0117CA  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15508  0117CC  0E0E               	movlw	14
 15509  0117CE                     u9675:
 15510  0117CE  90D8               	bcf	status,0,c
 15511  0117D0  0100               	movlb	0	; () banked
 15512  0117D2  3772               	rlcf	??_Port_Set& (0+255),f,b
 15513  0117D4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15514  0117D6  2EE8               	decfsz	wreg,f,c
 15515  0117D8  D7FA               	goto	u9675
 15516  0117DA  0100               	movlb	0	; () banked
 15517  0117DC  5172               	movf	??_Port_Set& (0+255),w,b
 15518  0117DE  0100               	movlb	0	; () banked
 15519  0117E0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15520  0117E2  0100               	movlb	0	; () banked
 15521  0117E4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15522  0117E6  0100               	movlb	0	; () banked
 15523  0117E8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15524                           
 15525                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15526  0117EA  0100               	movlb	0	; () banked
 15527  0117EC  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 15528  0117EE  0100               	movlb	0	; () banked
 15529  0117F0  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15530  0117F2  E148               	bnz	l528
 15531  0117F4  0100               	movlb	0	; () banked
 15532  0117F6  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15533  0117F8  0100               	movlb	0	; () banked
 15534  0117FA  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15535  0117FC  A4D8               	btfss	status,2,c
 15536  0117FE  0012               	return	
 15537  011800  D032               	goto	l526
 15538  011802                     
 15539                           ; BSR set to: 0
 15540                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15541                           
 15542                           ; BSR set to: 0
 15543  011802  0100               	movlb	0	; () banked
 15544  011804  EE20 F002          	lfsr	2,2
 15545  011808  516F               	movf	Port_Set@pInput& (0+255),w,b
 15546  01180A  26D9               	addwf	fsr2l,f,c
 15547  01180C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15548  01180E  22DA               	addwfc	fsr2h,f,c
 15549  011810  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15550  011814  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15551  011818  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15552  01181C  EC07  F0B3         	call	_Byte_SetByte	;wreg free
 15553                           
 15554                           ;Port.c: 594: break;
 15555  011820  0012               	return	
 15556  011822                     
 15557                           ;Port.c: 597: pValue = ~pValue;
 15558  011822  0100               	movlb	0	; () banked
 15559  011824  1F71               	comf	Port_Set@pValue& (0+255),f,b
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15563  011826  0100               	movlb	0	; () banked
 15564  011828  EE20 F002          	lfsr	2,2
 15565  01182C  516F               	movf	Port_Set@pInput& (0+255),w,b
 15566  01182E  26D9               	addwf	fsr2l,f,c
 15567  011830  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15568  011832  22DA               	addwfc	fsr2h,f,c
 15569  011834  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15570  011838  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15571  01183C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15572  011840  EC07  F0B3         	call	_Byte_SetByte	;wreg free
 15573                           
 15574                           ;Port.c: 599: break;
 15575  011844  0012               	return	
 15576  011846                     
 15577                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15578  011846  0100               	movlb	0	; () banked
 15579  011848  EE20 F004          	lfsr	2,4
 15580  01184C  516F               	movf	Port_Set@pInput& (0+255),w,b
 15581  01184E  26D9               	addwf	fsr2l,f,c
 15582  011850  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15583  011852  22DA               	addwfc	fsr2h,f,c
 15584  011854  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15585  011858  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15586  01185C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15587  011860  EC07  F0B3         	call	_Byte_SetByte	;wreg free
 15588                           
 15589                           ;Port.c: 606: }
 15590                           
 15591                           ;Port.c: 605: break;
 15592                           
 15593                           ;Port.c: 604: default:
 15594                           
 15595                           ;Port.c: 603: break;
 15596  011864  0012               	return	
 15597  011866                     l526:
 15598  011866  0100               	movlb	0	; () banked
 15599  011868  5186               	movf	Port_Set@Type& (0+255),w,b
 15600                           
 15601                           ; Switch size 1, requested type "space"
 15602                           ; Number of cases is 4, Range of values is 0 to 3
 15603                           ; switch strategies available:
 15604                           ; Name         Instructions Cycles
 15605                           ; simple_byte           13     7 (average)
 15606                           ;	Chosen strategy is simple_byte
 15607  01186A  0A00               	xorlw	0	; case 0
 15608  01186C  B4D8               	btfsc	status,2,c
 15609  01186E  0012               	return	
 15610  011870  0A01               	xorlw	1	; case 1
 15611  011872  B4D8               	btfsc	status,2,c
 15612  011874  D7C6               	goto	l529
 15613  011876  0A03               	xorlw	3	; case 2
 15614  011878  B4D8               	btfsc	status,2,c
 15615  01187A  D7D3               	goto	l531
 15616  01187C  0A01               	xorlw	1	; case 3
 15617  01187E  A4D8               	btfss	status,2,c
 15618                           
 15619                           ; BSR set to: 0
 15620                           
 15621                           ; BSR set to: 0
 15622                           ;Port.c: 607: }
 15623  011880  0012               	return	
 15624  011882  D7E1               	goto	l532
 15625  011884                     l528:
 15626  011884  0012               	return		;funcret
 15627  011886                     __end_of_Port_Set:
 15628                           	opt stack 0
 15629                           tblptru	equ	0xFF8
 15630                           tblptrh	equ	0xFF7
 15631                           tblptrl	equ	0xFF6
 15632                           tablat	equ	0xFF5
 15633                           prodh	equ	0xFF4
 15634                           prodl	equ	0xFF3
 15635                           intcon	equ	0xFF2
 15636                           postinc0	equ	0xFEE
 15637                           wreg	equ	0xFE8
 15638                           indf1	equ	0xFE7
 15639                           postdec1	equ	0xFE5
 15640                           fsr1h	equ	0xFE2
 15641                           fsr1l	equ	0xFE1
 15642                           indf2	equ	0xFDF
 15643                           postinc2	equ	0xFDE
 15644                           postdec2	equ	0xFDD
 15645                           fsr2h	equ	0xFDA
 15646                           fsr2l	equ	0xFD9
 15647                           status	equ	0xFD8
 15648                           
 15649 ;; *************** function _Byte_SetByte *****************
 15650 ;; Defined at:
 15651 ;;		line 110 in file "Library/Types.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15654 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15655 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15656 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15657 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15658 ;;		 -> NULL(0), 
 15659 ;;  pValue          1    2[BANK0 ] unsigned char 
 15660 ;; Auto vars:     Size  Location     Type
 15661 ;;		None
 15662 ;; Return value:  Size  Location     Type
 15663 ;;                  1    wreg      void 
 15664 ;; Registers used:
 15665 ;;		fsr2l, fsr2h
 15666 ;; Tracked objects:
 15667 ;;		On entry : 0/0
 15668 ;;		On exit  : 0/0
 15669 ;;		Unchanged: 0/0
 15670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15675 ;;Total ram usage:        3 bytes
 15676 ;; Hardware stack levels used:    1
 15677 ;; Hardware stack levels required when called:    7
 15678 ;; This function calls:
 15679 ;;		Nothing
 15680 ;; This function is called by:
 15681 ;;		_Port_Set
 15682 ;;		_I2C_Init
 15683 ;; This function uses a non-reentrant model
 15684 ;;
 15685                           
 15686                           	psect	text63
 15687  01660E                     __ptext63:
 15688                           	opt stack 0
 15689  01660E                     _Byte_SetByte:
 15690                           	opt stack 19
 15691                           
 15692                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15693                           
 15694                           ;incstack = 0
 15695  01660E  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15696  016612  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15697  016616  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 15698  01661A  0012               	return		;funcret
 15699  01661C                     __end_of_Byte_SetByte:
 15700                           	opt stack 0
 15701                           tblptru	equ	0xFF8
 15702                           tblptrh	equ	0xFF7
 15703                           tblptrl	equ	0xFF6
 15704                           tablat	equ	0xFF5
 15705                           prodh	equ	0xFF4
 15706                           prodl	equ	0xFF3
 15707                           intcon	equ	0xFF2
 15708                           postinc0	equ	0xFEE
 15709                           wreg	equ	0xFE8
 15710                           indf1	equ	0xFE7
 15711                           postdec1	equ	0xFE5
 15712                           fsr1h	equ	0xFE2
 15713                           fsr1l	equ	0xFE1
 15714                           indf2	equ	0xFDF
 15715                           postinc2	equ	0xFDE
 15716                           postdec2	equ	0xFDD
 15717                           fsr2h	equ	0xFDA
 15718                           fsr2l	equ	0xFD9
 15719                           status	equ	0xFD8
 15720                           
 15721 ;; *************** function _GetPortTRIS *****************
 15722 ;; Defined at:
 15723 ;;		line 67 in file "Library/Port.c"
 15724 ;; Parameters:    Size  Location     Type
 15725 ;;  pInput          1    wreg     enum E6786
 15726 ;; Auto vars:     Size  Location     Type
 15727 ;;  pInput          1    2[BANK0 ] enum E6786
 15728 ;; Return value:  Size  Location     Type
 15729 ;;                  2    0[BANK0 ] PTR struct Byte
 15730 ;; Registers used:
 15731 ;;		wreg, status,2, status,0
 15732 ;; Tracked objects:
 15733 ;;		On entry : 0/0
 15734 ;;		On exit  : 0/0
 15735 ;;		Unchanged: 0/0
 15736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15737 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15740 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15741 ;;Total ram usage:        3 bytes
 15742 ;; Hardware stack levels used:    1
 15743 ;; Hardware stack levels required when called:    7
 15744 ;; This function calls:
 15745 ;;		Nothing
 15746 ;; This function is called by:
 15747 ;;		_Port_Init
 15748 ;; This function uses a non-reentrant model
 15749 ;;
 15750                           
 15751                           	psect	text64
 15752  01484A                     __ptext64:
 15753                           	opt stack 0
 15754  01484A                     _GetPortTRIS:
 15755                           	opt stack 20
 15756                           
 15757                           ;incstack = 0
 15758                           ;GetPortTRIS@pInput stored from wreg
 15759  01484A  0100               	movlb	0	; () banked
 15760  01484C  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 15761                           
 15762                           ;Port.c: 69: switch (pInput)
 15763  01484E  D038               	goto	l363
 15764  014850                     
 15765                           ;Port.c: 72: return (BytePtr)&TRISA;
 15766  014850  0E92               	movlw	146
 15767  014852  0100               	movlb	0	; () banked
 15768  014854  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15769  014856  0E0F               	movlw	15
 15770  014858  0100               	movlb	0	; () banked
 15771  01485A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15772                           
 15773                           ; BSR set to: 0
 15774  01485C  0012               	return	
 15775  01485E                     
 15776                           ; BSR set to: 0
 15777                           ;Port.c: 74: return (BytePtr)&TRISB;
 15778                           
 15779                           ; BSR set to: 0
 15780  01485E  0E93               	movlw	147
 15781  014860  0100               	movlb	0	; () banked
 15782  014862  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15783  014864  0E0F               	movlw	15
 15784  014866  0100               	movlb	0	; () banked
 15785  014868  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15786                           
 15787                           ; BSR set to: 0
 15788  01486A  0012               	return	
 15789  01486C                     
 15790                           ; BSR set to: 0
 15791                           ;Port.c: 76: return (BytePtr)&TRISC;
 15792                           
 15793                           ; BSR set to: 0
 15794  01486C  0E94               	movlw	148
 15795  01486E  0100               	movlb	0	; () banked
 15796  014870  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15797  014872  0E0F               	movlw	15
 15798  014874  0100               	movlb	0	; () banked
 15799  014876  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15800                           
 15801                           ; BSR set to: 0
 15802  014878  0012               	return	
 15803  01487A                     
 15804                           ; BSR set to: 0
 15805                           ;Port.c: 78: return (BytePtr)&TRISD;
 15806                           
 15807                           ; BSR set to: 0
 15808  01487A  0E95               	movlw	149
 15809  01487C  0100               	movlb	0	; () banked
 15810  01487E  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15811  014880  0E0F               	movlw	15
 15812  014882  0100               	movlb	0	; () banked
 15813  014884  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15814                           
 15815                           ; BSR set to: 0
 15816  014886  0012               	return	
 15817  014888                     
 15818                           ; BSR set to: 0
 15819                           ;Port.c: 80: return (BytePtr)&TRISE;
 15820                           
 15821                           ; BSR set to: 0
 15822  014888  0E96               	movlw	150
 15823  01488A  0100               	movlb	0	; () banked
 15824  01488C  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15825  01488E  0E0F               	movlw	15
 15826  014890  0100               	movlb	0	; () banked
 15827  014892  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15828                           
 15829                           ; BSR set to: 0
 15830  014894  0012               	return	
 15831  014896                     
 15832                           ; BSR set to: 0
 15833                           ;Port.c: 82: return (BytePtr)&TRISF;
 15834                           
 15835                           ; BSR set to: 0
 15836  014896  0E97               	movlw	151
 15837  014898  0100               	movlb	0	; () banked
 15838  01489A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15839  01489C  0E0F               	movlw	15
 15840  01489E  0100               	movlb	0	; () banked
 15841  0148A0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15842                           
 15843                           ; BSR set to: 0
 15844  0148A2  0012               	return	
 15845  0148A4                     
 15846                           ; BSR set to: 0
 15847                           ;Port.c: 84: return (BytePtr)&TRISG;
 15848                           
 15849                           ; BSR set to: 0
 15850  0148A4  0E98               	movlw	152
 15851  0148A6  0100               	movlb	0	; () banked
 15852  0148A8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15853  0148AA  0E0F               	movlw	15
 15854  0148AC  0100               	movlb	0	; () banked
 15855  0148AE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15856                           
 15857                           ; BSR set to: 0
 15858  0148B0  0012               	return	
 15859  0148B2                     
 15860                           ; BSR set to: 0
 15861                           ;Port.c: 86: return (void*)0;
 15862                           
 15863                           ; BSR set to: 0
 15864  0148B2  0E00               	movlw	0
 15865  0148B4  0100               	movlb	0	; () banked
 15866  0148B6  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15867  0148B8  0E00               	movlw	0
 15868  0148BA  0100               	movlb	0	; () banked
 15869  0148BC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15870                           
 15871                           ; BSR set to: 0
 15872                           ;Port.c: 87: }
 15873                           
 15874                           ; BSR set to: 0
 15875  0148BE  0012               	return	
 15876  0148C0                     l363:
 15877                           
 15878                           ; BSR set to: 0
 15879  0148C0  0100               	movlb	0	; () banked
 15880  0148C2  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 15881                           
 15882                           ; Switch size 1, requested type "space"
 15883                           ; Number of cases is 7, Range of values is 0 to 6
 15884                           ; switch strategies available:
 15885                           ; Name         Instructions Cycles
 15886                           ; simple_byte           22    12 (average)
 15887                           ;	Chosen strategy is simple_byte
 15888  0148C4  0A00               	xorlw	0	; case 0
 15889  0148C6  B4D8               	btfsc	status,2,c
 15890  0148C8  D7C3               	goto	l364
 15891  0148CA  0A01               	xorlw	1	; case 1
 15892  0148CC  B4D8               	btfsc	status,2,c
 15893  0148CE  D7C7               	goto	l366
 15894  0148D0  0A03               	xorlw	3	; case 2
 15895  0148D2  B4D8               	btfsc	status,2,c
 15896  0148D4  D7CB               	goto	l367
 15897  0148D6  0A01               	xorlw	1	; case 3
 15898  0148D8  B4D8               	btfsc	status,2,c
 15899  0148DA  D7CF               	goto	l368
 15900  0148DC  0A07               	xorlw	7	; case 4
 15901  0148DE  B4D8               	btfsc	status,2,c
 15902  0148E0  D7D3               	goto	l369
 15903  0148E2  0A01               	xorlw	1	; case 5
 15904  0148E4  B4D8               	btfsc	status,2,c
 15905  0148E6  D7D7               	goto	l370
 15906  0148E8  0A03               	xorlw	3	; case 6
 15907  0148EA  B4D8               	btfsc	status,2,c
 15908  0148EC  D7DB               	goto	l371
 15909  0148EE  D7E1               	goto	l372
 15910  0148F0                     __end_of_GetPortTRIS:
 15911                           	opt stack 0
 15912                           tblptru	equ	0xFF8
 15913                           tblptrh	equ	0xFF7
 15914                           tblptrl	equ	0xFF6
 15915                           tablat	equ	0xFF5
 15916                           prodh	equ	0xFF4
 15917                           prodl	equ	0xFF3
 15918                           intcon	equ	0xFF2
 15919                           postinc0	equ	0xFEE
 15920                           wreg	equ	0xFE8
 15921                           indf1	equ	0xFE7
 15922                           postdec1	equ	0xFE5
 15923                           fsr1h	equ	0xFE2
 15924                           fsr1l	equ	0xFE1
 15925                           indf2	equ	0xFDF
 15926                           postinc2	equ	0xFDE
 15927                           postdec2	equ	0xFDD
 15928                           fsr2h	equ	0xFDA
 15929                           fsr2l	equ	0xFD9
 15930                           status	equ	0xFD8
 15931                           
 15932 ;; *************** function _GetPortProperties *****************
 15933 ;; Defined at:
 15934 ;;		line 21 in file "Library/Port.c"
 15935 ;; Parameters:    Size  Location     Type
 15936 ;;  pInput          1    wreg     enum E6786
 15937 ;; Auto vars:     Size  Location     Type
 15938 ;;  pInput          1    2[BANK0 ] enum E6786
 15939 ;; Return value:  Size  Location     Type
 15940 ;;                  2    0[BANK0 ] PTR struct PortProperty
 15941 ;; Registers used:
 15942 ;;		wreg, status,2, status,0
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15952 ;;Total ram usage:        3 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; Hardware stack levels required when called:    7
 15955 ;; This function calls:
 15956 ;;		Nothing
 15957 ;; This function is called by:
 15958 ;;		_Port_Init
 15959 ;; This function uses a non-reentrant model
 15960 ;;
 15961                           
 15962                           	psect	text65
 15963  0148F0                     __ptext65:
 15964                           	opt stack 0
 15965  0148F0                     _GetPortProperties:
 15966                           	opt stack 20
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;incstack = 0
 15970                           ;GetPortProperties@pInput stored from wreg
 15971  0148F0  0100               	movlb	0	; () banked
 15972  0148F2  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 15973                           
 15974                           ;Port.c: 23: switch (pInput)
 15975  0148F4  D038               	goto	l337
 15976  0148F6                     
 15977                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 15978  0148F6  0E57               	movlw	low _PortA_Property
 15979  0148F8  0100               	movlb	0	; () banked
 15980  0148FA  6F60               	movwf	?_GetPortProperties& (0+255),b
 15981  0148FC  0EFF               	movlw	high _PortA_Property
 15982  0148FE  0100               	movlb	0	; () banked
 15983  014900  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15984                           
 15985                           ; BSR set to: 0
 15986  014902  0012               	return	
 15987  014904                     
 15988                           ; BSR set to: 0
 15989                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 15990                           
 15991                           ; BSR set to: 0
 15992  014904  0E55               	movlw	low _PortB_Property
 15993  014906  0100               	movlb	0	; () banked
 15994  014908  6F60               	movwf	?_GetPortProperties& (0+255),b
 15995  01490A  0EFF               	movlw	high _PortB_Property
 15996  01490C  0100               	movlb	0	; () banked
 15997  01490E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15998                           
 15999                           ; BSR set to: 0
 16000  014910  0012               	return	
 16001  014912                     
 16002                           ; BSR set to: 0
 16003                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16004                           
 16005                           ; BSR set to: 0
 16006  014912  0E53               	movlw	low _PortC_Property
 16007  014914  0100               	movlb	0	; () banked
 16008  014916  6F60               	movwf	?_GetPortProperties& (0+255),b
 16009  014918  0EFF               	movlw	high _PortC_Property
 16010  01491A  0100               	movlb	0	; () banked
 16011  01491C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16012                           
 16013                           ; BSR set to: 0
 16014  01491E  0012               	return	
 16015  014920                     
 16016                           ; BSR set to: 0
 16017                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16018                           
 16019                           ; BSR set to: 0
 16020  014920  0E51               	movlw	low _PortD_Property
 16021  014922  0100               	movlb	0	; () banked
 16022  014924  6F60               	movwf	?_GetPortProperties& (0+255),b
 16023  014926  0EFF               	movlw	high _PortD_Property
 16024  014928  0100               	movlb	0	; () banked
 16025  01492A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16026                           
 16027                           ; BSR set to: 0
 16028  01492C  0012               	return	
 16029  01492E                     
 16030                           ; BSR set to: 0
 16031                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16032                           
 16033                           ; BSR set to: 0
 16034  01492E  0E4F               	movlw	low _PortE_Property
 16035  014930  0100               	movlb	0	; () banked
 16036  014932  6F60               	movwf	?_GetPortProperties& (0+255),b
 16037  014934  0EFF               	movlw	high _PortE_Property
 16038  014936  0100               	movlb	0	; () banked
 16039  014938  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16040                           
 16041                           ; BSR set to: 0
 16042  01493A  0012               	return	
 16043  01493C                     
 16044                           ; BSR set to: 0
 16045                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16046                           
 16047                           ; BSR set to: 0
 16048  01493C  0E4D               	movlw	low _PortF_Property
 16049  01493E  0100               	movlb	0	; () banked
 16050  014940  6F60               	movwf	?_GetPortProperties& (0+255),b
 16051  014942  0EFF               	movlw	high _PortF_Property
 16052  014944  0100               	movlb	0	; () banked
 16053  014946  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16054                           
 16055                           ; BSR set to: 0
 16056  014948  0012               	return	
 16057  01494A                     
 16058                           ; BSR set to: 0
 16059                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16060                           
 16061                           ; BSR set to: 0
 16062  01494A  0E4B               	movlw	low _PortG_Property
 16063  01494C  0100               	movlb	0	; () banked
 16064  01494E  6F60               	movwf	?_GetPortProperties& (0+255),b
 16065  014950  0EFF               	movlw	high _PortG_Property
 16066  014952  0100               	movlb	0	; () banked
 16067  014954  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16068                           
 16069                           ; BSR set to: 0
 16070  014956  0012               	return	
 16071  014958                     
 16072                           ; BSR set to: 0
 16073                           ;Port.c: 40: return (void*)0;
 16074                           
 16075                           ; BSR set to: 0
 16076  014958  0E00               	movlw	0
 16077  01495A  0100               	movlb	0	; () banked
 16078  01495C  6F60               	movwf	?_GetPortProperties& (0+255),b
 16079  01495E  0E00               	movlw	0
 16080  014960  0100               	movlb	0	; () banked
 16081  014962  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16082                           
 16083                           ; BSR set to: 0
 16084                           ;Port.c: 41: }
 16085                           
 16086                           ; BSR set to: 0
 16087  014964  0012               	return	
 16088  014966                     l337:
 16089                           
 16090                           ; BSR set to: 0
 16091  014966  0100               	movlb	0	; () banked
 16092  014968  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 16093                           
 16094                           ; Switch size 1, requested type "space"
 16095                           ; Number of cases is 7, Range of values is 0 to 6
 16096                           ; switch strategies available:
 16097                           ; Name         Instructions Cycles
 16098                           ; simple_byte           22    12 (average)
 16099                           ;	Chosen strategy is simple_byte
 16100  01496A  0A00               	xorlw	0	; case 0
 16101  01496C  B4D8               	btfsc	status,2,c
 16102  01496E  D7C3               	goto	l338
 16103  014970  0A01               	xorlw	1	; case 1
 16104  014972  B4D8               	btfsc	status,2,c
 16105  014974  D7C7               	goto	l340
 16106  014976  0A03               	xorlw	3	; case 2
 16107  014978  B4D8               	btfsc	status,2,c
 16108  01497A  D7CB               	goto	l341
 16109  01497C  0A01               	xorlw	1	; case 3
 16110  01497E  B4D8               	btfsc	status,2,c
 16111  014980  D7CF               	goto	l342
 16112  014982  0A07               	xorlw	7	; case 4
 16113  014984  B4D8               	btfsc	status,2,c
 16114  014986  D7D3               	goto	l343
 16115  014988  0A01               	xorlw	1	; case 5
 16116  01498A  B4D8               	btfsc	status,2,c
 16117  01498C  D7D7               	goto	l344
 16118  01498E  0A03               	xorlw	3	; case 6
 16119  014990  B4D8               	btfsc	status,2,c
 16120  014992  D7DB               	goto	l345
 16121  014994  D7E1               	goto	l346
 16122  014996                     __end_of_GetPortProperties:
 16123                           	opt stack 0
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           postinc0	equ	0xFEE
 16132                           wreg	equ	0xFE8
 16133                           indf1	equ	0xFE7
 16134                           postdec1	equ	0xFE5
 16135                           fsr1h	equ	0xFE2
 16136                           fsr1l	equ	0xFE1
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           fsr2h	equ	0xFDA
 16141                           fsr2l	equ	0xFD9
 16142                           status	equ	0xFD8
 16143                           
 16144 ;; *************** function _GetPortPORT *****************
 16145 ;; Defined at:
 16146 ;;		line 44 in file "Library/Port.c"
 16147 ;; Parameters:    Size  Location     Type
 16148 ;;  pInput          1    wreg     enum E6786
 16149 ;; Auto vars:     Size  Location     Type
 16150 ;;  pInput          1    2[BANK0 ] enum E6786
 16151 ;; Return value:  Size  Location     Type
 16152 ;;                  2    0[BANK0 ] PTR struct Byte
 16153 ;; Registers used:
 16154 ;;		wreg, status,2, status,0
 16155 ;; Tracked objects:
 16156 ;;		On entry : 0/0
 16157 ;;		On exit  : 0/0
 16158 ;;		Unchanged: 0/0
 16159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16160 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;Total ram usage:        3 bytes
 16165 ;; Hardware stack levels used:    1
 16166 ;; Hardware stack levels required when called:    7
 16167 ;; This function calls:
 16168 ;;		Nothing
 16169 ;; This function is called by:
 16170 ;;		_Port_Init
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           	psect	text66
 16175  014996                     __ptext66:
 16176                           	opt stack 0
 16177  014996                     _GetPortPORT:
 16178                           	opt stack 20
 16179                           
 16180                           ; BSR set to: 0
 16181                           ;incstack = 0
 16182                           ;GetPortPORT@pInput stored from wreg
 16183  014996  0100               	movlb	0	; () banked
 16184  014998  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 16185                           
 16186                           ;Port.c: 46: switch (pInput)
 16187  01499A  D038               	goto	l350
 16188  01499C                     
 16189                           ;Port.c: 49: return (BytePtr)&PORTA;
 16190  01499C  0E80               	movlw	128
 16191  01499E  0100               	movlb	0	; () banked
 16192  0149A0  6F60               	movwf	?_GetPortPORT& (0+255),b
 16193  0149A2  0E0F               	movlw	15
 16194  0149A4  0100               	movlb	0	; () banked
 16195  0149A6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16196                           
 16197                           ; BSR set to: 0
 16198  0149A8  0012               	return	
 16199  0149AA                     
 16200                           ; BSR set to: 0
 16201                           ;Port.c: 51: return (BytePtr)&PORTB;
 16202                           
 16203                           ; BSR set to: 0
 16204  0149AA  0E81               	movlw	129
 16205  0149AC  0100               	movlb	0	; () banked
 16206  0149AE  6F60               	movwf	?_GetPortPORT& (0+255),b
 16207  0149B0  0E0F               	movlw	15
 16208  0149B2  0100               	movlb	0	; () banked
 16209  0149B4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16210                           
 16211                           ; BSR set to: 0
 16212  0149B6  0012               	return	
 16213  0149B8                     
 16214                           ; BSR set to: 0
 16215                           ;Port.c: 53: return (BytePtr)&PORTC;
 16216                           
 16217                           ; BSR set to: 0
 16218  0149B8  0E82               	movlw	130
 16219  0149BA  0100               	movlb	0	; () banked
 16220  0149BC  6F60               	movwf	?_GetPortPORT& (0+255),b
 16221  0149BE  0E0F               	movlw	15
 16222  0149C0  0100               	movlb	0	; () banked
 16223  0149C2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16224                           
 16225                           ; BSR set to: 0
 16226  0149C4  0012               	return	
 16227  0149C6                     
 16228                           ; BSR set to: 0
 16229                           ;Port.c: 55: return (BytePtr)&PORTD;
 16230                           
 16231                           ; BSR set to: 0
 16232  0149C6  0E83               	movlw	131
 16233  0149C8  0100               	movlb	0	; () banked
 16234  0149CA  6F60               	movwf	?_GetPortPORT& (0+255),b
 16235  0149CC  0E0F               	movlw	15
 16236  0149CE  0100               	movlb	0	; () banked
 16237  0149D0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16238                           
 16239                           ; BSR set to: 0
 16240  0149D2  0012               	return	
 16241  0149D4                     
 16242                           ; BSR set to: 0
 16243                           ;Port.c: 57: return (BytePtr)&PORTE;
 16244                           
 16245                           ; BSR set to: 0
 16246  0149D4  0E84               	movlw	132
 16247  0149D6  0100               	movlb	0	; () banked
 16248  0149D8  6F60               	movwf	?_GetPortPORT& (0+255),b
 16249  0149DA  0E0F               	movlw	15
 16250  0149DC  0100               	movlb	0	; () banked
 16251  0149DE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16252                           
 16253                           ; BSR set to: 0
 16254  0149E0  0012               	return	
 16255  0149E2                     
 16256                           ; BSR set to: 0
 16257                           ;Port.c: 59: return (BytePtr)&PORTF;
 16258                           
 16259                           ; BSR set to: 0
 16260  0149E2  0E85               	movlw	133
 16261  0149E4  0100               	movlb	0	; () banked
 16262  0149E6  6F60               	movwf	?_GetPortPORT& (0+255),b
 16263  0149E8  0E0F               	movlw	15
 16264  0149EA  0100               	movlb	0	; () banked
 16265  0149EC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16266                           
 16267                           ; BSR set to: 0
 16268  0149EE  0012               	return	
 16269  0149F0                     
 16270                           ; BSR set to: 0
 16271                           ;Port.c: 61: return (BytePtr)&PORTG;
 16272                           
 16273                           ; BSR set to: 0
 16274  0149F0  0E86               	movlw	134
 16275  0149F2  0100               	movlb	0	; () banked
 16276  0149F4  6F60               	movwf	?_GetPortPORT& (0+255),b
 16277  0149F6  0E0F               	movlw	15
 16278  0149F8  0100               	movlb	0	; () banked
 16279  0149FA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16280                           
 16281                           ; BSR set to: 0
 16282  0149FC  0012               	return	
 16283  0149FE                     
 16284                           ; BSR set to: 0
 16285                           ;Port.c: 63: return (void*)0;
 16286                           
 16287                           ; BSR set to: 0
 16288  0149FE  0E00               	movlw	0
 16289  014A00  0100               	movlb	0	; () banked
 16290  014A02  6F60               	movwf	?_GetPortPORT& (0+255),b
 16291  014A04  0E00               	movlw	0
 16292  014A06  0100               	movlb	0	; () banked
 16293  014A08  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16294                           
 16295                           ; BSR set to: 0
 16296                           ;Port.c: 64: }
 16297                           
 16298                           ; BSR set to: 0
 16299  014A0A  0012               	return	
 16300  014A0C                     l350:
 16301                           
 16302                           ; BSR set to: 0
 16303  014A0C  0100               	movlb	0	; () banked
 16304  014A0E  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 16305                           
 16306                           ; Switch size 1, requested type "space"
 16307                           ; Number of cases is 7, Range of values is 0 to 6
 16308                           ; switch strategies available:
 16309                           ; Name         Instructions Cycles
 16310                           ; simple_byte           22    12 (average)
 16311                           ;	Chosen strategy is simple_byte
 16312  014A10  0A00               	xorlw	0	; case 0
 16313  014A12  B4D8               	btfsc	status,2,c
 16314  014A14  D7C3               	goto	l351
 16315  014A16  0A01               	xorlw	1	; case 1
 16316  014A18  B4D8               	btfsc	status,2,c
 16317  014A1A  D7C7               	goto	l353
 16318  014A1C  0A03               	xorlw	3	; case 2
 16319  014A1E  B4D8               	btfsc	status,2,c
 16320  014A20  D7CB               	goto	l354
 16321  014A22  0A01               	xorlw	1	; case 3
 16322  014A24  B4D8               	btfsc	status,2,c
 16323  014A26  D7CF               	goto	l355
 16324  014A28  0A07               	xorlw	7	; case 4
 16325  014A2A  B4D8               	btfsc	status,2,c
 16326  014A2C  D7D3               	goto	l356
 16327  014A2E  0A01               	xorlw	1	; case 5
 16328  014A30  B4D8               	btfsc	status,2,c
 16329  014A32  D7D7               	goto	l357
 16330  014A34  0A03               	xorlw	3	; case 6
 16331  014A36  B4D8               	btfsc	status,2,c
 16332  014A38  D7DB               	goto	l358
 16333  014A3A  D7E1               	goto	l359
 16334  014A3C                     __end_of_GetPortPORT:
 16335                           	opt stack 0
 16336                           tblptru	equ	0xFF8
 16337                           tblptrh	equ	0xFF7
 16338                           tblptrl	equ	0xFF6
 16339                           tablat	equ	0xFF5
 16340                           prodh	equ	0xFF4
 16341                           prodl	equ	0xFF3
 16342                           intcon	equ	0xFF2
 16343                           postinc0	equ	0xFEE
 16344                           wreg	equ	0xFE8
 16345                           indf1	equ	0xFE7
 16346                           postdec1	equ	0xFE5
 16347                           fsr1h	equ	0xFE2
 16348                           fsr1l	equ	0xFE1
 16349                           indf2	equ	0xFDF
 16350                           postinc2	equ	0xFDE
 16351                           postdec2	equ	0xFDD
 16352                           fsr2h	equ	0xFDA
 16353                           fsr2l	equ	0xFD9
 16354                           status	equ	0xFD8
 16355                           
 16356 ;; *************** function _LED_Init *****************
 16357 ;; Defined at:
 16358 ;;		line 15 in file "Library/LED.c"
 16359 ;; Parameters:    Size  Location     Type
 16360 ;;  pLED            1    wreg     enum E6739
 16361 ;; Auto vars:     Size  Location     Type
 16362 ;;  pLED            1   45[BANK0 ] enum E6739
 16363 ;; Return value:  Size  Location     Type
 16364 ;;                  1    wreg      void 
 16365 ;; Registers used:
 16366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16367 ;; Tracked objects:
 16368 ;;		On entry : 0/0
 16369 ;;		On exit  : 0/0
 16370 ;;		Unchanged: 0/0
 16371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16376 ;;Total ram usage:        1 bytes
 16377 ;; Hardware stack levels used:    1
 16378 ;; Hardware stack levels required when called:   12
 16379 ;; This function calls:
 16380 ;;		_LED_Set
 16381 ;;		_Port_SetPinType
 16382 ;; This function is called by:
 16383 ;;		_MXK_Init
 16384 ;; This function uses a non-reentrant model
 16385 ;;
 16386                           
 16387                           	psect	text67
 16388  015866                     __ptext67:
 16389                           	opt stack 0
 16390  015866                     _LED_Init:
 16391                           	opt stack 16
 16392                           
 16393                           ; BSR set to: 0
 16394                           ;incstack = 0
 16395                           ;LED_Init@pLED stored from wreg
 16396  015866  0100               	movlb	0	; () banked
 16397  015868  6F8D               	movwf	LED_Init@pLED& (0+255),b
 16398                           
 16399                           ;LED.c: 17: switch (pLED)
 16400  01586A  D01E               	goto	l220
 16401  01586C                     
 16402                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16403  01586C  0EEA               	movlw	low _PortC
 16404  01586E  0100               	movlb	0	; () banked
 16405  015870  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16406  015872  0E00               	movlw	high _PortC
 16407  015874  0100               	movlb	0	; () banked
 16408  015876  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16409  015878  0E00               	movlw	0
 16410  01587A  0100               	movlb	0	; () banked
 16411  01587C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16412  01587E  0E03               	movlw	3
 16413  015880  0100               	movlb	0	; () banked
 16414  015882  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16415  015884  EC92  F093         	call	_Port_SetPinType	;wreg free
 16416                           
 16417                           ;LED.c: 21: break;
 16418  015888  D017               	goto	l222
 16419  01588A                     
 16420                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16421  01588A  0EEA               	movlw	low _PortC
 16422  01588C  0100               	movlb	0	; () banked
 16423  01588E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16424  015890  0E00               	movlw	high _PortC
 16425  015892  0100               	movlb	0	; () banked
 16426  015894  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16427  015896  0E01               	movlw	1
 16428  015898  0100               	movlb	0	; () banked
 16429  01589A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16430  01589C  0E03               	movlw	3
 16431  01589E  0100               	movlb	0	; () banked
 16432  0158A0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16433  0158A2  EC92  F093         	call	_Port_SetPinType	;wreg free
 16434                           
 16435                           ;LED.c: 25: }
 16436                           
 16437                           ;LED.c: 24: break;
 16438  0158A6  D008               	goto	l222
 16439  0158A8                     l220:
 16440  0158A8  0100               	movlb	0	; () banked
 16441  0158AA  518D               	movf	LED_Init@pLED& (0+255),w,b
 16442                           
 16443                           ; Switch size 1, requested type "space"
 16444                           ; Number of cases is 2, Range of values is 0 to 1
 16445                           ; switch strategies available:
 16446                           ; Name         Instructions Cycles
 16447                           ; simple_byte            7     4 (average)
 16448                           ;	Chosen strategy is simple_byte
 16449  0158AC  0A00               	xorlw	0	; case 0
 16450  0158AE  B4D8               	btfsc	status,2,c
 16451  0158B0  D7DD               	goto	l221
 16452  0158B2  0A01               	xorlw	1	; case 1
 16453  0158B4  B4D8               	btfsc	status,2,c
 16454  0158B6  D7E9               	goto	l223
 16455  0158B8                     l222:
 16456                           
 16457                           ;LED.c: 26: LED_Set(pLED, 0);
 16458                           
 16459                           ; BSR set to: 0
 16460  0158B8  0E00               	movlw	0
 16461  0158BA  0100               	movlb	0	; () banked
 16462  0158BC  6F74               	movwf	LED_Set@pValue& (0+255),b
 16463  0158BE  0100               	movlb	0	; () banked
 16464  0158C0  518D               	movf	LED_Init@pLED& (0+255),w,b
 16465  0158C2  EC71  F0AD         	call	_LED_Set
 16466  0158C6  0012               	return		;funcret
 16467  0158C8                     __end_of_LED_Init:
 16468                           	opt stack 0
 16469                           tblptru	equ	0xFF8
 16470                           tblptrh	equ	0xFF7
 16471                           tblptrl	equ	0xFF6
 16472                           tablat	equ	0xFF5
 16473                           prodh	equ	0xFF4
 16474                           prodl	equ	0xFF3
 16475                           intcon	equ	0xFF2
 16476                           postinc0	equ	0xFEE
 16477                           wreg	equ	0xFE8
 16478                           indf1	equ	0xFE7
 16479                           postdec1	equ	0xFE5
 16480                           fsr1h	equ	0xFE2
 16481                           fsr1l	equ	0xFE1
 16482                           indf2	equ	0xFDF
 16483                           postinc2	equ	0xFDE
 16484                           postdec2	equ	0xFDD
 16485                           fsr2h	equ	0xFDA
 16486                           fsr2l	equ	0xFD9
 16487                           status	equ	0xFD8
 16488                           
 16489 ;; *************** function _LED_Set *****************
 16490 ;; Defined at:
 16491 ;;		line 33 in file "Library/LED.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;  pLED            1    wreg     enum E6739
 16494 ;;  pValue          1   20[BANK0 ] unsigned char 
 16495 ;; Auto vars:     Size  Location     Type
 16496 ;;  pLED            1   21[BANK0 ] enum E6739
 16497 ;; Return value:  Size  Location     Type
 16498 ;;                  1    wreg      void 
 16499 ;; Registers used:
 16500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16501 ;; Tracked objects:
 16502 ;;		On entry : 0/0
 16503 ;;		On exit  : 0/0
 16504 ;;		Unchanged: 0/0
 16505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16506 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16510 ;;Total ram usage:        2 bytes
 16511 ;; Hardware stack levels used:    1
 16512 ;; Hardware stack levels required when called:   11
 16513 ;; This function calls:
 16514 ;;		_Port_SetPin
 16515 ;; This function is called by:
 16516 ;;		_LED_Init
 16517 ;;		_SYSTEM_Initialize
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           	psect	text68
 16522  015AE2                     __ptext68:
 16523                           	opt stack 0
 16524  015AE2                     _LED_Set:
 16525                           	opt stack 16
 16526                           
 16527                           ;incstack = 0
 16528                           ;LED_Set@pLED stored from wreg
 16529  015AE2  0100               	movlb	0	; () banked
 16530  015AE4  6F75               	movwf	LED_Set@pLED& (0+255),b
 16531                           
 16532                           ;LED.c: 35: switch (pLED)
 16533  015AE6  D01C               	goto	l227
 16534  015AE8                     
 16535                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16536  015AE8  0EEA               	movlw	low _PortC
 16537  015AEA  0100               	movlb	0	; () banked
 16538  015AEC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16539  015AEE  0E00               	movlw	high _PortC
 16540  015AF0  0100               	movlb	0	; () banked
 16541  015AF2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16542  015AF4  0E00               	movlw	0
 16543  015AF6  0100               	movlb	0	; () banked
 16544  015AF8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16545  015AFA  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 16546  015AFE  EC8C  F09F         	call	_Port_SetPin	;wreg free
 16547                           
 16548                           ;LED.c: 39: break;
 16549  015B02  0012               	return	
 16550  015B04                     
 16551                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16552  015B04  0EEA               	movlw	low _PortC
 16553  015B06  0100               	movlb	0	; () banked
 16554  015B08  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16555  015B0A  0E00               	movlw	high _PortC
 16556  015B0C  0100               	movlb	0	; () banked
 16557  015B0E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16558  015B10  0E01               	movlw	1
 16559  015B12  0100               	movlb	0	; () banked
 16560  015B14  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16561  015B16  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 16562  015B1A  EC8C  F09F         	call	_Port_SetPin	;wreg free
 16563                           
 16564                           ;LED.c: 43: }
 16565                           
 16566                           ;LED.c: 42: break;
 16567  015B1E  0012               	return	
 16568  015B20                     l227:
 16569  015B20  0100               	movlb	0	; () banked
 16570  015B22  5175               	movf	LED_Set@pLED& (0+255),w,b
 16571                           
 16572                           ; Switch size 1, requested type "space"
 16573                           ; Number of cases is 2, Range of values is 0 to 1
 16574                           ; switch strategies available:
 16575                           ; Name         Instructions Cycles
 16576                           ; simple_byte            7     4 (average)
 16577                           ;	Chosen strategy is simple_byte
 16578  015B24  0A00               	xorlw	0	; case 0
 16579  015B26  B4D8               	btfsc	status,2,c
 16580  015B28  D7DF               	goto	l228
 16581  015B2A  0A01               	xorlw	1	; case 1
 16582  015B2C  A4D8               	btfss	status,2,c
 16583  015B2E  0012               	return	
 16584  015B30  D7E9               	goto	l230
 16585  015B32                     __end_of_LED_Set:
 16586                           	opt stack 0
 16587                           tblptru	equ	0xFF8
 16588                           tblptrh	equ	0xFF7
 16589                           tblptrl	equ	0xFF6
 16590                           tablat	equ	0xFF5
 16591                           prodh	equ	0xFF4
 16592                           prodl	equ	0xFF3
 16593                           intcon	equ	0xFF2
 16594                           postinc0	equ	0xFEE
 16595                           wreg	equ	0xFE8
 16596                           indf1	equ	0xFE7
 16597                           postdec1	equ	0xFE5
 16598                           fsr1h	equ	0xFE2
 16599                           fsr1l	equ	0xFE1
 16600                           indf2	equ	0xFDF
 16601                           postinc2	equ	0xFDE
 16602                           postdec2	equ	0xFDD
 16603                           fsr2h	equ	0xFDA
 16604                           fsr2l	equ	0xFD9
 16605                           status	equ	0xFD8
 16606                           
 16607 ;; *************** function _MXK_Dequeue *****************
 16608 ;; Defined at:
 16609 ;;		line 153 in file "Library/MXK.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;		None
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;		None
 16614 ;; Return value:  Size  Location     Type
 16615 ;;                  1    wreg      void 
 16616 ;; Registers used:
 16617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16618 ;; Tracked objects:
 16619 ;;		On entry : 0/0
 16620 ;;		On exit  : 0/0
 16621 ;;		Unchanged: 0/0
 16622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;Total ram usage:        0 bytes
 16628 ;; Hardware stack levels used:    1
 16629 ;; Hardware stack levels required when called:   12
 16630 ;; This function calls:
 16631 ;;		Absolute function
 16632 ;;		_Motor_Step
 16633 ;; This function is called by:
 16634 ;;		_init
 16635 ;;		_mode1
 16636 ;;		_mode2
 16637 ;;		_mode4
 16638 ;;		_main
 16639 ;; This function uses a non-reentrant model
 16640 ;;
 16641                           
 16642                           	psect	text69
 16643  015F06                     __ptext69:
 16644                           	opt stack 0
 16645  015F06                     _MXK_Dequeue:
 16646                           	opt stack 17
 16647                           
 16648                           ;MXK.c: 155: if (lQueue)
 16649                           
 16650                           ;incstack = 0
 16651  015F06  0100               	movlb	0	; () banked
 16652  015F08  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 16653  015F0A  0100               	movlb	0	; () banked
 16654  015F0C  11BD               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16655  015F0E  0100               	movlb	0	; () banked
 16656  015F10  11BE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16657  015F12  B4D8               	btfsc	status,2,c
 16658  015F14  D00D               	goto	u13559
 16659                           
 16660                           ; BSR set to: 0
 16661                           ;MXK.c: 156: lQueue();
 16662  015F16  D801               	call	u13558
 16663  015F18  D00B               	goto	u13559
 16664  015F1A                     u13558:
 16665  015F1A  0005               	push	
 16666  015F1C  6EFA               	movwf	pclath,c
 16667  015F1E  0100               	movlb	0	; () banked
 16668  015F20  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 16669  015F22  6EFD               	movwf	tosl,c
 16670  015F24  51BD               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16671  015F26  6EFE               	movwf	tosh,c
 16672  015F28  51BE               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16673  015F2A  6EFF               	movwf	tosu,c
 16674  015F2C  50FA               	movf	pclath,w,c
 16675  015F2E  0012               	return		;indir
 16676  015F30                     u13559:
 16677                           
 16678                           ;MXK.c: 157: lQueue = 0;
 16679  015F30  0E00               	movlw	0
 16680  015F32  0100               	movlb	0	; () banked
 16681  015F34  6FBC               	movwf	_lQueue& (0+255),b	;volatile
 16682  015F36  0E00               	movlw	0
 16683  015F38  0100               	movlb	0	; () banked
 16684  015F3A  6FBD               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16685  015F3C  0E00               	movlw	0
 16686  015F3E  0100               	movlb	0	; () banked
 16687  015F40  6FBE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16688                           
 16689                           ; BSR set to: 0
 16690  015F42  0012               	return		;funcret
 16691  015F44                     __end_of_MXK_Dequeue:
 16692                           	opt stack 0
 16693                           tosu	equ	0xFFF
 16694                           tosh	equ	0xFFE
 16695                           tosl	equ	0xFFD
 16696                           pclath	equ	0xFFA
 16697                           tblptru	equ	0xFF8
 16698                           tblptrh	equ	0xFF7
 16699                           tblptrl	equ	0xFF6
 16700                           tablat	equ	0xFF5
 16701                           prodh	equ	0xFF4
 16702                           prodl	equ	0xFF3
 16703                           intcon	equ	0xFF2
 16704                           postinc0	equ	0xFEE
 16705                           wreg	equ	0xFE8
 16706                           indf1	equ	0xFE7
 16707                           postdec1	equ	0xFE5
 16708                           fsr1h	equ	0xFE2
 16709                           fsr1l	equ	0xFE1
 16710                           indf2	equ	0xFDF
 16711                           postinc2	equ	0xFDE
 16712                           postdec2	equ	0xFDD
 16713                           fsr2h	equ	0xFDA
 16714                           fsr2l	equ	0xFD9
 16715                           status	equ	0xFD8
 16716                           
 16717 ;; *************** function _Motor_Step *****************
 16718 ;; Defined at:
 16719 ;;		line 75 in file "Library/Motor.c"
 16720 ;; Parameters:    Size  Location     Type
 16721 ;;		None
 16722 ;; Auto vars:     Size  Location     Type
 16723 ;;		None
 16724 ;; Return value:  Size  Location     Type
 16725 ;;                  1    wreg      void 
 16726 ;; Registers used:
 16727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16728 ;; Tracked objects:
 16729 ;;		On entry : 0/0
 16730 ;;		On exit  : 0/0
 16731 ;;		Unchanged: 0/0
 16732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16737 ;;Total ram usage:        2 bytes
 16738 ;; Hardware stack levels used:    1
 16739 ;; Hardware stack levels required when called:   11
 16740 ;; This function calls:
 16741 ;;		_MXK_Queue
 16742 ;;		_MXK_Release
 16743 ;;		_MXK_SwitchTo
 16744 ;;		_Port_SetPin
 16745 ;;		_Timer0_Restart
 16746 ;;		_Timer0_Stop
 16747 ;; This function is called by:
 16748 ;;		_Motor_Init
 16749 ;;		_MXK_Dequeue
 16750 ;;		_Timer0_ISR
 16751 ;; This function uses a non-reentrant model
 16752 ;;
 16753                           
 16754                           	psect	text70
 16755  0135EC                     __ptext70:
 16756                           	opt stack 0
 16757  0135EC                     _Motor_Step:
 16758                           	opt stack 0
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;Skip over the trampoline to the duplicate function for level 2
 16762  0135EC  B251               	btfsc	btemp,1,c
 16763  0135EE  EF0F  F09C         	goto	i2_Motor_Step
 16764  0135F2                     _Motor_Step$intlevel0:
 16765                           	opt stack 17
 16766                           
 16767                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16768                           
 16769                           ;incstack = 0
 16770  0135F2  0100               	movlb	0	; () banked
 16771  0135F4  EE20 F004          	lfsr	2,4
 16772  0135F8  51D8               	movf	_lMotor& (0+255),w,b
 16773  0135FA  26D9               	addwf	fsr2l,f,c
 16774  0135FC  51D9               	movf	(_lMotor+1)& (0+255),w,b
 16775  0135FE  22DA               	addwfc	fsr2h,f,c
 16776  013600  50DF               	movf	indf2,w,c
 16777  013602  EC03  F0AF         	call	_MXK_SwitchTo
 16778  013606  0900               	iorlw	0
 16779  013608  B4D8               	btfsc	status,2,c
 16780  01360A  D07A               	goto	l1627
 16781                           
 16782                           ;Motor.c: 78: {
 16783                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16784  01360C  C0D8  FFD9         	movff	_lMotor,fsr2l
 16785  013610  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16786  013614  50DE               	movf	postinc2,w,c
 16787  013616  10DE               	iorwf	postinc2,w,c
 16788  013618  B4D8               	btfsc	status,2,c
 16789  01361A  D06D               	goto	l1628
 16790                           
 16791                           ;Motor.c: 80: {
 16792                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16793  01361C  C0D8  FFD9         	movff	_lMotor,fsr2l
 16794  013620  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16795  013624  0E01               	movlw	1
 16796  013626  BEDB               	btfsc	plusw2,7,c
 16797  013628  D026               	goto	l1629
 16798  01362A  0E01               	movlw	1
 16799  01362C  50DB               	movf	plusw2,w,c
 16800  01362E  E103               	bnz	u10230
 16801  013630  04DE               	decf	postinc2,w,c
 16802  013632  A0D8               	btfss	status,0,c
 16803  013634  D020               	goto	l1629
 16804  013636                     u10230:
 16805                           
 16806                           ;Motor.c: 83: {
 16807                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16808  013636  C0D8  FFD9         	movff	_lMotor,fsr2l
 16809  01363A  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16810  01363E  28DE               	incf	postinc2,w,c
 16811  013640  E104               	bnz	u10240
 16812  013642  0E7F               	movlw	127
 16813  013644  18DE               	xorwf	postinc2,w,c
 16814  013646  B4D8               	btfsc	status,2,c
 16815  013648  D007               	goto	l1630
 16816  01364A                     u10240:
 16817                           
 16818                           ;Motor.c: 85: lMotor->mDelta --;
 16819  01364A  C0D8  FFD9         	movff	_lMotor,fsr2l
 16820  01364E  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16821  013652  06DE               	decf	postinc2,f,c
 16822  013654  0E00               	movlw	0
 16823  013656  5ADD               	subwfb	postdec2,f,c
 16824  013658                     l1630:
 16825                           
 16826                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16827  013658  0E90               	movlw	low _PortE
 16828  01365A  0100               	movlb	0	; () banked
 16829  01365C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16830  01365E  0E03               	movlw	high _PortE
 16831  013660  0100               	movlb	0	; () banked
 16832  013662  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16833  013664  0E00               	movlw	0
 16834  013666  0100               	movlb	0	; () banked
 16835  013668  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16836  01366A  0E01               	movlw	1
 16837  01366C  0100               	movlb	0	; () banked
 16838  01366E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16839  013670  EC8C  F09F         	call	_Port_SetPin	;wreg free
 16840                           
 16841                           ;Motor.c: 88: }
 16842  013674  D01F               	goto	l1631
 16843  013676                     l1629:
 16844                           
 16845                           ;Motor.c: 89: else
 16846                           ;Motor.c: 90: {
 16847                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16848  013676  C0D8  FFD9         	movff	_lMotor,fsr2l
 16849  01367A  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16850  01367E  04DE               	decf	postinc2,w,c
 16851  013680  E104               	bnz	u10250
 16852  013682  0E80               	movlw	128
 16853  013684  18DE               	xorwf	postinc2,w,c
 16854  013686  B4D8               	btfsc	status,2,c
 16855  013688  D007               	goto	l1632
 16856  01368A                     u10250:
 16857                           
 16858                           ;Motor.c: 92: lMotor->mDelta ++;
 16859  01368A  C0D8  FFD9         	movff	_lMotor,fsr2l
 16860  01368E  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16861  013692  2ADE               	incf	postinc2,f,c
 16862  013694  0E00               	movlw	0
 16863  013696  22DD               	addwfc	postdec2,f,c
 16864  013698                     l1632:
 16865                           
 16866                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16867  013698  0E90               	movlw	low _PortE
 16868  01369A  0100               	movlb	0	; () banked
 16869  01369C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16870  01369E  0E03               	movlw	high _PortE
 16871  0136A0  0100               	movlb	0	; () banked
 16872  0136A2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16873  0136A4  0E00               	movlw	0
 16874  0136A6  0100               	movlb	0	; () banked
 16875  0136A8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16876  0136AA  0E00               	movlw	0
 16877  0136AC  0100               	movlb	0	; () banked
 16878  0136AE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16879  0136B0  EC8C  F09F         	call	_Port_SetPin	;wreg free
 16880  0136B4                     l1631:
 16881                           
 16882                           ;Motor.c: 95: }
 16883                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16884  0136B4  0E90               	movlw	low _PortE
 16885  0136B6  0100               	movlb	0	; () banked
 16886  0136B8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16887  0136BA  0E03               	movlw	high _PortE
 16888  0136BC  0100               	movlb	0	; () banked
 16889  0136BE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16890  0136C0  0E01               	movlw	1
 16891  0136C2  0100               	movlb	0	; () banked
 16892  0136C4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16893  0136C6  0E01               	movlw	1
 16894  0136C8  0100               	movlb	0	; () banked
 16895  0136CA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16896  0136CC  EC8C  F09F         	call	_Port_SetPin	;wreg free
 16897                           
 16898                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16899  0136D0  0E90               	movlw	low _PortE
 16900  0136D2  0100               	movlb	0	; () banked
 16901  0136D4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16902  0136D6  0E03               	movlw	high _PortE
 16903  0136D8  0100               	movlb	0	; () banked
 16904  0136DA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16905  0136DC  0E01               	movlw	1
 16906  0136DE  0100               	movlb	0	; () banked
 16907  0136E0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16908  0136E2  0E00               	movlw	0
 16909  0136E4  0100               	movlb	0	; () banked
 16910  0136E6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16911  0136E8  EC8C  F09F         	call	_Port_SetPin	;wreg free
 16912                           
 16913                           ;Motor.c: 101: MXK_Release();
 16914  0136EC  EC31  F0B2         	call	_MXK_Release	;wreg free
 16915                           
 16916                           ;Motor.c: 102: Timer0_Restart();
 16917  0136F0  EC28  F0B3         	call	_Timer0_Restart	;wreg free
 16918                           
 16919                           ;Motor.c: 103: return;
 16920  0136F4  0012               	return	
 16921  0136F6                     l1628:
 16922                           
 16923                           ;Motor.c: 104: }
 16924                           ;Motor.c: 105: MXK_Release();
 16925  0136F6  EC31  F0B2         	call	_MXK_Release	;wreg free
 16926                           
 16927                           ;Motor.c: 106: Timer0_Stop();
 16928  0136FA  EC53  F0B3         	call	_Timer0_Stop	;wreg free
 16929                           
 16930                           ;Motor.c: 107: return;
 16931  0136FE  0012               	return	
 16932  013700                     l1627:
 16933                           
 16934                           ;Motor.c: 108: }
 16935                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16936  013700  C0BF  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 16937  013704  C0C0  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16938  013708  C0C1  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16939  01370C  EC0E  F0B3         	call	_MXK_Queue	;wreg free
 16940  013710  0012               	return		;funcret
 16941  013712                     __end_of_Motor_Step:
 16942                           	opt stack 0
 16943                           tosu	equ	0xFFF
 16944                           tosh	equ	0xFFE
 16945                           tosl	equ	0xFFD
 16946                           pclath	equ	0xFFA
 16947                           tblptru	equ	0xFF8
 16948                           tblptrh	equ	0xFF7
 16949                           tblptrl	equ	0xFF6
 16950                           tablat	equ	0xFF5
 16951                           prodh	equ	0xFF4
 16952                           prodl	equ	0xFF3
 16953                           intcon	equ	0xFF2
 16954                           postinc0	equ	0xFEE
 16955                           wreg	equ	0xFE8
 16956                           indf1	equ	0xFE7
 16957                           postdec1	equ	0xFE5
 16958                           fsr1h	equ	0xFE2
 16959                           fsr1l	equ	0xFE1
 16960                           indf2	equ	0xFDF
 16961                           postinc2	equ	0xFDE
 16962                           postdec2	equ	0xFDD
 16963                           plusw2	equ	0xFDB
 16964                           fsr2h	equ	0xFDA
 16965                           fsr2l	equ	0xFD9
 16966                           status	equ	0xFD8
 16967                           
 16968 ;; *************** function _Timer0_Stop *****************
 16969 ;; Defined at:
 16970 ;;		line 89 in file "Library/Timer0.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;		None
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;		None
 16975 ;; Return value:  Size  Location     Type
 16976 ;;                  1    wreg      void 
 16977 ;; Registers used:
 16978 ;;		None
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;Total ram usage:        0 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    7
 16991 ;; This function calls:
 16992 ;;		Nothing
 16993 ;; This function is called by:
 16994 ;;		_Motor_Step
 16995 ;; This function uses a non-reentrant model
 16996 ;;
 16997                           
 16998                           	psect	text71
 16999  0166A6                     __ptext71:
 17000                           	opt stack 0
 17001  0166A6                     _Timer0_Stop:
 17002                           	opt stack 20
 17003                           
 17004                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17005                           
 17006                           ;incstack = 0
 17007  0166A6  9AF2               	bcf	intcon,5,c	;volatile
 17008                           
 17009                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17010  0166A8  94F2               	bcf	intcon,2,c	;volatile
 17011  0166AA  0012               	return		;funcret
 17012  0166AC                     __end_of_Timer0_Stop:
 17013                           	opt stack 0
 17014                           tosu	equ	0xFFF
 17015                           tosh	equ	0xFFE
 17016                           tosl	equ	0xFFD
 17017                           pclath	equ	0xFFA
 17018                           tblptru	equ	0xFF8
 17019                           tblptrh	equ	0xFF7
 17020                           tblptrl	equ	0xFF6
 17021                           tablat	equ	0xFF5
 17022                           prodh	equ	0xFF4
 17023                           prodl	equ	0xFF3
 17024                           intcon	equ	0xFF2
 17025                           postinc0	equ	0xFEE
 17026                           wreg	equ	0xFE8
 17027                           indf1	equ	0xFE7
 17028                           postdec1	equ	0xFE5
 17029                           fsr1h	equ	0xFE2
 17030                           fsr1l	equ	0xFE1
 17031                           indf2	equ	0xFDF
 17032                           postinc2	equ	0xFDE
 17033                           postdec2	equ	0xFDD
 17034                           plusw2	equ	0xFDB
 17035                           fsr2h	equ	0xFDA
 17036                           fsr2l	equ	0xFD9
 17037                           status	equ	0xFD8
 17038                           
 17039 ;; *************** function _Timer0_Restart *****************
 17040 ;; Defined at:
 17041 ;;		line 83 in file "Library/Timer0.c"
 17042 ;; Parameters:    Size  Location     Type
 17043 ;;		None
 17044 ;; Auto vars:     Size  Location     Type
 17045 ;;		None
 17046 ;; Return value:  Size  Location     Type
 17047 ;;                  1    wreg      void 
 17048 ;; Registers used:
 17049 ;;		None
 17050 ;; Tracked objects:
 17051 ;;		On entry : 0/0
 17052 ;;		On exit  : 0/0
 17053 ;;		Unchanged: 0/0
 17054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17059 ;;Total ram usage:        0 bytes
 17060 ;; Hardware stack levels used:    1
 17061 ;; Hardware stack levels required when called:    7
 17062 ;; This function calls:
 17063 ;;		Nothing
 17064 ;; This function is called by:
 17065 ;;		_Motor_Step
 17066 ;; This function uses a non-reentrant model
 17067 ;;
 17068                           
 17069                           	psect	text72
 17070  016650                     __ptext72:
 17071                           	opt stack 0
 17072  016650                     _Timer0_Restart:
 17073                           	opt stack 20
 17074                           
 17075                           ;Timer0.c: 85: TMR0 = COUNTER;
 17076                           
 17077                           ;incstack = 0
 17078  016650  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17079  016654  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17080                           
 17081                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17082  016658  8AF2               	bsf	intcon,5,c	;volatile
 17083  01665A  0012               	return		;funcret
 17084  01665C                     __end_of_Timer0_Restart:
 17085                           	opt stack 0
 17086                           tosu	equ	0xFFF
 17087                           tosh	equ	0xFFE
 17088                           tosl	equ	0xFFD
 17089                           pclath	equ	0xFFA
 17090                           tblptru	equ	0xFF8
 17091                           tblptrh	equ	0xFF7
 17092                           tblptrl	equ	0xFF6
 17093                           tablat	equ	0xFF5
 17094                           prodh	equ	0xFF4
 17095                           prodl	equ	0xFF3
 17096                           intcon	equ	0xFF2
 17097                           postinc0	equ	0xFEE
 17098                           wreg	equ	0xFE8
 17099                           indf1	equ	0xFE7
 17100                           postdec1	equ	0xFE5
 17101                           fsr1h	equ	0xFE2
 17102                           fsr1l	equ	0xFE1
 17103                           indf2	equ	0xFDF
 17104                           postinc2	equ	0xFDE
 17105                           postdec2	equ	0xFDD
 17106                           plusw2	equ	0xFDB
 17107                           fsr2h	equ	0xFDA
 17108                           fsr2l	equ	0xFD9
 17109                           status	equ	0xFD8
 17110                           
 17111 ;; *************** function _MXK_SwitchTo *****************
 17112 ;; Defined at:
 17113 ;;		line 105 in file "Library/MXK.c"
 17114 ;; Parameters:    Size  Location     Type
 17115 ;;  pModule         1    wreg     enum E6927
 17116 ;; Auto vars:     Size  Location     Type
 17117 ;;  pModule         1    7[BANK0 ] enum E6927
 17118 ;;  CUR             1    6[BANK0 ] unsigned char 
 17119 ;; Return value:  Size  Location     Type
 17120 ;;                  1    wreg      unsigned char 
 17121 ;; Registers used:
 17122 ;;		wreg, status,2, status,0, cstack
 17123 ;; Tracked objects:
 17124 ;;		On entry : 0/0
 17125 ;;		On exit  : 0/0
 17126 ;;		Unchanged: 0/0
 17127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17132 ;;Total ram usage:        2 bytes
 17133 ;; Hardware stack levels used:    1
 17134 ;; Hardware stack levels required when called:    8
 17135 ;; This function calls:
 17136 ;;		_delay_us
 17137 ;; This function is called by:
 17138 ;;		_Motor_Step
 17139 ;;		_mode1
 17140 ;;		_mode2
 17141 ;;		_mode4
 17142 ;;		_main
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           	psect	text73
 17147  015E06                     __ptext73:
 17148                           	opt stack 0
 17149  015E06                     _MXK_SwitchTo:
 17150                           	opt stack 21
 17151                           
 17152                           ;incstack = 0
 17153                           ;MXK_SwitchTo@pModule stored from wreg
 17154  015E06  0100               	movlb	0	; () banked
 17155  015E08  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17156                           
 17157                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17158  015E0A  5086               	movf	3974,w,c	;volatile
 17159  015E0C  0B0F               	andlw	15
 17160  015E0E  0100               	movlb	0	; () banked
 17161  015E10  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17162                           
 17163                           ; BSR set to: 0
 17164                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17165  015E12  504B               	movf	_Bus_State,w,c
 17166  015E14  A4D8               	btfss	status,2,c
 17167  015E16  D002               	goto	l1730
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;MXK.c: 110: return 0;
 17171  015E18  0E00               	movlw	0
 17172                           
 17173                           ; BSR set to: 0
 17174  015E1A  0012               	return	
 17175  015E1C                     l1730:
 17176                           
 17177                           ; BSR set to: 0
 17178                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17179                           
 17180                           ; BSR set to: 0
 17181  015E1C  0E00               	movlw	0
 17182  015E1E  6E4B               	movwf	_Bus_State,c
 17183                           
 17184                           ; BSR set to: 0
 17185                           ;MXK.c: 114: if (CUR != pModule)
 17186  015E20  0100               	movlb	0	; () banked
 17187  015E22  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17188  015E24  0100               	movlb	0	; () banked
 17189  015E26  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17190  015E28  B4D8               	btfsc	status,2,c
 17191  015E2A  D00C               	goto	l1732
 17192                           
 17193                           ; BSR set to: 0
 17194                           ;MXK.c: 115: {
 17195                           ;MXK.c: 116: PORTG &= ~(0xF);
 17196  015E2C  0EF0               	movlw	240
 17197  015E2E  1686               	andwf	3974,f,c	;volatile
 17198                           
 17199                           ;MXK.c: 117: PORTG |= pModule;
 17200  015E30  0100               	movlb	0	; () banked
 17201  015E32  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17202  015E34  1286               	iorwf	3974,f,c	;volatile
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;MXK.c: 120: delay_us(10);
 17206  015E36  0E00               	movlw	0
 17207  015E38  0100               	movlb	0	; () banked
 17208  015E3A  6F61               	movwf	(delay_us@us+1)& (0+255),b
 17209  015E3C  0E0A               	movlw	10
 17210  015E3E  6F60               	movwf	delay_us@us& (0+255),b
 17211  015E40  EC48  F0AD         	call	_delay_us	;wreg free
 17212  015E44                     l1732:
 17213                           
 17214                           ;MXK.c: 121: }
 17215                           ;MXK.c: 122: return 1;
 17216  015E44  0E01               	movlw	1
 17217  015E46  0012               	return	
 17218  015E48                     __end_of_MXK_SwitchTo:
 17219                           	opt stack 0
 17220                           tosu	equ	0xFFF
 17221                           tosh	equ	0xFFE
 17222                           tosl	equ	0xFFD
 17223                           pclath	equ	0xFFA
 17224                           tblptru	equ	0xFF8
 17225                           tblptrh	equ	0xFF7
 17226                           tblptrl	equ	0xFF6
 17227                           tablat	equ	0xFF5
 17228                           prodh	equ	0xFF4
 17229                           prodl	equ	0xFF3
 17230                           intcon	equ	0xFF2
 17231                           postinc0	equ	0xFEE
 17232                           wreg	equ	0xFE8
 17233                           indf1	equ	0xFE7
 17234                           postdec1	equ	0xFE5
 17235                           fsr1h	equ	0xFE2
 17236                           fsr1l	equ	0xFE1
 17237                           indf2	equ	0xFDF
 17238                           postinc2	equ	0xFDE
 17239                           postdec2	equ	0xFDD
 17240                           plusw2	equ	0xFDB
 17241                           fsr2h	equ	0xFDA
 17242                           fsr2l	equ	0xFD9
 17243                           status	equ	0xFD8
 17244                           
 17245 ;; *************** function _MXK_Release *****************
 17246 ;; Defined at:
 17247 ;;		line 130 in file "Library/MXK.c"
 17248 ;; Parameters:    Size  Location     Type
 17249 ;;		None
 17250 ;; Auto vars:     Size  Location     Type
 17251 ;;		None
 17252 ;; Return value:  Size  Location     Type
 17253 ;;                  1    wreg      unsigned char 
 17254 ;; Registers used:
 17255 ;;		wreg, status,2, status,0
 17256 ;; Tracked objects:
 17257 ;;		On entry : 0/0
 17258 ;;		On exit  : 0/0
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;Total ram usage:        0 bytes
 17266 ;; Hardware stack levels used:    1
 17267 ;; Hardware stack levels required when called:    7
 17268 ;; This function calls:
 17269 ;;		Nothing
 17270 ;; This function is called by:
 17271 ;;		_Motor_Step
 17272 ;;		_init
 17273 ;;		_mode1
 17274 ;;		_mode2
 17275 ;;		_mode4
 17276 ;;		_main
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           	psect	text74
 17281  016462                     __ptext74:
 17282                           	opt stack 0
 17283  016462                     _MXK_Release:
 17284                           	opt stack 22
 17285                           
 17286                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17287                           
 17288                           ;incstack = 0
 17289  016462  0E01               	movlw	1
 17290  016464  6E4B               	movwf	_Bus_State,c
 17291                           
 17292                           ;MXK.c: 134: if (lQueue != 0)
 17293  016466  0100               	movlb	0	; () banked
 17294  016468  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 17295  01646A  0100               	movlb	0	; () banked
 17296  01646C  11BD               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17297  01646E  0100               	movlb	0	; () banked
 17298  016470  11BE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17299  016472  B4D8               	btfsc	status,2,c
 17300  016474  D002               	goto	l1735
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;MXK.c: 135: return 1;
 17304  016476  0E01               	movlw	1
 17305                           
 17306                           ; BSR set to: 0
 17307  016478  0012               	return	
 17308  01647A                     l1735:
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;MXK.c: 137: return 0;
 17312                           
 17313                           ; BSR set to: 0
 17314  01647A  0E00               	movlw	0
 17315  01647C  0012               	return	
 17316  01647E                     __end_of_MXK_Release:
 17317                           	opt stack 0
 17318                           tosu	equ	0xFFF
 17319                           tosh	equ	0xFFE
 17320                           tosl	equ	0xFFD
 17321                           pclath	equ	0xFFA
 17322                           tblptru	equ	0xFF8
 17323                           tblptrh	equ	0xFF7
 17324                           tblptrl	equ	0xFF6
 17325                           tablat	equ	0xFF5
 17326                           prodh	equ	0xFF4
 17327                           prodl	equ	0xFF3
 17328                           intcon	equ	0xFF2
 17329                           postinc0	equ	0xFEE
 17330                           wreg	equ	0xFE8
 17331                           indf1	equ	0xFE7
 17332                           postdec1	equ	0xFE5
 17333                           fsr1h	equ	0xFE2
 17334                           fsr1l	equ	0xFE1
 17335                           indf2	equ	0xFDF
 17336                           postinc2	equ	0xFDE
 17337                           postdec2	equ	0xFDD
 17338                           plusw2	equ	0xFDB
 17339                           fsr2h	equ	0xFDA
 17340                           fsr2l	equ	0xFD9
 17341                           status	equ	0xFD8
 17342                           
 17343 ;; *************** function _MXK_Queue *****************
 17344 ;; Defined at:
 17345 ;;		line 144 in file "Library/MXK.c"
 17346 ;; Parameters:    Size  Location     Type
 17347 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17348 ;;		 -> Absolute function(1), Motor_Step(1), 
 17349 ;; Auto vars:     Size  Location     Type
 17350 ;;		None
 17351 ;; Return value:  Size  Location     Type
 17352 ;;                  1    wreg      void 
 17353 ;; Registers used:
 17354 ;;		wreg, status,2, status,0
 17355 ;; Tracked objects:
 17356 ;;		On entry : 0/0
 17357 ;;		On exit  : 0/0
 17358 ;;		Unchanged: 0/0
 17359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17360 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17363 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17364 ;;Total ram usage:        3 bytes
 17365 ;; Hardware stack levels used:    1
 17366 ;; Hardware stack levels required when called:    7
 17367 ;; This function calls:
 17368 ;;		Nothing
 17369 ;; This function is called by:
 17370 ;;		_Motor_Step
 17371 ;; This function uses a non-reentrant model
 17372 ;;
 17373                           
 17374                           	psect	text75
 17375  01661C                     __ptext75:
 17376                           	opt stack 0
 17377  01661C                     _MXK_Queue:
 17378                           	opt stack 20
 17379                           
 17380                           ;MXK.c: 146: lQueue = pCallback;
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;incstack = 0
 17384  01661C  C060  F0BC         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17385  016620  C061  F0BD         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17386  016624  C062  F0BE         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17387  016628  0012               	return		;funcret
 17388  01662A                     __end_of_MXK_Queue:
 17389                           	opt stack 0
 17390                           tosu	equ	0xFFF
 17391                           tosh	equ	0xFFE
 17392                           tosl	equ	0xFFD
 17393                           pclath	equ	0xFFA
 17394                           tblptru	equ	0xFF8
 17395                           tblptrh	equ	0xFF7
 17396                           tblptrl	equ	0xFF6
 17397                           tablat	equ	0xFF5
 17398                           prodh	equ	0xFF4
 17399                           prodl	equ	0xFF3
 17400                           intcon	equ	0xFF2
 17401                           postinc0	equ	0xFEE
 17402                           wreg	equ	0xFE8
 17403                           indf1	equ	0xFE7
 17404                           postdec1	equ	0xFE5
 17405                           fsr1h	equ	0xFE2
 17406                           fsr1l	equ	0xFE1
 17407                           indf2	equ	0xFDF
 17408                           postinc2	equ	0xFDE
 17409                           postdec2	equ	0xFDD
 17410                           plusw2	equ	0xFDB
 17411                           fsr2h	equ	0xFDA
 17412                           fsr2l	equ	0xFD9
 17413                           status	equ	0xFD8
 17414                           
 17415 ;; *************** function _MXK_BlockSwitchTo *****************
 17416 ;; Defined at:
 17417 ;;		line 82 in file "Library/MXK.c"
 17418 ;; Parameters:    Size  Location     Type
 17419 ;;  pModule         1    wreg     enum E6927
 17420 ;; Auto vars:     Size  Location     Type
 17421 ;;  pModule         1    7[BANK0 ] enum E6927
 17422 ;;  CUR             1    6[BANK0 ] unsigned char 
 17423 ;; Return value:  Size  Location     Type
 17424 ;;                  1    wreg      unsigned char 
 17425 ;; Registers used:
 17426 ;;		wreg, status,2, status,0, cstack
 17427 ;; Tracked objects:
 17428 ;;		On entry : 0/0
 17429 ;;		On exit  : 0/0
 17430 ;;		Unchanged: 0/0
 17431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17433 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17436 ;;Total ram usage:        2 bytes
 17437 ;; Hardware stack levels used:    1
 17438 ;; Hardware stack levels required when called:    8
 17439 ;; This function calls:
 17440 ;;		_delay_us
 17441 ;; This function is called by:
 17442 ;;		_init
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           	psect	text76
 17447  015F44                     __ptext76:
 17448                           	opt stack 0
 17449  015F44                     _MXK_BlockSwitchTo:
 17450                           	opt stack 21
 17451                           
 17452                           ;incstack = 0
 17453                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17454  015F44  0100               	movlb	0	; () banked
 17455  015F46  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17456                           
 17457                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17458  015F48  5086               	movf	3974,w,c	;volatile
 17459  015F4A  0B0F               	andlw	15
 17460  015F4C  0100               	movlb	0	; () banked
 17461  015F4E  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17462  015F50                     
 17463                           ; BSR set to: 0
 17464                           
 17465                           ; BSR set to: 0
 17466  015F50  504B               	movf	_Bus_State,w,c
 17467  015F52  B4D8               	btfsc	status,2,c
 17468  015F54  D7FD               	goto	l1724
 17469                           
 17470                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17471  015F56  0E00               	movlw	0
 17472  015F58  6E4B               	movwf	_Bus_State,c
 17473                           
 17474                           ;MXK.c: 90: if (CUR != pModule)
 17475  015F5A  0100               	movlb	0	; () banked
 17476  015F5C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17477  015F5E  0100               	movlb	0	; () banked
 17478  015F60  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17479  015F62  B4D8               	btfsc	status,2,c
 17480  015F64  D00C               	goto	l1726
 17481                           
 17482                           ; BSR set to: 0
 17483                           ;MXK.c: 91: {
 17484                           ;MXK.c: 92: PORTG &= ~(0xF);
 17485  015F66  0EF0               	movlw	240
 17486  015F68  1686               	andwf	3974,f,c	;volatile
 17487                           
 17488                           ;MXK.c: 93: PORTG |= pModule;
 17489  015F6A  0100               	movlb	0	; () banked
 17490  015F6C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17491  015F6E  1286               	iorwf	3974,f,c	;volatile
 17492                           
 17493                           ; BSR set to: 0
 17494                           ;MXK.c: 96: delay_us(10);
 17495  015F70  0E00               	movlw	0
 17496  015F72  0100               	movlb	0	; () banked
 17497  015F74  6F61               	movwf	(delay_us@us+1)& (0+255),b
 17498  015F76  0E0A               	movlw	10
 17499  015F78  6F60               	movwf	delay_us@us& (0+255),b
 17500  015F7A  EC48  F0AD         	call	_delay_us	;wreg free
 17501  015F7E                     l1726:
 17502                           
 17503                           ;MXK.c: 97: }
 17504                           ;MXK.c: 98: return 1;
 17505  015F7E  0E01               	movlw	1
 17506  015F80  0012               	return	
 17507  015F82                     __end_of_MXK_BlockSwitchTo:
 17508                           	opt stack 0
 17509                           tosu	equ	0xFFF
 17510                           tosh	equ	0xFFE
 17511                           tosl	equ	0xFFD
 17512                           pclath	equ	0xFFA
 17513                           tblptru	equ	0xFF8
 17514                           tblptrh	equ	0xFF7
 17515                           tblptrl	equ	0xFF6
 17516                           tablat	equ	0xFF5
 17517                           prodh	equ	0xFF4
 17518                           prodl	equ	0xFF3
 17519                           intcon	equ	0xFF2
 17520                           postinc0	equ	0xFEE
 17521                           wreg	equ	0xFE8
 17522                           indf1	equ	0xFE7
 17523                           postdec1	equ	0xFE5
 17524                           fsr1h	equ	0xFE2
 17525                           fsr1l	equ	0xFE1
 17526                           indf2	equ	0xFDF
 17527                           postinc2	equ	0xFDE
 17528                           postdec2	equ	0xFDD
 17529                           plusw2	equ	0xFDB
 17530                           fsr2h	equ	0xFDA
 17531                           fsr2l	equ	0xFD9
 17532                           status	equ	0xFD8
 17533                           
 17534 ;; *************** function _delay_us *****************
 17535 ;; Defined at:
 17536 ;;		line 255 in file "Library/Types.c"
 17537 ;; Parameters:    Size  Location     Type
 17538 ;;  us              2    0[BANK0 ] unsigned short 
 17539 ;; Auto vars:     Size  Location     Type
 17540 ;;  u               4    2[BANK0 ] unsigned long 
 17541 ;; Return value:  Size  Location     Type
 17542 ;;                  1    wreg      void 
 17543 ;; Registers used:
 17544 ;;		wreg, status,2, status,0
 17545 ;; Tracked objects:
 17546 ;;		On entry : 0/0
 17547 ;;		On exit  : 0/0
 17548 ;;		Unchanged: 0/0
 17549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17550 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17551 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17554 ;;Total ram usage:        6 bytes
 17555 ;; Hardware stack levels used:    1
 17556 ;; Hardware stack levels required when called:    7
 17557 ;; This function calls:
 17558 ;;		Nothing
 17559 ;; This function is called by:
 17560 ;;		_MXK_BlockSwitchTo
 17561 ;;		_MXK_SwitchTo
 17562 ;; This function uses a non-reentrant model
 17563 ;;
 17564                           
 17565                           	psect	text77
 17566  015A90                     __ptext77:
 17567                           	opt stack 0
 17568  015A90                     _delay_us:
 17569                           	opt stack 21
 17570                           
 17571                           ;Types.c: 256: unsigned long u;
 17572                           ;Types.c: 257: while (us--) {
 17573                           
 17574                           ;incstack = 0
 17575  015A90  D01C               	goto	u9460
 17576  015A92                     l12774:
 17577                           
 17578                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17579  015A92  0E00               	movlw	0
 17580  015A94  0100               	movlb	0	; () banked
 17581  015A96  6F62               	movwf	delay_us@u& (0+255),b
 17582  015A98  0E00               	movlw	0
 17583  015A9A  6F63               	movwf	(delay_us@u+1)& (0+255),b
 17584  015A9C  0E00               	movlw	0
 17585  015A9E  6F64               	movwf	(delay_us@u+2)& (0+255),b
 17586  015AA0  0E00               	movlw	0
 17587  015AA2  6F65               	movwf	(delay_us@u+3)& (0+255),b
 17588  015AA4                     l12776:
 17589                           
 17590                           ; BSR set to: 0
 17591  015AA4  0100               	movlb	0	; () banked
 17592  015AA6  5162               	movf	delay_us@u& (0+255),w,b
 17593  015AA8  0100               	movlb	0	; () banked
 17594  015AAA  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 17595  015AAC  0100               	movlb	0	; () banked
 17596  015AAE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 17597  015AB0  0100               	movlb	0	; () banked
 17598  015AB2  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 17599  015AB4  A4D8               	btfss	status,2,c
 17600  015AB6  D009               	goto	u9460
 17601                           
 17602                           ; BSR set to: 0
 17603                           
 17604                           ; BSR set to: 0
 17605  015AB8  F000               	nop		; ;# 
 17606  015ABA  0E01               	movlw	1
 17607  015ABC  0100               	movlb	0	; () banked
 17608  015ABE  2762               	addwf	delay_us@u& (0+255),f,b
 17609  015AC0  0E00               	movlw	0
 17610  015AC2  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 17611  015AC4  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 17612  015AC6  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 17613  015AC8  D7ED               	goto	l12776
 17614  015ACA                     u9460:
 17615                           
 17616                           ; BSR set to: 0
 17617                           
 17618                           ; BSR set to: 0
 17619  015ACA  0100               	movlb	0	; () banked
 17620  015ACC  0760               	decf	delay_us@us& (0+255),f,b
 17621  015ACE  A0D8               	btfss	status,0,c
 17622  015AD0  0761               	decf	(delay_us@us+1)& (0+255),f,b
 17623  015AD2  0100               	movlb	0	; () banked
 17624  015AD4  2960               	incf	delay_us@us& (0+255),w,b
 17625  015AD6  E1DD               	bnz	l12774
 17626  015AD8  0100               	movlb	0	; () banked
 17627  015ADA  2961               	incf	(delay_us@us+1)& (0+255),w,b
 17628  015ADC  B4D8               	btfsc	status,2,c
 17629  015ADE  0012               	return	
 17630  015AE0  D7D8               	goto	l832
 17631  015AE2                     __end_of_delay_us:
 17632                           	opt stack 0
 17633                           tosu	equ	0xFFF
 17634                           tosh	equ	0xFFE
 17635                           tosl	equ	0xFFD
 17636                           pclath	equ	0xFFA
 17637                           tblptru	equ	0xFF8
 17638                           tblptrh	equ	0xFF7
 17639                           tblptrl	equ	0xFF6
 17640                           tablat	equ	0xFF5
 17641                           prodh	equ	0xFF4
 17642                           prodl	equ	0xFF3
 17643                           intcon	equ	0xFF2
 17644                           postinc0	equ	0xFEE
 17645                           wreg	equ	0xFE8
 17646                           indf1	equ	0xFE7
 17647                           postdec1	equ	0xFE5
 17648                           fsr1h	equ	0xFE2
 17649                           fsr1l	equ	0xFE1
 17650                           indf2	equ	0xFDF
 17651                           postinc2	equ	0xFDE
 17652                           postdec2	equ	0xFDD
 17653                           plusw2	equ	0xFDB
 17654                           fsr2h	equ	0xFDA
 17655                           fsr2l	equ	0xFD9
 17656                           status	equ	0xFD8
 17657                           
 17658 ;; *************** function _LCD_Init *****************
 17659 ;; Defined at:
 17660 ;;		line 172 in file "Library/LCD.c"
 17661 ;; Parameters:    Size  Location     Type
 17662 ;;		None
 17663 ;; Auto vars:     Size  Location     Type
 17664 ;;  i               2   55[BANK0 ] unsigned short 
 17665 ;; Return value:  Size  Location     Type
 17666 ;;                  1    wreg      void 
 17667 ;; Registers used:
 17668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17669 ;; Tracked objects:
 17670 ;;		On entry : 0/0
 17671 ;;		On exit  : 0/0
 17672 ;;		Unchanged: 0/0
 17673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17676 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17677 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17678 ;;Total ram usage:        4 bytes
 17679 ;; Hardware stack levels used:    1
 17680 ;; Hardware stack levels required when called:   15
 17681 ;; This function calls:
 17682 ;;		_Configure_GPIOs
 17683 ;;		_LCD_Fill
 17684 ;;		_LCD_Write
 17685 ;;		_Set_Rotation
 17686 ;;		_delay_ms
 17687 ;; This function is called by:
 17688 ;;		_init
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692                           	psect	text78
 17693  012F1A                     __ptext78:
 17694                           	opt stack 0
 17695  012F1A                     _LCD_Init:
 17696                           	opt stack 14
 17697                           
 17698                           ;LCD.c: 174: UINT16 i;
 17699                           ;LCD.c: 175: Configure_GPIOs();
 17700                           
 17701                           ; BSR set to: 0
 17702                           ;incstack = 0
 17703  012F1A  EC58  F0AA         	call	_Configure_GPIOs	;wreg free
 17704                           
 17705                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17706  012F1E  0E00               	movlw	0
 17707  012F20  0100               	movlb	0	; () banked
 17708  012F22  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 17709  012F24  0E00               	movlw	0
 17710  012F26  6F97               	movwf	LCD_Init@i& (0+255),b
 17711                           
 17712                           ; BSR set to: 0
 17713  012F28  0100               	movlb	0	; () banked
 17714  012F2A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17715  012F2C  E106               	bnz	u10820
 17716  012F2E  0E59               	movlw	89
 17717  012F30  0100               	movlb	0	; () banked
 17718  012F32  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17719  012F34  B0D8               	btfsc	status,0,c
 17720  012F36  D08B               	goto	u10860
 17721  012F38  D001               	goto	l85
 17722  012F3A                     u10820:
 17723                           
 17724                           ; BSR set to: 0
 17725  012F3A  D089               	goto	u10860
 17726  012F3C                     l85:
 17727                           
 17728                           ; BSR set to: 0
 17729                           ;LCD.c: 178: {
 17730                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17731                           
 17732                           ; BSR set to: 0
 17733  012F3C  90D8               	bcf	status,0,c
 17734  012F3E  0100               	movlb	0	; () banked
 17735  012F40  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17736  012F42  6EF6               	movwf	tblptrl,c
 17737  012F44  0100               	movlb	0	; () banked
 17738  012F46  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17739  012F48  6EF7               	movwf	tblptrh,c
 17740  012F4A  0E7F               	movlw	low _InitList
 17741  012F4C  26F6               	addwf	tblptrl,f,c
 17742  012F4E  0EFC               	movlw	high _InitList
 17743  012F50  22F7               	addwfc	tblptrh,f,c
 17744  012F52                     	if	1	;There are 3 active tblptr bytes
 17745  012F52  6AF8               	clrf	tblptru,c
 17746  012F54  0E00               	movlw	low (__mediumconst shr (0+16))
 17747  012F56  22F8               	addwfc	tblptru,f,c
 17748  012F58                     	endif
 17749  012F58  0009               	tblrd		*+
 17750  012F5A  0E80               	movlw	128
 17751  012F5C  18F5               	xorwf	tablat,w,c
 17752  012F5E  0009               	tblrd		*+
 17753  012F60  10F5               	iorwf	tablat,w,c
 17754  012F62  A4D8               	btfss	status,2,c
 17755  012F64  D022               	goto	l87
 17756                           
 17757                           ; BSR set to: 0
 17758  012F66  0100               	movlb	0	; () banked
 17759  012F68  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17760  012F6A  E11F               	bnz	l14114
 17761  012F6C  0E58               	movlw	88
 17762  012F6E  0100               	movlb	0	; () banked
 17763  012F70  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17764  012F72  B0D8               	btfsc	status,0,c
 17765  012F74  D01A               	goto	l87
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17769  012F76  0100               	movlb	0	; () banked
 17770  012F78  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17771  012F7A  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17772  012F7C  90D8               	bcf	status,0,c
 17773  012F7E  0100               	movlb	0	; () banked
 17774  012F80  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17775  012F82  6EF6               	movwf	tblptrl,c
 17776  012F84  0100               	movlb	0	; () banked
 17777  012F86  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17778  012F88  6EF7               	movwf	tblptrh,c
 17779  012F8A  0E7F               	movlw	low _InitList
 17780  012F8C  26F6               	addwf	tblptrl,f,c
 17781  012F8E  0EFC               	movlw	high _InitList
 17782  012F90  22F7               	addwfc	tblptrh,f,c
 17783  012F92                     	if	1	;There are 3 active tblptr bytes
 17784  012F92  6AF8               	clrf	tblptru,c
 17785  012F94  0E00               	movlw	low (__mediumconst shr (0+16))
 17786  012F96  22F8               	addwfc	tblptru,f,c
 17787  012F98                     	endif
 17788  012F98  0009               	tblrd		*+
 17789  012F9A  CFF5 F060          	movff	tablat,delay_ms@ms
 17790  012F9E  000A               	tblrd		*-
 17791  012FA0  CFF5 F061          	movff	tablat,delay_ms@ms+1
 17792  012FA4  EC31  F0AB         	call	_delay_ms	;wreg free
 17793  012FA8  D04B               	goto	l90
 17794  012FAA                     l87:
 17795  012FAA                     l14114:
 17796                           
 17797                           ;LCD.c: 181: else
 17798                           ;LCD.c: 182: {
 17799                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17800  012FAA  90D8               	bcf	status,0,c
 17801  012FAC  0100               	movlb	0	; () banked
 17802  012FAE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17803  012FB0  6EF6               	movwf	tblptrl,c
 17804  012FB2  0100               	movlb	0	; () banked
 17805  012FB4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17806  012FB6  6EF7               	movwf	tblptrh,c
 17807  012FB8  0E7F               	movlw	low _InitList
 17808  012FBA  26F6               	addwf	tblptrl,f,c
 17809  012FBC  0EFC               	movlw	high _InitList
 17810  012FBE  22F7               	addwfc	tblptrh,f,c
 17811  012FC0                     	if	1	;There are 3 active tblptr bytes
 17812  012FC0  6AF8               	clrf	tblptru,c
 17813  012FC2  0E00               	movlw	low (__mediumconst shr (0+16))
 17814  012FC4  22F8               	addwfc	tblptru,f,c
 17815  012FC6                     	endif
 17816  012FC6  0009               	tblrd		*+
 17817  012FC8  0E00               	movlw	0
 17818  012FCA  5EF5               	subwf	tablat,f,c
 17819  012FCC  0009               	tblrd		*+
 17820  012FCE  0E01               	movlw	1
 17821  012FD0  5AF5               	subwfb	tablat,f,c
 17822  012FD2  A0D8               	btfss	status,0,c
 17823  012FD4  D020               	goto	l89
 17824                           
 17825                           ; BSR set to: 0
 17826  012FD6  0E00               	movlw	0
 17827  012FD8  0100               	movlb	0	; () banked
 17828  012FDA  6F63               	movwf	LCD_Write@mode& (0+255),b
 17829  012FDC  90D8               	bcf	status,0,c
 17830  012FDE  0100               	movlb	0	; () banked
 17831  012FE0  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17832  012FE2  6EF6               	movwf	tblptrl,c
 17833  012FE4  0100               	movlb	0	; () banked
 17834  012FE6  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17835  012FE8  6EF7               	movwf	tblptrh,c
 17836  012FEA  0E7F               	movlw	low _InitList
 17837  012FEC  26F6               	addwf	tblptrl,f,c
 17838  012FEE  0EFC               	movlw	high _InitList
 17839  012FF0  22F7               	addwfc	tblptrh,f,c
 17840  012FF2                     	if	1	;There are 3 active tblptr bytes
 17841  012FF2  6AF8               	clrf	tblptru,c
 17842  012FF4  0E00               	movlw	low (__mediumconst shr (0+16))
 17843  012FF6  22F8               	addwfc	tblptru,f,c
 17844  012FF8                     	endif
 17845  012FF8  0009               	tblrd		*+
 17846  012FFA  CFF5 F095          	movff	tablat,??_LCD_Init
 17847  012FFE  0009               	tblrd		*+
 17848  013000  CFF5 F096          	movff	tablat,??_LCD_Init+1
 17849  013004  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 17850  013008  0100               	movlb	0	; () banked
 17851  01300A  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 17852  01300C  0100               	movlb	0	; () banked
 17853  01300E  5195               	movf	??_LCD_Init& (0+255),w,b
 17854  013010  EC68  F0B1         	call	_LCD_Write
 17855  013014  D015               	goto	l90
 17856  013016                     l89:
 17857                           
 17858                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17859  013016  0E01               	movlw	1
 17860  013018  0100               	movlb	0	; () banked
 17861  01301A  6F63               	movwf	LCD_Write@mode& (0+255),b
 17862  01301C  90D8               	bcf	status,0,c
 17863  01301E  0100               	movlb	0	; () banked
 17864  013020  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17865  013022  6EF6               	movwf	tblptrl,c
 17866  013024  0100               	movlb	0	; () banked
 17867  013026  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17868  013028  6EF7               	movwf	tblptrh,c
 17869  01302A  0E7F               	movlw	low _InitList
 17870  01302C  26F6               	addwf	tblptrl,f,c
 17871  01302E  0EFC               	movlw	high _InitList
 17872  013030  22F7               	addwfc	tblptrh,f,c
 17873  013032                     	if	1	;There are 3 active tblptr bytes
 17874  013032  6AF8               	clrf	tblptru,c
 17875  013034  0E00               	movlw	low (__mediumconst shr (0+16))
 17876  013036  22F8               	addwfc	tblptru,f,c
 17877  013038                     	endif
 17878  013038  0008               	tblrd		*
 17879  01303A  50F5               	movf	tablat,w,c
 17880  01303C  EC68  F0B1         	call	_LCD_Write
 17881  013040                     l90:
 17882  013040  0100               	movlb	0	; () banked
 17883  013042  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17884  013044  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17885                           
 17886                           ; BSR set to: 0
 17887  013046  0100               	movlb	0	; () banked
 17888  013048  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17889  01304A  E101               	bnz	l14124
 17890  01304C  D770               	goto	L12
 17891  01304E                     u10860:
 17892  01304E                     l14124:
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;LCD.c: 185: }
 17896                           ;LCD.c: 186: }
 17897                           ;LCD.c: 187: delay_ms(100);
 17898  01304E  0E00               	movlw	0
 17899  013050  0100               	movlb	0	; () banked
 17900  013052  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17901  013054  0E64               	movlw	100
 17902  013056  6F60               	movwf	delay_ms@ms& (0+255),b
 17903  013058  EC31  F0AB         	call	_delay_ms	;wreg free
 17904                           
 17905                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 17906  01305C  0E00               	movlw	0
 17907  01305E  0100               	movlb	0	; () banked
 17908  013060  6F63               	movwf	LCD_Write@mode& (0+255),b
 17909  013062  0E29               	movlw	41
 17910  013064  EC68  F0B1         	call	_LCD_Write
 17911                           
 17912                           ;LCD.c: 189: Set_Rotation(1);
 17913  013068  0E01               	movlw	1
 17914  01306A  EC0F  F0A6         	call	_Set_Rotation
 17915                           
 17916                           ;LCD.c: 191: delay_ms(100);
 17917  01306E  0E00               	movlw	0
 17918  013070  0100               	movlb	0	; () banked
 17919  013072  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17920  013074  0E64               	movlw	100
 17921  013076  6F60               	movwf	delay_ms@ms& (0+255),b
 17922  013078  EC31  F0AB         	call	_delay_ms	;wreg free
 17923                           
 17924                           ;LCD.c: 192: LCD_Fill(0x0000);
 17925  01307C  0E00               	movlw	0
 17926  01307E  0100               	movlb	0	; () banked
 17927  013080  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 17928  013082  0E00               	movlw	0
 17929  013084  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 17930  013086  EC1C  F0AD         	call	_LCD_Fill	;wreg free
 17931  01308A  0012               	return		;funcret
 17932  01308C                     __end_of_LCD_Init:
 17933                           	opt stack 0
 17934                           tosu	equ	0xFFF
 17935                           tosh	equ	0xFFE
 17936                           tosl	equ	0xFFD
 17937                           pclath	equ	0xFFA
 17938                           tblptru	equ	0xFF8
 17939                           tblptrh	equ	0xFF7
 17940                           tblptrl	equ	0xFF6
 17941                           tablat	equ	0xFF5
 17942                           prodh	equ	0xFF4
 17943                           prodl	equ	0xFF3
 17944                           intcon	equ	0xFF2
 17945                           postinc0	equ	0xFEE
 17946                           wreg	equ	0xFE8
 17947                           indf1	equ	0xFE7
 17948                           postdec1	equ	0xFE5
 17949                           fsr1h	equ	0xFE2
 17950                           fsr1l	equ	0xFE1
 17951                           indf2	equ	0xFDF
 17952                           postinc2	equ	0xFDE
 17953                           postdec2	equ	0xFDD
 17954                           plusw2	equ	0xFDB
 17955                           fsr2h	equ	0xFDA
 17956                           fsr2l	equ	0xFD9
 17957                           status	equ	0xFD8
 17958                           
 17959 ;; *************** function _Set_Rotation *****************
 17960 ;; Defined at:
 17961 ;;		line 248 in file "Library/LCD.c"
 17962 ;; Parameters:    Size  Location     Type
 17963 ;;  m               1    wreg     unsigned char 
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;  m               1    5[BANK0 ] unsigned char 
 17966 ;;  rotation        1    6[BANK0 ] unsigned char 
 17967 ;; Return value:  Size  Location     Type
 17968 ;;                  1    wreg      void 
 17969 ;; Registers used:
 17970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17971 ;; Tracked objects:
 17972 ;;		On entry : 0/0
 17973 ;;		On exit  : 0/0
 17974 ;;		Unchanged: 0/0
 17975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17980 ;;Total ram usage:        2 bytes
 17981 ;; Hardware stack levels used:    1
 17982 ;; Hardware stack levels required when called:    9
 17983 ;; This function calls:
 17984 ;;		_LCD_Write
 17985 ;; This function is called by:
 17986 ;;		_LCD_Init
 17987 ;; This function uses a non-reentrant model
 17988 ;;
 17989                           
 17990                           	psect	text79
 17991  014C1E                     __ptext79:
 17992                           	opt stack 0
 17993  014C1E                     _Set_Rotation:
 17994                           	opt stack 19
 17995                           
 17996                           ;incstack = 0
 17997                           ;Set_Rotation@m stored from wreg
 17998  014C1E  0100               	movlb	0	; () banked
 17999  014C20  6F65               	movwf	Set_Rotation@m& (0+255),b
 18000                           
 18001                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18002  014C22  0E00               	movlw	0
 18003  014C24  0100               	movlb	0	; () banked
 18004  014C26  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18008  014C28  0E00               	movlw	0
 18009  014C2A  0100               	movlb	0	; () banked
 18010  014C2C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18011  014C2E  0E36               	movlw	54
 18012  014C30  EC68  F0B1         	call	_LCD_Write
 18013                           
 18014                           ;LCD.c: 253: rotation = (m % 4);
 18015  014C34  0100               	movlb	0	; () banked
 18016  014C36  5165               	movf	Set_Rotation@m& (0+255),w,b
 18017  014C38  0B03               	andlw	3
 18018  014C3A  0100               	movlb	0	; () banked
 18019  014C3C  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 18020                           
 18021                           ;LCD.c: 255: switch(rotation)
 18022  014C3E  D02C               	goto	l117
 18023  014C40                     
 18024                           ; BSR set to: 0
 18025                           ;LCD.c: 258: {
 18026                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18027                           
 18028                           ; BSR set to: 0
 18029  014C40  0E01               	movlw	1
 18030  014C42  0100               	movlb	0	; () banked
 18031  014C44  6F63               	movwf	LCD_Write@mode& (0+255),b
 18032  014C46  0EC8               	movlw	200
 18033  014C48  EC68  F0B1         	call	_LCD_Write
 18034                           
 18035                           ;LCD.c: 260: w = 128;
 18036  014C4C  0E80               	movlw	128
 18037  014C4E  6E50               	movwf	_w,c
 18038                           
 18039                           ;LCD.c: 261: l = 128;
 18040  014C50  0E80               	movlw	128
 18041  014C52  6E4F               	movwf	_l,c
 18042                           
 18043                           ;LCD.c: 262: break;
 18044  014C54  0012               	return	
 18045  014C56                     
 18046                           ;LCD.c: 265: {
 18047                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18048  014C56  0E01               	movlw	1
 18049  014C58  0100               	movlb	0	; () banked
 18050  014C5A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18051  014C5C  0EA8               	movlw	168
 18052  014C5E  EC68  F0B1         	call	_LCD_Write
 18053                           
 18054                           ;LCD.c: 267: w = 128;
 18055  014C62  0E80               	movlw	128
 18056  014C64  6E50               	movwf	_w,c
 18057                           
 18058                           ;LCD.c: 268: l = 128;
 18059  014C66  0E80               	movlw	128
 18060  014C68  6E4F               	movwf	_l,c
 18061                           
 18062                           ;LCD.c: 269: break;
 18063  014C6A  0012               	return	
 18064  014C6C                     
 18065                           ;LCD.c: 272: {
 18066                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18067  014C6C  0E01               	movlw	1
 18068  014C6E  0100               	movlb	0	; () banked
 18069  014C70  6F63               	movwf	LCD_Write@mode& (0+255),b
 18070  014C72  0E08               	movlw	8
 18071  014C74  EC68  F0B1         	call	_LCD_Write
 18072                           
 18073                           ;LCD.c: 274: w = 128;
 18074  014C78  0E80               	movlw	128
 18075  014C7A  6E50               	movwf	_w,c
 18076                           
 18077                           ;LCD.c: 275: l = 128;
 18078  014C7C  0E80               	movlw	128
 18079  014C7E  6E4F               	movwf	_l,c
 18080                           
 18081                           ;LCD.c: 276: break;
 18082  014C80  0012               	return	
 18083  014C82                     
 18084                           ;LCD.c: 279: {
 18085                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18086  014C82  0E01               	movlw	1
 18087  014C84  0100               	movlb	0	; () banked
 18088  014C86  6F63               	movwf	LCD_Write@mode& (0+255),b
 18089  014C88  0E68               	movlw	104
 18090  014C8A  EC68  F0B1         	call	_LCD_Write
 18091                           
 18092                           ;LCD.c: 281: w = 128;
 18093  014C8E  0E80               	movlw	128
 18094  014C90  6E50               	movwf	_w,c
 18095                           
 18096                           ;LCD.c: 282: l = 128;
 18097  014C92  0E80               	movlw	128
 18098  014C94  6E4F               	movwf	_l,c
 18099                           
 18100                           ;LCD.c: 284: }
 18101                           ;LCD.c: 285: }
 18102                           
 18103                           ;LCD.c: 283: break;
 18104  014C96  0012               	return	
 18105  014C98                     l117:
 18106  014C98  0100               	movlb	0	; () banked
 18107  014C9A  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 18108                           
 18109                           ; Switch size 1, requested type "space"
 18110                           ; Number of cases is 4, Range of values is 0 to 3
 18111                           ; switch strategies available:
 18112                           ; Name         Instructions Cycles
 18113                           ; simple_byte           13     7 (average)
 18114                           ;	Chosen strategy is simple_byte
 18115  014C9C  0A00               	xorlw	0	; case 0
 18116  014C9E  B4D8               	btfsc	status,2,c
 18117  014CA0  D7CF               	goto	l118
 18118  014CA2  0A01               	xorlw	1	; case 1
 18119  014CA4  B4D8               	btfsc	status,2,c
 18120  014CA6  D7D7               	goto	l120
 18121  014CA8  0A03               	xorlw	3	; case 2
 18122  014CAA  B4D8               	btfsc	status,2,c
 18123  014CAC  D7DF               	goto	l121
 18124  014CAE  0A01               	xorlw	1	; case 3
 18125  014CB0  A4D8               	btfss	status,2,c
 18126  014CB2  0012               	return	
 18127  014CB4  D7E6               	goto	l122
 18128  014CB6                     __end_of_Set_Rotation:
 18129                           	opt stack 0
 18130                           tosu	equ	0xFFF
 18131                           tosh	equ	0xFFE
 18132                           tosl	equ	0xFFD
 18133                           pclath	equ	0xFFA
 18134                           tblptru	equ	0xFF8
 18135                           tblptrh	equ	0xFF7
 18136                           tblptrl	equ	0xFF6
 18137                           tablat	equ	0xFF5
 18138                           prodh	equ	0xFF4
 18139                           prodl	equ	0xFF3
 18140                           intcon	equ	0xFF2
 18141                           postinc0	equ	0xFEE
 18142                           wreg	equ	0xFE8
 18143                           indf1	equ	0xFE7
 18144                           postdec1	equ	0xFE5
 18145                           fsr1h	equ	0xFE2
 18146                           fsr1l	equ	0xFE1
 18147                           indf2	equ	0xFDF
 18148                           postinc2	equ	0xFDE
 18149                           postdec2	equ	0xFDD
 18150                           plusw2	equ	0xFDB
 18151                           fsr2h	equ	0xFDA
 18152                           fsr2l	equ	0xFD9
 18153                           status	equ	0xFD8
 18154                           
 18155 ;; *************** function _LCD_Fill *****************
 18156 ;; Defined at:
 18157 ;;		line 287 in file "Library/LCD.c"
 18158 ;; Parameters:    Size  Location     Type
 18159 ;;  pColour         2    9[BANK0 ] unsigned short 
 18160 ;; Auto vars:     Size  Location     Type
 18161 ;;  j               1   12[BANK0 ] unsigned char 
 18162 ;;  i               1   11[BANK0 ] unsigned char 
 18163 ;; Return value:  Size  Location     Type
 18164 ;;                  1    wreg      void 
 18165 ;; Registers used:
 18166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18167 ;; Tracked objects:
 18168 ;;		On entry : 0/0
 18169 ;;		On exit  : 0/0
 18170 ;;		Unchanged: 0/0
 18171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18172 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18176 ;;Total ram usage:        4 bytes
 18177 ;; Hardware stack levels used:    1
 18178 ;; Hardware stack levels required when called:   10
 18179 ;; This function calls:
 18180 ;;		_LCD_Word_Write
 18181 ;;		_Set_Addr_Window
 18182 ;; This function is called by:
 18183 ;;		_LCD_Init
 18184 ;; This function uses a non-reentrant model
 18185 ;;
 18186                           
 18187                           	psect	text80
 18188  015A38                     __ptext80:
 18189                           	opt stack 0
 18190  015A38                     _LCD_Fill:
 18191                           	opt stack 18
 18192                           
 18193                           ;LCD.c: 296: UINT8 i = 0x00;
 18194                           
 18195                           ;incstack = 0
 18196  015A38  0E00               	movlw	0
 18197  015A3A  0100               	movlb	0	; () banked
 18198  015A3C  6F6B               	movwf	LCD_Fill@i& (0+255),b
 18199                           
 18200                           ;LCD.c: 297: UINT8 j = 0x00;
 18201  015A3E  0E00               	movlw	0
 18202  015A40  0100               	movlb	0	; () banked
 18203  015A42  6F6C               	movwf	LCD_Fill@j& (0+255),b
 18204                           
 18205                           ; BSR set to: 0
 18206                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18207  015A44  0E00               	movlw	0
 18208  015A46  0100               	movlb	0	; () banked
 18209  015A48  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 18210  015A4A  0450               	decf	_w,w,c
 18211  015A4C  0100               	movlb	0	; () banked
 18212  015A4E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 18213  015A50  044F               	decf	_l,w,c
 18214  015A52  0100               	movlb	0	; () banked
 18215  015A54  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 18216  015A56  0E00               	movlw	0
 18217  015A58  EC28  F0A3         	call	_Set_Addr_Window
 18218                           
 18219                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18220  015A5C  C04F  F06C         	movff	_l,LCD_Fill@j
 18221  015A60                     l13462:
 18222  015A60  0100               	movlb	0	; () banked
 18223  015A62  516C               	movf	LCD_Fill@j& (0+255),w,b
 18224  015A64  0100               	movlb	0	; () banked
 18225  015A66  B4D8               	btfsc	status,2,c
 18226  015A68  0012               	return	
 18227                           
 18228                           ; BSR set to: 0
 18229                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18230                           
 18231                           ; BSR set to: 0
 18232  015A6A  C050  F06B         	movff	_w,LCD_Fill@i
 18233  015A6E                     l13466:
 18234                           
 18235                           ; BSR set to: 0
 18236  015A6E  0100               	movlb	0	; () banked
 18237  015A70  516B               	movf	LCD_Fill@i& (0+255),w,b
 18238  015A72  0100               	movlb	0	; () banked
 18239  015A74  B4D8               	btfsc	status,2,c
 18240  015A76  D009               	goto	u9920
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18244                           
 18245                           ; BSR set to: 0
 18246                           
 18247                           ; BSR set to: 0
 18248  015A78  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18249  015A7C  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18250  015A80  ECC9  F0B1         	call	_LCD_Word_Write	;wreg free
 18251  015A84  0100               	movlb	0	; () banked
 18252  015A86  076B               	decf	LCD_Fill@i& (0+255),f,b
 18253  015A88  D7F2               	goto	l13466
 18254  015A8A                     u9920:
 18255                           
 18256                           ; BSR set to: 0
 18257                           
 18258                           ; BSR set to: 0
 18259  015A8A  0100               	movlb	0	; () banked
 18260  015A8C  076C               	decf	LCD_Fill@j& (0+255),f,b
 18261  015A8E  D7E8               	goto	l13462
 18262  015A90                     __end_of_LCD_Fill:
 18263                           	opt stack 0
 18264                           tosu	equ	0xFFF
 18265                           tosh	equ	0xFFE
 18266                           tosl	equ	0xFFD
 18267                           pclath	equ	0xFFA
 18268                           tblptru	equ	0xFF8
 18269                           tblptrh	equ	0xFF7
 18270                           tblptrl	equ	0xFF6
 18271                           tablat	equ	0xFF5
 18272                           prodh	equ	0xFF4
 18273                           prodl	equ	0xFF3
 18274                           intcon	equ	0xFF2
 18275                           postinc0	equ	0xFEE
 18276                           wreg	equ	0xFE8
 18277                           indf1	equ	0xFE7
 18278                           postdec1	equ	0xFE5
 18279                           fsr1h	equ	0xFE2
 18280                           fsr1l	equ	0xFE1
 18281                           indf2	equ	0xFDF
 18282                           postinc2	equ	0xFDE
 18283                           postdec2	equ	0xFDD
 18284                           plusw2	equ	0xFDB
 18285                           fsr2h	equ	0xFDA
 18286                           fsr2l	equ	0xFD9
 18287                           status	equ	0xFD8
 18288                           
 18289 ;; *************** function _Set_Addr_Window *****************
 18290 ;; Defined at:
 18291 ;;		line 214 in file "Library/LCD.c"
 18292 ;; Parameters:    Size  Location     Type
 18293 ;;  xs              1    wreg     unsigned char 
 18294 ;;  ys              1    5[BANK0 ] unsigned char 
 18295 ;;  xe              1    6[BANK0 ] unsigned char 
 18296 ;;  ye              1    7[BANK0 ] unsigned char 
 18297 ;; Auto vars:     Size  Location     Type
 18298 ;;  xs              1    8[BANK0 ] unsigned char 
 18299 ;; Return value:  Size  Location     Type
 18300 ;;                  1    wreg      void 
 18301 ;; Registers used:
 18302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18303 ;; Tracked objects:
 18304 ;;		On entry : 0/0
 18305 ;;		On exit  : 0/0
 18306 ;;		Unchanged: 0/0
 18307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18308 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18311 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;Total ram usage:        4 bytes
 18313 ;; Hardware stack levels used:    1
 18314 ;; Hardware stack levels required when called:    9
 18315 ;; This function calls:
 18316 ;;		_LCD_Write
 18317 ;; This function is called by:
 18318 ;;		_LCD_Fill
 18319 ;;		_LCD_FillRectangle
 18320 ;;		_LCD_DrawField
 18321 ;;		_RAM_Address_Set
 18322 ;;		_LCD_DrawPixel
 18323 ;; This function uses a non-reentrant model
 18324 ;;
 18325                           
 18326                           	psect	text81
 18327  014650                     __ptext81:
 18328                           	opt stack 0
 18329  014650                     _Set_Addr_Window:
 18330                           	opt stack 18
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;incstack = 0
 18334                           ;Set_Addr_Window@xs stored from wreg
 18335  014650  0100               	movlb	0	; () banked
 18336  014652  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 18337                           
 18338                           ;LCD.c: 216: ys+=2;
 18339  014654  0E02               	movlw	2
 18340  014656  0100               	movlb	0	; () banked
 18341  014658  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18342                           
 18343                           ;LCD.c: 217: ye+=2;
 18344  01465A  0E02               	movlw	2
 18345  01465C  0100               	movlb	0	; () banked
 18346  01465E  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18347                           
 18348                           ;LCD.c: 218: xs+=3;
 18349  014660  0E03               	movlw	3
 18350  014662  0100               	movlb	0	; () banked
 18351  014664  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18352                           
 18353                           ;LCD.c: 219: xe+=3;
 18354  014666  0E03               	movlw	3
 18355  014668  0100               	movlb	0	; () banked
 18356  01466A  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18357                           
 18358                           ; BSR set to: 0
 18359                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18360  01466C  0E00               	movlw	0
 18361  01466E  0100               	movlb	0	; () banked
 18362  014670  6F63               	movwf	LCD_Write@mode& (0+255),b
 18363  014672  0E2A               	movlw	42
 18364  014674  EC68  F0B1         	call	_LCD_Write
 18365                           
 18366                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18367  014678  0E01               	movlw	1
 18368  01467A  0100               	movlb	0	; () banked
 18369  01467C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18370  01467E  0E00               	movlw	0
 18371  014680  EC68  F0B1         	call	_LCD_Write
 18372                           
 18373                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18374  014684  0E01               	movlw	1
 18375  014686  0100               	movlb	0	; () banked
 18376  014688  6F63               	movwf	LCD_Write@mode& (0+255),b
 18377  01468A  0100               	movlb	0	; () banked
 18378  01468C  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 18379  01468E  EC68  F0B1         	call	_LCD_Write
 18380                           
 18381                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18382  014692  0E01               	movlw	1
 18383  014694  0100               	movlb	0	; () banked
 18384  014696  6F63               	movwf	LCD_Write@mode& (0+255),b
 18385  014698  0E00               	movlw	0
 18386  01469A  EC68  F0B1         	call	_LCD_Write
 18387                           
 18388                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18389  01469E  0E01               	movlw	1
 18390  0146A0  0100               	movlb	0	; () banked
 18391  0146A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 18392  0146A4  0100               	movlb	0	; () banked
 18393  0146A6  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 18394  0146A8  EC68  F0B1         	call	_LCD_Write
 18395                           
 18396                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18397  0146AC  0E00               	movlw	0
 18398  0146AE  0100               	movlb	0	; () banked
 18399  0146B0  6F63               	movwf	LCD_Write@mode& (0+255),b
 18400  0146B2  0E2B               	movlw	43
 18401  0146B4  EC68  F0B1         	call	_LCD_Write
 18402                           
 18403                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18404  0146B8  0E01               	movlw	1
 18405  0146BA  0100               	movlb	0	; () banked
 18406  0146BC  6F63               	movwf	LCD_Write@mode& (0+255),b
 18407  0146BE  0E00               	movlw	0
 18408  0146C0  EC68  F0B1         	call	_LCD_Write
 18409                           
 18410                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18411  0146C4  0E01               	movlw	1
 18412  0146C6  0100               	movlb	0	; () banked
 18413  0146C8  6F63               	movwf	LCD_Write@mode& (0+255),b
 18414  0146CA  0100               	movlb	0	; () banked
 18415  0146CC  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 18416  0146CE  EC68  F0B1         	call	_LCD_Write
 18417                           
 18418                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18419  0146D2  0E01               	movlw	1
 18420  0146D4  0100               	movlb	0	; () banked
 18421  0146D6  6F63               	movwf	LCD_Write@mode& (0+255),b
 18422  0146D8  0E00               	movlw	0
 18423  0146DA  EC68  F0B1         	call	_LCD_Write
 18424                           
 18425                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18426  0146DE  0E01               	movlw	1
 18427  0146E0  0100               	movlb	0	; () banked
 18428  0146E2  6F63               	movwf	LCD_Write@mode& (0+255),b
 18429  0146E4  0100               	movlb	0	; () banked
 18430  0146E6  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 18431  0146E8  EC68  F0B1         	call	_LCD_Write
 18432                           
 18433                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18434  0146EC  0E00               	movlw	0
 18435  0146EE  0100               	movlb	0	; () banked
 18436  0146F0  6F63               	movwf	LCD_Write@mode& (0+255),b
 18437  0146F2  0E2C               	movlw	44
 18438  0146F4  EC68  F0B1         	call	_LCD_Write
 18439  0146F8  0012               	return		;funcret
 18440  0146FA                     __end_of_Set_Addr_Window:
 18441                           	opt stack 0
 18442                           tosu	equ	0xFFF
 18443                           tosh	equ	0xFFE
 18444                           tosl	equ	0xFFD
 18445                           pclath	equ	0xFFA
 18446                           tblptru	equ	0xFF8
 18447                           tblptrh	equ	0xFF7
 18448                           tblptrl	equ	0xFF6
 18449                           tablat	equ	0xFF5
 18450                           prodh	equ	0xFF4
 18451                           prodl	equ	0xFF3
 18452                           intcon	equ	0xFF2
 18453                           postinc0	equ	0xFEE
 18454                           wreg	equ	0xFE8
 18455                           indf1	equ	0xFE7
 18456                           postdec1	equ	0xFE5
 18457                           fsr1h	equ	0xFE2
 18458                           fsr1l	equ	0xFE1
 18459                           indf2	equ	0xFDF
 18460                           postinc2	equ	0xFDE
 18461                           postdec2	equ	0xFDD
 18462                           plusw2	equ	0xFDB
 18463                           fsr2h	equ	0xFDA
 18464                           fsr2l	equ	0xFD9
 18465                           status	equ	0xFD8
 18466                           
 18467 ;; *************** function _LCD_Word_Write *****************
 18468 ;; Defined at:
 18469 ;;		line 198 in file "Library/LCD.c"
 18470 ;; Parameters:    Size  Location     Type
 18471 ;;  value           2    5[BANK0 ] unsigned short 
 18472 ;; Auto vars:     Size  Location     Type
 18473 ;;		None
 18474 ;; Return value:  Size  Location     Type
 18475 ;;                  1    wreg      void 
 18476 ;; Registers used:
 18477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18478 ;; Tracked objects:
 18479 ;;		On entry : 0/0
 18480 ;;		On exit  : 0/0
 18481 ;;		Unchanged: 0/0
 18482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18483 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18487 ;;Total ram usage:        2 bytes
 18488 ;; Hardware stack levels used:    1
 18489 ;; Hardware stack levels required when called:    9
 18490 ;; This function calls:
 18491 ;;		_LCD_Write
 18492 ;; This function is called by:
 18493 ;;		_LCD_Fill
 18494 ;;		_LCD_FillRectangle
 18495 ;;		_LCD_DrawField
 18496 ;;		_LCD_DrawPixel
 18497 ;; This function uses a non-reentrant model
 18498 ;;
 18499                           
 18500                           	psect	text82
 18501  016392                     __ptext82:
 18502                           	opt stack 0
 18503  016392                     _LCD_Word_Write:
 18504                           	opt stack 18
 18505                           
 18506                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18507                           
 18508                           ;incstack = 0
 18509  016392  0E01               	movlw	1
 18510  016394  0100               	movlb	0	; () banked
 18511  016396  6F63               	movwf	LCD_Write@mode& (0+255),b
 18512  016398  0100               	movlb	0	; () banked
 18513  01639A  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18514  01639C  EC68  F0B1         	call	_LCD_Write
 18515                           
 18516                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18517  0163A0  0E01               	movlw	1
 18518  0163A2  0100               	movlb	0	; () banked
 18519  0163A4  6F63               	movwf	LCD_Write@mode& (0+255),b
 18520  0163A6  0100               	movlb	0	; () banked
 18521  0163A8  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 18522  0163AA  EC68  F0B1         	call	_LCD_Write
 18523  0163AE  0012               	return		;funcret
 18524  0163B0                     __end_of_LCD_Word_Write:
 18525                           	opt stack 0
 18526                           tosu	equ	0xFFF
 18527                           tosh	equ	0xFFE
 18528                           tosl	equ	0xFFD
 18529                           pclath	equ	0xFFA
 18530                           tblptru	equ	0xFF8
 18531                           tblptrh	equ	0xFF7
 18532                           tblptrl	equ	0xFF6
 18533                           tablat	equ	0xFF5
 18534                           prodh	equ	0xFF4
 18535                           prodl	equ	0xFF3
 18536                           intcon	equ	0xFF2
 18537                           postinc0	equ	0xFEE
 18538                           wreg	equ	0xFE8
 18539                           indf1	equ	0xFE7
 18540                           postdec1	equ	0xFE5
 18541                           fsr1h	equ	0xFE2
 18542                           fsr1l	equ	0xFE1
 18543                           indf2	equ	0xFDF
 18544                           postinc2	equ	0xFDE
 18545                           postdec2	equ	0xFDD
 18546                           plusw2	equ	0xFDB
 18547                           fsr2h	equ	0xFDA
 18548                           fsr2l	equ	0xFD9
 18549                           status	equ	0xFD8
 18550                           
 18551 ;; *************** function _LCD_Write *****************
 18552 ;; Defined at:
 18553 ;;		line 67 in file "Library/LCD.c"
 18554 ;; Parameters:    Size  Location     Type
 18555 ;;  value           1    wreg     unsigned char 
 18556 ;;  mode            1    3[BANK0 ] enum E6761
 18557 ;; Auto vars:     Size  Location     Type
 18558 ;;  value           1    4[BANK0 ] unsigned char 
 18559 ;; Return value:  Size  Location     Type
 18560 ;;                  1    wreg      void 
 18561 ;; Registers used:
 18562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18563 ;; Tracked objects:
 18564 ;;		On entry : 0/0
 18565 ;;		On exit  : 0/0
 18566 ;;		Unchanged: 0/0
 18567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18568 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18572 ;;Total ram usage:        2 bytes
 18573 ;; Hardware stack levels used:    1
 18574 ;; Hardware stack levels required when called:    8
 18575 ;; This function calls:
 18576 ;;		_Mode_Set
 18577 ;;		_SPI_Send
 18578 ;; This function is called by:
 18579 ;;		_LCD_Init
 18580 ;;		_LCD_Word_Write
 18581 ;;		_Set_Addr_Window
 18582 ;;		_Set_Rotation
 18583 ;;		_LCD_WriteCMD
 18584 ;;		_LCD_WriteData
 18585 ;;		_LCD_Data_Write
 18586 ;;		_LCD_Data_Write_4k
 18587 ;;		_Invert_Display
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591                           	psect	text83
 18592  0162D0                     __ptext83:
 18593                           	opt stack 0
 18594  0162D0                     _LCD_Write:
 18595                           	opt stack 18
 18596                           
 18597                           ;incstack = 0
 18598                           ;LCD_Write@value stored from wreg
 18599  0162D0  0100               	movlb	0	; () banked
 18600  0162D2  6F64               	movwf	LCD_Write@value& (0+255),b
 18601                           
 18602                           ;LCD.c: 89: Mode_Set(mode);
 18603  0162D4  0100               	movlb	0	; () banked
 18604  0162D6  5163               	movf	LCD_Write@mode& (0+255),w,b
 18605  0162D8  ECE9  F0B2         	call	_Mode_Set
 18606                           
 18607                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18608  0162DC  0E67               	movlw	low _SPI2
 18609  0162DE  0100               	movlb	0	; () banked
 18610  0162E0  6F60               	movwf	SPI_Send@pInput& (0+255),b
 18611  0162E2  0E03               	movlw	high _SPI2
 18612  0162E4  0100               	movlb	0	; () banked
 18613  0162E6  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18614  0162E8  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 18615  0162EC  EC90  F0AA         	call	_SPI_Send	;wreg free
 18616  0162F0  0012               	return		;funcret
 18617  0162F2                     __end_of_LCD_Write:
 18618                           	opt stack 0
 18619                           tosu	equ	0xFFF
 18620                           tosh	equ	0xFFE
 18621                           tosl	equ	0xFFD
 18622                           pclath	equ	0xFFA
 18623                           tblptru	equ	0xFF8
 18624                           tblptrh	equ	0xFF7
 18625                           tblptrl	equ	0xFF6
 18626                           tablat	equ	0xFF5
 18627                           prodh	equ	0xFF4
 18628                           prodl	equ	0xFF3
 18629                           intcon	equ	0xFF2
 18630                           postinc0	equ	0xFEE
 18631                           wreg	equ	0xFE8
 18632                           indf1	equ	0xFE7
 18633                           postdec1	equ	0xFE5
 18634                           fsr1h	equ	0xFE2
 18635                           fsr1l	equ	0xFE1
 18636                           indf2	equ	0xFDF
 18637                           postinc2	equ	0xFDE
 18638                           postdec2	equ	0xFDD
 18639                           plusw2	equ	0xFDB
 18640                           fsr2h	equ	0xFDA
 18641                           fsr2l	equ	0xFD9
 18642                           status	equ	0xFD8
 18643                           
 18644 ;; *************** function _SPI_Send *****************
 18645 ;; Defined at:
 18646 ;;		line 226 in file "Library/SPI.c"
 18647 ;; Parameters:    Size  Location     Type
 18648 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18649 ;;		 -> SPI1(11), SPI2(11), 
 18650 ;;  pData           1    2[BANK0 ] unsigned char 
 18651 ;; Auto vars:     Size  Location     Type
 18652 ;;		None
 18653 ;; Return value:  Size  Location     Type
 18654 ;;                  1    wreg      unsigned char 
 18655 ;; Registers used:
 18656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18657 ;; Tracked objects:
 18658 ;;		On entry : 0/0
 18659 ;;		On exit  : 0/0
 18660 ;;		Unchanged: 0/0
 18661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18662 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18665 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18666 ;;Total ram usage:        3 bytes
 18667 ;; Hardware stack levels used:    1
 18668 ;; Hardware stack levels required when called:    7
 18669 ;; This function calls:
 18670 ;;		Nothing
 18671 ;; This function is called by:
 18672 ;;		_LCD_Write
 18673 ;;		_OutSeg
 18674 ;; This function uses a non-reentrant model
 18675 ;;
 18676                           
 18677                           	psect	text84
 18678  015520                     __ptext84:
 18679                           	opt stack 0
 18680  015520                     _SPI_Send:
 18681                           	opt stack 20
 18682                           
 18683                           ;SPI.c: 253: switch (pInput->mChannel)
 18684                           
 18685                           ;incstack = 0
 18686  015520  D026               	goto	l678
 18687  015522                     
 18688                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18689  015522  C0EE  FFD9         	movff	_PortC+4,fsr2l
 18690  015526  C0EF  FFDA         	movff	_PortC+5,fsr2h
 18691  01552A  0100               	movlb	0	; () banked
 18692  01552C  94DF               	bcf	indf2,2,c
 18693                           
 18694                           ; BSR set to: 0
 18695                           ;SPI.c: 257: SSP1BUF = pData;
 18696  01552E  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18697  015532                     
 18698                           ; BSR set to: 0
 18699  015532  A0C7               	btfss	4039,0,c	;volatile
 18700  015534  D7FE               	goto	l681
 18701                           
 18702                           ;SPI.c: 259: pData = SSP1BUF;
 18703  015536  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 18704                           
 18705                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18706  01553A  C0EE  FFD9         	movff	_PortC+4,fsr2l
 18707  01553E  C0EF  FFDA         	movff	_PortC+5,fsr2h
 18708  015542  0100               	movlb	0	; () banked
 18709  015544  84DF               	bsf	indf2,2,c
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;SPI.c: 261: return pData;
 18713                           ;	Return value of _SPI_Send is never used
 18714  015546  0012               	return	
 18715  015548                     
 18716                           ; BSR set to: 0
 18717                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18718                           
 18719                           ; BSR set to: 0
 18720  015548  C39E  FFD9         	movff	_PortD+4,fsr2l
 18721  01554C  C39F  FFDA         	movff	_PortD+5,fsr2h
 18722  015550  0103               	movlb	3	; () banked
 18723  015552  9EDF               	bcf	indf2,7,c
 18724                           
 18725                           ; BSR set to: 3
 18726                           ;SPI.c: 264: SSP2BUF = pData;
 18727  015554  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18728  015558                     
 18729                           ; BSR set to: 3
 18730  015558  A06D               	btfss	3949,0,c	;volatile
 18731  01555A  D7FE               	goto	l686
 18732                           
 18733                           ;SPI.c: 266: pData = SSP2BUF;
 18734  01555C  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 18735                           
 18736                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18737  015560  C39E  FFD9         	movff	_PortD+4,fsr2l
 18738  015564  C39F  FFDA         	movff	_PortD+5,fsr2h
 18739  015568  0103               	movlb	3	; () banked
 18740  01556A  8EDF               	bsf	indf2,7,c
 18741                           
 18742                           ; BSR set to: 3
 18743                           ;SPI.c: 269: };
 18744                           
 18745                           ; BSR set to: 3
 18746                           ;SPI.c: 268: return pData;
 18747                           ;	Return value of _SPI_Send is never used
 18748  01556C  0012               	return	
 18749  01556E                     l678:
 18750                           
 18751                           ; BSR set to: 3
 18752  01556E  0100               	movlb	0	; () banked
 18753  015570  EE20 F002          	lfsr	2,2
 18754  015574  5160               	movf	SPI_Send@pInput& (0+255),w,b
 18755  015576  26D9               	addwf	fsr2l,f,c
 18756  015578  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18757  01557A  22DA               	addwfc	fsr2h,f,c
 18758  01557C  50DF               	movf	indf2,w,c
 18759                           
 18760                           ; Switch size 1, requested type "space"
 18761                           ; Number of cases is 2, Range of values is 0 to 1
 18762                           ; switch strategies available:
 18763                           ; Name         Instructions Cycles
 18764                           ; simple_byte            7     4 (average)
 18765                           ;	Chosen strategy is simple_byte
 18766  01557E  0A00               	xorlw	0	; case 0
 18767  015580  B4D8               	btfsc	status,2,c
 18768  015582  D7CF               	goto	l679
 18769  015584  0A01               	xorlw	1	; case 1
 18770  015586  A4D8               	btfss	status,2,c
 18771  015588  0012               	return	
 18772  01558A  D7DE               	goto	l684
 18773  01558C                     __end_of_SPI_Send:
 18774                           	opt stack 0
 18775                           tosu	equ	0xFFF
 18776                           tosh	equ	0xFFE
 18777                           tosl	equ	0xFFD
 18778                           pclath	equ	0xFFA
 18779                           tblptru	equ	0xFF8
 18780                           tblptrh	equ	0xFF7
 18781                           tblptrl	equ	0xFF6
 18782                           tablat	equ	0xFF5
 18783                           prodh	equ	0xFF4
 18784                           prodl	equ	0xFF3
 18785                           intcon	equ	0xFF2
 18786                           postinc0	equ	0xFEE
 18787                           wreg	equ	0xFE8
 18788                           indf1	equ	0xFE7
 18789                           postdec1	equ	0xFE5
 18790                           fsr1h	equ	0xFE2
 18791                           fsr1l	equ	0xFE1
 18792                           indf2	equ	0xFDF
 18793                           postinc2	equ	0xFDE
 18794                           postdec2	equ	0xFDD
 18795                           plusw2	equ	0xFDB
 18796                           fsr2h	equ	0xFDA
 18797                           fsr2l	equ	0xFD9
 18798                           status	equ	0xFD8
 18799                           
 18800 ;; *************** function _Mode_Set *****************
 18801 ;; Defined at:
 18802 ;;		line 40 in file "Library/LCD.c"
 18803 ;; Parameters:    Size  Location     Type
 18804 ;;  pMode           1    wreg     enum E6761
 18805 ;; Auto vars:     Size  Location     Type
 18806 ;;  pMode           1    0[BANK0 ] enum E6761
 18807 ;; Return value:  Size  Location     Type
 18808 ;;                  1    wreg      void 
 18809 ;; Registers used:
 18810 ;;		wreg
 18811 ;; Tracked objects:
 18812 ;;		On entry : 0/0
 18813 ;;		On exit  : 0/0
 18814 ;;		Unchanged: 0/0
 18815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18820 ;;Total ram usage:        1 bytes
 18821 ;; Hardware stack levels used:    1
 18822 ;; Hardware stack levels required when called:    7
 18823 ;; This function calls:
 18824 ;;		Nothing
 18825 ;; This function is called by:
 18826 ;;		_LCD_Write
 18827 ;; This function uses a non-reentrant model
 18828 ;;
 18829                           
 18830                           	psect	text85
 18831  0165D2                     __ptext85:
 18832                           	opt stack 0
 18833  0165D2                     _Mode_Set:
 18834                           	opt stack 18
 18835                           
 18836                           ;incstack = 0
 18837                           ;Mode_Set@pMode stored from wreg
 18838  0165D2  0100               	movlb	0	; () banked
 18839  0165D4  6F60               	movwf	Mode_Set@pMode& (0+255),b
 18840                           
 18841                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18842  0165D6  0100               	movlb	0	; () banked
 18843  0165D8  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 18844  0165DA  D002               	bra	u9005
 18845  0165DC  9E85               	bcf	3973,7,c	;volatile
 18846  0165DE  D001               	bra	u9006
 18847  0165E0                     u9005:
 18848  0165E0  8E85               	bsf	3973,7,c	;volatile
 18849  0165E2                     u9006:
 18850  0165E2  0012               	return		;funcret
 18851  0165E4                     __end_of_Mode_Set:
 18852                           	opt stack 0
 18853                           tosu	equ	0xFFF
 18854                           tosh	equ	0xFFE
 18855                           tosl	equ	0xFFD
 18856                           pclath	equ	0xFFA
 18857                           tblptru	equ	0xFF8
 18858                           tblptrh	equ	0xFF7
 18859                           tblptrl	equ	0xFF6
 18860                           tablat	equ	0xFF5
 18861                           prodh	equ	0xFF4
 18862                           prodl	equ	0xFF3
 18863                           intcon	equ	0xFF2
 18864                           postinc0	equ	0xFEE
 18865                           wreg	equ	0xFE8
 18866                           indf1	equ	0xFE7
 18867                           postdec1	equ	0xFE5
 18868                           fsr1h	equ	0xFE2
 18869                           fsr1l	equ	0xFE1
 18870                           indf2	equ	0xFDF
 18871                           postinc2	equ	0xFDE
 18872                           postdec2	equ	0xFDD
 18873                           plusw2	equ	0xFDB
 18874                           fsr2h	equ	0xFDA
 18875                           fsr2l	equ	0xFD9
 18876                           status	equ	0xFD8
 18877                           
 18878 ;; *************** function _Configure_GPIOs *****************
 18879 ;; Defined at:
 18880 ;;		line 46 in file "Library/LCD.c"
 18881 ;; Parameters:    Size  Location     Type
 18882 ;;		None
 18883 ;; Auto vars:     Size  Location     Type
 18884 ;;		None
 18885 ;; Return value:  Size  Location     Type
 18886 ;;                  1    wreg      void 
 18887 ;; Registers used:
 18888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18889 ;; Tracked objects:
 18890 ;;		On entry : 0/0
 18891 ;;		On exit  : 0/0
 18892 ;;		Unchanged: 0/0
 18893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18898 ;;Total ram usage:        0 bytes
 18899 ;; Hardware stack levels used:    1
 18900 ;; Hardware stack levels required when called:   14
 18901 ;; This function calls:
 18902 ;;		_LCD_Reset
 18903 ;;		_Port_SetPinType
 18904 ;;		_SPI_Init
 18905 ;;		_SPI_MaxSpeed
 18906 ;; This function is called by:
 18907 ;;		_LCD_Init
 18908 ;; This function uses a non-reentrant model
 18909 ;;
 18910                           
 18911                           	psect	text86
 18912  0154B0                     __ptext86:
 18913                           	opt stack 0
 18914  0154B0                     _Configure_GPIOs:
 18915                           	opt stack 14
 18916                           
 18917                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 18918                           
 18919                           ;incstack = 0
 18920  0154B0  0EB8               	movlw	low _PortF
 18921  0154B2  0100               	movlb	0	; () banked
 18922  0154B4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18923  0154B6  0E03               	movlw	high _PortF
 18924  0154B8  0100               	movlb	0	; () banked
 18925  0154BA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18926  0154BC  0E07               	movlw	7
 18927  0154BE  0100               	movlb	0	; () banked
 18928  0154C0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18929  0154C2  0E03               	movlw	3
 18930  0154C4  0100               	movlb	0	; () banked
 18931  0154C6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18932  0154C8  EC92  F093         	call	_Port_SetPinType	;wreg free
 18933                           
 18934                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 18935  0154CC  0EB8               	movlw	low _PortF
 18936  0154CE  0100               	movlb	0	; () banked
 18937  0154D0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18938  0154D2  0E03               	movlw	high _PortF
 18939  0154D4  0100               	movlb	0	; () banked
 18940  0154D6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18941  0154D8  0E06               	movlw	6
 18942  0154DA  0100               	movlb	0	; () banked
 18943  0154DC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18944  0154DE  0E03               	movlw	3
 18945  0154E0  0100               	movlb	0	; () banked
 18946  0154E2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18947  0154E4  EC92  F093         	call	_Port_SetPinType	;wreg free
 18948                           
 18949                           ;LCD.c: 55: LCD_Reset();
 18950  0154E8  EC99  F0AD         	call	_LCD_Reset	;wreg free
 18951                           
 18952                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 18953  0154EC  0EC0               	movlw	192
 18954  0154EE  0100               	movlb	0	; () banked
 18955  0154F0  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 18956  0154F2  0EC6               	movlw	198
 18957  0154F4  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18958  0154F6  0E2D               	movlw	45
 18959  0154F8  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18960  0154FA  0E00               	movlw	0
 18961  0154FC  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18962  0154FE  0E01               	movlw	1
 18963  015500  0100               	movlb	0	; () banked
 18964  015502  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 18965  015504  0E01               	movlw	1
 18966  015506  0100               	movlb	0	; () banked
 18967  015508  6F92               	movwf	SPI_Init@pMode& (0+255),b
 18968  01550A  EC6B  F084         	call	_SPI_Init	;wreg free
 18969                           
 18970                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 18971  01550E  0E67               	movlw	low _SPI2
 18972  015510  0100               	movlb	0	; () banked
 18973  015512  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 18974  015514  0E03               	movlw	high _SPI2
 18975  015516  0100               	movlb	0	; () banked
 18976  015518  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 18977  01551A  ECAA  F0A9         	call	_SPI_MaxSpeed	;wreg free
 18978  01551E  0012               	return		;funcret
 18979  015520                     __end_of_Configure_GPIOs:
 18980                           	opt stack 0
 18981                           tosu	equ	0xFFF
 18982                           tosh	equ	0xFFE
 18983                           tosl	equ	0xFFD
 18984                           pclath	equ	0xFFA
 18985                           tblptru	equ	0xFF8
 18986                           tblptrh	equ	0xFF7
 18987                           tblptrl	equ	0xFF6
 18988                           tablat	equ	0xFF5
 18989                           prodh	equ	0xFF4
 18990                           prodl	equ	0xFF3
 18991                           intcon	equ	0xFF2
 18992                           postinc0	equ	0xFEE
 18993                           wreg	equ	0xFE8
 18994                           indf1	equ	0xFE7
 18995                           postdec1	equ	0xFE5
 18996                           fsr1h	equ	0xFE2
 18997                           fsr1l	equ	0xFE1
 18998                           indf2	equ	0xFDF
 18999                           postinc2	equ	0xFDE
 19000                           postdec2	equ	0xFDD
 19001                           plusw2	equ	0xFDB
 19002                           fsr2h	equ	0xFDA
 19003                           fsr2l	equ	0xFD9
 19004                           status	equ	0xFD8
 19005                           
 19006 ;; *************** function _SPI_MaxSpeed *****************
 19007 ;; Defined at:
 19008 ;;		line 201 in file "Library/SPI.c"
 19009 ;; Parameters:    Size  Location     Type
 19010 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19011 ;;		 -> SPI2(11), 
 19012 ;; Auto vars:     Size  Location     Type
 19013 ;;		None
 19014 ;; Return value:  Size  Location     Type
 19015 ;;                  1    wreg      void 
 19016 ;; Registers used:
 19017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19018 ;; Tracked objects:
 19019 ;;		On entry : 0/0
 19020 ;;		On exit  : 0/0
 19021 ;;		Unchanged: 0/0
 19022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19027 ;;Total ram usage:        2 bytes
 19028 ;; Hardware stack levels used:    1
 19029 ;; Hardware stack levels required when called:    9
 19030 ;; This function calls:
 19031 ;;		_Byte_SetBit
 19032 ;;		_Byte_SetQuad
 19033 ;; This function is called by:
 19034 ;;		_Configure_GPIOs
 19035 ;; This function uses a non-reentrant model
 19036 ;;
 19037                           
 19038                           	psect	text87
 19039  015354                     __ptext87:
 19040                           	opt stack 0
 19041  015354                     _SPI_MaxSpeed:
 19042                           	opt stack 18
 19043                           
 19044                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19045                           
 19046                           ;incstack = 0
 19047  015354  0100               	movlb	0	; () banked
 19048  015356  EE20 F006          	lfsr	2,6
 19049  01535A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19050  01535C  26D9               	addwf	fsr2l,f,c
 19051  01535E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19052  015360  22DA               	addwfc	fsr2h,f,c
 19053  015362  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19054  015366  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19055  01536A  0E05               	movlw	5
 19056  01536C  0100               	movlb	0	; () banked
 19057  01536E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19058  015370  0E00               	movlw	0
 19059  015372  0100               	movlb	0	; () banked
 19060  015374  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19061  015376  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 19062                           
 19063                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19064  01537A  0100               	movlb	0	; () banked
 19065  01537C  EE20 F006          	lfsr	2,6
 19066  015380  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19067  015382  26D9               	addwf	fsr2l,f,c
 19068  015384  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19069  015386  22DA               	addwfc	fsr2h,f,c
 19070  015388  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19071  01538C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19072  015390  0E00               	movlw	0
 19073  015392  0100               	movlb	0	; () banked
 19074  015394  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19075  015396  0E00               	movlw	0
 19076  015398  0100               	movlb	0	; () banked
 19077  01539A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19078  01539C  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 19079                           
 19080                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19081  0153A0  0100               	movlb	0	; () banked
 19082  0153A2  EE20 F006          	lfsr	2,6
 19083  0153A6  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19084  0153A8  26D9               	addwf	fsr2l,f,c
 19085  0153AA  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19086  0153AC  22DA               	addwfc	fsr2h,f,c
 19087  0153AE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19088  0153B2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19089  0153B6  0E05               	movlw	5
 19090  0153B8  0100               	movlb	0	; () banked
 19091  0153BA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19092  0153BC  0E01               	movlw	1
 19093  0153BE  0100               	movlb	0	; () banked
 19094  0153C0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19095  0153C2  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 19096  0153C6  0012               	return		;funcret
 19097  0153C8                     __end_of_SPI_MaxSpeed:
 19098                           	opt stack 0
 19099                           tosu	equ	0xFFF
 19100                           tosh	equ	0xFFE
 19101                           tosl	equ	0xFFD
 19102                           pclath	equ	0xFFA
 19103                           tblptru	equ	0xFF8
 19104                           tblptrh	equ	0xFF7
 19105                           tblptrl	equ	0xFF6
 19106                           tablat	equ	0xFF5
 19107                           prodh	equ	0xFF4
 19108                           prodl	equ	0xFF3
 19109                           intcon	equ	0xFF2
 19110                           postinc0	equ	0xFEE
 19111                           wreg	equ	0xFE8
 19112                           indf1	equ	0xFE7
 19113                           postdec1	equ	0xFE5
 19114                           fsr1h	equ	0xFE2
 19115                           fsr1l	equ	0xFE1
 19116                           indf2	equ	0xFDF
 19117                           postinc2	equ	0xFDE
 19118                           postdec2	equ	0xFDD
 19119                           plusw2	equ	0xFDB
 19120                           fsr2h	equ	0xFDA
 19121                           fsr2l	equ	0xFD9
 19122                           status	equ	0xFD8
 19123                           
 19124 ;; *************** function _LCD_Reset *****************
 19125 ;; Defined at:
 19126 ;;		line 95 in file "Library/LCD.c"
 19127 ;; Parameters:    Size  Location     Type
 19128 ;;		None
 19129 ;; Auto vars:     Size  Location     Type
 19130 ;;		None
 19131 ;; Return value:  Size  Location     Type
 19132 ;;                  1    wreg      void 
 19133 ;; Registers used:
 19134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19135 ;; Tracked objects:
 19136 ;;		On entry : 0/0
 19137 ;;		On exit  : 0/0
 19138 ;;		Unchanged: 0/0
 19139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19144 ;;Total ram usage:        0 bytes
 19145 ;; Hardware stack levels used:    1
 19146 ;; Hardware stack levels required when called:   13
 19147 ;; This function calls:
 19148 ;;		_LED_Toggle
 19149 ;;		_Reset_High
 19150 ;;		_Reset_Low
 19151 ;;		_delay_ms
 19152 ;; This function is called by:
 19153 ;;		_Configure_GPIOs
 19154 ;; This function uses a non-reentrant model
 19155 ;;
 19156                           
 19157                           	psect	text88
 19158  015B32                     __ptext88:
 19159                           	opt stack 0
 19160  015B32                     _LCD_Reset:
 19161                           	opt stack 14
 19162                           
 19163                           ;LCD.c: 97: Reset_High();
 19164                           
 19165                           ;incstack = 0
 19166  015B32  ECE7  F0B1         	call	_Reset_High	;wreg free
 19167                           
 19168                           ;LCD.c: 98: LED_Toggle(eLED2);
 19169  015B36  0E01               	movlw	1
 19170  015B38  EC54  F0AE         	call	_LED_Toggle
 19171                           
 19172                           ;LCD.c: 99: delay_ms(0x80);
 19173  015B3C  0E00               	movlw	0
 19174  015B3E  0100               	movlb	0	; () banked
 19175  015B40  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19176  015B42  0E80               	movlw	128
 19177  015B44  6F60               	movwf	delay_ms@ms& (0+255),b
 19178  015B46  EC31  F0AB         	call	_delay_ms	;wreg free
 19179                           
 19180                           ;LCD.c: 100: LED_Toggle(eLED2);
 19181  015B4A  0E01               	movlw	1
 19182  015B4C  EC54  F0AE         	call	_LED_Toggle
 19183                           
 19184                           ;LCD.c: 101: Reset_Low();
 19185  015B50  ECD8  F0B1         	call	_Reset_Low	;wreg free
 19186                           
 19187                           ;LCD.c: 102: delay_ms(0x80);
 19188  015B54  0E00               	movlw	0
 19189  015B56  0100               	movlb	0	; () banked
 19190  015B58  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19191  015B5A  0E80               	movlw	128
 19192  015B5C  6F60               	movwf	delay_ms@ms& (0+255),b
 19193  015B5E  EC31  F0AB         	call	_delay_ms	;wreg free
 19194                           
 19195                           ;LCD.c: 103: LED_Toggle(eLED2);
 19196  015B62  0E01               	movlw	1
 19197  015B64  EC54  F0AE         	call	_LED_Toggle
 19198                           
 19199                           ;LCD.c: 104: Reset_High();
 19200  015B68  ECE7  F0B1         	call	_Reset_High	;wreg free
 19201                           
 19202                           ;LCD.c: 105: delay_ms(0x80);
 19203  015B6C  0E00               	movlw	0
 19204  015B6E  0100               	movlb	0	; () banked
 19205  015B70  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19206  015B72  0E80               	movlw	128
 19207  015B74  6F60               	movwf	delay_ms@ms& (0+255),b
 19208  015B76  EC31  F0AB         	call	_delay_ms	;wreg free
 19209                           
 19210                           ;LCD.c: 106: LED_Toggle(eLED2);
 19211  015B7A  0E01               	movlw	1
 19212  015B7C  EC54  F0AE         	call	_LED_Toggle
 19213  015B80  0012               	return		;funcret
 19214  015B82                     __end_of_LCD_Reset:
 19215                           	opt stack 0
 19216                           tosu	equ	0xFFF
 19217                           tosh	equ	0xFFE
 19218                           tosl	equ	0xFFD
 19219                           pclath	equ	0xFFA
 19220                           tblptru	equ	0xFF8
 19221                           tblptrh	equ	0xFF7
 19222                           tblptrl	equ	0xFF6
 19223                           tablat	equ	0xFF5
 19224                           prodh	equ	0xFF4
 19225                           prodl	equ	0xFF3
 19226                           intcon	equ	0xFF2
 19227                           postinc0	equ	0xFEE
 19228                           wreg	equ	0xFE8
 19229                           indf1	equ	0xFE7
 19230                           postdec1	equ	0xFE5
 19231                           fsr1h	equ	0xFE2
 19232                           fsr1l	equ	0xFE1
 19233                           indf2	equ	0xFDF
 19234                           postinc2	equ	0xFDE
 19235                           postdec2	equ	0xFDD
 19236                           plusw2	equ	0xFDB
 19237                           fsr2h	equ	0xFDA
 19238                           fsr2l	equ	0xFD9
 19239                           status	equ	0xFD8
 19240                           
 19241 ;; *************** function _delay_ms *****************
 19242 ;; Defined at:
 19243 ;;		line 240 in file "Library/Types.c"
 19244 ;; Parameters:    Size  Location     Type
 19245 ;;  ms              2    0[BANK0 ] unsigned short 
 19246 ;; Auto vars:     Size  Location     Type
 19247 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19248 ;; Return value:  Size  Location     Type
 19249 ;;                  1    wreg      void 
 19250 ;; Registers used:
 19251 ;;		wreg, status,2, status,0
 19252 ;; Tracked objects:
 19253 ;;		On entry : 0/0
 19254 ;;		On exit  : 0/0
 19255 ;;		Unchanged: 0/0
 19256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19257 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19258 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19260 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19261 ;;Total ram usage:        6 bytes
 19262 ;; Hardware stack levels used:    1
 19263 ;; Hardware stack levels required when called:    7
 19264 ;; This function calls:
 19265 ;;		Nothing
 19266 ;; This function is called by:
 19267 ;;		_LCD_Reset
 19268 ;;		_LCD_Init
 19269 ;;		_MXK_Init
 19270 ;;		_init
 19271 ;;		_move_and_rotate
 19272 ;; This function uses a non-reentrant model
 19273 ;;
 19274                           
 19275                           	psect	text89
 19276  015662                     __ptext89:
 19277                           	opt stack 0
 19278  015662                     _delay_ms:
 19279                           	opt stack 21
 19280                           
 19281                           ;Types.c: 242: volatile unsigned long u;
 19282                           ;Types.c: 243: while (ms--)
 19283                           
 19284                           ;incstack = 0
 19285  015662  D01F               	goto	u9340
 19286  015664                     l12670:
 19287                           
 19288                           ;Types.c: 244: {
 19289                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19290  015664  0E00               	movlw	0
 19291  015666  0100               	movlb	0	; () banked
 19292  015668  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19293  01566A  0E00               	movlw	0
 19294  01566C  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19295  01566E  0E00               	movlw	0
 19296  015670  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19297  015672  0E00               	movlw	0
 19298  015674  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19299  015676                     l12672:
 19300                           
 19301                           ; BSR set to: 0
 19302  015676  0100               	movlb	0	; () banked
 19303  015678  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19304  01567A  0100               	movlb	0	; () banked
 19305  01567C  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19306  01567E  E111               	bnz	l12678
 19307  015680  0EB0               	movlw	176
 19308  015682  0100               	movlb	0	; () banked
 19309  015684  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19310  015686  0E04               	movlw	4
 19311  015688  0100               	movlb	0	; () banked
 19312  01568A  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19313  01568C  B0D8               	btfsc	status,0,c
 19314  01568E  D009               	goto	u9340
 19315                           
 19316                           ; BSR set to: 0
 19317                           
 19318                           ; BSR set to: 0
 19319  015690  F000               	nop		; ;# 
 19320  015692  0E01               	movlw	1
 19321  015694  0100               	movlb	0	; () banked
 19322  015696  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19323  015698  0E00               	movlw	0
 19324  01569A  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19325  01569C  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19326  01569E  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19327  0156A0  D7EA               	goto	l12672
 19328  0156A2                     u9340:
 19329  0156A2                     l12678:
 19330  0156A2  0100               	movlb	0	; () banked
 19331  0156A4  0760               	decf	delay_ms@ms& (0+255),f,b
 19332  0156A6  A0D8               	btfss	status,0,c
 19333  0156A8  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19334  0156AA  0100               	movlb	0	; () banked
 19335  0156AC  2960               	incf	delay_ms@ms& (0+255),w,b
 19336  0156AE  E1DA               	bnz	l12670
 19337  0156B0  0100               	movlb	0	; () banked
 19338  0156B2  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19339  0156B4  A4D8               	btfss	status,2,c
 19340  0156B6  D7D6               	goto	l824
 19341                           
 19342                           ; BSR set to: 0
 19343                           ;Types.c: 251: }
 19344                           ;Types.c: 252: }
 19345                           ;Types.c: 253: u = 0x8008;
 19346                           
 19347                           ; BSR set to: 0
 19348  0156B8  0E08               	movlw	8
 19349  0156BA  0100               	movlb	0	; () banked
 19350  0156BC  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19351  0156BE  0E80               	movlw	128
 19352  0156C0  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19353  0156C2  0E00               	movlw	0
 19354  0156C4  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19355  0156C6  0E00               	movlw	0
 19356  0156C8  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19357                           
 19358                           ; BSR set to: 0
 19359  0156CA  0012               	return		;funcret
 19360  0156CC                     __end_of_delay_ms:
 19361                           	opt stack 0
 19362                           tosu	equ	0xFFF
 19363                           tosh	equ	0xFFE
 19364                           tosl	equ	0xFFD
 19365                           pclath	equ	0xFFA
 19366                           tblptru	equ	0xFF8
 19367                           tblptrh	equ	0xFF7
 19368                           tblptrl	equ	0xFF6
 19369                           tablat	equ	0xFF5
 19370                           prodh	equ	0xFF4
 19371                           prodl	equ	0xFF3
 19372                           intcon	equ	0xFF2
 19373                           postinc0	equ	0xFEE
 19374                           wreg	equ	0xFE8
 19375                           indf1	equ	0xFE7
 19376                           postdec1	equ	0xFE5
 19377                           fsr1h	equ	0xFE2
 19378                           fsr1l	equ	0xFE1
 19379                           indf2	equ	0xFDF
 19380                           postinc2	equ	0xFDE
 19381                           postdec2	equ	0xFDD
 19382                           plusw2	equ	0xFDB
 19383                           fsr2h	equ	0xFDA
 19384                           fsr2l	equ	0xFD9
 19385                           status	equ	0xFD8
 19386                           
 19387 ;; *************** function _Reset_Low *****************
 19388 ;; Defined at:
 19389 ;;		line 32 in file "Library/LCD.c"
 19390 ;; Parameters:    Size  Location     Type
 19391 ;;		None
 19392 ;; Auto vars:     Size  Location     Type
 19393 ;;		None
 19394 ;; Return value:  Size  Location     Type
 19395 ;;                  1    wreg      void 
 19396 ;; Registers used:
 19397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19398 ;; Tracked objects:
 19399 ;;		On entry : 0/0
 19400 ;;		On exit  : 0/0
 19401 ;;		Unchanged: 0/0
 19402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19407 ;;Total ram usage:        0 bytes
 19408 ;; Hardware stack levels used:    1
 19409 ;; Hardware stack levels required when called:   11
 19410 ;; This function calls:
 19411 ;;		_Port_SetPin
 19412 ;; This function is called by:
 19413 ;;		_LCD_Reset
 19414 ;; This function uses a non-reentrant model
 19415 ;;
 19416                           
 19417                           	psect	text90
 19418  0163B0                     __ptext90:
 19419                           	opt stack 0
 19420  0163B0                     _Reset_Low:
 19421                           	opt stack 15
 19422                           
 19423                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;incstack = 0
 19427  0163B0  0EB8               	movlw	low _PortF
 19428  0163B2  0100               	movlb	0	; () banked
 19429  0163B4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19430  0163B6  0E03               	movlw	high _PortF
 19431  0163B8  0100               	movlb	0	; () banked
 19432  0163BA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19433  0163BC  0E06               	movlw	6
 19434  0163BE  0100               	movlb	0	; () banked
 19435  0163C0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19436  0163C2  0E01               	movlw	1
 19437  0163C4  0100               	movlb	0	; () banked
 19438  0163C6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19439  0163C8  EC8C  F09F         	call	_Port_SetPin	;wreg free
 19440  0163CC  0012               	return		;funcret
 19441  0163CE                     __end_of_Reset_Low:
 19442                           	opt stack 0
 19443                           tosu	equ	0xFFF
 19444                           tosh	equ	0xFFE
 19445                           tosl	equ	0xFFD
 19446                           pclath	equ	0xFFA
 19447                           tblptru	equ	0xFF8
 19448                           tblptrh	equ	0xFF7
 19449                           tblptrl	equ	0xFF6
 19450                           tablat	equ	0xFF5
 19451                           prodh	equ	0xFF4
 19452                           prodl	equ	0xFF3
 19453                           intcon	equ	0xFF2
 19454                           postinc0	equ	0xFEE
 19455                           wreg	equ	0xFE8
 19456                           indf1	equ	0xFE7
 19457                           postdec1	equ	0xFE5
 19458                           fsr1h	equ	0xFE2
 19459                           fsr1l	equ	0xFE1
 19460                           indf2	equ	0xFDF
 19461                           postinc2	equ	0xFDE
 19462                           postdec2	equ	0xFDD
 19463                           plusw2	equ	0xFDB
 19464                           fsr2h	equ	0xFDA
 19465                           fsr2l	equ	0xFD9
 19466                           status	equ	0xFD8
 19467                           
 19468 ;; *************** function _Reset_High *****************
 19469 ;; Defined at:
 19470 ;;		line 36 in file "Library/LCD.c"
 19471 ;; Parameters:    Size  Location     Type
 19472 ;;		None
 19473 ;; Auto vars:     Size  Location     Type
 19474 ;;		None
 19475 ;; Return value:  Size  Location     Type
 19476 ;;                  1    wreg      void 
 19477 ;; Registers used:
 19478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19479 ;; Tracked objects:
 19480 ;;		On entry : 0/0
 19481 ;;		On exit  : 0/0
 19482 ;;		Unchanged: 0/0
 19483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19488 ;;Total ram usage:        0 bytes
 19489 ;; Hardware stack levels used:    1
 19490 ;; Hardware stack levels required when called:   11
 19491 ;; This function calls:
 19492 ;;		_Port_SetPin
 19493 ;; This function is called by:
 19494 ;;		_LCD_Reset
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           	psect	text91
 19499  0163CE                     __ptext91:
 19500                           	opt stack 0
 19501  0163CE                     _Reset_High:
 19502                           	opt stack 15
 19503                           
 19504                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19505                           
 19506                           ;incstack = 0
 19507  0163CE  0EB8               	movlw	low _PortF
 19508  0163D0  0100               	movlb	0	; () banked
 19509  0163D2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19510  0163D4  0E03               	movlw	high _PortF
 19511  0163D6  0100               	movlb	0	; () banked
 19512  0163D8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19513  0163DA  0E06               	movlw	6
 19514  0163DC  0100               	movlb	0	; () banked
 19515  0163DE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19516  0163E0  0E00               	movlw	0
 19517  0163E2  0100               	movlb	0	; () banked
 19518  0163E4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19519  0163E6  EC8C  F09F         	call	_Port_SetPin	;wreg free
 19520  0163EA  0012               	return		;funcret
 19521  0163EC                     __end_of_Reset_High:
 19522                           	opt stack 0
 19523                           tosu	equ	0xFFF
 19524                           tosh	equ	0xFFE
 19525                           tosl	equ	0xFFD
 19526                           pclath	equ	0xFFA
 19527                           tblptru	equ	0xFF8
 19528                           tblptrh	equ	0xFF7
 19529                           tblptrl	equ	0xFF6
 19530                           tablat	equ	0xFF5
 19531                           prodh	equ	0xFF4
 19532                           prodl	equ	0xFF3
 19533                           intcon	equ	0xFF2
 19534                           postinc0	equ	0xFEE
 19535                           wreg	equ	0xFE8
 19536                           indf1	equ	0xFE7
 19537                           postdec1	equ	0xFE5
 19538                           fsr1h	equ	0xFE2
 19539                           fsr1l	equ	0xFE1
 19540                           indf2	equ	0xFDF
 19541                           postinc2	equ	0xFDE
 19542                           postdec2	equ	0xFDD
 19543                           plusw2	equ	0xFDB
 19544                           fsr2h	equ	0xFDA
 19545                           fsr2l	equ	0xFD9
 19546                           status	equ	0xFD8
 19547                           
 19548 ;; *************** function _ISR_Enable *****************
 19549 ;; Defined at:
 19550 ;;		line 27 in file "Library/ISR.c"
 19551 ;; Parameters:    Size  Location     Type
 19552 ;;		None
 19553 ;; Auto vars:     Size  Location     Type
 19554 ;;		None
 19555 ;; Return value:  Size  Location     Type
 19556 ;;                  1    wreg      void 
 19557 ;; Registers used:
 19558 ;;		None
 19559 ;; Tracked objects:
 19560 ;;		On entry : 0/0
 19561 ;;		On exit  : 0/0
 19562 ;;		Unchanged: 0/0
 19563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19568 ;;Total ram usage:        0 bytes
 19569 ;; Hardware stack levels used:    1
 19570 ;; Hardware stack levels required when called:    7
 19571 ;; This function calls:
 19572 ;;		Nothing
 19573 ;; This function is called by:
 19574 ;;		_init
 19575 ;; This function uses a non-reentrant model
 19576 ;;
 19577                           
 19578                           	psect	text92
 19579  016672                     __ptext92:
 19580                           	opt stack 0
 19581  016672                     _ISR_Enable:
 19582                           	opt stack 22
 19583                           
 19584                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19585                           
 19586                           ;incstack = 0
 19587  016672  8CF2               	bsf	intcon,6,c	;volatile
 19588                           
 19589                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19590  016674  8EF2               	bsf	intcon,7,c	;volatile
 19591                           
 19592                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19593  016676  88F2               	bsf	intcon,4,c	;volatile
 19594                           
 19595                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19596  016678  92F2               	bcf	intcon,1,c	;volatile
 19597  01667A  0012               	return		;funcret
 19598  01667C                     __end_of_ISR_Enable:
 19599                           	opt stack 0
 19600                           tosu	equ	0xFFF
 19601                           tosh	equ	0xFFE
 19602                           tosl	equ	0xFFD
 19603                           pclath	equ	0xFFA
 19604                           tblptru	equ	0xFF8
 19605                           tblptrh	equ	0xFF7
 19606                           tblptrl	equ	0xFF6
 19607                           tablat	equ	0xFF5
 19608                           prodh	equ	0xFF4
 19609                           prodl	equ	0xFF3
 19610                           intcon	equ	0xFF2
 19611                           postinc0	equ	0xFEE
 19612                           wreg	equ	0xFE8
 19613                           indf1	equ	0xFE7
 19614                           postdec1	equ	0xFE5
 19615                           fsr1h	equ	0xFE2
 19616                           fsr1l	equ	0xFE1
 19617                           indf2	equ	0xFDF
 19618                           postinc2	equ	0xFDE
 19619                           postdec2	equ	0xFDD
 19620                           plusw2	equ	0xFDB
 19621                           fsr2h	equ	0xFDA
 19622                           fsr2l	equ	0xFD9
 19623                           status	equ	0xFD8
 19624                           
 19625 ;; *************** function _HMI_Init *****************
 19626 ;; Defined at:
 19627 ;;		line 104 in file "HMI.c"
 19628 ;; Parameters:    Size  Location     Type
 19629 ;;		None
 19630 ;; Auto vars:     Size  Location     Type
 19631 ;;  in              2   72[BANK0 ] unsigned short 
 19632 ;; Return value:  Size  Location     Type
 19633 ;;                  1    wreg      void 
 19634 ;; Registers used:
 19635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19636 ;; Tracked objects:
 19637 ;;		On entry : 0/0
 19638 ;;		On exit  : 0/0
 19639 ;;		Unchanged: 0/0
 19640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19645 ;;Total ram usage:        2 bytes
 19646 ;; Hardware stack levels used:    1
 19647 ;; Hardware stack levels required when called:   16
 19648 ;; This function calls:
 19649 ;;		_Button_Init
 19650 ;;		_SPI_Init
 19651 ;;		_SPI_MinSpeed
 19652 ;; This function is called by:
 19653 ;;		_init
 19654 ;; This function uses a non-reentrant model
 19655 ;;
 19656                           
 19657                           	psect	text93
 19658  01219A                     __ptext93:
 19659                           	opt stack 0
 19660  01219A                     _HMI_Init:
 19661                           	opt stack 13
 19662                           
 19663                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19664                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19665                           
 19666                           ;incstack = 0
 19667  01219A  0E52               	movlw	low (_HMIBoard+48)
 19668  01219C  0100               	movlb	0	; () banked
 19669  01219E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19670  0121A0  0E03               	movlw	high (_HMIBoard+48)
 19671  0121A2  0100               	movlb	0	; () banked
 19672  0121A4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19673  0121A6  0E00               	movlw	0
 19674  0121A8  0100               	movlb	0	; () banked
 19675  0121AA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19676  0121AC  0E02               	movlw	2
 19677  0121AE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19678  0121B0  0EAC               	movlw	low _HMI_InitButtons
 19679  0121B2  0100               	movlb	0	; () banked
 19680  0121B4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19681  0121B6  0E66               	movlw	high _HMI_InitButtons
 19682  0121B8  0100               	movlb	0	; () banked
 19683  0121BA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19684  0121BC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19685  0121BE  0100               	movlb	0	; () banked
 19686  0121C0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19687  0121C2  0EE4               	movlw	low _HMI_DIPSwitch
 19688  0121C4  0100               	movlb	0	; () banked
 19689  0121C6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19690  0121C8  0E64               	movlw	high _HMI_DIPSwitch
 19691  0121CA  0100               	movlb	0	; () banked
 19692  0121CC  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19693  0121CE  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19694  0121D0  0100               	movlb	0	; () banked
 19695  0121D2  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19696  0121D4  0E04               	movlw	low _Event_NULL
 19697  0121D6  0100               	movlb	0	; () banked
 19698  0121D8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19699  0121DA  0E14               	movlw	high _Event_NULL
 19700  0121DC  0100               	movlb	0	; () banked
 19701  0121DE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19702  0121E0  0E00               	movlw	low (_Event_NULL shr (0+16))
 19703  0121E2  0100               	movlb	0	; () banked
 19704  0121E4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19705  0121E6  ECBA  F09E         	call	_Button_Init	;wreg free
 19706                           
 19707                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19708                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19709  0121EA  0E34               	movlw	low (_HMIBoard+18)
 19710  0121EC  0100               	movlb	0	; () banked
 19711  0121EE  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19712  0121F0  0E03               	movlw	high (_HMIBoard+18)
 19713  0121F2  0100               	movlb	0	; () banked
 19714  0121F4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19715  0121F6  0E00               	movlw	0
 19716  0121F8  0100               	movlb	0	; () banked
 19717  0121FA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19718  0121FC  0E02               	movlw	2
 19719  0121FE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19720  012200  0EAC               	movlw	low _HMI_InitButtons
 19721  012202  0100               	movlb	0	; () banked
 19722  012204  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19723  012206  0E66               	movlw	high _HMI_InitButtons
 19724  012208  0100               	movlb	0	; () banked
 19725  01220A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19726  01220C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19727  01220E  0100               	movlb	0	; () banked
 19728  012210  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19729  012212  0E44               	movlw	low _HMI_LeftSwitch
 19730  012214  0100               	movlb	0	; () banked
 19731  012216  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19732  012218  0E65               	movlw	high _HMI_LeftSwitch
 19733  01221A  0100               	movlb	0	; () banked
 19734  01221C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19735  01221E  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19736  012220  0100               	movlb	0	; () banked
 19737  012222  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19738  012224  0E04               	movlw	low _Event_NULL
 19739  012226  0100               	movlb	0	; () banked
 19740  012228  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19741  01222A  0E14               	movlw	high _Event_NULL
 19742  01222C  0100               	movlb	0	; () banked
 19743  01222E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19744  012230  0E00               	movlw	low (_Event_NULL shr (0+16))
 19745  012232  0100               	movlb	0	; () banked
 19746  012234  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19747  012236  ECBA  F09E         	call	_Button_Init	;wreg free
 19748                           
 19749                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19750                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19751  01223A  0E2A               	movlw	low (_HMIBoard+8)
 19752  01223C  0100               	movlb	0	; () banked
 19753  01223E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19754  012240  0E03               	movlw	high (_HMIBoard+8)
 19755  012242  0100               	movlb	0	; () banked
 19756  012244  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19757  012246  0E00               	movlw	0
 19758  012248  0100               	movlb	0	; () banked
 19759  01224A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19760  01224C  0E02               	movlw	2
 19761  01224E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19762  012250  0EAC               	movlw	low _HMI_InitButtons
 19763  012252  0100               	movlb	0	; () banked
 19764  012254  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19765  012256  0E66               	movlw	high _HMI_InitButtons
 19766  012258  0100               	movlb	0	; () banked
 19767  01225A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19768  01225C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19769  01225E  0100               	movlb	0	; () banked
 19770  012260  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19771  012262  0E2C               	movlw	low _HMI_RightSwitch
 19772  012264  0100               	movlb	0	; () banked
 19773  012266  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19774  012268  0E65               	movlw	high _HMI_RightSwitch
 19775  01226A  0100               	movlb	0	; () banked
 19776  01226C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19777  01226E  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19778  012270  0100               	movlb	0	; () banked
 19779  012272  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19780  012274  0E04               	movlw	low _Event_NULL
 19781  012276  0100               	movlb	0	; () banked
 19782  012278  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19783  01227A  0E14               	movlw	high _Event_NULL
 19784  01227C  0100               	movlb	0	; () banked
 19785  01227E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19786  012280  0E00               	movlw	low (_Event_NULL shr (0+16))
 19787  012282  0100               	movlb	0	; () banked
 19788  012284  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19789  012286  ECBA  F09E         	call	_Button_Init	;wreg free
 19790                           
 19791                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19792                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19793  01228A  0E3E               	movlw	low (_HMIBoard+28)
 19794  01228C  0100               	movlb	0	; () banked
 19795  01228E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19796  012290  0E03               	movlw	high (_HMIBoard+28)
 19797  012292  0100               	movlb	0	; () banked
 19798  012294  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19799  012296  0E00               	movlw	0
 19800  012298  0100               	movlb	0	; () banked
 19801  01229A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19802  01229C  0E02               	movlw	2
 19803  01229E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19804  0122A0  0EAC               	movlw	low _HMI_InitButtons
 19805  0122A2  0100               	movlb	0	; () banked
 19806  0122A4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19807  0122A6  0E66               	movlw	high _HMI_InitButtons
 19808  0122A8  0100               	movlb	0	; () banked
 19809  0122AA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19810  0122AC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19811  0122AE  0100               	movlb	0	; () banked
 19812  0122B0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19813  0122B2  0E14               	movlw	low _HMI_UpSwitch
 19814  0122B4  0100               	movlb	0	; () banked
 19815  0122B6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19816  0122B8  0E65               	movlw	high _HMI_UpSwitch
 19817  0122BA  0100               	movlb	0	; () banked
 19818  0122BC  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19819  0122BE  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 19820  0122C0  0100               	movlb	0	; () banked
 19821  0122C2  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19822  0122C4  0E04               	movlw	low _Event_NULL
 19823  0122C6  0100               	movlb	0	; () banked
 19824  0122C8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19825  0122CA  0E14               	movlw	high _Event_NULL
 19826  0122CC  0100               	movlb	0	; () banked
 19827  0122CE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19828  0122D0  0E00               	movlw	low (_Event_NULL shr (0+16))
 19829  0122D2  0100               	movlb	0	; () banked
 19830  0122D4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19831  0122D6  ECBA  F09E         	call	_Button_Init	;wreg free
 19832                           
 19833                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 19834                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 19835  0122DA  0E48               	movlw	low (_HMIBoard+38)
 19836  0122DC  0100               	movlb	0	; () banked
 19837  0122DE  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19838  0122E0  0E03               	movlw	high (_HMIBoard+38)
 19839  0122E2  0100               	movlb	0	; () banked
 19840  0122E4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19841  0122E6  0E00               	movlw	0
 19842  0122E8  0100               	movlb	0	; () banked
 19843  0122EA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19844  0122EC  0E02               	movlw	2
 19845  0122EE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19846  0122F0  0EAC               	movlw	low _HMI_InitButtons
 19847  0122F2  0100               	movlb	0	; () banked
 19848  0122F4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19849  0122F6  0E66               	movlw	high _HMI_InitButtons
 19850  0122F8  0100               	movlb	0	; () banked
 19851  0122FA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19852  0122FC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19853  0122FE  0100               	movlb	0	; () banked
 19854  012300  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19855  012302  0EFC               	movlw	low _HMI_DownSwitch
 19856  012304  0100               	movlb	0	; () banked
 19857  012306  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19858  012308  0E64               	movlw	high _HMI_DownSwitch
 19859  01230A  0100               	movlb	0	; () banked
 19860  01230C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19861  01230E  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 19862  012310  0100               	movlb	0	; () banked
 19863  012312  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19864  012314  0E04               	movlw	low _Event_NULL
 19865  012316  0100               	movlb	0	; () banked
 19866  012318  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19867  01231A  0E14               	movlw	high _Event_NULL
 19868  01231C  0100               	movlb	0	; () banked
 19869  01231E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19870  012320  0E00               	movlw	low (_Event_NULL shr (0+16))
 19871  012322  0100               	movlb	0	; () banked
 19872  012324  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19873  012326  ECBA  F09E         	call	_Button_Init	;wreg free
 19874                           
 19875                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 19876  01232A  0EA0               	movlw	160
 19877  01232C  0100               	movlb	0	; () banked
 19878  01232E  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 19879  012330  0E86               	movlw	134
 19880  012332  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19881  012334  0E01               	movlw	1
 19882  012336  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19883  012338  0E00               	movlw	0
 19884  01233A  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19885  01233C  0E00               	movlw	0
 19886  01233E  0100               	movlb	0	; () banked
 19887  012340  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 19888  012342  0E02               	movlw	2
 19889  012344  0100               	movlb	0	; () banked
 19890  012346  6F92               	movwf	SPI_Init@pMode& (0+255),b
 19891  012348  EC6B  F084         	call	_SPI_Init	;wreg free
 19892                           
 19893                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 19894  01234C  0E5C               	movlw	low _SPI1
 19895  01234E  0100               	movlb	0	; () banked
 19896  012350  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 19897  012352  0E03               	movlw	high _SPI1
 19898  012354  0100               	movlb	0	; () banked
 19899  012356  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 19900  012358  ECE4  F0A9         	call	_SPI_MinSpeed	;wreg free
 19901                           
 19902                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 19903  01235C  0E00               	movlw	0
 19904  01235E  0100               	movlb	0	; () banked
 19905  012360  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 19906  012362  0E00               	movlw	0
 19907  012364  6FA8               	movwf	HMI_Init@in& (0+255),b
 19908  012366                     l14212:
 19909                           
 19910                           ; BSR set to: 0
 19911  012366  0100               	movlb	0	; () banked
 19912  012368  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 19913  01236A  E113               	bnz	l1153
 19914  01236C  0E08               	movlw	8
 19915  01236E  0100               	movlb	0	; () banked
 19916  012370  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 19917  012372  B0D8               	btfsc	status,0,c
 19918  012374  0012               	return	
 19919                           
 19920                           ; BSR set to: 0
 19921                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 19922                           
 19923                           ; BSR set to: 0
 19924                           
 19925                           ; BSR set to: 0
 19926  012376  0E22               	movlw	low _HMIBoard
 19927  012378  0100               	movlb	0	; () banked
 19928  01237A  25A8               	addwf	HMI_Init@in& (0+255),w,b
 19929  01237C  6ED9               	movwf	fsr2l,c
 19930  01237E  0E03               	movlw	high _HMIBoard
 19931  012380  0100               	movlb	0	; () banked
 19932  012382  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 19933  012384  6EDA               	movwf	fsr2h,c
 19934  012386  0E00               	movlw	0
 19935  012388  6EDF               	movwf	indf2,c
 19936                           
 19937                           ; BSR set to: 0
 19938  01238A  0100               	movlb	0	; () banked
 19939  01238C  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 19940  01238E  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 19941  012390  D7EA               	goto	l14212
 19942  012392                     l1153:
 19943                           
 19944                           ; BSR set to: 0
 19945  012392  0012               	return		;funcret
 19946  012394                     __end_of_HMI_Init:
 19947                           	opt stack 0
 19948                           tosu	equ	0xFFF
 19949                           tosh	equ	0xFFE
 19950                           tosl	equ	0xFFD
 19951                           pclath	equ	0xFFA
 19952                           tblptru	equ	0xFF8
 19953                           tblptrh	equ	0xFF7
 19954                           tblptrl	equ	0xFF6
 19955                           tablat	equ	0xFF5
 19956                           prodh	equ	0xFF4
 19957                           prodl	equ	0xFF3
 19958                           intcon	equ	0xFF2
 19959                           postinc0	equ	0xFEE
 19960                           wreg	equ	0xFE8
 19961                           indf1	equ	0xFE7
 19962                           postdec1	equ	0xFE5
 19963                           fsr1h	equ	0xFE2
 19964                           fsr1l	equ	0xFE1
 19965                           indf2	equ	0xFDF
 19966                           postinc2	equ	0xFDE
 19967                           postdec2	equ	0xFDD
 19968                           plusw2	equ	0xFDB
 19969                           fsr2h	equ	0xFDA
 19970                           fsr2l	equ	0xFD9
 19971                           status	equ	0xFD8
 19972                           
 19973 ;; *************** function _SPI_MinSpeed *****************
 19974 ;; Defined at:
 19975 ;;		line 190 in file "Library/SPI.c"
 19976 ;; Parameters:    Size  Location     Type
 19977 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19978 ;;		 -> SPI1(11), 
 19979 ;; Auto vars:     Size  Location     Type
 19980 ;;		None
 19981 ;; Return value:  Size  Location     Type
 19982 ;;                  1    wreg      void 
 19983 ;; Registers used:
 19984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19985 ;; Tracked objects:
 19986 ;;		On entry : 0/0
 19987 ;;		On exit  : 0/0
 19988 ;;		Unchanged: 0/0
 19989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;Total ram usage:        2 bytes
 19995 ;; Hardware stack levels used:    1
 19996 ;; Hardware stack levels required when called:    9
 19997 ;; This function calls:
 19998 ;;		_Byte_SetBit
 19999 ;;		_Byte_SetQuad
 20000 ;; This function is called by:
 20001 ;;		_HMI_Init
 20002 ;; This function uses a non-reentrant model
 20003 ;;
 20004                           
 20005                           	psect	text94
 20006  0153C8                     __ptext94:
 20007                           	opt stack 0
 20008  0153C8                     _SPI_MinSpeed:
 20009                           	opt stack 19
 20010                           
 20011                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20012                           
 20013                           ; BSR set to: 0
 20014                           ;incstack = 0
 20015  0153C8  0100               	movlb	0	; () banked
 20016  0153CA  EE20 F006          	lfsr	2,6
 20017  0153CE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20018  0153D0  26D9               	addwf	fsr2l,f,c
 20019  0153D2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20020  0153D4  22DA               	addwfc	fsr2h,f,c
 20021  0153D6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20022  0153DA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20023  0153DE  0E05               	movlw	5
 20024  0153E0  0100               	movlb	0	; () banked
 20025  0153E2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20026  0153E4  0E00               	movlw	0
 20027  0153E6  0100               	movlb	0	; () banked
 20028  0153E8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20029  0153EA  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20030                           
 20031                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20032  0153EE  0100               	movlb	0	; () banked
 20033  0153F0  EE20 F006          	lfsr	2,6
 20034  0153F4  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20035  0153F6  26D9               	addwf	fsr2l,f,c
 20036  0153F8  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20037  0153FA  22DA               	addwfc	fsr2h,f,c
 20038  0153FC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 20039  015400  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 20040  015404  0E00               	movlw	0
 20041  015406  0100               	movlb	0	; () banked
 20042  015408  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20043  01540A  0E02               	movlw	2
 20044  01540C  0100               	movlb	0	; () banked
 20045  01540E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 20046  015410  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 20047                           
 20048                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20049  015414  0100               	movlb	0	; () banked
 20050  015416  EE20 F006          	lfsr	2,6
 20051  01541A  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20052  01541C  26D9               	addwf	fsr2l,f,c
 20053  01541E  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20054  015420  22DA               	addwfc	fsr2h,f,c
 20055  015422  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20056  015426  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20057  01542A  0E05               	movlw	5
 20058  01542C  0100               	movlb	0	; () banked
 20059  01542E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20060  015430  0E01               	movlw	1
 20061  015432  0100               	movlb	0	; () banked
 20062  015434  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20063  015436  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20064  01543A  0012               	return		;funcret
 20065  01543C                     __end_of_SPI_MinSpeed:
 20066                           	opt stack 0
 20067                           tosu	equ	0xFFF
 20068                           tosh	equ	0xFFE
 20069                           tosl	equ	0xFFD
 20070                           pclath	equ	0xFFA
 20071                           tblptru	equ	0xFF8
 20072                           tblptrh	equ	0xFF7
 20073                           tblptrl	equ	0xFF6
 20074                           tablat	equ	0xFF5
 20075                           prodh	equ	0xFF4
 20076                           prodl	equ	0xFF3
 20077                           intcon	equ	0xFF2
 20078                           postinc0	equ	0xFEE
 20079                           wreg	equ	0xFE8
 20080                           indf1	equ	0xFE7
 20081                           postdec1	equ	0xFE5
 20082                           fsr1h	equ	0xFE2
 20083                           fsr1l	equ	0xFE1
 20084                           indf2	equ	0xFDF
 20085                           postinc2	equ	0xFDE
 20086                           postdec2	equ	0xFDD
 20087                           plusw2	equ	0xFDB
 20088                           fsr2h	equ	0xFDA
 20089                           fsr2l	equ	0xFD9
 20090                           status	equ	0xFD8
 20091                           
 20092 ;; *************** function _SPI_Init *****************
 20093 ;; Defined at:
 20094 ;;		line 12 in file "Library/SPI.c"
 20095 ;; Parameters:    Size  Location     Type
 20096 ;;  pClock          4   45[BANK0 ] unsigned long 
 20097 ;;  pChannel        1   49[BANK0 ] enum E6744
 20098 ;;  pMode           1   50[BANK0 ] enum E6748
 20099 ;; Auto vars:     Size  Location     Type
 20100 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20101 ;;		 -> SPI1(11), SPI2(11), 
 20102 ;; Return value:  Size  Location     Type
 20103 ;;                  1    wreg      void 
 20104 ;; Registers used:
 20105 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20106 ;; Tracked objects:
 20107 ;;		On entry : 0/0
 20108 ;;		On exit  : 0/0
 20109 ;;		Unchanged: 0/0
 20110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20111 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20112 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20114 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20115 ;;Total ram usage:        8 bytes
 20116 ;; Hardware stack levels used:    1
 20117 ;; Hardware stack levels required when called:   12
 20118 ;; This function calls:
 20119 ;;		_Byte_SetBit
 20120 ;;		_Byte_SetQuad
 20121 ;;		_Port_SetPinType
 20122 ;;		_SPI_DCS
 20123 ;;		_SPI_DisableISR
 20124 ;;		_Timer2_Init
 20125 ;; This function is called by:
 20126 ;;		_Configure_GPIOs
 20127 ;;		_HMI_Init
 20128 ;; This function uses a non-reentrant model
 20129 ;;
 20130                           
 20131                           	psect	text95
 20132  0108D6                     __ptext95:
 20133                           	opt stack 0
 20134  0108D6                     _SPI_Init:
 20135                           	opt stack 15
 20136                           
 20137                           ;SPI.c: 14: SPIPtr pInput;
 20138                           ;SPI.c: 16: switch (pChannel)
 20139                           
 20140                           ;incstack = 0
 20141  0108D6  D00C               	goto	l597
 20142  0108D8                     
 20143                           ;SPI.c: 19: pInput = &SPI1;
 20144  0108D8  0E5C               	movlw	low _SPI1
 20145  0108DA  0100               	movlb	0	; () banked
 20146  0108DC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 20147  0108DE  0E03               	movlw	high _SPI1
 20148  0108E0  D004               	goto	L13
 20149  0108E2                     
 20150                           ; BSR set to: 0
 20151                           ;SPI.c: 22: pInput = &SPI2;
 20152                           
 20153                           ; BSR set to: 0
 20154  0108E2  0E67               	movlw	low _SPI2
 20155  0108E4  0100               	movlb	0	; () banked
 20156  0108E6  6F93               	movwf	SPI_Init@pInput& (0+255),b
 20157  0108E8  0E03               	movlw	high _SPI2
 20158  0108EA                     L13:
 20159  0108EA  0100               	movlb	0	; () banked
 20160  0108EC  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20161                           
 20162                           ; BSR set to: 0
 20163                           ;SPI.c: 24: };
 20164                           
 20165                           ;SPI.c: 23: break;
 20166  0108EE  D008               	goto	l599
 20167  0108F0                     l597:
 20168                           
 20169                           ; BSR set to: 0
 20170  0108F0  0100               	movlb	0	; () banked
 20171  0108F2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20172                           
 20173                           ; Switch size 1, requested type "space"
 20174                           ; Number of cases is 2, Range of values is 0 to 1
 20175                           ; switch strategies available:
 20176                           ; Name         Instructions Cycles
 20177                           ; simple_byte            7     4 (average)
 20178                           ;	Chosen strategy is simple_byte
 20179  0108F4  0A00               	xorlw	0	; case 0
 20180  0108F6  B4D8               	btfsc	status,2,c
 20181  0108F8  D7EF               	goto	l598
 20182  0108FA  0A01               	xorlw	1	; case 1
 20183  0108FC  B4D8               	btfsc	status,2,c
 20184  0108FE  D7F1               	goto	l600
 20185  010900                     l599:
 20186                           
 20187                           ; BSR set to: 0
 20188                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20189                           
 20190                           ; BSR set to: 0
 20191  010900  0100               	movlb	0	; () banked
 20192  010902  EE20 F002          	lfsr	2,2
 20193  010906  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20194  010908  26D9               	addwf	fsr2l,f,c
 20195  01090A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20196  01090C  22DA               	addwfc	fsr2h,f,c
 20197  01090E  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 20198                           
 20199                           ;SPI.c: 35: switch (pChannel)
 20200  010912  D0B1               	goto	l601
 20201  010914                     
 20202                           ; BSR set to: 0
 20203                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20204                           
 20205                           ; BSR set to: 0
 20206  010914  0EEA               	movlw	low _PortC
 20207  010916  0100               	movlb	0	; () banked
 20208  010918  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20209  01091A  0E00               	movlw	high _PortC
 20210  01091C  0100               	movlb	0	; () banked
 20211  01091E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20212  010920  0E02               	movlw	2
 20213  010922  0100               	movlb	0	; () banked
 20214  010924  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20215  010926  0E03               	movlw	3
 20216  010928  0100               	movlb	0	; () banked
 20217  01092A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20218  01092C  EC92  F093         	call	_Port_SetPinType	;wreg free
 20219                           
 20220                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20221  010930  0EEA               	movlw	low _PortC
 20222  010932  0100               	movlb	0	; () banked
 20223  010934  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20224  010936  0E00               	movlw	high _PortC
 20225  010938  0100               	movlb	0	; () banked
 20226  01093A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20227  01093C  0E03               	movlw	3
 20228  01093E  0100               	movlb	0	; () banked
 20229  010940  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20230  010942  0E03               	movlw	3
 20231  010944  0100               	movlb	0	; () banked
 20232  010946  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20233  010948  EC92  F093         	call	_Port_SetPinType	;wreg free
 20234                           
 20235                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20236  01094C  0EEA               	movlw	low _PortC
 20237  01094E  0100               	movlb	0	; () banked
 20238  010950  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20239  010952  0E00               	movlw	high _PortC
 20240  010954  0100               	movlb	0	; () banked
 20241  010956  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20242  010958  0E05               	movlw	5
 20243  01095A  0100               	movlb	0	; () banked
 20244  01095C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20245  01095E  0E03               	movlw	3
 20246  010960  0100               	movlb	0	; () banked
 20247  010962  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20248  010964  EC92  F093         	call	_Port_SetPinType	;wreg free
 20249                           
 20250                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20251  010968  0EEA               	movlw	low _PortC
 20252  01096A  0100               	movlb	0	; () banked
 20253  01096C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20254  01096E  0E00               	movlw	high _PortC
 20255  010970  0100               	movlb	0	; () banked
 20256  010972  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20257  010974  0E04               	movlw	4
 20258  010976  0100               	movlb	0	; () banked
 20259  010978  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20260  01097A  0E00               	movlw	0
 20261  01097C  0100               	movlb	0	; () banked
 20262  01097E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20263  010980  EC92  F093         	call	_Port_SetPinType	;wreg free
 20264                           
 20265                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20266  010984  0100               	movlb	0	; () banked
 20267  010986  EE20 F003          	lfsr	2,3
 20268  01098A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20269  01098C  26D9               	addwf	fsr2l,f,c
 20270  01098E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20271  010990  22DA               	addwfc	fsr2h,f,c
 20272  010992  0EC7               	movlw	199
 20273  010994  6EDE               	movwf	postinc2,c
 20274  010996  0E0F               	movlw	15
 20275  010998  6EDD               	movwf	postdec2,c
 20276                           
 20277                           ; BSR set to: 0
 20278                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20279  01099A  0100               	movlb	0	; () banked
 20280  01099C  EE20 F006          	lfsr	2,6
 20281  0109A0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20282  0109A2  26D9               	addwf	fsr2l,f,c
 20283  0109A4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20284  0109A6  22DA               	addwfc	fsr2h,f,c
 20285  0109A8  0EC6               	movlw	198
 20286  0109AA  6EDE               	movwf	postinc2,c
 20287  0109AC  0E0F               	movlw	15
 20288  0109AE  6EDD               	movwf	postdec2,c
 20289                           
 20290                           ; BSR set to: 0
 20291                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20292  0109B0  0100               	movlb	0	; () banked
 20293  0109B2  EE20 F009          	lfsr	2,9
 20294  0109B6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20295  0109B8  26D9               	addwf	fsr2l,f,c
 20296  0109BA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20297  0109BC  22DA               	addwfc	fsr2h,f,c
 20298  0109BE  0EC9               	movlw	201
 20299  0109C0  D056               	goto	L14
 20300  0109C2                     
 20301                           ; BSR set to: 0
 20302                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20303                           
 20304                           ; BSR set to: 0
 20305  0109C2  0E9A               	movlw	low _PortD
 20306  0109C4  0100               	movlb	0	; () banked
 20307  0109C6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20308  0109C8  0E03               	movlw	high _PortD
 20309  0109CA  0100               	movlb	0	; () banked
 20310  0109CC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20311  0109CE  0E07               	movlw	7
 20312  0109D0  0100               	movlb	0	; () banked
 20313  0109D2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20314  0109D4  0E03               	movlw	3
 20315  0109D6  0100               	movlb	0	; () banked
 20316  0109D8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20317  0109DA  EC92  F093         	call	_Port_SetPinType	;wreg free
 20318                           
 20319                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20320  0109DE  0E9A               	movlw	low _PortD
 20321  0109E0  0100               	movlb	0	; () banked
 20322  0109E2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20323  0109E4  0E03               	movlw	high _PortD
 20324  0109E6  0100               	movlb	0	; () banked
 20325  0109E8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20326  0109EA  0E06               	movlw	6
 20327  0109EC  0100               	movlb	0	; () banked
 20328  0109EE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20329  0109F0  0E03               	movlw	3
 20330  0109F2  0100               	movlb	0	; () banked
 20331  0109F4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20332  0109F6  EC92  F093         	call	_Port_SetPinType	;wreg free
 20333                           
 20334                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20335  0109FA  0E9A               	movlw	low _PortD
 20336  0109FC  0100               	movlb	0	; () banked
 20337  0109FE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20338  010A00  0E03               	movlw	high _PortD
 20339  010A02  0100               	movlb	0	; () banked
 20340  010A04  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20341  010A06  0E04               	movlw	4
 20342  010A08  0100               	movlb	0	; () banked
 20343  010A0A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20344  010A0C  0E03               	movlw	3
 20345  010A0E  0100               	movlb	0	; () banked
 20346  010A10  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20347  010A12  EC92  F093         	call	_Port_SetPinType	;wreg free
 20348                           
 20349                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20350  010A16  0E9A               	movlw	low _PortD
 20351  010A18  0100               	movlb	0	; () banked
 20352  010A1A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20353  010A1C  0E03               	movlw	high _PortD
 20354  010A1E  0100               	movlb	0	; () banked
 20355  010A20  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20356  010A22  0E05               	movlw	5
 20357  010A24  0100               	movlb	0	; () banked
 20358  010A26  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20359  010A28  0E00               	movlw	0
 20360  010A2A  0100               	movlb	0	; () banked
 20361  010A2C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20362  010A2E  EC92  F093         	call	_Port_SetPinType	;wreg free
 20363                           
 20364                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20365  010A32  0100               	movlb	0	; () banked
 20366  010A34  EE20 F003          	lfsr	2,3
 20367  010A38  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20368  010A3A  26D9               	addwf	fsr2l,f,c
 20369  010A3C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20370  010A3E  22DA               	addwfc	fsr2h,f,c
 20371  010A40  0E6D               	movlw	109
 20372  010A42  6EDE               	movwf	postinc2,c
 20373  010A44  0E0F               	movlw	15
 20374  010A46  6EDD               	movwf	postdec2,c
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20378  010A48  0100               	movlb	0	; () banked
 20379  010A4A  EE20 F006          	lfsr	2,6
 20380  010A4E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20381  010A50  26D9               	addwf	fsr2l,f,c
 20382  010A52  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20383  010A54  22DA               	addwfc	fsr2h,f,c
 20384  010A56  0E6C               	movlw	108
 20385  010A58  6EDE               	movwf	postinc2,c
 20386  010A5A  0E0F               	movlw	15
 20387  010A5C  6EDD               	movwf	postdec2,c
 20388                           
 20389                           ; BSR set to: 0
 20390                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20391  010A5E  0100               	movlb	0	; () banked
 20392  010A60  EE20 F009          	lfsr	2,9
 20393  010A64  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20394  010A66  26D9               	addwf	fsr2l,f,c
 20395  010A68  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20396  010A6A  22DA               	addwfc	fsr2h,f,c
 20397  010A6C  0E6F               	movlw	111
 20398  010A6E                     L14:
 20399  010A6E  6EDE               	movwf	postinc2,c
 20400  010A70  0E0F               	movlw	15
 20401  010A72  6EDD               	movwf	postdec2,c
 20402                           
 20403                           ;SPI.c: 68: break;
 20404  010A74  D009               	goto	l603
 20405  010A76                     l601:
 20406                           
 20407                           ; BSR set to: 0
 20408                           
 20409                           ; BSR set to: 0
 20410  010A76  0100               	movlb	0	; () banked
 20411  010A78  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20412                           
 20413                           ; Switch size 1, requested type "space"
 20414                           ; Number of cases is 2, Range of values is 0 to 1
 20415                           ; switch strategies available:
 20416                           ; Name         Instructions Cycles
 20417                           ; simple_byte            7     4 (average)
 20418                           ;	Chosen strategy is simple_byte
 20419  010A7A  0A00               	xorlw	0	; case 0
 20420  010A7C  B4D8               	btfsc	status,2,c
 20421  010A7E  D74A               	goto	l602
 20422  010A80  0A01               	xorlw	1	; case 1
 20423  010A82  A4D8               	btfss	status,2,c
 20424  010A84  0012               	return	
 20425  010A86  D79D               	goto	l604
 20426  010A88                     l603:
 20427                           
 20428                           ; BSR set to: 0
 20429                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20430                           
 20431                           ; BSR set to: 0
 20432  010A88  0100               	movlb	0	; () banked
 20433  010A8A  EE20 F006          	lfsr	2,6
 20434  010A8E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20435  010A90  26D9               	addwf	fsr2l,f,c
 20436  010A92  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20437  010A94  22DA               	addwfc	fsr2h,f,c
 20438  010A96  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20439  010A9A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20440  010A9E  0E05               	movlw	5
 20441  010AA0  0100               	movlb	0	; () banked
 20442  010AA2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20443  010AA4  0E00               	movlw	0
 20444  010AA6  0100               	movlb	0	; () banked
 20445  010AA8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20446  010AAA  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20447                           
 20448                           ;SPI.c: 77: switch(pMode)
 20449  010AAE  D09C               	goto	l607
 20450  010AB0                     
 20451                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20452  010AB0  0100               	movlb	0	; () banked
 20453  010AB2  EE20 F006          	lfsr	2,6
 20454  010AB6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20455  010AB8  26D9               	addwf	fsr2l,f,c
 20456  010ABA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20457  010ABC  22DA               	addwfc	fsr2h,f,c
 20458  010ABE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20459  010AC2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20460  010AC6  0E04               	movlw	4
 20461  010AC8  0100               	movlb	0	; () banked
 20462  010ACA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20463  010ACC  0E00               	movlw	0
 20464  010ACE  0100               	movlb	0	; () banked
 20465  010AD0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20466  010AD2  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20467                           
 20468                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20469  010AD6  0100               	movlb	0	; () banked
 20470  010AD8  EE20 F003          	lfsr	2,3
 20471  010ADC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20472  010ADE  26D9               	addwf	fsr2l,f,c
 20473  010AE0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20474  010AE2  22DA               	addwfc	fsr2h,f,c
 20475  010AE4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20476  010AE8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20477  010AEC  0E06               	movlw	6
 20478  010AEE  0100               	movlb	0	; () banked
 20479  010AF0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20480  010AF2  0E00               	movlw	0
 20481  010AF4  0100               	movlb	0	; () banked
 20482  010AF6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20483  010AF8  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20484                           
 20485                           ;SPI.c: 82: break;
 20486  010AFC  D084               	goto	l609
 20487  010AFE                     
 20488                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20489  010AFE  0100               	movlb	0	; () banked
 20490  010B00  EE20 F006          	lfsr	2,6
 20491  010B04  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20492  010B06  26D9               	addwf	fsr2l,f,c
 20493  010B08  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20494  010B0A  22DA               	addwfc	fsr2h,f,c
 20495  010B0C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20496  010B10  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20497  010B14  0E04               	movlw	4
 20498  010B16  0100               	movlb	0	; () banked
 20499  010B18  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20500  010B1A  0E00               	movlw	0
 20501  010B1C  0100               	movlb	0	; () banked
 20502  010B1E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20503  010B20  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20504                           
 20505                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20506  010B24  0100               	movlb	0	; () banked
 20507  010B26  EE20 F003          	lfsr	2,3
 20508  010B2A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20509  010B2C  26D9               	addwf	fsr2l,f,c
 20510  010B2E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20511  010B30  22DA               	addwfc	fsr2h,f,c
 20512  010B32  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20513  010B36  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20514  010B3A  0E06               	movlw	6
 20515  010B3C  0100               	movlb	0	; () banked
 20516  010B3E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20517  010B40  0E01               	movlw	1
 20518  010B42  0100               	movlb	0	; () banked
 20519  010B44  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20520  010B46  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20521                           
 20522                           ;SPI.c: 86: break;
 20523  010B4A  D05D               	goto	l609
 20524  010B4C                     
 20525                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20526  010B4C  0100               	movlb	0	; () banked
 20527  010B4E  EE20 F006          	lfsr	2,6
 20528  010B52  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20529  010B54  26D9               	addwf	fsr2l,f,c
 20530  010B56  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20531  010B58  22DA               	addwfc	fsr2h,f,c
 20532  010B5A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20533  010B5E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20534  010B62  0E04               	movlw	4
 20535  010B64  0100               	movlb	0	; () banked
 20536  010B66  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20537  010B68  0E01               	movlw	1
 20538  010B6A  0100               	movlb	0	; () banked
 20539  010B6C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20540  010B6E  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20541                           
 20542                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20543  010B72  0100               	movlb	0	; () banked
 20544  010B74  EE20 F003          	lfsr	2,3
 20545  010B78  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20546  010B7A  26D9               	addwf	fsr2l,f,c
 20547  010B7C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20548  010B7E  22DA               	addwfc	fsr2h,f,c
 20549  010B80  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20550  010B84  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20551  010B88  0E06               	movlw	6
 20552  010B8A  0100               	movlb	0	; () banked
 20553  010B8C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20554  010B8E  0E00               	movlw	0
 20555  010B90  0100               	movlb	0	; () banked
 20556  010B92  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20557  010B94  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20558                           
 20559                           ;SPI.c: 90: break;
 20560  010B98  D036               	goto	l609
 20561  010B9A                     
 20562                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20563  010B9A  0100               	movlb	0	; () banked
 20564  010B9C  EE20 F006          	lfsr	2,6
 20565  010BA0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20566  010BA2  26D9               	addwf	fsr2l,f,c
 20567  010BA4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20568  010BA6  22DA               	addwfc	fsr2h,f,c
 20569  010BA8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20570  010BAC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20571  010BB0  0E04               	movlw	4
 20572  010BB2  0100               	movlb	0	; () banked
 20573  010BB4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20574  010BB6  0E01               	movlw	1
 20575  010BB8  0100               	movlb	0	; () banked
 20576  010BBA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20577  010BBC  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20578                           
 20579                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20580  010BC0  0100               	movlb	0	; () banked
 20581  010BC2  EE20 F003          	lfsr	2,3
 20582  010BC6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20583  010BC8  26D9               	addwf	fsr2l,f,c
 20584  010BCA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20585  010BCC  22DA               	addwfc	fsr2h,f,c
 20586  010BCE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20587  010BD2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20588  010BD6  0E06               	movlw	6
 20589  010BD8  0100               	movlb	0	; () banked
 20590  010BDA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20591  010BDC  0E01               	movlw	1
 20592  010BDE  0100               	movlb	0	; () banked
 20593  010BE0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20594  010BE2  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20595                           
 20596                           ;SPI.c: 94: break;
 20597  010BE6  D00F               	goto	l609
 20598  010BE8                     l607:
 20599  010BE8  0100               	movlb	0	; () banked
 20600  010BEA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 20601                           
 20602                           ; Switch size 1, requested type "space"
 20603                           ; Number of cases is 4, Range of values is 0 to 3
 20604                           ; switch strategies available:
 20605                           ; Name         Instructions Cycles
 20606                           ; simple_byte           13     7 (average)
 20607                           ;	Chosen strategy is simple_byte
 20608  010BEC  0A00               	xorlw	0	; case 0
 20609  010BEE  B4D8               	btfsc	status,2,c
 20610  010BF0  D75F               	goto	l608
 20611  010BF2  0A01               	xorlw	1	; case 1
 20612  010BF4  B4D8               	btfsc	status,2,c
 20613  010BF6  D783               	goto	l610
 20614  010BF8  0A03               	xorlw	3	; case 2
 20615  010BFA  B4D8               	btfsc	status,2,c
 20616  010BFC  D7A7               	goto	l611
 20617  010BFE  0A01               	xorlw	1	; case 3
 20618  010C00  A4D8               	btfss	status,2,c
 20619  010C02  0012               	return	
 20620  010C04  D7CA               	goto	l612
 20621  010C06                     l609:
 20622                           
 20623                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20624                           
 20625                           ; BSR set to: 0
 20626  010C06  0100               	movlb	0	; () banked
 20627  010C08  EE20 F006          	lfsr	2,6
 20628  010C0C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20629  010C0E  26D9               	addwf	fsr2l,f,c
 20630  010C10  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20631  010C12  22DA               	addwfc	fsr2h,f,c
 20632  010C14  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20633  010C18  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20634  010C1C  0E07               	movlw	7
 20635  010C1E  0100               	movlb	0	; () banked
 20636  010C20  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20637  010C22  0E00               	movlw	0
 20638  010C24  0100               	movlb	0	; () banked
 20639  010C26  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20640  010C28  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20641                           
 20642                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20643  010C2C  0100               	movlb	0	; () banked
 20644  010C2E  EE20 F006          	lfsr	2,6
 20645  010C32  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20646  010C34  26D9               	addwf	fsr2l,f,c
 20647  010C36  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20648  010C38  22DA               	addwfc	fsr2h,f,c
 20649  010C3A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20650  010C3E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20651  010C42  0E06               	movlw	6
 20652  010C44  0100               	movlb	0	; () banked
 20653  010C46  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20654  010C48  0E00               	movlw	0
 20655  010C4A  0100               	movlb	0	; () banked
 20656  010C4C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20657  010C4E  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20658                           
 20659                           ;SPI.c: 106: Timer2_Init(pClock);
 20660  010C52  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20661  010C56  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20662  010C5A  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20663  010C5E  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20664  010C62  ECA9  F099         	call	_Timer2_Init	;wreg free
 20665                           
 20666                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20667  010C66  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20668  010C6A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20669  010C6E  EC41  F0B1         	call	_SPI_DisableISR	;wreg free
 20670                           
 20671                           ;SPI.c: 116: switch (pChannel)
 20672  010C72  D004               	goto	l614
 20673  010C74                     l615:
 20674                           
 20675                           ; BSR set to: 0
 20676  010C74  869F               	bsf	3999,3,c	;volatile
 20677  010C76  D00B               	goto	l616
 20678  010C78                     l617:
 20679                           
 20680                           ; BSR set to: 0
 20681  010C78  8EA5               	bsf	4005,7,c	;volatile
 20682  010C7A  D009               	goto	l616
 20683  010C7C                     l614:
 20684                           
 20685                           ; BSR set to: 0
 20686  010C7C  0100               	movlb	0	; () banked
 20687  010C7E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20688                           
 20689                           ; Switch size 1, requested type "space"
 20690                           ; Number of cases is 2, Range of values is 0 to 1
 20691                           ; switch strategies available:
 20692                           ; Name         Instructions Cycles
 20693                           ; simple_byte            7     4 (average)
 20694                           ;	Chosen strategy is simple_byte
 20695  010C80  0A00               	xorlw	0	; case 0
 20696  010C82  B4D8               	btfsc	status,2,c
 20697  010C84  D7F7               	goto	l615
 20698  010C86  0A01               	xorlw	1	; case 1
 20699  010C88  A4D8               	btfss	status,2,c
 20700  010C8A  0012               	return	
 20701  010C8C  D7F5               	goto	l617
 20702  010C8E                     l616:
 20703                           
 20704                           ; BSR set to: 0
 20705                           ;SPI.c: 124: SPI_DCS(pInput);
 20706                           
 20707                           ; BSR set to: 0
 20708  010C8E  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20709  010C92  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20710  010C96  ECA1  F0B0         	call	_SPI_DCS	;wreg free
 20711                           
 20712                           ;SPI.c: 126: pInput->mBusy = 0;
 20713  010C9A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 20714  010C9E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20715  010CA2  0E00               	movlw	0
 20716  010CA4  6EDF               	movwf	indf2,c
 20717                           
 20718                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20719  010CA6  0100               	movlb	0	; () banked
 20720  010CA8  EE20 F006          	lfsr	2,6
 20721  010CAC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20722  010CAE  26D9               	addwf	fsr2l,f,c
 20723  010CB0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20724  010CB2  22DA               	addwfc	fsr2h,f,c
 20725  010CB4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 20726  010CB8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 20727  010CBC  0E00               	movlw	0
 20728  010CBE  0100               	movlb	0	; () banked
 20729  010CC0  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20730  010CC2  0E03               	movlw	3
 20731  010CC4  0100               	movlb	0	; () banked
 20732  010CC6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 20733  010CC8  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 20734                           
 20735                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20736  010CCC  0100               	movlb	0	; () banked
 20737  010CCE  EE20 F006          	lfsr	2,6
 20738  010CD2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20739  010CD4  26D9               	addwf	fsr2l,f,c
 20740  010CD6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20741  010CD8  22DA               	addwfc	fsr2h,f,c
 20742  010CDA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20743  010CDE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20744  010CE2  0E05               	movlw	5
 20745  010CE4  0100               	movlb	0	; () banked
 20746  010CE6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20747  010CE8  0E01               	movlw	1
 20748  010CEA  0100               	movlb	0	; () banked
 20749  010CEC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20750  010CEE  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 20751  010CF2  0012               	return		;funcret
 20752  010CF4                     __end_of_SPI_Init:
 20753                           	opt stack 0
 20754                           tosu	equ	0xFFF
 20755                           tosh	equ	0xFFE
 20756                           tosl	equ	0xFFD
 20757                           pclath	equ	0xFFA
 20758                           tblptru	equ	0xFF8
 20759                           tblptrh	equ	0xFF7
 20760                           tblptrl	equ	0xFF6
 20761                           tablat	equ	0xFF5
 20762                           prodh	equ	0xFF4
 20763                           prodl	equ	0xFF3
 20764                           intcon	equ	0xFF2
 20765                           postinc0	equ	0xFEE
 20766                           wreg	equ	0xFE8
 20767                           indf1	equ	0xFE7
 20768                           postdec1	equ	0xFE5
 20769                           fsr1h	equ	0xFE2
 20770                           fsr1l	equ	0xFE1
 20771                           indf2	equ	0xFDF
 20772                           postinc2	equ	0xFDE
 20773                           postdec2	equ	0xFDD
 20774                           plusw2	equ	0xFDB
 20775                           fsr2h	equ	0xFDA
 20776                           fsr2l	equ	0xFD9
 20777                           status	equ	0xFD8
 20778                           
 20779 ;; *************** function _Timer2_Init *****************
 20780 ;; Defined at:
 20781 ;;		line 10 in file "Library/Timer2.c"
 20782 ;; Parameters:    Size  Location     Type
 20783 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20784 ;; Auto vars:     Size  Location     Type
 20785 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20786 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20787 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20788 ;; Return value:  Size  Location     Type
 20789 ;;                  1    wreg      void 
 20790 ;; Registers used:
 20791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20792 ;; Tracked objects:
 20793 ;;		On entry : 0/0
 20794 ;;		On exit  : 0/0
 20795 ;;		Unchanged: 0/0
 20796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20797 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20798 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20800 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20801 ;;Total ram usage:       17 bytes
 20802 ;; Hardware stack levels used:    1
 20803 ;; Hardware stack levels required when called:    8
 20804 ;; This function calls:
 20805 ;;		_Timer2_Clear
 20806 ;;		___lldiv
 20807 ;; This function is called by:
 20808 ;;		_SPI_Init
 20809 ;; This function uses a non-reentrant model
 20810 ;;
 20811                           
 20812                           	psect	text96
 20813  013352                     __ptext96:
 20814                           	opt stack 0
 20815  013352                     _Timer2_Init:
 20816                           	opt stack 18
 20817                           
 20818                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 20819                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 20820                           ;Timer2.c: 14: static UINT8 PRE = 0;
 20821                           ;Timer2.c: 15: static UINT32 DIV = 0;
 20822                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 20823                           
 20824                           ;incstack = 0
 20825  013352  0E00               	movlw	0
 20826  013354  0100               	movlb	0	; () banked
 20827  013356  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 20828  013358  0E6C               	movlw	108
 20829  01335A  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 20830  01335C  0EDC               	movlw	220
 20831  01335E  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 20832  013360  0E02               	movlw	2
 20833  013362  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 20834                           
 20835                           ; BSR set to: 0
 20836                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 20837                           ;Timer2.c: 20: pFrequency *= 2;
 20838  013364  0100               	movlb	0	; () banked
 20839  013366  90D8               	bcf	status,0,c
 20840  013368  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 20841  01336A  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 20842  01336C  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 20843  01336E  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 20844                           
 20845                           ; BSR set to: 0
 20846                           ;Timer2.c: 23: pCPUClock /= 4;
 20847  013370  0E02               	movlw	2
 20848  013372  0100               	movlb	0	; () banked
 20849  013374  6F71               	movwf	??_Timer2_Init& (0+255),b
 20850  013376                     u9415:
 20851  013376  90D8               	bcf	status,0,c
 20852  013378  0100               	movlb	0	; () banked
 20853  01337A  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 20854  01337C  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 20855  01337E  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 20856  013380  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 20857  013382  0100               	movlb	0	; () banked
 20858  013384  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 20859  013386  D7F7               	goto	u9415
 20860                           
 20861                           ; BSR set to: 0
 20862                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 20863  013388  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 20864  01338C  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 20865  013390  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 20866  013394  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 20867  013398  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 20868  01339C  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 20869  0133A0  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 20870  0133A4  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 20871  0133A8  EC0E  F0A1         	call	___lldiv	;wreg free
 20872  0133AC  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 20873  0133B0  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 20874  0133B4  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 20875  0133B8  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 20876                           
 20877                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 20878  0133BC  D010               	goto	l1828
 20879  0133BE                     l12736:
 20880                           
 20881                           ;Timer2.c: 28: {
 20882                           ;Timer2.c: 29: RDIV = 0;
 20883  0133BE  0E00               	movlw	0
 20884  0133C0  0100               	movlb	0	; () banked
 20885  0133C2  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 20886  0133C4  0E00               	movlw	0
 20887  0133C6  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 20888  0133C8  0E00               	movlw	0
 20889  0133CA  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 20890  0133CC  0E00               	movlw	0
 20891  0133CE  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 20892                           
 20893                           ; BSR set to: 0
 20894                           ;Timer2.c: 30: INDEX ++;
 20895  0133D0  0100               	movlb	0	; () banked
 20896  0133D2  2BE4               	incf	Timer2_Init@INDEX& (0+255),f,b
 20897                           
 20898                           ; BSR set to: 0
 20899                           ;Timer2.c: 31: if (INDEX >= 3)
 20900  0133D4  0E02               	movlw	2
 20901  0133D6  0100               	movlb	0	; () banked
 20902  0133D8  65E4               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 20903  0133DA  D001               	goto	l1828
 20904  0133DC  D026               	goto	u9430
 20905  0133DE                     l1828:
 20906                           
 20907                           ; BSR set to: 0
 20908                           
 20909                           ; BSR set to: 0
 20910  0133DE  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 20911  0133E2  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 20912  0133E6  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 20913  0133EA  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 20914  0133EE  0100               	movlb	0	; () banked
 20915  0133F0  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 20916  0133F2  0D01               	mullw	1
 20917  0133F4  0E68               	movlw	low Timer2_Init@PRESCALE
 20918  0133F6  24F3               	addwf	prodl,w,c
 20919  0133F8  6EF6               	movwf	tblptrl,c
 20920  0133FA  0EFD               	movlw	high Timer2_Init@PRESCALE
 20921  0133FC  20F4               	addwfc	prodh,w,c
 20922  0133FE  6EF7               	movwf	tblptrh,c
 20923  013400                     	if	1	;There are 3 active tblptr bytes
 20924  013400  6AF8               	clrf	tblptru,c
 20925  013402  0E00               	movlw	low (__mediumconst shr (0+16))
 20926  013404  22F8               	addwfc	tblptru,f,c
 20927  013406                     	endif
 20928  013406  0008               	tblrd		*
 20929  013408  50F5               	movf	tablat,w,c
 20930  01340A  0100               	movlb	0	; () banked
 20931  01340C  6F64               	movwf	___lldiv@divisor& (0+255),b
 20932  01340E  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20933  013410  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20934  013412  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20935  013414  EC0E  F0A1         	call	___lldiv	;wreg free
 20936  013418  0100               	movlb	0	; () banked
 20937  01341A  5163               	movf	(?___lldiv+3)& (0+255),w,b
 20938  01341C  0100               	movlb	0	; () banked
 20939  01341E  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 20940  013420  E1CE               	bnz	l12736
 20941  013422  0100               	movlb	0	; () banked
 20942  013424  0561               	decf	(?___lldiv+1)& (0+255),w,b
 20943  013426  B0D8               	btfsc	status,0,c
 20944  013428  D7CA               	goto	l1827
 20945  01342A                     u9430:
 20946                           
 20947                           ; BSR set to: 0
 20948                           ;Timer2.c: 33: }
 20949                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 20950                           
 20951                           ; BSR set to: 0
 20952  01342A  50CA               	movf	4042,w,c	;volatile
 20953  01342C  0100               	movlb	0	; () banked
 20954  01342E  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20955  013430  0BFC               	andlw	-4
 20956  013432  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20957  013434  6ECA               	movwf	4042,c	;volatile
 20958                           
 20959                           ; BSR set to: 0
 20960                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 20961  013436  84CA               	bsf	4042,2,c	;volatile
 20962                           
 20963                           ; BSR set to: 0
 20964                           ;Timer2.c: 44: Timer2_Clear();
 20965  013438  EC47  F0B3         	call	_Timer2_Clear	;wreg free
 20966                           
 20967                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 20968  01343C  0100               	movlb	0	; () banked
 20969  01343E  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 20970  013440  0D01               	mullw	1
 20971  013442  0E68               	movlw	low Timer2_Init@PRESCALE
 20972  013444  24F3               	addwf	prodl,w,c
 20973  013446  6EF6               	movwf	tblptrl,c
 20974  013448  0EFD               	movlw	high Timer2_Init@PRESCALE
 20975  01344A  20F4               	addwfc	prodh,w,c
 20976  01344C  6EF7               	movwf	tblptrh,c
 20977  01344E                     	if	1	;There are 3 active tblptr bytes
 20978  01344E  6AF8               	clrf	tblptru,c
 20979  013450  0E00               	movlw	low (__mediumconst shr (0+16))
 20980  013452  22F8               	addwfc	tblptru,f,c
 20981  013454                     	endif
 20982  013454  0008               	tblrd		*
 20983  013456  CFF5 F0E3          	movff	tablat,Timer2_Init@PRE
 20984                           
 20985                           ; BSR set to: 0
 20986                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 20987  01345A  0EFF               	movlw	255
 20988  01345C  0100               	movlb	0	; () banked
 20989  01345E  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 20990  013460  0103               	movlb	3	; () banked
 20991  013462  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 20992  013464  0EFF               	movlw	255
 20993  013466  0100               	movlb	0	; () banked
 20994  013468  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 20995  01346A  0103               	movlb	3	; () banked
 20996  01346C  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 20997  01346E  0EFF               	movlw	255
 20998  013470  0100               	movlb	0	; () banked
 20999  013472  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21000  013474  0103               	movlb	3	; () banked
 21001  013476  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21002  013478  0EFF               	movlw	255
 21003  01347A  0100               	movlb	0	; () banked
 21004  01347C  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21005  01347E  0103               	movlb	3	; () banked
 21006  013480  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21007                           
 21008                           ; BSR set to: 3
 21009                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21010  013482  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 21011  013486  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21012  01348A  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21013  01348E  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21014  013492  0100               	movlb	0	; () banked
 21015  013494  51E3               	movf	Timer2_Init@PRE& (0+255),w,b
 21016  013496  0100               	movlb	0	; () banked
 21017  013498  6F64               	movwf	___lldiv@divisor& (0+255),b
 21018  01349A  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 21019  01349C  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 21020  01349E  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 21021  0134A0  EC0E  F0A1         	call	___lldiv	;wreg free
 21022  0134A4  0100               	movlb	0	; () banked
 21023  0134A6  5160               	movf	?___lldiv& (0+255),w,b
 21024  0134A8  0100               	movlb	0	; () banked
 21025  0134AA  6FE4               	movwf	Timer2_Init@INDEX& (0+255),b
 21026                           
 21027                           ; BSR set to: 0
 21028                           ;Timer2.c: 49: PR2 = INDEX;
 21029  0134AC  C0E4  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21030                           
 21031                           ; BSR set to: 0
 21032  0134B0  0012               	return		;funcret
 21033  0134B2                     __end_of_Timer2_Init:
 21034                           	opt stack 0
 21035                           tosu	equ	0xFFF
 21036                           tosh	equ	0xFFE
 21037                           tosl	equ	0xFFD
 21038                           pclath	equ	0xFFA
 21039                           tblptru	equ	0xFF8
 21040                           tblptrh	equ	0xFF7
 21041                           tblptrl	equ	0xFF6
 21042                           tablat	equ	0xFF5
 21043                           prodh	equ	0xFF4
 21044                           prodl	equ	0xFF3
 21045                           intcon	equ	0xFF2
 21046                           postinc0	equ	0xFEE
 21047                           wreg	equ	0xFE8
 21048                           indf1	equ	0xFE7
 21049                           postdec1	equ	0xFE5
 21050                           fsr1h	equ	0xFE2
 21051                           fsr1l	equ	0xFE1
 21052                           indf2	equ	0xFDF
 21053                           postinc2	equ	0xFDE
 21054                           postdec2	equ	0xFDD
 21055                           plusw2	equ	0xFDB
 21056                           fsr2h	equ	0xFDA
 21057                           fsr2l	equ	0xFD9
 21058                           status	equ	0xFD8
 21059                           
 21060 ;; *************** function ___lldiv *****************
 21061 ;; Defined at:
 21062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21063 ;; Parameters:    Size  Location     Type
 21064 ;;  dividend        4    0[BANK0 ] unsigned long 
 21065 ;;  divisor         4    4[BANK0 ] unsigned long 
 21066 ;; Auto vars:     Size  Location     Type
 21067 ;;  quotient        4    8[BANK0 ] unsigned long 
 21068 ;;  counter         1   12[BANK0 ] unsigned char 
 21069 ;; Return value:  Size  Location     Type
 21070 ;;                  4    0[BANK0 ] unsigned long 
 21071 ;; Registers used:
 21072 ;;		wreg, status,2, status,0
 21073 ;; Tracked objects:
 21074 ;;		On entry : 0/0
 21075 ;;		On exit  : 0/0
 21076 ;;		Unchanged: 0/0
 21077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21078 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;Total ram usage:       13 bytes
 21083 ;; Hardware stack levels used:    1
 21084 ;; Hardware stack levels required when called:    7
 21085 ;; This function calls:
 21086 ;;		Nothing
 21087 ;; This function is called by:
 21088 ;;		_Timer0_Init
 21089 ;;		_Timer2_Init
 21090 ;;		_rand_between
 21091 ;;		_I2C_Init
 21092 ;; This function uses a non-reentrant model
 21093 ;;
 21094                           
 21095                           	psect	text97
 21096  01421C                     __ptext97:
 21097                           	opt stack 0
 21098  01421C                     ___lldiv:
 21099                           	opt stack 20
 21100                           
 21101                           ; BSR set to: 0
 21102                           ;incstack = 0
 21103  01421C  0E00               	movlw	0
 21104  01421E  0100               	movlb	0	; () banked
 21105  014220  6F68               	movwf	___lldiv@quotient& (0+255),b
 21106  014222  0E00               	movlw	0
 21107  014224  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 21108  014226  0E00               	movlw	0
 21109  014228  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 21110  01422A  0E00               	movlw	0
 21111  01422C  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 21112                           
 21113                           ; BSR set to: 0
 21114  01422E  0100               	movlb	0	; () banked
 21115  014230  5164               	movf	___lldiv@divisor& (0+255),w,b
 21116  014232  0100               	movlb	0	; () banked
 21117  014234  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21118  014236  0100               	movlb	0	; () banked
 21119  014238  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21120  01423A  0100               	movlb	0	; () banked
 21121  01423C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21122  01423E  B4D8               	btfsc	status,2,c
 21123  014240  D042               	goto	l2800
 21124                           
 21125                           ; BSR set to: 0
 21126  014242  0E01               	movlw	1
 21127  014244  0100               	movlb	0	; () banked
 21128  014246  6F6C               	movwf	___lldiv@counter& (0+255),b
 21129  014248  D008               	goto	l2795
 21130  01424A                     
 21131                           ; BSR set to: 0
 21132                           
 21133                           ; BSR set to: 0
 21134  01424A  0100               	movlb	0	; () banked
 21135  01424C  90D8               	bcf	status,0,c
 21136  01424E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 21137  014250  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21138  014252  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21139  014254  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21140  014256  0100               	movlb	0	; () banked
 21141  014258  2B6C               	incf	___lldiv@counter& (0+255),f,b
 21142  01425A                     l2795:
 21143                           
 21144                           ; BSR set to: 0
 21145                           
 21146                           ; BSR set to: 0
 21147  01425A  0100               	movlb	0	; () banked
 21148  01425C  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21149  01425E  D7F5               	goto	l2796
 21150  014260                     u9280:
 21151                           
 21152                           ; BSR set to: 0
 21153                           
 21154                           ; BSR set to: 0
 21155                           
 21156                           ; BSR set to: 0
 21157  014260  0100               	movlb	0	; () banked
 21158  014262  90D8               	bcf	status,0,c
 21159  014264  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 21160  014266  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21161  014268  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21162  01426A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21163                           
 21164                           ; BSR set to: 0
 21165  01426C  0100               	movlb	0	; () banked
 21166  01426E  5164               	movf	___lldiv@divisor& (0+255),w,b
 21167  014270  0100               	movlb	0	; () banked
 21168  014272  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 21169  014274  0100               	movlb	0	; () banked
 21170  014276  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21171  014278  0100               	movlb	0	; () banked
 21172  01427A  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21173  01427C  0100               	movlb	0	; () banked
 21174  01427E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21175  014280  0100               	movlb	0	; () banked
 21176  014282  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21177  014284  0100               	movlb	0	; () banked
 21178  014286  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21179  014288  0100               	movlb	0	; () banked
 21180  01428A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21181  01428C  A0D8               	btfss	status,0,c
 21182  01428E  D012               	goto	l2799
 21183                           
 21184                           ; BSR set to: 0
 21185  014290  0100               	movlb	0	; () banked
 21186  014292  5164               	movf	___lldiv@divisor& (0+255),w,b
 21187  014294  0100               	movlb	0	; () banked
 21188  014296  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 21189  014298  0100               	movlb	0	; () banked
 21190  01429A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21191  01429C  0100               	movlb	0	; () banked
 21192  01429E  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21193  0142A0  0100               	movlb	0	; () banked
 21194  0142A2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21195  0142A4  0100               	movlb	0	; () banked
 21196  0142A6  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21197  0142A8  0100               	movlb	0	; () banked
 21198  0142AA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21199  0142AC  0100               	movlb	0	; () banked
 21200  0142AE  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21201                           
 21202                           ; BSR set to: 0
 21203  0142B0  0100               	movlb	0	; () banked
 21204  0142B2  8168               	bsf	___lldiv@quotient& (0+255),0,b
 21205  0142B4                     l2799:
 21206                           
 21207                           ; BSR set to: 0
 21208                           
 21209                           ; BSR set to: 0
 21210  0142B4  0100               	movlb	0	; () banked
 21211  0142B6  90D8               	bcf	status,0,c
 21212  0142B8  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21213  0142BA  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21214  0142BC  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21215  0142BE  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 21216                           
 21217                           ; BSR set to: 0
 21218  0142C0  0100               	movlb	0	; () banked
 21219  0142C2  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 21220  0142C4  D7CD               	goto	u9280
 21221  0142C6                     l2800:
 21222                           
 21223                           ; BSR set to: 0
 21224                           
 21225                           ; BSR set to: 0
 21226  0142C6  C068  F060         	movff	___lldiv@quotient,?___lldiv
 21227  0142CA  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 21228  0142CE  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 21229  0142D2  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 21230                           
 21231                           ; BSR set to: 0
 21232  0142D6  0012               	return		;funcret
 21233  0142D8                     __end_of___lldiv:
 21234                           	opt stack 0
 21235                           tosu	equ	0xFFF
 21236                           tosh	equ	0xFFE
 21237                           tosl	equ	0xFFD
 21238                           pclath	equ	0xFFA
 21239                           tblptru	equ	0xFF8
 21240                           tblptrh	equ	0xFF7
 21241                           tblptrl	equ	0xFF6
 21242                           tablat	equ	0xFF5
 21243                           prodh	equ	0xFF4
 21244                           prodl	equ	0xFF3
 21245                           intcon	equ	0xFF2
 21246                           postinc0	equ	0xFEE
 21247                           wreg	equ	0xFE8
 21248                           indf1	equ	0xFE7
 21249                           postdec1	equ	0xFE5
 21250                           fsr1h	equ	0xFE2
 21251                           fsr1l	equ	0xFE1
 21252                           indf2	equ	0xFDF
 21253                           postinc2	equ	0xFDE
 21254                           postdec2	equ	0xFDD
 21255                           plusw2	equ	0xFDB
 21256                           fsr2h	equ	0xFDA
 21257                           fsr2l	equ	0xFD9
 21258                           status	equ	0xFD8
 21259                           
 21260 ;; *************** function _Timer2_Clear *****************
 21261 ;; Defined at:
 21262 ;;		line 3 in file "Library/Timer2.c"
 21263 ;; Parameters:    Size  Location     Type
 21264 ;;		None
 21265 ;; Auto vars:     Size  Location     Type
 21266 ;;		None
 21267 ;; Return value:  Size  Location     Type
 21268 ;;                  1    wreg      void 
 21269 ;; Registers used:
 21270 ;;		None
 21271 ;; Tracked objects:
 21272 ;;		On entry : 0/0
 21273 ;;		On exit  : 0/0
 21274 ;;		Unchanged: 0/0
 21275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21280 ;;Total ram usage:        0 bytes
 21281 ;; Hardware stack levels used:    1
 21282 ;; Hardware stack levels required when called:    7
 21283 ;; This function calls:
 21284 ;;		Nothing
 21285 ;; This function is called by:
 21286 ;;		_Timer2_Init
 21287 ;; This function uses a non-reentrant model
 21288 ;;
 21289                           
 21290                           	psect	text98
 21291  01668E                     __ptext98:
 21292                           	opt stack 0
 21293  01668E                     _Timer2_Clear:
 21294                           	opt stack 18
 21295                           
 21296                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21297                           
 21298                           ; BSR set to: 0
 21299                           ;incstack = 0
 21300  01668E  929E               	bcf	3998,1,c	;volatile
 21301                           
 21302                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21303  016690  929D               	bcf	3997,1,c	;volatile
 21304                           
 21305                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21306  016692  929F               	bcf	3999,1,c	;volatile
 21307  016694  0012               	return		;funcret
 21308  016696                     __end_of_Timer2_Clear:
 21309                           	opt stack 0
 21310                           tosu	equ	0xFFF
 21311                           tosh	equ	0xFFE
 21312                           tosl	equ	0xFFD
 21313                           pclath	equ	0xFFA
 21314                           tblptru	equ	0xFF8
 21315                           tblptrh	equ	0xFF7
 21316                           tblptrl	equ	0xFF6
 21317                           tablat	equ	0xFF5
 21318                           prodh	equ	0xFF4
 21319                           prodl	equ	0xFF3
 21320                           intcon	equ	0xFF2
 21321                           postinc0	equ	0xFEE
 21322                           wreg	equ	0xFE8
 21323                           indf1	equ	0xFE7
 21324                           postdec1	equ	0xFE5
 21325                           fsr1h	equ	0xFE2
 21326                           fsr1l	equ	0xFE1
 21327                           indf2	equ	0xFDF
 21328                           postinc2	equ	0xFDE
 21329                           postdec2	equ	0xFDD
 21330                           plusw2	equ	0xFDB
 21331                           fsr2h	equ	0xFDA
 21332                           fsr2l	equ	0xFD9
 21333                           status	equ	0xFD8
 21334                           
 21335 ;; *************** function _SPI_DisableISR *****************
 21336 ;; Defined at:
 21337 ;;		line 181 in file "Library/SPI.c"
 21338 ;; Parameters:    Size  Location     Type
 21339 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21340 ;;		 -> SPI1(11), SPI2(11), 
 21341 ;; Auto vars:     Size  Location     Type
 21342 ;;		None
 21343 ;; Return value:  Size  Location     Type
 21344 ;;                  1    wreg      void 
 21345 ;; Registers used:
 21346 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21347 ;; Tracked objects:
 21348 ;;		On entry : 0/0
 21349 ;;		On exit  : 0/0
 21350 ;;		Unchanged: 0/0
 21351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21352 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21356 ;;Total ram usage:        2 bytes
 21357 ;; Hardware stack levels used:    1
 21358 ;; Hardware stack levels required when called:    7
 21359 ;; This function calls:
 21360 ;;		Nothing
 21361 ;; This function is called by:
 21362 ;;		_SPI_Init
 21363 ;; This function uses a non-reentrant model
 21364 ;;
 21365                           
 21366                           	psect	text99
 21367  016282                     __ptext99:
 21368                           	opt stack 0
 21369  016282                     _SPI_DisableISR:
 21370                           	opt stack 19
 21371                           
 21372                           ;SPI.c: 183: switch (pInput->mChannel)
 21373                           
 21374                           ;incstack = 0
 21375  016282  D004               	goto	l654
 21376  016284                     l655:
 21377                           
 21378                           ; BSR set to: 0
 21379  016284  969D               	bcf	3997,3,c	;volatile
 21380  016286  0012               	return	
 21381  016288                     l657:
 21382                           
 21383                           ; BSR set to: 0
 21384  016288  9EA3               	bcf	4003,7,c	;volatile
 21385                           
 21386                           ; BSR set to: 0
 21387                           ;SPI.c: 188: };
 21388                           
 21389                           ; BSR set to: 0
 21390                           
 21391                           ;SPI.c: 187: default: return;
 21392  01628A  0012               	return	
 21393  01628C                     l654:
 21394                           
 21395                           ; BSR set to: 0
 21396  01628C  0100               	movlb	0	; () banked
 21397  01628E  EE20 F002          	lfsr	2,2
 21398  016292  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21399  016294  26D9               	addwf	fsr2l,f,c
 21400  016296  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21401  016298  22DA               	addwfc	fsr2h,f,c
 21402  01629A  50DF               	movf	indf2,w,c
 21403                           
 21404                           ; Switch size 1, requested type "space"
 21405                           ; Number of cases is 2, Range of values is 0 to 1
 21406                           ; switch strategies available:
 21407                           ; Name         Instructions Cycles
 21408                           ; simple_byte            7     4 (average)
 21409                           ;	Chosen strategy is simple_byte
 21410  01629C  0A00               	xorlw	0	; case 0
 21411  01629E  B4D8               	btfsc	status,2,c
 21412  0162A0  D7F1               	goto	l655
 21413  0162A2  0A01               	xorlw	1	; case 1
 21414  0162A4  A4D8               	btfss	status,2,c
 21415  0162A6  0012               	return	
 21416  0162A8  D7EF               	goto	l657
 21417  0162AA                     __end_of_SPI_DisableISR:
 21418                           	opt stack 0
 21419                           tosu	equ	0xFFF
 21420                           tosh	equ	0xFFE
 21421                           tosl	equ	0xFFD
 21422                           pclath	equ	0xFFA
 21423                           tblptru	equ	0xFF8
 21424                           tblptrh	equ	0xFF7
 21425                           tblptrl	equ	0xFF6
 21426                           tablat	equ	0xFF5
 21427                           prodh	equ	0xFF4
 21428                           prodl	equ	0xFF3
 21429                           intcon	equ	0xFF2
 21430                           postinc0	equ	0xFEE
 21431                           wreg	equ	0xFE8
 21432                           indf1	equ	0xFE7
 21433                           postdec1	equ	0xFE5
 21434                           fsr1h	equ	0xFE2
 21435                           fsr1l	equ	0xFE1
 21436                           indf2	equ	0xFDF
 21437                           postinc2	equ	0xFDE
 21438                           postdec2	equ	0xFDD
 21439                           plusw2	equ	0xFDB
 21440                           fsr2h	equ	0xFDA
 21441                           fsr2l	equ	0xFD9
 21442                           status	equ	0xFD8
 21443                           
 21444 ;; *************** function _SPI_DCS *****************
 21445 ;; Defined at:
 21446 ;;		line 219 in file "Library/SPI.c"
 21447 ;; Parameters:    Size  Location     Type
 21448 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21449 ;;		 -> SPI1(11), SPI2(11), 
 21450 ;; Auto vars:     Size  Location     Type
 21451 ;;		None
 21452 ;; Return value:  Size  Location     Type
 21453 ;;                  1    wreg      void 
 21454 ;; Registers used:
 21455 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21456 ;; Tracked objects:
 21457 ;;		On entry : 0/0
 21458 ;;		On exit  : 0/0
 21459 ;;		Unchanged: 0/0
 21460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21461 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21464 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21465 ;;Total ram usage:        2 bytes
 21466 ;; Hardware stack levels used:    1
 21467 ;; Hardware stack levels required when called:    7
 21468 ;; This function calls:
 21469 ;;		Nothing
 21470 ;; This function is called by:
 21471 ;;		_SPI_Init
 21472 ;; This function uses a non-reentrant model
 21473 ;;
 21474                           
 21475                           	psect	text100
 21476  016142                     __ptext100:
 21477                           	opt stack 0
 21478  016142                     _SPI_DCS:
 21479                           	opt stack 19
 21480                           
 21481                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21482                           
 21483                           ; BSR set to: 0
 21484                           ;incstack = 0
 21485  016142  0100               	movlb	0	; () banked
 21486  016144  EE20 F002          	lfsr	2,2
 21487  016148  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 21488  01614A  26D9               	addwf	fsr2l,f,c
 21489  01614C  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21490  01614E  22DA               	addwfc	fsr2h,f,c
 21491  016150  50DF               	movf	indf2,w,c
 21492  016152  A4D8               	btfss	status,2,c
 21493  016154  D007               	goto	l673
 21494                           
 21495                           ; BSR set to: 0
 21496                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21497  016156  C0EE  FFD9         	movff	_PortC+4,fsr2l
 21498  01615A  C0EF  FFDA         	movff	_PortC+5,fsr2h
 21499  01615E  0100               	movlb	0	; () banked
 21500  016160  84DF               	bsf	indf2,2,c
 21501  016162  0012               	return	
 21502  016164                     l673:
 21503                           
 21504                           ; BSR set to: 0
 21505                           ;SPI.c: 223: else
 21506                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21507                           
 21508                           ; BSR set to: 0
 21509  016164  C39E  FFD9         	movff	_PortD+4,fsr2l
 21510  016168  C39F  FFDA         	movff	_PortD+5,fsr2h
 21511  01616C  0103               	movlb	3	; () banked
 21512  01616E  8EDF               	bsf	indf2,7,c
 21513  016170  0012               	return	
 21514  016172                     __end_of_SPI_DCS:
 21515                           	opt stack 0
 21516                           tosu	equ	0xFFF
 21517                           tosh	equ	0xFFE
 21518                           tosl	equ	0xFFD
 21519                           pclath	equ	0xFFA
 21520                           tblptru	equ	0xFF8
 21521                           tblptrh	equ	0xFF7
 21522                           tblptrl	equ	0xFF6
 21523                           tablat	equ	0xFF5
 21524                           prodh	equ	0xFF4
 21525                           prodl	equ	0xFF3
 21526                           intcon	equ	0xFF2
 21527                           postinc0	equ	0xFEE
 21528                           wreg	equ	0xFE8
 21529                           indf1	equ	0xFE7
 21530                           postdec1	equ	0xFE5
 21531                           fsr1h	equ	0xFE2
 21532                           fsr1l	equ	0xFE1
 21533                           indf2	equ	0xFDF
 21534                           postinc2	equ	0xFDE
 21535                           postdec2	equ	0xFDD
 21536                           plusw2	equ	0xFDB
 21537                           fsr2h	equ	0xFDA
 21538                           fsr2l	equ	0xFD9
 21539                           status	equ	0xFD8
 21540                           
 21541 ;; *************** function _Button_Init *****************
 21542 ;; Defined at:
 21543 ;;		line 18 in file "Library/Button.c"
 21544 ;; Parameters:    Size  Location     Type
 21545 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 21546 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21547 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 21548 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 21549 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21550 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 21551 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21552 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21553 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 21554 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21555 ;; Auto vars:     Size  Location     Type
 21556 ;;		None
 21557 ;; Return value:  Size  Location     Type
 21558 ;;                  1    wreg      void 
 21559 ;; Registers used:
 21560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21561 ;; Tracked objects:
 21562 ;;		On entry : 0/0
 21563 ;;		On exit  : 0/0
 21564 ;;		Unchanged: 0/0
 21565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21566 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21569 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21570 ;;Total ram usage:       13 bytes
 21571 ;; Hardware stack levels used:    1
 21572 ;; Hardware stack levels required when called:   15
 21573 ;; This function calls:
 21574 ;;		_HMI_InitButtons
 21575 ;;		_MXK_InitDIPSwitch
 21576 ;;		_MXK_InitTestButton
 21577 ;; This function is called by:
 21578 ;;		_HMI_Init
 21579 ;;		_FunctInitButton
 21580 ;; This function uses a non-reentrant model
 21581 ;;
 21582                           
 21583                           	psect	text101
 21584  013D74                     __ptext101:
 21585                           	opt stack 0
 21586  013D74                     _Button_Init:
 21587                           	opt stack 13
 21588                           
 21589                           ;Button.c: 21: if(pInput==(void*)0)
 21590                           
 21591                           ;incstack = 0
 21592  013D74  0100               	movlb	0	; () banked
 21593  013D76  519B               	movf	Button_Init@pInput& (0+255),w,b
 21594  013D78  0100               	movlb	0	; () banked
 21595  013D7A  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21596  013D7C  B4D8               	btfsc	status,2,c
 21597  013D7E  0012               	return	
 21598                           
 21599                           ; BSR set to: 0
 21600                           ;Button.c: 23: if(pInitIO==(void*)0)
 21601                           
 21602                           ; BSR set to: 0
 21603                           
 21604                           ; BSR set to: 0
 21605                           ;Button.c: 22: return;
 21606  013D80  0100               	movlb	0	; () banked
 21607  013D82  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21608  013D84  0100               	movlb	0	; () banked
 21609  013D86  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21610  013D88  0100               	movlb	0	; () banked
 21611  013D8A  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21612  013D8C  B4D8               	btfsc	status,2,c
 21613  013D8E  0012               	return	
 21614                           
 21615                           ; BSR set to: 0
 21616                           ;Button.c: 25: if(pGetState==(void*)0)
 21617                           
 21618                           ; BSR set to: 0
 21619                           
 21620                           ; BSR set to: 0
 21621                           ;Button.c: 24: return;
 21622  013D90  0100               	movlb	0	; () banked
 21623  013D92  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 21624  013D94  0100               	movlb	0	; () banked
 21625  013D96  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21626  013D98  0100               	movlb	0	; () banked
 21627  013D9A  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21628  013D9C  B4D8               	btfsc	status,2,c
 21629  013D9E  0012               	return	
 21630                           
 21631                           ; BSR set to: 0
 21632                           ;Button.c: 27: if(pFunction==(void*)0)
 21633                           
 21634                           ; BSR set to: 0
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;Button.c: 26: return;
 21638  013DA0  0100               	movlb	0	; () banked
 21639  013DA2  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 21640  013DA4  0100               	movlb	0	; () banked
 21641  013DA6  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21642  013DA8  0100               	movlb	0	; () banked
 21643  013DAA  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21644  013DAC  B4D8               	btfsc	status,2,c
 21645  013DAE  0012               	return	
 21646                           
 21647                           ; BSR set to: 0
 21648                           ;Button.c: 30: if(pThreshold == 0)
 21649                           
 21650                           ; BSR set to: 0
 21651                           
 21652                           ; BSR set to: 0
 21653                           ;Button.c: 28: return;
 21654  013DB0  0100               	movlb	0	; () banked
 21655  013DB2  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 21656  013DB4  0100               	movlb	0	; () banked
 21657  013DB6  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21658  013DB8  A4D8               	btfss	status,2,c
 21659  013DBA  D005               	goto	l8
 21660                           
 21661                           ; BSR set to: 0
 21662                           ;Button.c: 31: pThreshold = 1;
 21663  013DBC  0E00               	movlw	0
 21664  013DBE  0100               	movlb	0	; () banked
 21665  013DC0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21666  013DC2  0E01               	movlw	1
 21667  013DC4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21668  013DC6                     l8:
 21669                           
 21670                           ; BSR set to: 0
 21671                           ;Button.c: 34: pInput->mState = 0;
 21672                           
 21673                           ; BSR set to: 0
 21674  013DC6  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 21675  013DCA  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21676  013DCE  0E00               	movlw	0
 21677  013DD0  6EDF               	movwf	indf2,c
 21678                           
 21679                           ; BSR set to: 0
 21680                           ;Button.c: 35: pInput->mCount = 0;
 21681  013DD2  0100               	movlb	0	; () banked
 21682  013DD4  EE20 F001          	lfsr	2,1
 21683  013DD8  519B               	movf	Button_Init@pInput& (0+255),w,b
 21684  013DDA  26D9               	addwf	fsr2l,f,c
 21685  013DDC  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21686  013DDE  22DA               	addwfc	fsr2h,f,c
 21687  013DE0  0E00               	movlw	0
 21688  013DE2  6EDF               	movwf	indf2,c
 21689                           
 21690                           ; BSR set to: 0
 21691                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21692  013DE4  0100               	movlb	0	; () banked
 21693  013DE6  EE20 F002          	lfsr	2,2
 21694  013DEA  519B               	movf	Button_Init@pInput& (0+255),w,b
 21695  013DEC  26D9               	addwf	fsr2l,f,c
 21696  013DEE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21697  013DF0  22DA               	addwfc	fsr2h,f,c
 21698  013DF2  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 21699  013DF6  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21700                           
 21701                           ; BSR set to: 0
 21702                           ;Button.c: 37: pInput->mFunction = pFunction;
 21703  013DFA  0100               	movlb	0	; () banked
 21704  013DFC  EE20 F004          	lfsr	2,4
 21705  013E00  519B               	movf	Button_Init@pInput& (0+255),w,b
 21706  013E02  26D9               	addwf	fsr2l,f,c
 21707  013E04  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21708  013E06  22DA               	addwfc	fsr2h,f,c
 21709  013E08  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 21710  013E0C  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21711  013E10  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21712                           
 21713                           ; BSR set to: 0
 21714                           ;Button.c: 38: pInput->mGetState = pGetState;
 21715  013E14  0100               	movlb	0	; () banked
 21716  013E16  EE20 F007          	lfsr	2,7
 21717  013E1A  519B               	movf	Button_Init@pInput& (0+255),w,b
 21718  013E1C  26D9               	addwf	fsr2l,f,c
 21719  013E1E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21720  013E20  22DA               	addwfc	fsr2h,f,c
 21721  013E22  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 21722  013E26  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21723  013E2A  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21724                           
 21725                           ; BSR set to: 0
 21726                           ;Button.c: 41: pInitIO();
 21727  013E2E  D801               	call	u9838
 21728  013E30  0012               	return	
 21729  013E32                     u9838:
 21730  013E32  0005               	push	
 21731  013E34  6EFA               	movwf	pclath,c
 21732  013E36  0100               	movlb	0	; () banked
 21733  013E38  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21734  013E3A  6EFD               	movwf	tosl,c
 21735  013E3C  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21736  013E3E  6EFE               	movwf	tosh,c
 21737  013E40  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21738  013E42  6EFF               	movwf	tosu,c
 21739  013E44  50FA               	movf	pclath,w,c
 21740  013E46  0012               	return		;indir
 21741  013E48                     __end_of_Button_Init:
 21742                           	opt stack 0
 21743                           tosu	equ	0xFFF
 21744                           tosh	equ	0xFFE
 21745                           tosl	equ	0xFFD
 21746                           pclath	equ	0xFFA
 21747                           tblptru	equ	0xFF8
 21748                           tblptrh	equ	0xFF7
 21749                           tblptrl	equ	0xFF6
 21750                           tablat	equ	0xFF5
 21751                           prodh	equ	0xFF4
 21752                           prodl	equ	0xFF3
 21753                           intcon	equ	0xFF2
 21754                           postinc0	equ	0xFEE
 21755                           wreg	equ	0xFE8
 21756                           indf1	equ	0xFE7
 21757                           postdec1	equ	0xFE5
 21758                           fsr1h	equ	0xFE2
 21759                           fsr1l	equ	0xFE1
 21760                           indf2	equ	0xFDF
 21761                           postinc2	equ	0xFDE
 21762                           postdec2	equ	0xFDD
 21763                           plusw2	equ	0xFDB
 21764                           fsr2h	equ	0xFDA
 21765                           fsr2l	equ	0xFD9
 21766                           status	equ	0xFD8
 21767                           
 21768 ;; *************** function _MXK_InitDIPSwitch *****************
 21769 ;; Defined at:
 21770 ;;		line 20 in file "Library/MXK.c"
 21771 ;; Parameters:    Size  Location     Type
 21772 ;;		None
 21773 ;; Auto vars:     Size  Location     Type
 21774 ;;		None
 21775 ;; Return value:  Size  Location     Type
 21776 ;;                  1    wreg      void 
 21777 ;; Registers used:
 21778 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21779 ;; Tracked objects:
 21780 ;;		On entry : 0/0
 21781 ;;		On exit  : 0/0
 21782 ;;		Unchanged: 0/0
 21783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21788 ;;Total ram usage:        0 bytes
 21789 ;; Hardware stack levels used:    1
 21790 ;; Hardware stack levels required when called:   14
 21791 ;; This function calls:
 21792 ;;		_Port_SetQuadType
 21793 ;; This function is called by:
 21794 ;;		_FunctInitButton
 21795 ;;		_Button_Init
 21796 ;; This function uses a non-reentrant model
 21797 ;;
 21798                           
 21799                           	psect	text102
 21800  0163EC                     __ptext102:
 21801                           	opt stack 0
 21802  0163EC                     _MXK_InitDIPSwitch:
 21803                           	opt stack 13
 21804                           
 21805                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 21806                           
 21807                           ;incstack = 0
 21808  0163EC  0E9A               	movlw	low _PortD
 21809  0163EE  0100               	movlb	0	; () banked
 21810  0163F0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 21811  0163F2  0E03               	movlw	high _PortD
 21812  0163F4  0100               	movlb	0	; () banked
 21813  0163F6  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 21814  0163F8  0E00               	movlw	0
 21815  0163FA  0100               	movlb	0	; () banked
 21816  0163FC  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 21817  0163FE  0E00               	movlw	0
 21818  016400  0100               	movlb	0	; () banked
 21819  016402  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 21820  016404  EC85  F08D         	call	_Port_SetQuadType	;wreg free
 21821  016408  0012               	return		;funcret
 21822  01640A                     __end_of_MXK_InitDIPSwitch:
 21823                           	opt stack 0
 21824                           tosu	equ	0xFFF
 21825                           tosh	equ	0xFFE
 21826                           tosl	equ	0xFFD
 21827                           pclath	equ	0xFFA
 21828                           tblptru	equ	0xFF8
 21829                           tblptrh	equ	0xFF7
 21830                           tblptrl	equ	0xFF6
 21831                           tablat	equ	0xFF5
 21832                           prodh	equ	0xFF4
 21833                           prodl	equ	0xFF3
 21834                           intcon	equ	0xFF2
 21835                           postinc0	equ	0xFEE
 21836                           wreg	equ	0xFE8
 21837                           indf1	equ	0xFE7
 21838                           postdec1	equ	0xFE5
 21839                           fsr1h	equ	0xFE2
 21840                           fsr1l	equ	0xFE1
 21841                           indf2	equ	0xFDF
 21842                           postinc2	equ	0xFDE
 21843                           postdec2	equ	0xFDD
 21844                           plusw2	equ	0xFDB
 21845                           fsr2h	equ	0xFDA
 21846                           fsr2l	equ	0xFD9
 21847                           status	equ	0xFD8
 21848                           
 21849 ;; *************** function _HMI_InitButtons *****************
 21850 ;; Defined at:
 21851 ;;		line 21 in file "HMI.c"
 21852 ;; Parameters:    Size  Location     Type
 21853 ;;		None
 21854 ;; Auto vars:     Size  Location     Type
 21855 ;;		None
 21856 ;; Return value:  Size  Location     Type
 21857 ;;                  1    wreg      void 
 21858 ;; Registers used:
 21859 ;;		wreg, status,2
 21860 ;; Tracked objects:
 21861 ;;		On entry : 0/0
 21862 ;;		On exit  : 0/0
 21863 ;;		Unchanged: 0/0
 21864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21869 ;;Total ram usage:        0 bytes
 21870 ;; Hardware stack levels used:    1
 21871 ;; Hardware stack levels required when called:    7
 21872 ;; This function calls:
 21873 ;;		Nothing
 21874 ;; This function is called by:
 21875 ;;		_HMI_Init
 21876 ;;		_Button_Init
 21877 ;; This function uses a non-reentrant model
 21878 ;;
 21879                           
 21880                           	psect	text103
 21881  0166AC                     __ptext103:
 21882                           	opt stack 0
 21883  0166AC                     _HMI_InitButtons:
 21884                           	opt stack 20
 21885                           
 21886                           ;HMI.c: 23: TRISE = 0xFC;
 21887                           
 21888                           ;incstack = 0
 21889  0166AC  0EFC               	movlw	252
 21890  0166AE  6E96               	movwf	3990,c	;volatile
 21891  0166B0  0012               	return		;funcret
 21892  0166B2                     __end_of_HMI_InitButtons:
 21893                           	opt stack 0
 21894                           tosu	equ	0xFFF
 21895                           tosh	equ	0xFFE
 21896                           tosl	equ	0xFFD
 21897                           pclath	equ	0xFFA
 21898                           tblptru	equ	0xFF8
 21899                           tblptrh	equ	0xFF7
 21900                           tblptrl	equ	0xFF6
 21901                           tablat	equ	0xFF5
 21902                           prodh	equ	0xFF4
 21903                           prodl	equ	0xFF3
 21904                           intcon	equ	0xFF2
 21905                           postinc0	equ	0xFEE
 21906                           wreg	equ	0xFE8
 21907                           indf1	equ	0xFE7
 21908                           postdec1	equ	0xFE5
 21909                           fsr1h	equ	0xFE2
 21910                           fsr1l	equ	0xFE1
 21911                           indf2	equ	0xFDF
 21912                           postinc2	equ	0xFDE
 21913                           postdec2	equ	0xFDD
 21914                           plusw2	equ	0xFDB
 21915                           fsr2h	equ	0xFDA
 21916                           fsr2l	equ	0xFD9
 21917                           status	equ	0xFD8
 21918                           
 21919 ;; *************** function _MXK_InitTestButton *****************
 21920 ;; Defined at:
 21921 ;;		line 10 in file "Library/MXK.c"
 21922 ;; Parameters:    Size  Location     Type
 21923 ;;		None
 21924 ;; Auto vars:     Size  Location     Type
 21925 ;;		None
 21926 ;; Return value:  Size  Location     Type
 21927 ;;                  1    wreg      void 
 21928 ;; Registers used:
 21929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21930 ;; Tracked objects:
 21931 ;;		On entry : 0/0
 21932 ;;		On exit  : 0/0
 21933 ;;		Unchanged: 0/0
 21934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21939 ;;Total ram usage:        0 bytes
 21940 ;; Hardware stack levels used:    1
 21941 ;; Hardware stack levels required when called:   12
 21942 ;; This function calls:
 21943 ;;		_Port_SetPinType
 21944 ;; This function is called by:
 21945 ;;		_FunctInitButton
 21946 ;;		_Button_Init
 21947 ;; This function uses a non-reentrant model
 21948 ;;
 21949                           
 21950                           	psect	text104
 21951  01640A                     __ptext104:
 21952                           	opt stack 0
 21953  01640A                     _MXK_InitTestButton:
 21954                           	opt stack 15
 21955                           
 21956                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 21957                           
 21958                           ;incstack = 0
 21959  01640A  0EA4               	movlw	low _PortB
 21960  01640C  0100               	movlb	0	; () banked
 21961  01640E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21962  016410  0E03               	movlw	high _PortB
 21963  016412  0100               	movlb	0	; () banked
 21964  016414  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21965  016416  0E04               	movlw	4
 21966  016418  0100               	movlb	0	; () banked
 21967  01641A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21968  01641C  0E00               	movlw	0
 21969  01641E  0100               	movlb	0	; () banked
 21970  016420  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21971  016422  EC92  F093         	call	_Port_SetPinType	;wreg free
 21972  016426  0012               	return		;funcret
 21973  016428                     __end_of_MXK_InitTestButton:
 21974                           	opt stack 0
 21975                           tosu	equ	0xFFF
 21976                           tosh	equ	0xFFE
 21977                           tosl	equ	0xFFD
 21978                           pclath	equ	0xFFA
 21979                           tblptru	equ	0xFF8
 21980                           tblptrh	equ	0xFF7
 21981                           tblptrl	equ	0xFF6
 21982                           tablat	equ	0xFF5
 21983                           prodh	equ	0xFF4
 21984                           prodl	equ	0xFF3
 21985                           intcon	equ	0xFF2
 21986                           postinc0	equ	0xFEE
 21987                           wreg	equ	0xFE8
 21988                           indf1	equ	0xFE7
 21989                           postdec1	equ	0xFE5
 21990                           fsr1h	equ	0xFE2
 21991                           fsr1l	equ	0xFE1
 21992                           indf2	equ	0xFDF
 21993                           postinc2	equ	0xFDE
 21994                           postdec2	equ	0xFDD
 21995                           plusw2	equ	0xFDB
 21996                           fsr2h	equ	0xFDA
 21997                           fsr2l	equ	0xFD9
 21998                           status	equ	0xFD8
 21999                           
 22000 ;; *************** function _Port_SetPinType *****************
 22001 ;; Defined at:
 22002 ;;		line 189 in file "Library/Port.c"
 22003 ;; Parameters:    Size  Location     Type
 22004 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22005 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22006 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22007 ;;  pPin            1   40[BANK0 ] enum E6750
 22008 ;;  pType           1   41[BANK0 ] enum E6795
 22009 ;; Auto vars:     Size  Location     Type
 22010 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22011 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22012 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22013 ;;  Output          1   42[BANK0 ] enum E6475
 22014 ;; Return value:  Size  Location     Type
 22015 ;;                  1    wreg      enum E6475
 22016 ;; Registers used:
 22017 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22018 ;; Tracked objects:
 22019 ;;		On entry : 0/0
 22020 ;;		On exit  : 0/0
 22021 ;;		Unchanged: 0/0
 22022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22023 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22024 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22026 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22027 ;;Total ram usage:        7 bytes
 22028 ;; Hardware stack levels used:    1
 22029 ;; Hardware stack levels required when called:   11
 22030 ;; This function calls:
 22031 ;;		_Byte_SetBit
 22032 ;;		_PortProperty_Valid
 22033 ;;		_Word_SetPair
 22034 ;; This function is called by:
 22035 ;;		_Configure_GPIOs
 22036 ;;		_LED_Init
 22037 ;;		_Port_Init
 22038 ;;		_SPI_Init
 22039 ;;		_Motor_Init
 22040 ;;		_MXK_InitTestButton
 22041 ;;		_MXK_Init
 22042 ;;		_I2C_Init
 22043 ;; This function uses a non-reentrant model
 22044 ;;
 22045                           
 22046                           	psect	text105
 22047  012724                     __ptext105:
 22048                           	opt stack 0
 22049  012724                     _Port_SetPinType:
 22050                           	opt stack 17
 22051                           
 22052                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22053                           
 22054                           ;incstack = 0
 22055  012724  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22056  012728  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22057  01272C  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 22058  012730  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 22059                           
 22060                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22061  012734  0E05               	movlw	5
 22062  012736  0100               	movlb	0	; () banked
 22063  012738  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22064                           
 22065                           ;Port.c: 193: switch (pType)
 22066  01273A  D0B5               	goto	l412
 22067  01273C                     
 22068                           ; BSR set to: 0
 22069                           ;Port.c: 197: {
 22070                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22071                           
 22072                           ; BSR set to: 0
 22073  01273C  0100               	movlb	0	; () banked
 22074  01273E  EE20 F002          	lfsr	2,2
 22075  012742  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22076  012744  26D9               	addwf	fsr2l,f,c
 22077  012746  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22078  012748  22DA               	addwfc	fsr2h,f,c
 22079  01274A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22080  01274E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22081  012752  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22082  012756  0E01               	movlw	1
 22083  012758  0100               	movlb	0	; () banked
 22084  01275A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22085  01275C  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22086                           
 22087                           ;Port.c: 203: break;
 22088  012760  D0B0               	goto	l414
 22089  012762                     
 22090                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22091  012762  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22092  012766  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22093  01276A  0E01               	movlw	1
 22094  01276C  0100               	movlb	0	; () banked
 22095  01276E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22096  012770  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22097  012774  EC7E  F0A8         	call	_PortProperty_Valid	;wreg free
 22098  012778  0100               	movlb	0	; () banked
 22099  01277A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22100  01277C  0100               	movlb	0	; () banked
 22101  01277E  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 22102  012780  A4D8               	btfss	status,2,c
 22103  012782  0012               	return	
 22104                           
 22105                           ; BSR set to: 0
 22106                           ;Port.c: 208: {
 22107                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22108  012784  0100               	movlb	0	; () banked
 22109  012786  EE20 F002          	lfsr	2,2
 22110  01278A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22111  01278C  26D9               	addwf	fsr2l,f,c
 22112  01278E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22113  012790  22DA               	addwfc	fsr2h,f,c
 22114  012792  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22115  012796  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22116  01279A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22117  01279E  0E00               	movlw	0
 22118  0127A0  0100               	movlb	0	; () banked
 22119  0127A2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22120  0127A4  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22121                           
 22122                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22123  0127A8  0100               	movlb	0	; () banked
 22124  0127AA  EE20 F004          	lfsr	2,4
 22125  0127AE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22126  0127B0  26D9               	addwf	fsr2l,f,c
 22127  0127B2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22128  0127B4  22DA               	addwfc	fsr2h,f,c
 22129  0127B6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22130  0127BA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22131  0127BE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22132  0127C2  0E00               	movlw	0
 22133  0127C4  0100               	movlb	0	; () banked
 22134  0127C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22135  0127C8  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22136                           
 22137                           ;Port.c: 214: break;
 22138  0127CC  D07A               	goto	l414
 22139  0127CE                     
 22140                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22141                           
 22142                           ;Port.c: 218: case eTypeOutputOpenSource:
 22143  0127CE  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22144  0127D2  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22145  0127D6  0E02               	movlw	2
 22146  0127D8  0100               	movlb	0	; () banked
 22147  0127DA  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22148  0127DC  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22149  0127E0  EC7E  F0A8         	call	_PortProperty_Valid	;wreg free
 22150  0127E4  0100               	movlb	0	; () banked
 22151  0127E6  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22152  0127E8  0100               	movlb	0	; () banked
 22153  0127EA  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 22154  0127EC  A4D8               	btfss	status,2,c
 22155  0127EE  0012               	return	
 22156                           
 22157                           ; BSR set to: 0
 22158                           ;Port.c: 220: {
 22159                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22160  0127F0  0100               	movlb	0	; () banked
 22161  0127F2  EE20 F002          	lfsr	2,2
 22162  0127F6  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22163  0127F8  26D9               	addwf	fsr2l,f,c
 22164  0127FA  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22165  0127FC  22DA               	addwfc	fsr2h,f,c
 22166  0127FE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22167  012802  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22168  012806  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22169  01280A  0E01               	movlw	1
 22170  01280C  0100               	movlb	0	; () banked
 22171  01280E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22172  012810  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22173                           
 22174                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22175  012814  0100               	movlb	0	; () banked
 22176  012816  EE20 F004          	lfsr	2,4
 22177  01281A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22178  01281C  26D9               	addwf	fsr2l,f,c
 22179  01281E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22180  012820  22DA               	addwfc	fsr2h,f,c
 22181  012822  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22182  012826  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22183  01282A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22184  01282E  0E01               	movlw	1
 22185  012830  0100               	movlb	0	; () banked
 22186  012832  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22187  012834  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22188                           
 22189                           ;Port.c: 226: break;
 22190  012838  D044               	goto	l414
 22191  01283A                     
 22192                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22193                           
 22194                           ;Port.c: 230: case eTypeOutputPushPull:
 22195  01283A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22196  01283E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22197  012842  0E00               	movlw	0
 22198  012844  0100               	movlb	0	; () banked
 22199  012846  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22200  012848  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22201  01284C  EC7E  F0A8         	call	_PortProperty_Valid	;wreg free
 22202  012850  0100               	movlb	0	; () banked
 22203  012852  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22204  012854  0100               	movlb	0	; () banked
 22205  012856  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 22206  012858  A4D8               	btfss	status,2,c
 22207  01285A  0012               	return	
 22208                           
 22209                           ; BSR set to: 0
 22210                           ;Port.c: 232: {
 22211                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22212  01285C  0100               	movlb	0	; () banked
 22213  01285E  EE20 F002          	lfsr	2,2
 22214  012862  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22215  012864  26D9               	addwf	fsr2l,f,c
 22216  012866  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22217  012868  22DA               	addwfc	fsr2h,f,c
 22218  01286A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22219  01286E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22220  012872  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22221  012876  0E00               	movlw	0
 22222  012878  0100               	movlb	0	; () banked
 22223  01287A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22224  01287C  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22225                           
 22226                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22227  012880  0100               	movlb	0	; () banked
 22228  012882  EE20 F004          	lfsr	2,4
 22229  012886  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22230  012888  26D9               	addwf	fsr2l,f,c
 22231  01288A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22232  01288C  22DA               	addwfc	fsr2h,f,c
 22233  01288E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22234  012892  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22235  012896  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22236  01289A  0E00               	movlw	0
 22237  01289C  0100               	movlb	0	; () banked
 22238  01289E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22239  0128A0  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 22240                           
 22241                           ;Port.c: 239: }
 22242                           
 22243                           ;Port.c: 238: break;
 22244  0128A4  D00E               	goto	l414
 22245  0128A6                     l412:
 22246  0128A6  0100               	movlb	0	; () banked
 22247  0128A8  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 22248                           
 22249                           ; Switch size 1, requested type "space"
 22250                           ; Number of cases is 4, Range of values is 0 to 3
 22251                           ; switch strategies available:
 22252                           ; Name         Instructions Cycles
 22253                           ; simple_byte           13     7 (average)
 22254                           ;	Chosen strategy is simple_byte
 22255  0128AA  0A00               	xorlw	0	; case 0
 22256  0128AC  B4D8               	btfsc	status,2,c
 22257  0128AE  D746               	goto	l413
 22258  0128B0  0A01               	xorlw	1	; case 1
 22259  0128B2  B4D8               	btfsc	status,2,c
 22260  0128B4  D756               	goto	l415
 22261  0128B6  0A03               	xorlw	3	; case 2
 22262  0128B8  B4D8               	btfsc	status,2,c
 22263  0128BA  D789               	goto	l417
 22264  0128BC  0A01               	xorlw	1	; case 3
 22265  0128BE  B4D8               	btfsc	status,2,c
 22266  0128C0  D7BC               	goto	l421
 22267  0128C2                     l414:
 22268                           
 22269                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22270                           
 22271                           ; BSR set to: 0
 22272  0128C2  0E08               	movlw	8
 22273  0128C4  0100               	movlb	0	; () banked
 22274  0128C6  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22275  0128C8  0100               	movlb	0	; () banked
 22276  0128CA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22277  0128CC  0E00               	movlw	0
 22278  0128CE  0100               	movlb	0	; () banked
 22279  0128D0  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22280  0128D2  0100               	movlb	0	; () banked
 22281  0128D4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22282  0128D6  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22283  0128DA  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22284  0128DE  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 22285  0128E2  0012               	return	
 22286  0128E4                     __end_of_Port_SetPinType:
 22287                           	opt stack 0
 22288                           tosu	equ	0xFFF
 22289                           tosh	equ	0xFFE
 22290                           tosl	equ	0xFFD
 22291                           pclath	equ	0xFFA
 22292                           tblptru	equ	0xFF8
 22293                           tblptrh	equ	0xFF7
 22294                           tblptrl	equ	0xFF6
 22295                           tablat	equ	0xFF5
 22296                           prodh	equ	0xFF4
 22297                           prodl	equ	0xFF3
 22298                           intcon	equ	0xFF2
 22299                           postinc0	equ	0xFEE
 22300                           wreg	equ	0xFE8
 22301                           indf1	equ	0xFE7
 22302                           postdec1	equ	0xFE5
 22303                           fsr1h	equ	0xFE2
 22304                           fsr1l	equ	0xFE1
 22305                           indf2	equ	0xFDF
 22306                           postinc2	equ	0xFDE
 22307                           postdec2	equ	0xFDD
 22308                           plusw2	equ	0xFDB
 22309                           fsr2h	equ	0xFDA
 22310                           fsr2l	equ	0xFD9
 22311                           status	equ	0xFD8
 22312                           
 22313 ;; *************** function _Port_SetQuadType *****************
 22314 ;; Defined at:
 22315 ;;		line 399 in file "Library/Port.c"
 22316 ;; Parameters:    Size  Location     Type
 22317 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22318 ;;		 -> PortB(10), PortD(10), 
 22319 ;;  pQuad           1   56[BANK0 ] enum E6776
 22320 ;;  pType           1   57[BANK0 ] enum E6795
 22321 ;; Auto vars:     Size  Location     Type
 22322 ;;  Output          1   58[BANK0 ] enum E6475
 22323 ;; Return value:  Size  Location     Type
 22324 ;;                  1    wreg      enum E6475
 22325 ;; Registers used:
 22326 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22327 ;; Tracked objects:
 22328 ;;		On entry : 0/0
 22329 ;;		On exit  : 0/0
 22330 ;;		Unchanged: 0/0
 22331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22332 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22335 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22336 ;;Total ram usage:        5 bytes
 22337 ;; Hardware stack levels used:    1
 22338 ;; Hardware stack levels required when called:   13
 22339 ;; This function calls:
 22340 ;;		_Byte_SetQuad
 22341 ;;		_Port_CheckQuadType
 22342 ;;		_Word_SetPair
 22343 ;; This function is called by:
 22344 ;;		_MXK_InitDIPSwitch
 22345 ;;		_MXK_Init
 22346 ;; This function uses a non-reentrant model
 22347 ;;
 22348                           
 22349                           	psect	text106
 22350  011B0A                     __ptext106:
 22351                           	opt stack 0
 22352  011B0A                     _Port_SetQuadType:
 22353                           	opt stack 15
 22354                           
 22355                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22356                           
 22357                           ;incstack = 0
 22358  011B0A  0E05               	movlw	5
 22359  011B0C  0100               	movlb	0	; () banked
 22360  011B0E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22361                           
 22362                           ;Port.c: 403: switch (pType)
 22363  011B10  D0C7               	goto	l476
 22364  011B12                     
 22365                           ; BSR set to: 0
 22366                           ;Port.c: 407: {
 22367                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22368                           
 22369                           ; BSR set to: 0
 22370  011B12  0100               	movlb	0	; () banked
 22371  011B14  EE20 F002          	lfsr	2,2
 22372  011B18  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22373  011B1A  26D9               	addwf	fsr2l,f,c
 22374  011B1C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22375  011B1E  22DA               	addwfc	fsr2h,f,c
 22376  011B20  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22377  011B24  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22378  011B28  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22379  011B2C  0E0F               	movlw	15
 22380  011B2E  0100               	movlb	0	; () banked
 22381  011B30  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22382  011B32  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22383                           
 22384                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22385  011B36  0100               	movlb	0	; () banked
 22386  011B38  EE20 F004          	lfsr	2,4
 22387  011B3C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22388  011B3E  26D9               	addwf	fsr2l,f,c
 22389  011B40  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22390  011B42  22DA               	addwfc	fsr2h,f,c
 22391  011B44  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22392  011B48  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22393  011B4C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22394  011B50  0E00               	movlw	0
 22395  011B52  0100               	movlb	0	; () banked
 22396  011B54  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22397  011B56  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22398                           
 22399                           ;Port.c: 413: }
 22400                           ;Port.c: 415: break;
 22401  011B5A  D0B0               	goto	l478
 22402  011B5C                     
 22403                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22404  011B5C  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22405  011B60  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22406  011B64  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22407  011B68  0E03               	movlw	3
 22408  011B6A  0100               	movlb	0	; () banked
 22409  011B6C  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22410  011B6E  ECC3  F0AC         	call	_Port_CheckQuadType	;wreg free
 22411  011B72  0100               	movlb	0	; () banked
 22412  011B74  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22413  011B76  0100               	movlb	0	; () banked
 22414  011B78  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22415  011B7A  A4D8               	btfss	status,2,c
 22416  011B7C  0012               	return	
 22417                           
 22418                           ; BSR set to: 0
 22419                           ;Port.c: 418: {
 22420                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22421  011B7E  0100               	movlb	0	; () banked
 22422  011B80  EE20 F002          	lfsr	2,2
 22423  011B84  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22424  011B86  26D9               	addwf	fsr2l,f,c
 22425  011B88  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22426  011B8A  22DA               	addwfc	fsr2h,f,c
 22427  011B8C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22428  011B90  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22429  011B94  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22430  011B98  0E00               	movlw	0
 22431  011B9A  0100               	movlb	0	; () banked
 22432  011B9C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22433  011B9E  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22434                           
 22435                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22436  011BA2  0100               	movlb	0	; () banked
 22437  011BA4  EE20 F004          	lfsr	2,4
 22438  011BA8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22439  011BAA  26D9               	addwf	fsr2l,f,c
 22440  011BAC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22441  011BAE  22DA               	addwfc	fsr2h,f,c
 22442  011BB0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22443  011BB4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22444  011BB8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22445  011BBC  0E00               	movlw	0
 22446  011BBE  0100               	movlb	0	; () banked
 22447  011BC0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22448  011BC2  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22449                           
 22450                           ;Port.c: 424: }
 22451  011BC6  D07A               	goto	l478
 22452  011BC8                     
 22453                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22454  011BC8  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22455  011BCC  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22456  011BD0  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22457  011BD4  0E03               	movlw	3
 22458  011BD6  0100               	movlb	0	; () banked
 22459  011BD8  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22460  011BDA  ECC3  F0AC         	call	_Port_CheckQuadType	;wreg free
 22461  011BDE  0100               	movlb	0	; () banked
 22462  011BE0  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22463  011BE2  0100               	movlb	0	; () banked
 22464  011BE4  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22465  011BE6  A4D8               	btfss	status,2,c
 22466  011BE8  0012               	return	
 22467                           
 22468                           ; BSR set to: 0
 22469                           ;Port.c: 429: {
 22470                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22471  011BEA  0100               	movlb	0	; () banked
 22472  011BEC  EE20 F002          	lfsr	2,2
 22473  011BF0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22474  011BF2  26D9               	addwf	fsr2l,f,c
 22475  011BF4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22476  011BF6  22DA               	addwfc	fsr2h,f,c
 22477  011BF8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22478  011BFC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22479  011C00  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22480  011C04  0E0F               	movlw	15
 22481  011C06  0100               	movlb	0	; () banked
 22482  011C08  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22483  011C0A  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22484                           
 22485                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22486  011C0E  0100               	movlb	0	; () banked
 22487  011C10  EE20 F004          	lfsr	2,4
 22488  011C14  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22489  011C16  26D9               	addwf	fsr2l,f,c
 22490  011C18  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22491  011C1A  22DA               	addwfc	fsr2h,f,c
 22492  011C1C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22493  011C20  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22494  011C24  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22495  011C28  0E0F               	movlw	15
 22496  011C2A  0100               	movlb	0	; () banked
 22497  011C2C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22498  011C2E  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22499                           
 22500                           ;Port.c: 435: }
 22501  011C32  D044               	goto	l478
 22502  011C34                     
 22503                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22504  011C34  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22505  011C38  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22506  011C3C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22507  011C40  0E03               	movlw	3
 22508  011C42  0100               	movlb	0	; () banked
 22509  011C44  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22510  011C46  ECC3  F0AC         	call	_Port_CheckQuadType	;wreg free
 22511  011C4A  0100               	movlb	0	; () banked
 22512  011C4C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22513  011C4E  0100               	movlb	0	; () banked
 22514  011C50  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22515  011C52  A4D8               	btfss	status,2,c
 22516  011C54  0012               	return	
 22517                           
 22518                           ; BSR set to: 0
 22519                           ;Port.c: 440: {
 22520                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22521  011C56  0100               	movlb	0	; () banked
 22522  011C58  EE20 F002          	lfsr	2,2
 22523  011C5C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22524  011C5E  26D9               	addwf	fsr2l,f,c
 22525  011C60  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22526  011C62  22DA               	addwfc	fsr2h,f,c
 22527  011C64  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22528  011C68  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22529  011C6C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22530  011C70  0E00               	movlw	0
 22531  011C72  0100               	movlb	0	; () banked
 22532  011C74  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22533  011C76  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22534                           
 22535                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22536  011C7A  0100               	movlb	0	; () banked
 22537  011C7C  EE20 F004          	lfsr	2,4
 22538  011C80  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22539  011C82  26D9               	addwf	fsr2l,f,c
 22540  011C84  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22541  011C86  22DA               	addwfc	fsr2h,f,c
 22542  011C88  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22543  011C8C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22544  011C90  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22545  011C94  0E00               	movlw	0
 22546  011C96  0100               	movlb	0	; () banked
 22547  011C98  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22548  011C9A  EC8A  F0B1         	call	_Byte_SetQuad	;wreg free
 22549                           
 22550                           ;Port.c: 446: }
 22551  011C9E  D00E               	goto	l478
 22552  011CA0                     l476:
 22553  011CA0  0100               	movlb	0	; () banked
 22554  011CA2  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 22555                           
 22556                           ; Switch size 1, requested type "space"
 22557                           ; Number of cases is 4, Range of values is 0 to 3
 22558                           ; switch strategies available:
 22559                           ; Name         Instructions Cycles
 22560                           ; simple_byte           13     7 (average)
 22561                           ;	Chosen strategy is simple_byte
 22562  011CA4  0A00               	xorlw	0	; case 0
 22563  011CA6  B4D8               	btfsc	status,2,c
 22564  011CA8  D734               	goto	l477
 22565  011CAA  0A01               	xorlw	1	; case 1
 22566  011CAC  B4D8               	btfsc	status,2,c
 22567  011CAE  D756               	goto	l479
 22568  011CB0  0A03               	xorlw	3	; case 2
 22569  011CB2  B4D8               	btfsc	status,2,c
 22570  011CB4  D789               	goto	l483
 22571  011CB6  0A01               	xorlw	1	; case 3
 22572  011CB8  B4D8               	btfsc	status,2,c
 22573  011CBA  D7BC               	goto	l486
 22574  011CBC                     l478:
 22575                           
 22576                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22577                           
 22578                           ; BSR set to: 0
 22579  011CBC  0E08               	movlw	8
 22580  011CBE  0100               	movlb	0	; () banked
 22581  011CC0  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22582  011CC2  0100               	movlb	0	; () banked
 22583  011CC4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22584  011CC6  0E00               	movlw	0
 22585  011CC8  0100               	movlb	0	; () banked
 22586  011CCA  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22587  011CCC  0100               	movlb	0	; () banked
 22588  011CCE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22589  011CD0  0100               	movlb	0	; () banked
 22590  011CD2  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22591  011CD4  0D04               	mullw	4
 22592  011CD6  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 22593  011CDA  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22594  011CDE  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 22595                           
 22596                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22597  011CE2  0E08               	movlw	8
 22598  011CE4  0100               	movlb	0	; () banked
 22599  011CE6  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22600  011CE8  0100               	movlb	0	; () banked
 22601  011CEA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22602  011CEC  0E00               	movlw	0
 22603  011CEE  0100               	movlb	0	; () banked
 22604  011CF0  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22605  011CF2  0100               	movlb	0	; () banked
 22606  011CF4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22607  011CF6  0100               	movlb	0	; () banked
 22608  011CF8  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22609  011CFA  0D04               	mullw	4
 22610  011CFC  28F3               	incf	prodl,w,c
 22611  011CFE  0100               	movlb	0	; () banked
 22612  011D00  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22613  011D02  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22614  011D06  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 22615                           
 22616                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22617  011D0A  0E08               	movlw	8
 22618  011D0C  0100               	movlb	0	; () banked
 22619  011D0E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22620  011D10  0100               	movlb	0	; () banked
 22621  011D12  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22622  011D14  0E00               	movlw	0
 22623  011D16  0100               	movlb	0	; () banked
 22624  011D18  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22625  011D1A  0100               	movlb	0	; () banked
 22626  011D1C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22627  011D1E  0100               	movlb	0	; () banked
 22628  011D20  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22629  011D22  0D04               	mullw	4
 22630  011D24  50F3               	movf	prodl,w,c
 22631  011D26  0F02               	addlw	2
 22632  011D28  0100               	movlb	0	; () banked
 22633  011D2A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22634  011D2C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22635  011D30  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 22636                           
 22637                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22638  011D34  0E08               	movlw	8
 22639  011D36  0100               	movlb	0	; () banked
 22640  011D38  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22641  011D3A  0100               	movlb	0	; () banked
 22642  011D3C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22643  011D3E  0E00               	movlw	0
 22644  011D40  0100               	movlb	0	; () banked
 22645  011D42  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22646  011D44  0100               	movlb	0	; () banked
 22647  011D46  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22648  011D48  0100               	movlb	0	; () banked
 22649  011D4A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22650  011D4C  0D04               	mullw	4
 22651  011D4E  50F3               	movf	prodl,w,c
 22652  011D50  0F03               	addlw	3
 22653  011D52  0100               	movlb	0	; () banked
 22654  011D54  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22655  011D56  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22656  011D5A  EC9B  F0AE         	call	_Word_SetPair	;wreg free
 22657  011D5E  0012               	return	
 22658  011D60                     __end_of_Port_SetQuadType:
 22659                           	opt stack 0
 22660                           tosu	equ	0xFFF
 22661                           tosh	equ	0xFFE
 22662                           tosl	equ	0xFFD
 22663                           pclath	equ	0xFFA
 22664                           tblptru	equ	0xFF8
 22665                           tblptrh	equ	0xFF7
 22666                           tblptrl	equ	0xFF6
 22667                           tablat	equ	0xFF5
 22668                           prodh	equ	0xFF4
 22669                           prodl	equ	0xFF3
 22670                           intcon	equ	0xFF2
 22671                           postinc0	equ	0xFEE
 22672                           wreg	equ	0xFE8
 22673                           indf1	equ	0xFE7
 22674                           postdec1	equ	0xFE5
 22675                           fsr1h	equ	0xFE2
 22676                           fsr1l	equ	0xFE1
 22677                           indf2	equ	0xFDF
 22678                           postinc2	equ	0xFDE
 22679                           postdec2	equ	0xFDD
 22680                           plusw2	equ	0xFDB
 22681                           fsr2h	equ	0xFDA
 22682                           fsr2l	equ	0xFD9
 22683                           status	equ	0xFD8
 22684                           
 22685 ;; *************** function _Word_SetPair *****************
 22686 ;; Defined at:
 22687 ;;		line 149 in file "Library/Types.c"
 22688 ;; Parameters:    Size  Location     Type
 22689 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22690 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22691 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22692 ;;  pPair           1   17[BANK0 ] unsigned char 
 22693 ;;  pValue          1   18[BANK0 ] unsigned char 
 22694 ;; Auto vars:     Size  Location     Type
 22695 ;;		None
 22696 ;; Return value:  Size  Location     Type
 22697 ;;                  1    wreg      void 
 22698 ;; Registers used:
 22699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22700 ;; Tracked objects:
 22701 ;;		On entry : 0/0
 22702 ;;		On exit  : 0/0
 22703 ;;		Unchanged: 0/0
 22704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22705 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22708 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22709 ;;Total ram usage:        4 bytes
 22710 ;; Hardware stack levels used:    1
 22711 ;; Hardware stack levels required when called:    9
 22712 ;; This function calls:
 22713 ;;		_Byte_SetPair
 22714 ;; This function is called by:
 22715 ;;		_Port_SetPinType
 22716 ;;		_Port_SetQuadType
 22717 ;;		_Port_SetType
 22718 ;;		_Port_SetPairType
 22719 ;;		_PortProperty_Init
 22720 ;; This function uses a non-reentrant model
 22721 ;;
 22722                           
 22723                           	psect	text107
 22724  015D36                     __ptext107:
 22725                           	opt stack 0
 22726  015D36                     _Word_SetPair:
 22727                           	opt stack 18
 22728                           
 22729                           ;Types.c: 151: if (pPair >= 4)
 22730                           
 22731                           ;incstack = 0
 22732  015D36  0E03               	movlw	3
 22733  015D38  0100               	movlb	0	; () banked
 22734  015D3A  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22735  015D3C  D014               	goto	l776
 22736                           
 22737                           ; BSR set to: 0
 22738                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22739  015D3E  0E01               	movlw	1
 22740  015D40  0100               	movlb	0	; () banked
 22741  015D42  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 22742  015D44  0100               	movlb	0	; () banked
 22743  015D46  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 22744  015D48  0E00               	movlw	0
 22745  015D4A  0100               	movlb	0	; () banked
 22746  015D4C  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22747  015D4E  0100               	movlb	0	; () banked
 22748  015D50  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22749  015D52  0100               	movlb	0	; () banked
 22750  015D54  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 22751  015D56  0FFC               	addlw	252
 22752  015D58  0100               	movlb	0	; () banked
 22753  015D5A  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 22754  015D5C  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22755  015D60  EC79  F0B1         	call	_Byte_SetPair	;wreg free
 22756  015D64  0012               	return	
 22757  015D66                     l776:
 22758                           
 22759                           ;Types.c: 153: else
 22760                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22761  015D66  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22762  015D6A  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22763  015D6E  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22764  015D72  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22765  015D76  EC79  F0B1         	call	_Byte_SetPair	;wreg free
 22766  015D7A  0012               	return	
 22767  015D7C                     __end_of_Word_SetPair:
 22768                           	opt stack 0
 22769                           tosu	equ	0xFFF
 22770                           tosh	equ	0xFFE
 22771                           tosl	equ	0xFFD
 22772                           pclath	equ	0xFFA
 22773                           tblptru	equ	0xFF8
 22774                           tblptrh	equ	0xFF7
 22775                           tblptrl	equ	0xFF6
 22776                           tablat	equ	0xFF5
 22777                           prodh	equ	0xFF4
 22778                           prodl	equ	0xFF3
 22779                           intcon	equ	0xFF2
 22780                           postinc0	equ	0xFEE
 22781                           wreg	equ	0xFE8
 22782                           indf1	equ	0xFE7
 22783                           postdec1	equ	0xFE5
 22784                           fsr1h	equ	0xFE2
 22785                           fsr1l	equ	0xFE1
 22786                           indf2	equ	0xFDF
 22787                           postinc2	equ	0xFDE
 22788                           postdec2	equ	0xFDD
 22789                           plusw2	equ	0xFDB
 22790                           fsr2h	equ	0xFDA
 22791                           fsr2l	equ	0xFD9
 22792                           status	equ	0xFD8
 22793                           
 22794 ;; *************** function _Byte_SetPair *****************
 22795 ;; Defined at:
 22796 ;;		line 83 in file "Library/Types.c"
 22797 ;; Parameters:    Size  Location     Type
 22798 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22799 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22800 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22801 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 22802 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 22803 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 22804 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 22805 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 22806 ;;		 -> NULL(0), 
 22807 ;;  pPair           1   13[BANK0 ] unsigned char 
 22808 ;;  pValue          1   14[BANK0 ] unsigned char 
 22809 ;; Auto vars:     Size  Location     Type
 22810 ;;		None
 22811 ;; Return value:  Size  Location     Type
 22812 ;;                  1    wreg      void 
 22813 ;; Registers used:
 22814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22815 ;; Tracked objects:
 22816 ;;		On entry : 0/0
 22817 ;;		On exit  : 0/0
 22818 ;;		Unchanged: 0/0
 22819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22823 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22824 ;;Total ram usage:        4 bytes
 22825 ;; Hardware stack levels used:    1
 22826 ;; Hardware stack levels required when called:    8
 22827 ;; This function calls:
 22828 ;;		_Byte_SetZone
 22829 ;; This function is called by:
 22830 ;;		_Word_SetPair
 22831 ;;		_Port_SetPairType
 22832 ;;		_Port_SetPair
 22833 ;; This function uses a non-reentrant model
 22834 ;;
 22835                           
 22836                           	psect	text108
 22837  0162F2                     __ptext108:
 22838                           	opt stack 0
 22839  0162F2                     _Byte_SetPair:
 22840                           	opt stack 18
 22841                           
 22842                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 22843                           
 22844                           ;incstack = 0
 22845  0162F2  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 22846  0162F6  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 22847  0162FA  0E04               	movlw	4
 22848  0162FC  0100               	movlb	0	; () banked
 22849  0162FE  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 22850  016300  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 22851  016304  0E02               	movlw	2
 22852  016306  0100               	movlb	0	; () banked
 22853  016308  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22854  01630A  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 22855  01630E  ECC9  F0A1         	call	_Byte_SetZone	;wreg free
 22856  016312  0012               	return		;funcret
 22857  016314                     __end_of_Byte_SetPair:
 22858                           	opt stack 0
 22859                           tosu	equ	0xFFF
 22860                           tosh	equ	0xFFE
 22861                           tosl	equ	0xFFD
 22862                           pclath	equ	0xFFA
 22863                           tblptru	equ	0xFF8
 22864                           tblptrh	equ	0xFF7
 22865                           tblptrl	equ	0xFF6
 22866                           tablat	equ	0xFF5
 22867                           prodh	equ	0xFF4
 22868                           prodl	equ	0xFF3
 22869                           intcon	equ	0xFF2
 22870                           postinc0	equ	0xFEE
 22871                           wreg	equ	0xFE8
 22872                           indf1	equ	0xFE7
 22873                           postdec1	equ	0xFE5
 22874                           fsr1h	equ	0xFE2
 22875                           fsr1l	equ	0xFE1
 22876                           indf2	equ	0xFDF
 22877                           postinc2	equ	0xFDE
 22878                           postdec2	equ	0xFDD
 22879                           plusw2	equ	0xFDB
 22880                           fsr2h	equ	0xFDA
 22881                           fsr2l	equ	0xFD9
 22882                           status	equ	0xFD8
 22883                           
 22884 ;; *************** function _Port_CheckQuadType *****************
 22885 ;; Defined at:
 22886 ;;		line 126 in file "Library/Port.c"
 22887 ;; Parameters:    Size  Location     Type
 22888 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 22889 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22890 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22891 ;;  pQuad           1   49[BANK0 ] enum E6776
 22892 ;;  pDrive          1   50[BANK0 ] enum E6469
 22893 ;; Auto vars:     Size  Location     Type
 22894 ;;  Output          1   53[BANK0 ] enum E6475
 22895 ;;  Pair2           1   52[BANK0 ] enum E6760
 22896 ;;  Pair1           1   51[BANK0 ] enum E6760
 22897 ;; Return value:  Size  Location     Type
 22898 ;;                  1    wreg      enum E6475
 22899 ;; Registers used:
 22900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22901 ;; Tracked objects:
 22902 ;;		On entry : 0/0
 22903 ;;		On exit  : 0/0
 22904 ;;		Unchanged: 0/0
 22905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22906 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22907 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22909 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22910 ;;Total ram usage:        7 bytes
 22911 ;; Hardware stack levels used:    1
 22912 ;; Hardware stack levels required when called:   12
 22913 ;; This function calls:
 22914 ;;		_Port_CheckPairType
 22915 ;; This function is called by:
 22916 ;;		_Port_CheckPortType
 22917 ;;		_Port_SetQuadType
 22918 ;; This function uses a non-reentrant model
 22919 ;;
 22920                           
 22921                           	psect	text109
 22922  015986                     __ptext109:
 22923                           	opt stack 0
 22924  015986                     _Port_CheckQuadType:
 22925                           	opt stack 14
 22926                           
 22927                           ;Port.c: 128: ePinError Output = ePinErrorState;
 22928                           
 22929                           ;incstack = 0
 22930  015986  0E05               	movlw	5
 22931  015988  0100               	movlb	0	; () banked
 22932  01598A  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22933                           
 22934                           ; BSR set to: 0
 22935                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 22936  01598C  0100               	movlb	0	; () banked
 22937  01598E  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22938  015990  0D02               	mullw	2
 22939  015992  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 22940                           
 22941                           ; BSR set to: 0
 22942                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 22943  015996  0100               	movlb	0	; () banked
 22944  015998  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22945  01599A  0D02               	mullw	2
 22946  01599C  28F3               	incf	prodl,w,c
 22947  01599E  0100               	movlb	0	; () banked
 22948  0159A0  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 22949                           
 22950                           ; BSR set to: 0
 22951                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 22952  0159A2  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22953  0159A6  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22954  0159AA  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 22955  0159AE  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22956  0159B2  EC66  F0AB         	call	_Port_CheckPairType	;wreg free
 22957  0159B6  0100               	movlb	0	; () banked
 22958  0159B8  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22959  0159BA  0100               	movlb	0	; () banked
 22960  0159BC  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22961  0159BE  A4D8               	btfss	status,2,c
 22962  0159C0  D00C               	goto	l393
 22963                           
 22964                           ; BSR set to: 0
 22965                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 22966  0159C2  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22967  0159C6  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22968  0159CA  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 22969  0159CE  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22970  0159D2  EC66  F0AB         	call	_Port_CheckPairType	;wreg free
 22971  0159D6  0100               	movlb	0	; () banked
 22972  0159D8  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22973  0159DA                     l393:
 22974                           
 22975                           ; BSR set to: 0
 22976                           ;Port.c: 136: return Output;
 22977                           
 22978                           ; BSR set to: 0
 22979  0159DA  0100               	movlb	0	; () banked
 22980  0159DC  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22981  0159DE  0012               	return	
 22982  0159E0                     __end_of_Port_CheckQuadType:
 22983                           	opt stack 0
 22984                           tosu	equ	0xFFF
 22985                           tosh	equ	0xFFE
 22986                           tosl	equ	0xFFD
 22987                           pclath	equ	0xFFA
 22988                           tblptru	equ	0xFF8
 22989                           tblptrh	equ	0xFF7
 22990                           tblptrl	equ	0xFF6
 22991                           tablat	equ	0xFF5
 22992                           prodh	equ	0xFF4
 22993                           prodl	equ	0xFF3
 22994                           intcon	equ	0xFF2
 22995                           postinc0	equ	0xFEE
 22996                           wreg	equ	0xFE8
 22997                           indf1	equ	0xFE7
 22998                           postdec1	equ	0xFE5
 22999                           fsr1h	equ	0xFE2
 23000                           fsr1l	equ	0xFE1
 23001                           indf2	equ	0xFDF
 23002                           postinc2	equ	0xFDE
 23003                           postdec2	equ	0xFDD
 23004                           plusw2	equ	0xFDB
 23005                           fsr2h	equ	0xFDA
 23006                           fsr2l	equ	0xFD9
 23007                           status	equ	0xFD8
 23008                           
 23009 ;; *************** function _Port_CheckPairType *****************
 23010 ;; Defined at:
 23011 ;;		line 112 in file "Library/Port.c"
 23012 ;; Parameters:    Size  Location     Type
 23013 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23014 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23015 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23016 ;;  pPair           1   40[BANK0 ] enum E6760
 23017 ;;  pDrive          1   41[BANK0 ] enum E6469
 23018 ;; Auto vars:     Size  Location     Type
 23019 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23020 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23021 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23022 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23023 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23024 ;;  Output          1   44[BANK0 ] enum E6475
 23025 ;;  Pin2            1   43[BANK0 ] enum E6750
 23026 ;;  Pin1            1   42[BANK0 ] enum E6750
 23027 ;; Return value:  Size  Location     Type
 23028 ;;                  1    wreg      enum E6475
 23029 ;; Registers used:
 23030 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23031 ;; Tracked objects:
 23032 ;;		On entry : 0/0
 23033 ;;		On exit  : 0/0
 23034 ;;		Unchanged: 0/0
 23035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23037 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23039 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23040 ;;Total ram usage:        9 bytes
 23041 ;; Hardware stack levels used:    1
 23042 ;; Hardware stack levels required when called:   11
 23043 ;; This function calls:
 23044 ;;		_PortProperty_Valid
 23045 ;; This function is called by:
 23046 ;;		_Port_CheckQuadType
 23047 ;;		_Port_SetPairType
 23048 ;; This function uses a non-reentrant model
 23049 ;;
 23050                           
 23051                           	psect	text110
 23052  0156CC                     __ptext110:
 23053                           	opt stack 0
 23054  0156CC                     _Port_CheckPairType:
 23055                           	opt stack 14
 23056                           
 23057                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23058                           
 23059                           ; BSR set to: 0
 23060                           ;incstack = 0
 23061  0156CC  0E05               	movlw	5
 23062  0156CE  0100               	movlb	0	; () banked
 23063  0156D0  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 23064                           
 23065                           ; BSR set to: 0
 23066                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23067  0156D2  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23068  0156D6  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23069  0156DA  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 23070  0156DE  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 23071                           
 23072                           ; BSR set to: 0
 23073                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23074  0156E2  0100               	movlb	0	; () banked
 23075  0156E4  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23076  0156E6  0D02               	mullw	2
 23077  0156E8  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 23078                           
 23079                           ; BSR set to: 0
 23080                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23081  0156EC  0100               	movlb	0	; () banked
 23082  0156EE  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23083  0156F0  0D02               	mullw	2
 23084  0156F2  28F3               	incf	prodl,w,c
 23085  0156F4  0100               	movlb	0	; () banked
 23086  0156F6  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23087                           
 23088                           ; BSR set to: 0
 23089                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23090  0156F8  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23091  0156FC  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23092  015700  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23093  015704  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23094  015708  EC7E  F0A8         	call	_PortProperty_Valid	;wreg free
 23095  01570C  0100               	movlb	0	; () banked
 23096  01570E  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 23097  015710  0100               	movlb	0	; () banked
 23098  015712  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 23099  015714  A4D8               	btfss	status,2,c
 23100  015716  D00C               	goto	l389
 23101                           
 23102                           ; BSR set to: 0
 23103                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23104  015718  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23105  01571C  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23106  015720  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23107  015724  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23108  015728  EC7E  F0A8         	call	_PortProperty_Valid	;wreg free
 23109  01572C  0100               	movlb	0	; () banked
 23110  01572E  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 23111  015730                     l389:
 23112                           
 23113                           ; BSR set to: 0
 23114                           ;Port.c: 124: return Output;
 23115                           
 23116                           ; BSR set to: 0
 23117  015730  0100               	movlb	0	; () banked
 23118  015732  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 23119  015734  0012               	return	
 23120  015736                     __end_of_Port_CheckPairType:
 23121                           	opt stack 0
 23122                           tosu	equ	0xFFF
 23123                           tosh	equ	0xFFE
 23124                           tosl	equ	0xFFD
 23125                           pclath	equ	0xFFA
 23126                           tblptru	equ	0xFF8
 23127                           tblptrh	equ	0xFF7
 23128                           tblptrl	equ	0xFF6
 23129                           tablat	equ	0xFF5
 23130                           prodh	equ	0xFF4
 23131                           prodl	equ	0xFF3
 23132                           intcon	equ	0xFF2
 23133                           postinc0	equ	0xFEE
 23134                           wreg	equ	0xFE8
 23135                           indf1	equ	0xFE7
 23136                           postdec1	equ	0xFE5
 23137                           fsr1h	equ	0xFE2
 23138                           fsr1l	equ	0xFE1
 23139                           indf2	equ	0xFDF
 23140                           postinc2	equ	0xFDE
 23141                           postdec2	equ	0xFDD
 23142                           plusw2	equ	0xFDB
 23143                           fsr2h	equ	0xFDA
 23144                           fsr2l	equ	0xFD9
 23145                           status	equ	0xFD8
 23146                           
 23147 ;; *************** function _PortProperty_Valid *****************
 23148 ;; Defined at:
 23149 ;;		line 220 in file "Library/Types.c"
 23150 ;; Parameters:    Size  Location     Type
 23151 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23152 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23153 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23154 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23155 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23156 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23157 ;;  pPin            1   18[BANK0 ] unsigned char 
 23158 ;; Auto vars:     Size  Location     Type
 23159 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23160 ;;  Pair            1   37[BANK0 ] enum E6469
 23161 ;; Return value:  Size  Location     Type
 23162 ;;                  1    wreg      enum E6475
 23163 ;; Registers used:
 23164 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23165 ;; Tracked objects:
 23166 ;;		On entry : 0/0
 23167 ;;		On exit  : 0/0
 23168 ;;		Unchanged: 0/0
 23169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23170 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23171 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23173 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23174 ;;Total ram usage:       23 bytes
 23175 ;; Hardware stack levels used:    1
 23176 ;; Hardware stack levels required when called:   10
 23177 ;; This function calls:
 23178 ;;		_Word_GetPair
 23179 ;; This function is called by:
 23180 ;;		_Port_CheckPairType
 23181 ;;		_Port_SetPinType
 23182 ;; This function uses a non-reentrant model
 23183 ;;
 23184                           
 23185                           	psect	text111
 23186  0150FC                     __ptext111:
 23187                           	opt stack 0
 23188  0150FC                     _PortProperty_Valid:
 23189                           	opt stack 17
 23190                           
 23191                           ;Types.c: 222: ePinDrive Pair;
 23192                           ;Types.c: 223: const ePinError Errors[4][4] =
 23193                           ;Types.c: 224: {
 23194                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23195                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23196                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23197                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23198                           ;Types.c: 230: };
 23199                           
 23200                           ; BSR set to: 0
 23201                           ;incstack = 0
 23202  0150FC  0E41               	movlw	low PortProperty_Valid@F6830
 23203  0150FE  6EF6               	movwf	tblptrl,c
 23204  015100                     	if	1	;There is more than 1 active tblptr byte
 23205  015100  0EFD               	movlw	high PortProperty_Valid@F6830
 23206  015102  6EF7               	movwf	tblptrh,c
 23207  015104                     	endif
 23208  015104                     	if	1	;There are 3 active tblptr bytes
 23209  015104  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23210  015106  6EF8               	movwf	tblptru,c
 23211  015108                     	endif
 23212  015108  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 23213  01510C  0E0F               	movlw	15
 23214  01510E                     u8720:
 23215  01510E  0009               	tblrd		*+
 23216  015110  CFF5 FFDE          	movff	tablat,postinc2
 23217  015114  06E8               	decf	wreg,f,c
 23218  015116  E2FB               	bc	u8720
 23219                           
 23220                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23221  015118  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23222  01511C  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23223  015120  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23224  015124  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 23225  015128  0100               	movlb	0	; () banked
 23226  01512A  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 23227                           
 23228                           ; BSR set to: 0
 23229                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23230  01512C  0E04               	movlw	4
 23231  01512E  0100               	movlb	0	; () banked
 23232  015130  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23233  015132  D020               	goto	l819
 23234                           
 23235                           ; BSR set to: 0
 23236  015134  0E04               	movlw	4
 23237  015136  0100               	movlb	0	; () banked
 23238  015138  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23239  01513A  D01C               	goto	l819
 23240                           
 23241                           ; BSR set to: 0
 23242                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23243  01513C  0100               	movlb	0	; () banked
 23244  01513E  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23245  015140  0D04               	mullw	4
 23246  015142  0E75               	movlw	low PortProperty_Valid@Errors
 23247  015144  0100               	movlb	0	; () banked
 23248  015146  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 23249  015148  0E00               	movlw	high PortProperty_Valid@Errors
 23250  01514A  0100               	movlb	0	; () banked
 23251  01514C  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23252  01514E  50F3               	movf	prodl,w,c
 23253  015150  0100               	movlb	0	; () banked
 23254  015152  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 23255  015154  50F4               	movf	prodh,w,c
 23256  015156  0100               	movlb	0	; () banked
 23257  015158  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23258  01515A  0100               	movlb	0	; () banked
 23259  01515C  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23260  01515E  0D01               	mullw	1
 23261  015160  50F3               	movf	prodl,w,c
 23262  015162  0100               	movlb	0	; () banked
 23263  015164  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 23264  015166  6ED9               	movwf	fsr2l,c
 23265  015168  50F4               	movf	prodh,w,c
 23266  01516A  0100               	movlb	0	; () banked
 23267  01516C  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23268  01516E  6EDA               	movwf	fsr2h,c
 23269  015170  50DF               	movf	indf2,w,c
 23270                           
 23271                           ; BSR set to: 0
 23272  015172  0012               	return	
 23273  015174                     l819:
 23274                           
 23275                           ; BSR set to: 0
 23276                           ;Types.c: 237: return ePinErrorState;
 23277                           
 23278                           ; BSR set to: 0
 23279  015174  0E05               	movlw	5
 23280  015176  0012               	return	
 23281  015178                     __end_of_PortProperty_Valid:
 23282                           	opt stack 0
 23283                           tosu	equ	0xFFF
 23284                           tosh	equ	0xFFE
 23285                           tosl	equ	0xFFD
 23286                           pclath	equ	0xFFA
 23287                           tblptru	equ	0xFF8
 23288                           tblptrh	equ	0xFF7
 23289                           tblptrl	equ	0xFF6
 23290                           tablat	equ	0xFF5
 23291                           prodh	equ	0xFF4
 23292                           prodl	equ	0xFF3
 23293                           intcon	equ	0xFF2
 23294                           postinc0	equ	0xFEE
 23295                           wreg	equ	0xFE8
 23296                           indf1	equ	0xFE7
 23297                           postdec1	equ	0xFE5
 23298                           fsr1h	equ	0xFE2
 23299                           fsr1l	equ	0xFE1
 23300                           indf2	equ	0xFDF
 23301                           postinc2	equ	0xFDE
 23302                           postdec2	equ	0xFDD
 23303                           plusw2	equ	0xFDB
 23304                           fsr2h	equ	0xFDA
 23305                           fsr2l	equ	0xFD9
 23306                           status	equ	0xFD8
 23307                           
 23308 ;; *************** function _Byte_SetQuad *****************
 23309 ;; Defined at:
 23310 ;;		line 101 in file "Library/Types.c"
 23311 ;; Parameters:    Size  Location     Type
 23312 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23313 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23314 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23315 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23316 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23317 ;;		 -> NULL(0), 
 23318 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23319 ;;  pValue          1   14[BANK0 ] unsigned char 
 23320 ;; Auto vars:     Size  Location     Type
 23321 ;;		None
 23322 ;; Return value:  Size  Location     Type
 23323 ;;                  1    wreg      void 
 23324 ;; Registers used:
 23325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23326 ;; Tracked objects:
 23327 ;;		On entry : 0/0
 23328 ;;		On exit  : 0/0
 23329 ;;		Unchanged: 0/0
 23330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23335 ;;Total ram usage:        4 bytes
 23336 ;; Hardware stack levels used:    1
 23337 ;; Hardware stack levels required when called:    8
 23338 ;; This function calls:
 23339 ;;		_Byte_SetZone
 23340 ;; This function is called by:
 23341 ;;		_Port_SetQuadType
 23342 ;;		_SPI_Init
 23343 ;;		_SPI_MinSpeed
 23344 ;;		_SPI_MaxSpeed
 23345 ;;		_Port_SetQuad
 23346 ;;		_Word_SetQuad
 23347 ;;		_I2C_Init
 23348 ;; This function uses a non-reentrant model
 23349 ;;
 23350                           
 23351                           	psect	text112
 23352  016314                     __ptext112:
 23353                           	opt stack 0
 23354  016314                     _Byte_SetQuad:
 23355                           	opt stack 19
 23356                           
 23357                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23358                           
 23359                           ; BSR set to: 0
 23360                           ;incstack = 0
 23361  016314  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23362  016318  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23363  01631C  0E02               	movlw	2
 23364  01631E  0100               	movlb	0	; () banked
 23365  016320  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 23366  016322  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23367  016326  0E04               	movlw	4
 23368  016328  0100               	movlb	0	; () banked
 23369  01632A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23370  01632C  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23371  016330  ECC9  F0A1         	call	_Byte_SetZone	;wreg free
 23372  016334  0012               	return		;funcret
 23373  016336                     __end_of_Byte_SetQuad:
 23374                           	opt stack 0
 23375                           tosu	equ	0xFFF
 23376                           tosh	equ	0xFFE
 23377                           tosl	equ	0xFFD
 23378                           pclath	equ	0xFFA
 23379                           tblptru	equ	0xFF8
 23380                           tblptrh	equ	0xFF7
 23381                           tblptrl	equ	0xFF6
 23382                           tablat	equ	0xFF5
 23383                           prodh	equ	0xFF4
 23384                           prodl	equ	0xFF3
 23385                           intcon	equ	0xFF2
 23386                           postinc0	equ	0xFEE
 23387                           wreg	equ	0xFE8
 23388                           indf1	equ	0xFE7
 23389                           postdec1	equ	0xFE5
 23390                           fsr1h	equ	0xFE2
 23391                           fsr1l	equ	0xFE1
 23392                           indf2	equ	0xFDF
 23393                           postinc2	equ	0xFDE
 23394                           postdec2	equ	0xFDD
 23395                           plusw2	equ	0xFDB
 23396                           fsr2h	equ	0xFDA
 23397                           fsr2l	equ	0xFD9
 23398                           status	equ	0xFD8
 23399                           
 23400 ;; *************** function _Byte_SetZone *****************
 23401 ;; Defined at:
 23402 ;;		line 47 in file "Library/Types.c"
 23403 ;; Parameters:    Size  Location     Type
 23404 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23405 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23406 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23407 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23408 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23409 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23410 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23411 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23412 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23413 ;;  pMax            1    2[BANK0 ] unsigned char 
 23414 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23415 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23416 ;;  pValue          1    5[BANK0 ] unsigned char 
 23417 ;; Auto vars:     Size  Location     Type
 23418 ;;  MASK            1   10[BANK0 ] unsigned char 
 23419 ;;  Offset          1    9[BANK0 ] unsigned char 
 23420 ;; Return value:  Size  Location     Type
 23421 ;;                  1    wreg      void 
 23422 ;; Registers used:
 23423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23424 ;; Tracked objects:
 23425 ;;		On entry : 0/0
 23426 ;;		On exit  : 0/0
 23427 ;;		Unchanged: 0/0
 23428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23429 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23431 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23432 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23433 ;;Total ram usage:       11 bytes
 23434 ;; Hardware stack levels used:    1
 23435 ;; Hardware stack levels required when called:    7
 23436 ;; This function calls:
 23437 ;;		Nothing
 23438 ;; This function is called by:
 23439 ;;		_Byte_SetPair
 23440 ;;		_Byte_SetQuad
 23441 ;;		_Byte_SetTriple
 23442 ;; This function uses a non-reentrant model
 23443 ;;
 23444                           
 23445                           	psect	text113
 23446  014392                     __ptext113:
 23447                           	opt stack 0
 23448  014392                     _Byte_SetZone:
 23449                           	opt stack 18
 23450                           
 23451                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23452                           
 23453                           ;incstack = 0
 23454  014392  0100               	movlb	0	; () banked
 23455  014394  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23456  014396  0D01               	mullw	1
 23457  014398  0E5B               	movlw	low _MASKS
 23458  01439A  24F3               	addwf	prodl,w,c
 23459  01439C  6EF6               	movwf	tblptrl,c
 23460  01439E  0EFD               	movlw	high _MASKS
 23461  0143A0  20F4               	addwfc	prodh,w,c
 23462  0143A2  6EF7               	movwf	tblptrh,c
 23463  0143A4                     	if	1	;There are 3 active tblptr bytes
 23464  0143A4  6AF8               	clrf	tblptru,c
 23465  0143A6  0E00               	movlw	low (__mediumconst shr (0+16))
 23466  0143A8  22F8               	addwfc	tblptru,f,c
 23467  0143AA                     	endif
 23468  0143AA  0008               	tblrd		*
 23469  0143AC  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 23470                           
 23471                           ; BSR set to: 0
 23472                           ;Types.c: 50: UINT8 Offset = 0;
 23473  0143B0  0E00               	movlw	0
 23474  0143B2  0100               	movlb	0	; () banked
 23475  0143B4  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 23476                           
 23477                           ;Types.c: 52: while (pChunk >= pMax)
 23478  0143B6  D006               	goto	l726
 23479  0143B8                     
 23480                           ; BSR set to: 0
 23481                           ;Types.c: 53: {
 23482                           ;Types.c: 54: pChunk -= pMax;
 23483                           
 23484                           ; BSR set to: 0
 23485  0143B8  0100               	movlb	0	; () banked
 23486  0143BA  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23487  0143BC  0100               	movlb	0	; () banked
 23488  0143BE  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23489                           
 23490                           ; BSR set to: 0
 23491                           ;Types.c: 55: Offset += 1;
 23492  0143C0  0100               	movlb	0	; () banked
 23493  0143C2  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 23494  0143C4                     l726:
 23495                           
 23496                           ; BSR set to: 0
 23497                           
 23498                           ; BSR set to: 0
 23499  0143C4  0100               	movlb	0	; () banked
 23500  0143C6  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23501  0143C8  0100               	movlb	0	; () banked
 23502  0143CA  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23503  0143CC  B0D8               	btfsc	status,0,c
 23504  0143CE  D7F4               	goto	l727
 23505                           
 23506                           ; BSR set to: 0
 23507                           ;Types.c: 56: }
 23508                           ;Types.c: 57: pChunk *= pChunkSize;
 23509                           
 23510                           ; BSR set to: 0
 23511  0143D0  0100               	movlb	0	; () banked
 23512  0143D2  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23513  0143D4  0100               	movlb	0	; () banked
 23514  0143D6  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23515  0143D8  50F3               	movf	prodl,w,c
 23516  0143DA  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 23517                           
 23518                           ; BSR set to: 0
 23519                           ;Types.c: 58: pChunk += Offset;
 23520  0143DC  0100               	movlb	0	; () banked
 23521  0143DE  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 23522  0143E0  0100               	movlb	0	; () banked
 23523  0143E2  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23524                           
 23525                           ; BSR set to: 0
 23526                           ;Types.c: 60: pValue &= MASK;
 23527  0143E4  0100               	movlb	0	; () banked
 23528  0143E6  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 23529  0143E8  0100               	movlb	0	; () banked
 23530  0143EA  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23531                           
 23532                           ; BSR set to: 0
 23533                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23534  0143EC  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23535  0143F0  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23536  0143F4  0100               	movlb	0	; () banked
 23537  0143F6  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23538  0143F8  D003               	goto	u8784
 23539  0143FA                     u8785:
 23540  0143FA  0100               	movlb	0	; () banked
 23541  0143FC  90D8               	bcf	status,0,c
 23542  0143FE  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23543  014400                     u8784:
 23544  014400  0100               	movlb	0	; () banked
 23545  014402  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23546  014404  D7FA               	goto	u8785
 23547  014406  0100               	movlb	0	; () banked
 23548  014408  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23549  01440A  0AFF               	xorlw	255
 23550  01440C  0100               	movlb	0	; () banked
 23551  01440E  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23552  014410  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23553  014414  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23554  014418  0100               	movlb	0	; () banked
 23555  01441A  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23556  01441C  16DF               	andwf	indf2,f,c
 23557                           
 23558                           ; BSR set to: 0
 23559                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23560  01441E  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23561  014422  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23562  014426  0100               	movlb	0	; () banked
 23563  014428  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23564  01442A  D003               	goto	u8794
 23565  01442C                     u8795:
 23566  01442C  0100               	movlb	0	; () banked
 23567  01442E  90D8               	bcf	status,0,c
 23568  014430  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23569  014432                     u8794:
 23570  014432  0100               	movlb	0	; () banked
 23571  014434  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23572  014436  D7FA               	goto	u8795
 23573  014438  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23574  01443C  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23575  014440  0100               	movlb	0	; () banked
 23576  014442  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23577  014444  12DF               	iorwf	indf2,f,c
 23578                           
 23579                           ; BSR set to: 0
 23580  014446  0012               	return		;funcret
 23581  014448                     __end_of_Byte_SetZone:
 23582                           	opt stack 0
 23583                           tosu	equ	0xFFF
 23584                           tosh	equ	0xFFE
 23585                           tosl	equ	0xFFD
 23586                           pclath	equ	0xFFA
 23587                           tblptru	equ	0xFF8
 23588                           tblptrh	equ	0xFF7
 23589                           tblptrl	equ	0xFF6
 23590                           tablat	equ	0xFF5
 23591                           prodh	equ	0xFF4
 23592                           prodl	equ	0xFF3
 23593                           intcon	equ	0xFF2
 23594                           postinc0	equ	0xFEE
 23595                           wreg	equ	0xFE8
 23596                           indf1	equ	0xFE7
 23597                           postdec1	equ	0xFE5
 23598                           fsr1h	equ	0xFE2
 23599                           fsr1l	equ	0xFE1
 23600                           indf2	equ	0xFDF
 23601                           postinc2	equ	0xFDE
 23602                           postdec2	equ	0xFDD
 23603                           plusw2	equ	0xFDB
 23604                           fsr2h	equ	0xFDA
 23605                           fsr2l	equ	0xFD9
 23606                           status	equ	0xFD8
 23607                           
 23608 ;; *************** function _Console_Init *****************
 23609 ;; Defined at:
 23610 ;;		line 157 in file "Library/Console.c"
 23611 ;; Parameters:    Size  Location     Type
 23612 ;;		None
 23613 ;; Auto vars:     Size  Location     Type
 23614 ;;  y               1    3[BANK0 ] unsigned char 
 23615 ;;  x               1    2[BANK0 ] unsigned char 
 23616 ;; Return value:  Size  Location     Type
 23617 ;;                  1    wreg      void 
 23618 ;; Registers used:
 23619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23620 ;; Tracked objects:
 23621 ;;		On entry : 0/0
 23622 ;;		On exit  : 0/0
 23623 ;;		Unchanged: 0/0
 23624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23629 ;;Total ram usage:        4 bytes
 23630 ;; Hardware stack levels used:    1
 23631 ;; Hardware stack levels required when called:    7
 23632 ;; This function calls:
 23633 ;;		Nothing
 23634 ;; This function is called by:
 23635 ;;		_init
 23636 ;; This function uses a non-reentrant model
 23637 ;;
 23638                           
 23639                           	psect	text114
 23640  014E60                     __ptext114:
 23641                           	opt stack 0
 23642  014E60                     _Console_Init:
 23643                           	opt stack 22
 23644                           
 23645                           ;Console.c: 160: lBufferX = 0;
 23646                           
 23647                           ; BSR set to: 0
 23648                           ;incstack = 0
 23649  014E60  0E00               	movlw	0
 23650  014E62  0100               	movlb	0	; () banked
 23651  014E64  6FE8               	movwf	_lBufferX& (0+255),b
 23652                           
 23653                           ;Console.c: 161: lBufferY = 0;
 23654  014E66  0E00               	movlw	0
 23655  014E68  0100               	movlb	0	; () banked
 23656  014E6A  6FE7               	movwf	_lBufferY& (0+255),b
 23657                           
 23658                           ;Console.c: 163: UINT8 x, y;
 23659                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23660  014E6C  0E00               	movlw	0
 23661  014E6E  0100               	movlb	0	; () banked
 23662  014E70  6F62               	movwf	Console_Init@x& (0+255),b
 23663  014E72                     l14136:
 23664                           
 23665                           ; BSR set to: 0
 23666  014E72  0E13               	movlw	19
 23667  014E74  0100               	movlb	0	; () banked
 23668  014E76  6562               	cpfsgt	Console_Init@x& (0+255),b
 23669  014E78  D001               	goto	l976
 23670  014E7A  0012               	return	
 23671  014E7C                     l976:
 23672                           
 23673                           ; BSR set to: 0
 23674                           ;Console.c: 165: {
 23675                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23676                           
 23677                           ; BSR set to: 0
 23678  014E7C  0E00               	movlw	0
 23679  014E7E  0100               	movlb	0	; () banked
 23680  014E80  6F63               	movwf	Console_Init@y& (0+255),b
 23681  014E82                     l14142:
 23682                           
 23683                           ; BSR set to: 0
 23684  014E82  0E0E               	movlw	14
 23685  014E84  0100               	movlb	0	; () banked
 23686  014E86  6563               	cpfsgt	Console_Init@y& (0+255),b
 23687  014E88  D001               	goto	l978
 23688  014E8A  D02C               	goto	u10890
 23689  014E8C                     l978:
 23690                           
 23691                           ; BSR set to: 0
 23692                           ;Console.c: 167: {
 23693                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23694                           
 23695                           ; BSR set to: 0
 23696  014E8C  0100               	movlb	0	; () banked
 23697  014E8E  5163               	movf	Console_Init@y& (0+255),w,b
 23698  014E90  0D14               	mullw	20
 23699  014E92  0EC8               	movlw	low _lBuffer
 23700  014E94  0100               	movlb	0	; () banked
 23701  014E96  6F60               	movwf	??_Console_Init& (0+255),b
 23702  014E98  0E04               	movlw	high _lBuffer
 23703  014E9A  0100               	movlb	0	; () banked
 23704  014E9C  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 23705  014E9E  50F3               	movf	prodl,w,c
 23706  014EA0  0100               	movlb	0	; () banked
 23707  014EA2  2760               	addwf	??_Console_Init& (0+255),f,b
 23708  014EA4  50F4               	movf	prodh,w,c
 23709  014EA6  0100               	movlb	0	; () banked
 23710  014EA8  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23711  014EAA  0100               	movlb	0	; () banked
 23712  014EAC  5162               	movf	Console_Init@x& (0+255),w,b
 23713  014EAE  0D01               	mullw	1
 23714  014EB0  50F3               	movf	prodl,w,c
 23715  014EB2  0100               	movlb	0	; () banked
 23716  014EB4  2560               	addwf	??_Console_Init& (0+255),w,b
 23717  014EB6  6ED9               	movwf	fsr2l,c
 23718  014EB8  50F4               	movf	prodh,w,c
 23719  014EBA  0100               	movlb	0	; () banked
 23720  014EBC  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23721  014EBE  6EDA               	movwf	fsr2h,c
 23722  014EC0  0E00               	movlw	0
 23723  014EC2  6EDF               	movwf	indf2,c
 23724                           
 23725                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23726  014EC4  0100               	movlb	0	; () banked
 23727  014EC6  5163               	movf	Console_Init@y& (0+255),w,b
 23728  014EC8  0D02               	mullw	2
 23729  014ECA  0E00               	movlw	low _lCBuffer
 23730  014ECC  24F3               	addwf	prodl,w,c
 23731  014ECE  6ED9               	movwf	fsr2l,c
 23732  014ED0  0E04               	movlw	high _lCBuffer
 23733  014ED2  20F4               	addwfc	prodh,w,c
 23734  014ED4  6EDA               	movwf	fsr2h,c
 23735  014ED6  0EFF               	movlw	255
 23736  014ED8  6EDE               	movwf	postinc2,c
 23737  014EDA  0EFF               	movlw	255
 23738  014EDC  6EDD               	movwf	postdec2,c
 23739                           
 23740                           ; BSR set to: 0
 23741  014EDE  0100               	movlb	0	; () banked
 23742  014EE0  2B63               	incf	Console_Init@y& (0+255),f,b
 23743  014EE2  D7CF               	goto	l14142
 23744  014EE4                     u10890:
 23745                           
 23746                           ; BSR set to: 0
 23747                           
 23748                           ; BSR set to: 0
 23749  014EE4  0100               	movlb	0	; () banked
 23750  014EE6  2B62               	incf	Console_Init@x& (0+255),f,b
 23751  014EE8  D7C4               	goto	l14136
 23752  014EEA                     __end_of_Console_Init:
 23753                           	opt stack 0
 23754                           tosu	equ	0xFFF
 23755                           tosh	equ	0xFFE
 23756                           tosl	equ	0xFFD
 23757                           pclath	equ	0xFFA
 23758                           tblptru	equ	0xFF8
 23759                           tblptrh	equ	0xFF7
 23760                           tblptrl	equ	0xFF6
 23761                           tablat	equ	0xFF5
 23762                           prodh	equ	0xFF4
 23763                           prodl	equ	0xFF3
 23764                           intcon	equ	0xFF2
 23765                           postinc0	equ	0xFEE
 23766                           wreg	equ	0xFE8
 23767                           indf1	equ	0xFE7
 23768                           postdec1	equ	0xFE5
 23769                           fsr1h	equ	0xFE2
 23770                           fsr1l	equ	0xFE1
 23771                           indf2	equ	0xFDF
 23772                           postinc2	equ	0xFDE
 23773                           postdec2	equ	0xFDD
 23774                           plusw2	equ	0xFDB
 23775                           fsr2h	equ	0xFDA
 23776                           fsr2l	equ	0xFD9
 23777                           status	equ	0xFD8
 23778                           
 23779 ;; *************** function _ADC_Start *****************
 23780 ;; Defined at:
 23781 ;;		line 114 in file "Library/ADC.c"
 23782 ;; Parameters:    Size  Location     Type
 23783 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23784 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23785 ;;		 -> NULL(0), 
 23786 ;; Auto vars:     Size  Location     Type
 23787 ;;		None
 23788 ;; Return value:  Size  Location     Type
 23789 ;;                  1    wreg      void 
 23790 ;; Registers used:
 23791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23792 ;; Tracked objects:
 23793 ;;		On entry : 0/0
 23794 ;;		On exit  : 0/0
 23795 ;;		Unchanged: 0/0
 23796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23797 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23800 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23801 ;;Total ram usage:        4 bytes
 23802 ;; Hardware stack levels used:    1
 23803 ;; Hardware stack levels required when called:    8
 23804 ;; This function calls:
 23805 ;;		_ADC_Off
 23806 ;;		_ADC_On
 23807 ;;		_ADC_SetChannel
 23808 ;; This function is called by:
 23809 ;;		_init
 23810 ;;		_mode1
 23811 ;;		_mode4
 23812 ;;		_FunctADC
 23813 ;; This function uses a non-reentrant model
 23814 ;;
 23815                           
 23816                           	psect	text115
 23817  014F74                     __ptext115:
 23818                           	opt stack 0
 23819  014F74                     _ADC_Start:
 23820                           	opt stack 21
 23821                           
 23822                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 23823                           
 23824                           ; BSR set to: 0
 23825                           ;incstack = 0
 23826  014F74  B2C2               	btfsc	4034,1,c	;volatile
 23827  014F76  0012               	return	
 23828  014F78                     
 23829                           ;ADC.c: 128: {
 23830                           ;ADC.c: 129: ADC_Off();
 23831                           
 23832                           ;ADC.c: 127: for(;;)
 23833  014F78  EC4B  F0B3         	call	_ADC_Off	;wreg free
 23834                           
 23835                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 23836  014F7C  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 23837  014F80  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 23838  014F84  50DF               	movf	indf2,w,c
 23839  014F86  EC3F  F0B2         	call	_ADC_SetChannel
 23840                           
 23841                           ;ADC.c: 131: ADC_On();
 23842  014F8A  EC59  F0B3         	call	_ADC_On	;wreg free
 23843                           
 23844                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 23845  014F8E  82C2               	bsf	4034,1,c	;volatile
 23846  014F90  B2C2               	btfsc	4034,1,c	;volatile
 23847  014F92  D7FE               	goto	l1280
 23848                           
 23849                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 23850  014F94  50C3               	movf	4035,w,c	;volatile
 23851  014F96  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 23852  014F9A  0100               	movlb	0	; () banked
 23853  014F9C  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 23854  014F9E  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 23855  014FA2  0100               	movlb	0	; () banked
 23856  014FA4  6B64               	clrf	??_ADC_Start& (0+255),b
 23857  014FA6  0100               	movlb	0	; () banked
 23858  014FA8  1364               	iorwf	??_ADC_Start& (0+255),f,b
 23859  014FAA  0E00               	movlw	0
 23860  014FAC  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 23861  014FAE  0100               	movlb	0	; () banked
 23862  014FB0  EE20 F001          	lfsr	2,1
 23863  014FB4  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23864  014FB6  26D9               	addwf	fsr2l,f,c
 23865  014FB8  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23866  014FBA  22DA               	addwfc	fsr2h,f,c
 23867  014FBC  C064  FFDE         	movff	??_ADC_Start,postinc2
 23868  014FC0  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 23869                           
 23870                           ;ADC.c: 141: if (pInput->mNext == 0)
 23871  014FC4  0100               	movlb	0	; () banked
 23872  014FC6  EE20 F003          	lfsr	2,3
 23873  014FCA  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23874  014FCC  26D9               	addwf	fsr2l,f,c
 23875  014FCE  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23876  014FD0  22DA               	addwfc	fsr2h,f,c
 23877  014FD2  50DE               	movf	postinc2,w,c
 23878  014FD4  10DE               	iorwf	postinc2,w,c
 23879  014FD6  B4D8               	btfsc	status,2,c
 23880  014FD8  D00C               	goto	l1283
 23881                           
 23882                           ; BSR set to: 0
 23883                           ;ADC.c: 145: pInput = pInput->mNext;
 23884                           
 23885                           ; BSR set to: 0
 23886                           
 23887                           ; BSR set to: 0
 23888                           ;ADC.c: 142: break;
 23889  014FDA  0100               	movlb	0	; () banked
 23890  014FDC  EE20 F003          	lfsr	2,3
 23891  014FE0  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23892  014FE2  26D9               	addwf	fsr2l,f,c
 23893  014FE4  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23894  014FE6  22DA               	addwfc	fsr2h,f,c
 23895  014FE8  CFDE F062          	movff	postinc2,ADC_Start@pInput
 23896  014FEC  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 23897                           
 23898                           ;ADC.c: 146: }
 23899  014FF0  D7C3               	goto	l1276
 23900  014FF2                     l1283:
 23901                           
 23902                           ; BSR set to: 0
 23903                           ;ADC.c: 147: ADC_Off();
 23904                           
 23905                           ; BSR set to: 0
 23906  014FF2  EC4B  F0B3         	call	_ADC_Off	;wreg free
 23907  014FF6  0012               	return		;funcret
 23908  014FF8                     __end_of_ADC_Start:
 23909                           	opt stack 0
 23910                           tosu	equ	0xFFF
 23911                           tosh	equ	0xFFE
 23912                           tosl	equ	0xFFD
 23913                           pclath	equ	0xFFA
 23914                           tblptru	equ	0xFF8
 23915                           tblptrh	equ	0xFF7
 23916                           tblptrl	equ	0xFF6
 23917                           tablat	equ	0xFF5
 23918                           prodh	equ	0xFF4
 23919                           prodl	equ	0xFF3
 23920                           intcon	equ	0xFF2
 23921                           postinc0	equ	0xFEE
 23922                           wreg	equ	0xFE8
 23923                           indf1	equ	0xFE7
 23924                           postdec1	equ	0xFE5
 23925                           fsr1h	equ	0xFE2
 23926                           fsr1l	equ	0xFE1
 23927                           indf2	equ	0xFDF
 23928                           postinc2	equ	0xFDE
 23929                           postdec2	equ	0xFDD
 23930                           plusw2	equ	0xFDB
 23931                           fsr2h	equ	0xFDA
 23932                           fsr2l	equ	0xFD9
 23933                           status	equ	0xFD8
 23934                           
 23935 ;; *************** function _ADC_Init *****************
 23936 ;; Defined at:
 23937 ;;		line 19 in file "Library/ADC.c"
 23938 ;; Parameters:    Size  Location     Type
 23939 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 23940 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23941 ;;  pChannel        1    6[BANK0 ] enum E6742
 23942 ;; Auto vars:     Size  Location     Type
 23943 ;;		None
 23944 ;; Return value:  Size  Location     Type
 23945 ;;                  1    wreg      void 
 23946 ;; Registers used:
 23947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23948 ;; Tracked objects:
 23949 ;;		On entry : 0/0
 23950 ;;		On exit  : 0/0
 23951 ;;		Unchanged: 0/0
 23952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23953 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23956 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23957 ;;Total ram usage:        3 bytes
 23958 ;; Hardware stack levels used:    1
 23959 ;; Hardware stack levels required when called:    9
 23960 ;; This function calls:
 23961 ;;		_ADC_Calibrate
 23962 ;;		_ADC_ClockDivision
 23963 ;;		_ADC_ConversionTime
 23964 ;;		_ADC_SetChannel
 23965 ;;		_ADC_SetupIO
 23966 ;; This function is called by:
 23967 ;;		_init
 23968 ;;		_FunctInitADC
 23969 ;; This function uses a non-reentrant model
 23970 ;;
 23971                           
 23972                           	psect	text116
 23973  015178                     __ptext116:
 23974                           	opt stack 0
 23975  015178                     _ADC_Init:
 23976                           	opt stack 20
 23977                           
 23978                           ;ADC.c: 21: if(pInput==(void*)0)
 23979                           
 23980                           ;incstack = 0
 23981  015178  0100               	movlb	0	; () banked
 23982  01517A  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23983  01517C  0100               	movlb	0	; () banked
 23984  01517E  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 23985  015180  B4D8               	btfsc	status,2,c
 23986  015182  0012               	return	
 23987                           
 23988                           ; BSR set to: 0
 23989                           ;ADC.c: 25: lCurrent = pInput;
 23990                           
 23991                           ; BSR set to: 0
 23992                           
 23993                           ; BSR set to: 0
 23994                           ;ADC.c: 22: return;
 23995  015184  C064  F0DA         	movff	ADC_Init@pInput,_lCurrent
 23996  015188  C065  F0DB         	movff	ADC_Init@pInput+1,_lCurrent+1
 23997                           
 23998                           ; BSR set to: 0
 23999                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24000  01518C  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 24001  015190  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24002  015194  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 24003                           
 24004                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24005  015198  0100               	movlb	0	; () banked
 24006  01519A  EE20 F003          	lfsr	2,3
 24007  01519E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 24008  0151A0  26D9               	addwf	fsr2l,f,c
 24009  0151A2  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24010  0151A4  22DA               	addwfc	fsr2h,f,c
 24011  0151A6  0E00               	movlw	0
 24012  0151A8  6EDE               	movwf	postinc2,c
 24013  0151AA  0E00               	movlw	0
 24014  0151AC  6EDD               	movwf	postdec2,c
 24015                           
 24016                           ;ADC.c: 29: pInput->mValue = 0;
 24017  0151AE  0100               	movlb	0	; () banked
 24018  0151B0  EE20 F001          	lfsr	2,1
 24019  0151B4  5164               	movf	ADC_Init@pInput& (0+255),w,b
 24020  0151B6  26D9               	addwf	fsr2l,f,c
 24021  0151B8  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24022  0151BA  22DA               	addwfc	fsr2h,f,c
 24023  0151BC  0E00               	movlw	0
 24024  0151BE  6EDE               	movwf	postinc2,c
 24025  0151C0  0E00               	movlw	0
 24026  0151C2  6EDD               	movwf	postdec2,c
 24027                           
 24028                           ; BSR set to: 0
 24029                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24030  0151C4  0100               	movlb	0	; () banked
 24031  0151C6  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 24032  0151C8  EC3F  F0B2         	call	_ADC_SetChannel
 24033                           
 24034                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24035  0151CC  9EC2               	bcf	4034,7,c	;volatile
 24036                           
 24037                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24038  0151CE  9CC2               	bcf	4034,6,c	;volatile
 24039                           
 24040                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24041  0151D0  8EC1               	bsf	4033,7,c	;volatile
 24042                           
 24043                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24044  0151D2  8CC1               	bsf	4033,6,c	;volatile
 24045                           
 24046                           ;ADC.c: 43: ADC_ConversionTime(12);
 24047  0151D4  0E0C               	movlw	12
 24048  0151D6  EC30  F0AE         	call	_ADC_ConversionTime
 24049                           
 24050                           ;ADC.c: 47: ADC_ClockDivision(16);
 24051  0151DA  0E10               	movlw	16
 24052  0151DC  EC75  F0A7         	call	_ADC_ClockDivision
 24053                           
 24054                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24055  0151E0  0100               	movlb	0	; () banked
 24056  0151E2  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 24057  0151E4  EC88  F0B0         	call	_ADC_SetupIO
 24058                           
 24059                           ;ADC.c: 58: ADC_Initialised = 1;
 24060  0151E8  0E01               	movlw	1
 24061  0151EA  6E3C               	movwf	_ADC_Initialised,c
 24062                           
 24063                           ;ADC.c: 61: ADC_Calibrate();
 24064  0151EC  ECC4  F0B2         	call	_ADC_Calibrate	;wreg free
 24065  0151F0  0012               	return		;funcret
 24066  0151F2                     __end_of_ADC_Init:
 24067                           	opt stack 0
 24068                           tosu	equ	0xFFF
 24069                           tosh	equ	0xFFE
 24070                           tosl	equ	0xFFD
 24071                           pclath	equ	0xFFA
 24072                           tblptru	equ	0xFF8
 24073                           tblptrh	equ	0xFF7
 24074                           tblptrl	equ	0xFF6
 24075                           tablat	equ	0xFF5
 24076                           prodh	equ	0xFF4
 24077                           prodl	equ	0xFF3
 24078                           intcon	equ	0xFF2
 24079                           postinc0	equ	0xFEE
 24080                           wreg	equ	0xFE8
 24081                           indf1	equ	0xFE7
 24082                           postdec1	equ	0xFE5
 24083                           fsr1h	equ	0xFE2
 24084                           fsr1l	equ	0xFE1
 24085                           indf2	equ	0xFDF
 24086                           postinc2	equ	0xFDE
 24087                           postdec2	equ	0xFDD
 24088                           plusw2	equ	0xFDB
 24089                           fsr2h	equ	0xFDA
 24090                           fsr2l	equ	0xFD9
 24091                           status	equ	0xFD8
 24092                           
 24093 ;; *************** function _ADC_SetupIO *****************
 24094 ;; Defined at:
 24095 ;;		line 150 in file "Library/ADC.c"
 24096 ;; Parameters:    Size  Location     Type
 24097 ;;  pChannel        1    wreg     enum E6742
 24098 ;; Auto vars:     Size  Location     Type
 24099 ;;  pChannel        1    2[BANK0 ] enum E6742
 24100 ;;  MASK            1    3[BANK0 ] unsigned char 
 24101 ;; Return value:  Size  Location     Type
 24102 ;;                  1    wreg      void 
 24103 ;; Registers used:
 24104 ;;		wreg, status,2, status,0
 24105 ;; Tracked objects:
 24106 ;;		On entry : 0/0
 24107 ;;		On exit  : 0/0
 24108 ;;		Unchanged: 0/0
 24109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24113 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24114 ;;Total ram usage:        4 bytes
 24115 ;; Hardware stack levels used:    1
 24116 ;; Hardware stack levels required when called:    7
 24117 ;; This function calls:
 24118 ;;		Nothing
 24119 ;; This function is called by:
 24120 ;;		_ADC_Init
 24121 ;; This function uses a non-reentrant model
 24122 ;;
 24123                           
 24124                           	psect	text117
 24125  016110                     __ptext117:
 24126                           	opt stack 0
 24127  016110                     _ADC_SetupIO:
 24128                           	opt stack 21
 24129                           
 24130                           ;incstack = 0
 24131                           ;ADC_SetupIO@pChannel stored from wreg
 24132  016110  0100               	movlb	0	; () banked
 24133  016112  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24134                           
 24135                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24136  016114  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24137  016118  0E01               	movlw	1
 24138  01611A  0100               	movlb	0	; () banked
 24139  01611C  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24140  01611E  0100               	movlb	0	; () banked
 24141  016120  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 24142  016122  D003               	goto	u10154
 24143  016124                     u10155:
 24144  016124  0100               	movlb	0	; () banked
 24145  016126  90D8               	bcf	status,0,c
 24146  016128  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24147  01612A                     u10154:
 24148  01612A  0100               	movlb	0	; () banked
 24149  01612C  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24150  01612E  D7FA               	goto	u10155
 24151  016130  0100               	movlb	0	; () banked
 24152  016132  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24153  016134  0AFF               	xorlw	255
 24154  016136  0100               	movlb	0	; () banked
 24155  016138  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 24156                           
 24157                           ;ADC.c: 153: ANCON0 &= MASK;
 24158  01613A  0100               	movlb	0	; () banked
 24159  01613C  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24160  01613E  16C1               	andwf	4033,f,c	;volatile
 24161                           
 24162                           ; BSR set to: 0
 24163  016140  0012               	return		;funcret
 24164  016142                     __end_of_ADC_SetupIO:
 24165                           	opt stack 0
 24166                           tosu	equ	0xFFF
 24167                           tosh	equ	0xFFE
 24168                           tosl	equ	0xFFD
 24169                           pclath	equ	0xFFA
 24170                           tblptru	equ	0xFF8
 24171                           tblptrh	equ	0xFF7
 24172                           tblptrl	equ	0xFF6
 24173                           tablat	equ	0xFF5
 24174                           prodh	equ	0xFF4
 24175                           prodl	equ	0xFF3
 24176                           intcon	equ	0xFF2
 24177                           postinc0	equ	0xFEE
 24178                           wreg	equ	0xFE8
 24179                           indf1	equ	0xFE7
 24180                           postdec1	equ	0xFE5
 24181                           fsr1h	equ	0xFE2
 24182                           fsr1l	equ	0xFE1
 24183                           indf2	equ	0xFDF
 24184                           postinc2	equ	0xFDE
 24185                           postdec2	equ	0xFDD
 24186                           plusw2	equ	0xFDB
 24187                           fsr2h	equ	0xFDA
 24188                           fsr2l	equ	0xFD9
 24189                           status	equ	0xFD8
 24190                           
 24191 ;; *************** function _ADC_SetChannel *****************
 24192 ;; Defined at:
 24193 ;;		line 155 in file "Library/ADC.c"
 24194 ;; Parameters:    Size  Location     Type
 24195 ;;  pChannel        1    wreg     enum E6742
 24196 ;; Auto vars:     Size  Location     Type
 24197 ;;  pChannel        1    1[BANK0 ] enum E6742
 24198 ;; Return value:  Size  Location     Type
 24199 ;;                  1    wreg      void 
 24200 ;; Registers used:
 24201 ;;		wreg, status,2, status,0
 24202 ;; Tracked objects:
 24203 ;;		On entry : 0/0
 24204 ;;		On exit  : 0/0
 24205 ;;		Unchanged: 0/0
 24206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24210 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24211 ;;Total ram usage:        2 bytes
 24212 ;; Hardware stack levels used:    1
 24213 ;; Hardware stack levels required when called:    7
 24214 ;; This function calls:
 24215 ;;		Nothing
 24216 ;; This function is called by:
 24217 ;;		_ADC_Init
 24218 ;;		_ADC_Start
 24219 ;;		_ADC_ISR
 24220 ;;		_ADC_Sample
 24221 ;; This function uses a non-reentrant model
 24222 ;;
 24223                           
 24224                           	psect	text118
 24225  01647E                     __ptext118:
 24226                           	opt stack 0
 24227  01647E                     _ADC_SetChannel:
 24228                           	opt stack 21
 24229                           
 24230                           ; BSR set to: 0
 24231                           ;incstack = 0
 24232                           ;ADC_SetChannel@pChannel stored from wreg
 24233  01647E  0100               	movlb	0	; () banked
 24234  016480  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24235                           
 24236                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24237  016482  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24238  016486  0100               	movlb	0	; () banked
 24239  016488  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24240  01648A  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24241  01648C  50C2               	movf	4034,w,c	;volatile
 24242  01648E  0100               	movlb	0	; () banked
 24243  016490  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24244  016492  0BC3               	andlw	-61
 24245  016494  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24246  016496  6EC2               	movwf	4034,c	;volatile
 24247                           
 24248                           ; BSR set to: 0
 24249  016498  0012               	return		;funcret
 24250  01649A                     __end_of_ADC_SetChannel:
 24251                           	opt stack 0
 24252                           tosu	equ	0xFFF
 24253                           tosh	equ	0xFFE
 24254                           tosl	equ	0xFFD
 24255                           pclath	equ	0xFFA
 24256                           tblptru	equ	0xFF8
 24257                           tblptrh	equ	0xFF7
 24258                           tblptrl	equ	0xFF6
 24259                           tablat	equ	0xFF5
 24260                           prodh	equ	0xFF4
 24261                           prodl	equ	0xFF3
 24262                           intcon	equ	0xFF2
 24263                           postinc0	equ	0xFEE
 24264                           wreg	equ	0xFE8
 24265                           indf1	equ	0xFE7
 24266                           postdec1	equ	0xFE5
 24267                           fsr1h	equ	0xFE2
 24268                           fsr1l	equ	0xFE1
 24269                           indf2	equ	0xFDF
 24270                           postinc2	equ	0xFDE
 24271                           postdec2	equ	0xFDD
 24272                           plusw2	equ	0xFDB
 24273                           fsr2h	equ	0xFDA
 24274                           fsr2l	equ	0xFD9
 24275                           status	equ	0xFD8
 24276                           
 24277 ;; *************** function _ADC_ConversionTime *****************
 24278 ;; Defined at:
 24279 ;;		line 199 in file "Library/ADC.c"
 24280 ;; Parameters:    Size  Location     Type
 24281 ;;  pCount          1    wreg     unsigned char 
 24282 ;; Auto vars:     Size  Location     Type
 24283 ;;  pCount          1    1[BANK0 ] unsigned char 
 24284 ;; Return value:  Size  Location     Type
 24285 ;;                  1    wreg      void 
 24286 ;; Registers used:
 24287 ;;		wreg, status,2, status,0
 24288 ;; Tracked objects:
 24289 ;;		On entry : 0/0
 24290 ;;		On exit  : 0/0
 24291 ;;		Unchanged: 0/0
 24292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24297 ;;Total ram usage:        2 bytes
 24298 ;; Hardware stack levels used:    1
 24299 ;; Hardware stack levels required when called:    7
 24300 ;; This function calls:
 24301 ;;		Nothing
 24302 ;; This function is called by:
 24303 ;;		_ADC_Init
 24304 ;; This function uses a non-reentrant model
 24305 ;;
 24306                           
 24307                           	psect	text119
 24308  015C60                     __ptext119:
 24309                           	opt stack 0
 24310  015C60                     _ADC_ConversionTime:
 24311                           	opt stack 21
 24312                           
 24313                           ; BSR set to: 0
 24314                           ;incstack = 0
 24315                           ;ADC_ConversionTime@pCount stored from wreg
 24316  015C60  0100               	movlb	0	; () banked
 24317  015C62  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24318                           
 24319                           ;ADC.c: 201: if (pCount == 10)
 24320  015C64  0E0A               	movlw	10
 24321  015C66  0100               	movlb	0	; () banked
 24322  015C68  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24323  015C6A  B4D8               	btfsc	status,2,c
 24324  015C6C  D00A               	goto	u10120
 24325                           
 24326                           ; BSR set to: 0
 24327                           ;ADC.c: 203: else if (pCount == 14)
 24328                           
 24329                           ; BSR set to: 0
 24330                           
 24331                           ; BSR set to: 0
 24332                           ;ADC.c: 202: pCount -= 2;
 24333  015C6E  0E0E               	movlw	14
 24334  015C70  0100               	movlb	0	; () banked
 24335  015C72  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24336  015C74  B4D8               	btfsc	status,2,c
 24337  015C76  D005               	goto	u10120
 24338                           
 24339                           ; BSR set to: 0
 24340                           ;ADC.c: 205: else if (pCount == 18)
 24341                           
 24342                           ; BSR set to: 0
 24343                           
 24344                           ; BSR set to: 0
 24345                           ;ADC.c: 204: pCount -= 2;
 24346  015C78  0E12               	movlw	18
 24347  015C7A  0100               	movlb	0	; () banked
 24348  015C7C  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24349  015C7E  A4D8               	btfss	status,2,c
 24350  015C80  D003               	goto	l1313
 24351  015C82                     u10120:
 24352                           
 24353                           ; BSR set to: 0
 24354                           ;ADC.c: 206: pCount -= 2;
 24355  015C82  0E02               	movlw	2
 24356  015C84  0100               	movlb	0	; () banked
 24357  015C86  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24358  015C88                     l1313:
 24359                           
 24360                           ; BSR set to: 0
 24361                           ;ADC.c: 208: pCount <<= 1;
 24362                           
 24363                           ; BSR set to: 0
 24364                           
 24365                           ; BSR set to: 0
 24366  015C88  0100               	movlb	0	; () banked
 24367  015C8A  90D8               	bcf	status,0,c
 24368  015C8C  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24369                           
 24370                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24371  015C8E  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24372  015C92  0100               	movlb	0	; () banked
 24373  015C94  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24374  015C96  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24375  015C98  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24376  015C9A  50C1               	movf	4033,w,c	;volatile
 24377  015C9C  0100               	movlb	0	; () banked
 24378  015C9E  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24379  015CA0  0BC7               	andlw	-57
 24380  015CA2  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24381  015CA4  6EC1               	movwf	4033,c	;volatile
 24382                           
 24383                           ; BSR set to: 0
 24384  015CA6  0012               	return		;funcret
 24385  015CA8                     __end_of_ADC_ConversionTime:
 24386                           	opt stack 0
 24387                           tosu	equ	0xFFF
 24388                           tosh	equ	0xFFE
 24389                           tosl	equ	0xFFD
 24390                           pclath	equ	0xFFA
 24391                           tblptru	equ	0xFF8
 24392                           tblptrh	equ	0xFF7
 24393                           tblptrl	equ	0xFF6
 24394                           tablat	equ	0xFF5
 24395                           prodh	equ	0xFF4
 24396                           prodl	equ	0xFF3
 24397                           intcon	equ	0xFF2
 24398                           postinc0	equ	0xFEE
 24399                           wreg	equ	0xFE8
 24400                           indf1	equ	0xFE7
 24401                           postdec1	equ	0xFE5
 24402                           fsr1h	equ	0xFE2
 24403                           fsr1l	equ	0xFE1
 24404                           indf2	equ	0xFDF
 24405                           postinc2	equ	0xFDE
 24406                           postdec2	equ	0xFDD
 24407                           plusw2	equ	0xFDB
 24408                           fsr2h	equ	0xFDA
 24409                           fsr2l	equ	0xFD9
 24410                           status	equ	0xFD8
 24411                           
 24412 ;; *************** function _ADC_ClockDivision *****************
 24413 ;; Defined at:
 24414 ;;		line 159 in file "Library/ADC.c"
 24415 ;; Parameters:    Size  Location     Type
 24416 ;;  pDivide         1    wreg     unsigned char 
 24417 ;; Auto vars:     Size  Location     Type
 24418 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24419 ;;  unfound         1    2[BANK0 ] unsigned char 
 24420 ;;  reg             1    1[BANK0 ] unsigned char 
 24421 ;; Return value:  Size  Location     Type
 24422 ;;                  1    wreg      void 
 24423 ;; Registers used:
 24424 ;;		wreg, status,2, status,0
 24425 ;; Tracked objects:
 24426 ;;		On entry : 0/0
 24427 ;;		On exit  : 0/0
 24428 ;;		Unchanged: 0/0
 24429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24431 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24433 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24434 ;;Total ram usage:        3 bytes
 24435 ;; Hardware stack levels used:    1
 24436 ;; Hardware stack levels required when called:    7
 24437 ;; This function calls:
 24438 ;;		Nothing
 24439 ;; This function is called by:
 24440 ;;		_ADC_Init
 24441 ;; This function uses a non-reentrant model
 24442 ;;
 24443                           
 24444                           	psect	text120
 24445  014EEA                     __ptext120:
 24446                           	opt stack 0
 24447  014EEA                     _ADC_ClockDivision:
 24448                           	opt stack 21
 24449                           
 24450                           ; BSR set to: 0
 24451                           ;incstack = 0
 24452                           ;ADC_ClockDivision@pDivide stored from wreg
 24453  014EEA  0100               	movlb	0	; () banked
 24454  014EEC  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24455                           
 24456                           ;ADC.c: 161: UINT8 reg = 0;
 24457  014EEE  0E00               	movlw	0
 24458  014EF0  0100               	movlb	0	; () banked
 24459  014EF2  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24460                           
 24461                           ;ADC.c: 162: bool unfound = 1;
 24462  014EF4  0E01               	movlw	1
 24463  014EF6  D002               	goto	L15
 24464  014EF8                     
 24465                           ; BSR set to: 0
 24466                           ;ADC.c: 167: reg = 0;
 24467                           
 24468                           ; BSR set to: 0
 24469  014EF8  0E00               	movlw	0
 24470  014EFA  D00C               	goto	L20
 24471  014EFC                     L15:
 24472  014EFC  0100               	movlb	0	; () banked
 24473  014EFE  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24474                           
 24475                           ;ADC.c: 169: break;
 24476  014F00  D02D               	goto	l1296
 24477  014F02                     
 24478                           ; BSR set to: 0
 24479                           ;ADC.c: 171: reg = 0b100;
 24480                           
 24481                           ; BSR set to: 0
 24482  014F02  0E04               	movlw	4
 24483  014F04  D007               	goto	L20
 24484  014F06                     
 24485                           ; BSR set to: 0
 24486                           ;ADC.c: 175: reg = 0b001;
 24487                           
 24488                           ; BSR set to: 0
 24489  014F06  0E01               	movlw	1
 24490  014F08  D005               	goto	L20
 24491  014F0A                     
 24492                           ; BSR set to: 0
 24493                           ;ADC.c: 179: reg = 0b101;
 24494                           
 24495                           ; BSR set to: 0
 24496  014F0A  0E05               	movlw	5
 24497  014F0C  D003               	goto	L20
 24498  014F0E                     
 24499                           ; BSR set to: 0
 24500                           ;ADC.c: 183: reg = 0b010;
 24501                           
 24502                           ; BSR set to: 0
 24503  014F0E  0E02               	movlw	2
 24504  014F10  D001               	goto	L20
 24505  014F12                     
 24506                           ; BSR set to: 0
 24507                           ;ADC.c: 187: reg = 0b110;
 24508                           
 24509                           ; BSR set to: 0
 24510  014F12  0E06               	movlw	6
 24511  014F14                     L20:
 24512  014F14  0100               	movlb	0	; () banked
 24513  014F16  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24514                           
 24515                           ;ADC.c: 188: unfound = 0;
 24516  014F18  0E00               	movlw	0
 24517  014F1A  D7F0               	goto	L15
 24518  014F1C                     
 24519                           ; BSR set to: 0
 24520                           ;ADC.c: 191: if (pDivide > 2)
 24521                           
 24522                           ; BSR set to: 0
 24523  014F1C  0E02               	movlw	2
 24524  014F1E  0100               	movlb	0	; () banked
 24525  014F20  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24526  014F22  D003               	goto	l1303
 24527                           
 24528                           ; BSR set to: 0
 24529                           ;ADC.c: 192: pDivide --;
 24530  014F24  0100               	movlb	0	; () banked
 24531  014F26  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24532  014F28  D019               	goto	l1296
 24533  014F2A                     l1303:
 24534                           
 24535                           ; BSR set to: 0
 24536                           ;ADC.c: 193: else
 24537                           ;ADC.c: 194: pDivide = 2;
 24538                           
 24539                           ; BSR set to: 0
 24540  014F2A  0E02               	movlw	2
 24541  014F2C  0100               	movlb	0	; () banked
 24542  014F2E  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24543                           
 24544                           ; BSR set to: 0
 24545                           ;ADC.c: 195: };
 24546  014F30  D015               	goto	l1296
 24547  014F32                     
 24548                           ; BSR set to: 0
 24549                           
 24550                           ; BSR set to: 0
 24551  014F32  0100               	movlb	0	; () banked
 24552  014F34  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24553                           
 24554                           ; Switch size 1, requested type "space"
 24555                           ; Number of cases is 6, Range of values is 2 to 64
 24556                           ; switch strategies available:
 24557                           ; Name         Instructions Cycles
 24558                           ; simple_byte           19    10 (average)
 24559                           ;	Chosen strategy is simple_byte
 24560  014F36  0A02               	xorlw	2	; case 2
 24561  014F38  B4D8               	btfsc	status,2,c
 24562  014F3A  D7DE               	goto	l1295
 24563  014F3C  0A06               	xorlw	6	; case 4
 24564  014F3E  B4D8               	btfsc	status,2,c
 24565  014F40  D7E0               	goto	l1297
 24566  014F42  0A0C               	xorlw	12	; case 8
 24567  014F44  B4D8               	btfsc	status,2,c
 24568  014F46  D7DF               	goto	l1298
 24569  014F48  0A18               	xorlw	24	; case 16
 24570  014F4A  B4D8               	btfsc	status,2,c
 24571  014F4C  D7DE               	goto	l1299
 24572  014F4E  0A30               	xorlw	48	; case 32
 24573  014F50  B4D8               	btfsc	status,2,c
 24574  014F52  D7DD               	goto	l1300
 24575  014F54  0A60               	xorlw	96	; case 64
 24576  014F56  B4D8               	btfsc	status,2,c
 24577  014F58  D7DC               	goto	l1301
 24578  014F5A  D7E0               	goto	l1302
 24579  014F5C                     l1296:
 24580                           
 24581                           ; BSR set to: 0
 24582                           
 24583                           ; BSR set to: 0
 24584                           
 24585                           ; BSR set to: 0
 24586  014F5C  0100               	movlb	0	; () banked
 24587  014F5E  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24588  014F60  0100               	movlb	0	; () banked
 24589  014F62  A4D8               	btfss	status,2,c
 24590  014F64  D7E6               	goto	l1294
 24591                           
 24592                           ; BSR set to: 0
 24593                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24594                           
 24595                           ; BSR set to: 0
 24596  014F66  50C1               	movf	4033,w,c	;volatile
 24597  014F68  0100               	movlb	0	; () banked
 24598  014F6A  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24599  014F6C  0BF8               	andlw	-8
 24600  014F6E  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24601  014F70  6EC1               	movwf	4033,c	;volatile
 24602                           
 24603                           ; BSR set to: 0
 24604  014F72  0012               	return		;funcret
 24605  014F74                     __end_of_ADC_ClockDivision:
 24606                           	opt stack 0
 24607                           tosu	equ	0xFFF
 24608                           tosh	equ	0xFFE
 24609                           tosl	equ	0xFFD
 24610                           pclath	equ	0xFFA
 24611                           tblptru	equ	0xFF8
 24612                           tblptrh	equ	0xFF7
 24613                           tblptrl	equ	0xFF6
 24614                           tablat	equ	0xFF5
 24615                           prodh	equ	0xFF4
 24616                           prodl	equ	0xFF3
 24617                           intcon	equ	0xFF2
 24618                           postinc0	equ	0xFEE
 24619                           wreg	equ	0xFE8
 24620                           indf1	equ	0xFE7
 24621                           postdec1	equ	0xFE5
 24622                           fsr1h	equ	0xFE2
 24623                           fsr1l	equ	0xFE1
 24624                           indf2	equ	0xFDF
 24625                           postinc2	equ	0xFDE
 24626                           postdec2	equ	0xFDD
 24627                           plusw2	equ	0xFDB
 24628                           fsr2h	equ	0xFDA
 24629                           fsr2l	equ	0xFD9
 24630                           status	equ	0xFD8
 24631                           
 24632 ;; *************** function _ADC_Calibrate *****************
 24633 ;; Defined at:
 24634 ;;		line 63 in file "Library/ADC.c"
 24635 ;; Parameters:    Size  Location     Type
 24636 ;;		None
 24637 ;; Auto vars:     Size  Location     Type
 24638 ;;		None
 24639 ;; Return value:  Size  Location     Type
 24640 ;;                  1    wreg      void 
 24641 ;; Registers used:
 24642 ;;		cstack
 24643 ;; Tracked objects:
 24644 ;;		On entry : 0/0
 24645 ;;		On exit  : 0/0
 24646 ;;		Unchanged: 0/0
 24647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24652 ;;Total ram usage:        0 bytes
 24653 ;; Hardware stack levels used:    1
 24654 ;; Hardware stack levels required when called:    8
 24655 ;; This function calls:
 24656 ;;		_ADC_Off
 24657 ;;		_ADC_On
 24658 ;; This function is called by:
 24659 ;;		_ADC_Init
 24660 ;; This function uses a non-reentrant model
 24661 ;;
 24662                           
 24663                           	psect	text121
 24664  016588                     __ptext121:
 24665                           	opt stack 0
 24666  016588                     _ADC_Calibrate:
 24667                           	opt stack 20
 24668                           
 24669                           ;ADC.c: 65: ADC_On();
 24670                           
 24671                           ; BSR set to: 0
 24672                           ;incstack = 0
 24673  016588  EC59  F0B3         	call	_ADC_On	;wreg free
 24674                           
 24675                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24676  01658C  8CC1               	bsf	4033,6,c	;volatile
 24677                           
 24678                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24679  01658E  82C2               	bsf	4034,1,c	;volatile
 24680  016590  B2C2               	btfsc	4034,1,c	;volatile
 24681  016592  D7FE               	goto	l1254
 24682                           
 24683                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24684  016594  9CC1               	bcf	4033,6,c	;volatile
 24685                           
 24686                           ;ADC.c: 73: ADC_Off();
 24687  016596  EC4B  F0B3         	call	_ADC_Off	;wreg free
 24688  01659A  0012               	return		;funcret
 24689  01659C                     __end_of_ADC_Calibrate:
 24690                           	opt stack 0
 24691                           tosu	equ	0xFFF
 24692                           tosh	equ	0xFFE
 24693                           tosl	equ	0xFFD
 24694                           pclath	equ	0xFFA
 24695                           tblptru	equ	0xFF8
 24696                           tblptrh	equ	0xFF7
 24697                           tblptrl	equ	0xFF6
 24698                           tablat	equ	0xFF5
 24699                           prodh	equ	0xFF4
 24700                           prodl	equ	0xFF3
 24701                           intcon	equ	0xFF2
 24702                           postinc0	equ	0xFEE
 24703                           wreg	equ	0xFE8
 24704                           indf1	equ	0xFE7
 24705                           postdec1	equ	0xFE5
 24706                           fsr1h	equ	0xFE2
 24707                           fsr1l	equ	0xFE1
 24708                           indf2	equ	0xFDF
 24709                           postinc2	equ	0xFDE
 24710                           postdec2	equ	0xFDD
 24711                           plusw2	equ	0xFDB
 24712                           fsr2h	equ	0xFDA
 24713                           fsr2l	equ	0xFD9
 24714                           status	equ	0xFD8
 24715                           
 24716 ;; *************** function _ADC_On *****************
 24717 ;; Defined at:
 24718 ;;		line 85 in file "Library/ADC.c"
 24719 ;; Parameters:    Size  Location     Type
 24720 ;;		None
 24721 ;; Auto vars:     Size  Location     Type
 24722 ;;		None
 24723 ;; Return value:  Size  Location     Type
 24724 ;;                  1    wreg      void 
 24725 ;; Registers used:
 24726 ;;		None
 24727 ;; Tracked objects:
 24728 ;;		On entry : 0/0
 24729 ;;		On exit  : 0/0
 24730 ;;		Unchanged: 0/0
 24731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24736 ;;Total ram usage:        0 bytes
 24737 ;; Hardware stack levels used:    1
 24738 ;; Hardware stack levels required when called:    7
 24739 ;; This function calls:
 24740 ;;		Nothing
 24741 ;; This function is called by:
 24742 ;;		_ADC_Calibrate
 24743 ;;		_ADC_Start
 24744 ;;		_ADC_ISR
 24745 ;;		_ADC_Sample
 24746 ;; This function uses a non-reentrant model
 24747 ;;
 24748                           
 24749                           	psect	text122
 24750  0166B2                     __ptext122:
 24751                           	opt stack 0
 24752  0166B2                     _ADC_On:
 24753                           	opt stack 21
 24754                           
 24755                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24756                           
 24757                           ;incstack = 0
 24758  0166B2  80C2               	bsf	4034,0,c	;volatile
 24759                           
 24760                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24761  0166B4  9C9E               	bcf	3998,6,c	;volatile
 24762  0166B6  0012               	return		;funcret
 24763  0166B8                     __end_of_ADC_On:
 24764                           	opt stack 0
 24765                           tosu	equ	0xFFF
 24766                           tosh	equ	0xFFE
 24767                           tosl	equ	0xFFD
 24768                           pclath	equ	0xFFA
 24769                           tblptru	equ	0xFF8
 24770                           tblptrh	equ	0xFF7
 24771                           tblptrl	equ	0xFF6
 24772                           tablat	equ	0xFF5
 24773                           prodh	equ	0xFF4
 24774                           prodl	equ	0xFF3
 24775                           intcon	equ	0xFF2
 24776                           postinc0	equ	0xFEE
 24777                           wreg	equ	0xFE8
 24778                           indf1	equ	0xFE7
 24779                           postdec1	equ	0xFE5
 24780                           fsr1h	equ	0xFE2
 24781                           fsr1l	equ	0xFE1
 24782                           indf2	equ	0xFDF
 24783                           postinc2	equ	0xFDE
 24784                           postdec2	equ	0xFDD
 24785                           plusw2	equ	0xFDB
 24786                           fsr2h	equ	0xFDA
 24787                           fsr2l	equ	0xFD9
 24788                           status	equ	0xFD8
 24789                           
 24790 ;; *************** function _ADC_Off *****************
 24791 ;; Defined at:
 24792 ;;		line 94 in file "Library/ADC.c"
 24793 ;; Parameters:    Size  Location     Type
 24794 ;;		None
 24795 ;; Auto vars:     Size  Location     Type
 24796 ;;		None
 24797 ;; Return value:  Size  Location     Type
 24798 ;;                  1    wreg      void 
 24799 ;; Registers used:
 24800 ;;		None
 24801 ;; Tracked objects:
 24802 ;;		On entry : 0/0
 24803 ;;		On exit  : 0/0
 24804 ;;		Unchanged: 0/0
 24805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24810 ;;Total ram usage:        0 bytes
 24811 ;; Hardware stack levels used:    1
 24812 ;; Hardware stack levels required when called:    7
 24813 ;; This function calls:
 24814 ;;		Nothing
 24815 ;; This function is called by:
 24816 ;;		_ADC_Calibrate
 24817 ;;		_ADC_Start
 24818 ;;		_ADC_ISR
 24819 ;;		_ADC_Sample
 24820 ;; This function uses a non-reentrant model
 24821 ;;
 24822                           
 24823                           	psect	text123
 24824  016696                     __ptext123:
 24825                           	opt stack 0
 24826  016696                     _ADC_Off:
 24827                           	opt stack 21
 24828                           
 24829                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 24830                           
 24831                           ;incstack = 0
 24832  016696  90C2               	bcf	4034,0,c	;volatile
 24833                           
 24834                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 24835  016698  9C9E               	bcf	3998,6,c	;volatile
 24836                           
 24837                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 24838  01669A  9C9D               	bcf	3997,6,c	;volatile
 24839  01669C  0012               	return		;funcret
 24840  01669E                     __end_of_ADC_Off:
 24841                           	opt stack 0
 24842                           tosu	equ	0xFFF
 24843                           tosh	equ	0xFFE
 24844                           tosl	equ	0xFFD
 24845                           pclath	equ	0xFFA
 24846                           tblptru	equ	0xFF8
 24847                           tblptrh	equ	0xFF7
 24848                           tblptrl	equ	0xFF6
 24849                           tablat	equ	0xFF5
 24850                           prodh	equ	0xFF4
 24851                           prodl	equ	0xFF3
 24852                           intcon	equ	0xFF2
 24853                           postinc0	equ	0xFEE
 24854                           wreg	equ	0xFE8
 24855                           indf1	equ	0xFE7
 24856                           postdec1	equ	0xFE5
 24857                           fsr1h	equ	0xFE2
 24858                           fsr1l	equ	0xFE1
 24859                           indf2	equ	0xFDF
 24860                           postinc2	equ	0xFDE
 24861                           postdec2	equ	0xFDD
 24862                           plusw2	equ	0xFDB
 24863                           fsr2h	equ	0xFDA
 24864                           fsr2l	equ	0xFD9
 24865                           status	equ	0xFD8
 24866                           
 24867 ;; *************** function _getMode *****************
 24868 ;; Defined at:
 24869 ;;		line 104 in file "main.c"
 24870 ;; Parameters:    Size  Location     Type
 24871 ;;		None
 24872 ;; Auto vars:     Size  Location     Type
 24873 ;;		None
 24874 ;; Return value:  Size  Location     Type
 24875 ;;                  1    wreg      void 
 24876 ;; Registers used:
 24877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24878 ;; Tracked objects:
 24879 ;;		On entry : 0/0
 24880 ;;		On exit  : 0/0
 24881 ;;		Unchanged: 0/0
 24882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24887 ;;Total ram usage:        0 bytes
 24888 ;; Hardware stack levels used:    1
 24889 ;; Hardware stack levels required when called:   16
 24890 ;; This function calls:
 24891 ;;		_HMI_DIPSwitch
 24892 ;;		_HMI_DownSwitch
 24893 ;;		_HMI_LeftSwitch
 24894 ;;		_HMI_Poll
 24895 ;;		_HMI_RightSwitch
 24896 ;;		_HMI_UpSwitch
 24897 ;;		_MXK_DIPSwitch
 24898 ;;		_MXK_TestButton
 24899 ;; This function is called by:
 24900 ;;		_main
 24901 ;; This function uses a non-reentrant model
 24902 ;;
 24903                           
 24904                           	psect	text124
 24905  01409E                     __ptext124:
 24906                           	opt stack 0
 24907  01409E                     _getMode:
 24908                           	opt stack 14
 24909                           
 24910                           ;main.c: 105: HMI_Poll();
 24911                           
 24912                           ;incstack = 0
 24913  01409E  EC1E  F0AA         	call	_HMI_Poll	;wreg free
 24914                           
 24915                           ;main.c: 106: mode = 0;
 24916  0140A2  0E00               	movlw	0
 24917  0140A4  0100               	movlb	0	; () banked
 24918  0140A6  6FCB               	movwf	(_mode+1)& (0+255),b
 24919  0140A8  0E00               	movlw	0
 24920  0140AA  6FCA               	movwf	_mode& (0+255),b
 24921                           
 24922                           ; BSR set to: 0
 24923                           ;main.c: 107: if (HMIBoard.mUp.mGetState()) {
 24924  0140AC  EE23  F045         	lfsr	2,_HMIBoard+35
 24925  0140B0  D801               	call	u11578
 24926  0140B2  D00A               	goto	u11579
 24927  0140B4                     u11578:
 24928  0140B4  0005               	push	
 24929  0140B6  6EFA               	movwf	pclath,c
 24930  0140B8  50DE               	movf	postinc2,w,c
 24931  0140BA  6EFD               	movwf	tosl,c
 24932  0140BC  50DE               	movf	postinc2,w,c
 24933  0140BE  6EFE               	movwf	tosh,c
 24934  0140C0  50DE               	movf	postinc2,w,c
 24935  0140C2  6EFF               	movwf	tosu,c
 24936  0140C4  50FA               	movf	pclath,w,c
 24937  0140C6  0012               	return		;indir
 24938  0140C8                     u11579:
 24939  0140C8  0900               	iorlw	0
 24940  0140CA  B4D8               	btfsc	status,2,c
 24941  0140CC  D005               	goto	l2311
 24942                           
 24943                           ;main.c: 108: mode = 1;
 24944  0140CE  0E00               	movlw	0
 24945  0140D0  0100               	movlb	0	; () banked
 24946  0140D2  6FCB               	movwf	(_mode+1)& (0+255),b
 24947  0140D4  0E01               	movlw	1
 24948  0140D6  6FCA               	movwf	_mode& (0+255),b
 24949  0140D8                     l2311:
 24950                           
 24951                           ;main.c: 109: }
 24952                           ;main.c: 110: if (HMIBoard.mRight.mGetState()) {
 24953                           
 24954                           ; BSR set to: 0
 24955  0140D8  EE23  F031         	lfsr	2,_HMIBoard+15
 24956  0140DC  D801               	call	u11598
 24957  0140DE  D00A               	goto	u11599
 24958  0140E0                     u11598:
 24959  0140E0  0005               	push	
 24960  0140E2  6EFA               	movwf	pclath,c
 24961  0140E4  50DE               	movf	postinc2,w,c
 24962  0140E6  6EFD               	movwf	tosl,c
 24963  0140E8  50DE               	movf	postinc2,w,c
 24964  0140EA  6EFE               	movwf	tosh,c
 24965  0140EC  50DE               	movf	postinc2,w,c
 24966  0140EE  6EFF               	movwf	tosu,c
 24967  0140F0  50FA               	movf	pclath,w,c
 24968  0140F2  0012               	return		;indir
 24969  0140F4                     u11599:
 24970  0140F4  0900               	iorlw	0
 24971  0140F6  B4D8               	btfsc	status,2,c
 24972  0140F8  D005               	goto	l2312
 24973                           
 24974                           ;main.c: 111: mode = 2;
 24975  0140FA  0E00               	movlw	0
 24976  0140FC  0100               	movlb	0	; () banked
 24977  0140FE  6FCB               	movwf	(_mode+1)& (0+255),b
 24978  014100  0E02               	movlw	2
 24979  014102  6FCA               	movwf	_mode& (0+255),b
 24980  014104                     l2312:
 24981                           
 24982                           ;main.c: 112: }
 24983                           ;main.c: 113: if (HMIBoard.mDown.mGetState()) {
 24984                           
 24985                           ; BSR set to: 0
 24986  014104  EE23  F04F         	lfsr	2,_HMIBoard+45
 24987  014108  D801               	call	u11618
 24988  01410A  D00A               	goto	u11619
 24989  01410C                     u11618:
 24990  01410C  0005               	push	
 24991  01410E  6EFA               	movwf	pclath,c
 24992  014110  50DE               	movf	postinc2,w,c
 24993  014112  6EFD               	movwf	tosl,c
 24994  014114  50DE               	movf	postinc2,w,c
 24995  014116  6EFE               	movwf	tosh,c
 24996  014118  50DE               	movf	postinc2,w,c
 24997  01411A  6EFF               	movwf	tosu,c
 24998  01411C  50FA               	movf	pclath,w,c
 24999  01411E  0012               	return		;indir
 25000  014120                     u11619:
 25001  014120  0900               	iorlw	0
 25002  014122  B4D8               	btfsc	status,2,c
 25003  014124  D005               	goto	l2313
 25004                           
 25005                           ;main.c: 114: mode = 3;
 25006  014126  0E00               	movlw	0
 25007  014128  0100               	movlb	0	; () banked
 25008  01412A  6FCB               	movwf	(_mode+1)& (0+255),b
 25009  01412C  0E03               	movlw	3
 25010  01412E  6FCA               	movwf	_mode& (0+255),b
 25011  014130                     l2313:
 25012                           
 25013                           ;main.c: 115: }
 25014                           ;main.c: 116: if (HMIBoard.mLeft.mGetState()) {
 25015                           
 25016                           ; BSR set to: 0
 25017  014130  EE23  F03B         	lfsr	2,_HMIBoard+25
 25018  014134  D801               	call	u11638
 25019  014136  D00A               	goto	u11639
 25020  014138                     u11638:
 25021  014138  0005               	push	
 25022  01413A  6EFA               	movwf	pclath,c
 25023  01413C  50DE               	movf	postinc2,w,c
 25024  01413E  6EFD               	movwf	tosl,c
 25025  014140  50DE               	movf	postinc2,w,c
 25026  014142  6EFE               	movwf	tosh,c
 25027  014144  50DE               	movf	postinc2,w,c
 25028  014146  6EFF               	movwf	tosu,c
 25029  014148  50FA               	movf	pclath,w,c
 25030  01414A  0012               	return		;indir
 25031  01414C                     u11639:
 25032  01414C  0900               	iorlw	0
 25033  01414E  B4D8               	btfsc	status,2,c
 25034  014150  0012               	return	
 25035                           
 25036                           ;main.c: 117: mode = 4;
 25037  014152  0E00               	movlw	0
 25038  014154  0100               	movlb	0	; () banked
 25039  014156  6FCB               	movwf	(_mode+1)& (0+255),b
 25040  014158  0E04               	movlw	4
 25041  01415A  6FCA               	movwf	_mode& (0+255),b
 25042  01415C  0012               	return	
 25043  01415E                     __end_of_getMode:
 25044                           	opt stack 0
 25045                           tosu	equ	0xFFF
 25046                           tosh	equ	0xFFE
 25047                           tosl	equ	0xFFD
 25048                           pclath	equ	0xFFA
 25049                           tblptru	equ	0xFF8
 25050                           tblptrh	equ	0xFF7
 25051                           tblptrl	equ	0xFF6
 25052                           tablat	equ	0xFF5
 25053                           prodh	equ	0xFF4
 25054                           prodl	equ	0xFF3
 25055                           intcon	equ	0xFF2
 25056                           postinc0	equ	0xFEE
 25057                           wreg	equ	0xFE8
 25058                           indf1	equ	0xFE7
 25059                           postdec1	equ	0xFE5
 25060                           fsr1h	equ	0xFE2
 25061                           fsr1l	equ	0xFE1
 25062                           indf2	equ	0xFDF
 25063                           postinc2	equ	0xFDE
 25064                           postdec2	equ	0xFDD
 25065                           plusw2	equ	0xFDB
 25066                           fsr2h	equ	0xFDA
 25067                           fsr2l	equ	0xFD9
 25068                           status	equ	0xFD8
 25069                           
 25070 ;; *************** function _HMI_Poll *****************
 25071 ;; Defined at:
 25072 ;;		line 252 in file "HMI.c"
 25073 ;; Parameters:    Size  Location     Type
 25074 ;;		None
 25075 ;; Auto vars:     Size  Location     Type
 25076 ;;		None
 25077 ;; Return value:  Size  Location     Type
 25078 ;;                  1    wreg      void 
 25079 ;; Registers used:
 25080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25081 ;; Tracked objects:
 25082 ;;		On entry : 0/0
 25083 ;;		On exit  : 0/0
 25084 ;;		Unchanged: 0/0
 25085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25090 ;;Total ram usage:        0 bytes
 25091 ;; Hardware stack levels used:    1
 25092 ;; Hardware stack levels required when called:   15
 25093 ;; This function calls:
 25094 ;;		_Button_Poll
 25095 ;; This function is called by:
 25096 ;;		_getMode
 25097 ;;		_mode1
 25098 ;;		_mode2
 25099 ;;		_mode4
 25100 ;;		_main
 25101 ;; This function uses a non-reentrant model
 25102 ;;
 25103                           
 25104                           	psect	text125
 25105  01543C                     __ptext125:
 25106                           	opt stack 0
 25107  01543C                     _HMI_Poll:
 25108                           	opt stack 14
 25109                           
 25110                           ;HMI.c: 254: TRISE = 0xFC;
 25111                           
 25112                           ;incstack = 0
 25113  01543C  0EFC               	movlw	252
 25114  01543E  6E96               	movwf	3990,c	;volatile
 25115                           
 25116                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25117  015440  0E52               	movlw	low (_HMIBoard+48)
 25118  015442  0100               	movlb	0	; () banked
 25119  015444  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25120  015446  0E03               	movlw	high (_HMIBoard+48)
 25121  015448  0100               	movlb	0	; () banked
 25122  01544A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25123  01544C  0E01               	movlw	1
 25124  01544E  0100               	movlb	0	; () banked
 25125  015450  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25126  015452  EC46  F098         	call	_Button_Poll	;wreg free
 25127                           
 25128                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25129  015456  0E34               	movlw	low (_HMIBoard+18)
 25130  015458  0100               	movlb	0	; () banked
 25131  01545A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25132  01545C  0E03               	movlw	high (_HMIBoard+18)
 25133  01545E  0100               	movlb	0	; () banked
 25134  015460  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25135  015462  0E01               	movlw	1
 25136  015464  0100               	movlb	0	; () banked
 25137  015466  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25138  015468  EC46  F098         	call	_Button_Poll	;wreg free
 25139                           
 25140                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25141  01546C  0E2A               	movlw	low (_HMIBoard+8)
 25142  01546E  0100               	movlb	0	; () banked
 25143  015470  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25144  015472  0E03               	movlw	high (_HMIBoard+8)
 25145  015474  0100               	movlb	0	; () banked
 25146  015476  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25147  015478  0E01               	movlw	1
 25148  01547A  0100               	movlb	0	; () banked
 25149  01547C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25150  01547E  EC46  F098         	call	_Button_Poll	;wreg free
 25151                           
 25152                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25153  015482  0E3E               	movlw	low (_HMIBoard+28)
 25154  015484  0100               	movlb	0	; () banked
 25155  015486  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25156  015488  0E03               	movlw	high (_HMIBoard+28)
 25157  01548A  0100               	movlb	0	; () banked
 25158  01548C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25159  01548E  0E01               	movlw	1
 25160  015490  0100               	movlb	0	; () banked
 25161  015492  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25162  015494  EC46  F098         	call	_Button_Poll	;wreg free
 25163                           
 25164                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25165  015498  0E48               	movlw	low (_HMIBoard+38)
 25166  01549A  0100               	movlb	0	; () banked
 25167  01549C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25168  01549E  0E03               	movlw	high (_HMIBoard+38)
 25169  0154A0  0100               	movlb	0	; () banked
 25170  0154A2  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25171  0154A4  0E01               	movlw	1
 25172  0154A6  0100               	movlb	0	; () banked
 25173  0154A8  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25174  0154AA  EC46  F098         	call	_Button_Poll	;wreg free
 25175  0154AE  0012               	return		;funcret
 25176  0154B0                     __end_of_HMI_Poll:
 25177                           	opt stack 0
 25178                           tosu	equ	0xFFF
 25179                           tosh	equ	0xFFE
 25180                           tosl	equ	0xFFD
 25181                           pclath	equ	0xFFA
 25182                           tblptru	equ	0xFF8
 25183                           tblptrh	equ	0xFF7
 25184                           tblptrl	equ	0xFF6
 25185                           tablat	equ	0xFF5
 25186                           prodh	equ	0xFF4
 25187                           prodl	equ	0xFF3
 25188                           intcon	equ	0xFF2
 25189                           postinc0	equ	0xFEE
 25190                           wreg	equ	0xFE8
 25191                           indf1	equ	0xFE7
 25192                           postdec1	equ	0xFE5
 25193                           fsr1h	equ	0xFE2
 25194                           fsr1l	equ	0xFE1
 25195                           indf2	equ	0xFDF
 25196                           postinc2	equ	0xFDE
 25197                           postdec2	equ	0xFDD
 25198                           plusw2	equ	0xFDB
 25199                           fsr2h	equ	0xFDA
 25200                           fsr2l	equ	0xFD9
 25201                           status	equ	0xFD8
 25202                           
 25203 ;; *************** function _Button_Poll *****************
 25204 ;; Defined at:
 25205 ;;		line 57 in file "Library/Button.c"
 25206 ;; Parameters:    Size  Location     Type
 25207 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25208 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25209 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25210 ;; Auto vars:     Size  Location     Type
 25211 ;;  Pin             1   35[BANK0 ] unsigned char 
 25212 ;; Return value:  Size  Location     Type
 25213 ;;                  1    wreg      unsigned char 
 25214 ;; Registers used:
 25215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25216 ;; Tracked objects:
 25217 ;;		On entry : 0/0
 25218 ;;		On exit  : 0/0
 25219 ;;		Unchanged: 0/0
 25220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25221 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25223 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25224 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25225 ;;Total ram usage:        9 bytes
 25226 ;; Hardware stack levels used:    1
 25227 ;; Hardware stack levels required when called:   14
 25228 ;; This function calls:
 25229 ;;		_Event_DIPSwitch
 25230 ;;		_Event_NULL
 25231 ;;		_Event_TestButton
 25232 ;;		_HMI_DIPSwitch
 25233 ;;		_HMI_DownSwitch
 25234 ;;		_HMI_LeftSwitch
 25235 ;;		_HMI_RightSwitch
 25236 ;;		_HMI_UpSwitch
 25237 ;;		_MXK_DIPSwitch
 25238 ;;		_MXK_TestButton
 25239 ;; This function is called by:
 25240 ;;		_HMI_Poll
 25241 ;;		_MXK_Poll
 25242 ;; This function uses a non-reentrant model
 25243 ;;
 25244                           
 25245                           	psect	text126
 25246  01308C                     __ptext126:
 25247                           	opt stack 0
 25248  01308C                     _Button_Poll:
 25249                           	opt stack 14
 25250                           
 25251                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25252                           
 25253                           ;incstack = 0
 25254  01308C  0100               	movlb	0	; () banked
 25255  01308E  EE20 F007          	lfsr	2,7
 25256  013092  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25257  013094  26D9               	addwf	fsr2l,f,c
 25258  013096  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25259  013098  22DA               	addwfc	fsr2h,f,c
 25260  01309A  D801               	call	u9848
 25261  01309C  D00A               	goto	u9849
 25262  01309E                     u9848:
 25263  01309E  0005               	push	
 25264  0130A0  6EFA               	movwf	pclath,c
 25265  0130A2  50DE               	movf	postinc2,w,c
 25266  0130A4  6EFD               	movwf	tosl,c
 25267  0130A6  50DE               	movf	postinc2,w,c
 25268  0130A8  6EFE               	movwf	tosh,c
 25269  0130AA  50DE               	movf	postinc2,w,c
 25270  0130AC  6EFF               	movwf	tosu,c
 25271  0130AE  50FA               	movf	pclath,w,c
 25272  0130B0  0012               	return		;indir
 25273  0130B2                     u9849:
 25274  0130B2  0100               	movlb	0	; () banked
 25275  0130B4  6F83               	movwf	Button_Poll@Pin& (0+255),b
 25276                           
 25277                           ; BSR set to: 0
 25278                           ;Button.c: 61: if (pButton->mState == Pin)
 25279  0130B6  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 25280  0130BA  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25281  0130BE  0100               	movlb	0	; () banked
 25282  0130C0  5183               	movf	Button_Poll@Pin& (0+255),w,b
 25283  0130C2  18DE               	xorwf	postinc2,w,c
 25284  0130C4  A4D8               	btfss	status,2,c
 25285  0130C6  D021               	goto	l11
 25286                           
 25287                           ; BSR set to: 0
 25288                           ;Button.c: 62: {
 25289                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25290  0130C8  0100               	movlb	0	; () banked
 25291  0130CA  EE20 F001          	lfsr	2,1
 25292  0130CE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25293  0130D0  26D9               	addwf	fsr2l,f,c
 25294  0130D2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25295  0130D4  22DA               	addwfc	fsr2h,f,c
 25296  0130D6  0100               	movlb	0	; () banked
 25297  0130D8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25298  0130DA  5CDE               	subwf	postinc2,w,c
 25299  0130DC  B0D8               	btfsc	status,0,c
 25300  0130DE  D00A               	goto	l12
 25301                           
 25302                           ; BSR set to: 0
 25303                           ;Button.c: 66: pButton->mCount = 0;
 25304  0130E0  0100               	movlb	0	; () banked
 25305  0130E2  EE20 F001          	lfsr	2,1
 25306  0130E6  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25307  0130E8  26D9               	addwf	fsr2l,f,c
 25308  0130EA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25309  0130EC  22DA               	addwfc	fsr2h,f,c
 25310  0130EE  0E00               	movlw	0
 25311  0130F0  6EDF               	movwf	indf2,c
 25312  0130F2  0012               	return	
 25313  0130F4                     l12:
 25314                           
 25315                           ; BSR set to: 0
 25316                           ;Button.c: 67: else
 25317                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25318                           
 25319                           ; BSR set to: 0
 25320  0130F4  0100               	movlb	0	; () banked
 25321  0130F6  EE20 F001          	lfsr	2,1
 25322  0130FA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25323  0130FC  26D9               	addwf	fsr2l,f,c
 25324  0130FE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25325  013100  22DA               	addwfc	fsr2h,f,c
 25326  013102  0100               	movlb	0	; () banked
 25327  013104  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25328  013106  5EDF               	subwf	indf2,f,c
 25329                           
 25330                           ; BSR set to: 0
 25331                           ;Button.c: 69: }
 25332  013108  0012               	return	
 25333  01310A                     l11:
 25334                           
 25335                           ; BSR set to: 0
 25336                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25337                           
 25338                           ; BSR set to: 0
 25339  01310A  0100               	movlb	0	; () banked
 25340  01310C  EE20 F001          	lfsr	2,1
 25341  013110  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25342  013112  26D9               	addwf	fsr2l,f,c
 25343  013114  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25344  013116  22DA               	addwfc	fsr2h,f,c
 25345  013118  50DF               	movf	indf2,w,c
 25346  01311A  0100               	movlb	0	; () banked
 25347  01311C  6F7E               	movwf	??_Button_Poll& (0+255),b
 25348  01311E  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 25349  013120  0100               	movlb	0	; () banked
 25350  013122  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25351  013124  0100               	movlb	0	; () banked
 25352  013126  277E               	addwf	??_Button_Poll& (0+255),f,b
 25353  013128  0E00               	movlw	0
 25354  01312A  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25355  01312C  0100               	movlb	0	; () banked
 25356  01312E  EE20 F001          	lfsr	2,1
 25357  013132  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25358  013134  26D9               	addwf	fsr2l,f,c
 25359  013136  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25360  013138  22DA               	addwfc	fsr2h,f,c
 25361  01313A  50DF               	movf	indf2,w,c
 25362  01313C  0100               	movlb	0	; () banked
 25363  01313E  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 25364  013140  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 25365  013142  0100               	movlb	0	; () banked
 25366  013144  517E               	movf	??_Button_Poll& (0+255),w,b
 25367  013146  0100               	movlb	0	; () banked
 25368  013148  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25369  01314A  0100               	movlb	0	; () banked
 25370  01314C  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 25371  01314E  0A80               	xorlw	128
 25372  013150  0100               	movlb	0	; () banked
 25373  013152  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 25374  013154  0100               	movlb	0	; () banked
 25375  013156  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 25376  013158  0A80               	xorlw	128
 25377  01315A  0100               	movlb	0	; () banked
 25378  01315C  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25379  01315E  B0D8               	btfsc	status,0,c
 25380  013160  0012               	return	
 25381                           
 25382                           ; BSR set to: 0
 25383                           ;Button.c: 73: {
 25384                           ;Button.c: 75: pButton->mCount += pIncrement;
 25385  013162  0100               	movlb	0	; () banked
 25386  013164  EE20 F001          	lfsr	2,1
 25387  013168  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25388  01316A  26D9               	addwf	fsr2l,f,c
 25389  01316C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25390  01316E  22DA               	addwfc	fsr2h,f,c
 25391  013170  0100               	movlb	0	; () banked
 25392  013172  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25393  013174  26DF               	addwf	indf2,f,c
 25394                           
 25395                           ; BSR set to: 0
 25396                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25397  013176  0100               	movlb	0	; () banked
 25398  013178  EE20 F002          	lfsr	2,2
 25399  01317C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25400  01317E  26D9               	addwf	fsr2l,f,c
 25401  013180  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25402  013182  22DA               	addwfc	fsr2h,f,c
 25403  013184  0100               	movlb	0	; () banked
 25404  013186  EE10 F001          	lfsr	1,1
 25405  01318A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25406  01318C  26E1               	addwf	fsr1l,f,c
 25407  01318E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25408  013190  22E2               	addwfc	fsr1h,f,c
 25409  013192  50E7               	movf	indf1,w,c
 25410  013194  0100               	movlb	0	; () banked
 25411  013196  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 25412  013198  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 25413  01319A  50DE               	movf	postinc2,w,c
 25414  01319C  0100               	movlb	0	; () banked
 25415  01319E  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25416  0131A0  50DE               	movf	postinc2,w,c
 25417  0131A2  0100               	movlb	0	; () banked
 25418  0131A4  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25419  0131A6  A0D8               	btfss	status,0,c
 25420  0131A8  0012               	return	
 25421                           
 25422                           ; BSR set to: 0
 25423                           ;Button.c: 77: {
 25424                           ;Button.c: 79: pButton->mState = Pin;
 25425  0131AA  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 25426  0131AE  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25427  0131B2  C083  FFDF         	movff	Button_Poll@Pin,indf2
 25428                           
 25429                           ; BSR set to: 0
 25430                           ;Button.c: 80: pButton->mCount = 0;
 25431  0131B6  0100               	movlb	0	; () banked
 25432  0131B8  EE20 F001          	lfsr	2,1
 25433  0131BC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25434  0131BE  26D9               	addwf	fsr2l,f,c
 25435  0131C0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25436  0131C2  22DA               	addwfc	fsr2h,f,c
 25437  0131C4  0E00               	movlw	0
 25438  0131C6  6EDF               	movwf	indf2,c
 25439                           
 25440                           ; BSR set to: 0
 25441                           ;Button.c: 83: pButton->mFunction(Pin);
 25442  0131C8  0100               	movlb	0	; () banked
 25443  0131CA  EE20 F004          	lfsr	2,4
 25444  0131CE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25445  0131D0  26D9               	addwf	fsr2l,f,c
 25446  0131D2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25447  0131D4  22DA               	addwfc	fsr2h,f,c
 25448  0131D6  D801               	call	u9898
 25449  0131D8  0012               	return	
 25450  0131DA                     u9898:
 25451  0131DA  0005               	push	
 25452  0131DC  6EFA               	movwf	pclath,c
 25453  0131DE  50DE               	movf	postinc2,w,c
 25454  0131E0  6EFD               	movwf	tosl,c
 25455  0131E2  50DE               	movf	postinc2,w,c
 25456  0131E4  6EFE               	movwf	tosh,c
 25457  0131E6  50DE               	movf	postinc2,w,c
 25458  0131E8  6EFF               	movwf	tosu,c
 25459  0131EA  50FA               	movf	pclath,w,c
 25460  0131EC  0100               	movlb	0	; () banked
 25461  0131EE  5183               	movf	Button_Poll@Pin& (0+255),w,b
 25462  0131F0  0012               	return		;indir
 25463  0131F2                     __end_of_Button_Poll:
 25464                           	opt stack 0
 25465                           tosu	equ	0xFFF
 25466                           tosh	equ	0xFFE
 25467                           tosl	equ	0xFFD
 25468                           pclath	equ	0xFFA
 25469                           tblptru	equ	0xFF8
 25470                           tblptrh	equ	0xFF7
 25471                           tblptrl	equ	0xFF6
 25472                           tablat	equ	0xFF5
 25473                           prodh	equ	0xFF4
 25474                           prodl	equ	0xFF3
 25475                           intcon	equ	0xFF2
 25476                           postinc0	equ	0xFEE
 25477                           wreg	equ	0xFE8
 25478                           indf1	equ	0xFE7
 25479                           postdec1	equ	0xFE5
 25480                           fsr1h	equ	0xFE2
 25481                           fsr1l	equ	0xFE1
 25482                           indf2	equ	0xFDF
 25483                           postinc2	equ	0xFDE
 25484                           postdec2	equ	0xFDD
 25485                           plusw2	equ	0xFDB
 25486                           fsr2h	equ	0xFDA
 25487                           fsr2l	equ	0xFD9
 25488                           status	equ	0xFD8
 25489                           
 25490 ;; *************** function _MXK_DIPSwitch *****************
 25491 ;; Defined at:
 25492 ;;		line 24 in file "Library/MXK.c"
 25493 ;; Parameters:    Size  Location     Type
 25494 ;;		None
 25495 ;; Auto vars:     Size  Location     Type
 25496 ;;		None
 25497 ;; Return value:  Size  Location     Type
 25498 ;;                  1    wreg      unsigned char 
 25499 ;; Registers used:
 25500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25501 ;; Tracked objects:
 25502 ;;		On entry : 0/0
 25503 ;;		On exit  : 0/0
 25504 ;;		Unchanged: 0/0
 25505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25510 ;;Total ram usage:        0 bytes
 25511 ;; Hardware stack levels used:    1
 25512 ;; Hardware stack levels required when called:    8
 25513 ;; This function calls:
 25514 ;;		_Port_GetQuad
 25515 ;; This function is called by:
 25516 ;;		_FunctInitButton
 25517 ;;		_Button_Poll
 25518 ;;		_getMode
 25519 ;; This function uses a non-reentrant model
 25520 ;;
 25521                           
 25522                           	psect	text127
 25523  0164CC                     __ptext127:
 25524                           	opt stack 0
 25525  0164CC                     _MXK_DIPSwitch:
 25526                           	opt stack 19
 25527                           
 25528                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25529                           
 25530                           ;incstack = 0
 25531  0164CC  0E9A               	movlw	low _PortD
 25532  0164CE  0100               	movlb	0	; () banked
 25533  0164D0  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 25534  0164D2  0E03               	movlw	high _PortD
 25535  0164D4  0100               	movlb	0	; () banked
 25536  0164D6  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25537  0164D8  0E00               	movlw	0
 25538  0164DA  0100               	movlb	0	; () banked
 25539  0164DC  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 25540  0164DE  ECE7  F0AD         	call	_Port_GetQuad
 25541  0164E2  0012               	return	
 25542  0164E4                     __end_of_MXK_DIPSwitch:
 25543                           	opt stack 0
 25544                           tosu	equ	0xFFF
 25545                           tosh	equ	0xFFE
 25546                           tosl	equ	0xFFD
 25547                           pclath	equ	0xFFA
 25548                           tblptru	equ	0xFF8
 25549                           tblptrh	equ	0xFF7
 25550                           tblptrl	equ	0xFF6
 25551                           tablat	equ	0xFF5
 25552                           prodh	equ	0xFF4
 25553                           prodl	equ	0xFF3
 25554                           intcon	equ	0xFF2
 25555                           postinc0	equ	0xFEE
 25556                           wreg	equ	0xFE8
 25557                           indf1	equ	0xFE7
 25558                           postdec1	equ	0xFE5
 25559                           fsr1h	equ	0xFE2
 25560                           fsr1l	equ	0xFE1
 25561                           indf2	equ	0xFDF
 25562                           postinc2	equ	0xFDE
 25563                           postdec2	equ	0xFDD
 25564                           plusw2	equ	0xFDB
 25565                           fsr2h	equ	0xFDA
 25566                           fsr2l	equ	0xFD9
 25567                           status	equ	0xFD8
 25568                           
 25569 ;; *************** function _HMI_DIPSwitch *****************
 25570 ;; Defined at:
 25571 ;;		line 47 in file "HMI.c"
 25572 ;; Parameters:    Size  Location     Type
 25573 ;;		None
 25574 ;; Auto vars:     Size  Location     Type
 25575 ;;		None
 25576 ;; Return value:  Size  Location     Type
 25577 ;;                  1    wreg      unsigned char 
 25578 ;; Registers used:
 25579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25580 ;; Tracked objects:
 25581 ;;		On entry : 0/0
 25582 ;;		On exit  : 0/0
 25583 ;;		Unchanged: 0/0
 25584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25589 ;;Total ram usage:        0 bytes
 25590 ;; Hardware stack levels used:    1
 25591 ;; Hardware stack levels required when called:    8
 25592 ;; This function calls:
 25593 ;;		_Port_GetQuad
 25594 ;; This function is called by:
 25595 ;;		_HMI_Init
 25596 ;;		_Button_Poll
 25597 ;;		_getMode
 25598 ;; This function uses a non-reentrant model
 25599 ;;
 25600                           
 25601                           	psect	text128
 25602  0164E4                     __ptext128:
 25603                           	opt stack 0
 25604  0164E4                     _HMI_DIPSwitch:
 25605                           	opt stack 19
 25606                           
 25607                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25608                           
 25609                           ;incstack = 0
 25610  0164E4  0E90               	movlw	low _PortE
 25611  0164E6  0100               	movlb	0	; () banked
 25612  0164E8  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 25613  0164EA  0E03               	movlw	high _PortE
 25614  0164EC  0100               	movlb	0	; () banked
 25615  0164EE  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25616  0164F0  0E00               	movlw	0
 25617  0164F2  0100               	movlb	0	; () banked
 25618  0164F4  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 25619  0164F6  ECE7  F0AD         	call	_Port_GetQuad	;wreg free
 25620  0164FA  0012               	return	
 25621  0164FC                     __end_of_HMI_DIPSwitch:
 25622                           	opt stack 0
 25623                           tosu	equ	0xFFF
 25624                           tosh	equ	0xFFE
 25625                           tosl	equ	0xFFD
 25626                           pclath	equ	0xFFA
 25627                           tblptru	equ	0xFF8
 25628                           tblptrh	equ	0xFF7
 25629                           tblptrl	equ	0xFF6
 25630                           tablat	equ	0xFF5
 25631                           prodh	equ	0xFF4
 25632                           prodl	equ	0xFF3
 25633                           intcon	equ	0xFF2
 25634                           postinc0	equ	0xFEE
 25635                           wreg	equ	0xFE8
 25636                           indf1	equ	0xFE7
 25637                           postdec1	equ	0xFE5
 25638                           fsr1h	equ	0xFE2
 25639                           fsr1l	equ	0xFE1
 25640                           indf2	equ	0xFDF
 25641                           postinc2	equ	0xFDE
 25642                           postdec2	equ	0xFDD
 25643                           plusw2	equ	0xFDB
 25644                           fsr2h	equ	0xFDA
 25645                           fsr2l	equ	0xFD9
 25646                           status	equ	0xFD8
 25647                           
 25648 ;; *************** function _HMI_DownSwitch *****************
 25649 ;; Defined at:
 25650 ;;		line 42 in file "HMI.c"
 25651 ;; Parameters:    Size  Location     Type
 25652 ;;		None
 25653 ;; Auto vars:     Size  Location     Type
 25654 ;;		None
 25655 ;; Return value:  Size  Location     Type
 25656 ;;                  1    wreg      unsigned char 
 25657 ;; Registers used:
 25658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25659 ;; Tracked objects:
 25660 ;;		On entry : 0/0
 25661 ;;		On exit  : 0/0
 25662 ;;		Unchanged: 0/0
 25663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25668 ;;Total ram usage:        0 bytes
 25669 ;; Hardware stack levels used:    1
 25670 ;; Hardware stack levels required when called:    8
 25671 ;; This function calls:
 25672 ;;		_Port_GetPin
 25673 ;; This function is called by:
 25674 ;;		_HMI_Init
 25675 ;;		_Button_Poll
 25676 ;;		_getMode
 25677 ;; This function uses a non-reentrant model
 25678 ;;
 25679                           
 25680                           	psect	text129
 25681  0164FC                     __ptext129:
 25682                           	opt stack 0
 25683  0164FC                     _HMI_DownSwitch:
 25684                           	opt stack 19
 25685                           
 25686                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25687                           
 25688                           ;incstack = 0
 25689  0164FC  0E90               	movlw	low _PortE
 25690  0164FE  0100               	movlb	0	; () banked
 25691  016500  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25692  016502  0E03               	movlw	high _PortE
 25693  016504  0100               	movlb	0	; () banked
 25694  016506  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25695  016508  0E06               	movlw	6
 25696  01650A  0100               	movlb	0	; () banked
 25697  01650C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25698  01650E  ECBE  F0AE         	call	_Port_GetPin	;wreg free
 25699  016512  0012               	return	
 25700  016514                     __end_of_HMI_DownSwitch:
 25701                           	opt stack 0
 25702                           tosu	equ	0xFFF
 25703                           tosh	equ	0xFFE
 25704                           tosl	equ	0xFFD
 25705                           pclath	equ	0xFFA
 25706                           tblptru	equ	0xFF8
 25707                           tblptrh	equ	0xFF7
 25708                           tblptrl	equ	0xFF6
 25709                           tablat	equ	0xFF5
 25710                           prodh	equ	0xFF4
 25711                           prodl	equ	0xFF3
 25712                           intcon	equ	0xFF2
 25713                           postinc0	equ	0xFEE
 25714                           wreg	equ	0xFE8
 25715                           indf1	equ	0xFE7
 25716                           postdec1	equ	0xFE5
 25717                           fsr1h	equ	0xFE2
 25718                           fsr1l	equ	0xFE1
 25719                           indf2	equ	0xFDF
 25720                           postinc2	equ	0xFDE
 25721                           postdec2	equ	0xFDD
 25722                           plusw2	equ	0xFDB
 25723                           fsr2h	equ	0xFDA
 25724                           fsr2l	equ	0xFD9
 25725                           status	equ	0xFD8
 25726                           
 25727 ;; *************** function _HMI_UpSwitch *****************
 25728 ;; Defined at:
 25729 ;;		line 37 in file "HMI.c"
 25730 ;; Parameters:    Size  Location     Type
 25731 ;;		None
 25732 ;; Auto vars:     Size  Location     Type
 25733 ;;		None
 25734 ;; Return value:  Size  Location     Type
 25735 ;;                  1    wreg      unsigned char 
 25736 ;; Registers used:
 25737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25738 ;; Tracked objects:
 25739 ;;		On entry : 0/0
 25740 ;;		On exit  : 0/0
 25741 ;;		Unchanged: 0/0
 25742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25747 ;;Total ram usage:        0 bytes
 25748 ;; Hardware stack levels used:    1
 25749 ;; Hardware stack levels required when called:    8
 25750 ;; This function calls:
 25751 ;;		_Port_GetPin
 25752 ;; This function is called by:
 25753 ;;		_HMI_Init
 25754 ;;		_Button_Poll
 25755 ;;		_getMode
 25756 ;; This function uses a non-reentrant model
 25757 ;;
 25758                           
 25759                           	psect	text130
 25760  016514                     __ptext130:
 25761                           	opt stack 0
 25762  016514                     _HMI_UpSwitch:
 25763                           	opt stack 19
 25764                           
 25765                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25766                           
 25767                           ;incstack = 0
 25768  016514  0E90               	movlw	low _PortE
 25769  016516  0100               	movlb	0	; () banked
 25770  016518  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25771  01651A  0E03               	movlw	high _PortE
 25772  01651C  0100               	movlb	0	; () banked
 25773  01651E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25774  016520  0E07               	movlw	7
 25775  016522  0100               	movlb	0	; () banked
 25776  016524  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25777  016526  ECBE  F0AE         	call	_Port_GetPin	;wreg free
 25778  01652A  0012               	return	
 25779  01652C                     __end_of_HMI_UpSwitch:
 25780                           	opt stack 0
 25781                           tosu	equ	0xFFF
 25782                           tosh	equ	0xFFE
 25783                           tosl	equ	0xFFD
 25784                           pclath	equ	0xFFA
 25785                           tblptru	equ	0xFF8
 25786                           tblptrh	equ	0xFF7
 25787                           tblptrl	equ	0xFF6
 25788                           tablat	equ	0xFF5
 25789                           prodh	equ	0xFF4
 25790                           prodl	equ	0xFF3
 25791                           intcon	equ	0xFF2
 25792                           postinc0	equ	0xFEE
 25793                           wreg	equ	0xFE8
 25794                           indf1	equ	0xFE7
 25795                           postdec1	equ	0xFE5
 25796                           fsr1h	equ	0xFE2
 25797                           fsr1l	equ	0xFE1
 25798                           indf2	equ	0xFDF
 25799                           postinc2	equ	0xFDE
 25800                           postdec2	equ	0xFDD
 25801                           plusw2	equ	0xFDB
 25802                           fsr2h	equ	0xFDA
 25803                           fsr2l	equ	0xFD9
 25804                           status	equ	0xFD8
 25805                           
 25806 ;; *************** function _HMI_RightSwitch *****************
 25807 ;; Defined at:
 25808 ;;		line 32 in file "HMI.c"
 25809 ;; Parameters:    Size  Location     Type
 25810 ;;		None
 25811 ;; Auto vars:     Size  Location     Type
 25812 ;;		None
 25813 ;; Return value:  Size  Location     Type
 25814 ;;                  1    wreg      unsigned char 
 25815 ;; Registers used:
 25816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25817 ;; Tracked objects:
 25818 ;;		On entry : 0/0
 25819 ;;		On exit  : 0/0
 25820 ;;		Unchanged: 0/0
 25821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25826 ;;Total ram usage:        0 bytes
 25827 ;; Hardware stack levels used:    1
 25828 ;; Hardware stack levels required when called:    8
 25829 ;; This function calls:
 25830 ;;		_Port_GetPin
 25831 ;; This function is called by:
 25832 ;;		_HMI_Init
 25833 ;;		_Button_Poll
 25834 ;;		_getMode
 25835 ;; This function uses a non-reentrant model
 25836 ;;
 25837                           
 25838                           	psect	text131
 25839  01652C                     __ptext131:
 25840                           	opt stack 0
 25841  01652C                     _HMI_RightSwitch:
 25842                           	opt stack 19
 25843                           
 25844                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 25845                           
 25846                           ;incstack = 0
 25847  01652C  0E90               	movlw	low _PortE
 25848  01652E  0100               	movlb	0	; () banked
 25849  016530  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25850  016532  0E03               	movlw	high _PortE
 25851  016534  0100               	movlb	0	; () banked
 25852  016536  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25853  016538  0E04               	movlw	4
 25854  01653A  0100               	movlb	0	; () banked
 25855  01653C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25856  01653E  ECBE  F0AE         	call	_Port_GetPin	;wreg free
 25857  016542  0012               	return	
 25858  016544                     __end_of_HMI_RightSwitch:
 25859                           	opt stack 0
 25860                           tosu	equ	0xFFF
 25861                           tosh	equ	0xFFE
 25862                           tosl	equ	0xFFD
 25863                           pclath	equ	0xFFA
 25864                           tblptru	equ	0xFF8
 25865                           tblptrh	equ	0xFF7
 25866                           tblptrl	equ	0xFF6
 25867                           tablat	equ	0xFF5
 25868                           prodh	equ	0xFF4
 25869                           prodl	equ	0xFF3
 25870                           intcon	equ	0xFF2
 25871                           postinc0	equ	0xFEE
 25872                           wreg	equ	0xFE8
 25873                           indf1	equ	0xFE7
 25874                           postdec1	equ	0xFE5
 25875                           fsr1h	equ	0xFE2
 25876                           fsr1l	equ	0xFE1
 25877                           indf2	equ	0xFDF
 25878                           postinc2	equ	0xFDE
 25879                           postdec2	equ	0xFDD
 25880                           plusw2	equ	0xFDB
 25881                           fsr2h	equ	0xFDA
 25882                           fsr2l	equ	0xFD9
 25883                           status	equ	0xFD8
 25884                           
 25885 ;; *************** function _HMI_LeftSwitch *****************
 25886 ;; Defined at:
 25887 ;;		line 27 in file "HMI.c"
 25888 ;; Parameters:    Size  Location     Type
 25889 ;;		None
 25890 ;; Auto vars:     Size  Location     Type
 25891 ;;		None
 25892 ;; Return value:  Size  Location     Type
 25893 ;;                  1    wreg      unsigned char 
 25894 ;; Registers used:
 25895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25896 ;; Tracked objects:
 25897 ;;		On entry : 0/0
 25898 ;;		On exit  : 0/0
 25899 ;;		Unchanged: 0/0
 25900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25905 ;;Total ram usage:        0 bytes
 25906 ;; Hardware stack levels used:    1
 25907 ;; Hardware stack levels required when called:    8
 25908 ;; This function calls:
 25909 ;;		_Port_GetPin
 25910 ;; This function is called by:
 25911 ;;		_HMI_Init
 25912 ;;		_Button_Poll
 25913 ;;		_getMode
 25914 ;; This function uses a non-reentrant model
 25915 ;;
 25916                           
 25917                           	psect	text132
 25918  016544                     __ptext132:
 25919                           	opt stack 0
 25920  016544                     _HMI_LeftSwitch:
 25921                           	opt stack 19
 25922                           
 25923                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 25924                           
 25925                           ;incstack = 0
 25926  016544  0E90               	movlw	low _PortE
 25927  016546  0100               	movlb	0	; () banked
 25928  016548  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25929  01654A  0E03               	movlw	high _PortE
 25930  01654C  0100               	movlb	0	; () banked
 25931  01654E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25932  016550  0E05               	movlw	5
 25933  016552  0100               	movlb	0	; () banked
 25934  016554  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25935  016556  ECBE  F0AE         	call	_Port_GetPin	;wreg free
 25936  01655A  0012               	return	
 25937  01655C                     __end_of_HMI_LeftSwitch:
 25938                           	opt stack 0
 25939                           tosu	equ	0xFFF
 25940                           tosh	equ	0xFFE
 25941                           tosl	equ	0xFFD
 25942                           pclath	equ	0xFFA
 25943                           tblptru	equ	0xFF8
 25944                           tblptrh	equ	0xFF7
 25945                           tblptrl	equ	0xFF6
 25946                           tablat	equ	0xFF5
 25947                           prodh	equ	0xFF4
 25948                           prodl	equ	0xFF3
 25949                           intcon	equ	0xFF2
 25950                           postinc0	equ	0xFEE
 25951                           wreg	equ	0xFE8
 25952                           indf1	equ	0xFE7
 25953                           postdec1	equ	0xFE5
 25954                           fsr1h	equ	0xFE2
 25955                           fsr1l	equ	0xFE1
 25956                           indf2	equ	0xFDF
 25957                           postinc2	equ	0xFDE
 25958                           postdec2	equ	0xFDD
 25959                           plusw2	equ	0xFDB
 25960                           fsr2h	equ	0xFDA
 25961                           fsr2l	equ	0xFD9
 25962                           status	equ	0xFD8
 25963                           
 25964 ;; *************** function _MXK_TestButton *****************
 25965 ;; Defined at:
 25966 ;;		line 14 in file "Library/MXK.c"
 25967 ;; Parameters:    Size  Location     Type
 25968 ;;		None
 25969 ;; Auto vars:     Size  Location     Type
 25970 ;;		None
 25971 ;; Return value:  Size  Location     Type
 25972 ;;                  1    wreg      unsigned char 
 25973 ;; Registers used:
 25974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25975 ;; Tracked objects:
 25976 ;;		On entry : 0/0
 25977 ;;		On exit  : 0/0
 25978 ;;		Unchanged: 0/0
 25979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25984 ;;Total ram usage:        0 bytes
 25985 ;; Hardware stack levels used:    1
 25986 ;; Hardware stack levels required when called:    8
 25987 ;; This function calls:
 25988 ;;		_Port_GetPin
 25989 ;; This function is called by:
 25990 ;;		_FunctInitButton
 25991 ;;		_Button_Poll
 25992 ;;		_getMode
 25993 ;; This function uses a non-reentrant model
 25994 ;;
 25995                           
 25996                           	psect	text133
 25997  01655C                     __ptext133:
 25998                           	opt stack 0
 25999  01655C                     _MXK_TestButton:
 26000                           	opt stack 19
 26001                           
 26002                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26003                           
 26004                           ;incstack = 0
 26005  01655C  0EA4               	movlw	low _PortB
 26006  01655E  0100               	movlb	0	; () banked
 26007  016560  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 26008  016562  0E03               	movlw	high _PortB
 26009  016564  0100               	movlb	0	; () banked
 26010  016566  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26011  016568  0E04               	movlw	4
 26012  01656A  0100               	movlb	0	; () banked
 26013  01656C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 26014  01656E  ECBE  F0AE         	call	_Port_GetPin	;wreg free
 26015  016572  0012               	return	
 26016  016574                     __end_of_MXK_TestButton:
 26017                           	opt stack 0
 26018                           tosu	equ	0xFFF
 26019                           tosh	equ	0xFFE
 26020                           tosl	equ	0xFFD
 26021                           pclath	equ	0xFFA
 26022                           tblptru	equ	0xFF8
 26023                           tblptrh	equ	0xFF7
 26024                           tblptrl	equ	0xFF6
 26025                           tablat	equ	0xFF5
 26026                           prodh	equ	0xFF4
 26027                           prodl	equ	0xFF3
 26028                           intcon	equ	0xFF2
 26029                           postinc0	equ	0xFEE
 26030                           wreg	equ	0xFE8
 26031                           indf1	equ	0xFE7
 26032                           postdec1	equ	0xFE5
 26033                           fsr1h	equ	0xFE2
 26034                           fsr1l	equ	0xFE1
 26035                           indf2	equ	0xFDF
 26036                           postinc2	equ	0xFDE
 26037                           postdec2	equ	0xFDD
 26038                           plusw2	equ	0xFDB
 26039                           fsr2h	equ	0xFDA
 26040                           fsr2l	equ	0xFD9
 26041                           status	equ	0xFD8
 26042                           
 26043 ;; *************** function _Port_GetQuad *****************
 26044 ;; Defined at:
 26045 ;;		line 498 in file "Library/Port.c"
 26046 ;; Parameters:    Size  Location     Type
 26047 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26048 ;;		 -> PortE(10), PortD(10), 
 26049 ;;  pQuad           1    2[BANK0 ] enum E6776
 26050 ;; Auto vars:     Size  Location     Type
 26051 ;;  Output          1    5[BANK0 ] unsigned char 
 26052 ;; Return value:  Size  Location     Type
 26053 ;;                  1    wreg      unsigned char 
 26054 ;; Registers used:
 26055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26056 ;; Tracked objects:
 26057 ;;		On entry : 0/0
 26058 ;;		On exit  : 0/0
 26059 ;;		Unchanged: 0/0
 26060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26061 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26064 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26065 ;;Total ram usage:        6 bytes
 26066 ;; Hardware stack levels used:    1
 26067 ;; Hardware stack levels required when called:    7
 26068 ;; This function calls:
 26069 ;;		Nothing
 26070 ;; This function is called by:
 26071 ;;		_HMI_DIPSwitch
 26072 ;;		_MXK_DIPSwitch
 26073 ;;		_Port_ToggleQuad
 26074 ;; This function uses a non-reentrant model
 26075 ;;
 26076                           
 26077                           	psect	text134
 26078  015BCE                     __ptext134:
 26079                           	opt stack 0
 26080  015BCE                     _Port_GetQuad:
 26081                           	opt stack 19
 26082                           
 26083                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26084                           
 26085                           ;incstack = 0
 26086  015BCE  0100               	movlb	0	; () banked
 26087  015BD0  EE20 F006          	lfsr	2,6
 26088  015BD4  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 26089  015BD6  26D9               	addwf	fsr2l,f,c
 26090  015BD8  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26091  015BDA  22DA               	addwfc	fsr2h,f,c
 26092  015BDC  CFDE F063          	movff	postinc2,??_Port_GetQuad
 26093  015BE0  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 26094  015BE4  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 26095  015BE8  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26096  015BEC  50DF               	movf	indf2,w,c
 26097  015BEE  0100               	movlb	0	; () banked
 26098  015BF0  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 26099                           
 26100                           ; BSR set to: 0
 26101                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26102  015BF2  0100               	movlb	0	; () banked
 26103  015BF4  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26104  015BF6  0D04               	mullw	4
 26105  015BF8  28F3               	incf	prodl,w,c
 26106  015BFA  0100               	movlb	0	; () banked
 26107  015BFC  6F63               	movwf	??_Port_GetQuad& (0+255),b
 26108  015BFE  D003               	goto	u9400
 26109  015C00                     u9405:
 26110  015C00  0100               	movlb	0	; () banked
 26111  015C02  90D8               	bcf	status,0,c
 26112  015C04  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26113  015C06                     u9400:
 26114  015C06  0100               	movlb	0	; () banked
 26115  015C08  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 26116  015C0A  D7FA               	goto	u9405
 26117                           
 26118                           ;Port.c: 502: Output &= 0xF;
 26119  015C0C  0E0F               	movlw	15
 26120  015C0E  0100               	movlb	0	; () banked
 26121  015C10  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 26122                           
 26123                           ; BSR set to: 0
 26124                           ;Port.c: 503: return Output;
 26125  015C12  0100               	movlb	0	; () banked
 26126  015C14  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 26127  015C16  0012               	return	
 26128  015C18                     __end_of_Port_GetQuad:
 26129                           	opt stack 0
 26130                           tosu	equ	0xFFF
 26131                           tosh	equ	0xFFE
 26132                           tosl	equ	0xFFD
 26133                           pclath	equ	0xFFA
 26134                           tblptru	equ	0xFF8
 26135                           tblptrh	equ	0xFF7
 26136                           tblptrl	equ	0xFF6
 26137                           tablat	equ	0xFF5
 26138                           prodh	equ	0xFF4
 26139                           prodl	equ	0xFF3
 26140                           intcon	equ	0xFF2
 26141                           postinc0	equ	0xFEE
 26142                           wreg	equ	0xFE8
 26143                           indf1	equ	0xFE7
 26144                           postdec1	equ	0xFE5
 26145                           fsr1h	equ	0xFE2
 26146                           fsr1l	equ	0xFE1
 26147                           indf2	equ	0xFDF
 26148                           postinc2	equ	0xFDE
 26149                           postdec2	equ	0xFDD
 26150                           plusw2	equ	0xFDB
 26151                           fsr2h	equ	0xFDA
 26152                           fsr2l	equ	0xFD9
 26153                           status	equ	0xFD8
 26154                           
 26155 ;; *************** function _Event_DIPSwitch *****************
 26156 ;; Defined at:
 26157 ;;		line 22 in file "Events.c"
 26158 ;; Parameters:    Size  Location     Type
 26159 ;;  pState          1    wreg     unsigned char 
 26160 ;; Auto vars:     Size  Location     Type
 26161 ;;  pState          1   25[BANK0 ] unsigned char 
 26162 ;;  Bar             1   26[BANK0 ] unsigned char 
 26163 ;; Return value:  Size  Location     Type
 26164 ;;                  1    wreg      void 
 26165 ;; Registers used:
 26166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26167 ;; Tracked objects:
 26168 ;;		On entry : 0/0
 26169 ;;		On exit  : 0/0
 26170 ;;		Unchanged: 0/0
 26171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26176 ;;Total ram usage:        2 bytes
 26177 ;; Hardware stack levels used:    1
 26178 ;; Hardware stack levels required when called:   13
 26179 ;; This function calls:
 26180 ;;		_HMI_GetBar
 26181 ;;		_HMI_SetBar
 26182 ;;		_LED_Toggle
 26183 ;; This function is called by:
 26184 ;;		_FunctInitButton
 26185 ;;		_Button_Poll
 26186 ;; This function uses a non-reentrant model
 26187 ;;
 26188                           
 26189                           	psect	text135
 26190  0161D2                     __ptext135:
 26191                           	opt stack 0
 26192  0161D2                     _Event_DIPSwitch:
 26193                           	opt stack 14
 26194                           
 26195                           ; BSR set to: 0
 26196                           ;incstack = 0
 26197                           ;Event_DIPSwitch@pState stored from wreg
 26198  0161D2  0100               	movlb	0	; () banked
 26199  0161D4  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 26200                           
 26201                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26202  0161D6  EC5C  F0B3         	call	_HMI_GetBar	;wreg free
 26203  0161DA  0100               	movlb	0	; () banked
 26204  0161DC  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26205                           
 26206                           ; BSR set to: 0
 26207                           ;Events.c: 25: Bar &= 0x0F;
 26208  0161DE  0E0F               	movlw	15
 26209  0161E0  0100               	movlb	0	; () banked
 26210  0161E2  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26211                           
 26212                           ; BSR set to: 0
 26213                           ;Events.c: 26: pState <<= 4;
 26214  0161E4  0100               	movlb	0	; () banked
 26215  0161E6  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26216  0161E8  0EF0               	movlw	240
 26217  0161EA  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26218                           
 26219                           ; BSR set to: 0
 26220                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26221  0161EC  0100               	movlb	0	; () banked
 26222  0161EE  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26223  0161F0  0100               	movlb	0	; () banked
 26224  0161F2  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26225  0161F4  EC3E  F0B3         	call	_HMI_SetBar
 26226                           
 26227                           ;Events.c: 32: LED_Toggle(eLED1);
 26228  0161F8  0E00               	movlw	0
 26229  0161FA  EC54  F0AE         	call	_LED_Toggle
 26230  0161FE  0012               	return		;funcret
 26231  016200                     __end_of_Event_DIPSwitch:
 26232                           	opt stack 0
 26233                           tosu	equ	0xFFF
 26234                           tosh	equ	0xFFE
 26235                           tosl	equ	0xFFD
 26236                           pclath	equ	0xFFA
 26237                           tblptru	equ	0xFF8
 26238                           tblptrh	equ	0xFF7
 26239                           tblptrl	equ	0xFF6
 26240                           tablat	equ	0xFF5
 26241                           prodh	equ	0xFF4
 26242                           prodl	equ	0xFF3
 26243                           intcon	equ	0xFF2
 26244                           postinc0	equ	0xFEE
 26245                           wreg	equ	0xFE8
 26246                           indf1	equ	0xFE7
 26247                           postdec1	equ	0xFE5
 26248                           fsr1h	equ	0xFE2
 26249                           fsr1l	equ	0xFE1
 26250                           indf2	equ	0xFDF
 26251                           postinc2	equ	0xFDE
 26252                           postdec2	equ	0xFDD
 26253                           plusw2	equ	0xFDB
 26254                           fsr2h	equ	0xFDA
 26255                           fsr2l	equ	0xFD9
 26256                           status	equ	0xFD8
 26257                           
 26258 ;; *************** function _Event_NULL *****************
 26259 ;; Defined at:
 26260 ;;		line 9 in file "Events.c"
 26261 ;; Parameters:    Size  Location     Type
 26262 ;;  pState          1    wreg     unsigned char 
 26263 ;; Auto vars:     Size  Location     Type
 26264 ;;  pState          1    0[COMRAM] unsigned char 
 26265 ;; Return value:  Size  Location     Type
 26266 ;;                  1    wreg      void 
 26267 ;; Registers used:
 26268 ;;		wreg
 26269 ;; Tracked objects:
 26270 ;;		On entry : 0/0
 26271 ;;		On exit  : 0/0
 26272 ;;		Unchanged: 0/0
 26273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26278 ;;Total ram usage:        0 bytes
 26279 ;; Hardware stack levels used:    1
 26280 ;; Hardware stack levels required when called:    7
 26281 ;; This function calls:
 26282 ;;		Nothing
 26283 ;; This function is called by:
 26284 ;;		_HMI_Init
 26285 ;;		_Button_Poll
 26286 ;; This function uses a non-reentrant model
 26287 ;;
 26288                           
 26289                           	psect	text136
 26290  001404                     __ptext136:
 26291                           	opt stack 0
 26292  001404                     _Event_NULL:
 26293                           	opt stack 20
 26294                           
 26295                           ;incstack = 0
 26296  001404  0012               	return		;funcret
 26297  001406                     __end_of_Event_NULL:
 26298                           	opt stack 0
 26299                           tosu	equ	0xFFF
 26300                           tosh	equ	0xFFE
 26301                           tosl	equ	0xFFD
 26302                           pclath	equ	0xFFA
 26303                           tblptru	equ	0xFF8
 26304                           tblptrh	equ	0xFF7
 26305                           tblptrl	equ	0xFF6
 26306                           tablat	equ	0xFF5
 26307                           prodh	equ	0xFF4
 26308                           prodl	equ	0xFF3
 26309                           intcon	equ	0xFF2
 26310                           postinc0	equ	0xFEE
 26311                           wreg	equ	0xFE8
 26312                           indf1	equ	0xFE7
 26313                           postdec1	equ	0xFE5
 26314                           fsr1h	equ	0xFE2
 26315                           fsr1l	equ	0xFE1
 26316                           indf2	equ	0xFDF
 26317                           postinc2	equ	0xFDE
 26318                           postdec2	equ	0xFDD
 26319                           plusw2	equ	0xFDB
 26320                           fsr2h	equ	0xFDA
 26321                           fsr2l	equ	0xFD9
 26322                           status	equ	0xFD8
 26323                           
 26324 ;; *************** function _Event_TestButton *****************
 26325 ;; Defined at:
 26326 ;;		line 52 in file "Events.c"
 26327 ;; Parameters:    Size  Location     Type
 26328 ;;  pState          1    wreg     unsigned char 
 26329 ;; Auto vars:     Size  Location     Type
 26330 ;;  pState          1   25[BANK0 ] unsigned char 
 26331 ;; Return value:  Size  Location     Type
 26332 ;;                  1    wreg      void 
 26333 ;; Registers used:
 26334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26335 ;; Tracked objects:
 26336 ;;		On entry : 0/0
 26337 ;;		On exit  : 0/0
 26338 ;;		Unchanged: 0/0
 26339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26344 ;;Total ram usage:        1 bytes
 26345 ;; Hardware stack levels used:    1
 26346 ;; Hardware stack levels required when called:   13
 26347 ;; This function calls:
 26348 ;;		_HMI_SetButton
 26349 ;;		_HMI_SetNumber
 26350 ;;		_LED_Toggle
 26351 ;; This function is called by:
 26352 ;;		_FunctInitButton
 26353 ;;		_Button_Poll
 26354 ;; This function uses a non-reentrant model
 26355 ;;
 26356                           
 26357                           	psect	text137
 26358  015FC0                     __ptext137:
 26359                           	opt stack 0
 26360  015FC0                     _Event_TestButton:
 26361                           	opt stack 14
 26362                           
 26363                           ;incstack = 0
 26364                           ;Event_TestButton@pState stored from wreg
 26365  015FC0  0100               	movlb	0	; () banked
 26366  015FC2  6F79               	movwf	Event_TestButton@pState& (0+255),b
 26367                           
 26368                           ;Events.c: 56: static UINT8 j = 0;
 26369                           ;Events.c: 60: if (pState == 0)
 26370  015FC4  0100               	movlb	0	; () banked
 26371  015FC6  5179               	movf	Event_TestButton@pState& (0+255),w,b
 26372  015FC8  0100               	movlb	0	; () banked
 26373  015FCA  A4D8               	btfss	status,2,c
 26374  015FCC  D013               	goto	l1873
 26375                           
 26376                           ; BSR set to: 0
 26377                           ;Events.c: 61: {
 26378                           ;Events.c: 62: j++;
 26379  015FCE  0100               	movlb	0	; () banked
 26380  015FD0  2BE2               	incf	Event_TestButton@j& (0+255),f,b
 26381                           
 26382                           ; BSR set to: 0
 26383                           ;Events.c: 63: val += j;
 26384  015FD2  0100               	movlb	0	; () banked
 26385  015FD4  51E2               	movf	Event_TestButton@j& (0+255),w,b
 26386  015FD6  0100               	movlb	0	; () banked
 26387  015FD8  27D6               	addwf	_val& (0+255),f,b
 26388  015FDA  0E00               	movlw	0
 26389  015FDC  23D7               	addwfc	(_val+1)& (0+255),f,b
 26390                           
 26391                           ; BSR set to: 0
 26392                           ;Events.c: 64: HMI_SetNumber( val );
 26393  015FDE  C0D6  F076         	movff	_val,HMI_SetNumber@pInput
 26394  015FE2  C0D7  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 26395  015FE6  EC2C  F0B1         	call	_HMI_SetNumber	;wreg free
 26396                           
 26397                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26398  015FEA  0100               	movlb	0	; () banked
 26399  015FEC  51E2               	movf	Event_TestButton@j& (0+255),w,b
 26400  015FEE  0B03               	andlw	3
 26401  015FF0  EC5B  F0A6         	call	_HMI_SetButton
 26402  015FF4                     l1873:
 26403                           
 26404                           ;Events.c: 68: }
 26405                           ;Events.c: 72: LED_Toggle(eLED1);
 26406  015FF4  0E00               	movlw	0
 26407  015FF6  EC54  F0AE         	call	_LED_Toggle
 26408  015FFA  0012               	return		;funcret
 26409  015FFC                     __end_of_Event_TestButton:
 26410                           	opt stack 0
 26411                           tosu	equ	0xFFF
 26412                           tosh	equ	0xFFE
 26413                           tosl	equ	0xFFD
 26414                           pclath	equ	0xFFA
 26415                           tblptru	equ	0xFF8
 26416                           tblptrh	equ	0xFF7
 26417                           tblptrl	equ	0xFF6
 26418                           tablat	equ	0xFF5
 26419                           prodh	equ	0xFF4
 26420                           prodl	equ	0xFF3
 26421                           intcon	equ	0xFF2
 26422                           postinc0	equ	0xFEE
 26423                           wreg	equ	0xFE8
 26424                           indf1	equ	0xFE7
 26425                           postdec1	equ	0xFE5
 26426                           fsr1h	equ	0xFE2
 26427                           fsr1l	equ	0xFE1
 26428                           indf2	equ	0xFDF
 26429                           postinc2	equ	0xFDE
 26430                           postdec2	equ	0xFDD
 26431                           plusw2	equ	0xFDB
 26432                           fsr2h	equ	0xFDA
 26433                           fsr2l	equ	0xFD9
 26434                           status	equ	0xFD8
 26435                           
 26436 ;; *************** function _HMI_SetNumber *****************
 26437 ;; Defined at:
 26438 ;;		line 221 in file "HMI.c"
 26439 ;; Parameters:    Size  Location     Type
 26440 ;;  pInput          2   22[BANK0 ] int 
 26441 ;; Auto vars:     Size  Location     Type
 26442 ;;		None
 26443 ;; Return value:  Size  Location     Type
 26444 ;;                  1    wreg      void 
 26445 ;; Registers used:
 26446 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26447 ;; Tracked objects:
 26448 ;;		On entry : 0/0
 26449 ;;		On exit  : 0/0
 26450 ;;		Unchanged: 0/0
 26451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26455 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26456 ;;Total ram usage:        2 bytes
 26457 ;; Hardware stack levels used:    1
 26458 ;; Hardware stack levels required when called:    9
 26459 ;; This function calls:
 26460 ;;		_HMI_SetSegments
 26461 ;;		_itos
 26462 ;; This function is called by:
 26463 ;;		_Event_TestButton
 26464 ;;		_mode1
 26465 ;;		_mode4
 26466 ;;		_Event_HMI_UpButton
 26467 ;;		_Event_HMI_DownButton
 26468 ;; This function uses a non-reentrant model
 26469 ;;
 26470                           
 26471                           	psect	text138
 26472  016258                     __ptext138:
 26473                           	opt stack 0
 26474  016258                     _HMI_SetNumber:
 26475                           	opt stack 20
 26476                           
 26477                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26478                           
 26479                           ;incstack = 0
 26480  016258  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26481  01625C  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26482  016260  0E22               	movlw	low _HMIBoard
 26483  016262  0100               	movlb	0	; () banked
 26484  016264  6F6E               	movwf	itos@destination& (0+255),b
 26485  016266  0E03               	movlw	high _HMIBoard
 26486  016268  0100               	movlb	0	; () banked
 26487  01626A  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26488  01626C  ECE3  F09D         	call	_itos	;wreg free
 26489                           
 26490                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26491  016270  0E22               	movlw	low _HMIBoard
 26492  016272  0100               	movlb	0	; () banked
 26493  016274  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26494  016276  0E03               	movlw	high _HMIBoard
 26495  016278  0100               	movlb	0	; () banked
 26496  01627A  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26497  01627C  EC6C  F0A1         	call	_HMI_SetSegments	;wreg free
 26498  016280  0012               	return		;funcret
 26499  016282                     __end_of_HMI_SetNumber:
 26500                           	opt stack 0
 26501                           tosu	equ	0xFFF
 26502                           tosh	equ	0xFFE
 26503                           tosl	equ	0xFFD
 26504                           pclath	equ	0xFFA
 26505                           tblptru	equ	0xFF8
 26506                           tblptrh	equ	0xFF7
 26507                           tblptrl	equ	0xFF6
 26508                           tablat	equ	0xFF5
 26509                           prodh	equ	0xFF4
 26510                           prodl	equ	0xFF3
 26511                           intcon	equ	0xFF2
 26512                           postinc0	equ	0xFEE
 26513                           wreg	equ	0xFE8
 26514                           indf1	equ	0xFE7
 26515                           postdec1	equ	0xFE5
 26516                           fsr1h	equ	0xFE2
 26517                           fsr1l	equ	0xFE1
 26518                           indf2	equ	0xFDF
 26519                           postinc2	equ	0xFDE
 26520                           postdec2	equ	0xFDD
 26521                           plusw2	equ	0xFDB
 26522                           fsr2h	equ	0xFDA
 26523                           fsr2l	equ	0xFD9
 26524                           status	equ	0xFD8
 26525                           
 26526 ;; *************** function _itos *****************
 26527 ;; Defined at:
 26528 ;;		line 369 in file "Library/Types.c"
 26529 ;; Parameters:    Size  Location     Type
 26530 ;;  input           2   12[BANK0 ] unsigned short 
 26531 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26532 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26533 ;; Auto vars:     Size  Location     Type
 26534 ;;  Out             2   20[BANK0 ] unsigned short 
 26535 ;;  Length          2   18[BANK0 ] unsigned short 
 26536 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26537 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26538 ;; Return value:  Size  Location     Type
 26539 ;;                  1    wreg      void 
 26540 ;; Registers used:
 26541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26542 ;; Tracked objects:
 26543 ;;		On entry : 0/0
 26544 ;;		On exit  : 0/0
 26545 ;;		Unchanged: 0/0
 26546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26547 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26548 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26550 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26551 ;;Total ram usage:       10 bytes
 26552 ;; Hardware stack levels used:    1
 26553 ;; Hardware stack levels required when called:    8
 26554 ;; This function calls:
 26555 ;;		___lwdiv
 26556 ;;		___lwmod
 26557 ;;		_reverse
 26558 ;; This function is called by:
 26559 ;;		_HMI_SetNumber
 26560 ;; This function uses a non-reentrant model
 26561 ;;
 26562                           
 26563                           	psect	text139
 26564  013BC6                     __ptext139:
 26565                           	opt stack 0
 26566  013BC6                     _itos:
 26567                           	opt stack 20
 26568                           
 26569                           ;Types.c: 371: UINT16 Out = input;
 26570                           
 26571                           ;incstack = 0
 26572  013BC6  C06C  F074         	movff	itos@input,itos@Out
 26573  013BCA  C06D  F075         	movff	itos@input+1,itos@Out+1
 26574                           
 26575                           ;Types.c: 372: UINT16 Length = 0;
 26576  013BCE  0E00               	movlw	0
 26577  013BD0  0100               	movlb	0	; () banked
 26578  013BD2  6F73               	movwf	(itos@Length+1)& (0+255),b
 26579  013BD4  0E00               	movlw	0
 26580  013BD6  6F72               	movwf	itos@Length& (0+255),b
 26581                           
 26582                           ; BSR set to: 0
 26583                           ;Types.c: 373: char *Data = destination;
 26584  013BD8  C06E  F070         	movff	itos@destination,itos@Data
 26585  013BDC  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26586                           
 26587                           ; BSR set to: 0
 26588                           ;Types.c: 374: if(Out == 0)
 26589  013BE0  0100               	movlb	0	; () banked
 26590  013BE2  5174               	movf	itos@Out& (0+255),w,b
 26591  013BE4  0100               	movlb	0	; () banked
 26592  013BE6  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26593  013BE8  A4D8               	btfss	status,2,c
 26594  013BEA  D034               	goto	l929
 26595                           
 26596                           ; BSR set to: 0
 26597                           ;Types.c: 375: {
 26598                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26599  013BEC  C070  FFD9         	movff	itos@Data,fsr2l
 26600  013BF0  C071  FFDA         	movff	itos@Data+1,fsr2h
 26601  013BF4  0E30               	movlw	48
 26602  013BF6  6EDF               	movwf	indf2,c
 26603                           
 26604                           ; BSR set to: 0
 26605                           ;Types.c: 377: Length = 1;
 26606  013BF8  0E00               	movlw	0
 26607  013BFA  0100               	movlb	0	; () banked
 26608  013BFC  6F73               	movwf	(itos@Length+1)& (0+255),b
 26609  013BFE  0E01               	movlw	1
 26610  013C00  6F72               	movwf	itos@Length& (0+255),b
 26611                           
 26612                           ;Types.c: 378: }
 26613  013C02  D040               	goto	l928
 26614  013C04                     
 26615                           ; BSR set to: 0
 26616                           ;Types.c: 382: {
 26617                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26618                           
 26619                           ; BSR set to: 0
 26620  013C04  C074  F067         	movff	itos@Out,___lwmod@dividend
 26621  013C08  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 26622  013C0C  0E00               	movlw	0
 26623  013C0E  0100               	movlb	0	; () banked
 26624  013C10  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 26625  013C12  0E0A               	movlw	10
 26626  013C14  6F69               	movwf	___lwmod@divisor& (0+255),b
 26627  013C16  EC64  F0AC         	call	___lwmod	;wreg free
 26628  013C1A  0100               	movlb	0	; () banked
 26629  013C1C  5167               	movf	?___lwmod& (0+255),w,b
 26630  013C1E  0F30               	addlw	48
 26631  013C20  C070  FFD9         	movff	itos@Data,fsr2l
 26632  013C24  C071  FFDA         	movff	itos@Data+1,fsr2h
 26633  013C28  6EDF               	movwf	indf2,c
 26634                           
 26635                           ; BSR set to: 0
 26636                           ;Types.c: 384: Out /= 10;
 26637  013C2A  C074  F060         	movff	itos@Out,___lwdiv@dividend
 26638  013C2E  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 26639  013C32  0E00               	movlw	0
 26640  013C34  0100               	movlb	0	; () banked
 26641  013C36  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26642  013C38  0E0A               	movlw	10
 26643  013C3A  6F62               	movwf	___lwdiv@divisor& (0+255),b
 26644  013C3C  ECF9  F0A8         	call	___lwdiv	;wreg free
 26645  013C40  C060  F074         	movff	?___lwdiv,itos@Out
 26646  013C44  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 26647                           
 26648                           ;Types.c: 385: Length ++;
 26649  013C48  0100               	movlb	0	; () banked
 26650  013C4A  4B72               	infsnz	itos@Length& (0+255),f,b
 26651  013C4C  2B73               	incf	(itos@Length+1)& (0+255),f,b
 26652                           
 26653                           ; BSR set to: 0
 26654                           ;Types.c: 386: Data++;
 26655  013C4E  0100               	movlb	0	; () banked
 26656  013C50  4B70               	infsnz	itos@Data& (0+255),f,b
 26657  013C52  2B71               	incf	(itos@Data+1)& (0+255),f,b
 26658  013C54                     l929:
 26659                           
 26660                           ; BSR set to: 0
 26661                           
 26662                           ; BSR set to: 0
 26663  013C54  0100               	movlb	0	; () banked
 26664  013C56  5174               	movf	itos@Out& (0+255),w,b
 26665  013C58  0100               	movlb	0	; () banked
 26666  013C5A  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26667  013C5C  B4D8               	btfsc	status,2,c
 26668  013C5E  D008               	goto	u9070
 26669                           
 26670                           ; BSR set to: 0
 26671  013C60  0100               	movlb	0	; () banked
 26672  013C62  5173               	movf	(itos@Length+1)& (0+255),w,b
 26673  013C64  E105               	bnz	l12402
 26674  013C66  0E06               	movlw	6
 26675  013C68  0100               	movlb	0	; () banked
 26676  013C6A  5D72               	subwf	itos@Length& (0+255),w,b
 26677  013C6C  A0D8               	btfss	status,0,c
 26678  013C6E  D7CA               	goto	l930
 26679  013C70                     u9070:
 26680  013C70                     l12402:
 26681                           
 26682                           ; BSR set to: 0
 26683                           ;Types.c: 387: }
 26684                           ;Types.c: 388: reverse(destination, Length);
 26685  013C70  C06E  F060         	movff	itos@destination,reverse@input
 26686  013C74  C06F  F061         	movff	itos@destination+1,reverse@input+1
 26687  013C78  C072  F062         	movff	itos@Length,reverse@length
 26688  013C7C  C073  F063         	movff	itos@Length+1,reverse@length+1
 26689  013C80  ECC6  F0AA         	call	_reverse	;wreg free
 26690  013C84                     l928:
 26691                           
 26692                           ;Types.c: 389: }
 26693                           ;Types.c: 390: destination[Length] = '\0';
 26694  013C84  0100               	movlb	0	; () banked
 26695  013C86  5172               	movf	itos@Length& (0+255),w,b
 26696  013C88  0100               	movlb	0	; () banked
 26697  013C8A  256E               	addwf	itos@destination& (0+255),w,b
 26698  013C8C  6ED9               	movwf	fsr2l,c
 26699  013C8E  0100               	movlb	0	; () banked
 26700  013C90  5173               	movf	(itos@Length+1)& (0+255),w,b
 26701  013C92  0100               	movlb	0	; () banked
 26702  013C94  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 26703  013C96  6EDA               	movwf	fsr2h,c
 26704  013C98  0E00               	movlw	0
 26705  013C9A  6EDF               	movwf	indf2,c
 26706                           
 26707                           ; BSR set to: 0
 26708  013C9C  0012               	return		;funcret
 26709  013C9E                     __end_of_itos:
 26710                           	opt stack 0
 26711                           tosu	equ	0xFFF
 26712                           tosh	equ	0xFFE
 26713                           tosl	equ	0xFFD
 26714                           pclath	equ	0xFFA
 26715                           tblptru	equ	0xFF8
 26716                           tblptrh	equ	0xFF7
 26717                           tblptrl	equ	0xFF6
 26718                           tablat	equ	0xFF5
 26719                           prodh	equ	0xFF4
 26720                           prodl	equ	0xFF3
 26721                           intcon	equ	0xFF2
 26722                           postinc0	equ	0xFEE
 26723                           wreg	equ	0xFE8
 26724                           indf1	equ	0xFE7
 26725                           postdec1	equ	0xFE5
 26726                           fsr1h	equ	0xFE2
 26727                           fsr1l	equ	0xFE1
 26728                           indf2	equ	0xFDF
 26729                           postinc2	equ	0xFDE
 26730                           postdec2	equ	0xFDD
 26731                           plusw2	equ	0xFDB
 26732                           fsr2h	equ	0xFDA
 26733                           fsr2l	equ	0xFD9
 26734                           status	equ	0xFD8
 26735                           
 26736 ;; *************** function _reverse *****************
 26737 ;; Defined at:
 26738 ;;		line 357 in file "Library/Types.c"
 26739 ;; Parameters:    Size  Location     Type
 26740 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26741 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26742 ;;  length          2    2[BANK0 ] unsigned short 
 26743 ;; Auto vars:     Size  Location     Type
 26744 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26745 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26746 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26747 ;; Return value:  Size  Location     Type
 26748 ;;                  1    wreg      void 
 26749 ;; Registers used:
 26750 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26751 ;; Tracked objects:
 26752 ;;		On entry : 0/0
 26753 ;;		On exit  : 0/0
 26754 ;;		Unchanged: 0/0
 26755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26757 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26759 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26760 ;;Total ram usage:        7 bytes
 26761 ;; Hardware stack levels used:    1
 26762 ;; Hardware stack levels required when called:    7
 26763 ;; This function calls:
 26764 ;;		Nothing
 26765 ;; This function is called by:
 26766 ;;		_itos
 26767 ;; This function uses a non-reentrant model
 26768 ;;
 26769                           
 26770                           	psect	text140
 26771  01558C                     __ptext140:
 26772                           	opt stack 0
 26773  01558C                     _reverse:
 26774                           	opt stack 20
 26775                           
 26776                           ;Types.c: 359: char tempVar,
 26777                           ;Types.c: 360: *iterator = input + length;
 26778                           
 26779                           ; BSR set to: 0
 26780                           ;incstack = 0
 26781  01558C  0100               	movlb	0	; () banked
 26782  01558E  5162               	movf	reverse@length& (0+255),w,b
 26783  015590  0100               	movlb	0	; () banked
 26784  015592  2560               	addwf	reverse@input& (0+255),w,b
 26785  015594  0100               	movlb	0	; () banked
 26786  015596  6F65               	movwf	reverse@iterator& (0+255),b
 26787  015598  0100               	movlb	0	; () banked
 26788  01559A  5163               	movf	(reverse@length+1)& (0+255),w,b
 26789  01559C  0100               	movlb	0	; () banked
 26790  01559E  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 26791  0155A0  0100               	movlb	0	; () banked
 26792  0155A2  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 26793                           
 26794                           ;Types.c: 362: while ( --iterator > input )
 26795  0155A4  D01A               	goto	l921
 26796  0155A6                     
 26797                           ; BSR set to: 0
 26798                           ;Types.c: 363: {
 26799                           ;Types.c: 364: tempVar = *input;
 26800                           
 26801                           ; BSR set to: 0
 26802  0155A6  C060  FFD9         	movff	reverse@input,fsr2l
 26803  0155AA  C061  FFDA         	movff	reverse@input+1,fsr2h
 26804  0155AE  50DF               	movf	indf2,w,c
 26805  0155B0  0100               	movlb	0	; () banked
 26806  0155B2  6F64               	movwf	reverse@tempVar& (0+255),b
 26807                           
 26808                           ; BSR set to: 0
 26809                           ;Types.c: 365: *input++=*iterator;
 26810  0155B4  C065  FFD9         	movff	reverse@iterator,fsr2l
 26811  0155B8  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26812  0155BC  C060  FFE1         	movff	reverse@input,fsr1l
 26813  0155C0  C061  FFE2         	movff	reverse@input+1,fsr1h
 26814  0155C4  CFDF FFE7          	movff	indf2,indf1
 26815                           
 26816                           ; BSR set to: 0
 26817  0155C8  0100               	movlb	0	; () banked
 26818  0155CA  4B60               	infsnz	reverse@input& (0+255),f,b
 26819  0155CC  2B61               	incf	(reverse@input+1)& (0+255),f,b
 26820                           
 26821                           ; BSR set to: 0
 26822                           ;Types.c: 366: *iterator=tempVar;
 26823  0155CE  C065  FFD9         	movff	reverse@iterator,fsr2l
 26824  0155D2  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26825  0155D6  C064  FFDF         	movff	reverse@tempVar,indf2
 26826  0155DA                     l921:
 26827                           
 26828                           ; BSR set to: 0
 26829                           
 26830                           ; BSR set to: 0
 26831  0155DA  0100               	movlb	0	; () banked
 26832  0155DC  0765               	decf	reverse@iterator& (0+255),f,b
 26833  0155DE  A0D8               	btfss	status,0,c
 26834  0155E0  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 26835  0155E2  0100               	movlb	0	; () banked
 26836  0155E4  5165               	movf	reverse@iterator& (0+255),w,b
 26837  0155E6  0100               	movlb	0	; () banked
 26838  0155E8  5D60               	subwf	reverse@input& (0+255),w,b
 26839  0155EA  0100               	movlb	0	; () banked
 26840  0155EC  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 26841  0155EE  0100               	movlb	0	; () banked
 26842  0155F0  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 26843  0155F2  B0D8               	btfsc	status,0,c
 26844  0155F4  0012               	return	
 26845  0155F6  D7D7               	goto	l922
 26846  0155F8                     __end_of_reverse:
 26847                           	opt stack 0
 26848                           tosu	equ	0xFFF
 26849                           tosh	equ	0xFFE
 26850                           tosl	equ	0xFFD
 26851                           pclath	equ	0xFFA
 26852                           tblptru	equ	0xFF8
 26853                           tblptrh	equ	0xFF7
 26854                           tblptrl	equ	0xFF6
 26855                           tablat	equ	0xFF5
 26856                           prodh	equ	0xFF4
 26857                           prodl	equ	0xFF3
 26858                           intcon	equ	0xFF2
 26859                           postinc0	equ	0xFEE
 26860                           wreg	equ	0xFE8
 26861                           indf1	equ	0xFE7
 26862                           postdec1	equ	0xFE5
 26863                           fsr1h	equ	0xFE2
 26864                           fsr1l	equ	0xFE1
 26865                           indf2	equ	0xFDF
 26866                           postinc2	equ	0xFDE
 26867                           postdec2	equ	0xFDD
 26868                           plusw2	equ	0xFDB
 26869                           fsr2h	equ	0xFDA
 26870                           fsr2l	equ	0xFD9
 26871                           status	equ	0xFD8
 26872                           
 26873 ;; *************** function ___lwmod *****************
 26874 ;; Defined at:
 26875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 26876 ;; Parameters:    Size  Location     Type
 26877 ;;  dividend        2    7[BANK0 ] unsigned int 
 26878 ;;  divisor         2    9[BANK0 ] unsigned int 
 26879 ;; Auto vars:     Size  Location     Type
 26880 ;;  counter         1   11[BANK0 ] unsigned char 
 26881 ;; Return value:  Size  Location     Type
 26882 ;;                  2    7[BANK0 ] unsigned int 
 26883 ;; Registers used:
 26884 ;;		wreg, status,2, status,0
 26885 ;; Tracked objects:
 26886 ;;		On entry : 0/0
 26887 ;;		On exit  : 0/0
 26888 ;;		Unchanged: 0/0
 26889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26890 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26893 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26894 ;;Total ram usage:        5 bytes
 26895 ;; Hardware stack levels used:    1
 26896 ;; Hardware stack levels required when called:    7
 26897 ;; This function calls:
 26898 ;;		Nothing
 26899 ;; This function is called by:
 26900 ;;		_itos
 26901 ;;		_printf
 26902 ;; This function uses a non-reentrant model
 26903 ;;
 26904                           
 26905                           	psect	text141
 26906  0158C8                     __ptext141:
 26907                           	opt stack 0
 26908  0158C8                     ___lwmod:
 26909                           	opt stack 22
 26910                           
 26911                           ; BSR set to: 0
 26912                           ;incstack = 0
 26913  0158C8  0100               	movlb	0	; () banked
 26914  0158CA  5169               	movf	___lwmod@divisor& (0+255),w,b
 26915  0158CC  0100               	movlb	0	; () banked
 26916  0158CE  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 26917  0158D0  B4D8               	btfsc	status,2,c
 26918  0158D2  D026               	goto	l2863
 26919                           
 26920                           ; BSR set to: 0
 26921  0158D4  0E01               	movlw	1
 26922  0158D6  0100               	movlb	0	; () banked
 26923  0158D8  6F6B               	movwf	___lwmod@counter& (0+255),b
 26924  0158DA  D006               	goto	l2858
 26925  0158DC                     
 26926                           ; BSR set to: 0
 26927                           
 26928                           ; BSR set to: 0
 26929  0158DC  0100               	movlb	0	; () banked
 26930  0158DE  90D8               	bcf	status,0,c
 26931  0158E0  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 26932  0158E2  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 26933  0158E4  0100               	movlb	0	; () banked
 26934  0158E6  2B6B               	incf	___lwmod@counter& (0+255),f,b
 26935  0158E8                     l2858:
 26936                           
 26937                           ; BSR set to: 0
 26938                           
 26939                           ; BSR set to: 0
 26940  0158E8  0100               	movlb	0	; () banked
 26941  0158EA  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 26942  0158EC  D7F7               	goto	l2859
 26943  0158EE                     u8980:
 26944                           
 26945                           ; BSR set to: 0
 26946                           
 26947                           ; BSR set to: 0
 26948                           
 26949                           ; BSR set to: 0
 26950  0158EE  0100               	movlb	0	; () banked
 26951  0158F0  5169               	movf	___lwmod@divisor& (0+255),w,b
 26952  0158F2  0100               	movlb	0	; () banked
 26953  0158F4  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 26954  0158F6  0100               	movlb	0	; () banked
 26955  0158F8  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26956  0158FA  0100               	movlb	0	; () banked
 26957  0158FC  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 26958  0158FE  A0D8               	btfss	status,0,c
 26959  015900  D008               	goto	l2862
 26960                           
 26961                           ; BSR set to: 0
 26962  015902  0100               	movlb	0	; () banked
 26963  015904  5169               	movf	___lwmod@divisor& (0+255),w,b
 26964  015906  0100               	movlb	0	; () banked
 26965  015908  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 26966  01590A  0100               	movlb	0	; () banked
 26967  01590C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26968  01590E  0100               	movlb	0	; () banked
 26969  015910  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 26970  015912                     l2862:
 26971                           
 26972                           ; BSR set to: 0
 26973                           
 26974                           ; BSR set to: 0
 26975  015912  0100               	movlb	0	; () banked
 26976  015914  90D8               	bcf	status,0,c
 26977  015916  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 26978  015918  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 26979                           
 26980                           ; BSR set to: 0
 26981  01591A  0100               	movlb	0	; () banked
 26982  01591C  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 26983  01591E  D7E7               	goto	u8980
 26984  015920                     l2863:
 26985                           
 26986                           ; BSR set to: 0
 26987                           
 26988                           ; BSR set to: 0
 26989  015920  C067  F067         	movff	___lwmod@dividend,?___lwmod
 26990  015924  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 26991                           
 26992                           ; BSR set to: 0
 26993  015928  0012               	return		;funcret
 26994  01592A                     __end_of___lwmod:
 26995                           	opt stack 0
 26996                           tosu	equ	0xFFF
 26997                           tosh	equ	0xFFE
 26998                           tosl	equ	0xFFD
 26999                           pclath	equ	0xFFA
 27000                           tblptru	equ	0xFF8
 27001                           tblptrh	equ	0xFF7
 27002                           tblptrl	equ	0xFF6
 27003                           tablat	equ	0xFF5
 27004                           prodh	equ	0xFF4
 27005                           prodl	equ	0xFF3
 27006                           intcon	equ	0xFF2
 27007                           postinc0	equ	0xFEE
 27008                           wreg	equ	0xFE8
 27009                           indf1	equ	0xFE7
 27010                           postdec1	equ	0xFE5
 27011                           fsr1h	equ	0xFE2
 27012                           fsr1l	equ	0xFE1
 27013                           indf2	equ	0xFDF
 27014                           postinc2	equ	0xFDE
 27015                           postdec2	equ	0xFDD
 27016                           plusw2	equ	0xFDB
 27017                           fsr2h	equ	0xFDA
 27018                           fsr2l	equ	0xFD9
 27019                           status	equ	0xFD8
 27020                           
 27021 ;; *************** function ___lwdiv *****************
 27022 ;; Defined at:
 27023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27024 ;; Parameters:    Size  Location     Type
 27025 ;;  dividend        2    0[BANK0 ] unsigned int 
 27026 ;;  divisor         2    2[BANK0 ] unsigned int 
 27027 ;; Auto vars:     Size  Location     Type
 27028 ;;  quotient        2    5[BANK0 ] unsigned int 
 27029 ;;  counter         1    4[BANK0 ] unsigned char 
 27030 ;; Return value:  Size  Location     Type
 27031 ;;                  2    0[BANK0 ] unsigned int 
 27032 ;; Registers used:
 27033 ;;		wreg, status,2, status,0
 27034 ;; Tracked objects:
 27035 ;;		On entry : 0/0
 27036 ;;		On exit  : 0/0
 27037 ;;		Unchanged: 0/0
 27038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27039 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27040 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27042 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27043 ;;Total ram usage:        7 bytes
 27044 ;; Hardware stack levels used:    1
 27045 ;; Hardware stack levels required when called:    7
 27046 ;; This function calls:
 27047 ;;		Nothing
 27048 ;; This function is called by:
 27049 ;;		_itos
 27050 ;;		_printf
 27051 ;; This function uses a non-reentrant model
 27052 ;;
 27053                           
 27054                           	psect	text142
 27055  0151F2                     __ptext142:
 27056                           	opt stack 0
 27057  0151F2                     ___lwdiv:
 27058                           	opt stack 22
 27059                           
 27060                           ; BSR set to: 0
 27061                           ;incstack = 0
 27062  0151F2  0E00               	movlw	0
 27063  0151F4  0100               	movlb	0	; () banked
 27064  0151F6  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27065  0151F8  0E00               	movlw	0
 27066  0151FA  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27067                           
 27068                           ; BSR set to: 0
 27069  0151FC  0100               	movlb	0	; () banked
 27070  0151FE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27071  015200  0100               	movlb	0	; () banked
 27072  015202  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27073  015204  B4D8               	btfsc	status,2,c
 27074  015206  D02C               	goto	l2853
 27075                           
 27076                           ; BSR set to: 0
 27077  015208  0E01               	movlw	1
 27078  01520A  0100               	movlb	0	; () banked
 27079  01520C  6F64               	movwf	___lwdiv@counter& (0+255),b
 27080  01520E  D006               	goto	l2848
 27081  015210                     
 27082                           ; BSR set to: 0
 27083                           
 27084                           ; BSR set to: 0
 27085  015210  0100               	movlb	0	; () banked
 27086  015212  90D8               	bcf	status,0,c
 27087  015214  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27088  015216  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27089  015218  0100               	movlb	0	; () banked
 27090  01521A  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27091  01521C                     l2848:
 27092                           
 27093                           ; BSR set to: 0
 27094                           
 27095                           ; BSR set to: 0
 27096  01521C  0100               	movlb	0	; () banked
 27097  01521E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27098  015220  D7F7               	goto	l2849
 27099  015222                     u8950:
 27100                           
 27101                           ; BSR set to: 0
 27102                           
 27103                           ; BSR set to: 0
 27104                           
 27105                           ; BSR set to: 0
 27106  015222  0100               	movlb	0	; () banked
 27107  015224  90D8               	bcf	status,0,c
 27108  015226  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27109  015228  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27110                           
 27111                           ; BSR set to: 0
 27112  01522A  0100               	movlb	0	; () banked
 27113  01522C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27114  01522E  0100               	movlb	0	; () banked
 27115  015230  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27116  015232  0100               	movlb	0	; () banked
 27117  015234  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27118  015236  0100               	movlb	0	; () banked
 27119  015238  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27120  01523A  A0D8               	btfss	status,0,c
 27121  01523C  D00A               	goto	l2852
 27122                           
 27123                           ; BSR set to: 0
 27124  01523E  0100               	movlb	0	; () banked
 27125  015240  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27126  015242  0100               	movlb	0	; () banked
 27127  015244  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27128  015246  0100               	movlb	0	; () banked
 27129  015248  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27130  01524A  0100               	movlb	0	; () banked
 27131  01524C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27132                           
 27133                           ; BSR set to: 0
 27134  01524E  0100               	movlb	0	; () banked
 27135  015250  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27136  015252                     l2852:
 27137                           
 27138                           ; BSR set to: 0
 27139                           
 27140                           ; BSR set to: 0
 27141  015252  0100               	movlb	0	; () banked
 27142  015254  90D8               	bcf	status,0,c
 27143  015256  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27144  015258  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27145                           
 27146                           ; BSR set to: 0
 27147  01525A  0100               	movlb	0	; () banked
 27148  01525C  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27149  01525E  D7E1               	goto	u8950
 27150  015260                     l2853:
 27151                           
 27152                           ; BSR set to: 0
 27153                           
 27154                           ; BSR set to: 0
 27155  015260  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27156  015264  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27157                           
 27158                           ; BSR set to: 0
 27159  015268  0012               	return		;funcret
 27160  01526A                     __end_of___lwdiv:
 27161                           	opt stack 0
 27162                           tosu	equ	0xFFF
 27163                           tosh	equ	0xFFE
 27164                           tosl	equ	0xFFD
 27165                           pclath	equ	0xFFA
 27166                           tblptru	equ	0xFF8
 27167                           tblptrh	equ	0xFF7
 27168                           tblptrl	equ	0xFF6
 27169                           tablat	equ	0xFF5
 27170                           prodh	equ	0xFF4
 27171                           prodl	equ	0xFF3
 27172                           intcon	equ	0xFF2
 27173                           postinc0	equ	0xFEE
 27174                           wreg	equ	0xFE8
 27175                           indf1	equ	0xFE7
 27176                           postdec1	equ	0xFE5
 27177                           fsr1h	equ	0xFE2
 27178                           fsr1l	equ	0xFE1
 27179                           indf2	equ	0xFDF
 27180                           postinc2	equ	0xFDE
 27181                           postdec2	equ	0xFDD
 27182                           plusw2	equ	0xFDB
 27183                           fsr2h	equ	0xFDA
 27184                           fsr2l	equ	0xFD9
 27185                           status	equ	0xFD8
 27186                           
 27187 ;; *************** function _HMI_SetSegments *****************
 27188 ;; Defined at:
 27189 ;;		line 226 in file "HMI.c"
 27190 ;; Parameters:    Size  Location     Type
 27191 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27192 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27193 ;; Auto vars:     Size  Location     Type
 27194 ;;  in              2    4[BANK0 ] unsigned short 
 27195 ;; Return value:  Size  Location     Type
 27196 ;;                  1    wreg      void 
 27197 ;; Registers used:
 27198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27199 ;; Tracked objects:
 27200 ;;		On entry : 0/0
 27201 ;;		On exit  : 0/0
 27202 ;;		Unchanged: 0/0
 27203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27204 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27205 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27207 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27208 ;;Total ram usage:        5 bytes
 27209 ;; Hardware stack levels used:    1
 27210 ;; Hardware stack levels required when called:    8
 27211 ;; This function calls:
 27212 ;;		_ToSegment
 27213 ;; This function is called by:
 27214 ;;		_HMI_SetNumber
 27215 ;; This function uses a non-reentrant model
 27216 ;;
 27217                           
 27218                           	psect	text143
 27219  0142D8                     __ptext143:
 27220                           	opt stack 0
 27221  0142D8                     _HMI_SetSegments:
 27222                           	opt stack 20
 27223                           
 27224                           ;HMI.c: 228: UINT16 in=0;
 27225                           
 27226                           ; BSR set to: 0
 27227                           ;incstack = 0
 27228  0142D8  0E00               	movlw	0
 27229  0142DA  0100               	movlb	0	; () banked
 27230  0142DC  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27231  0142DE  0E00               	movlw	0
 27232  0142E0  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27233                           
 27234                           ;HMI.c: 229: while(*pString)
 27235  0142E2  D038               	goto	l1202
 27236  0142E4                     
 27237                           ; BSR set to: 0
 27238                           ;HMI.c: 230: {
 27239                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27240                           
 27241                           ; BSR set to: 0
 27242  0142E4  0E22               	movlw	low _HMIBoard
 27243  0142E6  0100               	movlb	0	; () banked
 27244  0142E8  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27245  0142EA  6ED9               	movwf	fsr2l,c
 27246  0142EC  0E03               	movlw	high _HMIBoard
 27247  0142EE  0100               	movlb	0	; () banked
 27248  0142F0  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27249  0142F2  6EDA               	movwf	fsr2h,c
 27250  0142F4  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27251  0142F8  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27252  0142FC  50E7               	movf	indf1,w,c
 27253  0142FE  EC43  F08C         	call	_ToSegment
 27254  014302  6EDF               	movwf	indf2,c
 27255                           
 27256                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27257  014304  0E22               	movlw	low _HMIBoard
 27258  014306  0100               	movlb	0	; () banked
 27259  014308  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27260  01430A  6ED9               	movwf	fsr2l,c
 27261  01430C  0E03               	movlw	high _HMIBoard
 27262  01430E  0100               	movlb	0	; () banked
 27263  014310  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27264  014312  6EDA               	movwf	fsr2h,c
 27265  014314  0E80               	movlw	128
 27266  014316  18DE               	xorwf	postinc2,w,c
 27267  014318  A4D8               	btfss	status,2,c
 27268  01431A  D00E               	goto	l1201
 27269                           
 27270                           ; BSR set to: 0
 27271                           ;HMI.c: 234: {
 27272                           ;HMI.c: 235: in--;
 27273  01431C  0100               	movlb	0	; () banked
 27274  01431E  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27275  014320  A0D8               	btfss	status,0,c
 27276  014322  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27277                           
 27278                           ; BSR set to: 0
 27279                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27280  014324  0E22               	movlw	low _HMIBoard
 27281  014326  0100               	movlb	0	; () banked
 27282  014328  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27283  01432A  6ED9               	movwf	fsr2l,c
 27284  01432C  0E03               	movlw	high _HMIBoard
 27285  01432E  0100               	movlb	0	; () banked
 27286  014330  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27287  014332  6EDA               	movwf	fsr2h,c
 27288  014334  0E00               	movlw	0
 27289  014336  8EDB               	bsf	plusw2,7,c
 27290  014338                     l1201:
 27291                           
 27292                           ; BSR set to: 0
 27293                           ;HMI.c: 237: }
 27294                           ;HMI.c: 239: pString++;
 27295                           
 27296                           ; BSR set to: 0
 27297  014338  0100               	movlb	0	; () banked
 27298  01433A  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27299  01433C  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27300                           
 27301                           ; BSR set to: 0
 27302                           ;HMI.c: 240: in++;
 27303  01433E  0100               	movlb	0	; () banked
 27304  014340  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27305  014342  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27306                           
 27307                           ; BSR set to: 0
 27308                           ;HMI.c: 241: if (in>=6)
 27309  014344  0100               	movlb	0	; () banked
 27310  014346  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27311  014348  E11A               	bnz	l12454
 27312  01434A  0E06               	movlw	6
 27313  01434C  0100               	movlb	0	; () banked
 27314  01434E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27315  014350  B0D8               	btfsc	status,0,c
 27316  014352  D015               	goto	l1204
 27317  014354                     l1202:
 27318                           
 27319                           ; BSR set to: 0
 27320                           
 27321                           ; BSR set to: 0
 27322                           
 27323                           ; BSR set to: 0
 27324  014354  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27325  014358  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27326  01435C  50DF               	movf	indf2,w,c
 27327  01435E  B4D8               	btfsc	status,2,c
 27328  014360  D00E               	goto	l1204
 27329  014362  D7C0               	goto	l1200
 27330  014364                     
 27331                           ; BSR set to: 0
 27332                           ;HMI.c: 245: {
 27333                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27334                           
 27335                           ; BSR set to: 0
 27336  014364  0E22               	movlw	low _HMIBoard
 27337  014366  0100               	movlb	0	; () banked
 27338  014368  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27339  01436A  6ED9               	movwf	fsr2l,c
 27340  01436C  0E03               	movlw	high _HMIBoard
 27341  01436E  0100               	movlb	0	; () banked
 27342  014370  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27343  014372  6EDA               	movwf	fsr2h,c
 27344  014374  0E00               	movlw	0
 27345  014376  6EDF               	movwf	indf2,c
 27346                           
 27347                           ; BSR set to: 0
 27348                           ;HMI.c: 247: in++;
 27349  014378  0100               	movlb	0	; () banked
 27350  01437A  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27351  01437C  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27352  01437E                     l1204:
 27353  01437E                     l12454:
 27354                           
 27355                           ; BSR set to: 0
 27356  01437E  0100               	movlb	0	; () banked
 27357  014380  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27358  014382  E106               	bnz	l1207
 27359  014384  0E06               	movlw	6
 27360  014386  0100               	movlb	0	; () banked
 27361  014388  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27362  01438A  B0D8               	btfsc	status,0,c
 27363  01438C  0012               	return	
 27364  01438E  D7EA               	goto	l1205
 27365  014390                     l1207:
 27366                           
 27367                           ; BSR set to: 0
 27368  014390  0012               	return		;funcret
 27369  014392                     __end_of_HMI_SetSegments:
 27370                           	opt stack 0
 27371                           tosu	equ	0xFFF
 27372                           tosh	equ	0xFFE
 27373                           tosl	equ	0xFFD
 27374                           pclath	equ	0xFFA
 27375                           tblptru	equ	0xFF8
 27376                           tblptrh	equ	0xFF7
 27377                           tblptrl	equ	0xFF6
 27378                           tablat	equ	0xFF5
 27379                           prodh	equ	0xFF4
 27380                           prodl	equ	0xFF3
 27381                           intcon	equ	0xFF2
 27382                           postinc0	equ	0xFEE
 27383                           wreg	equ	0xFE8
 27384                           indf1	equ	0xFE7
 27385                           postdec1	equ	0xFE5
 27386                           fsr1h	equ	0xFE2
 27387                           fsr1l	equ	0xFE1
 27388                           indf2	equ	0xFDF
 27389                           postinc2	equ	0xFDE
 27390                           postdec2	equ	0xFDD
 27391                           plusw2	equ	0xFDB
 27392                           fsr2h	equ	0xFDA
 27393                           fsr2l	equ	0xFD9
 27394                           status	equ	0xFD8
 27395                           
 27396 ;; *************** function _ToSegment *****************
 27397 ;; Defined at:
 27398 ;;		line 284 in file "Library/Types.c"
 27399 ;; Parameters:    Size  Location     Type
 27400 ;;  pCHR            1    wreg     unsigned char 
 27401 ;; Auto vars:     Size  Location     Type
 27402 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27403 ;; Return value:  Size  Location     Type
 27404 ;;                  1    wreg      unsigned char 
 27405 ;; Registers used:
 27406 ;;		wreg, status,2, status,0
 27407 ;; Tracked objects:
 27408 ;;		On entry : 0/0
 27409 ;;		On exit  : 0/0
 27410 ;;		Unchanged: 0/0
 27411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27415 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27416 ;;Total ram usage:        1 bytes
 27417 ;; Hardware stack levels used:    1
 27418 ;; Hardware stack levels required when called:    7
 27419 ;; This function calls:
 27420 ;;		Nothing
 27421 ;; This function is called by:
 27422 ;;		_HMI_SetSegments
 27423 ;; This function uses a non-reentrant model
 27424 ;;
 27425                           
 27426                           	psect	text144
 27427  011886                     __ptext144:
 27428                           	opt stack 0
 27429  011886                     _ToSegment:
 27430                           	opt stack 20
 27431                           
 27432                           ; BSR set to: 0
 27433                           ;incstack = 0
 27434                           ;ToSegment@pCHR stored from wreg
 27435  011886  0100               	movlb	0	; () banked
 27436  011888  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27437                           
 27438                           ;Types.c: 286: switch(pCHR)
 27439  01188A  D07E               	goto	l853
 27440  01188C  0E3F               	movlw	63
 27441  01188E  0012               	return	
 27442  011890  0E06               	movlw	6
 27443  011892  0012               	return	
 27444  011894  0E5B               	movlw	91
 27445  011896  0012               	return	
 27446  011898  0E4F               	movlw	79
 27447  01189A  0012               	return	
 27448  01189C  0E66               	movlw	102
 27449  01189E  0012               	return	
 27450  0118A0  0E6D               	movlw	109
 27451  0118A2  0012               	return	
 27452  0118A4  0E7D               	movlw	125
 27453  0118A6  0012               	return	
 27454  0118A8  0E07               	movlw	7
 27455  0118AA  0012               	return	
 27456  0118AC  0E7F               	movlw	127
 27457  0118AE  0012               	return	
 27458  0118B0  0E6F               	movlw	111
 27459  0118B2  0012               	return	
 27460  0118B4  0E5F               	movlw	95
 27461  0118B6  0012               	return	
 27462  0118B8  0E7C               	movlw	124
 27463  0118BA  0012               	return	
 27464  0118BC  0E58               	movlw	88
 27465  0118BE  0012               	return	
 27466  0118C0  0E5E               	movlw	94
 27467  0118C2  0012               	return	
 27468  0118C4  0E7B               	movlw	123
 27469  0118C6  0012               	return	
 27470  0118C8  0E71               	movlw	113
 27471  0118CA  0012               	return	
 27472  0118CC  0E6F               	movlw	111
 27473  0118CE  0012               	return	
 27474  0118D0  0E74               	movlw	116
 27475  0118D2  0012               	return	
 27476  0118D4  0E04               	movlw	4
 27477  0118D6  0012               	return	
 27478  0118D8  0E0E               	movlw	14
 27479  0118DA  0012               	return	
 27480  0118DC  0E7A               	movlw	122
 27481  0118DE  0012               	return	
 27482  0118E0  0E06               	movlw	6
 27483  0118E2  0012               	return	
 27484  0118E4  0E14               	movlw	20
 27485  0118E6  0012               	return	
 27486  0118E8  0E54               	movlw	84
 27487  0118EA  0012               	return	
 27488  0118EC  0E5C               	movlw	92
 27489  0118EE  0012               	return	
 27490  0118F0  0E73               	movlw	115
 27491  0118F2  0012               	return	
 27492  0118F4  0E67               	movlw	103
 27493  0118F6  0012               	return	
 27494  0118F8  0E50               	movlw	80
 27495  0118FA  0012               	return	
 27496  0118FC  0E6D               	movlw	109
 27497  0118FE  0012               	return	
 27498  011900  0E78               	movlw	120
 27499  011902  0012               	return	
 27500  011904  0E1C               	movlw	28
 27501  011906  0012               	return	
 27502  011908  0E62               	movlw	98
 27503  01190A  0012               	return	
 27504  01190C  0E2A               	movlw	42
 27505  01190E  0012               	return	
 27506  011910  0E64               	movlw	100
 27507  011912  0012               	return	
 27508  011914  0E6E               	movlw	110
 27509  011916  0012               	return	
 27510  011918  0E5B               	movlw	91
 27511  01191A  0012               	return	
 27512  01191C  0E77               	movlw	119
 27513  01191E  0012               	return	
 27514  011920  0E7F               	movlw	127
 27515  011922  0012               	return	
 27516  011924  0E39               	movlw	57
 27517  011926  0012               	return	
 27518  011928  0E3F               	movlw	63
 27519  01192A  0012               	return	
 27520  01192C  0E79               	movlw	121
 27521  01192E  0012               	return	
 27522  011930  0E71               	movlw	113
 27523  011932  0012               	return	
 27524  011934  0E3D               	movlw	61
 27525  011936  0012               	return	
 27526  011938  0E76               	movlw	118
 27527  01193A  0012               	return	
 27528  01193C  0E06               	movlw	6
 27529  01193E  0012               	return	
 27530  011940  0E1E               	movlw	30
 27531  011942  0012               	return	
 27532  011944  0E57               	movlw	87
 27533  011946  0012               	return	
 27534  011948  0E38               	movlw	56
 27535  01194A  0012               	return	
 27536  01194C  0E76               	movlw	118
 27537  01194E  0012               	return	
 27538  011950  0E76               	movlw	118
 27539  011952  0012               	return	
 27540  011954  0E3F               	movlw	63
 27541  011956  0012               	return	
 27542  011958  0E73               	movlw	115
 27543  01195A  0012               	return	
 27544  01195C  0E3F               	movlw	63
 27545  01195E  0012               	return	
 27546  011960  0E77               	movlw	119
 27547  011962  0012               	return	
 27548  011964  0E6D               	movlw	109
 27549  011966  0012               	return	
 27550  011968  0E31               	movlw	49
 27551  01196A  0012               	return	
 27552  01196C  0E3E               	movlw	62
 27553  01196E  0012               	return	
 27554  011970  0E3E               	movlw	62
 27555  011972  0012               	return	
 27556  011974  0E7E               	movlw	126
 27557  011976  0012               	return	
 27558  011978  0E76               	movlw	118
 27559  01197A  0012               	return	
 27560  01197C  0E66               	movlw	102
 27561  01197E  0012               	return	
 27562  011980  0E5B               	movlw	91
 27563  011982  0012               	return	
 27564  011984  0E80               	movlw	128
 27565  011986  0012               	return	
 27566  011988                     l853:
 27567  011988  0100               	movlb	0	; () banked
 27568  01198A  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27569                           
 27570                           ; Switch size 1, requested type "space"
 27571                           ; Number of cases is 63, Range of values is 46 to 122
 27572                           ; switch strategies available:
 27573                           ; Name         Instructions Cycles
 27574                           ; simple_byte          190    96 (average)
 27575                           ;	Chosen strategy is simple_byte
 27576  01198C  0A2E               	xorlw	46	; case 46
 27577  01198E  B4D8               	btfsc	status,2,c
 27578  011990  D7F9               	goto	l917
 27579  011992  0A1E               	xorlw	30	; case 48
 27580  011994  B4D8               	btfsc	status,2,c
 27581  011996  D77A               	goto	l854
 27582  011998  0A01               	xorlw	1	; case 49
 27583  01199A  B4D8               	btfsc	status,2,c
 27584  01199C  D779               	goto	l856
 27585  01199E  0A03               	xorlw	3	; case 50
 27586  0119A0  B4D8               	btfsc	status,2,c
 27587  0119A2  D778               	goto	l857
 27588  0119A4  0A01               	xorlw	1	; case 51
 27589  0119A6  B4D8               	btfsc	status,2,c
 27590  0119A8  D777               	goto	l858
 27591  0119AA  0A07               	xorlw	7	; case 52
 27592  0119AC  B4D8               	btfsc	status,2,c
 27593  0119AE  D776               	goto	l859
 27594  0119B0  0A01               	xorlw	1	; case 53
 27595  0119B2  B4D8               	btfsc	status,2,c
 27596  0119B4  D775               	goto	l860
 27597  0119B6  0A03               	xorlw	3	; case 54
 27598  0119B8  B4D8               	btfsc	status,2,c
 27599  0119BA  D774               	goto	l861
 27600  0119BC  0A01               	xorlw	1	; case 55
 27601  0119BE  B4D8               	btfsc	status,2,c
 27602  0119C0  D773               	goto	l862
 27603  0119C2  0A0F               	xorlw	15	; case 56
 27604  0119C4  B4D8               	btfsc	status,2,c
 27605  0119C6  D772               	goto	l863
 27606  0119C8  0A01               	xorlw	1	; case 57
 27607  0119CA  B4D8               	btfsc	status,2,c
 27608  0119CC  D771               	goto	l864
 27609  0119CE  0A78               	xorlw	120	; case 65
 27610  0119D0  B4D8               	btfsc	status,2,c
 27611  0119D2  D7A4               	goto	l891
 27612  0119D4  0A03               	xorlw	3	; case 66
 27613  0119D6  B4D8               	btfsc	status,2,c
 27614  0119D8  D7A3               	goto	l892
 27615  0119DA  0A01               	xorlw	1	; case 67
 27616  0119DC  B4D8               	btfsc	status,2,c
 27617  0119DE  D7A2               	goto	l893
 27618  0119E0  0A07               	xorlw	7	; case 68
 27619  0119E2  B4D8               	btfsc	status,2,c
 27620  0119E4  D7A1               	goto	l894
 27621  0119E6  0A01               	xorlw	1	; case 69
 27622  0119E8  B4D8               	btfsc	status,2,c
 27623  0119EA  D7A0               	goto	l895
 27624  0119EC  0A03               	xorlw	3	; case 70
 27625  0119EE  B4D8               	btfsc	status,2,c
 27626  0119F0  D79F               	goto	l896
 27627  0119F2  0A01               	xorlw	1	; case 71
 27628  0119F4  B4D8               	btfsc	status,2,c
 27629  0119F6  D79E               	goto	l897
 27630  0119F8  0A0F               	xorlw	15	; case 72
 27631  0119FA  B4D8               	btfsc	status,2,c
 27632  0119FC  D79D               	goto	l898
 27633  0119FE  0A01               	xorlw	1	; case 73
 27634  011A00  B4D8               	btfsc	status,2,c
 27635  011A02  D79C               	goto	l899
 27636  011A04  0A03               	xorlw	3	; case 74
 27637  011A06  B4D8               	btfsc	status,2,c
 27638  011A08  D79B               	goto	l900
 27639  011A0A  0A01               	xorlw	1	; case 75
 27640  011A0C  B4D8               	btfsc	status,2,c
 27641  011A0E  D79A               	goto	l901
 27642  011A10  0A07               	xorlw	7	; case 76
 27643  011A12  B4D8               	btfsc	status,2,c
 27644  011A14  D799               	goto	l902
 27645  011A16  0A01               	xorlw	1	; case 77
 27646  011A18  B4D8               	btfsc	status,2,c
 27647  011A1A  D798               	goto	l903
 27648  011A1C  0A03               	xorlw	3	; case 78
 27649  011A1E  B4D8               	btfsc	status,2,c
 27650  011A20  D797               	goto	l904
 27651  011A22  0A01               	xorlw	1	; case 79
 27652  011A24  B4D8               	btfsc	status,2,c
 27653  011A26  D796               	goto	l905
 27654  011A28  0A1F               	xorlw	31	; case 80
 27655  011A2A  B4D8               	btfsc	status,2,c
 27656  011A2C  D795               	goto	l906
 27657  011A2E  0A01               	xorlw	1	; case 81
 27658  011A30  B4D8               	btfsc	status,2,c
 27659  011A32  D794               	goto	l907
 27660  011A34  0A03               	xorlw	3	; case 82
 27661  011A36  B4D8               	btfsc	status,2,c
 27662  011A38  D793               	goto	l908
 27663  011A3A  0A01               	xorlw	1	; case 83
 27664  011A3C  B4D8               	btfsc	status,2,c
 27665  011A3E  D792               	goto	l909
 27666  011A40  0A07               	xorlw	7	; case 84
 27667  011A42  B4D8               	btfsc	status,2,c
 27668  011A44  D791               	goto	l910
 27669  011A46  0A01               	xorlw	1	; case 85
 27670  011A48  B4D8               	btfsc	status,2,c
 27671  011A4A  D790               	goto	l911
 27672  011A4C  0A03               	xorlw	3	; case 86
 27673  011A4E  B4D8               	btfsc	status,2,c
 27674  011A50  D78F               	goto	l912
 27675  011A52  0A01               	xorlw	1	; case 87
 27676  011A54  B4D8               	btfsc	status,2,c
 27677  011A56  D78E               	goto	l913
 27678  011A58  0A0F               	xorlw	15	; case 88
 27679  011A5A  B4D8               	btfsc	status,2,c
 27680  011A5C  D78D               	goto	l914
 27681  011A5E  0A01               	xorlw	1	; case 89
 27682  011A60  B4D8               	btfsc	status,2,c
 27683  011A62  D78C               	goto	l915
 27684  011A64  0A03               	xorlw	3	; case 90
 27685  011A66  B4D8               	btfsc	status,2,c
 27686  011A68  D78B               	goto	l916
 27687  011A6A  0A3B               	xorlw	59	; case 97
 27688  011A6C  B4D8               	btfsc	status,2,c
 27689  011A6E  D722               	goto	l865
 27690  011A70  0A03               	xorlw	3	; case 98
 27691  011A72  B4D8               	btfsc	status,2,c
 27692  011A74  D721               	goto	l866
 27693  011A76  0A01               	xorlw	1	; case 99
 27694  011A78  B4D8               	btfsc	status,2,c
 27695  011A7A  D720               	goto	l867
 27696  011A7C  0A07               	xorlw	7	; case 100
 27697  011A7E  B4D8               	btfsc	status,2,c
 27698  011A80  D71F               	goto	l868
 27699  011A82  0A01               	xorlw	1	; case 101
 27700  011A84  B4D8               	btfsc	status,2,c
 27701  011A86  D71E               	goto	l869
 27702  011A88  0A03               	xorlw	3	; case 102
 27703  011A8A  B4D8               	btfsc	status,2,c
 27704  011A8C  D71D               	goto	l870
 27705  011A8E  0A01               	xorlw	1	; case 103
 27706  011A90  B4D8               	btfsc	status,2,c
 27707  011A92  D71C               	goto	l871
 27708  011A94  0A0F               	xorlw	15	; case 104
 27709  011A96  B4D8               	btfsc	status,2,c
 27710  011A98  D71B               	goto	l872
 27711  011A9A  0A01               	xorlw	1	; case 105
 27712  011A9C  B4D8               	btfsc	status,2,c
 27713  011A9E  D71A               	goto	l873
 27714  011AA0  0A03               	xorlw	3	; case 106
 27715  011AA2  B4D8               	btfsc	status,2,c
 27716  011AA4  D719               	goto	l874
 27717  011AA6  0A01               	xorlw	1	; case 107
 27718  011AA8  B4D8               	btfsc	status,2,c
 27719  011AAA  D718               	goto	l875
 27720  011AAC  0A07               	xorlw	7	; case 108
 27721  011AAE  B4D8               	btfsc	status,2,c
 27722  011AB0  D717               	goto	l876
 27723  011AB2  0A01               	xorlw	1	; case 109
 27724  011AB4  B4D8               	btfsc	status,2,c
 27725  011AB6  D716               	goto	l877
 27726  011AB8  0A03               	xorlw	3	; case 110
 27727  011ABA  B4D8               	btfsc	status,2,c
 27728  011ABC  D715               	goto	l878
 27729  011ABE  0A01               	xorlw	1	; case 111
 27730  011AC0  B4D8               	btfsc	status,2,c
 27731  011AC2  D714               	goto	l879
 27732  011AC4  0A1F               	xorlw	31	; case 112
 27733  011AC6  B4D8               	btfsc	status,2,c
 27734  011AC8  D713               	goto	l880
 27735  011ACA  0A01               	xorlw	1	; case 113
 27736  011ACC  B4D8               	btfsc	status,2,c
 27737  011ACE  D712               	goto	l881
 27738  011AD0  0A03               	xorlw	3	; case 114
 27739  011AD2  B4D8               	btfsc	status,2,c
 27740  011AD4  D711               	goto	l882
 27741  011AD6  0A01               	xorlw	1	; case 115
 27742  011AD8  B4D8               	btfsc	status,2,c
 27743  011ADA  D710               	goto	l883
 27744  011ADC  0A07               	xorlw	7	; case 116
 27745  011ADE  B4D8               	btfsc	status,2,c
 27746  011AE0  D70F               	goto	l884
 27747  011AE2  0A01               	xorlw	1	; case 117
 27748  011AE4  B4D8               	btfsc	status,2,c
 27749  011AE6  D70E               	goto	l885
 27750  011AE8  0A03               	xorlw	3	; case 118
 27751  011AEA  B4D8               	btfsc	status,2,c
 27752  011AEC  D70D               	goto	l886
 27753  011AEE  0A01               	xorlw	1	; case 119
 27754  011AF0  B4D8               	btfsc	status,2,c
 27755  011AF2  D70C               	goto	l887
 27756  011AF4  0A0F               	xorlw	15	; case 120
 27757  011AF6  B4D8               	btfsc	status,2,c
 27758  011AF8  D70B               	goto	l888
 27759  011AFA  0A01               	xorlw	1	; case 121
 27760  011AFC  B4D8               	btfsc	status,2,c
 27761  011AFE  D70A               	goto	l889
 27762  011B00  0A03               	xorlw	3	; case 122
 27763  011B02  B4D8               	btfsc	status,2,c
 27764  011B04  D709               	goto	l890
 27765                           
 27766                           ;Types.c: 354: return 0;
 27767                           
 27768                           ; BSR set to: 0
 27769  011B06  0E00               	movlw	0
 27770  011B08  0012               	return	
 27771  011B0A                     __end_of_ToSegment:
 27772                           	opt stack 0
 27773                           tosu	equ	0xFFF
 27774                           tosh	equ	0xFFE
 27775                           tosl	equ	0xFFD
 27776                           pclath	equ	0xFFA
 27777                           tblptru	equ	0xFF8
 27778                           tblptrh	equ	0xFF7
 27779                           tblptrl	equ	0xFF6
 27780                           tablat	equ	0xFF5
 27781                           prodh	equ	0xFF4
 27782                           prodl	equ	0xFF3
 27783                           intcon	equ	0xFF2
 27784                           postinc0	equ	0xFEE
 27785                           wreg	equ	0xFE8
 27786                           indf1	equ	0xFE7
 27787                           postdec1	equ	0xFE5
 27788                           fsr1h	equ	0xFE2
 27789                           fsr1l	equ	0xFE1
 27790                           indf2	equ	0xFDF
 27791                           postinc2	equ	0xFDE
 27792                           postdec2	equ	0xFDD
 27793                           plusw2	equ	0xFDB
 27794                           fsr2h	equ	0xFDA
 27795                           fsr2l	equ	0xFD9
 27796                           status	equ	0xFD8
 27797                           
 27798 ;; *************** function _HMI_SetButton *****************
 27799 ;; Defined at:
 27800 ;;		line 186 in file "HMI.c"
 27801 ;; Parameters:    Size  Location     Type
 27802 ;;  pValue          1    wreg     unsigned char 
 27803 ;; Auto vars:     Size  Location     Type
 27804 ;;  pValue          1    6[BANK0 ] unsigned char 
 27805 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 27806 ;;  v               1    7[BANK0 ] unsigned char 
 27807 ;; Return value:  Size  Location     Type
 27808 ;;                  1    wreg      void 
 27809 ;; Registers used:
 27810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27811 ;; Tracked objects:
 27812 ;;		On entry : 0/0
 27813 ;;		On exit  : 0/0
 27814 ;;		Unchanged: 0/0
 27815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27817 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27819 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27820 ;;Total ram usage:        8 bytes
 27821 ;; Hardware stack levels used:    1
 27822 ;; Hardware stack levels required when called:    7
 27823 ;; This function calls:
 27824 ;;		Nothing
 27825 ;; This function is called by:
 27826 ;;		_Event_TestButton
 27827 ;; This function uses a non-reentrant model
 27828 ;;
 27829                           
 27830                           	psect	text145
 27831  014CB6                     __ptext145:
 27832                           	opt stack 0
 27833  014CB6                     _HMI_SetButton:
 27834                           	opt stack 19
 27835                           
 27836                           ;incstack = 0
 27837                           ;HMI_SetButton@pValue stored from wreg
 27838  014CB6  0100               	movlb	0	; () banked
 27839  014CB8  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 27840                           
 27841                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 27842  014CBA  0E64               	movlw	low HMI_SetButton@F7213
 27843  014CBC  6EF6               	movwf	tblptrl,c
 27844  014CBE                     	if	1	;There is more than 1 active tblptr byte
 27845  014CBE  0EFD               	movlw	high HMI_SetButton@F7213
 27846  014CC0  6EF7               	movwf	tblptrh,c
 27847  014CC2                     	endif
 27848  014CC2                     	if	1	;There are 3 active tblptr bytes
 27849  014CC2  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 27850  014CC4  6EF8               	movwf	tblptru,c
 27851  014CC6                     	endif
 27852  014CC6  0009               	tblrd		*+
 27853  014CC8  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 27854  014CCC  0009               	tblrd		*+
 27855  014CCE  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 27856  014CD2  0009               	tblrd		*+
 27857  014CD4  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 27858  014CD8  000A               	tblrd		*-
 27859  014CDA  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 27860                           
 27861                           ;HMI.c: 189: UINT8 v = 0b00010001;
 27862  014CDE  0E11               	movlw	17
 27863  014CE0  0100               	movlb	0	; () banked
 27864  014CE2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27865                           
 27866                           ; BSR set to: 0
 27867                           ;HMI.c: 190: pValue &= 3;
 27868  014CE4  0E03               	movlw	3
 27869  014CE6  0100               	movlb	0	; () banked
 27870  014CE8  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 27871                           
 27872                           ; BSR set to: 0
 27873                           ;HMI.c: 191: v = v << reindex[pValue];
 27874  014CEA  0100               	movlb	0	; () banked
 27875  014CEC  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 27876  014CEE  0D01               	mullw	1
 27877  014CF0  0E62               	movlw	low HMI_SetButton@reindex
 27878  014CF2  24F3               	addwf	prodl,w,c
 27879  014CF4  6ED9               	movwf	fsr2l,c
 27880  014CF6  0E00               	movlw	high HMI_SetButton@reindex
 27881  014CF8  20F4               	addwfc	prodh,w,c
 27882  014CFA  6EDA               	movwf	fsr2h,c
 27883  014CFC  50DF               	movf	indf2,w,c
 27884  014CFE  0100               	movlb	0	; () banked
 27885  014D00  6F60               	movwf	??_HMI_SetButton& (0+255),b
 27886  014D02  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 27887  014D06  0100               	movlb	0	; () banked
 27888  014D08  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 27889  014D0A  D003               	goto	u9514
 27890  014D0C                     u9515:
 27891  014D0C  0100               	movlb	0	; () banked
 27892  014D0E  90D8               	bcf	status,0,c
 27893  014D10  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 27894  014D12                     u9514:
 27895  014D12  0100               	movlb	0	; () banked
 27896  014D14  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 27897  014D16  D7FA               	goto	u9515
 27898  014D18  0100               	movlb	0	; () banked
 27899  014D1A  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 27900  014D1C  0100               	movlb	0	; () banked
 27901  014D1E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27902                           
 27903                           ; BSR set to: 0
 27904                           ;HMI.c: 192: v = v >> 4;
 27905  014D20  0100               	movlb	0	; () banked
 27906  014D22  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 27907  014D24  0B0F               	andlw	15
 27908  014D26  0100               	movlb	0	; () banked
 27909  014D28  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27910                           
 27911                           ; BSR set to: 0
 27912                           ;HMI.c: 193: v = v & 0x0F;
 27913  014D2A  0100               	movlb	0	; () banked
 27914  014D2C  5167               	movf	HMI_SetButton@v& (0+255),w,b
 27915  014D2E  0B0F               	andlw	15
 27916  014D30  0100               	movlb	0	; () banked
 27917  014D32  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27918                           
 27919                           ; BSR set to: 0
 27920                           ;HMI.c: 194: HMIBoard.pButton = v;
 27921  014D34  0103               	movlb	3	; () banked
 27922  014D36  5128               	movf	(_HMIBoard+6)& (0+255),w,b
 27923  014D38  0100               	movlb	0	; () banked
 27924  014D3A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 27925  014D3C  0BF0               	andlw	-16
 27926  014D3E  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 27927  014D40  0103               	movlb	3	; () banked
 27928  014D42  6F28               	movwf	(_HMIBoard+6)& (0+255),b
 27929                           
 27930                           ; BSR set to: 3
 27931  014D44  0012               	return		;funcret
 27932  014D46                     __end_of_HMI_SetButton:
 27933                           	opt stack 0
 27934                           tosu	equ	0xFFF
 27935                           tosh	equ	0xFFE
 27936                           tosl	equ	0xFFD
 27937                           pclath	equ	0xFFA
 27938                           tblptru	equ	0xFF8
 27939                           tblptrh	equ	0xFF7
 27940                           tblptrl	equ	0xFF6
 27941                           tablat	equ	0xFF5
 27942                           prodh	equ	0xFF4
 27943                           prodl	equ	0xFF3
 27944                           intcon	equ	0xFF2
 27945                           postinc0	equ	0xFEE
 27946                           wreg	equ	0xFE8
 27947                           indf1	equ	0xFE7
 27948                           postdec1	equ	0xFE5
 27949                           fsr1h	equ	0xFE2
 27950                           fsr1l	equ	0xFE1
 27951                           indf2	equ	0xFDF
 27952                           postinc2	equ	0xFDE
 27953                           postdec2	equ	0xFDD
 27954                           plusw2	equ	0xFDB
 27955                           fsr2h	equ	0xFDA
 27956                           fsr2l	equ	0xFD9
 27957                           status	equ	0xFD8
 27958                           
 27959 ;; *************** function _LED_Toggle *****************
 27960 ;; Defined at:
 27961 ;;		line 50 in file "Library/LED.c"
 27962 ;; Parameters:    Size  Location     Type
 27963 ;;  pLED            1    wreg     enum E6739
 27964 ;; Auto vars:     Size  Location     Type
 27965 ;;  pLED            1   24[BANK0 ] enum E6739
 27966 ;; Return value:  Size  Location     Type
 27967 ;;                  1    wreg      void 
 27968 ;; Registers used:
 27969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27970 ;; Tracked objects:
 27971 ;;		On entry : 0/0
 27972 ;;		On exit  : 0/0
 27973 ;;		Unchanged: 0/0
 27974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27978 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27979 ;;Total ram usage:        1 bytes
 27980 ;; Hardware stack levels used:    1
 27981 ;; Hardware stack levels required when called:   12
 27982 ;; This function calls:
 27983 ;;		_Port_TogglePin
 27984 ;; This function is called by:
 27985 ;;		_LCD_Reset
 27986 ;;		_Event_DIPSwitch
 27987 ;;		_Event_TestButton
 27988 ;;		_Event_ADCSequenceComplete
 27989 ;;		_Event_HMI_DIPSwitch
 27990 ;;		_Event_HMI_LeftButton
 27991 ;;		_Event_HMI_RightButton
 27992 ;;		_Event_HMI_UpButton
 27993 ;;		_Event_HMI_DownButton
 27994 ;; This function uses a non-reentrant model
 27995 ;;
 27996                           
 27997                           	psect	text146
 27998  015CA8                     __ptext146:
 27999                           	opt stack 0
 28000  015CA8                     _LED_Toggle:
 28001                           	opt stack 14
 28002                           
 28003                           ; BSR set to: 3
 28004                           ;incstack = 0
 28005                           ;LED_Toggle@pLED stored from wreg
 28006  015CA8  0100               	movlb	0	; () banked
 28007  015CAA  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 28008                           
 28009                           ;LED.c: 52: switch (pLED)
 28010  015CAC  D018               	goto	l234
 28011  015CAE                     
 28012                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28013  015CAE  0EEA               	movlw	low _PortC
 28014  015CB0  0100               	movlb	0	; () banked
 28015  015CB2  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 28016  015CB4  0E00               	movlw	high _PortC
 28017  015CB6  0100               	movlb	0	; () banked
 28018  015CB8  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28019  015CBA  0E00               	movlw	0
 28020  015CBC  0100               	movlb	0	; () banked
 28021  015CBE  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 28022  015CC0  ECB9  F0B0         	call	_Port_TogglePin	;wreg free
 28023                           
 28024                           ;LED.c: 56: break;
 28025  015CC4  0012               	return	
 28026  015CC6                     
 28027                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28028  015CC6  0EEA               	movlw	low _PortC
 28029  015CC8  0100               	movlb	0	; () banked
 28030  015CCA  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 28031  015CCC  0E00               	movlw	high _PortC
 28032  015CCE  0100               	movlb	0	; () banked
 28033  015CD0  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28034  015CD2  0E01               	movlw	1
 28035  015CD4  0100               	movlb	0	; () banked
 28036  015CD6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 28037  015CD8  ECB9  F0B0         	call	_Port_TogglePin	;wreg free
 28038                           
 28039                           ;LED.c: 60: }
 28040                           
 28041                           ;LED.c: 59: break;
 28042  015CDC  0012               	return	
 28043  015CDE                     l234:
 28044  015CDE  0100               	movlb	0	; () banked
 28045  015CE0  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 28046                           
 28047                           ; Switch size 1, requested type "space"
 28048                           ; Number of cases is 2, Range of values is 0 to 1
 28049                           ; switch strategies available:
 28050                           ; Name         Instructions Cycles
 28051                           ; simple_byte            7     4 (average)
 28052                           ;	Chosen strategy is simple_byte
 28053  015CE2  0A00               	xorlw	0	; case 0
 28054  015CE4  B4D8               	btfsc	status,2,c
 28055  015CE6  D7E3               	goto	l235
 28056  015CE8  0A01               	xorlw	1	; case 1
 28057  015CEA  A4D8               	btfss	status,2,c
 28058  015CEC  0012               	return	
 28059  015CEE  D7EB               	goto	l237
 28060  015CF0                     __end_of_LED_Toggle:
 28061                           	opt stack 0
 28062                           tosu	equ	0xFFF
 28063                           tosh	equ	0xFFE
 28064                           tosl	equ	0xFFD
 28065                           pclath	equ	0xFFA
 28066                           tblptru	equ	0xFF8
 28067                           tblptrh	equ	0xFF7
 28068                           tblptrl	equ	0xFF6
 28069                           tablat	equ	0xFF5
 28070                           prodh	equ	0xFF4
 28071                           prodl	equ	0xFF3
 28072                           intcon	equ	0xFF2
 28073                           postinc0	equ	0xFEE
 28074                           wreg	equ	0xFE8
 28075                           indf1	equ	0xFE7
 28076                           postdec1	equ	0xFE5
 28077                           fsr1h	equ	0xFE2
 28078                           fsr1l	equ	0xFE1
 28079                           indf2	equ	0xFDF
 28080                           postinc2	equ	0xFDE
 28081                           postdec2	equ	0xFDD
 28082                           plusw2	equ	0xFDB
 28083                           fsr2h	equ	0xFDA
 28084                           fsr2l	equ	0xFD9
 28085                           status	equ	0xFD8
 28086                           
 28087 ;; *************** function _Port_TogglePin *****************
 28088 ;; Defined at:
 28089 ;;		line 278 in file "Library/Port.c"
 28090 ;; Parameters:    Size  Location     Type
 28091 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28092 ;;		 -> PortC(10), 
 28093 ;;  pPin            1   22[BANK0 ] enum E6750
 28094 ;; Auto vars:     Size  Location     Type
 28095 ;;  Value           1   23[BANK0 ] unsigned char 
 28096 ;; Return value:  Size  Location     Type
 28097 ;;                  1    wreg      void 
 28098 ;; Registers used:
 28099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28100 ;; Tracked objects:
 28101 ;;		On entry : 0/0
 28102 ;;		On exit  : 0/0
 28103 ;;		Unchanged: 0/0
 28104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28105 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28109 ;;Total ram usage:        4 bytes
 28110 ;; Hardware stack levels used:    1
 28111 ;; Hardware stack levels required when called:   11
 28112 ;; This function calls:
 28113 ;;		_Port_GetPin
 28114 ;;		_Port_SetPin
 28115 ;; This function is called by:
 28116 ;;		_LED_Toggle
 28117 ;; This function uses a non-reentrant model
 28118 ;;
 28119                           
 28120                           	psect	text147
 28121  016172                     __ptext147:
 28122                           	opt stack 0
 28123  016172                     _Port_TogglePin:
 28124                           	opt stack 14
 28125                           
 28126                           ;Port.c: 280: UINT8 Value;
 28127                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28128                           
 28129                           ;incstack = 0
 28130  016172  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28131  016176  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28132  01617A  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28133  01617E  ECBE  F0AE         	call	_Port_GetPin	;wreg free
 28134  016182  0100               	movlb	0	; () banked
 28135  016184  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 28136                           
 28137                           ; BSR set to: 0
 28138                           ;Port.c: 282: Value ^= 0x01;
 28139  016186  0E01               	movlw	1
 28140  016188  0100               	movlb	0	; () banked
 28141  01618A  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28142                           
 28143                           ; BSR set to: 0
 28144                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28145  01618C  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28146  016190  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28147  016194  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28148  016198  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28149  01619C  EC8C  F09F         	call	_Port_SetPin	;wreg free
 28150  0161A0  0012               	return		;funcret
 28151  0161A2                     __end_of_Port_TogglePin:
 28152                           	opt stack 0
 28153                           tosu	equ	0xFFF
 28154                           tosh	equ	0xFFE
 28155                           tosl	equ	0xFFD
 28156                           pclath	equ	0xFFA
 28157                           tblptru	equ	0xFF8
 28158                           tblptrh	equ	0xFF7
 28159                           tblptrl	equ	0xFF6
 28160                           tablat	equ	0xFF5
 28161                           prodh	equ	0xFF4
 28162                           prodl	equ	0xFF3
 28163                           intcon	equ	0xFF2
 28164                           postinc0	equ	0xFEE
 28165                           wreg	equ	0xFE8
 28166                           indf1	equ	0xFE7
 28167                           postdec1	equ	0xFE5
 28168                           fsr1h	equ	0xFE2
 28169                           fsr1l	equ	0xFE1
 28170                           indf2	equ	0xFDF
 28171                           postinc2	equ	0xFDE
 28172                           postdec2	equ	0xFDD
 28173                           plusw2	equ	0xFDB
 28174                           fsr2h	equ	0xFDA
 28175                           fsr2l	equ	0xFD9
 28176                           status	equ	0xFD8
 28177                           
 28178 ;; *************** function _Port_SetPin *****************
 28179 ;; Defined at:
 28180 ;;		line 247 in file "Library/Port.c"
 28181 ;; Parameters:    Size  Location     Type
 28182 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28183 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28184 ;;  pPin            1   17[BANK0 ] enum E6750
 28185 ;;  pValue          1   18[BANK0 ] unsigned char 
 28186 ;; Auto vars:     Size  Location     Type
 28187 ;;  Type            1   19[BANK0 ] enum E6795
 28188 ;; Return value:  Size  Location     Type
 28189 ;;                  1    wreg      void 
 28190 ;; Registers used:
 28191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28192 ;; Tracked objects:
 28193 ;;		On entry : 0/0
 28194 ;;		On exit  : 0/0
 28195 ;;		Unchanged: 0/0
 28196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28200 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28201 ;;Total ram usage:        5 bytes
 28202 ;; Hardware stack levels used:    1
 28203 ;; Hardware stack levels required when called:   10
 28204 ;; This function calls:
 28205 ;;		_Byte_SetBit
 28206 ;;		_Word_GetPair
 28207 ;; This function is called by:
 28208 ;;		_Reset_Low
 28209 ;;		_Reset_High
 28210 ;;		_LED_Set
 28211 ;;		_Port_TogglePin
 28212 ;;		_Motor_Init
 28213 ;;		_Motor_Step
 28214 ;;		_MXK_Init
 28215 ;; This function uses a non-reentrant model
 28216 ;;
 28217                           
 28218                           	psect	text148
 28219  013F18                     __ptext148:
 28220                           	opt stack 0
 28221  013F18                     _Port_SetPin:
 28222                           	opt stack 17
 28223                           
 28224                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28225                           
 28226                           ;incstack = 0
 28227  013F18  0E08               	movlw	8
 28228  013F1A  0100               	movlb	0	; () banked
 28229  013F1C  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 28230  013F1E  0100               	movlb	0	; () banked
 28231  013F20  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 28232  013F22  0E00               	movlw	0
 28233  013F24  0100               	movlb	0	; () banked
 28234  013F26  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28235  013F28  0100               	movlb	0	; () banked
 28236  013F2A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28237  013F2C  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28238  013F30  ECC1  F0AF         	call	_Word_GetPair	;wreg free
 28239  013F34  0100               	movlb	0	; () banked
 28240  013F36  6F73               	movwf	Port_SetPin@Type& (0+255),b
 28241                           
 28242                           ;Port.c: 250: switch (Type)
 28243  013F38  D042               	goto	l427
 28244  013F3A                     
 28245                           ; BSR set to: 0
 28246                           ;Port.c: 256: pValue &= 1;
 28247                           
 28248                           ; BSR set to: 0
 28249  013F3A  0E01               	movlw	1
 28250  013F3C  0100               	movlb	0	; () banked
 28251  013F3E  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28252                           
 28253                           ; BSR set to: 0
 28254                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28255  013F40  0100               	movlb	0	; () banked
 28256  013F42  EE20 F002          	lfsr	2,2
 28257  013F46  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28258  013F48  26D9               	addwf	fsr2l,f,c
 28259  013F4A  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28260  013F4C  22DA               	addwfc	fsr2h,f,c
 28261  013F4E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28262  013F52  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28263  013F56  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28264  013F5A  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28265  013F5E  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 28266                           
 28267                           ;Port.c: 258: break;
 28268  013F62  0012               	return	
 28269  013F64                     
 28270                           ;Port.c: 261: pValue &= 1;
 28271  013F64  0E01               	movlw	1
 28272  013F66  0100               	movlb	0	; () banked
 28273  013F68  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28274                           
 28275                           ;Port.c: 262: pValue ^= 1;
 28276  013F6A  0E01               	movlw	1
 28277  013F6C  0100               	movlb	0	; () banked
 28278  013F6E  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28279                           
 28280                           ; BSR set to: 0
 28281                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28282  013F70  0100               	movlb	0	; () banked
 28283  013F72  EE20 F002          	lfsr	2,2
 28284  013F76  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28285  013F78  26D9               	addwf	fsr2l,f,c
 28286  013F7A  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28287  013F7C  22DA               	addwfc	fsr2h,f,c
 28288  013F7E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28289  013F82  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28290  013F86  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28291  013F8A  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28292  013F8E  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 28293                           
 28294                           ;Port.c: 264: break;
 28295  013F92  0012               	return	
 28296  013F94                     
 28297                           ;Port.c: 266: pValue &= 1;
 28298  013F94  0E01               	movlw	1
 28299  013F96  0100               	movlb	0	; () banked
 28300  013F98  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28301                           
 28302                           ; BSR set to: 0
 28303                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28304  013F9A  0100               	movlb	0	; () banked
 28305  013F9C  EE20 F004          	lfsr	2,4
 28306  013FA0  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28307  013FA2  26D9               	addwf	fsr2l,f,c
 28308  013FA4  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28309  013FA6  22DA               	addwfc	fsr2h,f,c
 28310  013FA8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28311  013FAC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28312  013FB0  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28313  013FB4  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28314  013FB8  EC01  F0AC         	call	_Byte_SetBit	;wreg free
 28315                           
 28316                           ;Port.c: 269: }
 28317                           
 28318                           ;Port.c: 268: break;
 28319  013FBC  0012               	return	
 28320  013FBE                     l427:
 28321  013FBE  0100               	movlb	0	; () banked
 28322  013FC0  5173               	movf	Port_SetPin@Type& (0+255),w,b
 28323                           
 28324                           ; Switch size 1, requested type "space"
 28325                           ; Number of cases is 4, Range of values is 0 to 3
 28326                           ; switch strategies available:
 28327                           ; Name         Instructions Cycles
 28328                           ; simple_byte           13     7 (average)
 28329                           ;	Chosen strategy is simple_byte
 28330  013FC2  0A00               	xorlw	0	; case 0
 28331  013FC4  B4D8               	btfsc	status,2,c
 28332  013FC6  0012               	return	
 28333  013FC8  0A01               	xorlw	1	; case 1
 28334  013FCA  B4D8               	btfsc	status,2,c
 28335  013FCC  D7B6               	goto	l430
 28336  013FCE  0A03               	xorlw	3	; case 2
 28337  013FD0  B4D8               	btfsc	status,2,c
 28338  013FD2  D7C8               	goto	l432
 28339  013FD4  0A01               	xorlw	1	; case 3
 28340  013FD6  A4D8               	btfss	status,2,c
 28341  013FD8  0012               	return	
 28342  013FDA  D7DC               	goto	l433
 28343  013FDC                     __end_of_Port_SetPin:
 28344                           	opt stack 0
 28345                           tosu	equ	0xFFF
 28346                           tosh	equ	0xFFE
 28347                           tosl	equ	0xFFD
 28348                           pclath	equ	0xFFA
 28349                           tblptru	equ	0xFF8
 28350                           tblptrh	equ	0xFF7
 28351                           tblptrl	equ	0xFF6
 28352                           tablat	equ	0xFF5
 28353                           prodh	equ	0xFF4
 28354                           prodl	equ	0xFF3
 28355                           intcon	equ	0xFF2
 28356                           postinc0	equ	0xFEE
 28357                           wreg	equ	0xFE8
 28358                           indf1	equ	0xFE7
 28359                           postdec1	equ	0xFE5
 28360                           fsr1h	equ	0xFE2
 28361                           fsr1l	equ	0xFE1
 28362                           indf2	equ	0xFDF
 28363                           postinc2	equ	0xFDE
 28364                           postdec2	equ	0xFDD
 28365                           plusw2	equ	0xFDB
 28366                           fsr2h	equ	0xFDA
 28367                           fsr2l	equ	0xFD9
 28368                           status	equ	0xFD8
 28369                           
 28370 ;; *************** function _Word_GetPair *****************
 28371 ;; Defined at:
 28372 ;;		line 156 in file "Library/Types.c"
 28373 ;; Parameters:    Size  Location     Type
 28374 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28375 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28376 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28377 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28378 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28379 ;;  pPair           1   14[BANK0 ] unsigned char 
 28380 ;; Auto vars:     Size  Location     Type
 28381 ;;		None
 28382 ;; Return value:  Size  Location     Type
 28383 ;;                  1    wreg      unsigned char 
 28384 ;; Registers used:
 28385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28386 ;; Tracked objects:
 28387 ;;		On entry : 0/0
 28388 ;;		On exit  : 0/0
 28389 ;;		Unchanged: 0/0
 28390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28395 ;;Total ram usage:        3 bytes
 28396 ;; Hardware stack levels used:    1
 28397 ;; Hardware stack levels required when called:    9
 28398 ;; This function calls:
 28399 ;;		_Byte_GetPair
 28400 ;; This function is called by:
 28401 ;;		_Port_Init
 28402 ;;		_Port_SetPin
 28403 ;;		_Port_Set
 28404 ;;		_PortProperty_Valid
 28405 ;;		_Port_SetPair
 28406 ;;		_Port_SetQuad
 28407 ;; This function uses a non-reentrant model
 28408 ;;
 28409                           
 28410                           	psect	text149
 28411  015F82                     __ptext149:
 28412                           	opt stack 0
 28413  015F82                     _Word_GetPair:
 28414                           	opt stack 17
 28415                           
 28416                           ;Types.c: 158: if (pPair >= 4)
 28417                           
 28418                           ;incstack = 0
 28419  015F82  0E03               	movlw	3
 28420  015F84  0100               	movlb	0	; () banked
 28421  015F86  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28422  015F88  D012               	goto	l781
 28423                           
 28424                           ; BSR set to: 0
 28425                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28426  015F8A  0E01               	movlw	1
 28427  015F8C  0100               	movlb	0	; () banked
 28428  015F8E  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 28429  015F90  0100               	movlb	0	; () banked
 28430  015F92  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 28431  015F94  0E00               	movlw	0
 28432  015F96  0100               	movlb	0	; () banked
 28433  015F98  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28434  015F9A  0100               	movlb	0	; () banked
 28435  015F9C  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28436  015F9E  0100               	movlb	0	; () banked
 28437  015FA0  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 28438  015FA2  0FFC               	addlw	252
 28439  015FA4  0100               	movlb	0	; () banked
 28440  015FA6  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 28441  015FA8  EC14  F0B2         	call	_Byte_GetPair	;wreg free
 28442  015FAC  0012               	return	
 28443  015FAE                     l781:
 28444                           
 28445                           ;Types.c: 160: else
 28446                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28447  015FAE  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28448  015FB2  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28449  015FB6  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28450  015FBA  EC14  F0B2         	call	_Byte_GetPair	;wreg free
 28451  015FBE  0012               	return	
 28452  015FC0                     __end_of_Word_GetPair:
 28453                           	opt stack 0
 28454                           tosu	equ	0xFFF
 28455                           tosh	equ	0xFFE
 28456                           tosl	equ	0xFFD
 28457                           pclath	equ	0xFFA
 28458                           tblptru	equ	0xFF8
 28459                           tblptrh	equ	0xFF7
 28460                           tblptrl	equ	0xFF6
 28461                           tablat	equ	0xFF5
 28462                           prodh	equ	0xFF4
 28463                           prodl	equ	0xFF3
 28464                           intcon	equ	0xFF2
 28465                           postinc0	equ	0xFEE
 28466                           wreg	equ	0xFE8
 28467                           indf1	equ	0xFE7
 28468                           postdec1	equ	0xFE5
 28469                           fsr1h	equ	0xFE2
 28470                           fsr1l	equ	0xFE1
 28471                           indf2	equ	0xFDF
 28472                           postinc2	equ	0xFDE
 28473                           postdec2	equ	0xFDD
 28474                           plusw2	equ	0xFDB
 28475                           fsr2h	equ	0xFDA
 28476                           fsr2l	equ	0xFD9
 28477                           status	equ	0xFD8
 28478                           
 28479 ;; *************** function _Byte_GetPair *****************
 28480 ;; Defined at:
 28481 ;;		line 87 in file "Library/Types.c"
 28482 ;; Parameters:    Size  Location     Type
 28483 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28484 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28485 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28486 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28487 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28488 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28489 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28490 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28491 ;;		 -> NULL(0), 
 28492 ;;  pPair           1   11[BANK0 ] unsigned char 
 28493 ;; Auto vars:     Size  Location     Type
 28494 ;;		None
 28495 ;; Return value:  Size  Location     Type
 28496 ;;                  1    wreg      unsigned char 
 28497 ;; Registers used:
 28498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28499 ;; Tracked objects:
 28500 ;;		On entry : 0/0
 28501 ;;		On exit  : 0/0
 28502 ;;		Unchanged: 0/0
 28503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28504 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28507 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28508 ;;Total ram usage:        3 bytes
 28509 ;; Hardware stack levels used:    1
 28510 ;; Hardware stack levels required when called:    8
 28511 ;; This function calls:
 28512 ;;		_Byte_GetZone
 28513 ;; This function is called by:
 28514 ;;		_Word_GetPair
 28515 ;; This function uses a non-reentrant model
 28516 ;;
 28517                           
 28518                           	psect	text150
 28519  016428                     __ptext150:
 28520                           	opt stack 0
 28521  016428                     _Byte_GetPair:
 28522                           	opt stack 17
 28523                           
 28524                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28525                           
 28526                           ;incstack = 0
 28527  016428  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28528  01642C  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28529  016430  0E04               	movlw	4
 28530  016432  0100               	movlb	0	; () banked
 28531  016434  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 28532  016436  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28533  01643A  0E02               	movlw	2
 28534  01643C  0100               	movlb	0	; () banked
 28535  01643E  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28536  016440  ECC1  F0A5         	call	_Byte_GetZone	;wreg free
 28537  016444  0012               	return	
 28538  016446                     __end_of_Byte_GetPair:
 28539                           	opt stack 0
 28540                           tosu	equ	0xFFF
 28541                           tosh	equ	0xFFE
 28542                           tosl	equ	0xFFD
 28543                           pclath	equ	0xFFA
 28544                           tblptru	equ	0xFF8
 28545                           tblptrh	equ	0xFF7
 28546                           tblptrl	equ	0xFF6
 28547                           tablat	equ	0xFF5
 28548                           prodh	equ	0xFF4
 28549                           prodl	equ	0xFF3
 28550                           intcon	equ	0xFF2
 28551                           postinc0	equ	0xFEE
 28552                           wreg	equ	0xFE8
 28553                           indf1	equ	0xFE7
 28554                           postdec1	equ	0xFE5
 28555                           fsr1h	equ	0xFE2
 28556                           fsr1l	equ	0xFE1
 28557                           indf2	equ	0xFDF
 28558                           postinc2	equ	0xFDE
 28559                           postdec2	equ	0xFDD
 28560                           plusw2	equ	0xFDB
 28561                           fsr2h	equ	0xFDA
 28562                           fsr2l	equ	0xFD9
 28563                           status	equ	0xFD8
 28564                           
 28565 ;; *************** function _Byte_GetZone *****************
 28566 ;; Defined at:
 28567 ;;		line 64 in file "Library/Types.c"
 28568 ;; Parameters:    Size  Location     Type
 28569 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28570 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28571 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28572 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28573 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28574 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28575 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28576 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28577 ;;		 -> NULL(0), 
 28578 ;;  pMax            1    2[BANK0 ] unsigned char 
 28579 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28580 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28581 ;; Auto vars:     Size  Location     Type
 28582 ;;  Output          1    8[BANK0 ] unsigned char 
 28583 ;;  Offset          1    7[BANK0 ] unsigned char 
 28584 ;;  MASK            1    6[BANK0 ] unsigned char 
 28585 ;; Return value:  Size  Location     Type
 28586 ;;                  1    wreg      unsigned char 
 28587 ;; Registers used:
 28588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28589 ;; Tracked objects:
 28590 ;;		On entry : 0/0
 28591 ;;		On exit  : 0/0
 28592 ;;		Unchanged: 0/0
 28593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28594 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28595 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28597 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28598 ;;Total ram usage:        9 bytes
 28599 ;; Hardware stack levels used:    1
 28600 ;; Hardware stack levels required when called:    7
 28601 ;; This function calls:
 28602 ;;		Nothing
 28603 ;; This function is called by:
 28604 ;;		_Byte_GetPair
 28605 ;;		_Byte_GetTriple
 28606 ;;		_Byte_GetQuad
 28607 ;; This function uses a non-reentrant model
 28608 ;;
 28609                           
 28610                           	psect	text151
 28611  014B82                     __ptext151:
 28612                           	opt stack 0
 28613  014B82                     _Byte_GetZone:
 28614                           	opt stack 17
 28615                           
 28616                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28617                           
 28618                           ;incstack = 0
 28619  014B82  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28620  014B86  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28621  014B8A  0E00               	movlw	low (__mediumconst shr (0+16))
 28622  014B8C  6EF8               	movwf	tblptru,c
 28623  014B8E  0E0F               	movlw	(high __ramtop+-1)
 28624  014B90  64F7               	cpfsgt	tblptrh,c
 28625  014B92  D003               	bra	u8687
 28626  014B94  0008               	tblrd		*
 28627  014B96  50F5               	movf	tablat,w,c
 28628  014B98  D005               	bra	u8680
 28629  014B9A                     u8687:
 28630  014B9A  CFF6 FFE9          	movff	tblptrl,fsr0l
 28631  014B9E  CFF7 FFEA          	movff	tblptrh,fsr0h
 28632  014BA2  50EF               	movf	indf0,w,c
 28633  014BA4                     u8680:
 28634  014BA4  0100               	movlb	0	; () banked
 28635  014BA6  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 28636                           
 28637                           ; BSR set to: 0
 28638                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28639  014BA8  0100               	movlb	0	; () banked
 28640  014BAA  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28641  014BAC  0D01               	mullw	1
 28642  014BAE  0E5B               	movlw	low _MASKS
 28643  014BB0  24F3               	addwf	prodl,w,c
 28644  014BB2  6EF6               	movwf	tblptrl,c
 28645  014BB4  0EFD               	movlw	high _MASKS
 28646  014BB6  20F4               	addwfc	prodh,w,c
 28647  014BB8  6EF7               	movwf	tblptrh,c
 28648  014BBA                     	if	1	;There are 3 active tblptr bytes
 28649  014BBA  6AF8               	clrf	tblptru,c
 28650  014BBC  0E00               	movlw	low (__mediumconst shr (0+16))
 28651  014BBE  22F8               	addwfc	tblptru,f,c
 28652  014BC0                     	endif
 28653  014BC0  0008               	tblrd		*
 28654  014BC2  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 28655                           
 28656                           ; BSR set to: 0
 28657                           ;Types.c: 68: UINT8 Offset = 0;
 28658  014BC6  0E00               	movlw	0
 28659  014BC8  0100               	movlb	0	; () banked
 28660  014BCA  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 28661                           
 28662                           ;Types.c: 70: while (pChunk >= pMax)
 28663  014BCC  D006               	goto	l732
 28664  014BCE                     
 28665                           ; BSR set to: 0
 28666                           ;Types.c: 71: {
 28667                           ;Types.c: 72: pChunk -= pMax;
 28668                           
 28669                           ; BSR set to: 0
 28670  014BCE  0100               	movlb	0	; () banked
 28671  014BD0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 28672  014BD2  0100               	movlb	0	; () banked
 28673  014BD4  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28674                           
 28675                           ; BSR set to: 0
 28676                           ;Types.c: 73: Offset += 1;
 28677  014BD6  0100               	movlb	0	; () banked
 28678  014BD8  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 28679  014BDA                     l732:
 28680                           
 28681                           ; BSR set to: 0
 28682                           
 28683                           ; BSR set to: 0
 28684  014BDA  0100               	movlb	0	; () banked
 28685  014BDC  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 28686  014BDE  0100               	movlb	0	; () banked
 28687  014BE0  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28688  014BE2  B0D8               	btfsc	status,0,c
 28689  014BE4  D7F4               	goto	l733
 28690                           
 28691                           ; BSR set to: 0
 28692                           ;Types.c: 74: }
 28693                           ;Types.c: 75: pChunk *= pChunkSize;
 28694                           
 28695                           ; BSR set to: 0
 28696  014BE6  0100               	movlb	0	; () banked
 28697  014BE8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28698  014BEA  0100               	movlb	0	; () banked
 28699  014BEC  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28700  014BEE  50F3               	movf	prodl,w,c
 28701  014BF0  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 28702                           
 28703                           ; BSR set to: 0
 28704                           ;Types.c: 76: pChunk += Offset;
 28705  014BF2  0100               	movlb	0	; () banked
 28706  014BF4  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 28707  014BF6  0100               	movlb	0	; () banked
 28708  014BF8  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28709                           
 28710                           ; BSR set to: 0
 28711                           ;Types.c: 78: Output >>= pChunk;
 28712  014BFA  0100               	movlb	0	; () banked
 28713  014BFC  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28714  014BFE  0100               	movlb	0	; () banked
 28715  014C00  6F65               	movwf	??_Byte_GetZone& (0+255),b
 28716  014C02  D003               	goto	u8700
 28717  014C04                     u8705:
 28718  014C04  0100               	movlb	0	; () banked
 28719  014C06  90D8               	bcf	status,0,c
 28720  014C08  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28721  014C0A                     u8700:
 28722  014C0A  0100               	movlb	0	; () banked
 28723  014C0C  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 28724  014C0E  D7FA               	goto	u8705
 28725                           
 28726                           ;Types.c: 79: Output &= MASK;
 28727  014C10  0100               	movlb	0	; () banked
 28728  014C12  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 28729  014C14  0100               	movlb	0	; () banked
 28730  014C16  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 28731                           
 28732                           ; BSR set to: 0
 28733                           ;Types.c: 80: return Output;
 28734  014C18  0100               	movlb	0	; () banked
 28735  014C1A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 28736  014C1C  0012               	return	
 28737  014C1E                     __end_of_Byte_GetZone:
 28738                           	opt stack 0
 28739                           tosu	equ	0xFFF
 28740                           tosh	equ	0xFFE
 28741                           tosl	equ	0xFFD
 28742                           pclath	equ	0xFFA
 28743                           tblptru	equ	0xFF8
 28744                           tblptrh	equ	0xFF7
 28745                           tblptrl	equ	0xFF6
 28746                           tablat	equ	0xFF5
 28747                           prodh	equ	0xFF4
 28748                           prodl	equ	0xFF3
 28749                           intcon	equ	0xFF2
 28750                           indf0	equ	0xFEF
 28751                           postinc0	equ	0xFEE
 28752                           fsr0h	equ	0xFEA
 28753                           fsr0l	equ	0xFE9
 28754                           wreg	equ	0xFE8
 28755                           indf1	equ	0xFE7
 28756                           postdec1	equ	0xFE5
 28757                           fsr1h	equ	0xFE2
 28758                           fsr1l	equ	0xFE1
 28759                           indf2	equ	0xFDF
 28760                           postinc2	equ	0xFDE
 28761                           postdec2	equ	0xFDD
 28762                           plusw2	equ	0xFDB
 28763                           fsr2h	equ	0xFDA
 28764                           fsr2l	equ	0xFD9
 28765                           status	equ	0xFD8
 28766                           
 28767 ;; *************** function _Byte_SetBit *****************
 28768 ;; Defined at:
 28769 ;;		line 32 in file "Library/Types.c"
 28770 ;; Parameters:    Size  Location     Type
 28771 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28772 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28773 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28774 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28775 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28776 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28777 ;;		 -> NULL(0), 
 28778 ;;  pBit            1    2[BANK0 ] unsigned char 
 28779 ;;  pValue          1    3[BANK0 ] unsigned char 
 28780 ;; Auto vars:     Size  Location     Type
 28781 ;;		None
 28782 ;; Return value:  Size  Location     Type
 28783 ;;                  1    wreg      void 
 28784 ;; Registers used:
 28785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28786 ;; Tracked objects:
 28787 ;;		On entry : 0/0
 28788 ;;		On exit  : 0/0
 28789 ;;		Unchanged: 0/0
 28790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28791 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28793 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28794 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28795 ;;Total ram usage:        7 bytes
 28796 ;; Hardware stack levels used:    1
 28797 ;; Hardware stack levels required when called:    7
 28798 ;; This function calls:
 28799 ;;		Nothing
 28800 ;; This function is called by:
 28801 ;;		_Port_SetPinType
 28802 ;;		_Port_SetPin
 28803 ;;		_SPI_Init
 28804 ;;		_SPI_MinSpeed
 28805 ;;		_SPI_MaxSpeed
 28806 ;;		_Word_SetBit
 28807 ;;		_I2C_Init
 28808 ;; This function uses a non-reentrant model
 28809 ;;
 28810                           
 28811                           	psect	text152
 28812  015802                     __ptext152:
 28813                           	opt stack 0
 28814  015802                     _Byte_SetBit:
 28815                           	opt stack 19
 28816                           
 28817                           ;Types.c: 34: pValue &= 1;
 28818                           
 28819                           ; BSR set to: 0
 28820                           ;incstack = 0
 28821  015802  0E01               	movlw	1
 28822  015804  0100               	movlb	0	; () banked
 28823  015806  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 28824                           
 28825                           ; BSR set to: 0
 28826                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28827  015808  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28828  01580C  0E01               	movlw	1
 28829  01580E  0100               	movlb	0	; () banked
 28830  015810  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 28831  015812  0100               	movlb	0	; () banked
 28832  015814  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 28833  015816  D003               	goto	u8754
 28834  015818                     u8755:
 28835  015818  0100               	movlb	0	; () banked
 28836  01581A  90D8               	bcf	status,0,c
 28837  01581C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28838  01581E                     u8754:
 28839  01581E  0100               	movlb	0	; () banked
 28840  015820  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 28841  015822  D7FA               	goto	u8755
 28842  015824  0100               	movlb	0	; () banked
 28843  015826  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28844  015828  0AFF               	xorlw	255
 28845  01582A  0100               	movlb	0	; () banked
 28846  01582C  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 28847  01582E  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28848  015832  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28849  015836  0100               	movlb	0	; () banked
 28850  015838  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 28851  01583A  16DF               	andwf	indf2,f,c
 28852                           
 28853                           ; BSR set to: 0
 28854                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28855  01583C  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28856  015840  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 28857  015844  0100               	movlb	0	; () banked
 28858  015846  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 28859  015848  D003               	goto	u8764
 28860  01584A                     u8765:
 28861  01584A  0100               	movlb	0	; () banked
 28862  01584C  90D8               	bcf	status,0,c
 28863  01584E  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28864  015850                     u8764:
 28865  015850  0100               	movlb	0	; () banked
 28866  015852  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 28867  015854  D7FA               	goto	u8765
 28868  015856  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28869  01585A  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28870  01585E  0100               	movlb	0	; () banked
 28871  015860  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28872  015862  12DF               	iorwf	indf2,f,c
 28873                           
 28874                           ; BSR set to: 0
 28875  015864  0012               	return		;funcret
 28876  015866                     __end_of_Byte_SetBit:
 28877                           	opt stack 0
 28878                           tosu	equ	0xFFF
 28879                           tosh	equ	0xFFE
 28880                           tosl	equ	0xFFD
 28881                           pclath	equ	0xFFA
 28882                           tblptru	equ	0xFF8
 28883                           tblptrh	equ	0xFF7
 28884                           tblptrl	equ	0xFF6
 28885                           tablat	equ	0xFF5
 28886                           prodh	equ	0xFF4
 28887                           prodl	equ	0xFF3
 28888                           intcon	equ	0xFF2
 28889                           indf0	equ	0xFEF
 28890                           postinc0	equ	0xFEE
 28891                           fsr0h	equ	0xFEA
 28892                           fsr0l	equ	0xFE9
 28893                           wreg	equ	0xFE8
 28894                           indf1	equ	0xFE7
 28895                           postdec1	equ	0xFE5
 28896                           fsr1h	equ	0xFE2
 28897                           fsr1l	equ	0xFE1
 28898                           indf2	equ	0xFDF
 28899                           postinc2	equ	0xFDE
 28900                           postdec2	equ	0xFDD
 28901                           plusw2	equ	0xFDB
 28902                           fsr2h	equ	0xFDA
 28903                           fsr2l	equ	0xFD9
 28904                           status	equ	0xFD8
 28905                           
 28906 ;; *************** function _Port_GetPin *****************
 28907 ;; Defined at:
 28908 ;;		line 271 in file "Library/Port.c"
 28909 ;; Parameters:    Size  Location     Type
 28910 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28911 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28912 ;;  pPin            1    2[BANK0 ] enum E6750
 28913 ;; Auto vars:     Size  Location     Type
 28914 ;;  Output          1    5[BANK0 ] unsigned char 
 28915 ;; Return value:  Size  Location     Type
 28916 ;;                  1    wreg      unsigned char 
 28917 ;; Registers used:
 28918 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28919 ;; Tracked objects:
 28920 ;;		On entry : 0/0
 28921 ;;		On exit  : 0/0
 28922 ;;		Unchanged: 0/0
 28923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28924 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28927 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28928 ;;Total ram usage:        6 bytes
 28929 ;; Hardware stack levels used:    1
 28930 ;; Hardware stack levels required when called:    7
 28931 ;; This function calls:
 28932 ;;		Nothing
 28933 ;; This function is called by:
 28934 ;;		_Port_TogglePin
 28935 ;;		_HMI_LeftSwitch
 28936 ;;		_HMI_RightSwitch
 28937 ;;		_HMI_UpSwitch
 28938 ;;		_HMI_DownSwitch
 28939 ;;		_MXK_TestButton
 28940 ;; This function uses a non-reentrant model
 28941 ;;
 28942                           
 28943                           	psect	text153
 28944  015D7C                     __ptext153:
 28945                           	opt stack 0
 28946  015D7C                     _Port_GetPin:
 28947                           	opt stack 19
 28948                           
 28949                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28950                           
 28951                           ; BSR set to: 0
 28952                           ;incstack = 0
 28953  015D7C  0100               	movlb	0	; () banked
 28954  015D7E  EE20 F006          	lfsr	2,6
 28955  015D82  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 28956  015D84  26D9               	addwf	fsr2l,f,c
 28957  015D86  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28958  015D88  22DA               	addwfc	fsr2h,f,c
 28959  015D8A  CFDE F063          	movff	postinc2,??_Port_GetPin
 28960  015D8E  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 28961  015D92  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 28962  015D96  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28963  015D9A  50DF               	movf	indf2,w,c
 28964  015D9C  0100               	movlb	0	; () banked
 28965  015D9E  6F65               	movwf	Port_GetPin@Output& (0+255),b
 28966                           
 28967                           ; BSR set to: 0
 28968                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28969  015DA0  0100               	movlb	0	; () banked
 28970  015DA2  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 28971  015DA4  0100               	movlb	0	; () banked
 28972  015DA6  6F63               	movwf	??_Port_GetPin& (0+255),b
 28973  015DA8  D003               	goto	u8810
 28974  015DAA                     u8815:
 28975  015DAA  0100               	movlb	0	; () banked
 28976  015DAC  90D8               	bcf	status,0,c
 28977  015DAE  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 28978  015DB0                     u8810:
 28979  015DB0  0100               	movlb	0	; () banked
 28980  015DB2  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 28981  015DB4  D7FA               	goto	u8815
 28982                           
 28983                           ;Port.c: 275: Output &= 1;
 28984  015DB6  0E01               	movlw	1
 28985  015DB8  0100               	movlb	0	; () banked
 28986  015DBA  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 28987                           
 28988                           ; BSR set to: 0
 28989                           ;Port.c: 276: return Output;
 28990  015DBC  0100               	movlb	0	; () banked
 28991  015DBE  5165               	movf	Port_GetPin@Output& (0+255),w,b
 28992  015DC0  0012               	return	
 28993  015DC2                     __end_of_Port_GetPin:
 28994                           	opt stack 0
 28995                           tosu	equ	0xFFF
 28996                           tosh	equ	0xFFE
 28997                           tosl	equ	0xFFD
 28998                           pclath	equ	0xFFA
 28999                           tblptru	equ	0xFF8
 29000                           tblptrh	equ	0xFF7
 29001                           tblptrl	equ	0xFF6
 29002                           tablat	equ	0xFF5
 29003                           prodh	equ	0xFF4
 29004                           prodl	equ	0xFF3
 29005                           intcon	equ	0xFF2
 29006                           indf0	equ	0xFEF
 29007                           postinc0	equ	0xFEE
 29008                           fsr0h	equ	0xFEA
 29009                           fsr0l	equ	0xFE9
 29010                           wreg	equ	0xFE8
 29011                           indf1	equ	0xFE7
 29012                           postdec1	equ	0xFE5
 29013                           fsr1h	equ	0xFE2
 29014                           fsr1l	equ	0xFE1
 29015                           indf2	equ	0xFDF
 29016                           postinc2	equ	0xFDE
 29017                           postdec2	equ	0xFDD
 29018                           plusw2	equ	0xFDB
 29019                           fsr2h	equ	0xFDA
 29020                           fsr2l	equ	0xFD9
 29021                           status	equ	0xFD8
 29022                           
 29023 ;; *************** function _HMI_SetBar *****************
 29024 ;; Defined at:
 29025 ;;		line 205 in file "HMI.c"
 29026 ;; Parameters:    Size  Location     Type
 29027 ;;  pValue          1    wreg     unsigned char 
 29028 ;; Auto vars:     Size  Location     Type
 29029 ;;  pValue          1    0[BANK0 ] unsigned char 
 29030 ;; Return value:  Size  Location     Type
 29031 ;;                  1    wreg      void 
 29032 ;; Registers used:
 29033 ;;		wreg
 29034 ;; Tracked objects:
 29035 ;;		On entry : 0/0
 29036 ;;		On exit  : 0/0
 29037 ;;		Unchanged: 0/0
 29038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29043 ;;Total ram usage:        1 bytes
 29044 ;; Hardware stack levels used:    1
 29045 ;; Hardware stack levels required when called:    7
 29046 ;; This function calls:
 29047 ;;		Nothing
 29048 ;; This function is called by:
 29049 ;;		_Event_DIPSwitch
 29050 ;;		_Event_HMI_DIPSwitch
 29051 ;;		_Event_HMI_LeftButton
 29052 ;;		_Event_HMI_RightButton
 29053 ;; This function uses a non-reentrant model
 29054 ;;
 29055                           
 29056                           	psect	text154
 29057  01667C                     __ptext154:
 29058                           	opt stack 0
 29059  01667C                     _HMI_SetBar:
 29060                           	opt stack 19
 29061                           
 29062                           ; BSR set to: 0
 29063                           ;incstack = 0
 29064                           ;HMI_SetBar@pValue stored from wreg
 29065  01667C  0100               	movlb	0	; () banked
 29066  01667E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 29067                           
 29068                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29069  016680  C060  F329         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29070  016684  0012               	return		;funcret
 29071  016686                     __end_of_HMI_SetBar:
 29072                           	opt stack 0
 29073                           tosu	equ	0xFFF
 29074                           tosh	equ	0xFFE
 29075                           tosl	equ	0xFFD
 29076                           pclath	equ	0xFFA
 29077                           tblptru	equ	0xFF8
 29078                           tblptrh	equ	0xFF7
 29079                           tblptrl	equ	0xFF6
 29080                           tablat	equ	0xFF5
 29081                           prodh	equ	0xFF4
 29082                           prodl	equ	0xFF3
 29083                           intcon	equ	0xFF2
 29084                           indf0	equ	0xFEF
 29085                           postinc0	equ	0xFEE
 29086                           fsr0h	equ	0xFEA
 29087                           fsr0l	equ	0xFE9
 29088                           wreg	equ	0xFE8
 29089                           indf1	equ	0xFE7
 29090                           postdec1	equ	0xFE5
 29091                           fsr1h	equ	0xFE2
 29092                           fsr1l	equ	0xFE1
 29093                           indf2	equ	0xFDF
 29094                           postinc2	equ	0xFDE
 29095                           postdec2	equ	0xFDD
 29096                           plusw2	equ	0xFDB
 29097                           fsr2h	equ	0xFDA
 29098                           fsr2l	equ	0xFD9
 29099                           status	equ	0xFD8
 29100                           
 29101 ;; *************** function _HMI_GetBar *****************
 29102 ;; Defined at:
 29103 ;;		line 209 in file "HMI.c"
 29104 ;; Parameters:    Size  Location     Type
 29105 ;;		None
 29106 ;; Auto vars:     Size  Location     Type
 29107 ;;		None
 29108 ;; Return value:  Size  Location     Type
 29109 ;;                  1    wreg      unsigned char 
 29110 ;; Registers used:
 29111 ;;		wreg, status,2
 29112 ;; Tracked objects:
 29113 ;;		On entry : 0/0
 29114 ;;		On exit  : 0/0
 29115 ;;		Unchanged: 0/0
 29116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29121 ;;Total ram usage:        0 bytes
 29122 ;; Hardware stack levels used:    1
 29123 ;; Hardware stack levels required when called:    7
 29124 ;; This function calls:
 29125 ;;		Nothing
 29126 ;; This function is called by:
 29127 ;;		_Event_DIPSwitch
 29128 ;;		_Event_HMI_DIPSwitch
 29129 ;; This function uses a non-reentrant model
 29130 ;;
 29131                           
 29132                           	psect	text155
 29133  0166B8                     __ptext155:
 29134                           	opt stack 0
 29135  0166B8                     _HMI_GetBar:
 29136                           	opt stack 19
 29137                           
 29138                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29139                           
 29140                           ;incstack = 0
 29141  0166B8  0103               	movlb	3	; () banked
 29142  0166BA  5129               	movf	(_HMIBoard+7)& (0+255),w,b
 29143  0166BC  0012               	return	
 29144  0166BE                     __end_of_HMI_GetBar:
 29145                           	opt stack 0
 29146                           tosu	equ	0xFFF
 29147                           tosh	equ	0xFFE
 29148                           tosl	equ	0xFFD
 29149                           pclath	equ	0xFFA
 29150                           tblptru	equ	0xFF8
 29151                           tblptrh	equ	0xFF7
 29152                           tblptrl	equ	0xFF6
 29153                           tablat	equ	0xFF5
 29154                           prodh	equ	0xFF4
 29155                           prodl	equ	0xFF3
 29156                           intcon	equ	0xFF2
 29157                           indf0	equ	0xFEF
 29158                           postinc0	equ	0xFEE
 29159                           fsr0h	equ	0xFEA
 29160                           fsr0l	equ	0xFE9
 29161                           wreg	equ	0xFE8
 29162                           indf1	equ	0xFE7
 29163                           postdec1	equ	0xFE5
 29164                           fsr1h	equ	0xFE2
 29165                           fsr1l	equ	0xFE1
 29166                           indf2	equ	0xFDF
 29167                           postinc2	equ	0xFDE
 29168                           postdec2	equ	0xFDD
 29169                           plusw2	equ	0xFDB
 29170                           fsr2h	equ	0xFDA
 29171                           fsr2l	equ	0xFD9
 29172                           status	equ	0xFD8
 29173                           
 29174 ;; *************** function _ISR_Function *****************
 29175 ;; Defined at:
 29176 ;;		line 38 in file "Library/ISR.c"
 29177 ;; Parameters:    Size  Location     Type
 29178 ;;		None
 29179 ;; Auto vars:     Size  Location     Type
 29180 ;;		None
 29181 ;; Return value:  Size  Location     Type
 29182 ;;                  1    wreg      void 
 29183 ;; Registers used:
 29184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29185 ;; Tracked objects:
 29186 ;;		On entry : 0/0
 29187 ;;		On exit  : 0/0
 29188 ;;		Unchanged: 0/0
 29189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29192 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29193 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29194 ;;Total ram usage:       18 bytes
 29195 ;; Hardware stack levels used:    1
 29196 ;; Hardware stack levels required when called:    6
 29197 ;; This function calls:
 29198 ;;		_Timer0_ISR
 29199 ;; This function is called by:
 29200 ;;		Interrupt level 2
 29201 ;; This function uses a non-reentrant model
 29202 ;;
 29203                           
 29204                           	psect	intcode
 29205  001408                     __pintcode:
 29206                           	opt stack 0
 29207  001408                     _ISR_Function:
 29208                           	opt stack 13
 29209                           
 29210                           ; BSR set to: 3
 29211                           ;incstack = 0
 29212  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29213  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29214  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29215  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29216  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29217  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29218  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29219  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29220  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29221  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29222  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29223  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29224  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29225  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29226  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29227  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29228  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29229  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29230  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29231                           
 29232                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29233  001452  92F2               	bcf	intcon,1,c	;volatile
 29234                           
 29235                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29236  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29237  001456  AAF2               	btfss	intcon,5,c	;volatile
 29238  001458  D002               	goto	i2l1590
 29239                           
 29240                           ;ISR.c: 68: Timer0_ISR();
 29241  00145A  EC00  F0B1         	call	_Timer0_ISR	;wreg free
 29242  00145E                     i2l1590:
 29243  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29244  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29245  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29246  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29247  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29248  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29249  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29250  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29251  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29252  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29253  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29254  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29255  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29256  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29257  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29258  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29259  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29260  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29261  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29262  0014A8  0011               	retfie		f
 29263  0014AA                     __end_of_ISR_Function:
 29264                           	opt stack 0
 29265                           tosu	equ	0xFFF
 29266                           tosh	equ	0xFFE
 29267                           tosl	equ	0xFFD
 29268                           pclatu	equ	0xFFB
 29269                           pclath	equ	0xFFA
 29270                           tblptru	equ	0xFF8
 29271                           tblptrh	equ	0xFF7
 29272                           tblptrl	equ	0xFF6
 29273                           tablat	equ	0xFF5
 29274                           prodh	equ	0xFF4
 29275                           prodl	equ	0xFF3
 29276                           intcon	equ	0xFF2
 29277                           indf0	equ	0xFEF
 29278                           postinc0	equ	0xFEE
 29279                           fsr0h	equ	0xFEA
 29280                           fsr0l	equ	0xFE9
 29281                           wreg	equ	0xFE8
 29282                           indf1	equ	0xFE7
 29283                           postdec1	equ	0xFE5
 29284                           fsr1h	equ	0xFE2
 29285                           fsr1l	equ	0xFE1
 29286                           indf2	equ	0xFDF
 29287                           postinc2	equ	0xFDE
 29288                           postdec2	equ	0xFDD
 29289                           plusw2	equ	0xFDB
 29290                           fsr2h	equ	0xFDA
 29291                           fsr2l	equ	0xFD9
 29292                           status	equ	0xFD8
 29293                           
 29294 ;; *************** function _Timer0_ISR *****************
 29295 ;; Defined at:
 29296 ;;		line 94 in file "Library/Timer0.c"
 29297 ;; Parameters:    Size  Location     Type
 29298 ;;		None
 29299 ;; Auto vars:     Size  Location     Type
 29300 ;;		None
 29301 ;; Return value:  Size  Location     Type
 29302 ;;                  1    wreg      void 
 29303 ;; Registers used:
 29304 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29305 ;; Tracked objects:
 29306 ;;		On entry : 0/0
 29307 ;;		On exit  : 0/0
 29308 ;;		Unchanged: 0/0
 29309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29314 ;;Total ram usage:        0 bytes
 29315 ;; Hardware stack levels used:    1
 29316 ;; Hardware stack levels required when called:    5
 29317 ;; This function calls:
 29318 ;;		Absolute function
 29319 ;;		i2_Motor_Step
 29320 ;;		i2_Timer0_Stop
 29321 ;; This function is called by:
 29322 ;;		_ISR_Function
 29323 ;; This function uses a non-reentrant model
 29324 ;;
 29325                           
 29326                           	psect	text157
 29327  016200                     __ptext157:
 29328                           	opt stack 0
 29329  016200                     _Timer0_ISR:
 29330                           	opt stack 13
 29331                           
 29332                           ;Timer0.c: 96: Timer0_Stop();
 29333                           
 29334                           ;incstack = 0
 29335  016200  EC5F  F0B3         	call	i2_Timer0_Stop	;wreg free
 29336                           
 29337                           ;Timer0.c: 99: if (gISR != 0)
 29338  016204  0100               	movlb	0	; () banked
 29339  016206  51B9               	movf	_gISR& (0+255),w,b
 29340  016208  0100               	movlb	0	; () banked
 29341  01620A  11BA               	iorwf	(_gISR+1)& (0+255),w,b
 29342  01620C  0100               	movlb	0	; () banked
 29343  01620E  11BB               	iorwf	(_gISR+2)& (0+255),w,b
 29344  016210  B4D8               	btfsc	status,2,c
 29345  016212  0012               	return	
 29346                           
 29347                           ; BSR set to: 0
 29348                           ;Timer0.c: 100: gISR();
 29349  016214  D801               	call	i2u1357_48
 29350  016216  0012               	return	
 29351  016218                     i2u1357_48:
 29352  016218  0005               	push	
 29353  01621A  6EFA               	movwf	pclath,c
 29354  01621C  0100               	movlb	0	; () banked
 29355  01621E  51B9               	movf	_gISR& (0+255),w,b
 29356  016220  6EFD               	movwf	tosl,c
 29357  016222  51BA               	movf	(_gISR+1)& (0+255),w,b
 29358  016224  6EFE               	movwf	tosh,c
 29359  016226  51BB               	movf	(_gISR+2)& (0+255),w,b
 29360  016228  6EFF               	movwf	tosu,c
 29361  01622A  50FA               	movf	pclath,w,c
 29362  01622C  0012               	return		;indir
 29363  01622E                     __end_of_Timer0_ISR:
 29364                           	opt stack 0
 29365                           tosu	equ	0xFFF
 29366                           tosh	equ	0xFFE
 29367                           tosl	equ	0xFFD
 29368                           pclatu	equ	0xFFB
 29369                           pclath	equ	0xFFA
 29370                           tblptru	equ	0xFF8
 29371                           tblptrh	equ	0xFF7
 29372                           tblptrl	equ	0xFF6
 29373                           tablat	equ	0xFF5
 29374                           prodh	equ	0xFF4
 29375                           prodl	equ	0xFF3
 29376                           intcon	equ	0xFF2
 29377                           indf0	equ	0xFEF
 29378                           postinc0	equ	0xFEE
 29379                           fsr0h	equ	0xFEA
 29380                           fsr0l	equ	0xFE9
 29381                           wreg	equ	0xFE8
 29382                           indf1	equ	0xFE7
 29383                           postdec1	equ	0xFE5
 29384                           fsr1h	equ	0xFE2
 29385                           fsr1l	equ	0xFE1
 29386                           indf2	equ	0xFDF
 29387                           postinc2	equ	0xFDE
 29388                           postdec2	equ	0xFDD
 29389                           plusw2	equ	0xFDB
 29390                           fsr2h	equ	0xFDA
 29391                           fsr2l	equ	0xFD9
 29392                           status	equ	0xFD8
 29393                           
 29394 ;; *************** function i2_Motor_Step *****************
 29395 ;; Defined at:
 29396 ;;		line 75 in file "Library/Motor.c"
 29397 ;; Parameters:    Size  Location     Type
 29398 ;;		None
 29399 ;; Auto vars:     Size  Location     Type
 29400 ;;		None
 29401 ;; Return value:  Size  Location     Type
 29402 ;;                  1    wreg      void 
 29403 ;; Registers used:
 29404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29405 ;; Tracked objects:
 29406 ;;		On entry : 0/0
 29407 ;;		On exit  : 0/0
 29408 ;;		Unchanged: 0/0
 29409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29412 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29414 ;;Total ram usage:        2 bytes
 29415 ;; Hardware stack levels used:    1
 29416 ;; Hardware stack levels required when called:    4
 29417 ;; This function calls:
 29418 ;;		i2_MXK_Queue
 29419 ;;		i2_MXK_Release
 29420 ;;		i2_MXK_SwitchTo
 29421 ;;		i2_Port_SetPin
 29422 ;;		i2_Timer0_Restart
 29423 ;;		i2_Timer0_Stop
 29424 ;; This function is called by:
 29425 ;; This function uses a non-reentrant model
 29426 ;;
 29427                           
 29428                           	psect	text158
 29429  01381E                     __ptext158:
 29430                           	opt stack 0
 29431  01381E                     i2_Motor_Step:
 29432                           	opt stack 13
 29433                           
 29434                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29435                           
 29436                           ;incstack = 0
 29437  01381E  0100               	movlb	0	; () banked
 29438  013820  EE20 F004          	lfsr	2,4
 29439  013824  51D8               	movf	_lMotor& (0+255),w,b
 29440  013826  26D9               	addwf	fsr2l,f,c
 29441  013828  51D9               	movf	(_lMotor+1)& (0+255),w,b
 29442  01382A  22DA               	addwfc	fsr2h,f,c
 29443  01382C  50DF               	movf	indf2,w,c
 29444  01382E  EC53  F0B0         	call	i2_MXK_SwitchTo
 29445  013832  0900               	iorlw	0
 29446  013834  B4D8               	btfsc	status,2,c
 29447  013836  D06A               	goto	i2l1627
 29448                           
 29449                           ;Motor.c: 78: {
 29450                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29451  013838  C0D8  FFD9         	movff	_lMotor,fsr2l
 29452  01383C  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29453  013840  50DE               	movf	postinc2,w,c
 29454  013842  10DE               	iorwf	postinc2,w,c
 29455  013844  B4D8               	btfsc	status,2,c
 29456  013846  D05D               	goto	i2l1628
 29457                           
 29458                           ;Motor.c: 80: {
 29459                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29460  013848  C0D8  FFD9         	movff	_lMotor,fsr2l
 29461  01384C  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29462  013850  0E01               	movlw	1
 29463  013852  BEDB               	btfsc	plusw2,7,c
 29464  013854  D022               	goto	i2l1629
 29465  013856  0E01               	movlw	1
 29466  013858  50DB               	movf	plusw2,w,c
 29467  01385A  E103               	bnz	i2u715_40
 29468  01385C  04DE               	decf	postinc2,w,c
 29469  01385E  A0D8               	btfss	status,0,c
 29470  013860  D01C               	goto	i2l1629
 29471  013862                     i2u715_40:
 29472                           
 29473                           ;Motor.c: 83: {
 29474                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29475  013862  C0D8  FFD9         	movff	_lMotor,fsr2l
 29476  013866  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29477  01386A  28DE               	incf	postinc2,w,c
 29478  01386C  E104               	bnz	i2u716_40
 29479  01386E  0E7F               	movlw	127
 29480  013870  18DE               	xorwf	postinc2,w,c
 29481  013872  B4D8               	btfsc	status,2,c
 29482  013874  D007               	goto	i2l1630
 29483  013876                     i2u716_40:
 29484                           
 29485                           ;Motor.c: 85: lMotor->mDelta --;
 29486  013876  C0D8  FFD9         	movff	_lMotor,fsr2l
 29487  01387A  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29488  01387E  06DE               	decf	postinc2,f,c
 29489  013880  0E00               	movlw	0
 29490  013882  5ADD               	subwfb	postdec2,f,c
 29491  013884                     i2l1630:
 29492                           
 29493                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29494  013884  0E90               	movlw	low _PortE
 29495  013886  6E10               	movwf	i2Port_SetPin@pInput,c
 29496  013888  0E03               	movlw	high _PortE
 29497  01388A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29498  01388C  0E00               	movlw	0
 29499  01388E  6E12               	movwf	i2Port_SetPin@pPin,c
 29500  013890  0E01               	movlw	1
 29501  013892  6E13               	movwf	i2Port_SetPin@pValue,c
 29502  013894  EC7D  F0A3         	call	i2_Port_SetPin	;wreg free
 29503                           
 29504                           ;Motor.c: 88: }
 29505  013898  D01B               	goto	i2l1631
 29506  01389A                     i2l1629:
 29507                           
 29508                           ;Motor.c: 89: else
 29509                           ;Motor.c: 90: {
 29510                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29511  01389A  C0D8  FFD9         	movff	_lMotor,fsr2l
 29512  01389E  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29513  0138A2  04DE               	decf	postinc2,w,c
 29514  0138A4  E104               	bnz	i2u717_40
 29515  0138A6  0E80               	movlw	128
 29516  0138A8  18DE               	xorwf	postinc2,w,c
 29517  0138AA  B4D8               	btfsc	status,2,c
 29518  0138AC  D007               	goto	i2l1632
 29519  0138AE                     i2u717_40:
 29520                           
 29521                           ;Motor.c: 92: lMotor->mDelta ++;
 29522  0138AE  C0D8  FFD9         	movff	_lMotor,fsr2l
 29523  0138B2  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29524  0138B6  2ADE               	incf	postinc2,f,c
 29525  0138B8  0E00               	movlw	0
 29526  0138BA  22DD               	addwfc	postdec2,f,c
 29527  0138BC                     i2l1632:
 29528                           
 29529                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29530  0138BC  0E90               	movlw	low _PortE
 29531  0138BE  6E10               	movwf	i2Port_SetPin@pInput,c
 29532  0138C0  0E03               	movlw	high _PortE
 29533  0138C2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29534  0138C4  0E00               	movlw	0
 29535  0138C6  6E12               	movwf	i2Port_SetPin@pPin,c
 29536  0138C8  0E00               	movlw	0
 29537  0138CA  6E13               	movwf	i2Port_SetPin@pValue,c
 29538  0138CC  EC7D  F0A3         	call	i2_Port_SetPin	;wreg free
 29539  0138D0                     i2l1631:
 29540                           
 29541                           ;Motor.c: 95: }
 29542                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29543  0138D0  0E90               	movlw	low _PortE
 29544  0138D2  6E10               	movwf	i2Port_SetPin@pInput,c
 29545  0138D4  0E03               	movlw	high _PortE
 29546  0138D6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29547  0138D8  0E01               	movlw	1
 29548  0138DA  6E12               	movwf	i2Port_SetPin@pPin,c
 29549  0138DC  0E01               	movlw	1
 29550  0138DE  6E13               	movwf	i2Port_SetPin@pValue,c
 29551  0138E0  EC7D  F0A3         	call	i2_Port_SetPin	;wreg free
 29552                           
 29553                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29554  0138E4  0E90               	movlw	low _PortE
 29555  0138E6  6E10               	movwf	i2Port_SetPin@pInput,c
 29556  0138E8  0E03               	movlw	high _PortE
 29557  0138EA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29558  0138EC  0E01               	movlw	1
 29559  0138EE  6E12               	movwf	i2Port_SetPin@pPin,c
 29560  0138F0  0E00               	movlw	0
 29561  0138F2  6E13               	movwf	i2Port_SetPin@pValue,c
 29562  0138F4  EC7D  F0A3         	call	i2_Port_SetPin	;wreg free
 29563                           
 29564                           ;Motor.c: 101: MXK_Release();
 29565  0138F8  EC62  F0B3         	call	i2_MXK_Release	;wreg free
 29566                           
 29567                           ;Motor.c: 102: Timer0_Restart();
 29568  0138FC  EC2E  F0B3         	call	i2_Timer0_Restart	;wreg free
 29569                           
 29570                           ;Motor.c: 103: return;
 29571  013900  0012               	return	
 29572  013902                     i2l1628:
 29573                           
 29574                           ;Motor.c: 104: }
 29575                           ;Motor.c: 105: MXK_Release();
 29576  013902  EC62  F0B3         	call	i2_MXK_Release	;wreg free
 29577                           
 29578                           ;Motor.c: 106: Timer0_Stop();
 29579  013906  EC5F  F0B3         	call	i2_Timer0_Stop	;wreg free
 29580                           
 29581                           ;Motor.c: 107: return;
 29582  01390A  0012               	return	
 29583  01390C                     i2l1627:
 29584                           
 29585                           ;Motor.c: 108: }
 29586                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29587  01390C  C0BF  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29588  013910  C0C0  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29589  013914  C0C1  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29590  013918  EC15  F0B3         	call	i2_MXK_Queue	;wreg free
 29591  01391C  0012               	return		;funcret
 29592  01391E                     __end_ofi2_Motor_Step:
 29593                           	opt stack 0
 29594                           tosu	equ	0xFFF
 29595                           tosh	equ	0xFFE
 29596                           tosl	equ	0xFFD
 29597                           pclatu	equ	0xFFB
 29598                           pclath	equ	0xFFA
 29599                           tblptru	equ	0xFF8
 29600                           tblptrh	equ	0xFF7
 29601                           tblptrl	equ	0xFF6
 29602                           tablat	equ	0xFF5
 29603                           prodh	equ	0xFF4
 29604                           prodl	equ	0xFF3
 29605                           intcon	equ	0xFF2
 29606                           indf0	equ	0xFEF
 29607                           postinc0	equ	0xFEE
 29608                           fsr0h	equ	0xFEA
 29609                           fsr0l	equ	0xFE9
 29610                           wreg	equ	0xFE8
 29611                           indf1	equ	0xFE7
 29612                           postdec1	equ	0xFE5
 29613                           fsr1h	equ	0xFE2
 29614                           fsr1l	equ	0xFE1
 29615                           indf2	equ	0xFDF
 29616                           postinc2	equ	0xFDE
 29617                           postdec2	equ	0xFDD
 29618                           plusw2	equ	0xFDB
 29619                           fsr2h	equ	0xFDA
 29620                           fsr2l	equ	0xFD9
 29621                           status	equ	0xFD8
 29622                           
 29623 ;; *************** function i2_Timer0_Stop *****************
 29624 ;; Defined at:
 29625 ;;		line 89 in file "Library/Timer0.c"
 29626 ;; Parameters:    Size  Location     Type
 29627 ;;		None
 29628 ;; Auto vars:     Size  Location     Type
 29629 ;;		None
 29630 ;; Return value:  Size  Location     Type
 29631 ;;                  1    wreg      void 
 29632 ;; Registers used:
 29633 ;;		None
 29634 ;; Tracked objects:
 29635 ;;		On entry : 0/0
 29636 ;;		On exit  : 0/0
 29637 ;;		Unchanged: 0/0
 29638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29643 ;;Total ram usage:        0 bytes
 29644 ;; Hardware stack levels used:    1
 29645 ;; This function calls:
 29646 ;;		Nothing
 29647 ;; This function is called by:
 29648 ;;		_Timer0_ISR
 29649 ;;		i2_Motor_Step
 29650 ;; This function uses a non-reentrant model
 29651 ;;
 29652                           
 29653                           	psect	text159
 29654  0166BE                     __ptext159:
 29655                           	opt stack 0
 29656  0166BE                     i2_Timer0_Stop:
 29657                           	opt stack 17
 29658                           
 29659                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29660                           
 29661                           ;incstack = 0
 29662  0166BE  9AF2               	bcf	intcon,5,c	;volatile
 29663                           
 29664                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29665  0166C0  94F2               	bcf	intcon,2,c	;volatile
 29666  0166C2  0012               	return		;funcret
 29667  0166C4                     __end_ofi2_Timer0_Stop:
 29668                           	opt stack 0
 29669                           tosu	equ	0xFFF
 29670                           tosh	equ	0xFFE
 29671                           tosl	equ	0xFFD
 29672                           pclatu	equ	0xFFB
 29673                           pclath	equ	0xFFA
 29674                           tblptru	equ	0xFF8
 29675                           tblptrh	equ	0xFF7
 29676                           tblptrl	equ	0xFF6
 29677                           tablat	equ	0xFF5
 29678                           prodh	equ	0xFF4
 29679                           prodl	equ	0xFF3
 29680                           intcon	equ	0xFF2
 29681                           indf0	equ	0xFEF
 29682                           postinc0	equ	0xFEE
 29683                           fsr0h	equ	0xFEA
 29684                           fsr0l	equ	0xFE9
 29685                           wreg	equ	0xFE8
 29686                           indf1	equ	0xFE7
 29687                           postdec1	equ	0xFE5
 29688                           fsr1h	equ	0xFE2
 29689                           fsr1l	equ	0xFE1
 29690                           indf2	equ	0xFDF
 29691                           postinc2	equ	0xFDE
 29692                           postdec2	equ	0xFDD
 29693                           plusw2	equ	0xFDB
 29694                           fsr2h	equ	0xFDA
 29695                           fsr2l	equ	0xFD9
 29696                           status	equ	0xFD8
 29697                           
 29698 ;; *************** function i2_Timer0_Restart *****************
 29699 ;; Defined at:
 29700 ;;		line 83 in file "Library/Timer0.c"
 29701 ;; Parameters:    Size  Location     Type
 29702 ;;		None
 29703 ;; Auto vars:     Size  Location     Type
 29704 ;;		None
 29705 ;; Return value:  Size  Location     Type
 29706 ;;                  1    wreg      void 
 29707 ;; Registers used:
 29708 ;;		None
 29709 ;; Tracked objects:
 29710 ;;		On entry : 0/0
 29711 ;;		On exit  : 0/0
 29712 ;;		Unchanged: 0/0
 29713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29718 ;;Total ram usage:        0 bytes
 29719 ;; Hardware stack levels used:    1
 29720 ;; This function calls:
 29721 ;;		Nothing
 29722 ;; This function is called by:
 29723 ;;		i2_Motor_Step
 29724 ;; This function uses a non-reentrant model
 29725 ;;
 29726                           
 29727                           	psect	text160
 29728  01665C                     __ptext160:
 29729                           	opt stack 0
 29730  01665C                     i2_Timer0_Restart:
 29731                           	opt stack 16
 29732                           
 29733                           ;Timer0.c: 85: TMR0 = COUNTER;
 29734                           
 29735                           ;incstack = 0
 29736  01665C  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29737  016660  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29738                           
 29739                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29740  016664  8AF2               	bsf	intcon,5,c	;volatile
 29741  016666  0012               	return		;funcret
 29742  016668                     __end_ofi2_Timer0_Restart:
 29743                           	opt stack 0
 29744                           tosu	equ	0xFFF
 29745                           tosh	equ	0xFFE
 29746                           tosl	equ	0xFFD
 29747                           pclatu	equ	0xFFB
 29748                           pclath	equ	0xFFA
 29749                           tblptru	equ	0xFF8
 29750                           tblptrh	equ	0xFF7
 29751                           tblptrl	equ	0xFF6
 29752                           tablat	equ	0xFF5
 29753                           prodh	equ	0xFF4
 29754                           prodl	equ	0xFF3
 29755                           intcon	equ	0xFF2
 29756                           indf0	equ	0xFEF
 29757                           postinc0	equ	0xFEE
 29758                           fsr0h	equ	0xFEA
 29759                           fsr0l	equ	0xFE9
 29760                           wreg	equ	0xFE8
 29761                           indf1	equ	0xFE7
 29762                           postdec1	equ	0xFE5
 29763                           fsr1h	equ	0xFE2
 29764                           fsr1l	equ	0xFE1
 29765                           indf2	equ	0xFDF
 29766                           postinc2	equ	0xFDE
 29767                           postdec2	equ	0xFDD
 29768                           plusw2	equ	0xFDB
 29769                           fsr2h	equ	0xFDA
 29770                           fsr2l	equ	0xFD9
 29771                           status	equ	0xFD8
 29772                           
 29773 ;; *************** function i2_Port_SetPin *****************
 29774 ;; Defined at:
 29775 ;;		line 247 in file "Library/Port.c"
 29776 ;; Parameters:    Size  Location     Type
 29777 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29778 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29779 ;;  pPin            1   17[COMRAM] enum E6750
 29780 ;;  pValue          1   18[COMRAM] unsigned char 
 29781 ;; Auto vars:     Size  Location     Type
 29782 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29783 ;; Return value:  Size  Location     Type
 29784 ;;                  1    wreg      void 
 29785 ;; Registers used:
 29786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29787 ;; Tracked objects:
 29788 ;;		On entry : 0/0
 29789 ;;		On exit  : 0/0
 29790 ;;		Unchanged: 0/0
 29791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29795 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29796 ;;Total ram usage:        5 bytes
 29797 ;; Hardware stack levels used:    1
 29798 ;; Hardware stack levels required when called:    3
 29799 ;; This function calls:
 29800 ;;		i2_Byte_SetBit
 29801 ;;		i2_Word_GetPair
 29802 ;; This function is called by:
 29803 ;;		i2_Motor_Step
 29804 ;; This function uses a non-reentrant model
 29805 ;;
 29806                           
 29807                           	psect	text161
 29808  0146FA                     __ptext161:
 29809                           	opt stack 0
 29810  0146FA                     i2_Port_SetPin:
 29811                           	opt stack 13
 29812                           
 29813                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29814                           
 29815                           ;incstack = 0
 29816  0146FA  0E08               	movlw	8
 29817  0146FC  2410               	addwf	i2Port_SetPin@pInput,w,c
 29818  0146FE  6E0D               	movwf	i2Word_GetPair@pInput,c
 29819  014700  0E00               	movlw	0
 29820  014702  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29821  014704  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29822  014706  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29823  01470A  ECD1  F0B0         	call	i2_Word_GetPair	;wreg free
 29824  01470E  6E14               	movwf	i2Port_SetPin@Type,c
 29825                           
 29826                           ;Port.c: 250: switch (Type)
 29827  014710  D03B               	goto	i2l427
 29828  014712                     
 29829                           ;Port.c: 256: pValue &= 1;
 29830  014712  0E01               	movlw	1
 29831  014714  1613               	andwf	i2Port_SetPin@pValue,f,c
 29832                           
 29833                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29834  014716  EE20 F002          	lfsr	2,2
 29835  01471A  5010               	movf	i2Port_SetPin@pInput,w,c
 29836  01471C  26D9               	addwf	fsr2l,f,c
 29837  01471E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29838  014720  22DA               	addwfc	fsr2h,f,c
 29839  014722  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29840  014726  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29841  01472A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29842  01472E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29843  014732  ECC1  F0AD         	call	i2_Byte_SetBit	;wreg free
 29844                           
 29845                           ;Port.c: 258: break;
 29846  014736  0012               	return	
 29847  014738                     
 29848                           ;Port.c: 261: pValue &= 1;
 29849  014738  0E01               	movlw	1
 29850  01473A  1613               	andwf	i2Port_SetPin@pValue,f,c
 29851                           
 29852                           ;Port.c: 262: pValue ^= 1;
 29853  01473C  0E01               	movlw	1
 29854  01473E  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29855                           
 29856                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29857  014740  EE20 F002          	lfsr	2,2
 29858  014744  5010               	movf	i2Port_SetPin@pInput,w,c
 29859  014746  26D9               	addwf	fsr2l,f,c
 29860  014748  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29861  01474A  22DA               	addwfc	fsr2h,f,c
 29862  01474C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29863  014750  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29864  014754  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29865  014758  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29866  01475C  ECC1  F0AD         	call	i2_Byte_SetBit	;wreg free
 29867                           
 29868                           ;Port.c: 264: break;
 29869  014760  0012               	return	
 29870  014762                     
 29871                           ;Port.c: 266: pValue &= 1;
 29872  014762  0E01               	movlw	1
 29873  014764  1613               	andwf	i2Port_SetPin@pValue,f,c
 29874                           
 29875                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29876  014766  EE20 F004          	lfsr	2,4
 29877  01476A  5010               	movf	i2Port_SetPin@pInput,w,c
 29878  01476C  26D9               	addwf	fsr2l,f,c
 29879  01476E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29880  014770  22DA               	addwfc	fsr2h,f,c
 29881  014772  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29882  014776  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29883  01477A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29884  01477E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29885  014782  ECC1  F0AD         	call	i2_Byte_SetBit	;wreg free
 29886                           
 29887                           ;Port.c: 269: }
 29888                           
 29889                           ;Port.c: 268: break;
 29890  014786  0012               	return	
 29891  014788                     i2l427:
 29892  014788  5014               	movf	i2Port_SetPin@Type,w,c
 29893                           
 29894                           ; Switch size 1, requested type "space"
 29895                           ; Number of cases is 4, Range of values is 0 to 3
 29896                           ; switch strategies available:
 29897                           ; Name         Instructions Cycles
 29898                           ; simple_byte           13     7 (average)
 29899                           ;	Chosen strategy is simple_byte
 29900  01478A  0A00               	xorlw	0	; case 0
 29901  01478C  B4D8               	btfsc	status,2,c
 29902  01478E  0012               	return	
 29903  014790  0A01               	xorlw	1	; case 1
 29904  014792  B4D8               	btfsc	status,2,c
 29905  014794  D7BE               	goto	i2l430
 29906  014796  0A03               	xorlw	3	; case 2
 29907  014798  B4D8               	btfsc	status,2,c
 29908  01479A  D7CE               	goto	i2l432
 29909  01479C  0A01               	xorlw	1	; case 3
 29910  01479E  A4D8               	btfss	status,2,c
 29911  0147A0  0012               	return	
 29912  0147A2  D7DF               	goto	i2l433
 29913  0147A4                     __end_ofi2_Port_SetPin:
 29914                           	opt stack 0
 29915                           tosu	equ	0xFFF
 29916                           tosh	equ	0xFFE
 29917                           tosl	equ	0xFFD
 29918                           pclatu	equ	0xFFB
 29919                           pclath	equ	0xFFA
 29920                           tblptru	equ	0xFF8
 29921                           tblptrh	equ	0xFF7
 29922                           tblptrl	equ	0xFF6
 29923                           tablat	equ	0xFF5
 29924                           prodh	equ	0xFF4
 29925                           prodl	equ	0xFF3
 29926                           intcon	equ	0xFF2
 29927                           indf0	equ	0xFEF
 29928                           postinc0	equ	0xFEE
 29929                           fsr0h	equ	0xFEA
 29930                           fsr0l	equ	0xFE9
 29931                           wreg	equ	0xFE8
 29932                           indf1	equ	0xFE7
 29933                           postdec1	equ	0xFE5
 29934                           fsr1h	equ	0xFE2
 29935                           fsr1l	equ	0xFE1
 29936                           indf2	equ	0xFDF
 29937                           postinc2	equ	0xFDE
 29938                           postdec2	equ	0xFDD
 29939                           plusw2	equ	0xFDB
 29940                           fsr2h	equ	0xFDA
 29941                           fsr2l	equ	0xFD9
 29942                           status	equ	0xFD8
 29943                           
 29944 ;; *************** function i2_Word_GetPair *****************
 29945 ;; Defined at:
 29946 ;;		line 156 in file "Library/Types.c"
 29947 ;; Parameters:    Size  Location     Type
 29948 ;;  pInput          2   12[COMRAM] PTR struct Word
 29949 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29950 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29951 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29952 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29953 ;;  pPair           1   14[COMRAM] unsigned char 
 29954 ;; Auto vars:     Size  Location     Type
 29955 ;;		None
 29956 ;; Return value:  Size  Location     Type
 29957 ;;                  1    wreg      unsigned char 
 29958 ;; Registers used:
 29959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29960 ;; Tracked objects:
 29961 ;;		On entry : 0/0
 29962 ;;		On exit  : 0/0
 29963 ;;		Unchanged: 0/0
 29964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29965 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29969 ;;Total ram usage:        3 bytes
 29970 ;; Hardware stack levels used:    1
 29971 ;; Hardware stack levels required when called:    2
 29972 ;; This function calls:
 29973 ;;		i2_Byte_GetPair
 29974 ;; This function is called by:
 29975 ;;		i2_Port_SetPin
 29976 ;; This function uses a non-reentrant model
 29977 ;;
 29978                           
 29979                           	psect	text162
 29980  0161A2                     __ptext162:
 29981                           	opt stack 0
 29982  0161A2                     i2_Word_GetPair:
 29983                           	opt stack 13
 29984                           
 29985                           ;Types.c: 158: if (pPair >= 4)
 29986                           
 29987                           ;incstack = 0
 29988  0161A2  0E03               	movlw	3
 29989  0161A4  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29990  0161A6  D00C               	goto	i2l781
 29991                           
 29992                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29993  0161A8  0E01               	movlw	1
 29994  0161AA  240D               	addwf	i2Word_GetPair@pInput,w,c
 29995  0161AC  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29996  0161AE  0E00               	movlw	0
 29997  0161B0  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29998  0161B2  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29999  0161B4  500F               	movf	i2Word_GetPair@pPair,w,c
 30000  0161B6  0FFC               	addlw	252
 30001  0161B8  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30002  0161BA  EC4D  F0B2         	call	i2_Byte_GetPair	;wreg free
 30003  0161BE  0012               	return	
 30004  0161C0                     i2l781:
 30005                           
 30006                           ;Types.c: 160: else
 30007                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30008  0161C0  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30009  0161C4  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30010  0161C8  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30011  0161CC  EC4D  F0B2         	call	i2_Byte_GetPair	;wreg free
 30012  0161D0  0012               	return	
 30013  0161D2                     __end_ofi2_Word_GetPair:
 30014                           	opt stack 0
 30015                           tosu	equ	0xFFF
 30016                           tosh	equ	0xFFE
 30017                           tosl	equ	0xFFD
 30018                           pclatu	equ	0xFFB
 30019                           pclath	equ	0xFFA
 30020                           tblptru	equ	0xFF8
 30021                           tblptrh	equ	0xFF7
 30022                           tblptrl	equ	0xFF6
 30023                           tablat	equ	0xFF5
 30024                           prodh	equ	0xFF4
 30025                           prodl	equ	0xFF3
 30026                           intcon	equ	0xFF2
 30027                           indf0	equ	0xFEF
 30028                           postinc0	equ	0xFEE
 30029                           fsr0h	equ	0xFEA
 30030                           fsr0l	equ	0xFE9
 30031                           wreg	equ	0xFE8
 30032                           indf1	equ	0xFE7
 30033                           postdec1	equ	0xFE5
 30034                           fsr1h	equ	0xFE2
 30035                           fsr1l	equ	0xFE1
 30036                           indf2	equ	0xFDF
 30037                           postinc2	equ	0xFDE
 30038                           postdec2	equ	0xFDD
 30039                           plusw2	equ	0xFDB
 30040                           fsr2h	equ	0xFDA
 30041                           fsr2l	equ	0xFD9
 30042                           status	equ	0xFD8
 30043                           
 30044 ;; *************** function i2_Byte_GetPair *****************
 30045 ;; Defined at:
 30046 ;;		line 87 in file "Library/Types.c"
 30047 ;; Parameters:    Size  Location     Type
 30048 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30049 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30050 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30051 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30052 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30053 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30054 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30055 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30056 ;;		 -> NULL(0), 
 30057 ;;  pPair           1   11[COMRAM] unsigned char 
 30058 ;; Auto vars:     Size  Location     Type
 30059 ;;		None
 30060 ;; Return value:  Size  Location     Type
 30061 ;;                  1    wreg      unsigned char 
 30062 ;; Registers used:
 30063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30064 ;; Tracked objects:
 30065 ;;		On entry : 0/0
 30066 ;;		On exit  : 0/0
 30067 ;;		Unchanged: 0/0
 30068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30069 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30072 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30073 ;;Total ram usage:        3 bytes
 30074 ;; Hardware stack levels used:    1
 30075 ;; Hardware stack levels required when called:    1
 30076 ;; This function calls:
 30077 ;;		i2_Byte_GetZone
 30078 ;; This function is called by:
 30079 ;;		i2_Word_GetPair
 30080 ;; This function uses a non-reentrant model
 30081 ;;
 30082                           
 30083                           	psect	text163
 30084  01649A                     __ptext163:
 30085                           	opt stack 0
 30086  01649A                     i2_Byte_GetPair:
 30087                           	opt stack 13
 30088                           
 30089                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30090                           
 30091                           ;incstack = 0
 30092  01649A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30093  01649E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30094  0164A2  0E04               	movlw	4
 30095  0164A4  6E03               	movwf	i2Byte_GetZone@pMax,c
 30096  0164A6  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30097  0164AA  0E02               	movlw	2
 30098  0164AC  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30099  0164AE  EC35  F0A9         	call	i2_Byte_GetZone	;wreg free
 30100  0164B2  0012               	return	
 30101  0164B4                     __end_ofi2_Byte_GetPair:
 30102                           	opt stack 0
 30103                           tosu	equ	0xFFF
 30104                           tosh	equ	0xFFE
 30105                           tosl	equ	0xFFD
 30106                           pclatu	equ	0xFFB
 30107                           pclath	equ	0xFFA
 30108                           tblptru	equ	0xFF8
 30109                           tblptrh	equ	0xFF7
 30110                           tblptrl	equ	0xFF6
 30111                           tablat	equ	0xFF5
 30112                           prodh	equ	0xFF4
 30113                           prodl	equ	0xFF3
 30114                           intcon	equ	0xFF2
 30115                           indf0	equ	0xFEF
 30116                           postinc0	equ	0xFEE
 30117                           fsr0h	equ	0xFEA
 30118                           fsr0l	equ	0xFE9
 30119                           wreg	equ	0xFE8
 30120                           indf1	equ	0xFE7
 30121                           postdec1	equ	0xFE5
 30122                           fsr1h	equ	0xFE2
 30123                           fsr1l	equ	0xFE1
 30124                           indf2	equ	0xFDF
 30125                           postinc2	equ	0xFDE
 30126                           postdec2	equ	0xFDD
 30127                           plusw2	equ	0xFDB
 30128                           fsr2h	equ	0xFDA
 30129                           fsr2l	equ	0xFD9
 30130                           status	equ	0xFD8
 30131                           
 30132 ;; *************** function i2_Byte_GetZone *****************
 30133 ;; Defined at:
 30134 ;;		line 64 in file "Library/Types.c"
 30135 ;; Parameters:    Size  Location     Type
 30136 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30137 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30138 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30139 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30140 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30141 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30142 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30143 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30144 ;;		 -> NULL(0), 
 30145 ;;  pMax            1    2[COMRAM] unsigned char 
 30146 ;;  pChunk          1    3[COMRAM] unsigned char 
 30147 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30148 ;; Auto vars:     Size  Location     Type
 30149 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30150 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30151 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30152 ;; Return value:  Size  Location     Type
 30153 ;;                  1    wreg      unsigned char 
 30154 ;; Registers used:
 30155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30156 ;; Tracked objects:
 30157 ;;		On entry : 0/0
 30158 ;;		On exit  : 0/0
 30159 ;;		Unchanged: 0/0
 30160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30161 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30162 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30163 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30164 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30165 ;;Total ram usage:        9 bytes
 30166 ;; Hardware stack levels used:    1
 30167 ;; This function calls:
 30168 ;;		Nothing
 30169 ;; This function is called by:
 30170 ;;		i2_Byte_GetPair
 30171 ;; This function uses a non-reentrant model
 30172 ;;
 30173                           
 30174                           	psect	text164
 30175  01526A                     __ptext164:
 30176                           	opt stack 0
 30177  01526A                     i2_Byte_GetZone:
 30178                           	opt stack 13
 30179                           
 30180                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30181                           
 30182                           ;incstack = 0
 30183  01526A  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30184  01526E  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30185  015272  0E00               	movlw	low (__mediumconst shr (0+16))
 30186  015274  6EF8               	movwf	tblptru,c
 30187  015276  0E0F               	movlw	(high __ramtop+-1)
 30188  015278  64F7               	cpfsgt	tblptrh,c
 30189  01527A  D003               	bra	i2u500_47
 30190  01527C  0008               	tblrd		*
 30191  01527E  50F5               	movf	tablat,w,c
 30192  015280  D005               	bra	i2u500_40
 30193  015282                     i2u500_47:
 30194  015282  CFF6 FFE9          	movff	tblptrl,fsr0l
 30195  015286  CFF7 FFEA          	movff	tblptrh,fsr0h
 30196  01528A  50EF               	movf	indf0,w,c
 30197  01528C                     i2u500_40:
 30198  01528C  6E09               	movwf	i2Byte_GetZone@Output,c
 30199                           
 30200                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30201  01528E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30202  015290  0D01               	mullw	1
 30203  015292  0E5B               	movlw	low _MASKS
 30204  015294  24F3               	addwf	prodl,w,c
 30205  015296  6EF6               	movwf	tblptrl,c
 30206  015298  0EFD               	movlw	high _MASKS
 30207  01529A  20F4               	addwfc	prodh,w,c
 30208  01529C  6EF7               	movwf	tblptrh,c
 30209  01529E                     	if	1	;There are 3 active tblptr bytes
 30210  01529E  6AF8               	clrf	tblptru,c
 30211  0152A0  0E00               	movlw	low (__mediumconst shr (0+16))
 30212  0152A2  22F8               	addwfc	tblptru,f,c
 30213  0152A4                     	endif
 30214  0152A4  0008               	tblrd		*
 30215  0152A6  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30216                           
 30217                           ;Types.c: 68: UINT8 Offset = 0;
 30218  0152AA  0E00               	movlw	0
 30219  0152AC  6E08               	movwf	i2Byte_GetZone@Offset,c
 30220                           
 30221                           ;Types.c: 70: while (pChunk >= pMax)
 30222  0152AE  D003               	goto	i2l732
 30223  0152B0                     
 30224                           ;Types.c: 71: {
 30225                           ;Types.c: 72: pChunk -= pMax;
 30226  0152B0  5003               	movf	i2Byte_GetZone@pMax,w,c
 30227  0152B2  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30228                           
 30229                           ;Types.c: 73: Offset += 1;
 30230  0152B4  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30231  0152B6                     i2l732:
 30232  0152B6  5003               	movf	i2Byte_GetZone@pMax,w,c
 30233  0152B8  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30234  0152BA  B0D8               	btfsc	status,0,c
 30235  0152BC  D7F9               	goto	i2l733
 30236                           
 30237                           ;Types.c: 74: }
 30238                           ;Types.c: 75: pChunk *= pChunkSize;
 30239  0152BE  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30240  0152C0  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30241  0152C2  50F3               	movf	prodl,w,c
 30242  0152C4  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30243                           
 30244                           ;Types.c: 76: pChunk += Offset;
 30245  0152C6  5008               	movf	i2Byte_GetZone@Offset,w,c
 30246  0152C8  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30247                           
 30248                           ;Types.c: 78: Output >>= pChunk;
 30249  0152CA  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30250  0152CC  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30251  0152CE  D002               	goto	i2u502_40
 30252  0152D0                     i2u502_45:
 30253  0152D0  90D8               	bcf	status,0,c
 30254  0152D2  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30255  0152D4                     i2u502_40:
 30256  0152D4  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30257  0152D6  D7FC               	goto	i2u502_45
 30258                           
 30259                           ;Types.c: 79: Output &= MASK;
 30260  0152D8  5007               	movf	i2Byte_GetZone@MASK,w,c
 30261  0152DA  1609               	andwf	i2Byte_GetZone@Output,f,c
 30262                           
 30263                           ;Types.c: 80: return Output;
 30264  0152DC  5009               	movf	i2Byte_GetZone@Output,w,c
 30265  0152DE  0012               	return	
 30266  0152E0                     __end_ofi2_Byte_GetZone:
 30267                           	opt stack 0
 30268                           tosu	equ	0xFFF
 30269                           tosh	equ	0xFFE
 30270                           tosl	equ	0xFFD
 30271                           pclatu	equ	0xFFB
 30272                           pclath	equ	0xFFA
 30273                           tblptru	equ	0xFF8
 30274                           tblptrh	equ	0xFF7
 30275                           tblptrl	equ	0xFF6
 30276                           tablat	equ	0xFF5
 30277                           prodh	equ	0xFF4
 30278                           prodl	equ	0xFF3
 30279                           intcon	equ	0xFF2
 30280                           indf0	equ	0xFEF
 30281                           postinc0	equ	0xFEE
 30282                           fsr0h	equ	0xFEA
 30283                           fsr0l	equ	0xFE9
 30284                           wreg	equ	0xFE8
 30285                           indf1	equ	0xFE7
 30286                           postdec1	equ	0xFE5
 30287                           fsr1h	equ	0xFE2
 30288                           fsr1l	equ	0xFE1
 30289                           indf2	equ	0xFDF
 30290                           postinc2	equ	0xFDE
 30291                           postdec2	equ	0xFDD
 30292                           plusw2	equ	0xFDB
 30293                           fsr2h	equ	0xFDA
 30294                           fsr2l	equ	0xFD9
 30295                           status	equ	0xFD8
 30296                           
 30297 ;; *************** function i2_Byte_SetBit *****************
 30298 ;; Defined at:
 30299 ;;		line 32 in file "Library/Types.c"
 30300 ;; Parameters:    Size  Location     Type
 30301 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30302 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30303 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30304 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30305 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30306 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30307 ;;		 -> NULL(0), 
 30308 ;;  pBit            1    2[COMRAM] unsigned char 
 30309 ;;  pValue          1    3[COMRAM] unsigned char 
 30310 ;; Auto vars:     Size  Location     Type
 30311 ;;		None
 30312 ;; Return value:  Size  Location     Type
 30313 ;;                  1    wreg      void 
 30314 ;; Registers used:
 30315 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30316 ;; Tracked objects:
 30317 ;;		On entry : 0/0
 30318 ;;		On exit  : 0/0
 30319 ;;		Unchanged: 0/0
 30320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30323 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30324 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30325 ;;Total ram usage:        7 bytes
 30326 ;; Hardware stack levels used:    1
 30327 ;; This function calls:
 30328 ;;		Nothing
 30329 ;; This function is called by:
 30330 ;;		i2_Port_SetPin
 30331 ;; This function uses a non-reentrant model
 30332 ;;
 30333                           
 30334                           	psect	text165
 30335  015B82                     __ptext165:
 30336                           	opt stack 0
 30337  015B82                     i2_Byte_SetBit:
 30338                           	opt stack 15
 30339                           
 30340                           ;Types.c: 34: pValue &= 1;
 30341                           
 30342                           ;incstack = 0
 30343  015B82  0E01               	movlw	1
 30344  015B84  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30345                           
 30346                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30347  015B86  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30348  015B8A  0E01               	movlw	1
 30349  015B8C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30350  015B8E  2A05               	incf	??i2_Byte_SetBit,f,c
 30351  015B90  D002               	goto	i2u551_44
 30352  015B92                     i2u551_45:
 30353  015B92  90D8               	bcf	status,0,c
 30354  015B94  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30355  015B96                     i2u551_44:
 30356  015B96  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30357  015B98  D7FC               	goto	i2u551_45
 30358  015B9A  5006               	movf	??i2_Byte_SetBit+1,w,c
 30359  015B9C  0AFF               	xorlw	255
 30360  015B9E  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30361  015BA0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30362  015BA4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30363  015BA8  5007               	movf	??i2_Byte_SetBit+2,w,c
 30364  015BAA  16DF               	andwf	indf2,f,c
 30365                           
 30366                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30367  015BAC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30368  015BB0  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30369  015BB4  2A05               	incf	??i2_Byte_SetBit,f,c
 30370  015BB6  D002               	goto	i2u552_44
 30371  015BB8                     i2u552_45:
 30372  015BB8  90D8               	bcf	status,0,c
 30373  015BBA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30374  015BBC                     i2u552_44:
 30375  015BBC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30376  015BBE  D7FC               	goto	i2u552_45
 30377  015BC0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30378  015BC4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30379  015BC8  5006               	movf	??i2_Byte_SetBit+1,w,c
 30380  015BCA  12DF               	iorwf	indf2,f,c
 30381  015BCC  0012               	return		;funcret
 30382  015BCE                     __end_ofi2_Byte_SetBit:
 30383                           	opt stack 0
 30384                           tosu	equ	0xFFF
 30385                           tosh	equ	0xFFE
 30386                           tosl	equ	0xFFD
 30387                           pclatu	equ	0xFFB
 30388                           pclath	equ	0xFFA
 30389                           tblptru	equ	0xFF8
 30390                           tblptrh	equ	0xFF7
 30391                           tblptrl	equ	0xFF6
 30392                           tablat	equ	0xFF5
 30393                           prodh	equ	0xFF4
 30394                           prodl	equ	0xFF3
 30395                           intcon	equ	0xFF2
 30396                           indf0	equ	0xFEF
 30397                           postinc0	equ	0xFEE
 30398                           fsr0h	equ	0xFEA
 30399                           fsr0l	equ	0xFE9
 30400                           wreg	equ	0xFE8
 30401                           indf1	equ	0xFE7
 30402                           postdec1	equ	0xFE5
 30403                           fsr1h	equ	0xFE2
 30404                           fsr1l	equ	0xFE1
 30405                           indf2	equ	0xFDF
 30406                           postinc2	equ	0xFDE
 30407                           postdec2	equ	0xFDD
 30408                           plusw2	equ	0xFDB
 30409                           fsr2h	equ	0xFDA
 30410                           fsr2l	equ	0xFD9
 30411                           status	equ	0xFD8
 30412                           
 30413 ;; *************** function i2_MXK_SwitchTo *****************
 30414 ;; Defined at:
 30415 ;;		line 105 in file "Library/MXK.c"
 30416 ;; Parameters:    Size  Location     Type
 30417 ;;  pModule         1    wreg     enum E6927
 30418 ;; Auto vars:     Size  Location     Type
 30419 ;;  pModule         1    7[COMRAM] enum E6927
 30420 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30421 ;; Return value:  Size  Location     Type
 30422 ;;                  1    wreg      unsigned char 
 30423 ;; Registers used:
 30424 ;;		wreg, status,2, status,0, cstack
 30425 ;; Tracked objects:
 30426 ;;		On entry : 0/0
 30427 ;;		On exit  : 0/0
 30428 ;;		Unchanged: 0/0
 30429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30434 ;;Total ram usage:        2 bytes
 30435 ;; Hardware stack levels used:    1
 30436 ;; Hardware stack levels required when called:    1
 30437 ;; This function calls:
 30438 ;;		i2_delay_us
 30439 ;; This function is called by:
 30440 ;;		i2_Motor_Step
 30441 ;; This function uses a non-reentrant model
 30442 ;;
 30443                           
 30444                           	psect	text166
 30445  0160A6                     __ptext166:
 30446                           	opt stack 0
 30447  0160A6                     i2_MXK_SwitchTo:
 30448                           	opt stack 15
 30449                           
 30450                           ;incstack = 0
 30451                           ;i2MXK_SwitchTo@pModule stored from wreg
 30452  0160A6  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30453                           
 30454                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30455  0160A8  5086               	movf	3974,w,c	;volatile
 30456  0160AA  0B0F               	andlw	15
 30457  0160AC  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30458                           
 30459                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30460  0160AE  504B               	movf	_Bus_State,w,c
 30461  0160B0  A4D8               	btfss	status,2,c
 30462  0160B2  D002               	goto	i2l1730
 30463                           
 30464                           ;MXK.c: 110: return 0;
 30465  0160B4  0E00               	movlw	0
 30466  0160B6  0012               	return	
 30467  0160B8                     i2l1730:
 30468                           
 30469                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30470  0160B8  0E00               	movlw	0
 30471  0160BA  6E4B               	movwf	_Bus_State,c
 30472                           
 30473                           ;MXK.c: 114: if (CUR != pModule)
 30474  0160BC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30475  0160BE  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30476  0160C0  B4D8               	btfsc	status,2,c
 30477  0160C2  D00A               	goto	i2l1732
 30478                           
 30479                           ;MXK.c: 115: {
 30480                           ;MXK.c: 116: PORTG &= ~(0xF);
 30481  0160C4  0EF0               	movlw	240
 30482  0160C6  1686               	andwf	3974,f,c	;volatile
 30483                           
 30484                           ;MXK.c: 117: PORTG |= pModule;
 30485  0160C8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30486  0160CA  1286               	iorwf	3974,f,c	;volatile
 30487                           
 30488                           ;MXK.c: 120: delay_us(10);
 30489  0160CC  0E00               	movlw	0
 30490  0160CE  6E02               	movwf	i2delay_us@us+1,c
 30491  0160D0  0E0A               	movlw	10
 30492  0160D2  6E01               	movwf	i2delay_us@us,c
 30493  0160D4  EC44  F0AF         	call	i2_delay_us	;wreg free
 30494  0160D8                     i2l1732:
 30495                           
 30496                           ;MXK.c: 121: }
 30497                           ;MXK.c: 122: return 1;
 30498  0160D8  0E01               	movlw	1
 30499  0160DA  0012               	return	
 30500  0160DC                     __end_ofi2_MXK_SwitchTo:
 30501                           	opt stack 0
 30502                           tosu	equ	0xFFF
 30503                           tosh	equ	0xFFE
 30504                           tosl	equ	0xFFD
 30505                           pclatu	equ	0xFFB
 30506                           pclath	equ	0xFFA
 30507                           tblptru	equ	0xFF8
 30508                           tblptrh	equ	0xFF7
 30509                           tblptrl	equ	0xFF6
 30510                           tablat	equ	0xFF5
 30511                           prodh	equ	0xFF4
 30512                           prodl	equ	0xFF3
 30513                           intcon	equ	0xFF2
 30514                           indf0	equ	0xFEF
 30515                           postinc0	equ	0xFEE
 30516                           fsr0h	equ	0xFEA
 30517                           fsr0l	equ	0xFE9
 30518                           wreg	equ	0xFE8
 30519                           indf1	equ	0xFE7
 30520                           postdec1	equ	0xFE5
 30521                           fsr1h	equ	0xFE2
 30522                           fsr1l	equ	0xFE1
 30523                           indf2	equ	0xFDF
 30524                           postinc2	equ	0xFDE
 30525                           postdec2	equ	0xFDD
 30526                           plusw2	equ	0xFDB
 30527                           fsr2h	equ	0xFDA
 30528                           fsr2l	equ	0xFD9
 30529                           status	equ	0xFD8
 30530                           
 30531 ;; *************** function i2_delay_us *****************
 30532 ;; Defined at:
 30533 ;;		line 255 in file "Library/Types.c"
 30534 ;; Parameters:    Size  Location     Type
 30535 ;;  us              2    0[COMRAM] unsigned short 
 30536 ;; Auto vars:     Size  Location     Type
 30537 ;;  delay_us        4    2[COMRAM] unsigned long 
 30538 ;; Return value:  Size  Location     Type
 30539 ;;                  1    wreg      void 
 30540 ;; Registers used:
 30541 ;;		wreg, status,2, status,0
 30542 ;; Tracked objects:
 30543 ;;		On entry : 0/0
 30544 ;;		On exit  : 0/0
 30545 ;;		Unchanged: 0/0
 30546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30548 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30550 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30551 ;;Total ram usage:        6 bytes
 30552 ;; Hardware stack levels used:    1
 30553 ;; This function calls:
 30554 ;;		Nothing
 30555 ;; This function is called by:
 30556 ;;		i2_MXK_SwitchTo
 30557 ;; This function uses a non-reentrant model
 30558 ;;
 30559                           
 30560                           	psect	text167
 30561  015E88                     __ptext167:
 30562                           	opt stack 0
 30563  015E88                     i2_delay_us:
 30564                           	opt stack 15
 30565                           
 30566                           ;Types.c: 256: unsigned long u;
 30567                           ;Types.c: 257: while (us--) {
 30568                           
 30569                           ;incstack = 0
 30570  015E88  D016               	goto	i2u555_40
 30571  015E8A                     i2l9138:
 30572                           
 30573                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30574  015E8A  0E00               	movlw	0
 30575  015E8C  6E03               	movwf	i2delay_us@u,c
 30576  015E8E  0E00               	movlw	0
 30577  015E90  6E04               	movwf	i2delay_us@u+1,c
 30578  015E92  0E00               	movlw	0
 30579  015E94  6E05               	movwf	i2delay_us@u+2,c
 30580  015E96  0E00               	movlw	0
 30581  015E98  6E06               	movwf	i2delay_us@u+3,c
 30582  015E9A                     i2l9140:
 30583  015E9A  5003               	movf	i2delay_us@u,w,c
 30584  015E9C  1004               	iorwf	i2delay_us@u+1,w,c
 30585  015E9E  1005               	iorwf	i2delay_us@u+2,w,c
 30586  015EA0  1006               	iorwf	i2delay_us@u+3,w,c
 30587  015EA2  A4D8               	btfss	status,2,c
 30588  015EA4  D008               	goto	i2u555_40
 30589  015EA6  F000               	nop		; ;# 
 30590  015EA8  0E01               	movlw	1
 30591  015EAA  2603               	addwf	i2delay_us@u,f,c
 30592  015EAC  0E00               	movlw	0
 30593  015EAE  2204               	addwfc	i2delay_us@u+1,f,c
 30594  015EB0  2205               	addwfc	i2delay_us@u+2,f,c
 30595  015EB2  2206               	addwfc	i2delay_us@u+3,f,c
 30596  015EB4  D7F2               	goto	i2l9140
 30597  015EB6                     i2u555_40:
 30598  015EB6  0601               	decf	i2delay_us@us,f,c
 30599  015EB8  A0D8               	btfss	status,0,c
 30600  015EBA  0602               	decf	i2delay_us@us+1,f,c
 30601  015EBC  2801               	incf	i2delay_us@us,w,c
 30602  015EBE  E1E5               	bnz	i2l9138
 30603  015EC0  2802               	incf	i2delay_us@us+1,w,c
 30604  015EC2  B4D8               	btfsc	status,2,c
 30605  015EC4  0012               	return	
 30606  015EC6  D7E1               	goto	i2l832
 30607  015EC8                     __end_ofi2_delay_us:
 30608                           	opt stack 0
 30609                           tosu	equ	0xFFF
 30610                           tosh	equ	0xFFE
 30611                           tosl	equ	0xFFD
 30612                           pclatu	equ	0xFFB
 30613                           pclath	equ	0xFFA
 30614                           tblptru	equ	0xFF8
 30615                           tblptrh	equ	0xFF7
 30616                           tblptrl	equ	0xFF6
 30617                           tablat	equ	0xFF5
 30618                           prodh	equ	0xFF4
 30619                           prodl	equ	0xFF3
 30620                           intcon	equ	0xFF2
 30621                           indf0	equ	0xFEF
 30622                           postinc0	equ	0xFEE
 30623                           fsr0h	equ	0xFEA
 30624                           fsr0l	equ	0xFE9
 30625                           wreg	equ	0xFE8
 30626                           indf1	equ	0xFE7
 30627                           postdec1	equ	0xFE5
 30628                           fsr1h	equ	0xFE2
 30629                           fsr1l	equ	0xFE1
 30630                           indf2	equ	0xFDF
 30631                           postinc2	equ	0xFDE
 30632                           postdec2	equ	0xFDD
 30633                           plusw2	equ	0xFDB
 30634                           fsr2h	equ	0xFDA
 30635                           fsr2l	equ	0xFD9
 30636                           status	equ	0xFD8
 30637                           
 30638 ;; *************** function i2_MXK_Release *****************
 30639 ;; Defined at:
 30640 ;;		line 130 in file "Library/MXK.c"
 30641 ;; Parameters:    Size  Location     Type
 30642 ;;		None
 30643 ;; Auto vars:     Size  Location     Type
 30644 ;;		None
 30645 ;; Return value:  Size  Location     Type
 30646 ;;                  1    wreg      unsigned char 
 30647 ;; Registers used:
 30648 ;;		wreg, status,2, status,0
 30649 ;; Tracked objects:
 30650 ;;		On entry : 0/0
 30651 ;;		On exit  : 0/0
 30652 ;;		Unchanged: 0/0
 30653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30658 ;;Total ram usage:        0 bytes
 30659 ;; Hardware stack levels used:    1
 30660 ;; This function calls:
 30661 ;;		Nothing
 30662 ;; This function is called by:
 30663 ;;		i2_Motor_Step
 30664 ;; This function uses a non-reentrant model
 30665 ;;
 30666                           
 30667                           	psect	text168
 30668  0166C4                     __ptext168:
 30669                           	opt stack 0
 30670  0166C4                     i2_MXK_Release:
 30671                           	opt stack 16
 30672                           
 30673                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30674                           
 30675                           ;incstack = 0
 30676  0166C4  0E01               	movlw	1
 30677  0166C6  6E4B               	movwf	_Bus_State,c
 30678                           
 30679                           ;MXK.c: 135: return 1;
 30680                           ;	Return value of i2_MXK_Release is never used
 30681  0166C8  0012               	return	
 30682  0166CA                     __end_ofi2_MXK_Release:
 30683                           	opt stack 0
 30684                           tosu	equ	0xFFF
 30685                           tosh	equ	0xFFE
 30686                           tosl	equ	0xFFD
 30687                           pclatu	equ	0xFFB
 30688                           pclath	equ	0xFFA
 30689                           tblptru	equ	0xFF8
 30690                           tblptrh	equ	0xFF7
 30691                           tblptrl	equ	0xFF6
 30692                           tablat	equ	0xFF5
 30693                           prodh	equ	0xFF4
 30694                           prodl	equ	0xFF3
 30695                           intcon	equ	0xFF2
 30696                           indf0	equ	0xFEF
 30697                           postinc0	equ	0xFEE
 30698                           fsr0h	equ	0xFEA
 30699                           fsr0l	equ	0xFE9
 30700                           wreg	equ	0xFE8
 30701                           indf1	equ	0xFE7
 30702                           postdec1	equ	0xFE5
 30703                           fsr1h	equ	0xFE2
 30704                           fsr1l	equ	0xFE1
 30705                           indf2	equ	0xFDF
 30706                           postinc2	equ	0xFDE
 30707                           postdec2	equ	0xFDD
 30708                           plusw2	equ	0xFDB
 30709                           fsr2h	equ	0xFDA
 30710                           fsr2l	equ	0xFD9
 30711                           status	equ	0xFD8
 30712                           
 30713 ;; *************** function i2_MXK_Queue *****************
 30714 ;; Defined at:
 30715 ;;		line 144 in file "Library/MXK.c"
 30716 ;; Parameters:    Size  Location     Type
 30717 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30718 ;;		 -> Absolute function(1), Motor_Step(1), 
 30719 ;; Auto vars:     Size  Location     Type
 30720 ;;		None
 30721 ;; Return value:  Size  Location     Type
 30722 ;;                  1    wreg      void 
 30723 ;; Registers used:
 30724 ;;		wreg, status,2, status,0
 30725 ;; Tracked objects:
 30726 ;;		On entry : 0/0
 30727 ;;		On exit  : 0/0
 30728 ;;		Unchanged: 0/0
 30729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30730 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30733 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30734 ;;Total ram usage:        3 bytes
 30735 ;; Hardware stack levels used:    1
 30736 ;; This function calls:
 30737 ;;		Nothing
 30738 ;; This function is called by:
 30739 ;;		i2_Motor_Step
 30740 ;; This function uses a non-reentrant model
 30741 ;;
 30742                           
 30743                           	psect	text169
 30744  01662A                     __ptext169:
 30745                           	opt stack 0
 30746  01662A                     i2_MXK_Queue:
 30747                           	opt stack 16
 30748                           
 30749                           ;MXK.c: 146: lQueue = pCallback;
 30750                           
 30751                           ;incstack = 0
 30752  01662A  C001  F0BC         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30753  01662E  C002  F0BD         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30754  016632  C003  F0BE         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30755  016636  0012               	return		;funcret
 30756  016638                     __end_ofi2_MXK_Queue:
 30757                           	opt stack 0
 30758                           tosu	equ	0xFFF
 30759                           tosh	equ	0xFFE
 30760                           tosl	equ	0xFFD
 30761                           pclatu	equ	0xFFB
 30762                           pclath	equ	0xFFA
 30763                           tblptru	equ	0xFF8
 30764                           tblptrh	equ	0xFF7
 30765                           tblptrl	equ	0xFF6
 30766                           tablat	equ	0xFF5
 30767                           prodh	equ	0xFF4
 30768                           prodl	equ	0xFF3
 30769                           intcon	equ	0xFF2
 30770                           indf0	equ	0xFEF
 30771                           postinc0	equ	0xFEE
 30772                           fsr0h	equ	0xFEA
 30773                           fsr0l	equ	0xFE9
 30774                           wreg	equ	0xFE8
 30775                           indf1	equ	0xFE7
 30776                           postdec1	equ	0xFE5
 30777                           fsr1h	equ	0xFE2
 30778                           fsr1l	equ	0xFE1
 30779                           indf2	equ	0xFDF
 30780                           postinc2	equ	0xFDE
 30781                           postdec2	equ	0xFDD
 30782                           plusw2	equ	0xFDB
 30783                           fsr2h	equ	0xFDA
 30784                           fsr2l	equ	0xFD9
 30785                           status	equ	0xFD8
 30786                           tosu	equ	0xFFF
 30787                           tosh	equ	0xFFE
 30788                           tosl	equ	0xFFD
 30789                           pclatu	equ	0xFFB
 30790                           pclath	equ	0xFFA
 30791                           tblptru	equ	0xFF8
 30792                           tblptrh	equ	0xFF7
 30793                           tblptrl	equ	0xFF6
 30794                           tablat	equ	0xFF5
 30795                           prodh	equ	0xFF4
 30796                           prodl	equ	0xFF3
 30797                           intcon	equ	0xFF2
 30798                           indf0	equ	0xFEF
 30799                           postinc0	equ	0xFEE
 30800                           fsr0h	equ	0xFEA
 30801                           fsr0l	equ	0xFE9
 30802                           wreg	equ	0xFE8
 30803                           indf1	equ	0xFE7
 30804                           postdec1	equ	0xFE5
 30805                           fsr1h	equ	0xFE2
 30806                           fsr1l	equ	0xFE1
 30807                           indf2	equ	0xFDF
 30808                           postinc2	equ	0xFDE
 30809                           postdec2	equ	0xFDD
 30810                           plusw2	equ	0xFDB
 30811                           fsr2h	equ	0xFDA
 30812                           fsr2l	equ	0xFD9
 30813                           status	equ	0xFD8
 30814                           
 30815                           	psect	text170
 30816  000000                     __ptext170:
 30817                           	opt stack 0
 30818                           tosu	equ	0xFFF
 30819                           tosh	equ	0xFFE
 30820                           tosl	equ	0xFFD
 30821                           pclatu	equ	0xFFB
 30822                           pclath	equ	0xFFA
 30823                           tblptru	equ	0xFF8
 30824                           tblptrh	equ	0xFF7
 30825                           tblptrl	equ	0xFF6
 30826                           tablat	equ	0xFF5
 30827                           prodh	equ	0xFF4
 30828                           prodl	equ	0xFF3
 30829                           intcon	equ	0xFF2
 30830                           indf0	equ	0xFEF
 30831                           postinc0	equ	0xFEE
 30832                           fsr0h	equ	0xFEA
 30833                           fsr0l	equ	0xFE9
 30834                           wreg	equ	0xFE8
 30835                           indf1	equ	0xFE7
 30836                           postdec1	equ	0xFE5
 30837                           fsr1h	equ	0xFE2
 30838                           fsr1l	equ	0xFE1
 30839                           indf2	equ	0xFDF
 30840                           postinc2	equ	0xFDE
 30841                           postdec2	equ	0xFDD
 30842                           plusw2	equ	0xFDB
 30843                           fsr2h	equ	0xFDA
 30844                           fsr2l	equ	0xFD9
 30845                           status	equ	0xFD8
 30846                           
 30847                           	psect	rparam
 30848  0000                     tosu	equ	0xFFF
 30849                           tosh	equ	0xFFE
 30850                           tosl	equ	0xFFD
 30851                           pclatu	equ	0xFFB
 30852                           pclath	equ	0xFFA
 30853                           tblptru	equ	0xFF8
 30854                           tblptrh	equ	0xFF7
 30855                           tblptrl	equ	0xFF6
 30856                           tablat	equ	0xFF5
 30857                           prodh	equ	0xFF4
 30858                           prodl	equ	0xFF3
 30859                           intcon	equ	0xFF2
 30860                           indf0	equ	0xFEF
 30861                           postinc0	equ	0xFEE
 30862                           fsr0h	equ	0xFEA
 30863                           fsr0l	equ	0xFE9
 30864                           wreg	equ	0xFE8
 30865                           indf1	equ	0xFE7
 30866                           postdec1	equ	0xFE5
 30867                           fsr1h	equ	0xFE2
 30868                           fsr1l	equ	0xFE1
 30869                           indf2	equ	0xFDF
 30870                           postinc2	equ	0xFDE
 30871                           postdec2	equ	0xFDD
 30872                           plusw2	equ	0xFDB
 30873                           fsr2h	equ	0xFDA
 30874                           fsr2l	equ	0xFD9
 30875                           status	equ	0xFD8
 30876                           
 30877                           	psect	temp
 30878  000051                     btemp:
 30879                           	opt stack 0
 30880  000051                     	ds	1
 30881  0000                     int$flags	set	btemp
 30882  0000                     wtemp6	set	btemp+1
 30883                           tosu	equ	0xFFF
 30884                           tosh	equ	0xFFE
 30885                           tosl	equ	0xFFD
 30886                           pclatu	equ	0xFFB
 30887                           pclath	equ	0xFFA
 30888                           tblptru	equ	0xFF8
 30889                           tblptrh	equ	0xFF7
 30890                           tblptrl	equ	0xFF6
 30891                           tablat	equ	0xFF5
 30892                           prodh	equ	0xFF4
 30893                           prodl	equ	0xFF3
 30894                           intcon	equ	0xFF2
 30895                           indf0	equ	0xFEF
 30896                           postinc0	equ	0xFEE
 30897                           fsr0h	equ	0xFEA
 30898                           fsr0l	equ	0xFE9
 30899                           wreg	equ	0xFE8
 30900                           indf1	equ	0xFE7
 30901                           postdec1	equ	0xFE5
 30902                           fsr1h	equ	0xFE2
 30903                           fsr1l	equ	0xFE1
 30904                           indf2	equ	0xFDF
 30905                           postinc2	equ	0xFDE
 30906                           postdec2	equ	0xFDD
 30907                           plusw2	equ	0xFDB
 30908                           fsr2h	equ	0xFDA
 30909                           fsr2l	equ	0xFD9
 30910                           status	equ	0xFD8


Data Sizes:
    Strings     165
    Constant    730
    Data        29
    BSS         824
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     89     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     252
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_14(CODE[21]), STR_13(CODE[21]), STR_12(CODE[21]), STR_11(CODE[21]), 
		 -> STR_10(CODE[21]), STR_9(CODE[3]), STR_8(CODE[60]), STR_7(CODE[3]), 
		 -> STR_6(CODE[14]), STR_5(CODE[3]), STR_4(CODE[46]), STR_3(CODE[3]), 
		 -> STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK3[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK3[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK3[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_mode4
    _mode4->___fltol
    _move_and_rotate->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1850188
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  211603
                                             88 BANK0      1     1      0
                                              0 BANK3      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
               _irobot_move_straight
                      _irobot_rotate
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0   19517
                    _move_and_rotate
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   19517
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                       10     6      4    9290
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  170606
                                             44 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194944
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    6491
                                             21 BANK0     18     8     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1249
                                             82 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    9185
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     848
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3369
                                             39 BANK0     25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    4007
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  998400
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362616
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291428
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262117
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94741
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1622
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FC      11       98.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     59      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B4      12        0.0%
DATA                 0      0     5E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Sep 14 15:47:23 2017

                                 _update_angle 65C0                                  i2_Timer0_Stop 66BE  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 381E                                              _A 004C  
                        __end_of_irobot_rotate 4650                                              l8 3DC6  
                                 ___fldiv@aexp 0086                                   ___fldiv@bexp 0085  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6446                                   ___fldiv@sign 007A  
                                           l11 310A                                             l12 30F4  
                                           l90 3040                                             l85 2F3C  
                                           l87 2FAA                                             l89 3016  
                                 ___awdiv@sign 0065                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 0062                                  _HMI_DIPSwitch 64E4  
                           LCD_DrawField@pSize 0078                             LCD_DrawField@count 007E  
                   __end_of_irobot_stop_motion 5D36                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 665C                           ADC_ClockDivision@reg 0061  
                                          l120 4C56                                            l121 4C6C  
                                          l122 4C82                                            l220 58A8  
                                          l117 4C98                                            l221 586C  
                                          l118 4C40                                            l230 5B04  
                                          l222 58B8                                            l223 588A  
                                  ?_LED_Toggle 0001                                            l234 5CDE  
                                          l235 5CAE                                            l227 5B20  
                                          l403 2BCA                                            l412 28A6  
                                          l228 5AE8                                            l340 4904  
                                          l404 2B6A                                            l237 5CC6  
                                          l421 283A                                            l413 273C  
                                          l341 4912                                            l405 2BFA  
                                ??_Console_Tab 0068                                            l430 3F3A  
                                          l414 28C2                                            l350 4A0C  
                                          l342 4920                                            l510 1D68  
                                          l406 2B82                                            l415 2762  
                                          l351 499C                                            l343 492E  
                                          l511 1E78                                            l407 2B9A  
                                          l183 4AC0                                            l432 3F64  
                                          l600 08E2                                            l344 493C  
                                          l512 1D8A                                            l408 2BB2  
                                          l184 4A9A                                            l433 3F94  
                                          l417 27CE                                            l601 0A76  
                                          l353 49AA                                            l337 4966  
                                          l345 494A                                            l610 0AFE  
                                          l602 0914                                            l354 49B8  
                                          l346 4958                                            l338 48F6  
                                          l370 4896                                            l427 3FBE  
                                          l611 0B4C                                            l603 0A88  
                                          l355 49C6                                            l363 48C0  
                                          l371 48A4                                            l531 1822  
                                  ?_HMI_GetBar 0001                                            l612 0B9A  
                                          l604 09C2                                            l356 49D4  
                                          l372 48B2                                            l364 4850  
                                          l532 1846                                            l516 1DD2  
                                          l357 49E2                                            l509 1E5C  
                                          l614 0C7C                                            l358 49F0  
                                          l366 485E                                            l526 1866  
                                          l615 0C74                                            l607 0BE8  
                                          l359 49FE                                            l367 486C  
                                          l519 1E1A                                            l616 0C8E  
                                          l608 0AB0                                            l368 487A  
                                          l528 1884                                            l393 59DA  
                                          l617 0C78                                            l609 0C06  
                                          l369 4888                                            l529 1802  
                                          l483 1BC8                                            l732 4BDA  
                                          l900 1940                                            l476 1CA0  
                                          l733 4BCE                                            l901 1944  
                                          l389 5730                                            l477 1B12  
                                          l397 5C5A                                            l910 1968  
                                          l902 1948                                            l726 43C4  
                                          l478 1CBC                                            l486 1C34  
                                          l654 628C                                            l911 196C  
                                          l903 194C                                            l727 43B8  
                                          l479 1B5C                                            l655 6284  
                                          l912 1970                                            l904 1950  
                                          l824 5664                                            l832 5A92  
                                          l913 1974                                            l905 1954  
                                          l921 55DA                                            l673 6164  
                                          l657 6288                                            l681 5532  
                                          l914 1978                                            l906 1958  
                                          l922 55A6                                            l930 3C04  
                                          l915 197C                                            l907 195C  
                                          l819 5174                                            l916 1980  
                                          l908 1960                                            l860 18A0  
                                          l684 5548                                            l781 5FAE  
                                          l853 1988                                            l917 1984  
                                          l909 1964                                            l861 18A4  
                                          l597 08F0                                            l870 18C8  
                                          l862 18A8                                            l854 188C  
                                          l598 08D8                                            l678 556E  
                                          l686 5558                                            l871 18CC  
                                          l863 18AC                                            l599 0900  
                                          l679 5522                                            l880 18F0  
                                          l872 18D0                                            l864 18B0  
                                          l856 1890                                            l928 3C84  
                                          l776 5D66                                            l881 18F4  
                                          l873 18D4                                            l865 18B4  
                                          l857 1894                                            l929 3C54  
                                          l890 1918                                            l882 18F8  
                                          l874 18D8                                            l866 18B8  
                                          l858 1898                                            l891 191C  
                                          l883 18FC                                            l875 18DC  
                                          l867 18BC                                            l859 189C  
                                          l892 1920                                            l884 1900  
                                          l876 18E0                                            l868 18C0  
                                          l893 1924                                            l885 1904  
                                          l877 18E4                                            l869 18C4  
                                          l894 1928                                            l886 1908  
                                          l878 18E8                                            l990 4D62  
                                          l895 192C                                            l887 190C  
                                          l879 18EC                                            l983 4B5E  
                                          l896 1930                                            l888 1910  
                                          l976 4E7C                                            l992 4D72  
                                          l984 4AE2                                            l897 1934  
                                          l889 1914                                            l985 4B5A  
                                          l898 1938                                            l978 4E8C  
                                          l899 193C                                            l997 5940  
                                          l999 5964                                            _PR2 000FCB  
                                          _dip 0320                                            _val 00D6  
                              __end_of_ADC_Off 669E                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 0079                                   _Word_GetPair 5F82  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 0067                     __end_of_ADC_ConversionTime 5CA8  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 0070                             Console_MakeField@y 0071  
                                   _TXSTA1bits 000FAD                                _update_distance 65AE  
                                 Console_Tab@c 006F                                   Console_Tab@i 006E  
                          LCD_DrawField@pField 0072                                   Console_Tab@t 006D  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 0094  
                                 ___flmul@bexp 0099                                     i2_delay_us 5E88  
                         Port_Set@TypeRequired 0082                                   ___flmul@sign 0093  
                                 ___flmul@temp 009E                                   ___flmul@prod 009A  
                            Console_FormFeed@x 0062                              Console_FormFeed@y 0063  
                          LCD_DrawField@pPoint 0074                                 ?_LCD_DrawField 0072  
                        Port_SetPinType@Output 008A                                Port_SetPin@Type 0073  
                              Port_SetPin@pPin 0071                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 0069                                __end_of_LED_Set 5B32  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 46FA  
                                 ___fltol@exp1 00B7                                   _Word_SetPair 5D36  
                                         l1000 5980                                           l1010 402E  
                                         l1004 57D0                                  ?_Byte_GetZone 0060  
                                         l1005 57FE                                           l1200 42E4  
                                         l1040 28F0                                           l1201 4338  
                                         l1009 403A                                           l1041 28F6  
                                         l1202 4354                                           l1042 28FC  
                                         l1043 2902                                           l1204 437E  
                                         l1300 4F0E                                           l1036 2A4C  
                                         l1044 2908                                           l1205 4364  
                                         l1301 4F12                                           l1045 290E  
                                         l1037 28EA                                           l2021 5760  
                                         l2101 2D8C                                           l1302 4F1C  
                                         l1062 2124                                           l2110 5DFC  
                                         l2030 5758                                           l2022 573C  
                                         l2102 2CD0                                           l1207 4390  
                                         l1303 4F2A                                           l1063 2152  
                                         l1047 29B4                                           l2031 575C  
                                         l2103 2D18                                           l3000 2416  
                                         l1056 1FB4                                           l2112 5DE8  
                                         l2024 5740                                           l2040 393A  
                                         l2104 2CD6                                           l1313 5C88  
                                         l1153 2392                                           l1057 217A  
                                         l2025 5744                                           l2041 3940  
                                         l3002 242E                                           l1082 3EB4  
                                         l1058 1FBC                                           l1146 5096  
                                         l2114 5DF0                                           l2026 5748  
                                         l2042 3946                                           l3003 241E  
                                         l1059 1FE6                                           l2027 574C  
                                         l2035 39D2                                           l2051 39A6  
                                         l2043 394C                                           l1084 3EBC  
                                         l2028 5750                                           l2044 3952  
                                         l2036 3924                                           l3013 24FE  
                                         l3005 248A                                           l1077 3E84  
                                         l2029 5754                                           l1254 6590  
                                         l2118 564E                                           l3014 2550  
                                         l3006 246C                                           l1158 5F04  
                                         l2070 4E3C                                           l2062 4DF6  
                                         l2046 3966                                           l2038 392E  
                                         l2311 40D8                                           l2119 5610  
                                         l2303 47D0                                           l1079 3E94  
                                         l2039 3934                                           l2312 4104  
                                         l1280 4F90                                           l2144 5A18  
                                         l3008 24D8                                           l2400 3ABE  
                                         l2313 4130                                           l2305 4802  
                                         l3009 24C8                                           l2049 3992  
                                         l2161 4628                                           l2401 3A18  
                                         l2074 4E5A                                           l2066 4E16  
                                         l2058 4DDC                                           l2162 4614  
                                         l1283 4FF2                                           l2139 44D0  
                                         l2331 0DCE                                           l2403 3A1E  
                                         l1276 4F78                                           l2324 0D1C  
                                         l2156 45D4                                           l2404 3A24  
                                         l2341 0F42                                           l2333 0E6E  
                                         l2405 3A2A                                           l1294 4F32  
                                         l1630 3658                                           l2430 258C  
                                         l2422 2570                                           l2334 0E9E  
                                         l2158 45DA                                           l2318 5026  
                                         l2406 3A30                                           l1295 4EF8  
                                         l1631 36B4                                           l2431 25A4  
                                         l2423 2584                                           l2095 2C8C  
                                         l2327 0D38                                           l2159 45FC  
                                         l2319 5012                                           l1296 4F5C  
                                         l1632 3698                                           l2168 5D1A  
                                         l2440 26F6                                           l2424 25B4  
                                         l2432 25AE                                           l2096 2C46  
                                         l2336 0EEA                                           l2360 3576  
                                         l1297 4F02                                           l2441 269E  
                                         l2433 2628                                           l2329 0D96  
                                         l1298 4F06                                           l1730 5E1C  
                                         l2098 2CBC                                           l2346 10F6  
                                         l2338 0FAC                                           l2354 34EA  
                                         l1299 4F0A                                           l1627 3700  
                                         l2435 2642                                           l2099 2CA0  
                                         l2347 105C                                           l2339 0F0A  
                                         l1724 5F50                                           l1732 5E44  
                                         l1628 36F6                                           l2620 41FE  
                                         l2612 417A                                           l2372 04EA  
                                         l1629 3676                                           l2621 4212  
                                         l2613 4190                                           l2429 25F0  
                                         l2349 1094                                           l2357 3506  
                                         l2381 0774                                           l1726 5F7E  
                                         l2390 0896                                           l2382 06D2  
                                         l2374 0598                                           l1735 647A  
                                         l2615 41BA                                           l2439 2698  
                                         l2359 35C0                                           l2800 42C6  
                                         l2616 41AE                                           l2384 070A  
                                         l2376 0638                                           l2377 0668  
                                         l2369 04CE                                           l1827 33BE  
                                         l2619 41F0                                           l2387 07EE  
                                         l2379 06B2                                           l1828 33DE  
                                         l2389 08A8                                           l2399 3A12  
                                         l1784 3258                                           l1873 5FF4  
                                         l1785 3266                                           l2682 37E6  
                                         l2674 3738                                           l1787 3270  
                                         l2683 37D6                                           l2852 5252  
                                         l2940 11B6                                           l2676 37BA  
                                         l2853 5260                                           l2941 11AC  
                                         l2685 380C                                           l2677 37A6  
                                         l2862 5912                                           l2950 1336  
                                         l2863 5920                                           l2943 120A  
                                         l2935 112A                                           l2848 521C  
                                         l2960 13E0                                           l2936 1158  
                                         l2849 5210                                           l2953 1386  
                                         l2945 1238                                           l2937 114E  
                                         l2858 58E8                                           l2962 1430  
                                         l2954 135C                                           l2946 133A  
                                         l2970 0048                                           l2859 58DC  
                                         l2795 425A                                           l2963 145E  
                                         l2955 1372                                           l2947 12B6  
                                         l2939 1188                                           l2971 0042  
                                         l2796 424A                                           l2964 1494  
                                         l2948 12EE                                           l2972 005A  
                                         l2965 14A4                                           l2949 12E2  
                                         l2981 0364                                           l2973 0078  
                                         l2966 14A8                                           l2990 040E  
                                         l2982 033A                                           l2974 00A2  
                                         l2799 42B4                                           l2991 0434  
                                         l2983 0350                                           l2975 009C  
                                         l2976 00B4                                           l2993 0462  
                                         l2977 00DC                                           l2969 001E  
                                         l2994 048C                                           l2995 0482  
                                         l2988 03BE                                           l2998 23DE  
                                         l2999 23EE                                 ??_Console_Init 0060  
                        Port_SetPinType@pInput 0086                                           STR_1 FFFB  
                                         STR_2 FF95                                           STR_3 FFFB  
                                         STR_4 FF95                                           STR_5 FFFB  
                                         STR_6 FFED                                           STR_7 FFFB  
                                         STR_8 FF59                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 4A3C                       __end_of_irobot_song_play 6588  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u9005 65E0  
                                         u9006 65E2                            __end_of_GetPortTRIS 48F0  
                                         u9070 3C70                                           u9400 5C06  
                                         u9080 57CC                                           u9240 41C0  
                                         u9090 57F6                                           u8700 4C0A  
                                         u9340 56A2                                           u9405 5C00  
                                         u9430 342A                                           u9190 5DDC  
                                         u9415 3376                                           u8720 510E  
                                         u9280 4260                                           u8705 4C04  
                                         u8810 5DB0                                           u9514 4D12  
                                         u9515 4D0C                                           u9460 5ACA  
                                         u9605 14FA                                           u8815 5DAA  
                                         u9615 1512                                           u8680 4BA4  
                                         u9625 152A                                           u8754 581E  
                                         u8755 5818                                           u9635 154C  
                                         _SPI1 035C                                           u8764 5850  
                                         _SPI2 0367                                           u8765 584A  
                                         u9645 16CC                                           u8950 5222  
                                         u8870 4DB6                                           u8687 4B9A  
                                         u9655 174A                                           u8784 4400  
                                         u9920 5A8A                                           u8880 4DBC  
                                         u8785 43FA                                           u9665 178C  
                                         u8794 4432                                           u9690 60FE  
                                         u8795 442C                                           u9675 17CE  
                                         u8980 58EE                                           u9838 3E32  
                                         u9695 60F8                                           u9848 309E  
                                         u9960 534E                                           _TMR0 000FD6  
                                         u9849 30B2                                           u9898 31DA  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 0065  
                                         _gISR 00B9                             Event_DIPSwitch@Bar 007A  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 0063  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 006F                                           _dist 00C2  
                                ?_Byte_SetByte 0060                                  ?_Byte_SetPair 006B  
                              __end_of_SPI_DCS 6172                                           _main 3A0E  
                   irobot_leds@powerLuminosity 0072                                           _init 47A4  
                                         _mode 00CA                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 006B                                           _itos 3BC6  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 0060  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 51F2                                  ??_Byte_SetBit 0064  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 0065                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 007F                              Timer0_Init@DIVIDE 0077  
                              ?_SPI_DisableISR 0060                               Motor_Move@pMotor 0063  
                          HMI_SetButton@pValue 0066                                  Console_Init@x 0062  
                                Console_Init@y 0063                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FF4B                           Set_Rotation@rotation 0066  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6336  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5A90  
                             __end_of_LCD_Init 308C                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 58C8  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00A8  
                      GetPortProperties@pInput 0062                                  ??_Button_Poll 007E  
                             __end_of_HMI_Init 2394                                          l12240 4D68  
                                        l12402 3C70                                          l12234 4D58  
                                        l12520 6604                                          l14114 2FAA  
                                        l14212 2366                                          l14124 304E  
                                        l12454 437E                                          l14142 4E82  
                                        l14136 4E72                                          l14224 5ED2  
                                        l14170 1FDC                                          l12670 5664  
                                        l13462 5A60                                          l12736 33BE  
                                        l12672 5676                                          l13544 2B60  
                                        l13616 508E                                          l13466 5A6E  
                                        l13490 5332                                          l13580 3E7A  
                                        l14508 2648                                          l12678 56A2  
                                        l12774 5A92                                          l13486 5324  
                                        l12776 5AA4                                          l13912 1494  
                                        l13690 3258                                          l13586 3E8A  
                                        l16412 0F0A                               __end_of_HMI_Poll 54B0  
                                        l16430 0FAC                                          l16446 105C  
                                        l16574 06D2                                          l16592 0774  
                                        _I2C1T 0040                                          _I2C2T 03C2  
                                ___fltol@sign1 00B6                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 14CC  
                              __end_of___awdiv 421C                          irobot_rotate@isScript 0082  
                                        ?_itos 006C                                          STR_10 FFD8  
                                        STR_11 FFC3                                          STR_12 FFC3  
                                        STR_13 FFC3                                          STR_14 FFC3  
                              __end_of___flmul 04A6                                __end_of___fltol 381E  
                                        u10000 2C00                                _Event_DIPSwitch 61D2  
                              __end_of___lldiv 42D8                                          u10120 5C82  
                                        u10200 32C4                                          u10040 3EFE  
                                        u10050 3F0A                                          u10230 3636  
                                        u10240 364A                                          u10154 612A  
                                        u10250 368A                                          u10090 50E4  
                                        u11210 2702                                          u10155 6124  
                                        u10500 1444                                          u10085 50A6  
                                        u10510 1472                                          u10270 45C8  
                                        u10600 00C8                                          u11240 3758  
                                        u10610 02DC                        __size_of_HMI_LeftSwitch 0018  
                                        u10700 0448                                ___awdiv@divisor 0062  
                                        u11245 374C                                          u10470 13DA  
                                        u11190 2684                                          u10615 02D0  
                                        u11280 37F0                                          u10820 2F3A  
                                        u10660 03B8                                          u11618 410C  
                                        u10690 0422                                          u11619 4120  
                                        u10860 304E                                          u10780 24E6  
                                        u14060 08C8                                          u11638 4138  
                                        u11639 414C                                          u10960 2162  
                                        u11578 40B4                                          u10890 4EE4  
                                        u11579 40C8                                          u11598 40E0  
                                        u13630 0D10                                          u11599 40F4  
                                        u13640 0D32                                          u13900 04E4  
                                        u13558 5F1A                                          u13750 0FC0  
                                        u13830 34DE                                          u13559 5F30  
                                        u13840 3500                                          u13890 04C2  
                                        u13990 0788                                          _INDEX 00E6  
                              __end_of___lwdiv 526A                                          _MASKS FD5B  
                              __end_of___lwmod 592A                                          i2l430 4712  
                                        i2l432 4738                                          i2l433 4762  
                                        i2l427 4788                                          i2l732 52B6  
                                        i2l733 52B0                                          i2l832 5E8A  
                                        i2l781 61C0                                ___awdiv@counter 0064  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 0076                                __end_of_getMode 415E  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03AE  
                                        _PortB 03A4                                          _PortC 00EA  
                                        _PortD 039A                                          _PortE 0390  
                                        _PortF 03B8                                          _PortG 0386  
                      __end_of_Port_SetPinType 28E4                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 006C                          ??_irobot_led_power_on 0074  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 0075  
                              __end_of_dpowers FD5B                                 ??_Byte_GetZone 0065  
                    irobot_move@moveTurnRadius 0072                                          _mode1 0CF4  
                                        _mode2 34B2                                          _mode3 659C  
                                        _mode4 04A6                                 Button_Poll@Pin 0083  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 409E  
                             __end_of_MXK_Init 2F1A                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 65E4                               __end_of_SPI_Init 0CF4  
                             __end_of_SPI_Send 558C                          __end_ofi2_MXK_Release 66CA  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 55F8                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 0063                              __end_of_ADC_Start 4FF8  
                               ??_Byte_SetPair 006F                                 ??_Byte_SetQuad 006F  
                                        plusw2 000FDB                                 ??_Byte_SetZone 0066  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 54B0  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 0061                                 _LCD_Word_Write 6392  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 03F4  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 0070  
                                 ?_irobot_init 0001                                __initialization 44F8  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 0070  
                          __end_of_Byte_GetBit 6110                         irobot_leds@powerColour 0071  
                                 __end_of_main 3AEE                                   __end_of_init 484A  
             irobot_query_and_update@packetIDs 0075                                   __end_of_itos 3C9E  
                         HMI_SetButton@reindex 0062                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 5866                               __end_of_InitList FD31  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 65E4  
                                    ??_ADC_Off 0060                        __end_of_update_distance 65C0  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 0068  
                                       ??_main 03FA                                         ??_init 00AA  
                                       ??_itos 0070                        _Console_MakeField$10974 006E  
                                __activetblptr 000003                              Port_SetPin@pInput 006F  
                            __end_of_LCD_Reset 5B82                              Port_SetPin@pValue 0072  
                                    ??_LED_Set 0075                              _MXK_InitDIPSwitch 63EC  
                            GetPortPORT@pInput 0062                         Port_CheckPairType@Pin1 008A  
                       Port_CheckPairType@Pin2 008B                              __end_of_LCD_Write 62F2  
                                  _GetPortPORT 4996                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 484A                                ??_LCD_DrawField 007C  
                   __end_of_PortProperty_Valid 5178                               __end_of_Port_Set 1886  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 3E48                            __end_of_Button_Poll 31F2  
                            Word_GetPair@pPair 006E                        LCD_FillRectangle@pPoint 006B  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 4CB6  
                                    ??_SPI_DCS 0062                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 66B2  
                                _HMI_SetNumber 6258                         Port_SetQuadType@Output 009A  
                                       _ANCON0 000FC1                               ___awdiv@dividend 0060  
                                       ?_putch 0001                               ??_Console_Render 0083  
                                ToSegment@pCHR 0060                               _Console_FormFeed 4D46  
                       Port_SetQuadType@pInput 0096                                         i2l1630 3884  
                                       i2l1631 38D0                                         i2l1632 38BC  
                                       i2l1730 60B8                                         i2l1627 390C  
                                       i2l1732 60D8                                         i2l1628 3902  
                                       i2l1629 389A                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9140 5E9A                                         i2l9138 5E8A  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 63B0                                 _Timer0_Restart 6650  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 009B  
                                       _TXREG1 000FAE                               __end_of___xxtofl 2562  
                               i2_MXK_SwitchTo 60A6                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 0062                                     _Reset_High 63CE  
                           Console_Render@temp 0085                                 ??_HMI_UpSwitch 0066  
                               OutSeg@pSegment 0063                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 0077                         ADC_SetChannel@pChannel 0061  
                             __end_of_delay_ms 56CC                                   LED_Init@pLED 008D  
                             __end_of_delay_us 5AE2                                  ??_Timer0_Init 0071  
                                ??_Timer2_Init 0071                                  ??_Timer0_Stop 0060  
                                   _Timer0_ISR 6200                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 007A                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 507A  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3C9E  
                   __end_of_load_iRScriptStack 5662                                     _Motor_Move 6036  
                                       _iRWall 0035                                  ??_Motor_Speed 007F  
                                   _Motor_Step 35EC                            rx_assign@byteNumber 0062  
                      __end_of_Event_DIPSwitch 6200                                         ___wmul 6070  
                              ??_HMI_DIPSwitch 0066                  load_iRScriptStack@bytesToLoad 006E  
                                    ??___fldiv 0076                                      ??___awdiv 0064  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 008F                                         _lMotor 00D8  
                                    ??___fltol 0100                                      ??___lldiv 0068  
                                       _lQueue 00BC                                     _TestButton 037C  
                                    ??___lwdiv 0064                             __size_of_ToSegment 0284  
                                    ??___lwmod 006B                       __end_of_Port_SetQuadType 1D60  
                     i2Byte_GetZone@pChunkSize 0005                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 4EEA                              GetPortTRIS@pInput 0062  
                           __size_of_Reset_Low 001E                                         clear_0 4560  
                                       clear_1 4572                                         clear_2 457E  
                                       clear_3 458A                                         clear_4 4596  
                             ___awdiv@quotient 0066                     irobot_stop_motion@isScript 0079  
                                ?_eusart_getch 0001                                     Port_Init@i 00A5  
                                   _iRDistance 00D2                              __end_of_MXK_Queue 662A  
                   __end_ofHMI_SetButton@F7213 FD68                                      ??_getMode 0084  
                                   _iRBumpLeft 00E0                                         _printf 2562  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 640A  
                                _ADC_Calibrate 6588                                     _iRDropLeft 00DE  
                               HMI_SetButton@v 0067                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 0061                                    _Console_Tab 3FDC  
                          LCD_Word_Write@value 0065                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 0063  
                     Port_CheckPortType@Output 0099                                      ?_ADC_Init 0064  
                           _twos_complement_of 5DC2                                ??i2_Port_SetPin 0014  
                                 __mediumconst FC7E                    __end_ofTimer2_Init@PRESCALE FD6B  
                     Port_CheckPortType@pDrive 0098                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 0096                                  ??_Port_SetPin 0073  
                                    ??_reverse 0064                                     _StepRotate 00C8  
                        Console_MakeField@Fill 0482                               ?_Port_SetPinType 0086  
                                       putch@c 0074                              Motor_Speed@pMotor 007B  
                               ?_HMI_SetNumber 0076                                 i2_Word_GetPair 61A2  
                      __end_of_Configure_GPIOs 5520                            irobot_leds@isScript 0073  
                             ??_MXK_TestButton 0066                         __end_of_Timer0_Restart 665C  
                                Set_Rotation@m 0065                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 0060                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 60DC  
                                 ___xxtofl@arg 006A                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 0069                                   ___xxtofl@val 0060  
                        _update_bump_and_cliff 5FFC                                ?_LCD_Word_Write 0065  
                                   __accesstop 0060                        __end_of__initialization 459C  
                                    ?_LCD_Fill 0069          irobot_query_and_update@packetVariable 0079  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 0092  
                                  _Byte_GetBit 60DC                                     _Stepstomin 00C6  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 6668  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 0068  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 0060  
                                   ___fltol@f1 00B2                                    _Byte_SetBit 5802  
                                __end_of_MASKS FD64                                 _PortA_Property FF57  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 006B  
                                    LCD_Fill@j 006C                            load_iRScriptStack@i 006F  
                                    LCD_Init@i 0097                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF55                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 669E                                   __pidataBANK3 6638  
            irobot_move_straight@straightSpeed 0079                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6446                                Console_Render@x 008A  
                              Console_Render@y 008B                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD31  
                         __end_of_Byte_GetZone 4C1E                                  __end_of_mode1 110C  
                                __end_of_mode2 35EC                                  __end_of_mode3 65AE  
                                __end_of_mode4 08D6                           ??_twos_complement_of 0062  
                            irobot_leds@LEDBit 0070                                 _PortC_Property FF53  
                          __end_of_Timer0_Init 3352                                  __end_of_putch 65F2  
                               ??_eusart_getch 0060                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 34B2                            __end_of_Timer0_Stop 66AC  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 008D  
                             ?_update_distance 0001                                      ?_SPI_Send 0060  
                               ??_eusart_putch 0060                                    _Button_Init 3D74  
                            Port_SetType@pType 009C                                    _Button_Poll 308C  
                         __end_of_Byte_SetByte 661C                           __end_of_Byte_SetPair 6314  
                               _HMI_LeftSwitch 6544                                 _PortD_Property FF51  
                         __end_of_Byte_SetQuad 6336                                   ??_LED_Toggle 0078  
                                 ??_HMI_GetBar 0060                     eusart_putch@eusartSendChar 0060  
                         __end_of_Byte_SetZone 4448                            __end_of_Motor_Speed 6258  
                               _HMI_DownSwitch 64FC                                  SPI_Send@pData 0062  
                        __end_of_MXK_DIPSwitch 64E4                                   ??_HMI_SetBar 0060  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 0068  
                               _PortE_Property FF4F                                     ??_ADC_Init 0067  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 61D2  
                      irobot_rotate@angleTotal 0083                                 _PortF_Property FF4D  
                      Port_CheckQuadType@Pair1 0093                        Port_CheckQuadType@Pair2 0094  
                     MXK_BlockSwitchTo@pModule 0067                                        ??_mode1 03F2  
                                      ??_mode2 008C                                        ??_mode3 0087  
                                      ??_mode4 00B8                                        ?_ADC_On 0001  
                            _Console_Backspace 592A                                ?_Timer0_Restart 0001  
                                      ??_putch 0074                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5E48                              __end_of_ToSegment 1B0A  
                               _PortG_Property FF4B                                     __pbssBANK0 00B9  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5DC2                             _irobot_stop_motion 5CF0  
                      Port_CheckQuadType@pQuad 0091                                reverse@iterator 0065  
                             ??_SPI_DisableISR 0062                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 63CE                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 006B  
                                   ??_LCD_Init 0095                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 3FDC                         __end_of_PortA_Property FF59  
             irobot_led_power_on@powerOnColour 0074                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 0060                                     ??_LED_Init 008D  
                     ADC_ClockDivision@pDivide 0060                             Byte_SetByte@pValue 0062  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5C60                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00A8                             ??_irobot_song_play 0061  
                                   ??_HMI_Poll 0084                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 008D                         __end_of_PortB_Property FF57  
                                ?_Timer0_Start 0060                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2C14                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 0088                             __end_of_LED_Toggle 5CF0  
                           __end_of_HMI_GetBar 66BE                       LCD_FillRectangle@pColour 0069  
                                   _angleTotal 00CC                            ??_Console_Backspace 0062  
                            Set_Addr_Window@xe 0066                              Set_Addr_Window@ye 0067  
                            Set_Addr_Window@xs 0068                              Set_Addr_Window@ys 0065  
                                      ?_OutSeg 0063                                    ?_Motor_Init 008D  
                           Byte_SetPair@pInput 006B                                    ?_Motor_Move 0063  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 006E  
                           __end_of_HMI_SetBar 6686                         __end_of_PortC_Property FF55  
                           Word_GetPair@pInput 006C                             __end_of_HMI_Render 5F06  
                               ??_Set_Rotation 0065                                      ?_Port_Set 006F  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 0060  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 0065  
                                 ??_ISR_Enable 0060                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 655C                         __end_of_PortD_Property FF53  
                                      _ADC_AN0 00F4                                        _ADC_AN1 03D9  
                                      _ADC_AN2 03D4                                        _ADC_AN3 03CF  
                                   ??_MXK_Init 00A6                              Port_GetPin@pInput 0060  
                            _Console_MakeField 3E48                                        _ADC_Off 6696  
                            ??_Console_NewLine 0060                       ADC_ClockDivision@unfound 0062  
                       __end_of_HMI_DownSwitch 6514                                     ??_SPI_Init 0093  
                       Event_TestButton@pState 0079                                     ??_SPI_Send 0063  
                                      ?_printf 0075                              ??_HMI_InitButtons 0060  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF51                            Console_Render@F6956 03E6  
                           ?_Console_MakeField 0065                                        _COUNTER 0029  
                              ??_HMI_SetButton 0060                           __end_of_HMI_UpSwitch 652C  
                         ??_irobot_stop_motion 0079                                        _LED_Set 5AE2  
                      _Console_IncrementCursor 579C                                      ?___xxtofl 0060  
                       __end_of_PortF_Property FF4F                                    _gBackcolour 00DC  
                              ??_HMI_SetNumber 0078                                      _I2C1_Done 031D  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 031A  
                                    _I2C1_More 0317                                      _I2C2_More 0314  
                                    ?_delay_ms 0060                      __end_of_Console_Backspace 5986  
                                    ?_delay_us 0060                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 6428                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 0060  
                       __end_of_PortG_Property FF4D                            ??_Console_MakeField 0067  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 00C4  
                                      _SPI_DCS 6142                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 0060                               ?_Configure_GPIOs 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 00AA                               ADC_Init@pChannel 0066  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00A4  
                           __end_of_ISR_Enable 667C                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 0060  
                            Event_TestButton@j 00E2                                     ??_Mode_Set 0060  
                               ??_Timer2_Clear 0060                                        _Font5x7 FD6B  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 0061  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 0063                           SPI_DisableISR@pInput 0060  
                                ?_Port_GetQuad 0060                                Byte_SetBit@pBit 0062  
                         Port_TogglePin@pInput 0074                          __end_ofi2_Byte_SetBit 5BCE  
                                    _ADC_Start 4F74                                        __Hparam 0000  
                            Port_GetQuad@pQuad 0062                                    _Timer0_Init 31F2  
                                  _Timer2_Init 3352                                        __Lparam 0000  
                                  _Timer0_Stop 66A6                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD51  
                                      _iRAngle 00D0                                  LCD_Write@mode 0063  
                              __size_of_OutSeg 0082                                     ??_Port_Set 0072  
                    __end_of_Console_MakeField 3F18                              _Console_PrintChar 28E4  
                                  _Motor_Speed 622E                                        _Stepper 03C9  
                                ?_Port_SetType 009A                                        _gCursor 0047  
                                      ___fldiv 110C                                        ___awdiv 415E  
                        ??_Console_ClearCursor 0060                                        ___flmul 0000  
                                      ___fltol 3712                                        _lBuffer 04C8  
                                      ___lldiv 421C                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 0060                                        ___lwdiv 51F2  
                                      ___lwmod 58C8                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4DD4                             ?_Console_PrintChar 0001  
                                      __pcinit 44F8                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 409E  
                                      __ptext0 3A0E                                        __ptext1 04A6  
                                      __ptext2 659C                                        __ptext3 4FF8  
                                      __ptext4 45A6                                        __ptext5 34B2  
                                      __ptext6 64B4                                        __ptext7 0CF4  
                                      __ptext8 65AE                                        __ptext9 5FFC  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6462                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD51                                      _T2CONbits 000FCA  
                                LED_Set@pValue 0074                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 0079                                     ??___xxtofl 0064  
                                 ?_GetPortPORT 0060                                   ?_GetPortTRIS 0060  
                          ??_Console_PrintChar 0070                                    _Port_GetPin 5D7C  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E2  
                          LCD_DrawRectangle@p4 03DE                                   ??i2_delay_us 0003  
                                   ??_delay_ms 0062                                     ??_delay_us 0062  
                                      _reverse 558C                                      _DIPSwitch 0372  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3F18  
                                  _iRBumpRight 00E1                                 LCD_DrawField@i 0082  
                                    _LCD_Reset 5B32                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 62D0                                    _iRDropRight 00DF  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 0060  
                         end_of_initialization 459C                            ADC_SetupIO@pChannel 0062  
                            ??_get_packet_size 0060  irobot_query_and_update@numberOfPacketRequests 0078  
                                   delay_us@us 0060                              ??_HMI_SetSegments 0063  
                      Console_PrintChar@pInput 0073                                   _Console_Init 4E60  
                         __end_of_eusart_getch 668E                        _irobot_query_and_update 2C14  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 5736  
                         __end_of_eusart_putch 660E                                        itos@Out 0074  
                               ??_Port_GetQuad 0063                             _PortProperty_Valid 50FC  
                           Byte_SetQuad@pInput 006B                             SPI_MinSpeed@pInput 006F  
                                    i2u1357_48 6218                             Byte_SetQuad@pValue 006E  
                          __end_of_ADC_SetupIO 6142                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 0064  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 0062  
                            ??_HMI_RightSwitch 0066                                ___lldiv@counter 006C  
                    __end_of_Console_PrintChar 2A82                            __end_of_ADC_Voltage 3BC6  
                               ??_Port_SetType 009D                     __end_of_Port_CheckQuadType 59E0  
                                      printf@c 0086                                        printf@f 0075  
                               Port_Init@pPort 00A2                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 0069  
                            __end_of_rx_assign 3A0E                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 006F  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 5C60  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 5EC8  
                           Button_Init@pInitIO 009F                                  _irobot_rotate 45A6  
                        Timer0_Init@pFrequency 006D                              ?_Port_SetQuadType 0096  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 0064  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 009A                                   ?_Console_Tab 0001  
                             Byte_GetZone@MASK 0066                          Console_Render@lCursor 0086  
                           _load_iRScriptStack 55F8                                      _MXK_Queue 661C  
                             __CFG_CPUDIV$OSC1 000000                                  ___xxtofl@sign 0068  
                             Byte_GetZone@pMax 0062                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 006C  
                              _Set_Addr_Window 4650                                 SPI_Init@pClock 008D  
                             ??_LCD_Word_Write 0067                                _sort_iRBumpDrop 4DD4  
                            ??_move_and_rotate 0087                                    ___fldiv@grs 0081  
                                  ___fldiv@rem 007B                          __end_of_LCD_DrawField 4AE0  
                               Port_Set@pInput 006F                                 SPI_Init@pInput 0093  
                         ??_PortProperty_Valid 0073                              __size_of_ADC_Init 007A  
                               Port_Set@pValue 0071                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 4CB6                                     ?_LCD_Write 0063  
                                 _Byte_GetPair 6428                             HMI_SetButton@F7213 FD64  
                          ?_load_iRScriptStack 0060                                   _Byte_GetZone 4B82  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 0080  
                            LCD_DrawField@ymax 0081                                 __end_of_ADC_On 66B8  
                               _Port_TogglePin 6172                               _Event_TestButton 5FC0  
                                  ___flmul@grs 0095                           Port_SetPinType@Props 008B  
                                 ?_Byte_GetBit 0060                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 660E                                   _Byte_SetPair 62F2  
                              ADC_SetupIO@MASK 0063                                   _Byte_SetQuad 6314  
                      __size_ofi2_Byte_GetZone 0076                                   _Byte_SetZone 4392  
                         Port_SetPinType@pType 0089                              ?i2_Timer0_Restart 0001  
                                 ?_Byte_SetBit 0060                                  ?_SPI_MaxSpeed 006F  
                            __size_of_LCD_Fill 0058                                   ??_Event_NULL 0060  
                            __size_of_LCD_Init 0172                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 006F                          __end_ofi2_Timer0_Stop 66C4  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                            __size_of_HMI_Poll 0074                                  ?_update_angle 0001  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                               ?_irobot_rotate 007D                                 __end_of_OutSeg 50FC  
                         ??_load_iRScriptStack 006A                   __end_of_irobot_move_straight 64CC  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 60A6  
                        __end_of_HMI_DIPSwitch 64FC                                  __pidataCOMRAM 6668  
                                 ?_Button_Init 009B                                   ?_Button_Poll 007B  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                           __end_of_Timer0_Clear 6650  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 6696  
                               __end_of_printf 2724                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 0060                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 006C                               ??_Timer0_Restart 0060  
                         __end_of_Timer0_Start 62D0                             Port_SetType@Output 009F  
                          start_initialization 44F8                                     ?_MXK_Queue 0060  
                     PortProperty_Valid@Errors 0075                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 52E0                             Port_SetType@pInput 009A  
                               _ADC_SetChannel 647E                                     HMI_Init@in 00A8  
                          HMI_SetNumber@pInput 0076                          __end_ofi2_Port_SetPin 47A4  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 0061  
                       __end_of_Port_TogglePin 61A2                                  ?_Word_SetPair 006F  
                            Byte_SetBit@pInput 0060                                       ??_ADC_On 0060  
                               ??_MXK_SwitchTo 0066                              Byte_SetBit@pValue 0063  
                           ?_LCD_FillRectangle 0069                      ??_irobot_query_and_update 0070  
                          _Console_ResetCursor 6356                    PortProperty_Valid@pPinDrive 0071  
                                  _ADC_SetupIO 6110                           MXK_BlockSwitchTo@CUR 0066  
                     PortProperty_Valid@pInput 006F                                  i2_MXK_Release 66C4  
                                  _ADC_Voltage 3AEE                         LCD_FillRectangle@pSize 006F  
                               SPI_Send@pInput 0060                                   ??_Reset_High 0074  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 0071  
                        Port_SetQuadType@pQuad 0098                                      _ToSegment 1886  
                          ??_LCD_FillRectangle 0073                          Port_SetQuadType@pType 0099  
                              _Console_NewLine 4AE0                                 ??_SPI_MinSpeed 0071  
                                  ??_ADC_Start 0064                                   _HMI_UpSwitch 6514  
                                    _Reset_Low 63B0                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 66AC                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 007D  
                               ADC_Init@pInput 0064                                      _gCharSize 03EE  
                             Timer2_Init@INDEX 00E4                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 0091  
                                     ??_OutSeg 0064                                      OutSeg@out 0067  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 0067  
                                 ??_Motor_Step 0074                                      _iRAngleSS 0304  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 0069                                       ??___wmul 0064  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2A82  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03E6  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 0063  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 0060                             Byte_SetZone@pValue 0065  
                                Mode_Set@pMode 0060                                       ??_printf 007F  
                      __end_of_Set_Addr_Window 46FA                       Port_CheckQuadType@Output 0095  
                      __end_of_sort_iRBumpDrop 4E60                                      _gLineSize 03EA  
                     Port_CheckQuadType@pDrive 0092                                 ??_Word_GetPair 006F  
                     Port_CheckQuadType@pInput 008F                           __end_of_Port_GetQuad 5C18  
                                    ___fldiv@a 0072                                      ___fldiv@b 006E  
                    __end_of_LCD_FillRectangle 5354                                    __pbssBIGRAM 04C8  
                       __end_of_ADC_SetChannel 649A                                       ?_LED_Set 0074  
                                    ___flmul@a 008B                                      ___flmul@b 0087  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 0062  
                           __end_of_Reset_High 63EC                                  __pcstackBANK0 0060  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK3 03F2                        ??_update_bump_and_cliff 007D  
                                   itos@Length 0072                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 0073                       __size_of_update_distance 0012  
                            __size_of___xxtofl 01CE                             __end_of_Timer0_ISR 622E  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 0079  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 1F8A  
                                     ?_SPI_DCS 0060                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 0074                                  ??_eusart_init 0060  
                                  ??_LCD_Write 0064                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 3D74  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 6070  
                           __end_of_Motor_Step 3712                          Timer2_Init@pFrequency 006D  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 008C  
            twos_complement_of@complementValue 0060                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 0089                       Port_CheckPairType@pInput 0086  
                               reverse@tempVar 0064                             _MXK_InitTestButton 640A  
                                   ?_Reset_Low 0001                                   ?_Timer0_Init 006D  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 006D  
                             ??_HMI_LeftSwitch 0066                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 0060                                  ??_irobot_leds 0073  
                                ??_irobot_init 0061                                ??_irobot_rotate 0081  
                                ??_irobot_move 0074                                  _lStepFunction 00BF  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 006D  
                             ??_HMI_DownSwitch 0066                                      __pintcode 1408  
                                __pmediumconst FC7E                                   ?_Motor_Speed 007B  
                        ??_Console_ResetCursor 0060                                       ?___fldiv 006E  
                                     ?___awdiv 0060                                      __ptext100 6142  
                                    __ptext101 3D74                                      __ptext110 56CC  
                                    __ptext102 63EC                                      __ptext111 50FC  
                                    __ptext103 66AC                                      __ptext120 4EEA  
                                    __ptext112 6314                                      __ptext104 640A  
                                    __ptext121 6588                                      __ptext113 4392  
                                    __ptext105 2724                                      __ptext130 6514  
                                    __ptext122 66B2                                      __ptext114 4E60  
                                    __ptext106 1B0A                                      __ptext131 652C  
                                    __ptext123 6696                                      __ptext115 4F74  
                                    __ptext107 5D36                                      __ptext140 558C  
                                    __ptext132 6544                                      __ptext124 409E  
                                    __ptext116 5178                                      __ptext108 62F2  
                                    __ptext141 58C8                                      __ptext133 655C  
                                    __ptext125 543C                                      __ptext117 6110  
                                    __ptext109 5986                                      __ptext150 6428  
                                    __ptext142 51F2                                      __ptext134 5BCE  
                                    __ptext126 308C                                      __ptext118 647E  
                                    __ptext151 4B82                                      __ptext143 42D8  
                                    __ptext135 61D2                                      __ptext127 64CC  
                                    __ptext119 5C60                                      __ptext160 665C  
                                    __ptext152 5802                                      __ptext144 1886  
                                    __ptext136 1404                                      __ptext128 64E4  
                                    __ptext161 46FA                                      __ptext153 5D7C  
                                    __ptext145 4CB6                                      __ptext137 5FC0  
                                    __ptext129 64FC                                      __ptext170 0000  
                                    __ptext162 61A2                                      __ptext154 667C  
                                    __ptext146 5CA8                                      __ptext138 6258  
                                    __ptext163 649A                                      __ptext155 66B8  
                                    __ptext147 6172                                      __ptext139 3BC6  
              __end_of_irobot_query_and_update 2D9A                                      __ptext164 526A  
                                    __ptext148 3F18                                      __ptext165 5B82  
                                    __ptext157 6200                                      __ptext149 5F82  
                                    __ptext166 60A6                                      __ptext158 381E  
                                    _pShiftVal 00D4                                      __ptext167 5E88  
                                    __ptext159 66BE                                      __ptext168 66C4  
                                    __ptext169 662A                                       ?___flmul 0087  
                                     ?___fltol 00B2                                       ?___lldiv 0060  
                                   ?_Port_Init 00A0                           Timer0_Init@pCPUClock 0073  
                                     ?___lwdiv 0060                                       ?___lwmod 0067  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 48F0                                       ?_getMode 0001  
                                 _eusart_getch 6686                    __end_ofTimer0_Init@PRESCALE FD41  
                              _get_packet_size 5736                                   _eusart_putch 6600  
                           ??_Console_FormFeed 0060                                _HMI_SetSegments 42D8  
                           ?_GetPortProperties 0060                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 0063                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 0060                                       _ADC_Init 5178  
                 irobot_rotate@rotateDirection 0085                          __end_of_HMI_SetButton 4D46  
                         __size_of_Console_Tab 00C2                                       ?_reverse 0060  
                         irobot_move@moveSpeed 0070                                   ?_Port_SetPin 006F  
                        __end_of_HMI_SetNumber 6282                               ___lwdiv@quotient 0065  
                              _HMI_RightSwitch 652C                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 0418                                 __size_of_mode2 013A  
                               __size_of_mode3 0012                                 __size_of_mode4 0430  
                          ??_GetPortProperties 0062                        __end_of_Console_NewLine 4B82  
                         ??_MXK_InitTestButton 008D                             Byte_GetPair@pInput 0069  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 66B2  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 64B4  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 649A  
                                     _LCD_Fill 5A38                                       _LCD_Init 2F1A  
                               ___wmul@product 0064                                       _HMIBoard 0322  
                               i2_Byte_GetZone 526A                                       _LED_Init 5866  
                                    delay_ms@u 0062                             Button_Poll@pButton 007B  
                                    delay_us@u 0062                                       _HMI_Init 219A  
                                     _HMI_Poll 543C                             MXK_Queue@pCallback 0060  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6392  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5E88  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 006D                                       i2u500_40 528C  
                                     i2u500_47 5282                                       i2u502_40 52D4  
                                     i2u502_45 52D0                                       _PIR1bits 000F9E  
                                     _PIR3bits 000FA4                                       i2u551_44 5B96  
                                     i2u551_45 5B92                                       i2u552_44 5BBC  
                                     i2u552_45 5BB8                                       i2u555_40 5EB6  
                                     i2u715_40 3862                                       i2u716_40 3876  
                                     i2u717_40 38AE                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15589 03F6                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 0061                               HMI_SetBar@pValue 0060  
                            Button_Init@pInput 009B                        __size_of_SPI_DisableISR 0028  
                                  _mode4$15590 03F2                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 008A                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4996  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4C1E  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5E48  
                           _Port_CheckPairType 56CC                                       _MXK_Init 2D9A  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 4FF8  
                              MXK_SwitchTo@CUR 0066                          __end_of_ADC_Calibrate 659C  
                          __end_of_irobot_leds 5A38                                       _SPI_Init 08D6  
                          __end_of_irobot_init 6600                       __end_of_Event_TestButton 5FFC  
                                     _SPI_Send 5520                            __end_of_irobot_move 44F8  
                                    _rx_assign 391E                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 0065                              ___wmul@multiplier 0060  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 0064  
                                   printf@flag 0081                           Timer2_Init@pCPUClock 0076  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 53C8                                     printf@prec 0080  
                        Motor_Speed@pFrequency 007D                              Byte_GetBit@pInput 0060  
                          Port_SetPinType@pPin 0088                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 64CC                             _Port_CheckQuadType 5986  
                          ?_Port_CheckPairType 0086                           __end_of_SPI_MinSpeed 543C  
                                ??_MXK_Dequeue 0076                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5C18  
                         __end_of_update_angle 65D2                          Button_Poll@pIncrement 007D  
                      PortProperty_Valid@F6830 FD41                           __end_ofi2_Motor_Step 391E  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 450C                                      copy_data1 452C  
                                    copy_data2 454C                                  ??_MXK_Release 0060  
                       __end_ofi2_Byte_GetPair 64B4                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 008F  
                        ?_irobot_move_straight 0079                         __end_ofi2_Byte_GetZone 52E0  
                          __end_ofi2_MXK_Queue 6638                                      mode2@dist 008C  
                          ?_Port_CheckPortType 0096                                itos@destination 006E  
                                     _InitList FC7F                     __end_of_irobot_init_song_0 6356  
                         _Motor_Step$intlevel0 35F2                                       _Mode_Set 65D2  
                           Port_GetQuad@Output 0065                              ??_update_distance 007D  
                                  ??_ToSegment 0060                                   _ISR_Function 1408  
                                 _Timer0_Clear 6644                             Port_GetQuad@pInput 0060  
                                 _Timer2_Clear 668E                           __end_of_Word_GetPair 5FC0  
                                     _lCBuffer 0400                           ??_Port_CheckPairType 008A  
                                  ??_Reset_Low 0074                                       __Hrparam 0000  
                                 _Timer0_Start 62AA                                   OutSeg@pInput 0066  
                               _Console_Render 1F8A                                       __Lrparam 0000  
                              Timer2_Init@RDIV 0072                                       _iRCliffL 0034  
                                     _iRCliffR 0031                              _stepsToMinDegrees 0300  
                               LCD_Write@value 0064                                       _Port_Set 14CC  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 5D7C                        __end_of_get_packet_size 579C  
                                  ??_Port_Init 00A3                        __end_of_HMI_SetSegments 4392  
                         ??_Port_CheckQuadType 0093                               __size_of___fldiv 03C0  
                             _irobot_song_play 6574                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 5F44                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 0099                               __size_of___lwmod 0062  
                                     _lBufferX 00E8                                       _lBufferY 00E7  
                          Timer2_Init@PRESCALE FD68                                     ?_rx_assign 0061  
                              LCD_Fill@pColour 0069                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 00DA  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 6544  
                       Byte_GetZone@pChunkSize 0064                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 0064                          __size_of_Port_SetType 022A  
                                reverse@length 0062                                      itos@input 006C  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 2394  
                          irobot_move@isScript 0078                             Motor_Init@pAddress 008F  
                                     _delay_ms 5662                                       _delay_us 5A90  
                                     _clearall 00E9                                ___lwdiv@divisor 0062  
                              ___lwdiv@counter 0064                                Port_GetPin@pPin 0062  
                                     __ptext10 65C0                                       __ptext11 2C14  
                                     __ptext20 415E                                       __ptext12 391E  
                                     __ptext21 579C                                       __ptext13 4DD4  
                                     __ptext30 6574                                       __ptext22 4AE0  
                                     __ptext14 5736                                       __ptext31 3712  
                                     __ptext23 4D46                                       __ptext15 6686  
                                     __ptext40 6070                                       __ptext32 622E  
                                     __ptext24 6356                                       __ptext16 2562  
                                     __ptext41 3E48                                       __ptext33 6036  
                                     __ptext25 592A                                       __ptext17 65E4  
                                     __ptext50 55F8                                       __ptext42 60DC  
                                     __ptext34 62AA                                       __ptext26 5E48  
                                     __ptext18 28E4                                       __ptext51 6336  
                                     __ptext43 3AEE                                       __ptext35 5EC8  
                                     __ptext27 5CF0                                       __ptext19 3FDC  
                                     __ptext60 1D60                                       __ptext52 65F2  
                                     __ptext44 2394                                       __ptext36 507A  
                                     __ptext28 4448                                       __ptext61 5C18  
                                     __ptext53 6600                                       __ptext45 0000  
                                     __ptext37 1F8A                                       __ptext29 5DC2  
                                     __ptext70 35EC                                       __ptext62 14CC  
                                     __ptext54 6374                                       __ptext46 110C  
                                     __ptext38 52E0                                       __ptext71 66A6  
                                     __ptext63 660E                                       __ptext55 3C9E  
                                     __ptext47 47A4                                       __ptext39 4A3C  
                          ??_MXK_BlockSwitchTo 0066                                       __ptext80 5A38  
                                     __ptext72 6650                                       __ptext64 484A  
                                     __ptext56 31F2                                       __ptext48 6446  
                                     __ptext81 4650                                       __ptext73 5E06  
                                     __ptext65 48F0                                       __ptext57 6644  
                                     __ptext49 59E0                                       __ptext90 63B0  
                                     __ptext82 6392                                       __ptext74 6462  
                                     __ptext66 4996                                       __ptext58 2D9A  
                                     __ptext91 63CE                                       __ptext83 62D0  
                                     __ptext75 661C                                       __ptext67 5866  
                                     __ptext59 2A82                                       __ptext92 6672  
                                     __ptext84 5520                                       __ptext76 5F44  
                                     __ptext68 5AE2                                       __ptext93 219A  
                                     __ptext85 65D2                                       __ptext77 5A90  
                                     __ptext69 5F06                                       __ptext94 53C8  
                                     __ptext86 54B0                                       __ptext78 2F1A  
                                     __ptext95 08D6                                       __ptext87 5354  
                                     __ptext79 4C1E                                       __ptext96 3352  
                                     __ptext88 5B32                                       __ptext97 421C  
                                     __ptext89 5662                                       __ptext98 668E  
                                     __ptext99 6282                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4EEA                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 6374                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 0079  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00A0                            __end_of_MXK_Dequeue 5F44  
                            HMI_SetSegments@in 0064                          Button_Init@pThreshold 009D  
                                __size_of_main 00E0                                  __size_of_init 00A6  
                                __size_of_itos 00D8                              Byte_GetPair@pPair 006B  
                       __end_of_Console_Render 219A                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                                   _Port_GetQuad 5BCE  
                          __end_of_MXK_Release 647E                                 _MXK_TestButton 655C  
                                i2_Byte_SetBit 5B82                        __end_of_move_and_rotate 507A  
                          ??_ADC_ClockDivision 0060                                   _iRDistanceSS 0308  
                                  _irobot_leds 59E0                                    _irobot_init 65F2  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 4448  
                               ADC_Voltage@max 00A6                                 ADC_Voltage@ref 00AA  
                    __end_of_MXK_BlockSwitchTo 5F82                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1D60                                   Port_Set@Type 0086  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 0095                                      printf@val 0084  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 0310                                 Timer0_Init@PRE 00E5  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5CA8  
                                   _HMI_GetBar 66B8                           Button_Init@pGetState 00A2  
                       PortProperty_Valid@Pair 0085                               ??_Port_TogglePin 0077  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 0072                                     _HMI_SetBar 667C  
                                   _HMI_Render 5EC8                               Byte_SetZone@MASK 006A  
                                  i2_MXK_Queue 662A                      __end_of_ADC_ClockDivision 4F74  
                               Timer2_Init@DIV 030C                                 Timer2_Init@PRE 00E3  
                             Byte_SetZone@pMax 0062                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 007B  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 00A5  
                                     itos@Data 0070                  __end_of_update_bump_and_cliff 6036  
                           LCD_FillRectangle@i 0075                             LCD_FillRectangle@j 0076  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 0060                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 0067                               ___lldiv@dividend 0060  
                       __end_of_MXK_TestButton 6574                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 041E  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 007C  
                     irobot_query_and_update@j 007A                                 _SPI_DisableISR 6282  
                   __end_of_twos_complement_of 5E06                       irobot_rotate@rotateAngle 007D  
                              Port_Init@pInput 00A0                                       printf@ap 0082  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 007F                                     _ISR_Enable 6672  
                             ?_HMI_SetSegments 0061                        Console_MakeField@Column 006C  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 0060  
                                SPI_DCS@pInput 0060                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 0066                                    ??_rx_assign 0063  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00A0                        Console_MakeField@pInput 006B  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 0068  
                                ??_GetPortPORT 0062                                ___lwmod@divisor 0069  
                                ??_GetPortTRIS 0062                          Timer0_Start@pFunction 0060  
                           Word_SetPair@pInput 006F                                ___lwmod@counter 006B  
                           Word_SetPair@pValue 0072                       ?_irobot_query_and_update 0066  
                             Motor_Init@pMotor 008D                                    _MXK_Dequeue 5F06  
                            ADC_Voltage@output 00AE                                  _distanceTotal 00CE  
                               LED_Toggle@pLED 0078                                  _LCD_DrawField 4A3C  
                             _Port_SetQuadType 1B0A                                    _MXK_Release 6462  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5E06  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 007B  
                           Byte_GetZone@Offset 0067                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 0071                                _Port_SetPinType 2724  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 0068  
                           Byte_GetZone@pChunk 0063                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 6374                             Byte_GetZone@pInput 0060  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 5802  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 62AA  
                                 _SPI_MaxSpeed 5354              irobot_query_and_update@streamSize 0077  
                                 _SPI_MinSpeed 53C8                             Port_Set@TypeActual 0084  
                             ?_move_and_rotate 0001  
