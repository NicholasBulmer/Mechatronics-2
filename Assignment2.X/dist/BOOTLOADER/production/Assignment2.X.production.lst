

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Sep 14 13:27:23 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1,inline
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1,inline
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1,inline
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1,inline
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   193                           	psect	text169,global,reloc=2,class=CODE,delta=1
   194                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   195                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   196  0000                     
   197                           ; Version 1.43
   198                           ; Generated 25/07/2017 GMT
   199                           ; 
   200                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   201                           ; All rights reserved.
   202                           ; 
   203                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   204                           ; 
   205                           ; Redistribution and use in source and binary forms, with or without modification, are
   206                           ; permitted provided that the following conditions are met:
   207                           ; 
   208                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   209                           ;        conditions and the following disclaimer.
   210                           ; 
   211                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   212                           ;        of conditions and the following disclaimer in the documentation and/or other
   213                           ;        materials provided with the distribution.
   214                           ; 
   215                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   216                           ;        software without specific prior written permission.
   217                           ; 
   218                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   219                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   220                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   221                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   222                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   223                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   224                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   225                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   226                           ; 
   227                           ; 
   228                           ; Code-generator required, PIC18F67J50 Definitions
   229                           ; 
   230                           ; SFR Addresses
   231  0000                     
   232                           	psect	idataCOMRAM
   233  016566                     __pidataCOMRAM:
   234                           	opt stack 0
   235                           
   236                           ;initializer for _gCursor
   237  016566  0006               	dw	6
   238  016568  0006               	dw	6
   239                           
   240                           ;initializer for _Bus_State
   241  01656A  01                 	db	1
   242                           
   243                           ;initializer for _A
   244  01656B  41                 	db	65
   245                           
   246                           ;initializer for _a
   247  01656C  61                 	db	97
   248                           
   249                           ;initializer for _zero
   250  01656D  30                 	db	48
   251                           
   252                           ;initializer for _l
   253  01656E  80                 	db	128
   254                           
   255                           ;initializer for _w
   256  01656F  80                 	db	128
   257                           
   258                           	psect	idataBANK0
   259  01659C                     __pidataBANK0:
   260                           	opt stack 0
   261                           
   262                           ;initializer for _TimerX
   263  01659C  0008               	dw	8
   264                           
   265                           ;initializer for _MinDist
   266  01659E  03E8               	dw	1000
   267                           
   268                           ;initializer for _gForecolour
   269  0165A0  FFFF               	dw	65535
   270                           
   271                           ;initializer for _change
   272  0165A2  01                 	db	1
   273                           
   274                           	psect	idataBANK3
   275  016536                     __pidataBANK3:
   276                           	opt stack 0
   277                           
   278                           ;initializer for Console_Render@F6956
   279  016536  0006               	dw	6
   280  016538  0006               	dw	6
   281                           
   282                           ;initializer for _gLineSize
   283  01653A  0080               	dw	128
   284  01653C  0007               	dw	7
   285                           
   286                           ;initializer for _gCharSize
   287  01653E  0005               	dw	5
   288  016540  0007               	dw	7
   289                           
   290                           	psect	mediumconst
   291  00FC86                     __pmediumconst:
   292                           	opt stack 0
   293  00FC86  00                 	db	0
   294  00FC87                     _InitList:
   295                           	opt stack 0
   296  00FC87  1100               	dw	4352
   297  00FC89  0080               	dw	128
   298  00FC8B  012C               	dw	300
   299  00FC8D  B100               	dw	45312
   300  00FC8F  0002               	dw	2
   301  00FC91  0035               	dw	53
   302  00FC93  0036               	dw	54
   303  00FC95  B200               	dw	45568
   304  00FC97  0002               	dw	2
   305  00FC99  0035               	dw	53
   306  00FC9B  0036               	dw	54
   307  00FC9D  B300               	dw	45824
   308  00FC9F  0002               	dw	2
   309  00FCA1  0035               	dw	53
   310  00FCA3  0036               	dw	54
   311  00FCA5  0002               	dw	2
   312  00FCA7  0035               	dw	53
   313  00FCA9  0036               	dw	54
   314  00FCAB  B400               	dw	46080
   315  00FCAD  0000               	dw	0
   316  00FCAF  C000               	dw	49152
   317  00FCB1  00A2               	dw	162
   318  00FCB3  0002               	dw	2
   319  00FCB5  0084               	dw	132
   320  00FCB7  C100               	dw	49408
   321  00FCB9  00C5               	dw	197
   322  00FCBB  C200               	dw	49664
   323  00FCBD  000D               	dw	13
   324  00FCBF  0000               	dw	0
   325  00FCC1  C300               	dw	49920
   326  00FCC3  008D               	dw	141
   327  00FCC5  002A               	dw	42
   328  00FCC7  C400               	dw	50176
   329  00FCC9  008D               	dw	141
   330  00FCCB  00EE               	dw	238
   331  00FCCD  C500               	dw	50432
   332  00FCCF  000A               	dw	10
   333  00FCD1  3600               	dw	13824
   334  00FCD3  00C8               	dw	200
   335  00FCD5  E000               	dw	57344
   336  00FCD7  0012               	dw	18
   337  00FCD9  001C               	dw	28
   338  00FCDB  0010               	dw	16
   339  00FCDD  0018               	dw	24
   340  00FCDF  0033               	dw	51
   341  00FCE1  002C               	dw	44
   342  00FCE3  0025               	dw	37
   343  00FCE5  0028               	dw	40
   344  00FCE7  0028               	dw	40
   345  00FCE9  0027               	dw	39
   346  00FCEB  002F               	dw	47
   347  00FCED  003C               	dw	60
   348  00FCEF  0000               	dw	0
   349  00FCF1  0003               	dw	3
   350  00FCF3  0003               	dw	3
   351  00FCF5  0010               	dw	16
   352  00FCF7  0080               	dw	128
   353  00FCF9  0078               	dw	120
   354  00FCFB  E100               	dw	57600
   355  00FCFD  0012               	dw	18
   356  00FCFF  001C               	dw	28
   357  00FD01  0010               	dw	16
   358  00FD03  0018               	dw	24
   359  00FD05  002D               	dw	45
   360  00FD07  0028               	dw	40
   361  00FD09  0023               	dw	35
   362  00FD0B  0028               	dw	40
   363  00FD0D  0028               	dw	40
   364  00FD0F  0026               	dw	38
   365  00FD11  002F               	dw	47
   366  00FD13  003B               	dw	59
   367  00FD15  0000               	dw	0
   368  00FD17  0003               	dw	3
   369  00FD19  0003               	dw	3
   370  00FD1B  0010               	dw	16
   371  00FD1D  3A00               	dw	14848
   372  00FD1F  0005               	dw	5
   373  00FD21  2A00               	dw	10752
   374  00FD23  0000               	dw	0
   375  00FD25  0002               	dw	2
   376  00FD27  0000               	dw	0
   377  00FD29  0081               	dw	129
   378  00FD2B  2B00               	dw	11008
   379  00FD2D  0000               	dw	0
   380  00FD2F  0003               	dw	3
   381  00FD31  0000               	dw	0
   382  00FD33  00A2               	dw	162
   383  00FD35  2900               	dw	10496
   384  00FD37  2C00               	dw	11264
   385  00FD39                     __end_of_InitList:
   386                           	opt stack 0
   387  00FD39                     Timer0_Init@PRESCALE:
   388                           	opt stack 0
   389  00FD39  0002               	dw	2
   390  00FD3B  0004               	dw	4
   391  00FD3D  0008               	dw	8
   392  00FD3F  0010               	dw	16
   393  00FD41  0020               	dw	32
   394  00FD43  0040               	dw	64
   395  00FD45  0080               	dw	128
   396  00FD47  0100               	dw	256
   397  00FD49                     __end_ofTimer0_Init@PRESCALE:
   398                           	opt stack 0
   399  00FD49                     PortProperty_Valid@F6830:
   400                           	opt stack 0
   401  00FD49  00                 	db	0
   402  00FD4A  01                 	db	1
   403  00FD4B  02                 	db	2
   404  00FD4C  00                 	db	0
   405  00FD4D  01                 	db	1
   406  00FD4E  00                 	db	0
   407  00FD4F  01                 	db	1
   408  00FD50  00                 	db	0
   409  00FD51  02                 	db	2
   410  00FD52  02                 	db	2
   411  00FD53  00                 	db	0
   412  00FD54  00                 	db	0
   413  00FD55  03                 	db	3
   414  00FD56  03                 	db	3
   415  00FD57  03                 	db	3
   416  00FD58  00                 	db	0
   417  00FD59                     __end_ofPortProperty_Valid@F6830:
   418                           	opt stack 0
   419  00FD59                     _dpowers:
   420                           	opt stack 0
   421  00FD59  0001               	dw	1
   422  00FD5B  000A               	dw	10
   423  00FD5D  0064               	dw	100
   424  00FD5F  03E8               	dw	1000
   425  00FD61  2710               	dw	10000
   426  00FD63                     __end_of_dpowers:
   427                           	opt stack 0
   428  00FD63                     _MASKS:
   429                           	opt stack 0
   430  00FD63  00                 	db	0
   431  00FD64  01                 	db	1
   432  00FD65  03                 	db	3
   433  00FD66  07                 	db	7
   434  00FD67  0F                 	db	15
   435  00FD68  1F                 	db	31
   436  00FD69  3F                 	db	63
   437  00FD6A  7F                 	db	127
   438  00FD6B  FF                 	db	255
   439  00FD6C                     __end_of_MASKS:
   440                           	opt stack 0
   441  00FD6C                     HMI_SetButton@F7213:
   442                           	opt stack 0
   443  00FD6C  00                 	db	0
   444  00FD6D  02                 	db	2
   445  00FD6E  01                 	db	1
   446  00FD6F  03                 	db	3
   447  00FD70                     __end_ofHMI_SetButton@F7213:
   448                           	opt stack 0
   449  00FD70                     Timer2_Init@PRESCALE:
   450                           	opt stack 0
   451  00FD70  01                 	db	1
   452  00FD71  04                 	db	4
   453  00FD72  10                 	db	16
   454  00FD73                     __end_ofTimer2_Init@PRESCALE:
   455                           	opt stack 0
   456  00FD73                     _Font5x7:
   457                           	opt stack 0
   458  00FD73  00                 	db	0
   459  00FD74  00                 	db	0
   460  00FD75  00                 	db	0
   461  00FD76  00                 	db	0
   462  00FD77  00                 	db	0
   463  00FD78  00                 	db	0
   464  00FD79  00                 	db	0
   465  00FD7A  5F                 	db	95
   466  00FD7B  00                 	db	0
   467  00FD7C  00                 	db	0
   468  00FD7D  00                 	db	0
   469  00FD7E  07                 	db	7
   470  00FD7F  00                 	db	0
   471  00FD80  07                 	db	7
   472  00FD81  00                 	db	0
   473  00FD82  14                 	db	20
   474  00FD83  7F                 	db	127
   475  00FD84  14                 	db	20
   476  00FD85  7F                 	db	127
   477  00FD86  14                 	db	20
   478  00FD87  24                 	db	36
   479  00FD88  2A                 	db	42
   480  00FD89  7F                 	db	127
   481  00FD8A  2A                 	db	42
   482  00FD8B  12                 	db	18
   483  00FD8C  23                 	db	35
   484  00FD8D  13                 	db	19
   485  00FD8E  08                 	db	8
   486  00FD8F  64                 	db	100
   487  00FD90  62                 	db	98
   488  00FD91  36                 	db	54
   489  00FD92  49                 	db	73
   490  00FD93  55                 	db	85
   491  00FD94  22                 	db	34
   492  00FD95  50                 	db	80
   493  00FD96  00                 	db	0
   494  00FD97  05                 	db	5
   495  00FD98  03                 	db	3
   496  00FD99  00                 	db	0
   497  00FD9A  00                 	db	0
   498  00FD9B  00                 	db	0
   499  00FD9C  1C                 	db	28
   500  00FD9D  22                 	db	34
   501  00FD9E  41                 	db	65
   502  00FD9F  00                 	db	0
   503  00FDA0  00                 	db	0
   504  00FDA1  41                 	db	65
   505  00FDA2  22                 	db	34
   506  00FDA3  1C                 	db	28
   507  00FDA4  00                 	db	0
   508  00FDA5  08                 	db	8
   509  00FDA6  2A                 	db	42
   510  00FDA7  1C                 	db	28
   511  00FDA8  2A                 	db	42
   512  00FDA9  08                 	db	8
   513  00FDAA  08                 	db	8
   514  00FDAB  08                 	db	8
   515  00FDAC  3E                 	db	62
   516  00FDAD  08                 	db	8
   517  00FDAE  08                 	db	8
   518  00FDAF  00                 	db	0
   519  00FDB0  50                 	db	80
   520  00FDB1  30                 	db	48
   521  00FDB2  00                 	db	0
   522  00FDB3  00                 	db	0
   523  00FDB4  08                 	db	8
   524  00FDB5  08                 	db	8
   525  00FDB6  08                 	db	8
   526  00FDB7  08                 	db	8
   527  00FDB8  08                 	db	8
   528  00FDB9  00                 	db	0
   529  00FDBA  60                 	db	96
   530  00FDBB  60                 	db	96
   531  00FDBC  00                 	db	0
   532  00FDBD  00                 	db	0
   533  00FDBE  20                 	db	32
   534  00FDBF  10                 	db	16
   535  00FDC0  08                 	db	8
   536  00FDC1  04                 	db	4
   537  00FDC2  02                 	db	2
   538  00FDC3  3E                 	db	62
   539  00FDC4  51                 	db	81
   540  00FDC5  49                 	db	73
   541  00FDC6  45                 	db	69
   542  00FDC7  3E                 	db	62
   543  00FDC8  00                 	db	0
   544  00FDC9  42                 	db	66
   545  00FDCA  7F                 	db	127
   546  00FDCB  40                 	db	64
   547  00FDCC  00                 	db	0
   548  00FDCD  42                 	db	66
   549  00FDCE  61                 	db	97
   550  00FDCF  51                 	db	81
   551  00FDD0  49                 	db	73
   552  00FDD1  46                 	db	70
   553  00FDD2  21                 	db	33
   554  00FDD3  41                 	db	65
   555  00FDD4  45                 	db	69
   556  00FDD5  4B                 	db	75
   557  00FDD6  31                 	db	49
   558  00FDD7  18                 	db	24
   559  00FDD8  14                 	db	20
   560  00FDD9  12                 	db	18
   561  00FDDA  7F                 	db	127
   562  00FDDB  10                 	db	16
   563  00FDDC  27                 	db	39
   564  00FDDD  45                 	db	69
   565  00FDDE  45                 	db	69
   566  00FDDF  45                 	db	69
   567  00FDE0  39                 	db	57
   568  00FDE1  3C                 	db	60
   569  00FDE2  4A                 	db	74
   570  00FDE3  49                 	db	73
   571  00FDE4  49                 	db	73
   572  00FDE5  30                 	db	48
   573  00FDE6  01                 	db	1
   574  00FDE7  71                 	db	113
   575  00FDE8  09                 	db	9
   576  00FDE9  05                 	db	5
   577  00FDEA  03                 	db	3
   578  00FDEB  36                 	db	54
   579  00FDEC  49                 	db	73
   580  00FDED  49                 	db	73
   581  00FDEE  49                 	db	73
   582  00FDEF  36                 	db	54
   583  00FDF0  06                 	db	6
   584  00FDF1  49                 	db	73
   585  00FDF2  49                 	db	73
   586  00FDF3  29                 	db	41
   587  00FDF4  1E                 	db	30
   588  00FDF5  00                 	db	0
   589  00FDF6  36                 	db	54
   590  00FDF7  36                 	db	54
   591  00FDF8  00                 	db	0
   592  00FDF9  00                 	db	0
   593  00FDFA  00                 	db	0
   594  00FDFB  56                 	db	86
   595  00FDFC  36                 	db	54
   596  00FDFD  00                 	db	0
   597  00FDFE  00                 	db	0
   598  00FDFF  00                 	db	0
   599  00FE00  08                 	db	8
   600  00FE01  14                 	db	20
   601  00FE02  22                 	db	34
   602  00FE03  41                 	db	65
   603  00FE04  14                 	db	20
   604  00FE05  14                 	db	20
   605  00FE06  14                 	db	20
   606  00FE07  14                 	db	20
   607  00FE08  14                 	db	20
   608  00FE09  41                 	db	65
   609  00FE0A  22                 	db	34
   610  00FE0B  14                 	db	20
   611  00FE0C  08                 	db	8
   612  00FE0D  00                 	db	0
   613  00FE0E  02                 	db	2
   614  00FE0F  01                 	db	1
   615  00FE10  51                 	db	81
   616  00FE11  09                 	db	9
   617  00FE12  06                 	db	6
   618  00FE13  32                 	db	50
   619  00FE14  49                 	db	73
   620  00FE15  79                 	db	121
   621  00FE16  41                 	db	65
   622  00FE17  3E                 	db	62
   623  00FE18  7E                 	db	126
   624  00FE19  11                 	db	17
   625  00FE1A  11                 	db	17
   626  00FE1B  11                 	db	17
   627  00FE1C  7E                 	db	126
   628  00FE1D  7F                 	db	127
   629  00FE1E  49                 	db	73
   630  00FE1F  49                 	db	73
   631  00FE20  49                 	db	73
   632  00FE21  36                 	db	54
   633  00FE22  3E                 	db	62
   634  00FE23  41                 	db	65
   635  00FE24  41                 	db	65
   636  00FE25  41                 	db	65
   637  00FE26  22                 	db	34
   638  00FE27  7F                 	db	127
   639  00FE28  41                 	db	65
   640  00FE29  41                 	db	65
   641  00FE2A  22                 	db	34
   642  00FE2B  1C                 	db	28
   643  00FE2C  7F                 	db	127
   644  00FE2D  49                 	db	73
   645  00FE2E  49                 	db	73
   646  00FE2F  49                 	db	73
   647  00FE30  41                 	db	65
   648  00FE31  7F                 	db	127
   649  00FE32  09                 	db	9
   650  00FE33  09                 	db	9
   651  00FE34  01                 	db	1
   652  00FE35  01                 	db	1
   653  00FE36  3E                 	db	62
   654  00FE37  41                 	db	65
   655  00FE38  41                 	db	65
   656  00FE39  51                 	db	81
   657  00FE3A  32                 	db	50
   658  00FE3B  7F                 	db	127
   659  00FE3C  08                 	db	8
   660  00FE3D  08                 	db	8
   661  00FE3E  08                 	db	8
   662  00FE3F  7F                 	db	127
   663  00FE40  00                 	db	0
   664  00FE41  41                 	db	65
   665  00FE42  7F                 	db	127
   666  00FE43  41                 	db	65
   667  00FE44  00                 	db	0
   668  00FE45  20                 	db	32
   669  00FE46  40                 	db	64
   670  00FE47  41                 	db	65
   671  00FE48  3F                 	db	63
   672  00FE49  01                 	db	1
   673  00FE4A  7F                 	db	127
   674  00FE4B  08                 	db	8
   675  00FE4C  14                 	db	20
   676  00FE4D  22                 	db	34
   677  00FE4E  41                 	db	65
   678  00FE4F  7F                 	db	127
   679  00FE50  40                 	db	64
   680  00FE51  40                 	db	64
   681  00FE52  40                 	db	64
   682  00FE53  40                 	db	64
   683  00FE54  7F                 	db	127
   684  00FE55  02                 	db	2
   685  00FE56  04                 	db	4
   686  00FE57  02                 	db	2
   687  00FE58  7F                 	db	127
   688  00FE59  7F                 	db	127
   689  00FE5A  04                 	db	4
   690  00FE5B  08                 	db	8
   691  00FE5C  10                 	db	16
   692  00FE5D  7F                 	db	127
   693  00FE5E  3E                 	db	62
   694  00FE5F  41                 	db	65
   695  00FE60  41                 	db	65
   696  00FE61  41                 	db	65
   697  00FE62  3E                 	db	62
   698  00FE63  7F                 	db	127
   699  00FE64  09                 	db	9
   700  00FE65  09                 	db	9
   701  00FE66  09                 	db	9
   702  00FE67  06                 	db	6
   703  00FE68  3E                 	db	62
   704  00FE69  41                 	db	65
   705  00FE6A  51                 	db	81
   706  00FE6B  21                 	db	33
   707  00FE6C  5E                 	db	94
   708  00FE6D  7F                 	db	127
   709  00FE6E  09                 	db	9
   710  00FE6F  19                 	db	25
   711  00FE70  29                 	db	41
   712  00FE71  46                 	db	70
   713  00FE72  46                 	db	70
   714  00FE73  49                 	db	73
   715  00FE74  49                 	db	73
   716  00FE75  49                 	db	73
   717  00FE76  31                 	db	49
   718  00FE77  01                 	db	1
   719  00FE78  01                 	db	1
   720  00FE79  7F                 	db	127
   721  00FE7A  01                 	db	1
   722  00FE7B  01                 	db	1
   723  00FE7C  3F                 	db	63
   724  00FE7D  40                 	db	64
   725  00FE7E  40                 	db	64
   726  00FE7F  40                 	db	64
   727  00FE80  3F                 	db	63
   728  00FE81  1F                 	db	31
   729  00FE82  20                 	db	32
   730  00FE83  40                 	db	64
   731  00FE84  20                 	db	32
   732  00FE85  1F                 	db	31
   733  00FE86  7F                 	db	127
   734  00FE87  20                 	db	32
   735  00FE88  18                 	db	24
   736  00FE89  20                 	db	32
   737  00FE8A  7F                 	db	127
   738  00FE8B  63                 	db	99
   739  00FE8C  14                 	db	20
   740  00FE8D  08                 	db	8
   741  00FE8E  14                 	db	20
   742  00FE8F  63                 	db	99
   743  00FE90  03                 	db	3
   744  00FE91  04                 	db	4
   745  00FE92  78                 	db	120
   746  00FE93  04                 	db	4
   747  00FE94  03                 	db	3
   748  00FE95  61                 	db	97
   749  00FE96  51                 	db	81
   750  00FE97  49                 	db	73
   751  00FE98  45                 	db	69
   752  00FE99  43                 	db	67
   753  00FE9A  00                 	db	0
   754  00FE9B  00                 	db	0
   755  00FE9C  7F                 	db	127
   756  00FE9D  41                 	db	65
   757  00FE9E  41                 	db	65
   758  00FE9F  02                 	db	2
   759  00FEA0  04                 	db	4
   760  00FEA1  08                 	db	8
   761  00FEA2  10                 	db	16
   762  00FEA3  20                 	db	32
   763  00FEA4  41                 	db	65
   764  00FEA5  41                 	db	65
   765  00FEA6  7F                 	db	127
   766  00FEA7  00                 	db	0
   767  00FEA8  00                 	db	0
   768  00FEA9  04                 	db	4
   769  00FEAA  02                 	db	2
   770  00FEAB  01                 	db	1
   771  00FEAC  02                 	db	2
   772  00FEAD  04                 	db	4
   773  00FEAE  40                 	db	64
   774  00FEAF  40                 	db	64
   775  00FEB0  40                 	db	64
   776  00FEB1  40                 	db	64
   777  00FEB2  40                 	db	64
   778  00FEB3  00                 	db	0
   779  00FEB4  01                 	db	1
   780  00FEB5  02                 	db	2
   781  00FEB6  04                 	db	4
   782  00FEB7  00                 	db	0
   783  00FEB8  20                 	db	32
   784  00FEB9  54                 	db	84
   785  00FEBA  54                 	db	84
   786  00FEBB  54                 	db	84
   787  00FEBC  78                 	db	120
   788  00FEBD  7F                 	db	127
   789  00FEBE  48                 	db	72
   790  00FEBF  44                 	db	68
   791  00FEC0  44                 	db	68
   792  00FEC1  38                 	db	56
   793  00FEC2  38                 	db	56
   794  00FEC3  44                 	db	68
   795  00FEC4  44                 	db	68
   796  00FEC5  44                 	db	68
   797  00FEC6  20                 	db	32
   798  00FEC7  38                 	db	56
   799  00FEC8  44                 	db	68
   800  00FEC9  44                 	db	68
   801  00FECA  48                 	db	72
   802  00FECB  7F                 	db	127
   803  00FECC  38                 	db	56
   804  00FECD  54                 	db	84
   805  00FECE  54                 	db	84
   806  00FECF  54                 	db	84
   807  00FED0  18                 	db	24
   808  00FED1  08                 	db	8
   809  00FED2  7E                 	db	126
   810  00FED3  09                 	db	9
   811  00FED4  01                 	db	1
   812  00FED5  02                 	db	2
   813  00FED6  08                 	db	8
   814  00FED7  14                 	db	20
   815  00FED8  54                 	db	84
   816  00FED9  54                 	db	84
   817  00FEDA  3C                 	db	60
   818  00FEDB  7F                 	db	127
   819  00FEDC  08                 	db	8
   820  00FEDD  04                 	db	4
   821  00FEDE  04                 	db	4
   822  00FEDF  78                 	db	120
   823  00FEE0  00                 	db	0
   824  00FEE1  44                 	db	68
   825  00FEE2  7D                 	db	125
   826  00FEE3  40                 	db	64
   827  00FEE4  00                 	db	0
   828  00FEE5  20                 	db	32
   829  00FEE6  40                 	db	64
   830  00FEE7  44                 	db	68
   831  00FEE8  3D                 	db	61
   832  00FEE9  00                 	db	0
   833  00FEEA  00                 	db	0
   834  00FEEB  7F                 	db	127
   835  00FEEC  10                 	db	16
   836  00FEED  28                 	db	40
   837  00FEEE  44                 	db	68
   838  00FEEF  00                 	db	0
   839  00FEF0  41                 	db	65
   840  00FEF1  7F                 	db	127
   841  00FEF2  40                 	db	64
   842  00FEF3  00                 	db	0
   843  00FEF4  7C                 	db	124
   844  00FEF5  04                 	db	4
   845  00FEF6  18                 	db	24
   846  00FEF7  04                 	db	4
   847  00FEF8  78                 	db	120
   848  00FEF9  7C                 	db	124
   849  00FEFA  08                 	db	8
   850  00FEFB  04                 	db	4
   851  00FEFC  04                 	db	4
   852  00FEFD  78                 	db	120
   853  00FEFE  38                 	db	56
   854  00FEFF  44                 	db	68
   855  00FF00  44                 	db	68
   856  00FF01  44                 	db	68
   857  00FF02  38                 	db	56
   858  00FF03  7C                 	db	124
   859  00FF04  14                 	db	20
   860  00FF05  14                 	db	20
   861  00FF06  14                 	db	20
   862  00FF07  08                 	db	8
   863  00FF08  08                 	db	8
   864  00FF09  14                 	db	20
   865  00FF0A  14                 	db	20
   866  00FF0B  18                 	db	24
   867  00FF0C  7C                 	db	124
   868  00FF0D  7C                 	db	124
   869  00FF0E  08                 	db	8
   870  00FF0F  04                 	db	4
   871  00FF10  04                 	db	4
   872  00FF11  08                 	db	8
   873  00FF12  48                 	db	72
   874  00FF13  54                 	db	84
   875  00FF14  54                 	db	84
   876  00FF15  54                 	db	84
   877  00FF16  20                 	db	32
   878  00FF17  04                 	db	4
   879  00FF18  3F                 	db	63
   880  00FF19  44                 	db	68
   881  00FF1A  40                 	db	64
   882  00FF1B  20                 	db	32
   883  00FF1C  3C                 	db	60
   884  00FF1D  40                 	db	64
   885  00FF1E  40                 	db	64
   886  00FF1F  20                 	db	32
   887  00FF20  7C                 	db	124
   888  00FF21  1C                 	db	28
   889  00FF22  20                 	db	32
   890  00FF23  40                 	db	64
   891  00FF24  20                 	db	32
   892  00FF25  1C                 	db	28
   893  00FF26  3C                 	db	60
   894  00FF27  40                 	db	64
   895  00FF28  30                 	db	48
   896  00FF29  40                 	db	64
   897  00FF2A  3C                 	db	60
   898  00FF2B  44                 	db	68
   899  00FF2C  28                 	db	40
   900  00FF2D  10                 	db	16
   901  00FF2E  28                 	db	40
   902  00FF2F  44                 	db	68
   903  00FF30  0C                 	db	12
   904  00FF31  50                 	db	80
   905  00FF32  50                 	db	80
   906  00FF33  50                 	db	80
   907  00FF34  3C                 	db	60
   908  00FF35  44                 	db	68
   909  00FF36  64                 	db	100
   910  00FF37  54                 	db	84
   911  00FF38  4C                 	db	76
   912  00FF39  44                 	db	68
   913  00FF3A  00                 	db	0
   914  00FF3B  08                 	db	8
   915  00FF3C  36                 	db	54
   916  00FF3D  41                 	db	65
   917  00FF3E  00                 	db	0
   918  00FF3F  00                 	db	0
   919  00FF40  00                 	db	0
   920  00FF41  7F                 	db	127
   921  00FF42  00                 	db	0
   922  00FF43  00                 	db	0
   923  00FF44  00                 	db	0
   924  00FF45  41                 	db	65
   925  00FF46  36                 	db	54
   926  00FF47  08                 	db	8
   927  00FF48  00                 	db	0
   928  00FF49  08                 	db	8
   929  00FF4A  08                 	db	8
   930  00FF4B  2A                 	db	42
   931  00FF4C  1C                 	db	28
   932  00FF4D  08                 	db	8
   933  00FF4E  08                 	db	8
   934  00FF4F  1C                 	db	28
   935  00FF50  2A                 	db	42
   936  00FF51  08                 	db	8
   937  00FF52  08                 	db	8
   938  00FF53                     __end_of_Font5x7:
   939                           	opt stack 0
   940  00FF53                     _PortG_Property:
   941                           	opt stack 0
   942  00FF53  FC00               	dw	64512
   943  00FF55                     __end_of_PortG_Property:
   944                           	opt stack 0
   945  00FF55                     _PortF_Property:
   946                           	opt stack 0
   947  00FF55  0FFF               	dw	4095
   948  00FF57                     __end_of_PortF_Property:
   949                           	opt stack 0
   950  00FF57                     _PortE_Property:
   951                           	opt stack 0
   952  00FF57  0000               	dw	0
   953  00FF59                     __end_of_PortE_Property:
   954                           	opt stack 0
   955  00FF59                     _PortD_Property:
   956                           	opt stack 0
   957  00FF59  FFFF               	dw	65535
   958  00FF5B                     __end_of_PortD_Property:
   959                           	opt stack 0
   960  00FF5B                     _PortC_Property:
   961                           	opt stack 0
   962  00FF5B  FFF0               	dw	65520
   963  00FF5D                     __end_of_PortC_Property:
   964                           	opt stack 0
   965  00FF5D                     _PortB_Property:
   966                           	opt stack 0
   967  00FF5D  FF00               	dw	65280
   968  00FF5F                     __end_of_PortB_Property:
   969                           	opt stack 0
   970  00FF5F                     _PortA_Property:
   971                           	opt stack 0
   972  00FF5F  00FF               	dw	255
   973  00FF61                     __end_of_PortA_Property:
   974                           	opt stack 0
   975  0000                     _TMR0	set	4054
   976  0000                     _RCREG1	set	4015
   977  0000                     _TXREG1	set	4014
   978  0000                     _SPBRG1	set	4016
   979  0000                     _TXSTA1bits	set	4013
   980  0000                     _BAUDCON1bits	set	3966
   981  0000                     _RCSTA1	set	4012
   982  0000                     _TXSTA1	set	4013
   983  0000                     _TRISCbits	set	3988
   984  0000                     _PR2	set	4043
   985  0000                     _T2CONbits	set	4042
   986  0000                     _T0CONbits	set	4053
   987  0000                     _RCONbits	set	4048
   988  0000                     _OSCTUNEbits	set	3995
   989  0000                     _PIR3	set	4004
   990  0000                     _PIR2	set	4001
   991  0000                     _PIR1	set	3998
   992  0000                     _INTCONbits	set	4082
   993  0000                     _SSP2CON2bits	set	3947
   994  0000                     _SSP1CON2bits	set	4037
   995  0000                     _SSP1ADD	set	4040
   996  0000                     _ANCON0	set	4033
   997  0000                     _ADRESL	set	4035
   998  0000                     _ADRESH	set	4036
   999  0000                     _ADCON1bits	set	4033
  1000  0000                     _ADCON0bits	set	4034
  1001  0000                     _SSP2CON1bits	set	3948
  1002  0000                     _SSP1CON1bits	set	4038
  1003  0000                     _SSP2STATbits	set	3949
  1004  0000                     _SSP1STATbits	set	4039
  1005  0000                     _PIE3bits	set	4003
  1006  0000                     _PIE1bits	set	3997
  1007  0000                     _PIR3bits	set	4004
  1008  0000                     _PIR1bits	set	3998
  1009  0000                     _IPR3bits	set	4005
  1010  0000                     _IPR1bits	set	3999
  1011  0000                     _PORTFbits	set	3973
  1012  0000                     _SSP2CON2	set	3947
  1013  0000                     _SSP1CON2	set	4037
  1014  0000                     _SSP2BUF	set	3951
  1015  0000                     _SSP2CON1	set	3948
  1016  0000                     _SSP2STAT	set	3949
  1017  0000                     _SSP1BUF	set	4041
  1018  0000                     _SSP1CON1	set	4038
  1019  0000                     _SSP1STAT	set	4039
  1020  0000                     _LATG	set	3983
  1021  0000                     _LATF	set	3982
  1022  0000                     _LATE	set	3981
  1023  0000                     _LATD	set	3980
  1024  0000                     _LATC	set	3979
  1025  0000                     _LATB	set	3978
  1026  0000                     _LATA	set	3977
  1027  0000                     _TRISG	set	3992
  1028  0000                     _TRISF	set	3991
  1029  0000                     _TRISE	set	3990
  1030  0000                     _TRISD	set	3989
  1031  0000                     _TRISC	set	3988
  1032  0000                     _TRISB	set	3987
  1033  0000                     _TRISA	set	3986
  1034  0000                     _PORTG	set	3974
  1035  0000                     _PORTF	set	3973
  1036  0000                     _PORTE	set	3972
  1037  0000                     _PORTD	set	3971
  1038  0000                     _PORTC	set	3970
  1039  0000                     _PORTB	set	3969
  1040  0000                     _PORTA	set	3968
  1041  00FF61                     STR_2:
  1042  00FF61  54                 	db	84	;'T'
  1043  00FF62  6F                 	db	111	;'o'
  1044  00FF63  74                 	db	116	;'t'
  1045  00FF64  61                 	db	97	;'a'
  1046  00FF65  6C                 	db	108	;'l'
  1047  00FF66  20                 	db	32
  1048  00FF67  44                 	db	68	;'D'
  1049  00FF68  69                 	db	105	;'i'
  1050  00FF69  73                 	db	115	;'s'
  1051  00FF6A  74                 	db	116	;'t'
  1052  00FF6B  61                 	db	97	;'a'
  1053  00FF6C  6E                 	db	110	;'n'
  1054  00FF6D  63                 	db	99	;'c'
  1055  00FF6E  65                 	db	101	;'e'
  1056  00FF6F  3A                 	db	58	;':'
  1057  00FF70  25                 	db	37
  1058  00FF71  75                 	db	117	;'u'
  1059  00FF72  0A                 	db	10
  1060  00FF73  4C                 	db	76	;'L'
  1061  00FF74  65                 	db	101	;'e'
  1062  00FF75  66                 	db	102	;'f'
  1063  00FF76  74                 	db	116	;'t'
  1064  00FF77  20                 	db	32
  1065  00FF78  42                 	db	66	;'B'
  1066  00FF79  75                 	db	117	;'u'
  1067  00FF7A  6D                 	db	109	;'m'
  1068  00FF7B  70                 	db	112	;'p'
  1069  00FF7C  3A                 	db	58	;':'
  1070  00FF7D  25                 	db	37
  1071  00FF7E  75                 	db	117	;'u'
  1072  00FF7F  0A                 	db	10
  1073  00FF80  52                 	db	82	;'R'
  1074  00FF81  69                 	db	105	;'i'
  1075  00FF82  67                 	db	103	;'g'
  1076  00FF83  68                 	db	104	;'h'
  1077  00FF84  74                 	db	116	;'t'
  1078  00FF85  20                 	db	32
  1079  00FF86  42                 	db	66	;'B'
  1080  00FF87  75                 	db	117	;'u'
  1081  00FF88  6D                 	db	109	;'m'
  1082  00FF89  70                 	db	112	;'p'
  1083  00FF8A  3A                 	db	58	;':'
  1084  00FF8B  25                 	db	37
  1085  00FF8C  75                 	db	117	;'u'
  1086  00FF8D  0A                 	db	10
  1087  00FF8E  00                 	db	0
  1088  00FF8F                     STR_10:
  1089  00FF8F  43                 	db	67	;'C'
  1090  00FF90  6C                 	db	108	;'l'
  1091  00FF91  6F                 	db	111	;'o'
  1092  00FF92  73                 	db	115	;'s'
  1093  00FF93  65                 	db	101	;'e'
  1094  00FF94  73                 	db	115	;'s'
  1095  00FF95  74                 	db	116	;'t'
  1096  00FF96  20                 	db	32
  1097  00FF97  57                 	db	87	;'W'
  1098  00FF98  61                 	db	97	;'a'
  1099  00FF99  6C                 	db	108	;'l'
  1100  00FF9A  6C                 	db	108	;'l'
  1101  00FF9B  3A                 	db	58	;':'
  1102  00FF9C  25                 	db	37
  1103  00FF9D  75                 	db	117	;'u'
  1104  00FF9E  0A                 	db	10
  1105  00FF9F  20                 	db	32
  1106  00FFA0  43                 	db	67	;'C'
  1107  00FFA1  6C                 	db	108	;'l'
  1108  00FFA2  6F                 	db	111	;'o'
  1109  00FFA3  73                 	db	115	;'s'
  1110  00FFA4  65                 	db	101	;'e'
  1111  00FFA5  73                 	db	115	;'s'
  1112  00FFA6  74                 	db	116	;'t'
  1113  00FFA7  20                 	db	32
  1114  00FFA8  41                 	db	65	;'A'
  1115  00FFA9  6E                 	db	110	;'n'
  1116  00FFAA  67                 	db	103	;'g'
  1117  00FFAB  6C                 	db	108	;'l'
  1118  00FFAC  65                 	db	101	;'e'
  1119  00FFAD  3A                 	db	58	;':'
  1120  00FFAE  25                 	db	37
  1121  00FFAF  75                 	db	117	;'u'
  1122  00FFB0  0A                 	db	10
  1123  00FFB1  00                 	db	0
  1124  00FFB2                     STR_13:
  1125  00FFB2  20                 	db	32
  1126  00FFB3  20                 	db	32
  1127  00FFB4  20                 	db	32
  1128  00FFB5  20                 	db	32
  1129  00FFB6  20                 	db	32
  1130  00FFB7  20                 	db	32
  1131  00FFB8  20                 	db	32
  1132  00FFB9  20                 	db	32
  1133  00FFBA  20                 	db	32
  1134  00FFBB  20                 	db	32
  1135  00FFBC  20                 	db	32
  1136  00FFBD  20                 	db	32
  1137  00FFBE  20                 	db	32
  1138  00FFBF  20                 	db	32
  1139  00FFC0  20                 	db	32
  1140  00FFC1  20                 	db	32
  1141  00FFC2  20                 	db	32
  1142  00FFC3  20                 	db	32
  1143  00FFC4  20                 	db	32
  1144  00FFC5  0A                 	db	10
  1145  00FFC6  00                 	db	0
  1146  00FFC7                     STR_12:
  1147  00FFC7  50                 	db	80	;'P'
  1148  00FFC8  6C                 	db	108	;'l'
  1149  00FFC9  65                 	db	101	;'e'
  1150  00FFCA  61                 	db	97	;'a'
  1151  00FFCB  73                 	db	115	;'s'
  1152  00FFCC  65                 	db	101	;'e'
  1153  00FFCD  20                 	db	32
  1154  00FFCE  73                 	db	115	;'s'
  1155  00FFCF  65                 	db	101	;'e'
  1156  00FFD0  6C                 	db	108	;'l'
  1157  00FFD1  65                 	db	101	;'e'
  1158  00FFD2  63                 	db	99	;'c'
  1159  00FFD3  74                 	db	116	;'t'
  1160  00FFD4  20                 	db	32
  1161  00FFD5  6D                 	db	109	;'m'
  1162  00FFD6  6F                 	db	111	;'o'
  1163  00FFD7  64                 	db	100	;'d'
  1164  00FFD8  65                 	db	101	;'e'
  1165  00FFD9  2E                 	db	46
  1166  00FFDA  0A                 	db	10
  1167  00FFDB  00                 	db	0
  1168  00FFDC                     STR_8:
  1169  00FFDC  43                 	db	67	;'C'
  1170  00FFDD  6C                 	db	108	;'l'
  1171  00FFDE  6F                 	db	111	;'o'
  1172  00FFDF  73                 	db	115	;'s'
  1173  00FFE0  65                 	db	101	;'e'
  1174  00FFE1  73                 	db	115	;'s'
  1175  00FFE2  74                 	db	116	;'t'
  1176  00FFE3  20                 	db	32
  1177  00FFE4  57                 	db	87	;'W'
  1178  00FFE5  61                 	db	97	;'a'
  1179  00FFE6  6C                 	db	108	;'l'
  1180  00FFE7  6C                 	db	108	;'l'
  1181  00FFE8  3A                 	db	58	;':'
  1182  00FFE9  25                 	db	37
  1183  00FFEA  75                 	db	117	;'u'
  1184  00FFEB  0A                 	db	10
  1185  00FFEC  00                 	db	0
  1186  00FFED                     STR_6:
  1187  00FFED  44                 	db	68	;'D'
  1188  00FFEE  69                 	db	105	;'i'
  1189  00FFEF  73                 	db	115	;'s'
  1190  00FFF0  74                 	db	116	;'t'
  1191  00FFF1  61                 	db	97	;'a'
  1192  00FFF2  6E                 	db	110	;'n'
  1193  00FFF3  63                 	db	99	;'c'
  1194  00FFF4  65                 	db	101	;'e'
  1195  00FFF5  3A                 	db	58	;':'
  1196  00FFF6  20                 	db	32
  1197  00FFF7  25                 	db	37
  1198  00FFF8  64                 	db	100	;'d'
  1199  00FFF9  0A                 	db	10
  1200  00FFFA  00                 	db	0
  1201  00FFFB                     STR_1:
  1202  00FFFB  25                 	db	37
  1203  00FFFC  63                 	db	99	;'c'
  1204  00FFFD  00                 	db	0
  1205  0000                     
  1206                           ; #config settings
  1207  00FFFE  00                 	db	0	; dummy byte at the end
  1208  0000                     
  1209                           	psect	cinit
  1210  014472                     __pcinit:
  1211                           	opt stack 0
  1212  014472                     start_initialization:
  1213                           	opt stack 0
  1214  014472                     __initialization:
  1215                           	opt stack 0
  1216                           
  1217                           ; Initialize objects allocated to BANK3 (12 bytes)
  1218                           ; load TBLPTR registers with __pidataBANK3
  1219  014472  0E36               	movlw	low __pidataBANK3
  1220  014474  6EF6               	movwf	tblptrl,c
  1221  014476  0E65               	movlw	high __pidataBANK3
  1222  014478  6EF7               	movwf	tblptrh,c
  1223  01447A  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1224  01447C  6EF8               	movwf	tblptru,c
  1225  01447E  EE03  F0E3         	lfsr	0,__pdataBANK3
  1226  014482  EE10 F00C          	lfsr	1,12
  1227  014486                     copy_data0:
  1228  014486  0009               	tblrd		*+
  1229  014488  CFF5 FFEE          	movff	tablat,postinc0
  1230  01448C  50E5               	movf	postdec1,w,c
  1231  01448E  50E1               	movf	fsr1l,w,c
  1232  014490  E1FA               	bnz	copy_data0
  1233                           
  1234                           ; Initialize objects allocated to BANK0 (7 bytes)
  1235                           ; load TBLPTR registers with __pidataBANK0
  1236  014492  0E9C               	movlw	low __pidataBANK0
  1237  014494  6EF6               	movwf	tblptrl,c
  1238  014496  0E65               	movlw	high __pidataBANK0
  1239  014498  6EF7               	movwf	tblptrh,c
  1240  01449A  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1241  01449C  6EF8               	movwf	tblptru,c
  1242  01449E  EE00  F0F9         	lfsr	0,__pdataBANK0
  1243  0144A2  EE10 F007          	lfsr	1,7
  1244  0144A6                     copy_data1:
  1245  0144A6  0009               	tblrd		*+
  1246  0144A8  CFF5 FFEE          	movff	tablat,postinc0
  1247  0144AC  50E5               	movf	postdec1,w,c
  1248  0144AE  50E1               	movf	fsr1l,w,c
  1249  0144B0  E1FA               	bnz	copy_data1
  1250                           
  1251                           ; Initialize objects allocated to COMRAM (10 bytes)
  1252                           ; load TBLPTR registers with __pidataCOMRAM
  1253  0144B2  0E66               	movlw	low __pidataCOMRAM
  1254  0144B4  6EF6               	movwf	tblptrl,c
  1255  0144B6  0E65               	movlw	high __pidataCOMRAM
  1256  0144B8  6EF7               	movwf	tblptrh,c
  1257  0144BA  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1258  0144BC  6EF8               	movwf	tblptru,c
  1259  0144BE  EE00  F047         	lfsr	0,__pdataCOMRAM
  1260  0144C2  EE10 F00A          	lfsr	1,10
  1261  0144C6                     copy_data2:
  1262  0144C6  0009               	tblrd		*+
  1263  0144C8  CFF5 FFEE          	movff	tablat,postinc0
  1264  0144CC  50E5               	movf	postdec1,w,c
  1265  0144CE  50E1               	movf	fsr1l,w,c
  1266  0144D0  E1FA               	bnz	copy_data2
  1267                           
  1268                           ; Clear objects allocated to BIGRAM (300 bytes)
  1269  0144D2  EE04  F0C8         	lfsr	0,__pbssBIGRAM
  1270  0144D6  EE11 F02C          	lfsr	1,300
  1271  0144DA                     clear_0:
  1272  0144DA  6AEE               	clrf	postinc0,c
  1273  0144DC  50E5               	movf	postdec1,w,c
  1274  0144DE  50E1               	movf	fsr1l,w,c
  1275  0144E0  E1FC               	bnz	clear_0
  1276  0144E2  50E2               	movf	fsr1h,w,c
  1277  0144E4  E1FA               	bnz	clear_0
  1278                           
  1279                           ; Clear objects allocated to BANK4 (200 bytes)
  1280  0144E6  EE04  F000         	lfsr	0,__pbssBANK4
  1281  0144EA  0EC8               	movlw	200
  1282  0144EC                     clear_1:
  1283  0144EC  6AEE               	clrf	postinc0,c
  1284  0144EE  06E8               	decf	wreg,f,c
  1285  0144F0  E1FD               	bnz	clear_1
  1286                           
  1287                           ; Clear objects allocated to BANK3 (227 bytes)
  1288  0144F2  EE03  F000         	lfsr	0,__pbssBANK3
  1289  0144F6  0EE3               	movlw	227
  1290  0144F8                     clear_2:
  1291  0144F8  6AEE               	clrf	postinc0,c
  1292  0144FA  06E8               	decf	wreg,f,c
  1293  0144FC  E1FD               	bnz	clear_2
  1294                           
  1295                           ; Clear objects allocated to BANK0 (65 bytes)
  1296  0144FE  EE00  F0B8         	lfsr	0,__pbssBANK0
  1297  014502  0E41               	movlw	65
  1298  014504                     clear_3:
  1299  014504  6AEE               	clrf	postinc0,c
  1300  014506  06E8               	decf	wreg,f,c
  1301  014508  E1FD               	bnz	clear_3
  1302                           
  1303                           ; Clear objects allocated to COMRAM (30 bytes)
  1304  01450A  EE00  F029         	lfsr	0,__pbssCOMRAM
  1305  01450E  0E1E               	movlw	30
  1306  014510                     clear_4:
  1307  014510  6AEE               	clrf	postinc0,c
  1308  014512  06E8               	decf	wreg,f,c
  1309  014514  E1FD               	bnz	clear_4
  1310  014516                     end_of_initialization:
  1311                           	opt stack 0
  1312  014516                     __end_of__initialization:
  1313                           	opt stack 0
  1314  014516  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1315  014518  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1316  01451A  0100               	movlb	0
  1317  01451C  EFC4  F09C         	goto	_main	;jump to C main() function
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1h	equ	0xFE2
  1326                           fsr1l	equ	0xFE1
  1327                           
  1328                           	psect	bssCOMRAM
  1329  000029                     __pbssCOMRAM:
  1330                           	opt stack 0
  1331  000029                     _COUNTER:
  1332                           	opt stack 0
  1333  000029                     	ds	2
  1334  00002B                     HMI_GRender@a:
  1335                           	opt stack 0
  1336  00002B                     	ds	2
  1337  00002D                     _iRDropCaster:
  1338                           	opt stack 0
  1339  00002D                     	ds	1
  1340  00002E                     _iRDropLeft:
  1341                           	opt stack 0
  1342  00002E                     	ds	1
  1343  00002F                     _iRDropRight:
  1344                           	opt stack 0
  1345  00002F                     	ds	1
  1346  000030                     _iRVirtualWall:
  1347                           	opt stack 0
  1348  000030                     	ds	1
  1349  000031                     _iRCliffR:
  1350                           	opt stack 0
  1351  000031                     	ds	1
  1352  000032                     _iRCliffFR:
  1353                           	opt stack 0
  1354  000032                     	ds	1
  1355  000033                     _iRCliffFL:
  1356                           	opt stack 0
  1357  000033                     	ds	1
  1358  000034                     _iRCliffL:
  1359                           	opt stack 0
  1360  000034                     	ds	1
  1361  000035                     _iRWall:
  1362                           	opt stack 0
  1363  000035                     	ds	1
  1364  000036                     _iRBumpDrop:
  1365                           	opt stack 0
  1366  000036                     	ds	1
  1367  000037                     _iRScriptIndex:
  1368                           	opt stack 0
  1369  000037                     	ds	1
  1370  000038                     _u:
  1371                           	opt stack 0
  1372  000038                     	ds	1
  1373  000039                     _j:
  1374                           	opt stack 0
  1375  000039                     	ds	1
  1376  00003A                     _i:
  1377                           	opt stack 0
  1378  00003A                     	ds	1
  1379  00003B                     rand@screw:
  1380                           	opt stack 0
  1381  00003B                     	ds	1
  1382  00003C                     _ADC_Initialised:
  1383                           	opt stack 0
  1384  00003C                     	ds	1
  1385  00003D                     OutSeg@a:
  1386                           	opt stack 0
  1387  00003D                     	ds	1
  1388  00003E                     OutSeg@segset:
  1389                           	opt stack 0
  1390  00003E                     	ds	1
  1391  00003F                     OutSeg@cur:
  1392                           	opt stack 0
  1393  00003F                     	ds	1
  1394  000040                     _I2C1T:
  1395                           	opt stack 0
  1396  000040                     	ds	7
  1397                           tblptru	equ	0xFF8
  1398                           tblptrh	equ	0xFF7
  1399                           tblptrl	equ	0xFF6
  1400                           tablat	equ	0xFF5
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1h	equ	0xFE2
  1405                           fsr1l	equ	0xFE1
  1406                           
  1407                           	psect	dataCOMRAM
  1408  000047                     __pdataCOMRAM:
  1409                           	opt stack 0
  1410  000047                     _gCursor:
  1411                           	opt stack 0
  1412  000047                     	ds	4
  1413  00004B                     _Bus_State:
  1414                           	opt stack 0
  1415  00004B                     	ds	1
  1416  00004C                     	ds	1
  1417  00004D                     	ds	1
  1418  00004E                     	ds	1
  1419  00004F                     _l:
  1420                           	opt stack 0
  1421  00004F                     	ds	1
  1422  000050                     _w:
  1423                           	opt stack 0
  1424  000050                     	ds	1
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1h	equ	0xFE2
  1433                           fsr1l	equ	0xFE1
  1434                           
  1435                           	psect	bssBANK0
  1436  0000B8                     __pbssBANK0:
  1437                           	opt stack 0
  1438  0000B8                     _lQueue:
  1439                           	opt stack 0
  1440  0000B8                     	ds	3
  1441  0000BB                     _lStepFunction:
  1442                           	opt stack 0
  1443  0000BB                     	ds	3
  1444  0000BE                     _IRValue:
  1445                           	opt stack 0
  1446  0000BE                     	ds	2
  1447  0000C0                     _Stepstomin:
  1448                           	opt stack 0
  1449  0000C0                     	ds	2
  1450  0000C2                     _StepRotate:
  1451                           	opt stack 0
  1452  0000C2                     	ds	2
  1453  0000C4                     _angleTotal:
  1454                           	opt stack 0
  1455  0000C4                     	ds	2
  1456  0000C6                     _distanceTotal:
  1457                           	opt stack 0
  1458  0000C6                     	ds	2
  1459  0000C8                     _iRAngle:
  1460                           	opt stack 0
  1461  0000C8                     	ds	2
  1462  0000CA                     _pShiftVal:
  1463                           	opt stack 0
  1464  0000CA                     	ds	2
  1465  0000CC                     _val:
  1466                           	opt stack 0
  1467  0000CC                     	ds	2
  1468  0000CE                     _lMotor:
  1469                           	opt stack 0
  1470  0000CE                     	ds	2
  1471  0000D0                     _lCurrent:
  1472                           	opt stack 0
  1473  0000D0                     	ds	2
  1474  0000D2                     _gBackcolour:
  1475                           	opt stack 0
  1476  0000D2                     	ds	2
  1477  0000D4                     SPI_Send9@dat:
  1478                           	opt stack 0
  1479  0000D4                     	ds	2
  1480  0000D6                     _iRBumpLeft:
  1481                           	opt stack 0
  1482  0000D6                     	ds	1
  1483  0000D7                     _iRBumpRight:
  1484                           	opt stack 0
  1485  0000D7                     	ds	1
  1486  0000D8                     Event_TestButton@j:
  1487                           	opt stack 0
  1488  0000D8                     	ds	1
  1489  0000D9                     Timer2_Init@PRE:
  1490                           	opt stack 0
  1491  0000D9                     	ds	1
  1492  0000DA                     Timer2_Init@INDEX:
  1493                           	opt stack 0
  1494  0000DA                     	ds	1
  1495  0000DB                     Timer0_Init@PRE:
  1496                           	opt stack 0
  1497  0000DB                     	ds	1
  1498  0000DC                     _INDEX:
  1499                           	opt stack 0
  1500  0000DC                     	ds	1
  1501  0000DD                     _lBufferY:
  1502                           	opt stack 0
  1503  0000DD                     	ds	1
  1504  0000DE                     _lBufferX:
  1505                           	opt stack 0
  1506  0000DE                     	ds	1
  1507  0000DF                     _clearall:
  1508                           	opt stack 0
  1509  0000DF                     	ds	1
  1510  0000E0                     _PortD:
  1511                           	opt stack 0
  1512  0000E0                     	ds	10
  1513  0000EA                     _PortC:
  1514                           	opt stack 0
  1515  0000EA                     	ds	10
  1516  0000F4                     _ADC_AN0:
  1517                           	opt stack 0
  1518  0000F4                     	ds	5
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1h	equ	0xFE2
  1527                           fsr1l	equ	0xFE1
  1528                           
  1529                           	psect	dataBANK0
  1530  0000F9                     __pdataBANK0:
  1531                           	opt stack 0
  1532  0000F9                     _TimerX:
  1533                           	opt stack 0
  1534  0000F9                     	ds	2
  1535  0000FB                     _MinDist:
  1536                           	opt stack 0
  1537  0000FB                     	ds	2
  1538  0000FD                     _gForecolour:
  1539                           	opt stack 0
  1540  0000FD                     	ds	2
  1541  0000FF                     _change:
  1542                           	opt stack 0
  1543  0000FF                     	ds	1
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           
  1554                           	psect	bssBANK3
  1555  000300                     __pbssBANK3:
  1556                           	opt stack 0
  1557  000300                     _stepsToMinDegrees:
  1558                           	opt stack 0
  1559  000300                     	ds	4
  1560  000304                     _iRAngleSS:
  1561                           	opt stack 0
  1562  000304                     	ds	4
  1563  000308                     _iRDistanceSS:
  1564                           	opt stack 0
  1565  000308                     	ds	4
  1566  00030C                     Timer2_Init@DIV:
  1567                           	opt stack 0
  1568  00030C                     	ds	4
  1569  000310                     Timer0_Init@DIV:
  1570                           	opt stack 0
  1571  000310                     	ds	4
  1572  000314                     _gISR:
  1573                           	opt stack 0
  1574  000314                     	ds	3
  1575  000317                     _I2C2_More:
  1576                           	opt stack 0
  1577  000317                     	ds	3
  1578  00031A                     _I2C1_More:
  1579                           	opt stack 0
  1580  00031A                     	ds	3
  1581  00031D                     _I2C2_Done:
  1582                           	opt stack 0
  1583  00031D                     	ds	3
  1584  000320                     _I2C1_Done:
  1585                           	opt stack 0
  1586  000320                     	ds	3
  1587  000323                     _mode:
  1588                           	opt stack 0
  1589  000323                     	ds	2
  1590  000325                     _dip:
  1591                           	opt stack 0
  1592  000325                     	ds	2
  1593  000327                     _iRDistance:
  1594                           	opt stack 0
  1595  000327                     	ds	2
  1596  000329                     _HMIBoard:
  1597                           	opt stack 0
  1598  000329                     	ds	58
  1599  000363                     _SPI1:
  1600                           	opt stack 0
  1601  000363                     	ds	11
  1602  00036E                     _SPI2:
  1603                           	opt stack 0
  1604  00036E                     	ds	11
  1605  000379                     _DIPSwitch:
  1606                           	opt stack 0
  1607  000379                     	ds	10
  1608  000383                     _TestButton:
  1609                           	opt stack 0
  1610  000383                     	ds	10
  1611  00038D                     _PortG:
  1612                           	opt stack 0
  1613  00038D                     	ds	10
  1614  000397                     _PortE:
  1615                           	opt stack 0
  1616  000397                     	ds	10
  1617  0003A1                     _PortB:
  1618                           	opt stack 0
  1619  0003A1                     	ds	10
  1620  0003AB                     _PortA:
  1621                           	opt stack 0
  1622  0003AB                     	ds	10
  1623  0003B5                     _PortF:
  1624                           	opt stack 0
  1625  0003B5                     	ds	10
  1626  0003BF                     _I2C2T:
  1627                           	opt stack 0
  1628  0003BF                     	ds	7
  1629  0003C6                     _Stepper:
  1630                           	opt stack 0
  1631  0003C6                     	ds	6
  1632  0003CC                     _ADC_AN3:
  1633                           	opt stack 0
  1634  0003CC                     	ds	5
  1635  0003D1                     _ADC_AN2:
  1636                           	opt stack 0
  1637  0003D1                     	ds	5
  1638  0003D6                     _ADC_AN1:
  1639                           	opt stack 0
  1640  0003D6                     	ds	5
  1641  0003DB                     LCD_DrawRectangle@p4:
  1642                           	opt stack 0
  1643  0003DB                     	ds	4
  1644  0003DF                     LCD_DrawRectangle@p2:
  1645                           	opt stack 0
  1646  0003DF                     	ds	4
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1h	equ	0xFE2
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657                           	psect	dataBANK3
  1658  0003E3                     __pdataBANK3:
  1659                           	opt stack 0
  1660  0003E3                     Console_Render@F6956:
  1661                           	opt stack 0
  1662  0003E3                     	ds	4
  1663  0003E7                     _gLineSize:
  1664                           	opt stack 0
  1665  0003E7                     	ds	4
  1666  0003EB                     _gCharSize:
  1667                           	opt stack 0
  1668  0003EB                     	ds	4
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1h	equ	0xFE2
  1677                           fsr1l	equ	0xFE1
  1678                           
  1679                           	psect	bssBANK4
  1680  000400                     __pbssBANK4:
  1681                           	opt stack 0
  1682  000400                     _lCBuffer:
  1683                           	opt stack 0
  1684  000400                     	ds	30
  1685  00041E                     _iRScriptStack:
  1686                           	opt stack 0
  1687  00041E                     	ds	100
  1688  000482                     Console_MakeField@Fill:
  1689                           	opt stack 0
  1690  000482                     	ds	70
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1h	equ	0xFE2
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssBIGRAM
  1702  0004C8                     __pbssBIGRAM:
  1703                           	opt stack 0
  1704  0004C8                     _lBuffer:
  1705                           	opt stack 0
  1706  0004C8                     	ds	300
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1h	equ	0xFE2
  1715                           fsr1l	equ	0xFE1
  1716                           
  1717                           	psect	cstackBANK3
  1718  0003EF                     __pcstackBANK3:
  1719                           	opt stack 0
  1720  0003EF                     ??_mode1:
  1721  0003EF                     ??_mode4:
  1722                           
  1723                           ; 1 bytes @ 0x0
  1724  0003EF                     	ds	1
  1725  0003F0                     _mode4$15585:
  1726                           	opt stack 0
  1727                           
  1728                           ; 4 bytes @ 0x1
  1729  0003F0                     	ds	1
  1730  0003F1                     mode1@moveto:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x2
  1734  0003F1                     	ds	2
  1735  0003F3                     _mode1$15584:
  1736                           	opt stack 0
  1737                           
  1738                           ; 4 bytes @ 0x4
  1739  0003F3                     	ds	4
  1740  0003F7                     ??_main:
  1741                           
  1742                           ; 1 bytes @ 0x8
  1743  0003F7                     	ds	2
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1h	equ	0xFE2
  1752                           fsr1l	equ	0xFE1
  1753                           
  1754                           	psect	cstackBANK2
  1755  000200                     __pcstackBANK2:
  1756                           	opt stack 0
  1757  000200                     irobot_query_and_update@TXArray:
  1758                           	opt stack 0
  1759                           
  1760                           ; 256 bytes @ 0x0
  1761  000200                     	ds	256
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1h	equ	0xFE2
  1770                           fsr1l	equ	0xFE1
  1771                           
  1772                           	psect	cstackBANK1
  1773  000100                     __pcstackBANK1:
  1774                           	opt stack 0
  1775  000100                     ??___fltol:
  1776  000100                     irobot_query_and_update@RXArray:
  1777                           	opt stack 0
  1778                           
  1779                           ; 256 bytes @ 0x0
  1780  000100                     	ds	256
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1h	equ	0xFE2
  1789                           fsr1l	equ	0xFE1
  1790                           
  1791                           	psect	cstackBANK0
  1792  000060                     __pcstackBANK0:
  1793                           	opt stack 0
  1794  000060                     ??_Console_ClearCursor:
  1795  000060                     ??_ADC_SetChannel:
  1796  000060                     ??_ADC_ConversionTime:
  1797  000060                     ??_ADC_SetupIO:
  1798  000060                     ??_sort_iRBumpDrop:
  1799  000060                     ?_load_iRScriptStack:
  1800                           	opt stack 0
  1801  000060                     ??_Console_Init:
  1802  000060                     ??_Console_NewLine:
  1803  000060                     ??_Console_FormFeed:
  1804  000060                     ??_HMI_SetButton:
  1805  000060                     ?_GetPortProperties:
  1806                           	opt stack 0
  1807  000060                     ?_GetPortPORT:
  1808                           	opt stack 0
  1809  000060                     ?_GetPortTRIS:
  1810                           	opt stack 0
  1811  000060                     ?_twos_complement_of:
  1812                           	opt stack 0
  1813  000060                     ?___wmul:
  1814                           	opt stack 0
  1815  000060                     ?___awdiv:
  1816                           	opt stack 0
  1817  000060                     ?___lwdiv:
  1818                           	opt stack 0
  1819  000060                     ?___lldiv:
  1820                           	opt stack 0
  1821  000060                     ?___xxtofl:
  1822                           	opt stack 0
  1823  000060                     Mode_Set@pMode:
  1824                           	opt stack 0
  1825  000060                     ToSegment@pCHR:
  1826                           	opt stack 0
  1827  000060                     HMI_SetBar@pValue:
  1828                           	opt stack 0
  1829  000060                     ADC_ClockDivision@pDivide:
  1830                           	opt stack 0
  1831  000060                     get_packet_size@packetID:
  1832                           	opt stack 0
  1833  000060                     eusart_putch@eusartSendChar:
  1834                           	opt stack 0
  1835  000060                     Port_GetPin@pInput:
  1836                           	opt stack 0
  1837  000060                     Port_GetQuad@pInput:
  1838                           	opt stack 0
  1839  000060                     SPI_DisableISR@pInput:
  1840                           	opt stack 0
  1841  000060                     SPI_DCS@pInput:
  1842                           	opt stack 0
  1843  000060                     SPI_Send@pInput:
  1844                           	opt stack 0
  1845  000060                     Byte_SetBit@pInput:
  1846                           	opt stack 0
  1847  000060                     Byte_GetBit@pInput:
  1848                           	opt stack 0
  1849  000060                     Byte_SetZone@pInput:
  1850                           	opt stack 0
  1851  000060                     Byte_GetZone@pInput:
  1852                           	opt stack 0
  1853  000060                     Byte_SetByte@pInput:
  1854                           	opt stack 0
  1855  000060                     delay_ms@ms:
  1856                           	opt stack 0
  1857  000060                     delay_us@us:
  1858                           	opt stack 0
  1859  000060                     reverse@input:
  1860                           	opt stack 0
  1861  000060                     twos_complement_of@complementValue:
  1862                           	opt stack 0
  1863  000060                     ___wmul@multiplier:
  1864                           	opt stack 0
  1865  000060                     ___awdiv@dividend:
  1866                           	opt stack 0
  1867  000060                     ___lwdiv@dividend:
  1868                           	opt stack 0
  1869  000060                     MXK_Queue@pCallback:
  1870                           	opt stack 0
  1871  000060                     Timer0_Start@pFunction:
  1872                           	opt stack 0
  1873  000060                     ___lldiv@dividend:
  1874                           	opt stack 0
  1875  000060                     ___xxtofl@val:
  1876                           	opt stack 0
  1877                           
  1878                           ; 4 bytes @ 0x0
  1879  000060                     	ds	1
  1880  000061                     ADC_SetChannel@pChannel:
  1881                           	opt stack 0
  1882  000061                     ADC_ClockDivision@reg:
  1883                           	opt stack 0
  1884  000061                     ADC_ConversionTime@pCount:
  1885                           	opt stack 0
  1886  000061                     rx_assign@packetIDValue:
  1887                           	opt stack 0
  1888  000061                     irobot_song_play@songNumber:
  1889                           	opt stack 0
  1890  000061                     HMI_SetSegments@pString:
  1891                           	opt stack 0
  1892                           
  1893                           ; 2 bytes @ 0x1
  1894  000061                     	ds	1
  1895  000062                     GetPortProperties@pInput:
  1896                           	opt stack 0
  1897  000062                     GetPortPORT@pInput:
  1898                           	opt stack 0
  1899  000062                     GetPortTRIS@pInput:
  1900                           	opt stack 0
  1901  000062                     Port_GetPin@pPin:
  1902                           	opt stack 0
  1903  000062                     Port_GetQuad@pQuad:
  1904                           	opt stack 0
  1905  000062                     SPI_Send@pData:
  1906                           	opt stack 0
  1907  000062                     Byte_SetBit@pBit:
  1908                           	opt stack 0
  1909  000062                     Byte_GetBit@pBit:
  1910                           	opt stack 0
  1911  000062                     Byte_SetZone@pMax:
  1912                           	opt stack 0
  1913  000062                     Byte_GetZone@pMax:
  1914                           	opt stack 0
  1915  000062                     Byte_SetByte@pValue:
  1916                           	opt stack 0
  1917  000062                     Console_Init@x:
  1918                           	opt stack 0
  1919  000062                     Console_FormFeed@x:
  1920                           	opt stack 0
  1921  000062                     ADC_SetupIO@pChannel:
  1922                           	opt stack 0
  1923  000062                     ADC_ClockDivision@unfound:
  1924                           	opt stack 0
  1925  000062                     rx_assign@byteNumber:
  1926                           	opt stack 0
  1927  000062                     reverse@length:
  1928                           	opt stack 0
  1929  000062                     ADC_Start@pInput:
  1930                           	opt stack 0
  1931  000062                     ___wmul@multiplicand:
  1932                           	opt stack 0
  1933  000062                     ___awdiv@divisor:
  1934                           	opt stack 0
  1935  000062                     ___lwdiv@divisor:
  1936                           	opt stack 0
  1937  000062                     delay_ms@u:
  1938                           	opt stack 0
  1939  000062                     delay_us@u:
  1940                           	opt stack 0
  1941  000062                     HMI_SetButton@reindex:
  1942                           	opt stack 0
  1943                           
  1944                           ; 4 bytes @ 0x2
  1945  000062                     	ds	1
  1946  000063                     ??_Port_GetPin:
  1947  000063                     ??_Port_GetQuad:
  1948  000063                     ??_Byte_GetBit:
  1949  000063                     ??_rx_assign:
  1950  000063                     LCD_Write@mode:
  1951                           	opt stack 0
  1952  000063                     Byte_SetBit@pValue:
  1953                           	opt stack 0
  1954  000063                     Byte_SetZone@pChunk:
  1955                           	opt stack 0
  1956  000063                     Byte_GetZone@pChunk:
  1957                           	opt stack 0
  1958  000063                     Console_Init@y:
  1959                           	opt stack 0
  1960  000063                     Console_FormFeed@y:
  1961                           	opt stack 0
  1962  000063                     OutSeg@pSegment:
  1963                           	opt stack 0
  1964  000063                     ADC_SetupIO@MASK:
  1965                           	opt stack 0
  1966  000063                     Motor_Move@pMotor:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x3
  1970  000063                     	ds	1
  1971  000064                     ??_Byte_SetBit:
  1972  000064                     ??_Console_IncrementCursor:
  1973  000064                     ??_OutSeg:
  1974  000064                     ??_ADC_Start:
  1975  000064                     ??___xxtofl:
  1976  000064                     LCD_Write@value:
  1977                           	opt stack 0
  1978  000064                     Byte_GetBit@Output:
  1979                           	opt stack 0
  1980  000064                     Byte_SetZone@pChunkSize:
  1981                           	opt stack 0
  1982  000064                     Byte_GetZone@pChunkSize:
  1983                           	opt stack 0
  1984  000064                     reverse@tempVar:
  1985                           	opt stack 0
  1986  000064                     ___awdiv@counter:
  1987                           	opt stack 0
  1988  000064                     ___lwdiv@counter:
  1989                           	opt stack 0
  1990  000064                     HMI_SetSegments@in:
  1991                           	opt stack 0
  1992  000064                     ADC_Init@pInput:
  1993                           	opt stack 0
  1994  000064                     ___wmul@product:
  1995                           	opt stack 0
  1996  000064                     ___lldiv@divisor:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x4
  2000  000064                     	ds	1
  2001  000065                     ??_Byte_GetZone:
  2002  000065                     ?_Console_MakeField:
  2003                           	opt stack 0
  2004  000065                     Set_Addr_Window@ys:
  2005                           	opt stack 0
  2006  000065                     Set_Rotation@m:
  2007                           	opt stack 0
  2008  000065                     Port_GetPin@Output:
  2009                           	opt stack 0
  2010  000065                     Port_GetQuad@Output:
  2011                           	opt stack 0
  2012  000065                     Byte_SetZone@pValue:
  2013                           	opt stack 0
  2014  000065                     rx_assign@packetID:
  2015                           	opt stack 0
  2016  000065                     ___awdiv@sign:
  2017                           	opt stack 0
  2018  000065                     LCD_Word_Write@value:
  2019                           	opt stack 0
  2020  000065                     reverse@iterator:
  2021                           	opt stack 0
  2022  000065                     Motor_Move@pDelta:
  2023                           	opt stack 0
  2024  000065                     ___lwdiv@quotient:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x5
  2028  000065                     	ds	1
  2029  000066                     ?_irobot_query_and_update:
  2030                           	opt stack 0
  2031  000066                     ??_Byte_SetZone:
  2032  000066                     Set_Addr_Window@xe:
  2033                           	opt stack 0
  2034  000066                     Set_Rotation@rotation:
  2035                           	opt stack 0
  2036  000066                     Byte_GetZone@MASK:
  2037                           	opt stack 0
  2038  000066                     OutSeg@pInput:
  2039                           	opt stack 0
  2040  000066                     HMI_SetButton@pValue:
  2041                           	opt stack 0
  2042  000066                     ADC_Init@pChannel:
  2043                           	opt stack 0
  2044  000066                     MXK_BlockSwitchTo@CUR:
  2045                           	opt stack 0
  2046  000066                     MXK_SwitchTo@CUR:
  2047                           	opt stack 0
  2048  000066                     ___awdiv@quotient:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x6
  2052  000066                     	ds	1
  2053  000067                     ??_Console_MakeField:
  2054  000067                     ?___lwmod:
  2055                           	opt stack 0
  2056  000067                     Set_Addr_Window@ye:
  2057                           	opt stack 0
  2058  000067                     Byte_GetZone@Offset:
  2059                           	opt stack 0
  2060  000067                     OutSeg@out:
  2061                           	opt stack 0
  2062  000067                     HMI_SetButton@v:
  2063                           	opt stack 0
  2064  000067                     MXK_BlockSwitchTo@pModule:
  2065                           	opt stack 0
  2066  000067                     MXK_SwitchTo@pModule:
  2067                           	opt stack 0
  2068  000067                     ___lwmod@dividend:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x7
  2072  000067                     	ds	1
  2073  000068                     ??_Console_Tab:
  2074  000068                     Set_Addr_Window@xs:
  2075                           	opt stack 0
  2076  000068                     Byte_GetZone@Output:
  2077                           	opt stack 0
  2078  000068                     ___xxtofl@sign:
  2079                           	opt stack 0
  2080  000068                     HMI_Render@a:
  2081                           	opt stack 0
  2082  000068                     ___lldiv@quotient:
  2083                           	opt stack 0
  2084                           
  2085                           ; 4 bytes @ 0x8
  2086  000068                     	ds	1
  2087  000069                     Byte_SetZone@Offset:
  2088                           	opt stack 0
  2089  000069                     ___xxtofl@exp:
  2090                           	opt stack 0
  2091  000069                     LCD_Fill@pColour:
  2092                           	opt stack 0
  2093  000069                     LCD_FillRectangle@pColour:
  2094                           	opt stack 0
  2095  000069                     Byte_GetPair@pInput:
  2096                           	opt stack 0
  2097  000069                     Console_MakeField@Index:
  2098                           	opt stack 0
  2099  000069                     ___lwmod@divisor:
  2100                           	opt stack 0
  2101                           
  2102                           ; 2 bytes @ 0x9
  2103  000069                     	ds	1
  2104  00006A                     ??_load_iRScriptStack:
  2105  00006A                     Byte_SetZone@MASK:
  2106                           	opt stack 0
  2107  00006A                     ___xxtofl@arg:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0xA
  2111  00006A                     	ds	1
  2112  00006B                     LCD_Fill@i:
  2113                           	opt stack 0
  2114  00006B                     Byte_GetPair@pPair:
  2115                           	opt stack 0
  2116  00006B                     Console_MakeField@pInput:
  2117                           	opt stack 0
  2118  00006B                     ___lwmod@counter:
  2119                           	opt stack 0
  2120  00006B                     Byte_SetPair@pInput:
  2121                           	opt stack 0
  2122  00006B                     Byte_SetQuad@pInput:
  2123                           	opt stack 0
  2124  00006B                     LCD_FillRectangle@pPoint:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0xB
  2128  00006B                     	ds	1
  2129  00006C                     LCD_Fill@j:
  2130                           	opt stack 0
  2131  00006C                     ___lldiv@counter:
  2132                           	opt stack 0
  2133  00006C                     Word_GetPair@pInput:
  2134                           	opt stack 0
  2135  00006C                     itos@input:
  2136                           	opt stack 0
  2137  00006C                     Console_MakeField@Column:
  2138                           	opt stack 0
  2139  00006C                     load_iRScriptStack@loadByte:
  2140                           	opt stack 0
  2141                           
  2142                           ; 2 bytes @ 0xC
  2143  00006C                     	ds	1
  2144  00006D                     Byte_SetPair@pPair:
  2145                           	opt stack 0
  2146  00006D                     Byte_SetQuad@pQuad:
  2147                           	opt stack 0
  2148  00006D                     Console_Tab@t:
  2149                           	opt stack 0
  2150  00006D                     Timer0_Init@pFrequency:
  2151                           	opt stack 0
  2152  00006D                     Timer2_Init@pFrequency:
  2153                           	opt stack 0
  2154                           
  2155                           ; 4 bytes @ 0xD
  2156  00006D                     	ds	1
  2157  00006E                     ?___fldiv:
  2158                           	opt stack 0
  2159  00006E                     Byte_SetPair@pValue:
  2160                           	opt stack 0
  2161  00006E                     Byte_SetQuad@pValue:
  2162                           	opt stack 0
  2163  00006E                     Word_GetPair@pPair:
  2164                           	opt stack 0
  2165  00006E                     Console_Tab@i:
  2166                           	opt stack 0
  2167  00006E                     load_iRScriptStack@bytesToLoad:
  2168                           	opt stack 0
  2169  00006E                     itos@destination:
  2170                           	opt stack 0
  2171  00006E                     _Console_MakeField$10974:
  2172                           	opt stack 0
  2173  00006E                     ___fldiv@b:
  2174                           	opt stack 0
  2175                           
  2176                           ; 4 bytes @ 0xE
  2177  00006E                     	ds	1
  2178  00006F                     Console_Tab@c:
  2179                           	opt stack 0
  2180  00006F                     load_iRScriptStack@i:
  2181                           	opt stack 0
  2182  00006F                     Port_SetPin@pInput:
  2183                           	opt stack 0
  2184  00006F                     Port_Set@pInput:
  2185                           	opt stack 0
  2186  00006F                     SPI_MinSpeed@pInput:
  2187                           	opt stack 0
  2188  00006F                     SPI_MaxSpeed@pInput:
  2189                           	opt stack 0
  2190  00006F                     Word_SetPair@pInput:
  2191                           	opt stack 0
  2192  00006F                     PortProperty_Valid@pInput:
  2193                           	opt stack 0
  2194  00006F                     LCD_FillRectangle@pSize:
  2195                           	opt stack 0
  2196                           
  2197                           ; 4 bytes @ 0xF
  2198  00006F                     	ds	1
  2199  000070                     ??_irobot_query_and_update:
  2200  000070                     ??_Console_PrintChar:
  2201  000070                     Console_MakeField@x:
  2202                           	opt stack 0
  2203  000070                     irobot_leds@LEDBit:
  2204                           	opt stack 0
  2205  000070                     itos@Data:
  2206                           	opt stack 0
  2207  000070                     irobot_move@moveSpeed:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x10
  2211  000070                     	ds	1
  2212  000071                     ??_Timer2_Init:
  2213  000071                     ??_Timer0_Init:
  2214  000071                     Port_SetPin@pPin:
  2215                           	opt stack 0
  2216  000071                     Port_Set@pValue:
  2217                           	opt stack 0
  2218  000071                     Word_SetPair@pPair:
  2219                           	opt stack 0
  2220  000071                     PortProperty_Valid@pPinDrive:
  2221                           	opt stack 0
  2222  000071                     Console_MakeField@y:
  2223                           	opt stack 0
  2224  000071                     irobot_leds@powerColour:
  2225                           	opt stack 0
  2226                           
  2227                           ; 1 bytes @ 0x11
  2228  000071                     	ds	1
  2229  000072                     ??_Port_Set:
  2230  000072                     Port_SetPin@pValue:
  2231                           	opt stack 0
  2232  000072                     Word_SetPair@pValue:
  2233                           	opt stack 0
  2234  000072                     PortProperty_Valid@pPin:
  2235                           	opt stack 0
  2236  000072                     irobot_leds@powerLuminosity:
  2237                           	opt stack 0
  2238  000072                     LCD_DrawField@pField:
  2239                           	opt stack 0
  2240  000072                     itos@Length:
  2241                           	opt stack 0
  2242  000072                     irobot_move@moveTurnRadius:
  2243                           	opt stack 0
  2244  000072                     Timer2_Init@RDIV:
  2245                           	opt stack 0
  2246  000072                     ___fldiv@a:
  2247                           	opt stack 0
  2248                           
  2249                           ; 4 bytes @ 0x12
  2250  000072                     	ds	1
  2251  000073                     ??_PortProperty_Valid:
  2252  000073                     ??_LCD_FillRectangle:
  2253  000073                     Port_SetPin@Type:
  2254                           	opt stack 0
  2255  000073                     Console_PrintChar@pInput:
  2256                           	opt stack 0
  2257  000073                     irobot_leds@isScript:
  2258                           	opt stack 0
  2259  000073                     Timer0_Init@pCPUClock:
  2260                           	opt stack 0
  2261                           
  2262                           ; 4 bytes @ 0x13
  2263  000073                     	ds	1
  2264  000074                     ??_irobot_move:
  2265  000074                     LED_Set@pValue:
  2266                           	opt stack 0
  2267  000074                     putch@c:
  2268                           	opt stack 0
  2269  000074                     irobot_led_power_on@powerOnColour:
  2270                           	opt stack 0
  2271  000074                     Port_TogglePin@pInput:
  2272                           	opt stack 0
  2273  000074                     itos@Out:
  2274                           	opt stack 0
  2275  000074                     LCD_DrawField@pPoint:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x14
  2279  000074                     	ds	1
  2280  000075                     ?_printf:
  2281                           	opt stack 0
  2282  000075                     LCD_FillRectangle@i:
  2283                           	opt stack 0
  2284  000075                     LED_Set@pLED:
  2285                           	opt stack 0
  2286  000075                     irobot_query_and_update@packetIDs:
  2287                           	opt stack 0
  2288  000075                     printf@f:
  2289                           	opt stack 0
  2290  000075                     PortProperty_Valid@Errors:
  2291                           	opt stack 0
  2292                           
  2293                           ; 16 bytes @ 0x15
  2294  000075                     	ds	1
  2295  000076                     ??___fldiv:
  2296  000076                     LCD_FillRectangle@j:
  2297                           	opt stack 0
  2298  000076                     Port_TogglePin@pPin:
  2299                           	opt stack 0
  2300  000076                     HMI_SetNumber@pInput:
  2301                           	opt stack 0
  2302  000076                     Timer2_Init@pCPUClock:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x16
  2306  000076                     	ds	1
  2307  000077                     Port_TogglePin@Value:
  2308                           	opt stack 0
  2309  000077                     irobot_query_and_update@streamSize:
  2310                           	opt stack 0
  2311  000077                     Timer0_Init@DIVIDE:
  2312                           	opt stack 0
  2313                           
  2314                           ; 4 bytes @ 0x17
  2315  000077                     	ds	1
  2316  000078                     LED_Toggle@pLED:
  2317                           	opt stack 0
  2318  000078                     irobot_query_and_update@numberOfPacketRequests:
  2319                           	opt stack 0
  2320  000078                     irobot_move@isScript:
  2321                           	opt stack 0
  2322  000078                     LCD_DrawField@pSize:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x18
  2326  000078                     	ds	1
  2327  000079                     Event_DIPSwitch@pState:
  2328                           	opt stack 0
  2329  000079                     Event_TestButton@pState:
  2330                           	opt stack 0
  2331  000079                     irobot_query_and_update@packetVariable:
  2332                           	opt stack 0
  2333  000079                     irobot_stop_motion@isScript:
  2334                           	opt stack 0
  2335  000079                     irobot_move_straight@straightSpeed:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x19
  2339  000079                     	ds	1
  2340  00007A                     Event_DIPSwitch@Bar:
  2341                           	opt stack 0
  2342  00007A                     irobot_query_and_update@j:
  2343                           	opt stack 0
  2344  00007A                     ___fldiv@sign:
  2345                           	opt stack 0
  2346  00007A                     Timer2_Init@DIVIDE:
  2347                           	opt stack 0
  2348                           
  2349                           ; 4 bytes @ 0x1A
  2350  00007A                     	ds	1
  2351  00007B                     irobot_query_and_update@startIndex:
  2352                           	opt stack 0
  2353  00007B                     Button_Poll@pButton:
  2354                           	opt stack 0
  2355  00007B                     Motor_Speed@pMotor:
  2356                           	opt stack 0
  2357  00007B                     ___fldiv@rem:
  2358                           	opt stack 0
  2359                           
  2360                           ; 4 bytes @ 0x1B
  2361  00007B                     	ds	1
  2362  00007C                     ??_LCD_DrawField:
  2363  00007C                     irobot_query_and_update@i:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x1C
  2367  00007C                     	ds	1
  2368  00007D                     ??_printf:
  2369  00007D                     Button_Poll@pIncrement:
  2370                           	opt stack 0
  2371  00007D                     Motor_Speed@pFrequency:
  2372                           	opt stack 0
  2373  00007D                     irobot_rotate@rotateAngle:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x1D
  2377  00007D                     	ds	1
  2378  00007E                     ??_Button_Poll:
  2379  00007E                     printf@prec:
  2380                           	opt stack 0
  2381  00007E                     LCD_DrawField@count:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x1E
  2385  00007E                     	ds	1
  2386  00007F                     printf@flag:
  2387                           	opt stack 0
  2388  00007F                     irobot_rotate@rotateSpeed:
  2389                           	opt stack 0
  2390  00007F                     ___fldiv@new_exp:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0x1F
  2394  00007F                     	ds	1
  2395  000080                     LCD_DrawField@xmax:
  2396                           	opt stack 0
  2397  000080                     printf@ap:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x20
  2401  000080                     	ds	1
  2402  000081                     ??_irobot_rotate:
  2403  000081                     LCD_DrawField@ymax:
  2404                           	opt stack 0
  2405  000081                     ___fldiv@grs:
  2406                           	opt stack 0
  2407                           
  2408                           ; 4 bytes @ 0x21
  2409  000081                     	ds	1
  2410  000082                     LCD_DrawField@i:
  2411                           	opt stack 0
  2412  000082                     irobot_rotate@isScript:
  2413                           	opt stack 0
  2414  000082                     Port_Set@TypeRequired:
  2415                           	opt stack 0
  2416  000082                     printf@val:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x22
  2420  000082                     	ds	1
  2421  000083                     ??_Console_Render:
  2422  000083                     Button_Poll@Pin:
  2423                           	opt stack 0
  2424  000083                     irobot_rotate@angleTotal:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x23
  2428  000083                     	ds	1
  2429  000084                     printf@c:
  2430                           	opt stack 0
  2431  000084                     Port_Set@TypeActual:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0x24
  2435  000084                     	ds	1
  2436  000085                     PortProperty_Valid@Pair:
  2437                           	opt stack 0
  2438  000085                     Console_Render@temp:
  2439                           	opt stack 0
  2440  000085                     ___fldiv@bexp:
  2441                           	opt stack 0
  2442  000085                     irobot_rotate@rotateDirection:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x25
  2446  000085                     	ds	1
  2447  000086                     Port_Set@Type:
  2448                           	opt stack 0
  2449  000086                     ___fldiv@aexp:
  2450                           	opt stack 0
  2451  000086                     Port_CheckPairType@pInput:
  2452                           	opt stack 0
  2453  000086                     Port_SetPinType@pInput:
  2454                           	opt stack 0
  2455  000086                     Console_Render@lCursor:
  2456                           	opt stack 0
  2457                           
  2458                           ; 4 bytes @ 0x26
  2459  000086                     	ds	1
  2460  000087                     ?___flmul:
  2461                           	opt stack 0
  2462  000087                     ___flmul@b:
  2463                           	opt stack 0
  2464                           
  2465                           ; 4 bytes @ 0x27
  2466  000087                     	ds	1
  2467  000088                     Port_CheckPairType@pPair:
  2468                           	opt stack 0
  2469  000088                     Port_SetPinType@pPin:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x28
  2473  000088                     	ds	1
  2474  000089                     Port_CheckPairType@pDrive:
  2475                           	opt stack 0
  2476  000089                     Port_SetPinType@pType:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x29
  2480  000089                     	ds	1
  2481  00008A                     Port_CheckPairType@Pin1:
  2482                           	opt stack 0
  2483  00008A                     Port_SetPinType@Output:
  2484                           	opt stack 0
  2485  00008A                     Console_Render@x:
  2486                           	opt stack 0
  2487                           
  2488                           ; 1 bytes @ 0x2A
  2489  00008A                     	ds	1
  2490  00008B                     Port_CheckPairType@Pin2:
  2491                           	opt stack 0
  2492  00008B                     Console_Render@y:
  2493                           	opt stack 0
  2494  00008B                     Port_SetPinType@Props:
  2495                           	opt stack 0
  2496  00008B                     ___flmul@a:
  2497                           	opt stack 0
  2498                           
  2499                           ; 4 bytes @ 0x2B
  2500  00008B                     	ds	1
  2501  00008C                     Port_CheckPairType@Output:
  2502                           	opt stack 0
  2503  00008C                     mode2@dist:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x2C
  2507  00008C                     	ds	1
  2508  00008D                     LED_Init@pLED:
  2509                           	opt stack 0
  2510  00008D                     Port_CheckPairType@Props:
  2511                           	opt stack 0
  2512  00008D                     Motor_Init@pMotor:
  2513                           	opt stack 0
  2514  00008D                     SPI_Init@pClock:
  2515                           	opt stack 0
  2516                           
  2517                           ; 4 bytes @ 0x2D
  2518  00008D                     	ds	2
  2519  00008F                     ??___flmul:
  2520  00008F                     Port_CheckQuadType@pInput:
  2521                           	opt stack 0
  2522  00008F                     Motor_Init@pAddress:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x2F
  2526  00008F                     	ds	2
  2527  000091                     Port_CheckQuadType@pQuad:
  2528                           	opt stack 0
  2529  000091                     SPI_Init@pChannel:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0x31
  2533  000091                     	ds	1
  2534  000092                     Port_CheckQuadType@pDrive:
  2535                           	opt stack 0
  2536  000092                     SPI_Init@pMode:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x32
  2540  000092                     	ds	1
  2541  000093                     Port_CheckQuadType@Pair1:
  2542                           	opt stack 0
  2543  000093                     ___flmul@sign:
  2544                           	opt stack 0
  2545  000093                     SPI_Init@pInput:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x33
  2549  000093                     	ds	1
  2550  000094                     Port_CheckQuadType@Pair2:
  2551                           	opt stack 0
  2552  000094                     ___flmul@aexp:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x34
  2556  000094                     	ds	1
  2557  000095                     ??_LCD_Init:
  2558  000095                     Port_CheckQuadType@Output:
  2559                           	opt stack 0
  2560  000095                     ___flmul@grs:
  2561                           	opt stack 0
  2562                           
  2563                           ; 4 bytes @ 0x35
  2564  000095                     	ds	1
  2565  000096                     Port_CheckPortType@pInput:
  2566                           	opt stack 0
  2567  000096                     Port_SetQuadType@pInput:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x36
  2571  000096                     	ds	1
  2572  000097                     LCD_Init@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x37
  2576  000097                     	ds	1
  2577  000098                     Port_CheckPortType@pDrive:
  2578                           	opt stack 0
  2579  000098                     Port_SetQuadType@pQuad:
  2580                           	opt stack 0
  2581                           
  2582                           ; 1 bytes @ 0x38
  2583  000098                     	ds	1
  2584  000099                     Port_CheckPortType@Output:
  2585                           	opt stack 0
  2586  000099                     Port_SetQuadType@pType:
  2587                           	opt stack 0
  2588  000099                     ___flmul@bexp:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0x39
  2592  000099                     	ds	1
  2593  00009A                     Port_SetQuadType@Output:
  2594                           	opt stack 0
  2595  00009A                     Port_SetType@pInput:
  2596                           	opt stack 0
  2597  00009A                     ___flmul@prod:
  2598                           	opt stack 0
  2599                           
  2600                           ; 4 bytes @ 0x3A
  2601  00009A                     	ds	1
  2602  00009B                     Button_Init@pInput:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x3B
  2606  00009B                     	ds	1
  2607  00009C                     Port_SetType@pType:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x3C
  2611  00009C                     	ds	1
  2612  00009D                     ??_Port_SetType:
  2613  00009D                     Button_Init@pThreshold:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x3D
  2617  00009D                     	ds	1
  2618  00009E                     ___flmul@temp:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x3E
  2622  00009E                     	ds	1
  2623  00009F                     Port_SetType@Output:
  2624                           	opt stack 0
  2625  00009F                     Button_Init@pInitIO:
  2626                           	opt stack 0
  2627                           
  2628                           ; 3 bytes @ 0x3F
  2629  00009F                     	ds	1
  2630  0000A0                     ?_ADC_Voltage:
  2631                           	opt stack 0
  2632  0000A0                     Port_Init@pInput:
  2633                           	opt stack 0
  2634  0000A0                     ADC_Voltage@pInput:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x40
  2638  0000A0                     	ds	2
  2639  0000A2                     Port_Init@pPort:
  2640                           	opt stack 0
  2641  0000A2                     Button_Init@pGetState:
  2642                           	opt stack 0
  2643                           
  2644                           ; 3 bytes @ 0x42
  2645  0000A2                     	ds	1
  2646  0000A3                     ??_Port_Init:
  2647                           
  2648                           ; 1 bytes @ 0x43
  2649  0000A3                     	ds	1
  2650  0000A4                     ??_ADC_Voltage:
  2651                           
  2652                           ; 1 bytes @ 0x44
  2653  0000A4                     	ds	1
  2654  0000A5                     Port_Init@i:
  2655                           	opt stack 0
  2656  0000A5                     Button_Init@pFunction:
  2657                           	opt stack 0
  2658                           
  2659                           ; 3 bytes @ 0x45
  2660  0000A5                     	ds	1
  2661  0000A6                     ADC_Voltage@max:
  2662                           	opt stack 0
  2663                           
  2664                           ; 4 bytes @ 0x46
  2665  0000A6                     	ds	2
  2666  0000A8                     HMI_Init@in:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x48
  2670  0000A8                     	ds	2
  2671  0000AA                     ADC_Voltage@ref:
  2672                           	opt stack 0
  2673                           
  2674                           ; 4 bytes @ 0x4A
  2675  0000AA                     	ds	4
  2676  0000AE                     ADC_Voltage@output:
  2677                           	opt stack 0
  2678                           
  2679                           ; 4 bytes @ 0x4E
  2680  0000AE                     	ds	4
  2681  0000B2                     ?___fltol:
  2682                           	opt stack 0
  2683  0000B2                     ___fltol@f1:
  2684                           	opt stack 0
  2685                           
  2686                           ; 4 bytes @ 0x52
  2687  0000B2                     	ds	4
  2688  0000B6                     ___fltol@sign1:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x56
  2692  0000B6                     	ds	1
  2693  0000B7                     ___fltol@exp1:
  2694                           	opt stack 0
  2695                           
  2696                           ; 1 bytes @ 0x57
  2697  0000B7                     	ds	1
  2698                           tblptru	equ	0xFF8
  2699                           tblptrh	equ	0xFF7
  2700                           tblptrl	equ	0xFF6
  2701                           tablat	equ	0xFF5
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           postdec1	equ	0xFE5
  2705                           fsr1h	equ	0xFE2
  2706                           fsr1l	equ	0xFE1
  2707                           
  2708                           	psect	cstackCOMRAM
  2709  000001                     __pcstackCOMRAM:
  2710                           	opt stack 0
  2711  000001                     i2Byte_SetBit@pInput:
  2712                           	opt stack 0
  2713  000001                     i2Byte_GetZone@pInput:
  2714                           	opt stack 0
  2715  000001                     i2delay_us@us:
  2716                           	opt stack 0
  2717  000001                     i2MXK_Queue@pCallback:
  2718                           	opt stack 0
  2719                           
  2720                           ; 3 bytes @ 0x0
  2721  000001                     	ds	2
  2722  000003                     i2Byte_SetBit@pBit:
  2723                           	opt stack 0
  2724  000003                     i2Byte_GetZone@pMax:
  2725                           	opt stack 0
  2726  000003                     i2delay_us@u:
  2727                           	opt stack 0
  2728                           
  2729                           ; 4 bytes @ 0x2
  2730  000003                     	ds	1
  2731  000004                     i2Byte_SetBit@pValue:
  2732                           	opt stack 0
  2733  000004                     i2Byte_GetZone@pChunk:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x3
  2737  000004                     	ds	1
  2738  000005                     ??i2_Byte_SetBit:
  2739  000005                     i2Byte_GetZone@pChunkSize:
  2740                           	opt stack 0
  2741                           
  2742                           ; 1 bytes @ 0x4
  2743  000005                     	ds	1
  2744  000006                     ??i2_Byte_GetZone:
  2745                           
  2746                           ; 1 bytes @ 0x5
  2747  000006                     	ds	1
  2748  000007                     i2Byte_GetZone@MASK:
  2749                           	opt stack 0
  2750  000007                     i2MXK_SwitchTo@CUR:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x6
  2754  000007                     	ds	1
  2755  000008                     i2Byte_GetZone@Offset:
  2756                           	opt stack 0
  2757  000008                     i2MXK_SwitchTo@pModule:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0x7
  2761  000008                     	ds	1
  2762  000009                     i2Byte_GetZone@Output:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x8
  2766  000009                     	ds	1
  2767  00000A                     i2Byte_GetPair@pInput:
  2768                           	opt stack 0
  2769                           
  2770                           ; 2 bytes @ 0x9
  2771  00000A                     	ds	2
  2772  00000C                     i2Byte_GetPair@pPair:
  2773                           	opt stack 0
  2774                           
  2775                           ; 1 bytes @ 0xB
  2776  00000C                     	ds	1
  2777  00000D                     i2Word_GetPair@pInput:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0xC
  2781  00000D                     	ds	2
  2782  00000F                     i2Word_GetPair@pPair:
  2783                           	opt stack 0
  2784                           
  2785                           ; 1 bytes @ 0xE
  2786  00000F                     	ds	1
  2787  000010                     i2Port_SetPin@pInput:
  2788                           	opt stack 0
  2789                           
  2790                           ; 2 bytes @ 0xF
  2791  000010                     	ds	2
  2792  000012                     i2Port_SetPin@pPin:
  2793                           	opt stack 0
  2794                           
  2795                           ; 1 bytes @ 0x11
  2796  000012                     	ds	1
  2797  000013                     i2Port_SetPin@pValue:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x12
  2801  000013                     	ds	1
  2802  000014                     i2Port_SetPin@Type:
  2803                           	opt stack 0
  2804                           
  2805                           ; 1 bytes @ 0x13
  2806  000014                     	ds	1
  2807  000015                     
  2808                           ; 1 bytes @ 0x14
  2809  000015                     	ds	2
  2810  000017                     ??_ISR_Function:
  2811                           
  2812                           ; 1 bytes @ 0x16
  2813  000017                     	ds	18
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1h	equ	0xFE2
  2822                           fsr1l	equ	0xFE1
  2823                           
  2824 ;;
  2825 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2826 ;;
  2827 ;; *************** function _main *****************
  2828 ;; Defined at:
  2829 ;;		line 331 in file "main.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;		None
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;Total ram usage:        2 bytes
  2848 ;; Hardware stack levels required when called:   18
  2849 ;; This function calls:
  2850 ;;		_Console_Render
  2851 ;;		_HMI_Poll
  2852 ;;		_MXK_Dequeue
  2853 ;;		_MXK_Release
  2854 ;;		_MXK_SwitchTo
  2855 ;;		_getMode
  2856 ;;		_init
  2857 ;;		_mode1
  2858 ;;		_mode2
  2859 ;;		_mode3
  2860 ;;		_mode4
  2861 ;;		_printf
  2862 ;; This function is called by:
  2863 ;;		Startup code after reset
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text0
  2868  013988                     __ptext0:
  2869                           	opt stack 0
  2870  013988                     _main:
  2871                           	opt stack 13
  2872                           
  2873                           ;main.c: 332: init();
  2874                           
  2875                           ;incstack = 0
  2876  013988  EC8F  F0A3         	call	_init	;wreg free
  2877  01398C                     l2384:
  2878                           
  2879                           ;main.c: 335: getMode();
  2880  01398C  EC0C  F0A0         	call	_getMode	;wreg free
  2881                           
  2882                           ;main.c: 336: switch (mode) {
  2883  013990  D053               	goto	l2385
  2884  013992                     
  2885                           ;main.c: 338: mode1();
  2886  013992  EC62  F084         	call	_mode1	;wreg free
  2887                           
  2888                           ;main.c: 339: break;
  2889  013996  D7FA               	goto	l2384
  2890  013998                     
  2891                           ;main.c: 341: mode2();
  2892  013998  EC16  F09A         	call	_mode2	;wreg free
  2893                           
  2894                           ;main.c: 342: break;
  2895  01399C  D7F7               	goto	l2384
  2896  01399E                     
  2897                           ;main.c: 344: mode3();
  2898  01399E  EC9D  F0B1         	call	_mode3	;wreg free
  2899                           
  2900                           ;main.c: 345: break;
  2901  0139A2  D7F4               	goto	l2384
  2902  0139A4                     
  2903                           ;main.c: 347: mode4();
  2904  0139A4  EC2B  F08A         	call	_mode4	;wreg free
  2905                           
  2906                           ;main.c: 348: break;
  2907  0139A8  D7F1               	goto	l2384
  2908  0139AA                     
  2909                           ;main.c: 350: if (MXK_SwitchTo(eMXK_HMI)) {
  2910  0139AA  0E01               	movlw	1
  2911  0139AC  EC7D  F0AE         	call	_MXK_SwitchTo
  2912  0139B0  0900               	iorlw	0
  2913  0139B2  B4D8               	btfsc	status,2,c
  2914  0139B4  D7EB               	goto	l2384
  2915                           
  2916                           ;main.c: 351: printf("%c", (char)35);
  2917  0139B6  0EFB               	movlw	low STR_1
  2918  0139B8  0100               	movlb	0	; () banked
  2919  0139BA  6F75               	movwf	printf@f& (0+255),b
  2920  0139BC  0EFF               	movlw	high STR_1
  2921  0139BE  0100               	movlb	0	; () banked
  2922  0139C0  6F76               	movwf	(printf@f+1)& (0+255),b
  2923  0139C2  0E00               	movlw	0
  2924  0139C4  0100               	movlb	0	; () banked
  2925  0139C6  6F78               	movwf	(?_printf+3)& (0+255),b
  2926  0139C8  0E23               	movlw	35
  2927  0139CA  6F77               	movwf	(?_printf+2)& (0+255),b
  2928  0139CC  EC6E  F092         	call	_printf	;wreg free
  2929                           
  2930                           ;main.c: 352: printf("Please select mode.\n");
  2931  0139D0  0EC7               	movlw	low STR_12
  2932  0139D2  0100               	movlb	0	; () banked
  2933  0139D4  6F75               	movwf	printf@f& (0+255),b
  2934  0139D6  0EFF               	movlw	high STR_12
  2935  0139D8  0100               	movlb	0	; () banked
  2936  0139DA  6F76               	movwf	(printf@f+1)& (0+255),b
  2937  0139DC  EC6E  F092         	call	_printf	;wreg free
  2938                           
  2939                           ;main.c: 353: printf("                   \n");
  2940  0139E0  0EB2               	movlw	low STR_13
  2941  0139E2  0100               	movlb	0	; () banked
  2942  0139E4  6F75               	movwf	printf@f& (0+255),b
  2943  0139E6  0EFF               	movlw	high STR_13
  2944  0139E8  0100               	movlb	0	; () banked
  2945  0139EA  6F76               	movwf	(printf@f+1)& (0+255),b
  2946  0139EC  EC6E  F092         	call	_printf	;wreg free
  2947                           
  2948                           ;main.c: 354: printf("                   \n");
  2949  0139F0  0EB2               	movlw	low STR_13
  2950  0139F2  0100               	movlb	0	; () banked
  2951  0139F4  6F75               	movwf	printf@f& (0+255),b
  2952  0139F6  0EFF               	movlw	high STR_13
  2953  0139F8  0100               	movlb	0	; () banked
  2954  0139FA  6F76               	movwf	(printf@f+1)& (0+255),b
  2955  0139FC  EC6E  F092         	call	_printf	;wreg free
  2956                           
  2957                           ;main.c: 355: printf("                   \n");
  2958  013A00  0EB2               	movlw	low STR_13
  2959  013A02  0100               	movlb	0	; () banked
  2960  013A04  6F75               	movwf	printf@f& (0+255),b
  2961  013A06  0EFF               	movlw	high STR_13
  2962  013A08  0100               	movlb	0	; () banked
  2963  013A0A  6F76               	movwf	(printf@f+1)& (0+255),b
  2964  013A0C  EC6E  F092         	call	_printf	;wreg free
  2965                           
  2966                           ;main.c: 356: printf("                   \n");
  2967  013A10  0EB2               	movlw	low STR_13
  2968  013A12  0100               	movlb	0	; () banked
  2969  013A14  6F75               	movwf	printf@f& (0+255),b
  2970  013A16  0EFF               	movlw	high STR_13
  2971  013A18  0100               	movlb	0	; () banked
  2972  013A1A  6F76               	movwf	(printf@f+1)& (0+255),b
  2973  013A1C  EC6E  F092         	call	_printf	;wreg free
  2974                           
  2975                           ;main.c: 357: Console_Render();
  2976  013A20  EC82  F08F         	call	_Console_Render	;wreg free
  2977                           
  2978                           ;main.c: 358: HMI_Poll();
  2979  013A24  EC98  F0A9         	call	_HMI_Poll	;wreg free
  2980                           
  2981                           ;main.c: 359: if (MXK_Release())
  2982  013A28  ECB9  F0B1         	call	_MXK_Release	;wreg free
  2983  013A2C  0900               	iorlw	0
  2984  013A2E  B4D8               	btfsc	status,2,c
  2985  013A30  D7AD               	goto	l2384
  2986                           
  2987                           ;main.c: 360: MXK_Dequeue();
  2988  013A32  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  2989                           
  2990                           ;main.c: 361: }
  2991                           ;main.c: 362: }
  2992  013A36  D7AA               	goto	l2384
  2993  013A38                     l2385:
  2994  013A38  C323  F3F7         	movff	_mode,??_main
  2995  013A3C  C324  F3F8         	movff	_mode+1,??_main+1
  2996                           
  2997                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2998                           ; Switch size 1, requested type "space"
  2999                           ; Number of cases is 1, Range of values is 0 to 0
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte            4     3 (average)
  3003                           ;	Chosen strategy is simple_byte
  3004  013A40  0103               	movlb	3	; () banked
  3005  013A42  51F8               	movf	(??_main+1)& (0+255),w,b
  3006  013A44  0A00               	xorlw	0	; case 0
  3007  013A46  A4D8               	btfss	status,2,c
  3008  013A48  D7B0               	goto	l2391
  3009                           
  3010                           ; BSR set to: 3
  3011                           ; Switch size 1, requested type "space"
  3012                           ; Number of cases is 4, Range of values is 1 to 4
  3013                           ; switch strategies available:
  3014                           ; Name         Instructions Cycles
  3015                           ; simple_byte           13     7 (average)
  3016                           ;	Chosen strategy is simple_byte
  3017  013A4A  0103               	movlb	3	; () banked
  3018  013A4C  51F7               	movf	??_main& (0+255),w,b
  3019  013A4E  0A01               	xorlw	1	; case 1
  3020  013A50  B4D8               	btfsc	status,2,c
  3021  013A52  D79F               	goto	l2386
  3022  013A54  0A03               	xorlw	3	; case 2
  3023  013A56  B4D8               	btfsc	status,2,c
  3024  013A58  D79F               	goto	l2388
  3025  013A5A  0A01               	xorlw	1	; case 3
  3026  013A5C  B4D8               	btfsc	status,2,c
  3027  013A5E  D79F               	goto	l2389
  3028  013A60  0A07               	xorlw	7	; case 4
  3029  013A62  B4D8               	btfsc	status,2,c
  3030  013A64  D79F               	goto	l2390
  3031  013A66  D7A1               	goto	l2391
  3032  013A68                     __end_of_main:
  3033                           	opt stack 0
  3034                           tblptru	equ	0xFF8
  3035                           tblptrh	equ	0xFF7
  3036                           tblptrl	equ	0xFF6
  3037                           tablat	equ	0xFF5
  3038                           postinc0	equ	0xFEE
  3039                           wreg	equ	0xFE8
  3040                           postdec1	equ	0xFE5
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _mode4 *****************
  3046 ;; Defined at:
  3047 ;;		line 250 in file "main.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;Total ram usage:        5 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:   16
  3068 ;; This function calls:
  3069 ;;		_ADC_Start
  3070 ;;		_ADC_Voltage
  3071 ;;		_Console_Render
  3072 ;;		_HMI_Poll
  3073 ;;		_HMI_Render
  3074 ;;		_HMI_SetNumber
  3075 ;;		_MXK_Dequeue
  3076 ;;		_MXK_Release
  3077 ;;		_MXK_SwitchTo
  3078 ;;		_Motor_Move
  3079 ;;		_Motor_Speed
  3080 ;;		___fldiv
  3081 ;;		___flmul
  3082 ;;		___fltol
  3083 ;;		___xxtofl
  3084 ;;		_irobot_song_play
  3085 ;;		_irobot_stop_motion
  3086 ;;		_printf
  3087 ;;		_update_angle
  3088 ;;		_update_bump_and_cliff
  3089 ;;		_update_distance
  3090 ;; This function is called by:
  3091 ;;		_main
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text1
  3096  011456                     __ptext1:
  3097                           	opt stack 0
  3098  011456                     _mode4:
  3099                           	opt stack 14
  3100                           
  3101                           ;main.c: 251: update_bump_and_cliff();
  3102                           
  3103                           ; BSR set to: 3
  3104                           ;incstack = 0
  3105  011456  EC78  F0AF         	call	_update_bump_and_cliff	;wreg free
  3106                           
  3107                           ;main.c: 252: update_distance();
  3108  01145A  EC56  F0B2         	call	_update_distance	;wreg free
  3109                           
  3110                           ;main.c: 253: update_angle();
  3111  01145E  EC5F  F0B2         	call	_update_angle	;wreg free
  3112                           
  3113                           ;main.c: 257: if (iRBumpLeft || iRBumpRight) {
  3114  011462  0100               	movlb	0	; () banked
  3115  011464  51D6               	movf	_iRBumpLeft& (0+255),w,b
  3116  011466  A4D8               	btfss	status,2,c
  3117  011468  D004               	goto	u13760
  3118                           
  3119                           ; BSR set to: 0
  3120  01146A  0100               	movlb	0	; () banked
  3121  01146C  51D7               	movf	_iRBumpRight& (0+255),w,b
  3122  01146E  B4D8               	btfsc	status,2,c
  3123  011470  D006               	goto	l2357
  3124  011472                     u13760:
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 258: irobot_song_play(0);
  3128                           
  3129                           ; BSR set to: 0
  3130  011472  0E00               	movlw	0
  3131  011474  EC42  F0B2         	call	_irobot_song_play
  3132                           
  3133                           ;main.c: 259: irobot_stop_motion(0);
  3134  011478  0E00               	movlw	0
  3135  01147A  ECF2  F0AD         	call	_irobot_stop_motion
  3136  01147E                     l2357:
  3137                           
  3138                           ;main.c: 260: }
  3139                           ;main.c: 261: if (angleTotal > 83) {
  3140  01147E  0100               	movlb	0	; () banked
  3141  011480  BFC5               	btfsc	(_angleTotal+1)& (0+255),7,b
  3142  011482  D00B               	goto	l2360
  3143  011484  0100               	movlb	0	; () banked
  3144  011486  51C5               	movf	(_angleTotal+1)& (0+255),w,b
  3145  011488  E105               	bnz	u13770
  3146  01148A  0E54               	movlw	84
  3147  01148C  0100               	movlb	0	; () banked
  3148  01148E  5DC4               	subwf	_angleTotal& (0+255),w,b
  3149  011490  A0D8               	btfss	status,0,c
  3150  011492  D003               	goto	l2360
  3151  011494                     u13770:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 262: irobot_stop_motion(0);
  3155  011494  0E00               	movlw	0
  3156  011496  ECF2  F0AD         	call	_irobot_stop_motion
  3157  01149A                     l2360:
  3158                           
  3159                           ;main.c: 263: }
  3160                           ;main.c: 265: if (MXK_SwitchTo(eMXK_HMI)) {
  3161  01149A  0E01               	movlw	1
  3162  01149C  EC7D  F0AE         	call	_MXK_SwitchTo
  3163  0114A0  0900               	iorlw	0
  3164  0114A2  B4D8               	btfsc	status,2,c
  3165  0114A4  D021               	goto	l2362
  3166                           
  3167                           ;main.c: 266: printf("%c", (char)35);
  3168  0114A6  0EFB               	movlw	low STR_1
  3169  0114A8  0100               	movlb	0	; () banked
  3170  0114AA  6F75               	movwf	printf@f& (0+255),b
  3171  0114AC  0EFF               	movlw	high STR_1
  3172  0114AE  0100               	movlb	0	; () banked
  3173  0114B0  6F76               	movwf	(printf@f+1)& (0+255),b
  3174  0114B2  0E00               	movlw	0
  3175  0114B4  0100               	movlb	0	; () banked
  3176  0114B6  6F78               	movwf	(?_printf+3)& (0+255),b
  3177  0114B8  0E23               	movlw	35
  3178  0114BA  6F77               	movwf	(?_printf+2)& (0+255),b
  3179  0114BC  EC6E  F092         	call	_printf	;wreg free
  3180                           
  3181                           ;main.c: 267: printf("Closest Wall:%u\n", MinDist);
  3182  0114C0  0EDC               	movlw	low STR_8
  3183  0114C2  0100               	movlb	0	; () banked
  3184  0114C4  6F75               	movwf	printf@f& (0+255),b
  3185  0114C6  0EFF               	movlw	high STR_8
  3186  0114C8  0100               	movlb	0	; () banked
  3187  0114CA  6F76               	movwf	(printf@f+1)& (0+255),b
  3188  0114CC  C0FB  F077         	movff	_MinDist,?_printf+2
  3189  0114D0  C0FC  F078         	movff	_MinDist+1,?_printf+3
  3190  0114D4  EC6E  F092         	call	_printf	;wreg free
  3191                           
  3192                           ;main.c: 268: Console_Render();
  3193  0114D8  EC82  F08F         	call	_Console_Render	;wreg free
  3194                           
  3195                           ;main.c: 269: if (MXK_Release())
  3196  0114DC  ECB9  F0B1         	call	_MXK_Release	;wreg free
  3197  0114E0  0900               	iorlw	0
  3198  0114E2  A4D8               	btfss	status,2,c
  3199                           
  3200                           ;main.c: 270: MXK_Dequeue();
  3201  0114E4  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  3202  0114E8                     l2362:
  3203                           
  3204                           ;main.c: 271: }
  3205                           ;main.c: 272: HMI_Poll();
  3206  0114E8  EC98  F0A9         	call	_HMI_Poll	;wreg free
  3207                           
  3208                           ;main.c: 273: StepRotate = 0;
  3209  0114EC  0E00               	movlw	0
  3210  0114EE  0100               	movlb	0	; () banked
  3211  0114F0  6FC3               	movwf	(_StepRotate+1)& (0+255),b
  3212  0114F2  0E00               	movlw	0
  3213  0114F4  6FC2               	movwf	_StepRotate& (0+255),b
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 274: MinDist = 1000;
  3217  0114F6  0E03               	movlw	3
  3218  0114F8  0100               	movlb	0	; () banked
  3219  0114FA  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3220  0114FC  0EE8               	movlw	232
  3221  0114FE  6FFB               	movwf	_MinDist& (0+255),b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 275: Stepstomin = 0;
  3225  011500  0E00               	movlw	0
  3226  011502  0100               	movlb	0	; () banked
  3227  011504  6FC1               	movwf	(_Stepstomin+1)& (0+255),b
  3228  011506  0E00               	movlw	0
  3229  011508  6FC0               	movwf	_Stepstomin& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 276: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3233  01150A  0E00               	movlw	0
  3234  01150C  0100               	movlb	0	; () banked
  3235  01150E  6F72               	movwf	___fldiv@a& (0+255),b
  3236  011510  0E00               	movlw	0
  3237  011512  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3238  011514  0EC8               	movlw	200
  3239  011516  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3240  011518  0E43               	movlw	67
  3241  01151A  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3242  01151C  C0C0  F060         	movff	_Stepstomin,___xxtofl@val
  3243  011520  C0C1  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3244  011524  0100               	movlb	0	; () banked
  3245  011526  0E00               	movlw	0
  3246  011528  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3247  01152A  0EFF               	movlw	-1
  3248  01152C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3249  01152E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3250  011530  0E01               	movlw	1
  3251  011532  EC87  F091         	call	___xxtofl
  3252  011536  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3253  01153A  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3254  01153E  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3255  011542  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3256  011546  EC6E  F086         	call	___fldiv	;wreg free
  3257  01154A  C06E  F087         	movff	?___fldiv,___flmul@b
  3258  01154E  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3259  011552  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3260  011556  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3261  01155A  0E00               	movlw	0
  3262  01155C  0100               	movlb	0	; () banked
  3263  01155E  6F8B               	movwf	___flmul@a& (0+255),b
  3264  011560  0E00               	movlw	0
  3265  011562  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3266  011564  0EB4               	movlw	180
  3267  011566  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3268  011568  0E43               	movlw	67
  3269  01156A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3270  01156C  EC00  F080         	call	___flmul	;wreg free
  3271  011570  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3272  011574  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3273  011578  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3274  01157C  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3275                           
  3276                           ;main.c: 277: IRValue = 0;
  3277  011580  0E00               	movlw	0
  3278  011582  0100               	movlb	0	; () banked
  3279  011584  6FBF               	movwf	(_IRValue+1)& (0+255),b
  3280  011586  0E00               	movlw	0
  3281  011588  6FBE               	movwf	_IRValue& (0+255),b
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 278: TimerX = 8;
  3285  01158A  0E00               	movlw	0
  3286  01158C  0100               	movlb	0	; () banked
  3287  01158E  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3288  011590  0E08               	movlw	8
  3289  011592  6FF9               	movwf	_TimerX& (0+255),b
  3290                           
  3291                           ;main.c: 279: while (StepRotate < 400) {
  3292  011594  D123               	goto	l2377
  3293  011596                     
  3294                           ; BSR set to: 0
  3295                           ;main.c: 280: StepRotate++;
  3296                           
  3297                           ; BSR set to: 0
  3298  011596  0100               	movlb	0	; () banked
  3299  011598  4BC2               	infsnz	_StepRotate& (0+255),f,b
  3300  01159A  2BC3               	incf	(_StepRotate+1)& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 281: ADC_Start(&ADC_AN0);
  3304  01159C  0EF4               	movlw	low _ADC_AN0
  3305  01159E  0100               	movlb	0	; () banked
  3306  0115A0  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3307  0115A2  0E00               	movlw	high _ADC_AN0
  3308  0115A4  0100               	movlb	0	; () banked
  3309  0115A6  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3310  0115A8  EC75  F0A7         	call	_ADC_Start	;wreg free
  3311                           
  3312                           ;main.c: 282: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3313  0115AC  0EF4               	movlw	low _ADC_AN0
  3314  0115AE  0100               	movlb	0	; () banked
  3315  0115B0  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3316  0115B2  0E00               	movlw	high _ADC_AN0
  3317  0115B4  0100               	movlb	0	; () banked
  3318  0115B6  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3319  0115B8  EC34  F09D         	call	_ADC_Voltage	;wreg free
  3320  0115BC  C0A0  F3F0         	movff	?_ADC_Voltage,_mode4$15585
  3321  0115C0  C0A1  F3F1         	movff	?_ADC_Voltage+1,_mode4$15585+1
  3322  0115C4  C0A2  F3F2         	movff	?_ADC_Voltage+2,_mode4$15585+2
  3323  0115C8  C0A3  F3F3         	movff	?_ADC_Voltage+3,_mode4$15585+3
  3324                           
  3325                           ;main.c: 282: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3326  0115CC  C3F0  F072         	movff	_mode4$15585,___fldiv@a
  3327  0115D0  C3F1  F073         	movff	_mode4$15585+1,___fldiv@a+1
  3328  0115D4  C3F2  F074         	movff	_mode4$15585+2,___fldiv@a+2
  3329  0115D8  C3F3  F075         	movff	_mode4$15585+3,___fldiv@a+3
  3330  0115DC  0E00               	movlw	0
  3331  0115DE  0100               	movlb	0	; () banked
  3332  0115E0  6F6E               	movwf	___fldiv@b& (0+255),b
  3333  0115E2  0E00               	movlw	0
  3334  0115E4  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3335  0115E6  0E6C               	movlw	108
  3336  0115E8  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3337  0115EA  0E42               	movlw	66
  3338  0115EC  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3339  0115EE  EC6E  F086         	call	___fldiv	;wreg free
  3340  0115F2  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3341  0115F6  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3342  0115FA  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3343  0115FE  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3344  011602  EC46  F09B         	call	___fltol	;wreg free
  3345  011606  C0B2  F0BE         	movff	?___fltol,_IRValue
  3346  01160A  C0B3  F0BF         	movff	?___fltol+1,_IRValue+1
  3347                           
  3348                           ;main.c: 283: if (MXK_SwitchTo(eMXK_HMI)) {
  3349  01160E  0E01               	movlw	1
  3350  011610  EC7D  F0AE         	call	_MXK_SwitchTo
  3351  011614  0900               	iorlw	0
  3352  011616  B4D8               	btfsc	status,2,c
  3353  011618  D00E               	goto	l2366
  3354                           
  3355                           ;main.c: 284: HMI_SetNumber(IRValue);
  3356  01161A  C0BE  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3357  01161E  C0BF  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3358  011622  ECA6  F0B0         	call	_HMI_SetNumber	;wreg free
  3359                           
  3360                           ;main.c: 285: HMI_Render();
  3361  011626  ECDE  F0AE         	call	_HMI_Render	;wreg free
  3362                           
  3363                           ;main.c: 286: if (MXK_Release())
  3364  01162A  ECB9  F0B1         	call	_MXK_Release	;wreg free
  3365  01162E  0900               	iorlw	0
  3366  011630  A4D8               	btfss	status,2,c
  3367                           
  3368                           ;main.c: 287: MXK_Dequeue();
  3369  011632  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  3370  011636                     l2366:
  3371                           
  3372                           ;main.c: 288: }
  3373                           ;main.c: 289: if (IRValue < MinDist) {
  3374  011636  0100               	movlb	0	; () banked
  3375  011638  51FB               	movf	_MinDist& (0+255),w,b
  3376  01163A  0100               	movlb	0	; () banked
  3377  01163C  5DBE               	subwf	_IRValue& (0+255),w,b
  3378  01163E  0100               	movlb	0	; () banked
  3379  011640  51BF               	movf	(_IRValue+1)& (0+255),w,b
  3380  011642  0A80               	xorlw	128
  3381  011644  0103               	movlb	3	; () banked
  3382  011646  6FEF               	movwf	??_mode4& (0+255),b
  3383  011648  0100               	movlb	0	; () banked
  3384  01164A  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3385  01164C  0A80               	xorlw	128
  3386  01164E  0103               	movlb	3	; () banked
  3387  011650  59EF               	subwfb	??_mode4& (0+255),w,b
  3388  011652  B0D8               	btfsc	status,0,c
  3389  011654  D008               	goto	l2367
  3390                           
  3391                           ; BSR set to: 3
  3392                           ;main.c: 290: MinDist = IRValue;
  3393  011656  C0BE  F0FB         	movff	_IRValue,_MinDist
  3394  01165A  C0BF  F0FC         	movff	_IRValue+1,_MinDist+1
  3395                           
  3396                           ;main.c: 291: Stepstomin = StepRotate;
  3397  01165E  C0C2  F0C0         	movff	_StepRotate,_Stepstomin
  3398  011662  C0C3  F0C1         	movff	_StepRotate+1,_Stepstomin+1
  3399  011666                     l2367:
  3400                           
  3401                           ; BSR set to: 3
  3402                           ;main.c: 292: }
  3403                           ;main.c: 293: if (MXK_SwitchTo(eMXK_Motor)) {
  3404                           
  3405                           ; BSR set to: 3
  3406  011666  0E08               	movlw	8
  3407  011668  EC7D  F0AE         	call	_MXK_SwitchTo
  3408  01166C  0900               	iorlw	0
  3409  01166E  B4D8               	btfsc	status,2,c
  3410  011670  D01F               	goto	l2369
  3411                           
  3412                           ;main.c: 294: Motor_Speed(&Stepper, (50));
  3413  011672  0EC6               	movlw	low _Stepper
  3414  011674  0100               	movlb	0	; () banked
  3415  011676  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3416  011678  0E03               	movlw	high _Stepper
  3417  01167A  0100               	movlb	0	; () banked
  3418  01167C  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3419  01167E  0E00               	movlw	0
  3420  011680  0100               	movlb	0	; () banked
  3421  011682  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3422  011684  0E32               	movlw	50
  3423  011686  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3424  011688  EC91  F0B0         	call	_Motor_Speed	;wreg free
  3425                           
  3426                           ;main.c: 295: Motor_Move(&Stepper, -1);
  3427  01168C  0EC6               	movlw	low _Stepper
  3428  01168E  0100               	movlb	0	; () banked
  3429  011690  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3430  011692  0E03               	movlw	high _Stepper
  3431  011694  0100               	movlb	0	; () banked
  3432  011696  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3433  011698  0EFF               	movlw	255
  3434  01169A  0100               	movlb	0	; () banked
  3435  01169C  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3436  01169E  6965               	setf	Motor_Move@pDelta& (0+255),b
  3437  0116A0  EC95  F0AF         	call	_Motor_Move	;wreg free
  3438                           
  3439                           ;main.c: 296: if (MXK_Release())
  3440  0116A4  ECB9  F0B1         	call	_MXK_Release	;wreg free
  3441  0116A8  0900               	iorlw	0
  3442  0116AA  A4D8               	btfss	status,2,c
  3443                           
  3444                           ;main.c: 297: MXK_Dequeue();
  3445  0116AC  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  3446  0116B0                     l2369:
  3447                           
  3448                           ;main.c: 298: }
  3449                           ;main.c: 299: TimerX = 10;
  3450  0116B0  0E00               	movlw	0
  3451  0116B2  0100               	movlb	0	; () banked
  3452  0116B4  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3453  0116B6  0E0A               	movlw	10
  3454  0116B8  6FF9               	movwf	_TimerX& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;main.c: 300: if (TimerX > 0) {
  3458  0116BA  0100               	movlb	0	; () banked
  3459  0116BC  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3460  0116BE  D063               	goto	u13880
  3461  0116C0  0100               	movlb	0	; () banked
  3462  0116C2  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3463  0116C4  E156               	bnz	l16481
  3464  0116C6  0100               	movlb	0	; () banked
  3465  0116C8  05F9               	decf	_TimerX& (0+255),w,b
  3466  0116CA  B0D8               	btfsc	status,0,c
  3467  0116CC  D052               	goto	l2371
  3468  0116CE  D05B               	goto	u13880
  3469  0116D0                     l16463:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 302: ADC_Start(&ADC_AN0);
  3473  0116D0  0EF4               	movlw	low _ADC_AN0
  3474  0116D2  0100               	movlb	0	; () banked
  3475  0116D4  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3476  0116D6  0E00               	movlw	high _ADC_AN0
  3477  0116D8  0100               	movlb	0	; () banked
  3478  0116DA  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3479  0116DC  EC75  F0A7         	call	_ADC_Start	;wreg free
  3480                           
  3481                           ;main.c: 303: if (MXK_SwitchTo(eMXK_HMI)) {
  3482  0116E0  0E01               	movlw	1
  3483  0116E2  EC7D  F0AE         	call	_MXK_SwitchTo
  3484  0116E6  0900               	iorlw	0
  3485  0116E8  B4D8               	btfsc	status,2,c
  3486  0116EA  D00E               	goto	l2374
  3487                           
  3488                           ;main.c: 304: HMI_SetNumber(IRValue);
  3489  0116EC  C0BE  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3490  0116F0  C0BF  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3491  0116F4  ECA6  F0B0         	call	_HMI_SetNumber	;wreg free
  3492                           
  3493                           ;main.c: 305: HMI_Render();
  3494  0116F8  ECDE  F0AE         	call	_HMI_Render	;wreg free
  3495                           
  3496                           ;main.c: 306: if (MXK_Release())
  3497  0116FC  ECB9  F0B1         	call	_MXK_Release	;wreg free
  3498  011700  0900               	iorlw	0
  3499  011702  A4D8               	btfss	status,2,c
  3500                           
  3501                           ;main.c: 307: MXK_Dequeue();
  3502  011704  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  3503  011708                     l2374:
  3504                           
  3505                           ;main.c: 308: }
  3506                           ;main.c: 309: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3507  011708  0EF4               	movlw	low _ADC_AN0
  3508  01170A  0100               	movlb	0	; () banked
  3509  01170C  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3510  01170E  0E00               	movlw	high _ADC_AN0
  3511  011710  0100               	movlb	0	; () banked
  3512  011712  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3513  011714  EC34  F09D         	call	_ADC_Voltage	;wreg free
  3514  011718  C0A0  F3F0         	movff	?_ADC_Voltage,_mode4$15585
  3515  01171C  C0A1  F3F1         	movff	?_ADC_Voltage+1,_mode4$15585+1
  3516  011720  C0A2  F3F2         	movff	?_ADC_Voltage+2,_mode4$15585+2
  3517  011724  C0A3  F3F3         	movff	?_ADC_Voltage+3,_mode4$15585+3
  3518                           
  3519                           ;main.c: 308: }
  3520                           ;main.c: 309: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3521  011728  C3F0  F072         	movff	_mode4$15585,___fldiv@a
  3522  01172C  C3F1  F073         	movff	_mode4$15585+1,___fldiv@a+1
  3523  011730  C3F2  F074         	movff	_mode4$15585+2,___fldiv@a+2
  3524  011734  C3F3  F075         	movff	_mode4$15585+3,___fldiv@a+3
  3525  011738  0E00               	movlw	0
  3526  01173A  0100               	movlb	0	; () banked
  3527  01173C  6F6E               	movwf	___fldiv@b& (0+255),b
  3528  01173E  0E00               	movlw	0
  3529  011740  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3530  011742  0E6C               	movlw	108
  3531  011744  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3532  011746  0E42               	movlw	66
  3533  011748  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3534  01174A  EC6E  F086         	call	___fldiv	;wreg free
  3535  01174E  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3536  011752  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3537  011756  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3538  01175A  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3539  01175E  EC46  F09B         	call	___fltol	;wreg free
  3540  011762  C0B2  F0BE         	movff	?___fltol,_IRValue
  3541  011766  C0B3  F0BF         	movff	?___fltol+1,_IRValue+1
  3542                           
  3543                           ;main.c: 310: TimerX--;
  3544  01176A  0100               	movlb	0	; () banked
  3545  01176C  07F9               	decf	_TimerX& (0+255),f,b
  3546  01176E  A0D8               	btfss	status,0,c
  3547  011770  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3548  011772                     l2371:
  3549  011772                     l16481:
  3550                           
  3551                           ; BSR set to: 0
  3552  011772  0100               	movlb	0	; () banked
  3553  011774  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3554  011776  D007               	goto	u13880
  3555  011778  0100               	movlb	0	; () banked
  3556  01177A  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3557  01177C  E1A9               	bnz	l16463
  3558  01177E  0100               	movlb	0	; () banked
  3559  011780  05F9               	decf	_TimerX& (0+255),w,b
  3560  011782  B0D8               	btfsc	status,0,c
  3561  011784  D7A5               	goto	l2372
  3562  011786                     u13880:
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;main.c: 311: }
  3566                           ;main.c: 312: }
  3567                           ;main.c: 313: if (MXK_SwitchTo(eMXK_HMI)) {
  3568                           
  3569                           ; BSR set to: 0
  3570                           
  3571                           ; BSR set to: 0
  3572  011786  0E01               	movlw	1
  3573  011788  EC7D  F0AE         	call	_MXK_SwitchTo
  3574  01178C  0900               	iorlw	0
  3575  01178E  B4D8               	btfsc	status,2,c
  3576  011790  D025               	goto	l2377
  3577                           
  3578                           ;main.c: 314: printf("%c", (char)35);
  3579  011792  0EFB               	movlw	low STR_1
  3580  011794  0100               	movlb	0	; () banked
  3581  011796  6F75               	movwf	printf@f& (0+255),b
  3582  011798  0EFF               	movlw	high STR_1
  3583  01179A  0100               	movlb	0	; () banked
  3584  01179C  6F76               	movwf	(printf@f+1)& (0+255),b
  3585  01179E  0E00               	movlw	0
  3586  0117A0  0100               	movlb	0	; () banked
  3587  0117A2  6F78               	movwf	(?_printf+3)& (0+255),b
  3588  0117A4  0E23               	movlw	35
  3589  0117A6  6F77               	movwf	(?_printf+2)& (0+255),b
  3590  0117A8  EC6E  F092         	call	_printf	;wreg free
  3591                           
  3592                           ;main.c: 315: printf("Closest Wall:%u\n Closest Angle:%u\n", MinDist, Stepstomin);
  3593  0117AC  0E8F               	movlw	low STR_10
  3594  0117AE  0100               	movlb	0	; () banked
  3595  0117B0  6F75               	movwf	printf@f& (0+255),b
  3596  0117B2  0EFF               	movlw	high STR_10
  3597  0117B4  0100               	movlb	0	; () banked
  3598  0117B6  6F76               	movwf	(printf@f+1)& (0+255),b
  3599  0117B8  C0FB  F077         	movff	_MinDist,?_printf+2
  3600  0117BC  C0FC  F078         	movff	_MinDist+1,?_printf+3
  3601  0117C0  C0C0  F079         	movff	_Stepstomin,?_printf+4
  3602  0117C4  C0C1  F07A         	movff	_Stepstomin+1,?_printf+5
  3603  0117C8  EC6E  F092         	call	_printf	;wreg free
  3604                           
  3605                           ;main.c: 316: Console_Render();
  3606  0117CC  EC82  F08F         	call	_Console_Render	;wreg free
  3607                           
  3608                           ;main.c: 317: if (MXK_Release())
  3609  0117D0  ECB9  F0B1         	call	_MXK_Release	;wreg free
  3610  0117D4  0900               	iorlw	0
  3611  0117D6  A4D8               	btfss	status,2,c
  3612                           
  3613                           ;main.c: 318: MXK_Dequeue();
  3614  0117D8  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  3615  0117DC                     l2377:
  3616  0117DC  0100               	movlb	0	; () banked
  3617  0117DE  BFC3               	btfsc	(_StepRotate+1)& (0+255),7,b
  3618  0117E0  D6DA               	goto	l2364
  3619  0117E2  0E90               	movlw	144
  3620  0117E4  0100               	movlb	0	; () banked
  3621  0117E6  5DC2               	subwf	_StepRotate& (0+255),w,b
  3622  0117E8  0E01               	movlw	1
  3623  0117EA  0100               	movlb	0	; () banked
  3624  0117EC  59C3               	subwfb	(_StepRotate+1)& (0+255),w,b
  3625  0117EE  A0D8               	btfss	status,0,c
  3626  0117F0  D6D2               	goto	l2364
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;main.c: 319: }
  3630                           ;main.c: 320: }
  3631                           ;main.c: 325: irobot_song_play(0);
  3632                           
  3633                           ; BSR set to: 0
  3634  0117F2  0E00               	movlw	0
  3635  0117F4  EC42  F0B2         	call	_irobot_song_play
  3636                           
  3637                           ;main.c: 326: irobot_stop_motion(0);
  3638  0117F8  0E00               	movlw	0
  3639  0117FA  ECF2  F0AD         	call	_irobot_stop_motion
  3640  0117FE  0012               	return		;funcret
  3641  011800                     __end_of_mode4:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           postdec1	equ	0xFE5
  3650                           fsr1h	equ	0xFE2
  3651                           fsr1l	equ	0xFE1
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function _mode3 *****************
  3655 ;; Defined at:
  3656 ;;		line 244 in file "main.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;Total ram usage:        0 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:   12
  3677 ;; This function calls:
  3678 ;;		_irobot_rotate
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text2
  3685  01633A                     __ptext2:
  3686                           	opt stack 0
  3687  01633A                     _mode3:
  3688                           	opt stack 18
  3689                           
  3690                           ;main.c: 245: irobot_rotate(0, 270, 200);
  3691                           
  3692                           ;incstack = 0
  3693  01633A  0E01               	movlw	1
  3694  01633C  0100               	movlb	0	; () banked
  3695  01633E  6F7E               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3696  016340  0E0E               	movlw	14
  3697  016342  6F7D               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3698  016344  0E00               	movlw	0
  3699  016346  0100               	movlb	0	; () banked
  3700  016348  6F80               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3701  01634A  0EC8               	movlw	200
  3702  01634C  6F7F               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3703  01634E  0E00               	movlw	0
  3704  016350  EC90  F0A2         	call	_irobot_rotate
  3705  016354  0012               	return		;funcret
  3706  016356                     __end_of_mode3:
  3707                           	opt stack 0
  3708                           tblptru	equ	0xFF8
  3709                           tblptrh	equ	0xFF7
  3710                           tblptrl	equ	0xFF6
  3711                           tablat	equ	0xFF5
  3712                           postinc0	equ	0xFEE
  3713                           wreg	equ	0xFE8
  3714                           postdec1	equ	0xFE5
  3715                           fsr1h	equ	0xFE2
  3716                           fsr1l	equ	0xFE1
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _irobot_rotate *****************
  3720 ;; Defined at:
  3721 ;;		line 280 in file "Library/iRobotSerial.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  isScript        1    wreg     unsigned char 
  3724 ;;  rotateAngle     2   29[BANK0 ] short 
  3725 ;;  rotateSpeed     2   31[BANK0 ] short 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  isScript        1   34[BANK0 ] unsigned char 
  3728 ;;  rotateDirect    2   37[BANK0 ] short 
  3729 ;;  angleTotal      2   35[BANK0 ] short 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3739 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;Total ram usage:       10 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:   11
  3746 ;; This function calls:
  3747 ;;		_irobot_move
  3748 ;;		_irobot_stop_motion
  3749 ;;		_update_angle
  3750 ;; This function is called by:
  3751 ;;		_mode3
  3752 ;;		_irobot_rotate_to
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text3
  3757  014520                     __ptext3:
  3758                           	opt stack 0
  3759  014520                     _irobot_rotate:
  3760                           	opt stack 18
  3761                           
  3762                           ;incstack = 0
  3763                           ;irobot_rotate@isScript stored from wreg
  3764  014520  0100               	movlb	0	; () banked
  3765  014522  6F82               	movwf	irobot_rotate@isScript& (0+255),b
  3766                           
  3767                           ;iRobotSerial.c: 281: INT16 angleTotal = 0;
  3768  014524  0E00               	movlw	0
  3769  014526  0100               	movlb	0	; () banked
  3770  014528  6F84               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  3771  01452A  0E00               	movlw	0
  3772  01452C  6F83               	movwf	irobot_rotate@angleTotal& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;iRobotSerial.c: 282: INT16 rotateDirection;
  3776                           ;iRobotSerial.c: 284: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateDire
      +                          ction = iR_CONST_CW);
  3777  01452E  0100               	movlb	0	; () banked
  3778  014530  BF7E               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  3779  014532  D00D               	goto	l2156
  3780  014534  0100               	movlb	0	; () banked
  3781  014536  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3782  014538  E104               	bnz	u11040
  3783  01453A  0100               	movlb	0	; () banked
  3784  01453C  057D               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  3785  01453E  A0D8               	btfss	status,0,c
  3786  014540  D006               	goto	l2156
  3787  014542                     u11040:
  3788                           
  3789                           ; BSR set to: 0
  3790  014542  0E00               	movlw	0
  3791  014544  0100               	movlb	0	; () banked
  3792  014546  6F86               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  3793  014548  0E01               	movlw	1
  3794  01454A  6F85               	movwf	irobot_rotate@rotateDirection& (0+255),b
  3795  01454C  D003               	goto	l2158
  3796  01454E                     l2156:
  3797                           
  3798                           ; BSR set to: 0
  3799  01454E  0100               	movlb	0	; () banked
  3800  014550  6985               	setf	irobot_rotate@rotateDirection& (0+255),b
  3801  014552  6986               	setf	(irobot_rotate@rotateDirection+1)& (0+255),b
  3802  014554                     l2158:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;iRobotSerial.c: 285: if (isScript) {
  3806                           
  3807                           ; BSR set to: 0
  3808  014554  0100               	movlb	0	; () banked
  3809  014556  5182               	movf	irobot_rotate@isScript& (0+255),w,b
  3810  014558  0100               	movlb	0	; () banked
  3811  01455A  B4D8               	btfsc	status,2,c
  3812  01455C  D00C               	goto	l2159
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;iRobotSerial.c: 286: irobot_move(1, rotateSpeed, rotateDirection);
  3816  01455E  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3817  014562  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3818  014566  C085  F072         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  3819  01456A  C086  F073         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  3820  01456E  0E01               	movlw	1
  3821  014570  ECE1  F0A1         	call	_irobot_move
  3822                           
  3823                           ;iRobotSerial.c: 287: }
  3824  014574  0012               	return	
  3825  014576                     l2159:
  3826                           
  3827                           ;iRobotSerial.c: 288: else {
  3828                           ;iRobotSerial.c: 289: irobot_move(0, rotateSpeed, rotateDirection);
  3829  014576  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3830  01457A  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3831  01457E  C085  F072         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  3832  014582  C086  F073         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  3833  014586  0E00               	movlw	0
  3834  014588  ECE1  F0A1         	call	_irobot_move
  3835                           
  3836                           ;iRobotSerial.c: 290: while (angleTotal < rotateAngle) {
  3837  01458C  D00A               	goto	l2161
  3838  01458E                     
  3839                           ;iRobotSerial.c: 291: update_angle();
  3840  01458E  EC5F  F0B2         	call	_update_angle	;wreg free
  3841                           
  3842                           ;iRobotSerial.c: 292: angleTotal += iRAngle;
  3843  014592  0100               	movlb	0	; () banked
  3844  014594  51C8               	movf	_iRAngle& (0+255),w,b
  3845  014596  0100               	movlb	0	; () banked
  3846  014598  2783               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  3847  01459A  0100               	movlb	0	; () banked
  3848  01459C  51C9               	movf	(_iRAngle+1)& (0+255),w,b
  3849  01459E  0100               	movlb	0	; () banked
  3850  0145A0  2384               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  3851  0145A2                     l2161:
  3852                           
  3853                           ; BSR set to: 0
  3854  0145A2  0100               	movlb	0	; () banked
  3855  0145A4  517D               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  3856  0145A6  0100               	movlb	0	; () banked
  3857  0145A8  5D83               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  3858  0145AA  0100               	movlb	0	; () banked
  3859  0145AC  5184               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  3860  0145AE  0A80               	xorlw	128
  3861  0145B0  0100               	movlb	0	; () banked
  3862  0145B2  6F81               	movwf	??_irobot_rotate& (0+255),b
  3863  0145B4  0100               	movlb	0	; () banked
  3864  0145B6  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3865  0145B8  0A80               	xorlw	128
  3866  0145BA  0100               	movlb	0	; () banked
  3867  0145BC  5981               	subwfb	??_irobot_rotate& (0+255),w,b
  3868  0145BE  A0D8               	btfss	status,0,c
  3869  0145C0  D7E6               	goto	l2162
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;iRobotSerial.c: 293: }
  3873                           ;iRobotSerial.c: 294: irobot_stop_motion(0);
  3874                           
  3875                           ; BSR set to: 0
  3876  0145C2  0E00               	movlw	0
  3877  0145C4  ECF2  F0AD         	call	_irobot_stop_motion
  3878  0145C8  0012               	return	
  3879  0145CA                     __end_of_irobot_rotate:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _mode2 *****************
  3893 ;; Defined at:
  3894 ;;		line 206 in file "main.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  dist            2   44[BANK0 ] int 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;Total ram usage:        2 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:   16
  3915 ;; This function calls:
  3916 ;;		_Console_Render
  3917 ;;		_HMI_Poll
  3918 ;;		_MXK_Dequeue
  3919 ;;		_MXK_Release
  3920 ;;		_MXK_SwitchTo
  3921 ;;		_irobot_move_straight
  3922 ;;		_irobot_song_play
  3923 ;;		_irobot_stop_motion
  3924 ;;		_printf
  3925 ;;		_update_angle
  3926 ;;		_update_bump_and_cliff
  3927 ;;		_update_distance
  3928 ;; This function is called by:
  3929 ;;		_main
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text4
  3934  01342C                     __ptext4:
  3935                           	opt stack 0
  3936  01342C                     _mode2:
  3937                           	opt stack 14
  3938                           
  3939                           ;main.c: 207: update_bump_and_cliff();
  3940                           
  3941                           ;incstack = 0
  3942  01342C  EC78  F0AF         	call	_update_bump_and_cliff	;wreg free
  3943                           
  3944                           ;main.c: 208: update_distance();
  3945  013430  EC56  F0B2         	call	_update_distance	;wreg free
  3946                           
  3947                           ;main.c: 209: update_angle();
  3948  013434  EC5F  F0B2         	call	_update_angle	;wreg free
  3949                           
  3950                           ;main.c: 211: angleTotal += iRAngle;
  3951  013438  0100               	movlb	0	; () banked
  3952  01343A  51C8               	movf	_iRAngle& (0+255),w,b
  3953  01343C  0100               	movlb	0	; () banked
  3954  01343E  27C4               	addwf	_angleTotal& (0+255),f,b
  3955  013440  0100               	movlb	0	; () banked
  3956  013442  51C9               	movf	(_iRAngle+1)& (0+255),w,b
  3957  013444  0100               	movlb	0	; () banked
  3958  013446  23C5               	addwfc	(_angleTotal+1)& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;main.c: 213: if (iRBumpLeft || iRBumpRight) {
  3962  013448  0100               	movlb	0	; () banked
  3963  01344A  51D6               	movf	_iRBumpLeft& (0+255),w,b
  3964  01344C  A4D8               	btfss	status,2,c
  3965  01344E  D004               	goto	u13700
  3966                           
  3967                           ; BSR set to: 0
  3968  013450  0100               	movlb	0	; () banked
  3969  013452  51D7               	movf	_iRBumpRight& (0+255),w,b
  3970  013454  B4D8               	btfsc	status,2,c
  3971  013456  D006               	goto	l2342
  3972  013458                     u13700:
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;main.c: 214: irobot_song_play(0);
  3976                           
  3977                           ; BSR set to: 0
  3978  013458  0E00               	movlw	0
  3979  01345A  EC42  F0B2         	call	_irobot_song_play
  3980                           
  3981                           ;main.c: 215: irobot_stop_motion(0);
  3982  01345E  0E00               	movlw	0
  3983  013460  ECF2  F0AD         	call	_irobot_stop_motion
  3984  013464                     l2342:
  3985                           
  3986                           ;main.c: 216: }
  3987                           ;main.c: 217: if (angleTotal > 90) {
  3988  013464  0100               	movlb	0	; () banked
  3989  013466  BFC5               	btfsc	(_angleTotal+1)& (0+255),7,b
  3990  013468  D00B               	goto	l2345
  3991  01346A  0100               	movlb	0	; () banked
  3992  01346C  51C5               	movf	(_angleTotal+1)& (0+255),w,b
  3993  01346E  E105               	bnz	u13710
  3994  013470  0E5B               	movlw	91
  3995  013472  0100               	movlb	0	; () banked
  3996  013474  5DC4               	subwf	_angleTotal& (0+255),w,b
  3997  013476  A0D8               	btfss	status,0,c
  3998  013478  D003               	goto	l2345
  3999  01347A                     u13710:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;main.c: 218: irobot_stop_motion(0);
  4003  01347A  0E00               	movlw	0
  4004  01347C  ECF2  F0AD         	call	_irobot_stop_motion
  4005  013480                     l2345:
  4006                           
  4007                           ;main.c: 219: }
  4008                           ;main.c: 220: HMI_Poll();
  4009  013480  EC98  F0A9         	call	_HMI_Poll	;wreg free
  4010                           
  4011                           ;main.c: 221: if (MXK_SwitchTo(eMXK_HMI)) {
  4012  013484  0E01               	movlw	1
  4013  013486  EC7D  F0AE         	call	_MXK_SwitchTo
  4014  01348A  0900               	iorlw	0
  4015  01348C  B4D8               	btfsc	status,2,c
  4016  01348E  0012               	return	
  4017                           
  4018                           ;main.c: 222: printf("%c", (char)35);
  4019  013490  0EFB               	movlw	low STR_1
  4020  013492  0100               	movlb	0	; () banked
  4021  013494  6F75               	movwf	printf@f& (0+255),b
  4022  013496  0EFF               	movlw	high STR_1
  4023  013498  0100               	movlb	0	; () banked
  4024  01349A  6F76               	movwf	(printf@f+1)& (0+255),b
  4025  01349C  0E00               	movlw	0
  4026  01349E  0100               	movlb	0	; () banked
  4027  0134A0  6F78               	movwf	(?_printf+3)& (0+255),b
  4028  0134A2  0E23               	movlw	35
  4029  0134A4  6F77               	movwf	(?_printf+2)& (0+255),b
  4030  0134A6  EC6E  F092         	call	_printf	;wreg free
  4031                           
  4032                           ;main.c: 223: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4033  0134AA  0E61               	movlw	low STR_2
  4034  0134AC  0100               	movlb	0	; () banked
  4035  0134AE  6F75               	movwf	printf@f& (0+255),b
  4036  0134B0  0EFF               	movlw	high STR_2
  4037  0134B2  0100               	movlb	0	; () banked
  4038  0134B4  6F76               	movwf	(printf@f+1)& (0+255),b
  4039  0134B6  C0C6  F077         	movff	_distanceTotal,?_printf+2
  4040  0134BA  C0C7  F078         	movff	_distanceTotal+1,?_printf+3
  4041  0134BE  C0D6  F079         	movff	_iRBumpLeft,?_printf+4
  4042  0134C2  0100               	movlb	0	; () banked
  4043  0134C4  6B7A               	clrf	(?_printf+5)& (0+255),b
  4044  0134C6  C0D7  F07B         	movff	_iRBumpRight,?_printf+6
  4045  0134CA  0100               	movlb	0	; () banked
  4046  0134CC  6B7C               	clrf	(?_printf+7)& (0+255),b
  4047  0134CE  EC6E  F092         	call	_printf	;wreg free
  4048                           
  4049                           ;main.c: 224: Console_Render();
  4050  0134D2  EC82  F08F         	call	_Console_Render	;wreg free
  4051                           
  4052                           ;main.c: 226: int dist = 0;
  4053  0134D6  0E00               	movlw	0
  4054  0134D8  0100               	movlb	0	; () banked
  4055  0134DA  6F8D               	movwf	(mode2@dist+1)& (0+255),b
  4056  0134DC  0E00               	movlw	0
  4057  0134DE  6F8C               	movwf	mode2@dist& (0+255),b
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;main.c: 227: irobot_move_straight(200);
  4061  0134E0  0E00               	movlw	0
  4062  0134E2  0100               	movlb	0	; () banked
  4063  0134E4  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4064  0134E6  0EC8               	movlw	200
  4065  0134E8  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4066  0134EA  ECE2  F0B1         	call	_irobot_move_straight	;wreg free
  4067                           
  4068                           ;main.c: 228: while (dist < 5000) {
  4069  0134EE  D025               	goto	l2347
  4070  0134F0                     
  4071                           ;main.c: 229: update_distance();
  4072  0134F0  EC56  F0B2         	call	_update_distance	;wreg free
  4073                           
  4074                           ;main.c: 230: dist += iRDistance;
  4075  0134F4  0103               	movlb	3	; () banked
  4076  0134F6  5127               	movf	_iRDistance& (0+255),w,b
  4077  0134F8  0100               	movlb	0	; () banked
  4078  0134FA  278C               	addwf	mode2@dist& (0+255),f,b
  4079  0134FC  0103               	movlb	3	; () banked
  4080  0134FE  5128               	movf	(_iRDistance+1)& (0+255),w,b
  4081  013500  0100               	movlb	0	; () banked
  4082  013502  238D               	addwfc	(mode2@dist+1)& (0+255),f,b
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;main.c: 231: printf("%c", (char)35);
  4086  013504  0EFB               	movlw	low STR_1
  4087  013506  0100               	movlb	0	; () banked
  4088  013508  6F75               	movwf	printf@f& (0+255),b
  4089  01350A  0EFF               	movlw	high STR_1
  4090  01350C  0100               	movlb	0	; () banked
  4091  01350E  6F76               	movwf	(printf@f+1)& (0+255),b
  4092  013510  0E00               	movlw	0
  4093  013512  0100               	movlb	0	; () banked
  4094  013514  6F78               	movwf	(?_printf+3)& (0+255),b
  4095  013516  0E23               	movlw	35
  4096  013518  6F77               	movwf	(?_printf+2)& (0+255),b
  4097  01351A  EC6E  F092         	call	_printf	;wreg free
  4098                           
  4099                           ;main.c: 232: printf("Distance: %d\n", dist);
  4100  01351E  0EED               	movlw	low STR_6
  4101  013520  0100               	movlb	0	; () banked
  4102  013522  6F75               	movwf	printf@f& (0+255),b
  4103  013524  0EFF               	movlw	high STR_6
  4104  013526  0100               	movlb	0	; () banked
  4105  013528  6F76               	movwf	(printf@f+1)& (0+255),b
  4106  01352A  C08C  F077         	movff	mode2@dist,?_printf+2
  4107  01352E  C08D  F078         	movff	mode2@dist+1,?_printf+3
  4108  013532  EC6E  F092         	call	_printf	;wreg free
  4109                           
  4110                           ;main.c: 233: Console_Render();
  4111  013536  EC82  F08F         	call	_Console_Render	;wreg free
  4112  01353A                     l2347:
  4113  01353A  0100               	movlb	0	; () banked
  4114  01353C  BF8D               	btfsc	(mode2@dist+1)& (0+255),7,b
  4115  01353E  D7D8               	goto	l2348
  4116  013540  0E88               	movlw	136
  4117  013542  0100               	movlb	0	; () banked
  4118  013544  5D8C               	subwf	mode2@dist& (0+255),w,b
  4119  013546  0E13               	movlw	19
  4120  013548  0100               	movlb	0	; () banked
  4121  01354A  598D               	subwfb	(mode2@dist+1)& (0+255),w,b
  4122  01354C  A0D8               	btfss	status,0,c
  4123  01354E  D7D0               	goto	l2348
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;main.c: 234: }
  4127                           ;main.c: 235: irobot_stop_motion(0);
  4128                           
  4129                           ; BSR set to: 0
  4130  013550  0E00               	movlw	0
  4131  013552  ECF2  F0AD         	call	_irobot_stop_motion
  4132                           
  4133                           ;main.c: 237: if (MXK_Release())
  4134  013556  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4135  01355A  0900               	iorlw	0
  4136  01355C  B4D8               	btfsc	status,2,c
  4137  01355E  0012               	return	
  4138                           
  4139                           ;main.c: 238: MXK_Dequeue();
  4140  013560  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4141  013564  0012               	return	
  4142  013566                     __end_of_mode2:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           postdec1	equ	0xFE5
  4151                           fsr1h	equ	0xFE2
  4152                           fsr1l	equ	0xFE1
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function _irobot_move_straight *****************
  4156 ;; Defined at:
  4157 ;;		line 314 in file "Library/iRobotSerial.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  straightSpee    2   25[BANK0 ] short 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4171 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;Total ram usage:        2 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    9
  4178 ;; This function calls:
  4179 ;;		_irobot_move
  4180 ;; This function is called by:
  4181 ;;		_mode2
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text5
  4186  0163C4                     __ptext5:
  4187                           	opt stack 0
  4188  0163C4                     _irobot_move_straight:
  4189                           	opt stack 20
  4190                           
  4191                           ;iRobotSerial.c: 315: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4192                           
  4193                           ;incstack = 0
  4194  0163C4  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4195  0163C8  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4196  0163CC  0E7F               	movlw	127
  4197  0163CE  0100               	movlb	0	; () banked
  4198  0163D0  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4199  0163D2  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  4200  0163D4  0E00               	movlw	0
  4201  0163D6  ECE1  F0A1         	call	_irobot_move
  4202  0163DA  0012               	return		;funcret
  4203  0163DC                     __end_of_irobot_move_straight:
  4204                           	opt stack 0
  4205                           tblptru	equ	0xFF8
  4206                           tblptrh	equ	0xFF7
  4207                           tblptrl	equ	0xFF6
  4208                           tablat	equ	0xFF5
  4209                           postinc0	equ	0xFEE
  4210                           wreg	equ	0xFE8
  4211                           postdec1	equ	0xFE5
  4212                           fsr1h	equ	0xFE2
  4213                           fsr1l	equ	0xFE1
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _mode1 *****************
  4217 ;; Defined at:
  4218 ;;		line 121 in file "main.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  moveto          2    2[BANK3 ] int 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        8 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:   16
  4239 ;; This function calls:
  4240 ;;		_ADC_Start
  4241 ;;		_ADC_Voltage
  4242 ;;		_Console_Render
  4243 ;;		_HMI_Poll
  4244 ;;		_HMI_Render
  4245 ;;		_HMI_SetNumber
  4246 ;;		_MXK_Dequeue
  4247 ;;		_MXK_Release
  4248 ;;		_MXK_SwitchTo
  4249 ;;		_Motor_Move
  4250 ;;		_Motor_Speed
  4251 ;;		___fldiv
  4252 ;;		___fltol
  4253 ;;		_irobot_song_play
  4254 ;;		_irobot_stop_motion
  4255 ;;		_printf
  4256 ;;		_update_angle
  4257 ;;		_update_bump_and_cliff
  4258 ;;		_update_distance
  4259 ;; This function is called by:
  4260 ;;		_main
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text6
  4265  0108C4                     __ptext6:
  4266                           	opt stack 0
  4267  0108C4                     _mode1:
  4268                           	opt stack 14
  4269                           
  4270                           ;main.c: 122: update_bump_and_cliff();
  4271                           
  4272                           ;incstack = 0
  4273  0108C4  EC78  F0AF         	call	_update_bump_and_cliff	;wreg free
  4274                           
  4275                           ;main.c: 123: update_distance();
  4276  0108C8  EC56  F0B2         	call	_update_distance	;wreg free
  4277                           
  4278                           ;main.c: 124: update_angle();
  4279  0108CC  EC5F  F0B2         	call	_update_angle	;wreg free
  4280                           
  4281                           ;main.c: 128: if (iRBumpLeft || iRBumpRight) {
  4282  0108D0  0100               	movlb	0	; () banked
  4283  0108D2  51D6               	movf	_iRBumpLeft& (0+255),w,b
  4284  0108D4  A4D8               	btfss	status,2,c
  4285  0108D6  D004               	goto	u13500
  4286                           
  4287                           ; BSR set to: 0
  4288  0108D8  0100               	movlb	0	; () banked
  4289  0108DA  51D7               	movf	_iRBumpRight& (0+255),w,b
  4290  0108DC  B4D8               	btfsc	status,2,c
  4291  0108DE  D006               	goto	l2312
  4292  0108E0                     u13500:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;main.c: 129: irobot_song_play(0);
  4296                           
  4297                           ; BSR set to: 0
  4298  0108E0  0E00               	movlw	0
  4299  0108E2  EC42  F0B2         	call	_irobot_song_play
  4300                           
  4301                           ;main.c: 130: irobot_stop_motion(0);
  4302  0108E6  0E00               	movlw	0
  4303  0108E8  ECF2  F0AD         	call	_irobot_stop_motion
  4304  0108EC                     l2312:
  4305                           
  4306                           ;main.c: 131: }
  4307                           ;main.c: 132: if (angleTotal > 83) {
  4308  0108EC  0100               	movlb	0	; () banked
  4309  0108EE  BFC5               	btfsc	(_angleTotal+1)& (0+255),7,b
  4310  0108F0  D00B               	goto	l2315
  4311  0108F2  0100               	movlb	0	; () banked
  4312  0108F4  51C5               	movf	(_angleTotal+1)& (0+255),w,b
  4313  0108F6  E105               	bnz	u13510
  4314  0108F8  0E54               	movlw	84
  4315  0108FA  0100               	movlb	0	; () banked
  4316  0108FC  5DC4               	subwf	_angleTotal& (0+255),w,b
  4317  0108FE  A0D8               	btfss	status,0,c
  4318  010900  D003               	goto	l2315
  4319  010902                     u13510:
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;main.c: 133: irobot_stop_motion(0);
  4323  010902  0E00               	movlw	0
  4324  010904  ECF2  F0AD         	call	_irobot_stop_motion
  4325  010908                     l2315:
  4326                           
  4327                           ;main.c: 134: }
  4328                           ;main.c: 136: if (MXK_SwitchTo(eMXK_HMI)) {
  4329  010908  0E01               	movlw	1
  4330  01090A  EC7D  F0AE         	call	_MXK_SwitchTo
  4331  01090E  0900               	iorlw	0
  4332  010910  B4D8               	btfsc	status,2,c
  4333  010912  D029               	goto	l2317
  4334                           
  4335                           ;main.c: 137: printf("%c", (char)35);
  4336  010914  0EFB               	movlw	low STR_1
  4337  010916  0100               	movlb	0	; () banked
  4338  010918  6F75               	movwf	printf@f& (0+255),b
  4339  01091A  0EFF               	movlw	high STR_1
  4340  01091C  0100               	movlb	0	; () banked
  4341  01091E  6F76               	movwf	(printf@f+1)& (0+255),b
  4342  010920  0E00               	movlw	0
  4343  010922  0100               	movlb	0	; () banked
  4344  010924  6F78               	movwf	(?_printf+3)& (0+255),b
  4345  010926  0E23               	movlw	35
  4346  010928  6F77               	movwf	(?_printf+2)& (0+255),b
  4347  01092A  EC6E  F092         	call	_printf	;wreg free
  4348                           
  4349                           ;main.c: 138: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4350  01092E  0E61               	movlw	low STR_2
  4351  010930  0100               	movlb	0	; () banked
  4352  010932  6F75               	movwf	printf@f& (0+255),b
  4353  010934  0EFF               	movlw	high STR_2
  4354  010936  0100               	movlb	0	; () banked
  4355  010938  6F76               	movwf	(printf@f+1)& (0+255),b
  4356  01093A  C0C6  F077         	movff	_distanceTotal,?_printf+2
  4357  01093E  C0C7  F078         	movff	_distanceTotal+1,?_printf+3
  4358  010942  C0D6  F079         	movff	_iRBumpLeft,?_printf+4
  4359  010946  0100               	movlb	0	; () banked
  4360  010948  6B7A               	clrf	(?_printf+5)& (0+255),b
  4361  01094A  C0D7  F07B         	movff	_iRBumpRight,?_printf+6
  4362  01094E  0100               	movlb	0	; () banked
  4363  010950  6B7C               	clrf	(?_printf+7)& (0+255),b
  4364  010952  EC6E  F092         	call	_printf	;wreg free
  4365                           
  4366                           ;main.c: 139: Console_Render();
  4367  010956  EC82  F08F         	call	_Console_Render	;wreg free
  4368                           
  4369                           ;main.c: 140: if (MXK_Release())
  4370  01095A  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4371  01095E  0900               	iorlw	0
  4372  010960  A4D8               	btfss	status,2,c
  4373                           
  4374                           ;main.c: 141: MXK_Dequeue();
  4375  010962  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4376  010966                     l2317:
  4377                           
  4378                           ;main.c: 142: }
  4379                           ;main.c: 143: HMI_Poll();
  4380  010966  EC98  F0A9         	call	_HMI_Poll	;wreg free
  4381                           
  4382                           ;main.c: 144: StepRotate = 0;
  4383  01096A  0E00               	movlw	0
  4384  01096C  0100               	movlb	0	; () banked
  4385  01096E  6FC3               	movwf	(_StepRotate+1)& (0+255),b
  4386  010970  0E00               	movlw	0
  4387  010972  6FC2               	movwf	_StepRotate& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;main.c: 145: MinDist = 1000;
  4391  010974  0E03               	movlw	3
  4392  010976  0100               	movlb	0	; () banked
  4393  010978  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4394  01097A  0EE8               	movlw	232
  4395  01097C  6FFB               	movwf	_MinDist& (0+255),b
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;main.c: 146: Stepstomin = 0;
  4399  01097E  0E00               	movlw	0
  4400  010980  0100               	movlb	0	; () banked
  4401  010982  6FC1               	movwf	(_Stepstomin+1)& (0+255),b
  4402  010984  0E00               	movlw	0
  4403  010986  6FC0               	movwf	_Stepstomin& (0+255),b
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;main.c: 147: IRValue = 0;
  4407  010988  0E00               	movlw	0
  4408  01098A  0100               	movlb	0	; () banked
  4409  01098C  6FBF               	movwf	(_IRValue+1)& (0+255),b
  4410  01098E  0E00               	movlw	0
  4411  010990  6FBE               	movwf	_IRValue& (0+255),b
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;main.c: 148: TimerX = 8;
  4415  010992  0E00               	movlw	0
  4416  010994  0100               	movlb	0	; () banked
  4417  010996  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4418  010998  0E08               	movlw	8
  4419  01099A  6FF9               	movwf	_TimerX& (0+255),b
  4420                           
  4421                           ;main.c: 149: while (StepRotate < 400) {
  4422  01099C  D0F9               	goto	u13620
  4423  01099E                     
  4424                           ; BSR set to: 0
  4425                           ;main.c: 150: StepRotate++;
  4426                           
  4427                           ; BSR set to: 0
  4428  01099E  0100               	movlb	0	; () banked
  4429  0109A0  4BC2               	infsnz	_StepRotate& (0+255),f,b
  4430  0109A2  2BC3               	incf	(_StepRotate+1)& (0+255),f,b
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;main.c: 151: ADC_Start(&ADC_AN0);
  4434  0109A4  0EF4               	movlw	low _ADC_AN0
  4435  0109A6  0100               	movlb	0	; () banked
  4436  0109A8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4437  0109AA  0E00               	movlw	high _ADC_AN0
  4438  0109AC  0100               	movlb	0	; () banked
  4439  0109AE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4440  0109B0  EC75  F0A7         	call	_ADC_Start	;wreg free
  4441                           
  4442                           ;main.c: 152: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4443  0109B4  0EF4               	movlw	low _ADC_AN0
  4444  0109B6  0100               	movlb	0	; () banked
  4445  0109B8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4446  0109BA  0E00               	movlw	high _ADC_AN0
  4447  0109BC  0100               	movlb	0	; () banked
  4448  0109BE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4449  0109C0  EC34  F09D         	call	_ADC_Voltage	;wreg free
  4450  0109C4  C0A0  F3F3         	movff	?_ADC_Voltage,_mode1$15584
  4451  0109C8  C0A1  F3F4         	movff	?_ADC_Voltage+1,_mode1$15584+1
  4452  0109CC  C0A2  F3F5         	movff	?_ADC_Voltage+2,_mode1$15584+2
  4453  0109D0  C0A3  F3F6         	movff	?_ADC_Voltage+3,_mode1$15584+3
  4454                           
  4455                           ;main.c: 152: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4456  0109D4  C3F3  F072         	movff	_mode1$15584,___fldiv@a
  4457  0109D8  C3F4  F073         	movff	_mode1$15584+1,___fldiv@a+1
  4458  0109DC  C3F5  F074         	movff	_mode1$15584+2,___fldiv@a+2
  4459  0109E0  C3F6  F075         	movff	_mode1$15584+3,___fldiv@a+3
  4460  0109E4  0E00               	movlw	0
  4461  0109E6  0100               	movlb	0	; () banked
  4462  0109E8  6F6E               	movwf	___fldiv@b& (0+255),b
  4463  0109EA  0E00               	movlw	0
  4464  0109EC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4465  0109EE  0E6C               	movlw	108
  4466  0109F0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4467  0109F2  0E42               	movlw	66
  4468  0109F4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4469  0109F6  EC6E  F086         	call	___fldiv	;wreg free
  4470  0109FA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4471  0109FE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4472  010A02  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4473  010A06  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4474  010A0A  EC46  F09B         	call	___fltol	;wreg free
  4475  010A0E  C0B2  F0BE         	movff	?___fltol,_IRValue
  4476  010A12  C0B3  F0BF         	movff	?___fltol+1,_IRValue+1
  4477                           
  4478                           ;main.c: 153: if (MXK_SwitchTo(eMXK_HMI)) {
  4479  010A16  0E01               	movlw	1
  4480  010A18  EC7D  F0AE         	call	_MXK_SwitchTo
  4481  010A1C  0900               	iorlw	0
  4482  010A1E  B4D8               	btfsc	status,2,c
  4483  010A20  D00E               	goto	l2321
  4484                           
  4485                           ;main.c: 154: HMI_SetNumber(IRValue);
  4486  010A22  C0BE  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4487  010A26  C0BF  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4488  010A2A  ECA6  F0B0         	call	_HMI_SetNumber	;wreg free
  4489                           
  4490                           ;main.c: 155: HMI_Render();
  4491  010A2E  ECDE  F0AE         	call	_HMI_Render	;wreg free
  4492                           
  4493                           ;main.c: 156: if (MXK_Release())
  4494  010A32  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4495  010A36  0900               	iorlw	0
  4496  010A38  A4D8               	btfss	status,2,c
  4497                           
  4498                           ;main.c: 157: MXK_Dequeue();
  4499  010A3A  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4500  010A3E                     l2321:
  4501                           
  4502                           ;main.c: 158: }
  4503                           ;main.c: 159: if (IRValue < MinDist) {
  4504  010A3E  0100               	movlb	0	; () banked
  4505  010A40  51FB               	movf	_MinDist& (0+255),w,b
  4506  010A42  0100               	movlb	0	; () banked
  4507  010A44  5DBE               	subwf	_IRValue& (0+255),w,b
  4508  010A46  0100               	movlb	0	; () banked
  4509  010A48  51BF               	movf	(_IRValue+1)& (0+255),w,b
  4510  010A4A  0A80               	xorlw	128
  4511  010A4C  0103               	movlb	3	; () banked
  4512  010A4E  6FEF               	movwf	??_mode1& (0+255),b
  4513  010A50  0100               	movlb	0	; () banked
  4514  010A52  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4515  010A54  0A80               	xorlw	128
  4516  010A56  0103               	movlb	3	; () banked
  4517  010A58  59EF               	subwfb	??_mode1& (0+255),w,b
  4518  010A5A  B0D8               	btfsc	status,0,c
  4519  010A5C  D008               	goto	l2322
  4520                           
  4521                           ; BSR set to: 3
  4522                           ;main.c: 160: MinDist = IRValue;
  4523  010A5E  C0BE  F0FB         	movff	_IRValue,_MinDist
  4524  010A62  C0BF  F0FC         	movff	_IRValue+1,_MinDist+1
  4525                           
  4526                           ;main.c: 161: Stepstomin = StepRotate;
  4527  010A66  C0C2  F0C0         	movff	_StepRotate,_Stepstomin
  4528  010A6A  C0C3  F0C1         	movff	_StepRotate+1,_Stepstomin+1
  4529  010A6E                     l2322:
  4530                           
  4531                           ; BSR set to: 3
  4532                           ;main.c: 162: }
  4533                           ;main.c: 163: if (MXK_SwitchTo(eMXK_Motor)) {
  4534                           
  4535                           ; BSR set to: 3
  4536  010A6E  0E08               	movlw	8
  4537  010A70  EC7D  F0AE         	call	_MXK_SwitchTo
  4538  010A74  0900               	iorlw	0
  4539  010A76  B4D8               	btfsc	status,2,c
  4540  010A78  D020               	goto	l2324
  4541                           
  4542                           ;main.c: 164: Motor_Speed(&Stepper, (50));
  4543  010A7A  0EC6               	movlw	low _Stepper
  4544  010A7C  0100               	movlb	0	; () banked
  4545  010A7E  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4546  010A80  0E03               	movlw	high _Stepper
  4547  010A82  0100               	movlb	0	; () banked
  4548  010A84  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4549  010A86  0E00               	movlw	0
  4550  010A88  0100               	movlb	0	; () banked
  4551  010A8A  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4552  010A8C  0E32               	movlw	50
  4553  010A8E  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4554  010A90  EC91  F0B0         	call	_Motor_Speed	;wreg free
  4555                           
  4556                           ;main.c: 165: Motor_Move(&Stepper, 1);
  4557  010A94  0EC6               	movlw	low _Stepper
  4558  010A96  0100               	movlb	0	; () banked
  4559  010A98  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4560  010A9A  0E03               	movlw	high _Stepper
  4561  010A9C  0100               	movlb	0	; () banked
  4562  010A9E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4563  010AA0  0E00               	movlw	0
  4564  010AA2  0100               	movlb	0	; () banked
  4565  010AA4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4566  010AA6  0E01               	movlw	1
  4567  010AA8  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4568  010AAA  EC95  F0AF         	call	_Motor_Move	;wreg free
  4569                           
  4570                           ;main.c: 166: if (MXK_Release())
  4571  010AAE  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4572  010AB2  0900               	iorlw	0
  4573  010AB4  A4D8               	btfss	status,2,c
  4574                           
  4575                           ;main.c: 167: MXK_Dequeue();
  4576  010AB6  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4577  010ABA                     l2324:
  4578                           
  4579                           ;main.c: 168: }
  4580                           ;main.c: 169: TimerX = 10;
  4581  010ABA  0E00               	movlw	0
  4582  010ABC  0100               	movlb	0	; () banked
  4583  010ABE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4584  010AC0  0E0A               	movlw	10
  4585  010AC2  6FF9               	movwf	_TimerX& (0+255),b
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;main.c: 170: if (TimerX > 0) {
  4589  010AC4  0100               	movlb	0	; () banked
  4590  010AC6  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4591  010AC8  D063               	goto	u13620
  4592  010ACA  0100               	movlb	0	; () banked
  4593  010ACC  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4594  010ACE  E156               	bnz	l16311
  4595  010AD0  0100               	movlb	0	; () banked
  4596  010AD2  05F9               	decf	_TimerX& (0+255),w,b
  4597  010AD4  B0D8               	btfsc	status,0,c
  4598  010AD6  D052               	goto	l2326
  4599  010AD8  D05B               	goto	u13620
  4600  010ADA                     l16293:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;main.c: 172: ADC_Start(&ADC_AN0);
  4604  010ADA  0EF4               	movlw	low _ADC_AN0
  4605  010ADC  0100               	movlb	0	; () banked
  4606  010ADE  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4607  010AE0  0E00               	movlw	high _ADC_AN0
  4608  010AE2  0100               	movlb	0	; () banked
  4609  010AE4  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4610  010AE6  EC75  F0A7         	call	_ADC_Start	;wreg free
  4611                           
  4612                           ;main.c: 173: if (MXK_SwitchTo(eMXK_HMI)) {
  4613  010AEA  0E01               	movlw	1
  4614  010AEC  EC7D  F0AE         	call	_MXK_SwitchTo
  4615  010AF0  0900               	iorlw	0
  4616  010AF2  B4D8               	btfsc	status,2,c
  4617  010AF4  D00E               	goto	l2329
  4618                           
  4619                           ;main.c: 174: HMI_SetNumber(IRValue);
  4620  010AF6  C0BE  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4621  010AFA  C0BF  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4622  010AFE  ECA6  F0B0         	call	_HMI_SetNumber	;wreg free
  4623                           
  4624                           ;main.c: 175: HMI_Render();
  4625  010B02  ECDE  F0AE         	call	_HMI_Render	;wreg free
  4626                           
  4627                           ;main.c: 176: if (MXK_Release())
  4628  010B06  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4629  010B0A  0900               	iorlw	0
  4630  010B0C  A4D8               	btfss	status,2,c
  4631                           
  4632                           ;main.c: 177: MXK_Dequeue();
  4633  010B0E  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4634  010B12                     l2329:
  4635                           
  4636                           ;main.c: 178: }
  4637                           ;main.c: 179: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4638  010B12  0EF4               	movlw	low _ADC_AN0
  4639  010B14  0100               	movlb	0	; () banked
  4640  010B16  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4641  010B18  0E00               	movlw	high _ADC_AN0
  4642  010B1A  0100               	movlb	0	; () banked
  4643  010B1C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4644  010B1E  EC34  F09D         	call	_ADC_Voltage	;wreg free
  4645  010B22  C0A0  F3F3         	movff	?_ADC_Voltage,_mode1$15584
  4646  010B26  C0A1  F3F4         	movff	?_ADC_Voltage+1,_mode1$15584+1
  4647  010B2A  C0A2  F3F5         	movff	?_ADC_Voltage+2,_mode1$15584+2
  4648  010B2E  C0A3  F3F6         	movff	?_ADC_Voltage+3,_mode1$15584+3
  4649                           
  4650                           ;main.c: 178: }
  4651                           ;main.c: 179: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4652  010B32  C3F3  F072         	movff	_mode1$15584,___fldiv@a
  4653  010B36  C3F4  F073         	movff	_mode1$15584+1,___fldiv@a+1
  4654  010B3A  C3F5  F074         	movff	_mode1$15584+2,___fldiv@a+2
  4655  010B3E  C3F6  F075         	movff	_mode1$15584+3,___fldiv@a+3
  4656  010B42  0E00               	movlw	0
  4657  010B44  0100               	movlb	0	; () banked
  4658  010B46  6F6E               	movwf	___fldiv@b& (0+255),b
  4659  010B48  0E00               	movlw	0
  4660  010B4A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4661  010B4C  0E6C               	movlw	108
  4662  010B4E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4663  010B50  0E42               	movlw	66
  4664  010B52  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4665  010B54  EC6E  F086         	call	___fldiv	;wreg free
  4666  010B58  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4667  010B5C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4668  010B60  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4669  010B64  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4670  010B68  EC46  F09B         	call	___fltol	;wreg free
  4671  010B6C  C0B2  F0BE         	movff	?___fltol,_IRValue
  4672  010B70  C0B3  F0BF         	movff	?___fltol+1,_IRValue+1
  4673                           
  4674                           ;main.c: 180: TimerX--;
  4675  010B74  0100               	movlb	0	; () banked
  4676  010B76  07F9               	decf	_TimerX& (0+255),f,b
  4677  010B78  A0D8               	btfss	status,0,c
  4678  010B7A  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4679  010B7C                     l2326:
  4680  010B7C                     l16311:
  4681                           
  4682                           ; BSR set to: 0
  4683  010B7C  0100               	movlb	0	; () banked
  4684  010B7E  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4685  010B80  D007               	goto	u13620
  4686  010B82  0100               	movlb	0	; () banked
  4687  010B84  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4688  010B86  E1A9               	bnz	l16293
  4689  010B88  0100               	movlb	0	; () banked
  4690  010B8A  05F9               	decf	_TimerX& (0+255),w,b
  4691  010B8C  B0D8               	btfsc	status,0,c
  4692  010B8E  D7A5               	goto	l2327
  4693  010B90                     u13620:
  4694                           
  4695                           ; BSR set to: 0
  4696                           
  4697                           ; BSR set to: 0
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702  010B90  0100               	movlb	0	; () banked
  4703  010B92  BFC3               	btfsc	(_StepRotate+1)& (0+255),7,b
  4704  010B94  D704               	goto	l2319
  4705  010B96  0E90               	movlw	144
  4706  010B98  0100               	movlb	0	; () banked
  4707  010B9A  5DC2               	subwf	_StepRotate& (0+255),w,b
  4708  010B9C  0E01               	movlw	1
  4709  010B9E  0100               	movlb	0	; () banked
  4710  010BA0  59C3               	subwfb	(_StepRotate+1)& (0+255),w,b
  4711  010BA2  A0D8               	btfss	status,0,c
  4712  010BA4  D6FC               	goto	l2319
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;main.c: 181: }
  4716                           ;main.c: 182: }
  4717                           ;main.c: 183: }
  4718                           ;main.c: 184: if (MXK_SwitchTo(eMXK_Motor)) {
  4719                           
  4720                           ; BSR set to: 0
  4721  010BA6  0E08               	movlw	8
  4722  010BA8  EC7D  F0AE         	call	_MXK_SwitchTo
  4723  010BAC  0900               	iorlw	0
  4724  010BAE  B4D8               	btfsc	status,2,c
  4725  010BB0  D08A               	goto	l2334
  4726                           
  4727                           ;main.c: 185: Motor_Speed(&Stepper, (50));
  4728  010BB2  0EC6               	movlw	low _Stepper
  4729  010BB4  0100               	movlb	0	; () banked
  4730  010BB6  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4731  010BB8  0E03               	movlw	high _Stepper
  4732  010BBA  0100               	movlb	0	; () banked
  4733  010BBC  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4734  010BBE  0E00               	movlw	0
  4735  010BC0  0100               	movlb	0	; () banked
  4736  010BC2  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4737  010BC4  0E32               	movlw	50
  4738  010BC6  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4739  010BC8  EC91  F0B0         	call	_Motor_Speed	;wreg free
  4740                           
  4741                           ;main.c: 186: int moveto = 400 - Stepstomin;
  4742  010BCC  C0C0  F3EF         	movff	_Stepstomin,??_mode1
  4743  010BD0  C0C1  F3F0         	movff	_Stepstomin+1,??_mode1+1
  4744  010BD4  0103               	movlb	3	; () banked
  4745  010BD6  1FEF               	comf	??_mode1& (0+255),f,b
  4746  010BD8  1FF0               	comf	(??_mode1+1)& (0+255),f,b
  4747  010BDA  4BEF               	infsnz	??_mode1& (0+255),f,b
  4748  010BDC  2BF0               	incf	(??_mode1+1)& (0+255),f,b
  4749  010BDE  0E90               	movlw	144
  4750  010BE0  0103               	movlb	3	; () banked
  4751  010BE2  25EF               	addwf	??_mode1& (0+255),w,b
  4752  010BE4  0103               	movlb	3	; () banked
  4753  010BE6  6FF1               	movwf	mode1@moveto& (0+255),b
  4754  010BE8  0E01               	movlw	1
  4755  010BEA  0103               	movlb	3	; () banked
  4756  010BEC  21F0               	addwfc	(??_mode1+1)& (0+255),w,b
  4757  010BEE  0103               	movlb	3	; () banked
  4758  010BF0  6FF2               	movwf	(mode1@moveto+1)& (0+255),b
  4759                           
  4760                           ; BSR set to: 3
  4761                           ;main.c: 188: Motor_Move(&Stepper, (-moveto));
  4762  010BF2  0EC6               	movlw	low _Stepper
  4763  010BF4  0100               	movlb	0	; () banked
  4764  010BF6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4765  010BF8  0E03               	movlw	high _Stepper
  4766  010BFA  0100               	movlb	0	; () banked
  4767  010BFC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4768  010BFE  C3F1  F3EF         	movff	mode1@moveto,??_mode1
  4769  010C02  C3F2  F3F0         	movff	mode1@moveto+1,??_mode1+1
  4770  010C06  0103               	movlb	3	; () banked
  4771  010C08  1FEF               	comf	??_mode1& (0+255),f,b
  4772  010C0A  1FF0               	comf	(??_mode1+1)& (0+255),f,b
  4773  010C0C  4BEF               	infsnz	??_mode1& (0+255),f,b
  4774  010C0E  2BF0               	incf	(??_mode1+1)& (0+255),f,b
  4775  010C10  C3EF  F065         	movff	??_mode1,Motor_Move@pDelta
  4776  010C14  C3F0  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  4777  010C18  EC95  F0AF         	call	_Motor_Move	;wreg free
  4778                           
  4779                           ;main.c: 189: if (MXK_Release())
  4780  010C1C  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4781  010C20  0900               	iorlw	0
  4782  010C22  B4D8               	btfsc	status,2,c
  4783  010C24  D050               	goto	l2334
  4784                           
  4785                           ;main.c: 190: MXK_Dequeue();
  4786  010C26  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4787                           
  4788                           ;main.c: 191: }
  4789                           ;main.c: 192: while (Stepper.mDelta > 0) {
  4790  010C2A  D04D               	goto	l2334
  4791  010C2C                     l16327:
  4792                           
  4793                           ;main.c: 193: ADC_Start(&ADC_AN0);
  4794  010C2C  0EF4               	movlw	low _ADC_AN0
  4795  010C2E  0100               	movlb	0	; () banked
  4796  010C30  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4797  010C32  0E00               	movlw	high _ADC_AN0
  4798  010C34  0100               	movlb	0	; () banked
  4799  010C36  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4800  010C38  EC75  F0A7         	call	_ADC_Start	;wreg free
  4801                           
  4802                           ;main.c: 194: if (MXK_SwitchTo(eMXK_HMI)) {
  4803  010C3C  0E01               	movlw	1
  4804  010C3E  EC7D  F0AE         	call	_MXK_SwitchTo
  4805  010C42  0900               	iorlw	0
  4806  010C44  B4D8               	btfsc	status,2,c
  4807  010C46  D00E               	goto	l2337
  4808                           
  4809                           ;main.c: 195: HMI_SetNumber(IRValue);
  4810  010C48  C0BE  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4811  010C4C  C0BF  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4812  010C50  ECA6  F0B0         	call	_HMI_SetNumber	;wreg free
  4813                           
  4814                           ;main.c: 196: HMI_Render();
  4815  010C54  ECDE  F0AE         	call	_HMI_Render	;wreg free
  4816                           
  4817                           ;main.c: 197: if (MXK_Release())
  4818  010C58  ECB9  F0B1         	call	_MXK_Release	;wreg free
  4819  010C5C  0900               	iorlw	0
  4820  010C5E  A4D8               	btfss	status,2,c
  4821                           
  4822                           ;main.c: 198: MXK_Dequeue();
  4823  010C60  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
  4824  010C64                     l2337:
  4825                           
  4826                           ;main.c: 199: }
  4827                           ;main.c: 200: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4828  010C64  0EF4               	movlw	low _ADC_AN0
  4829  010C66  0100               	movlb	0	; () banked
  4830  010C68  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4831  010C6A  0E00               	movlw	high _ADC_AN0
  4832  010C6C  0100               	movlb	0	; () banked
  4833  010C6E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4834  010C70  EC34  F09D         	call	_ADC_Voltage	;wreg free
  4835  010C74  C0A0  F3F3         	movff	?_ADC_Voltage,_mode1$15584
  4836  010C78  C0A1  F3F4         	movff	?_ADC_Voltage+1,_mode1$15584+1
  4837  010C7C  C0A2  F3F5         	movff	?_ADC_Voltage+2,_mode1$15584+2
  4838  010C80  C0A3  F3F6         	movff	?_ADC_Voltage+3,_mode1$15584+3
  4839                           
  4840                           ;main.c: 199: }
  4841                           ;main.c: 200: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4842  010C84  C3F3  F072         	movff	_mode1$15584,___fldiv@a
  4843  010C88  C3F4  F073         	movff	_mode1$15584+1,___fldiv@a+1
  4844  010C8C  C3F5  F074         	movff	_mode1$15584+2,___fldiv@a+2
  4845  010C90  C3F6  F075         	movff	_mode1$15584+3,___fldiv@a+3
  4846  010C94  0E00               	movlw	0
  4847  010C96  0100               	movlb	0	; () banked
  4848  010C98  6F6E               	movwf	___fldiv@b& (0+255),b
  4849  010C9A  0E00               	movlw	0
  4850  010C9C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4851  010C9E  0E6C               	movlw	108
  4852  010CA0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4853  010CA2  0E42               	movlw	66
  4854  010CA4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4855  010CA6  EC6E  F086         	call	___fldiv	;wreg free
  4856  010CAA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4857  010CAE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4858  010CB2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4859  010CB6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4860  010CBA  EC46  F09B         	call	___fltol	;wreg free
  4861  010CBE  C0B2  F0BE         	movff	?___fltol,_IRValue
  4862  010CC2  C0B3  F0BF         	movff	?___fltol+1,_IRValue+1
  4863  010CC6                     l2334:
  4864  010CC6  0103               	movlb	3	; () banked
  4865  010CC8  BFC7               	btfsc	(_Stepper+1)& (0+255),7,b
  4866  010CCA  0012               	return	
  4867  010CCC  0103               	movlb	3	; () banked
  4868  010CCE  51C7               	movf	(_Stepper+1)& (0+255),w,b
  4869  010CD0  E1AD               	bnz	l16327
  4870  010CD2  0103               	movlb	3	; () banked
  4871  010CD4  05C6               	decf	_Stepper& (0+255),w,b
  4872  010CD6  A0D8               	btfss	status,0,c
  4873  010CD8  0012               	return	
  4874  010CDA  D7A8               	goto	l2335
  4875  010CDC                     __end_of_mode1:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           postdec1	equ	0xFE5
  4884                           fsr1h	equ	0xFE2
  4885                           fsr1l	equ	0xFE1
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _update_distance *****************
  4889 ;; Defined at:
  4890 ;;		line 326 in file "Library/iRobotSerial.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;Total ram usage:        0 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:   10
  4911 ;; This function calls:
  4912 ;;		_irobot_query_and_update
  4913 ;; This function is called by:
  4914 ;;		_mode1
  4915 ;;		_mode2
  4916 ;;		_mode4
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text7
  4921  0164AC                     __ptext7:
  4922                           	opt stack 0
  4923  0164AC                     _update_distance:
  4924                           	opt stack 19
  4925                           
  4926                           ;iRobotSerial.c: 327: irobot_query_and_update(1, iR_PKT_DISTANCE);
  4927                           
  4928                           ; BSR set to: 3
  4929                           ;incstack = 0
  4930  0164AC  0E00               	movlw	0
  4931  0164AE  0100               	movlb	0	; () banked
  4932  0164B0  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4933  0164B2  0E13               	movlw	19
  4934  0164B4  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4935  0164B6  0E01               	movlw	1
  4936  0164B8  ECC7  F095         	call	_irobot_query_and_update
  4937  0164BC  0012               	return		;funcret
  4938  0164BE                     __end_of_update_distance:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           postinc0	equ	0xFEE
  4945                           wreg	equ	0xFE8
  4946                           postdec1	equ	0xFE5
  4947                           fsr1h	equ	0xFE2
  4948                           fsr1l	equ	0xFE1
  4949                           status	equ	0xFD8
  4950                           
  4951 ;; *************** function _update_bump_and_cliff *****************
  4952 ;; Defined at:
  4953 ;;		line 319 in file "Library/iRobotSerial.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;		None
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;Total ram usage:        0 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:   10
  4974 ;; This function calls:
  4975 ;;		_irobot_query_and_update
  4976 ;; This function is called by:
  4977 ;;		_mode1
  4978 ;;		_mode2
  4979 ;;		_mode4
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text8
  4984  015EF0                     __ptext8:
  4985                           	opt stack 0
  4986  015EF0                     _update_bump_and_cliff:
  4987                           	opt stack 19
  4988                           
  4989                           ;iRobotSerial.c: 320: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  4990                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  4991                           ;iRobotSerial.c: 322: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  4992                           
  4993                           ;incstack = 0
  4994  015EF0  0E00               	movlw	0
  4995  015EF2  0100               	movlb	0	; () banked
  4996  015EF4  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4997  015EF6  0E07               	movlw	7
  4998  015EF8  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4999  015EFA  0E00               	movlw	0
  5000  015EFC  0100               	movlb	0	; () banked
  5001  015EFE  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5002  015F00  0E09               	movlw	9
  5003  015F02  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5004  015F04  0E00               	movlw	0
  5005  015F06  0100               	movlb	0	; () banked
  5006  015F08  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5007  015F0A  0E0A               	movlw	10
  5008  015F0C  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5009  015F0E  0E00               	movlw	0
  5010  015F10  0100               	movlb	0	; () banked
  5011  015F12  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5012  015F14  0E0B               	movlw	11
  5013  015F16  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5014  015F18  0E00               	movlw	0
  5015  015F1A  0100               	movlb	0	; () banked
  5016  015F1C  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5017  015F1E  0E0C               	movlw	12
  5018  015F20  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5019  015F22  0E05               	movlw	5
  5020  015F24  ECC7  F095         	call	_irobot_query_and_update
  5021  015F28  0012               	return		;funcret
  5022  015F2A                     __end_of_update_bump_and_cliff:
  5023                           	opt stack 0
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           postdec1	equ	0xFE5
  5031                           fsr1h	equ	0xFE2
  5032                           fsr1l	equ	0xFE1
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _update_angle *****************
  5036 ;; Defined at:
  5037 ;;		line 331 in file "Library/iRobotSerial.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;		None
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;		None
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;Total ram usage:        0 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:   10
  5058 ;; This function calls:
  5059 ;;		_irobot_query_and_update
  5060 ;; This function is called by:
  5061 ;;		_irobot_rotate
  5062 ;;		_mode1
  5063 ;;		_mode2
  5064 ;;		_mode4
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text9
  5069  0164BE                     __ptext9:
  5070                           	opt stack 0
  5071  0164BE                     _update_angle:
  5072                           	opt stack 19
  5073                           
  5074                           ;iRobotSerial.c: 332: irobot_query_and_update(1, iR_PKT_ANGLE);
  5075                           
  5076                           ;incstack = 0
  5077  0164BE  0E00               	movlw	0
  5078  0164C0  0100               	movlb	0	; () banked
  5079  0164C2  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5080  0164C4  0E14               	movlw	20
  5081  0164C6  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5082  0164C8  0E01               	movlw	1
  5083  0164CA  ECC7  F095         	call	_irobot_query_and_update
  5084  0164CE  0012               	return		;funcret
  5085  0164D0                     __end_of_update_angle:
  5086                           	opt stack 0
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           postdec1	equ	0xFE5
  5094                           fsr1h	equ	0xFE2
  5095                           fsr1l	equ	0xFE1
  5096                           status	equ	0xFD8
  5097                           
  5098 ;; *************** function _irobot_query_and_update *****************
  5099 ;; Defined at:
  5100 ;;		line 130 in file "Library/iRobotSerial.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  numberOfPack    1    wreg     unsigned char 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5105 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5106 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5107 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5108 ;;		 -> ?_irobot_query_and_update(1), 
  5109 ;;  i               1   28[BANK0 ] unsigned char 
  5110 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5111 ;;  j               1   26[BANK0 ] unsigned char 
  5112 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5113 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1    wreg      void 
  5116 ;; Registers used:
  5117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5123 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;Total ram usage:      535 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    9
  5130 ;; This function calls:
  5131 ;;		_eusart_getch
  5132 ;;		_eusart_putch
  5133 ;;		_get_packet_size
  5134 ;;		_rx_assign
  5135 ;; This function is called by:
  5136 ;;		_update_bump_and_cliff
  5137 ;;		_update_distance
  5138 ;;		_update_angle
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text10
  5143  012B8E                     __ptext10:
  5144                           	opt stack 0
  5145  012B8E                     _irobot_query_and_update:
  5146                           	opt stack 19
  5147                           
  5148                           ;incstack = 0
  5149                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5150  012B8E  0100               	movlb	0	; () banked
  5151  012B90  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5152                           
  5153                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5154  012B92  0E00               	movlw	0
  5155  012B94  0100               	movlb	0	; () banked
  5156  012B96  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5157  012B98  0E00               	movlw	0
  5158  012B9A  0100               	movlb	0	; () banked
  5159  012B9C  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5160                           
  5161                           ;iRobotSerial.c: 133: va_list packetIDs;
  5162                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5163  012B9E  0E66               	movlw	low ?_irobot_query_and_update
  5164  012BA0  0100               	movlb	0	; () banked
  5165  012BA2  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5166  012BA4  0E00               	movlw	high ?_irobot_query_and_update
  5167  012BA6  0100               	movlb	0	; () banked
  5168  012BA8  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5172  012BAA  0E95               	movlw	149
  5173  012BAC  EC7F  F0B2         	call	_eusart_putch
  5174                           
  5175                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5176  012BB0  0100               	movlb	0	; () banked
  5177  012BB2  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5178  012BB4  EC7F  F0B2         	call	_eusart_putch
  5179                           
  5180                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  5181  012BB8  0E00               	movlw	0
  5182  012BBA  0100               	movlb	0	; () banked
  5183  012BBC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5184  012BBE  D023               	goto	l2095
  5185  012BC0                     
  5186                           ; BSR set to: 0
  5187                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5188                           
  5189                           ; BSR set to: 0
  5190  012BC0  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5191  012BC4  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5192  012BC8  50DF               	movf	indf2,w,c
  5193  012BCA  0100               	movlb	0	; () banked
  5194  012BCC  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5195                           
  5196                           ; BSR set to: 0
  5197  012BCE  0E02               	movlw	2
  5198  012BD0  0100               	movlb	0	; () banked
  5199  012BD2  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5200  012BD4  0E00               	movlw	0
  5201  012BD6  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5205  012BD8  0100               	movlb	0	; () banked
  5206  012BDA  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5207  012BDC  EC15  F0AB         	call	_get_packet_size
  5208  012BE0  0100               	movlb	0	; () banked
  5209  012BE2  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5213  012BE4  0100               	movlb	0	; () banked
  5214  012BE6  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5215  012BE8  0D01               	mullw	1
  5216  012BEA  0E00               	movlw	low irobot_query_and_update@TXArray
  5217  012BEC  24F3               	addwf	prodl,w,c
  5218  012BEE  6ED9               	movwf	fsr2l,c
  5219  012BF0  0E02               	movlw	high irobot_query_and_update@TXArray
  5220  012BF2  20F4               	addwfc	prodh,w,c
  5221  012BF4  6EDA               	movwf	fsr2h,c
  5222  012BF6  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5226  012BFA  0100               	movlb	0	; () banked
  5227  012BFC  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5228  012BFE  EC7F  F0B2         	call	_eusart_putch
  5229  012C02  0100               	movlb	0	; () banked
  5230  012C04  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5231  012C06                     l2095:
  5232                           
  5233                           ; BSR set to: 0
  5234                           
  5235                           ; BSR set to: 0
  5236  012C06  0100               	movlb	0	; () banked
  5237  012C08  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5238  012C0A  0100               	movlb	0	; () banked
  5239  012C0C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5240  012C0E  A0D8               	btfss	status,0,c
  5241  012C10  D7D7               	goto	l2096
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;iRobotSerial.c: 142: }
  5245                           ;iRobotSerial.c: 143: ;
  5246                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5247                           
  5248                           ; BSR set to: 0
  5249  012C12  0E00               	movlw	0
  5250  012C14  0100               	movlb	0	; () banked
  5251  012C16  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5252  012C18  D00E               	goto	l2098
  5253  012C1A                     
  5254                           ; BSR set to: 0
  5255                           
  5256                           ; BSR set to: 0
  5257  012C1A  0100               	movlb	0	; () banked
  5258  012C1C  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5259  012C1E  0D01               	mullw	1
  5260  012C20  0E00               	movlw	low irobot_query_and_update@RXArray
  5261  012C22  24F3               	addwf	prodl,w,c
  5262  012C24  6ED9               	movwf	fsr2l,c
  5263  012C26  0E01               	movlw	high irobot_query_and_update@RXArray
  5264  012C28  20F4               	addwfc	prodh,w,c
  5265  012C2A  6EDA               	movwf	fsr2h,c
  5266  012C2C  ECC2  F0B2         	call	_eusart_getch	;wreg free
  5267  012C30  6EDF               	movwf	indf2,c
  5268  012C32  0100               	movlb	0	; () banked
  5269  012C34  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5270  012C36                     l2098:
  5271                           
  5272                           ; BSR set to: 0
  5273                           
  5274                           ; BSR set to: 0
  5275  012C36  0100               	movlb	0	; () banked
  5276  012C38  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5277  012C3A  0100               	movlb	0	; () banked
  5278  012C3C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5279  012C3E  A0D8               	btfss	status,0,c
  5280  012C40  D7EC               	goto	l2099
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  5284                           
  5285                           ; BSR set to: 0
  5286  012C42  0E00               	movlw	0
  5287  012C44  0100               	movlb	0	; () banked
  5288  012C46  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5289  012C48  D05E               	goto	l2101
  5290  012C4A                     l2102:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5294  012C4A  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5295  012C4E  D021               	goto	l2103
  5296  012C50                     
  5297                           ; BSR set to: 0
  5298                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5299                           
  5300                           ; BSR set to: 0
  5301  012C50  0100               	movlb	0	; () banked
  5302  012C52  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5303  012C54  0D01               	mullw	1
  5304  012C56  0E00               	movlw	low irobot_query_and_update@RXArray
  5305  012C58  24F3               	addwf	prodl,w,c
  5306  012C5A  6ED9               	movwf	fsr2l,c
  5307  012C5C  0E01               	movlw	high irobot_query_and_update@RXArray
  5308  012C5E  20F4               	addwfc	prodh,w,c
  5309  012C60  6EDA               	movwf	fsr2h,c
  5310  012C62  50DF               	movf	indf2,w,c
  5311  012C64  0100               	movlb	0	; () banked
  5312  012C66  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5313  012C68  0100               	movlb	0	; () banked
  5314  012C6A  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5315  012C6C  0800               	sublw	0
  5316  012C6E  0100               	movlb	0	; () banked
  5317  012C70  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5318  012C72  0100               	movlb	0	; () banked
  5319  012C74  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5320  012C76  0100               	movlb	0	; () banked
  5321  012C78  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5322  012C7A  0D01               	mullw	1
  5323  012C7C  0E00               	movlw	low irobot_query_and_update@TXArray
  5324  012C7E  24F3               	addwf	prodl,w,c
  5325  012C80  6ED9               	movwf	fsr2l,c
  5326  012C82  0E02               	movlw	high irobot_query_and_update@TXArray
  5327  012C84  20F4               	addwfc	prodh,w,c
  5328  012C86  6EDA               	movwf	fsr2h,c
  5329  012C88  50DF               	movf	indf2,w,c
  5330  012C8A  EC4C  F09C         	call	_rx_assign
  5331  012C8E  0100               	movlb	0	; () banked
  5332  012C90  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5333  012C92                     l2103:
  5334                           
  5335                           ; BSR set to: 0
  5336                           
  5337                           ; BSR set to: 0
  5338  012C92  0100               	movlb	0	; () banked
  5339  012C94  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5340  012C96  0D01               	mullw	1
  5341  012C98  0E00               	movlw	low irobot_query_and_update@TXArray
  5342  012C9A  24F3               	addwf	prodl,w,c
  5343  012C9C  6ED9               	movwf	fsr2l,c
  5344  012C9E  0E02               	movlw	high irobot_query_and_update@TXArray
  5345  012CA0  20F4               	addwfc	prodh,w,c
  5346  012CA2  6EDA               	movwf	fsr2h,c
  5347  012CA4  50DF               	movf	indf2,w,c
  5348  012CA6  EC15  F0AB         	call	_get_packet_size
  5349  012CAA  0100               	movlb	0	; () banked
  5350  012CAC  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5351  012CAE  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5352  012CB0  0100               	movlb	0	; () banked
  5353  012CB2  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5354  012CB4  0100               	movlb	0	; () banked
  5355  012CB6  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5356  012CB8  0E00               	movlw	0
  5357  012CBA  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5358  012CBC  0100               	movlb	0	; () banked
  5359  012CBE  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5360  012CC0  0100               	movlb	0	; () banked
  5361  012CC2  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5362  012CC4  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5363  012CC6  0100               	movlb	0	; () banked
  5364  012CC8  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5365  012CCA  0100               	movlb	0	; () banked
  5366  012CCC  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5367  012CCE  0100               	movlb	0	; () banked
  5368  012CD0  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5369  012CD2  0A80               	xorlw	128
  5370  012CD4  0100               	movlb	0	; () banked
  5371  012CD6  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5372  012CD8  0100               	movlb	0	; () banked
  5373  012CDA  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5374  012CDC  0A80               	xorlw	128
  5375  012CDE  0100               	movlb	0	; () banked
  5376  012CE0  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5377  012CE2  A0D8               	btfss	status,0,c
  5378  012CE4  D7B5               	goto	l2104
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;iRobotSerial.c: 150: }
  5382                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5383                           
  5384                           ; BSR set to: 0
  5385  012CE6  0100               	movlb	0	; () banked
  5386  012CE8  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5387  012CEA  0D01               	mullw	1
  5388  012CEC  0E00               	movlw	low irobot_query_and_update@TXArray
  5389  012CEE  24F3               	addwf	prodl,w,c
  5390  012CF0  6ED9               	movwf	fsr2l,c
  5391  012CF2  0E02               	movlw	high irobot_query_and_update@TXArray
  5392  012CF4  20F4               	addwfc	prodh,w,c
  5393  012CF6  6EDA               	movwf	fsr2h,c
  5394  012CF8  50DF               	movf	indf2,w,c
  5395  012CFA  EC15  F0AB         	call	_get_packet_size
  5396  012CFE  0100               	movlb	0	; () banked
  5397  012D00  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5398                           
  5399                           ; BSR set to: 0
  5400  012D02  0100               	movlb	0	; () banked
  5401  012D04  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5402  012D06                     l2101:
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407  012D06  0100               	movlb	0	; () banked
  5408  012D08  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5409  012D0A  0100               	movlb	0	; () banked
  5410  012D0C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5411  012D0E  B0D8               	btfsc	status,0,c
  5412  012D10  0012               	return	
  5413  012D12  D79B               	goto	l2102
  5414  012D14                     __end_of_irobot_query_and_update:
  5415                           	opt stack 0
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           prodh	equ	0xFF4
  5421                           prodl	equ	0xFF3
  5422                           postinc0	equ	0xFEE
  5423                           wreg	equ	0xFE8
  5424                           postdec1	equ	0xFE5
  5425                           fsr1h	equ	0xFE2
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _rx_assign *****************
  5433 ;; Defined at:
  5434 ;;		line 74 in file "Library/iRobotSerial.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  packetID        1    wreg     unsigned char 
  5437 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5438 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  packetID        1    5[BANK0 ] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;Total ram usage:        5 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    8
  5457 ;; This function calls:
  5458 ;;		_sort_iRBumpDrop
  5459 ;; This function is called by:
  5460 ;;		_irobot_query_and_update
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text11
  5465  013898                     __ptext11:
  5466                           	opt stack 0
  5467  013898                     _rx_assign:
  5468                           	opt stack 19
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;incstack = 0
  5472                           ;rx_assign@packetID stored from wreg
  5473  013898  0100               	movlb	0	; () banked
  5474  01389A  6F65               	movwf	rx_assign@packetID& (0+255),b
  5475                           
  5476                           ;iRobotSerial.c: 75: switch (packetID) {
  5477  01389C  D057               	goto	l2035
  5478  01389E                     l2036:
  5479                           
  5480                           ; BSR set to: 0
  5481  01389E  C061  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5482                           
  5483                           ; BSR set to: 0
  5484  0138A2  EC31  F0A7         	call	_sort_iRBumpDrop	;wreg free
  5485  0138A6  0012               	return	
  5486  0138A8                     l2038:
  5487                           
  5488                           ; BSR set to: 0
  5489  0138A8  C061  F035         	movff	rx_assign@packetIDValue,_iRWall
  5490  0138AC  0012               	return	
  5491  0138AE                     l2039:
  5492                           
  5493                           ; BSR set to: 0
  5494  0138AE  C061  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5495  0138B2  0012               	return	
  5496  0138B4                     l2040:
  5497                           
  5498                           ; BSR set to: 0
  5499  0138B4  C061  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5500  0138B8  0012               	return	
  5501  0138BA                     l2041:
  5502                           
  5503                           ; BSR set to: 0
  5504  0138BA  C061  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5505  0138BE  0012               	return	
  5506  0138C0                     l2042:
  5507                           
  5508                           ; BSR set to: 0
  5509  0138C0  C061  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5510  0138C4  0012               	return	
  5511  0138C6                     l2043:
  5512                           
  5513                           ; BSR set to: 0
  5514  0138C6  C061  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5515  0138CA  0012               	return	
  5516  0138CC                     
  5517                           ; BSR set to: 0
  5518                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5519                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5520                           
  5521                           ; BSR set to: 0
  5522  0138CC  0100               	movlb	0	; () banked
  5523  0138CE  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5524  0138D0  0100               	movlb	0	; () banked
  5525  0138D2  A4D8               	btfss	status,2,c
  5526  0138D4  D005               	goto	l2046
  5527                           
  5528                           ; BSR set to: 0
  5529  0138D6  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5530  0138DA  0103               	movlb	3	; () banked
  5531  0138DC  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5532  0138DE  0012               	return	
  5533  0138E0                     l2046:
  5534                           
  5535                           ; BSR set to: 0
  5536  0138E0  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5537  0138E4  0103               	movlb	3	; () banked
  5538  0138E6  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5539                           
  5540                           ; BSR set to: 3
  5541  0138E8  0103               	movlb	3	; () banked
  5542  0138EA  5108               	movf	_iRDistanceSS& (0+255),w,b
  5543  0138EC  0100               	movlb	0	; () banked
  5544  0138EE  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5545  0138F0  6B63               	clrf	??_rx_assign& (0+255),b
  5546  0138F2  0103               	movlb	3	; () banked
  5547  0138F4  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5548  0138F6  0100               	movlb	0	; () banked
  5549  0138F8  2563               	addwf	??_rx_assign& (0+255),w,b
  5550  0138FA  0103               	movlb	3	; () banked
  5551  0138FC  6F27               	movwf	_iRDistance& (0+255),b
  5552  0138FE  0103               	movlb	3	; () banked
  5553  013900  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5554  013902  0100               	movlb	0	; () banked
  5555  013904  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5556  013906  0103               	movlb	3	; () banked
  5557  013908  6F28               	movwf	(_iRDistance+1)& (0+255),b
  5558                           
  5559                           ; BSR set to: 3
  5560  01390A  0012               	return	
  5561  01390C                     
  5562                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5563                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5564                           
  5565                           ; BSR set to: 3
  5566  01390C  0100               	movlb	0	; () banked
  5567  01390E  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5568  013910  0100               	movlb	0	; () banked
  5569  013912  A4D8               	btfss	status,2,c
  5570  013914  D005               	goto	l2051
  5571                           
  5572                           ; BSR set to: 0
  5573  013916  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5574  01391A  0103               	movlb	3	; () banked
  5575  01391C  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5576  01391E  0012               	return	
  5577  013920                     l2051:
  5578                           
  5579                           ; BSR set to: 0
  5580  013920  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5581  013924  0103               	movlb	3	; () banked
  5582  013926  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5583                           
  5584                           ; BSR set to: 3
  5585  013928  0103               	movlb	3	; () banked
  5586  01392A  5104               	movf	_iRAngleSS& (0+255),w,b
  5587  01392C  0100               	movlb	0	; () banked
  5588  01392E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5589  013930  6B63               	clrf	??_rx_assign& (0+255),b
  5590  013932  0103               	movlb	3	; () banked
  5591  013934  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5592  013936  0100               	movlb	0	; () banked
  5593  013938  2563               	addwf	??_rx_assign& (0+255),w,b
  5594  01393A  0100               	movlb	0	; () banked
  5595  01393C  6FC8               	movwf	_iRAngle& (0+255),b
  5596  01393E  0103               	movlb	3	; () banked
  5597  013940  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5598  013942  0100               	movlb	0	; () banked
  5599  013944  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5600  013946  0100               	movlb	0	; () banked
  5601  013948  6FC9               	movwf	(_iRAngle+1)& (0+255),b
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;iRobotSerial.c: 89: }
  5605                           
  5606                           ; BSR set to: 0
  5607  01394A  0012               	return	
  5608  01394C                     l2035:
  5609                           
  5610                           ; BSR set to: 0
  5611  01394C  0100               	movlb	0	; () banked
  5612  01394E  5165               	movf	rx_assign@packetID& (0+255),w,b
  5613                           
  5614                           ; Switch size 1, requested type "space"
  5615                           ; Number of cases is 9, Range of values is 7 to 20
  5616                           ; switch strategies available:
  5617                           ; Name         Instructions Cycles
  5618                           ; simple_byte           28    15 (average)
  5619                           ;	Chosen strategy is simple_byte
  5620  013950  0A07               	xorlw	7	; case 7
  5621  013952  B4D8               	btfsc	status,2,c
  5622  013954  D7A4               	goto	l2036
  5623  013956  0A0F               	xorlw	15	; case 8
  5624  013958  B4D8               	btfsc	status,2,c
  5625  01395A  D7A6               	goto	l2038
  5626  01395C  0A01               	xorlw	1	; case 9
  5627  01395E  B4D8               	btfsc	status,2,c
  5628  013960  D7A6               	goto	l2039
  5629  013962  0A03               	xorlw	3	; case 10
  5630  013964  B4D8               	btfsc	status,2,c
  5631  013966  D7A6               	goto	l2040
  5632  013968  0A01               	xorlw	1	; case 11
  5633  01396A  B4D8               	btfsc	status,2,c
  5634  01396C  D7A6               	goto	l2041
  5635  01396E  0A07               	xorlw	7	; case 12
  5636  013970  B4D8               	btfsc	status,2,c
  5637  013972  D7A6               	goto	l2042
  5638  013974  0A01               	xorlw	1	; case 13
  5639  013976  B4D8               	btfsc	status,2,c
  5640  013978  D7A6               	goto	l2043
  5641  01397A  0A1E               	xorlw	30	; case 19
  5642  01397C  B4D8               	btfsc	status,2,c
  5643  01397E  D7A6               	goto	l2044
  5644  013980  0A07               	xorlw	7	; case 20
  5645  013982  A4D8               	btfss	status,2,c
  5646  013984  0012               	return	
  5647  013986  D7C2               	goto	l2049
  5648  013988                     __end_of_rx_assign:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           postinc0	equ	0xFEE
  5657                           wreg	equ	0xFE8
  5658                           postdec1	equ	0xFE5
  5659                           fsr1h	equ	0xFE2
  5660                           fsr1l	equ	0xFE1
  5661                           indf2	equ	0xFDF
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _sort_iRBumpDrop *****************
  5667 ;; Defined at:
  5668 ;;		line 92 in file "Library/iRobotSerial.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;		None
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;		None
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  1    wreg      void 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2, status,0
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;Total ram usage:        1 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    7
  5689 ;; This function calls:
  5690 ;;		Nothing
  5691 ;; This function is called by:
  5692 ;;		_rx_assign
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text12
  5697  014E62                     __ptext12:
  5698                           	opt stack 0
  5699  014E62                     _sort_iRBumpDrop:
  5700                           	opt stack 19
  5701                           
  5702                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5703                           
  5704                           ;incstack = 0
  5705  014E62  A036               	btfss	_iRBumpDrop,0,c
  5706  014E64  D002               	goto	l2058
  5707  014E66  0E01               	movlw	1
  5708  014E68  D001               	goto	L1
  5709  014E6A                     l2058:
  5710                           
  5711                           ; BSR set to: 0
  5712  014E6A  0E00               	movlw	0
  5713  014E6C                     L1:
  5714  014E6C  0100               	movlb	0	; () banked
  5715  014E6E  6FD7               	movwf	_iRBumpRight& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5719                           
  5720                           ; BSR set to: 0
  5721  014E70  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5722  014E74  0100               	movlb	0	; () banked
  5723  014E76  90D8               	bcf	status,0,c
  5724  014E78  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5725  014E7A  0100               	movlb	0	; () banked
  5726  014E7C  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5727  014E7E  D002               	goto	l2062
  5728                           
  5729                           ; BSR set to: 0
  5730  014E80  0E01               	movlw	1
  5731  014E82  D001               	goto	L2
  5732  014E84                     l2062:
  5733                           
  5734                           ; BSR set to: 0
  5735                           
  5736                           ; BSR set to: 0
  5737  014E84  0E00               	movlw	0
  5738  014E86                     L2:
  5739  014E86  0100               	movlb	0	; () banked
  5740  014E88  6FD6               	movwf	_iRBumpLeft& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5744                           
  5745                           ; BSR set to: 0
  5746  014E8A  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5747  014E8E  0100               	movlb	0	; () banked
  5748  014E90  90D8               	bcf	status,0,c
  5749  014E92  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5750  014E94  0100               	movlb	0	; () banked
  5751  014E96  90D8               	bcf	status,0,c
  5752  014E98  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5753  014E9A  0100               	movlb	0	; () banked
  5754  014E9C  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5755  014E9E  D002               	goto	l2066
  5756                           
  5757                           ; BSR set to: 0
  5758  014EA0  0E01               	movlw	1
  5759  014EA2  D001               	goto	L3
  5760  014EA4                     l2066:
  5761                           
  5762                           ; BSR set to: 0
  5763                           
  5764                           ; BSR set to: 0
  5765  014EA4  0E00               	movlw	0
  5766  014EA6                     L3:
  5767  014EA6  6E2F               	movwf	_iRDropRight,c
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5771                           
  5772                           ; BSR set to: 0
  5773  014EA8  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5774  014EAC  0100               	movlb	0	; () banked
  5775  014EAE  90D8               	bcf	status,0,c
  5776  014EB0  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5777  014EB2  0100               	movlb	0	; () banked
  5778  014EB4  90D8               	bcf	status,0,c
  5779  014EB6  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5780  014EB8  0100               	movlb	0	; () banked
  5781  014EBA  90D8               	bcf	status,0,c
  5782  014EBC  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5783  014EBE  0100               	movlb	0	; () banked
  5784  014EC0  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5785  014EC2  D002               	goto	l2070
  5786                           
  5787                           ; BSR set to: 0
  5788  014EC4  0E01               	movlw	1
  5789  014EC6  D001               	goto	L4
  5790  014EC8                     l2070:
  5791                           
  5792                           ; BSR set to: 0
  5793                           
  5794                           ; BSR set to: 0
  5795  014EC8  0E00               	movlw	0
  5796  014ECA                     L4:
  5797  014ECA  6E2E               	movwf	_iRDropLeft,c
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  5801                           
  5802                           ; BSR set to: 0
  5803  014ECC  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5804  014ED0  0100               	movlb	0	; () banked
  5805  014ED2  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  5806  014ED4  0E0F               	movlw	15
  5807  014ED6  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  5808  014ED8  0100               	movlb	0	; () banked
  5809  014EDA  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5810  014EDC  D003               	goto	l2074
  5811                           
  5812                           ; BSR set to: 0
  5813  014EDE  0E01               	movlw	1
  5814  014EE0  6E2D               	movwf	_iRDropCaster,c
  5815  014EE2  0012               	return	
  5816  014EE4                     l2074:
  5817                           
  5818                           ; BSR set to: 0
  5819                           
  5820                           ; BSR set to: 0
  5821  014EE4  0E00               	movlw	0
  5822  014EE6  6E2D               	movwf	_iRDropCaster,c
  5823  014EE8  0012               	return	
  5824  014EEA                     __end_of_sort_iRBumpDrop:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           postinc0	equ	0xFEE
  5833                           wreg	equ	0xFE8
  5834                           postdec1	equ	0xFE5
  5835                           fsr1h	equ	0xFE2
  5836                           fsr1l	equ	0xFE1
  5837                           indf2	equ	0xFDF
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _get_packet_size *****************
  5843 ;; Defined at:
  5844 ;;		line 60 in file "Library/iRobotSerial.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  packetID        1    wreg     unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  packetID        1    0[BANK0 ] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      unsigned char 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;Total ram usage:        1 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    7
  5865 ;; This function calls:
  5866 ;;		Nothing
  5867 ;; This function is called by:
  5868 ;;		_irobot_query_and_update
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text13
  5873  01562A                     __ptext13:
  5874                           	opt stack 0
  5875  01562A                     _get_packet_size:
  5876                           	opt stack 20
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;incstack = 0
  5880                           ;get_packet_size@packetID stored from wreg
  5881  01562A  0100               	movlb	0	; () banked
  5882  01562C  6F60               	movwf	get_packet_size@packetID& (0+255),b
  5883                           
  5884                           ;iRobotSerial.c: 61: switch (packetID) {
  5885  01562E  D012               	goto	l2021
  5886  015630  0E01               	movlw	1
  5887  015632  0012               	return	
  5888  015634  0E01               	movlw	1
  5889  015636  0012               	return	
  5890  015638  0E01               	movlw	1
  5891  01563A  0012               	return	
  5892  01563C  0E01               	movlw	1
  5893  01563E  0012               	return	
  5894  015640  0E01               	movlw	1
  5895  015642  0012               	return	
  5896  015644  0E01               	movlw	1
  5897  015646  0012               	return	
  5898  015648  0E01               	movlw	1
  5899  01564A  0012               	return	
  5900  01564C  0E02               	movlw	2
  5901  01564E  0012               	return	
  5902  015650  0E02               	movlw	2
  5903                           
  5904                           ;iRobotSerial.c: 71: }
  5905  015652  0012               	return	
  5906  015654                     l2021:
  5907  015654  0100               	movlb	0	; () banked
  5908  015656  5160               	movf	get_packet_size@packetID& (0+255),w,b
  5909                           
  5910                           ; Switch size 1, requested type "space"
  5911                           ; Number of cases is 9, Range of values is 7 to 20
  5912                           ; switch strategies available:
  5913                           ; Name         Instructions Cycles
  5914                           ; simple_byte           28    15 (average)
  5915                           ;	Chosen strategy is simple_byte
  5916  015658  0A07               	xorlw	7	; case 7
  5917  01565A  B4D8               	btfsc	status,2,c
  5918  01565C  D7E9               	goto	l2022
  5919  01565E  0A0F               	xorlw	15	; case 8
  5920  015660  B4D8               	btfsc	status,2,c
  5921  015662  D7E8               	goto	l2024
  5922  015664  0A01               	xorlw	1	; case 9
  5923  015666  B4D8               	btfsc	status,2,c
  5924  015668  D7E7               	goto	l2025
  5925  01566A  0A03               	xorlw	3	; case 10
  5926  01566C  B4D8               	btfsc	status,2,c
  5927  01566E  D7E6               	goto	l2026
  5928  015670  0A01               	xorlw	1	; case 11
  5929  015672  B4D8               	btfsc	status,2,c
  5930  015674  D7E5               	goto	l2027
  5931  015676  0A07               	xorlw	7	; case 12
  5932  015678  B4D8               	btfsc	status,2,c
  5933  01567A  D7E4               	goto	l2028
  5934  01567C  0A01               	xorlw	1	; case 13
  5935  01567E  B4D8               	btfsc	status,2,c
  5936  015680  D7E3               	goto	l2029
  5937  015682  0A1E               	xorlw	30	; case 19
  5938  015684  B4D8               	btfsc	status,2,c
  5939  015686  D7E2               	goto	l2030
  5940  015688  0A07               	xorlw	7	; case 20
  5941  01568A  A4D8               	btfss	status,2,c
  5942  01568C  0012               	return	
  5943  01568E  D7E0               	goto	l2031
  5944  015690                     __end_of_get_packet_size:
  5945                           	opt stack 0
  5946                           tblptru	equ	0xFF8
  5947                           tblptrh	equ	0xFF7
  5948                           tblptrl	equ	0xFF6
  5949                           tablat	equ	0xFF5
  5950                           prodh	equ	0xFF4
  5951                           prodl	equ	0xFF3
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           postdec1	equ	0xFE5
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _eusart_getch *****************
  5963 ;; Defined at:
  5964 ;;		line 125 in file "Library/iRobotSerial.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      unsigned char 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    7
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_irobot_query_and_update
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text14
  5993  016584                     __ptext14:
  5994                           	opt stack 0
  5995  016584                     _eusart_getch:
  5996                           	opt stack 20
  5997                           
  5998                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  5999                           
  6000                           ;incstack = 0
  6001  016584  AA9E               	btfss	3998,5,c	;volatile
  6002  016586  D7FE               	goto	_eusart_getch
  6003                           
  6004                           ;iRobotSerial.c: 127: return RCREG1;
  6005  016588  50AF               	movf	4015,w,c	;volatile
  6006  01658A  0012               	return	
  6007  01658C                     __end_of_eusart_getch:
  6008                           	opt stack 0
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           postinc0	equ	0xFEE
  6016                           wreg	equ	0xFE8
  6017                           postdec1	equ	0xFE5
  6018                           fsr1h	equ	0xFE2
  6019                           fsr1l	equ	0xFE1
  6020                           indf2	equ	0xFDF
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8
  6024                           
  6025 ;; *************** function _printf *****************
  6026 ;; Defined at:
  6027 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6030 ;;		 -> STR_16(21), STR_15(21), STR_14(21), STR_13(21), 
  6031 ;;		 -> STR_12(21), STR_11(3), STR_10(35), STR_9(3), 
  6032 ;;		 -> STR_8(17), STR_7(3), STR_6(14), STR_5(3), 
  6033 ;;		 -> STR_4(46), STR_3(3), STR_2(46), STR_1(3), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  tmpval          4    0        struct .
  6036 ;;  cp              3    0        PTR const unsigned char 
  6037 ;;  val             2   34[BANK0 ] unsigned int 
  6038 ;;  ap              2   32[BANK0 ] PTR void [1]
  6039 ;;		 -> ?_printf(2), 
  6040 ;;  len             2    0        unsigned int 
  6041 ;;  c               1   36[BANK0 ] char 
  6042 ;;  flag            1   31[BANK0 ] unsigned char 
  6043 ;;  prec            1   30[BANK0 ] char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  2   21[BANK0 ] int 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6053 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;Total ram usage:       16 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:   12
  6060 ;; This function calls:
  6061 ;;		___lwdiv
  6062 ;;		___lwmod
  6063 ;;		_putch
  6064 ;; This function is called by:
  6065 ;;		_mode1
  6066 ;;		_mode2
  6067 ;;		_mode4
  6068 ;;		_main
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text15
  6073  0124DC                     __ptext15:
  6074                           	opt stack 0
  6075  0124DC                     _printf:
  6076                           	opt stack 18
  6077                           
  6078                           ;doprnt.c: 466: va_list ap;
  6079                           ;doprnt.c: 499: signed char c;
  6080                           ;doprnt.c: 506: signed char prec;
  6081                           ;doprnt.c: 508: unsigned char flag;
  6082                           ;doprnt.c: 523: union {
  6083                           ;doprnt.c: 524: unsigned long vd;
  6084                           ;doprnt.c: 525: double integ;
  6085                           ;doprnt.c: 526: } tmpval;
  6086                           ;doprnt.c: 528: unsigned int val;
  6087                           ;doprnt.c: 529: unsigned len;
  6088                           ;doprnt.c: 530: const char * cp;
  6089                           ;doprnt.c: 533: *ap = __va_start();
  6090                           
  6091                           ;incstack = 0
  6092  0124DC  0E77               	movlw	low (?_printf+2)
  6093  0124DE  0100               	movlb	0	; () banked
  6094  0124E0  6F80               	movwf	printf@ap& (0+255),b
  6095  0124E2  0E00               	movlw	high (?_printf+2)
  6096  0124E4  0100               	movlb	0	; () banked
  6097  0124E6  6F81               	movwf	(printf@ap+1)& (0+255),b
  6098                           
  6099                           ;doprnt.c: 536: while(c = *f++) {
  6100  0124E8  D0C9               	goto	u11140
  6101  0124EA                     
  6102                           ; BSR set to: 0
  6103                           ;doprnt.c: 538: if(c != '%')
  6104                           
  6105                           ; BSR set to: 0
  6106  0124EA  0E25               	movlw	37
  6107  0124EC  0100               	movlb	0	; () banked
  6108  0124EE  1984               	xorwf	printf@c& (0+255),w,b
  6109  0124F0  B4D8               	btfsc	status,2,c
  6110  0124F2  D005               	goto	l2408
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;doprnt.c: 540: {
  6114                           ;doprnt.c: 541: (putch(c) );
  6115  0124F4  0100               	movlb	0	; () banked
  6116  0124F6  5184               	movf	printf@c& (0+255),w,b
  6117  0124F8  EC71  F0B2         	call	_putch
  6118                           
  6119                           ;doprnt.c: 542: continue;
  6120  0124FC  D0BF               	goto	u11140
  6121  0124FE                     l2408:
  6122                           
  6123                           ;doprnt.c: 543: }
  6124                           ;doprnt.c: 548: flag = 0;
  6125  0124FE  0E00               	movlw	0
  6126  012500  0100               	movlb	0	; () banked
  6127  012502  6F7F               	movwf	printf@flag& (0+255),b
  6128                           
  6129                           ;doprnt.c: 635: switch(c = *f++) {
  6130  012504  D014               	goto	l2409
  6131  012506                     
  6132                           ; BSR set to: 0
  6133                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6134                           
  6135                           ; BSR set to: 0
  6136  012506  C080  FFD9         	movff	printf@ap,fsr2l
  6137  01250A  C081  FFDA         	movff	printf@ap+1,fsr2h
  6138  01250E  50DF               	movf	indf2,w,c
  6139  012510  0100               	movlb	0	; () banked
  6140  012512  6F84               	movwf	printf@c& (0+255),b
  6141                           
  6142                           ; BSR set to: 0
  6143  012514  0E02               	movlw	2
  6144  012516  0100               	movlb	0	; () banked
  6145  012518  2780               	addwf	printf@ap& (0+255),f,b
  6146  01251A  0E00               	movlw	0
  6147  01251C  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6148  01251E                     
  6149                           ; BSR set to: 0
  6150                           ;doprnt.c: 809: (putch(c) );
  6151                           
  6152                           ; BSR set to: 0
  6153  01251E  0100               	movlb	0	; () banked
  6154  012520  5184               	movf	printf@c& (0+255),w,b
  6155  012522  EC71  F0B2         	call	_putch
  6156                           
  6157                           ;doprnt.c: 810: continue;
  6158  012526  D0AA               	goto	u11140
  6159  012528                     
  6160                           ;doprnt.c: 818: flag |= 0x40;
  6161  012528  0100               	movlb	0	; () banked
  6162  01252A  8D7F               	bsf	printf@flag& (0+255),6,b
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 822: }
  6166                           
  6167                           ;doprnt.c: 819: break;
  6168  01252C  D01E               	goto	l2414
  6169  01252E                     l2409:
  6170                           
  6171                           ; BSR set to: 0
  6172                           
  6173                           ; BSR set to: 0
  6174  01252E  C075  FFF6         	movff	printf@f,tblptrl
  6175  012532  C076  FFF7         	movff	printf@f+1,tblptrh
  6176  012536  0100               	movlb	0	; () banked
  6177  012538  4B75               	infsnz	printf@f& (0+255),f,b
  6178  01253A  2B76               	incf	(printf@f+1)& (0+255),f,b
  6179  01253C                     	if	0	;tblptru may be non-zero
  6180  01253C                     	endif
  6181  01253C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6182  01253C  0E00               	movlw	low (__mediumconst shr (0+16))
  6183  01253E  6EF8               	movwf	tblptru,c
  6184  012540                     	endif
  6185  012540  0008               	tblrd		*
  6186  012542  CFF5 F084          	movff	tablat,printf@c
  6187  012546  0100               	movlb	0	; () banked
  6188  012548  5184               	movf	printf@c& (0+255),w,b
  6189                           
  6190                           ; Switch size 1, requested type "space"
  6191                           ; Number of cases is 5, Range of values is 0 to 117
  6192                           ; switch strategies available:
  6193                           ; Name         Instructions Cycles
  6194                           ; simple_byte           16     9 (average)
  6195                           ;	Chosen strategy is simple_byte
  6196  01254A  0A00               	xorlw	0	; case 0
  6197  01254C  B4D8               	btfsc	status,2,c
  6198  01254E  0012               	return	
  6199  012550  0A63               	xorlw	99	; case 99
  6200  012552  B4D8               	btfsc	status,2,c
  6201  012554  D7D8               	goto	l2415
  6202  012556  0A07               	xorlw	7	; case 100
  6203  012558  B4D8               	btfsc	status,2,c
  6204  01255A  D007               	goto	l2414
  6205  01255C  0A0D               	xorlw	13	; case 105
  6206  01255E  B4D8               	btfsc	status,2,c
  6207  012560  D004               	goto	l2414
  6208  012562  0A1C               	xorlw	28	; case 117
  6209  012564  B4D8               	btfsc	status,2,c
  6210  012566  D7E0               	goto	l2417
  6211  012568  D7DA               	goto	l2416
  6212  01256A                     l2414:
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6216  01256A  0100               	movlb	0	; () banked
  6217  01256C  BD7F               	btfsc	printf@flag& (0+255),6,b
  6218  01256E  D019               	goto	l2418
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;doprnt.c: 1253: {
  6222                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6223  012570  C080  FFD9         	movff	printf@ap,fsr2l
  6224  012574  C081  FFDA         	movff	printf@ap+1,fsr2h
  6225  012578  CFDE F082          	movff	postinc2,printf@val
  6226  01257C  CFDD F083          	movff	postdec2,printf@val+1
  6227                           
  6228                           ; BSR set to: 0
  6229  012580  0E02               	movlw	2
  6230  012582  0100               	movlb	0	; () banked
  6231  012584  2780               	addwf	printf@ap& (0+255),f,b
  6232  012586  0E00               	movlw	0
  6233  012588  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;doprnt.c: 1261: if((int)val < 0) {
  6237  01258A  0100               	movlb	0	; () banked
  6238  01258C  AF83               	btfss	(printf@val+1)& (0+255),7,b
  6239  01258E  D016               	goto	l2420
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;doprnt.c: 1262: flag |= 0x03;
  6243  012590  0E03               	movlw	3
  6244  012592  0100               	movlb	0	; () banked
  6245  012594  137F               	iorwf	printf@flag& (0+255),f,b
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;doprnt.c: 1263: val = -val;
  6249  012596  0100               	movlb	0	; () banked
  6250  012598  6D82               	negf	printf@val& (0+255),b
  6251  01259A  1F83               	comf	(printf@val+1)& (0+255),f,b
  6252  01259C  B0D8               	btfsc	status,0,c
  6253  01259E  2B83               	incf	(printf@val+1)& (0+255),f,b
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;doprnt.c: 1264: }
  6257                           ;doprnt.c: 1266: }
  6258  0125A0  D00D               	goto	l2420
  6259  0125A2                     l2418:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;doprnt.c: 1268: else
  6263                           ;doprnt.c: 1273: {
  6264                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6265                           
  6266                           ; BSR set to: 0
  6267  0125A2  C080  FFD9         	movff	printf@ap,fsr2l
  6268  0125A6  C081  FFDA         	movff	printf@ap+1,fsr2h
  6269  0125AA  CFDE F082          	movff	postinc2,printf@val
  6270  0125AE  CFDD F083          	movff	postdec2,printf@val+1
  6271                           
  6272                           ; BSR set to: 0
  6273  0125B2  0E02               	movlw	2
  6274  0125B4  0100               	movlb	0	; () banked
  6275  0125B6  2780               	addwf	printf@ap& (0+255),f,b
  6276  0125B8  0E00               	movlw	0
  6277  0125BA  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6278  0125BC                     l2420:
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;doprnt.c: 1287: }
  6282                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6283                           
  6284                           ; BSR set to: 0
  6285  0125BC  0E01               	movlw	1
  6286  0125BE  0100               	movlb	0	; () banked
  6287  0125C0  6F84               	movwf	printf@c& (0+255),b
  6288  0125C2                     l14419:
  6289                           
  6290                           ; BSR set to: 0
  6291  0125C2  0E05               	movlw	5
  6292  0125C4  0100               	movlb	0	; () banked
  6293  0125C6  1984               	xorwf	printf@c& (0+255),w,b
  6294  0125C8  B4D8               	btfsc	status,2,c
  6295  0125CA  D019               	goto	u11120
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;doprnt.c: 1306: if(val < dpowers[c])
  6299                           
  6300                           ; BSR set to: 0
  6301                           
  6302                           ; BSR set to: 0
  6303  0125CC  0100               	movlb	0	; () banked
  6304  0125CE  5184               	movf	printf@c& (0+255),w,b
  6305  0125D0  0D02               	mullw	2
  6306  0125D2  0E59               	movlw	low _dpowers
  6307  0125D4  24F3               	addwf	prodl,w,c
  6308  0125D6  6EF6               	movwf	tblptrl,c
  6309  0125D8  0EFD               	movlw	high _dpowers
  6310  0125DA  20F4               	addwfc	prodh,w,c
  6311  0125DC  6EF7               	movwf	tblptrh,c
  6312  0125DE                     	if	1	;There are 3 active tblptr bytes
  6313  0125DE  6AF8               	clrf	tblptru,c
  6314  0125E0  0E00               	movlw	low (__mediumconst shr (0+16))
  6315  0125E2  22F8               	addwfc	tblptru,f,c
  6316  0125E4                     	endif
  6317  0125E4  0009               	tblrd		*+
  6318  0125E6  50F5               	movf	tablat,w,c
  6319  0125E8  0100               	movlb	0	; () banked
  6320  0125EA  5D82               	subwf	printf@val& (0+255),w,b
  6321  0125EC  0009               	tblrd		*+
  6322  0125EE  50F5               	movf	tablat,w,c
  6323  0125F0  0100               	movlb	0	; () banked
  6324  0125F2  5983               	subwfb	(printf@val+1)& (0+255),w,b
  6325  0125F4  A0D8               	btfss	status,0,c
  6326  0125F6  D003               	goto	u11120
  6327                           
  6328                           ; BSR set to: 0
  6329                           
  6330                           ; BSR set to: 0
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;doprnt.c: 1307: break;
  6334  0125F8  0100               	movlb	0	; () banked
  6335  0125FA  2B84               	incf	printf@c& (0+255),f,b
  6336  0125FC  D7E2               	goto	l14419
  6337  0125FE                     u11120:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;doprnt.c: 1422: {
  6341                           ;doprnt.c: 1438: if(flag & 0x03)
  6342                           
  6343                           ; BSR set to: 0
  6344  0125FE  C07F  F07D         	movff	printf@flag,??_printf
  6345  012602  0E03               	movlw	3
  6346  012604  0100               	movlb	0	; () banked
  6347  012606  177D               	andwf	??_printf& (0+255),f,b
  6348  012608  B4D8               	btfsc	status,2,c
  6349  01260A  D003               	goto	l2424
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;doprnt.c: 1439: (putch('-') );
  6353  01260C  0E2D               	movlw	45
  6354  01260E  EC71  F0B2         	call	_putch
  6355  012612                     l2424:
  6356                           
  6357                           ;doprnt.c: 1469: }
  6358                           ;doprnt.c: 1472: prec = c;
  6359  012612  C084  F07E         	movff	printf@c,printf@prec
  6360                           
  6361                           ;doprnt.c: 1474: while(prec--) {
  6362  012616  D02C               	goto	l2425
  6363  012618                     
  6364                           ;doprnt.c: 1478: {
  6365                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6366  012618  0100               	movlb	0	; () banked
  6367  01261A  517E               	movf	printf@prec& (0+255),w,b
  6368  01261C  0D02               	mullw	2
  6369  01261E  0E59               	movlw	low _dpowers
  6370  012620  24F3               	addwf	prodl,w,c
  6371  012622  6EF6               	movwf	tblptrl,c
  6372  012624  0EFD               	movlw	high _dpowers
  6373  012626  20F4               	addwfc	prodh,w,c
  6374  012628  6EF7               	movwf	tblptrh,c
  6375  01262A                     	if	1	;There are 3 active tblptr bytes
  6376  01262A  6AF8               	clrf	tblptru,c
  6377  01262C  0E00               	movlw	low (__mediumconst shr (0+16))
  6378  01262E  22F8               	addwfc	tblptru,f,c
  6379  012630                     	endif
  6380  012630  0009               	tblrd		*+
  6381  012632  CFF5 F062          	movff	tablat,___lwdiv@divisor
  6382  012636  000A               	tblrd		*-
  6383  012638  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  6384  01263C  C082  F060         	movff	printf@val,___lwdiv@dividend
  6385  012640  C083  F061         	movff	printf@val+1,___lwdiv@dividend+1
  6386  012644  EC73  F0A8         	call	___lwdiv	;wreg free
  6387  012648  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  6388  01264C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  6389  012650  0E00               	movlw	0
  6390  012652  0100               	movlb	0	; () banked
  6391  012654  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6392  012656  0E0A               	movlw	10
  6393  012658  6F69               	movwf	___lwmod@divisor& (0+255),b
  6394  01265A  ECDE  F0AB         	call	___lwmod	;wreg free
  6395  01265E  0100               	movlb	0	; () banked
  6396  012660  5167               	movf	?___lwmod& (0+255),w,b
  6397  012662  0F30               	addlw	48
  6398  012664  0100               	movlb	0	; () banked
  6399  012666  6F84               	movwf	printf@c& (0+255),b
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;doprnt.c: 1523: }
  6403                           ;doprnt.c: 1524: (putch(c) );
  6404  012668  0100               	movlb	0	; () banked
  6405  01266A  5184               	movf	printf@c& (0+255),w,b
  6406  01266C  EC71  F0B2         	call	_putch
  6407  012670                     l2425:
  6408  012670  0100               	movlb	0	; () banked
  6409  012672  077E               	decf	printf@prec& (0+255),f,b
  6410  012674  0100               	movlb	0	; () banked
  6411  012676  297E               	incf	printf@prec& (0+255),w,b
  6412  012678  A4D8               	btfss	status,2,c
  6413  01267A  D7CE               	goto	l2426
  6414  01267C                     u11140:
  6415                           
  6416                           ; BSR set to: 0
  6417                           
  6418                           ; BSR set to: 0
  6419  01267C  C075  FFF6         	movff	printf@f,tblptrl
  6420  012680  C076  FFF7         	movff	printf@f+1,tblptrh
  6421  012684  0100               	movlb	0	; () banked
  6422  012686  4B75               	infsnz	printf@f& (0+255),f,b
  6423  012688  2B76               	incf	(printf@f+1)& (0+255),f,b
  6424  01268A                     	if	0	;tblptru may be non-zero
  6425  01268A                     	endif
  6426  01268A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6427  01268A  0E00               	movlw	low (__mediumconst shr (0+16))
  6428  01268C  6EF8               	movwf	tblptru,c
  6429  01268E                     	endif
  6430  01268E  0008               	tblrd		*
  6431  012690  CFF5 F084          	movff	tablat,printf@c
  6432  012694  0100               	movlb	0	; () banked
  6433  012696  5184               	movf	printf@c& (0+255),w,b
  6434  012698  B4D8               	btfsc	status,2,c
  6435  01269A  0012               	return	
  6436  01269C  D726               	goto	l2407
  6437  01269E                     __end_of_printf:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           postinc0	equ	0xFEE
  6446                           wreg	equ	0xFE8
  6447                           postdec1	equ	0xFE5
  6448                           fsr1h	equ	0xFE2
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _putch *****************
  6458 ;; Defined at:
  6459 ;;		line 454 in file "Library/Console.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  c               1    wreg     unsigned char 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  c               1   20[BANK0 ] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;Total ram usage:        1 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:   11
  6480 ;; This function calls:
  6481 ;;		_Console_PrintChar
  6482 ;; This function is called by:
  6483 ;;		_printf
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text16
  6488  0164E2                     __ptext16:
  6489                           	opt stack 0
  6490  0164E2                     _putch:
  6491                           	opt stack 18
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;incstack = 0
  6495                           ;putch@c stored from wreg
  6496  0164E2  0100               	movlb	0	; () banked
  6497  0164E4  6F74               	movwf	putch@c& (0+255),b
  6498                           
  6499                           ;Console.c: 456: Console_PrintChar(c);
  6500  0164E6  0100               	movlb	0	; () banked
  6501  0164E8  5174               	movf	putch@c& (0+255),w,b
  6502  0164EA  EC2F  F094         	call	_Console_PrintChar
  6503  0164EE  0012               	return		;funcret
  6504  0164F0                     __end_of_putch:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _Console_PrintChar *****************
  6525 ;; Defined at:
  6526 ;;		line 322 in file "Library/Console.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  pInput          1    wreg     unsigned char 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  pInput          1   19[BANK0 ] unsigned char 
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;Total ram usage:        4 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:   10
  6547 ;; This function calls:
  6548 ;;		_Console_Backspace
  6549 ;;		_Console_FormFeed
  6550 ;;		_Console_IncrementCursor
  6551 ;;		_Console_NewLine
  6552 ;;		_Console_ResetCursor
  6553 ;;		_Console_Tab
  6554 ;; This function is called by:
  6555 ;;		_putch
  6556 ;;		_Console_PrintString
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text17
  6561  01285E                     __ptext17:
  6562                           	opt stack 0
  6563  01285E                     _Console_PrintChar:
  6564                           	opt stack 18
  6565                           
  6566                           ;incstack = 0
  6567                           ;Console_PrintChar@pInput stored from wreg
  6568  01285E  0100               	movlb	0	; () banked
  6569  012860  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  6570                           
  6571                           ;Console.c: 324: switch(pInput)
  6572  012862  D0B1               	goto	l1036
  6573  012864                     
  6574                           ;Console.c: 327: case '\n':
  6575                           ;Console.c: 328: Console_NewLine();
  6576  012864  EC2D  F0A5         	call	_Console_NewLine	;wreg free
  6577                           
  6578                           ;Console.c: 329: return;
  6579  012868  0012               	return	
  6580  01286A                     
  6581                           ;Console.c: 331: Console_Backspace();
  6582  01286A  EC0F  F0AC         	call	_Console_Backspace	;wreg free
  6583                           
  6584                           ;Console.c: 332: return;
  6585  01286E  0012               	return	
  6586  012870                     
  6587                           ;Console.c: 334: Console_FormFeed();
  6588  012870  EC60  F0A6         	call	_Console_FormFeed	;wreg free
  6589                           
  6590                           ;Console.c: 335: return;
  6591  012874  0012               	return	
  6592  012876                     
  6593                           ;Console.c: 337: Console_Tab();
  6594  012876  ECAB  F09F         	call	_Console_Tab	;wreg free
  6595                           
  6596                           ;Console.c: 338: return;
  6597  01287A  0012               	return	
  6598  01287C                     
  6599                           ;Console.c: 340: Console_IncrementCursor();
  6600  01287C  EC48  F0AB         	call	_Console_IncrementCursor	;wreg free
  6601                           
  6602                           ;Console.c: 341: return;
  6603  012880  0012               	return	
  6604  012882                     
  6605                           ;Console.c: 343: Console_ResetCursor();
  6606  012882  EC25  F0B1         	call	_Console_ResetCursor	;wreg free
  6607                           
  6608                           ;Console.c: 344: return;
  6609  012886  0012               	return	
  6610  012888                     
  6611                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6612                           
  6613                           ;Console.c: 349: default:
  6614  012888  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6615  01288C  0E7F               	movlw	127
  6616  01288E  0100               	movlb	0	; () banked
  6617  012890  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6618  012892  0100               	movlb	0	; () banked
  6619  012894  51DD               	movf	_lBufferY& (0+255),w,b
  6620  012896  0D14               	mullw	20
  6621  012898  0EC8               	movlw	low _lBuffer
  6622  01289A  0100               	movlb	0	; () banked
  6623  01289C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6624  01289E  0E04               	movlw	high _lBuffer
  6625  0128A0  0100               	movlb	0	; () banked
  6626  0128A2  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6627  0128A4  50F3               	movf	prodl,w,c
  6628  0128A6  0100               	movlb	0	; () banked
  6629  0128A8  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6630  0128AA  50F4               	movf	prodh,w,c
  6631  0128AC  0100               	movlb	0	; () banked
  6632  0128AE  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6633  0128B0  0100               	movlb	0	; () banked
  6634  0128B2  51DE               	movf	_lBufferX& (0+255),w,b
  6635  0128B4  0D01               	mullw	1
  6636  0128B6  50F3               	movf	prodl,w,c
  6637  0128B8  0100               	movlb	0	; () banked
  6638  0128BA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6639  0128BC  6ED9               	movwf	fsr2l,c
  6640  0128BE  50F4               	movf	prodh,w,c
  6641  0128C0  0100               	movlb	0	; () banked
  6642  0128C2  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6643  0128C4  6EDA               	movwf	fsr2h,c
  6644  0128C6  50DF               	movf	indf2,w,c
  6645  0128C8  0B7F               	andlw	127
  6646  0128CA  0100               	movlb	0	; () banked
  6647  0128CC  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6648  0128CE  B4D8               	btfsc	status,2,c
  6649  0128D0  D02E               	goto	l1047
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;Console.c: 351: {
  6653                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6654  0128D2  0E01               	movlw	1
  6655  0128D4  0100               	movlb	0	; () banked
  6656  0128D6  6FFF               	movwf	_change& (0+255),b
  6657                           
  6658                           ; BSR set to: 0
  6659  0128D8  0100               	movlb	0	; () banked
  6660  0128DA  51DD               	movf	_lBufferY& (0+255),w,b
  6661  0128DC  0D14               	mullw	20
  6662  0128DE  0EC8               	movlw	low _lBuffer
  6663  0128E0  0100               	movlb	0	; () banked
  6664  0128E2  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6665  0128E4  0E04               	movlw	high _lBuffer
  6666  0128E6  0100               	movlb	0	; () banked
  6667  0128E8  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6668  0128EA  50F3               	movf	prodl,w,c
  6669  0128EC  0100               	movlb	0	; () banked
  6670  0128EE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6671  0128F0  50F4               	movf	prodh,w,c
  6672  0128F2  0100               	movlb	0	; () banked
  6673  0128F4  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6674  0128F6  0100               	movlb	0	; () banked
  6675  0128F8  51DE               	movf	_lBufferX& (0+255),w,b
  6676  0128FA  0D01               	mullw	1
  6677  0128FC  50F3               	movf	prodl,w,c
  6678  0128FE  0100               	movlb	0	; () banked
  6679  012900  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6680  012902  6ED9               	movwf	fsr2l,c
  6681  012904  50F4               	movf	prodh,w,c
  6682  012906  0100               	movlb	0	; () banked
  6683  012908  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6684  01290A  6EDA               	movwf	fsr2h,c
  6685  01290C  0100               	movlb	0	; () banked
  6686  01290E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6687  012910  0980               	iorlw	128
  6688  012912  6EDF               	movwf	indf2,c
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  6692  012914  0100               	movlb	0	; () banked
  6693  012916  51DD               	movf	_lBufferY& (0+255),w,b
  6694  012918  0D02               	mullw	2
  6695  01291A  0E00               	movlw	low _lCBuffer
  6696  01291C  24F3               	addwf	prodl,w,c
  6697  01291E  6ED9               	movwf	fsr2l,c
  6698  012920  0E04               	movlw	high _lCBuffer
  6699  012922  20F4               	addwfc	prodh,w,c
  6700  012924  6EDA               	movwf	fsr2h,c
  6701  012926  C0FD  FFDE         	movff	_gForecolour,postinc2
  6702  01292A  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  6703  01292E                     l1047:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;Console.c: 354: }
  6707                           ;Console.c: 368: if(Console_IncrementCursor())
  6708                           
  6709                           ; BSR set to: 0
  6710  01292E  EC48  F0AB         	call	_Console_IncrementCursor	;wreg free
  6711  012932  0900               	iorlw	0
  6712  012934  B4D8               	btfsc	status,2,c
  6713  012936  0012               	return	
  6714                           
  6715                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6716  012938  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6717  01293C  0E7F               	movlw	127
  6718  01293E  0100               	movlb	0	; () banked
  6719  012940  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6720  012942  0100               	movlb	0	; () banked
  6721  012944  51DD               	movf	_lBufferY& (0+255),w,b
  6722  012946  0D14               	mullw	20
  6723  012948  0EC8               	movlw	low _lBuffer
  6724  01294A  0100               	movlb	0	; () banked
  6725  01294C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6726  01294E  0E04               	movlw	high _lBuffer
  6727  012950  0100               	movlb	0	; () banked
  6728  012952  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6729  012954  50F3               	movf	prodl,w,c
  6730  012956  0100               	movlb	0	; () banked
  6731  012958  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6732  01295A  50F4               	movf	prodh,w,c
  6733  01295C  0100               	movlb	0	; () banked
  6734  01295E  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6735  012960  0100               	movlb	0	; () banked
  6736  012962  51DE               	movf	_lBufferX& (0+255),w,b
  6737  012964  0D01               	mullw	1
  6738  012966  50F3               	movf	prodl,w,c
  6739  012968  0100               	movlb	0	; () banked
  6740  01296A  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6741  01296C  6ED9               	movwf	fsr2l,c
  6742  01296E  50F4               	movf	prodh,w,c
  6743  012970  0100               	movlb	0	; () banked
  6744  012972  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6745  012974  6EDA               	movwf	fsr2h,c
  6746  012976  50DF               	movf	indf2,w,c
  6747  012978  0B7F               	andlw	127
  6748  01297A  0100               	movlb	0	; () banked
  6749  01297C  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6750  01297E  B4D8               	btfsc	status,2,c
  6751  012980  0012               	return	
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6755  012982  0E01               	movlw	1
  6756  012984  0100               	movlb	0	; () banked
  6757  012986  6FFF               	movwf	_change& (0+255),b
  6758                           
  6759                           ; BSR set to: 0
  6760  012988  0100               	movlb	0	; () banked
  6761  01298A  51DD               	movf	_lBufferY& (0+255),w,b
  6762  01298C  0D14               	mullw	20
  6763  01298E  0EC8               	movlw	low _lBuffer
  6764  012990  0100               	movlb	0	; () banked
  6765  012992  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6766  012994  0E04               	movlw	high _lBuffer
  6767  012996  0100               	movlb	0	; () banked
  6768  012998  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6769  01299A  50F3               	movf	prodl,w,c
  6770  01299C  0100               	movlb	0	; () banked
  6771  01299E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6772  0129A0  50F4               	movf	prodh,w,c
  6773  0129A2  0100               	movlb	0	; () banked
  6774  0129A4  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6775  0129A6  0100               	movlb	0	; () banked
  6776  0129A8  51DE               	movf	_lBufferX& (0+255),w,b
  6777  0129AA  0D01               	mullw	1
  6778  0129AC  50F3               	movf	prodl,w,c
  6779  0129AE  0100               	movlb	0	; () banked
  6780  0129B0  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6781  0129B2  6ED9               	movwf	fsr2l,c
  6782  0129B4  50F4               	movf	prodh,w,c
  6783  0129B6  0100               	movlb	0	; () banked
  6784  0129B8  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6785  0129BA  6EDA               	movwf	fsr2h,c
  6786  0129BC  0100               	movlb	0	; () banked
  6787  0129BE  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6788  0129C0  0980               	iorlw	128
  6789  0129C2  6EDF               	movwf	indf2,c
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;Console.c: 372: };
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;Console.c: 371: return;
  6796                           
  6797                           ; BSR set to: 0
  6798                           
  6799                           ; BSR set to: 0
  6800  0129C4  0012               	return	
  6801  0129C6                     l1036:
  6802                           
  6803                           ; BSR set to: 0
  6804  0129C6  0100               	movlb	0	; () banked
  6805  0129C8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6806                           
  6807                           ; Switch size 1, requested type "space"
  6808                           ; Number of cases is 8, Range of values is 7 to 35
  6809                           ; switch strategies available:
  6810                           ; Name         Instructions Cycles
  6811                           ; simple_byte           25    13 (average)
  6812                           ;	Chosen strategy is simple_byte
  6813  0129CA  0A07               	xorlw	7	; case 7
  6814  0129CC  B4D8               	btfsc	status,2,c
  6815  0129CE  D756               	goto	l1043
  6816  0129D0  0A0F               	xorlw	15	; case 8
  6817  0129D2  B4D8               	btfsc	status,2,c
  6818  0129D4  D74A               	goto	l1040
  6819  0129D6  0A01               	xorlw	1	; case 9
  6820  0129D8  B4D8               	btfsc	status,2,c
  6821  0129DA  D74D               	goto	l1042
  6822  0129DC  0A03               	xorlw	3	; case 10
  6823  0129DE  B4D8               	btfsc	status,2,c
  6824  0129E0  D741               	goto	l1037
  6825  0129E2  0A06               	xorlw	6	; case 12
  6826  0129E4  B4D8               	btfsc	status,2,c
  6827  0129E6  D744               	goto	l1041
  6828  0129E8  0A01               	xorlw	1	; case 13
  6829  0129EA  B4D8               	btfsc	status,2,c
  6830  0129EC  D73B               	goto	l1037
  6831  0129EE  0A2D               	xorlw	45	; case 32
  6832  0129F0  B4D8               	btfsc	status,2,c
  6833  0129F2  D74A               	goto	l1045
  6834  0129F4  0A03               	xorlw	3	; case 35
  6835  0129F6  B4D8               	btfsc	status,2,c
  6836  0129F8  D744               	goto	l1044
  6837  0129FA  D746               	goto	l1045
  6838  0129FC                     __end_of_Console_PrintChar:
  6839                           	opt stack 0
  6840                           tblptru	equ	0xFF8
  6841                           tblptrh	equ	0xFF7
  6842                           tblptrl	equ	0xFF6
  6843                           tablat	equ	0xFF5
  6844                           prodh	equ	0xFF4
  6845                           prodl	equ	0xFF3
  6846                           postinc0	equ	0xFEE
  6847                           wreg	equ	0xFE8
  6848                           postdec1	equ	0xFE5
  6849                           fsr1h	equ	0xFE2
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           postdec2	equ	0xFDD
  6854                           fsr2h	equ	0xFDA
  6855                           fsr2l	equ	0xFD9
  6856                           status	equ	0xFD8
  6857                           
  6858 ;; *************** function _Console_Tab *****************
  6859 ;; Defined at:
  6860 ;;		line 260 in file "Library/Console.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;  c               1   15[BANK0 ] unsigned char 
  6865 ;;  i               1   14[BANK0 ] unsigned char 
  6866 ;;  t               1   13[BANK0 ] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:        8 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    9
  6883 ;; This function calls:
  6884 ;;		_Console_ClearCursor
  6885 ;;		_Console_IncrementCursor
  6886 ;;		___awdiv
  6887 ;; This function is called by:
  6888 ;;		_Console_PrintChar
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text18
  6893  013F56                     __ptext18:
  6894                           	opt stack 0
  6895  013F56                     _Console_Tab:
  6896                           	opt stack 18
  6897                           
  6898                           ;Console.c: 262: UINT8 i = 0;
  6899                           
  6900                           ;incstack = 0
  6901  013F56  0E00               	movlw	0
  6902  013F58  0100               	movlb	0	; () banked
  6903  013F5A  6F6E               	movwf	Console_Tab@i& (0+255),b
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  6907  013F5C  0EFA               	movlw	250
  6908  013F5E  2447               	addwf	_gCursor,w,c
  6909  013F60  0100               	movlb	0	; () banked
  6910  013F62  6F60               	movwf	___awdiv@dividend& (0+255),b
  6911  013F64  0EFF               	movlw	255
  6912  013F66  2048               	addwfc	_gCursor+1,w,c
  6913  013F68  0100               	movlb	0	; () banked
  6914  013F6A  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  6915  013F6C  0E00               	movlw	0
  6916  013F6E  0100               	movlb	0	; () banked
  6917  013F70  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6918  013F72  0E06               	movlw	6
  6919  013F74  6F62               	movwf	___awdiv@divisor& (0+255),b
  6920  013F76  EC6C  F0A0         	call	___awdiv	;wreg free
  6921  013F7A  0100               	movlb	0	; () banked
  6922  013F7C  5160               	movf	?___awdiv& (0+255),w,b
  6923  013F7E  0100               	movlb	0	; () banked
  6924  013F80  6F6F               	movwf	Console_Tab@c& (0+255),b
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;Console.c: 264: UINT8 t = c/4;
  6928  013F82  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  6929  013F86  0100               	movlb	0	; () banked
  6930  013F88  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6931  013F8A  0E00               	movlw	0
  6932  013F8C  0100               	movlb	0	; () banked
  6933  013F8E  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6934  013F90  0E04               	movlw	4
  6935  013F92  6F62               	movwf	___awdiv@divisor& (0+255),b
  6936  013F94  EC6C  F0A0         	call	___awdiv	;wreg free
  6937  013F98  0100               	movlb	0	; () banked
  6938  013F9A  5160               	movf	?___awdiv& (0+255),w,b
  6939  013F9C  0100               	movlb	0	; () banked
  6940  013F9E  6F6D               	movwf	Console_Tab@t& (0+255),b
  6941                           
  6942                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  6943  013FA0  0E00               	movlw	0
  6944  013FA2  0100               	movlb	0	; () banked
  6945  013FA4  6F6E               	movwf	Console_Tab@i& (0+255),b
  6946  013FA6  D006               	goto	l1009
  6947  013FA8                     
  6948                           ; BSR set to: 0
  6949                           ;Console.c: 266: {
  6950                           ;Console.c: 267: Console_ClearCursor();
  6951                           
  6952                           ; BSR set to: 0
  6953  013FA8  EC9E  F0AE         	call	_Console_ClearCursor	;wreg free
  6954                           
  6955                           ;Console.c: 268: Console_IncrementCursor();
  6956  013FAC  EC48  F0AB         	call	_Console_IncrementCursor	;wreg free
  6957  013FB0  0100               	movlb	0	; () banked
  6958  013FB2  2B6E               	incf	Console_Tab@i& (0+255),f,b
  6959  013FB4                     l1009:
  6960                           
  6961                           ; BSR set to: 0
  6962                           
  6963                           ; BSR set to: 0
  6964  013FB4  0100               	movlb	0	; () banked
  6965  013FB6  516D               	movf	Console_Tab@t& (0+255),w,b
  6966  013FB8  0D04               	mullw	4
  6967  013FBA  1EF3               	comf	prodl,f,c
  6968  013FBC  1EF4               	comf	prodh,f,c
  6969  013FBE  4AF3               	infsnz	prodl,f,c
  6970  013FC0  2AF4               	incf	prodh,f,c
  6971  013FC2  0100               	movlb	0	; () banked
  6972  013FC4  516F               	movf	Console_Tab@c& (0+255),w,b
  6973  013FC6  0100               	movlb	0	; () banked
  6974  013FC8  6F68               	movwf	??_Console_Tab& (0+255),b
  6975  013FCA  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  6976  013FCC  50F3               	movf	prodl,w,c
  6977  013FCE  0100               	movlb	0	; () banked
  6978  013FD0  2768               	addwf	??_Console_Tab& (0+255),f,b
  6979  013FD2  50F4               	movf	prodh,w,c
  6980  013FD4  0100               	movlb	0	; () banked
  6981  013FD6  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6982  013FD8  0100               	movlb	0	; () banked
  6983  013FDA  1F68               	comf	??_Console_Tab& (0+255),f,b
  6984  013FDC  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  6985  013FDE  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  6986  013FE0  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  6987  013FE2  0E04               	movlw	4
  6988  013FE4  0100               	movlb	0	; () banked
  6989  013FE6  2768               	addwf	??_Console_Tab& (0+255),f,b
  6990  013FE8  0E00               	movlw	0
  6991  013FEA  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6992  013FEC  0100               	movlb	0	; () banked
  6993  013FEE  516E               	movf	Console_Tab@i& (0+255),w,b
  6994  013FF0  0100               	movlb	0	; () banked
  6995  013FF2  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  6996  013FF4  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  6997  013FF6  0100               	movlb	0	; () banked
  6998  013FF8  5168               	movf	??_Console_Tab& (0+255),w,b
  6999  013FFA  0100               	movlb	0	; () banked
  7000  013FFC  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7001  013FFE  0100               	movlb	0	; () banked
  7002  014000  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  7003  014002  0A80               	xorlw	128
  7004  014004  0100               	movlb	0	; () banked
  7005  014006  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  7006  014008  0100               	movlb	0	; () banked
  7007  01400A  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  7008  01400C  0A80               	xorlw	128
  7009  01400E  0100               	movlb	0	; () banked
  7010  014010  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7011  014012  B0D8               	btfsc	status,0,c
  7012  014014  0012               	return	
  7013  014016  D7C8               	goto	l1010
  7014  014018                     __end_of_Console_Tab:
  7015                           	opt stack 0
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           postinc0	equ	0xFEE
  7023                           wreg	equ	0xFE8
  7024                           postdec1	equ	0xFE5
  7025                           fsr1h	equ	0xFE2
  7026                           fsr1l	equ	0xFE1
  7027                           indf2	equ	0xFDF
  7028                           postinc2	equ	0xFDE
  7029                           postdec2	equ	0xFDD
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function ___awdiv *****************
  7035 ;; Defined at:
  7036 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  dividend        2    0[BANK0 ] int 
  7039 ;;  divisor         2    2[BANK0 ] int 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  quotient        2    6[BANK0 ] int 
  7042 ;;  sign            1    5[BANK0 ] unsigned char 
  7043 ;;  counter         1    4[BANK0 ] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  2    0[BANK0 ] int 
  7046 ;; Registers used:
  7047 ;;		wreg, status,2, status,0
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;Total ram usage:        8 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    7
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_Console_Tab
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text19
  7068  0140D8                     __ptext19:
  7069                           	opt stack 0
  7070  0140D8                     ___awdiv:
  7071                           	opt stack 19
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;incstack = 0
  7075  0140D8  0E00               	movlw	0
  7076  0140DA  0100               	movlb	0	; () banked
  7077  0140DC  6F65               	movwf	___awdiv@sign& (0+255),b
  7078                           
  7079                           ; BSR set to: 0
  7080  0140DE  0100               	movlb	0	; () banked
  7081  0140E0  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7082  0140E2  D008               	goto	l2597
  7083                           
  7084                           ; BSR set to: 0
  7085  0140E4  0100               	movlb	0	; () banked
  7086  0140E6  6D62               	negf	___awdiv@divisor& (0+255),b
  7087  0140E8  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7088  0140EA  B0D8               	btfsc	status,0,c
  7089  0140EC  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7090                           
  7091                           ; BSR set to: 0
  7092  0140EE  0E01               	movlw	1
  7093  0140F0  0100               	movlb	0	; () banked
  7094  0140F2  6F65               	movwf	___awdiv@sign& (0+255),b
  7095  0140F4                     l2597:
  7096                           
  7097                           ; BSR set to: 0
  7098                           
  7099                           ; BSR set to: 0
  7100  0140F4  0100               	movlb	0	; () banked
  7101  0140F6  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7102  0140F8  D008               	goto	l2598
  7103                           
  7104                           ; BSR set to: 0
  7105  0140FA  0100               	movlb	0	; () banked
  7106  0140FC  6D60               	negf	___awdiv@dividend& (0+255),b
  7107  0140FE  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7108  014100  B0D8               	btfsc	status,0,c
  7109  014102  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7110                           
  7111                           ; BSR set to: 0
  7112  014104  0E01               	movlw	1
  7113  014106  0100               	movlb	0	; () banked
  7114  014108  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7115  01410A                     l2598:
  7116                           
  7117                           ; BSR set to: 0
  7118                           
  7119                           ; BSR set to: 0
  7120  01410A  0E00               	movlw	0
  7121  01410C  0100               	movlb	0	; () banked
  7122  01410E  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7123  014110  0E00               	movlw	0
  7124  014112  6F66               	movwf	___awdiv@quotient& (0+255),b
  7125                           
  7126                           ; BSR set to: 0
  7127  014114  0100               	movlb	0	; () banked
  7128  014116  5162               	movf	___awdiv@divisor& (0+255),w,b
  7129  014118  0100               	movlb	0	; () banked
  7130  01411A  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7131  01411C  B4D8               	btfsc	status,2,c
  7132  01411E  D02C               	goto	l2605
  7133                           
  7134                           ; BSR set to: 0
  7135  014120  0E01               	movlw	1
  7136  014122  0100               	movlb	0	; () banked
  7137  014124  6F64               	movwf	___awdiv@counter& (0+255),b
  7138  014126  D006               	goto	l2600
  7139  014128                     
  7140                           ; BSR set to: 0
  7141                           
  7142                           ; BSR set to: 0
  7143  014128  0100               	movlb	0	; () banked
  7144  01412A  90D8               	bcf	status,0,c
  7145  01412C  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7146  01412E  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7147  014130  0100               	movlb	0	; () banked
  7148  014132  2B64               	incf	___awdiv@counter& (0+255),f,b
  7149  014134                     l2600:
  7150                           
  7151                           ; BSR set to: 0
  7152                           
  7153                           ; BSR set to: 0
  7154  014134  0100               	movlb	0	; () banked
  7155  014136  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7156  014138  D7F7               	goto	l2601
  7157  01413A                     u9110:
  7158                           
  7159                           ; BSR set to: 0
  7160                           
  7161                           ; BSR set to: 0
  7162                           
  7163                           ; BSR set to: 0
  7164  01413A  0100               	movlb	0	; () banked
  7165  01413C  90D8               	bcf	status,0,c
  7166  01413E  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7167  014140  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7168                           
  7169                           ; BSR set to: 0
  7170  014142  0100               	movlb	0	; () banked
  7171  014144  5162               	movf	___awdiv@divisor& (0+255),w,b
  7172  014146  0100               	movlb	0	; () banked
  7173  014148  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7174  01414A  0100               	movlb	0	; () banked
  7175  01414C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7176  01414E  0100               	movlb	0	; () banked
  7177  014150  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7178  014152  A0D8               	btfss	status,0,c
  7179  014154  D00A               	goto	l2604
  7180                           
  7181                           ; BSR set to: 0
  7182  014156  0100               	movlb	0	; () banked
  7183  014158  5162               	movf	___awdiv@divisor& (0+255),w,b
  7184  01415A  0100               	movlb	0	; () banked
  7185  01415C  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7186  01415E  0100               	movlb	0	; () banked
  7187  014160  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7188  014162  0100               	movlb	0	; () banked
  7189  014164  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7190                           
  7191                           ; BSR set to: 0
  7192  014166  0100               	movlb	0	; () banked
  7193  014168  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7194  01416A                     l2604:
  7195                           
  7196                           ; BSR set to: 0
  7197                           
  7198                           ; BSR set to: 0
  7199  01416A  0100               	movlb	0	; () banked
  7200  01416C  90D8               	bcf	status,0,c
  7201  01416E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7202  014170  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7203                           
  7204                           ; BSR set to: 0
  7205  014172  0100               	movlb	0	; () banked
  7206  014174  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7207  014176  D7E1               	goto	u9110
  7208  014178                     l2605:
  7209                           
  7210                           ; BSR set to: 0
  7211                           
  7212                           ; BSR set to: 0
  7213                           
  7214                           ; BSR set to: 0
  7215  014178  0100               	movlb	0	; () banked
  7216  01417A  5165               	movf	___awdiv@sign& (0+255),w,b
  7217  01417C  0100               	movlb	0	; () banked
  7218  01417E  B4D8               	btfsc	status,2,c
  7219  014180  D005               	goto	l2606
  7220                           
  7221                           ; BSR set to: 0
  7222  014182  0100               	movlb	0	; () banked
  7223  014184  6D66               	negf	___awdiv@quotient& (0+255),b
  7224  014186  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7225  014188  B0D8               	btfsc	status,0,c
  7226  01418A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7227  01418C                     l2606:
  7228                           
  7229                           ; BSR set to: 0
  7230                           
  7231                           ; BSR set to: 0
  7232  01418C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7233  014190  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7234  014194  0012               	return	
  7235  014196                     __end_of___awdiv:
  7236                           	opt stack 0
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           postinc0	equ	0xFEE
  7244                           wreg	equ	0xFE8
  7245                           postdec1	equ	0xFE5
  7246                           fsr1h	equ	0xFE2
  7247                           fsr1l	equ	0xFE1
  7248                           indf2	equ	0xFDF
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           fsr2h	equ	0xFDA
  7252                           fsr2l	equ	0xFD9
  7253                           status	equ	0xFD8
  7254                           
  7255 ;; *************** function _Console_IncrementCursor *****************
  7256 ;; Defined at:
  7257 ;;		line 243 in file "Library/Console.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;                  1    wreg      unsigned char 
  7264 ;; Registers used:
  7265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;Total ram usage:        2 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    8
  7278 ;; This function calls:
  7279 ;;		_Console_FormFeed
  7280 ;;		_Console_NewLine
  7281 ;; This function is called by:
  7282 ;;		_Console_Tab
  7283 ;;		_Console_PrintChar
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text20
  7288  015690                     __ptext20:
  7289                           	opt stack 0
  7290  015690                     _Console_IncrementCursor:
  7291                           	opt stack 18
  7292                           
  7293                           ;Console.c: 246: lBufferX += 1;
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;incstack = 0
  7297  015690  0100               	movlb	0	; () banked
  7298  015692  2BDE               	incf	_lBufferX& (0+255),f,b
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;Console.c: 248: gCursor.x += 6;
  7302  015694  0E06               	movlw	6
  7303  015696  2647               	addwf	_gCursor,f,c
  7304  015698  0E00               	movlw	0
  7305  01569A  2248               	addwfc	_gCursor+1,f,c
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7309  01569C  0E06               	movlw	6
  7310  01569E  2447               	addwf	_gCursor,w,c
  7311  0156A0  0100               	movlb	0	; () banked
  7312  0156A2  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7313  0156A4  0E00               	movlw	0
  7314  0156A6  2048               	addwfc	_gCursor+1,w,c
  7315  0156A8  0100               	movlb	0	; () banked
  7316  0156AA  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7317  0156AC  0100               	movlb	0	; () banked
  7318  0156AE  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7319  0156B0  D009               	goto	l1004
  7320  0156B2  0100               	movlb	0	; () banked
  7321  0156B4  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7322  0156B6  E104               	bnz	u8970
  7323  0156B8  0E80               	movlw	128
  7324  0156BA  0100               	movlb	0	; () banked
  7325  0156BC  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7326  0156BE  B0D8               	btfsc	status,0,c
  7327  0156C0                     u8970:
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;Console.c: 250: Console_NewLine();
  7331  0156C0  EC2D  F0A5         	call	_Console_NewLine	;wreg free
  7332  0156C4                     l1004:
  7333                           
  7334                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7335  0156C4  0E08               	movlw	8
  7336  0156C6  2449               	addwf	_gCursor+2,w,c
  7337  0156C8  0100               	movlb	0	; () banked
  7338  0156CA  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7339  0156CC  0E00               	movlw	0
  7340  0156CE  204A               	addwfc	_gCursor+3,w,c
  7341  0156D0  0100               	movlb	0	; () banked
  7342  0156D2  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7343  0156D4  0100               	movlb	0	; () banked
  7344  0156D6  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7345  0156D8  D00C               	goto	l1005
  7346  0156DA  0100               	movlb	0	; () banked
  7347  0156DC  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7348  0156DE  E105               	bnz	u8980
  7349  0156E0  0E80               	movlw	128
  7350  0156E2  0100               	movlb	0	; () banked
  7351  0156E4  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7352  0156E6  A0D8               	btfss	status,0,c
  7353  0156E8  D004               	goto	l1005
  7354  0156EA                     u8980:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;Console.c: 252: {
  7358                           ;Console.c: 253: Console_FormFeed();
  7359  0156EA  EC60  F0A6         	call	_Console_FormFeed	;wreg free
  7360                           
  7361                           ;Console.c: 254: return 1;
  7362  0156EE  0E01               	movlw	1
  7363  0156F0  0012               	return	
  7364  0156F2                     l1005:
  7365                           
  7366                           ;Console.c: 255: }
  7367                           ;Console.c: 257: return 0;
  7368  0156F2  0E00               	movlw	0
  7369  0156F4  0012               	return	
  7370  0156F6                     __end_of_Console_IncrementCursor:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodh	equ	0xFF4
  7377                           prodl	equ	0xFF3
  7378                           postinc0	equ	0xFEE
  7379                           wreg	equ	0xFE8
  7380                           postdec1	equ	0xFE5
  7381                           fsr1h	equ	0xFE2
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _Console_NewLine *****************
  7391 ;; Defined at:
  7392 ;;		line 175 in file "Library/Console.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;Total ram usage:        2 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    7
  7413 ;; This function calls:
  7414 ;;		Nothing
  7415 ;; This function is called by:
  7416 ;;		_Console_IncrementCursor
  7417 ;;		_Console_PrintChar
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text21
  7422  014A5A                     __ptext21:
  7423                           	opt stack 0
  7424  014A5A                     _Console_NewLine:
  7425                           	opt stack 18
  7426                           
  7427                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  7428                           
  7429                           ;incstack = 0
  7430  014A5A  D03E               	goto	l983
  7431  014A5C                     
  7432                           ;Console.c: 179: {
  7433                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  7434  014A5C  0100               	movlb	0	; () banked
  7435  014A5E  51DD               	movf	_lBufferY& (0+255),w,b
  7436  014A60  0D14               	mullw	20
  7437  014A62  0EC8               	movlw	low _lBuffer
  7438  014A64  0100               	movlb	0	; () banked
  7439  014A66  6F60               	movwf	??_Console_NewLine& (0+255),b
  7440  014A68  0E04               	movlw	high _lBuffer
  7441  014A6A  0100               	movlb	0	; () banked
  7442  014A6C  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7443  014A6E  50F3               	movf	prodl,w,c
  7444  014A70  0100               	movlb	0	; () banked
  7445  014A72  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7446  014A74  50F4               	movf	prodh,w,c
  7447  014A76  0100               	movlb	0	; () banked
  7448  014A78  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7449  014A7A  0100               	movlb	0	; () banked
  7450  014A7C  51DE               	movf	_lBufferX& (0+255),w,b
  7451  014A7E  0D01               	mullw	1
  7452  014A80  50F3               	movf	prodl,w,c
  7453  014A82  0100               	movlb	0	; () banked
  7454  014A84  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7455  014A86  6ED9               	movwf	fsr2l,c
  7456  014A88  50F4               	movf	prodh,w,c
  7457  014A8A  0100               	movlb	0	; () banked
  7458  014A8C  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7459  014A8E  6EDA               	movwf	fsr2h,c
  7460  014A90  50DF               	movf	indf2,w,c
  7461  014A92  B4D8               	btfsc	status,2,c
  7462  014A94  D01F               	goto	l985
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  7466  014A96  0E01               	movlw	1
  7467  014A98  0100               	movlb	0	; () banked
  7468  014A9A  6FFF               	movwf	_change& (0+255),b
  7469                           
  7470                           ; BSR set to: 0
  7471  014A9C  0100               	movlb	0	; () banked
  7472  014A9E  51DD               	movf	_lBufferY& (0+255),w,b
  7473  014AA0  0D14               	mullw	20
  7474  014AA2  0EC8               	movlw	low _lBuffer
  7475  014AA4  0100               	movlb	0	; () banked
  7476  014AA6  6F60               	movwf	??_Console_NewLine& (0+255),b
  7477  014AA8  0E04               	movlw	high _lBuffer
  7478  014AAA  0100               	movlb	0	; () banked
  7479  014AAC  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7480  014AAE  50F3               	movf	prodl,w,c
  7481  014AB0  0100               	movlb	0	; () banked
  7482  014AB2  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7483  014AB4  50F4               	movf	prodh,w,c
  7484  014AB6  0100               	movlb	0	; () banked
  7485  014AB8  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7486  014ABA  0100               	movlb	0	; () banked
  7487  014ABC  51DE               	movf	_lBufferX& (0+255),w,b
  7488  014ABE  0D01               	mullw	1
  7489  014AC0  50F3               	movf	prodl,w,c
  7490  014AC2  0100               	movlb	0	; () banked
  7491  014AC4  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7492  014AC6  6ED9               	movwf	fsr2l,c
  7493  014AC8  50F4               	movf	prodh,w,c
  7494  014ACA  0100               	movlb	0	; () banked
  7495  014ACC  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7496  014ACE  6EDA               	movwf	fsr2h,c
  7497  014AD0  0E80               	movlw	128
  7498  014AD2  6EDF               	movwf	indf2,c
  7499  014AD4                     l985:
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;Console.c: 182: lBufferX ++;
  7503                           
  7504                           ; BSR set to: 0
  7505  014AD4  0100               	movlb	0	; () banked
  7506  014AD6  2BDE               	incf	_lBufferX& (0+255),f,b
  7507  014AD8                     l983:
  7508                           
  7509                           ; BSR set to: 0
  7510  014AD8  0E13               	movlw	19
  7511  014ADA  0100               	movlb	0	; () banked
  7512  014ADC  65DE               	cpfsgt	_lBufferX& (0+255),b
  7513  014ADE  D7BE               	goto	l984
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;Console.c: 183: }
  7517                           ;Console.c: 185: lBufferX = 0;
  7518                           
  7519                           ; BSR set to: 0
  7520  014AE0  0E00               	movlw	0
  7521  014AE2  0100               	movlb	0	; () banked
  7522  014AE4  6FDE               	movwf	_lBufferX& (0+255),b
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;Console.c: 186: lBufferY ++;
  7526  014AE6  0100               	movlb	0	; () banked
  7527  014AE8  2BDD               	incf	_lBufferY& (0+255),f,b
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;Console.c: 188: gCursor.y += 8;
  7531  014AEA  0E08               	movlw	8
  7532  014AEC  2649               	addwf	_gCursor+2,f,c
  7533  014AEE  0E00               	movlw	0
  7534  014AF0  224A               	addwfc	_gCursor+3,f,c
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;Console.c: 189: gCursor.x = 6;
  7538  014AF2  0E00               	movlw	0
  7539  014AF4  6E48               	movwf	_gCursor+1,c
  7540  014AF6  0E06               	movlw	6
  7541  014AF8  6E47               	movwf	_gCursor,c
  7542                           
  7543                           ; BSR set to: 0
  7544  014AFA  0012               	return		;funcret
  7545  014AFC                     __end_of_Console_NewLine:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           postdec1	equ	0xFE5
  7556                           fsr1h	equ	0xFE2
  7557                           fsr1l	equ	0xFE1
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _Console_FormFeed *****************
  7566 ;; Defined at:
  7567 ;;		line 192 in file "Library/Console.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  y               1    3[BANK0 ] unsigned char 
  7572 ;;  x               1    2[BANK0 ] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;Total ram usage:        4 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    7
  7589 ;; This function calls:
  7590 ;;		Nothing
  7591 ;; This function is called by:
  7592 ;;		_Console_IncrementCursor
  7593 ;;		_Console_PrintChar
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text22
  7598  014CC0                     __ptext22:
  7599                           	opt stack 0
  7600  014CC0                     _Console_FormFeed:
  7601                           	opt stack 18
  7602                           
  7603                           ;Console.c: 195: lBufferX = 0;
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;incstack = 0
  7607  014CC0  0E00               	movlw	0
  7608  014CC2  0100               	movlb	0	; () banked
  7609  014CC4  6FDE               	movwf	_lBufferX& (0+255),b
  7610                           
  7611                           ;Console.c: 196: lBufferY = 0;
  7612  014CC6  0E00               	movlw	0
  7613  014CC8  0100               	movlb	0	; () banked
  7614  014CCA  6FDD               	movwf	_lBufferY& (0+255),b
  7615                           
  7616                           ;Console.c: 197: UINT8 x, y;
  7617                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7618  014CCC  0E00               	movlw	0
  7619  014CCE  0100               	movlb	0	; () banked
  7620  014CD0  6F63               	movwf	Console_FormFeed@y& (0+255),b
  7621  014CD2                     l12163:
  7622                           
  7623                           ; BSR set to: 0
  7624  014CD2  0E0E               	movlw	14
  7625  014CD4  0100               	movlb	0	; () banked
  7626  014CD6  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  7627  014CD8  D001               	goto	l990
  7628  014CDA  D02D               	goto	u8820
  7629  014CDC                     l990:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7633                           
  7634                           ; BSR set to: 0
  7635  014CDC  0E00               	movlw	0
  7636  014CDE  0100               	movlb	0	; () banked
  7637  014CE0  6F62               	movwf	Console_FormFeed@x& (0+255),b
  7638  014CE2                     l12169:
  7639                           
  7640                           ; BSR set to: 0
  7641  014CE2  0E13               	movlw	19
  7642  014CE4  0100               	movlb	0	; () banked
  7643  014CE6  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  7644  014CE8  D001               	goto	l992
  7645  014CEA  D022               	goto	u8810
  7646  014CEC                     l992:
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7650                           
  7651                           ; BSR set to: 0
  7652  014CEC  0E01               	movlw	1
  7653  014CEE  0100               	movlb	0	; () banked
  7654  014CF0  6FFF               	movwf	_change& (0+255),b
  7655                           
  7656                           ; BSR set to: 0
  7657  014CF2  0100               	movlb	0	; () banked
  7658  014CF4  5163               	movf	Console_FormFeed@y& (0+255),w,b
  7659  014CF6  0D14               	mullw	20
  7660  014CF8  0EC8               	movlw	low _lBuffer
  7661  014CFA  0100               	movlb	0	; () banked
  7662  014CFC  6F60               	movwf	??_Console_FormFeed& (0+255),b
  7663  014CFE  0E04               	movlw	high _lBuffer
  7664  014D00  0100               	movlb	0	; () banked
  7665  014D02  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7666  014D04  50F3               	movf	prodl,w,c
  7667  014D06  0100               	movlb	0	; () banked
  7668  014D08  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  7669  014D0A  50F4               	movf	prodh,w,c
  7670  014D0C  0100               	movlb	0	; () banked
  7671  014D0E  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7672  014D10  0100               	movlb	0	; () banked
  7673  014D12  5162               	movf	Console_FormFeed@x& (0+255),w,b
  7674  014D14  0D01               	mullw	1
  7675  014D16  50F3               	movf	prodl,w,c
  7676  014D18  0100               	movlb	0	; () banked
  7677  014D1A  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  7678  014D1C  6ED9               	movwf	fsr2l,c
  7679  014D1E  50F4               	movf	prodh,w,c
  7680  014D20  0100               	movlb	0	; () banked
  7681  014D22  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7682  014D24  6EDA               	movwf	fsr2h,c
  7683  014D26  0E80               	movlw	128
  7684  014D28  6EDF               	movwf	indf2,c
  7685                           
  7686                           ; BSR set to: 0
  7687  014D2A  0100               	movlb	0	; () banked
  7688  014D2C  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  7689  014D2E  D7D9               	goto	l12169
  7690  014D30                     u8810:
  7691                           
  7692                           ; BSR set to: 0
  7693                           
  7694                           ; BSR set to: 0
  7695  014D30  0100               	movlb	0	; () banked
  7696  014D32  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  7697  014D34  D7CE               	goto	l12163
  7698  014D36                     u8820:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;Console.c: 204: clearall = 1;
  7702                           
  7703                           ; BSR set to: 0
  7704  014D36  0E01               	movlw	1
  7705  014D38  0100               	movlb	0	; () banked
  7706  014D3A  6FDF               	movwf	_clearall& (0+255),b
  7707                           
  7708                           ;Console.c: 205: gCursor.x = 6;
  7709  014D3C  0E00               	movlw	0
  7710  014D3E  6E48               	movwf	_gCursor+1,c
  7711  014D40  0E06               	movlw	6
  7712  014D42  6E47               	movwf	_gCursor,c
  7713                           
  7714                           ;Console.c: 206: gCursor.y = 6;
  7715  014D44  0E00               	movlw	0
  7716  014D46  6E4A               	movwf	_gCursor+3,c
  7717  014D48  0E06               	movlw	6
  7718  014D4A  6E49               	movwf	_gCursor+2,c
  7719                           
  7720                           ; BSR set to: 0
  7721  014D4C  0012               	return		;funcret
  7722  014D4E                     __end_of_Console_FormFeed:
  7723                           	opt stack 0
  7724                           tblptru	equ	0xFF8
  7725                           tblptrh	equ	0xFF7
  7726                           tblptrl	equ	0xFF6
  7727                           tablat	equ	0xFF5
  7728                           prodh	equ	0xFF4
  7729                           prodl	equ	0xFF3
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           postdec1	equ	0xFE5
  7733                           fsr1h	equ	0xFE2
  7734                           fsr1l	equ	0xFE1
  7735                           indf2	equ	0xFDF
  7736                           postinc2	equ	0xFDE
  7737                           postdec2	equ	0xFDD
  7738                           fsr2h	equ	0xFDA
  7739                           fsr2l	equ	0xFD9
  7740                           status	equ	0xFD8
  7741                           
  7742 ;; *************** function _Console_ResetCursor *****************
  7743 ;; Defined at:
  7744 ;;		line 297 in file "Library/Console.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;		None
  7747 ;; Auto vars:     Size  Location     Type
  7748 ;;		None
  7749 ;; Return value:  Size  Location     Type
  7750 ;;                  1    wreg      void 
  7751 ;; Registers used:
  7752 ;;		wreg, status,2
  7753 ;; Tracked objects:
  7754 ;;		On entry : 0/0
  7755 ;;		On exit  : 0/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;Total ram usage:        0 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    7
  7765 ;; This function calls:
  7766 ;;		Nothing
  7767 ;; This function is called by:
  7768 ;;		_Console_PrintChar
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text23
  7773  01624A                     __ptext23:
  7774                           	opt stack 0
  7775  01624A                     _Console_ResetCursor:
  7776                           	opt stack 20
  7777                           
  7778                           ;Console.c: 299: gCursor.x = 6;
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;incstack = 0
  7782  01624A  0E00               	movlw	0
  7783  01624C  6E48               	movwf	_gCursor+1,c
  7784  01624E  0E06               	movlw	6
  7785  016250  6E47               	movwf	_gCursor,c
  7786                           
  7787                           ;Console.c: 300: gCursor.y = 6;
  7788  016252  0E00               	movlw	0
  7789  016254  6E4A               	movwf	_gCursor+3,c
  7790  016256  0E06               	movlw	6
  7791  016258  6E49               	movwf	_gCursor+2,c
  7792                           
  7793                           ;Console.c: 303: lBufferX = 0;
  7794  01625A  0E00               	movlw	0
  7795  01625C  0100               	movlb	0	; () banked
  7796  01625E  6FDE               	movwf	_lBufferX& (0+255),b
  7797                           
  7798                           ;Console.c: 304: lBufferY = 0;
  7799  016260  0E00               	movlw	0
  7800  016262  0100               	movlb	0	; () banked
  7801  016264  6FDD               	movwf	_lBufferY& (0+255),b
  7802                           
  7803                           ; BSR set to: 0
  7804  016266  0012               	return		;funcret
  7805  016268                     __end_of_Console_ResetCursor:
  7806                           	opt stack 0
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           postinc0	equ	0xFEE
  7814                           wreg	equ	0xFE8
  7815                           postdec1	equ	0xFE5
  7816                           fsr1h	equ	0xFE2
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825 ;; *************** function _Console_Backspace *****************
  7826 ;; Defined at:
  7827 ;;		line 209 in file "Library/Console.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;Total ram usage:        0 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    8
  7848 ;; This function calls:
  7849 ;;		_Console_ClearCursor
  7850 ;; This function is called by:
  7851 ;;		_Console_PrintChar
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           	psect	text24
  7856  01581E                     __ptext24:
  7857                           	opt stack 0
  7858  01581E                     _Console_Backspace:
  7859                           	opt stack 19
  7860                           
  7861                           ;Console.c: 211: if (lBufferX > 0)
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;incstack = 0
  7865  01581E  0100               	movlb	0	; () banked
  7866  015820  51DE               	movf	_lBufferX& (0+255),w,b
  7867  015822  B4D8               	btfsc	status,2,c
  7868  015824  D007               	goto	l997
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;Console.c: 212: {
  7872                           ;Console.c: 213: gCursor.x -= 6;
  7873  015826  0EFA               	movlw	250
  7874  015828  2647               	addwf	_gCursor,f,c
  7875  01582A  0EFF               	movlw	255
  7876  01582C  2248               	addwfc	_gCursor+1,f,c
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;Console.c: 216: lBufferX --;
  7880  01582E  0100               	movlb	0	; () banked
  7881  015830  07DE               	decf	_lBufferX& (0+255),f,b
  7882                           
  7883                           ;Console.c: 218: }
  7884  015832  D020               	goto	l1000
  7885  015834                     l997:
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;Console.c: 219: else if (lBufferY > 0)
  7889                           
  7890                           ; BSR set to: 0
  7891  015834  0100               	movlb	0	; () banked
  7892  015836  51DD               	movf	_lBufferY& (0+255),w,b
  7893  015838  B4D8               	btfsc	status,2,c
  7894  01583A  D00E               	goto	l999
  7895                           
  7896                           ; BSR set to: 0
  7897                           ;Console.c: 220: {
  7898                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  7899  01583C  0E00               	movlw	0
  7900  01583E  6E48               	movwf	_gCursor+1,c
  7901  015840  0E72               	movlw	114
  7902  015842  6E47               	movwf	_gCursor,c
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;Console.c: 222: gCursor.y -= 8;
  7906  015844  0EF8               	movlw	248
  7907  015846  2649               	addwf	_gCursor+2,f,c
  7908  015848  0EFF               	movlw	255
  7909  01584A  224A               	addwfc	_gCursor+3,f,c
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  7913  01584C  0E13               	movlw	19
  7914  01584E  0100               	movlb	0	; () banked
  7915  015850  6FDE               	movwf	_lBufferX& (0+255),b
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;Console.c: 226: lBufferY --;
  7919  015852  0100               	movlb	0	; () banked
  7920  015854  07DD               	decf	_lBufferY& (0+255),f,b
  7921                           
  7922                           ;Console.c: 228: }
  7923  015856  D00E               	goto	l1000
  7924  015858                     l999:
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;Console.c: 229: else
  7928                           ;Console.c: 230: {
  7929                           ;Console.c: 231: gCursor.x = 6;
  7930                           
  7931                           ; BSR set to: 0
  7932  015858  0E00               	movlw	0
  7933  01585A  6E48               	movwf	_gCursor+1,c
  7934  01585C  0E06               	movlw	6
  7935  01585E  6E47               	movwf	_gCursor,c
  7936                           
  7937                           ;Console.c: 232: gCursor.y = 6;
  7938  015860  0E00               	movlw	0
  7939  015862  6E4A               	movwf	_gCursor+3,c
  7940  015864  0E06               	movlw	6
  7941  015866  6E49               	movwf	_gCursor+2,c
  7942                           
  7943                           ;Console.c: 235: lBufferX = 0;
  7944  015868  0E00               	movlw	0
  7945  01586A  0100               	movlb	0	; () banked
  7946  01586C  6FDE               	movwf	_lBufferX& (0+255),b
  7947                           
  7948                           ;Console.c: 236: lBufferY = 0;
  7949  01586E  0E00               	movlw	0
  7950  015870  0100               	movlb	0	; () banked
  7951  015872  6FDD               	movwf	_lBufferY& (0+255),b
  7952  015874                     l1000:
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;Console.c: 238: }
  7956                           ;Console.c: 240: Console_ClearCursor();
  7957                           
  7958                           ; BSR set to: 0
  7959                           
  7960                           ; BSR set to: 0
  7961  015874  EC9E  F0AE         	call	_Console_ClearCursor	;wreg free
  7962  015878  0012               	return		;funcret
  7963  01587A                     __end_of_Console_Backspace:
  7964                           	opt stack 0
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodh	equ	0xFF4
  7970                           prodl	equ	0xFF3
  7971                           postinc0	equ	0xFEE
  7972                           wreg	equ	0xFE8
  7973                           postdec1	equ	0xFE5
  7974                           fsr1h	equ	0xFE2
  7975                           fsr1l	equ	0xFE1
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           fsr2h	equ	0xFDA
  7980                           fsr2l	equ	0xFD9
  7981                           status	equ	0xFD8
  7982                           
  7983 ;; *************** function _Console_ClearCursor *****************
  7984 ;; Defined at:
  7985 ;;		line 308 in file "Library/Console.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;		None
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;		None
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  1    wreg      void 
  7992 ;; Registers used:
  7993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;Total ram usage:        2 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:    7
  8006 ;; This function calls:
  8007 ;;		Nothing
  8008 ;; This function is called by:
  8009 ;;		_Console_Backspace
  8010 ;;		_Console_Tab
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text25
  8015  015D3C                     __ptext25:
  8016                           	opt stack 0
  8017  015D3C                     _Console_ClearCursor:
  8018                           	opt stack 19
  8019                           
  8020                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8021                           
  8022                           ;incstack = 0
  8023  015D3C  0E01               	movlw	1
  8024  015D3E  0100               	movlb	0	; () banked
  8025  015D40  6FFF               	movwf	_change& (0+255),b
  8026                           
  8027                           ; BSR set to: 0
  8028  015D42  0100               	movlb	0	; () banked
  8029  015D44  51DD               	movf	_lBufferY& (0+255),w,b
  8030  015D46  0D14               	mullw	20
  8031  015D48  0EC8               	movlw	low _lBuffer
  8032  015D4A  0100               	movlb	0	; () banked
  8033  015D4C  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  8034  015D4E  0E04               	movlw	high _lBuffer
  8035  015D50  0100               	movlb	0	; () banked
  8036  015D52  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8037  015D54  50F3               	movf	prodl,w,c
  8038  015D56  0100               	movlb	0	; () banked
  8039  015D58  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  8040  015D5A  50F4               	movf	prodh,w,c
  8041  015D5C  0100               	movlb	0	; () banked
  8042  015D5E  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8043  015D60  0100               	movlb	0	; () banked
  8044  015D62  51DE               	movf	_lBufferX& (0+255),w,b
  8045  015D64  0D01               	mullw	1
  8046  015D66  50F3               	movf	prodl,w,c
  8047  015D68  0100               	movlb	0	; () banked
  8048  015D6A  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  8049  015D6C  6ED9               	movwf	fsr2l,c
  8050  015D6E  50F4               	movf	prodh,w,c
  8051  015D70  0100               	movlb	0	; () banked
  8052  015D72  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8053  015D74  6EDA               	movwf	fsr2h,c
  8054  015D76  0E80               	movlw	128
  8055  015D78  6EDF               	movwf	indf2,c
  8056                           
  8057                           ; BSR set to: 0
  8058  015D7A  0012               	return		;funcret
  8059  015D7C                     __end_of_Console_ClearCursor:
  8060                           	opt stack 0
  8061                           tblptru	equ	0xFF8
  8062                           tblptrh	equ	0xFF7
  8063                           tblptrl	equ	0xFF6
  8064                           tablat	equ	0xFF5
  8065                           prodh	equ	0xFF4
  8066                           prodl	equ	0xFF3
  8067                           postinc0	equ	0xFEE
  8068                           wreg	equ	0xFE8
  8069                           postdec1	equ	0xFE5
  8070                           fsr1h	equ	0xFE2
  8071                           fsr1l	equ	0xFE1
  8072                           indf2	equ	0xFDF
  8073                           postinc2	equ	0xFDE
  8074                           postdec2	equ	0xFDD
  8075                           fsr2h	equ	0xFDA
  8076                           fsr2l	equ	0xFD9
  8077                           status	equ	0xFD8
  8078                           
  8079 ;; *************** function _irobot_stop_motion *****************
  8080 ;; Defined at:
  8081 ;;		line 299 in file "Library/iRobotSerial.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  isScript        1    wreg     unsigned char 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;  isScript        1   25[BANK0 ] unsigned char 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;Total ram usage:        1 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    9
  8102 ;; This function calls:
  8103 ;;		_irobot_move
  8104 ;; This function is called by:
  8105 ;;		_irobot_rotate
  8106 ;;		_mode1
  8107 ;;		_mode2
  8108 ;;		_mode4
  8109 ;;		_irobot_move_to_simple
  8110 ;;		_irobot_rotate_to
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           	psect	text26
  8115  015BE4                     __ptext26:
  8116                           	opt stack 0
  8117  015BE4                     _irobot_stop_motion:
  8118                           	opt stack 20
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;incstack = 0
  8122                           ;irobot_stop_motion@isScript stored from wreg
  8123  015BE4  0100               	movlb	0	; () banked
  8124  015BE6  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
  8125                           
  8126                           ;iRobotSerial.c: 300: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  8127  015BE8  0100               	movlb	0	; () banked
  8128  015BEA  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
  8129  015BEC  0100               	movlb	0	; () banked
  8130  015BEE  B4D8               	btfsc	status,2,c
  8131  015BF0  D00E               	goto	l2168
  8132                           
  8133                           ; BSR set to: 0
  8134  015BF2  0E00               	movlw	0
  8135  015BF4  0100               	movlb	0	; () banked
  8136  015BF6  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8137  015BF8  0E00               	movlw	0
  8138  015BFA  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8139  015BFC  0E00               	movlw	0
  8140  015BFE  0100               	movlb	0	; () banked
  8141  015C00  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8142  015C02  0E00               	movlw	0
  8143  015C04  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8144  015C06  0E01               	movlw	1
  8145  015C08  ECE1  F0A1         	call	_irobot_move
  8146  015C0C  0012               	return	
  8147  015C0E                     l2168:
  8148  015C0E  0E00               	movlw	0
  8149  015C10  0100               	movlb	0	; () banked
  8150  015C12  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8151  015C14  0E00               	movlw	0
  8152  015C16  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8153  015C18  0E00               	movlw	0
  8154  015C1A  0100               	movlb	0	; () banked
  8155  015C1C  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8156  015C1E  0E00               	movlw	0
  8157  015C20  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8158  015C22  0E00               	movlw	0
  8159  015C24  ECE1  F0A1         	call	_irobot_move
  8160  015C28  0012               	return	
  8161  015C2A                     __end_of_irobot_stop_motion:
  8162                           	opt stack 0
  8163                           tblptru	equ	0xFF8
  8164                           tblptrh	equ	0xFF7
  8165                           tblptrl	equ	0xFF6
  8166                           tablat	equ	0xFF5
  8167                           prodh	equ	0xFF4
  8168                           prodl	equ	0xFF3
  8169                           postinc0	equ	0xFEE
  8170                           wreg	equ	0xFE8
  8171                           postdec1	equ	0xFE5
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _irobot_move *****************
  8182 ;; Defined at:
  8183 ;;		line 220 in file "Library/iRobotSerial.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  isScript        1    wreg     unsigned char 
  8186 ;;  moveSpeed       2   16[BANK0 ] short 
  8187 ;;  moveTurnRadi    2   18[BANK0 ] short 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  isScript        1   24[BANK0 ] unsigned char 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8199 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;Total ram usage:        9 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    8
  8206 ;; This function calls:
  8207 ;;		_eusart_putch
  8208 ;;		_load_iRScriptStack
  8209 ;;		_twos_complement_of
  8210 ;; This function is called by:
  8211 ;;		_irobot_rotate
  8212 ;;		_irobot_stop_motion
  8213 ;;		_irobot_move_straight
  8214 ;;		_irobot_move_to_simple
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text27
  8219  0143C2                     __ptext27:
  8220                           	opt stack 0
  8221  0143C2                     _irobot_move:
  8222                           	opt stack 20
  8223                           
  8224                           ;incstack = 0
  8225                           ;irobot_move@isScript stored from wreg
  8226  0143C2  0100               	movlb	0	; () banked
  8227  0143C4  6F78               	movwf	irobot_move@isScript& (0+255),b
  8228                           
  8229                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  8230  0143C6  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  8231  0143CA  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  8232  0143CE  EC5B  F0AE         	call	_twos_complement_of	;wreg free
  8233  0143D2  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
  8234  0143D6  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  8235                           
  8236                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  8237  0143DA  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  8238  0143DE  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  8239  0143E2  EC5B  F0AE         	call	_twos_complement_of	;wreg free
  8240  0143E6  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  8241  0143EA  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  8242                           
  8243                           ;iRobotSerial.c: 224: if (isScript) {
  8244  0143EE  0100               	movlb	0	; () banked
  8245  0143F0  5178               	movf	irobot_move@isScript& (0+255),w,b
  8246  0143F2  0100               	movlb	0	; () banked
  8247  0143F4  B4D8               	btfsc	status,2,c
  8248  0143F6  D029               	goto	l2139
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  8252                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  8253                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  8254  0143F8  0E00               	movlw	0
  8255  0143FA  0100               	movlb	0	; () banked
  8256  0143FC  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  8257  0143FE  0E89               	movlw	137
  8258  014400  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  8259  014402  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8260  014406  0100               	movlb	0	; () banked
  8261  014408  6B75               	clrf	(??_irobot_move+1)& (0+255),b
  8262  01440A  BF74               	btfsc	??_irobot_move& (0+255),7,b
  8263  01440C  6975               	setf	(??_irobot_move+1)& (0+255),b
  8264  01440E  0100               	movlb	0	; () banked
  8265  014410  5174               	movf	??_irobot_move& (0+255),w,b
  8266  014412  0100               	movlb	0	; () banked
  8267  014414  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8268  014416  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8269  014418  0100               	movlb	0	; () banked
  8270  01441A  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8271  01441C  0100               	movlb	0	; () banked
  8272  01441E  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8273  014420  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8274  014422  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8275  014426  0100               	movlb	0	; () banked
  8276  014428  6B77               	clrf	(??_irobot_move+3)& (0+255),b
  8277  01442A  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8278  01442C  6977               	setf	(??_irobot_move+3)& (0+255),b
  8279  01442E  0100               	movlb	0	; () banked
  8280  014430  5176               	movf	(??_irobot_move+2)& (0+255),w,b
  8281  014432  0100               	movlb	0	; () banked
  8282  014434  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8283  014436  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8284  014438  0100               	movlb	0	; () banked
  8285  01443A  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8286  01443C  0100               	movlb	0	; () banked
  8287  01443E  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8288  014440  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8289  014442  0E05               	movlw	5
  8290  014444  EC76  F0AA         	call	_load_iRScriptStack
  8291                           
  8292                           ;iRobotSerial.c: 228: }
  8293  014448  0012               	return	
  8294  01444A                     l2139:
  8295                           
  8296                           ;iRobotSerial.c: 229: else{
  8297                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  8298  01444A  0E89               	movlw	137
  8299  01444C  EC7F  F0B2         	call	_eusart_putch
  8300                           
  8301                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8302  014450  0100               	movlb	0	; () banked
  8303  014452  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8304  014454  EC7F  F0B2         	call	_eusart_putch
  8305                           
  8306                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  8307  014458  0100               	movlb	0	; () banked
  8308  01445A  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8309  01445C  EC7F  F0B2         	call	_eusart_putch
  8310                           
  8311                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8312  014460  0100               	movlb	0	; () banked
  8313  014462  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8314  014464  EC7F  F0B2         	call	_eusart_putch
  8315                           
  8316                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  8317  014468  0100               	movlb	0	; () banked
  8318  01446A  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8319  01446C  EC7F  F0B2         	call	_eusart_putch
  8320  014470  0012               	return	
  8321  014472                     __end_of_irobot_move:
  8322                           	opt stack 0
  8323                           tblptru	equ	0xFF8
  8324                           tblptrh	equ	0xFF7
  8325                           tblptrl	equ	0xFF6
  8326                           tablat	equ	0xFF5
  8327                           prodh	equ	0xFF4
  8328                           prodl	equ	0xFF3
  8329                           postinc0	equ	0xFEE
  8330                           wreg	equ	0xFE8
  8331                           postdec1	equ	0xFE5
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341 ;; *************** function _twos_complement_of *****************
  8342 ;; Defined at:
  8343 ;;		line 167 in file "Library/iRobotSerial.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;  complementVa    2    0[BANK0 ] short 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  2    0[BANK0 ] unsigned short 
  8350 ;; Registers used:
  8351 ;;		wreg, status,2, status,0
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;Total ram usage:        2 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    7
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		_irobot_move
  8368 ;;		_irobot_angle_wait
  8369 ;;		_irobot_distance_wait
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           	psect	text28
  8374  015CB6                     __ptext28:
  8375                           	opt stack 0
  8376  015CB6                     _twos_complement_of:
  8377                           	opt stack 20
  8378                           
  8379                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  8380                           
  8381                           ;incstack = 0
  8382  015CB6  0100               	movlb	0	; () banked
  8383  015CB8  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8384  015CBA  D01A               	goto	l2110
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8388  015CBC  0100               	movlb	0	; () banked
  8389  015CBE  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8390  015CC0  D007               	goto	u9440
  8391  015CC2  0100               	movlb	0	; () banked
  8392  015CC4  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8393  015CC6  E10A               	bnz	l2112
  8394  015CC8  0100               	movlb	0	; () banked
  8395  015CCA  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
  8396  015CCC  B0D8               	btfsc	status,0,c
  8397  015CCE  D006               	goto	l2112
  8398  015CD0                     u9440:
  8399                           
  8400                           ; BSR set to: 0
  8401  015CD0  0100               	movlb	0	; () banked
  8402  015CD2  6D60               	negf	twos_complement_of@complementValue& (0+255),b
  8403  015CD4  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8404  015CD6  B0D8               	btfsc	status,0,c
  8405  015CD8  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8406  015CDA  D004               	goto	l2114
  8407  015CDC                     l2112:
  8408                           
  8409                           ; BSR set to: 0
  8410  015CDC  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8411  015CE0  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8412  015CE4                     l2114:
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  8416                           
  8417                           ; BSR set to: 0
  8418  015CE4  0100               	movlb	0	; () banked
  8419  015CE6  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
  8420  015CE8  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8421                           
  8422                           ;iRobotSerial.c: 171: complementValue += 1;
  8423  015CEA  0100               	movlb	0	; () banked
  8424  015CEC  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8425  015CEE  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8426  015CF0                     l2110:
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;iRobotSerial.c: 172: }
  8430                           ;iRobotSerial.c: 173: return complementValue;
  8431                           
  8432                           ; BSR set to: 0
  8433  015CF0  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8434  015CF4  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8435  015CF8  0012               	return	
  8436  015CFA                     __end_of_twos_complement_of:
  8437                           	opt stack 0
  8438                           tblptru	equ	0xFF8
  8439                           tblptrh	equ	0xFF7
  8440                           tblptrl	equ	0xFF6
  8441                           tablat	equ	0xFF5
  8442                           prodh	equ	0xFF4
  8443                           prodl	equ	0xFF3
  8444                           postinc0	equ	0xFEE
  8445                           wreg	equ	0xFE8
  8446                           postdec1	equ	0xFE5
  8447                           fsr1h	equ	0xFE2
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           postdec2	equ	0xFDD
  8452                           fsr2h	equ	0xFDA
  8453                           fsr2l	equ	0xFD9
  8454                           status	equ	0xFD8
  8455                           
  8456 ;; *************** function _irobot_song_play *****************
  8457 ;; Defined at:
  8458 ;;		line 274 in file "Library/iRobotSerial.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;  songNumber      1    wreg     unsigned char 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, status,2, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;Total ram usage:        1 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    8
  8479 ;; This function calls:
  8480 ;;		_eusart_putch
  8481 ;; This function is called by:
  8482 ;;		_mode1
  8483 ;;		_mode2
  8484 ;;		_mode4
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text29
  8489  016484                     __ptext29:
  8490                           	opt stack 0
  8491  016484                     _irobot_song_play:
  8492                           	opt stack 21
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;incstack = 0
  8496                           ;irobot_song_play@songNumber stored from wreg
  8497  016484  0100               	movlb	0	; () banked
  8498  016486  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
  8499                           
  8500                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  8501  016488  0E8D               	movlw	141
  8502  01648A  EC7F  F0B2         	call	_eusart_putch
  8503                           
  8504                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  8505  01648E  0100               	movlb	0	; () banked
  8506  016490  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
  8507  016492  EC7F  F0B2         	call	_eusart_putch
  8508  016496  0012               	return		;funcret
  8509  016498                     __end_of_irobot_song_play:
  8510                           	opt stack 0
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           postinc0	equ	0xFEE
  8518                           wreg	equ	0xFE8
  8519                           postdec1	equ	0xFE5
  8520                           fsr1h	equ	0xFE2
  8521                           fsr1l	equ	0xFE1
  8522                           indf2	equ	0xFDF
  8523                           postinc2	equ	0xFDE
  8524                           postdec2	equ	0xFDD
  8525                           fsr2h	equ	0xFDA
  8526                           fsr2l	equ	0xFD9
  8527                           status	equ	0xFD8
  8528                           
  8529 ;; *************** function ___fltol *****************
  8530 ;; Defined at:
  8531 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;  f1              4   82[BANK0 ] void 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;  exp1            1   87[BANK0 ] unsigned char 
  8536 ;;  sign1           1   86[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  4   82[BANK0 ] long 
  8539 ;; Registers used:
  8540 ;;		wreg, status,2, status,0
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8546 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;Total ram usage:       10 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    7
  8553 ;; This function calls:
  8554 ;;		Nothing
  8555 ;; This function is called by:
  8556 ;;		_mode1
  8557 ;;		_mode4
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text30
  8562  01368C                     __ptext30:
  8563                           	opt stack 0
  8564  01368C                     ___fltol:
  8565                           	opt stack 22
  8566                           
  8567                           ;incstack = 0
  8568  01368C  0100               	movlb	0	; () banked
  8569  01368E  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8570  013690  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8571  013692  0100               	movlb	0	; () banked
  8572  013694  6FB7               	movwf	___fltol@exp1& (0+255),b
  8573  013696  0100               	movlb	0	; () banked
  8574  013698  51B7               	movf	___fltol@exp1& (0+255),w,b
  8575  01369A  A4D8               	btfss	status,2,c
  8576  01369C  D00A               	goto	l2659
  8577                           
  8578                           ; BSR set to: 0
  8579  01369E  0E00               	movlw	0
  8580  0136A0  0100               	movlb	0	; () banked
  8581  0136A2  6FB2               	movwf	?___fltol& (0+255),b
  8582  0136A4  0E00               	movlw	0
  8583  0136A6  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8584  0136A8  0E00               	movlw	0
  8585  0136AA  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8586  0136AC  0E00               	movlw	0
  8587  0136AE  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8588                           
  8589                           ; BSR set to: 0
  8590  0136B0  0012               	return	
  8591  0136B2                     l2659:
  8592                           
  8593                           ; BSR set to: 0
  8594                           
  8595                           ; BSR set to: 0
  8596  0136B2  C0B2  F100         	movff	___fltol@f1,??___fltol
  8597  0136B6  C0B3  F101         	movff	___fltol@f1+1,??___fltol+1
  8598  0136BA  C0B4  F102         	movff	___fltol@f1+2,??___fltol+2
  8599  0136BE  C0B5  F103         	movff	___fltol@f1+3,??___fltol+3
  8600  0136C2  0E20               	movlw	32
  8601  0136C4  D006               	goto	u11170
  8602  0136C6                     u11175:
  8603  0136C6  0101               	movlb	1	; () banked
  8604  0136C8  90D8               	bcf	status,0,c
  8605  0136CA  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  8606  0136CC  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  8607  0136CE  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  8608  0136D0  3300               	rrcf	??___fltol& (0+255),f,b
  8609  0136D2                     u11170:
  8610  0136D2  2EE8               	decfsz	wreg,f,c
  8611  0136D4  D7F8               	goto	u11175
  8612  0136D6  0101               	movlb	1	; () banked
  8613  0136D8  5100               	movf	??___fltol& (0+255),w,b
  8614  0136DA  0100               	movlb	0	; () banked
  8615  0136DC  6FB6               	movwf	___fltol@sign1& (0+255),b
  8616                           
  8617                           ; BSR set to: 0
  8618  0136DE  0100               	movlb	0	; () banked
  8619  0136E0  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
  8620                           
  8621                           ; BSR set to: 0
  8622  0136E2  0EFF               	movlw	255
  8623  0136E4  0100               	movlb	0	; () banked
  8624  0136E6  17B2               	andwf	___fltol@f1& (0+255),f,b
  8625  0136E8  0EFF               	movlw	255
  8626  0136EA  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8627  0136EC  0EFF               	movlw	255
  8628  0136EE  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8629  0136F0  0E00               	movlw	0
  8630  0136F2  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8631                           
  8632                           ; BSR set to: 0
  8633  0136F4  0E96               	movlw	150
  8634  0136F6  0100               	movlb	0	; () banked
  8635  0136F8  5FB7               	subwf	___fltol@exp1& (0+255),f,b
  8636                           
  8637                           ; BSR set to: 0
  8638  0136FA  0100               	movlb	0	; () banked
  8639  0136FC  AFB7               	btfss	___fltol@exp1& (0+255),7,b
  8640  0136FE  D01A               	goto	l2661
  8641                           
  8642                           ; BSR set to: 0
  8643  013700  0100               	movlb	0	; () banked
  8644  013702  51B7               	movf	___fltol@exp1& (0+255),w,b
  8645  013704  0A80               	xorlw	128
  8646  013706  0F97               	addlw	151
  8647  013708  B0D8               	btfsc	status,0,c
  8648  01370A  D00A               	goto	l2662
  8649                           
  8650                           ; BSR set to: 0
  8651  01370C  0E00               	movlw	0
  8652  01370E  0100               	movlb	0	; () banked
  8653  013710  6FB2               	movwf	?___fltol& (0+255),b
  8654  013712  0E00               	movlw	0
  8655  013714  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8656  013716  0E00               	movlw	0
  8657  013718  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8658  01371A  0E00               	movlw	0
  8659  01371C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8660                           
  8661                           ; BSR set to: 0
  8662  01371E  0012               	return	
  8663  013720                     l2662:
  8664                           
  8665                           ; BSR set to: 0
  8666                           
  8667                           ; BSR set to: 0
  8668                           
  8669                           ; BSR set to: 0
  8670  013720  0100               	movlb	0	; () banked
  8671  013722  90D8               	bcf	status,0,c
  8672  013724  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8673  013726  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8674  013728  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8675  01372A  33B2               	rrcf	___fltol@f1& (0+255),f,b
  8676                           
  8677                           ; BSR set to: 0
  8678  01372C  0100               	movlb	0	; () banked
  8679  01372E  3FB7               	incfsz	___fltol@exp1& (0+255),f,b
  8680  013730  D7F7               	goto	l2662
  8681                           
  8682                           ; BSR set to: 0
  8683  013732  D01B               	goto	u11210
  8684  013734                     l2661:
  8685                           
  8686                           ; BSR set to: 0
  8687                           
  8688                           ; BSR set to: 0
  8689  013734  0E1F               	movlw	31
  8690  013736  0100               	movlb	0	; () banked
  8691  013738  65B7               	cpfsgt	___fltol@exp1& (0+255),b
  8692  01373A  D012               	goto	l2667
  8693                           
  8694                           ; BSR set to: 0
  8695  01373C  0E00               	movlw	0
  8696  01373E  0100               	movlb	0	; () banked
  8697  013740  6FB2               	movwf	?___fltol& (0+255),b
  8698  013742  0E00               	movlw	0
  8699  013744  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8700  013746  0E00               	movlw	0
  8701  013748  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8702  01374A  0E00               	movlw	0
  8703  01374C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8704                           
  8705                           ; BSR set to: 0
  8706  01374E  0012               	return	
  8707  013750                     
  8708                           ; BSR set to: 0
  8709                           
  8710                           ; BSR set to: 0
  8711  013750  0100               	movlb	0	; () banked
  8712  013752  90D8               	bcf	status,0,c
  8713  013754  37B2               	rlcf	___fltol@f1& (0+255),f,b
  8714  013756  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8715  013758  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8716  01375A  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8717  01375C  0100               	movlb	0	; () banked
  8718  01375E  07B7               	decf	___fltol@exp1& (0+255),f,b
  8719  013760                     l2667:
  8720                           
  8721                           ; BSR set to: 0
  8722                           
  8723                           ; BSR set to: 0
  8724  013760  0100               	movlb	0	; () banked
  8725  013762  51B7               	movf	___fltol@exp1& (0+255),w,b
  8726  013764  0100               	movlb	0	; () banked
  8727  013766  A4D8               	btfss	status,2,c
  8728  013768  D7F3               	goto	l2668
  8729  01376A                     u11210:
  8730                           
  8731                           ; BSR set to: 0
  8732                           
  8733                           ; BSR set to: 0
  8734                           
  8735                           ; BSR set to: 0
  8736  01376A  0100               	movlb	0	; () banked
  8737  01376C  51B6               	movf	___fltol@sign1& (0+255),w,b
  8738  01376E  0100               	movlb	0	; () banked
  8739  013770  B4D8               	btfsc	status,2,c
  8740  013772  D009               	goto	l2670
  8741                           
  8742                           ; BSR set to: 0
  8743  013774  0100               	movlb	0	; () banked
  8744  013776  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
  8745  013778  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
  8746  01377A  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
  8747  01377C  6DB2               	negf	___fltol@f1& (0+255),b
  8748  01377E  0E00               	movlw	0
  8749  013780  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8750  013782  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8751  013784  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8752  013786                     l2670:
  8753                           
  8754                           ; BSR set to: 0
  8755                           
  8756                           ; BSR set to: 0
  8757  013786  C0B2  F0B2         	movff	___fltol@f1,?___fltol
  8758  01378A  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
  8759  01378E  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
  8760  013792  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
  8761  013796  0012               	return	
  8762  013798                     __end_of___fltol:
  8763                           	opt stack 0
  8764                           tblptru	equ	0xFF8
  8765                           tblptrh	equ	0xFF7
  8766                           tblptrl	equ	0xFF6
  8767                           tablat	equ	0xFF5
  8768                           prodh	equ	0xFF4
  8769                           prodl	equ	0xFF3
  8770                           postinc0	equ	0xFEE
  8771                           wreg	equ	0xFE8
  8772                           postdec1	equ	0xFE5
  8773                           fsr1h	equ	0xFE2
  8774                           fsr1l	equ	0xFE1
  8775                           indf2	equ	0xFDF
  8776                           postinc2	equ	0xFDE
  8777                           postdec2	equ	0xFDD
  8778                           fsr2h	equ	0xFDA
  8779                           fsr2l	equ	0xFD9
  8780                           status	equ	0xFD8
  8781                           
  8782 ;; *************** function _Motor_Speed *****************
  8783 ;; Defined at:
  8784 ;;		line 117 in file "Library/Motor.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8787 ;;		 -> Stepper(6), 
  8788 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  1    wreg      unsigned char 
  8793 ;; Registers used:
  8794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8800 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;Total ram usage:        4 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    9
  8807 ;; This function calls:
  8808 ;;		_Timer0_Init
  8809 ;; This function is called by:
  8810 ;;		_mode1
  8811 ;;		_mode4
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           	psect	text31
  8816  016122                     __ptext31:
  8817                           	opt stack 0
  8818  016122                     _Motor_Speed:
  8819                           	opt stack 20
  8820                           
  8821                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;incstack = 0
  8825  016122  0100               	movlb	0	; () banked
  8826  016124  EE20 F002          	lfsr	2,2
  8827  016128  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  8828  01612A  26D9               	addwf	fsr2l,f,c
  8829  01612C  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  8830  01612E  22DA               	addwfc	fsr2h,f,c
  8831  016130  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8832  016134  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;Motor.c: 120: Timer0_Init(pFrequency);
  8836  016138  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8837  01613C  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8838  016140  0100               	movlb	0	; () banked
  8839  016142  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8840  016144  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8841  016146  ECB6  F098         	call	_Timer0_Init	;wreg free
  8842  01614A  0012               	return	
  8843  01614C                     __end_of_Motor_Speed:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           postinc0	equ	0xFEE
  8852                           wreg	equ	0xFE8
  8853                           postdec1	equ	0xFE5
  8854                           fsr1h	equ	0xFE2
  8855                           fsr1l	equ	0xFE1
  8856                           indf2	equ	0xFDF
  8857                           postinc2	equ	0xFDE
  8858                           postdec2	equ	0xFDD
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function _Motor_Move *****************
  8864 ;; Defined at:
  8865 ;;		line 51 in file "Library/Motor.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  8868 ;;		 -> Stepper(6), 
  8869 ;;  pDelta          2    5[BANK0 ] short 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;		None
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      unsigned char 
  8874 ;; Registers used:
  8875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;Total ram usage:        6 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    8
  8888 ;; This function calls:
  8889 ;;		_Timer0_Start
  8890 ;; This function is called by:
  8891 ;;		_mode1
  8892 ;;		_mode4
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           	psect	text32
  8897  015F2A                     __ptext32:
  8898                           	opt stack 0
  8899  015F2A                     _Motor_Move:
  8900                           	opt stack 21
  8901                           
  8902                           ;Motor.c: 54: lMotor = pMotor;
  8903                           
  8904                           ;incstack = 0
  8905  015F2A  C063  F0CE         	movff	Motor_Move@pMotor,_lMotor
  8906  015F2E  C064  F0CF         	movff	Motor_Move@pMotor+1,_lMotor+1
  8907                           
  8908                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  8909  015F32  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8910  015F36  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8911  015F3A  50DE               	movf	postinc2,w,c
  8912  015F3C  10DE               	iorwf	postinc2,w,c
  8913  015F3E  A4D8               	btfss	status,2,c
  8914  015F40  0012               	return	
  8915                           
  8916                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  8917                           
  8918                           ;Motor.c: 59: return 0;
  8919                           ;	Return value of _Motor_Move is never used
  8920  015F42  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8921  015F46  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8922  015F4A  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  8923  015F4E  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  8924                           
  8925                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  8926  015F52  C0BB  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  8927  015F56  C0BC  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  8928  015F5A  C0BD  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  8929  015F5E  ECCF  F0B0         	call	_Timer0_Start	;wreg free
  8930  015F62  0012               	return	
  8931  015F64                     __end_of_Motor_Move:
  8932                           	opt stack 0
  8933                           tblptru	equ	0xFF8
  8934                           tblptrh	equ	0xFF7
  8935                           tblptrl	equ	0xFF6
  8936                           tablat	equ	0xFF5
  8937                           prodh	equ	0xFF4
  8938                           prodl	equ	0xFF3
  8939                           postinc0	equ	0xFEE
  8940                           wreg	equ	0xFE8
  8941                           postdec1	equ	0xFE5
  8942                           fsr1h	equ	0xFE2
  8943                           fsr1l	equ	0xFE1
  8944                           indf2	equ	0xFDF
  8945                           postinc2	equ	0xFDE
  8946                           postdec2	equ	0xFDD
  8947                           fsr2h	equ	0xFDA
  8948                           fsr2l	equ	0xFD9
  8949                           status	equ	0xFD8
  8950                           
  8951 ;; *************** function _Timer0_Start *****************
  8952 ;; Defined at:
  8953 ;;		line 75 in file "Library/Timer0.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  8956 ;;		 -> Absolute function(1), Motor_Step(1), 
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;		None
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      void 
  8961 ;; Registers used:
  8962 ;;		wreg, status,2, status,0
  8963 ;; Tracked objects:
  8964 ;;		On entry : 0/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8968 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;Total ram usage:        3 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    7
  8975 ;; This function calls:
  8976 ;;		Nothing
  8977 ;; This function is called by:
  8978 ;;		_Motor_Move
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text33
  8983  01619E                     __ptext33:
  8984                           	opt stack 0
  8985  01619E                     _Timer0_Start:
  8986                           	opt stack 21
  8987                           
  8988                           ;Timer0.c: 77: gISR = pFunction;
  8989                           
  8990                           ;incstack = 0
  8991  01619E  C060  F314         	movff	Timer0_Start@pFunction,_gISR
  8992  0161A2  C061  F315         	movff	Timer0_Start@pFunction+1,_gISR+1
  8993  0161A6  C062  F316         	movff	Timer0_Start@pFunction+2,_gISR+2
  8994                           
  8995                           ;Timer0.c: 78: TMR0 = COUNTER;
  8996  0161AA  C029  FFD6         	movff	_COUNTER,4054	;volatile
  8997  0161AE  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  8998                           
  8999                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9000  0161B2  50D5               	movf	4053,w,c	;volatile
  9001  0161B4  0100               	movlb	0	; () banked
  9002  0161B6  19DC               	xorwf	_INDEX& (0+255),w,b
  9003  0161B8  0BF8               	andlw	-8
  9004  0161BA  19DC               	xorwf	_INDEX& (0+255),w,b
  9005  0161BC  6ED5               	movwf	4053,c	;volatile
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9009  0161BE  94F2               	bcf	intcon,2,c	;volatile
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9013  0161C0  8AF2               	bsf	intcon,5,c	;volatile
  9014                           
  9015                           ; BSR set to: 0
  9016  0161C2  0012               	return		;funcret
  9017  0161C4                     __end_of_Timer0_Start:
  9018                           	opt stack 0
  9019                           tblptru	equ	0xFF8
  9020                           tblptrh	equ	0xFF7
  9021                           tblptrl	equ	0xFF6
  9022                           tablat	equ	0xFF5
  9023                           prodh	equ	0xFF4
  9024                           prodl	equ	0xFF3
  9025                           intcon	equ	0xFF2
  9026                           postinc0	equ	0xFEE
  9027                           wreg	equ	0xFE8
  9028                           postdec1	equ	0xFE5
  9029                           fsr1h	equ	0xFE2
  9030                           fsr1l	equ	0xFE1
  9031                           indf2	equ	0xFDF
  9032                           postinc2	equ	0xFDE
  9033                           postdec2	equ	0xFDD
  9034                           fsr2h	equ	0xFDA
  9035                           fsr2l	equ	0xFD9
  9036                           status	equ	0xFD8
  9037                           
  9038 ;; *************** function _HMI_Render *****************
  9039 ;; Defined at:
  9040 ;;		line 138 in file "HMI.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;		None
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  a               2    8[BANK0 ] unsigned short 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;Total ram usage:        2 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    9
  9061 ;; This function calls:
  9062 ;;		_OutSeg
  9063 ;; This function is called by:
  9064 ;;		_mode1
  9065 ;;		_mode4
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text34
  9070  015DBC                     __ptext34:
  9071                           	opt stack 0
  9072  015DBC                     _HMI_Render:
  9073                           	opt stack 20
  9074                           
  9075                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;incstack = 0
  9079  015DBC  0E00               	movlw	0
  9080  015DBE  0100               	movlb	0	; () banked
  9081  015DC0  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  9082  015DC2  0E00               	movlw	0
  9083  015DC4  6F68               	movwf	HMI_Render@a& (0+255),b
  9084  015DC6                     l14129:
  9085                           
  9086                           ; BSR set to: 0
  9087  015DC6  0100               	movlb	0	; () banked
  9088  015DC8  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  9089  015DCA  E116               	bnz	l1158
  9090  015DCC  0E08               	movlw	8
  9091  015DCE  0100               	movlb	0	; () banked
  9092  015DD0  5D68               	subwf	HMI_Render@a& (0+255),w,b
  9093  015DD2  B0D8               	btfsc	status,0,c
  9094  015DD4  0012               	return	
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9098                           
  9099                           ; BSR set to: 0
  9100                           
  9101                           ; BSR set to: 0
  9102  015DD6  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  9103  015DDA  0E29               	movlw	low _HMIBoard
  9104  015DDC  0100               	movlb	0	; () banked
  9105  015DDE  2568               	addwf	HMI_Render@a& (0+255),w,b
  9106  015DE0  6ED9               	movwf	fsr2l,c
  9107  015DE2  0E03               	movlw	high _HMIBoard
  9108  015DE4  0100               	movlb	0	; () banked
  9109  015DE6  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9110  015DE8  6EDA               	movwf	fsr2h,c
  9111  015DEA  50DF               	movf	indf2,w,c
  9112  015DEC  ECB7  F0A7         	call	_OutSeg
  9113  015DF0  0100               	movlb	0	; () banked
  9114  015DF2  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  9115  015DF4  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  9116  015DF6  D7E7               	goto	l14129
  9117  015DF8                     l1158:
  9118                           
  9119                           ; BSR set to: 0
  9120  015DF8  0012               	return		;funcret
  9121  015DFA                     __end_of_HMI_Render:
  9122                           	opt stack 0
  9123                           tblptru	equ	0xFF8
  9124                           tblptrh	equ	0xFF7
  9125                           tblptrl	equ	0xFF6
  9126                           tablat	equ	0xFF5
  9127                           prodh	equ	0xFF4
  9128                           prodl	equ	0xFF3
  9129                           intcon	equ	0xFF2
  9130                           postinc0	equ	0xFEE
  9131                           wreg	equ	0xFE8
  9132                           postdec1	equ	0xFE5
  9133                           fsr1h	equ	0xFE2
  9134                           fsr1l	equ	0xFE1
  9135                           indf2	equ	0xFDF
  9136                           postinc2	equ	0xFDE
  9137                           postdec2	equ	0xFDD
  9138                           fsr2h	equ	0xFDA
  9139                           fsr2l	equ	0xFD9
  9140                           status	equ	0xFD8
  9141                           
  9142 ;; *************** function _OutSeg *****************
  9143 ;; Defined at:
  9144 ;;		line 54 in file "HMI.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;  pInput          1    wreg     unsigned char 
  9147 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  pInput          1    6[BANK0 ] unsigned char 
  9150 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9151 ;; Return value:  Size  Location     Type
  9152 ;;                  1    wreg      void 
  9153 ;; Registers used:
  9154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;Total ram usage:        5 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:    8
  9167 ;; This function calls:
  9168 ;;		_SPI_Send
  9169 ;; This function is called by:
  9170 ;;		_HMI_Render
  9171 ;;		_HMI_GRender
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text35
  9176  014F6E                     __ptext35:
  9177                           	opt stack 0
  9178  014F6E                     _OutSeg:
  9179                           	opt stack 20
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;incstack = 0
  9183                           ;OutSeg@pInput stored from wreg
  9184  014F6E  0100               	movlb	0	; () banked
  9185  014F70  6F66               	movwf	OutSeg@pInput& (0+255),b
  9186                           
  9187                           ;HMI.c: 58: static UINT8 cur;
  9188                           ;HMI.c: 59: volatile UINT8 out;
  9189                           ;HMI.c: 60: static UINT8 segset;
  9190                           ;HMI.c: 61: static UINT8 a;
  9191                           ;HMI.c: 83: if (pSegment <= 8)
  9192  014F72  0E09               	movlw	9
  9193  014F74  0100               	movlb	0	; () banked
  9194  014F76  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  9195  014F78  0012               	return	
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;HMI.c: 84: {
  9199                           ;HMI.c: 85: cur = pInput;
  9200  014F7A  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9204  014F7E  0E00               	movlw	0
  9205  014F80  6E3D               	movwf	OutSeg@a,c
  9206  014F82                     l13537:
  9207                           
  9208                           ; BSR set to: 0
  9209  014F82  0E07               	movlw	7
  9210  014F84  643D               	cpfsgt	OutSeg@a,c
  9211  014F86  D001               	goto	l1146
  9212  014F88  D027               	goto	u10020
  9213  014F8A                     l1146:
  9214                           
  9215                           ;HMI.c: 87: {
  9216                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9217                           
  9218                           ; BSR set to: 0
  9219  014F8A  C03F  F064         	movff	OutSeg@cur,??_OutSeg
  9220  014F8E  0E01               	movlw	1
  9221  014F90  0100               	movlb	0	; () banked
  9222  014F92  1764               	andwf	??_OutSeg& (0+255),f,b
  9223  014F94  0E06               	movlw	6
  9224  014F96  0100               	movlb	0	; () banked
  9225  014F98  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  9226  014F9A                     u10015:
  9227  014F9A  0100               	movlb	0	; () banked
  9228  014F9C  90D8               	bcf	status,0,c
  9229  014F9E  3764               	rlcf	??_OutSeg& (0+255),f,b
  9230  014FA0  0100               	movlb	0	; () banked
  9231  014FA2  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9232  014FA4  D7FA               	goto	u10015
  9233  014FA6  0100               	movlb	0	; () banked
  9234  014FA8  5164               	movf	??_OutSeg& (0+255),w,b
  9235  014FAA  6E3E               	movwf	OutSeg@segset,c
  9236                           
  9237                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9238  014FAC  0100               	movlb	0	; () banked
  9239  014FAE  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  9240  014FB0  42E8               	rrncf	wreg,f,c
  9241  014FB2  0BF8               	andlw	248
  9242  014FB4  103D               	iorwf	OutSeg@a,w,c
  9243  014FB6  103E               	iorwf	OutSeg@segset,w,c
  9244  014FB8  0100               	movlb	0	; () banked
  9245  014FBA  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  9246                           
  9247                           ;HMI.c: 90: cur >>= 1;
  9248  014FBC  90D8               	bcf	status,0,c
  9249  014FBE  323F               	rrcf	OutSeg@cur,f,c
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9253  014FC0  0E63               	movlw	low _SPI1
  9254  014FC2  0100               	movlb	0	; () banked
  9255  014FC4  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9256  014FC6  0E03               	movlw	high _SPI1
  9257  014FC8  0100               	movlb	0	; () banked
  9258  014FCA  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9259  014FCC  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9260  014FD0  EC0A  F0AA         	call	_SPI_Send	;wreg free
  9261  014FD4  2A3D               	incf	OutSeg@a,f,c
  9262  014FD6  D7D5               	goto	l13537
  9263  014FD8                     u10020:
  9264                           
  9265                           ;HMI.c: 96: }
  9266                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9267  014FD8  0E63               	movlw	low _SPI1
  9268  014FDA  0100               	movlb	0	; () banked
  9269  014FDC  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9270  014FDE  0E03               	movlw	high _SPI1
  9271  014FE0  0100               	movlb	0	; () banked
  9272  014FE2  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9273  014FE4  0E00               	movlw	0
  9274  014FE6  0100               	movlb	0	; () banked
  9275  014FE8  6F62               	movwf	SPI_Send@pData& (0+255),b
  9276  014FEA  EC0A  F0AA         	call	_SPI_Send	;wreg free
  9277  014FEE  0012               	return	
  9278  014FF0                     __end_of_OutSeg:
  9279                           	opt stack 0
  9280                           tblptru	equ	0xFF8
  9281                           tblptrh	equ	0xFF7
  9282                           tblptrl	equ	0xFF6
  9283                           tablat	equ	0xFF5
  9284                           prodh	equ	0xFF4
  9285                           prodl	equ	0xFF3
  9286                           intcon	equ	0xFF2
  9287                           postinc0	equ	0xFEE
  9288                           wreg	equ	0xFE8
  9289                           postdec1	equ	0xFE5
  9290                           fsr1h	equ	0xFE2
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _Console_Render *****************
  9300 ;; Defined at:
  9301 ;;		line 377 in file "Library/Console.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  lCursor         4   38[BANK0 ] struct Point
  9306 ;;  y               1   43[BANK0 ] unsigned char 
  9307 ;;  x               1   42[BANK0 ] unsigned char 
  9308 ;;  temp            1   37[BANK0 ] unsigned char 
  9309 ;;  Temp            2    0        unsigned short 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  1    wreg      void 
  9312 ;; Registers used:
  9313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;Total ram usage:        9 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:   11
  9326 ;; This function calls:
  9327 ;;		_Console_MakeField
  9328 ;;		_LCD_DrawField
  9329 ;;		_LCD_FillRectangle
  9330 ;; This function is called by:
  9331 ;;		_mode1
  9332 ;;		_mode2
  9333 ;;		_mode4
  9334 ;;		_main
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text36
  9339  011F04                     __ptext36:
  9340                           	opt stack 0
  9341  011F04                     _Console_Render:
  9342                           	opt stack 18
  9343                           
  9344                           ;Console.c: 379: Colour Temp;
  9345                           ;Console.c: 380: if (change)
  9346                           
  9347                           ;incstack = 0
  9348  011F04  0100               	movlb	0	; () banked
  9349  011F06  51FF               	movf	_change& (0+255),w,b
  9350  011F08  B4D8               	btfsc	status,2,c
  9351  011F0A  0012               	return	
  9352                           
  9353                           ; BSR set to: 0
  9354                           ;Console.c: 381: {
  9355                           ;Console.c: 382: UINT8 x, y, temp;
  9356                           ;Console.c: 383: Point lCursor = {6,6};
  9357  011F0C  C3E3  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  9358  011F10  C3E4  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9359  011F14  C3E5  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9360  011F18  C3E6  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;Console.c: 385: if (clearall)
  9364  011F1C  0100               	movlb	0	; () banked
  9365  011F1E  51DF               	movf	_clearall& (0+255),w,b
  9366  011F20  B4D8               	btfsc	status,2,c
  9367  011F22  D005               	goto	l1056
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;Console.c: 386: {
  9371                           ;Console.c: 389: temp = lBufferY;
  9372  011F24  C0DD  F085         	movff	_lBufferY,Console_Render@temp
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9376  011F28  0E0F               	movlw	15
  9377  011F2A  0100               	movlb	0	; () banked
  9378  011F2C  6FDD               	movwf	_lBufferY& (0+255),b
  9379  011F2E                     l1056:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;Console.c: 391: }
  9383                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9384  011F2E  0E00               	movlw	0
  9385  011F30  0100               	movlb	0	; () banked
  9386  011F32  6F8B               	movwf	Console_Render@y& (0+255),b
  9387  011F34  D0DF               	goto	l1057
  9388  011F36                     
  9389                           ; BSR set to: 0
  9390                           ;Console.c: 394: {
  9391                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9392                           
  9393                           ; BSR set to: 0
  9394  011F36  0100               	movlb	0	; () banked
  9395  011F38  518B               	movf	Console_Render@y& (0+255),w,b
  9396  011F3A  0D02               	mullw	2
  9397  011F3C  0E00               	movlw	low _lCBuffer
  9398  011F3E  24F3               	addwf	prodl,w,c
  9399  011F40  6ED9               	movwf	fsr2l,c
  9400  011F42  0E04               	movlw	high _lCBuffer
  9401  011F44  20F4               	addwfc	prodh,w,c
  9402  011F46  6EDA               	movwf	fsr2h,c
  9403  011F48  CFDE F0FD          	movff	postinc2,_gForecolour
  9404  011F4C  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9405                           
  9406                           ; BSR set to: 0
  9407                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9408  011F50  0E00               	movlw	0
  9409  011F52  0100               	movlb	0	; () banked
  9410  011F54  6F8A               	movwf	Console_Render@x& (0+255),b
  9411  011F56                     l14075:
  9412                           
  9413                           ; BSR set to: 0
  9414  011F56  0E13               	movlw	19
  9415  011F58  0100               	movlb	0	; () banked
  9416  011F5A  658A               	cpfsgt	Console_Render@x& (0+255),b
  9417  011F5C  D001               	goto	l1059
  9418  011F5E  D0BE               	goto	u10870
  9419  011F60                     l1059:
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;Console.c: 397: {
  9423                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9424                           
  9425                           ; BSR set to: 0
  9426  011F60  0100               	movlb	0	; () banked
  9427  011F62  518B               	movf	Console_Render@y& (0+255),w,b
  9428  011F64  0D14               	mullw	20
  9429  011F66  0EC8               	movlw	low _lBuffer
  9430  011F68  0100               	movlb	0	; () banked
  9431  011F6A  6F83               	movwf	??_Console_Render& (0+255),b
  9432  011F6C  0E04               	movlw	high _lBuffer
  9433  011F6E  0100               	movlb	0	; () banked
  9434  011F70  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9435  011F72  50F3               	movf	prodl,w,c
  9436  011F74  0100               	movlb	0	; () banked
  9437  011F76  2783               	addwf	??_Console_Render& (0+255),f,b
  9438  011F78  50F4               	movf	prodh,w,c
  9439  011F7A  0100               	movlb	0	; () banked
  9440  011F7C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9441  011F7E  0100               	movlb	0	; () banked
  9442  011F80  518A               	movf	Console_Render@x& (0+255),w,b
  9443  011F82  0D01               	mullw	1
  9444  011F84  50F3               	movf	prodl,w,c
  9445  011F86  0100               	movlb	0	; () banked
  9446  011F88  2583               	addwf	??_Console_Render& (0+255),w,b
  9447  011F8A  6ED9               	movwf	fsr2l,c
  9448  011F8C  50F4               	movf	prodh,w,c
  9449  011F8E  0100               	movlb	0	; () banked
  9450  011F90  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9451  011F92  6EDA               	movwf	fsr2h,c
  9452  011F94  AEDF               	btfss	indf2,7,c
  9453  011F96  D09A               	goto	l1063
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;Console.c: 399: {
  9457                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9458  011F98  0100               	movlb	0	; () banked
  9459  011F9A  518B               	movf	Console_Render@y& (0+255),w,b
  9460  011F9C  0D14               	mullw	20
  9461  011F9E  0EC8               	movlw	low _lBuffer
  9462  011FA0  0100               	movlb	0	; () banked
  9463  011FA2  6F83               	movwf	??_Console_Render& (0+255),b
  9464  011FA4  0E04               	movlw	high _lBuffer
  9465  011FA6  0100               	movlb	0	; () banked
  9466  011FA8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9467  011FAA  50F3               	movf	prodl,w,c
  9468  011FAC  0100               	movlb	0	; () banked
  9469  011FAE  2783               	addwf	??_Console_Render& (0+255),f,b
  9470  011FB0  50F4               	movf	prodh,w,c
  9471  011FB2  0100               	movlb	0	; () banked
  9472  011FB4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9473  011FB6  0100               	movlb	0	; () banked
  9474  011FB8  518A               	movf	Console_Render@x& (0+255),w,b
  9475  011FBA  0D01               	mullw	1
  9476  011FBC  50F3               	movf	prodl,w,c
  9477  011FBE  0100               	movlb	0	; () banked
  9478  011FC0  2583               	addwf	??_Console_Render& (0+255),w,b
  9479  011FC2  6ED9               	movwf	fsr2l,c
  9480  011FC4  50F4               	movf	prodh,w,c
  9481  011FC6  0100               	movlb	0	; () banked
  9482  011FC8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9483  011FCA  6EDA               	movwf	fsr2h,c
  9484  011FCC  0E7F               	movlw	127
  9485  011FCE  16DF               	andwf	indf2,f,c
  9486                           
  9487                           ;Console.c: 401: if (lBuffer[y][x])
  9488  011FD0  0100               	movlb	0	; () banked
  9489  011FD2  518B               	movf	Console_Render@y& (0+255),w,b
  9490  011FD4  0D14               	mullw	20
  9491  011FD6  0EC8               	movlw	low _lBuffer
  9492  011FD8  0100               	movlb	0	; () banked
  9493  011FDA  6F83               	movwf	??_Console_Render& (0+255),b
  9494  011FDC  0E04               	movlw	high _lBuffer
  9495  011FDE  0100               	movlb	0	; () banked
  9496  011FE0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9497  011FE2  50F3               	movf	prodl,w,c
  9498  011FE4  0100               	movlb	0	; () banked
  9499  011FE6  2783               	addwf	??_Console_Render& (0+255),f,b
  9500  011FE8  50F4               	movf	prodh,w,c
  9501  011FEA  0100               	movlb	0	; () banked
  9502  011FEC  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9503  011FEE  0100               	movlb	0	; () banked
  9504  011FF0  518A               	movf	Console_Render@x& (0+255),w,b
  9505  011FF2  0D01               	mullw	1
  9506  011FF4  50F3               	movf	prodl,w,c
  9507  011FF6  0100               	movlb	0	; () banked
  9508  011FF8  2583               	addwf	??_Console_Render& (0+255),w,b
  9509  011FFA  6ED9               	movwf	fsr2l,c
  9510  011FFC  50F4               	movf	prodh,w,c
  9511  011FFE  0100               	movlb	0	; () banked
  9512  012000  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9513  012002  6EDA               	movwf	fsr2h,c
  9514  012004  50DF               	movf	indf2,w,c
  9515  012006  B4D8               	btfsc	status,2,c
  9516  012008  D04A               	goto	l1062
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;Console.c: 402: {
  9520                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9521  01200A  C0D2  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9522  01200E  C0D3  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9523  012012  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9524  012016  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9525  01201A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9526  01201E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9527  012022  C3EB  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9528  012026  C3EC  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9529  01202A  C3ED  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9530  01202E  C3EE  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9531  012032  ECEA  F0A8         	call	_LCD_FillRectangle	;wreg free
  9532                           
  9533                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9534  012036  0100               	movlb	0	; () banked
  9535  012038  518B               	movf	Console_Render@y& (0+255),w,b
  9536  01203A  0D14               	mullw	20
  9537  01203C  0EC8               	movlw	low _lBuffer
  9538  01203E  0100               	movlb	0	; () banked
  9539  012040  6F83               	movwf	??_Console_Render& (0+255),b
  9540  012042  0E04               	movlw	high _lBuffer
  9541  012044  0100               	movlb	0	; () banked
  9542  012046  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9543  012048  50F3               	movf	prodl,w,c
  9544  01204A  0100               	movlb	0	; () banked
  9545  01204C  2783               	addwf	??_Console_Render& (0+255),f,b
  9546  01204E  50F4               	movf	prodh,w,c
  9547  012050  0100               	movlb	0	; () banked
  9548  012052  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9549  012054  0100               	movlb	0	; () banked
  9550  012056  518A               	movf	Console_Render@x& (0+255),w,b
  9551  012058  0D01               	mullw	1
  9552  01205A  50F3               	movf	prodl,w,c
  9553  01205C  0100               	movlb	0	; () banked
  9554  01205E  2583               	addwf	??_Console_Render& (0+255),w,b
  9555  012060  6ED9               	movwf	fsr2l,c
  9556  012062  50F4               	movf	prodh,w,c
  9557  012064  0100               	movlb	0	; () banked
  9558  012066  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9559  012068  6EDA               	movwf	fsr2h,c
  9560  01206A  50DF               	movf	indf2,w,c
  9561  01206C  ECE1  F09E         	call	_Console_MakeField
  9562  012070  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  9563  012074  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9564  012078  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9565  01207C  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9566  012080  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9567  012084  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9568  012088  C3EB  F078         	movff	_gCharSize,LCD_DrawField@pSize
  9569  01208C  C3EC  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9570  012090  C3ED  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9571  012094  C3EE  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9572  012098  ECDB  F0A4         	call	_LCD_DrawField	;wreg free
  9573                           
  9574                           ;Console.c: 405: }
  9575  01209C  D017               	goto	l1063
  9576  01209E                     l1062:
  9577                           
  9578                           ;Console.c: 406: else
  9579                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9580  01209E  0E00               	movlw	0
  9581  0120A0  0100               	movlb	0	; () banked
  9582  0120A2  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9583  0120A4  0E00               	movlw	0
  9584  0120A6  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9585  0120A8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9586  0120AC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9587  0120B0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9588  0120B4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9589  0120B8  C3EB  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9590  0120BC  C3EC  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9591  0120C0  C3ED  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9592  0120C4  C3EE  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9593  0120C8  ECEA  F0A8         	call	_LCD_FillRectangle	;wreg free
  9594  0120CC                     l1063:
  9595                           
  9596                           ;Console.c: 408: }
  9597                           ;Console.c: 409: lCursor.x += (5 + 1);
  9598  0120CC  0E06               	movlw	6
  9599  0120CE  0100               	movlb	0	; () banked
  9600  0120D0  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  9601  0120D2  0E00               	movlw	0
  9602  0120D4  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9603                           
  9604                           ; BSR set to: 0
  9605  0120D6  0100               	movlb	0	; () banked
  9606  0120D8  2B8A               	incf	Console_Render@x& (0+255),f,b
  9607  0120DA  D73D               	goto	l14075
  9608  0120DC                     u10870:
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;Console.c: 410: }
  9612                           ;Console.c: 411: lCursor.y += (7 + 1);
  9613                           
  9614                           ; BSR set to: 0
  9615  0120DC  0E08               	movlw	8
  9616  0120DE  0100               	movlb	0	; () banked
  9617  0120E0  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9618  0120E2  0E00               	movlw	0
  9619  0120E4  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;Console.c: 412: lCursor.x = 6;
  9623  0120E6  0E00               	movlw	0
  9624  0120E8  0100               	movlb	0	; () banked
  9625  0120EA  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9626  0120EC  0E06               	movlw	6
  9627  0120EE  6F86               	movwf	Console_Render@lCursor& (0+255),b
  9628                           
  9629                           ; BSR set to: 0
  9630  0120F0  0100               	movlb	0	; () banked
  9631  0120F2  2B8B               	incf	Console_Render@y& (0+255),f,b
  9632  0120F4                     l1057:
  9633                           
  9634                           ; BSR set to: 0
  9635                           
  9636                           ; BSR set to: 0
  9637  0120F4  0100               	movlb	0	; () banked
  9638  0120F6  518B               	movf	Console_Render@y& (0+255),w,b
  9639  0120F8  0100               	movlb	0	; () banked
  9640  0120FA  5DDD               	subwf	_lBufferY& (0+255),w,b
  9641  0120FC  B0D8               	btfsc	status,0,c
  9642  0120FE  D71B               	goto	l1058
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;Console.c: 413: }
  9646                           ;Console.c: 415: if (clearall)
  9647                           
  9648                           ; BSR set to: 0
  9649  012100  0100               	movlb	0	; () banked
  9650  012102  51DF               	movf	_clearall& (0+255),w,b
  9651  012104  B4D8               	btfsc	status,2,c
  9652  012106  0012               	return	
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;Console.c: 416: {
  9656                           ;Console.c: 417: clearall = 0;
  9657  012108  0E00               	movlw	0
  9658  01210A  0100               	movlb	0	; () banked
  9659  01210C  6FDF               	movwf	_clearall& (0+255),b
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;Console.c: 418: lBufferY = temp;
  9663  01210E  C085  F0DD         	movff	Console_Render@temp,_lBufferY
  9664                           
  9665                           ; BSR set to: 0
  9666  012112  0012               	return	
  9667  012114                     __end_of_Console_Render:
  9668                           	opt stack 0
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           postinc0	equ	0xFEE
  9677                           wreg	equ	0xFE8
  9678                           postdec1	equ	0xFE5
  9679                           fsr1h	equ	0xFE2
  9680                           fsr1l	equ	0xFE1
  9681                           indf2	equ	0xFDF
  9682                           postinc2	equ	0xFDE
  9683                           postdec2	equ	0xFDD
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _LCD_FillRectangle *****************
  9689 ;; Defined at:
  9690 ;;		line 318 in file "Library/LCD.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  pColour         2    9[BANK0 ] unsigned short 
  9693 ;;  pPoint          4   11[BANK0 ] struct Point
  9694 ;;  pSize           4   15[BANK0 ] struct Point
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;  j               1   22[BANK0 ] unsigned char 
  9697 ;;  i               1   21[BANK0 ] unsigned char 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;                  1    wreg      void 
  9700 ;; Registers used:
  9701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9707 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;Total ram usage:       14 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:   10
  9714 ;; This function calls:
  9715 ;;		_LCD_Word_Write
  9716 ;;		_Set_Addr_Window
  9717 ;; This function is called by:
  9718 ;;		_Console_Render
  9719 ;;		_Console_ClearLine
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text37
  9724  0151D4                     __ptext37:
  9725                           	opt stack 0
  9726  0151D4                     _LCD_FillRectangle:
  9727                           	opt stack 18
  9728                           
  9729                           ;LCD.c: 320: UINT8 i = 0x00;
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;incstack = 0
  9733  0151D4  0E00               	movlw	0
  9734  0151D6  0100               	movlb	0	; () banked
  9735  0151D8  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  9736                           
  9737                           ;LCD.c: 321: UINT8 j = 0x00;
  9738  0151DA  0E00               	movlw	0
  9739  0151DC  0100               	movlb	0	; () banked
  9740  0151DE  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9744  0151E0  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9745  0151E4  0100               	movlb	0	; () banked
  9746  0151E6  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9747  0151E8  0100               	movlb	0	; () banked
  9748  0151EA  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  9749  0151EC  0100               	movlb	0	; () banked
  9750  0151EE  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  9751  0151F0  0100               	movlb	0	; () banked
  9752  0151F2  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  9753  0151F4  0100               	movlb	0	; () banked
  9754  0151F6  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9755  0151F8  0100               	movlb	0	; () banked
  9756  0151FA  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  9757  0151FC  0100               	movlb	0	; () banked
  9758  0151FE  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  9759  015200  0100               	movlb	0	; () banked
  9760  015202  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  9761  015204  0100               	movlb	0	; () banked
  9762  015206  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  9763  015208  0100               	movlb	0	; () banked
  9764  01520A  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9765  01520C  0100               	movlb	0	; () banked
  9766  01520E  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9767  015210  ECE5  F0A2         	call	_Set_Addr_Window
  9768                           
  9769                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  9770  015214  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  9771  015218                     l13407:
  9772  015218  0100               	movlb	0	; () banked
  9773  01521A  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  9774  01521C  0100               	movlb	0	; () banked
  9775  01521E  B4D8               	btfsc	status,2,c
  9776  015220  0012               	return	
  9777                           
  9778                           ; BSR set to: 0
  9779                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  9780                           
  9781                           ; BSR set to: 0
  9782  015222  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  9783  015226                     l13411:
  9784                           
  9785                           ; BSR set to: 0
  9786  015226  0100               	movlb	0	; () banked
  9787  015228  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
  9788  01522A  0100               	movlb	0	; () banked
  9789  01522C  B4D8               	btfsc	status,2,c
  9790  01522E  D009               	goto	u9890
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;LCD.c: 333: LCD_Word_Write(pColour);
  9794                           
  9795                           ; BSR set to: 0
  9796                           
  9797                           ; BSR set to: 0
  9798  015230  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  9799  015234  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  9800  015238  EC43  F0B1         	call	_LCD_Word_Write	;wreg free
  9801  01523C  0100               	movlb	0	; () banked
  9802  01523E  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
  9803  015240  D7F2               	goto	l13411
  9804  015242                     u9890:
  9805                           
  9806                           ; BSR set to: 0
  9807                           
  9808                           ; BSR set to: 0
  9809  015242  0100               	movlb	0	; () banked
  9810  015244  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
  9811  015246  D7E8               	goto	l13407
  9812  015248                     __end_of_LCD_FillRectangle:
  9813                           	opt stack 0
  9814                           tblptru	equ	0xFF8
  9815                           tblptrh	equ	0xFF7
  9816                           tblptrl	equ	0xFF6
  9817                           tablat	equ	0xFF5
  9818                           prodh	equ	0xFF4
  9819                           prodl	equ	0xFF3
  9820                           intcon	equ	0xFF2
  9821                           postinc0	equ	0xFEE
  9822                           wreg	equ	0xFE8
  9823                           postdec1	equ	0xFE5
  9824                           fsr1h	equ	0xFE2
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           fsr2h	equ	0xFDA
  9830                           fsr2l	equ	0xFD9
  9831                           status	equ	0xFD8
  9832                           
  9833 ;; *************** function _LCD_DrawField *****************
  9834 ;; Defined at:
  9835 ;;		line 393 in file "Library/LCD.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  9838 ;;		 -> Console_MakeField@Fill(70), 
  9839 ;;  pPoint          4   20[BANK0 ] struct Point
  9840 ;;  pSize           4   24[BANK0 ] struct Point
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  count           2   30[BANK0 ] unsigned short 
  9843 ;;  i               1   34[BANK0 ] unsigned char 
  9844 ;;  ymax            1   33[BANK0 ] unsigned char 
  9845 ;;  xmax            1   32[BANK0 ] unsigned char 
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  1    wreg      void 
  9848 ;; Registers used:
  9849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9855 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;Total ram usage:       17 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:   10
  9862 ;; This function calls:
  9863 ;;		_LCD_Word_Write
  9864 ;;		_Set_Addr_Window
  9865 ;;		___wmul
  9866 ;; This function is called by:
  9867 ;;		_Console_Render
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text38
  9872  0149B6                     __ptext38:
  9873                           	opt stack 0
  9874  0149B6                     _LCD_DrawField:
  9875                           	opt stack 18
  9876                           
  9877                           ;LCD.c: 396: UINT8 i = 0x00;
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;incstack = 0
  9881  0149B6  0E00               	movlw	0
  9882  0149B8  0100               	movlb	0	; () banked
  9883  0149BA  6F82               	movwf	LCD_DrawField@i& (0+255),b
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
  9887  0149BC  0100               	movlb	0	; () banked
  9888  0149BE  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  9889  0149C0  0100               	movlb	0	; () banked
  9890  0149C2  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
  9891  0149C4  0100               	movlb	0	; () banked
  9892  0149C6  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
  9896  0149C8  0100               	movlb	0	; () banked
  9897  0149CA  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
  9898  0149CC  0100               	movlb	0	; () banked
  9899  0149CE  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
  9900  0149D0  0100               	movlb	0	; () banked
  9901  0149D2  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
  9902                           
  9903                           ; BSR set to: 0
  9904                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
  9905  0149D4  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
  9906  0149D8  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
  9907  0149DC  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
  9908  0149E0  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
  9909  0149E4  ECB2  F0AF         	call	___wmul	;wreg free
  9910  0149E8  C060  F07E         	movff	?___wmul,LCD_DrawField@count
  9911  0149EC  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
  9912                           
  9913                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
  9914  0149F0  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
  9915  0149F4  0100               	movlb	0	; () banked
  9916  0149F6  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
  9917  0149F8  0100               	movlb	0	; () banked
  9918  0149FA  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9919  0149FC  0100               	movlb	0	; () banked
  9920  0149FE  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
  9921  014A00  0100               	movlb	0	; () banked
  9922  014A02  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9923  014A04  0100               	movlb	0	; () banked
  9924  014A06  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  9925  014A08  ECE5  F0A2         	call	_Set_Addr_Window
  9926                           
  9927                           ;LCD.c: 403: for(i = 0; i < count; i++)
  9928  014A0C  0E00               	movlw	0
  9929  014A0E  0100               	movlb	0	; () banked
  9930  014A10  6F82               	movwf	LCD_DrawField@i& (0+255),b
  9931  014A12  D013               	goto	l183
  9932  014A14                     
  9933                           ; BSR set to: 0
  9934                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
  9935                           
  9936                           ; BSR set to: 0
  9937  014A14  0100               	movlb	0	; () banked
  9938  014A16  5182               	movf	LCD_DrawField@i& (0+255),w,b
  9939  014A18  0D02               	mullw	2
  9940  014A1A  50F3               	movf	prodl,w,c
  9941  014A1C  0100               	movlb	0	; () banked
  9942  014A1E  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
  9943  014A20  6ED9               	movwf	fsr2l,c
  9944  014A22  50F4               	movf	prodh,w,c
  9945  014A24  0100               	movlb	0	; () banked
  9946  014A26  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
  9947  014A28  6EDA               	movwf	fsr2h,c
  9948  014A2A  CFDE F065          	movff	postinc2,LCD_Word_Write@value
  9949  014A2E  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
  9950  014A32  EC43  F0B1         	call	_LCD_Word_Write	;wreg free
  9951  014A36  0100               	movlb	0	; () banked
  9952  014A38  2B82               	incf	LCD_DrawField@i& (0+255),f,b
  9953  014A3A                     l183:
  9954                           
  9955                           ; BSR set to: 0
  9956                           
  9957                           ; BSR set to: 0
  9958  014A3A  0100               	movlb	0	; () banked
  9959  014A3C  5182               	movf	LCD_DrawField@i& (0+255),w,b
  9960  014A3E  0100               	movlb	0	; () banked
  9961  014A40  6F7C               	movwf	??_LCD_DrawField& (0+255),b
  9962  014A42  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
  9963  014A44  0100               	movlb	0	; () banked
  9964  014A46  517E               	movf	LCD_DrawField@count& (0+255),w,b
  9965  014A48  0100               	movlb	0	; () banked
  9966  014A4A  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
  9967  014A4C  0100               	movlb	0	; () banked
  9968  014A4E  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
  9969  014A50  0100               	movlb	0	; () banked
  9970  014A52  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
  9971  014A54  B0D8               	btfsc	status,0,c
  9972  014A56  0012               	return	
  9973  014A58  D7DD               	goto	l184
  9974  014A5A                     __end_of_LCD_DrawField:
  9975                           	opt stack 0
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           postdec1	equ	0xFE5
  9986                           fsr1h	equ	0xFE2
  9987                           fsr1l	equ	0xFE1
  9988                           indf2	equ	0xFDF
  9989                           postinc2	equ	0xFDE
  9990                           postdec2	equ	0xFDD
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function ___wmul *****************
  9996 ;; Defined at:
  9997 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10000 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  product         2    4[BANK0 ] unsigned int 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  2    0[BANK0 ] unsigned int 
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0, prodl, prodh
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;Total ram usage:        6 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    7
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_LCD_DrawField
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           	psect	text39
 10027  015F64                     __ptext39:
 10028                           	opt stack 0
 10029  015F64                     ___wmul:
 10030                           	opt stack 20
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;incstack = 0
 10034  015F64  0100               	movlb	0	; () banked
 10035  015F66  5160               	movf	___wmul@multiplier& (0+255),w,b
 10036  015F68  0100               	movlb	0	; () banked
 10037  015F6A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10038  015F6C  CFF3 F064          	movff	prodl,___wmul@product
 10039  015F70  CFF4 F065          	movff	prodh,___wmul@product+1
 10040  015F74  0100               	movlb	0	; () banked
 10041  015F76  5160               	movf	___wmul@multiplier& (0+255),w,b
 10042  015F78  0100               	movlb	0	; () banked
 10043  015F7A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10044  015F7C  50F3               	movf	prodl,w,c
 10045  015F7E  0100               	movlb	0	; () banked
 10046  015F80  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10047  015F82  0100               	movlb	0	; () banked
 10048  015F84  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10049  015F86  0100               	movlb	0	; () banked
 10050  015F88  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10051  015F8A  50F3               	movf	prodl,w,c
 10052  015F8C  0100               	movlb	0	; () banked
 10053  015F8E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10054                           
 10055                           ; BSR set to: 0
 10056  015F90  C064  F060         	movff	___wmul@product,?___wmul
 10057  015F94  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10058  015F98  0012               	return	
 10059  015F9A                     __end_of___wmul:
 10060                           	opt stack 0
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           intcon	equ	0xFF2
 10068                           postinc0	equ	0xFEE
 10069                           wreg	equ	0xFE8
 10070                           postdec1	equ	0xFE5
 10071                           fsr1h	equ	0xFE2
 10072                           fsr1l	equ	0xFE1
 10073                           indf2	equ	0xFDF
 10074                           postinc2	equ	0xFDE
 10075                           postdec2	equ	0xFDD
 10076                           fsr2h	equ	0xFDA
 10077                           fsr2l	equ	0xFD9
 10078                           status	equ	0xFD8
 10079                           
 10080 ;; *************** function _Console_MakeField *****************
 10081 ;; Defined at:
 10082 ;;		line 435 in file "Library/Console.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;  pInput          1    wreg     unsigned char 
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;  pInput          1   11[BANK0 ] unsigned char 
 10087 ;;  y               1   17[BANK0 ] unsigned char 
 10088 ;;  x               1   16[BANK0 ] unsigned char 
 10089 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10090 ;;		 -> Font5x7(480), 
 10091 ;;  Index           2    9[BANK0 ] unsigned short 
 10092 ;; Return value:  Size  Location     Type
 10093 ;;                  2    5[BANK0 ] PTR unsigned short 
 10094 ;; Registers used:
 10095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10101 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;Total ram usage:       13 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    8
 10108 ;; This function calls:
 10109 ;;		_Byte_GetBit
 10110 ;; This function is called by:
 10111 ;;		_Console_Render
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           	psect	text40
 10116  013DC2                     __ptext40:
 10117                           	opt stack 0
 10118  013DC2                     _Console_MakeField:
 10119                           	opt stack 20
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;incstack = 0
 10123                           ;Console_MakeField@pInput stored from wreg
 10124  013DC2  0100               	movlb	0	; () banked
 10125  013DC4  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 10126                           
 10127                           ;Console.c: 437: static Colour Fill[7][5];
 10128                           ;Console.c: 438: pInput -= 32;
 10129  013DC6  0E20               	movlw	32
 10130  013DC8  0100               	movlb	0	; () banked
 10131  013DCA  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10135  013DCC  0100               	movlb	0	; () banked
 10136  013DCE  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 10137  013DD0  0D05               	mullw	5
 10138  013DD2  CFF3 F069          	movff	prodl,Console_MakeField@Index
 10139  013DD6  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10143  013DDA  0E73               	movlw	low _Font5x7
 10144  013DDC  0100               	movlb	0	; () banked
 10145  013DDE  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 10146  013DE0  0100               	movlb	0	; () banked
 10147  013DE2  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 10148  013DE4  0EFD               	movlw	high _Font5x7
 10149  013DE6  0100               	movlb	0	; () banked
 10150  013DE8  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10151  013DEA  0100               	movlb	0	; () banked
 10152  013DEC  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10156  013DEE  0E00               	movlw	0
 10157  013DF0  0100               	movlb	0	; () banked
 10158  013DF2  6F70               	movwf	Console_MakeField@x& (0+255),b
 10159  013DF4                     l13501:
 10160                           
 10161                           ; BSR set to: 0
 10162  013DF4  0E04               	movlw	4
 10163  013DF6  0100               	movlb	0	; () banked
 10164  013DF8  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 10165  013DFA  D001               	goto	l1077
 10166  013DFC  D043               	goto	u9980
 10167  013DFE                     l1077:
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;Console.c: 444: {
 10171                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10172                           
 10173                           ; BSR set to: 0
 10174  013DFE  0E00               	movlw	0
 10175  013E00  0100               	movlb	0	; () banked
 10176  013E02  6F71               	movwf	Console_MakeField@y& (0+255),b
 10177  013E04                     l13507:
 10178                           
 10179                           ; BSR set to: 0
 10180  013E04  0E06               	movlw	6
 10181  013E06  0100               	movlb	0	; () banked
 10182  013E08  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 10183  013E0A  D001               	goto	l1079
 10184  013E0C  D035               	goto	u9970
 10185  013E0E                     l1079:
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10189                           
 10190                           ; BSR set to: 0
 10191  013E0E  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10192  013E12  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10193  013E16  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10194  013E1A  ECE8  F0AF         	call	_Byte_GetBit	;wreg free
 10195  013E1E  0900               	iorlw	0
 10196  013E20  A4D8               	btfss	status,2,c
 10197  013E22  D005               	goto	l1082
 10198  013E24  C0D2  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 10199  013E28  C0D3  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10200  013E2C  D004               	goto	l1084
 10201  013E2E                     l1082:
 10202  013E2E  C0FD  F06E         	movff	_gForecolour,_Console_MakeField$10974
 10203  013E32  C0FE  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10204  013E36                     l1084:
 10205  013E36  0100               	movlb	0	; () banked
 10206  013E38  5171               	movf	Console_MakeField@y& (0+255),w,b
 10207  013E3A  0D0A               	mullw	10
 10208  013E3C  0E82               	movlw	low Console_MakeField@Fill
 10209  013E3E  0100               	movlb	0	; () banked
 10210  013E40  6F67               	movwf	??_Console_MakeField& (0+255),b
 10211  013E42  0E04               	movlw	high Console_MakeField@Fill
 10212  013E44  0100               	movlb	0	; () banked
 10213  013E46  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 10214  013E48  50F3               	movf	prodl,w,c
 10215  013E4A  0100               	movlb	0	; () banked
 10216  013E4C  2767               	addwf	??_Console_MakeField& (0+255),f,b
 10217  013E4E  50F4               	movf	prodh,w,c
 10218  013E50  0100               	movlb	0	; () banked
 10219  013E52  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10220  013E54  0100               	movlb	0	; () banked
 10221  013E56  5170               	movf	Console_MakeField@x& (0+255),w,b
 10222  013E58  0D02               	mullw	2
 10223  013E5A  50F3               	movf	prodl,w,c
 10224  013E5C  0100               	movlb	0	; () banked
 10225  013E5E  2567               	addwf	??_Console_MakeField& (0+255),w,b
 10226  013E60  6ED9               	movwf	fsr2l,c
 10227  013E62  50F4               	movf	prodh,w,c
 10228  013E64  0100               	movlb	0	; () banked
 10229  013E66  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10230  013E68  6EDA               	movwf	fsr2h,c
 10231  013E6A  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 10232  013E6E  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10233                           
 10234                           ; BSR set to: 0
 10235  013E72  0100               	movlb	0	; () banked
 10236  013E74  2B71               	incf	Console_MakeField@y& (0+255),f,b
 10237  013E76  D7C6               	goto	l13507
 10238  013E78                     u9970:
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;Console.c: 447: Column += 1;
 10242                           
 10243                           ; BSR set to: 0
 10244  013E78  0100               	movlb	0	; () banked
 10245  013E7A  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 10246  013E7C  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10247  013E7E  0100               	movlb	0	; () banked
 10248  013E80  2B70               	incf	Console_MakeField@x& (0+255),f,b
 10249  013E82  D7B8               	goto	l13501
 10250  013E84                     u9980:
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;Console.c: 448: }
 10254                           ;Console.c: 449: return (ColourPtr)Fill;
 10255                           
 10256                           ; BSR set to: 0
 10257  013E84  0E82               	movlw	low Console_MakeField@Fill
 10258  013E86  0100               	movlb	0	; () banked
 10259  013E88  6F65               	movwf	?_Console_MakeField& (0+255),b
 10260  013E8A  0E04               	movlw	high Console_MakeField@Fill
 10261  013E8C  0100               	movlb	0	; () banked
 10262  013E8E  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 10263  013E90  0012               	return	
 10264  013E92                     __end_of_Console_MakeField:
 10265                           	opt stack 0
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           postinc0	equ	0xFEE
 10274                           wreg	equ	0xFE8
 10275                           postdec1	equ	0xFE5
 10276                           fsr1h	equ	0xFE2
 10277                           fsr1l	equ	0xFE1
 10278                           indf2	equ	0xFDF
 10279                           postinc2	equ	0xFDE
 10280                           postdec2	equ	0xFDD
 10281                           fsr2h	equ	0xFDA
 10282                           fsr2l	equ	0xFD9
 10283                           status	equ	0xFD8
 10284                           
 10285 ;; *************** function _Byte_GetBit *****************
 10286 ;; Defined at:
 10287 ;;		line 38 in file "Library/Types.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10290 ;;		 -> Font5x7(480), 
 10291 ;;  pBit            1    2[BANK0 ] unsigned char 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  Output          1    4[BANK0 ] unsigned char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;                  1    wreg      unsigned char 
 10296 ;; Registers used:
 10297 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10303 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;Total ram usage:        5 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    7
 10310 ;; This function calls:
 10311 ;;		Nothing
 10312 ;; This function is called by:
 10313 ;;		_Console_MakeField
 10314 ;;		_Word_GetBit
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           	psect	text41
 10319  015FD0                     __ptext41:
 10320                           	opt stack 0
 10321  015FD0                     _Byte_GetBit:
 10322                           	opt stack 20
 10323                           
 10324                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;incstack = 0
 10328  015FD0  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10329  015FD4  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10330  015FD8                     	if	0	;tblptru may be non-zero
 10331  015FD8                     	endif
 10332  015FD8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10333  015FD8  0E00               	movlw	low (__mediumconst shr (0+16))
 10334  015FDA  6EF8               	movwf	tblptru,c
 10335  015FDC                     	endif
 10336  015FDC  0008               	tblrd		*
 10337  015FDE  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 10338                           
 10339                           ;Types.c: 42: Output >>= pBit;
 10340  015FE2  0100               	movlb	0	; () banked
 10341  015FE4  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 10342  015FE6  0100               	movlb	0	; () banked
 10343  015FE8  6F63               	movwf	??_Byte_GetBit& (0+255),b
 10344  015FEA  D003               	goto	u9580
 10345  015FEC                     u9585:
 10346  015FEC  0100               	movlb	0	; () banked
 10347  015FEE  90D8               	bcf	status,0,c
 10348  015FF0  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10349  015FF2                     u9580:
 10350  015FF2  0100               	movlb	0	; () banked
 10351  015FF4  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 10352  015FF6  D7FA               	goto	u9585
 10353                           
 10354                           ;Types.c: 43: Output &= 1;
 10355  015FF8  0E01               	movlw	1
 10356  015FFA  0100               	movlb	0	; () banked
 10357  015FFC  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 10358                           
 10359                           ; BSR set to: 0
 10360                           ;Types.c: 44: return Output;
 10361  015FFE  0100               	movlb	0	; () banked
 10362  016000  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 10363  016002  0012               	return	
 10364  016004                     __end_of_Byte_GetBit:
 10365                           	opt stack 0
 10366                           tblptru	equ	0xFF8
 10367                           tblptrh	equ	0xFF7
 10368                           tblptrl	equ	0xFF6
 10369                           tablat	equ	0xFF5
 10370                           prodh	equ	0xFF4
 10371                           prodl	equ	0xFF3
 10372                           intcon	equ	0xFF2
 10373                           postinc0	equ	0xFEE
 10374                           wreg	equ	0xFE8
 10375                           postdec1	equ	0xFE5
 10376                           fsr1h	equ	0xFE2
 10377                           fsr1l	equ	0xFE1
 10378                           indf2	equ	0xFDF
 10379                           postinc2	equ	0xFDE
 10380                           postdec2	equ	0xFDD
 10381                           fsr2h	equ	0xFDA
 10382                           fsr2l	equ	0xFD9
 10383                           status	equ	0xFD8
 10384                           
 10385 ;; *************** function _ADC_Voltage *****************
 10386 ;; Defined at:
 10387 ;;		line 259 in file "Library/ADC.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 10390 ;;		 -> ADC_AN0(5), 
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;  output          4   78[BANK0 ] float 
 10393 ;;  ref             4   74[BANK0 ] const float 
 10394 ;;  max             4   70[BANK0 ] const float 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  4   64[BANK0 ] float 
 10397 ;; Registers used:
 10398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;Total ram usage:       18 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    8
 10411 ;; This function calls:
 10412 ;;		___fldiv
 10413 ;;		___flmul
 10414 ;;		___xxtofl
 10415 ;; This function is called by:
 10416 ;;		_mode1
 10417 ;;		_mode4
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           	psect	text42
 10422  013A68                     __ptext42:
 10423                           	opt stack 0
 10424  013A68                     _ADC_Voltage:
 10425                           	opt stack 21
 10426                           
 10427                           ;ADC.c: 261: const float max = 1024;
 10428                           
 10429                           ; BSR set to: 0
 10430                           ;incstack = 0
 10431  013A68  0E00               	movlw	0
 10432  013A6A  0100               	movlb	0	; () banked
 10433  013A6C  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 10434  013A6E  0E00               	movlw	0
 10435  013A70  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10436  013A72  0E80               	movlw	128
 10437  013A74  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10438  013A76  0E44               	movlw	68
 10439  013A78  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10440                           
 10441                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10442  013A7A  0E33               	movlw	51
 10443  013A7C  0100               	movlb	0	; () banked
 10444  013A7E  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 10445  013A80  0E33               	movlw	51
 10446  013A82  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10447  013A84  0E53               	movlw	83
 10448  013A86  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10449  013A88  0E40               	movlw	64
 10450  013A8A  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;ADC.c: 263: float output = pInput->mValue;
 10454  013A8C  0100               	movlb	0	; () banked
 10455  013A8E  EE20 F001          	lfsr	2,1
 10456  013A92  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 10457  013A94  26D9               	addwf	fsr2l,f,c
 10458  013A96  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10459  013A98  22DA               	addwfc	fsr2h,f,c
 10460  013A9A  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 10461  013A9E  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 10462  013AA2  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 10463  013AA6  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10464  013AAA  0100               	movlb	0	; () banked
 10465  013AAC  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 10466  013AAE  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 10467  013AB0  0E00               	movlw	0
 10468  013AB2  EC87  F091         	call	___xxtofl
 10469  013AB6  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 10470  013ABA  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10471  013ABE  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10472  013AC2  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10473                           
 10474                           ;ADC.c: 265: output /= max;
 10475  013AC6  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 10476  013ACA  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10477  013ACE  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10478  013AD2  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10479  013AD6  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 10480  013ADA  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10481  013ADE  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10482  013AE2  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10483  013AE6  EC6E  F086         	call	___fldiv	;wreg free
 10484  013AEA  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 10485  013AEE  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 10486  013AF2  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 10487  013AF6  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 10488                           
 10489                           ;ADC.c: 266: output *= ref;
 10490  013AFA  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 10491  013AFE  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 10492  013B02  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 10493  013B06  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 10494  013B0A  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 10495  013B0E  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10496  013B12  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10497  013B16  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10498  013B1A  EC00  F080         	call	___flmul	;wreg free
 10499  013B1E  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 10500  013B22  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 10501  013B26  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 10502  013B2A  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 10503                           
 10504                           ;ADC.c: 268: return output + (float)0.000;
 10505  013B2E  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 10506  013B32  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10507  013B36  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10508  013B3A  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10509  013B3E  0012               	return	
 10510  013B40                     __end_of_ADC_Voltage:
 10511                           	opt stack 0
 10512                           tblptru	equ	0xFF8
 10513                           tblptrh	equ	0xFF7
 10514                           tblptrl	equ	0xFF6
 10515                           tablat	equ	0xFF5
 10516                           prodh	equ	0xFF4
 10517                           prodl	equ	0xFF3
 10518                           intcon	equ	0xFF2
 10519                           postinc0	equ	0xFEE
 10520                           wreg	equ	0xFE8
 10521                           postdec1	equ	0xFE5
 10522                           fsr1h	equ	0xFE2
 10523                           fsr1l	equ	0xFE1
 10524                           indf2	equ	0xFDF
 10525                           postinc2	equ	0xFDE
 10526                           postdec2	equ	0xFDD
 10527                           fsr2h	equ	0xFDA
 10528                           fsr2l	equ	0xFD9
 10529                           status	equ	0xFD8
 10530                           
 10531 ;; *************** function ___xxtofl *****************
 10532 ;; Defined at:
 10533 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  sign            1    wreg     unsigned char 
 10536 ;;  val             4    0[BANK0 ] long 
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;  sign            1    8[BANK0 ] unsigned char 
 10539 ;;  arg             4   10[BANK0 ] unsigned long 
 10540 ;;  exp             1    9[BANK0 ] unsigned char 
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  4    0[BANK0 ] unsigned char 
 10543 ;; Registers used:
 10544 ;;		wreg, status,2, status,0
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10552 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10553 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10554 ;;Total ram usage:       14 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    7
 10557 ;; This function calls:
 10558 ;;		Nothing
 10559 ;; This function is called by:
 10560 ;;		_ADC_Voltage
 10561 ;;		_mode4
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           	psect	text43
 10566  01230E                     __ptext43:
 10567                           	opt stack 0
 10568  01230E                     ___xxtofl:
 10569                           	opt stack 22
 10570                           
 10571                           ;incstack = 0
 10572                           ;___xxtofl@sign stored from wreg
 10573  01230E  0100               	movlb	0	; () banked
 10574  012310  6F68               	movwf	___xxtofl@sign& (0+255),b
 10575  012312  0100               	movlb	0	; () banked
 10576  012314  5168               	movf	___xxtofl@sign& (0+255),w,b
 10577  012316  0100               	movlb	0	; () banked
 10578  012318  B4D8               	btfsc	status,2,c
 10579  01231A  D01E               	goto	l2983
 10580                           
 10581                           ; BSR set to: 0
 10582  01231C  0100               	movlb	0	; () banked
 10583  01231E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10584  012320  D01B               	goto	l2983
 10585                           
 10586                           ; BSR set to: 0
 10587  012322  C060  F064         	movff	___xxtofl@val,??___xxtofl
 10588  012326  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 10589  01232A  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 10590  01232E  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 10591  012332  0100               	movlb	0	; () banked
 10592  012334  1F64               	comf	??___xxtofl& (0+255),f,b
 10593  012336  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 10594  012338  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 10595  01233A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 10596  01233C  2B64               	incf	??___xxtofl& (0+255),f,b
 10597  01233E  0E00               	movlw	0
 10598  012340  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10599  012342  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10600  012344  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10601  012346  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 10602  01234A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 10603  01234E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 10604  012352  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 10605  012356  D008               	goto	l2984
 10606  012358                     l2983:
 10607                           
 10608                           ; BSR set to: 0
 10609  012358  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 10610  01235C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10611  012360  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10612  012364  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10613  012368                     l2984:
 10614                           
 10615                           ; BSR set to: 0
 10616                           
 10617                           ; BSR set to: 0
 10618  012368  0100               	movlb	0	; () banked
 10619  01236A  5160               	movf	___xxtofl@val& (0+255),w,b
 10620  01236C  0100               	movlb	0	; () banked
 10621  01236E  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10622  012370  0100               	movlb	0	; () banked
 10623  012372  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10624  012374  0100               	movlb	0	; () banked
 10625  012376  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10626  012378  A4D8               	btfss	status,2,c
 10627  01237A  D00A               	goto	l2985
 10628                           
 10629                           ; BSR set to: 0
 10630  01237C  0E00               	movlw	0
 10631  01237E  0100               	movlb	0	; () banked
 10632  012380  6F60               	movwf	?___xxtofl& (0+255),b
 10633  012382  0E00               	movlw	0
 10634  012384  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 10635  012386  0E00               	movlw	0
 10636  012388  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 10637  01238A  0E00               	movlw	0
 10638  01238C  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 10639                           
 10640                           ; BSR set to: 0
 10641  01238E  0012               	return	
 10642  012390                     l2985:
 10643                           
 10644                           ; BSR set to: 0
 10645                           
 10646                           ; BSR set to: 0
 10647  012390  0E96               	movlw	150
 10648  012392  0100               	movlb	0	; () banked
 10649  012394  6F69               	movwf	___xxtofl@exp& (0+255),b
 10650  012396  D008               	goto	l2987
 10651  012398                     
 10652                           ; BSR set to: 0
 10653                           
 10654                           ; BSR set to: 0
 10655  012398  0100               	movlb	0	; () banked
 10656  01239A  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10657  01239C  0100               	movlb	0	; () banked
 10658  01239E  90D8               	bcf	status,0,c
 10659  0123A0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10660  0123A2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10661  0123A4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10662  0123A6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10663  0123A8                     l2987:
 10664                           
 10665                           ; BSR set to: 0
 10666                           
 10667                           ; BSR set to: 0
 10668  0123A8  0E00               	movlw	0
 10669  0123AA  0100               	movlb	0	; () banked
 10670  0123AC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10671  0123AE  0100               	movlb	0	; () banked
 10672  0123B0  6F64               	movwf	??___xxtofl& (0+255),b
 10673  0123B2  0E00               	movlw	0
 10674  0123B4  0100               	movlb	0	; () banked
 10675  0123B6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10676  0123B8  0100               	movlb	0	; () banked
 10677  0123BA  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10678  0123BC  0E00               	movlw	0
 10679  0123BE  0100               	movlb	0	; () banked
 10680  0123C0  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10681  0123C2  0100               	movlb	0	; () banked
 10682  0123C4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10683  0123C6  0EFE               	movlw	254
 10684  0123C8  0100               	movlb	0	; () banked
 10685  0123CA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10686  0123CC  0100               	movlb	0	; () banked
 10687  0123CE  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10688  0123D0  0100               	movlb	0	; () banked
 10689  0123D2  5164               	movf	??___xxtofl& (0+255),w,b
 10690  0123D4  0100               	movlb	0	; () banked
 10691  0123D6  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10692  0123D8  0100               	movlb	0	; () banked
 10693  0123DA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10694  0123DC  0100               	movlb	0	; () banked
 10695  0123DE  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10696  0123E0  B4D8               	btfsc	status,2,c
 10697  0123E2  D010               	goto	l2990
 10698  0123E4  D7D9               	goto	l2988
 10699  0123E6                     
 10700                           ; BSR set to: 0
 10701                           
 10702                           ; BSR set to: 0
 10703  0123E6  0100               	movlb	0	; () banked
 10704  0123E8  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10705                           
 10706                           ; BSR set to: 0
 10707  0123EA  0E01               	movlw	1
 10708  0123EC  0100               	movlb	0	; () banked
 10709  0123EE  276A               	addwf	___xxtofl@arg& (0+255),f,b
 10710  0123F0  0E00               	movlw	0
 10711  0123F2  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 10712  0123F4  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 10713  0123F6  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 10714                           
 10715                           ; BSR set to: 0
 10716  0123F8  0100               	movlb	0	; () banked
 10717  0123FA  90D8               	bcf	status,0,c
 10718  0123FC  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10719  0123FE  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10720  012400  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10721  012402  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10722  012404                     l2990:
 10723                           
 10724                           ; BSR set to: 0
 10725  012404  0E00               	movlw	0
 10726  012406  0100               	movlb	0	; () banked
 10727  012408  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10728  01240A  0100               	movlb	0	; () banked
 10729  01240C  6F64               	movwf	??___xxtofl& (0+255),b
 10730  01240E  0E00               	movlw	0
 10731  012410  0100               	movlb	0	; () banked
 10732  012412  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10733  012414  0100               	movlb	0	; () banked
 10734  012416  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10735  012418  0E00               	movlw	0
 10736  01241A  0100               	movlb	0	; () banked
 10737  01241C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10738  01241E  0100               	movlb	0	; () banked
 10739  012420  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10740  012422  0EFF               	movlw	255
 10741  012424  0100               	movlb	0	; () banked
 10742  012426  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10743  012428  0100               	movlb	0	; () banked
 10744  01242A  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10745  01242C  0100               	movlb	0	; () banked
 10746  01242E  5164               	movf	??___xxtofl& (0+255),w,b
 10747  012430  0100               	movlb	0	; () banked
 10748  012432  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10749  012434  0100               	movlb	0	; () banked
 10750  012436  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10751  012438  0100               	movlb	0	; () banked
 10752  01243A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10753  01243C  B4D8               	btfsc	status,2,c
 10754  01243E  D009               	goto	l2993
 10755  012440  D7D2               	goto	l2991
 10756  012442                     
 10757                           ; BSR set to: 0
 10758                           
 10759                           ; BSR set to: 0
 10760  012442  0100               	movlb	0	; () banked
 10761  012444  0769               	decf	___xxtofl@exp& (0+255),f,b
 10762  012446  0100               	movlb	0	; () banked
 10763  012448  90D8               	bcf	status,0,c
 10764  01244A  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 10765  01244C  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 10766  01244E  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 10767  012450  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 10768  012452                     l2993:
 10769                           
 10770                           ; BSR set to: 0
 10771                           
 10772                           ; BSR set to: 0
 10773  012452  0100               	movlb	0	; () banked
 10774  012454  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 10775  012456  D004               	goto	u10690
 10776                           
 10777                           ; BSR set to: 0
 10778  012458  0E02               	movlw	2
 10779  01245A  0100               	movlb	0	; () banked
 10780  01245C  6169               	cpfslt	___xxtofl@exp& (0+255),b
 10781  01245E  D7F1               	goto	l2994
 10782  012460                     u10690:
 10783                           
 10784                           ; BSR set to: 0
 10785                           
 10786                           ; BSR set to: 0
 10787  012460  0100               	movlb	0	; () banked
 10788  012462  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 10789  012464  D009               	goto	l2998
 10790                           
 10791                           ; BSR set to: 0
 10792  012466  0EFF               	movlw	255
 10793  012468  0100               	movlb	0	; () banked
 10794  01246A  176A               	andwf	___xxtofl@arg& (0+255),f,b
 10795  01246C  0EFF               	movlw	255
 10796  01246E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 10797  012470  0E7F               	movlw	127
 10798  012472  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 10799  012474  0EFF               	movlw	255
 10800  012476  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 10801  012478                     l2998:
 10802                           
 10803                           ; BSR set to: 0
 10804  012478  0100               	movlb	0	; () banked
 10805  01247A  90D8               	bcf	status,0,c
 10806  01247C  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 10807  01247E  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 10808  012482  0100               	movlb	0	; () banked
 10809  012484  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 10810  012486  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 10811  012488  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 10812  01248A  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 10813  01248E  0100               	movlb	0	; () banked
 10814  012490  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 10815  012492  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 10816  012494  6B64               	clrf	??___xxtofl& (0+255),b
 10817  012496  0100               	movlb	0	; () banked
 10818  012498  5164               	movf	??___xxtofl& (0+255),w,b
 10819  01249A  0100               	movlb	0	; () banked
 10820  01249C  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 10821  01249E  0100               	movlb	0	; () banked
 10822  0124A0  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 10823  0124A2  0100               	movlb	0	; () banked
 10824  0124A4  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 10825  0124A6  0100               	movlb	0	; () banked
 10826  0124A8  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 10827  0124AA  0100               	movlb	0	; () banked
 10828  0124AC  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 10829  0124AE  0100               	movlb	0	; () banked
 10830  0124B0  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 10831  0124B2  0100               	movlb	0	; () banked
 10832  0124B4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 10833                           
 10834                           ; BSR set to: 0
 10835  0124B6  0100               	movlb	0	; () banked
 10836  0124B8  5168               	movf	___xxtofl@sign& (0+255),w,b
 10837  0124BA  0100               	movlb	0	; () banked
 10838  0124BC  B4D8               	btfsc	status,2,c
 10839  0124BE  D005               	goto	l2999
 10840                           
 10841                           ; BSR set to: 0
 10842  0124C0  0100               	movlb	0	; () banked
 10843  0124C2  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10844  0124C4  D002               	goto	l2999
 10845                           
 10846                           ; BSR set to: 0
 10847  0124C6  0100               	movlb	0	; () banked
 10848  0124C8  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 10849  0124CA                     l2999:
 10850                           
 10851                           ; BSR set to: 0
 10852                           
 10853                           ; BSR set to: 0
 10854  0124CA  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 10855  0124CE  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 10856  0124D2  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 10857  0124D6  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 10858  0124DA  0012               	return	
 10859  0124DC                     __end_of___xxtofl:
 10860                           	opt stack 0
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodh	equ	0xFF4
 10866                           prodl	equ	0xFF3
 10867                           intcon	equ	0xFF2
 10868                           postinc0	equ	0xFEE
 10869                           wreg	equ	0xFE8
 10870                           postdec1	equ	0xFE5
 10871                           fsr1h	equ	0xFE2
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           postdec2	equ	0xFDD
 10876                           fsr2h	equ	0xFDA
 10877                           fsr2l	equ	0xFD9
 10878                           status	equ	0xFD8
 10879                           
 10880 ;; *************** function ___flmul *****************
 10881 ;; Defined at:
 10882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;  b               4   39[BANK0 ] unsigned char 
 10885 ;;  a               4   43[BANK0 ] unsigned char 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;  prod            4   58[BANK0 ] struct .
 10888 ;;  grs             4   53[BANK0 ] unsigned long 
 10889 ;;  temp            2   62[BANK0 ] struct .
 10890 ;;  bexp            1   57[BANK0 ] unsigned char 
 10891 ;;  aexp            1   52[BANK0 ] unsigned char 
 10892 ;;  sign            1   51[BANK0 ] unsigned char 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  4   39[BANK0 ] unsigned char 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0, prodl, prodh
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10902 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;Total ram usage:       25 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    7
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		_ADC_Voltage
 10913 ;;		_mode4
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text44
 10918  010000                     __ptext44:
 10919                           	opt stack 0
 10920  010000                     ___flmul:
 10921                           	opt stack 22
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;incstack = 0
 10925  010000  0100               	movlb	0	; () banked
 10926  010002  518A               	movf	(___flmul@b+3)& (0+255),w,b
 10927  010004  0B80               	andlw	128
 10928  010006  0100               	movlb	0	; () banked
 10929  010008  6F93               	movwf	___flmul@sign& (0+255),b
 10930  01000A  0100               	movlb	0	; () banked
 10931  01000C  518A               	movf	(___flmul@b+3)& (0+255),w,b
 10932  01000E  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 10933  010010  0100               	movlb	0	; () banked
 10934  010012  6F99               	movwf	___flmul@bexp& (0+255),b
 10935                           
 10936                           ; BSR set to: 0
 10937  010014  0100               	movlb	0	; () banked
 10938  010016  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 10939  010018  D002               	goto	l2954
 10940                           
 10941                           ; BSR set to: 0
 10942  01001A  0100               	movlb	0	; () banked
 10943  01001C  8199               	bsf	___flmul@bexp& (0+255),0,b
 10944  01001E                     l2954:
 10945                           
 10946                           ; BSR set to: 0
 10947                           
 10948                           ; BSR set to: 0
 10949  01001E  0100               	movlb	0	; () banked
 10950  010020  5199               	movf	___flmul@bexp& (0+255),w,b
 10951  010022  0100               	movlb	0	; () banked
 10952  010024  B4D8               	btfsc	status,2,c
 10953  010026  D010               	goto	l2955
 10954                           
 10955                           ; BSR set to: 0
 10956  010028  0100               	movlb	0	; () banked
 10957  01002A  2999               	incf	___flmul@bexp& (0+255),w,b
 10958  01002C  A4D8               	btfss	status,2,c
 10959  01002E  D009               	goto	l2956
 10960                           
 10961                           ; BSR set to: 0
 10962  010030  0E00               	movlw	0
 10963  010032  0100               	movlb	0	; () banked
 10964  010034  6F87               	movwf	___flmul@b& (0+255),b
 10965  010036  0E00               	movlw	0
 10966  010038  6F88               	movwf	(___flmul@b+1)& (0+255),b
 10967  01003A  0E00               	movlw	0
 10968  01003C  6F89               	movwf	(___flmul@b+2)& (0+255),b
 10969  01003E  0E00               	movlw	0
 10970  010040  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 10971  010042                     l2956:
 10972                           
 10973                           ; BSR set to: 0
 10974                           
 10975                           ; BSR set to: 0
 10976  010042  0100               	movlb	0	; () banked
 10977  010044  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 10978  010046  D009               	goto	l2957
 10979  010048                     l2955:
 10980                           
 10981                           ; BSR set to: 0
 10982                           
 10983                           ; BSR set to: 0
 10984  010048  0E00               	movlw	0
 10985  01004A  0100               	movlb	0	; () banked
 10986  01004C  6F87               	movwf	___flmul@b& (0+255),b
 10987  01004E  0E00               	movlw	0
 10988  010050  6F88               	movwf	(___flmul@b+1)& (0+255),b
 10989  010052  0E00               	movlw	0
 10990  010054  6F89               	movwf	(___flmul@b+2)& (0+255),b
 10991  010056  0E00               	movlw	0
 10992  010058  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 10993  01005A                     l2957:
 10994                           
 10995                           ; BSR set to: 0
 10996                           
 10997                           ; BSR set to: 0
 10998  01005A  0100               	movlb	0	; () banked
 10999  01005C  518E               	movf	(___flmul@a+3)& (0+255),w,b
 11000  01005E  0B80               	andlw	128
 11001  010060  0100               	movlb	0	; () banked
 11002  010062  1B93               	xorwf	___flmul@sign& (0+255),f,b
 11003                           
 11004                           ; BSR set to: 0
 11005  010064  0100               	movlb	0	; () banked
 11006  010066  518E               	movf	(___flmul@a+3)& (0+255),w,b
 11007  010068  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 11008  01006A  0100               	movlb	0	; () banked
 11009  01006C  6F94               	movwf	___flmul@aexp& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012  01006E  0100               	movlb	0	; () banked
 11013  010070  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 11014  010072  D002               	goto	l2958
 11015                           
 11016                           ; BSR set to: 0
 11017  010074  0100               	movlb	0	; () banked
 11018  010076  8194               	bsf	___flmul@aexp& (0+255),0,b
 11019  010078                     l2958:
 11020                           
 11021                           ; BSR set to: 0
 11022                           
 11023                           ; BSR set to: 0
 11024  010078  0100               	movlb	0	; () banked
 11025  01007A  5194               	movf	___flmul@aexp& (0+255),w,b
 11026  01007C  0100               	movlb	0	; () banked
 11027  01007E  B4D8               	btfsc	status,2,c
 11028  010080  D010               	goto	l2959
 11029                           
 11030                           ; BSR set to: 0
 11031  010082  0100               	movlb	0	; () banked
 11032  010084  2994               	incf	___flmul@aexp& (0+255),w,b
 11033  010086  A4D8               	btfss	status,2,c
 11034  010088  D009               	goto	l2960
 11035                           
 11036                           ; BSR set to: 0
 11037  01008A  0E00               	movlw	0
 11038  01008C  0100               	movlb	0	; () banked
 11039  01008E  6F8B               	movwf	___flmul@a& (0+255),b
 11040  010090  0E00               	movlw	0
 11041  010092  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 11042  010094  0E00               	movlw	0
 11043  010096  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 11044  010098  0E00               	movlw	0
 11045  01009A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 11046  01009C                     l2960:
 11047                           
 11048                           ; BSR set to: 0
 11049                           
 11050                           ; BSR set to: 0
 11051  01009C  0100               	movlb	0	; () banked
 11052  01009E  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 11053  0100A0  D009               	goto	l2961
 11054  0100A2                     l2959:
 11055                           
 11056                           ; BSR set to: 0
 11057                           
 11058                           ; BSR set to: 0
 11059  0100A2  0E00               	movlw	0
 11060  0100A4  0100               	movlb	0	; () banked
 11061  0100A6  6F8B               	movwf	___flmul@a& (0+255),b
 11062  0100A8  0E00               	movlw	0
 11063  0100AA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 11064  0100AC  0E00               	movlw	0
 11065  0100AE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 11066  0100B0  0E00               	movlw	0
 11067  0100B2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 11068  0100B4                     l2961:
 11069                           
 11070                           ; BSR set to: 0
 11071  0100B4  0100               	movlb	0	; () banked
 11072  0100B6  5194               	movf	___flmul@aexp& (0+255),w,b
 11073  0100B8  0100               	movlb	0	; () banked
 11074  0100BA  B4D8               	btfsc	status,2,c
 11075  0100BC  D005               	goto	u10510
 11076                           
 11077                           ; BSR set to: 0
 11078  0100BE  0100               	movlb	0	; () banked
 11079  0100C0  5199               	movf	___flmul@bexp& (0+255),w,b
 11080  0100C2  0100               	movlb	0	; () banked
 11081  0100C4  A4D8               	btfss	status,2,c
 11082  0100C6  D00A               	goto	l2962
 11083  0100C8                     u10510:
 11084                           
 11085                           ; BSR set to: 0
 11086                           
 11087                           ; BSR set to: 0
 11088  0100C8  0E00               	movlw	0
 11089  0100CA  0100               	movlb	0	; () banked
 11090  0100CC  6F87               	movwf	?___flmul& (0+255),b
 11091  0100CE  0E00               	movlw	0
 11092  0100D0  6F88               	movwf	(?___flmul+1)& (0+255),b
 11093  0100D2  0E00               	movlw	0
 11094  0100D4  6F89               	movwf	(?___flmul+2)& (0+255),b
 11095  0100D6  0E00               	movlw	0
 11096  0100D8  6F8A               	movwf	(?___flmul+3)& (0+255),b
 11097                           
 11098                           ; BSR set to: 0
 11099  0100DA  0012               	return	
 11100  0100DC                     l2962:
 11101                           
 11102                           ; BSR set to: 0
 11103                           
 11104                           ; BSR set to: 0
 11105  0100DC  0100               	movlb	0	; () banked
 11106  0100DE  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11107  0100E0  0100               	movlb	0	; () banked
 11108  0100E2  0387               	mulwf	___flmul@b& (0+255),b
 11109  0100E4  CFF3 F09E          	movff	prodl,___flmul@temp
 11110  0100E8  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11111                           
 11112                           ; BSR set to: 0
 11113  0100EC  0100               	movlb	0	; () banked
 11114  0100EE  519E               	movf	___flmul@temp& (0+255),w,b
 11115  0100F0  0100               	movlb	0	; () banked
 11116  0100F2  6F95               	movwf	___flmul@grs& (0+255),b
 11117  0100F4  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 11118  0100F6  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 11119  0100F8  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 11120                           
 11121                           ; BSR set to: 0
 11122  0100FA  0100               	movlb	0	; () banked
 11123  0100FC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11124  0100FE  0100               	movlb	0	; () banked
 11125  010100  6F9A               	movwf	___flmul@prod& (0+255),b
 11126  010102  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 11127  010104  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 11128  010106  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 11129  010108  0100               	movlb	0	; () banked
 11130  01010A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11131  01010C  0100               	movlb	0	; () banked
 11132  01010E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11133  010110  CFF3 F09E          	movff	prodl,___flmul@temp
 11134  010114  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11135                           
 11136                           ; BSR set to: 0
 11137  010118  0100               	movlb	0	; () banked
 11138  01011A  519E               	movf	___flmul@temp& (0+255),w,b
 11139  01011C  0100               	movlb	0	; () banked
 11140  01011E  2795               	addwf	___flmul@grs& (0+255),f,b
 11141  010120  0E00               	movlw	0
 11142  010122  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11143  010124  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11144  010126  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11145                           
 11146                           ; BSR set to: 0
 11147  010128  0100               	movlb	0	; () banked
 11148  01012A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11149  01012C  0100               	movlb	0	; () banked
 11150  01012E  279A               	addwf	___flmul@prod& (0+255),f,b
 11151  010130  0E00               	movlw	0
 11152  010132  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11153  010134  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11154  010136  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11155  010138  0100               	movlb	0	; () banked
 11156  01013A  518B               	movf	___flmul@a& (0+255),w,b
 11157  01013C  0100               	movlb	0	; () banked
 11158  01013E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11159  010140  CFF3 F09E          	movff	prodl,___flmul@temp
 11160  010144  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11161                           
 11162                           ; BSR set to: 0
 11163  010148  0100               	movlb	0	; () banked
 11164  01014A  519E               	movf	___flmul@temp& (0+255),w,b
 11165  01014C  0100               	movlb	0	; () banked
 11166  01014E  2795               	addwf	___flmul@grs& (0+255),f,b
 11167  010150  0E00               	movlw	0
 11168  010152  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11169  010154  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11170  010156  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11171                           
 11172                           ; BSR set to: 0
 11173  010158  0100               	movlb	0	; () banked
 11174  01015A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11175  01015C  0100               	movlb	0	; () banked
 11176  01015E  279A               	addwf	___flmul@prod& (0+255),f,b
 11177  010160  0E00               	movlw	0
 11178  010162  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11179  010164  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11180  010166  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11181                           
 11182                           ; BSR set to: 0
 11183  010168  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11184  01016C  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11185  010170  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11186  010174  0100               	movlb	0	; () banked
 11187  010176  6B95               	clrf	___flmul@grs& (0+255),b
 11188                           
 11189                           ; BSR set to: 0
 11190  010178  0100               	movlb	0	; () banked
 11191  01017A  518B               	movf	___flmul@a& (0+255),w,b
 11192  01017C  0100               	movlb	0	; () banked
 11193  01017E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11194  010180  CFF3 F09E          	movff	prodl,___flmul@temp
 11195  010184  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11196                           
 11197                           ; BSR set to: 0
 11198  010188  0100               	movlb	0	; () banked
 11199  01018A  519E               	movf	___flmul@temp& (0+255),w,b
 11200  01018C  0100               	movlb	0	; () banked
 11201  01018E  2795               	addwf	___flmul@grs& (0+255),f,b
 11202  010190  0100               	movlb	0	; () banked
 11203  010192  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11204  010194  0100               	movlb	0	; () banked
 11205  010196  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11206  010198  0E00               	movlw	0
 11207  01019A  0100               	movlb	0	; () banked
 11208  01019C  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11209  01019E  0E00               	movlw	0
 11210  0101A0  0100               	movlb	0	; () banked
 11211  0101A2  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11212                           
 11213                           ; BSR set to: 0
 11214  0101A4  0100               	movlb	0	; () banked
 11215  0101A6  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11216  0101A8  0100               	movlb	0	; () banked
 11217  0101AA  0387               	mulwf	___flmul@b& (0+255),b
 11218  0101AC  CFF3 F09E          	movff	prodl,___flmul@temp
 11219  0101B0  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11220                           
 11221                           ; BSR set to: 0
 11222  0101B4  0100               	movlb	0	; () banked
 11223  0101B6  519E               	movf	___flmul@temp& (0+255),w,b
 11224  0101B8  0100               	movlb	0	; () banked
 11225  0101BA  2795               	addwf	___flmul@grs& (0+255),f,b
 11226  0101BC  0100               	movlb	0	; () banked
 11227  0101BE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11228  0101C0  0100               	movlb	0	; () banked
 11229  0101C2  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11230  0101C4  0E00               	movlw	0
 11231  0101C6  0100               	movlb	0	; () banked
 11232  0101C8  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11233  0101CA  0E00               	movlw	0
 11234  0101CC  0100               	movlb	0	; () banked
 11235  0101CE  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11236                           
 11237                           ; BSR set to: 0
 11238  0101D0  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11239  0101D4  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11240  0101D8  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11241  0101DC  0100               	movlb	0	; () banked
 11242  0101DE  6B95               	clrf	___flmul@grs& (0+255),b
 11243  0101E0  0100               	movlb	0	; () banked
 11244  0101E2  518B               	movf	___flmul@a& (0+255),w,b
 11245  0101E4  0100               	movlb	0	; () banked
 11246  0101E6  0387               	mulwf	___flmul@b& (0+255),b
 11247  0101E8  CFF3 F09E          	movff	prodl,___flmul@temp
 11248  0101EC  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11249                           
 11250                           ; BSR set to: 0
 11251  0101F0  0100               	movlb	0	; () banked
 11252  0101F2  519E               	movf	___flmul@temp& (0+255),w,b
 11253  0101F4  0100               	movlb	0	; () banked
 11254  0101F6  2795               	addwf	___flmul@grs& (0+255),f,b
 11255  0101F8  0100               	movlb	0	; () banked
 11256  0101FA  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11257  0101FC  0100               	movlb	0	; () banked
 11258  0101FE  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11259  010200  0E00               	movlw	0
 11260  010202  0100               	movlb	0	; () banked
 11261  010204  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11262  010206  0E00               	movlw	0
 11263  010208  0100               	movlb	0	; () banked
 11264  01020A  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11265                           
 11266                           ; BSR set to: 0
 11267  01020C  0100               	movlb	0	; () banked
 11268  01020E  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11269  010210  0100               	movlb	0	; () banked
 11270  010212  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11271  010214  CFF3 F09E          	movff	prodl,___flmul@temp
 11272  010218  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11273  01021C  0100               	movlb	0	; () banked
 11274  01021E  519E               	movf	___flmul@temp& (0+255),w,b
 11275  010220  0100               	movlb	0	; () banked
 11276  010222  279A               	addwf	___flmul@prod& (0+255),f,b
 11277  010224  0100               	movlb	0	; () banked
 11278  010226  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11279  010228  0100               	movlb	0	; () banked
 11280  01022A  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11281  01022C  0E00               	movlw	0
 11282  01022E  0100               	movlb	0	; () banked
 11283  010230  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11284  010232  0E00               	movlw	0
 11285  010234  0100               	movlb	0	; () banked
 11286  010236  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11287                           
 11288                           ; BSR set to: 0
 11289  010238  0100               	movlb	0	; () banked
 11290  01023A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11291  01023C  0100               	movlb	0	; () banked
 11292  01023E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11293  010240  CFF3 F09E          	movff	prodl,___flmul@temp
 11294  010244  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11295                           
 11296                           ; BSR set to: 0
 11297  010248  0100               	movlb	0	; () banked
 11298  01024A  519E               	movf	___flmul@temp& (0+255),w,b
 11299  01024C  0100               	movlb	0	; () banked
 11300  01024E  279A               	addwf	___flmul@prod& (0+255),f,b
 11301  010250  0100               	movlb	0	; () banked
 11302  010252  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11303  010254  0100               	movlb	0	; () banked
 11304  010256  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11305  010258  0E00               	movlw	0
 11306  01025A  0100               	movlb	0	; () banked
 11307  01025C  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11308  01025E  0E00               	movlw	0
 11309  010260  0100               	movlb	0	; () banked
 11310  010262  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11311  010264  0100               	movlb	0	; () banked
 11312  010266  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11313  010268  0100               	movlb	0	; () banked
 11314  01026A  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11315  01026C  CFF3 F09E          	movff	prodl,___flmul@temp
 11316  010270  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11317                           
 11318                           ; BSR set to: 0
 11319  010274  0100               	movlb	0	; () banked
 11320  010276  519E               	movf	___flmul@temp& (0+255),w,b
 11321  010278  0100               	movlb	0	; () banked
 11322  01027A  6F8F               	movwf	??___flmul& (0+255),b
 11323  01027C  0100               	movlb	0	; () banked
 11324  01027E  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11325  010280  0100               	movlb	0	; () banked
 11326  010282  6F90               	movwf	(??___flmul+1)& (0+255),b
 11327  010284  0100               	movlb	0	; () banked
 11328  010286  6B91               	clrf	(??___flmul+2)& (0+255),b
 11329  010288  0100               	movlb	0	; () banked
 11330  01028A  6B92               	clrf	(??___flmul+3)& (0+255),b
 11331  01028C  C091  F092         	movff	??___flmul+2,??___flmul+3
 11332  010290  C090  F091         	movff	??___flmul+1,??___flmul+2
 11333  010294  C08F  F090         	movff	??___flmul,??___flmul+1
 11334  010298  0100               	movlb	0	; () banked
 11335  01029A  6B8F               	clrf	??___flmul& (0+255),b
 11336  01029C  0100               	movlb	0	; () banked
 11337  01029E  518F               	movf	??___flmul& (0+255),w,b
 11338  0102A0  0100               	movlb	0	; () banked
 11339  0102A2  279A               	addwf	___flmul@prod& (0+255),f,b
 11340  0102A4  0100               	movlb	0	; () banked
 11341  0102A6  5190               	movf	(??___flmul+1)& (0+255),w,b
 11342  0102A8  0100               	movlb	0	; () banked
 11343  0102AA  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11344  0102AC  0100               	movlb	0	; () banked
 11345  0102AE  5191               	movf	(??___flmul+2)& (0+255),w,b
 11346  0102B0  0100               	movlb	0	; () banked
 11347  0102B2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11348  0102B4  0100               	movlb	0	; () banked
 11349  0102B6  5192               	movf	(??___flmul+3)& (0+255),w,b
 11350  0102B8  0100               	movlb	0	; () banked
 11351  0102BA  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11352                           
 11353                           ; BSR set to: 0
 11354  0102BC  C095  F08F         	movff	___flmul@grs,??___flmul
 11355  0102C0  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 11356  0102C4  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 11357  0102C8  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 11358  0102CC  0E19               	movlw	25
 11359  0102CE  D006               	goto	u10520
 11360  0102D0                     u10525:
 11361  0102D0  0100               	movlb	0	; () banked
 11362  0102D2  90D8               	bcf	status,0,c
 11363  0102D4  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 11364  0102D6  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 11365  0102D8  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 11366  0102DA  338F               	rrcf	??___flmul& (0+255),f,b
 11367  0102DC                     u10520:
 11368  0102DC  2EE8               	decfsz	wreg,f,c
 11369  0102DE  D7F8               	goto	u10525
 11370  0102E0  0100               	movlb	0	; () banked
 11371  0102E2  518F               	movf	??___flmul& (0+255),w,b
 11372  0102E4  0100               	movlb	0	; () banked
 11373  0102E6  279A               	addwf	___flmul@prod& (0+255),f,b
 11374  0102E8  0100               	movlb	0	; () banked
 11375  0102EA  5190               	movf	(??___flmul+1)& (0+255),w,b
 11376  0102EC  0100               	movlb	0	; () banked
 11377  0102EE  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11378  0102F0  0100               	movlb	0	; () banked
 11379  0102F2  5191               	movf	(??___flmul+2)& (0+255),w,b
 11380  0102F4  0100               	movlb	0	; () banked
 11381  0102F6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11382  0102F8  0100               	movlb	0	; () banked
 11383  0102FA  5192               	movf	(??___flmul+3)& (0+255),w,b
 11384  0102FC  0100               	movlb	0	; () banked
 11385  0102FE  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11386                           
 11387                           ; BSR set to: 0
 11388  010300  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11389  010304  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11390  010308  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11391  01030C  0100               	movlb	0	; () banked
 11392  01030E  6B95               	clrf	___flmul@grs& (0+255),b
 11393                           
 11394                           ; BSR set to: 0
 11395  010310  0100               	movlb	0	; () banked
 11396  010312  5194               	movf	___flmul@aexp& (0+255),w,b
 11397  010314  C099  F08F         	movff	___flmul@bexp,??___flmul
 11398  010318  0100               	movlb	0	; () banked
 11399  01031A  6B90               	clrf	(??___flmul+1)& (0+255),b
 11400  01031C  0100               	movlb	0	; () banked
 11401  01031E  278F               	addwf	??___flmul& (0+255),f,b
 11402  010320  0E00               	movlw	0
 11403  010322  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 11404  010324  0E82               	movlw	130
 11405  010326  0100               	movlb	0	; () banked
 11406  010328  258F               	addwf	??___flmul& (0+255),w,b
 11407  01032A  0100               	movlb	0	; () banked
 11408  01032C  6F9E               	movwf	___flmul@temp& (0+255),b
 11409  01032E  0EFF               	movlw	255
 11410  010330  0100               	movlb	0	; () banked
 11411  010332  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 11412  010334  0100               	movlb	0	; () banked
 11413  010336  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 11414  010338  D015               	goto	l2966
 11415  01033A                     
 11416                           ; BSR set to: 0
 11417                           
 11418                           ; BSR set to: 0
 11419  01033A  0100               	movlb	0	; () banked
 11420  01033C  90D8               	bcf	status,0,c
 11421  01033E  379A               	rlcf	___flmul@prod& (0+255),f,b
 11422  010340  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11423  010342  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11424  010344  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11425                           
 11426                           ; BSR set to: 0
 11427  010346  0100               	movlb	0	; () banked
 11428  010348  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 11429  01034A  D002               	goto	l2968
 11430                           
 11431                           ; BSR set to: 0
 11432  01034C  0100               	movlb	0	; () banked
 11433  01034E  819A               	bsf	___flmul@prod& (0+255),0,b
 11434  010350                     l2968:
 11435                           
 11436                           ; BSR set to: 0
 11437  010350  0100               	movlb	0	; () banked
 11438  010352  90D8               	bcf	status,0,c
 11439  010354  3795               	rlcf	___flmul@grs& (0+255),f,b
 11440  010356  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11441  010358  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11442  01035A  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11443  01035C  0100               	movlb	0	; () banked
 11444  01035E  079E               	decf	___flmul@temp& (0+255),f,b
 11445  010360  A0D8               	btfss	status,0,c
 11446  010362  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 11447  010364                     l2966:
 11448                           
 11449                           ; BSR set to: 0
 11450                           
 11451                           ; BSR set to: 0
 11452  010364  0100               	movlb	0	; () banked
 11453  010366  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 11454  010368  D7E8               	goto	l2967
 11455                           
 11456                           ; BSR set to: 0
 11457                           
 11458                           ; BSR set to: 0
 11459  01036A  0E00               	movlw	0
 11460  01036C  0100               	movlb	0	; () banked
 11461  01036E  6F94               	movwf	___flmul@aexp& (0+255),b
 11462                           
 11463                           ; BSR set to: 0
 11464  010370  0100               	movlb	0	; () banked
 11465  010372  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 11466  010374  D024               	goto	l2973
 11467                           
 11468                           ; BSR set to: 0
 11469  010376  0EFF               	movlw	255
 11470  010378  0100               	movlb	0	; () banked
 11471  01037A  1595               	andwf	___flmul@grs& (0+255),w,b
 11472  01037C  0100               	movlb	0	; () banked
 11473  01037E  6F8F               	movwf	??___flmul& (0+255),b
 11474  010380  0EFF               	movlw	255
 11475  010382  0100               	movlb	0	; () banked
 11476  010384  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 11477  010386  0100               	movlb	0	; () banked
 11478  010388  6F90               	movwf	(??___flmul+1)& (0+255),b
 11479  01038A  0EFF               	movlw	255
 11480  01038C  0100               	movlb	0	; () banked
 11481  01038E  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 11482  010390  0100               	movlb	0	; () banked
 11483  010392  6F91               	movwf	(??___flmul+2)& (0+255),b
 11484  010394  0E7F               	movlw	127
 11485  010396  0100               	movlb	0	; () banked
 11486  010398  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 11487  01039A  0100               	movlb	0	; () banked
 11488  01039C  6F92               	movwf	(??___flmul+3)& (0+255),b
 11489  01039E  0100               	movlb	0	; () banked
 11490  0103A0  518F               	movf	??___flmul& (0+255),w,b
 11491  0103A2  0100               	movlb	0	; () banked
 11492  0103A4  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 11493  0103A6  0100               	movlb	0	; () banked
 11494  0103A8  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 11495  0103AA  0100               	movlb	0	; () banked
 11496  0103AC  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 11497  0103AE  A4D8               	btfss	status,2,c
 11498  0103B0  D003               	goto	u10570
 11499                           
 11500                           ; BSR set to: 0
 11501                           
 11502                           ; BSR set to: 0
 11503  0103B2  0100               	movlb	0	; () banked
 11504  0103B4  A19A               	btfss	___flmul@prod& (0+255),0,b
 11505  0103B6  D003               	goto	l2973
 11506  0103B8                     u10570:
 11507                           
 11508                           ; BSR set to: 0
 11509  0103B8  0E01               	movlw	1
 11510  0103BA  0100               	movlb	0	; () banked
 11511  0103BC  6F94               	movwf	___flmul@aexp& (0+255),b
 11512  0103BE                     l2973:
 11513                           
 11514                           ; BSR set to: 0
 11515                           
 11516                           ; BSR set to: 0
 11517                           
 11518                           ; BSR set to: 0
 11519  0103BE  0100               	movlb	0	; () banked
 11520  0103C0  5194               	movf	___flmul@aexp& (0+255),w,b
 11521  0103C2  0100               	movlb	0	; () banked
 11522  0103C4  B4D8               	btfsc	status,2,c
 11523  0103C6  D023               	goto	l2975
 11524                           
 11525                           ; BSR set to: 0
 11526  0103C8  0E01               	movlw	1
 11527  0103CA  0100               	movlb	0	; () banked
 11528  0103CC  279A               	addwf	___flmul@prod& (0+255),f,b
 11529  0103CE  0E00               	movlw	0
 11530  0103D0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11531  0103D2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11532  0103D4  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11533                           
 11534                           ; BSR set to: 0
 11535  0103D6  0100               	movlb	0	; () banked
 11536  0103D8  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 11537  0103DA  D019               	goto	l2975
 11538                           
 11539                           ; BSR set to: 0
 11540  0103DC  C09A  F08F         	movff	___flmul@prod,??___flmul
 11541  0103E0  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 11542  0103E4  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 11543  0103E8  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 11544  0103EC  0100               	movlb	0	; () banked
 11545  0103EE  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 11546  0103F0  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 11547  0103F2  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 11548  0103F4  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 11549  0103F6  338F               	rrcf	??___flmul& (0+255),f,b
 11550  0103F8  C08F  F09A         	movff	??___flmul,___flmul@prod
 11551  0103FC  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 11552  010400  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 11553  010404  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 11554                           
 11555                           ; BSR set to: 0
 11556  010408  0100               	movlb	0	; () banked
 11557  01040A  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 11558  01040C  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 11559  01040E                     l2975:
 11560                           
 11561                           ; BSR set to: 0
 11562                           
 11563                           ; BSR set to: 0
 11564                           
 11565                           ; BSR set to: 0
 11566  01040E  0100               	movlb	0	; () banked
 11567  010410  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11568  010412  D010               	goto	l2976
 11569  010414  0100               	movlb	0	; () banked
 11570  010416  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11571  010418  E104               	bnz	u10600
 11572  01041A  0100               	movlb	0	; () banked
 11573  01041C  299E               	incf	___flmul@temp& (0+255),w,b
 11574  01041E  A0D8               	btfss	status,0,c
 11575  010420  D009               	goto	l2976
 11576  010422                     u10600:
 11577                           
 11578                           ; BSR set to: 0
 11579  010422  0E00               	movlw	0
 11580  010424  0100               	movlb	0	; () banked
 11581  010426  6F9A               	movwf	___flmul@prod& (0+255),b
 11582  010428  0E00               	movlw	0
 11583  01042A  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 11584  01042C  0E80               	movlw	128
 11585  01042E  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 11586  010430  0E7F               	movlw	127
 11587  010432  D02B               	goto	L5
 11588  010434                     l2976:
 11589                           
 11590                           ; BSR set to: 0
 11591                           
 11592                           ; BSR set to: 0
 11593  010434  0100               	movlb	0	; () banked
 11594  010436  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11595  010438  D007               	goto	u10610
 11596  01043A  0100               	movlb	0	; () banked
 11597  01043C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11598  01043E  E111               	bnz	l2978
 11599  010440  0100               	movlb	0	; () banked
 11600  010442  059E               	decf	___flmul@temp& (0+255),w,b
 11601  010444  B0D8               	btfsc	status,0,c
 11602  010446  D00D               	goto	l2978
 11603  010448                     u10610:
 11604                           
 11605                           ; BSR set to: 0
 11606  010448  0E00               	movlw	0
 11607  01044A  0100               	movlb	0	; () banked
 11608  01044C  6F9A               	movwf	___flmul@prod& (0+255),b
 11609  01044E  0E00               	movlw	0
 11610  010450  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 11611  010452  0E00               	movlw	0
 11612  010454  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 11613  010456  0E00               	movlw	0
 11614  010458  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 11615  01045A  0E00               	movlw	0
 11616  01045C  0100               	movlb	0	; () banked
 11617  01045E  6F93               	movwf	___flmul@sign& (0+255),b
 11618  010460  D015               	goto	l2979
 11619  010462                     l2978:
 11620                           
 11621                           ; BSR set to: 0
 11622  010462  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 11623                           
 11624                           ; BSR set to: 0
 11625  010466  0EFF               	movlw	255
 11626  010468  0100               	movlb	0	; () banked
 11627  01046A  179A               	andwf	___flmul@prod& (0+255),f,b
 11628  01046C  0EFF               	movlw	255
 11629  01046E  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 11630  010470  0E7F               	movlw	127
 11631  010472  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 11632  010474  0E00               	movlw	0
 11633  010476  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 11634                           
 11635                           ; BSR set to: 0
 11636  010478  0100               	movlb	0	; () banked
 11637  01047A  A199               	btfss	___flmul@bexp& (0+255),0,b
 11638  01047C  D002               	goto	l2980
 11639                           
 11640                           ; BSR set to: 0
 11641  01047E  0100               	movlb	0	; () banked
 11642  010480  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 11643  010482                     l2980:
 11644                           
 11645                           ; BSR set to: 0
 11646                           
 11647                           ; BSR set to: 0
 11648  010482  0100               	movlb	0	; () banked
 11649  010484  90D8               	bcf	status,0,c
 11650  010486  3199               	rrcf	___flmul@bexp& (0+255),w,b
 11651  010488  0100               	movlb	0	; () banked
 11652  01048A                     L5:
 11653  01048A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 11654  01048C                     l2979:
 11655                           
 11656                           ; BSR set to: 0
 11657                           
 11658                           ; BSR set to: 0
 11659                           
 11660                           ; BSR set to: 0
 11661  01048C  0100               	movlb	0	; () banked
 11662  01048E  5193               	movf	___flmul@sign& (0+255),w,b
 11663  010490  0100               	movlb	0	; () banked
 11664  010492  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11665                           
 11666                           ; BSR set to: 0
 11667  010494  C09A  F087         	movff	___flmul@prod,?___flmul
 11668  010498  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 11669  01049C  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 11670  0104A0  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 11671  0104A4  0012               	return	
 11672  0104A6                     __end_of___flmul:
 11673                           	opt stack 0
 11674                           tblptru	equ	0xFF8
 11675                           tblptrh	equ	0xFF7
 11676                           tblptrl	equ	0xFF6
 11677                           tablat	equ	0xFF5
 11678                           prodh	equ	0xFF4
 11679                           prodl	equ	0xFF3
 11680                           intcon	equ	0xFF2
 11681                           postinc0	equ	0xFEE
 11682                           wreg	equ	0xFE8
 11683                           postdec1	equ	0xFE5
 11684                           fsr1h	equ	0xFE2
 11685                           fsr1l	equ	0xFE1
 11686                           indf2	equ	0xFDF
 11687                           postinc2	equ	0xFDE
 11688                           postdec2	equ	0xFDD
 11689                           fsr2h	equ	0xFDA
 11690                           fsr2l	equ	0xFD9
 11691                           status	equ	0xFD8
 11692                           
 11693 ;; *************** function ___fldiv *****************
 11694 ;; Defined at:
 11695 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;  b               4   14[BANK0 ] unsigned char 
 11698 ;;  a               4   18[BANK0 ] unsigned char 
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;  grs             4   33[BANK0 ] unsigned long 
 11701 ;;  rem             4   27[BANK0 ] unsigned long 
 11702 ;;  new_exp         2   31[BANK0 ] int 
 11703 ;;  aexp            1   38[BANK0 ] unsigned char 
 11704 ;;  bexp            1   37[BANK0 ] unsigned char 
 11705 ;;  sign            1   26[BANK0 ] unsigned char 
 11706 ;; Return value:  Size  Location     Type
 11707 ;;                  4   14[BANK0 ] unsigned char 
 11708 ;; Registers used:
 11709 ;;		wreg, status,2, status,0
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11715 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11716 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11718 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11719 ;;Total ram usage:       25 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    7
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_ADC_Voltage
 11726 ;;		_mode1
 11727 ;;		_mode4
 11728 ;; This function uses a non-reentrant model
 11729 ;;
 11730                           
 11731                           	psect	text45
 11732  010CDC                     __ptext45:
 11733                           	opt stack 0
 11734  010CDC                     ___fldiv:
 11735                           	opt stack 22
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;incstack = 0
 11739  010CDC  0100               	movlb	0	; () banked
 11740  010CDE  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 11741  010CE0  0B80               	andlw	128
 11742  010CE2  0100               	movlb	0	; () banked
 11743  010CE4  6F7A               	movwf	___fldiv@sign& (0+255),b
 11744  010CE6  0100               	movlb	0	; () banked
 11745  010CE8  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 11746  010CEA  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 11747  010CEC  0100               	movlb	0	; () banked
 11748  010CEE  6F85               	movwf	___fldiv@bexp& (0+255),b
 11749                           
 11750                           ; BSR set to: 0
 11751  010CF0  0100               	movlb	0	; () banked
 11752  010CF2  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 11753  010CF4  D002               	goto	l2920
 11754                           
 11755                           ; BSR set to: 0
 11756  010CF6  0100               	movlb	0	; () banked
 11757  010CF8  8185               	bsf	___fldiv@bexp& (0+255),0,b
 11758  010CFA                     l2920:
 11759                           
 11760                           ; BSR set to: 0
 11761                           
 11762                           ; BSR set to: 0
 11763  010CFA  0100               	movlb	0	; () banked
 11764  010CFC  5185               	movf	___fldiv@bexp& (0+255),w,b
 11765  010CFE  0100               	movlb	0	; () banked
 11766  010D00  B4D8               	btfsc	status,2,c
 11767  010D02  D012               	goto	l2921
 11768                           
 11769                           ; BSR set to: 0
 11770  010D04  0100               	movlb	0	; () banked
 11771  010D06  2985               	incf	___fldiv@bexp& (0+255),w,b
 11772  010D08  A4D8               	btfss	status,2,c
 11773  010D0A  D009               	goto	l2922
 11774                           
 11775                           ; BSR set to: 0
 11776  010D0C  0E00               	movlw	0
 11777  010D0E  0100               	movlb	0	; () banked
 11778  010D10  6F6E               	movwf	___fldiv@b& (0+255),b
 11779  010D12  0E00               	movlw	0
 11780  010D14  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 11781  010D16  0E00               	movlw	0
 11782  010D18  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 11783  010D1A  0E00               	movlw	0
 11784  010D1C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 11785  010D1E                     l2922:
 11786                           
 11787                           ; BSR set to: 0
 11788                           
 11789                           ; BSR set to: 0
 11790  010D1E  0100               	movlb	0	; () banked
 11791  010D20  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 11792                           
 11793                           ; BSR set to: 0
 11794  010D22  0E00               	movlw	0
 11795  010D24  0100               	movlb	0	; () banked
 11796  010D26  D008               	goto	L6
 11797  010D28                     l2921:
 11798                           
 11799                           ; BSR set to: 0
 11800                           
 11801                           ; BSR set to: 0
 11802  010D28  0E00               	movlw	0
 11803  010D2A  0100               	movlb	0	; () banked
 11804  010D2C  6F6E               	movwf	___fldiv@b& (0+255),b
 11805  010D2E  0E00               	movlw	0
 11806  010D30  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 11807  010D32  0E00               	movlw	0
 11808  010D34  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 11809  010D36  0E00               	movlw	0
 11810  010D38                     L6:
 11811  010D38  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 11812                           
 11813                           ; BSR set to: 0
 11814                           
 11815                           ; BSR set to: 0
 11816  010D3A  0100               	movlb	0	; () banked
 11817  010D3C  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 11818  010D3E  0B80               	andlw	128
 11819  010D40  0100               	movlb	0	; () banked
 11820  010D42  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 11821                           
 11822                           ; BSR set to: 0
 11823  010D44  0100               	movlb	0	; () banked
 11824  010D46  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 11825  010D48  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 11826  010D4A  0100               	movlb	0	; () banked
 11827  010D4C  6F86               	movwf	___fldiv@aexp& (0+255),b
 11828                           
 11829                           ; BSR set to: 0
 11830  010D4E  0100               	movlb	0	; () banked
 11831  010D50  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 11832  010D52  D002               	goto	l2924
 11833                           
 11834                           ; BSR set to: 0
 11835  010D54  0100               	movlb	0	; () banked
 11836  010D56  8186               	bsf	___fldiv@aexp& (0+255),0,b
 11837  010D58                     l2924:
 11838                           
 11839                           ; BSR set to: 0
 11840                           
 11841                           ; BSR set to: 0
 11842  010D58  0100               	movlb	0	; () banked
 11843  010D5A  5186               	movf	___fldiv@aexp& (0+255),w,b
 11844  010D5C  0100               	movlb	0	; () banked
 11845  010D5E  B4D8               	btfsc	status,2,c
 11846  010D60  D012               	goto	l2925
 11847                           
 11848                           ; BSR set to: 0
 11849  010D62  0100               	movlb	0	; () banked
 11850  010D64  2986               	incf	___fldiv@aexp& (0+255),w,b
 11851  010D66  A4D8               	btfss	status,2,c
 11852  010D68  D009               	goto	l2926
 11853                           
 11854                           ; BSR set to: 0
 11855  010D6A  0E00               	movlw	0
 11856  010D6C  0100               	movlb	0	; () banked
 11857  010D6E  6F72               	movwf	___fldiv@a& (0+255),b
 11858  010D70  0E00               	movlw	0
 11859  010D72  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 11860  010D74  0E00               	movlw	0
 11861  010D76  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 11862  010D78  0E00               	movlw	0
 11863  010D7A  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 11864  010D7C                     l2926:
 11865                           
 11866                           ; BSR set to: 0
 11867                           
 11868                           ; BSR set to: 0
 11869  010D7C  0100               	movlb	0	; () banked
 11870  010D7E  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 11871                           
 11872                           ; BSR set to: 0
 11873  010D80  0E00               	movlw	0
 11874  010D82  0100               	movlb	0	; () banked
 11875  010D84  D008               	goto	L7
 11876  010D86                     l2925:
 11877                           
 11878                           ; BSR set to: 0
 11879                           
 11880                           ; BSR set to: 0
 11881  010D86  0E00               	movlw	0
 11882  010D88  0100               	movlb	0	; () banked
 11883  010D8A  6F72               	movwf	___fldiv@a& (0+255),b
 11884  010D8C  0E00               	movlw	0
 11885  010D8E  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 11886  010D90  0E00               	movlw	0
 11887  010D92  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 11888  010D94  0E00               	movlw	0
 11889  010D96                     L7:
 11890  010D96  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 11891                           
 11892                           ; BSR set to: 0
 11893                           
 11894                           ; BSR set to: 0
 11895  010D98  0100               	movlb	0	; () banked
 11896  010D9A  5172               	movf	___fldiv@a& (0+255),w,b
 11897  010D9C  0100               	movlb	0	; () banked
 11898  010D9E  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 11899  010DA0  0100               	movlb	0	; () banked
 11900  010DA2  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 11901  010DA4  0100               	movlb	0	; () banked
 11902  010DA6  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 11903  010DA8  A4D8               	btfss	status,2,c
 11904  010DAA  D017               	goto	l2928
 11905                           
 11906                           ; BSR set to: 0
 11907  010DAC  0E00               	movlw	0
 11908  010DAE  0100               	movlb	0	; () banked
 11909  010DB0  6F6E               	movwf	___fldiv@b& (0+255),b
 11910  010DB2  0E00               	movlw	0
 11911  010DB4  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 11912  010DB6  0E00               	movlw	0
 11913  010DB8  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 11914  010DBA  0E00               	movlw	0
 11915  010DBC  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 11916                           
 11917                           ; BSR set to: 0
 11918  010DBE  0100               	movlb	0	; () banked
 11919  010DC0  0E80               	movlw	128
 11920  010DC2  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 11921  010DC4  0E7F               	movlw	127
 11922  010DC6  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11923                           
 11924                           ; BSR set to: 0
 11925  010DC8  C06E  F06E         	movff	___fldiv@b,?___fldiv
 11926  010DCC  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 11927  010DD0  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 11928  010DD4  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 11929                           
 11930                           ; BSR set to: 0
 11931  010DD8  0012               	return	
 11932  010DDA                     l2928:
 11933                           
 11934                           ; BSR set to: 0
 11935                           
 11936                           ; BSR set to: 0
 11937  010DDA  0100               	movlb	0	; () banked
 11938  010DDC  5185               	movf	___fldiv@bexp& (0+255),w,b
 11939  010DDE  0100               	movlb	0	; () banked
 11940  010DE0  A4D8               	btfss	status,2,c
 11941  010DE2  D012               	goto	l2930
 11942                           
 11943                           ; BSR set to: 0
 11944  010DE4  0E00               	movlw	0
 11945  010DE6  0100               	movlb	0	; () banked
 11946  010DE8  6F6E               	movwf	___fldiv@b& (0+255),b
 11947  010DEA  0E00               	movlw	0
 11948  010DEC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 11949  010DEE  0E00               	movlw	0
 11950  010DF0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 11951  010DF2  0E00               	movlw	0
 11952  010DF4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 11953                           
 11954                           ; BSR set to: 0
 11955  010DF6  C06E  F06E         	movff	___fldiv@b,?___fldiv
 11956  010DFA  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 11957  010DFE  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 11958  010E02  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 11959                           
 11960                           ; BSR set to: 0
 11961  010E06  0012               	return	
 11962  010E08                     l2930:
 11963                           
 11964                           ; BSR set to: 0
 11965                           
 11966                           ; BSR set to: 0
 11967  010E08  0100               	movlb	0	; () banked
 11968  010E0A  5186               	movf	___fldiv@aexp& (0+255),w,b
 11969  010E0C  0100               	movlb	0	; () banked
 11970  010E0E  6F76               	movwf	??___fldiv& (0+255),b
 11971  010E10  6B77               	clrf	(??___fldiv+1)& (0+255),b
 11972  010E12  0100               	movlb	0	; () banked
 11973  010E14  1F76               	comf	??___fldiv& (0+255),f,b
 11974  010E16  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 11975  010E18  4B76               	infsnz	??___fldiv& (0+255),f,b
 11976  010E1A  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 11977  010E1C  0100               	movlb	0	; () banked
 11978  010E1E  5185               	movf	___fldiv@bexp& (0+255),w,b
 11979  010E20  0100               	movlb	0	; () banked
 11980  010E22  6F78               	movwf	(??___fldiv+2)& (0+255),b
 11981  010E24  6B79               	clrf	(??___fldiv+3)& (0+255),b
 11982  010E26  0100               	movlb	0	; () banked
 11983  010E28  5176               	movf	??___fldiv& (0+255),w,b
 11984  010E2A  0100               	movlb	0	; () banked
 11985  010E2C  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 11986  010E2E  0100               	movlb	0	; () banked
 11987  010E30  5177               	movf	(??___fldiv+1)& (0+255),w,b
 11988  010E32  0100               	movlb	0	; () banked
 11989  010E34  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 11990  010E36  0E7F               	movlw	127
 11991  010E38  0100               	movlb	0	; () banked
 11992  010E3A  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 11993  010E3C  0100               	movlb	0	; () banked
 11994  010E3E  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 11995  010E40  0E00               	movlw	0
 11996  010E42  0100               	movlb	0	; () banked
 11997  010E44  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 11998  010E46  0100               	movlb	0	; () banked
 11999  010E48  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12000                           
 12001                           ; BSR set to: 0
 12002  010E4A  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 12003  010E4E  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 12004  010E52  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 12005  010E56  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 12006                           
 12007                           ; BSR set to: 0
 12008  010E5A  0E00               	movlw	0
 12009  010E5C  0100               	movlb	0	; () banked
 12010  010E5E  6F6E               	movwf	___fldiv@b& (0+255),b
 12011  010E60  0E00               	movlw	0
 12012  010E62  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12013  010E64  0E00               	movlw	0
 12014  010E66  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12015  010E68  0E00               	movlw	0
 12016  010E6A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12017                           
 12018                           ; BSR set to: 0
 12019  010E6C  0E00               	movlw	0
 12020  010E6E  0100               	movlb	0	; () banked
 12021  010E70  6F81               	movwf	___fldiv@grs& (0+255),b
 12022  010E72  0E00               	movlw	0
 12023  010E74  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 12024  010E76  0E00               	movlw	0
 12025  010E78  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 12026  010E7A  0E00               	movlw	0
 12027  010E7C  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 12028                           
 12029                           ; BSR set to: 0
 12030  010E7E  0E00               	movlw	0
 12031  010E80  0100               	movlb	0	; () banked
 12032  010E82  6F86               	movwf	___fldiv@aexp& (0+255),b
 12033  010E84  D042               	goto	l2931
 12034  010E86                     
 12035                           ; BSR set to: 0
 12036                           
 12037                           ; BSR set to: 0
 12038  010E86  0100               	movlb	0	; () banked
 12039  010E88  5186               	movf	___fldiv@aexp& (0+255),w,b
 12040  010E8A  0100               	movlb	0	; () banked
 12041  010E8C  B4D8               	btfsc	status,2,c
 12042  010E8E  D017               	goto	l2933
 12043                           
 12044                           ; BSR set to: 0
 12045  010E90  0100               	movlb	0	; () banked
 12046  010E92  90D8               	bcf	status,0,c
 12047  010E94  377B               	rlcf	___fldiv@rem& (0+255),f,b
 12048  010E96  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12049  010E98  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12050  010E9A  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12051  010E9C  0100               	movlb	0	; () banked
 12052  010E9E  90D8               	bcf	status,0,c
 12053  010EA0  376E               	rlcf	___fldiv@b& (0+255),f,b
 12054  010EA2  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12055  010EA4  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12056  010EA6  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12057                           
 12058                           ; BSR set to: 0
 12059  010EA8  0100               	movlb	0	; () banked
 12060  010EAA  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12061  010EAC  D002               	goto	l2934
 12062                           
 12063                           ; BSR set to: 0
 12064  010EAE  0100               	movlb	0	; () banked
 12065  010EB0  816E               	bsf	___fldiv@b& (0+255),0,b
 12066  010EB2                     l2934:
 12067                           
 12068                           ; BSR set to: 0
 12069  010EB2  0100               	movlb	0	; () banked
 12070  010EB4  90D8               	bcf	status,0,c
 12071  010EB6  3781               	rlcf	___fldiv@grs& (0+255),f,b
 12072  010EB8  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12073  010EBA  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12074  010EBC  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12075  010EBE                     l2933:
 12076                           
 12077                           ; BSR set to: 0
 12078                           
 12079                           ; BSR set to: 0
 12080  010EBE  0100               	movlb	0	; () banked
 12081  010EC0  5172               	movf	___fldiv@a& (0+255),w,b
 12082  010EC2  0100               	movlb	0	; () banked
 12083  010EC4  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 12084  010EC6  0100               	movlb	0	; () banked
 12085  010EC8  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 12086  010ECA  0100               	movlb	0	; () banked
 12087  010ECC  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12088  010ECE  0100               	movlb	0	; () banked
 12089  010ED0  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 12090  010ED2  0100               	movlb	0	; () banked
 12091  010ED4  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12092  010ED6  0100               	movlb	0	; () banked
 12093  010ED8  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12094  010EDA  0100               	movlb	0	; () banked
 12095  010EDC  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12096  010EDE  A0D8               	btfss	status,0,c
 12097  010EE0  D012               	goto	l2935
 12098                           
 12099                           ; BSR set to: 0
 12100  010EE2  0100               	movlb	0	; () banked
 12101  010EE4  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12102                           
 12103                           ; BSR set to: 0
 12104  010EE6  0100               	movlb	0	; () banked
 12105  010EE8  5172               	movf	___fldiv@a& (0+255),w,b
 12106  010EEA  0100               	movlb	0	; () banked
 12107  010EEC  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 12108  010EEE  0100               	movlb	0	; () banked
 12109  010EF0  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 12110  010EF2  0100               	movlb	0	; () banked
 12111  010EF4  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12112  010EF6  0100               	movlb	0	; () banked
 12113  010EF8  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 12114  010EFA  0100               	movlb	0	; () banked
 12115  010EFC  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12116  010EFE  0100               	movlb	0	; () banked
 12117  010F00  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12118  010F02  0100               	movlb	0	; () banked
 12119  010F04  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12120  010F06                     l2935:
 12121                           
 12122                           ; BSR set to: 0
 12123                           
 12124                           ; BSR set to: 0
 12125  010F06  0100               	movlb	0	; () banked
 12126  010F08  2B86               	incf	___fldiv@aexp& (0+255),f,b
 12127  010F0A                     l2931:
 12128                           
 12129                           ; BSR set to: 0
 12130  010F0A  0E19               	movlw	25
 12131  010F0C  0100               	movlb	0	; () banked
 12132  010F0E  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 12133  010F10  D7BA               	goto	l2932
 12134                           
 12135                           ; BSR set to: 0
 12136                           
 12137                           ; BSR set to: 0
 12138  010F12  0100               	movlb	0	; () banked
 12139  010F14  517B               	movf	___fldiv@rem& (0+255),w,b
 12140  010F16  0100               	movlb	0	; () banked
 12141  010F18  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12142  010F1A  0100               	movlb	0	; () banked
 12143  010F1C  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12144  010F1E  0100               	movlb	0	; () banked
 12145  010F20  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12146  010F22  B4D8               	btfsc	status,2,c
 12147  010F24  D018               	goto	l2938
 12148                           
 12149                           ; BSR set to: 0
 12150  010F26  0100               	movlb	0	; () banked
 12151  010F28  8181               	bsf	___fldiv@grs& (0+255),0,b
 12152                           
 12153                           ; BSR set to: 0
 12154  010F2A  D015               	goto	l2938
 12155  010F2C                     
 12156                           ; BSR set to: 0
 12157                           
 12158                           ; BSR set to: 0
 12159  010F2C  0100               	movlb	0	; () banked
 12160  010F2E  90D8               	bcf	status,0,c
 12161  010F30  376E               	rlcf	___fldiv@b& (0+255),f,b
 12162  010F32  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12163  010F34  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12164  010F36  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12165                           
 12166                           ; BSR set to: 0
 12167  010F38  0100               	movlb	0	; () banked
 12168  010F3A  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12169  010F3C  D002               	goto	l2940
 12170                           
 12171                           ; BSR set to: 0
 12172  010F3E  0100               	movlb	0	; () banked
 12173  010F40  816E               	bsf	___fldiv@b& (0+255),0,b
 12174  010F42                     l2940:
 12175                           
 12176                           ; BSR set to: 0
 12177  010F42  0100               	movlb	0	; () banked
 12178  010F44  90D8               	bcf	status,0,c
 12179  010F46  3781               	rlcf	___fldiv@grs& (0+255),f,b
 12180  010F48  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12181  010F4A  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12182  010F4C  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12183  010F4E  0100               	movlb	0	; () banked
 12184  010F50  077F               	decf	___fldiv@new_exp& (0+255),f,b
 12185  010F52  A0D8               	btfss	status,0,c
 12186  010F54  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12187  010F56                     l2938:
 12188                           
 12189                           ; BSR set to: 0
 12190                           
 12191                           ; BSR set to: 0
 12192  010F56  0100               	movlb	0	; () banked
 12193  010F58  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 12194  010F5A  D7E8               	goto	l2939
 12195                           
 12196                           ; BSR set to: 0
 12197                           
 12198                           ; BSR set to: 0
 12199  010F5C  0E00               	movlw	0
 12200  010F5E  0100               	movlb	0	; () banked
 12201  010F60  6F86               	movwf	___fldiv@aexp& (0+255),b
 12202                           
 12203                           ; BSR set to: 0
 12204  010F62  0100               	movlb	0	; () banked
 12205  010F64  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12206  010F66  D024               	goto	l2945
 12207                           
 12208                           ; BSR set to: 0
 12209  010F68  0EFF               	movlw	255
 12210  010F6A  0100               	movlb	0	; () banked
 12211  010F6C  1581               	andwf	___fldiv@grs& (0+255),w,b
 12212  010F6E  0100               	movlb	0	; () banked
 12213  010F70  6F76               	movwf	??___fldiv& (0+255),b
 12214  010F72  0EFF               	movlw	255
 12215  010F74  0100               	movlb	0	; () banked
 12216  010F76  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12217  010F78  0100               	movlb	0	; () banked
 12218  010F7A  6F77               	movwf	(??___fldiv+1)& (0+255),b
 12219  010F7C  0EFF               	movlw	255
 12220  010F7E  0100               	movlb	0	; () banked
 12221  010F80  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12222  010F82  0100               	movlb	0	; () banked
 12223  010F84  6F78               	movwf	(??___fldiv+2)& (0+255),b
 12224  010F86  0E7F               	movlw	127
 12225  010F88  0100               	movlb	0	; () banked
 12226  010F8A  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12227  010F8C  0100               	movlb	0	; () banked
 12228  010F8E  6F79               	movwf	(??___fldiv+3)& (0+255),b
 12229  010F90  0100               	movlb	0	; () banked
 12230  010F92  5176               	movf	??___fldiv& (0+255),w,b
 12231  010F94  0100               	movlb	0	; () banked
 12232  010F96  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 12233  010F98  0100               	movlb	0	; () banked
 12234  010F9A  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 12235  010F9C  0100               	movlb	0	; () banked
 12236  010F9E  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 12237  010FA0  A4D8               	btfss	status,2,c
 12238  010FA2  D003               	goto	u10380
 12239                           
 12240                           ; BSR set to: 0
 12241                           
 12242                           ; BSR set to: 0
 12243  010FA4  0100               	movlb	0	; () banked
 12244  010FA6  A16E               	btfss	___fldiv@b& (0+255),0,b
 12245  010FA8  D003               	goto	l2945
 12246  010FAA                     u10380:
 12247                           
 12248                           ; BSR set to: 0
 12249  010FAA  0E01               	movlw	1
 12250  010FAC  0100               	movlb	0	; () banked
 12251  010FAE  6F86               	movwf	___fldiv@aexp& (0+255),b
 12252  010FB0                     l2945:
 12253                           
 12254                           ; BSR set to: 0
 12255                           
 12256                           ; BSR set to: 0
 12257                           
 12258                           ; BSR set to: 0
 12259  010FB0  0100               	movlb	0	; () banked
 12260  010FB2  5186               	movf	___fldiv@aexp& (0+255),w,b
 12261  010FB4  0100               	movlb	0	; () banked
 12262  010FB6  B4D8               	btfsc	status,2,c
 12263  010FB8  D023               	goto	l2947
 12264                           
 12265                           ; BSR set to: 0
 12266  010FBA  0E01               	movlw	1
 12267  010FBC  0100               	movlb	0	; () banked
 12268  010FBE  276E               	addwf	___fldiv@b& (0+255),f,b
 12269  010FC0  0E00               	movlw	0
 12270  010FC2  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12271  010FC4  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12272  010FC6  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12273                           
 12274                           ; BSR set to: 0
 12275  010FC8  0100               	movlb	0	; () banked
 12276  010FCA  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 12277  010FCC  D019               	goto	l2947
 12278                           
 12279                           ; BSR set to: 0
 12280  010FCE  C06E  F076         	movff	___fldiv@b,??___fldiv
 12281  010FD2  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 12282  010FD6  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 12283  010FDA  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 12284  010FDE  0100               	movlb	0	; () banked
 12285  010FE0  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 12286  010FE2  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 12287  010FE4  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 12288  010FE6  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 12289  010FE8  3376               	rrcf	??___fldiv& (0+255),f,b
 12290  010FEA  C076  F06E         	movff	??___fldiv,___fldiv@b
 12291  010FEE  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 12292  010FF2  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 12293  010FF6  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 12294                           
 12295                           ; BSR set to: 0
 12296  010FFA  0100               	movlb	0	; () banked
 12297  010FFC  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 12298  010FFE  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12299  011000                     l2947:
 12300                           
 12301                           ; BSR set to: 0
 12302                           
 12303                           ; BSR set to: 0
 12304                           
 12305                           ; BSR set to: 0
 12306  011000  0100               	movlb	0	; () banked
 12307  011002  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12308  011004  D014               	goto	l2948
 12309  011006  0100               	movlb	0	; () banked
 12310  011008  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12311  01100A  E104               	bnz	u10410
 12312  01100C  0100               	movlb	0	; () banked
 12313  01100E  297F               	incf	___fldiv@new_exp& (0+255),w,b
 12314  011010  A0D8               	btfss	status,0,c
 12315  011012  D00D               	goto	l2948
 12316  011014                     u10410:
 12317                           
 12318                           ; BSR set to: 0
 12319  011014  0E00               	movlw	0
 12320  011016  0100               	movlb	0	; () banked
 12321  011018  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12322  01101A  697F               	setf	___fldiv@new_exp& (0+255),b
 12323  01101C  0E00               	movlw	0
 12324  01101E  0100               	movlb	0	; () banked
 12325  011020  6F6E               	movwf	___fldiv@b& (0+255),b
 12326  011022  0E00               	movlw	0
 12327  011024  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12328  011026  0E00               	movlw	0
 12329  011028  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12330  01102A  0E00               	movlw	0
 12331  01102C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12332  01102E                     l2948:
 12333                           
 12334                           ; BSR set to: 0
 12335                           
 12336                           ; BSR set to: 0
 12337  01102E  0100               	movlb	0	; () banked
 12338  011030  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12339  011032  D007               	goto	u10420
 12340  011034  0100               	movlb	0	; () banked
 12341  011036  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12342  011038  E115               	bnz	l13817
 12343  01103A  0100               	movlb	0	; () banked
 12344  01103C  057F               	decf	___fldiv@new_exp& (0+255),w,b
 12345  01103E  B0D8               	btfsc	status,0,c
 12346  011040  D011               	goto	l2949
 12347  011042                     u10420:
 12348                           
 12349                           ; BSR set to: 0
 12350  011042  0E00               	movlw	0
 12351  011044  0100               	movlb	0	; () banked
 12352  011046  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12353  011048  0E00               	movlw	0
 12354  01104A  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 12355  01104C  0E00               	movlw	0
 12356  01104E  0100               	movlb	0	; () banked
 12357  011050  6F6E               	movwf	___fldiv@b& (0+255),b
 12358  011052  0E00               	movlw	0
 12359  011054  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12360  011056  0E00               	movlw	0
 12361  011058  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12362  01105A  0E00               	movlw	0
 12363  01105C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12364  01105E  0E00               	movlw	0
 12365  011060  0100               	movlb	0	; () banked
 12366  011062  6F7A               	movwf	___fldiv@sign& (0+255),b
 12367  011064                     l2949:
 12368  011064                     l13817:
 12369                           
 12370                           ; BSR set to: 0
 12371  011064  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 12372                           
 12373                           ; BSR set to: 0
 12374  011068  0100               	movlb	0	; () banked
 12375  01106A  A185               	btfss	___fldiv@bexp& (0+255),0,b
 12376  01106C  D003               	goto	l2950
 12377                           
 12378                           ; BSR set to: 0
 12379  01106E  0100               	movlb	0	; () banked
 12380  011070  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 12381  011072  D002               	goto	l2951
 12382  011074                     l2950:
 12383                           
 12384                           ; BSR set to: 0
 12385                           
 12386                           ; BSR set to: 0
 12387  011074  0100               	movlb	0	; () banked
 12388  011076  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 12389  011078                     l2951:
 12390                           
 12391                           ; BSR set to: 0
 12392                           
 12393                           ; BSR set to: 0
 12394  011078  0100               	movlb	0	; () banked
 12395  01107A  90D8               	bcf	status,0,c
 12396  01107C  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 12397  01107E  0100               	movlb	0	; () banked
 12398  011080  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12399                           
 12400                           ; BSR set to: 0
 12401  011082  0100               	movlb	0	; () banked
 12402  011084  517A               	movf	___fldiv@sign& (0+255),w,b
 12403  011086  0100               	movlb	0	; () banked
 12404  011088  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12405                           
 12406                           ; BSR set to: 0
 12407  01108A  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12408  01108E  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12409  011092  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12410  011096  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12411  01109A  0012               	return	
 12412  01109C                     __end_of___fldiv:
 12413                           	opt stack 0
 12414                           tblptru	equ	0xFF8
 12415                           tblptrh	equ	0xFF7
 12416                           tblptrl	equ	0xFF6
 12417                           tablat	equ	0xFF5
 12418                           prodh	equ	0xFF4
 12419                           prodl	equ	0xFF3
 12420                           intcon	equ	0xFF2
 12421                           postinc0	equ	0xFEE
 12422                           wreg	equ	0xFE8
 12423                           postdec1	equ	0xFE5
 12424                           fsr1h	equ	0xFE2
 12425                           fsr1l	equ	0xFE1
 12426                           indf2	equ	0xFDF
 12427                           postinc2	equ	0xFDE
 12428                           postdec2	equ	0xFDD
 12429                           fsr2h	equ	0xFDA
 12430                           fsr2l	equ	0xFD9
 12431                           status	equ	0xFD8
 12432                           
 12433 ;; *************** function _init *****************
 12434 ;; Defined at:
 12435 ;;		line 61 in file "main.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;		None
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;		None
 12440 ;; Return value:  Size  Location     Type
 12441 ;;                  1    wreg      void 
 12442 ;; Registers used:
 12443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12444 ;; Tracked objects:
 12445 ;;		On entry : 0/0
 12446 ;;		On exit  : 0/0
 12447 ;;		Unchanged: 0/0
 12448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12453 ;;Total ram usage:        0 bytes
 12454 ;; Hardware stack levels used:    1
 12455 ;; Hardware stack levels required when called:   17
 12456 ;; This function calls:
 12457 ;;		_ADC_Init
 12458 ;;		_ADC_Start
 12459 ;;		_Console_Init
 12460 ;;		_HMI_Init
 12461 ;;		_ISR_Enable
 12462 ;;		_LCD_Init
 12463 ;;		_MXK_BlockSwitchTo
 12464 ;;		_MXK_Dequeue
 12465 ;;		_MXK_Init
 12466 ;;		_MXK_Release
 12467 ;;		_Motor_Init
 12468 ;;		_delay_ms
 12469 ;;		_eusart_init
 12470 ;;		_irobot_init
 12471 ;;		_irobot_init_song_0
 12472 ;;		_irobot_led_power_on
 12473 ;; This function is called by:
 12474 ;;		_main
 12475 ;; This function uses a non-reentrant model
 12476 ;;
 12477                           
 12478                           	psect	text46
 12479  01471E                     __ptext46:
 12480                           	opt stack 0
 12481  01471E                     _init:
 12482                           	opt stack 13
 12483                           
 12484                           ;main.c: 63: MXK_Init();
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;incstack = 0
 12488  01471E  EC8A  F096         	call	_MXK_Init	;wreg free
 12489                           
 12490                           ;main.c: 66: ISR_Enable();
 12491  014722  ECB8  F0B2         	call	_ISR_Enable	;wreg free
 12492                           
 12493                           ;main.c: 69: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12494  014726  0E01               	movlw	1
 12495  014728  EC1C  F0AF         	call	_MXK_BlockSwitchTo
 12496  01472C  0900               	iorlw	0
 12497  01472E  B4D8               	btfsc	status,2,c
 12498  014730  D00C               	goto	l2297
 12499                           
 12500                           ;main.c: 70: Console_Init();
 12501  014732  ECA7  F0A6         	call	_Console_Init	;wreg free
 12502                           
 12503                           ;main.c: 71: HMI_Init();
 12504  014736  EC8A  F090         	call	_HMI_Init	;wreg free
 12505                           
 12506                           ;main.c: 72: LCD_Init();
 12507  01473A  EC4A  F097         	call	_LCD_Init	;wreg free
 12508                           
 12509                           ;main.c: 73: if (MXK_Release())
 12510  01473E  ECB9  F0B1         	call	_MXK_Release	;wreg free
 12511  014742  0900               	iorlw	0
 12512  014744  A4D8               	btfss	status,2,c
 12513                           
 12514                           ;main.c: 74: MXK_Dequeue();
 12515  014746  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
 12516  01474A                     l2297:
 12517                           
 12518                           ;main.c: 75: }
 12519                           ;main.c: 78: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12520  01474A  0E08               	movlw	8
 12521  01474C  EC1C  F0AF         	call	_MXK_BlockSwitchTo
 12522  014750  0900               	iorlw	0
 12523  014752  B4D8               	btfsc	status,2,c
 12524  014754  D013               	goto	l2299
 12525                           
 12526                           ;main.c: 79: Motor_Init(&Stepper, 0b1000);
 12527  014756  0EC6               	movlw	low _Stepper
 12528  014758  0100               	movlb	0	; () banked
 12529  01475A  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 12530  01475C  0E03               	movlw	high _Stepper
 12531  01475E  0100               	movlb	0	; () banked
 12532  014760  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12533  014762  0E00               	movlw	0
 12534  014764  0100               	movlb	0	; () banked
 12535  014766  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12536  014768  0E08               	movlw	8
 12537  01476A  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 12538  01476C  EC0C  F09E         	call	_Motor_Init	;wreg free
 12539                           
 12540                           ;main.c: 80: if (MXK_Release())
 12541  014770  ECB9  F0B1         	call	_MXK_Release	;wreg free
 12542  014774  0900               	iorlw	0
 12543  014776  A4D8               	btfss	status,2,c
 12544                           
 12545                           ;main.c: 81: MXK_Dequeue();
 12546  014778  ECFD  F0AE         	call	_MXK_Dequeue	;wreg free
 12547  01477C                     l2299:
 12548                           
 12549                           ;main.c: 82: }
 12550                           ;main.c: 85: ADC_Init(&ADC_AN0, eADC_Ch0);
 12551  01477C  0EF4               	movlw	low _ADC_AN0
 12552  01477E  0100               	movlb	0	; () banked
 12553  014780  6F64               	movwf	ADC_Init@pInput& (0+255),b
 12554  014782  0E00               	movlw	high _ADC_AN0
 12555  014784  0100               	movlb	0	; () banked
 12556  014786  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12557  014788  0E00               	movlw	0
 12558  01478A  0100               	movlb	0	; () banked
 12559  01478C  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 12560  01478E  EC36  F0A8         	call	_ADC_Init	;wreg free
 12561                           
 12562                           ;main.c: 86: float ADC_Voltage(ADCPtr plnput);
 12563                           ;main.c: 87: ADC_Start(&ADC_AN0);
 12564  014792  0EF4               	movlw	low _ADC_AN0
 12565  014794  0100               	movlb	0	; () banked
 12566  014796  6F62               	movwf	ADC_Start@pInput& (0+255),b
 12567  014798  0E00               	movlw	high _ADC_AN0
 12568  01479A  0100               	movlb	0	; () banked
 12569  01479C  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 12570  01479E  EC75  F0A7         	call	_ADC_Start	;wreg free
 12571                           
 12572                           ;main.c: 89: eusart_init();
 12573  0147A2  EC34  F0B1         	call	_eusart_init	;wreg free
 12574                           
 12575                           ;main.c: 90: irobot_init();
 12576  0147A6  EC78  F0B2         	call	_irobot_init	;wreg free
 12577                           
 12578                           ;main.c: 92: irobot_led_power_on(0xA);
 12579  0147AA  0E0A               	movlw	10
 12580  0147AC  ECAB  F0B1         	call	_irobot_led_power_on
 12581                           
 12582                           ;main.c: 93: irobot_init_song_0();
 12583  0147B0  EC15  F0B1         	call	_irobot_init_song_0	;wreg free
 12584                           
 12585                           ;main.c: 94: delay_ms(20);
 12586  0147B4  0E00               	movlw	0
 12587  0147B6  0100               	movlb	0	; () banked
 12588  0147B8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12589  0147BA  0E14               	movlw	20
 12590  0147BC  6F60               	movwf	delay_ms@ms& (0+255),b
 12591  0147BE  ECAB  F0AA         	call	_delay_ms	;wreg free
 12592  0147C2  0012               	return		;funcret
 12593  0147C4                     __end_of_init:
 12594                           	opt stack 0
 12595                           tblptru	equ	0xFF8
 12596                           tblptrh	equ	0xFF7
 12597                           tblptrl	equ	0xFF6
 12598                           tablat	equ	0xFF5
 12599                           prodh	equ	0xFF4
 12600                           prodl	equ	0xFF3
 12601                           intcon	equ	0xFF2
 12602                           postinc0	equ	0xFEE
 12603                           wreg	equ	0xFE8
 12604                           postdec1	equ	0xFE5
 12605                           fsr1h	equ	0xFE2
 12606                           fsr1l	equ	0xFE1
 12607                           indf2	equ	0xFDF
 12608                           postinc2	equ	0xFDE
 12609                           postdec2	equ	0xFDD
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function _irobot_led_power_on *****************
 12615 ;; Defined at:
 12616 ;;		line 304 in file "Library/iRobotSerial.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  powerOnColou    1    wreg     unsigned char 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      void 
 12623 ;; Registers used:
 12624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;Total ram usage:        1 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    9
 12637 ;; This function calls:
 12638 ;;		_irobot_leds
 12639 ;; This function is called by:
 12640 ;;		_init
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text47
 12645  016356                     __ptext47:
 12646                           	opt stack 0
 12647  016356                     _irobot_led_power_on:
 12648                           	opt stack 20
 12649                           
 12650                           ;incstack = 0
 12651                           ;irobot_led_power_on@powerOnColour stored from wreg
 12652  016356  0100               	movlb	0	; () banked
 12653  016358  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 12654                           
 12655                           ;iRobotSerial.c: 305: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 12656  01635A  0E00               	movlw	0
 12657  01635C  0100               	movlb	0	; () banked
 12658  01635E  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 12659  016360  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 12660  016364  0EFF               	movlw	255
 12661  016366  0100               	movlb	0	; () banked
 12662  016368  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 12663  01636A  0E00               	movlw	0
 12664  01636C  EC6A  F0AC         	call	_irobot_leds
 12665  016370  0012               	return		;funcret
 12666  016372                     __end_of_irobot_led_power_on:
 12667                           	opt stack 0
 12668                           tblptru	equ	0xFF8
 12669                           tblptrh	equ	0xFF7
 12670                           tblptrl	equ	0xFF6
 12671                           tablat	equ	0xFF5
 12672                           prodh	equ	0xFF4
 12673                           prodl	equ	0xFF3
 12674                           intcon	equ	0xFF2
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           postdec1	equ	0xFE5
 12678                           fsr1h	equ	0xFE2
 12679                           fsr1l	equ	0xFE1
 12680                           indf2	equ	0xFDF
 12681                           postinc2	equ	0xFDE
 12682                           postdec2	equ	0xFDD
 12683                           fsr2h	equ	0xFDA
 12684                           fsr2l	equ	0xFD9
 12685                           status	equ	0xFD8
 12686                           
 12687 ;; *************** function _irobot_leds *****************
 12688 ;; Defined at:
 12689 ;;		line 239 in file "Library/iRobotSerial.c"
 12690 ;; Parameters:    Size  Location     Type
 12691 ;;  isScript        1    wreg     unsigned char 
 12692 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 12693 ;;  powerColour     1   17[BANK0 ] unsigned char 
 12694 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;  isScript        1   19[BANK0 ] unsigned char 
 12697 ;; Return value:  Size  Location     Type
 12698 ;;                  1    wreg      void 
 12699 ;; Registers used:
 12700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12701 ;; Tracked objects:
 12702 ;;		On entry : 0/0
 12703 ;;		On exit  : 0/0
 12704 ;;		Unchanged: 0/0
 12705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12706 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;Total ram usage:        4 bytes
 12711 ;; Hardware stack levels used:    1
 12712 ;; Hardware stack levels required when called:    8
 12713 ;; This function calls:
 12714 ;;		_eusart_putch
 12715 ;;		_load_iRScriptStack
 12716 ;; This function is called by:
 12717 ;;		_irobot_led_power_on
 12718 ;;		_irobot_led_power_off
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           	psect	text48
 12723  0158D4                     __ptext48:
 12724                           	opt stack 0
 12725  0158D4                     _irobot_leds:
 12726                           	opt stack 20
 12727                           
 12728                           ;incstack = 0
 12729                           ;irobot_leds@isScript stored from wreg
 12730  0158D4  0100               	movlb	0	; () banked
 12731  0158D6  6F73               	movwf	irobot_leds@isScript& (0+255),b
 12732                           
 12733                           ;iRobotSerial.c: 240: if (isScript) {
 12734  0158D8  0100               	movlb	0	; () banked
 12735  0158DA  5173               	movf	irobot_leds@isScript& (0+255),w,b
 12736  0158DC  0100               	movlb	0	; () banked
 12737  0158DE  B4D8               	btfsc	status,2,c
 12738  0158E0  D015               	goto	l2144
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 12742                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 12743  0158E2  0E00               	movlw	0
 12744  0158E4  0100               	movlb	0	; () banked
 12745  0158E6  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 12746  0158E8  0E8B               	movlw	139
 12747  0158EA  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 12748  0158EC  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 12749  0158F0  0100               	movlb	0	; () banked
 12750  0158F2  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 12751  0158F4  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 12752  0158F8  0100               	movlb	0	; () banked
 12753  0158FA  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 12754  0158FC  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 12755  015900  0100               	movlb	0	; () banked
 12756  015902  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 12757  015904  0E04               	movlw	4
 12758  015906  EC76  F0AA         	call	_load_iRScriptStack
 12759                           
 12760                           ;iRobotSerial.c: 243: }
 12761  01590A  0012               	return	
 12762  01590C                     l2144:
 12763                           
 12764                           ;iRobotSerial.c: 244: else{
 12765                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 12766  01590C  0E8B               	movlw	139
 12767  01590E  EC7F  F0B2         	call	_eusart_putch
 12768                           
 12769                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 12770  015912  0100               	movlb	0	; () banked
 12771  015914  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 12772  015916  EC7F  F0B2         	call	_eusart_putch
 12773                           
 12774                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 12775  01591A  0100               	movlb	0	; () banked
 12776  01591C  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 12777  01591E  EC7F  F0B2         	call	_eusart_putch
 12778                           
 12779                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 12780  015922  0100               	movlb	0	; () banked
 12781  015924  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 12782  015926  EC7F  F0B2         	call	_eusart_putch
 12783  01592A  0012               	return	
 12784  01592C                     __end_of_irobot_leds:
 12785                           	opt stack 0
 12786                           tblptru	equ	0xFF8
 12787                           tblptrh	equ	0xFF7
 12788                           tblptrl	equ	0xFF6
 12789                           tablat	equ	0xFF5
 12790                           prodh	equ	0xFF4
 12791                           prodl	equ	0xFF3
 12792                           intcon	equ	0xFF2
 12793                           postinc0	equ	0xFEE
 12794                           wreg	equ	0xFE8
 12795                           postdec1	equ	0xFE5
 12796                           fsr1h	equ	0xFE2
 12797                           fsr1l	equ	0xFE1
 12798                           indf2	equ	0xFDF
 12799                           postinc2	equ	0xFDE
 12800                           postdec2	equ	0xFDD
 12801                           fsr2h	equ	0xFDA
 12802                           fsr2l	equ	0xFD9
 12803                           status	equ	0xFD8
 12804                           
 12805 ;; *************** function _load_iRScriptStack *****************
 12806 ;; Defined at:
 12807 ;;		line 176 in file "Library/iRobotSerial.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;  bytesToLoad     1    wreg     unsigned char 
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 12812 ;;  i               1   15[BANK0 ] unsigned char 
 12813 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 12814 ;;		 -> ?_load_iRScriptStack(1), 
 12815 ;; Return value:  Size  Location     Type
 12816 ;;                  1    wreg      void 
 12817 ;; Registers used:
 12818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12819 ;; Tracked objects:
 12820 ;;		On entry : 0/0
 12821 ;;		On exit  : 0/0
 12822 ;;		Unchanged: 0/0
 12823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12824 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12825 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12827 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12828 ;;Total ram usage:       16 bytes
 12829 ;; Hardware stack levels used:    1
 12830 ;; Hardware stack levels required when called:    7
 12831 ;; This function calls:
 12832 ;;		Nothing
 12833 ;; This function is called by:
 12834 ;;		_irobot_move
 12835 ;;		_irobot_leds
 12836 ;;		_irobot_angle_wait
 12837 ;;		_irobot_distance_wait
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           	psect	text49
 12842  0154EC                     __ptext49:
 12843                           	opt stack 0
 12844  0154EC                     _load_iRScriptStack:
 12845                           	opt stack 20
 12846                           
 12847                           ;incstack = 0
 12848                           ;load_iRScriptStack@bytesToLoad stored from wreg
 12849  0154EC  0100               	movlb	0	; () banked
 12850  0154EE  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 12851                           
 12852                           ;iRobotSerial.c: 177: va_list loadByte;
 12853                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 12854  0154F0  0E60               	movlw	low ?_load_iRScriptStack
 12855  0154F2  0100               	movlb	0	; () banked
 12856  0154F4  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 12857  0154F6  0E00               	movlw	high ?_load_iRScriptStack
 12858  0154F8  0100               	movlb	0	; () banked
 12859  0154FA  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 12860                           
 12861                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 12862  0154FC  0E00               	movlw	0
 12863  0154FE  0100               	movlb	0	; () banked
 12864  015500  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 12865  015502  D01F               	goto	l2118
 12866  015504                     
 12867                           ; BSR set to: 0
 12868                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 12869                           
 12870                           ; BSR set to: 0
 12871  015504  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 12872  015508  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 12873  01550C  0100               	movlb	0	; () banked
 12874  01550E  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 12875  015510  C037  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 12876  015514  0100               	movlb	0	; () banked
 12877  015516  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 12878  015518  0100               	movlb	0	; () banked
 12879  01551A  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 12880  01551C  0E00               	movlw	0
 12881  01551E  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 12882  015520  0E1E               	movlw	low _iRScriptStack
 12883  015522  0100               	movlb	0	; () banked
 12884  015524  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 12885  015526  6EE1               	movwf	fsr1l,c
 12886  015528  0E04               	movlw	high _iRScriptStack
 12887  01552A  0100               	movlb	0	; () banked
 12888  01552C  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 12889  01552E  6EE2               	movwf	fsr1h,c
 12890  015530  CFDF FFE7          	movff	indf2,indf1
 12891                           
 12892                           ; BSR set to: 0
 12893  015534  0E02               	movlw	2
 12894  015536  0100               	movlb	0	; () banked
 12895  015538  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 12896  01553A  0E00               	movlw	0
 12897  01553C  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 12898                           
 12899                           ; BSR set to: 0
 12900  01553E  0100               	movlb	0	; () banked
 12901  015540  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 12902  015542                     l2118:
 12903                           
 12904                           ; BSR set to: 0
 12905                           
 12906                           ; BSR set to: 0
 12907  015542  0100               	movlb	0	; () banked
 12908  015544  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 12909  015546  0100               	movlb	0	; () banked
 12910  015548  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 12911  01554A  A0D8               	btfss	status,0,c
 12912  01554C  D7DB               	goto	l2119
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;iRobotSerial.c: 181: }
 12916                           ;iRobotSerial.c: 182: ;
 12917                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 12918                           
 12919                           ; BSR set to: 0
 12920  01554E  0100               	movlb	0	; () banked
 12921  015550  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 12922  015552  2637               	addwf	_iRScriptIndex,f,c
 12923                           
 12924                           ; BSR set to: 0
 12925  015554  0012               	return		;funcret
 12926  015556                     __end_of_load_iRScriptStack:
 12927                           	opt stack 0
 12928                           tblptru	equ	0xFF8
 12929                           tblptrh	equ	0xFF7
 12930                           tblptrl	equ	0xFF6
 12931                           tablat	equ	0xFF5
 12932                           prodh	equ	0xFF4
 12933                           prodl	equ	0xFF3
 12934                           intcon	equ	0xFF2
 12935                           postinc0	equ	0xFEE
 12936                           wreg	equ	0xFE8
 12937                           indf1	equ	0xFE7
 12938                           postdec1	equ	0xFE5
 12939                           fsr1h	equ	0xFE2
 12940                           fsr1l	equ	0xFE1
 12941                           indf2	equ	0xFDF
 12942                           postinc2	equ	0xFDE
 12943                           postdec2	equ	0xFDD
 12944                           fsr2h	equ	0xFDA
 12945                           fsr2l	equ	0xFD9
 12946                           status	equ	0xFD8
 12947                           
 12948 ;; *************** function _irobot_init_song_0 *****************
 12949 ;; Defined at:
 12950 ;;		line 252 in file "Library/iRobotSerial.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;		None
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;		None
 12955 ;; Return value:  Size  Location     Type
 12956 ;;                  1    wreg      void 
 12957 ;; Registers used:
 12958 ;;		wreg, cstack
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;Total ram usage:        0 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    8
 12971 ;; This function calls:
 12972 ;;		_eusart_putch
 12973 ;; This function is called by:
 12974 ;;		_init
 12975 ;; This function uses a non-reentrant model
 12976 ;;
 12977                           
 12978                           	psect	text50
 12979  01622A                     __ptext50:
 12980                           	opt stack 0
 12981  01622A                     _irobot_init_song_0:
 12982                           	opt stack 21
 12983                           
 12984                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;incstack = 0
 12988  01622A  0E8C               	movlw	140
 12989  01622C  EC7F  F0B2         	call	_eusart_putch
 12990                           
 12991                           ;iRobotSerial.c: 254: eusart_putch(0);
 12992  016230  0E00               	movlw	0
 12993  016232  EC7F  F0B2         	call	_eusart_putch
 12994                           
 12995                           ;iRobotSerial.c: 255: eusart_putch(1);
 12996  016236  0E01               	movlw	1
 12997  016238  EC7F  F0B2         	call	_eusart_putch
 12998                           
 12999                           ;iRobotSerial.c: 256: eusart_putch(60);
 13000  01623C  0E3C               	movlw	60
 13001  01623E  EC7F  F0B2         	call	_eusart_putch
 13002                           
 13003                           ;iRobotSerial.c: 257: eusart_putch(4);
 13004  016242  0E04               	movlw	4
 13005  016244  EC7F  F0B2         	call	_eusart_putch
 13006  016248  0012               	return		;funcret
 13007  01624A                     __end_of_irobot_init_song_0:
 13008                           	opt stack 0
 13009                           tblptru	equ	0xFF8
 13010                           tblptrh	equ	0xFF7
 13011                           tblptrl	equ	0xFF6
 13012                           tablat	equ	0xFF5
 13013                           prodh	equ	0xFF4
 13014                           prodl	equ	0xFF3
 13015                           intcon	equ	0xFF2
 13016                           postinc0	equ	0xFEE
 13017                           wreg	equ	0xFE8
 13018                           indf1	equ	0xFE7
 13019                           postdec1	equ	0xFE5
 13020                           fsr1h	equ	0xFE2
 13021                           fsr1l	equ	0xFE1
 13022                           indf2	equ	0xFDF
 13023                           postinc2	equ	0xFDE
 13024                           postdec2	equ	0xFDD
 13025                           fsr2h	equ	0xFDA
 13026                           fsr2l	equ	0xFD9
 13027                           status	equ	0xFD8
 13028                           
 13029 ;; *************** function _irobot_init *****************
 13030 ;; Defined at:
 13031 ;;		line 198 in file "Library/iRobotSerial.c"
 13032 ;; Parameters:    Size  Location     Type
 13033 ;;		None
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;		None
 13036 ;; Return value:  Size  Location     Type
 13037 ;;                  1    wreg      void 
 13038 ;; Registers used:
 13039 ;;		wreg, cstack
 13040 ;; Tracked objects:
 13041 ;;		On entry : 0/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;Total ram usage:        0 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:    8
 13052 ;; This function calls:
 13053 ;;		_eusart_putch
 13054 ;; This function is called by:
 13055 ;;		_init
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           	psect	text51
 13060  0164F0                     __ptext51:
 13061                           	opt stack 0
 13062  0164F0                     _irobot_init:
 13063                           	opt stack 21
 13064                           
 13065                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 13066                           
 13067                           ;incstack = 0
 13068  0164F0  0E80               	movlw	128
 13069  0164F2  EC7F  F0B2         	call	_eusart_putch
 13070                           
 13071                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 13072  0164F6  0E84               	movlw	132
 13073  0164F8  EC7F  F0B2         	call	_eusart_putch
 13074  0164FC  0012               	return		;funcret
 13075  0164FE                     __end_of_irobot_init:
 13076                           	opt stack 0
 13077                           tblptru	equ	0xFF8
 13078                           tblptrh	equ	0xFF7
 13079                           tblptrl	equ	0xFF6
 13080                           tablat	equ	0xFF5
 13081                           prodh	equ	0xFF4
 13082                           prodl	equ	0xFF3
 13083                           intcon	equ	0xFF2
 13084                           postinc0	equ	0xFEE
 13085                           wreg	equ	0xFE8
 13086                           indf1	equ	0xFE7
 13087                           postdec1	equ	0xFE5
 13088                           fsr1h	equ	0xFE2
 13089                           fsr1l	equ	0xFE1
 13090                           indf2	equ	0xFDF
 13091                           postinc2	equ	0xFDE
 13092                           postdec2	equ	0xFDD
 13093                           fsr2h	equ	0xFDA
 13094                           fsr2l	equ	0xFD9
 13095                           status	equ	0xFD8
 13096                           
 13097 ;; *************** function _eusart_putch *****************
 13098 ;; Defined at:
 13099 ;;		line 120 in file "Library/iRobotSerial.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;  eusartSendCh    1    wreg     unsigned char 
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13104 ;; Return value:  Size  Location     Type
 13105 ;;                  1    wreg      void 
 13106 ;; Registers used:
 13107 ;;		wreg
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13116 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13117 ;;Total ram usage:        1 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    7
 13120 ;; This function calls:
 13121 ;;		Nothing
 13122 ;; This function is called by:
 13123 ;;		_irobot_query_and_update
 13124 ;;		_irobot_init
 13125 ;;		_irobot_move
 13126 ;;		_irobot_leds
 13127 ;;		_irobot_init_song_0
 13128 ;;		_irobot_song_play
 13129 ;;		_irobot_script_play
 13130 ;; This function uses a non-reentrant model
 13131 ;;
 13132                           
 13133                           	psect	text52
 13134  0164FE                     __ptext52:
 13135                           	opt stack 0
 13136  0164FE                     _eusart_putch:
 13137                           	opt stack 20
 13138                           
 13139                           ;incstack = 0
 13140                           ;eusart_putch@eusartSendChar stored from wreg
 13141  0164FE  0100               	movlb	0	; () banked
 13142  016500  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13143  016502                     
 13144                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13145  016502  A2AD               	btfss	4013,1,c	;volatile
 13146  016504  D7FE               	goto	l12735
 13147                           
 13148                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13149  016506  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13150  01650A  0012               	return		;funcret
 13151  01650C                     __end_of_eusart_putch:
 13152                           	opt stack 0
 13153                           tblptru	equ	0xFF8
 13154                           tblptrh	equ	0xFF7
 13155                           tblptrl	equ	0xFF6
 13156                           tablat	equ	0xFF5
 13157                           prodh	equ	0xFF4
 13158                           prodl	equ	0xFF3
 13159                           intcon	equ	0xFF2
 13160                           postinc0	equ	0xFEE
 13161                           wreg	equ	0xFE8
 13162                           indf1	equ	0xFE7
 13163                           postdec1	equ	0xFE5
 13164                           fsr1h	equ	0xFE2
 13165                           fsr1l	equ	0xFE1
 13166                           indf2	equ	0xFDF
 13167                           postinc2	equ	0xFDE
 13168                           postdec2	equ	0xFDD
 13169                           fsr2h	equ	0xFDA
 13170                           fsr2l	equ	0xFD9
 13171                           status	equ	0xFD8
 13172                           
 13173 ;; *************** function _eusart_init *****************
 13174 ;; Defined at:
 13175 ;;		line 103 in file "Library/iRobotSerial.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;		None
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;		None
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  1    wreg      void 
 13182 ;; Registers used:
 13183 ;;		wreg, status,2
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13193 ;;Total ram usage:        0 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    7
 13196 ;; This function calls:
 13197 ;;		Nothing
 13198 ;; This function is called by:
 13199 ;;		_init
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           	psect	text53
 13204  016268                     __ptext53:
 13205                           	opt stack 0
 13206  016268                     _eusart_init:
 13207                           	opt stack 22
 13208                           
 13209                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13210                           
 13211                           ;incstack = 0
 13212  016268  9C94               	bcf	3988,6,c	;volatile
 13213                           
 13214                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13215  01626A  8E94               	bsf	3988,7,c	;volatile
 13216                           
 13217                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13218  01626C  0E24               	movlw	36
 13219  01626E  6EAD               	movwf	4013,c	;volatile
 13220                           
 13221                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13222  016270  0E98               	movlw	152
 13223  016272  6EAC               	movwf	4012,c	;volatile
 13224                           
 13225                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13226  016274  9A7E               	bcf	3966,5,c	;volatile
 13227                           
 13228                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13229  016276  987E               	bcf	3966,4,c	;volatile
 13230                           
 13231                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13232  016278  927E               	bcf	3966,1,c	;volatile
 13233                           
 13234                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13235  01627A  907E               	bcf	3966,0,c	;volatile
 13236                           
 13237                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13238  01627C  84AD               	bsf	4013,2,c	;volatile
 13239                           
 13240                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13241  01627E  967E               	bcf	3966,3,c	;volatile
 13242                           
 13243                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13244  016280  0E33               	movlw	51
 13245  016282  6EB0               	movwf	4016,c	;volatile
 13246  016284  0012               	return		;funcret
 13247  016286                     __end_of_eusart_init:
 13248                           	opt stack 0
 13249                           tblptru	equ	0xFF8
 13250                           tblptrh	equ	0xFF7
 13251                           tblptrl	equ	0xFF6
 13252                           tablat	equ	0xFF5
 13253                           prodh	equ	0xFF4
 13254                           prodl	equ	0xFF3
 13255                           intcon	equ	0xFF2
 13256                           postinc0	equ	0xFEE
 13257                           wreg	equ	0xFE8
 13258                           indf1	equ	0xFE7
 13259                           postdec1	equ	0xFE5
 13260                           fsr1h	equ	0xFE2
 13261                           fsr1l	equ	0xFE1
 13262                           indf2	equ	0xFDF
 13263                           postinc2	equ	0xFDE
 13264                           postdec2	equ	0xFDD
 13265                           fsr2h	equ	0xFDA
 13266                           fsr2l	equ	0xFD9
 13267                           status	equ	0xFD8
 13268                           
 13269 ;; *************** function _Motor_Init *****************
 13270 ;; Defined at:
 13271 ;;		line 26 in file "Library/Motor.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13274 ;;		 -> Stepper(6), 
 13275 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13276 ;; Auto vars:     Size  Location     Type
 13277 ;;		None
 13278 ;; Return value:  Size  Location     Type
 13279 ;;                  1    wreg      void 
 13280 ;; Registers used:
 13281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13282 ;; Tracked objects:
 13283 ;;		On entry : 0/0
 13284 ;;		On exit  : 0/0
 13285 ;;		Unchanged: 0/0
 13286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13287 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13290 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13291 ;;Total ram usage:        4 bytes
 13292 ;; Hardware stack levels used:    1
 13293 ;; Hardware stack levels required when called:   12
 13294 ;; This function calls:
 13295 ;;		_Port_SetPin
 13296 ;;		_Port_SetPinType
 13297 ;;		_Timer0_Init
 13298 ;; This function is called by:
 13299 ;;		_init
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           	psect	text54
 13304  013C18                     __ptext54:
 13305                           	opt stack 0
 13306  013C18                     _Motor_Init:
 13307                           	opt stack 17
 13308                           
 13309                           ;Motor.c: 28: pMotor->mDelta = 0;
 13310                           
 13311                           ;incstack = 0
 13312  013C18  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13313  013C1C  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13314  013C20  0E00               	movlw	0
 13315  013C22  6EDE               	movwf	postinc2,c
 13316  013C24  0E00               	movlw	0
 13317  013C26  6EDD               	movwf	postdec2,c
 13318                           
 13319                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13320  013C28  0100               	movlb	0	; () banked
 13321  013C2A  EE20 F002          	lfsr	2,2
 13322  013C2E  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 13323  013C30  26D9               	addwf	fsr2l,f,c
 13324  013C32  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13325  013C34  22DA               	addwfc	fsr2h,f,c
 13326  013C36  0E00               	movlw	0
 13327  013C38  6EDE               	movwf	postinc2,c
 13328  013C3A  0E00               	movlw	0
 13329  013C3C  6EDD               	movwf	postdec2,c
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13333  013C3E  0100               	movlb	0	; () banked
 13334  013C40  EE20 F004          	lfsr	2,4
 13335  013C44  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 13336  013C46  26D9               	addwf	fsr2l,f,c
 13337  013C48  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13338  013C4A  22DA               	addwfc	fsr2h,f,c
 13339  013C4C  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 13340  013C50  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13341                           
 13342                           ; BSR set to: 0
 13343                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13344  013C54  0E97               	movlw	low _PortE
 13345  013C56  0100               	movlb	0	; () banked
 13346  013C58  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13347  013C5A  0E03               	movlw	high _PortE
 13348  013C5C  0100               	movlb	0	; () banked
 13349  013C5E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13350  013C60  0E00               	movlw	0
 13351  013C62  0100               	movlb	0	; () banked
 13352  013C64  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13353  013C66  0E03               	movlw	3
 13354  013C68  0100               	movlb	0	; () banked
 13355  013C6A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13356  013C6C  EC4F  F093         	call	_Port_SetPinType	;wreg free
 13357                           
 13358                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13359  013C70  0E97               	movlw	low _PortE
 13360  013C72  0100               	movlb	0	; () banked
 13361  013C74  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13362  013C76  0E03               	movlw	high _PortE
 13363  013C78  0100               	movlb	0	; () banked
 13364  013C7A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13365  013C7C  0E01               	movlw	1
 13366  013C7E  0100               	movlb	0	; () banked
 13367  013C80  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13368  013C82  0E03               	movlw	3
 13369  013C84  0100               	movlb	0	; () banked
 13370  013C86  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13371  013C88  EC4F  F093         	call	_Port_SetPinType	;wreg free
 13372                           
 13373                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13374  013C8C  0E97               	movlw	low _PortE
 13375  013C8E  0100               	movlb	0	; () banked
 13376  013C90  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13377  013C92  0E03               	movlw	high _PortE
 13378  013C94  0100               	movlb	0	; () banked
 13379  013C96  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13380  013C98  0E00               	movlw	0
 13381  013C9A  0100               	movlb	0	; () banked
 13382  013C9C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13383  013C9E  0E00               	movlw	0
 13384  013CA0  0100               	movlb	0	; () banked
 13385  013CA2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13386  013CA4  EC49  F09F         	call	_Port_SetPin	;wreg free
 13387                           
 13388                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13389  013CA8  0E97               	movlw	low _PortE
 13390  013CAA  0100               	movlb	0	; () banked
 13391  013CAC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13392  013CAE  0E03               	movlw	high _PortE
 13393  013CB0  0100               	movlb	0	; () banked
 13394  013CB2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13395  013CB4  0E01               	movlw	1
 13396  013CB6  0100               	movlb	0	; () banked
 13397  013CB8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13398  013CBA  0E00               	movlw	0
 13399  013CBC  0100               	movlb	0	; () banked
 13400  013CBE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13401  013CC0  EC49  F09F         	call	_Port_SetPin	;wreg free
 13402                           
 13403                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13404  013CC4  0E66               	movlw	low _Motor_Step
 13405  013CC6  0100               	movlb	0	; () banked
 13406  013CC8  6FBB               	movwf	_lStepFunction& (0+255),b
 13407  013CCA  0E35               	movlw	high _Motor_Step
 13408  013CCC  0100               	movlb	0	; () banked
 13409  013CCE  6FBC               	movwf	(_lStepFunction+1)& (0+255),b
 13410  013CD0  0E01               	movlw	low (_Motor_Step shr (0+16))
 13411  013CD2  0100               	movlb	0	; () banked
 13412  013CD4  6FBD               	movwf	(_lStepFunction+2)& (0+255),b
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;Motor.c: 39: Timer0_Init(1000);
 13416  013CD6  0EE8               	movlw	232
 13417  013CD8  0100               	movlb	0	; () banked
 13418  013CDA  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 13419  013CDC  0E03               	movlw	3
 13420  013CDE  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13421  013CE0  0E00               	movlw	0
 13422  013CE2  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13423  013CE4  0E00               	movlw	0
 13424  013CE6  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13425  013CE8  ECB6  F098         	call	_Timer0_Init	;wreg free
 13426  013CEC  0012               	return		;funcret
 13427  013CEE                     __end_of_Motor_Init:
 13428                           	opt stack 0
 13429                           tblptru	equ	0xFF8
 13430                           tblptrh	equ	0xFF7
 13431                           tblptrl	equ	0xFF6
 13432                           tablat	equ	0xFF5
 13433                           prodh	equ	0xFF4
 13434                           prodl	equ	0xFF3
 13435                           intcon	equ	0xFF2
 13436                           postinc0	equ	0xFEE
 13437                           wreg	equ	0xFE8
 13438                           indf1	equ	0xFE7
 13439                           postdec1	equ	0xFE5
 13440                           fsr1h	equ	0xFE2
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           fsr2h	equ	0xFDA
 13446                           fsr2l	equ	0xFD9
 13447                           status	equ	0xFD8
 13448                           
 13449 ;; *************** function _Timer0_Init *****************
 13450 ;; Defined at:
 13451 ;;		line 25 in file "Library/Timer0.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13456 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      void 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13466 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;Total ram usage:       14 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    8
 13473 ;; This function calls:
 13474 ;;		_Timer0_Clear
 13475 ;;		___lldiv
 13476 ;; This function is called by:
 13477 ;;		_Motor_Init
 13478 ;;		_Motor_Speed
 13479 ;; This function uses a non-reentrant model
 13480 ;;
 13481                           
 13482                           	psect	text55
 13483  01316C                     __ptext55:
 13484                           	opt stack 0
 13485  01316C                     _Timer0_Init:
 13486                           	opt stack 20
 13487                           
 13488                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13489                           
 13490                           ;incstack = 0
 13491  01316C  0E80               	movlw	128
 13492  01316E  0100               	movlb	0	; () banked
 13493  013170  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13494  013172  0E8D               	movlw	141
 13495  013174  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13496  013176  0E5B               	movlw	91
 13497  013178  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13498  01317A  0E00               	movlw	0
 13499  01317C  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13503                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13504                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13505                           ;Timer0.c: 34: UINT32 DIVIDE;
 13506                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13507  01317E  9ED5               	bcf	4053,7,c	;volatile
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;Timer0.c: 38: if (pFrequency == 0)
 13511  013180  0100               	movlb	0	; () banked
 13512  013182  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13513  013184  0100               	movlb	0	; () banked
 13514  013186  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13515  013188  0100               	movlb	0	; () banked
 13516  01318A  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13517  01318C  0100               	movlb	0	; () banked
 13518  01318E  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13519  013190  B4D8               	btfsc	status,2,c
 13520  013192  0012               	return	
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;Timer0.c: 39: return;
 13527  013194  96D5               	bcf	4053,3,c	;volatile
 13528                           
 13529                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13530  013196  9CD5               	bcf	4053,6,c	;volatile
 13531                           
 13532                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13533  013198  9AD5               	bcf	4053,5,c	;volatile
 13534                           
 13535                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13536  01319A  98D5               	bcf	4053,4,c	;volatile
 13537                           
 13538                           ; BSR set to: 0
 13539                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13540  01319C  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13541  0131A0  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13542  0131A4  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13543  0131A8  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13544  0131AC  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13545  0131B0  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13546  0131B4  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13547  0131B8  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13548  0131BC  ECCB  F0A0         	call	___lldiv	;wreg free
 13549  0131C0  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 13550  0131C4  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13551  0131C8  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13552  0131CC  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13553                           
 13554                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13555  0131D0  D00C               	goto	l1787
 13556  0131D2                     l13611:
 13557                           
 13558                           ;Timer0.c: 50: {
 13559                           ;Timer0.c: 51: INDEX ++;
 13560  0131D2  0100               	movlb	0	; () banked
 13561  0131D4  2BDC               	incf	_INDEX& (0+255),f,b
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;Timer0.c: 52: if (INDEX >= 3)
 13565  0131D6  0E02               	movlw	2
 13566  0131D8  0100               	movlb	0	; () banked
 13567  0131DA  65DC               	cpfsgt	_INDEX& (0+255),b
 13568  0131DC  D001               	goto	l1785
 13569  0131DE  D02F               	goto	u10130
 13570  0131E0                     l1785:
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;Timer0.c: 56: if (INDEX >= 8)
 13574                           
 13575                           ; BSR set to: 0
 13576  0131E0  0E07               	movlw	7
 13577  0131E2  0100               	movlb	0	; () banked
 13578  0131E4  65DC               	cpfsgt	_INDEX& (0+255),b
 13579  0131E6  D001               	goto	l1787
 13580  0131E8  0012               	return	
 13581  0131EA                     l1787:
 13582                           
 13583                           ; BSR set to: 0
 13584                           
 13585                           ; BSR set to: 0
 13586  0131EA  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 13587  0131EE  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 13588  0131F2  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 13589  0131F6  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 13590  0131FA  0100               	movlb	0	; () banked
 13591  0131FC  51DC               	movf	_INDEX& (0+255),w,b
 13592  0131FE  0D02               	mullw	2
 13593  013200  0E39               	movlw	low Timer0_Init@PRESCALE
 13594  013202  24F3               	addwf	prodl,w,c
 13595  013204  6EF6               	movwf	tblptrl,c
 13596  013206  0EFD               	movlw	high Timer0_Init@PRESCALE
 13597  013208  20F4               	addwfc	prodh,w,c
 13598  01320A  6EF7               	movwf	tblptrh,c
 13599  01320C                     	if	1	;There are 3 active tblptr bytes
 13600  01320C  6AF8               	clrf	tblptru,c
 13601  01320E  0E00               	movlw	low (__mediumconst shr (0+16))
 13602  013210  22F8               	addwfc	tblptru,f,c
 13603  013212                     	endif
 13604  013212  0009               	tblrd		*+
 13605  013214  CFF5 F071          	movff	tablat,??_Timer0_Init
 13606  013218  0009               	tblrd		*+
 13607  01321A  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 13608  01321E  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 13609  013222  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 13610  013226  0100               	movlb	0	; () banked
 13611  013228  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13612  01322A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13613  01322C  ECCB  F0A0         	call	___lldiv	;wreg free
 13614  013230  0100               	movlb	0	; () banked
 13615  013232  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13616  013234  E1CE               	bnz	l13611
 13617  013236  0100               	movlb	0	; () banked
 13618  013238  0562               	decf	(?___lldiv+2)& (0+255),w,b
 13619  01323A  B0D8               	btfsc	status,0,c
 13620  01323C  D7CA               	goto	l1784
 13621  01323E                     u10130:
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;Timer0.c: 58: }
 13625                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 13626                           
 13627                           ; BSR set to: 0
 13628  01323E  0100               	movlb	0	; () banked
 13629  013240  51DC               	movf	_INDEX& (0+255),w,b
 13630  013242  0D02               	mullw	2
 13631  013244  0E39               	movlw	low Timer0_Init@PRESCALE
 13632  013246  24F3               	addwf	prodl,w,c
 13633  013248  6EF6               	movwf	tblptrl,c
 13634  01324A  0EFD               	movlw	high Timer0_Init@PRESCALE
 13635  01324C  20F4               	addwfc	prodh,w,c
 13636  01324E  6EF7               	movwf	tblptrh,c
 13637  013250                     	if	1	;There are 3 active tblptr bytes
 13638  013250  6AF8               	clrf	tblptru,c
 13639  013252  0E00               	movlw	low (__mediumconst shr (0+16))
 13640  013254  22F8               	addwfc	tblptru,f,c
 13641  013256                     	endif
 13642  013256  0008               	tblrd		*
 13643  013258  CFF5 F0DB          	movff	tablat,Timer0_Init@PRE
 13644                           
 13645                           ; BSR set to: 0
 13646                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 13647  01325C  0EFF               	movlw	255
 13648  01325E  0100               	movlb	0	; () banked
 13649  013260  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 13650  013262  0103               	movlb	3	; () banked
 13651  013264  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 13652  013266  0EFF               	movlw	255
 13653  013268  0100               	movlb	0	; () banked
 13654  01326A  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 13655  01326C  0103               	movlb	3	; () banked
 13656  01326E  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 13657  013270  0EFF               	movlw	255
 13658  013272  0100               	movlb	0	; () banked
 13659  013274  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 13660  013276  0103               	movlb	3	; () banked
 13661  013278  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 13662  01327A  0EFF               	movlw	255
 13663  01327C  0100               	movlb	0	; () banked
 13664  01327E  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 13665  013280  0103               	movlb	3	; () banked
 13666  013282  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 13667                           
 13668                           ; BSR set to: 3
 13669                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 13670  013284  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 13671  013288  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 13672  01328C  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 13673  013290  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 13674  013294  0100               	movlb	0	; () banked
 13675  013296  51DB               	movf	Timer0_Init@PRE& (0+255),w,b
 13676  013298  0100               	movlb	0	; () banked
 13677  01329A  6F64               	movwf	___lldiv@divisor& (0+255),b
 13678  01329C  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13679  01329E  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13680  0132A0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13681  0132A2  ECCB  F0A0         	call	___lldiv	;wreg free
 13682  0132A6  0100               	movlb	0	; () banked
 13683  0132A8  1F60               	comf	?___lldiv& (0+255),f,b
 13684  0132AA  0100               	movlb	0	; () banked
 13685  0132AC  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 13686  0132AE  0100               	movlb	0	; () banked
 13687  0132B0  4B60               	infsnz	?___lldiv& (0+255),f,b
 13688  0132B2  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 13689  0132B4  0EFF               	movlw	255
 13690  0132B6  0100               	movlb	0	; () banked
 13691  0132B8  2560               	addwf	?___lldiv& (0+255),w,b
 13692  0132BA  6E29               	movwf	_COUNTER,c
 13693  0132BC  0EFF               	movlw	255
 13694  0132BE  0100               	movlb	0	; () banked
 13695  0132C0  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 13696  0132C2  6E2A               	movwf	_COUNTER+1,c
 13697                           
 13698                           ; BSR set to: 0
 13699                           ;Timer0.c: 68: Timer0_Clear();
 13700  0132C4  ECA1  F0B2         	call	_Timer0_Clear	;wreg free
 13701                           
 13702                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 13703  0132C8  8ED5               	bsf	4053,7,c	;volatile
 13704  0132CA  0012               	return		;funcret
 13705  0132CC                     __end_of_Timer0_Init:
 13706                           	opt stack 0
 13707                           tblptru	equ	0xFF8
 13708                           tblptrh	equ	0xFF7
 13709                           tblptrl	equ	0xFF6
 13710                           tablat	equ	0xFF5
 13711                           prodh	equ	0xFF4
 13712                           prodl	equ	0xFF3
 13713                           intcon	equ	0xFF2
 13714                           postinc0	equ	0xFEE
 13715                           wreg	equ	0xFE8
 13716                           indf1	equ	0xFE7
 13717                           postdec1	equ	0xFE5
 13718                           fsr1h	equ	0xFE2
 13719                           fsr1l	equ	0xFE1
 13720                           indf2	equ	0xFDF
 13721                           postinc2	equ	0xFDE
 13722                           postdec2	equ	0xFDD
 13723                           fsr2h	equ	0xFDA
 13724                           fsr2l	equ	0xFD9
 13725                           status	equ	0xFD8
 13726                           
 13727 ;; *************** function _Timer0_Clear *****************
 13728 ;; Defined at:
 13729 ;;		line 20 in file "Library/Timer0.c"
 13730 ;; Parameters:    Size  Location     Type
 13731 ;;		None
 13732 ;; Auto vars:     Size  Location     Type
 13733 ;;		None
 13734 ;; Return value:  Size  Location     Type
 13735 ;;                  1    wreg      void 
 13736 ;; Registers used:
 13737 ;;		None
 13738 ;; Tracked objects:
 13739 ;;		On entry : 0/0
 13740 ;;		On exit  : 0/0
 13741 ;;		Unchanged: 0/0
 13742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13747 ;;Total ram usage:        0 bytes
 13748 ;; Hardware stack levels used:    1
 13749 ;; Hardware stack levels required when called:    7
 13750 ;; This function calls:
 13751 ;;		Nothing
 13752 ;; This function is called by:
 13753 ;;		_Timer0_Init
 13754 ;; This function uses a non-reentrant model
 13755 ;;
 13756                           
 13757                           	psect	text56
 13758  016542                     __ptext56:
 13759                           	opt stack 0
 13760  016542                     _Timer0_Clear:
 13761                           	opt stack 20
 13762                           
 13763                           ;Timer0.c: 22: TMR0 = COUNTER;
 13764                           
 13765                           ;incstack = 0
 13766  016542  C029  FFD6         	movff	_COUNTER,4054	;volatile
 13767  016546  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 13768                           
 13769                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 13770  01654A  94F2               	bcf	intcon,2,c	;volatile
 13771  01654C  0012               	return		;funcret
 13772  01654E                     __end_of_Timer0_Clear:
 13773                           	opt stack 0
 13774                           tblptru	equ	0xFF8
 13775                           tblptrh	equ	0xFF7
 13776                           tblptrl	equ	0xFF6
 13777                           tablat	equ	0xFF5
 13778                           prodh	equ	0xFF4
 13779                           prodl	equ	0xFF3
 13780                           intcon	equ	0xFF2
 13781                           postinc0	equ	0xFEE
 13782                           wreg	equ	0xFE8
 13783                           indf1	equ	0xFE7
 13784                           postdec1	equ	0xFE5
 13785                           fsr1h	equ	0xFE2
 13786                           fsr1l	equ	0xFE1
 13787                           indf2	equ	0xFDF
 13788                           postinc2	equ	0xFDE
 13789                           postdec2	equ	0xFDD
 13790                           fsr2h	equ	0xFDA
 13791                           fsr2l	equ	0xFD9
 13792                           status	equ	0xFD8
 13793                           
 13794 ;; *************** function _MXK_Init *****************
 13795 ;; Defined at:
 13796 ;;		line 33 in file "Library/MXK.c"
 13797 ;; Parameters:    Size  Location     Type
 13798 ;;		None
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;		None
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  1    wreg      void 
 13803 ;; Registers used:
 13804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13805 ;; Tracked objects:
 13806 ;;		On entry : 0/0
 13807 ;;		On exit  : 0/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;Total ram usage:        0 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:   16
 13817 ;; This function calls:
 13818 ;;		_LED_Init
 13819 ;;		_Port_Init
 13820 ;;		_Port_SetPin
 13821 ;;		_Port_SetPinType
 13822 ;;		_Port_SetQuadType
 13823 ;;		_Port_SetType
 13824 ;;		_delay_ms
 13825 ;; This function is called by:
 13826 ;;		_init
 13827 ;; This function uses a non-reentrant model
 13828 ;;
 13829                           
 13830                           	psect	text57
 13831  012D14                     __ptext57:
 13832                           	opt stack 0
 13833  012D14                     _MXK_Init:
 13834                           	opt stack 13
 13835                           
 13836                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 13837                           
 13838                           ;incstack = 0
 13839  012D14  0E01               	movlw	1
 13840  012D16  6E4B               	movwf	_Bus_State,c
 13841                           
 13842                           ;MXK.c: 36: lQueue = (Function)0;
 13843  012D18  0E00               	movlw	0
 13844  012D1A  0100               	movlb	0	; () banked
 13845  012D1C  6FB8               	movwf	_lQueue& (0+255),b	;volatile
 13846  012D1E  0E00               	movlw	0
 13847  012D20  0100               	movlb	0	; () banked
 13848  012D22  6FB9               	movwf	(_lQueue+1)& (0+255),b	;volatile
 13849  012D24  0E00               	movlw	0
 13850  012D26  0100               	movlb	0	; () banked
 13851  012D28  6FBA               	movwf	(_lQueue+2)& (0+255),b	;volatile
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 13855  012D2A  0EAB               	movlw	low _PortA
 13856  012D2C  0100               	movlb	0	; () banked
 13857  012D2E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13858  012D30  0E03               	movlw	high _PortA
 13859  012D32  0100               	movlb	0	; () banked
 13860  012D34  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13861  012D36  0E00               	movlw	0
 13862  012D38  0100               	movlb	0	; () banked
 13863  012D3A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13864  012D3C  ECFE  F094         	call	_Port_Init	;wreg free
 13865                           
 13866                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 13867  012D40  0EA1               	movlw	low _PortB
 13868  012D42  0100               	movlb	0	; () banked
 13869  012D44  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13870  012D46  0E03               	movlw	high _PortB
 13871  012D48  0100               	movlb	0	; () banked
 13872  012D4A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13873  012D4C  0E01               	movlw	1
 13874  012D4E  0100               	movlb	0	; () banked
 13875  012D50  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13876  012D52  ECFE  F094         	call	_Port_Init	;wreg free
 13877                           
 13878                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 13879  012D56  0EEA               	movlw	low _PortC
 13880  012D58  0100               	movlb	0	; () banked
 13881  012D5A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13882  012D5C  0E00               	movlw	high _PortC
 13883  012D5E  0100               	movlb	0	; () banked
 13884  012D60  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13885  012D62  0E02               	movlw	2
 13886  012D64  0100               	movlb	0	; () banked
 13887  012D66  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13888  012D68  ECFE  F094         	call	_Port_Init	;wreg free
 13889                           
 13890                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 13891  012D6C  0EE0               	movlw	low _PortD
 13892  012D6E  0100               	movlb	0	; () banked
 13893  012D70  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13894  012D72  0E00               	movlw	high _PortD
 13895  012D74  0100               	movlb	0	; () banked
 13896  012D76  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13897  012D78  0E03               	movlw	3
 13898  012D7A  0100               	movlb	0	; () banked
 13899  012D7C  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13900  012D7E  ECFE  F094         	call	_Port_Init	;wreg free
 13901                           
 13902                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 13903  012D82  0E97               	movlw	low _PortE
 13904  012D84  0100               	movlb	0	; () banked
 13905  012D86  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13906  012D88  0E03               	movlw	high _PortE
 13907  012D8A  0100               	movlb	0	; () banked
 13908  012D8C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13909  012D8E  0E04               	movlw	4
 13910  012D90  0100               	movlb	0	; () banked
 13911  012D92  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13912  012D94  ECFE  F094         	call	_Port_Init	;wreg free
 13913                           
 13914                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 13915  012D98  0EB5               	movlw	low _PortF
 13916  012D9A  0100               	movlb	0	; () banked
 13917  012D9C  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13918  012D9E  0E03               	movlw	high _PortF
 13919  012DA0  0100               	movlb	0	; () banked
 13920  012DA2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13921  012DA4  0E05               	movlw	5
 13922  012DA6  0100               	movlb	0	; () banked
 13923  012DA8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13924  012DAA  ECFE  F094         	call	_Port_Init	;wreg free
 13925                           
 13926                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 13927  012DAE  0E8D               	movlw	low _PortG
 13928  012DB0  0100               	movlb	0	; () banked
 13929  012DB2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13930  012DB4  0E03               	movlw	high _PortG
 13931  012DB6  0100               	movlb	0	; () banked
 13932  012DB8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13933  012DBA  0E06               	movlw	6
 13934  012DBC  0100               	movlb	0	; () banked
 13935  012DBE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13936  012DC0  ECFE  F094         	call	_Port_Init	;wreg free
 13937                           
 13938                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 13939  012DC4  0EB5               	movlw	low _PortF
 13940  012DC6  0100               	movlb	0	; () banked
 13941  012DC8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13942  012DCA  0E03               	movlw	high _PortF
 13943  012DCC  0100               	movlb	0	; () banked
 13944  012DCE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13945  012DD0  0E05               	movlw	5
 13946  012DD2  0100               	movlb	0	; () banked
 13947  012DD4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13948  012DD6  0E00               	movlw	0
 13949  012DD8  0100               	movlb	0	; () banked
 13950  012DDA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13951  012DDC  EC4F  F093         	call	_Port_SetPinType	;wreg free
 13952                           
 13953                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 13954  012DE0  0EA1               	movlw	low _PortB
 13955  012DE2  0100               	movlb	0	; () banked
 13956  012DE4  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 13957  012DE6  0E03               	movlw	high _PortB
 13958  012DE8  0100               	movlb	0	; () banked
 13959  012DEA  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 13960  012DEC  0E00               	movlw	0
 13961  012DEE  0100               	movlb	0	; () banked
 13962  012DF0  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 13963  012DF2  0E00               	movlw	0
 13964  012DF4  0100               	movlb	0	; () banked
 13965  012DF6  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 13966  012DF8  EC42  F08D         	call	_Port_SetQuadType	;wreg free
 13967                           
 13968                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 13969  012DFC  0EB5               	movlw	low _PortF
 13970  012DFE  0100               	movlb	0	; () banked
 13971  012E00  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13972  012E02  0E03               	movlw	high _PortF
 13973  012E04  0100               	movlb	0	; () banked
 13974  012E06  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13975  012E08  0E06               	movlw	6
 13976  012E0A  0100               	movlb	0	; () banked
 13977  012E0C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13978  012E0E  0E03               	movlw	3
 13979  012E10  0100               	movlb	0	; () banked
 13980  012E12  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13981  012E14  EC4F  F093         	call	_Port_SetPinType	;wreg free
 13982                           
 13983                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 13984  012E18  0E8D               	movlw	low _PortG
 13985  012E1A  0100               	movlb	0	; () banked
 13986  012E1C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 13987  012E1E  0E03               	movlw	high _PortG
 13988  012E20  0100               	movlb	0	; () banked
 13989  012E22  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 13990  012E24  0E03               	movlw	3
 13991  012E26  0100               	movlb	0	; () banked
 13992  012E28  6F9C               	movwf	Port_SetType@pType& (0+255),b
 13993  012E2A  EC6D  F08E         	call	_Port_SetType	;wreg free
 13994                           
 13995                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 13996  012E2E  0E8D               	movlw	low _PortG
 13997  012E30  0100               	movlb	0	; () banked
 13998  012E32  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13999  012E34  0E03               	movlw	high _PortG
 14000  012E36  0100               	movlb	0	; () banked
 14001  012E38  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14002  012E3A  0E04               	movlw	4
 14003  012E3C  0100               	movlb	0	; () banked
 14004  012E3E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14005  012E40  0E00               	movlw	0
 14006  012E42  0100               	movlb	0	; () banked
 14007  012E44  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14008  012E46  EC49  F09F         	call	_Port_SetPin	;wreg free
 14009                           
 14010                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14011  012E4A  0EB5               	movlw	low _PortF
 14012  012E4C  0100               	movlb	0	; () banked
 14013  012E4E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14014  012E50  0E03               	movlw	high _PortF
 14015  012E52  0100               	movlb	0	; () banked
 14016  012E54  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14017  012E56  0E06               	movlw	6
 14018  012E58  0100               	movlb	0	; () banked
 14019  012E5A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14020  012E5C  0E01               	movlw	1
 14021  012E5E  0100               	movlb	0	; () banked
 14022  012E60  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14023  012E62  EC49  F09F         	call	_Port_SetPin	;wreg free
 14024                           
 14025                           ;MXK.c: 55: LED_Init(eLED1);
 14026  012E66  0E00               	movlw	0
 14027  012E68  ECAD  F0AB         	call	_LED_Init
 14028                           
 14029                           ;MXK.c: 56: LED_Init(eLED2);
 14030  012E6C  0E01               	movlw	1
 14031  012E6E  ECAD  F0AB         	call	_LED_Init
 14032                           
 14033                           ;MXK.c: 58: PIR1 = 0;
 14034  012E72  0E00               	movlw	0
 14035  012E74  6E9E               	movwf	3998,c	;volatile
 14036                           
 14037                           ;MXK.c: 59: PIR2 = 0;
 14038  012E76  0E00               	movlw	0
 14039  012E78  6EA1               	movwf	4001,c	;volatile
 14040                           
 14041                           ;MXK.c: 60: PIR3 = 0;
 14042  012E7A  0E00               	movlw	0
 14043  012E7C  6EA4               	movwf	4004,c	;volatile
 14044                           
 14045                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14046  012E7E  8E9B               	bsf	3995,7,c	;volatile
 14047                           
 14048                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14049  012E80  8C9B               	bsf	3995,6,c	;volatile
 14050                           
 14051                           ;MXK.c: 66: delay_ms(100);
 14052  012E82  0E00               	movlw	0
 14053  012E84  0100               	movlb	0	; () banked
 14054  012E86  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14055  012E88  0E64               	movlw	100
 14056  012E8A  6F60               	movwf	delay_ms@ms& (0+255),b
 14057  012E8C  ECAB  F0AA         	call	_delay_ms	;wreg free
 14058                           
 14059                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14060  012E90  8ED0               	bsf	4048,7,c	;volatile
 14061  012E92  0012               	return		;funcret
 14062  012E94                     __end_of_MXK_Init:
 14063                           	opt stack 0
 14064                           tblptru	equ	0xFF8
 14065                           tblptrh	equ	0xFF7
 14066                           tblptrl	equ	0xFF6
 14067                           tablat	equ	0xFF5
 14068                           prodh	equ	0xFF4
 14069                           prodl	equ	0xFF3
 14070                           intcon	equ	0xFF2
 14071                           postinc0	equ	0xFEE
 14072                           wreg	equ	0xFE8
 14073                           indf1	equ	0xFE7
 14074                           postdec1	equ	0xFE5
 14075                           fsr1h	equ	0xFE2
 14076                           fsr1l	equ	0xFE1
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           fsr2h	equ	0xFDA
 14081                           fsr2l	equ	0xFD9
 14082                           status	equ	0xFD8
 14083                           
 14084 ;; *************** function _Port_Init *****************
 14085 ;; Defined at:
 14086 ;;		line 150 in file "Library/Port.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 14089 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14090 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14091 ;;  pPort           1   66[BANK0 ] enum E6786
 14092 ;; Auto vars:     Size  Location     Type
 14093 ;;  i               1   69[BANK0 ] unsigned char 
 14094 ;; Return value:  Size  Location     Type
 14095 ;;                  1    wreg      void 
 14096 ;; Registers used:
 14097 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14098 ;; Tracked objects:
 14099 ;;		On entry : 0/0
 14100 ;;		On exit  : 0/0
 14101 ;;		Unchanged: 0/0
 14102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14103 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14107 ;;Total ram usage:        6 bytes
 14108 ;; Hardware stack levels used:    1
 14109 ;; Hardware stack levels required when called:   15
 14110 ;; This function calls:
 14111 ;;		_GetPortPORT
 14112 ;;		_GetPortProperties
 14113 ;;		_GetPortTRIS
 14114 ;;		_Port_Set
 14115 ;;		_Port_SetPinType
 14116 ;;		_Port_SetType
 14117 ;;		_Word_GetPair
 14118 ;; This function is called by:
 14119 ;;		_MXK_Init
 14120 ;; This function uses a non-reentrant model
 14121 ;;
 14122                           
 14123                           	psect	text58
 14124  0129FC                     __ptext58:
 14125                           	opt stack 0
 14126  0129FC                     _Port_Init:
 14127                           	opt stack 13
 14128                           
 14129                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14130                           
 14131                           ;incstack = 0
 14132  0129FC  0100               	movlb	0	; () banked
 14133  0129FE  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14134  012A00  EC35  F0A4         	call	_GetPortProperties
 14135  012A04  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14136  012A08  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14137  012A0C  0100               	movlb	0	; () banked
 14138  012A0E  C060  FFDE         	movff	?_GetPortProperties,postinc2
 14139  012A12  0100               	movlb	0	; () banked
 14140  012A14  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 14141                           
 14142                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14143  012A18  0100               	movlb	0	; () banked
 14144  012A1A  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14145  012A1C  EC88  F0A4         	call	_GetPortPORT
 14146  012A20  0100               	movlb	0	; () banked
 14147  012A22  EE20 F006          	lfsr	2,6
 14148  012A26  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14149  012A28  26D9               	addwf	fsr2l,f,c
 14150  012A2A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14151  012A2C  22DA               	addwfc	fsr2h,f,c
 14152  012A2E  0100               	movlb	0	; () banked
 14153  012A30  C060  FFDE         	movff	?_GetPortPORT,postinc2
 14154  012A34  0100               	movlb	0	; () banked
 14155  012A36  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 14156                           
 14157                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14158  012A3A  0100               	movlb	0	; () banked
 14159  012A3C  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14160  012A3E  EC88  F0A4         	call	_GetPortPORT
 14161  012A42  0100               	movlb	0	; () banked
 14162  012A44  EE20 F004          	lfsr	2,4
 14163  012A48  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14164  012A4A  26D9               	addwf	fsr2l,f,c
 14165  012A4C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14166  012A4E  22DA               	addwfc	fsr2h,f,c
 14167  012A50  0100               	movlb	0	; () banked
 14168  012A52  C060  FFDE         	movff	?_GetPortPORT,postinc2
 14169  012A56  0100               	movlb	0	; () banked
 14170  012A58  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 14171                           
 14172                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14173  012A5C  0100               	movlb	0	; () banked
 14174  012A5E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14175  012A60  ECE2  F0A3         	call	_GetPortTRIS
 14176  012A64  0100               	movlb	0	; () banked
 14177  012A66  EE20 F002          	lfsr	2,2
 14178  012A6A  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14179  012A6C  26D9               	addwf	fsr2l,f,c
 14180  012A6E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14181  012A70  22DA               	addwfc	fsr2h,f,c
 14182  012A72  0100               	movlb	0	; () banked
 14183  012A74  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 14184  012A78  0100               	movlb	0	; () banked
 14185  012A7A  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14189  012A7E  0100               	movlb	0	; () banked
 14190  012A80  EE20 F004          	lfsr	2,4
 14191  012A84  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14192  012A86  26D9               	addwf	fsr2l,f,c
 14193  012A88  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14194  012A8A  22DA               	addwfc	fsr2h,f,c
 14195  012A8C  CFDE F0A3          	movff	postinc2,??_Port_Init
 14196  012A90  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 14197  012A94  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 14198  012A98  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 14199  012A9C  0E00               	movlw	0
 14200  012A9E  6EDF               	movwf	indf2,c
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14204  012AA0  0100               	movlb	0	; () banked
 14205  012AA2  EE20 F002          	lfsr	2,2
 14206  012AA6  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14207  012AA8  26D9               	addwf	fsr2l,f,c
 14208  012AAA  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14209  012AAC  22DA               	addwfc	fsr2h,f,c
 14210  012AAE  CFDE F0A3          	movff	postinc2,??_Port_Init
 14211  012AB2  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 14212  012AB6  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 14213  012ABA  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 14214  012ABE  0EFF               	movlw	255
 14215  012AC0  6EDF               	movwf	indf2,c
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14219  012AC2  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 14220  012AC6  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14221  012ACA  0E00               	movlw	0
 14222  012ACC  0100               	movlb	0	; () banked
 14223  012ACE  6F9C               	movwf	Port_SetType@pType& (0+255),b
 14224  012AD0  EC6D  F08E         	call	_Port_SetType	;wreg free
 14225                           
 14226                           ;Port.c: 166: UINT8 i;
 14227                           ;Port.c: 167: for (i=0; i<8; i++)
 14228  012AD4  0E00               	movlw	0
 14229  012AD6  0100               	movlb	0	; () banked
 14230  012AD8  6FA5               	movwf	Port_Init@i& (0+255),b
 14231  012ADA                     l13465:
 14232                           
 14233                           ; BSR set to: 0
 14234  012ADA  0E07               	movlw	7
 14235  012ADC  0100               	movlb	0	; () banked
 14236  012ADE  65A5               	cpfsgt	Port_Init@i& (0+255),b
 14237  012AE0  D031               	goto	l403
 14238  012AE2  D04B               	goto	u9930
 14239  012AE4                     
 14240                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14241                           
 14242                           ; BSR set to: 0
 14243  012AE4  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14244  012AE8  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14245  012AEC  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14246  012AF0  0E03               	movlw	3
 14247  012AF2  0100               	movlb	0	; () banked
 14248  012AF4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14249  012AF6  EC4F  F093         	call	_Port_SetPinType	;wreg free
 14250                           
 14251                           ;Port.c: 173: break;
 14252  012AFA  D03C               	goto	l405
 14253  012AFC                     
 14254                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14255  012AFC  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14256  012B00  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14257  012B04  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14258  012B08  0E02               	movlw	2
 14259  012B0A  0100               	movlb	0	; () banked
 14260  012B0C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14261  012B0E  EC4F  F093         	call	_Port_SetPinType	;wreg free
 14262                           
 14263                           ;Port.c: 176: break;
 14264  012B12  D030               	goto	l405
 14265  012B14                     
 14266                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14267  012B14  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14268  012B18  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14269  012B1C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14270  012B20  0E01               	movlw	1
 14271  012B22  0100               	movlb	0	; () banked
 14272  012B24  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14273  012B26  EC4F  F093         	call	_Port_SetPinType	;wreg free
 14274                           
 14275                           ;Port.c: 179: break;
 14276  012B2A  D024               	goto	l405
 14277  012B2C                     
 14278                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14279  012B2C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14280  012B30  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14281  012B34  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14282  012B38  0E00               	movlw	0
 14283  012B3A  0100               	movlb	0	; () banked
 14284  012B3C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14285  012B3E  EC4F  F093         	call	_Port_SetPinType	;wreg free
 14286                           
 14287                           ;Port.c: 183: }
 14288                           
 14289                           ;Port.c: 182: break;
 14290  012B42  D018               	goto	l405
 14291  012B44                     l403:
 14292  012B44  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14293  012B48  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14294  012B4C  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 14295  012B50  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 14296  012B54  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 14297  012B58  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 14298                           
 14299                           ; Switch size 1, requested type "space"
 14300                           ; Number of cases is 4, Range of values is 0 to 3
 14301                           ; switch strategies available:
 14302                           ; Name         Instructions Cycles
 14303                           ; simple_byte           13     7 (average)
 14304                           ;	Chosen strategy is simple_byte
 14305  012B5C  0A00               	xorlw	0	; case 0
 14306  012B5E  B4D8               	btfsc	status,2,c
 14307  012B60  D7C1               	goto	l404
 14308  012B62  0A01               	xorlw	1	; case 1
 14309  012B64  B4D8               	btfsc	status,2,c
 14310  012B66  D7D6               	goto	l407
 14311  012B68  0A03               	xorlw	3	; case 2
 14312  012B6A  B4D8               	btfsc	status,2,c
 14313  012B6C  D7C7               	goto	l406
 14314  012B6E  0A01               	xorlw	1	; case 3
 14315  012B70  B4D8               	btfsc	status,2,c
 14316  012B72  D7DC               	goto	l408
 14317  012B74                     l405:
 14318  012B74  0100               	movlb	0	; () banked
 14319  012B76  2BA5               	incf	Port_Init@i& (0+255),f,b
 14320  012B78  D7B0               	goto	l13465
 14321  012B7A                     u9930:
 14322                           
 14323                           ; BSR set to: 0
 14324                           ;Port.c: 184: }
 14325                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14326                           
 14327                           ; BSR set to: 0
 14328  012B7A  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 14329  012B7E  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14330  012B82  0E00               	movlw	0
 14331  012B84  0100               	movlb	0	; () banked
 14332  012B86  6F71               	movwf	Port_Set@pValue& (0+255),b
 14333  012B88  EC4E  F088         	call	_Port_Set	;wreg free
 14334  012B8C  0012               	return		;funcret
 14335  012B8E                     __end_of_Port_Init:
 14336                           	opt stack 0
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           postinc0	equ	0xFEE
 14345                           wreg	equ	0xFE8
 14346                           indf1	equ	0xFE7
 14347                           postdec1	equ	0xFE5
 14348                           fsr1h	equ	0xFE2
 14349                           fsr1l	equ	0xFE1
 14350                           indf2	equ	0xFDF
 14351                           postinc2	equ	0xFDE
 14352                           postdec2	equ	0xFDD
 14353                           fsr2h	equ	0xFDA
 14354                           fsr2l	equ	0xFD9
 14355                           status	equ	0xFD8
 14356                           
 14357 ;; *************** function _Port_SetType *****************
 14358 ;; Defined at:
 14359 ;;		line 513 in file "Library/Port.c"
 14360 ;; Parameters:    Size  Location     Type
 14361 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14362 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14363 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14364 ;;  pType           1   60[BANK0 ] enum E6795
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  Output          1   63[BANK0 ] enum E6475
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  1    wreg      enum E6475
 14369 ;; Registers used:
 14370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14376 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14379 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;Total ram usage:        6 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:   14
 14383 ;; This function calls:
 14384 ;;		_Port_CheckPortType
 14385 ;;		_Word_SetPair
 14386 ;; This function is called by:
 14387 ;;		_Port_Init
 14388 ;;		_MXK_Init
 14389 ;; This function uses a non-reentrant model
 14390 ;;
 14391                           
 14392                           	psect	text59
 14393  011CDA                     __ptext59:
 14394                           	opt stack 0
 14395  011CDA                     _Port_SetType:
 14396                           	opt stack 14
 14397                           
 14398                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14399                           
 14400                           ;incstack = 0
 14401  011CDA  0E05               	movlw	5
 14402  011CDC  0100               	movlb	0	; () banked
 14403  011CDE  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14404                           
 14405                           ;Port.c: 517: switch (pType)
 14406  011CE0  D07A               	goto	l509
 14407  011CE2                     
 14408                           ; BSR set to: 0
 14409                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14410                           
 14411                           ; BSR set to: 0
 14412  011CE2  0100               	movlb	0	; () banked
 14413  011CE4  EE20 F002          	lfsr	2,2
 14414  011CE8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14415  011CEA  26D9               	addwf	fsr2l,f,c
 14416  011CEC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14417  011CEE  22DA               	addwfc	fsr2h,f,c
 14418  011CF0  CFDE F09D          	movff	postinc2,??_Port_SetType
 14419  011CF4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14420  011CF8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14421  011CFC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14422  011D00  0EFF               	movlw	255
 14423  011D02  D067               	goto	L10
 14424  011D04                     
 14425                           ; BSR set to: 0
 14426                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14427                           
 14428                           ; BSR set to: 0
 14429  011D04  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14430  011D08  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14431  011D0C  0E01               	movlw	1
 14432  011D0E  0100               	movlb	0	; () banked
 14433  011D10  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14434  011D12  EC86  F0AD         	call	_Port_CheckPortType	;wreg free
 14435  011D16  0100               	movlb	0	; () banked
 14436  011D18  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14437  011D1A  0100               	movlb	0	; () banked
 14438  011D1C  519F               	movf	Port_SetType@Output& (0+255),w,b
 14439  011D1E  A4D8               	btfss	status,2,c
 14440  011D20  0012               	return	
 14441                           
 14442                           ; BSR set to: 0
 14443                           ;Port.c: 527: {
 14444                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14445  011D22  0100               	movlb	0	; () banked
 14446  011D24  EE20 F002          	lfsr	2,2
 14447  011D28  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14448  011D2A  26D9               	addwf	fsr2l,f,c
 14449  011D2C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14450  011D2E  22DA               	addwfc	fsr2h,f,c
 14451  011D30  CFDE F09D          	movff	postinc2,??_Port_SetType
 14452  011D34  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14453  011D38  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14454  011D3C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14455  011D40  0E00               	movlw	0
 14456  011D42  6EDF               	movwf	indf2,c
 14457                           
 14458                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14459  011D44  0100               	movlb	0	; () banked
 14460  011D46  EE20 F004          	lfsr	2,4
 14461  011D4A  D036               	goto	L21
 14462  011D4C                     
 14463                           ; BSR set to: 0
 14464                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14465                           
 14466                           ; BSR set to: 0
 14467  011D4C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14468  011D50  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14469  011D54  0E02               	movlw	2
 14470  011D56  0100               	movlb	0	; () banked
 14471  011D58  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14472  011D5A  EC86  F0AD         	call	_Port_CheckPortType	;wreg free
 14473  011D5E  0100               	movlb	0	; () banked
 14474  011D60  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14475  011D62  0100               	movlb	0	; () banked
 14476  011D64  519F               	movf	Port_SetType@Output& (0+255),w,b
 14477  011D66  A4D8               	btfss	status,2,c
 14478  011D68  0012               	return	
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;Port.c: 538: {
 14482                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14483  011D6A  0100               	movlb	0	; () banked
 14484  011D6C  EE20 F002          	lfsr	2,2
 14485  011D70  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14486  011D72  26D9               	addwf	fsr2l,f,c
 14487  011D74  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14488  011D76  22DA               	addwfc	fsr2h,f,c
 14489  011D78  CFDE F09D          	movff	postinc2,??_Port_SetType
 14490  011D7C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14491  011D80  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14492  011D84  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14493  011D88  0EFF               	movlw	255
 14494  011D8A  6EDF               	movwf	indf2,c
 14495                           
 14496                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14497  011D8C  0100               	movlb	0	; () banked
 14498  011D8E  EE20 F004          	lfsr	2,4
 14499  011D92  D7AA               	goto	L11
 14500  011D94                     
 14501                           ; BSR set to: 0
 14502                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14503                           
 14504                           ; BSR set to: 0
 14505  011D94  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14506  011D98  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14507  011D9C  0E00               	movlw	0
 14508  011D9E  0100               	movlb	0	; () banked
 14509  011DA0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14510  011DA2  EC86  F0AD         	call	_Port_CheckPortType	;wreg free
 14511  011DA6  0100               	movlb	0	; () banked
 14512  011DA8  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14513  011DAA  0100               	movlb	0	; () banked
 14514  011DAC  519F               	movf	Port_SetType@Output& (0+255),w,b
 14515  011DAE  A4D8               	btfss	status,2,c
 14516  011DB0  0012               	return	
 14517                           
 14518                           ; BSR set to: 0
 14519                           ;Port.c: 549: {
 14520                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14521  011DB2  0100               	movlb	0	; () banked
 14522  011DB4  EE20 F002          	lfsr	2,2
 14523  011DB8                     L21:
 14524  011DB8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14525  011DBA  26D9               	addwf	fsr2l,f,c
 14526  011DBC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14527  011DBE  22DA               	addwfc	fsr2h,f,c
 14528  011DC0  CFDE F09D          	movff	postinc2,??_Port_SetType
 14529  011DC4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14530  011DC8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14531  011DCC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14532  011DD0  0E00               	movlw	0
 14533  011DD2                     L10:
 14534  011DD2  6EDF               	movwf	indf2,c
 14535                           
 14536                           ;Port.c: 552: }
 14537  011DD4  D00E               	goto	l511
 14538  011DD6                     l509:
 14539                           
 14540                           ; BSR set to: 0
 14541                           
 14542                           ; BSR set to: 0
 14543  011DD6  0100               	movlb	0	; () banked
 14544  011DD8  519C               	movf	Port_SetType@pType& (0+255),w,b
 14545                           
 14546                           ; Switch size 1, requested type "space"
 14547                           ; Number of cases is 4, Range of values is 0 to 3
 14548                           ; switch strategies available:
 14549                           ; Name         Instructions Cycles
 14550                           ; simple_byte           13     7 (average)
 14551                           ;	Chosen strategy is simple_byte
 14552  011DDA  0A00               	xorlw	0	; case 0
 14553  011DDC  B4D8               	btfsc	status,2,c
 14554  011DDE  D781               	goto	l510
 14555  011DE0  0A01               	xorlw	1	; case 1
 14556  011DE2  B4D8               	btfsc	status,2,c
 14557  011DE4  D78F               	goto	l512
 14558  011DE6  0A03               	xorlw	3	; case 2
 14559  011DE8  B4D8               	btfsc	status,2,c
 14560  011DEA  D7B0               	goto	l516
 14561  011DEC  0A01               	xorlw	1	; case 3
 14562  011DEE  B4D8               	btfsc	status,2,c
 14563  011DF0  D7D1               	goto	l519
 14564  011DF2                     l511:
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14568                           
 14569                           ; BSR set to: 0
 14570  011DF2  0E08               	movlw	8
 14571  011DF4  0100               	movlb	0	; () banked
 14572  011DF6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14573  011DF8  0100               	movlb	0	; () banked
 14574  011DFA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14575  011DFC  0E00               	movlw	0
 14576  011DFE  0100               	movlb	0	; () banked
 14577  011E00  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14578  011E02  0100               	movlb	0	; () banked
 14579  011E04  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14580  011E06  0E00               	movlw	0
 14581  011E08  0100               	movlb	0	; () banked
 14582  011E0A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14583  011E0C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14584  011E10  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14585                           
 14586                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14587  011E14  0E08               	movlw	8
 14588  011E16  0100               	movlb	0	; () banked
 14589  011E18  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14590  011E1A  0100               	movlb	0	; () banked
 14591  011E1C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14592  011E1E  0E00               	movlw	0
 14593  011E20  0100               	movlb	0	; () banked
 14594  011E22  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14595  011E24  0100               	movlb	0	; () banked
 14596  011E26  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14597  011E28  0E01               	movlw	1
 14598  011E2A  0100               	movlb	0	; () banked
 14599  011E2C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14600  011E2E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14601  011E32  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14602                           
 14603                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14604  011E36  0E08               	movlw	8
 14605  011E38  0100               	movlb	0	; () banked
 14606  011E3A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14607  011E3C  0100               	movlb	0	; () banked
 14608  011E3E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14609  011E40  0E00               	movlw	0
 14610  011E42  0100               	movlb	0	; () banked
 14611  011E44  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14612  011E46  0100               	movlb	0	; () banked
 14613  011E48  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14614  011E4A  0E02               	movlw	2
 14615  011E4C  0100               	movlb	0	; () banked
 14616  011E4E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14617  011E50  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14618  011E54  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14619                           
 14620                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14621  011E58  0E08               	movlw	8
 14622  011E5A  0100               	movlb	0	; () banked
 14623  011E5C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14624  011E5E  0100               	movlb	0	; () banked
 14625  011E60  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14626  011E62  0E00               	movlw	0
 14627  011E64  0100               	movlb	0	; () banked
 14628  011E66  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14629  011E68  0100               	movlb	0	; () banked
 14630  011E6A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14631  011E6C  0E03               	movlw	3
 14632  011E6E  0100               	movlb	0	; () banked
 14633  011E70  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14634  011E72  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14635  011E76  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14636                           
 14637                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14638  011E7A  0E08               	movlw	8
 14639  011E7C  0100               	movlb	0	; () banked
 14640  011E7E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14641  011E80  0100               	movlb	0	; () banked
 14642  011E82  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14643  011E84  0E00               	movlw	0
 14644  011E86  0100               	movlb	0	; () banked
 14645  011E88  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14646  011E8A  0100               	movlb	0	; () banked
 14647  011E8C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14648  011E8E  0E04               	movlw	4
 14649  011E90  0100               	movlb	0	; () banked
 14650  011E92  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14651  011E94  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14652  011E98  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14653                           
 14654                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14655  011E9C  0E08               	movlw	8
 14656  011E9E  0100               	movlb	0	; () banked
 14657  011EA0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14658  011EA2  0100               	movlb	0	; () banked
 14659  011EA4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14660  011EA6  0E00               	movlw	0
 14661  011EA8  0100               	movlb	0	; () banked
 14662  011EAA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14663  011EAC  0100               	movlb	0	; () banked
 14664  011EAE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14665  011EB0  0E05               	movlw	5
 14666  011EB2  0100               	movlb	0	; () banked
 14667  011EB4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14668  011EB6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14669  011EBA  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14670                           
 14671                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 14672  011EBE  0E08               	movlw	8
 14673  011EC0  0100               	movlb	0	; () banked
 14674  011EC2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14675  011EC4  0100               	movlb	0	; () banked
 14676  011EC6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14677  011EC8  0E00               	movlw	0
 14678  011ECA  0100               	movlb	0	; () banked
 14679  011ECC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14680  011ECE  0100               	movlb	0	; () banked
 14681  011ED0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14682  011ED2  0E06               	movlw	6
 14683  011ED4  0100               	movlb	0	; () banked
 14684  011ED6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14685  011ED8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14686  011EDC  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14687                           
 14688                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 14689  011EE0  0E08               	movlw	8
 14690  011EE2  0100               	movlb	0	; () banked
 14691  011EE4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14692  011EE6  0100               	movlb	0	; () banked
 14693  011EE8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14694  011EEA  0E00               	movlw	0
 14695  011EEC  0100               	movlb	0	; () banked
 14696  011EEE  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14697  011EF0  0100               	movlb	0	; () banked
 14698  011EF2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14699  011EF4  0E07               	movlw	7
 14700  011EF6  0100               	movlb	0	; () banked
 14701  011EF8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14702  011EFA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14703  011EFE  EC15  F0AE         	call	_Word_SetPair	;wreg free
 14704  011F02  0012               	return	
 14705  011F04                     __end_of_Port_SetType:
 14706                           	opt stack 0
 14707                           tblptru	equ	0xFF8
 14708                           tblptrh	equ	0xFF7
 14709                           tblptrl	equ	0xFF6
 14710                           tablat	equ	0xFF5
 14711                           prodh	equ	0xFF4
 14712                           prodl	equ	0xFF3
 14713                           intcon	equ	0xFF2
 14714                           postinc0	equ	0xFEE
 14715                           wreg	equ	0xFE8
 14716                           indf1	equ	0xFE7
 14717                           postdec1	equ	0xFE5
 14718                           fsr1h	equ	0xFE2
 14719                           fsr1l	equ	0xFE1
 14720                           indf2	equ	0xFDF
 14721                           postinc2	equ	0xFDE
 14722                           postdec2	equ	0xFDD
 14723                           fsr2h	equ	0xFDA
 14724                           fsr2l	equ	0xFD9
 14725                           status	equ	0xFD8
 14726                           
 14727 ;; *************** function _Port_CheckPortType *****************
 14728 ;; Defined at:
 14729 ;;		line 138 in file "Library/Port.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14732 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14733 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14734 ;;  pDrive          1   56[BANK0 ] enum E6469
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;  Output          1   57[BANK0 ] enum E6475
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  1    wreg      enum E6475
 14739 ;; Registers used:
 14740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14746 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14749 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14750 ;;Total ram usage:        4 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:   13
 14753 ;; This function calls:
 14754 ;;		_Port_CheckQuadType
 14755 ;; This function is called by:
 14756 ;;		_Port_SetType
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           	psect	text60
 14761  015B0C                     __ptext60:
 14762                           	opt stack 0
 14763  015B0C                     _Port_CheckPortType:
 14764                           	opt stack 14
 14765                           
 14766                           ;Port.c: 140: ePinError Output = ePinErrorState;
 14767                           
 14768                           ;incstack = 0
 14769  015B0C  0E05               	movlw	5
 14770  015B0E  0100               	movlb	0	; () banked
 14771  015B10  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14772                           
 14773                           ; BSR set to: 0
 14774                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 14775  015B12  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14776  015B16  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14777  015B1A  0E00               	movlw	0
 14778  015B1C  0100               	movlb	0	; () banked
 14779  015B1E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14780  015B20  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14781  015B24  EC3D  F0AC         	call	_Port_CheckQuadType	;wreg free
 14782  015B28  0100               	movlb	0	; () banked
 14783  015B2A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14784  015B2C  0100               	movlb	0	; () banked
 14785  015B2E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14786  015B30  A4D8               	btfss	status,2,c
 14787  015B32  D00D               	goto	l397
 14788                           
 14789                           ; BSR set to: 0
 14790                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 14791  015B34  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14792  015B38  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14793  015B3C  0E01               	movlw	1
 14794  015B3E  0100               	movlb	0	; () banked
 14795  015B40  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14796  015B42  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14797  015B46  EC3D  F0AC         	call	_Port_CheckQuadType	;wreg free
 14798  015B4A  0100               	movlb	0	; () banked
 14799  015B4C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14800  015B4E                     l397:
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;Port.c: 146: return Output;
 14804                           
 14805                           ; BSR set to: 0
 14806  015B4E  0100               	movlb	0	; () banked
 14807  015B50  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14808  015B52  0012               	return	
 14809  015B54                     __end_of_Port_CheckPortType:
 14810                           	opt stack 0
 14811                           tblptru	equ	0xFF8
 14812                           tblptrh	equ	0xFF7
 14813                           tblptrl	equ	0xFF6
 14814                           tablat	equ	0xFF5
 14815                           prodh	equ	0xFF4
 14816                           prodl	equ	0xFF3
 14817                           intcon	equ	0xFF2
 14818                           postinc0	equ	0xFEE
 14819                           wreg	equ	0xFE8
 14820                           indf1	equ	0xFE7
 14821                           postdec1	equ	0xFE5
 14822                           fsr1h	equ	0xFE2
 14823                           fsr1l	equ	0xFE1
 14824                           indf2	equ	0xFDF
 14825                           postinc2	equ	0xFDE
 14826                           postdec2	equ	0xFDD
 14827                           fsr2h	equ	0xFDA
 14828                           fsr2l	equ	0xFD9
 14829                           status	equ	0xFD8
 14830                           
 14831 ;; *************** function _Port_Set *****************
 14832 ;; Defined at:
 14833 ;;		line 570 in file "Library/Port.c"
 14834 ;; Parameters:    Size  Location     Type
 14835 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14836 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14837 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14838 ;;  pValue          1   17[BANK0 ] unsigned char 
 14839 ;; Auto vars:     Size  Location     Type
 14840 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 14841 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 14842 ;;  Type            1   38[BANK0 ] enum E6795
 14843 ;; Return value:  Size  Location     Type
 14844 ;;                  1    wreg      void 
 14845 ;; Registers used:
 14846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14852 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14853 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14854 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14855 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14856 ;;Total ram usage:       24 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:   10
 14859 ;; This function calls:
 14860 ;;		_Byte_SetByte
 14861 ;;		_Word_GetPair
 14862 ;; This function is called by:
 14863 ;;		_Port_Init
 14864 ;;		_Port_Toggle
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           	psect	text61
 14869  01109C                     __ptext61:
 14870                           	opt stack 0
 14871  01109C                     _Port_Set:
 14872                           	opt stack 17
 14873                           
 14874                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 14875                           
 14876                           ; BSR set to: 0
 14877                           ;incstack = 0
 14878  01109C  0E08               	movlw	8
 14879  01109E  0100               	movlb	0	; () banked
 14880  0110A0  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14881  0110A2  0100               	movlb	0	; () banked
 14882  0110A4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14883  0110A6  0E00               	movlw	0
 14884  0110A8  0100               	movlb	0	; () banked
 14885  0110AA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14886  0110AC  0100               	movlb	0	; () banked
 14887  0110AE  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14888  0110B0  0E00               	movlw	0
 14889  0110B2  0100               	movlb	0	; () banked
 14890  0110B4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14891  0110B6  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 14892  0110BA  0100               	movlb	0	; () banked
 14893  0110BC  6F86               	movwf	Port_Set@Type& (0+255),b
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 14897  0110BE  0100               	movlb	0	; () banked
 14898  0110C0  5186               	movf	Port_Set@Type& (0+255),w,b
 14899  0110C2  0100               	movlb	0	; () banked
 14900  0110C4  6F72               	movwf	??_Port_Set& (0+255),b
 14901  0110C6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14902  0110C8  0E0E               	movlw	14
 14903  0110CA                     u9495:
 14904  0110CA  90D8               	bcf	status,0,c
 14905  0110CC  0100               	movlb	0	; () banked
 14906  0110CE  3772               	rlcf	??_Port_Set& (0+255),f,b
 14907  0110D0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14908  0110D2  2EE8               	decfsz	wreg,f,c
 14909  0110D4  D7FA               	goto	u9495
 14910  0110D6  0100               	movlb	0	; () banked
 14911  0110D8  5186               	movf	Port_Set@Type& (0+255),w,b
 14912  0110DA  0100               	movlb	0	; () banked
 14913  0110DC  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 14914  0110DE  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 14915  0110E0  0E0C               	movlw	12
 14916  0110E2                     u9505:
 14917  0110E2  90D8               	bcf	status,0,c
 14918  0110E4  0100               	movlb	0	; () banked
 14919  0110E6  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 14920  0110E8  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 14921  0110EA  2EE8               	decfsz	wreg,f,c
 14922  0110EC  D7FA               	goto	u9505
 14923  0110EE  0100               	movlb	0	; () banked
 14924  0110F0  5186               	movf	Port_Set@Type& (0+255),w,b
 14925  0110F2  0100               	movlb	0	; () banked
 14926  0110F4  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 14927  0110F6  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 14928  0110F8  0E0A               	movlw	10
 14929  0110FA                     u9515:
 14930  0110FA  90D8               	bcf	status,0,c
 14931  0110FC  0100               	movlb	0	; () banked
 14932  0110FE  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 14933  011100  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 14934  011102  2EE8               	decfsz	wreg,f,c
 14935  011104  D7FA               	goto	u9515
 14936  011106  0100               	movlb	0	; () banked
 14937  011108  5186               	movf	Port_Set@Type& (0+255),w,b
 14938  01110A  0100               	movlb	0	; () banked
 14939  01110C  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 14940  01110E  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 14941  011110  0100               	movlb	0	; () banked
 14942  011112  5186               	movf	Port_Set@Type& (0+255),w,b
 14943  011114  0100               	movlb	0	; () banked
 14944  011116  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 14945  011118  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 14946  01111A  0E06               	movlw	6
 14947  01111C                     u9525:
 14948  01111C  90D8               	bcf	status,0,c
 14949  01111E  0100               	movlb	0	; () banked
 14950  011120  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 14951  011122  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 14952  011124  2EE8               	decfsz	wreg,f,c
 14953  011126  D7FA               	goto	u9525
 14954  011128  0100               	movlb	0	; () banked
 14955  01112A  5186               	movf	Port_Set@Type& (0+255),w,b
 14956  01112C  0100               	movlb	0	; () banked
 14957  01112E  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 14958  011130  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 14959  011132  0100               	movlb	0	; () banked
 14960  011134  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 14961  011136  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 14962  011138  0EF0               	movlw	240
 14963  01113A  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 14964  01113C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 14965  01113E  0B0F               	andlw	15
 14966  011140  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 14967  011142  0EF0               	movlw	240
 14968  011144  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 14969  011146  0100               	movlb	0	; () banked
 14970  011148  5186               	movf	Port_Set@Type& (0+255),w,b
 14971  01114A  0100               	movlb	0	; () banked
 14972  01114C  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 14973  01114E  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 14974  011150  0100               	movlb	0	; () banked
 14975  011152  90D8               	bcf	status,0,c
 14976  011154  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 14977  011156  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 14978  011158  0100               	movlb	0	; () banked
 14979  01115A  90D8               	bcf	status,0,c
 14980  01115C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 14981  01115E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 14982  011160  0100               	movlb	0	; () banked
 14983  011162  5186               	movf	Port_Set@Type& (0+255),w,b
 14984  011164  0100               	movlb	0	; () banked
 14985  011166  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 14986  011168  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 14987  01116A  0100               	movlb	0	; () banked
 14988  01116C  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 14989  01116E  0100               	movlb	0	; () banked
 14990  011170  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14991  011172  0100               	movlb	0	; () banked
 14992  011174  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 14993  011176  0100               	movlb	0	; () banked
 14994  011178  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14995  01117A  0100               	movlb	0	; () banked
 14996  01117C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 14997  01117E  0100               	movlb	0	; () banked
 14998  011180  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14999  011182  0100               	movlb	0	; () banked
 15000  011184  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 15001  011186  0100               	movlb	0	; () banked
 15002  011188  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15003  01118A  0100               	movlb	0	; () banked
 15004  01118C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 15005  01118E  0100               	movlb	0	; () banked
 15006  011190  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15007  011192  0100               	movlb	0	; () banked
 15008  011194  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 15009  011196  0100               	movlb	0	; () banked
 15010  011198  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15011  01119A  0100               	movlb	0	; () banked
 15012  01119C  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 15013  01119E  0100               	movlb	0	; () banked
 15014  0111A0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15015  0111A2  0100               	movlb	0	; () banked
 15016  0111A4  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 15017  0111A6  0100               	movlb	0	; () banked
 15018  0111A8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15019  0111AA  0100               	movlb	0	; () banked
 15020  0111AC  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 15021  0111AE  0100               	movlb	0	; () banked
 15022  0111B0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15023  0111B2  0100               	movlb	0	; () banked
 15024  0111B4  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 15025  0111B6  0100               	movlb	0	; () banked
 15026  0111B8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15027  0111BA  0100               	movlb	0	; () banked
 15028  0111BC  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 15029  0111BE  0100               	movlb	0	; () banked
 15030  0111C0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15031  0111C2  0100               	movlb	0	; () banked
 15032  0111C4  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 15033  0111C6  0100               	movlb	0	; () banked
 15034  0111C8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15035  0111CA  0100               	movlb	0	; () banked
 15036  0111CC  5172               	movf	??_Port_Set& (0+255),w,b
 15037  0111CE  0100               	movlb	0	; () banked
 15038  0111D0  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15039  0111D2  0100               	movlb	0	; () banked
 15040  0111D4  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 15041  0111D6  0100               	movlb	0	; () banked
 15042  0111D8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15043  0111DA  0100               	movlb	0	; () banked
 15044  0111DC  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15045  0111DE  0100               	movlb	0	; () banked
 15046  0111E0  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15047                           
 15048                           ; BSR set to: 0
 15049                           ;Port.c: 574: UINT16 TypeActual = Type;
 15050  0111E2  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 15051  0111E6  0100               	movlb	0	; () banked
 15052  0111E8  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15053                           
 15054                           ; BSR set to: 0
 15055                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15056  0111EA  0E08               	movlw	8
 15057  0111EC  0100               	movlb	0	; () banked
 15058  0111EE  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15059  0111F0  0100               	movlb	0	; () banked
 15060  0111F2  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15061  0111F4  0E00               	movlw	0
 15062  0111F6  0100               	movlb	0	; () banked
 15063  0111F8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15064  0111FA  0100               	movlb	0	; () banked
 15065  0111FC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15066  0111FE  0E01               	movlw	1
 15067  011200  0100               	movlb	0	; () banked
 15068  011202  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15069  011204  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15070  011208  0100               	movlb	0	; () banked
 15071  01120A  6F72               	movwf	??_Port_Set& (0+255),b
 15072  01120C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15073  01120E  0100               	movlb	0	; () banked
 15074  011210  90D8               	bcf	status,0,c
 15075  011212  3772               	rlcf	??_Port_Set& (0+255),f,b
 15076  011214  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15077  011216  0100               	movlb	0	; () banked
 15078  011218  90D8               	bcf	status,0,c
 15079  01121A  3772               	rlcf	??_Port_Set& (0+255),f,b
 15080  01121C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15081  01121E  0100               	movlb	0	; () banked
 15082  011220  5172               	movf	??_Port_Set& (0+255),w,b
 15083  011222  0100               	movlb	0	; () banked
 15084  011224  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15085  011226  0100               	movlb	0	; () banked
 15086  011228  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15087  01122A  0100               	movlb	0	; () banked
 15088  01122C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15092  01122E  0E08               	movlw	8
 15093  011230  0100               	movlb	0	; () banked
 15094  011232  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15095  011234  0100               	movlb	0	; () banked
 15096  011236  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15097  011238  0E00               	movlw	0
 15098  01123A  0100               	movlb	0	; () banked
 15099  01123C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15100  01123E  0100               	movlb	0	; () banked
 15101  011240  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15102  011242  0E02               	movlw	2
 15103  011244  0100               	movlb	0	; () banked
 15104  011246  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15105  011248  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15106  01124C  0100               	movlb	0	; () banked
 15107  01124E  6F72               	movwf	??_Port_Set& (0+255),b
 15108  011250  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15109  011252  0100               	movlb	0	; () banked
 15110  011254  3B72               	swapf	??_Port_Set& (0+255),f,b
 15111  011256  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 15112  011258  0EF0               	movlw	240
 15113  01125A  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 15114  01125C  5172               	movf	??_Port_Set& (0+255),w,b
 15115  01125E  0B0F               	andlw	15
 15116  011260  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15117  011262  0EF0               	movlw	240
 15118  011264  1772               	andwf	??_Port_Set& (0+255),f,b
 15119  011266  0100               	movlb	0	; () banked
 15120  011268  5172               	movf	??_Port_Set& (0+255),w,b
 15121  01126A  0100               	movlb	0	; () banked
 15122  01126C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15123  01126E  0100               	movlb	0	; () banked
 15124  011270  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15125  011272  0100               	movlb	0	; () banked
 15126  011274  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15130  011276  0E08               	movlw	8
 15131  011278  0100               	movlb	0	; () banked
 15132  01127A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15133  01127C  0100               	movlb	0	; () banked
 15134  01127E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15135  011280  0E00               	movlw	0
 15136  011282  0100               	movlb	0	; () banked
 15137  011284  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15138  011286  0100               	movlb	0	; () banked
 15139  011288  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15140  01128A  0E03               	movlw	3
 15141  01128C  0100               	movlb	0	; () banked
 15142  01128E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15143  011290  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15144  011294  0100               	movlb	0	; () banked
 15145  011296  6F72               	movwf	??_Port_Set& (0+255),b
 15146  011298  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15147  01129A  0E06               	movlw	6
 15148  01129C                     u9535:
 15149  01129C  90D8               	bcf	status,0,c
 15150  01129E  0100               	movlb	0	; () banked
 15151  0112A0  3772               	rlcf	??_Port_Set& (0+255),f,b
 15152  0112A2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15153  0112A4  2EE8               	decfsz	wreg,f,c
 15154  0112A6  D7FA               	goto	u9535
 15155  0112A8  0100               	movlb	0	; () banked
 15156  0112AA  5172               	movf	??_Port_Set& (0+255),w,b
 15157  0112AC  0100               	movlb	0	; () banked
 15158  0112AE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15159  0112B0  0100               	movlb	0	; () banked
 15160  0112B2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15161  0112B4  0100               	movlb	0	; () banked
 15162  0112B6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15163                           
 15164                           ; BSR set to: 0
 15165                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15166  0112B8  0E08               	movlw	8
 15167  0112BA  0100               	movlb	0	; () banked
 15168  0112BC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15169  0112BE  0100               	movlb	0	; () banked
 15170  0112C0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15171  0112C2  0E00               	movlw	0
 15172  0112C4  0100               	movlb	0	; () banked
 15173  0112C6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15174  0112C8  0100               	movlb	0	; () banked
 15175  0112CA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15176  0112CC  0E04               	movlw	4
 15177  0112CE  0100               	movlb	0	; () banked
 15178  0112D0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15179  0112D2  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15180  0112D6  0100               	movlb	0	; () banked
 15181  0112D8  6F72               	movwf	??_Port_Set& (0+255),b
 15182  0112DA  0100               	movlb	0	; () banked
 15183  0112DC  5172               	movf	??_Port_Set& (0+255),w,b
 15184  0112DE  0100               	movlb	0	; () banked
 15185  0112E0  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 15186  0112E2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15187  0112E4  0100               	movlb	0	; () banked
 15188  0112E6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15189  0112E8  0100               	movlb	0	; () banked
 15190  0112EA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15191  0112EC  0100               	movlb	0	; () banked
 15192  0112EE  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 15193  0112F0  0100               	movlb	0	; () banked
 15194  0112F2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15195                           
 15196                           ; BSR set to: 0
 15197                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15198  0112F4  0E08               	movlw	8
 15199  0112F6  0100               	movlb	0	; () banked
 15200  0112F8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15201  0112FA  0100               	movlb	0	; () banked
 15202  0112FC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15203  0112FE  0E00               	movlw	0
 15204  011300  0100               	movlb	0	; () banked
 15205  011302  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15206  011304  0100               	movlb	0	; () banked
 15207  011306  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15208  011308  0E05               	movlw	5
 15209  01130A  0100               	movlb	0	; () banked
 15210  01130C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15211  01130E  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15212  011312  0100               	movlb	0	; () banked
 15213  011314  6F72               	movwf	??_Port_Set& (0+255),b
 15214  011316  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15215  011318  0E0A               	movlw	10
 15216  01131A                     u9545:
 15217  01131A  90D8               	bcf	status,0,c
 15218  01131C  0100               	movlb	0	; () banked
 15219  01131E  3772               	rlcf	??_Port_Set& (0+255),f,b
 15220  011320  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15221  011322  2EE8               	decfsz	wreg,f,c
 15222  011324  D7FA               	goto	u9545
 15223  011326  0100               	movlb	0	; () banked
 15224  011328  5172               	movf	??_Port_Set& (0+255),w,b
 15225  01132A  0100               	movlb	0	; () banked
 15226  01132C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15227  01132E  0100               	movlb	0	; () banked
 15228  011330  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15229  011332  0100               	movlb	0	; () banked
 15230  011334  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15231                           
 15232                           ; BSR set to: 0
 15233                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15234  011336  0E08               	movlw	8
 15235  011338  0100               	movlb	0	; () banked
 15236  01133A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15237  01133C  0100               	movlb	0	; () banked
 15238  01133E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15239  011340  0E00               	movlw	0
 15240  011342  0100               	movlb	0	; () banked
 15241  011344  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15242  011346  0100               	movlb	0	; () banked
 15243  011348  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15244  01134A  0E06               	movlw	6
 15245  01134C  0100               	movlb	0	; () banked
 15246  01134E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15247  011350  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15248  011354  0100               	movlb	0	; () banked
 15249  011356  6F72               	movwf	??_Port_Set& (0+255),b
 15250  011358  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15251  01135A  0E0C               	movlw	12
 15252  01135C                     u9555:
 15253  01135C  90D8               	bcf	status,0,c
 15254  01135E  0100               	movlb	0	; () banked
 15255  011360  3772               	rlcf	??_Port_Set& (0+255),f,b
 15256  011362  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15257  011364  2EE8               	decfsz	wreg,f,c
 15258  011366  D7FA               	goto	u9555
 15259  011368  0100               	movlb	0	; () banked
 15260  01136A  5172               	movf	??_Port_Set& (0+255),w,b
 15261  01136C  0100               	movlb	0	; () banked
 15262  01136E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15263  011370  0100               	movlb	0	; () banked
 15264  011372  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15265  011374  0100               	movlb	0	; () banked
 15266  011376  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15270  011378  0E08               	movlw	8
 15271  01137A  0100               	movlb	0	; () banked
 15272  01137C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15273  01137E  0100               	movlb	0	; () banked
 15274  011380  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15275  011382  0E00               	movlw	0
 15276  011384  0100               	movlb	0	; () banked
 15277  011386  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15278  011388  0100               	movlb	0	; () banked
 15279  01138A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15280  01138C  0E07               	movlw	7
 15281  01138E  0100               	movlb	0	; () banked
 15282  011390  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15283  011392  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 15284  011396  0100               	movlb	0	; () banked
 15285  011398  6F72               	movwf	??_Port_Set& (0+255),b
 15286  01139A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15287  01139C  0E0E               	movlw	14
 15288  01139E                     u9565:
 15289  01139E  90D8               	bcf	status,0,c
 15290  0113A0  0100               	movlb	0	; () banked
 15291  0113A2  3772               	rlcf	??_Port_Set& (0+255),f,b
 15292  0113A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15293  0113A6  2EE8               	decfsz	wreg,f,c
 15294  0113A8  D7FA               	goto	u9565
 15295  0113AA  0100               	movlb	0	; () banked
 15296  0113AC  5172               	movf	??_Port_Set& (0+255),w,b
 15297  0113AE  0100               	movlb	0	; () banked
 15298  0113B0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15299  0113B2  0100               	movlb	0	; () banked
 15300  0113B4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15301  0113B6  0100               	movlb	0	; () banked
 15302  0113B8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15303                           
 15304                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15305  0113BA  0100               	movlb	0	; () banked
 15306  0113BC  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 15307  0113BE  0100               	movlb	0	; () banked
 15308  0113C0  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15309  0113C2  E148               	bnz	l528
 15310  0113C4  0100               	movlb	0	; () banked
 15311  0113C6  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15312  0113C8  0100               	movlb	0	; () banked
 15313  0113CA  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15314  0113CC  A4D8               	btfss	status,2,c
 15315  0113CE  0012               	return	
 15316  0113D0  D032               	goto	l526
 15317  0113D2                     
 15318                           ; BSR set to: 0
 15319                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15320                           
 15321                           ; BSR set to: 0
 15322  0113D2  0100               	movlb	0	; () banked
 15323  0113D4  EE20 F002          	lfsr	2,2
 15324  0113D8  516F               	movf	Port_Set@pInput& (0+255),w,b
 15325  0113DA  26D9               	addwf	fsr2l,f,c
 15326  0113DC  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15327  0113DE  22DA               	addwfc	fsr2h,f,c
 15328  0113E0  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15329  0113E4  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15330  0113E8  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15331  0113EC  EC86  F0B2         	call	_Byte_SetByte	;wreg free
 15332                           
 15333                           ;Port.c: 594: break;
 15334  0113F0  0012               	return	
 15335  0113F2                     
 15336                           ;Port.c: 597: pValue = ~pValue;
 15337  0113F2  0100               	movlb	0	; () banked
 15338  0113F4  1F71               	comf	Port_Set@pValue& (0+255),f,b
 15339                           
 15340                           ; BSR set to: 0
 15341                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15342  0113F6  0100               	movlb	0	; () banked
 15343  0113F8  EE20 F002          	lfsr	2,2
 15344  0113FC  516F               	movf	Port_Set@pInput& (0+255),w,b
 15345  0113FE  26D9               	addwf	fsr2l,f,c
 15346  011400  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15347  011402  22DA               	addwfc	fsr2h,f,c
 15348  011404  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15349  011408  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15350  01140C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15351  011410  EC86  F0B2         	call	_Byte_SetByte	;wreg free
 15352                           
 15353                           ;Port.c: 599: break;
 15354  011414  0012               	return	
 15355  011416                     
 15356                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15357  011416  0100               	movlb	0	; () banked
 15358  011418  EE20 F004          	lfsr	2,4
 15359  01141C  516F               	movf	Port_Set@pInput& (0+255),w,b
 15360  01141E  26D9               	addwf	fsr2l,f,c
 15361  011420  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15362  011422  22DA               	addwfc	fsr2h,f,c
 15363  011424  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15364  011428  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15365  01142C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15366  011430  EC86  F0B2         	call	_Byte_SetByte	;wreg free
 15367                           
 15368                           ;Port.c: 606: }
 15369                           
 15370                           ;Port.c: 605: break;
 15371                           
 15372                           ;Port.c: 604: default:
 15373                           
 15374                           ;Port.c: 603: break;
 15375  011434  0012               	return	
 15376  011436                     l526:
 15377  011436  0100               	movlb	0	; () banked
 15378  011438  5186               	movf	Port_Set@Type& (0+255),w,b
 15379                           
 15380                           ; Switch size 1, requested type "space"
 15381                           ; Number of cases is 4, Range of values is 0 to 3
 15382                           ; switch strategies available:
 15383                           ; Name         Instructions Cycles
 15384                           ; simple_byte           13     7 (average)
 15385                           ;	Chosen strategy is simple_byte
 15386  01143A  0A00               	xorlw	0	; case 0
 15387  01143C  B4D8               	btfsc	status,2,c
 15388  01143E  0012               	return	
 15389  011440  0A01               	xorlw	1	; case 1
 15390  011442  B4D8               	btfsc	status,2,c
 15391  011444  D7C6               	goto	l529
 15392  011446  0A03               	xorlw	3	; case 2
 15393  011448  B4D8               	btfsc	status,2,c
 15394  01144A  D7D3               	goto	l531
 15395  01144C  0A01               	xorlw	1	; case 3
 15396  01144E  A4D8               	btfss	status,2,c
 15397                           
 15398                           ; BSR set to: 0
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;Port.c: 607: }
 15402  011450  0012               	return	
 15403  011452  D7E1               	goto	l532
 15404  011454                     l528:
 15405  011454  0012               	return		;funcret
 15406  011456                     __end_of_Port_Set:
 15407                           	opt stack 0
 15408                           tblptru	equ	0xFF8
 15409                           tblptrh	equ	0xFF7
 15410                           tblptrl	equ	0xFF6
 15411                           tablat	equ	0xFF5
 15412                           prodh	equ	0xFF4
 15413                           prodl	equ	0xFF3
 15414                           intcon	equ	0xFF2
 15415                           postinc0	equ	0xFEE
 15416                           wreg	equ	0xFE8
 15417                           indf1	equ	0xFE7
 15418                           postdec1	equ	0xFE5
 15419                           fsr1h	equ	0xFE2
 15420                           fsr1l	equ	0xFE1
 15421                           indf2	equ	0xFDF
 15422                           postinc2	equ	0xFDE
 15423                           postdec2	equ	0xFDD
 15424                           fsr2h	equ	0xFDA
 15425                           fsr2l	equ	0xFD9
 15426                           status	equ	0xFD8
 15427                           
 15428 ;; *************** function _Byte_SetByte *****************
 15429 ;; Defined at:
 15430 ;;		line 110 in file "Library/Types.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15433 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15434 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15435 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15436 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15437 ;;		 -> NULL(0), 
 15438 ;;  pValue          1    2[BANK0 ] unsigned char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;		None
 15441 ;; Return value:  Size  Location     Type
 15442 ;;                  1    wreg      void 
 15443 ;; Registers used:
 15444 ;;		fsr2l, fsr2h
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15450 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15453 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15454 ;;Total ram usage:        3 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    7
 15457 ;; This function calls:
 15458 ;;		Nothing
 15459 ;; This function is called by:
 15460 ;;		_Port_Set
 15461 ;;		_I2C_Init
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text62
 15466  01650C                     __ptext62:
 15467                           	opt stack 0
 15468  01650C                     _Byte_SetByte:
 15469                           	opt stack 19
 15470                           
 15471                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15472                           
 15473                           ;incstack = 0
 15474  01650C  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15475  016510  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15476  016514  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 15477  016518  0012               	return		;funcret
 15478  01651A                     __end_of_Byte_SetByte:
 15479                           	opt stack 0
 15480                           tblptru	equ	0xFF8
 15481                           tblptrh	equ	0xFF7
 15482                           tblptrl	equ	0xFF6
 15483                           tablat	equ	0xFF5
 15484                           prodh	equ	0xFF4
 15485                           prodl	equ	0xFF3
 15486                           intcon	equ	0xFF2
 15487                           postinc0	equ	0xFEE
 15488                           wreg	equ	0xFE8
 15489                           indf1	equ	0xFE7
 15490                           postdec1	equ	0xFE5
 15491                           fsr1h	equ	0xFE2
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           fsr2h	equ	0xFDA
 15497                           fsr2l	equ	0xFD9
 15498                           status	equ	0xFD8
 15499                           
 15500 ;; *************** function _GetPortTRIS *****************
 15501 ;; Defined at:
 15502 ;;		line 67 in file "Library/Port.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;  pInput          1    wreg     enum E6786
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;  pInput          1    2[BANK0 ] enum E6786
 15507 ;; Return value:  Size  Location     Type
 15508 ;;                  2    0[BANK0 ] PTR struct Byte
 15509 ;; Registers used:
 15510 ;;		wreg, status,2, status,0
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15516 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15519 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15520 ;;Total ram usage:        3 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    7
 15523 ;; This function calls:
 15524 ;;		Nothing
 15525 ;; This function is called by:
 15526 ;;		_Port_Init
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           	psect	text63
 15531  0147C4                     __ptext63:
 15532                           	opt stack 0
 15533  0147C4                     _GetPortTRIS:
 15534                           	opt stack 20
 15535                           
 15536                           ;incstack = 0
 15537                           ;GetPortTRIS@pInput stored from wreg
 15538  0147C4  0100               	movlb	0	; () banked
 15539  0147C6  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 15540                           
 15541                           ;Port.c: 69: switch (pInput)
 15542  0147C8  D038               	goto	l363
 15543  0147CA                     
 15544                           ;Port.c: 72: return (BytePtr)&TRISA;
 15545  0147CA  0E92               	movlw	146
 15546  0147CC  0100               	movlb	0	; () banked
 15547  0147CE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15548  0147D0  0E0F               	movlw	15
 15549  0147D2  0100               	movlb	0	; () banked
 15550  0147D4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15551                           
 15552                           ; BSR set to: 0
 15553  0147D6  0012               	return	
 15554  0147D8                     
 15555                           ; BSR set to: 0
 15556                           ;Port.c: 74: return (BytePtr)&TRISB;
 15557                           
 15558                           ; BSR set to: 0
 15559  0147D8  0E93               	movlw	147
 15560  0147DA  0100               	movlb	0	; () banked
 15561  0147DC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15562  0147DE  0E0F               	movlw	15
 15563  0147E0  0100               	movlb	0	; () banked
 15564  0147E2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15565                           
 15566                           ; BSR set to: 0
 15567  0147E4  0012               	return	
 15568  0147E6                     
 15569                           ; BSR set to: 0
 15570                           ;Port.c: 76: return (BytePtr)&TRISC;
 15571                           
 15572                           ; BSR set to: 0
 15573  0147E6  0E94               	movlw	148
 15574  0147E8  0100               	movlb	0	; () banked
 15575  0147EA  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15576  0147EC  0E0F               	movlw	15
 15577  0147EE  0100               	movlb	0	; () banked
 15578  0147F0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15579                           
 15580                           ; BSR set to: 0
 15581  0147F2  0012               	return	
 15582  0147F4                     
 15583                           ; BSR set to: 0
 15584                           ;Port.c: 78: return (BytePtr)&TRISD;
 15585                           
 15586                           ; BSR set to: 0
 15587  0147F4  0E95               	movlw	149
 15588  0147F6  0100               	movlb	0	; () banked
 15589  0147F8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15590  0147FA  0E0F               	movlw	15
 15591  0147FC  0100               	movlb	0	; () banked
 15592  0147FE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15593                           
 15594                           ; BSR set to: 0
 15595  014800  0012               	return	
 15596  014802                     
 15597                           ; BSR set to: 0
 15598                           ;Port.c: 80: return (BytePtr)&TRISE;
 15599                           
 15600                           ; BSR set to: 0
 15601  014802  0E96               	movlw	150
 15602  014804  0100               	movlb	0	; () banked
 15603  014806  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15604  014808  0E0F               	movlw	15
 15605  01480A  0100               	movlb	0	; () banked
 15606  01480C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15607                           
 15608                           ; BSR set to: 0
 15609  01480E  0012               	return	
 15610  014810                     
 15611                           ; BSR set to: 0
 15612                           ;Port.c: 82: return (BytePtr)&TRISF;
 15613                           
 15614                           ; BSR set to: 0
 15615  014810  0E97               	movlw	151
 15616  014812  0100               	movlb	0	; () banked
 15617  014814  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15618  014816  0E0F               	movlw	15
 15619  014818  0100               	movlb	0	; () banked
 15620  01481A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15621                           
 15622                           ; BSR set to: 0
 15623  01481C  0012               	return	
 15624  01481E                     
 15625                           ; BSR set to: 0
 15626                           ;Port.c: 84: return (BytePtr)&TRISG;
 15627                           
 15628                           ; BSR set to: 0
 15629  01481E  0E98               	movlw	152
 15630  014820  0100               	movlb	0	; () banked
 15631  014822  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15632  014824  0E0F               	movlw	15
 15633  014826  0100               	movlb	0	; () banked
 15634  014828  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15635                           
 15636                           ; BSR set to: 0
 15637  01482A  0012               	return	
 15638  01482C                     
 15639                           ; BSR set to: 0
 15640                           ;Port.c: 86: return (void*)0;
 15641                           
 15642                           ; BSR set to: 0
 15643  01482C  0E00               	movlw	0
 15644  01482E  0100               	movlb	0	; () banked
 15645  014830  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15646  014832  0E00               	movlw	0
 15647  014834  0100               	movlb	0	; () banked
 15648  014836  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;Port.c: 87: }
 15652                           
 15653                           ; BSR set to: 0
 15654  014838  0012               	return	
 15655  01483A                     l363:
 15656                           
 15657                           ; BSR set to: 0
 15658  01483A  0100               	movlb	0	; () banked
 15659  01483C  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 15660                           
 15661                           ; Switch size 1, requested type "space"
 15662                           ; Number of cases is 7, Range of values is 0 to 6
 15663                           ; switch strategies available:
 15664                           ; Name         Instructions Cycles
 15665                           ; simple_byte           22    12 (average)
 15666                           ;	Chosen strategy is simple_byte
 15667  01483E  0A00               	xorlw	0	; case 0
 15668  014840  B4D8               	btfsc	status,2,c
 15669  014842  D7C3               	goto	l364
 15670  014844  0A01               	xorlw	1	; case 1
 15671  014846  B4D8               	btfsc	status,2,c
 15672  014848  D7C7               	goto	l366
 15673  01484A  0A03               	xorlw	3	; case 2
 15674  01484C  B4D8               	btfsc	status,2,c
 15675  01484E  D7CB               	goto	l367
 15676  014850  0A01               	xorlw	1	; case 3
 15677  014852  B4D8               	btfsc	status,2,c
 15678  014854  D7CF               	goto	l368
 15679  014856  0A07               	xorlw	7	; case 4
 15680  014858  B4D8               	btfsc	status,2,c
 15681  01485A  D7D3               	goto	l369
 15682  01485C  0A01               	xorlw	1	; case 5
 15683  01485E  B4D8               	btfsc	status,2,c
 15684  014860  D7D7               	goto	l370
 15685  014862  0A03               	xorlw	3	; case 6
 15686  014864  B4D8               	btfsc	status,2,c
 15687  014866  D7DB               	goto	l371
 15688  014868  D7E1               	goto	l372
 15689  01486A                     __end_of_GetPortTRIS:
 15690                           	opt stack 0
 15691                           tblptru	equ	0xFF8
 15692                           tblptrh	equ	0xFF7
 15693                           tblptrl	equ	0xFF6
 15694                           tablat	equ	0xFF5
 15695                           prodh	equ	0xFF4
 15696                           prodl	equ	0xFF3
 15697                           intcon	equ	0xFF2
 15698                           postinc0	equ	0xFEE
 15699                           wreg	equ	0xFE8
 15700                           indf1	equ	0xFE7
 15701                           postdec1	equ	0xFE5
 15702                           fsr1h	equ	0xFE2
 15703                           fsr1l	equ	0xFE1
 15704                           indf2	equ	0xFDF
 15705                           postinc2	equ	0xFDE
 15706                           postdec2	equ	0xFDD
 15707                           fsr2h	equ	0xFDA
 15708                           fsr2l	equ	0xFD9
 15709                           status	equ	0xFD8
 15710                           
 15711 ;; *************** function _GetPortProperties *****************
 15712 ;; Defined at:
 15713 ;;		line 21 in file "Library/Port.c"
 15714 ;; Parameters:    Size  Location     Type
 15715 ;;  pInput          1    wreg     enum E6786
 15716 ;; Auto vars:     Size  Location     Type
 15717 ;;  pInput          1    2[BANK0 ] enum E6786
 15718 ;; Return value:  Size  Location     Type
 15719 ;;                  2    0[BANK0 ] PTR struct PortProperty
 15720 ;; Registers used:
 15721 ;;		wreg, status,2, status,0
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15727 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15730 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15731 ;;Total ram usage:        3 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    7
 15734 ;; This function calls:
 15735 ;;		Nothing
 15736 ;; This function is called by:
 15737 ;;		_Port_Init
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           	psect	text64
 15742  01486A                     __ptext64:
 15743                           	opt stack 0
 15744  01486A                     _GetPortProperties:
 15745                           	opt stack 20
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;incstack = 0
 15749                           ;GetPortProperties@pInput stored from wreg
 15750  01486A  0100               	movlb	0	; () banked
 15751  01486C  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 15752                           
 15753                           ;Port.c: 23: switch (pInput)
 15754  01486E  D038               	goto	l337
 15755  014870                     
 15756                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 15757  014870  0E5F               	movlw	low _PortA_Property
 15758  014872  0100               	movlb	0	; () banked
 15759  014874  6F60               	movwf	?_GetPortProperties& (0+255),b
 15760  014876  0EFF               	movlw	high _PortA_Property
 15761  014878  0100               	movlb	0	; () banked
 15762  01487A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15763                           
 15764                           ; BSR set to: 0
 15765  01487C  0012               	return	
 15766  01487E                     
 15767                           ; BSR set to: 0
 15768                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 15769                           
 15770                           ; BSR set to: 0
 15771  01487E  0E5D               	movlw	low _PortB_Property
 15772  014880  0100               	movlb	0	; () banked
 15773  014882  6F60               	movwf	?_GetPortProperties& (0+255),b
 15774  014884  0EFF               	movlw	high _PortB_Property
 15775  014886  0100               	movlb	0	; () banked
 15776  014888  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15777                           
 15778                           ; BSR set to: 0
 15779  01488A  0012               	return	
 15780  01488C                     
 15781                           ; BSR set to: 0
 15782                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 15783                           
 15784                           ; BSR set to: 0
 15785  01488C  0E5B               	movlw	low _PortC_Property
 15786  01488E  0100               	movlb	0	; () banked
 15787  014890  6F60               	movwf	?_GetPortProperties& (0+255),b
 15788  014892  0EFF               	movlw	high _PortC_Property
 15789  014894  0100               	movlb	0	; () banked
 15790  014896  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15791                           
 15792                           ; BSR set to: 0
 15793  014898  0012               	return	
 15794  01489A                     
 15795                           ; BSR set to: 0
 15796                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 15797                           
 15798                           ; BSR set to: 0
 15799  01489A  0E59               	movlw	low _PortD_Property
 15800  01489C  0100               	movlb	0	; () banked
 15801  01489E  6F60               	movwf	?_GetPortProperties& (0+255),b
 15802  0148A0  0EFF               	movlw	high _PortD_Property
 15803  0148A2  0100               	movlb	0	; () banked
 15804  0148A4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15805                           
 15806                           ; BSR set to: 0
 15807  0148A6  0012               	return	
 15808  0148A8                     
 15809                           ; BSR set to: 0
 15810                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 15811                           
 15812                           ; BSR set to: 0
 15813  0148A8  0E57               	movlw	low _PortE_Property
 15814  0148AA  0100               	movlb	0	; () banked
 15815  0148AC  6F60               	movwf	?_GetPortProperties& (0+255),b
 15816  0148AE  0EFF               	movlw	high _PortE_Property
 15817  0148B0  0100               	movlb	0	; () banked
 15818  0148B2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15819                           
 15820                           ; BSR set to: 0
 15821  0148B4  0012               	return	
 15822  0148B6                     
 15823                           ; BSR set to: 0
 15824                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 15825                           
 15826                           ; BSR set to: 0
 15827  0148B6  0E55               	movlw	low _PortF_Property
 15828  0148B8  0100               	movlb	0	; () banked
 15829  0148BA  6F60               	movwf	?_GetPortProperties& (0+255),b
 15830  0148BC  0EFF               	movlw	high _PortF_Property
 15831  0148BE  0100               	movlb	0	; () banked
 15832  0148C0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15833                           
 15834                           ; BSR set to: 0
 15835  0148C2  0012               	return	
 15836  0148C4                     
 15837                           ; BSR set to: 0
 15838                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 15839                           
 15840                           ; BSR set to: 0
 15841  0148C4  0E53               	movlw	low _PortG_Property
 15842  0148C6  0100               	movlb	0	; () banked
 15843  0148C8  6F60               	movwf	?_GetPortProperties& (0+255),b
 15844  0148CA  0EFF               	movlw	high _PortG_Property
 15845  0148CC  0100               	movlb	0	; () banked
 15846  0148CE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15847                           
 15848                           ; BSR set to: 0
 15849  0148D0  0012               	return	
 15850  0148D2                     
 15851                           ; BSR set to: 0
 15852                           ;Port.c: 40: return (void*)0;
 15853                           
 15854                           ; BSR set to: 0
 15855  0148D2  0E00               	movlw	0
 15856  0148D4  0100               	movlb	0	; () banked
 15857  0148D6  6F60               	movwf	?_GetPortProperties& (0+255),b
 15858  0148D8  0E00               	movlw	0
 15859  0148DA  0100               	movlb	0	; () banked
 15860  0148DC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;Port.c: 41: }
 15864                           
 15865                           ; BSR set to: 0
 15866  0148DE  0012               	return	
 15867  0148E0                     l337:
 15868                           
 15869                           ; BSR set to: 0
 15870  0148E0  0100               	movlb	0	; () banked
 15871  0148E2  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 15872                           
 15873                           ; Switch size 1, requested type "space"
 15874                           ; Number of cases is 7, Range of values is 0 to 6
 15875                           ; switch strategies available:
 15876                           ; Name         Instructions Cycles
 15877                           ; simple_byte           22    12 (average)
 15878                           ;	Chosen strategy is simple_byte
 15879  0148E4  0A00               	xorlw	0	; case 0
 15880  0148E6  B4D8               	btfsc	status,2,c
 15881  0148E8  D7C3               	goto	l338
 15882  0148EA  0A01               	xorlw	1	; case 1
 15883  0148EC  B4D8               	btfsc	status,2,c
 15884  0148EE  D7C7               	goto	l340
 15885  0148F0  0A03               	xorlw	3	; case 2
 15886  0148F2  B4D8               	btfsc	status,2,c
 15887  0148F4  D7CB               	goto	l341
 15888  0148F6  0A01               	xorlw	1	; case 3
 15889  0148F8  B4D8               	btfsc	status,2,c
 15890  0148FA  D7CF               	goto	l342
 15891  0148FC  0A07               	xorlw	7	; case 4
 15892  0148FE  B4D8               	btfsc	status,2,c
 15893  014900  D7D3               	goto	l343
 15894  014902  0A01               	xorlw	1	; case 5
 15895  014904  B4D8               	btfsc	status,2,c
 15896  014906  D7D7               	goto	l344
 15897  014908  0A03               	xorlw	3	; case 6
 15898  01490A  B4D8               	btfsc	status,2,c
 15899  01490C  D7DB               	goto	l345
 15900  01490E  D7E1               	goto	l346
 15901  014910                     __end_of_GetPortProperties:
 15902                           	opt stack 0
 15903                           tblptru	equ	0xFF8
 15904                           tblptrh	equ	0xFF7
 15905                           tblptrl	equ	0xFF6
 15906                           tablat	equ	0xFF5
 15907                           prodh	equ	0xFF4
 15908                           prodl	equ	0xFF3
 15909                           intcon	equ	0xFF2
 15910                           postinc0	equ	0xFEE
 15911                           wreg	equ	0xFE8
 15912                           indf1	equ	0xFE7
 15913                           postdec1	equ	0xFE5
 15914                           fsr1h	equ	0xFE2
 15915                           fsr1l	equ	0xFE1
 15916                           indf2	equ	0xFDF
 15917                           postinc2	equ	0xFDE
 15918                           postdec2	equ	0xFDD
 15919                           fsr2h	equ	0xFDA
 15920                           fsr2l	equ	0xFD9
 15921                           status	equ	0xFD8
 15922                           
 15923 ;; *************** function _GetPortPORT *****************
 15924 ;; Defined at:
 15925 ;;		line 44 in file "Library/Port.c"
 15926 ;; Parameters:    Size  Location     Type
 15927 ;;  pInput          1    wreg     enum E6786
 15928 ;; Auto vars:     Size  Location     Type
 15929 ;;  pInput          1    2[BANK0 ] enum E6786
 15930 ;; Return value:  Size  Location     Type
 15931 ;;                  2    0[BANK0 ] PTR struct Byte
 15932 ;; Registers used:
 15933 ;;		wreg, status,2, status,0
 15934 ;; Tracked objects:
 15935 ;;		On entry : 0/0
 15936 ;;		On exit  : 0/0
 15937 ;;		Unchanged: 0/0
 15938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15939 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15942 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15943 ;;Total ram usage:        3 bytes
 15944 ;; Hardware stack levels used:    1
 15945 ;; Hardware stack levels required when called:    7
 15946 ;; This function calls:
 15947 ;;		Nothing
 15948 ;; This function is called by:
 15949 ;;		_Port_Init
 15950 ;; This function uses a non-reentrant model
 15951 ;;
 15952                           
 15953                           	psect	text65
 15954  014910                     __ptext65:
 15955                           	opt stack 0
 15956  014910                     _GetPortPORT:
 15957                           	opt stack 20
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;incstack = 0
 15961                           ;GetPortPORT@pInput stored from wreg
 15962  014910  0100               	movlb	0	; () banked
 15963  014912  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 15964                           
 15965                           ;Port.c: 46: switch (pInput)
 15966  014914  D038               	goto	l350
 15967  014916                     
 15968                           ;Port.c: 49: return (BytePtr)&PORTA;
 15969  014916  0E80               	movlw	128
 15970  014918  0100               	movlb	0	; () banked
 15971  01491A  6F60               	movwf	?_GetPortPORT& (0+255),b
 15972  01491C  0E0F               	movlw	15
 15973  01491E  0100               	movlb	0	; () banked
 15974  014920  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15975                           
 15976                           ; BSR set to: 0
 15977  014922  0012               	return	
 15978  014924                     
 15979                           ; BSR set to: 0
 15980                           ;Port.c: 51: return (BytePtr)&PORTB;
 15981                           
 15982                           ; BSR set to: 0
 15983  014924  0E81               	movlw	129
 15984  014926  0100               	movlb	0	; () banked
 15985  014928  6F60               	movwf	?_GetPortPORT& (0+255),b
 15986  01492A  0E0F               	movlw	15
 15987  01492C  0100               	movlb	0	; () banked
 15988  01492E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15989                           
 15990                           ; BSR set to: 0
 15991  014930  0012               	return	
 15992  014932                     
 15993                           ; BSR set to: 0
 15994                           ;Port.c: 53: return (BytePtr)&PORTC;
 15995                           
 15996                           ; BSR set to: 0
 15997  014932  0E82               	movlw	130
 15998  014934  0100               	movlb	0	; () banked
 15999  014936  6F60               	movwf	?_GetPortPORT& (0+255),b
 16000  014938  0E0F               	movlw	15
 16001  01493A  0100               	movlb	0	; () banked
 16002  01493C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16003                           
 16004                           ; BSR set to: 0
 16005  01493E  0012               	return	
 16006  014940                     
 16007                           ; BSR set to: 0
 16008                           ;Port.c: 55: return (BytePtr)&PORTD;
 16009                           
 16010                           ; BSR set to: 0
 16011  014940  0E83               	movlw	131
 16012  014942  0100               	movlb	0	; () banked
 16013  014944  6F60               	movwf	?_GetPortPORT& (0+255),b
 16014  014946  0E0F               	movlw	15
 16015  014948  0100               	movlb	0	; () banked
 16016  01494A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16017                           
 16018                           ; BSR set to: 0
 16019  01494C  0012               	return	
 16020  01494E                     
 16021                           ; BSR set to: 0
 16022                           ;Port.c: 57: return (BytePtr)&PORTE;
 16023                           
 16024                           ; BSR set to: 0
 16025  01494E  0E84               	movlw	132
 16026  014950  0100               	movlb	0	; () banked
 16027  014952  6F60               	movwf	?_GetPortPORT& (0+255),b
 16028  014954  0E0F               	movlw	15
 16029  014956  0100               	movlb	0	; () banked
 16030  014958  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16031                           
 16032                           ; BSR set to: 0
 16033  01495A  0012               	return	
 16034  01495C                     
 16035                           ; BSR set to: 0
 16036                           ;Port.c: 59: return (BytePtr)&PORTF;
 16037                           
 16038                           ; BSR set to: 0
 16039  01495C  0E85               	movlw	133
 16040  01495E  0100               	movlb	0	; () banked
 16041  014960  6F60               	movwf	?_GetPortPORT& (0+255),b
 16042  014962  0E0F               	movlw	15
 16043  014964  0100               	movlb	0	; () banked
 16044  014966  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16045                           
 16046                           ; BSR set to: 0
 16047  014968  0012               	return	
 16048  01496A                     
 16049                           ; BSR set to: 0
 16050                           ;Port.c: 61: return (BytePtr)&PORTG;
 16051                           
 16052                           ; BSR set to: 0
 16053  01496A  0E86               	movlw	134
 16054  01496C  0100               	movlb	0	; () banked
 16055  01496E  6F60               	movwf	?_GetPortPORT& (0+255),b
 16056  014970  0E0F               	movlw	15
 16057  014972  0100               	movlb	0	; () banked
 16058  014974  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16059                           
 16060                           ; BSR set to: 0
 16061  014976  0012               	return	
 16062  014978                     
 16063                           ; BSR set to: 0
 16064                           ;Port.c: 63: return (void*)0;
 16065                           
 16066                           ; BSR set to: 0
 16067  014978  0E00               	movlw	0
 16068  01497A  0100               	movlb	0	; () banked
 16069  01497C  6F60               	movwf	?_GetPortPORT& (0+255),b
 16070  01497E  0E00               	movlw	0
 16071  014980  0100               	movlb	0	; () banked
 16072  014982  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16073                           
 16074                           ; BSR set to: 0
 16075                           ;Port.c: 64: }
 16076                           
 16077                           ; BSR set to: 0
 16078  014984  0012               	return	
 16079  014986                     l350:
 16080                           
 16081                           ; BSR set to: 0
 16082  014986  0100               	movlb	0	; () banked
 16083  014988  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 16084                           
 16085                           ; Switch size 1, requested type "space"
 16086                           ; Number of cases is 7, Range of values is 0 to 6
 16087                           ; switch strategies available:
 16088                           ; Name         Instructions Cycles
 16089                           ; simple_byte           22    12 (average)
 16090                           ;	Chosen strategy is simple_byte
 16091  01498A  0A00               	xorlw	0	; case 0
 16092  01498C  B4D8               	btfsc	status,2,c
 16093  01498E  D7C3               	goto	l351
 16094  014990  0A01               	xorlw	1	; case 1
 16095  014992  B4D8               	btfsc	status,2,c
 16096  014994  D7C7               	goto	l353
 16097  014996  0A03               	xorlw	3	; case 2
 16098  014998  B4D8               	btfsc	status,2,c
 16099  01499A  D7CB               	goto	l354
 16100  01499C  0A01               	xorlw	1	; case 3
 16101  01499E  B4D8               	btfsc	status,2,c
 16102  0149A0  D7CF               	goto	l355
 16103  0149A2  0A07               	xorlw	7	; case 4
 16104  0149A4  B4D8               	btfsc	status,2,c
 16105  0149A6  D7D3               	goto	l356
 16106  0149A8  0A01               	xorlw	1	; case 5
 16107  0149AA  B4D8               	btfsc	status,2,c
 16108  0149AC  D7D7               	goto	l357
 16109  0149AE  0A03               	xorlw	3	; case 6
 16110  0149B0  B4D8               	btfsc	status,2,c
 16111  0149B2  D7DB               	goto	l358
 16112  0149B4  D7E1               	goto	l359
 16113  0149B6                     __end_of_GetPortPORT:
 16114                           	opt stack 0
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           postinc0	equ	0xFEE
 16123                           wreg	equ	0xFE8
 16124                           indf1	equ	0xFE7
 16125                           postdec1	equ	0xFE5
 16126                           fsr1h	equ	0xFE2
 16127                           fsr1l	equ	0xFE1
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           fsr2h	equ	0xFDA
 16132                           fsr2l	equ	0xFD9
 16133                           status	equ	0xFD8
 16134                           
 16135 ;; *************** function _LED_Init *****************
 16136 ;; Defined at:
 16137 ;;		line 15 in file "Library/LED.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;  pLED            1    wreg     enum E6739
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;  pLED            1   45[BANK0 ] enum E6739
 16142 ;; Return value:  Size  Location     Type
 16143 ;;                  1    wreg      void 
 16144 ;; Registers used:
 16145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16146 ;; Tracked objects:
 16147 ;;		On entry : 0/0
 16148 ;;		On exit  : 0/0
 16149 ;;		Unchanged: 0/0
 16150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16154 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16155 ;;Total ram usage:        1 bytes
 16156 ;; Hardware stack levels used:    1
 16157 ;; Hardware stack levels required when called:   12
 16158 ;; This function calls:
 16159 ;;		_LED_Set
 16160 ;;		_Port_SetPinType
 16161 ;; This function is called by:
 16162 ;;		_MXK_Init
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165                           
 16166                           	psect	text66
 16167  01575A                     __ptext66:
 16168                           	opt stack 0
 16169  01575A                     _LED_Init:
 16170                           	opt stack 16
 16171                           
 16172                           ; BSR set to: 0
 16173                           ;incstack = 0
 16174                           ;LED_Init@pLED stored from wreg
 16175  01575A  0100               	movlb	0	; () banked
 16176  01575C  6F8D               	movwf	LED_Init@pLED& (0+255),b
 16177                           
 16178                           ;LED.c: 17: switch (pLED)
 16179  01575E  D01E               	goto	l220
 16180  015760                     
 16181                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16182  015760  0EEA               	movlw	low _PortC
 16183  015762  0100               	movlb	0	; () banked
 16184  015764  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16185  015766  0E00               	movlw	high _PortC
 16186  015768  0100               	movlb	0	; () banked
 16187  01576A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16188  01576C  0E00               	movlw	0
 16189  01576E  0100               	movlb	0	; () banked
 16190  015770  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16191  015772  0E03               	movlw	3
 16192  015774  0100               	movlb	0	; () banked
 16193  015776  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16194  015778  EC4F  F093         	call	_Port_SetPinType	;wreg free
 16195                           
 16196                           ;LED.c: 21: break;
 16197  01577C  D017               	goto	l222
 16198  01577E                     
 16199                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16200  01577E  0EEA               	movlw	low _PortC
 16201  015780  0100               	movlb	0	; () banked
 16202  015782  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16203  015784  0E00               	movlw	high _PortC
 16204  015786  0100               	movlb	0	; () banked
 16205  015788  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16206  01578A  0E01               	movlw	1
 16207  01578C  0100               	movlb	0	; () banked
 16208  01578E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16209  015790  0E03               	movlw	3
 16210  015792  0100               	movlb	0	; () banked
 16211  015794  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16212  015796  EC4F  F093         	call	_Port_SetPinType	;wreg free
 16213                           
 16214                           ;LED.c: 25: }
 16215                           
 16216                           ;LED.c: 24: break;
 16217  01579A  D008               	goto	l222
 16218  01579C                     l220:
 16219  01579C  0100               	movlb	0	; () banked
 16220  01579E  518D               	movf	LED_Init@pLED& (0+255),w,b
 16221                           
 16222                           ; Switch size 1, requested type "space"
 16223                           ; Number of cases is 2, Range of values is 0 to 1
 16224                           ; switch strategies available:
 16225                           ; Name         Instructions Cycles
 16226                           ; simple_byte            7     4 (average)
 16227                           ;	Chosen strategy is simple_byte
 16228  0157A0  0A00               	xorlw	0	; case 0
 16229  0157A2  B4D8               	btfsc	status,2,c
 16230  0157A4  D7DD               	goto	l221
 16231  0157A6  0A01               	xorlw	1	; case 1
 16232  0157A8  B4D8               	btfsc	status,2,c
 16233  0157AA  D7E9               	goto	l223
 16234  0157AC                     l222:
 16235                           
 16236                           ;LED.c: 26: LED_Set(pLED, 0);
 16237                           
 16238                           ; BSR set to: 0
 16239  0157AC  0E00               	movlw	0
 16240  0157AE  0100               	movlb	0	; () banked
 16241  0157B0  6F74               	movwf	LED_Set@pValue& (0+255),b
 16242  0157B2  0100               	movlb	0	; () banked
 16243  0157B4  518D               	movf	LED_Init@pLED& (0+255),w,b
 16244  0157B6  ECEB  F0AC         	call	_LED_Set
 16245  0157BA  0012               	return		;funcret
 16246  0157BC                     __end_of_LED_Init:
 16247                           	opt stack 0
 16248                           tblptru	equ	0xFF8
 16249                           tblptrh	equ	0xFF7
 16250                           tblptrl	equ	0xFF6
 16251                           tablat	equ	0xFF5
 16252                           prodh	equ	0xFF4
 16253                           prodl	equ	0xFF3
 16254                           intcon	equ	0xFF2
 16255                           postinc0	equ	0xFEE
 16256                           wreg	equ	0xFE8
 16257                           indf1	equ	0xFE7
 16258                           postdec1	equ	0xFE5
 16259                           fsr1h	equ	0xFE2
 16260                           fsr1l	equ	0xFE1
 16261                           indf2	equ	0xFDF
 16262                           postinc2	equ	0xFDE
 16263                           postdec2	equ	0xFDD
 16264                           fsr2h	equ	0xFDA
 16265                           fsr2l	equ	0xFD9
 16266                           status	equ	0xFD8
 16267                           
 16268 ;; *************** function _LED_Set *****************
 16269 ;; Defined at:
 16270 ;;		line 33 in file "Library/LED.c"
 16271 ;; Parameters:    Size  Location     Type
 16272 ;;  pLED            1    wreg     enum E6739
 16273 ;;  pValue          1   20[BANK0 ] unsigned char 
 16274 ;; Auto vars:     Size  Location     Type
 16275 ;;  pLED            1   21[BANK0 ] enum E6739
 16276 ;; Return value:  Size  Location     Type
 16277 ;;                  1    wreg      void 
 16278 ;; Registers used:
 16279 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16280 ;; Tracked objects:
 16281 ;;		On entry : 0/0
 16282 ;;		On exit  : 0/0
 16283 ;;		Unchanged: 0/0
 16284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16285 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;Total ram usage:        2 bytes
 16290 ;; Hardware stack levels used:    1
 16291 ;; Hardware stack levels required when called:   11
 16292 ;; This function calls:
 16293 ;;		_Port_SetPin
 16294 ;; This function is called by:
 16295 ;;		_LED_Init
 16296 ;;		_SYSTEM_Initialize
 16297 ;; This function uses a non-reentrant model
 16298 ;;
 16299                           
 16300                           	psect	text67
 16301  0159D6                     __ptext67:
 16302                           	opt stack 0
 16303  0159D6                     _LED_Set:
 16304                           	opt stack 16
 16305                           
 16306                           ;incstack = 0
 16307                           ;LED_Set@pLED stored from wreg
 16308  0159D6  0100               	movlb	0	; () banked
 16309  0159D8  6F75               	movwf	LED_Set@pLED& (0+255),b
 16310                           
 16311                           ;LED.c: 35: switch (pLED)
 16312  0159DA  D01C               	goto	l227
 16313  0159DC                     
 16314                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16315  0159DC  0EEA               	movlw	low _PortC
 16316  0159DE  0100               	movlb	0	; () banked
 16317  0159E0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16318  0159E2  0E00               	movlw	high _PortC
 16319  0159E4  0100               	movlb	0	; () banked
 16320  0159E6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16321  0159E8  0E00               	movlw	0
 16322  0159EA  0100               	movlb	0	; () banked
 16323  0159EC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16324  0159EE  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 16325  0159F2  EC49  F09F         	call	_Port_SetPin	;wreg free
 16326                           
 16327                           ;LED.c: 39: break;
 16328  0159F6  0012               	return	
 16329  0159F8                     
 16330                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16331  0159F8  0EEA               	movlw	low _PortC
 16332  0159FA  0100               	movlb	0	; () banked
 16333  0159FC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16334  0159FE  0E00               	movlw	high _PortC
 16335  015A00  0100               	movlb	0	; () banked
 16336  015A02  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16337  015A04  0E01               	movlw	1
 16338  015A06  0100               	movlb	0	; () banked
 16339  015A08  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16340  015A0A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 16341  015A0E  EC49  F09F         	call	_Port_SetPin	;wreg free
 16342                           
 16343                           ;LED.c: 43: }
 16344                           
 16345                           ;LED.c: 42: break;
 16346  015A12  0012               	return	
 16347  015A14                     l227:
 16348  015A14  0100               	movlb	0	; () banked
 16349  015A16  5175               	movf	LED_Set@pLED& (0+255),w,b
 16350                           
 16351                           ; Switch size 1, requested type "space"
 16352                           ; Number of cases is 2, Range of values is 0 to 1
 16353                           ; switch strategies available:
 16354                           ; Name         Instructions Cycles
 16355                           ; simple_byte            7     4 (average)
 16356                           ;	Chosen strategy is simple_byte
 16357  015A18  0A00               	xorlw	0	; case 0
 16358  015A1A  B4D8               	btfsc	status,2,c
 16359  015A1C  D7DF               	goto	l228
 16360  015A1E  0A01               	xorlw	1	; case 1
 16361  015A20  A4D8               	btfss	status,2,c
 16362  015A22  0012               	return	
 16363  015A24  D7E9               	goto	l230
 16364  015A26                     __end_of_LED_Set:
 16365                           	opt stack 0
 16366                           tblptru	equ	0xFF8
 16367                           tblptrh	equ	0xFF7
 16368                           tblptrl	equ	0xFF6
 16369                           tablat	equ	0xFF5
 16370                           prodh	equ	0xFF4
 16371                           prodl	equ	0xFF3
 16372                           intcon	equ	0xFF2
 16373                           postinc0	equ	0xFEE
 16374                           wreg	equ	0xFE8
 16375                           indf1	equ	0xFE7
 16376                           postdec1	equ	0xFE5
 16377                           fsr1h	equ	0xFE2
 16378                           fsr1l	equ	0xFE1
 16379                           indf2	equ	0xFDF
 16380                           postinc2	equ	0xFDE
 16381                           postdec2	equ	0xFDD
 16382                           fsr2h	equ	0xFDA
 16383                           fsr2l	equ	0xFD9
 16384                           status	equ	0xFD8
 16385                           
 16386 ;; *************** function _MXK_Dequeue *****************
 16387 ;; Defined at:
 16388 ;;		line 153 in file "Library/MXK.c"
 16389 ;; Parameters:    Size  Location     Type
 16390 ;;		None
 16391 ;; Auto vars:     Size  Location     Type
 16392 ;;		None
 16393 ;; Return value:  Size  Location     Type
 16394 ;;                  1    wreg      void 
 16395 ;; Registers used:
 16396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16397 ;; Tracked objects:
 16398 ;;		On entry : 0/0
 16399 ;;		On exit  : 0/0
 16400 ;;		Unchanged: 0/0
 16401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16406 ;;Total ram usage:        0 bytes
 16407 ;; Hardware stack levels used:    1
 16408 ;; Hardware stack levels required when called:   12
 16409 ;; This function calls:
 16410 ;;		Absolute function
 16411 ;;		_Motor_Step
 16412 ;; This function is called by:
 16413 ;;		_init
 16414 ;;		_mode1
 16415 ;;		_mode2
 16416 ;;		_mode4
 16417 ;;		_main
 16418 ;; This function uses a non-reentrant model
 16419 ;;
 16420                           
 16421                           	psect	text68
 16422  015DFA                     __ptext68:
 16423                           	opt stack 0
 16424  015DFA                     _MXK_Dequeue:
 16425                           	opt stack 17
 16426                           
 16427                           ;MXK.c: 155: if (lQueue)
 16428                           
 16429                           ;incstack = 0
 16430  015DFA  0100               	movlb	0	; () banked
 16431  015DFC  51B8               	movf	_lQueue& (0+255),w,b	;volatile
 16432  015DFE  0100               	movlb	0	; () banked
 16433  015E00  11B9               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16434  015E02  0100               	movlb	0	; () banked
 16435  015E04  11BA               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16436  015E06  B4D8               	btfsc	status,2,c
 16437  015E08  D00D               	goto	u13429
 16438                           
 16439                           ; BSR set to: 0
 16440                           ;MXK.c: 156: lQueue();
 16441  015E0A  D801               	call	u13428
 16442  015E0C  D00B               	goto	u13429
 16443  015E0E                     u13428:
 16444  015E0E  0005               	push	
 16445  015E10  6EFA               	movwf	pclath,c
 16446  015E12  0100               	movlb	0	; () banked
 16447  015E14  51B8               	movf	_lQueue& (0+255),w,b	;volatile
 16448  015E16  6EFD               	movwf	tosl,c
 16449  015E18  51B9               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16450  015E1A  6EFE               	movwf	tosh,c
 16451  015E1C  51BA               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16452  015E1E  6EFF               	movwf	tosu,c
 16453  015E20  50FA               	movf	pclath,w,c
 16454  015E22  0012               	return		;indir
 16455  015E24                     u13429:
 16456                           
 16457                           ;MXK.c: 157: lQueue = 0;
 16458  015E24  0E00               	movlw	0
 16459  015E26  0100               	movlb	0	; () banked
 16460  015E28  6FB8               	movwf	_lQueue& (0+255),b	;volatile
 16461  015E2A  0E00               	movlw	0
 16462  015E2C  0100               	movlb	0	; () banked
 16463  015E2E  6FB9               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16464  015E30  0E00               	movlw	0
 16465  015E32  0100               	movlb	0	; () banked
 16466  015E34  6FBA               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16467                           
 16468                           ; BSR set to: 0
 16469  015E36  0012               	return		;funcret
 16470  015E38                     __end_of_MXK_Dequeue:
 16471                           	opt stack 0
 16472                           tosu	equ	0xFFF
 16473                           tosh	equ	0xFFE
 16474                           tosl	equ	0xFFD
 16475                           pclath	equ	0xFFA
 16476                           tblptru	equ	0xFF8
 16477                           tblptrh	equ	0xFF7
 16478                           tblptrl	equ	0xFF6
 16479                           tablat	equ	0xFF5
 16480                           prodh	equ	0xFF4
 16481                           prodl	equ	0xFF3
 16482                           intcon	equ	0xFF2
 16483                           postinc0	equ	0xFEE
 16484                           wreg	equ	0xFE8
 16485                           indf1	equ	0xFE7
 16486                           postdec1	equ	0xFE5
 16487                           fsr1h	equ	0xFE2
 16488                           fsr1l	equ	0xFE1
 16489                           indf2	equ	0xFDF
 16490                           postinc2	equ	0xFDE
 16491                           postdec2	equ	0xFDD
 16492                           fsr2h	equ	0xFDA
 16493                           fsr2l	equ	0xFD9
 16494                           status	equ	0xFD8
 16495                           
 16496 ;; *************** function _Motor_Step *****************
 16497 ;; Defined at:
 16498 ;;		line 75 in file "Library/Motor.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;		None
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;		None
 16503 ;; Return value:  Size  Location     Type
 16504 ;;                  1    wreg      void 
 16505 ;; Registers used:
 16506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16507 ;; Tracked objects:
 16508 ;;		On entry : 0/0
 16509 ;;		On exit  : 0/0
 16510 ;;		Unchanged: 0/0
 16511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;Total ram usage:        2 bytes
 16517 ;; Hardware stack levels used:    1
 16518 ;; Hardware stack levels required when called:   11
 16519 ;; This function calls:
 16520 ;;		_MXK_Queue
 16521 ;;		_MXK_Release
 16522 ;;		_MXK_SwitchTo
 16523 ;;		_Port_SetPin
 16524 ;;		_Timer0_Restart
 16525 ;;		_Timer0_Stop
 16526 ;; This function is called by:
 16527 ;;		_Motor_Init
 16528 ;;		_MXK_Dequeue
 16529 ;;		_Timer0_ISR
 16530 ;; This function uses a non-reentrant model
 16531 ;;
 16532                           
 16533                           	psect	text69
 16534  013566                     __ptext69:
 16535                           	opt stack 0
 16536  013566                     _Motor_Step:
 16537                           	opt stack 0
 16538                           
 16539                           ; BSR set to: 0
 16540                           ;Skip over the trampoline to the duplicate function for level 2
 16541  013566  B251               	btfsc	btemp,1,c
 16542  013568  EFCC  F09B         	goto	i2_Motor_Step
 16543  01356C                     _Motor_Step$intlevel0:
 16544                           	opt stack 17
 16545                           
 16546                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16547                           
 16548                           ;incstack = 0
 16549  01356C  0100               	movlb	0	; () banked
 16550  01356E  EE20 F004          	lfsr	2,4
 16551  013572  51CE               	movf	_lMotor& (0+255),w,b
 16552  013574  26D9               	addwf	fsr2l,f,c
 16553  013576  51CF               	movf	(_lMotor+1)& (0+255),w,b
 16554  013578  22DA               	addwfc	fsr2h,f,c
 16555  01357A  50DF               	movf	indf2,w,c
 16556  01357C  EC7D  F0AE         	call	_MXK_SwitchTo
 16557  013580  0900               	iorlw	0
 16558  013582  B4D8               	btfsc	status,2,c
 16559  013584  D07A               	goto	l1627
 16560                           
 16561                           ;Motor.c: 78: {
 16562                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16563  013586  C0CE  FFD9         	movff	_lMotor,fsr2l
 16564  01358A  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 16565  01358E  50DE               	movf	postinc2,w,c
 16566  013590  10DE               	iorwf	postinc2,w,c
 16567  013592  B4D8               	btfsc	status,2,c
 16568  013594  D06D               	goto	l1628
 16569                           
 16570                           ;Motor.c: 80: {
 16571                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16572  013596  C0CE  FFD9         	movff	_lMotor,fsr2l
 16573  01359A  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 16574  01359E  0E01               	movlw	1
 16575  0135A0  BEDB               	btfsc	plusw2,7,c
 16576  0135A2  D026               	goto	l1629
 16577  0135A4  0E01               	movlw	1
 16578  0135A6  50DB               	movf	plusw2,w,c
 16579  0135A8  E103               	bnz	u10160
 16580  0135AA  04DE               	decf	postinc2,w,c
 16581  0135AC  A0D8               	btfss	status,0,c
 16582  0135AE  D020               	goto	l1629
 16583  0135B0                     u10160:
 16584                           
 16585                           ;Motor.c: 83: {
 16586                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16587  0135B0  C0CE  FFD9         	movff	_lMotor,fsr2l
 16588  0135B4  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 16589  0135B8  28DE               	incf	postinc2,w,c
 16590  0135BA  E104               	bnz	u10170
 16591  0135BC  0E7F               	movlw	127
 16592  0135BE  18DE               	xorwf	postinc2,w,c
 16593  0135C0  B4D8               	btfsc	status,2,c
 16594  0135C2  D007               	goto	l1630
 16595  0135C4                     u10170:
 16596                           
 16597                           ;Motor.c: 85: lMotor->mDelta --;
 16598  0135C4  C0CE  FFD9         	movff	_lMotor,fsr2l
 16599  0135C8  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 16600  0135CC  06DE               	decf	postinc2,f,c
 16601  0135CE  0E00               	movlw	0
 16602  0135D0  5ADD               	subwfb	postdec2,f,c
 16603  0135D2                     l1630:
 16604                           
 16605                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16606  0135D2  0E97               	movlw	low _PortE
 16607  0135D4  0100               	movlb	0	; () banked
 16608  0135D6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16609  0135D8  0E03               	movlw	high _PortE
 16610  0135DA  0100               	movlb	0	; () banked
 16611  0135DC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16612  0135DE  0E00               	movlw	0
 16613  0135E0  0100               	movlb	0	; () banked
 16614  0135E2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16615  0135E4  0E01               	movlw	1
 16616  0135E6  0100               	movlb	0	; () banked
 16617  0135E8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16618  0135EA  EC49  F09F         	call	_Port_SetPin	;wreg free
 16619                           
 16620                           ;Motor.c: 88: }
 16621  0135EE  D01F               	goto	l1631
 16622  0135F0                     l1629:
 16623                           
 16624                           ;Motor.c: 89: else
 16625                           ;Motor.c: 90: {
 16626                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16627  0135F0  C0CE  FFD9         	movff	_lMotor,fsr2l
 16628  0135F4  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 16629  0135F8  04DE               	decf	postinc2,w,c
 16630  0135FA  E104               	bnz	u10180
 16631  0135FC  0E80               	movlw	128
 16632  0135FE  18DE               	xorwf	postinc2,w,c
 16633  013600  B4D8               	btfsc	status,2,c
 16634  013602  D007               	goto	l1632
 16635  013604                     u10180:
 16636                           
 16637                           ;Motor.c: 92: lMotor->mDelta ++;
 16638  013604  C0CE  FFD9         	movff	_lMotor,fsr2l
 16639  013608  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 16640  01360C  2ADE               	incf	postinc2,f,c
 16641  01360E  0E00               	movlw	0
 16642  013610  22DD               	addwfc	postdec2,f,c
 16643  013612                     l1632:
 16644                           
 16645                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16646  013612  0E97               	movlw	low _PortE
 16647  013614  0100               	movlb	0	; () banked
 16648  013616  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16649  013618  0E03               	movlw	high _PortE
 16650  01361A  0100               	movlb	0	; () banked
 16651  01361C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16652  01361E  0E00               	movlw	0
 16653  013620  0100               	movlb	0	; () banked
 16654  013622  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16655  013624  0E00               	movlw	0
 16656  013626  0100               	movlb	0	; () banked
 16657  013628  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16658  01362A  EC49  F09F         	call	_Port_SetPin	;wreg free
 16659  01362E                     l1631:
 16660                           
 16661                           ;Motor.c: 95: }
 16662                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16663  01362E  0E97               	movlw	low _PortE
 16664  013630  0100               	movlb	0	; () banked
 16665  013632  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16666  013634  0E03               	movlw	high _PortE
 16667  013636  0100               	movlb	0	; () banked
 16668  013638  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16669  01363A  0E01               	movlw	1
 16670  01363C  0100               	movlb	0	; () banked
 16671  01363E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16672  013640  0E01               	movlw	1
 16673  013642  0100               	movlb	0	; () banked
 16674  013644  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16675  013646  EC49  F09F         	call	_Port_SetPin	;wreg free
 16676                           
 16677                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16678  01364A  0E97               	movlw	low _PortE
 16679  01364C  0100               	movlb	0	; () banked
 16680  01364E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16681  013650  0E03               	movlw	high _PortE
 16682  013652  0100               	movlb	0	; () banked
 16683  013654  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16684  013656  0E01               	movlw	1
 16685  013658  0100               	movlb	0	; () banked
 16686  01365A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16687  01365C  0E00               	movlw	0
 16688  01365E  0100               	movlb	0	; () banked
 16689  013660  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16690  013662  EC49  F09F         	call	_Port_SetPin	;wreg free
 16691                           
 16692                           ;Motor.c: 101: MXK_Release();
 16693  013666  ECB9  F0B1         	call	_MXK_Release	;wreg free
 16694                           
 16695                           ;Motor.c: 102: Timer0_Restart();
 16696  01366A  ECA7  F0B2         	call	_Timer0_Restart	;wreg free
 16697                           
 16698                           ;Motor.c: 103: return;
 16699  01366E  0012               	return	
 16700  013670                     l1628:
 16701                           
 16702                           ;Motor.c: 104: }
 16703                           ;Motor.c: 105: MXK_Release();
 16704  013670  ECB9  F0B1         	call	_MXK_Release	;wreg free
 16705                           
 16706                           ;Motor.c: 106: Timer0_Stop();
 16707  013674  ECD2  F0B2         	call	_Timer0_Stop	;wreg free
 16708                           
 16709                           ;Motor.c: 107: return;
 16710  013678  0012               	return	
 16711  01367A                     l1627:
 16712                           
 16713                           ;Motor.c: 108: }
 16714                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16715  01367A  C0BB  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 16716  01367E  C0BC  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16717  013682  C0BD  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16718  013686  EC8D  F0B2         	call	_MXK_Queue	;wreg free
 16719  01368A  0012               	return		;funcret
 16720  01368C                     __end_of_Motor_Step:
 16721                           	opt stack 0
 16722                           tosu	equ	0xFFF
 16723                           tosh	equ	0xFFE
 16724                           tosl	equ	0xFFD
 16725                           pclath	equ	0xFFA
 16726                           tblptru	equ	0xFF8
 16727                           tblptrh	equ	0xFF7
 16728                           tblptrl	equ	0xFF6
 16729                           tablat	equ	0xFF5
 16730                           prodh	equ	0xFF4
 16731                           prodl	equ	0xFF3
 16732                           intcon	equ	0xFF2
 16733                           postinc0	equ	0xFEE
 16734                           wreg	equ	0xFE8
 16735                           indf1	equ	0xFE7
 16736                           postdec1	equ	0xFE5
 16737                           fsr1h	equ	0xFE2
 16738                           fsr1l	equ	0xFE1
 16739                           indf2	equ	0xFDF
 16740                           postinc2	equ	0xFDE
 16741                           postdec2	equ	0xFDD
 16742                           plusw2	equ	0xFDB
 16743                           fsr2h	equ	0xFDA
 16744                           fsr2l	equ	0xFD9
 16745                           status	equ	0xFD8
 16746                           
 16747 ;; *************** function _Timer0_Stop *****************
 16748 ;; Defined at:
 16749 ;;		line 89 in file "Library/Timer0.c"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;		None
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;		None
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  1    wreg      void 
 16756 ;; Registers used:
 16757 ;;		None
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;Total ram usage:        0 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    7
 16770 ;; This function calls:
 16771 ;;		Nothing
 16772 ;; This function is called by:
 16773 ;;		_Motor_Step
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           	psect	text70
 16778  0165A4                     __ptext70:
 16779                           	opt stack 0
 16780  0165A4                     _Timer0_Stop:
 16781                           	opt stack 20
 16782                           
 16783                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16784                           
 16785                           ;incstack = 0
 16786  0165A4  9AF2               	bcf	intcon,5,c	;volatile
 16787                           
 16788                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16789  0165A6  94F2               	bcf	intcon,2,c	;volatile
 16790  0165A8  0012               	return		;funcret
 16791  0165AA                     __end_of_Timer0_Stop:
 16792                           	opt stack 0
 16793                           tosu	equ	0xFFF
 16794                           tosh	equ	0xFFE
 16795                           tosl	equ	0xFFD
 16796                           pclath	equ	0xFFA
 16797                           tblptru	equ	0xFF8
 16798                           tblptrh	equ	0xFF7
 16799                           tblptrl	equ	0xFF6
 16800                           tablat	equ	0xFF5
 16801                           prodh	equ	0xFF4
 16802                           prodl	equ	0xFF3
 16803                           intcon	equ	0xFF2
 16804                           postinc0	equ	0xFEE
 16805                           wreg	equ	0xFE8
 16806                           indf1	equ	0xFE7
 16807                           postdec1	equ	0xFE5
 16808                           fsr1h	equ	0xFE2
 16809                           fsr1l	equ	0xFE1
 16810                           indf2	equ	0xFDF
 16811                           postinc2	equ	0xFDE
 16812                           postdec2	equ	0xFDD
 16813                           plusw2	equ	0xFDB
 16814                           fsr2h	equ	0xFDA
 16815                           fsr2l	equ	0xFD9
 16816                           status	equ	0xFD8
 16817                           
 16818 ;; *************** function _Timer0_Restart *****************
 16819 ;; Defined at:
 16820 ;;		line 83 in file "Library/Timer0.c"
 16821 ;; Parameters:    Size  Location     Type
 16822 ;;		None
 16823 ;; Auto vars:     Size  Location     Type
 16824 ;;		None
 16825 ;; Return value:  Size  Location     Type
 16826 ;;                  1    wreg      void 
 16827 ;; Registers used:
 16828 ;;		None
 16829 ;; Tracked objects:
 16830 ;;		On entry : 0/0
 16831 ;;		On exit  : 0/0
 16832 ;;		Unchanged: 0/0
 16833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16838 ;;Total ram usage:        0 bytes
 16839 ;; Hardware stack levels used:    1
 16840 ;; Hardware stack levels required when called:    7
 16841 ;; This function calls:
 16842 ;;		Nothing
 16843 ;; This function is called by:
 16844 ;;		_Motor_Step
 16845 ;; This function uses a non-reentrant model
 16846 ;;
 16847                           
 16848                           	psect	text71
 16849  01654E                     __ptext71:
 16850                           	opt stack 0
 16851  01654E                     _Timer0_Restart:
 16852                           	opt stack 20
 16853                           
 16854                           ;Timer0.c: 85: TMR0 = COUNTER;
 16855                           
 16856                           ;incstack = 0
 16857  01654E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 16858  016552  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 16859                           
 16860                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 16861  016556  8AF2               	bsf	intcon,5,c	;volatile
 16862  016558  0012               	return		;funcret
 16863  01655A                     __end_of_Timer0_Restart:
 16864                           	opt stack 0
 16865                           tosu	equ	0xFFF
 16866                           tosh	equ	0xFFE
 16867                           tosl	equ	0xFFD
 16868                           pclath	equ	0xFFA
 16869                           tblptru	equ	0xFF8
 16870                           tblptrh	equ	0xFF7
 16871                           tblptrl	equ	0xFF6
 16872                           tablat	equ	0xFF5
 16873                           prodh	equ	0xFF4
 16874                           prodl	equ	0xFF3
 16875                           intcon	equ	0xFF2
 16876                           postinc0	equ	0xFEE
 16877                           wreg	equ	0xFE8
 16878                           indf1	equ	0xFE7
 16879                           postdec1	equ	0xFE5
 16880                           fsr1h	equ	0xFE2
 16881                           fsr1l	equ	0xFE1
 16882                           indf2	equ	0xFDF
 16883                           postinc2	equ	0xFDE
 16884                           postdec2	equ	0xFDD
 16885                           plusw2	equ	0xFDB
 16886                           fsr2h	equ	0xFDA
 16887                           fsr2l	equ	0xFD9
 16888                           status	equ	0xFD8
 16889                           
 16890 ;; *************** function _MXK_SwitchTo *****************
 16891 ;; Defined at:
 16892 ;;		line 105 in file "Library/MXK.c"
 16893 ;; Parameters:    Size  Location     Type
 16894 ;;  pModule         1    wreg     enum E6927
 16895 ;; Auto vars:     Size  Location     Type
 16896 ;;  pModule         1    7[BANK0 ] enum E6927
 16897 ;;  CUR             1    6[BANK0 ] unsigned char 
 16898 ;; Return value:  Size  Location     Type
 16899 ;;                  1    wreg      unsigned char 
 16900 ;; Registers used:
 16901 ;;		wreg, status,2, status,0, cstack
 16902 ;; Tracked objects:
 16903 ;;		On entry : 0/0
 16904 ;;		On exit  : 0/0
 16905 ;;		Unchanged: 0/0
 16906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16911 ;;Total ram usage:        2 bytes
 16912 ;; Hardware stack levels used:    1
 16913 ;; Hardware stack levels required when called:    8
 16914 ;; This function calls:
 16915 ;;		_delay_us
 16916 ;; This function is called by:
 16917 ;;		_Motor_Step
 16918 ;;		_mode1
 16919 ;;		_mode2
 16920 ;;		_mode4
 16921 ;;		_main
 16922 ;; This function uses a non-reentrant model
 16923 ;;
 16924                           
 16925                           	psect	text72
 16926  015CFA                     __ptext72:
 16927                           	opt stack 0
 16928  015CFA                     _MXK_SwitchTo:
 16929                           	opt stack 21
 16930                           
 16931                           ;incstack = 0
 16932                           ;MXK_SwitchTo@pModule stored from wreg
 16933  015CFA  0100               	movlb	0	; () banked
 16934  015CFC  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 16935                           
 16936                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 16937  015CFE  5086               	movf	3974,w,c	;volatile
 16938  015D00  0B0F               	andlw	15
 16939  015D02  0100               	movlb	0	; () banked
 16940  015D04  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 16944  015D06  504B               	movf	_Bus_State,w,c
 16945  015D08  A4D8               	btfss	status,2,c
 16946  015D0A  D002               	goto	l1730
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;MXK.c: 110: return 0;
 16950  015D0C  0E00               	movlw	0
 16951                           
 16952                           ; BSR set to: 0
 16953  015D0E  0012               	return	
 16954  015D10                     l1730:
 16955                           
 16956                           ; BSR set to: 0
 16957                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 16958                           
 16959                           ; BSR set to: 0
 16960  015D10  0E00               	movlw	0
 16961  015D12  6E4B               	movwf	_Bus_State,c
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;MXK.c: 114: if (CUR != pModule)
 16965  015D14  0100               	movlb	0	; () banked
 16966  015D16  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 16967  015D18  0100               	movlb	0	; () banked
 16968  015D1A  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 16969  015D1C  B4D8               	btfsc	status,2,c
 16970  015D1E  D00C               	goto	l1732
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;MXK.c: 115: {
 16974                           ;MXK.c: 116: PORTG &= ~(0xF);
 16975  015D20  0EF0               	movlw	240
 16976  015D22  1686               	andwf	3974,f,c	;volatile
 16977                           
 16978                           ;MXK.c: 117: PORTG |= pModule;
 16979  015D24  0100               	movlb	0	; () banked
 16980  015D26  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 16981  015D28  1286               	iorwf	3974,f,c	;volatile
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;MXK.c: 120: delay_us(10);
 16985  015D2A  0E00               	movlw	0
 16986  015D2C  0100               	movlb	0	; () banked
 16987  015D2E  6F61               	movwf	(delay_us@us+1)& (0+255),b
 16988  015D30  0E0A               	movlw	10
 16989  015D32  6F60               	movwf	delay_us@us& (0+255),b
 16990  015D34  ECC2  F0AC         	call	_delay_us	;wreg free
 16991  015D38                     l1732:
 16992                           
 16993                           ;MXK.c: 121: }
 16994                           ;MXK.c: 122: return 1;
 16995  015D38  0E01               	movlw	1
 16996  015D3A  0012               	return	
 16997  015D3C                     __end_of_MXK_SwitchTo:
 16998                           	opt stack 0
 16999                           tosu	equ	0xFFF
 17000                           tosh	equ	0xFFE
 17001                           tosl	equ	0xFFD
 17002                           pclath	equ	0xFFA
 17003                           tblptru	equ	0xFF8
 17004                           tblptrh	equ	0xFF7
 17005                           tblptrl	equ	0xFF6
 17006                           tablat	equ	0xFF5
 17007                           prodh	equ	0xFF4
 17008                           prodl	equ	0xFF3
 17009                           intcon	equ	0xFF2
 17010                           postinc0	equ	0xFEE
 17011                           wreg	equ	0xFE8
 17012                           indf1	equ	0xFE7
 17013                           postdec1	equ	0xFE5
 17014                           fsr1h	equ	0xFE2
 17015                           fsr1l	equ	0xFE1
 17016                           indf2	equ	0xFDF
 17017                           postinc2	equ	0xFDE
 17018                           postdec2	equ	0xFDD
 17019                           plusw2	equ	0xFDB
 17020                           fsr2h	equ	0xFDA
 17021                           fsr2l	equ	0xFD9
 17022                           status	equ	0xFD8
 17023                           
 17024 ;; *************** function _MXK_Release *****************
 17025 ;; Defined at:
 17026 ;;		line 130 in file "Library/MXK.c"
 17027 ;; Parameters:    Size  Location     Type
 17028 ;;		None
 17029 ;; Auto vars:     Size  Location     Type
 17030 ;;		None
 17031 ;; Return value:  Size  Location     Type
 17032 ;;                  1    wreg      unsigned char 
 17033 ;; Registers used:
 17034 ;;		wreg, status,2, status,0
 17035 ;; Tracked objects:
 17036 ;;		On entry : 0/0
 17037 ;;		On exit  : 0/0
 17038 ;;		Unchanged: 0/0
 17039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17044 ;;Total ram usage:        0 bytes
 17045 ;; Hardware stack levels used:    1
 17046 ;; Hardware stack levels required when called:    7
 17047 ;; This function calls:
 17048 ;;		Nothing
 17049 ;; This function is called by:
 17050 ;;		_Motor_Step
 17051 ;;		_init
 17052 ;;		_mode1
 17053 ;;		_mode2
 17054 ;;		_mode4
 17055 ;;		_main
 17056 ;; This function uses a non-reentrant model
 17057 ;;
 17058                           
 17059                           	psect	text73
 17060  016372                     __ptext73:
 17061                           	opt stack 0
 17062  016372                     _MXK_Release:
 17063                           	opt stack 22
 17064                           
 17065                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17066                           
 17067                           ;incstack = 0
 17068  016372  0E01               	movlw	1
 17069  016374  6E4B               	movwf	_Bus_State,c
 17070                           
 17071                           ;MXK.c: 134: if (lQueue != 0)
 17072  016376  0100               	movlb	0	; () banked
 17073  016378  51B8               	movf	_lQueue& (0+255),w,b	;volatile
 17074  01637A  0100               	movlb	0	; () banked
 17075  01637C  11B9               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17076  01637E  0100               	movlb	0	; () banked
 17077  016380  11BA               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17078  016382  B4D8               	btfsc	status,2,c
 17079  016384  D002               	goto	l1735
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;MXK.c: 135: return 1;
 17083  016386  0E01               	movlw	1
 17084                           
 17085                           ; BSR set to: 0
 17086  016388  0012               	return	
 17087  01638A                     l1735:
 17088                           
 17089                           ; BSR set to: 0
 17090                           ;MXK.c: 137: return 0;
 17091                           
 17092                           ; BSR set to: 0
 17093  01638A  0E00               	movlw	0
 17094  01638C  0012               	return	
 17095  01638E                     __end_of_MXK_Release:
 17096                           	opt stack 0
 17097                           tosu	equ	0xFFF
 17098                           tosh	equ	0xFFE
 17099                           tosl	equ	0xFFD
 17100                           pclath	equ	0xFFA
 17101                           tblptru	equ	0xFF8
 17102                           tblptrh	equ	0xFF7
 17103                           tblptrl	equ	0xFF6
 17104                           tablat	equ	0xFF5
 17105                           prodh	equ	0xFF4
 17106                           prodl	equ	0xFF3
 17107                           intcon	equ	0xFF2
 17108                           postinc0	equ	0xFEE
 17109                           wreg	equ	0xFE8
 17110                           indf1	equ	0xFE7
 17111                           postdec1	equ	0xFE5
 17112                           fsr1h	equ	0xFE2
 17113                           fsr1l	equ	0xFE1
 17114                           indf2	equ	0xFDF
 17115                           postinc2	equ	0xFDE
 17116                           postdec2	equ	0xFDD
 17117                           plusw2	equ	0xFDB
 17118                           fsr2h	equ	0xFDA
 17119                           fsr2l	equ	0xFD9
 17120                           status	equ	0xFD8
 17121                           
 17122 ;; *************** function _MXK_Queue *****************
 17123 ;; Defined at:
 17124 ;;		line 144 in file "Library/MXK.c"
 17125 ;; Parameters:    Size  Location     Type
 17126 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17127 ;;		 -> Absolute function(1), Motor_Step(1), 
 17128 ;; Auto vars:     Size  Location     Type
 17129 ;;		None
 17130 ;; Return value:  Size  Location     Type
 17131 ;;                  1    wreg      void 
 17132 ;; Registers used:
 17133 ;;		wreg, status,2, status,0
 17134 ;; Tracked objects:
 17135 ;;		On entry : 0/0
 17136 ;;		On exit  : 0/0
 17137 ;;		Unchanged: 0/0
 17138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17139 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17142 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17143 ;;Total ram usage:        3 bytes
 17144 ;; Hardware stack levels used:    1
 17145 ;; Hardware stack levels required when called:    7
 17146 ;; This function calls:
 17147 ;;		Nothing
 17148 ;; This function is called by:
 17149 ;;		_Motor_Step
 17150 ;; This function uses a non-reentrant model
 17151 ;;
 17152                           
 17153                           	psect	text74
 17154  01651A                     __ptext74:
 17155                           	opt stack 0
 17156  01651A                     _MXK_Queue:
 17157                           	opt stack 20
 17158                           
 17159                           ;MXK.c: 146: lQueue = pCallback;
 17160                           
 17161                           ; BSR set to: 0
 17162                           ;incstack = 0
 17163  01651A  C060  F0B8         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17164  01651E  C061  F0B9         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17165  016522  C062  F0BA         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17166  016526  0012               	return		;funcret
 17167  016528                     __end_of_MXK_Queue:
 17168                           	opt stack 0
 17169                           tosu	equ	0xFFF
 17170                           tosh	equ	0xFFE
 17171                           tosl	equ	0xFFD
 17172                           pclath	equ	0xFFA
 17173                           tblptru	equ	0xFF8
 17174                           tblptrh	equ	0xFF7
 17175                           tblptrl	equ	0xFF6
 17176                           tablat	equ	0xFF5
 17177                           prodh	equ	0xFF4
 17178                           prodl	equ	0xFF3
 17179                           intcon	equ	0xFF2
 17180                           postinc0	equ	0xFEE
 17181                           wreg	equ	0xFE8
 17182                           indf1	equ	0xFE7
 17183                           postdec1	equ	0xFE5
 17184                           fsr1h	equ	0xFE2
 17185                           fsr1l	equ	0xFE1
 17186                           indf2	equ	0xFDF
 17187                           postinc2	equ	0xFDE
 17188                           postdec2	equ	0xFDD
 17189                           plusw2	equ	0xFDB
 17190                           fsr2h	equ	0xFDA
 17191                           fsr2l	equ	0xFD9
 17192                           status	equ	0xFD8
 17193                           
 17194 ;; *************** function _MXK_BlockSwitchTo *****************
 17195 ;; Defined at:
 17196 ;;		line 82 in file "Library/MXK.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;  pModule         1    wreg     enum E6927
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;  pModule         1    7[BANK0 ] enum E6927
 17201 ;;  CUR             1    6[BANK0 ] unsigned char 
 17202 ;; Return value:  Size  Location     Type
 17203 ;;                  1    wreg      unsigned char 
 17204 ;; Registers used:
 17205 ;;		wreg, status,2, status,0, cstack
 17206 ;; Tracked objects:
 17207 ;;		On entry : 0/0
 17208 ;;		On exit  : 0/0
 17209 ;;		Unchanged: 0/0
 17210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;Total ram usage:        2 bytes
 17216 ;; Hardware stack levels used:    1
 17217 ;; Hardware stack levels required when called:    8
 17218 ;; This function calls:
 17219 ;;		_delay_us
 17220 ;; This function is called by:
 17221 ;;		_init
 17222 ;; This function uses a non-reentrant model
 17223 ;;
 17224                           
 17225                           	psect	text75
 17226  015E38                     __ptext75:
 17227                           	opt stack 0
 17228  015E38                     _MXK_BlockSwitchTo:
 17229                           	opt stack 21
 17230                           
 17231                           ;incstack = 0
 17232                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17233  015E38  0100               	movlb	0	; () banked
 17234  015E3A  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17235                           
 17236                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17237  015E3C  5086               	movf	3974,w,c	;volatile
 17238  015E3E  0B0F               	andlw	15
 17239  015E40  0100               	movlb	0	; () banked
 17240  015E42  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17241  015E44                     
 17242                           ; BSR set to: 0
 17243                           
 17244                           ; BSR set to: 0
 17245  015E44  504B               	movf	_Bus_State,w,c
 17246  015E46  B4D8               	btfsc	status,2,c
 17247  015E48  D7FD               	goto	l1724
 17248                           
 17249                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17250  015E4A  0E00               	movlw	0
 17251  015E4C  6E4B               	movwf	_Bus_State,c
 17252                           
 17253                           ;MXK.c: 90: if (CUR != pModule)
 17254  015E4E  0100               	movlb	0	; () banked
 17255  015E50  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17256  015E52  0100               	movlb	0	; () banked
 17257  015E54  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17258  015E56  B4D8               	btfsc	status,2,c
 17259  015E58  D00C               	goto	l1726
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;MXK.c: 91: {
 17263                           ;MXK.c: 92: PORTG &= ~(0xF);
 17264  015E5A  0EF0               	movlw	240
 17265  015E5C  1686               	andwf	3974,f,c	;volatile
 17266                           
 17267                           ;MXK.c: 93: PORTG |= pModule;
 17268  015E5E  0100               	movlb	0	; () banked
 17269  015E60  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17270  015E62  1286               	iorwf	3974,f,c	;volatile
 17271                           
 17272                           ; BSR set to: 0
 17273                           ;MXK.c: 96: delay_us(10);
 17274  015E64  0E00               	movlw	0
 17275  015E66  0100               	movlb	0	; () banked
 17276  015E68  6F61               	movwf	(delay_us@us+1)& (0+255),b
 17277  015E6A  0E0A               	movlw	10
 17278  015E6C  6F60               	movwf	delay_us@us& (0+255),b
 17279  015E6E  ECC2  F0AC         	call	_delay_us	;wreg free
 17280  015E72                     l1726:
 17281                           
 17282                           ;MXK.c: 97: }
 17283                           ;MXK.c: 98: return 1;
 17284  015E72  0E01               	movlw	1
 17285  015E74  0012               	return	
 17286  015E76                     __end_of_MXK_BlockSwitchTo:
 17287                           	opt stack 0
 17288                           tosu	equ	0xFFF
 17289                           tosh	equ	0xFFE
 17290                           tosl	equ	0xFFD
 17291                           pclath	equ	0xFFA
 17292                           tblptru	equ	0xFF8
 17293                           tblptrh	equ	0xFF7
 17294                           tblptrl	equ	0xFF6
 17295                           tablat	equ	0xFF5
 17296                           prodh	equ	0xFF4
 17297                           prodl	equ	0xFF3
 17298                           intcon	equ	0xFF2
 17299                           postinc0	equ	0xFEE
 17300                           wreg	equ	0xFE8
 17301                           indf1	equ	0xFE7
 17302                           postdec1	equ	0xFE5
 17303                           fsr1h	equ	0xFE2
 17304                           fsr1l	equ	0xFE1
 17305                           indf2	equ	0xFDF
 17306                           postinc2	equ	0xFDE
 17307                           postdec2	equ	0xFDD
 17308                           plusw2	equ	0xFDB
 17309                           fsr2h	equ	0xFDA
 17310                           fsr2l	equ	0xFD9
 17311                           status	equ	0xFD8
 17312                           
 17313 ;; *************** function _delay_us *****************
 17314 ;; Defined at:
 17315 ;;		line 255 in file "Library/Types.c"
 17316 ;; Parameters:    Size  Location     Type
 17317 ;;  us              2    0[BANK0 ] unsigned short 
 17318 ;; Auto vars:     Size  Location     Type
 17319 ;;  u               4    2[BANK0 ] unsigned long 
 17320 ;; Return value:  Size  Location     Type
 17321 ;;                  1    wreg      void 
 17322 ;; Registers used:
 17323 ;;		wreg, status,2, status,0
 17324 ;; Tracked objects:
 17325 ;;		On entry : 0/0
 17326 ;;		On exit  : 0/0
 17327 ;;		Unchanged: 0/0
 17328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17330 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17332 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;Total ram usage:        6 bytes
 17334 ;; Hardware stack levels used:    1
 17335 ;; Hardware stack levels required when called:    7
 17336 ;; This function calls:
 17337 ;;		Nothing
 17338 ;; This function is called by:
 17339 ;;		_MXK_BlockSwitchTo
 17340 ;;		_MXK_SwitchTo
 17341 ;; This function uses a non-reentrant model
 17342 ;;
 17343                           
 17344                           	psect	text76
 17345  015984                     __ptext76:
 17346                           	opt stack 0
 17347  015984                     _delay_us:
 17348                           	opt stack 21
 17349                           
 17350                           ;Types.c: 256: unsigned long u;
 17351                           ;Types.c: 257: while (us--) {
 17352                           
 17353                           ;incstack = 0
 17354  015984  D01C               	goto	u9330
 17355  015986                     l12607:
 17356                           
 17357                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17358  015986  0E00               	movlw	0
 17359  015988  0100               	movlb	0	; () banked
 17360  01598A  6F62               	movwf	delay_us@u& (0+255),b
 17361  01598C  0E00               	movlw	0
 17362  01598E  6F63               	movwf	(delay_us@u+1)& (0+255),b
 17363  015990  0E00               	movlw	0
 17364  015992  6F64               	movwf	(delay_us@u+2)& (0+255),b
 17365  015994  0E00               	movlw	0
 17366  015996  6F65               	movwf	(delay_us@u+3)& (0+255),b
 17367  015998                     l12609:
 17368                           
 17369                           ; BSR set to: 0
 17370  015998  0100               	movlb	0	; () banked
 17371  01599A  5162               	movf	delay_us@u& (0+255),w,b
 17372  01599C  0100               	movlb	0	; () banked
 17373  01599E  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 17374  0159A0  0100               	movlb	0	; () banked
 17375  0159A2  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 17376  0159A4  0100               	movlb	0	; () banked
 17377  0159A6  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 17378  0159A8  A4D8               	btfss	status,2,c
 17379  0159AA  D009               	goto	u9330
 17380                           
 17381                           ; BSR set to: 0
 17382                           
 17383                           ; BSR set to: 0
 17384  0159AC  F000               	nop		; ;# 
 17385  0159AE  0E01               	movlw	1
 17386  0159B0  0100               	movlb	0	; () banked
 17387  0159B2  2762               	addwf	delay_us@u& (0+255),f,b
 17388  0159B4  0E00               	movlw	0
 17389  0159B6  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 17390  0159B8  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 17391  0159BA  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 17392  0159BC  D7ED               	goto	l12609
 17393  0159BE                     u9330:
 17394                           
 17395                           ; BSR set to: 0
 17396                           
 17397                           ; BSR set to: 0
 17398  0159BE  0100               	movlb	0	; () banked
 17399  0159C0  0760               	decf	delay_us@us& (0+255),f,b
 17400  0159C2  A0D8               	btfss	status,0,c
 17401  0159C4  0761               	decf	(delay_us@us+1)& (0+255),f,b
 17402  0159C6  0100               	movlb	0	; () banked
 17403  0159C8  2960               	incf	delay_us@us& (0+255),w,b
 17404  0159CA  E1DD               	bnz	l12607
 17405  0159CC  0100               	movlb	0	; () banked
 17406  0159CE  2961               	incf	(delay_us@us+1)& (0+255),w,b
 17407  0159D0  B4D8               	btfsc	status,2,c
 17408  0159D2  0012               	return	
 17409  0159D4  D7D8               	goto	l832
 17410  0159D6                     __end_of_delay_us:
 17411                           	opt stack 0
 17412                           tosu	equ	0xFFF
 17413                           tosh	equ	0xFFE
 17414                           tosl	equ	0xFFD
 17415                           pclath	equ	0xFFA
 17416                           tblptru	equ	0xFF8
 17417                           tblptrh	equ	0xFF7
 17418                           tblptrl	equ	0xFF6
 17419                           tablat	equ	0xFF5
 17420                           prodh	equ	0xFF4
 17421                           prodl	equ	0xFF3
 17422                           intcon	equ	0xFF2
 17423                           postinc0	equ	0xFEE
 17424                           wreg	equ	0xFE8
 17425                           indf1	equ	0xFE7
 17426                           postdec1	equ	0xFE5
 17427                           fsr1h	equ	0xFE2
 17428                           fsr1l	equ	0xFE1
 17429                           indf2	equ	0xFDF
 17430                           postinc2	equ	0xFDE
 17431                           postdec2	equ	0xFDD
 17432                           plusw2	equ	0xFDB
 17433                           fsr2h	equ	0xFDA
 17434                           fsr2l	equ	0xFD9
 17435                           status	equ	0xFD8
 17436                           
 17437 ;; *************** function _LCD_Init *****************
 17438 ;; Defined at:
 17439 ;;		line 172 in file "Library/LCD.c"
 17440 ;; Parameters:    Size  Location     Type
 17441 ;;		None
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;  i               2   55[BANK0 ] unsigned short 
 17444 ;; Return value:  Size  Location     Type
 17445 ;;                  1    wreg      void 
 17446 ;; Registers used:
 17447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17448 ;; Tracked objects:
 17449 ;;		On entry : 0/0
 17450 ;;		On exit  : 0/0
 17451 ;;		Unchanged: 0/0
 17452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;Total ram usage:        4 bytes
 17458 ;; Hardware stack levels used:    1
 17459 ;; Hardware stack levels required when called:   15
 17460 ;; This function calls:
 17461 ;;		_Configure_GPIOs
 17462 ;;		_LCD_Fill
 17463 ;;		_LCD_Write
 17464 ;;		_Set_Rotation
 17465 ;;		_delay_ms
 17466 ;; This function is called by:
 17467 ;;		_init
 17468 ;; This function uses a non-reentrant model
 17469 ;;
 17470                           
 17471                           	psect	text77
 17472  012E94                     __ptext77:
 17473                           	opt stack 0
 17474  012E94                     _LCD_Init:
 17475                           	opt stack 14
 17476                           
 17477                           ;LCD.c: 174: UINT16 i;
 17478                           ;LCD.c: 175: Configure_GPIOs();
 17479                           
 17480                           ; BSR set to: 0
 17481                           ;incstack = 0
 17482  012E94  ECD2  F0A9         	call	_Configure_GPIOs	;wreg free
 17483                           
 17484                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17485  012E98  0E00               	movlw	0
 17486  012E9A  0100               	movlb	0	; () banked
 17487  012E9C  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 17488  012E9E  0E00               	movlw	0
 17489  012EA0  6F97               	movwf	LCD_Init@i& (0+255),b
 17490                           
 17491                           ; BSR set to: 0
 17492  012EA2  0100               	movlb	0	; () banked
 17493  012EA4  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17494  012EA6  E106               	bnz	u10730
 17495  012EA8  0E59               	movlw	89
 17496  012EAA  0100               	movlb	0	; () banked
 17497  012EAC  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17498  012EAE  B0D8               	btfsc	status,0,c
 17499  012EB0  D08B               	goto	u10770
 17500  012EB2  D001               	goto	l85
 17501  012EB4                     u10730:
 17502                           
 17503                           ; BSR set to: 0
 17504  012EB4  D089               	goto	u10770
 17505  012EB6                     l85:
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;LCD.c: 178: {
 17509                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17510                           
 17511                           ; BSR set to: 0
 17512  012EB6  90D8               	bcf	status,0,c
 17513  012EB8  0100               	movlb	0	; () banked
 17514  012EBA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17515  012EBC  6EF6               	movwf	tblptrl,c
 17516  012EBE  0100               	movlb	0	; () banked
 17517  012EC0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17518  012EC2  6EF7               	movwf	tblptrh,c
 17519  012EC4  0E87               	movlw	low _InitList
 17520  012EC6  26F6               	addwf	tblptrl,f,c
 17521  012EC8  0EFC               	movlw	high _InitList
 17522  012ECA  22F7               	addwfc	tblptrh,f,c
 17523  012ECC                     	if	1	;There are 3 active tblptr bytes
 17524  012ECC  6AF8               	clrf	tblptru,c
 17525  012ECE  0E00               	movlw	low (__mediumconst shr (0+16))
 17526  012ED0  22F8               	addwfc	tblptru,f,c
 17527  012ED2                     	endif
 17528  012ED2  0009               	tblrd		*+
 17529  012ED4  0E80               	movlw	128
 17530  012ED6  18F5               	xorwf	tablat,w,c
 17531  012ED8  0009               	tblrd		*+
 17532  012EDA  10F5               	iorwf	tablat,w,c
 17533  012EDC  A4D8               	btfss	status,2,c
 17534  012EDE  D022               	goto	l87
 17535                           
 17536                           ; BSR set to: 0
 17537  012EE0  0100               	movlb	0	; () banked
 17538  012EE2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17539  012EE4  E11F               	bnz	l14019
 17540  012EE6  0E58               	movlw	88
 17541  012EE8  0100               	movlb	0	; () banked
 17542  012EEA  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17543  012EEC  B0D8               	btfsc	status,0,c
 17544  012EEE  D01A               	goto	l87
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17548  012EF0  0100               	movlb	0	; () banked
 17549  012EF2  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17550  012EF4  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17551  012EF6  90D8               	bcf	status,0,c
 17552  012EF8  0100               	movlb	0	; () banked
 17553  012EFA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17554  012EFC  6EF6               	movwf	tblptrl,c
 17555  012EFE  0100               	movlb	0	; () banked
 17556  012F00  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17557  012F02  6EF7               	movwf	tblptrh,c
 17558  012F04  0E87               	movlw	low _InitList
 17559  012F06  26F6               	addwf	tblptrl,f,c
 17560  012F08  0EFC               	movlw	high _InitList
 17561  012F0A  22F7               	addwfc	tblptrh,f,c
 17562  012F0C                     	if	1	;There are 3 active tblptr bytes
 17563  012F0C  6AF8               	clrf	tblptru,c
 17564  012F0E  0E00               	movlw	low (__mediumconst shr (0+16))
 17565  012F10  22F8               	addwfc	tblptru,f,c
 17566  012F12                     	endif
 17567  012F12  0009               	tblrd		*+
 17568  012F14  CFF5 F060          	movff	tablat,delay_ms@ms
 17569  012F18  000A               	tblrd		*-
 17570  012F1A  CFF5 F061          	movff	tablat,delay_ms@ms+1
 17571  012F1E  ECAB  F0AA         	call	_delay_ms	;wreg free
 17572  012F22  D04B               	goto	l90
 17573  012F24                     l87:
 17574  012F24                     l14019:
 17575                           
 17576                           ;LCD.c: 181: else
 17577                           ;LCD.c: 182: {
 17578                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17579  012F24  90D8               	bcf	status,0,c
 17580  012F26  0100               	movlb	0	; () banked
 17581  012F28  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17582  012F2A  6EF6               	movwf	tblptrl,c
 17583  012F2C  0100               	movlb	0	; () banked
 17584  012F2E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17585  012F30  6EF7               	movwf	tblptrh,c
 17586  012F32  0E87               	movlw	low _InitList
 17587  012F34  26F6               	addwf	tblptrl,f,c
 17588  012F36  0EFC               	movlw	high _InitList
 17589  012F38  22F7               	addwfc	tblptrh,f,c
 17590  012F3A                     	if	1	;There are 3 active tblptr bytes
 17591  012F3A  6AF8               	clrf	tblptru,c
 17592  012F3C  0E00               	movlw	low (__mediumconst shr (0+16))
 17593  012F3E  22F8               	addwfc	tblptru,f,c
 17594  012F40                     	endif
 17595  012F40  0009               	tblrd		*+
 17596  012F42  0E00               	movlw	0
 17597  012F44  5EF5               	subwf	tablat,f,c
 17598  012F46  0009               	tblrd		*+
 17599  012F48  0E01               	movlw	1
 17600  012F4A  5AF5               	subwfb	tablat,f,c
 17601  012F4C  A0D8               	btfss	status,0,c
 17602  012F4E  D020               	goto	l89
 17603                           
 17604                           ; BSR set to: 0
 17605  012F50  0E00               	movlw	0
 17606  012F52  0100               	movlb	0	; () banked
 17607  012F54  6F63               	movwf	LCD_Write@mode& (0+255),b
 17608  012F56  90D8               	bcf	status,0,c
 17609  012F58  0100               	movlb	0	; () banked
 17610  012F5A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17611  012F5C  6EF6               	movwf	tblptrl,c
 17612  012F5E  0100               	movlb	0	; () banked
 17613  012F60  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17614  012F62  6EF7               	movwf	tblptrh,c
 17615  012F64  0E87               	movlw	low _InitList
 17616  012F66  26F6               	addwf	tblptrl,f,c
 17617  012F68  0EFC               	movlw	high _InitList
 17618  012F6A  22F7               	addwfc	tblptrh,f,c
 17619  012F6C                     	if	1	;There are 3 active tblptr bytes
 17620  012F6C  6AF8               	clrf	tblptru,c
 17621  012F6E  0E00               	movlw	low (__mediumconst shr (0+16))
 17622  012F70  22F8               	addwfc	tblptru,f,c
 17623  012F72                     	endif
 17624  012F72  0009               	tblrd		*+
 17625  012F74  CFF5 F095          	movff	tablat,??_LCD_Init
 17626  012F78  0009               	tblrd		*+
 17627  012F7A  CFF5 F096          	movff	tablat,??_LCD_Init+1
 17628  012F7E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 17629  012F82  0100               	movlb	0	; () banked
 17630  012F84  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 17631  012F86  0100               	movlb	0	; () banked
 17632  012F88  5195               	movf	??_LCD_Init& (0+255),w,b
 17633  012F8A  ECE2  F0B0         	call	_LCD_Write
 17634  012F8E  D015               	goto	l90
 17635  012F90                     l89:
 17636                           
 17637                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17638  012F90  0E01               	movlw	1
 17639  012F92  0100               	movlb	0	; () banked
 17640  012F94  6F63               	movwf	LCD_Write@mode& (0+255),b
 17641  012F96  90D8               	bcf	status,0,c
 17642  012F98  0100               	movlb	0	; () banked
 17643  012F9A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17644  012F9C  6EF6               	movwf	tblptrl,c
 17645  012F9E  0100               	movlb	0	; () banked
 17646  012FA0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17647  012FA2  6EF7               	movwf	tblptrh,c
 17648  012FA4  0E87               	movlw	low _InitList
 17649  012FA6  26F6               	addwf	tblptrl,f,c
 17650  012FA8  0EFC               	movlw	high _InitList
 17651  012FAA  22F7               	addwfc	tblptrh,f,c
 17652  012FAC                     	if	1	;There are 3 active tblptr bytes
 17653  012FAC  6AF8               	clrf	tblptru,c
 17654  012FAE  0E00               	movlw	low (__mediumconst shr (0+16))
 17655  012FB0  22F8               	addwfc	tblptru,f,c
 17656  012FB2                     	endif
 17657  012FB2  0008               	tblrd		*
 17658  012FB4  50F5               	movf	tablat,w,c
 17659  012FB6  ECE2  F0B0         	call	_LCD_Write
 17660  012FBA                     l90:
 17661  012FBA  0100               	movlb	0	; () banked
 17662  012FBC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17663  012FBE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17664                           
 17665                           ; BSR set to: 0
 17666  012FC0  0100               	movlb	0	; () banked
 17667  012FC2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17668  012FC4  E101               	bnz	l14029
 17669  012FC6  D770               	goto	L12
 17670  012FC8                     u10770:
 17671  012FC8                     l14029:
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;LCD.c: 185: }
 17675                           ;LCD.c: 186: }
 17676                           ;LCD.c: 187: delay_ms(100);
 17677  012FC8  0E00               	movlw	0
 17678  012FCA  0100               	movlb	0	; () banked
 17679  012FCC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17680  012FCE  0E64               	movlw	100
 17681  012FD0  6F60               	movwf	delay_ms@ms& (0+255),b
 17682  012FD2  ECAB  F0AA         	call	_delay_ms	;wreg free
 17683                           
 17684                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 17685  012FD6  0E00               	movlw	0
 17686  012FD8  0100               	movlb	0	; () banked
 17687  012FDA  6F63               	movwf	LCD_Write@mode& (0+255),b
 17688  012FDC  0E29               	movlw	41
 17689  012FDE  ECE2  F0B0         	call	_LCD_Write
 17690                           
 17691                           ;LCD.c: 189: Set_Rotation(1);
 17692  012FE2  0E01               	movlw	1
 17693  012FE4  ECCC  F0A5         	call	_Set_Rotation
 17694                           
 17695                           ;LCD.c: 191: delay_ms(100);
 17696  012FE8  0E00               	movlw	0
 17697  012FEA  0100               	movlb	0	; () banked
 17698  012FEC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17699  012FEE  0E64               	movlw	100
 17700  012FF0  6F60               	movwf	delay_ms@ms& (0+255),b
 17701  012FF2  ECAB  F0AA         	call	_delay_ms	;wreg free
 17702                           
 17703                           ;LCD.c: 192: LCD_Fill(0x0000);
 17704  012FF6  0E00               	movlw	0
 17705  012FF8  0100               	movlb	0	; () banked
 17706  012FFA  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 17707  012FFC  0E00               	movlw	0
 17708  012FFE  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 17709  013000  EC96  F0AC         	call	_LCD_Fill	;wreg free
 17710  013004  0012               	return		;funcret
 17711  013006                     __end_of_LCD_Init:
 17712                           	opt stack 0
 17713                           tosu	equ	0xFFF
 17714                           tosh	equ	0xFFE
 17715                           tosl	equ	0xFFD
 17716                           pclath	equ	0xFFA
 17717                           tblptru	equ	0xFF8
 17718                           tblptrh	equ	0xFF7
 17719                           tblptrl	equ	0xFF6
 17720                           tablat	equ	0xFF5
 17721                           prodh	equ	0xFF4
 17722                           prodl	equ	0xFF3
 17723                           intcon	equ	0xFF2
 17724                           postinc0	equ	0xFEE
 17725                           wreg	equ	0xFE8
 17726                           indf1	equ	0xFE7
 17727                           postdec1	equ	0xFE5
 17728                           fsr1h	equ	0xFE2
 17729                           fsr1l	equ	0xFE1
 17730                           indf2	equ	0xFDF
 17731                           postinc2	equ	0xFDE
 17732                           postdec2	equ	0xFDD
 17733                           plusw2	equ	0xFDB
 17734                           fsr2h	equ	0xFDA
 17735                           fsr2l	equ	0xFD9
 17736                           status	equ	0xFD8
 17737                           
 17738 ;; *************** function _Set_Rotation *****************
 17739 ;; Defined at:
 17740 ;;		line 248 in file "Library/LCD.c"
 17741 ;; Parameters:    Size  Location     Type
 17742 ;;  m               1    wreg     unsigned char 
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;  m               1    5[BANK0 ] unsigned char 
 17745 ;;  rotation        1    6[BANK0 ] unsigned char 
 17746 ;; Return value:  Size  Location     Type
 17747 ;;                  1    wreg      void 
 17748 ;; Registers used:
 17749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17750 ;; Tracked objects:
 17751 ;;		On entry : 0/0
 17752 ;;		On exit  : 0/0
 17753 ;;		Unchanged: 0/0
 17754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17759 ;;Total ram usage:        2 bytes
 17760 ;; Hardware stack levels used:    1
 17761 ;; Hardware stack levels required when called:    9
 17762 ;; This function calls:
 17763 ;;		_LCD_Write
 17764 ;; This function is called by:
 17765 ;;		_LCD_Init
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769                           	psect	text78
 17770  014B98                     __ptext78:
 17771                           	opt stack 0
 17772  014B98                     _Set_Rotation:
 17773                           	opt stack 19
 17774                           
 17775                           ;incstack = 0
 17776                           ;Set_Rotation@m stored from wreg
 17777  014B98  0100               	movlb	0	; () banked
 17778  014B9A  6F65               	movwf	Set_Rotation@m& (0+255),b
 17779                           
 17780                           ;LCD.c: 250: UINT8 rotation = 0x00;
 17781  014B9C  0E00               	movlw	0
 17782  014B9E  0100               	movlb	0	; () banked
 17783  014BA0  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17784                           
 17785                           ; BSR set to: 0
 17786                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 17787  014BA2  0E00               	movlw	0
 17788  014BA4  0100               	movlb	0	; () banked
 17789  014BA6  6F63               	movwf	LCD_Write@mode& (0+255),b
 17790  014BA8  0E36               	movlw	54
 17791  014BAA  ECE2  F0B0         	call	_LCD_Write
 17792                           
 17793                           ;LCD.c: 253: rotation = (m % 4);
 17794  014BAE  0100               	movlb	0	; () banked
 17795  014BB0  5165               	movf	Set_Rotation@m& (0+255),w,b
 17796  014BB2  0B03               	andlw	3
 17797  014BB4  0100               	movlb	0	; () banked
 17798  014BB6  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17799                           
 17800                           ;LCD.c: 255: switch(rotation)
 17801  014BB8  D02C               	goto	l117
 17802  014BBA                     
 17803                           ; BSR set to: 0
 17804                           ;LCD.c: 258: {
 17805                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 17806                           
 17807                           ; BSR set to: 0
 17808  014BBA  0E01               	movlw	1
 17809  014BBC  0100               	movlb	0	; () banked
 17810  014BBE  6F63               	movwf	LCD_Write@mode& (0+255),b
 17811  014BC0  0EC8               	movlw	200
 17812  014BC2  ECE2  F0B0         	call	_LCD_Write
 17813                           
 17814                           ;LCD.c: 260: w = 128;
 17815  014BC6  0E80               	movlw	128
 17816  014BC8  6E50               	movwf	_w,c
 17817                           
 17818                           ;LCD.c: 261: l = 128;
 17819  014BCA  0E80               	movlw	128
 17820  014BCC  6E4F               	movwf	_l,c
 17821                           
 17822                           ;LCD.c: 262: break;
 17823  014BCE  0012               	return	
 17824  014BD0                     
 17825                           ;LCD.c: 265: {
 17826                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 17827  014BD0  0E01               	movlw	1
 17828  014BD2  0100               	movlb	0	; () banked
 17829  014BD4  6F63               	movwf	LCD_Write@mode& (0+255),b
 17830  014BD6  0EA8               	movlw	168
 17831  014BD8  ECE2  F0B0         	call	_LCD_Write
 17832                           
 17833                           ;LCD.c: 267: w = 128;
 17834  014BDC  0E80               	movlw	128
 17835  014BDE  6E50               	movwf	_w,c
 17836                           
 17837                           ;LCD.c: 268: l = 128;
 17838  014BE0  0E80               	movlw	128
 17839  014BE2  6E4F               	movwf	_l,c
 17840                           
 17841                           ;LCD.c: 269: break;
 17842  014BE4  0012               	return	
 17843  014BE6                     
 17844                           ;LCD.c: 272: {
 17845                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 17846  014BE6  0E01               	movlw	1
 17847  014BE8  0100               	movlb	0	; () banked
 17848  014BEA  6F63               	movwf	LCD_Write@mode& (0+255),b
 17849  014BEC  0E08               	movlw	8
 17850  014BEE  ECE2  F0B0         	call	_LCD_Write
 17851                           
 17852                           ;LCD.c: 274: w = 128;
 17853  014BF2  0E80               	movlw	128
 17854  014BF4  6E50               	movwf	_w,c
 17855                           
 17856                           ;LCD.c: 275: l = 128;
 17857  014BF6  0E80               	movlw	128
 17858  014BF8  6E4F               	movwf	_l,c
 17859                           
 17860                           ;LCD.c: 276: break;
 17861  014BFA  0012               	return	
 17862  014BFC                     
 17863                           ;LCD.c: 279: {
 17864                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 17865  014BFC  0E01               	movlw	1
 17866  014BFE  0100               	movlb	0	; () banked
 17867  014C00  6F63               	movwf	LCD_Write@mode& (0+255),b
 17868  014C02  0E68               	movlw	104
 17869  014C04  ECE2  F0B0         	call	_LCD_Write
 17870                           
 17871                           ;LCD.c: 281: w = 128;
 17872  014C08  0E80               	movlw	128
 17873  014C0A  6E50               	movwf	_w,c
 17874                           
 17875                           ;LCD.c: 282: l = 128;
 17876  014C0C  0E80               	movlw	128
 17877  014C0E  6E4F               	movwf	_l,c
 17878                           
 17879                           ;LCD.c: 284: }
 17880                           ;LCD.c: 285: }
 17881                           
 17882                           ;LCD.c: 283: break;
 17883  014C10  0012               	return	
 17884  014C12                     l117:
 17885  014C12  0100               	movlb	0	; () banked
 17886  014C14  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 17887                           
 17888                           ; Switch size 1, requested type "space"
 17889                           ; Number of cases is 4, Range of values is 0 to 3
 17890                           ; switch strategies available:
 17891                           ; Name         Instructions Cycles
 17892                           ; simple_byte           13     7 (average)
 17893                           ;	Chosen strategy is simple_byte
 17894  014C16  0A00               	xorlw	0	; case 0
 17895  014C18  B4D8               	btfsc	status,2,c
 17896  014C1A  D7CF               	goto	l118
 17897  014C1C  0A01               	xorlw	1	; case 1
 17898  014C1E  B4D8               	btfsc	status,2,c
 17899  014C20  D7D7               	goto	l120
 17900  014C22  0A03               	xorlw	3	; case 2
 17901  014C24  B4D8               	btfsc	status,2,c
 17902  014C26  D7DF               	goto	l121
 17903  014C28  0A01               	xorlw	1	; case 3
 17904  014C2A  A4D8               	btfss	status,2,c
 17905  014C2C  0012               	return	
 17906  014C2E  D7E6               	goto	l122
 17907  014C30                     __end_of_Set_Rotation:
 17908                           	opt stack 0
 17909                           tosu	equ	0xFFF
 17910                           tosh	equ	0xFFE
 17911                           tosl	equ	0xFFD
 17912                           pclath	equ	0xFFA
 17913                           tblptru	equ	0xFF8
 17914                           tblptrh	equ	0xFF7
 17915                           tblptrl	equ	0xFF6
 17916                           tablat	equ	0xFF5
 17917                           prodh	equ	0xFF4
 17918                           prodl	equ	0xFF3
 17919                           intcon	equ	0xFF2
 17920                           postinc0	equ	0xFEE
 17921                           wreg	equ	0xFE8
 17922                           indf1	equ	0xFE7
 17923                           postdec1	equ	0xFE5
 17924                           fsr1h	equ	0xFE2
 17925                           fsr1l	equ	0xFE1
 17926                           indf2	equ	0xFDF
 17927                           postinc2	equ	0xFDE
 17928                           postdec2	equ	0xFDD
 17929                           plusw2	equ	0xFDB
 17930                           fsr2h	equ	0xFDA
 17931                           fsr2l	equ	0xFD9
 17932                           status	equ	0xFD8
 17933                           
 17934 ;; *************** function _LCD_Fill *****************
 17935 ;; Defined at:
 17936 ;;		line 287 in file "Library/LCD.c"
 17937 ;; Parameters:    Size  Location     Type
 17938 ;;  pColour         2    9[BANK0 ] unsigned short 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;  j               1   12[BANK0 ] unsigned char 
 17941 ;;  i               1   11[BANK0 ] unsigned char 
 17942 ;; Return value:  Size  Location     Type
 17943 ;;                  1    wreg      void 
 17944 ;; Registers used:
 17945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17946 ;; Tracked objects:
 17947 ;;		On entry : 0/0
 17948 ;;		On exit  : 0/0
 17949 ;;		Unchanged: 0/0
 17950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17951 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;Total ram usage:        4 bytes
 17956 ;; Hardware stack levels used:    1
 17957 ;; Hardware stack levels required when called:   10
 17958 ;; This function calls:
 17959 ;;		_LCD_Word_Write
 17960 ;;		_Set_Addr_Window
 17961 ;; This function is called by:
 17962 ;;		_LCD_Init
 17963 ;; This function uses a non-reentrant model
 17964 ;;
 17965                           
 17966                           	psect	text79
 17967  01592C                     __ptext79:
 17968                           	opt stack 0
 17969  01592C                     _LCD_Fill:
 17970                           	opt stack 18
 17971                           
 17972                           ;LCD.c: 296: UINT8 i = 0x00;
 17973                           
 17974                           ;incstack = 0
 17975  01592C  0E00               	movlw	0
 17976  01592E  0100               	movlb	0	; () banked
 17977  015930  6F6B               	movwf	LCD_Fill@i& (0+255),b
 17978                           
 17979                           ;LCD.c: 297: UINT8 j = 0x00;
 17980  015932  0E00               	movlw	0
 17981  015934  0100               	movlb	0	; () banked
 17982  015936  6F6C               	movwf	LCD_Fill@j& (0+255),b
 17983                           
 17984                           ; BSR set to: 0
 17985                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 17986  015938  0E00               	movlw	0
 17987  01593A  0100               	movlb	0	; () banked
 17988  01593C  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 17989  01593E  0450               	decf	_w,w,c
 17990  015940  0100               	movlb	0	; () banked
 17991  015942  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 17992  015944  044F               	decf	_l,w,c
 17993  015946  0100               	movlb	0	; () banked
 17994  015948  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 17995  01594A  0E00               	movlw	0
 17996  01594C  ECE5  F0A2         	call	_Set_Addr_Window
 17997                           
 17998                           ;LCD.c: 299: for (j = l; j > 0; j--)
 17999  015950  C04F  F06C         	movff	_l,LCD_Fill@j
 18000  015954                     l13383:
 18001  015954  0100               	movlb	0	; () banked
 18002  015956  516C               	movf	LCD_Fill@j& (0+255),w,b
 18003  015958  0100               	movlb	0	; () banked
 18004  01595A  B4D8               	btfsc	status,2,c
 18005  01595C  0012               	return	
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18009                           
 18010                           ; BSR set to: 0
 18011  01595E  C050  F06B         	movff	_w,LCD_Fill@i
 18012  015962                     l13387:
 18013                           
 18014                           ; BSR set to: 0
 18015  015962  0100               	movlb	0	; () banked
 18016  015964  516B               	movf	LCD_Fill@i& (0+255),w,b
 18017  015966  0100               	movlb	0	; () banked
 18018  015968  B4D8               	btfsc	status,2,c
 18019  01596A  D009               	goto	u9850
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18023                           
 18024                           ; BSR set to: 0
 18025                           
 18026                           ; BSR set to: 0
 18027  01596C  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18028  015970  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18029  015974  EC43  F0B1         	call	_LCD_Word_Write	;wreg free
 18030  015978  0100               	movlb	0	; () banked
 18031  01597A  076B               	decf	LCD_Fill@i& (0+255),f,b
 18032  01597C  D7F2               	goto	l13387
 18033  01597E                     u9850:
 18034                           
 18035                           ; BSR set to: 0
 18036                           
 18037                           ; BSR set to: 0
 18038  01597E  0100               	movlb	0	; () banked
 18039  015980  076C               	decf	LCD_Fill@j& (0+255),f,b
 18040  015982  D7E8               	goto	l13383
 18041  015984                     __end_of_LCD_Fill:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           postinc0	equ	0xFEE
 18055                           wreg	equ	0xFE8
 18056                           indf1	equ	0xFE7
 18057                           postdec1	equ	0xFE5
 18058                           fsr1h	equ	0xFE2
 18059                           fsr1l	equ	0xFE1
 18060                           indf2	equ	0xFDF
 18061                           postinc2	equ	0xFDE
 18062                           postdec2	equ	0xFDD
 18063                           plusw2	equ	0xFDB
 18064                           fsr2h	equ	0xFDA
 18065                           fsr2l	equ	0xFD9
 18066                           status	equ	0xFD8
 18067                           
 18068 ;; *************** function _Set_Addr_Window *****************
 18069 ;; Defined at:
 18070 ;;		line 214 in file "Library/LCD.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;  xs              1    wreg     unsigned char 
 18073 ;;  ys              1    5[BANK0 ] unsigned char 
 18074 ;;  xe              1    6[BANK0 ] unsigned char 
 18075 ;;  ye              1    7[BANK0 ] unsigned char 
 18076 ;; Auto vars:     Size  Location     Type
 18077 ;;  xs              1    8[BANK0 ] unsigned char 
 18078 ;; Return value:  Size  Location     Type
 18079 ;;                  1    wreg      void 
 18080 ;; Registers used:
 18081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18082 ;; Tracked objects:
 18083 ;;		On entry : 0/0
 18084 ;;		On exit  : 0/0
 18085 ;;		Unchanged: 0/0
 18086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18087 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18090 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18091 ;;Total ram usage:        4 bytes
 18092 ;; Hardware stack levels used:    1
 18093 ;; Hardware stack levels required when called:    9
 18094 ;; This function calls:
 18095 ;;		_LCD_Write
 18096 ;; This function is called by:
 18097 ;;		_LCD_Fill
 18098 ;;		_LCD_FillRectangle
 18099 ;;		_LCD_DrawField
 18100 ;;		_RAM_Address_Set
 18101 ;;		_LCD_DrawPixel
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text80
 18106  0145CA                     __ptext80:
 18107                           	opt stack 0
 18108  0145CA                     _Set_Addr_Window:
 18109                           	opt stack 18
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;incstack = 0
 18113                           ;Set_Addr_Window@xs stored from wreg
 18114  0145CA  0100               	movlb	0	; () banked
 18115  0145CC  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 18116                           
 18117                           ;LCD.c: 216: ys+=2;
 18118  0145CE  0E02               	movlw	2
 18119  0145D0  0100               	movlb	0	; () banked
 18120  0145D2  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18121                           
 18122                           ;LCD.c: 217: ye+=2;
 18123  0145D4  0E02               	movlw	2
 18124  0145D6  0100               	movlb	0	; () banked
 18125  0145D8  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18126                           
 18127                           ;LCD.c: 218: xs+=3;
 18128  0145DA  0E03               	movlw	3
 18129  0145DC  0100               	movlb	0	; () banked
 18130  0145DE  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18131                           
 18132                           ;LCD.c: 219: xe+=3;
 18133  0145E0  0E03               	movlw	3
 18134  0145E2  0100               	movlb	0	; () banked
 18135  0145E4  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18136                           
 18137                           ; BSR set to: 0
 18138                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18139  0145E6  0E00               	movlw	0
 18140  0145E8  0100               	movlb	0	; () banked
 18141  0145EA  6F63               	movwf	LCD_Write@mode& (0+255),b
 18142  0145EC  0E2A               	movlw	42
 18143  0145EE  ECE2  F0B0         	call	_LCD_Write
 18144                           
 18145                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18146  0145F2  0E01               	movlw	1
 18147  0145F4  0100               	movlb	0	; () banked
 18148  0145F6  6F63               	movwf	LCD_Write@mode& (0+255),b
 18149  0145F8  0E00               	movlw	0
 18150  0145FA  ECE2  F0B0         	call	_LCD_Write
 18151                           
 18152                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18153  0145FE  0E01               	movlw	1
 18154  014600  0100               	movlb	0	; () banked
 18155  014602  6F63               	movwf	LCD_Write@mode& (0+255),b
 18156  014604  0100               	movlb	0	; () banked
 18157  014606  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 18158  014608  ECE2  F0B0         	call	_LCD_Write
 18159                           
 18160                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18161  01460C  0E01               	movlw	1
 18162  01460E  0100               	movlb	0	; () banked
 18163  014610  6F63               	movwf	LCD_Write@mode& (0+255),b
 18164  014612  0E00               	movlw	0
 18165  014614  ECE2  F0B0         	call	_LCD_Write
 18166                           
 18167                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18168  014618  0E01               	movlw	1
 18169  01461A  0100               	movlb	0	; () banked
 18170  01461C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18171  01461E  0100               	movlb	0	; () banked
 18172  014620  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 18173  014622  ECE2  F0B0         	call	_LCD_Write
 18174                           
 18175                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18176  014626  0E00               	movlw	0
 18177  014628  0100               	movlb	0	; () banked
 18178  01462A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18179  01462C  0E2B               	movlw	43
 18180  01462E  ECE2  F0B0         	call	_LCD_Write
 18181                           
 18182                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18183  014632  0E01               	movlw	1
 18184  014634  0100               	movlb	0	; () banked
 18185  014636  6F63               	movwf	LCD_Write@mode& (0+255),b
 18186  014638  0E00               	movlw	0
 18187  01463A  ECE2  F0B0         	call	_LCD_Write
 18188                           
 18189                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18190  01463E  0E01               	movlw	1
 18191  014640  0100               	movlb	0	; () banked
 18192  014642  6F63               	movwf	LCD_Write@mode& (0+255),b
 18193  014644  0100               	movlb	0	; () banked
 18194  014646  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 18195  014648  ECE2  F0B0         	call	_LCD_Write
 18196                           
 18197                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18198  01464C  0E01               	movlw	1
 18199  01464E  0100               	movlb	0	; () banked
 18200  014650  6F63               	movwf	LCD_Write@mode& (0+255),b
 18201  014652  0E00               	movlw	0
 18202  014654  ECE2  F0B0         	call	_LCD_Write
 18203                           
 18204                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18205  014658  0E01               	movlw	1
 18206  01465A  0100               	movlb	0	; () banked
 18207  01465C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18208  01465E  0100               	movlb	0	; () banked
 18209  014660  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 18210  014662  ECE2  F0B0         	call	_LCD_Write
 18211                           
 18212                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18213  014666  0E00               	movlw	0
 18214  014668  0100               	movlb	0	; () banked
 18215  01466A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18216  01466C  0E2C               	movlw	44
 18217  01466E  ECE2  F0B0         	call	_LCD_Write
 18218  014672  0012               	return		;funcret
 18219  014674                     __end_of_Set_Addr_Window:
 18220                           	opt stack 0
 18221                           tosu	equ	0xFFF
 18222                           tosh	equ	0xFFE
 18223                           tosl	equ	0xFFD
 18224                           pclath	equ	0xFFA
 18225                           tblptru	equ	0xFF8
 18226                           tblptrh	equ	0xFF7
 18227                           tblptrl	equ	0xFF6
 18228                           tablat	equ	0xFF5
 18229                           prodh	equ	0xFF4
 18230                           prodl	equ	0xFF3
 18231                           intcon	equ	0xFF2
 18232                           postinc0	equ	0xFEE
 18233                           wreg	equ	0xFE8
 18234                           indf1	equ	0xFE7
 18235                           postdec1	equ	0xFE5
 18236                           fsr1h	equ	0xFE2
 18237                           fsr1l	equ	0xFE1
 18238                           indf2	equ	0xFDF
 18239                           postinc2	equ	0xFDE
 18240                           postdec2	equ	0xFDD
 18241                           plusw2	equ	0xFDB
 18242                           fsr2h	equ	0xFDA
 18243                           fsr2l	equ	0xFD9
 18244                           status	equ	0xFD8
 18245                           
 18246 ;; *************** function _LCD_Word_Write *****************
 18247 ;; Defined at:
 18248 ;;		line 198 in file "Library/LCD.c"
 18249 ;; Parameters:    Size  Location     Type
 18250 ;;  value           2    5[BANK0 ] unsigned short 
 18251 ;; Auto vars:     Size  Location     Type
 18252 ;;		None
 18253 ;; Return value:  Size  Location     Type
 18254 ;;                  1    wreg      void 
 18255 ;; Registers used:
 18256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18257 ;; Tracked objects:
 18258 ;;		On entry : 0/0
 18259 ;;		On exit  : 0/0
 18260 ;;		Unchanged: 0/0
 18261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18262 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18266 ;;Total ram usage:        2 bytes
 18267 ;; Hardware stack levels used:    1
 18268 ;; Hardware stack levels required when called:    9
 18269 ;; This function calls:
 18270 ;;		_LCD_Write
 18271 ;; This function is called by:
 18272 ;;		_LCD_Fill
 18273 ;;		_LCD_FillRectangle
 18274 ;;		_LCD_DrawField
 18275 ;;		_LCD_DrawPixel
 18276 ;; This function uses a non-reentrant model
 18277 ;;
 18278                           
 18279                           	psect	text81
 18280  016286                     __ptext81:
 18281                           	opt stack 0
 18282  016286                     _LCD_Word_Write:
 18283                           	opt stack 18
 18284                           
 18285                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18286                           
 18287                           ;incstack = 0
 18288  016286  0E01               	movlw	1
 18289  016288  0100               	movlb	0	; () banked
 18290  01628A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18291  01628C  0100               	movlb	0	; () banked
 18292  01628E  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18293  016290  ECE2  F0B0         	call	_LCD_Write
 18294                           
 18295                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18296  016294  0E01               	movlw	1
 18297  016296  0100               	movlb	0	; () banked
 18298  016298  6F63               	movwf	LCD_Write@mode& (0+255),b
 18299  01629A  0100               	movlb	0	; () banked
 18300  01629C  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 18301  01629E  ECE2  F0B0         	call	_LCD_Write
 18302  0162A2  0012               	return		;funcret
 18303  0162A4                     __end_of_LCD_Word_Write:
 18304                           	opt stack 0
 18305                           tosu	equ	0xFFF
 18306                           tosh	equ	0xFFE
 18307                           tosl	equ	0xFFD
 18308                           pclath	equ	0xFFA
 18309                           tblptru	equ	0xFF8
 18310                           tblptrh	equ	0xFF7
 18311                           tblptrl	equ	0xFF6
 18312                           tablat	equ	0xFF5
 18313                           prodh	equ	0xFF4
 18314                           prodl	equ	0xFF3
 18315                           intcon	equ	0xFF2
 18316                           postinc0	equ	0xFEE
 18317                           wreg	equ	0xFE8
 18318                           indf1	equ	0xFE7
 18319                           postdec1	equ	0xFE5
 18320                           fsr1h	equ	0xFE2
 18321                           fsr1l	equ	0xFE1
 18322                           indf2	equ	0xFDF
 18323                           postinc2	equ	0xFDE
 18324                           postdec2	equ	0xFDD
 18325                           plusw2	equ	0xFDB
 18326                           fsr2h	equ	0xFDA
 18327                           fsr2l	equ	0xFD9
 18328                           status	equ	0xFD8
 18329                           
 18330 ;; *************** function _LCD_Write *****************
 18331 ;; Defined at:
 18332 ;;		line 67 in file "Library/LCD.c"
 18333 ;; Parameters:    Size  Location     Type
 18334 ;;  value           1    wreg     unsigned char 
 18335 ;;  mode            1    3[BANK0 ] enum E6761
 18336 ;; Auto vars:     Size  Location     Type
 18337 ;;  value           1    4[BANK0 ] unsigned char 
 18338 ;; Return value:  Size  Location     Type
 18339 ;;                  1    wreg      void 
 18340 ;; Registers used:
 18341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18342 ;; Tracked objects:
 18343 ;;		On entry : 0/0
 18344 ;;		On exit  : 0/0
 18345 ;;		Unchanged: 0/0
 18346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18347 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;Total ram usage:        2 bytes
 18352 ;; Hardware stack levels used:    1
 18353 ;; Hardware stack levels required when called:    8
 18354 ;; This function calls:
 18355 ;;		_Mode_Set
 18356 ;;		_SPI_Send
 18357 ;; This function is called by:
 18358 ;;		_LCD_Init
 18359 ;;		_LCD_Word_Write
 18360 ;;		_Set_Addr_Window
 18361 ;;		_Set_Rotation
 18362 ;;		_LCD_WriteCMD
 18363 ;;		_LCD_WriteData
 18364 ;;		_LCD_Data_Write
 18365 ;;		_LCD_Data_Write_4k
 18366 ;;		_Invert_Display
 18367 ;; This function uses a non-reentrant model
 18368 ;;
 18369                           
 18370                           	psect	text82
 18371  0161C4                     __ptext82:
 18372                           	opt stack 0
 18373  0161C4                     _LCD_Write:
 18374                           	opt stack 18
 18375                           
 18376                           ;incstack = 0
 18377                           ;LCD_Write@value stored from wreg
 18378  0161C4  0100               	movlb	0	; () banked
 18379  0161C6  6F64               	movwf	LCD_Write@value& (0+255),b
 18380                           
 18381                           ;LCD.c: 89: Mode_Set(mode);
 18382  0161C8  0100               	movlb	0	; () banked
 18383  0161CA  5163               	movf	LCD_Write@mode& (0+255),w,b
 18384  0161CC  EC68  F0B2         	call	_Mode_Set
 18385                           
 18386                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18387  0161D0  0E6E               	movlw	low _SPI2
 18388  0161D2  0100               	movlb	0	; () banked
 18389  0161D4  6F60               	movwf	SPI_Send@pInput& (0+255),b
 18390  0161D6  0E03               	movlw	high _SPI2
 18391  0161D8  0100               	movlb	0	; () banked
 18392  0161DA  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18393  0161DC  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 18394  0161E0  EC0A  F0AA         	call	_SPI_Send	;wreg free
 18395  0161E4  0012               	return		;funcret
 18396  0161E6                     __end_of_LCD_Write:
 18397                           	opt stack 0
 18398                           tosu	equ	0xFFF
 18399                           tosh	equ	0xFFE
 18400                           tosl	equ	0xFFD
 18401                           pclath	equ	0xFFA
 18402                           tblptru	equ	0xFF8
 18403                           tblptrh	equ	0xFF7
 18404                           tblptrl	equ	0xFF6
 18405                           tablat	equ	0xFF5
 18406                           prodh	equ	0xFF4
 18407                           prodl	equ	0xFF3
 18408                           intcon	equ	0xFF2
 18409                           postinc0	equ	0xFEE
 18410                           wreg	equ	0xFE8
 18411                           indf1	equ	0xFE7
 18412                           postdec1	equ	0xFE5
 18413                           fsr1h	equ	0xFE2
 18414                           fsr1l	equ	0xFE1
 18415                           indf2	equ	0xFDF
 18416                           postinc2	equ	0xFDE
 18417                           postdec2	equ	0xFDD
 18418                           plusw2	equ	0xFDB
 18419                           fsr2h	equ	0xFDA
 18420                           fsr2l	equ	0xFD9
 18421                           status	equ	0xFD8
 18422                           
 18423 ;; *************** function _SPI_Send *****************
 18424 ;; Defined at:
 18425 ;;		line 226 in file "Library/SPI.c"
 18426 ;; Parameters:    Size  Location     Type
 18427 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18428 ;;		 -> SPI1(11), SPI2(11), 
 18429 ;;  pData           1    2[BANK0 ] unsigned char 
 18430 ;; Auto vars:     Size  Location     Type
 18431 ;;		None
 18432 ;; Return value:  Size  Location     Type
 18433 ;;                  1    wreg      unsigned char 
 18434 ;; Registers used:
 18435 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18436 ;; Tracked objects:
 18437 ;;		On entry : 0/0
 18438 ;;		On exit  : 0/0
 18439 ;;		Unchanged: 0/0
 18440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18441 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18444 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;Total ram usage:        3 bytes
 18446 ;; Hardware stack levels used:    1
 18447 ;; Hardware stack levels required when called:    7
 18448 ;; This function calls:
 18449 ;;		Nothing
 18450 ;; This function is called by:
 18451 ;;		_LCD_Write
 18452 ;;		_OutSeg
 18453 ;; This function uses a non-reentrant model
 18454 ;;
 18455                           
 18456                           	psect	text83
 18457  015414                     __ptext83:
 18458                           	opt stack 0
 18459  015414                     _SPI_Send:
 18460                           	opt stack 20
 18461                           
 18462                           ;SPI.c: 253: switch (pInput->mChannel)
 18463                           
 18464                           ;incstack = 0
 18465  015414  D026               	goto	l678
 18466  015416                     
 18467                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18468  015416  C0EE  FFD9         	movff	_PortC+4,fsr2l
 18469  01541A  C0EF  FFDA         	movff	_PortC+5,fsr2h
 18470  01541E  0100               	movlb	0	; () banked
 18471  015420  94DF               	bcf	indf2,2,c
 18472                           
 18473                           ; BSR set to: 0
 18474                           ;SPI.c: 257: SSP1BUF = pData;
 18475  015422  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18476  015426                     
 18477                           ; BSR set to: 0
 18478  015426  A0C7               	btfss	4039,0,c	;volatile
 18479  015428  D7FE               	goto	l681
 18480                           
 18481                           ;SPI.c: 259: pData = SSP1BUF;
 18482  01542A  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 18483                           
 18484                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18485  01542E  C0EE  FFD9         	movff	_PortC+4,fsr2l
 18486  015432  C0EF  FFDA         	movff	_PortC+5,fsr2h
 18487  015436  0100               	movlb	0	; () banked
 18488  015438  84DF               	bsf	indf2,2,c
 18489                           
 18490                           ; BSR set to: 0
 18491                           ;SPI.c: 261: return pData;
 18492                           ;	Return value of _SPI_Send is never used
 18493  01543A  0012               	return	
 18494  01543C                     
 18495                           ; BSR set to: 0
 18496                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18497                           
 18498                           ; BSR set to: 0
 18499  01543C  C0E4  FFD9         	movff	_PortD+4,fsr2l
 18500  015440  C0E5  FFDA         	movff	_PortD+5,fsr2h
 18501  015444  0100               	movlb	0	; () banked
 18502  015446  9EDF               	bcf	indf2,7,c
 18503                           
 18504                           ; BSR set to: 0
 18505                           ;SPI.c: 264: SSP2BUF = pData;
 18506  015448  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18507  01544C                     
 18508                           ; BSR set to: 0
 18509  01544C  A06D               	btfss	3949,0,c	;volatile
 18510  01544E  D7FE               	goto	l686
 18511                           
 18512                           ;SPI.c: 266: pData = SSP2BUF;
 18513  015450  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 18514                           
 18515                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18516  015454  C0E4  FFD9         	movff	_PortD+4,fsr2l
 18517  015458  C0E5  FFDA         	movff	_PortD+5,fsr2h
 18518  01545C  0100               	movlb	0	; () banked
 18519  01545E  8EDF               	bsf	indf2,7,c
 18520                           
 18521                           ; BSR set to: 0
 18522                           ;SPI.c: 269: };
 18523                           
 18524                           ; BSR set to: 0
 18525                           ;SPI.c: 268: return pData;
 18526                           ;	Return value of _SPI_Send is never used
 18527  015460  0012               	return	
 18528  015462                     l678:
 18529                           
 18530                           ; BSR set to: 0
 18531  015462  0100               	movlb	0	; () banked
 18532  015464  EE20 F002          	lfsr	2,2
 18533  015468  5160               	movf	SPI_Send@pInput& (0+255),w,b
 18534  01546A  26D9               	addwf	fsr2l,f,c
 18535  01546C  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18536  01546E  22DA               	addwfc	fsr2h,f,c
 18537  015470  50DF               	movf	indf2,w,c
 18538                           
 18539                           ; Switch size 1, requested type "space"
 18540                           ; Number of cases is 2, Range of values is 0 to 1
 18541                           ; switch strategies available:
 18542                           ; Name         Instructions Cycles
 18543                           ; simple_byte            7     4 (average)
 18544                           ;	Chosen strategy is simple_byte
 18545  015472  0A00               	xorlw	0	; case 0
 18546  015474  B4D8               	btfsc	status,2,c
 18547  015476  D7CF               	goto	l679
 18548  015478  0A01               	xorlw	1	; case 1
 18549  01547A  A4D8               	btfss	status,2,c
 18550  01547C  0012               	return	
 18551  01547E  D7DE               	goto	l684
 18552  015480                     __end_of_SPI_Send:
 18553                           	opt stack 0
 18554                           tosu	equ	0xFFF
 18555                           tosh	equ	0xFFE
 18556                           tosl	equ	0xFFD
 18557                           pclath	equ	0xFFA
 18558                           tblptru	equ	0xFF8
 18559                           tblptrh	equ	0xFF7
 18560                           tblptrl	equ	0xFF6
 18561                           tablat	equ	0xFF5
 18562                           prodh	equ	0xFF4
 18563                           prodl	equ	0xFF3
 18564                           intcon	equ	0xFF2
 18565                           postinc0	equ	0xFEE
 18566                           wreg	equ	0xFE8
 18567                           indf1	equ	0xFE7
 18568                           postdec1	equ	0xFE5
 18569                           fsr1h	equ	0xFE2
 18570                           fsr1l	equ	0xFE1
 18571                           indf2	equ	0xFDF
 18572                           postinc2	equ	0xFDE
 18573                           postdec2	equ	0xFDD
 18574                           plusw2	equ	0xFDB
 18575                           fsr2h	equ	0xFDA
 18576                           fsr2l	equ	0xFD9
 18577                           status	equ	0xFD8
 18578                           
 18579 ;; *************** function _Mode_Set *****************
 18580 ;; Defined at:
 18581 ;;		line 40 in file "Library/LCD.c"
 18582 ;; Parameters:    Size  Location     Type
 18583 ;;  pMode           1    wreg     enum E6761
 18584 ;; Auto vars:     Size  Location     Type
 18585 ;;  pMode           1    0[BANK0 ] enum E6761
 18586 ;; Return value:  Size  Location     Type
 18587 ;;                  1    wreg      void 
 18588 ;; Registers used:
 18589 ;;		wreg
 18590 ;; Tracked objects:
 18591 ;;		On entry : 0/0
 18592 ;;		On exit  : 0/0
 18593 ;;		Unchanged: 0/0
 18594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18599 ;;Total ram usage:        1 bytes
 18600 ;; Hardware stack levels used:    1
 18601 ;; Hardware stack levels required when called:    7
 18602 ;; This function calls:
 18603 ;;		Nothing
 18604 ;; This function is called by:
 18605 ;;		_LCD_Write
 18606 ;; This function uses a non-reentrant model
 18607 ;;
 18608                           
 18609                           	psect	text84
 18610  0164D0                     __ptext84:
 18611                           	opt stack 0
 18612  0164D0                     _Mode_Set:
 18613                           	opt stack 18
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;incstack = 0
 18617                           ;Mode_Set@pMode stored from wreg
 18618  0164D0  0100               	movlb	0	; () banked
 18619  0164D2  6F60               	movwf	Mode_Set@pMode& (0+255),b
 18620                           
 18621                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18622  0164D4  0100               	movlb	0	; () banked
 18623  0164D6  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 18624  0164D8  D002               	bra	u8895
 18625  0164DA  9E85               	bcf	3973,7,c	;volatile
 18626  0164DC  D001               	bra	u8896
 18627  0164DE                     u8895:
 18628  0164DE  8E85               	bsf	3973,7,c	;volatile
 18629  0164E0                     u8896:
 18630  0164E0  0012               	return		;funcret
 18631  0164E2                     __end_of_Mode_Set:
 18632                           	opt stack 0
 18633                           tosu	equ	0xFFF
 18634                           tosh	equ	0xFFE
 18635                           tosl	equ	0xFFD
 18636                           pclath	equ	0xFFA
 18637                           tblptru	equ	0xFF8
 18638                           tblptrh	equ	0xFF7
 18639                           tblptrl	equ	0xFF6
 18640                           tablat	equ	0xFF5
 18641                           prodh	equ	0xFF4
 18642                           prodl	equ	0xFF3
 18643                           intcon	equ	0xFF2
 18644                           postinc0	equ	0xFEE
 18645                           wreg	equ	0xFE8
 18646                           indf1	equ	0xFE7
 18647                           postdec1	equ	0xFE5
 18648                           fsr1h	equ	0xFE2
 18649                           fsr1l	equ	0xFE1
 18650                           indf2	equ	0xFDF
 18651                           postinc2	equ	0xFDE
 18652                           postdec2	equ	0xFDD
 18653                           plusw2	equ	0xFDB
 18654                           fsr2h	equ	0xFDA
 18655                           fsr2l	equ	0xFD9
 18656                           status	equ	0xFD8
 18657                           
 18658 ;; *************** function _Configure_GPIOs *****************
 18659 ;; Defined at:
 18660 ;;		line 46 in file "Library/LCD.c"
 18661 ;; Parameters:    Size  Location     Type
 18662 ;;		None
 18663 ;; Auto vars:     Size  Location     Type
 18664 ;;		None
 18665 ;; Return value:  Size  Location     Type
 18666 ;;                  1    wreg      void 
 18667 ;; Registers used:
 18668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18669 ;; Tracked objects:
 18670 ;;		On entry : 0/0
 18671 ;;		On exit  : 0/0
 18672 ;;		Unchanged: 0/0
 18673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18678 ;;Total ram usage:        0 bytes
 18679 ;; Hardware stack levels used:    1
 18680 ;; Hardware stack levels required when called:   14
 18681 ;; This function calls:
 18682 ;;		_LCD_Reset
 18683 ;;		_Port_SetPinType
 18684 ;;		_SPI_Init
 18685 ;;		_SPI_MaxSpeed
 18686 ;; This function is called by:
 18687 ;;		_LCD_Init
 18688 ;; This function uses a non-reentrant model
 18689 ;;
 18690                           
 18691                           	psect	text85
 18692  0153A4                     __ptext85:
 18693                           	opt stack 0
 18694  0153A4                     _Configure_GPIOs:
 18695                           	opt stack 14
 18696                           
 18697                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 18698                           
 18699                           ;incstack = 0
 18700  0153A4  0EB5               	movlw	low _PortF
 18701  0153A6  0100               	movlb	0	; () banked
 18702  0153A8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18703  0153AA  0E03               	movlw	high _PortF
 18704  0153AC  0100               	movlb	0	; () banked
 18705  0153AE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18706  0153B0  0E07               	movlw	7
 18707  0153B2  0100               	movlb	0	; () banked
 18708  0153B4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18709  0153B6  0E03               	movlw	3
 18710  0153B8  0100               	movlb	0	; () banked
 18711  0153BA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18712  0153BC  EC4F  F093         	call	_Port_SetPinType	;wreg free
 18713                           
 18714                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 18715  0153C0  0EB5               	movlw	low _PortF
 18716  0153C2  0100               	movlb	0	; () banked
 18717  0153C4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18718  0153C6  0E03               	movlw	high _PortF
 18719  0153C8  0100               	movlb	0	; () banked
 18720  0153CA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18721  0153CC  0E06               	movlw	6
 18722  0153CE  0100               	movlb	0	; () banked
 18723  0153D0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18724  0153D2  0E03               	movlw	3
 18725  0153D4  0100               	movlb	0	; () banked
 18726  0153D6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18727  0153D8  EC4F  F093         	call	_Port_SetPinType	;wreg free
 18728                           
 18729                           ;LCD.c: 55: LCD_Reset();
 18730  0153DC  EC13  F0AD         	call	_LCD_Reset	;wreg free
 18731                           
 18732                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 18733  0153E0  0EC0               	movlw	192
 18734  0153E2  0100               	movlb	0	; () banked
 18735  0153E4  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 18736  0153E6  0EC6               	movlw	198
 18737  0153E8  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18738  0153EA  0E2D               	movlw	45
 18739  0153EC  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18740  0153EE  0E00               	movlw	0
 18741  0153F0  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18742  0153F2  0E01               	movlw	1
 18743  0153F4  0100               	movlb	0	; () banked
 18744  0153F6  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 18745  0153F8  0E01               	movlw	1
 18746  0153FA  0100               	movlb	0	; () banked
 18747  0153FC  6F92               	movwf	SPI_Init@pMode& (0+255),b
 18748  0153FE  EC53  F082         	call	_SPI_Init	;wreg free
 18749                           
 18750                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 18751  015402  0E6E               	movlw	low _SPI2
 18752  015404  0100               	movlb	0	; () banked
 18753  015406  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 18754  015408  0E03               	movlw	high _SPI2
 18755  01540A  0100               	movlb	0	; () banked
 18756  01540C  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 18757  01540E  EC24  F0A9         	call	_SPI_MaxSpeed	;wreg free
 18758  015412  0012               	return		;funcret
 18759  015414                     __end_of_Configure_GPIOs:
 18760                           	opt stack 0
 18761                           tosu	equ	0xFFF
 18762                           tosh	equ	0xFFE
 18763                           tosl	equ	0xFFD
 18764                           pclath	equ	0xFFA
 18765                           tblptru	equ	0xFF8
 18766                           tblptrh	equ	0xFF7
 18767                           tblptrl	equ	0xFF6
 18768                           tablat	equ	0xFF5
 18769                           prodh	equ	0xFF4
 18770                           prodl	equ	0xFF3
 18771                           intcon	equ	0xFF2
 18772                           postinc0	equ	0xFEE
 18773                           wreg	equ	0xFE8
 18774                           indf1	equ	0xFE7
 18775                           postdec1	equ	0xFE5
 18776                           fsr1h	equ	0xFE2
 18777                           fsr1l	equ	0xFE1
 18778                           indf2	equ	0xFDF
 18779                           postinc2	equ	0xFDE
 18780                           postdec2	equ	0xFDD
 18781                           plusw2	equ	0xFDB
 18782                           fsr2h	equ	0xFDA
 18783                           fsr2l	equ	0xFD9
 18784                           status	equ	0xFD8
 18785                           
 18786 ;; *************** function _SPI_MaxSpeed *****************
 18787 ;; Defined at:
 18788 ;;		line 201 in file "Library/SPI.c"
 18789 ;; Parameters:    Size  Location     Type
 18790 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18791 ;;		 -> SPI2(11), 
 18792 ;; Auto vars:     Size  Location     Type
 18793 ;;		None
 18794 ;; Return value:  Size  Location     Type
 18795 ;;                  1    wreg      void 
 18796 ;; Registers used:
 18797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18798 ;; Tracked objects:
 18799 ;;		On entry : 0/0
 18800 ;;		On exit  : 0/0
 18801 ;;		Unchanged: 0/0
 18802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18803 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18807 ;;Total ram usage:        2 bytes
 18808 ;; Hardware stack levels used:    1
 18809 ;; Hardware stack levels required when called:    9
 18810 ;; This function calls:
 18811 ;;		_Byte_SetBit
 18812 ;;		_Byte_SetQuad
 18813 ;; This function is called by:
 18814 ;;		_Configure_GPIOs
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           	psect	text86
 18819  015248                     __ptext86:
 18820                           	opt stack 0
 18821  015248                     _SPI_MaxSpeed:
 18822                           	opt stack 18
 18823                           
 18824                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18825                           
 18826                           ;incstack = 0
 18827  015248  0100               	movlb	0	; () banked
 18828  01524A  EE20 F006          	lfsr	2,6
 18829  01524E  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18830  015250  26D9               	addwf	fsr2l,f,c
 18831  015252  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18832  015254  22DA               	addwfc	fsr2h,f,c
 18833  015256  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18834  01525A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18835  01525E  0E05               	movlw	5
 18836  015260  0100               	movlb	0	; () banked
 18837  015262  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 18838  015264  0E00               	movlw	0
 18839  015266  0100               	movlb	0	; () banked
 18840  015268  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18841  01526A  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 18842                           
 18843                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 18844  01526E  0100               	movlb	0	; () banked
 18845  015270  EE20 F006          	lfsr	2,6
 18846  015274  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18847  015276  26D9               	addwf	fsr2l,f,c
 18848  015278  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18849  01527A  22DA               	addwfc	fsr2h,f,c
 18850  01527C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18851  015280  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18852  015284  0E00               	movlw	0
 18853  015286  0100               	movlb	0	; () banked
 18854  015288  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18855  01528A  0E00               	movlw	0
 18856  01528C  0100               	movlb	0	; () banked
 18857  01528E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18858  015290  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 18859                           
 18860                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18861  015294  0100               	movlb	0	; () banked
 18862  015296  EE20 F006          	lfsr	2,6
 18863  01529A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18864  01529C  26D9               	addwf	fsr2l,f,c
 18865  01529E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18866  0152A0  22DA               	addwfc	fsr2h,f,c
 18867  0152A2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18868  0152A6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18869  0152AA  0E05               	movlw	5
 18870  0152AC  0100               	movlb	0	; () banked
 18871  0152AE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 18872  0152B0  0E01               	movlw	1
 18873  0152B2  0100               	movlb	0	; () banked
 18874  0152B4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18875  0152B6  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 18876  0152BA  0012               	return		;funcret
 18877  0152BC                     __end_of_SPI_MaxSpeed:
 18878                           	opt stack 0
 18879                           tosu	equ	0xFFF
 18880                           tosh	equ	0xFFE
 18881                           tosl	equ	0xFFD
 18882                           pclath	equ	0xFFA
 18883                           tblptru	equ	0xFF8
 18884                           tblptrh	equ	0xFF7
 18885                           tblptrl	equ	0xFF6
 18886                           tablat	equ	0xFF5
 18887                           prodh	equ	0xFF4
 18888                           prodl	equ	0xFF3
 18889                           intcon	equ	0xFF2
 18890                           postinc0	equ	0xFEE
 18891                           wreg	equ	0xFE8
 18892                           indf1	equ	0xFE7
 18893                           postdec1	equ	0xFE5
 18894                           fsr1h	equ	0xFE2
 18895                           fsr1l	equ	0xFE1
 18896                           indf2	equ	0xFDF
 18897                           postinc2	equ	0xFDE
 18898                           postdec2	equ	0xFDD
 18899                           plusw2	equ	0xFDB
 18900                           fsr2h	equ	0xFDA
 18901                           fsr2l	equ	0xFD9
 18902                           status	equ	0xFD8
 18903                           
 18904 ;; *************** function _LCD_Reset *****************
 18905 ;; Defined at:
 18906 ;;		line 95 in file "Library/LCD.c"
 18907 ;; Parameters:    Size  Location     Type
 18908 ;;		None
 18909 ;; Auto vars:     Size  Location     Type
 18910 ;;		None
 18911 ;; Return value:  Size  Location     Type
 18912 ;;                  1    wreg      void 
 18913 ;; Registers used:
 18914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18915 ;; Tracked objects:
 18916 ;;		On entry : 0/0
 18917 ;;		On exit  : 0/0
 18918 ;;		Unchanged: 0/0
 18919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18924 ;;Total ram usage:        0 bytes
 18925 ;; Hardware stack levels used:    1
 18926 ;; Hardware stack levels required when called:   13
 18927 ;; This function calls:
 18928 ;;		_LED_Toggle
 18929 ;;		_Reset_High
 18930 ;;		_Reset_Low
 18931 ;;		_delay_ms
 18932 ;; This function is called by:
 18933 ;;		_Configure_GPIOs
 18934 ;; This function uses a non-reentrant model
 18935 ;;
 18936                           
 18937                           	psect	text87
 18938  015A26                     __ptext87:
 18939                           	opt stack 0
 18940  015A26                     _LCD_Reset:
 18941                           	opt stack 14
 18942                           
 18943                           ;LCD.c: 97: Reset_High();
 18944                           
 18945                           ;incstack = 0
 18946  015A26  EC61  F0B1         	call	_Reset_High	;wreg free
 18947                           
 18948                           ;LCD.c: 98: LED_Toggle(eLED2);
 18949  015A2A  0E01               	movlw	1
 18950  015A2C  ECCE  F0AD         	call	_LED_Toggle
 18951                           
 18952                           ;LCD.c: 99: delay_ms(0x80);
 18953  015A30  0E00               	movlw	0
 18954  015A32  0100               	movlb	0	; () banked
 18955  015A34  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18956  015A36  0E80               	movlw	128
 18957  015A38  6F60               	movwf	delay_ms@ms& (0+255),b
 18958  015A3A  ECAB  F0AA         	call	_delay_ms	;wreg free
 18959                           
 18960                           ;LCD.c: 100: LED_Toggle(eLED2);
 18961  015A3E  0E01               	movlw	1
 18962  015A40  ECCE  F0AD         	call	_LED_Toggle
 18963                           
 18964                           ;LCD.c: 101: Reset_Low();
 18965  015A44  EC52  F0B1         	call	_Reset_Low	;wreg free
 18966                           
 18967                           ;LCD.c: 102: delay_ms(0x80);
 18968  015A48  0E00               	movlw	0
 18969  015A4A  0100               	movlb	0	; () banked
 18970  015A4C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18971  015A4E  0E80               	movlw	128
 18972  015A50  6F60               	movwf	delay_ms@ms& (0+255),b
 18973  015A52  ECAB  F0AA         	call	_delay_ms	;wreg free
 18974                           
 18975                           ;LCD.c: 103: LED_Toggle(eLED2);
 18976  015A56  0E01               	movlw	1
 18977  015A58  ECCE  F0AD         	call	_LED_Toggle
 18978                           
 18979                           ;LCD.c: 104: Reset_High();
 18980  015A5C  EC61  F0B1         	call	_Reset_High	;wreg free
 18981                           
 18982                           ;LCD.c: 105: delay_ms(0x80);
 18983  015A60  0E00               	movlw	0
 18984  015A62  0100               	movlb	0	; () banked
 18985  015A64  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18986  015A66  0E80               	movlw	128
 18987  015A68  6F60               	movwf	delay_ms@ms& (0+255),b
 18988  015A6A  ECAB  F0AA         	call	_delay_ms	;wreg free
 18989                           
 18990                           ;LCD.c: 106: LED_Toggle(eLED2);
 18991  015A6E  0E01               	movlw	1
 18992  015A70  ECCE  F0AD         	call	_LED_Toggle
 18993  015A74  0012               	return		;funcret
 18994  015A76                     __end_of_LCD_Reset:
 18995                           	opt stack 0
 18996                           tosu	equ	0xFFF
 18997                           tosh	equ	0xFFE
 18998                           tosl	equ	0xFFD
 18999                           pclath	equ	0xFFA
 19000                           tblptru	equ	0xFF8
 19001                           tblptrh	equ	0xFF7
 19002                           tblptrl	equ	0xFF6
 19003                           tablat	equ	0xFF5
 19004                           prodh	equ	0xFF4
 19005                           prodl	equ	0xFF3
 19006                           intcon	equ	0xFF2
 19007                           postinc0	equ	0xFEE
 19008                           wreg	equ	0xFE8
 19009                           indf1	equ	0xFE7
 19010                           postdec1	equ	0xFE5
 19011                           fsr1h	equ	0xFE2
 19012                           fsr1l	equ	0xFE1
 19013                           indf2	equ	0xFDF
 19014                           postinc2	equ	0xFDE
 19015                           postdec2	equ	0xFDD
 19016                           plusw2	equ	0xFDB
 19017                           fsr2h	equ	0xFDA
 19018                           fsr2l	equ	0xFD9
 19019                           status	equ	0xFD8
 19020                           
 19021 ;; *************** function _delay_ms *****************
 19022 ;; Defined at:
 19023 ;;		line 240 in file "Library/Types.c"
 19024 ;; Parameters:    Size  Location     Type
 19025 ;;  ms              2    0[BANK0 ] unsigned short 
 19026 ;; Auto vars:     Size  Location     Type
 19027 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19028 ;; Return value:  Size  Location     Type
 19029 ;;                  1    wreg      void 
 19030 ;; Registers used:
 19031 ;;		wreg, status,2, status,0
 19032 ;; Tracked objects:
 19033 ;;		On entry : 0/0
 19034 ;;		On exit  : 0/0
 19035 ;;		Unchanged: 0/0
 19036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19037 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19040 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19041 ;;Total ram usage:        6 bytes
 19042 ;; Hardware stack levels used:    1
 19043 ;; Hardware stack levels required when called:    7
 19044 ;; This function calls:
 19045 ;;		Nothing
 19046 ;; This function is called by:
 19047 ;;		_LCD_Reset
 19048 ;;		_LCD_Init
 19049 ;;		_MXK_Init
 19050 ;;		_init
 19051 ;; This function uses a non-reentrant model
 19052 ;;
 19053                           
 19054                           	psect	text88
 19055  015556                     __ptext88:
 19056                           	opt stack 0
 19057  015556                     _delay_ms:
 19058                           	opt stack 22
 19059                           
 19060                           ;Types.c: 242: volatile unsigned long u;
 19061                           ;Types.c: 243: while (ms--)
 19062                           
 19063                           ;incstack = 0
 19064  015556  D01F               	goto	u9210
 19065  015558                     l12503:
 19066                           
 19067                           ;Types.c: 244: {
 19068                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19069  015558  0E00               	movlw	0
 19070  01555A  0100               	movlb	0	; () banked
 19071  01555C  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19072  01555E  0E00               	movlw	0
 19073  015560  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19074  015562  0E00               	movlw	0
 19075  015564  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19076  015566  0E00               	movlw	0
 19077  015568  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19078  01556A                     l12505:
 19079                           
 19080                           ; BSR set to: 0
 19081  01556A  0100               	movlb	0	; () banked
 19082  01556C  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19083  01556E  0100               	movlb	0	; () banked
 19084  015570  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19085  015572  E111               	bnz	l12511
 19086  015574  0EB0               	movlw	176
 19087  015576  0100               	movlb	0	; () banked
 19088  015578  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19089  01557A  0E04               	movlw	4
 19090  01557C  0100               	movlb	0	; () banked
 19091  01557E  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19092  015580  B0D8               	btfsc	status,0,c
 19093  015582  D009               	goto	u9210
 19094                           
 19095                           ; BSR set to: 0
 19096                           
 19097                           ; BSR set to: 0
 19098  015584  F000               	nop		; ;# 
 19099  015586  0E01               	movlw	1
 19100  015588  0100               	movlb	0	; () banked
 19101  01558A  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19102  01558C  0E00               	movlw	0
 19103  01558E  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19104  015590  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19105  015592  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19106  015594  D7EA               	goto	l12505
 19107  015596                     u9210:
 19108  015596                     l12511:
 19109  015596  0100               	movlb	0	; () banked
 19110  015598  0760               	decf	delay_ms@ms& (0+255),f,b
 19111  01559A  A0D8               	btfss	status,0,c
 19112  01559C  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19113  01559E  0100               	movlb	0	; () banked
 19114  0155A0  2960               	incf	delay_ms@ms& (0+255),w,b
 19115  0155A2  E1DA               	bnz	l12503
 19116  0155A4  0100               	movlb	0	; () banked
 19117  0155A6  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19118  0155A8  A4D8               	btfss	status,2,c
 19119  0155AA  D7D6               	goto	l824
 19120                           
 19121                           ; BSR set to: 0
 19122                           ;Types.c: 251: }
 19123                           ;Types.c: 252: }
 19124                           ;Types.c: 253: u = 0x8008;
 19125                           
 19126                           ; BSR set to: 0
 19127  0155AC  0E08               	movlw	8
 19128  0155AE  0100               	movlb	0	; () banked
 19129  0155B0  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19130  0155B2  0E80               	movlw	128
 19131  0155B4  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19132  0155B6  0E00               	movlw	0
 19133  0155B8  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19134  0155BA  0E00               	movlw	0
 19135  0155BC  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19136                           
 19137                           ; BSR set to: 0
 19138  0155BE  0012               	return		;funcret
 19139  0155C0                     __end_of_delay_ms:
 19140                           	opt stack 0
 19141                           tosu	equ	0xFFF
 19142                           tosh	equ	0xFFE
 19143                           tosl	equ	0xFFD
 19144                           pclath	equ	0xFFA
 19145                           tblptru	equ	0xFF8
 19146                           tblptrh	equ	0xFF7
 19147                           tblptrl	equ	0xFF6
 19148                           tablat	equ	0xFF5
 19149                           prodh	equ	0xFF4
 19150                           prodl	equ	0xFF3
 19151                           intcon	equ	0xFF2
 19152                           postinc0	equ	0xFEE
 19153                           wreg	equ	0xFE8
 19154                           indf1	equ	0xFE7
 19155                           postdec1	equ	0xFE5
 19156                           fsr1h	equ	0xFE2
 19157                           fsr1l	equ	0xFE1
 19158                           indf2	equ	0xFDF
 19159                           postinc2	equ	0xFDE
 19160                           postdec2	equ	0xFDD
 19161                           plusw2	equ	0xFDB
 19162                           fsr2h	equ	0xFDA
 19163                           fsr2l	equ	0xFD9
 19164                           status	equ	0xFD8
 19165                           
 19166 ;; *************** function _Reset_Low *****************
 19167 ;; Defined at:
 19168 ;;		line 32 in file "Library/LCD.c"
 19169 ;; Parameters:    Size  Location     Type
 19170 ;;		None
 19171 ;; Auto vars:     Size  Location     Type
 19172 ;;		None
 19173 ;; Return value:  Size  Location     Type
 19174 ;;                  1    wreg      void 
 19175 ;; Registers used:
 19176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19177 ;; Tracked objects:
 19178 ;;		On entry : 0/0
 19179 ;;		On exit  : 0/0
 19180 ;;		Unchanged: 0/0
 19181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19186 ;;Total ram usage:        0 bytes
 19187 ;; Hardware stack levels used:    1
 19188 ;; Hardware stack levels required when called:   11
 19189 ;; This function calls:
 19190 ;;		_Port_SetPin
 19191 ;; This function is called by:
 19192 ;;		_LCD_Reset
 19193 ;; This function uses a non-reentrant model
 19194 ;;
 19195                           
 19196                           	psect	text89
 19197  0162A4                     __ptext89:
 19198                           	opt stack 0
 19199  0162A4                     _Reset_Low:
 19200                           	opt stack 15
 19201                           
 19202                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;incstack = 0
 19206  0162A4  0EB5               	movlw	low _PortF
 19207  0162A6  0100               	movlb	0	; () banked
 19208  0162A8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19209  0162AA  0E03               	movlw	high _PortF
 19210  0162AC  0100               	movlb	0	; () banked
 19211  0162AE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19212  0162B0  0E06               	movlw	6
 19213  0162B2  0100               	movlb	0	; () banked
 19214  0162B4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19215  0162B6  0E01               	movlw	1
 19216  0162B8  0100               	movlb	0	; () banked
 19217  0162BA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19218  0162BC  EC49  F09F         	call	_Port_SetPin	;wreg free
 19219  0162C0  0012               	return		;funcret
 19220  0162C2                     __end_of_Reset_Low:
 19221                           	opt stack 0
 19222                           tosu	equ	0xFFF
 19223                           tosh	equ	0xFFE
 19224                           tosl	equ	0xFFD
 19225                           pclath	equ	0xFFA
 19226                           tblptru	equ	0xFF8
 19227                           tblptrh	equ	0xFF7
 19228                           tblptrl	equ	0xFF6
 19229                           tablat	equ	0xFF5
 19230                           prodh	equ	0xFF4
 19231                           prodl	equ	0xFF3
 19232                           intcon	equ	0xFF2
 19233                           postinc0	equ	0xFEE
 19234                           wreg	equ	0xFE8
 19235                           indf1	equ	0xFE7
 19236                           postdec1	equ	0xFE5
 19237                           fsr1h	equ	0xFE2
 19238                           fsr1l	equ	0xFE1
 19239                           indf2	equ	0xFDF
 19240                           postinc2	equ	0xFDE
 19241                           postdec2	equ	0xFDD
 19242                           plusw2	equ	0xFDB
 19243                           fsr2h	equ	0xFDA
 19244                           fsr2l	equ	0xFD9
 19245                           status	equ	0xFD8
 19246                           
 19247 ;; *************** function _Reset_High *****************
 19248 ;; Defined at:
 19249 ;;		line 36 in file "Library/LCD.c"
 19250 ;; Parameters:    Size  Location     Type
 19251 ;;		None
 19252 ;; Auto vars:     Size  Location     Type
 19253 ;;		None
 19254 ;; Return value:  Size  Location     Type
 19255 ;;                  1    wreg      void 
 19256 ;; Registers used:
 19257 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19258 ;; Tracked objects:
 19259 ;;		On entry : 0/0
 19260 ;;		On exit  : 0/0
 19261 ;;		Unchanged: 0/0
 19262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19267 ;;Total ram usage:        0 bytes
 19268 ;; Hardware stack levels used:    1
 19269 ;; Hardware stack levels required when called:   11
 19270 ;; This function calls:
 19271 ;;		_Port_SetPin
 19272 ;; This function is called by:
 19273 ;;		_LCD_Reset
 19274 ;; This function uses a non-reentrant model
 19275 ;;
 19276                           
 19277                           	psect	text90
 19278  0162C2                     __ptext90:
 19279                           	opt stack 0
 19280  0162C2                     _Reset_High:
 19281                           	opt stack 15
 19282                           
 19283                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19284                           
 19285                           ;incstack = 0
 19286  0162C2  0EB5               	movlw	low _PortF
 19287  0162C4  0100               	movlb	0	; () banked
 19288  0162C6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19289  0162C8  0E03               	movlw	high _PortF
 19290  0162CA  0100               	movlb	0	; () banked
 19291  0162CC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19292  0162CE  0E06               	movlw	6
 19293  0162D0  0100               	movlb	0	; () banked
 19294  0162D2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19295  0162D4  0E00               	movlw	0
 19296  0162D6  0100               	movlb	0	; () banked
 19297  0162D8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19298  0162DA  EC49  F09F         	call	_Port_SetPin	;wreg free
 19299  0162DE  0012               	return		;funcret
 19300  0162E0                     __end_of_Reset_High:
 19301                           	opt stack 0
 19302                           tosu	equ	0xFFF
 19303                           tosh	equ	0xFFE
 19304                           tosl	equ	0xFFD
 19305                           pclath	equ	0xFFA
 19306                           tblptru	equ	0xFF8
 19307                           tblptrh	equ	0xFF7
 19308                           tblptrl	equ	0xFF6
 19309                           tablat	equ	0xFF5
 19310                           prodh	equ	0xFF4
 19311                           prodl	equ	0xFF3
 19312                           intcon	equ	0xFF2
 19313                           postinc0	equ	0xFEE
 19314                           wreg	equ	0xFE8
 19315                           indf1	equ	0xFE7
 19316                           postdec1	equ	0xFE5
 19317                           fsr1h	equ	0xFE2
 19318                           fsr1l	equ	0xFE1
 19319                           indf2	equ	0xFDF
 19320                           postinc2	equ	0xFDE
 19321                           postdec2	equ	0xFDD
 19322                           plusw2	equ	0xFDB
 19323                           fsr2h	equ	0xFDA
 19324                           fsr2l	equ	0xFD9
 19325                           status	equ	0xFD8
 19326                           
 19327 ;; *************** function _ISR_Enable *****************
 19328 ;; Defined at:
 19329 ;;		line 27 in file "Library/ISR.c"
 19330 ;; Parameters:    Size  Location     Type
 19331 ;;		None
 19332 ;; Auto vars:     Size  Location     Type
 19333 ;;		None
 19334 ;; Return value:  Size  Location     Type
 19335 ;;                  1    wreg      void 
 19336 ;; Registers used:
 19337 ;;		None
 19338 ;; Tracked objects:
 19339 ;;		On entry : 0/0
 19340 ;;		On exit  : 0/0
 19341 ;;		Unchanged: 0/0
 19342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19347 ;;Total ram usage:        0 bytes
 19348 ;; Hardware stack levels used:    1
 19349 ;; Hardware stack levels required when called:    7
 19350 ;; This function calls:
 19351 ;;		Nothing
 19352 ;; This function is called by:
 19353 ;;		_init
 19354 ;; This function uses a non-reentrant model
 19355 ;;
 19356                           
 19357                           	psect	text91
 19358  016570                     __ptext91:
 19359                           	opt stack 0
 19360  016570                     _ISR_Enable:
 19361                           	opt stack 22
 19362                           
 19363                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19364                           
 19365                           ;incstack = 0
 19366  016570  8CF2               	bsf	intcon,6,c	;volatile
 19367                           
 19368                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19369  016572  8EF2               	bsf	intcon,7,c	;volatile
 19370                           
 19371                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19372  016574  88F2               	bsf	intcon,4,c	;volatile
 19373                           
 19374                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19375  016576  92F2               	bcf	intcon,1,c	;volatile
 19376  016578  0012               	return		;funcret
 19377  01657A                     __end_of_ISR_Enable:
 19378                           	opt stack 0
 19379                           tosu	equ	0xFFF
 19380                           tosh	equ	0xFFE
 19381                           tosl	equ	0xFFD
 19382                           pclath	equ	0xFFA
 19383                           tblptru	equ	0xFF8
 19384                           tblptrh	equ	0xFF7
 19385                           tblptrl	equ	0xFF6
 19386                           tablat	equ	0xFF5
 19387                           prodh	equ	0xFF4
 19388                           prodl	equ	0xFF3
 19389                           intcon	equ	0xFF2
 19390                           postinc0	equ	0xFEE
 19391                           wreg	equ	0xFE8
 19392                           indf1	equ	0xFE7
 19393                           postdec1	equ	0xFE5
 19394                           fsr1h	equ	0xFE2
 19395                           fsr1l	equ	0xFE1
 19396                           indf2	equ	0xFDF
 19397                           postinc2	equ	0xFDE
 19398                           postdec2	equ	0xFDD
 19399                           plusw2	equ	0xFDB
 19400                           fsr2h	equ	0xFDA
 19401                           fsr2l	equ	0xFD9
 19402                           status	equ	0xFD8
 19403                           
 19404 ;; *************** function _HMI_Init *****************
 19405 ;; Defined at:
 19406 ;;		line 104 in file "HMI.c"
 19407 ;; Parameters:    Size  Location     Type
 19408 ;;		None
 19409 ;; Auto vars:     Size  Location     Type
 19410 ;;  in              2   72[BANK0 ] unsigned short 
 19411 ;; Return value:  Size  Location     Type
 19412 ;;                  1    wreg      void 
 19413 ;; Registers used:
 19414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19415 ;; Tracked objects:
 19416 ;;		On entry : 0/0
 19417 ;;		On exit  : 0/0
 19418 ;;		Unchanged: 0/0
 19419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19424 ;;Total ram usage:        2 bytes
 19425 ;; Hardware stack levels used:    1
 19426 ;; Hardware stack levels required when called:   16
 19427 ;; This function calls:
 19428 ;;		_Button_Init
 19429 ;;		_SPI_Init
 19430 ;;		_SPI_MinSpeed
 19431 ;; This function is called by:
 19432 ;;		_init
 19433 ;; This function uses a non-reentrant model
 19434 ;;
 19435                           
 19436                           	psect	text92
 19437  012114                     __ptext92:
 19438                           	opt stack 0
 19439  012114                     _HMI_Init:
 19440                           	opt stack 13
 19441                           
 19442                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19443                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19444                           
 19445                           ;incstack = 0
 19446  012114  0E59               	movlw	low (_HMIBoard+48)
 19447  012116  0100               	movlb	0	; () banked
 19448  012118  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19449  01211A  0E03               	movlw	high (_HMIBoard+48)
 19450  01211C  0100               	movlb	0	; () banked
 19451  01211E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19452  012120  0E00               	movlw	0
 19453  012122  0100               	movlb	0	; () banked
 19454  012124  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19455  012126  0E02               	movlw	2
 19456  012128  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19457  01212A  0EAA               	movlw	low _HMI_InitButtons
 19458  01212C  0100               	movlb	0	; () banked
 19459  01212E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19460  012130  0E65               	movlw	high _HMI_InitButtons
 19461  012132  0100               	movlb	0	; () banked
 19462  012134  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19463  012136  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19464  012138  0100               	movlb	0	; () banked
 19465  01213A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19466  01213C  0EF4               	movlw	low _HMI_DIPSwitch
 19467  01213E  0100               	movlb	0	; () banked
 19468  012140  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19469  012142  0E63               	movlw	high _HMI_DIPSwitch
 19470  012144  0100               	movlb	0	; () banked
 19471  012146  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19472  012148  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19473  01214A  0100               	movlb	0	; () banked
 19474  01214C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19475  01214E  0E04               	movlw	low _Event_NULL
 19476  012150  0100               	movlb	0	; () banked
 19477  012152  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19478  012154  0E14               	movlw	high _Event_NULL
 19479  012156  0100               	movlb	0	; () banked
 19480  012158  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19481  01215A  0E00               	movlw	low (_Event_NULL shr (0+16))
 19482  01215C  0100               	movlb	0	; () banked
 19483  01215E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19484  012160  EC77  F09E         	call	_Button_Init	;wreg free
 19485                           
 19486                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19487                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19488  012164  0E3B               	movlw	low (_HMIBoard+18)
 19489  012166  0100               	movlb	0	; () banked
 19490  012168  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19491  01216A  0E03               	movlw	high (_HMIBoard+18)
 19492  01216C  0100               	movlb	0	; () banked
 19493  01216E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19494  012170  0E00               	movlw	0
 19495  012172  0100               	movlb	0	; () banked
 19496  012174  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19497  012176  0E02               	movlw	2
 19498  012178  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19499  01217A  0EAA               	movlw	low _HMI_InitButtons
 19500  01217C  0100               	movlb	0	; () banked
 19501  01217E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19502  012180  0E65               	movlw	high _HMI_InitButtons
 19503  012182  0100               	movlb	0	; () banked
 19504  012184  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19505  012186  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19506  012188  0100               	movlb	0	; () banked
 19507  01218A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19508  01218C  0E54               	movlw	low _HMI_LeftSwitch
 19509  01218E  0100               	movlb	0	; () banked
 19510  012190  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19511  012192  0E64               	movlw	high _HMI_LeftSwitch
 19512  012194  0100               	movlb	0	; () banked
 19513  012196  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19514  012198  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19515  01219A  0100               	movlb	0	; () banked
 19516  01219C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19517  01219E  0E04               	movlw	low _Event_NULL
 19518  0121A0  0100               	movlb	0	; () banked
 19519  0121A2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19520  0121A4  0E14               	movlw	high _Event_NULL
 19521  0121A6  0100               	movlb	0	; () banked
 19522  0121A8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19523  0121AA  0E00               	movlw	low (_Event_NULL shr (0+16))
 19524  0121AC  0100               	movlb	0	; () banked
 19525  0121AE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19526  0121B0  EC77  F09E         	call	_Button_Init	;wreg free
 19527                           
 19528                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19529                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19530  0121B4  0E31               	movlw	low (_HMIBoard+8)
 19531  0121B6  0100               	movlb	0	; () banked
 19532  0121B8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19533  0121BA  0E03               	movlw	high (_HMIBoard+8)
 19534  0121BC  0100               	movlb	0	; () banked
 19535  0121BE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19536  0121C0  0E00               	movlw	0
 19537  0121C2  0100               	movlb	0	; () banked
 19538  0121C4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19539  0121C6  0E02               	movlw	2
 19540  0121C8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19541  0121CA  0EAA               	movlw	low _HMI_InitButtons
 19542  0121CC  0100               	movlb	0	; () banked
 19543  0121CE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19544  0121D0  0E65               	movlw	high _HMI_InitButtons
 19545  0121D2  0100               	movlb	0	; () banked
 19546  0121D4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19547  0121D6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19548  0121D8  0100               	movlb	0	; () banked
 19549  0121DA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19550  0121DC  0E3C               	movlw	low _HMI_RightSwitch
 19551  0121DE  0100               	movlb	0	; () banked
 19552  0121E0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19553  0121E2  0E64               	movlw	high _HMI_RightSwitch
 19554  0121E4  0100               	movlb	0	; () banked
 19555  0121E6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19556  0121E8  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19557  0121EA  0100               	movlb	0	; () banked
 19558  0121EC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19559  0121EE  0E04               	movlw	low _Event_NULL
 19560  0121F0  0100               	movlb	0	; () banked
 19561  0121F2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19562  0121F4  0E14               	movlw	high _Event_NULL
 19563  0121F6  0100               	movlb	0	; () banked
 19564  0121F8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19565  0121FA  0E00               	movlw	low (_Event_NULL shr (0+16))
 19566  0121FC  0100               	movlb	0	; () banked
 19567  0121FE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19568  012200  EC77  F09E         	call	_Button_Init	;wreg free
 19569                           
 19570                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19571                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19572  012204  0E45               	movlw	low (_HMIBoard+28)
 19573  012206  0100               	movlb	0	; () banked
 19574  012208  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19575  01220A  0E03               	movlw	high (_HMIBoard+28)
 19576  01220C  0100               	movlb	0	; () banked
 19577  01220E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19578  012210  0E00               	movlw	0
 19579  012212  0100               	movlb	0	; () banked
 19580  012214  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19581  012216  0E02               	movlw	2
 19582  012218  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19583  01221A  0EAA               	movlw	low _HMI_InitButtons
 19584  01221C  0100               	movlb	0	; () banked
 19585  01221E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19586  012220  0E65               	movlw	high _HMI_InitButtons
 19587  012222  0100               	movlb	0	; () banked
 19588  012224  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19589  012226  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19590  012228  0100               	movlb	0	; () banked
 19591  01222A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19592  01222C  0E24               	movlw	low _HMI_UpSwitch
 19593  01222E  0100               	movlb	0	; () banked
 19594  012230  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19595  012232  0E64               	movlw	high _HMI_UpSwitch
 19596  012234  0100               	movlb	0	; () banked
 19597  012236  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19598  012238  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 19599  01223A  0100               	movlb	0	; () banked
 19600  01223C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19601  01223E  0E04               	movlw	low _Event_NULL
 19602  012240  0100               	movlb	0	; () banked
 19603  012242  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19604  012244  0E14               	movlw	high _Event_NULL
 19605  012246  0100               	movlb	0	; () banked
 19606  012248  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19607  01224A  0E00               	movlw	low (_Event_NULL shr (0+16))
 19608  01224C  0100               	movlb	0	; () banked
 19609  01224E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19610  012250  EC77  F09E         	call	_Button_Init	;wreg free
 19611                           
 19612                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 19613                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 19614  012254  0E4F               	movlw	low (_HMIBoard+38)
 19615  012256  0100               	movlb	0	; () banked
 19616  012258  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19617  01225A  0E03               	movlw	high (_HMIBoard+38)
 19618  01225C  0100               	movlb	0	; () banked
 19619  01225E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19620  012260  0E00               	movlw	0
 19621  012262  0100               	movlb	0	; () banked
 19622  012264  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19623  012266  0E02               	movlw	2
 19624  012268  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19625  01226A  0EAA               	movlw	low _HMI_InitButtons
 19626  01226C  0100               	movlb	0	; () banked
 19627  01226E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19628  012270  0E65               	movlw	high _HMI_InitButtons
 19629  012272  0100               	movlb	0	; () banked
 19630  012274  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19631  012276  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19632  012278  0100               	movlb	0	; () banked
 19633  01227A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19634  01227C  0E0C               	movlw	low _HMI_DownSwitch
 19635  01227E  0100               	movlb	0	; () banked
 19636  012280  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19637  012282  0E64               	movlw	high _HMI_DownSwitch
 19638  012284  0100               	movlb	0	; () banked
 19639  012286  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19640  012288  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 19641  01228A  0100               	movlb	0	; () banked
 19642  01228C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19643  01228E  0E04               	movlw	low _Event_NULL
 19644  012290  0100               	movlb	0	; () banked
 19645  012292  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19646  012294  0E14               	movlw	high _Event_NULL
 19647  012296  0100               	movlb	0	; () banked
 19648  012298  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19649  01229A  0E00               	movlw	low (_Event_NULL shr (0+16))
 19650  01229C  0100               	movlb	0	; () banked
 19651  01229E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19652  0122A0  EC77  F09E         	call	_Button_Init	;wreg free
 19653                           
 19654                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 19655  0122A4  0EA0               	movlw	160
 19656  0122A6  0100               	movlb	0	; () banked
 19657  0122A8  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 19658  0122AA  0E86               	movlw	134
 19659  0122AC  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19660  0122AE  0E01               	movlw	1
 19661  0122B0  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19662  0122B2  0E00               	movlw	0
 19663  0122B4  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19664  0122B6  0E00               	movlw	0
 19665  0122B8  0100               	movlb	0	; () banked
 19666  0122BA  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 19667  0122BC  0E02               	movlw	2
 19668  0122BE  0100               	movlb	0	; () banked
 19669  0122C0  6F92               	movwf	SPI_Init@pMode& (0+255),b
 19670  0122C2  EC53  F082         	call	_SPI_Init	;wreg free
 19671                           
 19672                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 19673  0122C6  0E63               	movlw	low _SPI1
 19674  0122C8  0100               	movlb	0	; () banked
 19675  0122CA  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 19676  0122CC  0E03               	movlw	high _SPI1
 19677  0122CE  0100               	movlb	0	; () banked
 19678  0122D0  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 19679  0122D2  EC5E  F0A9         	call	_SPI_MinSpeed	;wreg free
 19680                           
 19681                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 19682  0122D6  0E00               	movlw	0
 19683  0122D8  0100               	movlb	0	; () banked
 19684  0122DA  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 19685  0122DC  0E00               	movlw	0
 19686  0122DE  6FA8               	movwf	HMI_Init@in& (0+255),b
 19687  0122E0                     l14117:
 19688                           
 19689                           ; BSR set to: 0
 19690  0122E0  0100               	movlb	0	; () banked
 19691  0122E2  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 19692  0122E4  E113               	bnz	l1153
 19693  0122E6  0E08               	movlw	8
 19694  0122E8  0100               	movlb	0	; () banked
 19695  0122EA  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 19696  0122EC  B0D8               	btfsc	status,0,c
 19697  0122EE  0012               	return	
 19698                           
 19699                           ; BSR set to: 0
 19700                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 19701                           
 19702                           ; BSR set to: 0
 19703                           
 19704                           ; BSR set to: 0
 19705  0122F0  0E29               	movlw	low _HMIBoard
 19706  0122F2  0100               	movlb	0	; () banked
 19707  0122F4  25A8               	addwf	HMI_Init@in& (0+255),w,b
 19708  0122F6  6ED9               	movwf	fsr2l,c
 19709  0122F8  0E03               	movlw	high _HMIBoard
 19710  0122FA  0100               	movlb	0	; () banked
 19711  0122FC  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 19712  0122FE  6EDA               	movwf	fsr2h,c
 19713  012300  0E00               	movlw	0
 19714  012302  6EDF               	movwf	indf2,c
 19715                           
 19716                           ; BSR set to: 0
 19717  012304  0100               	movlb	0	; () banked
 19718  012306  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 19719  012308  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 19720  01230A  D7EA               	goto	l14117
 19721  01230C                     l1153:
 19722                           
 19723                           ; BSR set to: 0
 19724  01230C  0012               	return		;funcret
 19725  01230E                     __end_of_HMI_Init:
 19726                           	opt stack 0
 19727                           tosu	equ	0xFFF
 19728                           tosh	equ	0xFFE
 19729                           tosl	equ	0xFFD
 19730                           pclath	equ	0xFFA
 19731                           tblptru	equ	0xFF8
 19732                           tblptrh	equ	0xFF7
 19733                           tblptrl	equ	0xFF6
 19734                           tablat	equ	0xFF5
 19735                           prodh	equ	0xFF4
 19736                           prodl	equ	0xFF3
 19737                           intcon	equ	0xFF2
 19738                           postinc0	equ	0xFEE
 19739                           wreg	equ	0xFE8
 19740                           indf1	equ	0xFE7
 19741                           postdec1	equ	0xFE5
 19742                           fsr1h	equ	0xFE2
 19743                           fsr1l	equ	0xFE1
 19744                           indf2	equ	0xFDF
 19745                           postinc2	equ	0xFDE
 19746                           postdec2	equ	0xFDD
 19747                           plusw2	equ	0xFDB
 19748                           fsr2h	equ	0xFDA
 19749                           fsr2l	equ	0xFD9
 19750                           status	equ	0xFD8
 19751                           
 19752 ;; *************** function _SPI_MinSpeed *****************
 19753 ;; Defined at:
 19754 ;;		line 190 in file "Library/SPI.c"
 19755 ;; Parameters:    Size  Location     Type
 19756 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19757 ;;		 -> SPI1(11), 
 19758 ;; Auto vars:     Size  Location     Type
 19759 ;;		None
 19760 ;; Return value:  Size  Location     Type
 19761 ;;                  1    wreg      void 
 19762 ;; Registers used:
 19763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19764 ;; Tracked objects:
 19765 ;;		On entry : 0/0
 19766 ;;		On exit  : 0/0
 19767 ;;		Unchanged: 0/0
 19768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19769 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19773 ;;Total ram usage:        2 bytes
 19774 ;; Hardware stack levels used:    1
 19775 ;; Hardware stack levels required when called:    9
 19776 ;; This function calls:
 19777 ;;		_Byte_SetBit
 19778 ;;		_Byte_SetQuad
 19779 ;; This function is called by:
 19780 ;;		_HMI_Init
 19781 ;; This function uses a non-reentrant model
 19782 ;;
 19783                           
 19784                           	psect	text93
 19785  0152BC                     __ptext93:
 19786                           	opt stack 0
 19787  0152BC                     _SPI_MinSpeed:
 19788                           	opt stack 19
 19789                           
 19790                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19791                           
 19792                           ; BSR set to: 0
 19793                           ;incstack = 0
 19794  0152BC  0100               	movlb	0	; () banked
 19795  0152BE  EE20 F006          	lfsr	2,6
 19796  0152C2  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19797  0152C4  26D9               	addwf	fsr2l,f,c
 19798  0152C6  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19799  0152C8  22DA               	addwfc	fsr2h,f,c
 19800  0152CA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19801  0152CE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19802  0152D2  0E05               	movlw	5
 19803  0152D4  0100               	movlb	0	; () banked
 19804  0152D6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19805  0152D8  0E00               	movlw	0
 19806  0152DA  0100               	movlb	0	; () banked
 19807  0152DC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19808  0152DE  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 19809                           
 19810                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 19811  0152E2  0100               	movlb	0	; () banked
 19812  0152E4  EE20 F006          	lfsr	2,6
 19813  0152E8  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19814  0152EA  26D9               	addwf	fsr2l,f,c
 19815  0152EC  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19816  0152EE  22DA               	addwfc	fsr2h,f,c
 19817  0152F0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19818  0152F4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19819  0152F8  0E00               	movlw	0
 19820  0152FA  0100               	movlb	0	; () banked
 19821  0152FC  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19822  0152FE  0E02               	movlw	2
 19823  015300  0100               	movlb	0	; () banked
 19824  015302  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19825  015304  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 19826                           
 19827                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19828  015308  0100               	movlb	0	; () banked
 19829  01530A  EE20 F006          	lfsr	2,6
 19830  01530E  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19831  015310  26D9               	addwf	fsr2l,f,c
 19832  015312  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19833  015314  22DA               	addwfc	fsr2h,f,c
 19834  015316  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19835  01531A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19836  01531E  0E05               	movlw	5
 19837  015320  0100               	movlb	0	; () banked
 19838  015322  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19839  015324  0E01               	movlw	1
 19840  015326  0100               	movlb	0	; () banked
 19841  015328  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19842  01532A  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 19843  01532E  0012               	return		;funcret
 19844  015330                     __end_of_SPI_MinSpeed:
 19845                           	opt stack 0
 19846                           tosu	equ	0xFFF
 19847                           tosh	equ	0xFFE
 19848                           tosl	equ	0xFFD
 19849                           pclath	equ	0xFFA
 19850                           tblptru	equ	0xFF8
 19851                           tblptrh	equ	0xFF7
 19852                           tblptrl	equ	0xFF6
 19853                           tablat	equ	0xFF5
 19854                           prodh	equ	0xFF4
 19855                           prodl	equ	0xFF3
 19856                           intcon	equ	0xFF2
 19857                           postinc0	equ	0xFEE
 19858                           wreg	equ	0xFE8
 19859                           indf1	equ	0xFE7
 19860                           postdec1	equ	0xFE5
 19861                           fsr1h	equ	0xFE2
 19862                           fsr1l	equ	0xFE1
 19863                           indf2	equ	0xFDF
 19864                           postinc2	equ	0xFDE
 19865                           postdec2	equ	0xFDD
 19866                           plusw2	equ	0xFDB
 19867                           fsr2h	equ	0xFDA
 19868                           fsr2l	equ	0xFD9
 19869                           status	equ	0xFD8
 19870                           
 19871 ;; *************** function _SPI_Init *****************
 19872 ;; Defined at:
 19873 ;;		line 12 in file "Library/SPI.c"
 19874 ;; Parameters:    Size  Location     Type
 19875 ;;  pClock          4   45[BANK0 ] unsigned long 
 19876 ;;  pChannel        1   49[BANK0 ] enum E6744
 19877 ;;  pMode           1   50[BANK0 ] enum E6748
 19878 ;; Auto vars:     Size  Location     Type
 19879 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 19880 ;;		 -> SPI1(11), SPI2(11), 
 19881 ;; Return value:  Size  Location     Type
 19882 ;;                  1    wreg      void 
 19883 ;; Registers used:
 19884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19885 ;; Tracked objects:
 19886 ;;		On entry : 0/0
 19887 ;;		On exit  : 0/0
 19888 ;;		Unchanged: 0/0
 19889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19890 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19893 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19894 ;;Total ram usage:        8 bytes
 19895 ;; Hardware stack levels used:    1
 19896 ;; Hardware stack levels required when called:   12
 19897 ;; This function calls:
 19898 ;;		_Byte_SetBit
 19899 ;;		_Byte_SetQuad
 19900 ;;		_Port_SetPinType
 19901 ;;		_SPI_DCS
 19902 ;;		_SPI_DisableISR
 19903 ;;		_Timer2_Init
 19904 ;; This function is called by:
 19905 ;;		_Configure_GPIOs
 19906 ;;		_HMI_Init
 19907 ;; This function uses a non-reentrant model
 19908 ;;
 19909                           
 19910                           	psect	text94
 19911  0104A6                     __ptext94:
 19912                           	opt stack 0
 19913  0104A6                     _SPI_Init:
 19914                           	opt stack 15
 19915                           
 19916                           ;SPI.c: 14: SPIPtr pInput;
 19917                           ;SPI.c: 16: switch (pChannel)
 19918                           
 19919                           ;incstack = 0
 19920  0104A6  D00C               	goto	l597
 19921  0104A8                     
 19922                           ;SPI.c: 19: pInput = &SPI1;
 19923  0104A8  0E63               	movlw	low _SPI1
 19924  0104AA  0100               	movlb	0	; () banked
 19925  0104AC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 19926  0104AE  0E03               	movlw	high _SPI1
 19927  0104B0  D004               	goto	L13
 19928  0104B2                     
 19929                           ; BSR set to: 0
 19930                           ;SPI.c: 22: pInput = &SPI2;
 19931                           
 19932                           ; BSR set to: 0
 19933  0104B2  0E6E               	movlw	low _SPI2
 19934  0104B4  0100               	movlb	0	; () banked
 19935  0104B6  6F93               	movwf	SPI_Init@pInput& (0+255),b
 19936  0104B8  0E03               	movlw	high _SPI2
 19937  0104BA                     L13:
 19938  0104BA  0100               	movlb	0	; () banked
 19939  0104BC  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;SPI.c: 24: };
 19943                           
 19944                           ;SPI.c: 23: break;
 19945  0104BE  D008               	goto	l599
 19946  0104C0                     l597:
 19947                           
 19948                           ; BSR set to: 0
 19949  0104C0  0100               	movlb	0	; () banked
 19950  0104C2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 19951                           
 19952                           ; Switch size 1, requested type "space"
 19953                           ; Number of cases is 2, Range of values is 0 to 1
 19954                           ; switch strategies available:
 19955                           ; Name         Instructions Cycles
 19956                           ; simple_byte            7     4 (average)
 19957                           ;	Chosen strategy is simple_byte
 19958  0104C4  0A00               	xorlw	0	; case 0
 19959  0104C6  B4D8               	btfsc	status,2,c
 19960  0104C8  D7EF               	goto	l598
 19961  0104CA  0A01               	xorlw	1	; case 1
 19962  0104CC  B4D8               	btfsc	status,2,c
 19963  0104CE  D7F1               	goto	l600
 19964  0104D0                     l599:
 19965                           
 19966                           ; BSR set to: 0
 19967                           ;SPI.c: 26: pInput->mChannel = pChannel;
 19968                           
 19969                           ; BSR set to: 0
 19970  0104D0  0100               	movlb	0	; () banked
 19971  0104D2  EE20 F002          	lfsr	2,2
 19972  0104D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19973  0104D8  26D9               	addwf	fsr2l,f,c
 19974  0104DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19975  0104DC  22DA               	addwfc	fsr2h,f,c
 19976  0104DE  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 19977                           
 19978                           ;SPI.c: 35: switch (pChannel)
 19979  0104E2  D0B1               	goto	l601
 19980  0104E4                     
 19981                           ; BSR set to: 0
 19982                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 19983                           
 19984                           ; BSR set to: 0
 19985  0104E4  0EEA               	movlw	low _PortC
 19986  0104E6  0100               	movlb	0	; () banked
 19987  0104E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19988  0104EA  0E00               	movlw	high _PortC
 19989  0104EC  0100               	movlb	0	; () banked
 19990  0104EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19991  0104F0  0E02               	movlw	2
 19992  0104F2  0100               	movlb	0	; () banked
 19993  0104F4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19994  0104F6  0E03               	movlw	3
 19995  0104F8  0100               	movlb	0	; () banked
 19996  0104FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19997  0104FC  EC4F  F093         	call	_Port_SetPinType	;wreg free
 19998                           
 19999                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20000  010500  0EEA               	movlw	low _PortC
 20001  010502  0100               	movlb	0	; () banked
 20002  010504  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20003  010506  0E00               	movlw	high _PortC
 20004  010508  0100               	movlb	0	; () banked
 20005  01050A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20006  01050C  0E03               	movlw	3
 20007  01050E  0100               	movlb	0	; () banked
 20008  010510  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20009  010512  0E03               	movlw	3
 20010  010514  0100               	movlb	0	; () banked
 20011  010516  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20012  010518  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20013                           
 20014                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20015  01051C  0EEA               	movlw	low _PortC
 20016  01051E  0100               	movlb	0	; () banked
 20017  010520  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20018  010522  0E00               	movlw	high _PortC
 20019  010524  0100               	movlb	0	; () banked
 20020  010526  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20021  010528  0E05               	movlw	5
 20022  01052A  0100               	movlb	0	; () banked
 20023  01052C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20024  01052E  0E03               	movlw	3
 20025  010530  0100               	movlb	0	; () banked
 20026  010532  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20027  010534  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20028                           
 20029                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20030  010538  0EEA               	movlw	low _PortC
 20031  01053A  0100               	movlb	0	; () banked
 20032  01053C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20033  01053E  0E00               	movlw	high _PortC
 20034  010540  0100               	movlb	0	; () banked
 20035  010542  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20036  010544  0E04               	movlw	4
 20037  010546  0100               	movlb	0	; () banked
 20038  010548  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20039  01054A  0E00               	movlw	0
 20040  01054C  0100               	movlb	0	; () banked
 20041  01054E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20042  010550  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20043                           
 20044                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20045  010554  0100               	movlb	0	; () banked
 20046  010556  EE20 F003          	lfsr	2,3
 20047  01055A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20048  01055C  26D9               	addwf	fsr2l,f,c
 20049  01055E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20050  010560  22DA               	addwfc	fsr2h,f,c
 20051  010562  0EC7               	movlw	199
 20052  010564  6EDE               	movwf	postinc2,c
 20053  010566  0E0F               	movlw	15
 20054  010568  6EDD               	movwf	postdec2,c
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20058  01056A  0100               	movlb	0	; () banked
 20059  01056C  EE20 F006          	lfsr	2,6
 20060  010570  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20061  010572  26D9               	addwf	fsr2l,f,c
 20062  010574  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20063  010576  22DA               	addwfc	fsr2h,f,c
 20064  010578  0EC6               	movlw	198
 20065  01057A  6EDE               	movwf	postinc2,c
 20066  01057C  0E0F               	movlw	15
 20067  01057E  6EDD               	movwf	postdec2,c
 20068                           
 20069                           ; BSR set to: 0
 20070                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20071  010580  0100               	movlb	0	; () banked
 20072  010582  EE20 F009          	lfsr	2,9
 20073  010586  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20074  010588  26D9               	addwf	fsr2l,f,c
 20075  01058A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20076  01058C  22DA               	addwfc	fsr2h,f,c
 20077  01058E  0EC9               	movlw	201
 20078  010590  D056               	goto	L14
 20079  010592                     
 20080                           ; BSR set to: 0
 20081                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20082                           
 20083                           ; BSR set to: 0
 20084  010592  0EE0               	movlw	low _PortD
 20085  010594  0100               	movlb	0	; () banked
 20086  010596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20087  010598  0E00               	movlw	high _PortD
 20088  01059A  0100               	movlb	0	; () banked
 20089  01059C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20090  01059E  0E07               	movlw	7
 20091  0105A0  0100               	movlb	0	; () banked
 20092  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20093  0105A4  0E03               	movlw	3
 20094  0105A6  0100               	movlb	0	; () banked
 20095  0105A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20096  0105AA  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20097                           
 20098                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20099  0105AE  0EE0               	movlw	low _PortD
 20100  0105B0  0100               	movlb	0	; () banked
 20101  0105B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20102  0105B4  0E00               	movlw	high _PortD
 20103  0105B6  0100               	movlb	0	; () banked
 20104  0105B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20105  0105BA  0E06               	movlw	6
 20106  0105BC  0100               	movlb	0	; () banked
 20107  0105BE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20108  0105C0  0E03               	movlw	3
 20109  0105C2  0100               	movlb	0	; () banked
 20110  0105C4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20111  0105C6  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20112                           
 20113                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20114  0105CA  0EE0               	movlw	low _PortD
 20115  0105CC  0100               	movlb	0	; () banked
 20116  0105CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20117  0105D0  0E00               	movlw	high _PortD
 20118  0105D2  0100               	movlb	0	; () banked
 20119  0105D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20120  0105D6  0E04               	movlw	4
 20121  0105D8  0100               	movlb	0	; () banked
 20122  0105DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20123  0105DC  0E03               	movlw	3
 20124  0105DE  0100               	movlb	0	; () banked
 20125  0105E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20126  0105E2  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20127                           
 20128                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20129  0105E6  0EE0               	movlw	low _PortD
 20130  0105E8  0100               	movlb	0	; () banked
 20131  0105EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20132  0105EC  0E00               	movlw	high _PortD
 20133  0105EE  0100               	movlb	0	; () banked
 20134  0105F0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20135  0105F2  0E05               	movlw	5
 20136  0105F4  0100               	movlb	0	; () banked
 20137  0105F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20138  0105F8  0E00               	movlw	0
 20139  0105FA  0100               	movlb	0	; () banked
 20140  0105FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20141  0105FE  EC4F  F093         	call	_Port_SetPinType	;wreg free
 20142                           
 20143                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20144  010602  0100               	movlb	0	; () banked
 20145  010604  EE20 F003          	lfsr	2,3
 20146  010608  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20147  01060A  26D9               	addwf	fsr2l,f,c
 20148  01060C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20149  01060E  22DA               	addwfc	fsr2h,f,c
 20150  010610  0E6D               	movlw	109
 20151  010612  6EDE               	movwf	postinc2,c
 20152  010614  0E0F               	movlw	15
 20153  010616  6EDD               	movwf	postdec2,c
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20157  010618  0100               	movlb	0	; () banked
 20158  01061A  EE20 F006          	lfsr	2,6
 20159  01061E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20160  010620  26D9               	addwf	fsr2l,f,c
 20161  010622  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20162  010624  22DA               	addwfc	fsr2h,f,c
 20163  010626  0E6C               	movlw	108
 20164  010628  6EDE               	movwf	postinc2,c
 20165  01062A  0E0F               	movlw	15
 20166  01062C  6EDD               	movwf	postdec2,c
 20167                           
 20168                           ; BSR set to: 0
 20169                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20170  01062E  0100               	movlb	0	; () banked
 20171  010630  EE20 F009          	lfsr	2,9
 20172  010634  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20173  010636  26D9               	addwf	fsr2l,f,c
 20174  010638  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20175  01063A  22DA               	addwfc	fsr2h,f,c
 20176  01063C  0E6F               	movlw	111
 20177  01063E                     L14:
 20178  01063E  6EDE               	movwf	postinc2,c
 20179  010640  0E0F               	movlw	15
 20180  010642  6EDD               	movwf	postdec2,c
 20181                           
 20182                           ;SPI.c: 68: break;
 20183  010644  D009               	goto	l603
 20184  010646                     l601:
 20185                           
 20186                           ; BSR set to: 0
 20187                           
 20188                           ; BSR set to: 0
 20189  010646  0100               	movlb	0	; () banked
 20190  010648  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20191                           
 20192                           ; Switch size 1, requested type "space"
 20193                           ; Number of cases is 2, Range of values is 0 to 1
 20194                           ; switch strategies available:
 20195                           ; Name         Instructions Cycles
 20196                           ; simple_byte            7     4 (average)
 20197                           ;	Chosen strategy is simple_byte
 20198  01064A  0A00               	xorlw	0	; case 0
 20199  01064C  B4D8               	btfsc	status,2,c
 20200  01064E  D74A               	goto	l602
 20201  010650  0A01               	xorlw	1	; case 1
 20202  010652  A4D8               	btfss	status,2,c
 20203  010654  0012               	return	
 20204  010656  D79D               	goto	l604
 20205  010658                     l603:
 20206                           
 20207                           ; BSR set to: 0
 20208                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20209                           
 20210                           ; BSR set to: 0
 20211  010658  0100               	movlb	0	; () banked
 20212  01065A  EE20 F006          	lfsr	2,6
 20213  01065E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20214  010660  26D9               	addwf	fsr2l,f,c
 20215  010662  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20216  010664  22DA               	addwfc	fsr2h,f,c
 20217  010666  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20218  01066A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20219  01066E  0E05               	movlw	5
 20220  010670  0100               	movlb	0	; () banked
 20221  010672  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20222  010674  0E00               	movlw	0
 20223  010676  0100               	movlb	0	; () banked
 20224  010678  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20225  01067A  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20226                           
 20227                           ;SPI.c: 77: switch(pMode)
 20228  01067E  D09C               	goto	l607
 20229  010680                     
 20230                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20231  010680  0100               	movlb	0	; () banked
 20232  010682  EE20 F006          	lfsr	2,6
 20233  010686  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20234  010688  26D9               	addwf	fsr2l,f,c
 20235  01068A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20236  01068C  22DA               	addwfc	fsr2h,f,c
 20237  01068E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20238  010692  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20239  010696  0E04               	movlw	4
 20240  010698  0100               	movlb	0	; () banked
 20241  01069A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20242  01069C  0E00               	movlw	0
 20243  01069E  0100               	movlb	0	; () banked
 20244  0106A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20245  0106A2  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20246                           
 20247                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20248  0106A6  0100               	movlb	0	; () banked
 20249  0106A8  EE20 F003          	lfsr	2,3
 20250  0106AC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20251  0106AE  26D9               	addwf	fsr2l,f,c
 20252  0106B0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20253  0106B2  22DA               	addwfc	fsr2h,f,c
 20254  0106B4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20255  0106B8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20256  0106BC  0E06               	movlw	6
 20257  0106BE  0100               	movlb	0	; () banked
 20258  0106C0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20259  0106C2  0E00               	movlw	0
 20260  0106C4  0100               	movlb	0	; () banked
 20261  0106C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20262  0106C8  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20263                           
 20264                           ;SPI.c: 82: break;
 20265  0106CC  D084               	goto	l609
 20266  0106CE                     
 20267                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20268  0106CE  0100               	movlb	0	; () banked
 20269  0106D0  EE20 F006          	lfsr	2,6
 20270  0106D4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20271  0106D6  26D9               	addwf	fsr2l,f,c
 20272  0106D8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20273  0106DA  22DA               	addwfc	fsr2h,f,c
 20274  0106DC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20275  0106E0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20276  0106E4  0E04               	movlw	4
 20277  0106E6  0100               	movlb	0	; () banked
 20278  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20279  0106EA  0E00               	movlw	0
 20280  0106EC  0100               	movlb	0	; () banked
 20281  0106EE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20282  0106F0  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20283                           
 20284                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20285  0106F4  0100               	movlb	0	; () banked
 20286  0106F6  EE20 F003          	lfsr	2,3
 20287  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20288  0106FC  26D9               	addwf	fsr2l,f,c
 20289  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20290  010700  22DA               	addwfc	fsr2h,f,c
 20291  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20292  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20293  01070A  0E06               	movlw	6
 20294  01070C  0100               	movlb	0	; () banked
 20295  01070E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20296  010710  0E01               	movlw	1
 20297  010712  0100               	movlb	0	; () banked
 20298  010714  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20299  010716  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20300                           
 20301                           ;SPI.c: 86: break;
 20302  01071A  D05D               	goto	l609
 20303  01071C                     
 20304                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20305  01071C  0100               	movlb	0	; () banked
 20306  01071E  EE20 F006          	lfsr	2,6
 20307  010722  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20308  010724  26D9               	addwf	fsr2l,f,c
 20309  010726  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20310  010728  22DA               	addwfc	fsr2h,f,c
 20311  01072A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20312  01072E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20313  010732  0E04               	movlw	4
 20314  010734  0100               	movlb	0	; () banked
 20315  010736  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20316  010738  0E01               	movlw	1
 20317  01073A  0100               	movlb	0	; () banked
 20318  01073C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20319  01073E  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20320                           
 20321                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20322  010742  0100               	movlb	0	; () banked
 20323  010744  EE20 F003          	lfsr	2,3
 20324  010748  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20325  01074A  26D9               	addwf	fsr2l,f,c
 20326  01074C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20327  01074E  22DA               	addwfc	fsr2h,f,c
 20328  010750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20329  010754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20330  010758  0E06               	movlw	6
 20331  01075A  0100               	movlb	0	; () banked
 20332  01075C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20333  01075E  0E00               	movlw	0
 20334  010760  0100               	movlb	0	; () banked
 20335  010762  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20336  010764  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20337                           
 20338                           ;SPI.c: 90: break;
 20339  010768  D036               	goto	l609
 20340  01076A                     
 20341                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20342  01076A  0100               	movlb	0	; () banked
 20343  01076C  EE20 F006          	lfsr	2,6
 20344  010770  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20345  010772  26D9               	addwf	fsr2l,f,c
 20346  010774  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20347  010776  22DA               	addwfc	fsr2h,f,c
 20348  010778  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20349  01077C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20350  010780  0E04               	movlw	4
 20351  010782  0100               	movlb	0	; () banked
 20352  010784  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20353  010786  0E01               	movlw	1
 20354  010788  0100               	movlb	0	; () banked
 20355  01078A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20356  01078C  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20357                           
 20358                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20359  010790  0100               	movlb	0	; () banked
 20360  010792  EE20 F003          	lfsr	2,3
 20361  010796  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20362  010798  26D9               	addwf	fsr2l,f,c
 20363  01079A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20364  01079C  22DA               	addwfc	fsr2h,f,c
 20365  01079E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20366  0107A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20367  0107A6  0E06               	movlw	6
 20368  0107A8  0100               	movlb	0	; () banked
 20369  0107AA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20370  0107AC  0E01               	movlw	1
 20371  0107AE  0100               	movlb	0	; () banked
 20372  0107B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20373  0107B2  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20374                           
 20375                           ;SPI.c: 94: break;
 20376  0107B6  D00F               	goto	l609
 20377  0107B8                     l607:
 20378  0107B8  0100               	movlb	0	; () banked
 20379  0107BA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 20380                           
 20381                           ; Switch size 1, requested type "space"
 20382                           ; Number of cases is 4, Range of values is 0 to 3
 20383                           ; switch strategies available:
 20384                           ; Name         Instructions Cycles
 20385                           ; simple_byte           13     7 (average)
 20386                           ;	Chosen strategy is simple_byte
 20387  0107BC  0A00               	xorlw	0	; case 0
 20388  0107BE  B4D8               	btfsc	status,2,c
 20389  0107C0  D75F               	goto	l608
 20390  0107C2  0A01               	xorlw	1	; case 1
 20391  0107C4  B4D8               	btfsc	status,2,c
 20392  0107C6  D783               	goto	l610
 20393  0107C8  0A03               	xorlw	3	; case 2
 20394  0107CA  B4D8               	btfsc	status,2,c
 20395  0107CC  D7A7               	goto	l611
 20396  0107CE  0A01               	xorlw	1	; case 3
 20397  0107D0  A4D8               	btfss	status,2,c
 20398  0107D2  0012               	return	
 20399  0107D4  D7CA               	goto	l612
 20400  0107D6                     l609:
 20401                           
 20402                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20403                           
 20404                           ; BSR set to: 0
 20405  0107D6  0100               	movlb	0	; () banked
 20406  0107D8  EE20 F006          	lfsr	2,6
 20407  0107DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20408  0107DE  26D9               	addwf	fsr2l,f,c
 20409  0107E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20410  0107E2  22DA               	addwfc	fsr2h,f,c
 20411  0107E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20412  0107E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20413  0107EC  0E07               	movlw	7
 20414  0107EE  0100               	movlb	0	; () banked
 20415  0107F0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20416  0107F2  0E00               	movlw	0
 20417  0107F4  0100               	movlb	0	; () banked
 20418  0107F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20419  0107F8  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20420                           
 20421                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20422  0107FC  0100               	movlb	0	; () banked
 20423  0107FE  EE20 F006          	lfsr	2,6
 20424  010802  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20425  010804  26D9               	addwf	fsr2l,f,c
 20426  010806  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20427  010808  22DA               	addwfc	fsr2h,f,c
 20428  01080A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20429  01080E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20430  010812  0E06               	movlw	6
 20431  010814  0100               	movlb	0	; () banked
 20432  010816  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20433  010818  0E00               	movlw	0
 20434  01081A  0100               	movlb	0	; () banked
 20435  01081C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20436  01081E  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20437                           
 20438                           ;SPI.c: 106: Timer2_Init(pClock);
 20439  010822  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20440  010826  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20441  01082A  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20442  01082E  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20443  010832  EC66  F099         	call	_Timer2_Init	;wreg free
 20444                           
 20445                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20446  010836  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20447  01083A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20448  01083E  ECBB  F0B0         	call	_SPI_DisableISR	;wreg free
 20449                           
 20450                           ;SPI.c: 116: switch (pChannel)
 20451  010842  D004               	goto	l614
 20452  010844                     l615:
 20453                           
 20454                           ; BSR set to: 0
 20455  010844  869F               	bsf	3999,3,c	;volatile
 20456  010846  D00B               	goto	l616
 20457  010848                     l617:
 20458                           
 20459                           ; BSR set to: 0
 20460  010848  8EA5               	bsf	4005,7,c	;volatile
 20461  01084A  D009               	goto	l616
 20462  01084C                     l614:
 20463                           
 20464                           ; BSR set to: 0
 20465  01084C  0100               	movlb	0	; () banked
 20466  01084E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20467                           
 20468                           ; Switch size 1, requested type "space"
 20469                           ; Number of cases is 2, Range of values is 0 to 1
 20470                           ; switch strategies available:
 20471                           ; Name         Instructions Cycles
 20472                           ; simple_byte            7     4 (average)
 20473                           ;	Chosen strategy is simple_byte
 20474  010850  0A00               	xorlw	0	; case 0
 20475  010852  B4D8               	btfsc	status,2,c
 20476  010854  D7F7               	goto	l615
 20477  010856  0A01               	xorlw	1	; case 1
 20478  010858  A4D8               	btfss	status,2,c
 20479  01085A  0012               	return	
 20480  01085C  D7F5               	goto	l617
 20481  01085E                     l616:
 20482                           
 20483                           ; BSR set to: 0
 20484                           ;SPI.c: 124: SPI_DCS(pInput);
 20485                           
 20486                           ; BSR set to: 0
 20487  01085E  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20488  010862  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20489  010866  EC1B  F0B0         	call	_SPI_DCS	;wreg free
 20490                           
 20491                           ;SPI.c: 126: pInput->mBusy = 0;
 20492  01086A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 20493  01086E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20494  010872  0E00               	movlw	0
 20495  010874  6EDF               	movwf	indf2,c
 20496                           
 20497                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20498  010876  0100               	movlb	0	; () banked
 20499  010878  EE20 F006          	lfsr	2,6
 20500  01087C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20501  01087E  26D9               	addwf	fsr2l,f,c
 20502  010880  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20503  010882  22DA               	addwfc	fsr2h,f,c
 20504  010884  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 20505  010888  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 20506  01088C  0E00               	movlw	0
 20507  01088E  0100               	movlb	0	; () banked
 20508  010890  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20509  010892  0E03               	movlw	3
 20510  010894  0100               	movlb	0	; () banked
 20511  010896  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 20512  010898  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 20513                           
 20514                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20515  01089C  0100               	movlb	0	; () banked
 20516  01089E  EE20 F006          	lfsr	2,6
 20517  0108A2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20518  0108A4  26D9               	addwf	fsr2l,f,c
 20519  0108A6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20520  0108A8  22DA               	addwfc	fsr2h,f,c
 20521  0108AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20522  0108AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20523  0108B2  0E05               	movlw	5
 20524  0108B4  0100               	movlb	0	; () banked
 20525  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20526  0108B8  0E01               	movlw	1
 20527  0108BA  0100               	movlb	0	; () banked
 20528  0108BC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20529  0108BE  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 20530  0108C2  0012               	return		;funcret
 20531  0108C4                     __end_of_SPI_Init:
 20532                           	opt stack 0
 20533                           tosu	equ	0xFFF
 20534                           tosh	equ	0xFFE
 20535                           tosl	equ	0xFFD
 20536                           pclath	equ	0xFFA
 20537                           tblptru	equ	0xFF8
 20538                           tblptrh	equ	0xFF7
 20539                           tblptrl	equ	0xFF6
 20540                           tablat	equ	0xFF5
 20541                           prodh	equ	0xFF4
 20542                           prodl	equ	0xFF3
 20543                           intcon	equ	0xFF2
 20544                           postinc0	equ	0xFEE
 20545                           wreg	equ	0xFE8
 20546                           indf1	equ	0xFE7
 20547                           postdec1	equ	0xFE5
 20548                           fsr1h	equ	0xFE2
 20549                           fsr1l	equ	0xFE1
 20550                           indf2	equ	0xFDF
 20551                           postinc2	equ	0xFDE
 20552                           postdec2	equ	0xFDD
 20553                           plusw2	equ	0xFDB
 20554                           fsr2h	equ	0xFDA
 20555                           fsr2l	equ	0xFD9
 20556                           status	equ	0xFD8
 20557                           
 20558 ;; *************** function _Timer2_Init *****************
 20559 ;; Defined at:
 20560 ;;		line 10 in file "Library/Timer2.c"
 20561 ;; Parameters:    Size  Location     Type
 20562 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20563 ;; Auto vars:     Size  Location     Type
 20564 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20565 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20566 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20567 ;; Return value:  Size  Location     Type
 20568 ;;                  1    wreg      void 
 20569 ;; Registers used:
 20570 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20571 ;; Tracked objects:
 20572 ;;		On entry : 0/0
 20573 ;;		On exit  : 0/0
 20574 ;;		Unchanged: 0/0
 20575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20576 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20577 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20579 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20580 ;;Total ram usage:       17 bytes
 20581 ;; Hardware stack levels used:    1
 20582 ;; Hardware stack levels required when called:    8
 20583 ;; This function calls:
 20584 ;;		_Timer2_Clear
 20585 ;;		___lldiv
 20586 ;; This function is called by:
 20587 ;;		_SPI_Init
 20588 ;; This function uses a non-reentrant model
 20589 ;;
 20590                           
 20591                           	psect	text95
 20592  0132CC                     __ptext95:
 20593                           	opt stack 0
 20594  0132CC                     _Timer2_Init:
 20595                           	opt stack 18
 20596                           
 20597                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 20598                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 20599                           ;Timer2.c: 14: static UINT8 PRE = 0;
 20600                           ;Timer2.c: 15: static UINT32 DIV = 0;
 20601                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 20602                           
 20603                           ;incstack = 0
 20604  0132CC  0E00               	movlw	0
 20605  0132CE  0100               	movlb	0	; () banked
 20606  0132D0  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 20607  0132D2  0E6C               	movlw	108
 20608  0132D4  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 20609  0132D6  0EDC               	movlw	220
 20610  0132D8  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 20611  0132DA  0E02               	movlw	2
 20612  0132DC  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 20613                           
 20614                           ; BSR set to: 0
 20615                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 20616                           ;Timer2.c: 20: pFrequency *= 2;
 20617  0132DE  0100               	movlb	0	; () banked
 20618  0132E0  90D8               	bcf	status,0,c
 20619  0132E2  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 20620  0132E4  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 20621  0132E6  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 20622  0132E8  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 20623                           
 20624                           ; BSR set to: 0
 20625                           ;Timer2.c: 23: pCPUClock /= 4;
 20626  0132EA  0E02               	movlw	2
 20627  0132EC  0100               	movlb	0	; () banked
 20628  0132EE  6F71               	movwf	??_Timer2_Init& (0+255),b
 20629  0132F0                     u9285:
 20630  0132F0  90D8               	bcf	status,0,c
 20631  0132F2  0100               	movlb	0	; () banked
 20632  0132F4  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 20633  0132F6  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 20634  0132F8  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 20635  0132FA  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 20636  0132FC  0100               	movlb	0	; () banked
 20637  0132FE  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 20638  013300  D7F7               	goto	u9285
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 20642  013302  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 20643  013306  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 20644  01330A  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 20645  01330E  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 20646  013312  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 20647  013316  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 20648  01331A  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 20649  01331E  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 20650  013322  ECCB  F0A0         	call	___lldiv	;wreg free
 20651  013326  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 20652  01332A  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 20653  01332E  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 20654  013332  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 20655                           
 20656                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 20657  013336  D010               	goto	l1828
 20658  013338                     l12569:
 20659                           
 20660                           ;Timer2.c: 28: {
 20661                           ;Timer2.c: 29: RDIV = 0;
 20662  013338  0E00               	movlw	0
 20663  01333A  0100               	movlb	0	; () banked
 20664  01333C  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 20665  01333E  0E00               	movlw	0
 20666  013340  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 20667  013342  0E00               	movlw	0
 20668  013344  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 20669  013346  0E00               	movlw	0
 20670  013348  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 20671                           
 20672                           ; BSR set to: 0
 20673                           ;Timer2.c: 30: INDEX ++;
 20674  01334A  0100               	movlb	0	; () banked
 20675  01334C  2BDA               	incf	Timer2_Init@INDEX& (0+255),f,b
 20676                           
 20677                           ; BSR set to: 0
 20678                           ;Timer2.c: 31: if (INDEX >= 3)
 20679  01334E  0E02               	movlw	2
 20680  013350  0100               	movlb	0	; () banked
 20681  013352  65DA               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 20682  013354  D001               	goto	l1828
 20683  013356  D026               	goto	u9300
 20684  013358                     l1828:
 20685                           
 20686                           ; BSR set to: 0
 20687                           
 20688                           ; BSR set to: 0
 20689  013358  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 20690  01335C  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 20691  013360  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 20692  013364  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 20693  013368  0100               	movlb	0	; () banked
 20694  01336A  51DA               	movf	Timer2_Init@INDEX& (0+255),w,b
 20695  01336C  0D01               	mullw	1
 20696  01336E  0E70               	movlw	low Timer2_Init@PRESCALE
 20697  013370  24F3               	addwf	prodl,w,c
 20698  013372  6EF6               	movwf	tblptrl,c
 20699  013374  0EFD               	movlw	high Timer2_Init@PRESCALE
 20700  013376  20F4               	addwfc	prodh,w,c
 20701  013378  6EF7               	movwf	tblptrh,c
 20702  01337A                     	if	1	;There are 3 active tblptr bytes
 20703  01337A  6AF8               	clrf	tblptru,c
 20704  01337C  0E00               	movlw	low (__mediumconst shr (0+16))
 20705  01337E  22F8               	addwfc	tblptru,f,c
 20706  013380                     	endif
 20707  013380  0008               	tblrd		*
 20708  013382  50F5               	movf	tablat,w,c
 20709  013384  0100               	movlb	0	; () banked
 20710  013386  6F64               	movwf	___lldiv@divisor& (0+255),b
 20711  013388  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20712  01338A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20713  01338C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20714  01338E  ECCB  F0A0         	call	___lldiv	;wreg free
 20715  013392  0100               	movlb	0	; () banked
 20716  013394  5163               	movf	(?___lldiv+3)& (0+255),w,b
 20717  013396  0100               	movlb	0	; () banked
 20718  013398  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 20719  01339A  E1CE               	bnz	l12569
 20720  01339C  0100               	movlb	0	; () banked
 20721  01339E  0561               	decf	(?___lldiv+1)& (0+255),w,b
 20722  0133A0  B0D8               	btfsc	status,0,c
 20723  0133A2  D7CA               	goto	l1827
 20724  0133A4                     u9300:
 20725                           
 20726                           ; BSR set to: 0
 20727                           ;Timer2.c: 33: }
 20728                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 20729                           
 20730                           ; BSR set to: 0
 20731  0133A4  50CA               	movf	4042,w,c	;volatile
 20732  0133A6  0100               	movlb	0	; () banked
 20733  0133A8  19DA               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20734  0133AA  0BFC               	andlw	-4
 20735  0133AC  19DA               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20736  0133AE  6ECA               	movwf	4042,c	;volatile
 20737                           
 20738                           ; BSR set to: 0
 20739                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 20740  0133B0  84CA               	bsf	4042,2,c	;volatile
 20741                           
 20742                           ; BSR set to: 0
 20743                           ;Timer2.c: 44: Timer2_Clear();
 20744  0133B2  ECC6  F0B2         	call	_Timer2_Clear	;wreg free
 20745                           
 20746                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 20747  0133B6  0100               	movlb	0	; () banked
 20748  0133B8  51DA               	movf	Timer2_Init@INDEX& (0+255),w,b
 20749  0133BA  0D01               	mullw	1
 20750  0133BC  0E70               	movlw	low Timer2_Init@PRESCALE
 20751  0133BE  24F3               	addwf	prodl,w,c
 20752  0133C0  6EF6               	movwf	tblptrl,c
 20753  0133C2  0EFD               	movlw	high Timer2_Init@PRESCALE
 20754  0133C4  20F4               	addwfc	prodh,w,c
 20755  0133C6  6EF7               	movwf	tblptrh,c
 20756  0133C8                     	if	1	;There are 3 active tblptr bytes
 20757  0133C8  6AF8               	clrf	tblptru,c
 20758  0133CA  0E00               	movlw	low (__mediumconst shr (0+16))
 20759  0133CC  22F8               	addwfc	tblptru,f,c
 20760  0133CE                     	endif
 20761  0133CE  0008               	tblrd		*
 20762  0133D0  CFF5 F0D9          	movff	tablat,Timer2_Init@PRE
 20763                           
 20764                           ; BSR set to: 0
 20765                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 20766  0133D4  0EFF               	movlw	255
 20767  0133D6  0100               	movlb	0	; () banked
 20768  0133D8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 20769  0133DA  0103               	movlb	3	; () banked
 20770  0133DC  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 20771  0133DE  0EFF               	movlw	255
 20772  0133E0  0100               	movlb	0	; () banked
 20773  0133E2  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 20774  0133E4  0103               	movlb	3	; () banked
 20775  0133E6  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 20776  0133E8  0EFF               	movlw	255
 20777  0133EA  0100               	movlb	0	; () banked
 20778  0133EC  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 20779  0133EE  0103               	movlb	3	; () banked
 20780  0133F0  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 20781  0133F2  0EFF               	movlw	255
 20782  0133F4  0100               	movlb	0	; () banked
 20783  0133F6  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 20784  0133F8  0103               	movlb	3	; () banked
 20785  0133FA  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 20786                           
 20787                           ; BSR set to: 3
 20788                           ;Timer2.c: 48: INDEX = DIV/PRE;
 20789  0133FC  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 20790  013400  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 20791  013404  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 20792  013408  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 20793  01340C  0100               	movlb	0	; () banked
 20794  01340E  51D9               	movf	Timer2_Init@PRE& (0+255),w,b
 20795  013410  0100               	movlb	0	; () banked
 20796  013412  6F64               	movwf	___lldiv@divisor& (0+255),b
 20797  013414  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20798  013416  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20799  013418  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20800  01341A  ECCB  F0A0         	call	___lldiv	;wreg free
 20801  01341E  0100               	movlb	0	; () banked
 20802  013420  5160               	movf	?___lldiv& (0+255),w,b
 20803  013422  0100               	movlb	0	; () banked
 20804  013424  6FDA               	movwf	Timer2_Init@INDEX& (0+255),b
 20805                           
 20806                           ; BSR set to: 0
 20807                           ;Timer2.c: 49: PR2 = INDEX;
 20808  013426  C0DA  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 20809                           
 20810                           ; BSR set to: 0
 20811  01342A  0012               	return		;funcret
 20812  01342C                     __end_of_Timer2_Init:
 20813                           	opt stack 0
 20814                           tosu	equ	0xFFF
 20815                           tosh	equ	0xFFE
 20816                           tosl	equ	0xFFD
 20817                           pclath	equ	0xFFA
 20818                           tblptru	equ	0xFF8
 20819                           tblptrh	equ	0xFF7
 20820                           tblptrl	equ	0xFF6
 20821                           tablat	equ	0xFF5
 20822                           prodh	equ	0xFF4
 20823                           prodl	equ	0xFF3
 20824                           intcon	equ	0xFF2
 20825                           postinc0	equ	0xFEE
 20826                           wreg	equ	0xFE8
 20827                           indf1	equ	0xFE7
 20828                           postdec1	equ	0xFE5
 20829                           fsr1h	equ	0xFE2
 20830                           fsr1l	equ	0xFE1
 20831                           indf2	equ	0xFDF
 20832                           postinc2	equ	0xFDE
 20833                           postdec2	equ	0xFDD
 20834                           plusw2	equ	0xFDB
 20835                           fsr2h	equ	0xFDA
 20836                           fsr2l	equ	0xFD9
 20837                           status	equ	0xFD8
 20838                           
 20839 ;; *************** function ___lldiv *****************
 20840 ;; Defined at:
 20841 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 20842 ;; Parameters:    Size  Location     Type
 20843 ;;  dividend        4    0[BANK0 ] unsigned long 
 20844 ;;  divisor         4    4[BANK0 ] unsigned long 
 20845 ;; Auto vars:     Size  Location     Type
 20846 ;;  quotient        4    8[BANK0 ] unsigned long 
 20847 ;;  counter         1   12[BANK0 ] unsigned char 
 20848 ;; Return value:  Size  Location     Type
 20849 ;;                  4    0[BANK0 ] unsigned long 
 20850 ;; Registers used:
 20851 ;;		wreg, status,2, status,0
 20852 ;; Tracked objects:
 20853 ;;		On entry : 0/0
 20854 ;;		On exit  : 0/0
 20855 ;;		Unchanged: 0/0
 20856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20857 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20858 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20860 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20861 ;;Total ram usage:       13 bytes
 20862 ;; Hardware stack levels used:    1
 20863 ;; Hardware stack levels required when called:    7
 20864 ;; This function calls:
 20865 ;;		Nothing
 20866 ;; This function is called by:
 20867 ;;		_Timer0_Init
 20868 ;;		_Timer2_Init
 20869 ;;		_rand_between
 20870 ;;		_I2C_Init
 20871 ;; This function uses a non-reentrant model
 20872 ;;
 20873                           
 20874                           	psect	text96
 20875  014196                     __ptext96:
 20876                           	opt stack 0
 20877  014196                     ___lldiv:
 20878                           	opt stack 20
 20879                           
 20880                           ; BSR set to: 0
 20881                           ;incstack = 0
 20882  014196  0E00               	movlw	0
 20883  014198  0100               	movlb	0	; () banked
 20884  01419A  6F68               	movwf	___lldiv@quotient& (0+255),b
 20885  01419C  0E00               	movlw	0
 20886  01419E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 20887  0141A0  0E00               	movlw	0
 20888  0141A2  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 20889  0141A4  0E00               	movlw	0
 20890  0141A6  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 20891                           
 20892                           ; BSR set to: 0
 20893  0141A8  0100               	movlb	0	; () banked
 20894  0141AA  5164               	movf	___lldiv@divisor& (0+255),w,b
 20895  0141AC  0100               	movlb	0	; () banked
 20896  0141AE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 20897  0141B0  0100               	movlb	0	; () banked
 20898  0141B2  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 20899  0141B4  0100               	movlb	0	; () banked
 20900  0141B6  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 20901  0141B8  B4D8               	btfsc	status,2,c
 20902  0141BA  D042               	goto	l2785
 20903                           
 20904                           ; BSR set to: 0
 20905  0141BC  0E01               	movlw	1
 20906  0141BE  0100               	movlb	0	; () banked
 20907  0141C0  6F6C               	movwf	___lldiv@counter& (0+255),b
 20908  0141C2  D008               	goto	l2780
 20909  0141C4                     
 20910                           ; BSR set to: 0
 20911                           
 20912                           ; BSR set to: 0
 20913  0141C4  0100               	movlb	0	; () banked
 20914  0141C6  90D8               	bcf	status,0,c
 20915  0141C8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 20916  0141CA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 20917  0141CC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 20918  0141CE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 20919  0141D0  0100               	movlb	0	; () banked
 20920  0141D2  2B6C               	incf	___lldiv@counter& (0+255),f,b
 20921  0141D4                     l2780:
 20922                           
 20923                           ; BSR set to: 0
 20924                           
 20925                           ; BSR set to: 0
 20926  0141D4  0100               	movlb	0	; () banked
 20927  0141D6  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 20928  0141D8  D7F5               	goto	l2781
 20929  0141DA                     u9150:
 20930                           
 20931                           ; BSR set to: 0
 20932                           
 20933                           ; BSR set to: 0
 20934                           
 20935                           ; BSR set to: 0
 20936  0141DA  0100               	movlb	0	; () banked
 20937  0141DC  90D8               	bcf	status,0,c
 20938  0141DE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 20939  0141E0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 20940  0141E2  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 20941  0141E4  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 20942                           
 20943                           ; BSR set to: 0
 20944  0141E6  0100               	movlb	0	; () banked
 20945  0141E8  5164               	movf	___lldiv@divisor& (0+255),w,b
 20946  0141EA  0100               	movlb	0	; () banked
 20947  0141EC  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 20948  0141EE  0100               	movlb	0	; () banked
 20949  0141F0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20950  0141F2  0100               	movlb	0	; () banked
 20951  0141F4  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 20952  0141F6  0100               	movlb	0	; () banked
 20953  0141F8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20954  0141FA  0100               	movlb	0	; () banked
 20955  0141FC  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 20956  0141FE  0100               	movlb	0	; () banked
 20957  014200  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20958  014202  0100               	movlb	0	; () banked
 20959  014204  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 20960  014206  A0D8               	btfss	status,0,c
 20961  014208  D012               	goto	l2784
 20962                           
 20963                           ; BSR set to: 0
 20964  01420A  0100               	movlb	0	; () banked
 20965  01420C  5164               	movf	___lldiv@divisor& (0+255),w,b
 20966  01420E  0100               	movlb	0	; () banked
 20967  014210  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 20968  014212  0100               	movlb	0	; () banked
 20969  014214  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20970  014216  0100               	movlb	0	; () banked
 20971  014218  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 20972  01421A  0100               	movlb	0	; () banked
 20973  01421C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20974  01421E  0100               	movlb	0	; () banked
 20975  014220  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 20976  014222  0100               	movlb	0	; () banked
 20977  014224  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20978  014226  0100               	movlb	0	; () banked
 20979  014228  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 20980                           
 20981                           ; BSR set to: 0
 20982  01422A  0100               	movlb	0	; () banked
 20983  01422C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 20984  01422E                     l2784:
 20985                           
 20986                           ; BSR set to: 0
 20987                           
 20988                           ; BSR set to: 0
 20989  01422E  0100               	movlb	0	; () banked
 20990  014230  90D8               	bcf	status,0,c
 20991  014232  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 20992  014234  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 20993  014236  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 20994  014238  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 20995                           
 20996                           ; BSR set to: 0
 20997  01423A  0100               	movlb	0	; () banked
 20998  01423C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 20999  01423E  D7CD               	goto	u9150
 21000  014240                     l2785:
 21001                           
 21002                           ; BSR set to: 0
 21003                           
 21004                           ; BSR set to: 0
 21005  014240  C068  F060         	movff	___lldiv@quotient,?___lldiv
 21006  014244  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 21007  014248  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 21008  01424C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 21009                           
 21010                           ; BSR set to: 0
 21011  014250  0012               	return		;funcret
 21012  014252                     __end_of___lldiv:
 21013                           	opt stack 0
 21014                           tosu	equ	0xFFF
 21015                           tosh	equ	0xFFE
 21016                           tosl	equ	0xFFD
 21017                           pclath	equ	0xFFA
 21018                           tblptru	equ	0xFF8
 21019                           tblptrh	equ	0xFF7
 21020                           tblptrl	equ	0xFF6
 21021                           tablat	equ	0xFF5
 21022                           prodh	equ	0xFF4
 21023                           prodl	equ	0xFF3
 21024                           intcon	equ	0xFF2
 21025                           postinc0	equ	0xFEE
 21026                           wreg	equ	0xFE8
 21027                           indf1	equ	0xFE7
 21028                           postdec1	equ	0xFE5
 21029                           fsr1h	equ	0xFE2
 21030                           fsr1l	equ	0xFE1
 21031                           indf2	equ	0xFDF
 21032                           postinc2	equ	0xFDE
 21033                           postdec2	equ	0xFDD
 21034                           plusw2	equ	0xFDB
 21035                           fsr2h	equ	0xFDA
 21036                           fsr2l	equ	0xFD9
 21037                           status	equ	0xFD8
 21038                           
 21039 ;; *************** function _Timer2_Clear *****************
 21040 ;; Defined at:
 21041 ;;		line 3 in file "Library/Timer2.c"
 21042 ;; Parameters:    Size  Location     Type
 21043 ;;		None
 21044 ;; Auto vars:     Size  Location     Type
 21045 ;;		None
 21046 ;; Return value:  Size  Location     Type
 21047 ;;                  1    wreg      void 
 21048 ;; Registers used:
 21049 ;;		None
 21050 ;; Tracked objects:
 21051 ;;		On entry : 0/0
 21052 ;;		On exit  : 0/0
 21053 ;;		Unchanged: 0/0
 21054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21059 ;;Total ram usage:        0 bytes
 21060 ;; Hardware stack levels used:    1
 21061 ;; Hardware stack levels required when called:    7
 21062 ;; This function calls:
 21063 ;;		Nothing
 21064 ;; This function is called by:
 21065 ;;		_Timer2_Init
 21066 ;; This function uses a non-reentrant model
 21067 ;;
 21068                           
 21069                           	psect	text97
 21070  01658C                     __ptext97:
 21071                           	opt stack 0
 21072  01658C                     _Timer2_Clear:
 21073                           	opt stack 18
 21074                           
 21075                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21076                           
 21077                           ; BSR set to: 0
 21078                           ;incstack = 0
 21079  01658C  929E               	bcf	3998,1,c	;volatile
 21080                           
 21081                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21082  01658E  929D               	bcf	3997,1,c	;volatile
 21083                           
 21084                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21085  016590  929F               	bcf	3999,1,c	;volatile
 21086  016592  0012               	return		;funcret
 21087  016594                     __end_of_Timer2_Clear:
 21088                           	opt stack 0
 21089                           tosu	equ	0xFFF
 21090                           tosh	equ	0xFFE
 21091                           tosl	equ	0xFFD
 21092                           pclath	equ	0xFFA
 21093                           tblptru	equ	0xFF8
 21094                           tblptrh	equ	0xFF7
 21095                           tblptrl	equ	0xFF6
 21096                           tablat	equ	0xFF5
 21097                           prodh	equ	0xFF4
 21098                           prodl	equ	0xFF3
 21099                           intcon	equ	0xFF2
 21100                           postinc0	equ	0xFEE
 21101                           wreg	equ	0xFE8
 21102                           indf1	equ	0xFE7
 21103                           postdec1	equ	0xFE5
 21104                           fsr1h	equ	0xFE2
 21105                           fsr1l	equ	0xFE1
 21106                           indf2	equ	0xFDF
 21107                           postinc2	equ	0xFDE
 21108                           postdec2	equ	0xFDD
 21109                           plusw2	equ	0xFDB
 21110                           fsr2h	equ	0xFDA
 21111                           fsr2l	equ	0xFD9
 21112                           status	equ	0xFD8
 21113                           
 21114 ;; *************** function _SPI_DisableISR *****************
 21115 ;; Defined at:
 21116 ;;		line 181 in file "Library/SPI.c"
 21117 ;; Parameters:    Size  Location     Type
 21118 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21119 ;;		 -> SPI1(11), SPI2(11), 
 21120 ;; Auto vars:     Size  Location     Type
 21121 ;;		None
 21122 ;; Return value:  Size  Location     Type
 21123 ;;                  1    wreg      void 
 21124 ;; Registers used:
 21125 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21126 ;; Tracked objects:
 21127 ;;		On entry : 0/0
 21128 ;;		On exit  : 0/0
 21129 ;;		Unchanged: 0/0
 21130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21135 ;;Total ram usage:        2 bytes
 21136 ;; Hardware stack levels used:    1
 21137 ;; Hardware stack levels required when called:    7
 21138 ;; This function calls:
 21139 ;;		Nothing
 21140 ;; This function is called by:
 21141 ;;		_SPI_Init
 21142 ;; This function uses a non-reentrant model
 21143 ;;
 21144                           
 21145                           	psect	text98
 21146  016176                     __ptext98:
 21147                           	opt stack 0
 21148  016176                     _SPI_DisableISR:
 21149                           	opt stack 19
 21150                           
 21151                           ;SPI.c: 183: switch (pInput->mChannel)
 21152                           
 21153                           ;incstack = 0
 21154  016176  D004               	goto	l654
 21155  016178                     l655:
 21156                           
 21157                           ; BSR set to: 0
 21158  016178  969D               	bcf	3997,3,c	;volatile
 21159  01617A  0012               	return	
 21160  01617C                     l657:
 21161                           
 21162                           ; BSR set to: 0
 21163  01617C  9EA3               	bcf	4003,7,c	;volatile
 21164                           
 21165                           ; BSR set to: 0
 21166                           ;SPI.c: 188: };
 21167                           
 21168                           ; BSR set to: 0
 21169                           
 21170                           ;SPI.c: 187: default: return;
 21171  01617E  0012               	return	
 21172  016180                     l654:
 21173                           
 21174                           ; BSR set to: 0
 21175  016180  0100               	movlb	0	; () banked
 21176  016182  EE20 F002          	lfsr	2,2
 21177  016186  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21178  016188  26D9               	addwf	fsr2l,f,c
 21179  01618A  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21180  01618C  22DA               	addwfc	fsr2h,f,c
 21181  01618E  50DF               	movf	indf2,w,c
 21182                           
 21183                           ; Switch size 1, requested type "space"
 21184                           ; Number of cases is 2, Range of values is 0 to 1
 21185                           ; switch strategies available:
 21186                           ; Name         Instructions Cycles
 21187                           ; simple_byte            7     4 (average)
 21188                           ;	Chosen strategy is simple_byte
 21189  016190  0A00               	xorlw	0	; case 0
 21190  016192  B4D8               	btfsc	status,2,c
 21191  016194  D7F1               	goto	l655
 21192  016196  0A01               	xorlw	1	; case 1
 21193  016198  A4D8               	btfss	status,2,c
 21194  01619A  0012               	return	
 21195  01619C  D7EF               	goto	l657
 21196  01619E                     __end_of_SPI_DisableISR:
 21197                           	opt stack 0
 21198                           tosu	equ	0xFFF
 21199                           tosh	equ	0xFFE
 21200                           tosl	equ	0xFFD
 21201                           pclath	equ	0xFFA
 21202                           tblptru	equ	0xFF8
 21203                           tblptrh	equ	0xFF7
 21204                           tblptrl	equ	0xFF6
 21205                           tablat	equ	0xFF5
 21206                           prodh	equ	0xFF4
 21207                           prodl	equ	0xFF3
 21208                           intcon	equ	0xFF2
 21209                           postinc0	equ	0xFEE
 21210                           wreg	equ	0xFE8
 21211                           indf1	equ	0xFE7
 21212                           postdec1	equ	0xFE5
 21213                           fsr1h	equ	0xFE2
 21214                           fsr1l	equ	0xFE1
 21215                           indf2	equ	0xFDF
 21216                           postinc2	equ	0xFDE
 21217                           postdec2	equ	0xFDD
 21218                           plusw2	equ	0xFDB
 21219                           fsr2h	equ	0xFDA
 21220                           fsr2l	equ	0xFD9
 21221                           status	equ	0xFD8
 21222                           
 21223 ;; *************** function _SPI_DCS *****************
 21224 ;; Defined at:
 21225 ;;		line 219 in file "Library/SPI.c"
 21226 ;; Parameters:    Size  Location     Type
 21227 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21228 ;;		 -> SPI1(11), SPI2(11), 
 21229 ;; Auto vars:     Size  Location     Type
 21230 ;;		None
 21231 ;; Return value:  Size  Location     Type
 21232 ;;                  1    wreg      void 
 21233 ;; Registers used:
 21234 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21235 ;; Tracked objects:
 21236 ;;		On entry : 0/0
 21237 ;;		On exit  : 0/0
 21238 ;;		Unchanged: 0/0
 21239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21244 ;;Total ram usage:        2 bytes
 21245 ;; Hardware stack levels used:    1
 21246 ;; Hardware stack levels required when called:    7
 21247 ;; This function calls:
 21248 ;;		Nothing
 21249 ;; This function is called by:
 21250 ;;		_SPI_Init
 21251 ;; This function uses a non-reentrant model
 21252 ;;
 21253                           
 21254                           	psect	text99
 21255  016036                     __ptext99:
 21256                           	opt stack 0
 21257  016036                     _SPI_DCS:
 21258                           	opt stack 19
 21259                           
 21260                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21261                           
 21262                           ; BSR set to: 0
 21263                           ;incstack = 0
 21264  016036  0100               	movlb	0	; () banked
 21265  016038  EE20 F002          	lfsr	2,2
 21266  01603C  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 21267  01603E  26D9               	addwf	fsr2l,f,c
 21268  016040  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21269  016042  22DA               	addwfc	fsr2h,f,c
 21270  016044  50DF               	movf	indf2,w,c
 21271  016046  A4D8               	btfss	status,2,c
 21272  016048  D007               	goto	l673
 21273                           
 21274                           ; BSR set to: 0
 21275                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21276  01604A  C0EE  FFD9         	movff	_PortC+4,fsr2l
 21277  01604E  C0EF  FFDA         	movff	_PortC+5,fsr2h
 21278  016052  0100               	movlb	0	; () banked
 21279  016054  84DF               	bsf	indf2,2,c
 21280  016056  0012               	return	
 21281  016058                     l673:
 21282                           
 21283                           ; BSR set to: 0
 21284                           ;SPI.c: 223: else
 21285                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21286                           
 21287                           ; BSR set to: 0
 21288  016058  C0E4  FFD9         	movff	_PortD+4,fsr2l
 21289  01605C  C0E5  FFDA         	movff	_PortD+5,fsr2h
 21290  016060  0100               	movlb	0	; () banked
 21291  016062  8EDF               	bsf	indf2,7,c
 21292  016064  0012               	return	
 21293  016066                     __end_of_SPI_DCS:
 21294                           	opt stack 0
 21295                           tosu	equ	0xFFF
 21296                           tosh	equ	0xFFE
 21297                           tosl	equ	0xFFD
 21298                           pclath	equ	0xFFA
 21299                           tblptru	equ	0xFF8
 21300                           tblptrh	equ	0xFF7
 21301                           tblptrl	equ	0xFF6
 21302                           tablat	equ	0xFF5
 21303                           prodh	equ	0xFF4
 21304                           prodl	equ	0xFF3
 21305                           intcon	equ	0xFF2
 21306                           postinc0	equ	0xFEE
 21307                           wreg	equ	0xFE8
 21308                           indf1	equ	0xFE7
 21309                           postdec1	equ	0xFE5
 21310                           fsr1h	equ	0xFE2
 21311                           fsr1l	equ	0xFE1
 21312                           indf2	equ	0xFDF
 21313                           postinc2	equ	0xFDE
 21314                           postdec2	equ	0xFDD
 21315                           plusw2	equ	0xFDB
 21316                           fsr2h	equ	0xFDA
 21317                           fsr2l	equ	0xFD9
 21318                           status	equ	0xFD8
 21319                           
 21320 ;; *************** function _Button_Init *****************
 21321 ;; Defined at:
 21322 ;;		line 18 in file "Library/Button.c"
 21323 ;; Parameters:    Size  Location     Type
 21324 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 21325 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21326 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 21327 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 21328 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21329 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 21330 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21331 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21332 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 21333 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21334 ;; Auto vars:     Size  Location     Type
 21335 ;;		None
 21336 ;; Return value:  Size  Location     Type
 21337 ;;                  1    wreg      void 
 21338 ;; Registers used:
 21339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21340 ;; Tracked objects:
 21341 ;;		On entry : 0/0
 21342 ;;		On exit  : 0/0
 21343 ;;		Unchanged: 0/0
 21344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21345 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21348 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21349 ;;Total ram usage:       13 bytes
 21350 ;; Hardware stack levels used:    1
 21351 ;; Hardware stack levels required when called:   15
 21352 ;; This function calls:
 21353 ;;		_HMI_InitButtons
 21354 ;;		_MXK_InitDIPSwitch
 21355 ;;		_MXK_InitTestButton
 21356 ;; This function is called by:
 21357 ;;		_HMI_Init
 21358 ;;		_FunctInitButton
 21359 ;; This function uses a non-reentrant model
 21360 ;;
 21361                           
 21362                           	psect	text100
 21363  013CEE                     __ptext100:
 21364                           	opt stack 0
 21365  013CEE                     _Button_Init:
 21366                           	opt stack 13
 21367                           
 21368                           ;Button.c: 21: if(pInput==(void*)0)
 21369                           
 21370                           ; BSR set to: 0
 21371                           ;incstack = 0
 21372  013CEE  0100               	movlb	0	; () banked
 21373  013CF0  519B               	movf	Button_Init@pInput& (0+255),w,b
 21374  013CF2  0100               	movlb	0	; () banked
 21375  013CF4  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21376  013CF6  B4D8               	btfsc	status,2,c
 21377  013CF8  0012               	return	
 21378                           
 21379                           ; BSR set to: 0
 21380                           ;Button.c: 23: if(pInitIO==(void*)0)
 21381                           
 21382                           ; BSR set to: 0
 21383                           
 21384                           ; BSR set to: 0
 21385                           ;Button.c: 22: return;
 21386  013CFA  0100               	movlb	0	; () banked
 21387  013CFC  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21388  013CFE  0100               	movlb	0	; () banked
 21389  013D00  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21390  013D02  0100               	movlb	0	; () banked
 21391  013D04  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21392  013D06  B4D8               	btfsc	status,2,c
 21393  013D08  0012               	return	
 21394                           
 21395                           ; BSR set to: 0
 21396                           ;Button.c: 25: if(pGetState==(void*)0)
 21397                           
 21398                           ; BSR set to: 0
 21399                           
 21400                           ; BSR set to: 0
 21401                           ;Button.c: 24: return;
 21402  013D0A  0100               	movlb	0	; () banked
 21403  013D0C  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 21404  013D0E  0100               	movlb	0	; () banked
 21405  013D10  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21406  013D12  0100               	movlb	0	; () banked
 21407  013D14  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21408  013D16  B4D8               	btfsc	status,2,c
 21409  013D18  0012               	return	
 21410                           
 21411                           ; BSR set to: 0
 21412                           ;Button.c: 27: if(pFunction==(void*)0)
 21413                           
 21414                           ; BSR set to: 0
 21415                           
 21416                           ; BSR set to: 0
 21417                           ;Button.c: 26: return;
 21418  013D1A  0100               	movlb	0	; () banked
 21419  013D1C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 21420  013D1E  0100               	movlb	0	; () banked
 21421  013D20  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21422  013D22  0100               	movlb	0	; () banked
 21423  013D24  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21424  013D26  B4D8               	btfsc	status,2,c
 21425  013D28  0012               	return	
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;Button.c: 30: if(pThreshold == 0)
 21429                           
 21430                           ; BSR set to: 0
 21431                           
 21432                           ; BSR set to: 0
 21433                           ;Button.c: 28: return;
 21434  013D2A  0100               	movlb	0	; () banked
 21435  013D2C  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 21436  013D2E  0100               	movlb	0	; () banked
 21437  013D30  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21438  013D32  A4D8               	btfss	status,2,c
 21439  013D34  D005               	goto	l8
 21440                           
 21441                           ; BSR set to: 0
 21442                           ;Button.c: 31: pThreshold = 1;
 21443  013D36  0E00               	movlw	0
 21444  013D38  0100               	movlb	0	; () banked
 21445  013D3A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21446  013D3C  0E01               	movlw	1
 21447  013D3E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21448  013D40                     l8:
 21449                           
 21450                           ; BSR set to: 0
 21451                           ;Button.c: 34: pInput->mState = 0;
 21452                           
 21453                           ; BSR set to: 0
 21454  013D40  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 21455  013D44  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21456  013D48  0E00               	movlw	0
 21457  013D4A  6EDF               	movwf	indf2,c
 21458                           
 21459                           ; BSR set to: 0
 21460                           ;Button.c: 35: pInput->mCount = 0;
 21461  013D4C  0100               	movlb	0	; () banked
 21462  013D4E  EE20 F001          	lfsr	2,1
 21463  013D52  519B               	movf	Button_Init@pInput& (0+255),w,b
 21464  013D54  26D9               	addwf	fsr2l,f,c
 21465  013D56  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21466  013D58  22DA               	addwfc	fsr2h,f,c
 21467  013D5A  0E00               	movlw	0
 21468  013D5C  6EDF               	movwf	indf2,c
 21469                           
 21470                           ; BSR set to: 0
 21471                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21472  013D5E  0100               	movlb	0	; () banked
 21473  013D60  EE20 F002          	lfsr	2,2
 21474  013D64  519B               	movf	Button_Init@pInput& (0+255),w,b
 21475  013D66  26D9               	addwf	fsr2l,f,c
 21476  013D68  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21477  013D6A  22DA               	addwfc	fsr2h,f,c
 21478  013D6C  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 21479  013D70  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21480                           
 21481                           ; BSR set to: 0
 21482                           ;Button.c: 37: pInput->mFunction = pFunction;
 21483  013D74  0100               	movlb	0	; () banked
 21484  013D76  EE20 F004          	lfsr	2,4
 21485  013D7A  519B               	movf	Button_Init@pInput& (0+255),w,b
 21486  013D7C  26D9               	addwf	fsr2l,f,c
 21487  013D7E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21488  013D80  22DA               	addwfc	fsr2h,f,c
 21489  013D82  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 21490  013D86  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21491  013D8A  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21492                           
 21493                           ; BSR set to: 0
 21494                           ;Button.c: 38: pInput->mGetState = pGetState;
 21495  013D8E  0100               	movlb	0	; () banked
 21496  013D90  EE20 F007          	lfsr	2,7
 21497  013D94  519B               	movf	Button_Init@pInput& (0+255),w,b
 21498  013D96  26D9               	addwf	fsr2l,f,c
 21499  013D98  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21500  013D9A  22DA               	addwfc	fsr2h,f,c
 21501  013D9C  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 21502  013DA0  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21503  013DA4  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21504                           
 21505                           ; BSR set to: 0
 21506                           ;Button.c: 41: pInitIO();
 21507  013DA8  D801               	call	u9768
 21508  013DAA  0012               	return	
 21509  013DAC                     u9768:
 21510  013DAC  0005               	push	
 21511  013DAE  6EFA               	movwf	pclath,c
 21512  013DB0  0100               	movlb	0	; () banked
 21513  013DB2  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21514  013DB4  6EFD               	movwf	tosl,c
 21515  013DB6  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21516  013DB8  6EFE               	movwf	tosh,c
 21517  013DBA  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21518  013DBC  6EFF               	movwf	tosu,c
 21519  013DBE  50FA               	movf	pclath,w,c
 21520  013DC0  0012               	return		;indir
 21521  013DC2                     __end_of_Button_Init:
 21522                           	opt stack 0
 21523                           tosu	equ	0xFFF
 21524                           tosh	equ	0xFFE
 21525                           tosl	equ	0xFFD
 21526                           pclath	equ	0xFFA
 21527                           tblptru	equ	0xFF8
 21528                           tblptrh	equ	0xFF7
 21529                           tblptrl	equ	0xFF6
 21530                           tablat	equ	0xFF5
 21531                           prodh	equ	0xFF4
 21532                           prodl	equ	0xFF3
 21533                           intcon	equ	0xFF2
 21534                           postinc0	equ	0xFEE
 21535                           wreg	equ	0xFE8
 21536                           indf1	equ	0xFE7
 21537                           postdec1	equ	0xFE5
 21538                           fsr1h	equ	0xFE2
 21539                           fsr1l	equ	0xFE1
 21540                           indf2	equ	0xFDF
 21541                           postinc2	equ	0xFDE
 21542                           postdec2	equ	0xFDD
 21543                           plusw2	equ	0xFDB
 21544                           fsr2h	equ	0xFDA
 21545                           fsr2l	equ	0xFD9
 21546                           status	equ	0xFD8
 21547                           
 21548 ;; *************** function _MXK_InitDIPSwitch *****************
 21549 ;; Defined at:
 21550 ;;		line 20 in file "Library/MXK.c"
 21551 ;; Parameters:    Size  Location     Type
 21552 ;;		None
 21553 ;; Auto vars:     Size  Location     Type
 21554 ;;		None
 21555 ;; Return value:  Size  Location     Type
 21556 ;;                  1    wreg      void 
 21557 ;; Registers used:
 21558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21559 ;; Tracked objects:
 21560 ;;		On entry : 0/0
 21561 ;;		On exit  : 0/0
 21562 ;;		Unchanged: 0/0
 21563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21568 ;;Total ram usage:        0 bytes
 21569 ;; Hardware stack levels used:    1
 21570 ;; Hardware stack levels required when called:   14
 21571 ;; This function calls:
 21572 ;;		_Port_SetQuadType
 21573 ;; This function is called by:
 21574 ;;		_FunctInitButton
 21575 ;;		_Button_Init
 21576 ;; This function uses a non-reentrant model
 21577 ;;
 21578                           
 21579                           	psect	text101
 21580  0162E0                     __ptext101:
 21581                           	opt stack 0
 21582  0162E0                     _MXK_InitDIPSwitch:
 21583                           	opt stack 13
 21584                           
 21585                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 21586                           
 21587                           ;incstack = 0
 21588  0162E0  0EE0               	movlw	low _PortD
 21589  0162E2  0100               	movlb	0	; () banked
 21590  0162E4  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 21591  0162E6  0E00               	movlw	high _PortD
 21592  0162E8  0100               	movlb	0	; () banked
 21593  0162EA  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 21594  0162EC  0E00               	movlw	0
 21595  0162EE  0100               	movlb	0	; () banked
 21596  0162F0  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 21597  0162F2  0E00               	movlw	0
 21598  0162F4  0100               	movlb	0	; () banked
 21599  0162F6  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 21600  0162F8  EC42  F08D         	call	_Port_SetQuadType	;wreg free
 21601  0162FC  0012               	return		;funcret
 21602  0162FE                     __end_of_MXK_InitDIPSwitch:
 21603                           	opt stack 0
 21604                           tosu	equ	0xFFF
 21605                           tosh	equ	0xFFE
 21606                           tosl	equ	0xFFD
 21607                           pclath	equ	0xFFA
 21608                           tblptru	equ	0xFF8
 21609                           tblptrh	equ	0xFF7
 21610                           tblptrl	equ	0xFF6
 21611                           tablat	equ	0xFF5
 21612                           prodh	equ	0xFF4
 21613                           prodl	equ	0xFF3
 21614                           intcon	equ	0xFF2
 21615                           postinc0	equ	0xFEE
 21616                           wreg	equ	0xFE8
 21617                           indf1	equ	0xFE7
 21618                           postdec1	equ	0xFE5
 21619                           fsr1h	equ	0xFE2
 21620                           fsr1l	equ	0xFE1
 21621                           indf2	equ	0xFDF
 21622                           postinc2	equ	0xFDE
 21623                           postdec2	equ	0xFDD
 21624                           plusw2	equ	0xFDB
 21625                           fsr2h	equ	0xFDA
 21626                           fsr2l	equ	0xFD9
 21627                           status	equ	0xFD8
 21628                           
 21629 ;; *************** function _HMI_InitButtons *****************
 21630 ;; Defined at:
 21631 ;;		line 21 in file "HMI.c"
 21632 ;; Parameters:    Size  Location     Type
 21633 ;;		None
 21634 ;; Auto vars:     Size  Location     Type
 21635 ;;		None
 21636 ;; Return value:  Size  Location     Type
 21637 ;;                  1    wreg      void 
 21638 ;; Registers used:
 21639 ;;		wreg, status,2
 21640 ;; Tracked objects:
 21641 ;;		On entry : 0/0
 21642 ;;		On exit  : 0/0
 21643 ;;		Unchanged: 0/0
 21644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21649 ;;Total ram usage:        0 bytes
 21650 ;; Hardware stack levels used:    1
 21651 ;; Hardware stack levels required when called:    7
 21652 ;; This function calls:
 21653 ;;		Nothing
 21654 ;; This function is called by:
 21655 ;;		_HMI_Init
 21656 ;;		_Button_Init
 21657 ;; This function uses a non-reentrant model
 21658 ;;
 21659                           
 21660                           	psect	text102
 21661  0165AA                     __ptext102:
 21662                           	opt stack 0
 21663  0165AA                     _HMI_InitButtons:
 21664                           	opt stack 20
 21665                           
 21666                           ;HMI.c: 23: TRISE = 0xFC;
 21667                           
 21668                           ;incstack = 0
 21669  0165AA  0EFC               	movlw	252
 21670  0165AC  6E96               	movwf	3990,c	;volatile
 21671  0165AE  0012               	return		;funcret
 21672  0165B0                     __end_of_HMI_InitButtons:
 21673                           	opt stack 0
 21674                           tosu	equ	0xFFF
 21675                           tosh	equ	0xFFE
 21676                           tosl	equ	0xFFD
 21677                           pclath	equ	0xFFA
 21678                           tblptru	equ	0xFF8
 21679                           tblptrh	equ	0xFF7
 21680                           tblptrl	equ	0xFF6
 21681                           tablat	equ	0xFF5
 21682                           prodh	equ	0xFF4
 21683                           prodl	equ	0xFF3
 21684                           intcon	equ	0xFF2
 21685                           postinc0	equ	0xFEE
 21686                           wreg	equ	0xFE8
 21687                           indf1	equ	0xFE7
 21688                           postdec1	equ	0xFE5
 21689                           fsr1h	equ	0xFE2
 21690                           fsr1l	equ	0xFE1
 21691                           indf2	equ	0xFDF
 21692                           postinc2	equ	0xFDE
 21693                           postdec2	equ	0xFDD
 21694                           plusw2	equ	0xFDB
 21695                           fsr2h	equ	0xFDA
 21696                           fsr2l	equ	0xFD9
 21697                           status	equ	0xFD8
 21698                           
 21699 ;; *************** function _MXK_InitTestButton *****************
 21700 ;; Defined at:
 21701 ;;		line 10 in file "Library/MXK.c"
 21702 ;; Parameters:    Size  Location     Type
 21703 ;;		None
 21704 ;; Auto vars:     Size  Location     Type
 21705 ;;		None
 21706 ;; Return value:  Size  Location     Type
 21707 ;;                  1    wreg      void 
 21708 ;; Registers used:
 21709 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21710 ;; Tracked objects:
 21711 ;;		On entry : 0/0
 21712 ;;		On exit  : 0/0
 21713 ;;		Unchanged: 0/0
 21714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21719 ;;Total ram usage:        0 bytes
 21720 ;; Hardware stack levels used:    1
 21721 ;; Hardware stack levels required when called:   12
 21722 ;; This function calls:
 21723 ;;		_Port_SetPinType
 21724 ;; This function is called by:
 21725 ;;		_FunctInitButton
 21726 ;;		_Button_Init
 21727 ;; This function uses a non-reentrant model
 21728 ;;
 21729                           
 21730                           	psect	text103
 21731  0162FE                     __ptext103:
 21732                           	opt stack 0
 21733  0162FE                     _MXK_InitTestButton:
 21734                           	opt stack 15
 21735                           
 21736                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 21737                           
 21738                           ;incstack = 0
 21739  0162FE  0EA1               	movlw	low _PortB
 21740  016300  0100               	movlb	0	; () banked
 21741  016302  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21742  016304  0E03               	movlw	high _PortB
 21743  016306  0100               	movlb	0	; () banked
 21744  016308  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21745  01630A  0E04               	movlw	4
 21746  01630C  0100               	movlb	0	; () banked
 21747  01630E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21748  016310  0E00               	movlw	0
 21749  016312  0100               	movlb	0	; () banked
 21750  016314  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21751  016316  EC4F  F093         	call	_Port_SetPinType	;wreg free
 21752  01631A  0012               	return		;funcret
 21753  01631C                     __end_of_MXK_InitTestButton:
 21754                           	opt stack 0
 21755                           tosu	equ	0xFFF
 21756                           tosh	equ	0xFFE
 21757                           tosl	equ	0xFFD
 21758                           pclath	equ	0xFFA
 21759                           tblptru	equ	0xFF8
 21760                           tblptrh	equ	0xFF7
 21761                           tblptrl	equ	0xFF6
 21762                           tablat	equ	0xFF5
 21763                           prodh	equ	0xFF4
 21764                           prodl	equ	0xFF3
 21765                           intcon	equ	0xFF2
 21766                           postinc0	equ	0xFEE
 21767                           wreg	equ	0xFE8
 21768                           indf1	equ	0xFE7
 21769                           postdec1	equ	0xFE5
 21770                           fsr1h	equ	0xFE2
 21771                           fsr1l	equ	0xFE1
 21772                           indf2	equ	0xFDF
 21773                           postinc2	equ	0xFDE
 21774                           postdec2	equ	0xFDD
 21775                           plusw2	equ	0xFDB
 21776                           fsr2h	equ	0xFDA
 21777                           fsr2l	equ	0xFD9
 21778                           status	equ	0xFD8
 21779                           
 21780 ;; *************** function _Port_SetPinType *****************
 21781 ;; Defined at:
 21782 ;;		line 189 in file "Library/Port.c"
 21783 ;; Parameters:    Size  Location     Type
 21784 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21785 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21786 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21787 ;;  pPin            1   40[BANK0 ] enum E6750
 21788 ;;  pType           1   41[BANK0 ] enum E6795
 21789 ;; Auto vars:     Size  Location     Type
 21790 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 21791 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 21792 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 21793 ;;  Output          1   42[BANK0 ] enum E6475
 21794 ;; Return value:  Size  Location     Type
 21795 ;;                  1    wreg      enum E6475
 21796 ;; Registers used:
 21797 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21798 ;; Tracked objects:
 21799 ;;		On entry : 0/0
 21800 ;;		On exit  : 0/0
 21801 ;;		Unchanged: 0/0
 21802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21803 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21804 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21806 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21807 ;;Total ram usage:        7 bytes
 21808 ;; Hardware stack levels used:    1
 21809 ;; Hardware stack levels required when called:   11
 21810 ;; This function calls:
 21811 ;;		_Byte_SetBit
 21812 ;;		_PortProperty_Valid
 21813 ;;		_Word_SetPair
 21814 ;; This function is called by:
 21815 ;;		_Configure_GPIOs
 21816 ;;		_LED_Init
 21817 ;;		_Port_Init
 21818 ;;		_SPI_Init
 21819 ;;		_Motor_Init
 21820 ;;		_MXK_InitTestButton
 21821 ;;		_MXK_Init
 21822 ;;		_I2C_Init
 21823 ;; This function uses a non-reentrant model
 21824 ;;
 21825                           
 21826                           	psect	text104
 21827  01269E                     __ptext104:
 21828                           	opt stack 0
 21829  01269E                     _Port_SetPinType:
 21830                           	opt stack 17
 21831                           
 21832                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 21833                           
 21834                           ;incstack = 0
 21835  01269E  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 21836  0126A2  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 21837  0126A6  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 21838  0126AA  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 21839                           
 21840                           ;Port.c: 192: ePinError Output = ePinErrorState;
 21841  0126AE  0E05               	movlw	5
 21842  0126B0  0100               	movlb	0	; () banked
 21843  0126B2  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21844                           
 21845                           ;Port.c: 193: switch (pType)
 21846  0126B4  D0B5               	goto	l412
 21847  0126B6                     
 21848                           ; BSR set to: 0
 21849                           ;Port.c: 197: {
 21850                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21851                           
 21852                           ; BSR set to: 0
 21853  0126B6  0100               	movlb	0	; () banked
 21854  0126B8  EE20 F002          	lfsr	2,2
 21855  0126BC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21856  0126BE  26D9               	addwf	fsr2l,f,c
 21857  0126C0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21858  0126C2  22DA               	addwfc	fsr2h,f,c
 21859  0126C4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21860  0126C8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21861  0126CC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21862  0126D0  0E01               	movlw	1
 21863  0126D2  0100               	movlb	0	; () banked
 21864  0126D4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21865  0126D6  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 21866                           
 21867                           ;Port.c: 203: break;
 21868  0126DA  D0B0               	goto	l414
 21869  0126DC                     
 21870                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 21871  0126DC  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21872  0126E0  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21873  0126E4  0E01               	movlw	1
 21874  0126E6  0100               	movlb	0	; () banked
 21875  0126E8  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21876  0126EA  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21877  0126EE  ECF8  F0A7         	call	_PortProperty_Valid	;wreg free
 21878  0126F2  0100               	movlb	0	; () banked
 21879  0126F4  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21880  0126F6  0100               	movlb	0	; () banked
 21881  0126F8  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 21882  0126FA  A4D8               	btfss	status,2,c
 21883  0126FC  0012               	return	
 21884                           
 21885                           ; BSR set to: 0
 21886                           ;Port.c: 208: {
 21887                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 21888  0126FE  0100               	movlb	0	; () banked
 21889  012700  EE20 F002          	lfsr	2,2
 21890  012704  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21891  012706  26D9               	addwf	fsr2l,f,c
 21892  012708  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21893  01270A  22DA               	addwfc	fsr2h,f,c
 21894  01270C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21895  012710  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21896  012714  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21897  012718  0E00               	movlw	0
 21898  01271A  0100               	movlb	0	; () banked
 21899  01271C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21900  01271E  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 21901                           
 21902                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 21903  012722  0100               	movlb	0	; () banked
 21904  012724  EE20 F004          	lfsr	2,4
 21905  012728  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21906  01272A  26D9               	addwf	fsr2l,f,c
 21907  01272C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21908  01272E  22DA               	addwfc	fsr2h,f,c
 21909  012730  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21910  012734  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21911  012738  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21912  01273C  0E00               	movlw	0
 21913  01273E  0100               	movlb	0	; () banked
 21914  012740  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21915  012742  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 21916                           
 21917                           ;Port.c: 214: break;
 21918  012746  D07A               	goto	l414
 21919  012748                     
 21920                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 21921                           
 21922                           ;Port.c: 218: case eTypeOutputOpenSource:
 21923  012748  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21924  01274C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21925  012750  0E02               	movlw	2
 21926  012752  0100               	movlb	0	; () banked
 21927  012754  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21928  012756  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21929  01275A  ECF8  F0A7         	call	_PortProperty_Valid	;wreg free
 21930  01275E  0100               	movlb	0	; () banked
 21931  012760  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21932  012762  0100               	movlb	0	; () banked
 21933  012764  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 21934  012766  A4D8               	btfss	status,2,c
 21935  012768  0012               	return	
 21936                           
 21937                           ; BSR set to: 0
 21938                           ;Port.c: 220: {
 21939                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21940  01276A  0100               	movlb	0	; () banked
 21941  01276C  EE20 F002          	lfsr	2,2
 21942  012770  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21943  012772  26D9               	addwf	fsr2l,f,c
 21944  012774  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21945  012776  22DA               	addwfc	fsr2h,f,c
 21946  012778  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21947  01277C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21948  012780  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21949  012784  0E01               	movlw	1
 21950  012786  0100               	movlb	0	; () banked
 21951  012788  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21952  01278A  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 21953                           
 21954                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 21955  01278E  0100               	movlb	0	; () banked
 21956  012790  EE20 F004          	lfsr	2,4
 21957  012794  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21958  012796  26D9               	addwf	fsr2l,f,c
 21959  012798  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21960  01279A  22DA               	addwfc	fsr2h,f,c
 21961  01279C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21962  0127A0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21963  0127A4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21964  0127A8  0E01               	movlw	1
 21965  0127AA  0100               	movlb	0	; () banked
 21966  0127AC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21967  0127AE  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 21968                           
 21969                           ;Port.c: 226: break;
 21970  0127B2  D044               	goto	l414
 21971  0127B4                     
 21972                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 21973                           
 21974                           ;Port.c: 230: case eTypeOutputPushPull:
 21975  0127B4  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21976  0127B8  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21977  0127BC  0E00               	movlw	0
 21978  0127BE  0100               	movlb	0	; () banked
 21979  0127C0  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21980  0127C2  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21981  0127C6  ECF8  F0A7         	call	_PortProperty_Valid	;wreg free
 21982  0127CA  0100               	movlb	0	; () banked
 21983  0127CC  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21984  0127CE  0100               	movlb	0	; () banked
 21985  0127D0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 21986  0127D2  A4D8               	btfss	status,2,c
 21987  0127D4  0012               	return	
 21988                           
 21989                           ; BSR set to: 0
 21990                           ;Port.c: 232: {
 21991                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 21992  0127D6  0100               	movlb	0	; () banked
 21993  0127D8  EE20 F002          	lfsr	2,2
 21994  0127DC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21995  0127DE  26D9               	addwf	fsr2l,f,c
 21996  0127E0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21997  0127E2  22DA               	addwfc	fsr2h,f,c
 21998  0127E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21999  0127E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22000  0127EC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22001  0127F0  0E00               	movlw	0
 22002  0127F2  0100               	movlb	0	; () banked
 22003  0127F4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22004  0127F6  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 22005                           
 22006                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22007  0127FA  0100               	movlb	0	; () banked
 22008  0127FC  EE20 F004          	lfsr	2,4
 22009  012800  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22010  012802  26D9               	addwf	fsr2l,f,c
 22011  012804  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22012  012806  22DA               	addwfc	fsr2h,f,c
 22013  012808  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22014  01280C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22015  012810  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22016  012814  0E00               	movlw	0
 22017  012816  0100               	movlb	0	; () banked
 22018  012818  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22019  01281A  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 22020                           
 22021                           ;Port.c: 239: }
 22022                           
 22023                           ;Port.c: 238: break;
 22024  01281E  D00E               	goto	l414
 22025  012820                     l412:
 22026  012820  0100               	movlb	0	; () banked
 22027  012822  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 22028                           
 22029                           ; Switch size 1, requested type "space"
 22030                           ; Number of cases is 4, Range of values is 0 to 3
 22031                           ; switch strategies available:
 22032                           ; Name         Instructions Cycles
 22033                           ; simple_byte           13     7 (average)
 22034                           ;	Chosen strategy is simple_byte
 22035  012824  0A00               	xorlw	0	; case 0
 22036  012826  B4D8               	btfsc	status,2,c
 22037  012828  D746               	goto	l413
 22038  01282A  0A01               	xorlw	1	; case 1
 22039  01282C  B4D8               	btfsc	status,2,c
 22040  01282E  D756               	goto	l415
 22041  012830  0A03               	xorlw	3	; case 2
 22042  012832  B4D8               	btfsc	status,2,c
 22043  012834  D789               	goto	l417
 22044  012836  0A01               	xorlw	1	; case 3
 22045  012838  B4D8               	btfsc	status,2,c
 22046  01283A  D7BC               	goto	l421
 22047  01283C                     l414:
 22048                           
 22049                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22050                           
 22051                           ; BSR set to: 0
 22052  01283C  0E08               	movlw	8
 22053  01283E  0100               	movlb	0	; () banked
 22054  012840  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22055  012842  0100               	movlb	0	; () banked
 22056  012844  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22057  012846  0E00               	movlw	0
 22058  012848  0100               	movlb	0	; () banked
 22059  01284A  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22060  01284C  0100               	movlb	0	; () banked
 22061  01284E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22062  012850  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22063  012854  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22064  012858  EC15  F0AE         	call	_Word_SetPair	;wreg free
 22065  01285C  0012               	return	
 22066  01285E                     __end_of_Port_SetPinType:
 22067                           	opt stack 0
 22068                           tosu	equ	0xFFF
 22069                           tosh	equ	0xFFE
 22070                           tosl	equ	0xFFD
 22071                           pclath	equ	0xFFA
 22072                           tblptru	equ	0xFF8
 22073                           tblptrh	equ	0xFF7
 22074                           tblptrl	equ	0xFF6
 22075                           tablat	equ	0xFF5
 22076                           prodh	equ	0xFF4
 22077                           prodl	equ	0xFF3
 22078                           intcon	equ	0xFF2
 22079                           postinc0	equ	0xFEE
 22080                           wreg	equ	0xFE8
 22081                           indf1	equ	0xFE7
 22082                           postdec1	equ	0xFE5
 22083                           fsr1h	equ	0xFE2
 22084                           fsr1l	equ	0xFE1
 22085                           indf2	equ	0xFDF
 22086                           postinc2	equ	0xFDE
 22087                           postdec2	equ	0xFDD
 22088                           plusw2	equ	0xFDB
 22089                           fsr2h	equ	0xFDA
 22090                           fsr2l	equ	0xFD9
 22091                           status	equ	0xFD8
 22092                           
 22093 ;; *************** function _Port_SetQuadType *****************
 22094 ;; Defined at:
 22095 ;;		line 399 in file "Library/Port.c"
 22096 ;; Parameters:    Size  Location     Type
 22097 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22098 ;;		 -> PortB(10), PortD(10), 
 22099 ;;  pQuad           1   56[BANK0 ] enum E6776
 22100 ;;  pType           1   57[BANK0 ] enum E6795
 22101 ;; Auto vars:     Size  Location     Type
 22102 ;;  Output          1   58[BANK0 ] enum E6475
 22103 ;; Return value:  Size  Location     Type
 22104 ;;                  1    wreg      enum E6475
 22105 ;; Registers used:
 22106 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22107 ;; Tracked objects:
 22108 ;;		On entry : 0/0
 22109 ;;		On exit  : 0/0
 22110 ;;		Unchanged: 0/0
 22111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22115 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22116 ;;Total ram usage:        5 bytes
 22117 ;; Hardware stack levels used:    1
 22118 ;; Hardware stack levels required when called:   13
 22119 ;; This function calls:
 22120 ;;		_Byte_SetQuad
 22121 ;;		_Port_CheckQuadType
 22122 ;;		_Word_SetPair
 22123 ;; This function is called by:
 22124 ;;		_MXK_InitDIPSwitch
 22125 ;;		_MXK_Init
 22126 ;; This function uses a non-reentrant model
 22127 ;;
 22128                           
 22129                           	psect	text105
 22130  011A84                     __ptext105:
 22131                           	opt stack 0
 22132  011A84                     _Port_SetQuadType:
 22133                           	opt stack 15
 22134                           
 22135                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22136                           
 22137                           ;incstack = 0
 22138  011A84  0E05               	movlw	5
 22139  011A86  0100               	movlb	0	; () banked
 22140  011A88  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22141                           
 22142                           ;Port.c: 403: switch (pType)
 22143  011A8A  D0C7               	goto	l476
 22144  011A8C                     
 22145                           ; BSR set to: 0
 22146                           ;Port.c: 407: {
 22147                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22148                           
 22149                           ; BSR set to: 0
 22150  011A8C  0100               	movlb	0	; () banked
 22151  011A8E  EE20 F002          	lfsr	2,2
 22152  011A92  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22153  011A94  26D9               	addwf	fsr2l,f,c
 22154  011A96  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22155  011A98  22DA               	addwfc	fsr2h,f,c
 22156  011A9A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22157  011A9E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22158  011AA2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22159  011AA6  0E0F               	movlw	15
 22160  011AA8  0100               	movlb	0	; () banked
 22161  011AAA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22162  011AAC  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22163                           
 22164                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22165  011AB0  0100               	movlb	0	; () banked
 22166  011AB2  EE20 F004          	lfsr	2,4
 22167  011AB6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22168  011AB8  26D9               	addwf	fsr2l,f,c
 22169  011ABA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22170  011ABC  22DA               	addwfc	fsr2h,f,c
 22171  011ABE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22172  011AC2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22173  011AC6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22174  011ACA  0E00               	movlw	0
 22175  011ACC  0100               	movlb	0	; () banked
 22176  011ACE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22177  011AD0  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22178                           
 22179                           ;Port.c: 413: }
 22180                           ;Port.c: 415: break;
 22181  011AD4  D0B0               	goto	l478
 22182  011AD6                     
 22183                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22184  011AD6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22185  011ADA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22186  011ADE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22187  011AE2  0E03               	movlw	3
 22188  011AE4  0100               	movlb	0	; () banked
 22189  011AE6  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22190  011AE8  EC3D  F0AC         	call	_Port_CheckQuadType	;wreg free
 22191  011AEC  0100               	movlb	0	; () banked
 22192  011AEE  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22193  011AF0  0100               	movlb	0	; () banked
 22194  011AF2  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22195  011AF4  A4D8               	btfss	status,2,c
 22196  011AF6  0012               	return	
 22197                           
 22198                           ; BSR set to: 0
 22199                           ;Port.c: 418: {
 22200                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22201  011AF8  0100               	movlb	0	; () banked
 22202  011AFA  EE20 F002          	lfsr	2,2
 22203  011AFE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22204  011B00  26D9               	addwf	fsr2l,f,c
 22205  011B02  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22206  011B04  22DA               	addwfc	fsr2h,f,c
 22207  011B06  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22208  011B0A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22209  011B0E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22210  011B12  0E00               	movlw	0
 22211  011B14  0100               	movlb	0	; () banked
 22212  011B16  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22213  011B18  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22214                           
 22215                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22216  011B1C  0100               	movlb	0	; () banked
 22217  011B1E  EE20 F004          	lfsr	2,4
 22218  011B22  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22219  011B24  26D9               	addwf	fsr2l,f,c
 22220  011B26  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22221  011B28  22DA               	addwfc	fsr2h,f,c
 22222  011B2A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22223  011B2E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22224  011B32  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22225  011B36  0E00               	movlw	0
 22226  011B38  0100               	movlb	0	; () banked
 22227  011B3A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22228  011B3C  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22229                           
 22230                           ;Port.c: 424: }
 22231  011B40  D07A               	goto	l478
 22232  011B42                     
 22233                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22234  011B42  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22235  011B46  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22236  011B4A  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22237  011B4E  0E03               	movlw	3
 22238  011B50  0100               	movlb	0	; () banked
 22239  011B52  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22240  011B54  EC3D  F0AC         	call	_Port_CheckQuadType	;wreg free
 22241  011B58  0100               	movlb	0	; () banked
 22242  011B5A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22243  011B5C  0100               	movlb	0	; () banked
 22244  011B5E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22245  011B60  A4D8               	btfss	status,2,c
 22246  011B62  0012               	return	
 22247                           
 22248                           ; BSR set to: 0
 22249                           ;Port.c: 429: {
 22250                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22251  011B64  0100               	movlb	0	; () banked
 22252  011B66  EE20 F002          	lfsr	2,2
 22253  011B6A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22254  011B6C  26D9               	addwf	fsr2l,f,c
 22255  011B6E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22256  011B70  22DA               	addwfc	fsr2h,f,c
 22257  011B72  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22258  011B76  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22259  011B7A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22260  011B7E  0E0F               	movlw	15
 22261  011B80  0100               	movlb	0	; () banked
 22262  011B82  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22263  011B84  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22264                           
 22265                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22266  011B88  0100               	movlb	0	; () banked
 22267  011B8A  EE20 F004          	lfsr	2,4
 22268  011B8E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22269  011B90  26D9               	addwf	fsr2l,f,c
 22270  011B92  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22271  011B94  22DA               	addwfc	fsr2h,f,c
 22272  011B96  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22273  011B9A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22274  011B9E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22275  011BA2  0E0F               	movlw	15
 22276  011BA4  0100               	movlb	0	; () banked
 22277  011BA6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22278  011BA8  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22279                           
 22280                           ;Port.c: 435: }
 22281  011BAC  D044               	goto	l478
 22282  011BAE                     
 22283                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22284  011BAE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22285  011BB2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22286  011BB6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22287  011BBA  0E03               	movlw	3
 22288  011BBC  0100               	movlb	0	; () banked
 22289  011BBE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22290  011BC0  EC3D  F0AC         	call	_Port_CheckQuadType	;wreg free
 22291  011BC4  0100               	movlb	0	; () banked
 22292  011BC6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22293  011BC8  0100               	movlb	0	; () banked
 22294  011BCA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22295  011BCC  A4D8               	btfss	status,2,c
 22296  011BCE  0012               	return	
 22297                           
 22298                           ; BSR set to: 0
 22299                           ;Port.c: 440: {
 22300                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22301  011BD0  0100               	movlb	0	; () banked
 22302  011BD2  EE20 F002          	lfsr	2,2
 22303  011BD6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22304  011BD8  26D9               	addwf	fsr2l,f,c
 22305  011BDA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22306  011BDC  22DA               	addwfc	fsr2h,f,c
 22307  011BDE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22308  011BE2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22309  011BE6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22310  011BEA  0E00               	movlw	0
 22311  011BEC  0100               	movlb	0	; () banked
 22312  011BEE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22313  011BF0  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22314                           
 22315                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22316  011BF4  0100               	movlb	0	; () banked
 22317  011BF6  EE20 F004          	lfsr	2,4
 22318  011BFA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22319  011BFC  26D9               	addwf	fsr2l,f,c
 22320  011BFE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22321  011C00  22DA               	addwfc	fsr2h,f,c
 22322  011C02  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22323  011C06  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22324  011C0A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22325  011C0E  0E00               	movlw	0
 22326  011C10  0100               	movlb	0	; () banked
 22327  011C12  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22328  011C14  EC04  F0B1         	call	_Byte_SetQuad	;wreg free
 22329                           
 22330                           ;Port.c: 446: }
 22331  011C18  D00E               	goto	l478
 22332  011C1A                     l476:
 22333  011C1A  0100               	movlb	0	; () banked
 22334  011C1C  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 22335                           
 22336                           ; Switch size 1, requested type "space"
 22337                           ; Number of cases is 4, Range of values is 0 to 3
 22338                           ; switch strategies available:
 22339                           ; Name         Instructions Cycles
 22340                           ; simple_byte           13     7 (average)
 22341                           ;	Chosen strategy is simple_byte
 22342  011C1E  0A00               	xorlw	0	; case 0
 22343  011C20  B4D8               	btfsc	status,2,c
 22344  011C22  D734               	goto	l477
 22345  011C24  0A01               	xorlw	1	; case 1
 22346  011C26  B4D8               	btfsc	status,2,c
 22347  011C28  D756               	goto	l479
 22348  011C2A  0A03               	xorlw	3	; case 2
 22349  011C2C  B4D8               	btfsc	status,2,c
 22350  011C2E  D789               	goto	l483
 22351  011C30  0A01               	xorlw	1	; case 3
 22352  011C32  B4D8               	btfsc	status,2,c
 22353  011C34  D7BC               	goto	l486
 22354  011C36                     l478:
 22355                           
 22356                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22357                           
 22358                           ; BSR set to: 0
 22359  011C36  0E08               	movlw	8
 22360  011C38  0100               	movlb	0	; () banked
 22361  011C3A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22362  011C3C  0100               	movlb	0	; () banked
 22363  011C3E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22364  011C40  0E00               	movlw	0
 22365  011C42  0100               	movlb	0	; () banked
 22366  011C44  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22367  011C46  0100               	movlb	0	; () banked
 22368  011C48  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22369  011C4A  0100               	movlb	0	; () banked
 22370  011C4C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22371  011C4E  0D04               	mullw	4
 22372  011C50  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 22373  011C54  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22374  011C58  EC15  F0AE         	call	_Word_SetPair	;wreg free
 22375                           
 22376                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22377  011C5C  0E08               	movlw	8
 22378  011C5E  0100               	movlb	0	; () banked
 22379  011C60  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22380  011C62  0100               	movlb	0	; () banked
 22381  011C64  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22382  011C66  0E00               	movlw	0
 22383  011C68  0100               	movlb	0	; () banked
 22384  011C6A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22385  011C6C  0100               	movlb	0	; () banked
 22386  011C6E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22387  011C70  0100               	movlb	0	; () banked
 22388  011C72  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22389  011C74  0D04               	mullw	4
 22390  011C76  28F3               	incf	prodl,w,c
 22391  011C78  0100               	movlb	0	; () banked
 22392  011C7A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22393  011C7C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22394  011C80  EC15  F0AE         	call	_Word_SetPair	;wreg free
 22395                           
 22396                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22397  011C84  0E08               	movlw	8
 22398  011C86  0100               	movlb	0	; () banked
 22399  011C88  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22400  011C8A  0100               	movlb	0	; () banked
 22401  011C8C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22402  011C8E  0E00               	movlw	0
 22403  011C90  0100               	movlb	0	; () banked
 22404  011C92  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22405  011C94  0100               	movlb	0	; () banked
 22406  011C96  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22407  011C98  0100               	movlb	0	; () banked
 22408  011C9A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22409  011C9C  0D04               	mullw	4
 22410  011C9E  50F3               	movf	prodl,w,c
 22411  011CA0  0F02               	addlw	2
 22412  011CA2  0100               	movlb	0	; () banked
 22413  011CA4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22414  011CA6  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22415  011CAA  EC15  F0AE         	call	_Word_SetPair	;wreg free
 22416                           
 22417                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22418  011CAE  0E08               	movlw	8
 22419  011CB0  0100               	movlb	0	; () banked
 22420  011CB2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22421  011CB4  0100               	movlb	0	; () banked
 22422  011CB6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22423  011CB8  0E00               	movlw	0
 22424  011CBA  0100               	movlb	0	; () banked
 22425  011CBC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22426  011CBE  0100               	movlb	0	; () banked
 22427  011CC0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22428  011CC2  0100               	movlb	0	; () banked
 22429  011CC4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22430  011CC6  0D04               	mullw	4
 22431  011CC8  50F3               	movf	prodl,w,c
 22432  011CCA  0F03               	addlw	3
 22433  011CCC  0100               	movlb	0	; () banked
 22434  011CCE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22435  011CD0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22436  011CD4  EC15  F0AE         	call	_Word_SetPair	;wreg free
 22437  011CD8  0012               	return	
 22438  011CDA                     __end_of_Port_SetQuadType:
 22439                           	opt stack 0
 22440                           tosu	equ	0xFFF
 22441                           tosh	equ	0xFFE
 22442                           tosl	equ	0xFFD
 22443                           pclath	equ	0xFFA
 22444                           tblptru	equ	0xFF8
 22445                           tblptrh	equ	0xFF7
 22446                           tblptrl	equ	0xFF6
 22447                           tablat	equ	0xFF5
 22448                           prodh	equ	0xFF4
 22449                           prodl	equ	0xFF3
 22450                           intcon	equ	0xFF2
 22451                           postinc0	equ	0xFEE
 22452                           wreg	equ	0xFE8
 22453                           indf1	equ	0xFE7
 22454                           postdec1	equ	0xFE5
 22455                           fsr1h	equ	0xFE2
 22456                           fsr1l	equ	0xFE1
 22457                           indf2	equ	0xFDF
 22458                           postinc2	equ	0xFDE
 22459                           postdec2	equ	0xFDD
 22460                           plusw2	equ	0xFDB
 22461                           fsr2h	equ	0xFDA
 22462                           fsr2l	equ	0xFD9
 22463                           status	equ	0xFD8
 22464                           
 22465 ;; *************** function _Word_SetPair *****************
 22466 ;; Defined at:
 22467 ;;		line 149 in file "Library/Types.c"
 22468 ;; Parameters:    Size  Location     Type
 22469 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22470 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22471 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22472 ;;  pPair           1   17[BANK0 ] unsigned char 
 22473 ;;  pValue          1   18[BANK0 ] unsigned char 
 22474 ;; Auto vars:     Size  Location     Type
 22475 ;;		None
 22476 ;; Return value:  Size  Location     Type
 22477 ;;                  1    wreg      void 
 22478 ;; Registers used:
 22479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22480 ;; Tracked objects:
 22481 ;;		On entry : 0/0
 22482 ;;		On exit  : 0/0
 22483 ;;		Unchanged: 0/0
 22484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22488 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22489 ;;Total ram usage:        4 bytes
 22490 ;; Hardware stack levels used:    1
 22491 ;; Hardware stack levels required when called:    9
 22492 ;; This function calls:
 22493 ;;		_Byte_SetPair
 22494 ;; This function is called by:
 22495 ;;		_Port_SetPinType
 22496 ;;		_Port_SetQuadType
 22497 ;;		_Port_SetType
 22498 ;;		_Port_SetPairType
 22499 ;;		_PortProperty_Init
 22500 ;; This function uses a non-reentrant model
 22501 ;;
 22502                           
 22503                           	psect	text106
 22504  015C2A                     __ptext106:
 22505                           	opt stack 0
 22506  015C2A                     _Word_SetPair:
 22507                           	opt stack 18
 22508                           
 22509                           ;Types.c: 151: if (pPair >= 4)
 22510                           
 22511                           ;incstack = 0
 22512  015C2A  0E03               	movlw	3
 22513  015C2C  0100               	movlb	0	; () banked
 22514  015C2E  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22515  015C30  D014               	goto	l776
 22516                           
 22517                           ; BSR set to: 0
 22518                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22519  015C32  0E01               	movlw	1
 22520  015C34  0100               	movlb	0	; () banked
 22521  015C36  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 22522  015C38  0100               	movlb	0	; () banked
 22523  015C3A  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 22524  015C3C  0E00               	movlw	0
 22525  015C3E  0100               	movlb	0	; () banked
 22526  015C40  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22527  015C42  0100               	movlb	0	; () banked
 22528  015C44  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22529  015C46  0100               	movlb	0	; () banked
 22530  015C48  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 22531  015C4A  0FFC               	addlw	252
 22532  015C4C  0100               	movlb	0	; () banked
 22533  015C4E  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 22534  015C50  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22535  015C54  ECF3  F0B0         	call	_Byte_SetPair	;wreg free
 22536  015C58  0012               	return	
 22537  015C5A                     l776:
 22538                           
 22539                           ;Types.c: 153: else
 22540                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22541  015C5A  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22542  015C5E  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22543  015C62  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22544  015C66  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22545  015C6A  ECF3  F0B0         	call	_Byte_SetPair	;wreg free
 22546  015C6E  0012               	return	
 22547  015C70                     __end_of_Word_SetPair:
 22548                           	opt stack 0
 22549                           tosu	equ	0xFFF
 22550                           tosh	equ	0xFFE
 22551                           tosl	equ	0xFFD
 22552                           pclath	equ	0xFFA
 22553                           tblptru	equ	0xFF8
 22554                           tblptrh	equ	0xFF7
 22555                           tblptrl	equ	0xFF6
 22556                           tablat	equ	0xFF5
 22557                           prodh	equ	0xFF4
 22558                           prodl	equ	0xFF3
 22559                           intcon	equ	0xFF2
 22560                           postinc0	equ	0xFEE
 22561                           wreg	equ	0xFE8
 22562                           indf1	equ	0xFE7
 22563                           postdec1	equ	0xFE5
 22564                           fsr1h	equ	0xFE2
 22565                           fsr1l	equ	0xFE1
 22566                           indf2	equ	0xFDF
 22567                           postinc2	equ	0xFDE
 22568                           postdec2	equ	0xFDD
 22569                           plusw2	equ	0xFDB
 22570                           fsr2h	equ	0xFDA
 22571                           fsr2l	equ	0xFD9
 22572                           status	equ	0xFD8
 22573                           
 22574 ;; *************** function _Byte_SetPair *****************
 22575 ;; Defined at:
 22576 ;;		line 83 in file "Library/Types.c"
 22577 ;; Parameters:    Size  Location     Type
 22578 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22579 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22580 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22581 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 22582 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 22583 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 22584 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 22585 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 22586 ;;		 -> NULL(0), 
 22587 ;;  pPair           1   13[BANK0 ] unsigned char 
 22588 ;;  pValue          1   14[BANK0 ] unsigned char 
 22589 ;; Auto vars:     Size  Location     Type
 22590 ;;		None
 22591 ;; Return value:  Size  Location     Type
 22592 ;;                  1    wreg      void 
 22593 ;; Registers used:
 22594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22595 ;; Tracked objects:
 22596 ;;		On entry : 0/0
 22597 ;;		On exit  : 0/0
 22598 ;;		Unchanged: 0/0
 22599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22600 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22603 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22604 ;;Total ram usage:        4 bytes
 22605 ;; Hardware stack levels used:    1
 22606 ;; Hardware stack levels required when called:    8
 22607 ;; This function calls:
 22608 ;;		_Byte_SetZone
 22609 ;; This function is called by:
 22610 ;;		_Word_SetPair
 22611 ;;		_Port_SetPairType
 22612 ;;		_Port_SetPair
 22613 ;; This function uses a non-reentrant model
 22614 ;;
 22615                           
 22616                           	psect	text107
 22617  0161E6                     __ptext107:
 22618                           	opt stack 0
 22619  0161E6                     _Byte_SetPair:
 22620                           	opt stack 18
 22621                           
 22622                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 22623                           
 22624                           ;incstack = 0
 22625  0161E6  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 22626  0161EA  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 22627  0161EE  0E04               	movlw	4
 22628  0161F0  0100               	movlb	0	; () banked
 22629  0161F2  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 22630  0161F4  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 22631  0161F8  0E02               	movlw	2
 22632  0161FA  0100               	movlb	0	; () banked
 22633  0161FC  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22634  0161FE  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 22635  016202  EC86  F0A1         	call	_Byte_SetZone	;wreg free
 22636  016206  0012               	return		;funcret
 22637  016208                     __end_of_Byte_SetPair:
 22638                           	opt stack 0
 22639                           tosu	equ	0xFFF
 22640                           tosh	equ	0xFFE
 22641                           tosl	equ	0xFFD
 22642                           pclath	equ	0xFFA
 22643                           tblptru	equ	0xFF8
 22644                           tblptrh	equ	0xFF7
 22645                           tblptrl	equ	0xFF6
 22646                           tablat	equ	0xFF5
 22647                           prodh	equ	0xFF4
 22648                           prodl	equ	0xFF3
 22649                           intcon	equ	0xFF2
 22650                           postinc0	equ	0xFEE
 22651                           wreg	equ	0xFE8
 22652                           indf1	equ	0xFE7
 22653                           postdec1	equ	0xFE5
 22654                           fsr1h	equ	0xFE2
 22655                           fsr1l	equ	0xFE1
 22656                           indf2	equ	0xFDF
 22657                           postinc2	equ	0xFDE
 22658                           postdec2	equ	0xFDD
 22659                           plusw2	equ	0xFDB
 22660                           fsr2h	equ	0xFDA
 22661                           fsr2l	equ	0xFD9
 22662                           status	equ	0xFD8
 22663                           
 22664 ;; *************** function _Port_CheckQuadType *****************
 22665 ;; Defined at:
 22666 ;;		line 126 in file "Library/Port.c"
 22667 ;; Parameters:    Size  Location     Type
 22668 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 22669 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22670 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22671 ;;  pQuad           1   49[BANK0 ] enum E6776
 22672 ;;  pDrive          1   50[BANK0 ] enum E6469
 22673 ;; Auto vars:     Size  Location     Type
 22674 ;;  Output          1   53[BANK0 ] enum E6475
 22675 ;;  Pair2           1   52[BANK0 ] enum E6760
 22676 ;;  Pair1           1   51[BANK0 ] enum E6760
 22677 ;; Return value:  Size  Location     Type
 22678 ;;                  1    wreg      enum E6475
 22679 ;; Registers used:
 22680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22681 ;; Tracked objects:
 22682 ;;		On entry : 0/0
 22683 ;;		On exit  : 0/0
 22684 ;;		Unchanged: 0/0
 22685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22686 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22687 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22689 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22690 ;;Total ram usage:        7 bytes
 22691 ;; Hardware stack levels used:    1
 22692 ;; Hardware stack levels required when called:   12
 22693 ;; This function calls:
 22694 ;;		_Port_CheckPairType
 22695 ;; This function is called by:
 22696 ;;		_Port_CheckPortType
 22697 ;;		_Port_SetQuadType
 22698 ;; This function uses a non-reentrant model
 22699 ;;
 22700                           
 22701                           	psect	text108
 22702  01587A                     __ptext108:
 22703                           	opt stack 0
 22704  01587A                     _Port_CheckQuadType:
 22705                           	opt stack 14
 22706                           
 22707                           ;Port.c: 128: ePinError Output = ePinErrorState;
 22708                           
 22709                           ;incstack = 0
 22710  01587A  0E05               	movlw	5
 22711  01587C  0100               	movlb	0	; () banked
 22712  01587E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22713                           
 22714                           ; BSR set to: 0
 22715                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 22716  015880  0100               	movlb	0	; () banked
 22717  015882  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22718  015884  0D02               	mullw	2
 22719  015886  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 22720                           
 22721                           ; BSR set to: 0
 22722                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 22723  01588A  0100               	movlb	0	; () banked
 22724  01588C  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22725  01588E  0D02               	mullw	2
 22726  015890  28F3               	incf	prodl,w,c
 22727  015892  0100               	movlb	0	; () banked
 22728  015894  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 22729                           
 22730                           ; BSR set to: 0
 22731                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 22732  015896  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22733  01589A  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22734  01589E  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 22735  0158A2  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22736  0158A6  ECE0  F0AA         	call	_Port_CheckPairType	;wreg free
 22737  0158AA  0100               	movlb	0	; () banked
 22738  0158AC  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22739  0158AE  0100               	movlb	0	; () banked
 22740  0158B0  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22741  0158B2  A4D8               	btfss	status,2,c
 22742  0158B4  D00C               	goto	l393
 22743                           
 22744                           ; BSR set to: 0
 22745                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 22746  0158B6  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22747  0158BA  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22748  0158BE  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 22749  0158C2  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22750  0158C6  ECE0  F0AA         	call	_Port_CheckPairType	;wreg free
 22751  0158CA  0100               	movlb	0	; () banked
 22752  0158CC  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22753  0158CE                     l393:
 22754                           
 22755                           ; BSR set to: 0
 22756                           ;Port.c: 136: return Output;
 22757                           
 22758                           ; BSR set to: 0
 22759  0158CE  0100               	movlb	0	; () banked
 22760  0158D0  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22761  0158D2  0012               	return	
 22762  0158D4                     __end_of_Port_CheckQuadType:
 22763                           	opt stack 0
 22764                           tosu	equ	0xFFF
 22765                           tosh	equ	0xFFE
 22766                           tosl	equ	0xFFD
 22767                           pclath	equ	0xFFA
 22768                           tblptru	equ	0xFF8
 22769                           tblptrh	equ	0xFF7
 22770                           tblptrl	equ	0xFF6
 22771                           tablat	equ	0xFF5
 22772                           prodh	equ	0xFF4
 22773                           prodl	equ	0xFF3
 22774                           intcon	equ	0xFF2
 22775                           postinc0	equ	0xFEE
 22776                           wreg	equ	0xFE8
 22777                           indf1	equ	0xFE7
 22778                           postdec1	equ	0xFE5
 22779                           fsr1h	equ	0xFE2
 22780                           fsr1l	equ	0xFE1
 22781                           indf2	equ	0xFDF
 22782                           postinc2	equ	0xFDE
 22783                           postdec2	equ	0xFDD
 22784                           plusw2	equ	0xFDB
 22785                           fsr2h	equ	0xFDA
 22786                           fsr2l	equ	0xFD9
 22787                           status	equ	0xFD8
 22788                           
 22789 ;; *************** function _Port_CheckPairType *****************
 22790 ;; Defined at:
 22791 ;;		line 112 in file "Library/Port.c"
 22792 ;; Parameters:    Size  Location     Type
 22793 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22794 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22795 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22796 ;;  pPair           1   40[BANK0 ] enum E6760
 22797 ;;  pDrive          1   41[BANK0 ] enum E6469
 22798 ;; Auto vars:     Size  Location     Type
 22799 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 22800 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22801 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22802 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22803 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22804 ;;  Output          1   44[BANK0 ] enum E6475
 22805 ;;  Pin2            1   43[BANK0 ] enum E6750
 22806 ;;  Pin1            1   42[BANK0 ] enum E6750
 22807 ;; Return value:  Size  Location     Type
 22808 ;;                  1    wreg      enum E6475
 22809 ;; Registers used:
 22810 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22811 ;; Tracked objects:
 22812 ;;		On entry : 0/0
 22813 ;;		On exit  : 0/0
 22814 ;;		Unchanged: 0/0
 22815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22816 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22817 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22819 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22820 ;;Total ram usage:        9 bytes
 22821 ;; Hardware stack levels used:    1
 22822 ;; Hardware stack levels required when called:   11
 22823 ;; This function calls:
 22824 ;;		_PortProperty_Valid
 22825 ;; This function is called by:
 22826 ;;		_Port_CheckQuadType
 22827 ;;		_Port_SetPairType
 22828 ;; This function uses a non-reentrant model
 22829 ;;
 22830                           
 22831                           	psect	text109
 22832  0155C0                     __ptext109:
 22833                           	opt stack 0
 22834  0155C0                     _Port_CheckPairType:
 22835                           	opt stack 14
 22836                           
 22837                           ;Port.c: 114: ePinError Output = ePinErrorState;
 22838                           
 22839                           ; BSR set to: 0
 22840                           ;incstack = 0
 22841  0155C0  0E05               	movlw	5
 22842  0155C2  0100               	movlb	0	; () banked
 22843  0155C4  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 22844                           
 22845                           ; BSR set to: 0
 22846                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 22847  0155C6  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 22848  0155CA  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 22849  0155CE  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 22850  0155D2  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 22851                           
 22852                           ; BSR set to: 0
 22853                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 22854  0155D6  0100               	movlb	0	; () banked
 22855  0155D8  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22856  0155DA  0D02               	mullw	2
 22857  0155DC  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 22861  0155E0  0100               	movlb	0	; () banked
 22862  0155E2  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22863  0155E4  0D02               	mullw	2
 22864  0155E6  28F3               	incf	prodl,w,c
 22865  0155E8  0100               	movlb	0	; () banked
 22866  0155EA  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 22867                           
 22868                           ; BSR set to: 0
 22869                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 22870  0155EC  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 22871  0155F0  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 22872  0155F4  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 22873  0155F8  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 22874  0155FC  ECF8  F0A7         	call	_PortProperty_Valid	;wreg free
 22875  015600  0100               	movlb	0	; () banked
 22876  015602  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 22877  015604  0100               	movlb	0	; () banked
 22878  015606  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 22879  015608  A4D8               	btfss	status,2,c
 22880  01560A  D00C               	goto	l389
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 22884  01560C  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 22885  015610  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 22886  015614  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 22887  015618  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 22888  01561C  ECF8  F0A7         	call	_PortProperty_Valid	;wreg free
 22889  015620  0100               	movlb	0	; () banked
 22890  015622  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 22891  015624                     l389:
 22892                           
 22893                           ; BSR set to: 0
 22894                           ;Port.c: 124: return Output;
 22895                           
 22896                           ; BSR set to: 0
 22897  015624  0100               	movlb	0	; () banked
 22898  015626  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 22899  015628  0012               	return	
 22900  01562A                     __end_of_Port_CheckPairType:
 22901                           	opt stack 0
 22902                           tosu	equ	0xFFF
 22903                           tosh	equ	0xFFE
 22904                           tosl	equ	0xFFD
 22905                           pclath	equ	0xFFA
 22906                           tblptru	equ	0xFF8
 22907                           tblptrh	equ	0xFF7
 22908                           tblptrl	equ	0xFF6
 22909                           tablat	equ	0xFF5
 22910                           prodh	equ	0xFF4
 22911                           prodl	equ	0xFF3
 22912                           intcon	equ	0xFF2
 22913                           postinc0	equ	0xFEE
 22914                           wreg	equ	0xFE8
 22915                           indf1	equ	0xFE7
 22916                           postdec1	equ	0xFE5
 22917                           fsr1h	equ	0xFE2
 22918                           fsr1l	equ	0xFE1
 22919                           indf2	equ	0xFDF
 22920                           postinc2	equ	0xFDE
 22921                           postdec2	equ	0xFDD
 22922                           plusw2	equ	0xFDB
 22923                           fsr2h	equ	0xFDA
 22924                           fsr2l	equ	0xFD9
 22925                           status	equ	0xFD8
 22926                           
 22927 ;; *************** function _PortProperty_Valid *****************
 22928 ;; Defined at:
 22929 ;;		line 220 in file "Library/Types.c"
 22930 ;; Parameters:    Size  Location     Type
 22931 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 22932 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22933 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22934 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22935 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22936 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 22937 ;;  pPin            1   18[BANK0 ] unsigned char 
 22938 ;; Auto vars:     Size  Location     Type
 22939 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 22940 ;;  Pair            1   37[BANK0 ] enum E6469
 22941 ;; Return value:  Size  Location     Type
 22942 ;;                  1    wreg      enum E6475
 22943 ;; Registers used:
 22944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22945 ;; Tracked objects:
 22946 ;;		On entry : 0/0
 22947 ;;		On exit  : 0/0
 22948 ;;		Unchanged: 0/0
 22949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22951 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22953 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22954 ;;Total ram usage:       23 bytes
 22955 ;; Hardware stack levels used:    1
 22956 ;; Hardware stack levels required when called:   10
 22957 ;; This function calls:
 22958 ;;		_Word_GetPair
 22959 ;; This function is called by:
 22960 ;;		_Port_CheckPairType
 22961 ;;		_Port_SetPinType
 22962 ;; This function uses a non-reentrant model
 22963 ;;
 22964                           
 22965                           	psect	text110
 22966  014FF0                     __ptext110:
 22967                           	opt stack 0
 22968  014FF0                     _PortProperty_Valid:
 22969                           	opt stack 17
 22970                           
 22971                           ;Types.c: 222: ePinDrive Pair;
 22972                           ;Types.c: 223: const ePinError Errors[4][4] =
 22973                           ;Types.c: 224: {
 22974                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 22975                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 22976                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 22977                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 22978                           ;Types.c: 230: };
 22979                           
 22980                           ; BSR set to: 0
 22981                           ;incstack = 0
 22982  014FF0  0E49               	movlw	low PortProperty_Valid@F6830
 22983  014FF2  6EF6               	movwf	tblptrl,c
 22984  014FF4                     	if	1	;There is more than 1 active tblptr byte
 22985  014FF4  0EFD               	movlw	high PortProperty_Valid@F6830
 22986  014FF6  6EF7               	movwf	tblptrh,c
 22987  014FF8                     	endif
 22988  014FF8                     	if	1	;There are 3 active tblptr bytes
 22989  014FF8  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 22990  014FFA  6EF8               	movwf	tblptru,c
 22991  014FFC                     	endif
 22992  014FFC  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 22993  015000  0E0F               	movlw	15
 22994  015002                     u8660:
 22995  015002  0009               	tblrd		*+
 22996  015004  CFF5 FFDE          	movff	tablat,postinc2
 22997  015008  06E8               	decf	wreg,f,c
 22998  01500A  E2FB               	bc	u8660
 22999                           
 23000                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23001  01500C  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23002  015010  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23003  015014  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23004  015018  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 23005  01501C  0100               	movlb	0	; () banked
 23006  01501E  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 23007                           
 23008                           ; BSR set to: 0
 23009                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23010  015020  0E04               	movlw	4
 23011  015022  0100               	movlb	0	; () banked
 23012  015024  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23013  015026  D020               	goto	l819
 23014                           
 23015                           ; BSR set to: 0
 23016  015028  0E04               	movlw	4
 23017  01502A  0100               	movlb	0	; () banked
 23018  01502C  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23019  01502E  D01C               	goto	l819
 23020                           
 23021                           ; BSR set to: 0
 23022                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23023  015030  0100               	movlb	0	; () banked
 23024  015032  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23025  015034  0D04               	mullw	4
 23026  015036  0E75               	movlw	low PortProperty_Valid@Errors
 23027  015038  0100               	movlb	0	; () banked
 23028  01503A  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 23029  01503C  0E00               	movlw	high PortProperty_Valid@Errors
 23030  01503E  0100               	movlb	0	; () banked
 23031  015040  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23032  015042  50F3               	movf	prodl,w,c
 23033  015044  0100               	movlb	0	; () banked
 23034  015046  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 23035  015048  50F4               	movf	prodh,w,c
 23036  01504A  0100               	movlb	0	; () banked
 23037  01504C  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23038  01504E  0100               	movlb	0	; () banked
 23039  015050  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23040  015052  0D01               	mullw	1
 23041  015054  50F3               	movf	prodl,w,c
 23042  015056  0100               	movlb	0	; () banked
 23043  015058  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 23044  01505A  6ED9               	movwf	fsr2l,c
 23045  01505C  50F4               	movf	prodh,w,c
 23046  01505E  0100               	movlb	0	; () banked
 23047  015060  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23048  015062  6EDA               	movwf	fsr2h,c
 23049  015064  50DF               	movf	indf2,w,c
 23050                           
 23051                           ; BSR set to: 0
 23052  015066  0012               	return	
 23053  015068                     l819:
 23054                           
 23055                           ; BSR set to: 0
 23056                           ;Types.c: 237: return ePinErrorState;
 23057                           
 23058                           ; BSR set to: 0
 23059  015068  0E05               	movlw	5
 23060  01506A  0012               	return	
 23061  01506C                     __end_of_PortProperty_Valid:
 23062                           	opt stack 0
 23063                           tosu	equ	0xFFF
 23064                           tosh	equ	0xFFE
 23065                           tosl	equ	0xFFD
 23066                           pclath	equ	0xFFA
 23067                           tblptru	equ	0xFF8
 23068                           tblptrh	equ	0xFF7
 23069                           tblptrl	equ	0xFF6
 23070                           tablat	equ	0xFF5
 23071                           prodh	equ	0xFF4
 23072                           prodl	equ	0xFF3
 23073                           intcon	equ	0xFF2
 23074                           postinc0	equ	0xFEE
 23075                           wreg	equ	0xFE8
 23076                           indf1	equ	0xFE7
 23077                           postdec1	equ	0xFE5
 23078                           fsr1h	equ	0xFE2
 23079                           fsr1l	equ	0xFE1
 23080                           indf2	equ	0xFDF
 23081                           postinc2	equ	0xFDE
 23082                           postdec2	equ	0xFDD
 23083                           plusw2	equ	0xFDB
 23084                           fsr2h	equ	0xFDA
 23085                           fsr2l	equ	0xFD9
 23086                           status	equ	0xFD8
 23087                           
 23088 ;; *************** function _Byte_SetQuad *****************
 23089 ;; Defined at:
 23090 ;;		line 101 in file "Library/Types.c"
 23091 ;; Parameters:    Size  Location     Type
 23092 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23093 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23094 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23095 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23096 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23097 ;;		 -> NULL(0), 
 23098 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23099 ;;  pValue          1   14[BANK0 ] unsigned char 
 23100 ;; Auto vars:     Size  Location     Type
 23101 ;;		None
 23102 ;; Return value:  Size  Location     Type
 23103 ;;                  1    wreg      void 
 23104 ;; Registers used:
 23105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23106 ;; Tracked objects:
 23107 ;;		On entry : 0/0
 23108 ;;		On exit  : 0/0
 23109 ;;		Unchanged: 0/0
 23110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23114 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23115 ;;Total ram usage:        4 bytes
 23116 ;; Hardware stack levels used:    1
 23117 ;; Hardware stack levels required when called:    8
 23118 ;; This function calls:
 23119 ;;		_Byte_SetZone
 23120 ;; This function is called by:
 23121 ;;		_Port_SetQuadType
 23122 ;;		_SPI_Init
 23123 ;;		_SPI_MinSpeed
 23124 ;;		_SPI_MaxSpeed
 23125 ;;		_Port_SetQuad
 23126 ;;		_Word_SetQuad
 23127 ;;		_I2C_Init
 23128 ;; This function uses a non-reentrant model
 23129 ;;
 23130                           
 23131                           	psect	text111
 23132  016208                     __ptext111:
 23133                           	opt stack 0
 23134  016208                     _Byte_SetQuad:
 23135                           	opt stack 19
 23136                           
 23137                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23138                           
 23139                           ; BSR set to: 0
 23140                           ;incstack = 0
 23141  016208  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23142  01620C  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23143  016210  0E02               	movlw	2
 23144  016212  0100               	movlb	0	; () banked
 23145  016214  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 23146  016216  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23147  01621A  0E04               	movlw	4
 23148  01621C  0100               	movlb	0	; () banked
 23149  01621E  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23150  016220  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23151  016224  EC86  F0A1         	call	_Byte_SetZone	;wreg free
 23152  016228  0012               	return		;funcret
 23153  01622A                     __end_of_Byte_SetQuad:
 23154                           	opt stack 0
 23155                           tosu	equ	0xFFF
 23156                           tosh	equ	0xFFE
 23157                           tosl	equ	0xFFD
 23158                           pclath	equ	0xFFA
 23159                           tblptru	equ	0xFF8
 23160                           tblptrh	equ	0xFF7
 23161                           tblptrl	equ	0xFF6
 23162                           tablat	equ	0xFF5
 23163                           prodh	equ	0xFF4
 23164                           prodl	equ	0xFF3
 23165                           intcon	equ	0xFF2
 23166                           postinc0	equ	0xFEE
 23167                           wreg	equ	0xFE8
 23168                           indf1	equ	0xFE7
 23169                           postdec1	equ	0xFE5
 23170                           fsr1h	equ	0xFE2
 23171                           fsr1l	equ	0xFE1
 23172                           indf2	equ	0xFDF
 23173                           postinc2	equ	0xFDE
 23174                           postdec2	equ	0xFDD
 23175                           plusw2	equ	0xFDB
 23176                           fsr2h	equ	0xFDA
 23177                           fsr2l	equ	0xFD9
 23178                           status	equ	0xFD8
 23179                           
 23180 ;; *************** function _Byte_SetZone *****************
 23181 ;; Defined at:
 23182 ;;		line 47 in file "Library/Types.c"
 23183 ;; Parameters:    Size  Location     Type
 23184 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23185 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23186 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23187 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23188 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23189 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23190 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23191 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23192 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23193 ;;  pMax            1    2[BANK0 ] unsigned char 
 23194 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23195 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23196 ;;  pValue          1    5[BANK0 ] unsigned char 
 23197 ;; Auto vars:     Size  Location     Type
 23198 ;;  MASK            1   10[BANK0 ] unsigned char 
 23199 ;;  Offset          1    9[BANK0 ] unsigned char 
 23200 ;; Return value:  Size  Location     Type
 23201 ;;                  1    wreg      void 
 23202 ;; Registers used:
 23203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23204 ;; Tracked objects:
 23205 ;;		On entry : 0/0
 23206 ;;		On exit  : 0/0
 23207 ;;		Unchanged: 0/0
 23208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23209 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23211 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23212 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23213 ;;Total ram usage:       11 bytes
 23214 ;; Hardware stack levels used:    1
 23215 ;; Hardware stack levels required when called:    7
 23216 ;; This function calls:
 23217 ;;		Nothing
 23218 ;; This function is called by:
 23219 ;;		_Byte_SetPair
 23220 ;;		_Byte_SetQuad
 23221 ;;		_Byte_SetTriple
 23222 ;; This function uses a non-reentrant model
 23223 ;;
 23224                           
 23225                           	psect	text112
 23226  01430C                     __ptext112:
 23227                           	opt stack 0
 23228  01430C                     _Byte_SetZone:
 23229                           	opt stack 18
 23230                           
 23231                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23232                           
 23233                           ;incstack = 0
 23234  01430C  0100               	movlb	0	; () banked
 23235  01430E  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23236  014310  0D01               	mullw	1
 23237  014312  0E63               	movlw	low _MASKS
 23238  014314  24F3               	addwf	prodl,w,c
 23239  014316  6EF6               	movwf	tblptrl,c
 23240  014318  0EFD               	movlw	high _MASKS
 23241  01431A  20F4               	addwfc	prodh,w,c
 23242  01431C  6EF7               	movwf	tblptrh,c
 23243  01431E                     	if	1	;There are 3 active tblptr bytes
 23244  01431E  6AF8               	clrf	tblptru,c
 23245  014320  0E00               	movlw	low (__mediumconst shr (0+16))
 23246  014322  22F8               	addwfc	tblptru,f,c
 23247  014324                     	endif
 23248  014324  0008               	tblrd		*
 23249  014326  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 23250                           
 23251                           ; BSR set to: 0
 23252                           ;Types.c: 50: UINT8 Offset = 0;
 23253  01432A  0E00               	movlw	0
 23254  01432C  0100               	movlb	0	; () banked
 23255  01432E  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 23256                           
 23257                           ;Types.c: 52: while (pChunk >= pMax)
 23258  014330  D006               	goto	l726
 23259  014332                     
 23260                           ; BSR set to: 0
 23261                           ;Types.c: 53: {
 23262                           ;Types.c: 54: pChunk -= pMax;
 23263                           
 23264                           ; BSR set to: 0
 23265  014332  0100               	movlb	0	; () banked
 23266  014334  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23267  014336  0100               	movlb	0	; () banked
 23268  014338  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23269                           
 23270                           ; BSR set to: 0
 23271                           ;Types.c: 55: Offset += 1;
 23272  01433A  0100               	movlb	0	; () banked
 23273  01433C  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 23274  01433E                     l726:
 23275                           
 23276                           ; BSR set to: 0
 23277                           
 23278                           ; BSR set to: 0
 23279  01433E  0100               	movlb	0	; () banked
 23280  014340  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23281  014342  0100               	movlb	0	; () banked
 23282  014344  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23283  014346  B0D8               	btfsc	status,0,c
 23284  014348  D7F4               	goto	l727
 23285                           
 23286                           ; BSR set to: 0
 23287                           ;Types.c: 56: }
 23288                           ;Types.c: 57: pChunk *= pChunkSize;
 23289                           
 23290                           ; BSR set to: 0
 23291  01434A  0100               	movlb	0	; () banked
 23292  01434C  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23293  01434E  0100               	movlb	0	; () banked
 23294  014350  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23295  014352  50F3               	movf	prodl,w,c
 23296  014354  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 23297                           
 23298                           ; BSR set to: 0
 23299                           ;Types.c: 58: pChunk += Offset;
 23300  014356  0100               	movlb	0	; () banked
 23301  014358  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 23302  01435A  0100               	movlb	0	; () banked
 23303  01435C  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23304                           
 23305                           ; BSR set to: 0
 23306                           ;Types.c: 60: pValue &= MASK;
 23307  01435E  0100               	movlb	0	; () banked
 23308  014360  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 23309  014362  0100               	movlb	0	; () banked
 23310  014364  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23311                           
 23312                           ; BSR set to: 0
 23313                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23314  014366  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23315  01436A  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23316  01436E  0100               	movlb	0	; () banked
 23317  014370  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23318  014372  D003               	goto	u8724
 23319  014374                     u8725:
 23320  014374  0100               	movlb	0	; () banked
 23321  014376  90D8               	bcf	status,0,c
 23322  014378  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23323  01437A                     u8724:
 23324  01437A  0100               	movlb	0	; () banked
 23325  01437C  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23326  01437E  D7FA               	goto	u8725
 23327  014380  0100               	movlb	0	; () banked
 23328  014382  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23329  014384  0AFF               	xorlw	255
 23330  014386  0100               	movlb	0	; () banked
 23331  014388  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23332  01438A  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23333  01438E  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23334  014392  0100               	movlb	0	; () banked
 23335  014394  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23336  014396  16DF               	andwf	indf2,f,c
 23337                           
 23338                           ; BSR set to: 0
 23339                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23340  014398  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23341  01439C  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23342  0143A0  0100               	movlb	0	; () banked
 23343  0143A2  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23344  0143A4  D003               	goto	u8734
 23345  0143A6                     u8735:
 23346  0143A6  0100               	movlb	0	; () banked
 23347  0143A8  90D8               	bcf	status,0,c
 23348  0143AA  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23349  0143AC                     u8734:
 23350  0143AC  0100               	movlb	0	; () banked
 23351  0143AE  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23352  0143B0  D7FA               	goto	u8735
 23353  0143B2  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23354  0143B6  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23355  0143BA  0100               	movlb	0	; () banked
 23356  0143BC  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23357  0143BE  12DF               	iorwf	indf2,f,c
 23358                           
 23359                           ; BSR set to: 0
 23360  0143C0  0012               	return		;funcret
 23361  0143C2                     __end_of_Byte_SetZone:
 23362                           	opt stack 0
 23363                           tosu	equ	0xFFF
 23364                           tosh	equ	0xFFE
 23365                           tosl	equ	0xFFD
 23366                           pclath	equ	0xFFA
 23367                           tblptru	equ	0xFF8
 23368                           tblptrh	equ	0xFF7
 23369                           tblptrl	equ	0xFF6
 23370                           tablat	equ	0xFF5
 23371                           prodh	equ	0xFF4
 23372                           prodl	equ	0xFF3
 23373                           intcon	equ	0xFF2
 23374                           postinc0	equ	0xFEE
 23375                           wreg	equ	0xFE8
 23376                           indf1	equ	0xFE7
 23377                           postdec1	equ	0xFE5
 23378                           fsr1h	equ	0xFE2
 23379                           fsr1l	equ	0xFE1
 23380                           indf2	equ	0xFDF
 23381                           postinc2	equ	0xFDE
 23382                           postdec2	equ	0xFDD
 23383                           plusw2	equ	0xFDB
 23384                           fsr2h	equ	0xFDA
 23385                           fsr2l	equ	0xFD9
 23386                           status	equ	0xFD8
 23387                           
 23388 ;; *************** function _Console_Init *****************
 23389 ;; Defined at:
 23390 ;;		line 157 in file "Library/Console.c"
 23391 ;; Parameters:    Size  Location     Type
 23392 ;;		None
 23393 ;; Auto vars:     Size  Location     Type
 23394 ;;  y               1    3[BANK0 ] unsigned char 
 23395 ;;  x               1    2[BANK0 ] unsigned char 
 23396 ;; Return value:  Size  Location     Type
 23397 ;;                  1    wreg      void 
 23398 ;; Registers used:
 23399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23400 ;; Tracked objects:
 23401 ;;		On entry : 0/0
 23402 ;;		On exit  : 0/0
 23403 ;;		Unchanged: 0/0
 23404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23407 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23408 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23409 ;;Total ram usage:        4 bytes
 23410 ;; Hardware stack levels used:    1
 23411 ;; Hardware stack levels required when called:    7
 23412 ;; This function calls:
 23413 ;;		Nothing
 23414 ;; This function is called by:
 23415 ;;		_init
 23416 ;; This function uses a non-reentrant model
 23417 ;;
 23418                           
 23419                           	psect	text113
 23420  014D4E                     __ptext113:
 23421                           	opt stack 0
 23422  014D4E                     _Console_Init:
 23423                           	opt stack 22
 23424                           
 23425                           ;Console.c: 160: lBufferX = 0;
 23426                           
 23427                           ; BSR set to: 0
 23428                           ;incstack = 0
 23429  014D4E  0E00               	movlw	0
 23430  014D50  0100               	movlb	0	; () banked
 23431  014D52  6FDE               	movwf	_lBufferX& (0+255),b
 23432                           
 23433                           ;Console.c: 161: lBufferY = 0;
 23434  014D54  0E00               	movlw	0
 23435  014D56  0100               	movlb	0	; () banked
 23436  014D58  6FDD               	movwf	_lBufferY& (0+255),b
 23437                           
 23438                           ;Console.c: 163: UINT8 x, y;
 23439                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23440  014D5A  0E00               	movlw	0
 23441  014D5C  0100               	movlb	0	; () banked
 23442  014D5E  6F62               	movwf	Console_Init@x& (0+255),b
 23443  014D60                     l14041:
 23444                           
 23445                           ; BSR set to: 0
 23446  014D60  0E13               	movlw	19
 23447  014D62  0100               	movlb	0	; () banked
 23448  014D64  6562               	cpfsgt	Console_Init@x& (0+255),b
 23449  014D66  D001               	goto	l976
 23450  014D68  0012               	return	
 23451  014D6A                     l976:
 23452                           
 23453                           ; BSR set to: 0
 23454                           ;Console.c: 165: {
 23455                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23456                           
 23457                           ; BSR set to: 0
 23458  014D6A  0E00               	movlw	0
 23459  014D6C  0100               	movlb	0	; () banked
 23460  014D6E  6F63               	movwf	Console_Init@y& (0+255),b
 23461  014D70                     l14047:
 23462                           
 23463                           ; BSR set to: 0
 23464  014D70  0E0E               	movlw	14
 23465  014D72  0100               	movlb	0	; () banked
 23466  014D74  6563               	cpfsgt	Console_Init@y& (0+255),b
 23467  014D76  D001               	goto	l978
 23468  014D78  D02C               	goto	u10800
 23469  014D7A                     l978:
 23470                           
 23471                           ; BSR set to: 0
 23472                           ;Console.c: 167: {
 23473                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23474                           
 23475                           ; BSR set to: 0
 23476  014D7A  0100               	movlb	0	; () banked
 23477  014D7C  5163               	movf	Console_Init@y& (0+255),w,b
 23478  014D7E  0D14               	mullw	20
 23479  014D80  0EC8               	movlw	low _lBuffer
 23480  014D82  0100               	movlb	0	; () banked
 23481  014D84  6F60               	movwf	??_Console_Init& (0+255),b
 23482  014D86  0E04               	movlw	high _lBuffer
 23483  014D88  0100               	movlb	0	; () banked
 23484  014D8A  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 23485  014D8C  50F3               	movf	prodl,w,c
 23486  014D8E  0100               	movlb	0	; () banked
 23487  014D90  2760               	addwf	??_Console_Init& (0+255),f,b
 23488  014D92  50F4               	movf	prodh,w,c
 23489  014D94  0100               	movlb	0	; () banked
 23490  014D96  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23491  014D98  0100               	movlb	0	; () banked
 23492  014D9A  5162               	movf	Console_Init@x& (0+255),w,b
 23493  014D9C  0D01               	mullw	1
 23494  014D9E  50F3               	movf	prodl,w,c
 23495  014DA0  0100               	movlb	0	; () banked
 23496  014DA2  2560               	addwf	??_Console_Init& (0+255),w,b
 23497  014DA4  6ED9               	movwf	fsr2l,c
 23498  014DA6  50F4               	movf	prodh,w,c
 23499  014DA8  0100               	movlb	0	; () banked
 23500  014DAA  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23501  014DAC  6EDA               	movwf	fsr2h,c
 23502  014DAE  0E00               	movlw	0
 23503  014DB0  6EDF               	movwf	indf2,c
 23504                           
 23505                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23506  014DB2  0100               	movlb	0	; () banked
 23507  014DB4  5163               	movf	Console_Init@y& (0+255),w,b
 23508  014DB6  0D02               	mullw	2
 23509  014DB8  0E00               	movlw	low _lCBuffer
 23510  014DBA  24F3               	addwf	prodl,w,c
 23511  014DBC  6ED9               	movwf	fsr2l,c
 23512  014DBE  0E04               	movlw	high _lCBuffer
 23513  014DC0  20F4               	addwfc	prodh,w,c
 23514  014DC2  6EDA               	movwf	fsr2h,c
 23515  014DC4  0EFF               	movlw	255
 23516  014DC6  6EDE               	movwf	postinc2,c
 23517  014DC8  0EFF               	movlw	255
 23518  014DCA  6EDD               	movwf	postdec2,c
 23519                           
 23520                           ; BSR set to: 0
 23521  014DCC  0100               	movlb	0	; () banked
 23522  014DCE  2B63               	incf	Console_Init@y& (0+255),f,b
 23523  014DD0  D7CF               	goto	l14047
 23524  014DD2                     u10800:
 23525                           
 23526                           ; BSR set to: 0
 23527                           
 23528                           ; BSR set to: 0
 23529  014DD2  0100               	movlb	0	; () banked
 23530  014DD4  2B62               	incf	Console_Init@x& (0+255),f,b
 23531  014DD6  D7C4               	goto	l14041
 23532  014DD8                     __end_of_Console_Init:
 23533                           	opt stack 0
 23534                           tosu	equ	0xFFF
 23535                           tosh	equ	0xFFE
 23536                           tosl	equ	0xFFD
 23537                           pclath	equ	0xFFA
 23538                           tblptru	equ	0xFF8
 23539                           tblptrh	equ	0xFF7
 23540                           tblptrl	equ	0xFF6
 23541                           tablat	equ	0xFF5
 23542                           prodh	equ	0xFF4
 23543                           prodl	equ	0xFF3
 23544                           intcon	equ	0xFF2
 23545                           postinc0	equ	0xFEE
 23546                           wreg	equ	0xFE8
 23547                           indf1	equ	0xFE7
 23548                           postdec1	equ	0xFE5
 23549                           fsr1h	equ	0xFE2
 23550                           fsr1l	equ	0xFE1
 23551                           indf2	equ	0xFDF
 23552                           postinc2	equ	0xFDE
 23553                           postdec2	equ	0xFDD
 23554                           plusw2	equ	0xFDB
 23555                           fsr2h	equ	0xFDA
 23556                           fsr2l	equ	0xFD9
 23557                           status	equ	0xFD8
 23558                           
 23559 ;; *************** function _ADC_Start *****************
 23560 ;; Defined at:
 23561 ;;		line 114 in file "Library/ADC.c"
 23562 ;; Parameters:    Size  Location     Type
 23563 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23564 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23565 ;;		 -> NULL(0), 
 23566 ;; Auto vars:     Size  Location     Type
 23567 ;;		None
 23568 ;; Return value:  Size  Location     Type
 23569 ;;                  1    wreg      void 
 23570 ;; Registers used:
 23571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23572 ;; Tracked objects:
 23573 ;;		On entry : 0/0
 23574 ;;		On exit  : 0/0
 23575 ;;		Unchanged: 0/0
 23576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23579 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23581 ;;Total ram usage:        4 bytes
 23582 ;; Hardware stack levels used:    1
 23583 ;; Hardware stack levels required when called:    8
 23584 ;; This function calls:
 23585 ;;		_ADC_Off
 23586 ;;		_ADC_On
 23587 ;;		_ADC_SetChannel
 23588 ;; This function is called by:
 23589 ;;		_init
 23590 ;;		_mode1
 23591 ;;		_mode4
 23592 ;;		_FunctADC
 23593 ;; This function uses a non-reentrant model
 23594 ;;
 23595                           
 23596                           	psect	text114
 23597  014EEA                     __ptext114:
 23598                           	opt stack 0
 23599  014EEA                     _ADC_Start:
 23600                           	opt stack 21
 23601                           
 23602                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 23603                           
 23604                           ; BSR set to: 0
 23605                           ;incstack = 0
 23606  014EEA  B2C2               	btfsc	4034,1,c	;volatile
 23607  014EEC  0012               	return	
 23608  014EEE                     
 23609                           ;ADC.c: 128: {
 23610                           ;ADC.c: 129: ADC_Off();
 23611                           
 23612                           ;ADC.c: 127: for(;;)
 23613  014EEE  ECCA  F0B2         	call	_ADC_Off	;wreg free
 23614                           
 23615                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 23616  014EF2  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 23617  014EF6  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 23618  014EFA  50DF               	movf	indf2,w,c
 23619  014EFC  ECC7  F0B1         	call	_ADC_SetChannel
 23620                           
 23621                           ;ADC.c: 131: ADC_On();
 23622  014F00  ECD8  F0B2         	call	_ADC_On	;wreg free
 23623                           
 23624                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 23625  014F04  82C2               	bsf	4034,1,c	;volatile
 23626  014F06  B2C2               	btfsc	4034,1,c	;volatile
 23627  014F08  D7FE               	goto	l1280
 23628                           
 23629                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 23630  014F0A  50C3               	movf	4035,w,c	;volatile
 23631  014F0C  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 23632  014F10  0100               	movlb	0	; () banked
 23633  014F12  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 23634  014F14  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 23635  014F18  0100               	movlb	0	; () banked
 23636  014F1A  6B64               	clrf	??_ADC_Start& (0+255),b
 23637  014F1C  0100               	movlb	0	; () banked
 23638  014F1E  1364               	iorwf	??_ADC_Start& (0+255),f,b
 23639  014F20  0E00               	movlw	0
 23640  014F22  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 23641  014F24  0100               	movlb	0	; () banked
 23642  014F26  EE20 F001          	lfsr	2,1
 23643  014F2A  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23644  014F2C  26D9               	addwf	fsr2l,f,c
 23645  014F2E  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23646  014F30  22DA               	addwfc	fsr2h,f,c
 23647  014F32  C064  FFDE         	movff	??_ADC_Start,postinc2
 23648  014F36  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 23649                           
 23650                           ;ADC.c: 141: if (pInput->mNext == 0)
 23651  014F3A  0100               	movlb	0	; () banked
 23652  014F3C  EE20 F003          	lfsr	2,3
 23653  014F40  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23654  014F42  26D9               	addwf	fsr2l,f,c
 23655  014F44  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23656  014F46  22DA               	addwfc	fsr2h,f,c
 23657  014F48  50DE               	movf	postinc2,w,c
 23658  014F4A  10DE               	iorwf	postinc2,w,c
 23659  014F4C  B4D8               	btfsc	status,2,c
 23660  014F4E  D00C               	goto	l1283
 23661                           
 23662                           ; BSR set to: 0
 23663                           ;ADC.c: 145: pInput = pInput->mNext;
 23664                           
 23665                           ; BSR set to: 0
 23666                           
 23667                           ; BSR set to: 0
 23668                           ;ADC.c: 142: break;
 23669  014F50  0100               	movlb	0	; () banked
 23670  014F52  EE20 F003          	lfsr	2,3
 23671  014F56  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23672  014F58  26D9               	addwf	fsr2l,f,c
 23673  014F5A  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23674  014F5C  22DA               	addwfc	fsr2h,f,c
 23675  014F5E  CFDE F062          	movff	postinc2,ADC_Start@pInput
 23676  014F62  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 23677                           
 23678                           ;ADC.c: 146: }
 23679  014F66  D7C3               	goto	l1276
 23680  014F68                     l1283:
 23681                           
 23682                           ; BSR set to: 0
 23683                           ;ADC.c: 147: ADC_Off();
 23684                           
 23685                           ; BSR set to: 0
 23686  014F68  ECCA  F0B2         	call	_ADC_Off	;wreg free
 23687  014F6C  0012               	return		;funcret
 23688  014F6E                     __end_of_ADC_Start:
 23689                           	opt stack 0
 23690                           tosu	equ	0xFFF
 23691                           tosh	equ	0xFFE
 23692                           tosl	equ	0xFFD
 23693                           pclath	equ	0xFFA
 23694                           tblptru	equ	0xFF8
 23695                           tblptrh	equ	0xFF7
 23696                           tblptrl	equ	0xFF6
 23697                           tablat	equ	0xFF5
 23698                           prodh	equ	0xFF4
 23699                           prodl	equ	0xFF3
 23700                           intcon	equ	0xFF2
 23701                           postinc0	equ	0xFEE
 23702                           wreg	equ	0xFE8
 23703                           indf1	equ	0xFE7
 23704                           postdec1	equ	0xFE5
 23705                           fsr1h	equ	0xFE2
 23706                           fsr1l	equ	0xFE1
 23707                           indf2	equ	0xFDF
 23708                           postinc2	equ	0xFDE
 23709                           postdec2	equ	0xFDD
 23710                           plusw2	equ	0xFDB
 23711                           fsr2h	equ	0xFDA
 23712                           fsr2l	equ	0xFD9
 23713                           status	equ	0xFD8
 23714                           
 23715 ;; *************** function _ADC_Init *****************
 23716 ;; Defined at:
 23717 ;;		line 19 in file "Library/ADC.c"
 23718 ;; Parameters:    Size  Location     Type
 23719 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 23720 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23721 ;;  pChannel        1    6[BANK0 ] enum E6742
 23722 ;; Auto vars:     Size  Location     Type
 23723 ;;		None
 23724 ;; Return value:  Size  Location     Type
 23725 ;;                  1    wreg      void 
 23726 ;; Registers used:
 23727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23728 ;; Tracked objects:
 23729 ;;		On entry : 0/0
 23730 ;;		On exit  : 0/0
 23731 ;;		Unchanged: 0/0
 23732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23733 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23737 ;;Total ram usage:        3 bytes
 23738 ;; Hardware stack levels used:    1
 23739 ;; Hardware stack levels required when called:    9
 23740 ;; This function calls:
 23741 ;;		_ADC_Calibrate
 23742 ;;		_ADC_ClockDivision
 23743 ;;		_ADC_ConversionTime
 23744 ;;		_ADC_SetChannel
 23745 ;;		_ADC_SetupIO
 23746 ;; This function is called by:
 23747 ;;		_init
 23748 ;;		_FunctInitADC
 23749 ;; This function uses a non-reentrant model
 23750 ;;
 23751                           
 23752                           	psect	text115
 23753  01506C                     __ptext115:
 23754                           	opt stack 0
 23755  01506C                     _ADC_Init:
 23756                           	opt stack 20
 23757                           
 23758                           ;ADC.c: 21: if(pInput==(void*)0)
 23759                           
 23760                           ;incstack = 0
 23761  01506C  0100               	movlb	0	; () banked
 23762  01506E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23763  015070  0100               	movlb	0	; () banked
 23764  015072  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 23765  015074  B4D8               	btfsc	status,2,c
 23766  015076  0012               	return	
 23767                           
 23768                           ; BSR set to: 0
 23769                           ;ADC.c: 25: lCurrent = pInput;
 23770                           
 23771                           ; BSR set to: 0
 23772                           
 23773                           ; BSR set to: 0
 23774                           ;ADC.c: 22: return;
 23775  015078  C064  F0D0         	movff	ADC_Init@pInput,_lCurrent
 23776  01507C  C065  F0D1         	movff	ADC_Init@pInput+1,_lCurrent+1
 23777                           
 23778                           ; BSR set to: 0
 23779                           ;ADC.c: 27: pInput->mChannel = pChannel;
 23780  015080  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 23781  015084  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 23782  015088  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 23783                           
 23784                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 23785  01508C  0100               	movlb	0	; () banked
 23786  01508E  EE20 F003          	lfsr	2,3
 23787  015092  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23788  015094  26D9               	addwf	fsr2l,f,c
 23789  015096  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23790  015098  22DA               	addwfc	fsr2h,f,c
 23791  01509A  0E00               	movlw	0
 23792  01509C  6EDE               	movwf	postinc2,c
 23793  01509E  0E00               	movlw	0
 23794  0150A0  6EDD               	movwf	postdec2,c
 23795                           
 23796                           ;ADC.c: 29: pInput->mValue = 0;
 23797  0150A2  0100               	movlb	0	; () banked
 23798  0150A4  EE20 F001          	lfsr	2,1
 23799  0150A8  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23800  0150AA  26D9               	addwf	fsr2l,f,c
 23801  0150AC  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23802  0150AE  22DA               	addwfc	fsr2h,f,c
 23803  0150B0  0E00               	movlw	0
 23804  0150B2  6EDE               	movwf	postinc2,c
 23805  0150B4  0E00               	movlw	0
 23806  0150B6  6EDD               	movwf	postdec2,c
 23807                           
 23808                           ; BSR set to: 0
 23809                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 23810  0150B8  0100               	movlb	0	; () banked
 23811  0150BA  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 23812  0150BC  ECC7  F0B1         	call	_ADC_SetChannel
 23813                           
 23814                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 23815  0150C0  9EC2               	bcf	4034,7,c	;volatile
 23816                           
 23817                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 23818  0150C2  9CC2               	bcf	4034,6,c	;volatile
 23819                           
 23820                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 23821  0150C4  8EC1               	bsf	4033,7,c	;volatile
 23822                           
 23823                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 23824  0150C6  8CC1               	bsf	4033,6,c	;volatile
 23825                           
 23826                           ;ADC.c: 43: ADC_ConversionTime(12);
 23827  0150C8  0E0C               	movlw	12
 23828  0150CA  ECAA  F0AD         	call	_ADC_ConversionTime
 23829                           
 23830                           ;ADC.c: 47: ADC_ClockDivision(16);
 23831  0150CE  0E10               	movlw	16
 23832  0150D0  ECEC  F0A6         	call	_ADC_ClockDivision
 23833                           
 23834                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 23835  0150D4  0100               	movlb	0	; () banked
 23836  0150D6  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 23837  0150D8  EC02  F0B0         	call	_ADC_SetupIO
 23838                           
 23839                           ;ADC.c: 58: ADC_Initialised = 1;
 23840  0150DC  0E01               	movlw	1
 23841  0150DE  6E3C               	movwf	_ADC_Initialised,c
 23842                           
 23843                           ;ADC.c: 61: ADC_Calibrate();
 23844  0150E0  EC4C  F0B2         	call	_ADC_Calibrate	;wreg free
 23845  0150E4  0012               	return		;funcret
 23846  0150E6                     __end_of_ADC_Init:
 23847                           	opt stack 0
 23848                           tosu	equ	0xFFF
 23849                           tosh	equ	0xFFE
 23850                           tosl	equ	0xFFD
 23851                           pclath	equ	0xFFA
 23852                           tblptru	equ	0xFF8
 23853                           tblptrh	equ	0xFF7
 23854                           tblptrl	equ	0xFF6
 23855                           tablat	equ	0xFF5
 23856                           prodh	equ	0xFF4
 23857                           prodl	equ	0xFF3
 23858                           intcon	equ	0xFF2
 23859                           postinc0	equ	0xFEE
 23860                           wreg	equ	0xFE8
 23861                           indf1	equ	0xFE7
 23862                           postdec1	equ	0xFE5
 23863                           fsr1h	equ	0xFE2
 23864                           fsr1l	equ	0xFE1
 23865                           indf2	equ	0xFDF
 23866                           postinc2	equ	0xFDE
 23867                           postdec2	equ	0xFDD
 23868                           plusw2	equ	0xFDB
 23869                           fsr2h	equ	0xFDA
 23870                           fsr2l	equ	0xFD9
 23871                           status	equ	0xFD8
 23872                           
 23873 ;; *************** function _ADC_SetupIO *****************
 23874 ;; Defined at:
 23875 ;;		line 150 in file "Library/ADC.c"
 23876 ;; Parameters:    Size  Location     Type
 23877 ;;  pChannel        1    wreg     enum E6742
 23878 ;; Auto vars:     Size  Location     Type
 23879 ;;  pChannel        1    2[BANK0 ] enum E6742
 23880 ;;  MASK            1    3[BANK0 ] unsigned char 
 23881 ;; Return value:  Size  Location     Type
 23882 ;;                  1    wreg      void 
 23883 ;; Registers used:
 23884 ;;		wreg, status,2, status,0
 23885 ;; Tracked objects:
 23886 ;;		On entry : 0/0
 23887 ;;		On exit  : 0/0
 23888 ;;		Unchanged: 0/0
 23889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23893 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23894 ;;Total ram usage:        4 bytes
 23895 ;; Hardware stack levels used:    1
 23896 ;; Hardware stack levels required when called:    7
 23897 ;; This function calls:
 23898 ;;		Nothing
 23899 ;; This function is called by:
 23900 ;;		_ADC_Init
 23901 ;; This function uses a non-reentrant model
 23902 ;;
 23903                           
 23904                           	psect	text116
 23905  016004                     __ptext116:
 23906                           	opt stack 0
 23907  016004                     _ADC_SetupIO:
 23908                           	opt stack 21
 23909                           
 23910                           ;incstack = 0
 23911                           ;ADC_SetupIO@pChannel stored from wreg
 23912  016004  0100               	movlb	0	; () banked
 23913  016006  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 23914                           
 23915                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 23916  016008  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 23917  01600C  0E01               	movlw	1
 23918  01600E  0100               	movlb	0	; () banked
 23919  016010  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 23920  016012  0100               	movlb	0	; () banked
 23921  016014  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 23922  016016  D003               	goto	u10084
 23923  016018                     u10085:
 23924  016018  0100               	movlb	0	; () banked
 23925  01601A  90D8               	bcf	status,0,c
 23926  01601C  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 23927  01601E                     u10084:
 23928  01601E  0100               	movlb	0	; () banked
 23929  016020  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 23930  016022  D7FA               	goto	u10085
 23931  016024  0100               	movlb	0	; () banked
 23932  016026  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 23933  016028  0AFF               	xorlw	255
 23934  01602A  0100               	movlb	0	; () banked
 23935  01602C  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 23936                           
 23937                           ;ADC.c: 153: ANCON0 &= MASK;
 23938  01602E  0100               	movlb	0	; () banked
 23939  016030  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 23940  016032  16C1               	andwf	4033,f,c	;volatile
 23941                           
 23942                           ; BSR set to: 0
 23943  016034  0012               	return		;funcret
 23944  016036                     __end_of_ADC_SetupIO:
 23945                           	opt stack 0
 23946                           tosu	equ	0xFFF
 23947                           tosh	equ	0xFFE
 23948                           tosl	equ	0xFFD
 23949                           pclath	equ	0xFFA
 23950                           tblptru	equ	0xFF8
 23951                           tblptrh	equ	0xFF7
 23952                           tblptrl	equ	0xFF6
 23953                           tablat	equ	0xFF5
 23954                           prodh	equ	0xFF4
 23955                           prodl	equ	0xFF3
 23956                           intcon	equ	0xFF2
 23957                           postinc0	equ	0xFEE
 23958                           wreg	equ	0xFE8
 23959                           indf1	equ	0xFE7
 23960                           postdec1	equ	0xFE5
 23961                           fsr1h	equ	0xFE2
 23962                           fsr1l	equ	0xFE1
 23963                           indf2	equ	0xFDF
 23964                           postinc2	equ	0xFDE
 23965                           postdec2	equ	0xFDD
 23966                           plusw2	equ	0xFDB
 23967                           fsr2h	equ	0xFDA
 23968                           fsr2l	equ	0xFD9
 23969                           status	equ	0xFD8
 23970                           
 23971 ;; *************** function _ADC_SetChannel *****************
 23972 ;; Defined at:
 23973 ;;		line 155 in file "Library/ADC.c"
 23974 ;; Parameters:    Size  Location     Type
 23975 ;;  pChannel        1    wreg     enum E6742
 23976 ;; Auto vars:     Size  Location     Type
 23977 ;;  pChannel        1    1[BANK0 ] enum E6742
 23978 ;; Return value:  Size  Location     Type
 23979 ;;                  1    wreg      void 
 23980 ;; Registers used:
 23981 ;;		wreg, status,2, status,0
 23982 ;; Tracked objects:
 23983 ;;		On entry : 0/0
 23984 ;;		On exit  : 0/0
 23985 ;;		Unchanged: 0/0
 23986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23991 ;;Total ram usage:        2 bytes
 23992 ;; Hardware stack levels used:    1
 23993 ;; Hardware stack levels required when called:    7
 23994 ;; This function calls:
 23995 ;;		Nothing
 23996 ;; This function is called by:
 23997 ;;		_ADC_Init
 23998 ;;		_ADC_Start
 23999 ;;		_ADC_ISR
 24000 ;;		_ADC_Sample
 24001 ;; This function uses a non-reentrant model
 24002 ;;
 24003                           
 24004                           	psect	text117
 24005  01638E                     __ptext117:
 24006                           	opt stack 0
 24007  01638E                     _ADC_SetChannel:
 24008                           	opt stack 21
 24009                           
 24010                           ; BSR set to: 0
 24011                           ;incstack = 0
 24012                           ;ADC_SetChannel@pChannel stored from wreg
 24013  01638E  0100               	movlb	0	; () banked
 24014  016390  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24015                           
 24016                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24017  016392  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24018  016396  0100               	movlb	0	; () banked
 24019  016398  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24020  01639A  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24021  01639C  50C2               	movf	4034,w,c	;volatile
 24022  01639E  0100               	movlb	0	; () banked
 24023  0163A0  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24024  0163A2  0BC3               	andlw	-61
 24025  0163A4  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24026  0163A6  6EC2               	movwf	4034,c	;volatile
 24027                           
 24028                           ; BSR set to: 0
 24029  0163A8  0012               	return		;funcret
 24030  0163AA                     __end_of_ADC_SetChannel:
 24031                           	opt stack 0
 24032                           tosu	equ	0xFFF
 24033                           tosh	equ	0xFFE
 24034                           tosl	equ	0xFFD
 24035                           pclath	equ	0xFFA
 24036                           tblptru	equ	0xFF8
 24037                           tblptrh	equ	0xFF7
 24038                           tblptrl	equ	0xFF6
 24039                           tablat	equ	0xFF5
 24040                           prodh	equ	0xFF4
 24041                           prodl	equ	0xFF3
 24042                           intcon	equ	0xFF2
 24043                           postinc0	equ	0xFEE
 24044                           wreg	equ	0xFE8
 24045                           indf1	equ	0xFE7
 24046                           postdec1	equ	0xFE5
 24047                           fsr1h	equ	0xFE2
 24048                           fsr1l	equ	0xFE1
 24049                           indf2	equ	0xFDF
 24050                           postinc2	equ	0xFDE
 24051                           postdec2	equ	0xFDD
 24052                           plusw2	equ	0xFDB
 24053                           fsr2h	equ	0xFDA
 24054                           fsr2l	equ	0xFD9
 24055                           status	equ	0xFD8
 24056                           
 24057 ;; *************** function _ADC_ConversionTime *****************
 24058 ;; Defined at:
 24059 ;;		line 199 in file "Library/ADC.c"
 24060 ;; Parameters:    Size  Location     Type
 24061 ;;  pCount          1    wreg     unsigned char 
 24062 ;; Auto vars:     Size  Location     Type
 24063 ;;  pCount          1    1[BANK0 ] unsigned char 
 24064 ;; Return value:  Size  Location     Type
 24065 ;;                  1    wreg      void 
 24066 ;; Registers used:
 24067 ;;		wreg, status,2, status,0
 24068 ;; Tracked objects:
 24069 ;;		On entry : 0/0
 24070 ;;		On exit  : 0/0
 24071 ;;		Unchanged: 0/0
 24072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24077 ;;Total ram usage:        2 bytes
 24078 ;; Hardware stack levels used:    1
 24079 ;; Hardware stack levels required when called:    7
 24080 ;; This function calls:
 24081 ;;		Nothing
 24082 ;; This function is called by:
 24083 ;;		_ADC_Init
 24084 ;; This function uses a non-reentrant model
 24085 ;;
 24086                           
 24087                           	psect	text118
 24088  015B54                     __ptext118:
 24089                           	opt stack 0
 24090  015B54                     _ADC_ConversionTime:
 24091                           	opt stack 21
 24092                           
 24093                           ; BSR set to: 0
 24094                           ;incstack = 0
 24095                           ;ADC_ConversionTime@pCount stored from wreg
 24096  015B54  0100               	movlb	0	; () banked
 24097  015B56  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24098                           
 24099                           ;ADC.c: 201: if (pCount == 10)
 24100  015B58  0E0A               	movlw	10
 24101  015B5A  0100               	movlb	0	; () banked
 24102  015B5C  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24103  015B5E  B4D8               	btfsc	status,2,c
 24104  015B60  D00A               	goto	u10050
 24105                           
 24106                           ; BSR set to: 0
 24107                           ;ADC.c: 203: else if (pCount == 14)
 24108                           
 24109                           ; BSR set to: 0
 24110                           
 24111                           ; BSR set to: 0
 24112                           ;ADC.c: 202: pCount -= 2;
 24113  015B62  0E0E               	movlw	14
 24114  015B64  0100               	movlb	0	; () banked
 24115  015B66  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24116  015B68  B4D8               	btfsc	status,2,c
 24117  015B6A  D005               	goto	u10050
 24118                           
 24119                           ; BSR set to: 0
 24120                           ;ADC.c: 205: else if (pCount == 18)
 24121                           
 24122                           ; BSR set to: 0
 24123                           
 24124                           ; BSR set to: 0
 24125                           ;ADC.c: 204: pCount -= 2;
 24126  015B6C  0E12               	movlw	18
 24127  015B6E  0100               	movlb	0	; () banked
 24128  015B70  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24129  015B72  A4D8               	btfss	status,2,c
 24130  015B74  D003               	goto	l1313
 24131  015B76                     u10050:
 24132                           
 24133                           ; BSR set to: 0
 24134                           ;ADC.c: 206: pCount -= 2;
 24135  015B76  0E02               	movlw	2
 24136  015B78  0100               	movlb	0	; () banked
 24137  015B7A  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24138  015B7C                     l1313:
 24139                           
 24140                           ; BSR set to: 0
 24141                           ;ADC.c: 208: pCount <<= 1;
 24142                           
 24143                           ; BSR set to: 0
 24144                           
 24145                           ; BSR set to: 0
 24146  015B7C  0100               	movlb	0	; () banked
 24147  015B7E  90D8               	bcf	status,0,c
 24148  015B80  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24149                           
 24150                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24151  015B82  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24152  015B86  0100               	movlb	0	; () banked
 24153  015B88  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24154  015B8A  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24155  015B8C  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24156  015B8E  50C1               	movf	4033,w,c	;volatile
 24157  015B90  0100               	movlb	0	; () banked
 24158  015B92  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24159  015B94  0BC7               	andlw	-57
 24160  015B96  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24161  015B98  6EC1               	movwf	4033,c	;volatile
 24162                           
 24163                           ; BSR set to: 0
 24164  015B9A  0012               	return		;funcret
 24165  015B9C                     __end_of_ADC_ConversionTime:
 24166                           	opt stack 0
 24167                           tosu	equ	0xFFF
 24168                           tosh	equ	0xFFE
 24169                           tosl	equ	0xFFD
 24170                           pclath	equ	0xFFA
 24171                           tblptru	equ	0xFF8
 24172                           tblptrh	equ	0xFF7
 24173                           tblptrl	equ	0xFF6
 24174                           tablat	equ	0xFF5
 24175                           prodh	equ	0xFF4
 24176                           prodl	equ	0xFF3
 24177                           intcon	equ	0xFF2
 24178                           postinc0	equ	0xFEE
 24179                           wreg	equ	0xFE8
 24180                           indf1	equ	0xFE7
 24181                           postdec1	equ	0xFE5
 24182                           fsr1h	equ	0xFE2
 24183                           fsr1l	equ	0xFE1
 24184                           indf2	equ	0xFDF
 24185                           postinc2	equ	0xFDE
 24186                           postdec2	equ	0xFDD
 24187                           plusw2	equ	0xFDB
 24188                           fsr2h	equ	0xFDA
 24189                           fsr2l	equ	0xFD9
 24190                           status	equ	0xFD8
 24191                           
 24192 ;; *************** function _ADC_ClockDivision *****************
 24193 ;; Defined at:
 24194 ;;		line 159 in file "Library/ADC.c"
 24195 ;; Parameters:    Size  Location     Type
 24196 ;;  pDivide         1    wreg     unsigned char 
 24197 ;; Auto vars:     Size  Location     Type
 24198 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24199 ;;  unfound         1    2[BANK0 ] unsigned char 
 24200 ;;  reg             1    1[BANK0 ] unsigned char 
 24201 ;; Return value:  Size  Location     Type
 24202 ;;                  1    wreg      void 
 24203 ;; Registers used:
 24204 ;;		wreg, status,2, status,0
 24205 ;; Tracked objects:
 24206 ;;		On entry : 0/0
 24207 ;;		On exit  : 0/0
 24208 ;;		Unchanged: 0/0
 24209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24211 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24213 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24214 ;;Total ram usage:        3 bytes
 24215 ;; Hardware stack levels used:    1
 24216 ;; Hardware stack levels required when called:    7
 24217 ;; This function calls:
 24218 ;;		Nothing
 24219 ;; This function is called by:
 24220 ;;		_ADC_Init
 24221 ;; This function uses a non-reentrant model
 24222 ;;
 24223                           
 24224                           	psect	text119
 24225  014DD8                     __ptext119:
 24226                           	opt stack 0
 24227  014DD8                     _ADC_ClockDivision:
 24228                           	opt stack 21
 24229                           
 24230                           ; BSR set to: 0
 24231                           ;incstack = 0
 24232                           ;ADC_ClockDivision@pDivide stored from wreg
 24233  014DD8  0100               	movlb	0	; () banked
 24234  014DDA  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24235                           
 24236                           ;ADC.c: 161: UINT8 reg = 0;
 24237  014DDC  0E00               	movlw	0
 24238  014DDE  0100               	movlb	0	; () banked
 24239  014DE0  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24240                           
 24241                           ;ADC.c: 162: bool unfound = 1;
 24242  014DE2  0E01               	movlw	1
 24243  014DE4  D002               	goto	L15
 24244  014DE6                     
 24245                           ; BSR set to: 0
 24246                           ;ADC.c: 167: reg = 0;
 24247                           
 24248                           ; BSR set to: 0
 24249  014DE6  0E00               	movlw	0
 24250  014DE8  D00C               	goto	L20
 24251  014DEA                     L15:
 24252  014DEA  0100               	movlb	0	; () banked
 24253  014DEC  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24254                           
 24255                           ;ADC.c: 169: break;
 24256  014DEE  D02D               	goto	l1296
 24257  014DF0                     
 24258                           ; BSR set to: 0
 24259                           ;ADC.c: 171: reg = 0b100;
 24260                           
 24261                           ; BSR set to: 0
 24262  014DF0  0E04               	movlw	4
 24263  014DF2  D007               	goto	L20
 24264  014DF4                     
 24265                           ; BSR set to: 0
 24266                           ;ADC.c: 175: reg = 0b001;
 24267                           
 24268                           ; BSR set to: 0
 24269  014DF4  0E01               	movlw	1
 24270  014DF6  D005               	goto	L20
 24271  014DF8                     
 24272                           ; BSR set to: 0
 24273                           ;ADC.c: 179: reg = 0b101;
 24274                           
 24275                           ; BSR set to: 0
 24276  014DF8  0E05               	movlw	5
 24277  014DFA  D003               	goto	L20
 24278  014DFC                     
 24279                           ; BSR set to: 0
 24280                           ;ADC.c: 183: reg = 0b010;
 24281                           
 24282                           ; BSR set to: 0
 24283  014DFC  0E02               	movlw	2
 24284  014DFE  D001               	goto	L20
 24285  014E00                     
 24286                           ; BSR set to: 0
 24287                           ;ADC.c: 187: reg = 0b110;
 24288                           
 24289                           ; BSR set to: 0
 24290  014E00  0E06               	movlw	6
 24291  014E02                     L20:
 24292  014E02  0100               	movlb	0	; () banked
 24293  014E04  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24294                           
 24295                           ;ADC.c: 188: unfound = 0;
 24296  014E06  0E00               	movlw	0
 24297  014E08  D7F0               	goto	L15
 24298  014E0A                     
 24299                           ; BSR set to: 0
 24300                           ;ADC.c: 191: if (pDivide > 2)
 24301                           
 24302                           ; BSR set to: 0
 24303  014E0A  0E02               	movlw	2
 24304  014E0C  0100               	movlb	0	; () banked
 24305  014E0E  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24306  014E10  D003               	goto	l1303
 24307                           
 24308                           ; BSR set to: 0
 24309                           ;ADC.c: 192: pDivide --;
 24310  014E12  0100               	movlb	0	; () banked
 24311  014E14  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24312  014E16  D019               	goto	l1296
 24313  014E18                     l1303:
 24314                           
 24315                           ; BSR set to: 0
 24316                           ;ADC.c: 193: else
 24317                           ;ADC.c: 194: pDivide = 2;
 24318                           
 24319                           ; BSR set to: 0
 24320  014E18  0E02               	movlw	2
 24321  014E1A  0100               	movlb	0	; () banked
 24322  014E1C  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24323                           
 24324                           ; BSR set to: 0
 24325                           ;ADC.c: 195: };
 24326  014E1E  D015               	goto	l1296
 24327  014E20                     
 24328                           ; BSR set to: 0
 24329                           
 24330                           ; BSR set to: 0
 24331  014E20  0100               	movlb	0	; () banked
 24332  014E22  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24333                           
 24334                           ; Switch size 1, requested type "space"
 24335                           ; Number of cases is 6, Range of values is 2 to 64
 24336                           ; switch strategies available:
 24337                           ; Name         Instructions Cycles
 24338                           ; simple_byte           19    10 (average)
 24339                           ;	Chosen strategy is simple_byte
 24340  014E24  0A02               	xorlw	2	; case 2
 24341  014E26  B4D8               	btfsc	status,2,c
 24342  014E28  D7DE               	goto	l1295
 24343  014E2A  0A06               	xorlw	6	; case 4
 24344  014E2C  B4D8               	btfsc	status,2,c
 24345  014E2E  D7E0               	goto	l1297
 24346  014E30  0A0C               	xorlw	12	; case 8
 24347  014E32  B4D8               	btfsc	status,2,c
 24348  014E34  D7DF               	goto	l1298
 24349  014E36  0A18               	xorlw	24	; case 16
 24350  014E38  B4D8               	btfsc	status,2,c
 24351  014E3A  D7DE               	goto	l1299
 24352  014E3C  0A30               	xorlw	48	; case 32
 24353  014E3E  B4D8               	btfsc	status,2,c
 24354  014E40  D7DD               	goto	l1300
 24355  014E42  0A60               	xorlw	96	; case 64
 24356  014E44  B4D8               	btfsc	status,2,c
 24357  014E46  D7DC               	goto	l1301
 24358  014E48  D7E0               	goto	l1302
 24359  014E4A                     l1296:
 24360                           
 24361                           ; BSR set to: 0
 24362                           
 24363                           ; BSR set to: 0
 24364                           
 24365                           ; BSR set to: 0
 24366  014E4A  0100               	movlb	0	; () banked
 24367  014E4C  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24368  014E4E  0100               	movlb	0	; () banked
 24369  014E50  A4D8               	btfss	status,2,c
 24370  014E52  D7E6               	goto	l1294
 24371                           
 24372                           ; BSR set to: 0
 24373                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24374                           
 24375                           ; BSR set to: 0
 24376  014E54  50C1               	movf	4033,w,c	;volatile
 24377  014E56  0100               	movlb	0	; () banked
 24378  014E58  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24379  014E5A  0BF8               	andlw	-8
 24380  014E5C  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24381  014E5E  6EC1               	movwf	4033,c	;volatile
 24382                           
 24383                           ; BSR set to: 0
 24384  014E60  0012               	return		;funcret
 24385  014E62                     __end_of_ADC_ClockDivision:
 24386                           	opt stack 0
 24387                           tosu	equ	0xFFF
 24388                           tosh	equ	0xFFE
 24389                           tosl	equ	0xFFD
 24390                           pclath	equ	0xFFA
 24391                           tblptru	equ	0xFF8
 24392                           tblptrh	equ	0xFF7
 24393                           tblptrl	equ	0xFF6
 24394                           tablat	equ	0xFF5
 24395                           prodh	equ	0xFF4
 24396                           prodl	equ	0xFF3
 24397                           intcon	equ	0xFF2
 24398                           postinc0	equ	0xFEE
 24399                           wreg	equ	0xFE8
 24400                           indf1	equ	0xFE7
 24401                           postdec1	equ	0xFE5
 24402                           fsr1h	equ	0xFE2
 24403                           fsr1l	equ	0xFE1
 24404                           indf2	equ	0xFDF
 24405                           postinc2	equ	0xFDE
 24406                           postdec2	equ	0xFDD
 24407                           plusw2	equ	0xFDB
 24408                           fsr2h	equ	0xFDA
 24409                           fsr2l	equ	0xFD9
 24410                           status	equ	0xFD8
 24411                           
 24412 ;; *************** function _ADC_Calibrate *****************
 24413 ;; Defined at:
 24414 ;;		line 63 in file "Library/ADC.c"
 24415 ;; Parameters:    Size  Location     Type
 24416 ;;		None
 24417 ;; Auto vars:     Size  Location     Type
 24418 ;;		None
 24419 ;; Return value:  Size  Location     Type
 24420 ;;                  1    wreg      void 
 24421 ;; Registers used:
 24422 ;;		cstack
 24423 ;; Tracked objects:
 24424 ;;		On entry : 0/0
 24425 ;;		On exit  : 0/0
 24426 ;;		Unchanged: 0/0
 24427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24432 ;;Total ram usage:        0 bytes
 24433 ;; Hardware stack levels used:    1
 24434 ;; Hardware stack levels required when called:    8
 24435 ;; This function calls:
 24436 ;;		_ADC_Off
 24437 ;;		_ADC_On
 24438 ;; This function is called by:
 24439 ;;		_ADC_Init
 24440 ;; This function uses a non-reentrant model
 24441 ;;
 24442                           
 24443                           	psect	text120
 24444  016498                     __ptext120:
 24445                           	opt stack 0
 24446  016498                     _ADC_Calibrate:
 24447                           	opt stack 20
 24448                           
 24449                           ;ADC.c: 65: ADC_On();
 24450                           
 24451                           ; BSR set to: 0
 24452                           ;incstack = 0
 24453  016498  ECD8  F0B2         	call	_ADC_On	;wreg free
 24454                           
 24455                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24456  01649C  8CC1               	bsf	4033,6,c	;volatile
 24457                           
 24458                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24459  01649E  82C2               	bsf	4034,1,c	;volatile
 24460  0164A0  B2C2               	btfsc	4034,1,c	;volatile
 24461  0164A2  D7FE               	goto	l1254
 24462                           
 24463                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24464  0164A4  9CC1               	bcf	4033,6,c	;volatile
 24465                           
 24466                           ;ADC.c: 73: ADC_Off();
 24467  0164A6  ECCA  F0B2         	call	_ADC_Off	;wreg free
 24468  0164AA  0012               	return		;funcret
 24469  0164AC                     __end_of_ADC_Calibrate:
 24470                           	opt stack 0
 24471                           tosu	equ	0xFFF
 24472                           tosh	equ	0xFFE
 24473                           tosl	equ	0xFFD
 24474                           pclath	equ	0xFFA
 24475                           tblptru	equ	0xFF8
 24476                           tblptrh	equ	0xFF7
 24477                           tblptrl	equ	0xFF6
 24478                           tablat	equ	0xFF5
 24479                           prodh	equ	0xFF4
 24480                           prodl	equ	0xFF3
 24481                           intcon	equ	0xFF2
 24482                           postinc0	equ	0xFEE
 24483                           wreg	equ	0xFE8
 24484                           indf1	equ	0xFE7
 24485                           postdec1	equ	0xFE5
 24486                           fsr1h	equ	0xFE2
 24487                           fsr1l	equ	0xFE1
 24488                           indf2	equ	0xFDF
 24489                           postinc2	equ	0xFDE
 24490                           postdec2	equ	0xFDD
 24491                           plusw2	equ	0xFDB
 24492                           fsr2h	equ	0xFDA
 24493                           fsr2l	equ	0xFD9
 24494                           status	equ	0xFD8
 24495                           
 24496 ;; *************** function _ADC_On *****************
 24497 ;; Defined at:
 24498 ;;		line 85 in file "Library/ADC.c"
 24499 ;; Parameters:    Size  Location     Type
 24500 ;;		None
 24501 ;; Auto vars:     Size  Location     Type
 24502 ;;		None
 24503 ;; Return value:  Size  Location     Type
 24504 ;;                  1    wreg      void 
 24505 ;; Registers used:
 24506 ;;		None
 24507 ;; Tracked objects:
 24508 ;;		On entry : 0/0
 24509 ;;		On exit  : 0/0
 24510 ;;		Unchanged: 0/0
 24511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24516 ;;Total ram usage:        0 bytes
 24517 ;; Hardware stack levels used:    1
 24518 ;; Hardware stack levels required when called:    7
 24519 ;; This function calls:
 24520 ;;		Nothing
 24521 ;; This function is called by:
 24522 ;;		_ADC_Calibrate
 24523 ;;		_ADC_Start
 24524 ;;		_ADC_ISR
 24525 ;;		_ADC_Sample
 24526 ;; This function uses a non-reentrant model
 24527 ;;
 24528                           
 24529                           	psect	text121
 24530  0165B0                     __ptext121:
 24531                           	opt stack 0
 24532  0165B0                     _ADC_On:
 24533                           	opt stack 21
 24534                           
 24535                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24536                           
 24537                           ;incstack = 0
 24538  0165B0  80C2               	bsf	4034,0,c	;volatile
 24539                           
 24540                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24541  0165B2  9C9E               	bcf	3998,6,c	;volatile
 24542  0165B4  0012               	return		;funcret
 24543  0165B6                     __end_of_ADC_On:
 24544                           	opt stack 0
 24545                           tosu	equ	0xFFF
 24546                           tosh	equ	0xFFE
 24547                           tosl	equ	0xFFD
 24548                           pclath	equ	0xFFA
 24549                           tblptru	equ	0xFF8
 24550                           tblptrh	equ	0xFF7
 24551                           tblptrl	equ	0xFF6
 24552                           tablat	equ	0xFF5
 24553                           prodh	equ	0xFF4
 24554                           prodl	equ	0xFF3
 24555                           intcon	equ	0xFF2
 24556                           postinc0	equ	0xFEE
 24557                           wreg	equ	0xFE8
 24558                           indf1	equ	0xFE7
 24559                           postdec1	equ	0xFE5
 24560                           fsr1h	equ	0xFE2
 24561                           fsr1l	equ	0xFE1
 24562                           indf2	equ	0xFDF
 24563                           postinc2	equ	0xFDE
 24564                           postdec2	equ	0xFDD
 24565                           plusw2	equ	0xFDB
 24566                           fsr2h	equ	0xFDA
 24567                           fsr2l	equ	0xFD9
 24568                           status	equ	0xFD8
 24569                           
 24570 ;; *************** function _ADC_Off *****************
 24571 ;; Defined at:
 24572 ;;		line 94 in file "Library/ADC.c"
 24573 ;; Parameters:    Size  Location     Type
 24574 ;;		None
 24575 ;; Auto vars:     Size  Location     Type
 24576 ;;		None
 24577 ;; Return value:  Size  Location     Type
 24578 ;;                  1    wreg      void 
 24579 ;; Registers used:
 24580 ;;		None
 24581 ;; Tracked objects:
 24582 ;;		On entry : 0/0
 24583 ;;		On exit  : 0/0
 24584 ;;		Unchanged: 0/0
 24585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24590 ;;Total ram usage:        0 bytes
 24591 ;; Hardware stack levels used:    1
 24592 ;; Hardware stack levels required when called:    7
 24593 ;; This function calls:
 24594 ;;		Nothing
 24595 ;; This function is called by:
 24596 ;;		_ADC_Calibrate
 24597 ;;		_ADC_Start
 24598 ;;		_ADC_ISR
 24599 ;;		_ADC_Sample
 24600 ;; This function uses a non-reentrant model
 24601 ;;
 24602                           
 24603                           	psect	text122
 24604  016594                     __ptext122:
 24605                           	opt stack 0
 24606  016594                     _ADC_Off:
 24607                           	opt stack 21
 24608                           
 24609                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 24610                           
 24611                           ;incstack = 0
 24612  016594  90C2               	bcf	4034,0,c	;volatile
 24613                           
 24614                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 24615  016596  9C9E               	bcf	3998,6,c	;volatile
 24616                           
 24617                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 24618  016598  9C9D               	bcf	3997,6,c	;volatile
 24619  01659A  0012               	return		;funcret
 24620  01659C                     __end_of_ADC_Off:
 24621                           	opt stack 0
 24622                           tosu	equ	0xFFF
 24623                           tosh	equ	0xFFE
 24624                           tosl	equ	0xFFD
 24625                           pclath	equ	0xFFA
 24626                           tblptru	equ	0xFF8
 24627                           tblptrh	equ	0xFF7
 24628                           tblptrl	equ	0xFF6
 24629                           tablat	equ	0xFF5
 24630                           prodh	equ	0xFF4
 24631                           prodl	equ	0xFF3
 24632                           intcon	equ	0xFF2
 24633                           postinc0	equ	0xFEE
 24634                           wreg	equ	0xFE8
 24635                           indf1	equ	0xFE7
 24636                           postdec1	equ	0xFE5
 24637                           fsr1h	equ	0xFE2
 24638                           fsr1l	equ	0xFE1
 24639                           indf2	equ	0xFDF
 24640                           postinc2	equ	0xFDE
 24641                           postdec2	equ	0xFDD
 24642                           plusw2	equ	0xFDB
 24643                           fsr2h	equ	0xFDA
 24644                           fsr2l	equ	0xFD9
 24645                           status	equ	0xFD8
 24646                           
 24647 ;; *************** function _getMode *****************
 24648 ;; Defined at:
 24649 ;;		line 102 in file "main.c"
 24650 ;; Parameters:    Size  Location     Type
 24651 ;;		None
 24652 ;; Auto vars:     Size  Location     Type
 24653 ;;		None
 24654 ;; Return value:  Size  Location     Type
 24655 ;;                  1    wreg      void 
 24656 ;; Registers used:
 24657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24658 ;; Tracked objects:
 24659 ;;		On entry : 0/0
 24660 ;;		On exit  : 0/0
 24661 ;;		Unchanged: 0/0
 24662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24667 ;;Total ram usage:        0 bytes
 24668 ;; Hardware stack levels used:    1
 24669 ;; Hardware stack levels required when called:   16
 24670 ;; This function calls:
 24671 ;;		_HMI_DIPSwitch
 24672 ;;		_HMI_DownSwitch
 24673 ;;		_HMI_LeftSwitch
 24674 ;;		_HMI_Poll
 24675 ;;		_HMI_RightSwitch
 24676 ;;		_HMI_UpSwitch
 24677 ;;		_MXK_DIPSwitch
 24678 ;;		_MXK_TestButton
 24679 ;; This function is called by:
 24680 ;;		_main
 24681 ;; This function uses a non-reentrant model
 24682 ;;
 24683                           
 24684                           	psect	text123
 24685  014018                     __ptext123:
 24686                           	opt stack 0
 24687  014018                     _getMode:
 24688                           	opt stack 14
 24689                           
 24690                           ;main.c: 103: HMI_Poll();
 24691                           
 24692                           ;incstack = 0
 24693  014018  EC98  F0A9         	call	_HMI_Poll	;wreg free
 24694                           
 24695                           ;main.c: 104: mode = 0;
 24696  01401C  0E00               	movlw	0
 24697  01401E  0103               	movlb	3	; () banked
 24698  014020  6F24               	movwf	(_mode+1)& (0+255),b
 24699  014022  0E00               	movlw	0
 24700  014024  6F23               	movwf	_mode& (0+255),b
 24701                           
 24702                           ; BSR set to: 3
 24703                           ;main.c: 105: if (HMIBoard.mUp.mGetState()) {
 24704  014026  EE23  F04C         	lfsr	2,_HMIBoard+35
 24705  01402A  D801               	call	u11508
 24706  01402C  D00A               	goto	u11509
 24707  01402E                     u11508:
 24708  01402E  0005               	push	
 24709  014030  6EFA               	movwf	pclath,c
 24710  014032  50DE               	movf	postinc2,w,c
 24711  014034  6EFD               	movwf	tosl,c
 24712  014036  50DE               	movf	postinc2,w,c
 24713  014038  6EFE               	movwf	tosh,c
 24714  01403A  50DE               	movf	postinc2,w,c
 24715  01403C  6EFF               	movwf	tosu,c
 24716  01403E  50FA               	movf	pclath,w,c
 24717  014040  0012               	return		;indir
 24718  014042                     u11509:
 24719  014042  0900               	iorlw	0
 24720  014044  B4D8               	btfsc	status,2,c
 24721  014046  D005               	goto	l2305
 24722                           
 24723                           ;main.c: 106: mode = 1;
 24724  014048  0E00               	movlw	0
 24725  01404A  0103               	movlb	3	; () banked
 24726  01404C  6F24               	movwf	(_mode+1)& (0+255),b
 24727  01404E  0E01               	movlw	1
 24728  014050  6F23               	movwf	_mode& (0+255),b
 24729  014052                     l2305:
 24730                           
 24731                           ;main.c: 107: }
 24732                           ;main.c: 108: if (HMIBoard.mRight.mGetState()) {
 24733                           
 24734                           ; BSR set to: 3
 24735  014052  EE23  F038         	lfsr	2,_HMIBoard+15
 24736  014056  D801               	call	u11528
 24737  014058  D00A               	goto	u11529
 24738  01405A                     u11528:
 24739  01405A  0005               	push	
 24740  01405C  6EFA               	movwf	pclath,c
 24741  01405E  50DE               	movf	postinc2,w,c
 24742  014060  6EFD               	movwf	tosl,c
 24743  014062  50DE               	movf	postinc2,w,c
 24744  014064  6EFE               	movwf	tosh,c
 24745  014066  50DE               	movf	postinc2,w,c
 24746  014068  6EFF               	movwf	tosu,c
 24747  01406A  50FA               	movf	pclath,w,c
 24748  01406C  0012               	return		;indir
 24749  01406E                     u11529:
 24750  01406E  0900               	iorlw	0
 24751  014070  B4D8               	btfsc	status,2,c
 24752  014072  D005               	goto	l2306
 24753                           
 24754                           ;main.c: 109: mode = 2;
 24755  014074  0E00               	movlw	0
 24756  014076  0103               	movlb	3	; () banked
 24757  014078  6F24               	movwf	(_mode+1)& (0+255),b
 24758  01407A  0E02               	movlw	2
 24759  01407C  6F23               	movwf	_mode& (0+255),b
 24760  01407E                     l2306:
 24761                           
 24762                           ;main.c: 110: }
 24763                           ;main.c: 111: if (HMIBoard.mDown.mGetState()) {
 24764                           
 24765                           ; BSR set to: 3
 24766  01407E  EE23  F056         	lfsr	2,_HMIBoard+45
 24767  014082  D801               	call	u11548
 24768  014084  D00A               	goto	u11549
 24769  014086                     u11548:
 24770  014086  0005               	push	
 24771  014088  6EFA               	movwf	pclath,c
 24772  01408A  50DE               	movf	postinc2,w,c
 24773  01408C  6EFD               	movwf	tosl,c
 24774  01408E  50DE               	movf	postinc2,w,c
 24775  014090  6EFE               	movwf	tosh,c
 24776  014092  50DE               	movf	postinc2,w,c
 24777  014094  6EFF               	movwf	tosu,c
 24778  014096  50FA               	movf	pclath,w,c
 24779  014098  0012               	return		;indir
 24780  01409A                     u11549:
 24781  01409A  0900               	iorlw	0
 24782  01409C  B4D8               	btfsc	status,2,c
 24783  01409E  D005               	goto	l2307
 24784                           
 24785                           ;main.c: 112: mode = 3;
 24786  0140A0  0E00               	movlw	0
 24787  0140A2  0103               	movlb	3	; () banked
 24788  0140A4  6F24               	movwf	(_mode+1)& (0+255),b
 24789  0140A6  0E03               	movlw	3
 24790  0140A8  6F23               	movwf	_mode& (0+255),b
 24791  0140AA                     l2307:
 24792                           
 24793                           ;main.c: 113: }
 24794                           ;main.c: 114: if (HMIBoard.mLeft.mGetState()) {
 24795                           
 24796                           ; BSR set to: 3
 24797  0140AA  EE23  F042         	lfsr	2,_HMIBoard+25
 24798  0140AE  D801               	call	u11568
 24799  0140B0  D00A               	goto	u11569
 24800  0140B2                     u11568:
 24801  0140B2  0005               	push	
 24802  0140B4  6EFA               	movwf	pclath,c
 24803  0140B6  50DE               	movf	postinc2,w,c
 24804  0140B8  6EFD               	movwf	tosl,c
 24805  0140BA  50DE               	movf	postinc2,w,c
 24806  0140BC  6EFE               	movwf	tosh,c
 24807  0140BE  50DE               	movf	postinc2,w,c
 24808  0140C0  6EFF               	movwf	tosu,c
 24809  0140C2  50FA               	movf	pclath,w,c
 24810  0140C4  0012               	return		;indir
 24811  0140C6                     u11569:
 24812  0140C6  0900               	iorlw	0
 24813  0140C8  B4D8               	btfsc	status,2,c
 24814  0140CA  0012               	return	
 24815                           
 24816                           ;main.c: 115: mode = 4;
 24817  0140CC  0E00               	movlw	0
 24818  0140CE  0103               	movlb	3	; () banked
 24819  0140D0  6F24               	movwf	(_mode+1)& (0+255),b
 24820  0140D2  0E04               	movlw	4
 24821  0140D4  6F23               	movwf	_mode& (0+255),b
 24822  0140D6  0012               	return	
 24823  0140D8                     __end_of_getMode:
 24824                           	opt stack 0
 24825                           tosu	equ	0xFFF
 24826                           tosh	equ	0xFFE
 24827                           tosl	equ	0xFFD
 24828                           pclath	equ	0xFFA
 24829                           tblptru	equ	0xFF8
 24830                           tblptrh	equ	0xFF7
 24831                           tblptrl	equ	0xFF6
 24832                           tablat	equ	0xFF5
 24833                           prodh	equ	0xFF4
 24834                           prodl	equ	0xFF3
 24835                           intcon	equ	0xFF2
 24836                           postinc0	equ	0xFEE
 24837                           wreg	equ	0xFE8
 24838                           indf1	equ	0xFE7
 24839                           postdec1	equ	0xFE5
 24840                           fsr1h	equ	0xFE2
 24841                           fsr1l	equ	0xFE1
 24842                           indf2	equ	0xFDF
 24843                           postinc2	equ	0xFDE
 24844                           postdec2	equ	0xFDD
 24845                           plusw2	equ	0xFDB
 24846                           fsr2h	equ	0xFDA
 24847                           fsr2l	equ	0xFD9
 24848                           status	equ	0xFD8
 24849                           
 24850 ;; *************** function _HMI_Poll *****************
 24851 ;; Defined at:
 24852 ;;		line 252 in file "HMI.c"
 24853 ;; Parameters:    Size  Location     Type
 24854 ;;		None
 24855 ;; Auto vars:     Size  Location     Type
 24856 ;;		None
 24857 ;; Return value:  Size  Location     Type
 24858 ;;                  1    wreg      void 
 24859 ;; Registers used:
 24860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24861 ;; Tracked objects:
 24862 ;;		On entry : 0/0
 24863 ;;		On exit  : 0/0
 24864 ;;		Unchanged: 0/0
 24865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24870 ;;Total ram usage:        0 bytes
 24871 ;; Hardware stack levels used:    1
 24872 ;; Hardware stack levels required when called:   15
 24873 ;; This function calls:
 24874 ;;		_Button_Poll
 24875 ;; This function is called by:
 24876 ;;		_getMode
 24877 ;;		_mode1
 24878 ;;		_mode2
 24879 ;;		_mode4
 24880 ;;		_main
 24881 ;; This function uses a non-reentrant model
 24882 ;;
 24883                           
 24884                           	psect	text124
 24885  015330                     __ptext124:
 24886                           	opt stack 0
 24887  015330                     _HMI_Poll:
 24888                           	opt stack 14
 24889                           
 24890                           ;HMI.c: 254: TRISE = 0xFC;
 24891                           
 24892                           ;incstack = 0
 24893  015330  0EFC               	movlw	252
 24894  015332  6E96               	movwf	3990,c	;volatile
 24895                           
 24896                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 24897  015334  0E59               	movlw	low (_HMIBoard+48)
 24898  015336  0100               	movlb	0	; () banked
 24899  015338  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 24900  01533A  0E03               	movlw	high (_HMIBoard+48)
 24901  01533C  0100               	movlb	0	; () banked
 24902  01533E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 24903  015340  0E01               	movlw	1
 24904  015342  0100               	movlb	0	; () banked
 24905  015344  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 24906  015346  EC03  F098         	call	_Button_Poll	;wreg free
 24907                           
 24908                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 24909  01534A  0E3B               	movlw	low (_HMIBoard+18)
 24910  01534C  0100               	movlb	0	; () banked
 24911  01534E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 24912  015350  0E03               	movlw	high (_HMIBoard+18)
 24913  015352  0100               	movlb	0	; () banked
 24914  015354  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 24915  015356  0E01               	movlw	1
 24916  015358  0100               	movlb	0	; () banked
 24917  01535A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 24918  01535C  EC03  F098         	call	_Button_Poll	;wreg free
 24919                           
 24920                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 24921  015360  0E31               	movlw	low (_HMIBoard+8)
 24922  015362  0100               	movlb	0	; () banked
 24923  015364  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 24924  015366  0E03               	movlw	high (_HMIBoard+8)
 24925  015368  0100               	movlb	0	; () banked
 24926  01536A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 24927  01536C  0E01               	movlw	1
 24928  01536E  0100               	movlb	0	; () banked
 24929  015370  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 24930  015372  EC03  F098         	call	_Button_Poll	;wreg free
 24931                           
 24932                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 24933  015376  0E45               	movlw	low (_HMIBoard+28)
 24934  015378  0100               	movlb	0	; () banked
 24935  01537A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 24936  01537C  0E03               	movlw	high (_HMIBoard+28)
 24937  01537E  0100               	movlb	0	; () banked
 24938  015380  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 24939  015382  0E01               	movlw	1
 24940  015384  0100               	movlb	0	; () banked
 24941  015386  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 24942  015388  EC03  F098         	call	_Button_Poll	;wreg free
 24943                           
 24944                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 24945  01538C  0E4F               	movlw	low (_HMIBoard+38)
 24946  01538E  0100               	movlb	0	; () banked
 24947  015390  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 24948  015392  0E03               	movlw	high (_HMIBoard+38)
 24949  015394  0100               	movlb	0	; () banked
 24950  015396  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 24951  015398  0E01               	movlw	1
 24952  01539A  0100               	movlb	0	; () banked
 24953  01539C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 24954  01539E  EC03  F098         	call	_Button_Poll	;wreg free
 24955  0153A2  0012               	return		;funcret
 24956  0153A4                     __end_of_HMI_Poll:
 24957                           	opt stack 0
 24958                           tosu	equ	0xFFF
 24959                           tosh	equ	0xFFE
 24960                           tosl	equ	0xFFD
 24961                           pclath	equ	0xFFA
 24962                           tblptru	equ	0xFF8
 24963                           tblptrh	equ	0xFF7
 24964                           tblptrl	equ	0xFF6
 24965                           tablat	equ	0xFF5
 24966                           prodh	equ	0xFF4
 24967                           prodl	equ	0xFF3
 24968                           intcon	equ	0xFF2
 24969                           postinc0	equ	0xFEE
 24970                           wreg	equ	0xFE8
 24971                           indf1	equ	0xFE7
 24972                           postdec1	equ	0xFE5
 24973                           fsr1h	equ	0xFE2
 24974                           fsr1l	equ	0xFE1
 24975                           indf2	equ	0xFDF
 24976                           postinc2	equ	0xFDE
 24977                           postdec2	equ	0xFDD
 24978                           plusw2	equ	0xFDB
 24979                           fsr2h	equ	0xFDA
 24980                           fsr2l	equ	0xFD9
 24981                           status	equ	0xFD8
 24982                           
 24983 ;; *************** function _Button_Poll *****************
 24984 ;; Defined at:
 24985 ;;		line 57 in file "Library/Button.c"
 24986 ;; Parameters:    Size  Location     Type
 24987 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 24988 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 24989 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 24990 ;; Auto vars:     Size  Location     Type
 24991 ;;  Pin             1   35[BANK0 ] unsigned char 
 24992 ;; Return value:  Size  Location     Type
 24993 ;;                  1    wreg      unsigned char 
 24994 ;; Registers used:
 24995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24996 ;; Tracked objects:
 24997 ;;		On entry : 0/0
 24998 ;;		On exit  : 0/0
 24999 ;;		Unchanged: 0/0
 25000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25001 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25003 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25004 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25005 ;;Total ram usage:        9 bytes
 25006 ;; Hardware stack levels used:    1
 25007 ;; Hardware stack levels required when called:   14
 25008 ;; This function calls:
 25009 ;;		_Event_DIPSwitch
 25010 ;;		_Event_NULL
 25011 ;;		_Event_TestButton
 25012 ;;		_HMI_DIPSwitch
 25013 ;;		_HMI_DownSwitch
 25014 ;;		_HMI_LeftSwitch
 25015 ;;		_HMI_RightSwitch
 25016 ;;		_HMI_UpSwitch
 25017 ;;		_MXK_DIPSwitch
 25018 ;;		_MXK_TestButton
 25019 ;; This function is called by:
 25020 ;;		_HMI_Poll
 25021 ;;		_MXK_Poll
 25022 ;; This function uses a non-reentrant model
 25023 ;;
 25024                           
 25025                           	psect	text125
 25026  013006                     __ptext125:
 25027                           	opt stack 0
 25028  013006                     _Button_Poll:
 25029                           	opt stack 14
 25030                           
 25031                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25032                           
 25033                           ;incstack = 0
 25034  013006  0100               	movlb	0	; () banked
 25035  013008  EE20 F007          	lfsr	2,7
 25036  01300C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25037  01300E  26D9               	addwf	fsr2l,f,c
 25038  013010  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25039  013012  22DA               	addwfc	fsr2h,f,c
 25040  013014  D801               	call	u9778
 25041  013016  D00A               	goto	u9779
 25042  013018                     u9778:
 25043  013018  0005               	push	
 25044  01301A  6EFA               	movwf	pclath,c
 25045  01301C  50DE               	movf	postinc2,w,c
 25046  01301E  6EFD               	movwf	tosl,c
 25047  013020  50DE               	movf	postinc2,w,c
 25048  013022  6EFE               	movwf	tosh,c
 25049  013024  50DE               	movf	postinc2,w,c
 25050  013026  6EFF               	movwf	tosu,c
 25051  013028  50FA               	movf	pclath,w,c
 25052  01302A  0012               	return		;indir
 25053  01302C                     u9779:
 25054  01302C  0100               	movlb	0	; () banked
 25055  01302E  6F83               	movwf	Button_Poll@Pin& (0+255),b
 25056                           
 25057                           ; BSR set to: 0
 25058                           ;Button.c: 61: if (pButton->mState == Pin)
 25059  013030  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 25060  013034  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25061  013038  0100               	movlb	0	; () banked
 25062  01303A  5183               	movf	Button_Poll@Pin& (0+255),w,b
 25063  01303C  18DE               	xorwf	postinc2,w,c
 25064  01303E  A4D8               	btfss	status,2,c
 25065  013040  D021               	goto	l11
 25066                           
 25067                           ; BSR set to: 0
 25068                           ;Button.c: 62: {
 25069                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25070  013042  0100               	movlb	0	; () banked
 25071  013044  EE20 F001          	lfsr	2,1
 25072  013048  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25073  01304A  26D9               	addwf	fsr2l,f,c
 25074  01304C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25075  01304E  22DA               	addwfc	fsr2h,f,c
 25076  013050  0100               	movlb	0	; () banked
 25077  013052  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25078  013054  5CDE               	subwf	postinc2,w,c
 25079  013056  B0D8               	btfsc	status,0,c
 25080  013058  D00A               	goto	l12
 25081                           
 25082                           ; BSR set to: 0
 25083                           ;Button.c: 66: pButton->mCount = 0;
 25084  01305A  0100               	movlb	0	; () banked
 25085  01305C  EE20 F001          	lfsr	2,1
 25086  013060  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25087  013062  26D9               	addwf	fsr2l,f,c
 25088  013064  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25089  013066  22DA               	addwfc	fsr2h,f,c
 25090  013068  0E00               	movlw	0
 25091  01306A  6EDF               	movwf	indf2,c
 25092  01306C  0012               	return	
 25093  01306E                     l12:
 25094                           
 25095                           ; BSR set to: 0
 25096                           ;Button.c: 67: else
 25097                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25098                           
 25099                           ; BSR set to: 0
 25100  01306E  0100               	movlb	0	; () banked
 25101  013070  EE20 F001          	lfsr	2,1
 25102  013074  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25103  013076  26D9               	addwf	fsr2l,f,c
 25104  013078  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25105  01307A  22DA               	addwfc	fsr2h,f,c
 25106  01307C  0100               	movlb	0	; () banked
 25107  01307E  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25108  013080  5EDF               	subwf	indf2,f,c
 25109                           
 25110                           ; BSR set to: 0
 25111                           ;Button.c: 69: }
 25112  013082  0012               	return	
 25113  013084                     l11:
 25114                           
 25115                           ; BSR set to: 0
 25116                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25117                           
 25118                           ; BSR set to: 0
 25119  013084  0100               	movlb	0	; () banked
 25120  013086  EE20 F001          	lfsr	2,1
 25121  01308A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25122  01308C  26D9               	addwf	fsr2l,f,c
 25123  01308E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25124  013090  22DA               	addwfc	fsr2h,f,c
 25125  013092  50DF               	movf	indf2,w,c
 25126  013094  0100               	movlb	0	; () banked
 25127  013096  6F7E               	movwf	??_Button_Poll& (0+255),b
 25128  013098  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 25129  01309A  0100               	movlb	0	; () banked
 25130  01309C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25131  01309E  0100               	movlb	0	; () banked
 25132  0130A0  277E               	addwf	??_Button_Poll& (0+255),f,b
 25133  0130A2  0E00               	movlw	0
 25134  0130A4  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25135  0130A6  0100               	movlb	0	; () banked
 25136  0130A8  EE20 F001          	lfsr	2,1
 25137  0130AC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25138  0130AE  26D9               	addwf	fsr2l,f,c
 25139  0130B0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25140  0130B2  22DA               	addwfc	fsr2h,f,c
 25141  0130B4  50DF               	movf	indf2,w,c
 25142  0130B6  0100               	movlb	0	; () banked
 25143  0130B8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 25144  0130BA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 25145  0130BC  0100               	movlb	0	; () banked
 25146  0130BE  517E               	movf	??_Button_Poll& (0+255),w,b
 25147  0130C0  0100               	movlb	0	; () banked
 25148  0130C2  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25149  0130C4  0100               	movlb	0	; () banked
 25150  0130C6  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 25151  0130C8  0A80               	xorlw	128
 25152  0130CA  0100               	movlb	0	; () banked
 25153  0130CC  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 25154  0130CE  0100               	movlb	0	; () banked
 25155  0130D0  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 25156  0130D2  0A80               	xorlw	128
 25157  0130D4  0100               	movlb	0	; () banked
 25158  0130D6  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25159  0130D8  B0D8               	btfsc	status,0,c
 25160  0130DA  0012               	return	
 25161                           
 25162                           ; BSR set to: 0
 25163                           ;Button.c: 73: {
 25164                           ;Button.c: 75: pButton->mCount += pIncrement;
 25165  0130DC  0100               	movlb	0	; () banked
 25166  0130DE  EE20 F001          	lfsr	2,1
 25167  0130E2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25168  0130E4  26D9               	addwf	fsr2l,f,c
 25169  0130E6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25170  0130E8  22DA               	addwfc	fsr2h,f,c
 25171  0130EA  0100               	movlb	0	; () banked
 25172  0130EC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25173  0130EE  26DF               	addwf	indf2,f,c
 25174                           
 25175                           ; BSR set to: 0
 25176                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25177  0130F0  0100               	movlb	0	; () banked
 25178  0130F2  EE20 F002          	lfsr	2,2
 25179  0130F6  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25180  0130F8  26D9               	addwf	fsr2l,f,c
 25181  0130FA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25182  0130FC  22DA               	addwfc	fsr2h,f,c
 25183  0130FE  0100               	movlb	0	; () banked
 25184  013100  EE10 F001          	lfsr	1,1
 25185  013104  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25186  013106  26E1               	addwf	fsr1l,f,c
 25187  013108  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25188  01310A  22E2               	addwfc	fsr1h,f,c
 25189  01310C  50E7               	movf	indf1,w,c
 25190  01310E  0100               	movlb	0	; () banked
 25191  013110  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 25192  013112  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 25193  013114  50DE               	movf	postinc2,w,c
 25194  013116  0100               	movlb	0	; () banked
 25195  013118  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25196  01311A  50DE               	movf	postinc2,w,c
 25197  01311C  0100               	movlb	0	; () banked
 25198  01311E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25199  013120  A0D8               	btfss	status,0,c
 25200  013122  0012               	return	
 25201                           
 25202                           ; BSR set to: 0
 25203                           ;Button.c: 77: {
 25204                           ;Button.c: 79: pButton->mState = Pin;
 25205  013124  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 25206  013128  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25207  01312C  C083  FFDF         	movff	Button_Poll@Pin,indf2
 25208                           
 25209                           ; BSR set to: 0
 25210                           ;Button.c: 80: pButton->mCount = 0;
 25211  013130  0100               	movlb	0	; () banked
 25212  013132  EE20 F001          	lfsr	2,1
 25213  013136  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25214  013138  26D9               	addwf	fsr2l,f,c
 25215  01313A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25216  01313C  22DA               	addwfc	fsr2h,f,c
 25217  01313E  0E00               	movlw	0
 25218  013140  6EDF               	movwf	indf2,c
 25219                           
 25220                           ; BSR set to: 0
 25221                           ;Button.c: 83: pButton->mFunction(Pin);
 25222  013142  0100               	movlb	0	; () banked
 25223  013144  EE20 F004          	lfsr	2,4
 25224  013148  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25225  01314A  26D9               	addwf	fsr2l,f,c
 25226  01314C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25227  01314E  22DA               	addwfc	fsr2h,f,c
 25228  013150  D801               	call	u9828
 25229  013152  0012               	return	
 25230  013154                     u9828:
 25231  013154  0005               	push	
 25232  013156  6EFA               	movwf	pclath,c
 25233  013158  50DE               	movf	postinc2,w,c
 25234  01315A  6EFD               	movwf	tosl,c
 25235  01315C  50DE               	movf	postinc2,w,c
 25236  01315E  6EFE               	movwf	tosh,c
 25237  013160  50DE               	movf	postinc2,w,c
 25238  013162  6EFF               	movwf	tosu,c
 25239  013164  50FA               	movf	pclath,w,c
 25240  013166  0100               	movlb	0	; () banked
 25241  013168  5183               	movf	Button_Poll@Pin& (0+255),w,b
 25242  01316A  0012               	return		;indir
 25243  01316C                     __end_of_Button_Poll:
 25244                           	opt stack 0
 25245                           tosu	equ	0xFFF
 25246                           tosh	equ	0xFFE
 25247                           tosl	equ	0xFFD
 25248                           pclath	equ	0xFFA
 25249                           tblptru	equ	0xFF8
 25250                           tblptrh	equ	0xFF7
 25251                           tblptrl	equ	0xFF6
 25252                           tablat	equ	0xFF5
 25253                           prodh	equ	0xFF4
 25254                           prodl	equ	0xFF3
 25255                           intcon	equ	0xFF2
 25256                           postinc0	equ	0xFEE
 25257                           wreg	equ	0xFE8
 25258                           indf1	equ	0xFE7
 25259                           postdec1	equ	0xFE5
 25260                           fsr1h	equ	0xFE2
 25261                           fsr1l	equ	0xFE1
 25262                           indf2	equ	0xFDF
 25263                           postinc2	equ	0xFDE
 25264                           postdec2	equ	0xFDD
 25265                           plusw2	equ	0xFDB
 25266                           fsr2h	equ	0xFDA
 25267                           fsr2l	equ	0xFD9
 25268                           status	equ	0xFD8
 25269                           
 25270 ;; *************** function _MXK_DIPSwitch *****************
 25271 ;; Defined at:
 25272 ;;		line 24 in file "Library/MXK.c"
 25273 ;; Parameters:    Size  Location     Type
 25274 ;;		None
 25275 ;; Auto vars:     Size  Location     Type
 25276 ;;		None
 25277 ;; Return value:  Size  Location     Type
 25278 ;;                  1    wreg      unsigned char 
 25279 ;; Registers used:
 25280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25281 ;; Tracked objects:
 25282 ;;		On entry : 0/0
 25283 ;;		On exit  : 0/0
 25284 ;;		Unchanged: 0/0
 25285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25290 ;;Total ram usage:        0 bytes
 25291 ;; Hardware stack levels used:    1
 25292 ;; Hardware stack levels required when called:    8
 25293 ;; This function calls:
 25294 ;;		_Port_GetQuad
 25295 ;; This function is called by:
 25296 ;;		_FunctInitButton
 25297 ;;		_Button_Poll
 25298 ;;		_getMode
 25299 ;; This function uses a non-reentrant model
 25300 ;;
 25301                           
 25302                           	psect	text126
 25303  0163DC                     __ptext126:
 25304                           	opt stack 0
 25305  0163DC                     _MXK_DIPSwitch:
 25306                           	opt stack 19
 25307                           
 25308                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25309                           
 25310                           ;incstack = 0
 25311  0163DC  0EE0               	movlw	low _PortD
 25312  0163DE  0100               	movlb	0	; () banked
 25313  0163E0  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 25314  0163E2  0E00               	movlw	high _PortD
 25315  0163E4  0100               	movlb	0	; () banked
 25316  0163E6  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25317  0163E8  0E00               	movlw	0
 25318  0163EA  0100               	movlb	0	; () banked
 25319  0163EC  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 25320  0163EE  EC61  F0AD         	call	_Port_GetQuad
 25321  0163F2  0012               	return	
 25322  0163F4                     __end_of_MXK_DIPSwitch:
 25323                           	opt stack 0
 25324                           tosu	equ	0xFFF
 25325                           tosh	equ	0xFFE
 25326                           tosl	equ	0xFFD
 25327                           pclath	equ	0xFFA
 25328                           tblptru	equ	0xFF8
 25329                           tblptrh	equ	0xFF7
 25330                           tblptrl	equ	0xFF6
 25331                           tablat	equ	0xFF5
 25332                           prodh	equ	0xFF4
 25333                           prodl	equ	0xFF3
 25334                           intcon	equ	0xFF2
 25335                           postinc0	equ	0xFEE
 25336                           wreg	equ	0xFE8
 25337                           indf1	equ	0xFE7
 25338                           postdec1	equ	0xFE5
 25339                           fsr1h	equ	0xFE2
 25340                           fsr1l	equ	0xFE1
 25341                           indf2	equ	0xFDF
 25342                           postinc2	equ	0xFDE
 25343                           postdec2	equ	0xFDD
 25344                           plusw2	equ	0xFDB
 25345                           fsr2h	equ	0xFDA
 25346                           fsr2l	equ	0xFD9
 25347                           status	equ	0xFD8
 25348                           
 25349 ;; *************** function _HMI_DIPSwitch *****************
 25350 ;; Defined at:
 25351 ;;		line 47 in file "HMI.c"
 25352 ;; Parameters:    Size  Location     Type
 25353 ;;		None
 25354 ;; Auto vars:     Size  Location     Type
 25355 ;;		None
 25356 ;; Return value:  Size  Location     Type
 25357 ;;                  1    wreg      unsigned char 
 25358 ;; Registers used:
 25359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25360 ;; Tracked objects:
 25361 ;;		On entry : 0/0
 25362 ;;		On exit  : 0/0
 25363 ;;		Unchanged: 0/0
 25364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25369 ;;Total ram usage:        0 bytes
 25370 ;; Hardware stack levels used:    1
 25371 ;; Hardware stack levels required when called:    8
 25372 ;; This function calls:
 25373 ;;		_Port_GetQuad
 25374 ;; This function is called by:
 25375 ;;		_HMI_Init
 25376 ;;		_Button_Poll
 25377 ;;		_getMode
 25378 ;; This function uses a non-reentrant model
 25379 ;;
 25380                           
 25381                           	psect	text127
 25382  0163F4                     __ptext127:
 25383                           	opt stack 0
 25384  0163F4                     _HMI_DIPSwitch:
 25385                           	opt stack 19
 25386                           
 25387                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25388                           
 25389                           ;incstack = 0
 25390  0163F4  0E97               	movlw	low _PortE
 25391  0163F6  0100               	movlb	0	; () banked
 25392  0163F8  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 25393  0163FA  0E03               	movlw	high _PortE
 25394  0163FC  0100               	movlb	0	; () banked
 25395  0163FE  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25396  016400  0E00               	movlw	0
 25397  016402  0100               	movlb	0	; () banked
 25398  016404  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 25399  016406  EC61  F0AD         	call	_Port_GetQuad	;wreg free
 25400  01640A  0012               	return	
 25401  01640C                     __end_of_HMI_DIPSwitch:
 25402                           	opt stack 0
 25403                           tosu	equ	0xFFF
 25404                           tosh	equ	0xFFE
 25405                           tosl	equ	0xFFD
 25406                           pclath	equ	0xFFA
 25407                           tblptru	equ	0xFF8
 25408                           tblptrh	equ	0xFF7
 25409                           tblptrl	equ	0xFF6
 25410                           tablat	equ	0xFF5
 25411                           prodh	equ	0xFF4
 25412                           prodl	equ	0xFF3
 25413                           intcon	equ	0xFF2
 25414                           postinc0	equ	0xFEE
 25415                           wreg	equ	0xFE8
 25416                           indf1	equ	0xFE7
 25417                           postdec1	equ	0xFE5
 25418                           fsr1h	equ	0xFE2
 25419                           fsr1l	equ	0xFE1
 25420                           indf2	equ	0xFDF
 25421                           postinc2	equ	0xFDE
 25422                           postdec2	equ	0xFDD
 25423                           plusw2	equ	0xFDB
 25424                           fsr2h	equ	0xFDA
 25425                           fsr2l	equ	0xFD9
 25426                           status	equ	0xFD8
 25427                           
 25428 ;; *************** function _HMI_DownSwitch *****************
 25429 ;; Defined at:
 25430 ;;		line 42 in file "HMI.c"
 25431 ;; Parameters:    Size  Location     Type
 25432 ;;		None
 25433 ;; Auto vars:     Size  Location     Type
 25434 ;;		None
 25435 ;; Return value:  Size  Location     Type
 25436 ;;                  1    wreg      unsigned char 
 25437 ;; Registers used:
 25438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25439 ;; Tracked objects:
 25440 ;;		On entry : 0/0
 25441 ;;		On exit  : 0/0
 25442 ;;		Unchanged: 0/0
 25443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25448 ;;Total ram usage:        0 bytes
 25449 ;; Hardware stack levels used:    1
 25450 ;; Hardware stack levels required when called:    8
 25451 ;; This function calls:
 25452 ;;		_Port_GetPin
 25453 ;; This function is called by:
 25454 ;;		_HMI_Init
 25455 ;;		_Button_Poll
 25456 ;;		_getMode
 25457 ;; This function uses a non-reentrant model
 25458 ;;
 25459                           
 25460                           	psect	text128
 25461  01640C                     __ptext128:
 25462                           	opt stack 0
 25463  01640C                     _HMI_DownSwitch:
 25464                           	opt stack 19
 25465                           
 25466                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25467                           
 25468                           ;incstack = 0
 25469  01640C  0E97               	movlw	low _PortE
 25470  01640E  0100               	movlb	0	; () banked
 25471  016410  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25472  016412  0E03               	movlw	high _PortE
 25473  016414  0100               	movlb	0	; () banked
 25474  016416  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25475  016418  0E06               	movlw	6
 25476  01641A  0100               	movlb	0	; () banked
 25477  01641C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25478  01641E  EC38  F0AE         	call	_Port_GetPin	;wreg free
 25479  016422  0012               	return	
 25480  016424                     __end_of_HMI_DownSwitch:
 25481                           	opt stack 0
 25482                           tosu	equ	0xFFF
 25483                           tosh	equ	0xFFE
 25484                           tosl	equ	0xFFD
 25485                           pclath	equ	0xFFA
 25486                           tblptru	equ	0xFF8
 25487                           tblptrh	equ	0xFF7
 25488                           tblptrl	equ	0xFF6
 25489                           tablat	equ	0xFF5
 25490                           prodh	equ	0xFF4
 25491                           prodl	equ	0xFF3
 25492                           intcon	equ	0xFF2
 25493                           postinc0	equ	0xFEE
 25494                           wreg	equ	0xFE8
 25495                           indf1	equ	0xFE7
 25496                           postdec1	equ	0xFE5
 25497                           fsr1h	equ	0xFE2
 25498                           fsr1l	equ	0xFE1
 25499                           indf2	equ	0xFDF
 25500                           postinc2	equ	0xFDE
 25501                           postdec2	equ	0xFDD
 25502                           plusw2	equ	0xFDB
 25503                           fsr2h	equ	0xFDA
 25504                           fsr2l	equ	0xFD9
 25505                           status	equ	0xFD8
 25506                           
 25507 ;; *************** function _HMI_UpSwitch *****************
 25508 ;; Defined at:
 25509 ;;		line 37 in file "HMI.c"
 25510 ;; Parameters:    Size  Location     Type
 25511 ;;		None
 25512 ;; Auto vars:     Size  Location     Type
 25513 ;;		None
 25514 ;; Return value:  Size  Location     Type
 25515 ;;                  1    wreg      unsigned char 
 25516 ;; Registers used:
 25517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25518 ;; Tracked objects:
 25519 ;;		On entry : 0/0
 25520 ;;		On exit  : 0/0
 25521 ;;		Unchanged: 0/0
 25522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25527 ;;Total ram usage:        0 bytes
 25528 ;; Hardware stack levels used:    1
 25529 ;; Hardware stack levels required when called:    8
 25530 ;; This function calls:
 25531 ;;		_Port_GetPin
 25532 ;; This function is called by:
 25533 ;;		_HMI_Init
 25534 ;;		_Button_Poll
 25535 ;;		_getMode
 25536 ;; This function uses a non-reentrant model
 25537 ;;
 25538                           
 25539                           	psect	text129
 25540  016424                     __ptext129:
 25541                           	opt stack 0
 25542  016424                     _HMI_UpSwitch:
 25543                           	opt stack 19
 25544                           
 25545                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25546                           
 25547                           ;incstack = 0
 25548  016424  0E97               	movlw	low _PortE
 25549  016426  0100               	movlb	0	; () banked
 25550  016428  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25551  01642A  0E03               	movlw	high _PortE
 25552  01642C  0100               	movlb	0	; () banked
 25553  01642E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25554  016430  0E07               	movlw	7
 25555  016432  0100               	movlb	0	; () banked
 25556  016434  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25557  016436  EC38  F0AE         	call	_Port_GetPin	;wreg free
 25558  01643A  0012               	return	
 25559  01643C                     __end_of_HMI_UpSwitch:
 25560                           	opt stack 0
 25561                           tosu	equ	0xFFF
 25562                           tosh	equ	0xFFE
 25563                           tosl	equ	0xFFD
 25564                           pclath	equ	0xFFA
 25565                           tblptru	equ	0xFF8
 25566                           tblptrh	equ	0xFF7
 25567                           tblptrl	equ	0xFF6
 25568                           tablat	equ	0xFF5
 25569                           prodh	equ	0xFF4
 25570                           prodl	equ	0xFF3
 25571                           intcon	equ	0xFF2
 25572                           postinc0	equ	0xFEE
 25573                           wreg	equ	0xFE8
 25574                           indf1	equ	0xFE7
 25575                           postdec1	equ	0xFE5
 25576                           fsr1h	equ	0xFE2
 25577                           fsr1l	equ	0xFE1
 25578                           indf2	equ	0xFDF
 25579                           postinc2	equ	0xFDE
 25580                           postdec2	equ	0xFDD
 25581                           plusw2	equ	0xFDB
 25582                           fsr2h	equ	0xFDA
 25583                           fsr2l	equ	0xFD9
 25584                           status	equ	0xFD8
 25585                           
 25586 ;; *************** function _HMI_RightSwitch *****************
 25587 ;; Defined at:
 25588 ;;		line 32 in file "HMI.c"
 25589 ;; Parameters:    Size  Location     Type
 25590 ;;		None
 25591 ;; Auto vars:     Size  Location     Type
 25592 ;;		None
 25593 ;; Return value:  Size  Location     Type
 25594 ;;                  1    wreg      unsigned char 
 25595 ;; Registers used:
 25596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25597 ;; Tracked objects:
 25598 ;;		On entry : 0/0
 25599 ;;		On exit  : 0/0
 25600 ;;		Unchanged: 0/0
 25601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25606 ;;Total ram usage:        0 bytes
 25607 ;; Hardware stack levels used:    1
 25608 ;; Hardware stack levels required when called:    8
 25609 ;; This function calls:
 25610 ;;		_Port_GetPin
 25611 ;; This function is called by:
 25612 ;;		_HMI_Init
 25613 ;;		_Button_Poll
 25614 ;;		_getMode
 25615 ;; This function uses a non-reentrant model
 25616 ;;
 25617                           
 25618                           	psect	text130
 25619  01643C                     __ptext130:
 25620                           	opt stack 0
 25621  01643C                     _HMI_RightSwitch:
 25622                           	opt stack 19
 25623                           
 25624                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 25625                           
 25626                           ;incstack = 0
 25627  01643C  0E97               	movlw	low _PortE
 25628  01643E  0100               	movlb	0	; () banked
 25629  016440  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25630  016442  0E03               	movlw	high _PortE
 25631  016444  0100               	movlb	0	; () banked
 25632  016446  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25633  016448  0E04               	movlw	4
 25634  01644A  0100               	movlb	0	; () banked
 25635  01644C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25636  01644E  EC38  F0AE         	call	_Port_GetPin	;wreg free
 25637  016452  0012               	return	
 25638  016454                     __end_of_HMI_RightSwitch:
 25639                           	opt stack 0
 25640                           tosu	equ	0xFFF
 25641                           tosh	equ	0xFFE
 25642                           tosl	equ	0xFFD
 25643                           pclath	equ	0xFFA
 25644                           tblptru	equ	0xFF8
 25645                           tblptrh	equ	0xFF7
 25646                           tblptrl	equ	0xFF6
 25647                           tablat	equ	0xFF5
 25648                           prodh	equ	0xFF4
 25649                           prodl	equ	0xFF3
 25650                           intcon	equ	0xFF2
 25651                           postinc0	equ	0xFEE
 25652                           wreg	equ	0xFE8
 25653                           indf1	equ	0xFE7
 25654                           postdec1	equ	0xFE5
 25655                           fsr1h	equ	0xFE2
 25656                           fsr1l	equ	0xFE1
 25657                           indf2	equ	0xFDF
 25658                           postinc2	equ	0xFDE
 25659                           postdec2	equ	0xFDD
 25660                           plusw2	equ	0xFDB
 25661                           fsr2h	equ	0xFDA
 25662                           fsr2l	equ	0xFD9
 25663                           status	equ	0xFD8
 25664                           
 25665 ;; *************** function _HMI_LeftSwitch *****************
 25666 ;; Defined at:
 25667 ;;		line 27 in file "HMI.c"
 25668 ;; Parameters:    Size  Location     Type
 25669 ;;		None
 25670 ;; Auto vars:     Size  Location     Type
 25671 ;;		None
 25672 ;; Return value:  Size  Location     Type
 25673 ;;                  1    wreg      unsigned char 
 25674 ;; Registers used:
 25675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25676 ;; Tracked objects:
 25677 ;;		On entry : 0/0
 25678 ;;		On exit  : 0/0
 25679 ;;		Unchanged: 0/0
 25680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25685 ;;Total ram usage:        0 bytes
 25686 ;; Hardware stack levels used:    1
 25687 ;; Hardware stack levels required when called:    8
 25688 ;; This function calls:
 25689 ;;		_Port_GetPin
 25690 ;; This function is called by:
 25691 ;;		_HMI_Init
 25692 ;;		_Button_Poll
 25693 ;;		_getMode
 25694 ;; This function uses a non-reentrant model
 25695 ;;
 25696                           
 25697                           	psect	text131
 25698  016454                     __ptext131:
 25699                           	opt stack 0
 25700  016454                     _HMI_LeftSwitch:
 25701                           	opt stack 19
 25702                           
 25703                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 25704                           
 25705                           ;incstack = 0
 25706  016454  0E97               	movlw	low _PortE
 25707  016456  0100               	movlb	0	; () banked
 25708  016458  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25709  01645A  0E03               	movlw	high _PortE
 25710  01645C  0100               	movlb	0	; () banked
 25711  01645E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25712  016460  0E05               	movlw	5
 25713  016462  0100               	movlb	0	; () banked
 25714  016464  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25715  016466  EC38  F0AE         	call	_Port_GetPin	;wreg free
 25716  01646A  0012               	return	
 25717  01646C                     __end_of_HMI_LeftSwitch:
 25718                           	opt stack 0
 25719                           tosu	equ	0xFFF
 25720                           tosh	equ	0xFFE
 25721                           tosl	equ	0xFFD
 25722                           pclath	equ	0xFFA
 25723                           tblptru	equ	0xFF8
 25724                           tblptrh	equ	0xFF7
 25725                           tblptrl	equ	0xFF6
 25726                           tablat	equ	0xFF5
 25727                           prodh	equ	0xFF4
 25728                           prodl	equ	0xFF3
 25729                           intcon	equ	0xFF2
 25730                           postinc0	equ	0xFEE
 25731                           wreg	equ	0xFE8
 25732                           indf1	equ	0xFE7
 25733                           postdec1	equ	0xFE5
 25734                           fsr1h	equ	0xFE2
 25735                           fsr1l	equ	0xFE1
 25736                           indf2	equ	0xFDF
 25737                           postinc2	equ	0xFDE
 25738                           postdec2	equ	0xFDD
 25739                           plusw2	equ	0xFDB
 25740                           fsr2h	equ	0xFDA
 25741                           fsr2l	equ	0xFD9
 25742                           status	equ	0xFD8
 25743                           
 25744 ;; *************** function _MXK_TestButton *****************
 25745 ;; Defined at:
 25746 ;;		line 14 in file "Library/MXK.c"
 25747 ;; Parameters:    Size  Location     Type
 25748 ;;		None
 25749 ;; Auto vars:     Size  Location     Type
 25750 ;;		None
 25751 ;; Return value:  Size  Location     Type
 25752 ;;                  1    wreg      unsigned char 
 25753 ;; Registers used:
 25754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25755 ;; Tracked objects:
 25756 ;;		On entry : 0/0
 25757 ;;		On exit  : 0/0
 25758 ;;		Unchanged: 0/0
 25759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25764 ;;Total ram usage:        0 bytes
 25765 ;; Hardware stack levels used:    1
 25766 ;; Hardware stack levels required when called:    8
 25767 ;; This function calls:
 25768 ;;		_Port_GetPin
 25769 ;; This function is called by:
 25770 ;;		_FunctInitButton
 25771 ;;		_Button_Poll
 25772 ;;		_getMode
 25773 ;; This function uses a non-reentrant model
 25774 ;;
 25775                           
 25776                           	psect	text132
 25777  01646C                     __ptext132:
 25778                           	opt stack 0
 25779  01646C                     _MXK_TestButton:
 25780                           	opt stack 19
 25781                           
 25782                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 25783                           
 25784                           ;incstack = 0
 25785  01646C  0EA1               	movlw	low _PortB
 25786  01646E  0100               	movlb	0	; () banked
 25787  016470  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25788  016472  0E03               	movlw	high _PortB
 25789  016474  0100               	movlb	0	; () banked
 25790  016476  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25791  016478  0E04               	movlw	4
 25792  01647A  0100               	movlb	0	; () banked
 25793  01647C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25794  01647E  EC38  F0AE         	call	_Port_GetPin	;wreg free
 25795  016482  0012               	return	
 25796  016484                     __end_of_MXK_TestButton:
 25797                           	opt stack 0
 25798                           tosu	equ	0xFFF
 25799                           tosh	equ	0xFFE
 25800                           tosl	equ	0xFFD
 25801                           pclath	equ	0xFFA
 25802                           tblptru	equ	0xFF8
 25803                           tblptrh	equ	0xFF7
 25804                           tblptrl	equ	0xFF6
 25805                           tablat	equ	0xFF5
 25806                           prodh	equ	0xFF4
 25807                           prodl	equ	0xFF3
 25808                           intcon	equ	0xFF2
 25809                           postinc0	equ	0xFEE
 25810                           wreg	equ	0xFE8
 25811                           indf1	equ	0xFE7
 25812                           postdec1	equ	0xFE5
 25813                           fsr1h	equ	0xFE2
 25814                           fsr1l	equ	0xFE1
 25815                           indf2	equ	0xFDF
 25816                           postinc2	equ	0xFDE
 25817                           postdec2	equ	0xFDD
 25818                           plusw2	equ	0xFDB
 25819                           fsr2h	equ	0xFDA
 25820                           fsr2l	equ	0xFD9
 25821                           status	equ	0xFD8
 25822                           
 25823 ;; *************** function _Port_GetQuad *****************
 25824 ;; Defined at:
 25825 ;;		line 498 in file "Library/Port.c"
 25826 ;; Parameters:    Size  Location     Type
 25827 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 25828 ;;		 -> PortE(10), PortD(10), 
 25829 ;;  pQuad           1    2[BANK0 ] enum E6776
 25830 ;; Auto vars:     Size  Location     Type
 25831 ;;  Output          1    5[BANK0 ] unsigned char 
 25832 ;; Return value:  Size  Location     Type
 25833 ;;                  1    wreg      unsigned char 
 25834 ;; Registers used:
 25835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25836 ;; Tracked objects:
 25837 ;;		On entry : 0/0
 25838 ;;		On exit  : 0/0
 25839 ;;		Unchanged: 0/0
 25840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25841 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25844 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25845 ;;Total ram usage:        6 bytes
 25846 ;; Hardware stack levels used:    1
 25847 ;; Hardware stack levels required when called:    7
 25848 ;; This function calls:
 25849 ;;		Nothing
 25850 ;; This function is called by:
 25851 ;;		_HMI_DIPSwitch
 25852 ;;		_MXK_DIPSwitch
 25853 ;;		_Port_ToggleQuad
 25854 ;; This function uses a non-reentrant model
 25855 ;;
 25856                           
 25857                           	psect	text133
 25858  015AC2                     __ptext133:
 25859                           	opt stack 0
 25860  015AC2                     _Port_GetQuad:
 25861                           	opt stack 19
 25862                           
 25863                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 25864                           
 25865                           ;incstack = 0
 25866  015AC2  0100               	movlb	0	; () banked
 25867  015AC4  EE20 F006          	lfsr	2,6
 25868  015AC8  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 25869  015ACA  26D9               	addwf	fsr2l,f,c
 25870  015ACC  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 25871  015ACE  22DA               	addwfc	fsr2h,f,c
 25872  015AD0  CFDE F063          	movff	postinc2,??_Port_GetQuad
 25873  015AD4  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 25874  015AD8  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 25875  015ADC  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 25876  015AE0  50DF               	movf	indf2,w,c
 25877  015AE2  0100               	movlb	0	; () banked
 25878  015AE4  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 25879                           
 25880                           ; BSR set to: 0
 25881                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 25882  015AE6  0100               	movlb	0	; () banked
 25883  015AE8  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 25884  015AEA  0D04               	mullw	4
 25885  015AEC  28F3               	incf	prodl,w,c
 25886  015AEE  0100               	movlb	0	; () banked
 25887  015AF0  6F63               	movwf	??_Port_GetQuad& (0+255),b
 25888  015AF2  D003               	goto	u9270
 25889  015AF4                     u9275:
 25890  015AF4  0100               	movlb	0	; () banked
 25891  015AF6  90D8               	bcf	status,0,c
 25892  015AF8  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 25893  015AFA                     u9270:
 25894  015AFA  0100               	movlb	0	; () banked
 25895  015AFC  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 25896  015AFE  D7FA               	goto	u9275
 25897                           
 25898                           ;Port.c: 502: Output &= 0xF;
 25899  015B00  0E0F               	movlw	15
 25900  015B02  0100               	movlb	0	; () banked
 25901  015B04  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 25902                           
 25903                           ; BSR set to: 0
 25904                           ;Port.c: 503: return Output;
 25905  015B06  0100               	movlb	0	; () banked
 25906  015B08  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 25907  015B0A  0012               	return	
 25908  015B0C                     __end_of_Port_GetQuad:
 25909                           	opt stack 0
 25910                           tosu	equ	0xFFF
 25911                           tosh	equ	0xFFE
 25912                           tosl	equ	0xFFD
 25913                           pclath	equ	0xFFA
 25914                           tblptru	equ	0xFF8
 25915                           tblptrh	equ	0xFF7
 25916                           tblptrl	equ	0xFF6
 25917                           tablat	equ	0xFF5
 25918                           prodh	equ	0xFF4
 25919                           prodl	equ	0xFF3
 25920                           intcon	equ	0xFF2
 25921                           postinc0	equ	0xFEE
 25922                           wreg	equ	0xFE8
 25923                           indf1	equ	0xFE7
 25924                           postdec1	equ	0xFE5
 25925                           fsr1h	equ	0xFE2
 25926                           fsr1l	equ	0xFE1
 25927                           indf2	equ	0xFDF
 25928                           postinc2	equ	0xFDE
 25929                           postdec2	equ	0xFDD
 25930                           plusw2	equ	0xFDB
 25931                           fsr2h	equ	0xFDA
 25932                           fsr2l	equ	0xFD9
 25933                           status	equ	0xFD8
 25934                           
 25935 ;; *************** function _Event_DIPSwitch *****************
 25936 ;; Defined at:
 25937 ;;		line 22 in file "Events.c"
 25938 ;; Parameters:    Size  Location     Type
 25939 ;;  pState          1    wreg     unsigned char 
 25940 ;; Auto vars:     Size  Location     Type
 25941 ;;  pState          1   25[BANK0 ] unsigned char 
 25942 ;;  Bar             1   26[BANK0 ] unsigned char 
 25943 ;; Return value:  Size  Location     Type
 25944 ;;                  1    wreg      void 
 25945 ;; Registers used:
 25946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25947 ;; Tracked objects:
 25948 ;;		On entry : 0/0
 25949 ;;		On exit  : 0/0
 25950 ;;		Unchanged: 0/0
 25951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25956 ;;Total ram usage:        2 bytes
 25957 ;; Hardware stack levels used:    1
 25958 ;; Hardware stack levels required when called:   13
 25959 ;; This function calls:
 25960 ;;		_HMI_GetBar
 25961 ;;		_HMI_SetBar
 25962 ;;		_LED_Toggle
 25963 ;; This function is called by:
 25964 ;;		_FunctInitButton
 25965 ;;		_Button_Poll
 25966 ;; This function uses a non-reentrant model
 25967 ;;
 25968                           
 25969                           	psect	text134
 25970  0160C6                     __ptext134:
 25971                           	opt stack 0
 25972  0160C6                     _Event_DIPSwitch:
 25973                           	opt stack 14
 25974                           
 25975                           ; BSR set to: 0
 25976                           ;incstack = 0
 25977                           ;Event_DIPSwitch@pState stored from wreg
 25978  0160C6  0100               	movlb	0	; () banked
 25979  0160C8  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 25980                           
 25981                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 25982  0160CA  ECDB  F0B2         	call	_HMI_GetBar	;wreg free
 25983  0160CE  0100               	movlb	0	; () banked
 25984  0160D0  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 25985                           
 25986                           ; BSR set to: 0
 25987                           ;Events.c: 25: Bar &= 0x0F;
 25988  0160D2  0E0F               	movlw	15
 25989  0160D4  0100               	movlb	0	; () banked
 25990  0160D6  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 25991                           
 25992                           ; BSR set to: 0
 25993                           ;Events.c: 26: pState <<= 4;
 25994  0160D8  0100               	movlb	0	; () banked
 25995  0160DA  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 25996  0160DC  0EF0               	movlw	240
 25997  0160DE  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 25998                           
 25999                           ; BSR set to: 0
 26000                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26001  0160E0  0100               	movlb	0	; () banked
 26002  0160E2  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26003  0160E4  0100               	movlb	0	; () banked
 26004  0160E6  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26005  0160E8  ECBD  F0B2         	call	_HMI_SetBar
 26006                           
 26007                           ;Events.c: 32: LED_Toggle(eLED1);
 26008  0160EC  0E00               	movlw	0
 26009  0160EE  ECCE  F0AD         	call	_LED_Toggle
 26010  0160F2  0012               	return		;funcret
 26011  0160F4                     __end_of_Event_DIPSwitch:
 26012                           	opt stack 0
 26013                           tosu	equ	0xFFF
 26014                           tosh	equ	0xFFE
 26015                           tosl	equ	0xFFD
 26016                           pclath	equ	0xFFA
 26017                           tblptru	equ	0xFF8
 26018                           tblptrh	equ	0xFF7
 26019                           tblptrl	equ	0xFF6
 26020                           tablat	equ	0xFF5
 26021                           prodh	equ	0xFF4
 26022                           prodl	equ	0xFF3
 26023                           intcon	equ	0xFF2
 26024                           postinc0	equ	0xFEE
 26025                           wreg	equ	0xFE8
 26026                           indf1	equ	0xFE7
 26027                           postdec1	equ	0xFE5
 26028                           fsr1h	equ	0xFE2
 26029                           fsr1l	equ	0xFE1
 26030                           indf2	equ	0xFDF
 26031                           postinc2	equ	0xFDE
 26032                           postdec2	equ	0xFDD
 26033                           plusw2	equ	0xFDB
 26034                           fsr2h	equ	0xFDA
 26035                           fsr2l	equ	0xFD9
 26036                           status	equ	0xFD8
 26037                           
 26038 ;; *************** function _Event_NULL *****************
 26039 ;; Defined at:
 26040 ;;		line 9 in file "Events.c"
 26041 ;; Parameters:    Size  Location     Type
 26042 ;;  pState          1    wreg     unsigned char 
 26043 ;; Auto vars:     Size  Location     Type
 26044 ;;  pState          1    0[COMRAM] unsigned char 
 26045 ;; Return value:  Size  Location     Type
 26046 ;;                  1    wreg      void 
 26047 ;; Registers used:
 26048 ;;		wreg
 26049 ;; Tracked objects:
 26050 ;;		On entry : 0/0
 26051 ;;		On exit  : 0/0
 26052 ;;		Unchanged: 0/0
 26053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26058 ;;Total ram usage:        0 bytes
 26059 ;; Hardware stack levels used:    1
 26060 ;; Hardware stack levels required when called:    7
 26061 ;; This function calls:
 26062 ;;		Nothing
 26063 ;; This function is called by:
 26064 ;;		_HMI_Init
 26065 ;;		_Button_Poll
 26066 ;; This function uses a non-reentrant model
 26067 ;;
 26068                           
 26069                           	psect	text135
 26070  001404                     __ptext135:
 26071                           	opt stack 0
 26072  001404                     _Event_NULL:
 26073                           	opt stack 20
 26074                           
 26075                           ;incstack = 0
 26076  001404  0012               	return		;funcret
 26077  001406                     __end_of_Event_NULL:
 26078                           	opt stack 0
 26079                           tosu	equ	0xFFF
 26080                           tosh	equ	0xFFE
 26081                           tosl	equ	0xFFD
 26082                           pclath	equ	0xFFA
 26083                           tblptru	equ	0xFF8
 26084                           tblptrh	equ	0xFF7
 26085                           tblptrl	equ	0xFF6
 26086                           tablat	equ	0xFF5
 26087                           prodh	equ	0xFF4
 26088                           prodl	equ	0xFF3
 26089                           intcon	equ	0xFF2
 26090                           postinc0	equ	0xFEE
 26091                           wreg	equ	0xFE8
 26092                           indf1	equ	0xFE7
 26093                           postdec1	equ	0xFE5
 26094                           fsr1h	equ	0xFE2
 26095                           fsr1l	equ	0xFE1
 26096                           indf2	equ	0xFDF
 26097                           postinc2	equ	0xFDE
 26098                           postdec2	equ	0xFDD
 26099                           plusw2	equ	0xFDB
 26100                           fsr2h	equ	0xFDA
 26101                           fsr2l	equ	0xFD9
 26102                           status	equ	0xFD8
 26103                           
 26104 ;; *************** function _Event_TestButton *****************
 26105 ;; Defined at:
 26106 ;;		line 52 in file "Events.c"
 26107 ;; Parameters:    Size  Location     Type
 26108 ;;  pState          1    wreg     unsigned char 
 26109 ;; Auto vars:     Size  Location     Type
 26110 ;;  pState          1   25[BANK0 ] unsigned char 
 26111 ;; Return value:  Size  Location     Type
 26112 ;;                  1    wreg      void 
 26113 ;; Registers used:
 26114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26115 ;; Tracked objects:
 26116 ;;		On entry : 0/0
 26117 ;;		On exit  : 0/0
 26118 ;;		Unchanged: 0/0
 26119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26123 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26124 ;;Total ram usage:        1 bytes
 26125 ;; Hardware stack levels used:    1
 26126 ;; Hardware stack levels required when called:   13
 26127 ;; This function calls:
 26128 ;;		_HMI_SetButton
 26129 ;;		_HMI_SetNumber
 26130 ;;		_LED_Toggle
 26131 ;; This function is called by:
 26132 ;;		_FunctInitButton
 26133 ;;		_Button_Poll
 26134 ;; This function uses a non-reentrant model
 26135 ;;
 26136                           
 26137                           	psect	text136
 26138  015EB4                     __ptext136:
 26139                           	opt stack 0
 26140  015EB4                     _Event_TestButton:
 26141                           	opt stack 14
 26142                           
 26143                           ;incstack = 0
 26144                           ;Event_TestButton@pState stored from wreg
 26145  015EB4  0100               	movlb	0	; () banked
 26146  015EB6  6F79               	movwf	Event_TestButton@pState& (0+255),b
 26147                           
 26148                           ;Events.c: 56: static UINT8 j = 0;
 26149                           ;Events.c: 60: if (pState == 0)
 26150  015EB8  0100               	movlb	0	; () banked
 26151  015EBA  5179               	movf	Event_TestButton@pState& (0+255),w,b
 26152  015EBC  0100               	movlb	0	; () banked
 26153  015EBE  A4D8               	btfss	status,2,c
 26154  015EC0  D013               	goto	l1873
 26155                           
 26156                           ; BSR set to: 0
 26157                           ;Events.c: 61: {
 26158                           ;Events.c: 62: j++;
 26159  015EC2  0100               	movlb	0	; () banked
 26160  015EC4  2BD8               	incf	Event_TestButton@j& (0+255),f,b
 26161                           
 26162                           ; BSR set to: 0
 26163                           ;Events.c: 63: val += j;
 26164  015EC6  0100               	movlb	0	; () banked
 26165  015EC8  51D8               	movf	Event_TestButton@j& (0+255),w,b
 26166  015ECA  0100               	movlb	0	; () banked
 26167  015ECC  27CC               	addwf	_val& (0+255),f,b
 26168  015ECE  0E00               	movlw	0
 26169  015ED0  23CD               	addwfc	(_val+1)& (0+255),f,b
 26170                           
 26171                           ; BSR set to: 0
 26172                           ;Events.c: 64: HMI_SetNumber( val );
 26173  015ED2  C0CC  F076         	movff	_val,HMI_SetNumber@pInput
 26174  015ED6  C0CD  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 26175  015EDA  ECA6  F0B0         	call	_HMI_SetNumber	;wreg free
 26176                           
 26177                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26178  015EDE  0100               	movlb	0	; () banked
 26179  015EE0  51D8               	movf	Event_TestButton@j& (0+255),w,b
 26180  015EE2  0B03               	andlw	3
 26181  015EE4  EC18  F0A6         	call	_HMI_SetButton
 26182  015EE8                     l1873:
 26183                           
 26184                           ;Events.c: 68: }
 26185                           ;Events.c: 72: LED_Toggle(eLED1);
 26186  015EE8  0E00               	movlw	0
 26187  015EEA  ECCE  F0AD         	call	_LED_Toggle
 26188  015EEE  0012               	return		;funcret
 26189  015EF0                     __end_of_Event_TestButton:
 26190                           	opt stack 0
 26191                           tosu	equ	0xFFF
 26192                           tosh	equ	0xFFE
 26193                           tosl	equ	0xFFD
 26194                           pclath	equ	0xFFA
 26195                           tblptru	equ	0xFF8
 26196                           tblptrh	equ	0xFF7
 26197                           tblptrl	equ	0xFF6
 26198                           tablat	equ	0xFF5
 26199                           prodh	equ	0xFF4
 26200                           prodl	equ	0xFF3
 26201                           intcon	equ	0xFF2
 26202                           postinc0	equ	0xFEE
 26203                           wreg	equ	0xFE8
 26204                           indf1	equ	0xFE7
 26205                           postdec1	equ	0xFE5
 26206                           fsr1h	equ	0xFE2
 26207                           fsr1l	equ	0xFE1
 26208                           indf2	equ	0xFDF
 26209                           postinc2	equ	0xFDE
 26210                           postdec2	equ	0xFDD
 26211                           plusw2	equ	0xFDB
 26212                           fsr2h	equ	0xFDA
 26213                           fsr2l	equ	0xFD9
 26214                           status	equ	0xFD8
 26215                           
 26216 ;; *************** function _HMI_SetNumber *****************
 26217 ;; Defined at:
 26218 ;;		line 221 in file "HMI.c"
 26219 ;; Parameters:    Size  Location     Type
 26220 ;;  pInput          2   22[BANK0 ] int 
 26221 ;; Auto vars:     Size  Location     Type
 26222 ;;		None
 26223 ;; Return value:  Size  Location     Type
 26224 ;;                  1    wreg      void 
 26225 ;; Registers used:
 26226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26227 ;; Tracked objects:
 26228 ;;		On entry : 0/0
 26229 ;;		On exit  : 0/0
 26230 ;;		Unchanged: 0/0
 26231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26236 ;;Total ram usage:        2 bytes
 26237 ;; Hardware stack levels used:    1
 26238 ;; Hardware stack levels required when called:    9
 26239 ;; This function calls:
 26240 ;;		_HMI_SetSegments
 26241 ;;		_itos
 26242 ;; This function is called by:
 26243 ;;		_Event_TestButton
 26244 ;;		_mode1
 26245 ;;		_mode4
 26246 ;;		_Event_HMI_UpButton
 26247 ;;		_Event_HMI_DownButton
 26248 ;; This function uses a non-reentrant model
 26249 ;;
 26250                           
 26251                           	psect	text137
 26252  01614C                     __ptext137:
 26253                           	opt stack 0
 26254  01614C                     _HMI_SetNumber:
 26255                           	opt stack 20
 26256                           
 26257                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26258                           
 26259                           ;incstack = 0
 26260  01614C  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26261  016150  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26262  016154  0E29               	movlw	low _HMIBoard
 26263  016156  0100               	movlb	0	; () banked
 26264  016158  6F6E               	movwf	itos@destination& (0+255),b
 26265  01615A  0E03               	movlw	high _HMIBoard
 26266  01615C  0100               	movlb	0	; () banked
 26267  01615E  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26268  016160  ECA0  F09D         	call	_itos	;wreg free
 26269                           
 26270                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26271  016164  0E29               	movlw	low _HMIBoard
 26272  016166  0100               	movlb	0	; () banked
 26273  016168  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26274  01616A  0E03               	movlw	high _HMIBoard
 26275  01616C  0100               	movlb	0	; () banked
 26276  01616E  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26277  016170  EC29  F0A1         	call	_HMI_SetSegments	;wreg free
 26278  016174  0012               	return		;funcret
 26279  016176                     __end_of_HMI_SetNumber:
 26280                           	opt stack 0
 26281                           tosu	equ	0xFFF
 26282                           tosh	equ	0xFFE
 26283                           tosl	equ	0xFFD
 26284                           pclath	equ	0xFFA
 26285                           tblptru	equ	0xFF8
 26286                           tblptrh	equ	0xFF7
 26287                           tblptrl	equ	0xFF6
 26288                           tablat	equ	0xFF5
 26289                           prodh	equ	0xFF4
 26290                           prodl	equ	0xFF3
 26291                           intcon	equ	0xFF2
 26292                           postinc0	equ	0xFEE
 26293                           wreg	equ	0xFE8
 26294                           indf1	equ	0xFE7
 26295                           postdec1	equ	0xFE5
 26296                           fsr1h	equ	0xFE2
 26297                           fsr1l	equ	0xFE1
 26298                           indf2	equ	0xFDF
 26299                           postinc2	equ	0xFDE
 26300                           postdec2	equ	0xFDD
 26301                           plusw2	equ	0xFDB
 26302                           fsr2h	equ	0xFDA
 26303                           fsr2l	equ	0xFD9
 26304                           status	equ	0xFD8
 26305                           
 26306 ;; *************** function _itos *****************
 26307 ;; Defined at:
 26308 ;;		line 369 in file "Library/Types.c"
 26309 ;; Parameters:    Size  Location     Type
 26310 ;;  input           2   12[BANK0 ] unsigned short 
 26311 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26312 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26313 ;; Auto vars:     Size  Location     Type
 26314 ;;  Out             2   20[BANK0 ] unsigned short 
 26315 ;;  Length          2   18[BANK0 ] unsigned short 
 26316 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26317 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26318 ;; Return value:  Size  Location     Type
 26319 ;;                  1    wreg      void 
 26320 ;; Registers used:
 26321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26322 ;; Tracked objects:
 26323 ;;		On entry : 0/0
 26324 ;;		On exit  : 0/0
 26325 ;;		Unchanged: 0/0
 26326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26328 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26330 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26331 ;;Total ram usage:       10 bytes
 26332 ;; Hardware stack levels used:    1
 26333 ;; Hardware stack levels required when called:    8
 26334 ;; This function calls:
 26335 ;;		___lwdiv
 26336 ;;		___lwmod
 26337 ;;		_reverse
 26338 ;; This function is called by:
 26339 ;;		_HMI_SetNumber
 26340 ;; This function uses a non-reentrant model
 26341 ;;
 26342                           
 26343                           	psect	text138
 26344  013B40                     __ptext138:
 26345                           	opt stack 0
 26346  013B40                     _itos:
 26347                           	opt stack 20
 26348                           
 26349                           ;Types.c: 371: UINT16 Out = input;
 26350                           
 26351                           ;incstack = 0
 26352  013B40  C06C  F074         	movff	itos@input,itos@Out
 26353  013B44  C06D  F075         	movff	itos@input+1,itos@Out+1
 26354                           
 26355                           ;Types.c: 372: UINT16 Length = 0;
 26356  013B48  0E00               	movlw	0
 26357  013B4A  0100               	movlb	0	; () banked
 26358  013B4C  6F73               	movwf	(itos@Length+1)& (0+255),b
 26359  013B4E  0E00               	movlw	0
 26360  013B50  6F72               	movwf	itos@Length& (0+255),b
 26361                           
 26362                           ; BSR set to: 0
 26363                           ;Types.c: 373: char *Data = destination;
 26364  013B52  C06E  F070         	movff	itos@destination,itos@Data
 26365  013B56  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26366                           
 26367                           ; BSR set to: 0
 26368                           ;Types.c: 374: if(Out == 0)
 26369  013B5A  0100               	movlb	0	; () banked
 26370  013B5C  5174               	movf	itos@Out& (0+255),w,b
 26371  013B5E  0100               	movlb	0	; () banked
 26372  013B60  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26373  013B62  A4D8               	btfss	status,2,c
 26374  013B64  D034               	goto	l929
 26375                           
 26376                           ; BSR set to: 0
 26377                           ;Types.c: 375: {
 26378                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26379  013B66  C070  FFD9         	movff	itos@Data,fsr2l
 26380  013B6A  C071  FFDA         	movff	itos@Data+1,fsr2h
 26381  013B6E  0E30               	movlw	48
 26382  013B70  6EDF               	movwf	indf2,c
 26383                           
 26384                           ; BSR set to: 0
 26385                           ;Types.c: 377: Length = 1;
 26386  013B72  0E00               	movlw	0
 26387  013B74  0100               	movlb	0	; () banked
 26388  013B76  6F73               	movwf	(itos@Length+1)& (0+255),b
 26389  013B78  0E01               	movlw	1
 26390  013B7A  6F72               	movwf	itos@Length& (0+255),b
 26391                           
 26392                           ;Types.c: 378: }
 26393  013B7C  D040               	goto	l928
 26394  013B7E                     
 26395                           ; BSR set to: 0
 26396                           ;Types.c: 382: {
 26397                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26398                           
 26399                           ; BSR set to: 0
 26400  013B7E  C074  F067         	movff	itos@Out,___lwmod@dividend
 26401  013B82  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 26402  013B86  0E00               	movlw	0
 26403  013B88  0100               	movlb	0	; () banked
 26404  013B8A  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 26405  013B8C  0E0A               	movlw	10
 26406  013B8E  6F69               	movwf	___lwmod@divisor& (0+255),b
 26407  013B90  ECDE  F0AB         	call	___lwmod	;wreg free
 26408  013B94  0100               	movlb	0	; () banked
 26409  013B96  5167               	movf	?___lwmod& (0+255),w,b
 26410  013B98  0F30               	addlw	48
 26411  013B9A  C070  FFD9         	movff	itos@Data,fsr2l
 26412  013B9E  C071  FFDA         	movff	itos@Data+1,fsr2h
 26413  013BA2  6EDF               	movwf	indf2,c
 26414                           
 26415                           ; BSR set to: 0
 26416                           ;Types.c: 384: Out /= 10;
 26417  013BA4  C074  F060         	movff	itos@Out,___lwdiv@dividend
 26418  013BA8  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 26419  013BAC  0E00               	movlw	0
 26420  013BAE  0100               	movlb	0	; () banked
 26421  013BB0  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26422  013BB2  0E0A               	movlw	10
 26423  013BB4  6F62               	movwf	___lwdiv@divisor& (0+255),b
 26424  013BB6  EC73  F0A8         	call	___lwdiv	;wreg free
 26425  013BBA  C060  F074         	movff	?___lwdiv,itos@Out
 26426  013BBE  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 26427                           
 26428                           ;Types.c: 385: Length ++;
 26429  013BC2  0100               	movlb	0	; () banked
 26430  013BC4  4B72               	infsnz	itos@Length& (0+255),f,b
 26431  013BC6  2B73               	incf	(itos@Length+1)& (0+255),f,b
 26432                           
 26433                           ; BSR set to: 0
 26434                           ;Types.c: 386: Data++;
 26435  013BC8  0100               	movlb	0	; () banked
 26436  013BCA  4B70               	infsnz	itos@Data& (0+255),f,b
 26437  013BCC  2B71               	incf	(itos@Data+1)& (0+255),f,b
 26438  013BCE                     l929:
 26439                           
 26440                           ; BSR set to: 0
 26441                           
 26442                           ; BSR set to: 0
 26443  013BCE  0100               	movlb	0	; () banked
 26444  013BD0  5174               	movf	itos@Out& (0+255),w,b
 26445  013BD2  0100               	movlb	0	; () banked
 26446  013BD4  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26447  013BD6  B4D8               	btfsc	status,2,c
 26448  013BD8  D008               	goto	u8960
 26449                           
 26450                           ; BSR set to: 0
 26451  013BDA  0100               	movlb	0	; () banked
 26452  013BDC  5173               	movf	(itos@Length+1)& (0+255),w,b
 26453  013BDE  E105               	bnz	l12301
 26454  013BE0  0E06               	movlw	6
 26455  013BE2  0100               	movlb	0	; () banked
 26456  013BE4  5D72               	subwf	itos@Length& (0+255),w,b
 26457  013BE6  A0D8               	btfss	status,0,c
 26458  013BE8  D7CA               	goto	l930
 26459  013BEA                     u8960:
 26460  013BEA                     l12301:
 26461                           
 26462                           ; BSR set to: 0
 26463                           ;Types.c: 387: }
 26464                           ;Types.c: 388: reverse(destination, Length);
 26465  013BEA  C06E  F060         	movff	itos@destination,reverse@input
 26466  013BEE  C06F  F061         	movff	itos@destination+1,reverse@input+1
 26467  013BF2  C072  F062         	movff	itos@Length,reverse@length
 26468  013BF6  C073  F063         	movff	itos@Length+1,reverse@length+1
 26469  013BFA  EC40  F0AA         	call	_reverse	;wreg free
 26470  013BFE                     l928:
 26471                           
 26472                           ;Types.c: 389: }
 26473                           ;Types.c: 390: destination[Length] = '\0';
 26474  013BFE  0100               	movlb	0	; () banked
 26475  013C00  5172               	movf	itos@Length& (0+255),w,b
 26476  013C02  0100               	movlb	0	; () banked
 26477  013C04  256E               	addwf	itos@destination& (0+255),w,b
 26478  013C06  6ED9               	movwf	fsr2l,c
 26479  013C08  0100               	movlb	0	; () banked
 26480  013C0A  5173               	movf	(itos@Length+1)& (0+255),w,b
 26481  013C0C  0100               	movlb	0	; () banked
 26482  013C0E  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 26483  013C10  6EDA               	movwf	fsr2h,c
 26484  013C12  0E00               	movlw	0
 26485  013C14  6EDF               	movwf	indf2,c
 26486                           
 26487                           ; BSR set to: 0
 26488  013C16  0012               	return		;funcret
 26489  013C18                     __end_of_itos:
 26490                           	opt stack 0
 26491                           tosu	equ	0xFFF
 26492                           tosh	equ	0xFFE
 26493                           tosl	equ	0xFFD
 26494                           pclath	equ	0xFFA
 26495                           tblptru	equ	0xFF8
 26496                           tblptrh	equ	0xFF7
 26497                           tblptrl	equ	0xFF6
 26498                           tablat	equ	0xFF5
 26499                           prodh	equ	0xFF4
 26500                           prodl	equ	0xFF3
 26501                           intcon	equ	0xFF2
 26502                           postinc0	equ	0xFEE
 26503                           wreg	equ	0xFE8
 26504                           indf1	equ	0xFE7
 26505                           postdec1	equ	0xFE5
 26506                           fsr1h	equ	0xFE2
 26507                           fsr1l	equ	0xFE1
 26508                           indf2	equ	0xFDF
 26509                           postinc2	equ	0xFDE
 26510                           postdec2	equ	0xFDD
 26511                           plusw2	equ	0xFDB
 26512                           fsr2h	equ	0xFDA
 26513                           fsr2l	equ	0xFD9
 26514                           status	equ	0xFD8
 26515                           
 26516 ;; *************** function _reverse *****************
 26517 ;; Defined at:
 26518 ;;		line 357 in file "Library/Types.c"
 26519 ;; Parameters:    Size  Location     Type
 26520 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26521 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26522 ;;  length          2    2[BANK0 ] unsigned short 
 26523 ;; Auto vars:     Size  Location     Type
 26524 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26525 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26526 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26527 ;; Return value:  Size  Location     Type
 26528 ;;                  1    wreg      void 
 26529 ;; Registers used:
 26530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26531 ;; Tracked objects:
 26532 ;;		On entry : 0/0
 26533 ;;		On exit  : 0/0
 26534 ;;		Unchanged: 0/0
 26535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26537 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26539 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26540 ;;Total ram usage:        7 bytes
 26541 ;; Hardware stack levels used:    1
 26542 ;; Hardware stack levels required when called:    7
 26543 ;; This function calls:
 26544 ;;		Nothing
 26545 ;; This function is called by:
 26546 ;;		_itos
 26547 ;; This function uses a non-reentrant model
 26548 ;;
 26549                           
 26550                           	psect	text139
 26551  015480                     __ptext139:
 26552                           	opt stack 0
 26553  015480                     _reverse:
 26554                           	opt stack 20
 26555                           
 26556                           ;Types.c: 359: char tempVar,
 26557                           ;Types.c: 360: *iterator = input + length;
 26558                           
 26559                           ; BSR set to: 0
 26560                           ;incstack = 0
 26561  015480  0100               	movlb	0	; () banked
 26562  015482  5162               	movf	reverse@length& (0+255),w,b
 26563  015484  0100               	movlb	0	; () banked
 26564  015486  2560               	addwf	reverse@input& (0+255),w,b
 26565  015488  0100               	movlb	0	; () banked
 26566  01548A  6F65               	movwf	reverse@iterator& (0+255),b
 26567  01548C  0100               	movlb	0	; () banked
 26568  01548E  5163               	movf	(reverse@length+1)& (0+255),w,b
 26569  015490  0100               	movlb	0	; () banked
 26570  015492  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 26571  015494  0100               	movlb	0	; () banked
 26572  015496  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 26573                           
 26574                           ;Types.c: 362: while ( --iterator > input )
 26575  015498  D01A               	goto	l921
 26576  01549A                     
 26577                           ; BSR set to: 0
 26578                           ;Types.c: 363: {
 26579                           ;Types.c: 364: tempVar = *input;
 26580                           
 26581                           ; BSR set to: 0
 26582  01549A  C060  FFD9         	movff	reverse@input,fsr2l
 26583  01549E  C061  FFDA         	movff	reverse@input+1,fsr2h
 26584  0154A2  50DF               	movf	indf2,w,c
 26585  0154A4  0100               	movlb	0	; () banked
 26586  0154A6  6F64               	movwf	reverse@tempVar& (0+255),b
 26587                           
 26588                           ; BSR set to: 0
 26589                           ;Types.c: 365: *input++=*iterator;
 26590  0154A8  C065  FFD9         	movff	reverse@iterator,fsr2l
 26591  0154AC  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26592  0154B0  C060  FFE1         	movff	reverse@input,fsr1l
 26593  0154B4  C061  FFE2         	movff	reverse@input+1,fsr1h
 26594  0154B8  CFDF FFE7          	movff	indf2,indf1
 26595                           
 26596                           ; BSR set to: 0
 26597  0154BC  0100               	movlb	0	; () banked
 26598  0154BE  4B60               	infsnz	reverse@input& (0+255),f,b
 26599  0154C0  2B61               	incf	(reverse@input+1)& (0+255),f,b
 26600                           
 26601                           ; BSR set to: 0
 26602                           ;Types.c: 366: *iterator=tempVar;
 26603  0154C2  C065  FFD9         	movff	reverse@iterator,fsr2l
 26604  0154C6  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26605  0154CA  C064  FFDF         	movff	reverse@tempVar,indf2
 26606  0154CE                     l921:
 26607                           
 26608                           ; BSR set to: 0
 26609                           
 26610                           ; BSR set to: 0
 26611  0154CE  0100               	movlb	0	; () banked
 26612  0154D0  0765               	decf	reverse@iterator& (0+255),f,b
 26613  0154D2  A0D8               	btfss	status,0,c
 26614  0154D4  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 26615  0154D6  0100               	movlb	0	; () banked
 26616  0154D8  5165               	movf	reverse@iterator& (0+255),w,b
 26617  0154DA  0100               	movlb	0	; () banked
 26618  0154DC  5D60               	subwf	reverse@input& (0+255),w,b
 26619  0154DE  0100               	movlb	0	; () banked
 26620  0154E0  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 26621  0154E2  0100               	movlb	0	; () banked
 26622  0154E4  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 26623  0154E6  B0D8               	btfsc	status,0,c
 26624  0154E8  0012               	return	
 26625  0154EA  D7D7               	goto	l922
 26626  0154EC                     __end_of_reverse:
 26627                           	opt stack 0
 26628                           tosu	equ	0xFFF
 26629                           tosh	equ	0xFFE
 26630                           tosl	equ	0xFFD
 26631                           pclath	equ	0xFFA
 26632                           tblptru	equ	0xFF8
 26633                           tblptrh	equ	0xFF7
 26634                           tblptrl	equ	0xFF6
 26635                           tablat	equ	0xFF5
 26636                           prodh	equ	0xFF4
 26637                           prodl	equ	0xFF3
 26638                           intcon	equ	0xFF2
 26639                           postinc0	equ	0xFEE
 26640                           wreg	equ	0xFE8
 26641                           indf1	equ	0xFE7
 26642                           postdec1	equ	0xFE5
 26643                           fsr1h	equ	0xFE2
 26644                           fsr1l	equ	0xFE1
 26645                           indf2	equ	0xFDF
 26646                           postinc2	equ	0xFDE
 26647                           postdec2	equ	0xFDD
 26648                           plusw2	equ	0xFDB
 26649                           fsr2h	equ	0xFDA
 26650                           fsr2l	equ	0xFD9
 26651                           status	equ	0xFD8
 26652                           
 26653 ;; *************** function ___lwmod *****************
 26654 ;; Defined at:
 26655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 26656 ;; Parameters:    Size  Location     Type
 26657 ;;  dividend        2    7[BANK0 ] unsigned int 
 26658 ;;  divisor         2    9[BANK0 ] unsigned int 
 26659 ;; Auto vars:     Size  Location     Type
 26660 ;;  counter         1   11[BANK0 ] unsigned char 
 26661 ;; Return value:  Size  Location     Type
 26662 ;;                  2    7[BANK0 ] unsigned int 
 26663 ;; Registers used:
 26664 ;;		wreg, status,2, status,0
 26665 ;; Tracked objects:
 26666 ;;		On entry : 0/0
 26667 ;;		On exit  : 0/0
 26668 ;;		Unchanged: 0/0
 26669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26670 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26673 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26674 ;;Total ram usage:        5 bytes
 26675 ;; Hardware stack levels used:    1
 26676 ;; Hardware stack levels required when called:    7
 26677 ;; This function calls:
 26678 ;;		Nothing
 26679 ;; This function is called by:
 26680 ;;		_itos
 26681 ;;		_printf
 26682 ;; This function uses a non-reentrant model
 26683 ;;
 26684                           
 26685                           	psect	text140
 26686  0157BC                     __ptext140:
 26687                           	opt stack 0
 26688  0157BC                     ___lwmod:
 26689                           	opt stack 22
 26690                           
 26691                           ; BSR set to: 0
 26692                           ;incstack = 0
 26693  0157BC  0100               	movlb	0	; () banked
 26694  0157BE  5169               	movf	___lwmod@divisor& (0+255),w,b
 26695  0157C0  0100               	movlb	0	; () banked
 26696  0157C2  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 26697  0157C4  B4D8               	btfsc	status,2,c
 26698  0157C6  D026               	goto	l2848
 26699                           
 26700                           ; BSR set to: 0
 26701  0157C8  0E01               	movlw	1
 26702  0157CA  0100               	movlb	0	; () banked
 26703  0157CC  6F6B               	movwf	___lwmod@counter& (0+255),b
 26704  0157CE  D006               	goto	l2843
 26705  0157D0                     
 26706                           ; BSR set to: 0
 26707                           
 26708                           ; BSR set to: 0
 26709  0157D0  0100               	movlb	0	; () banked
 26710  0157D2  90D8               	bcf	status,0,c
 26711  0157D4  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 26712  0157D6  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 26713  0157D8  0100               	movlb	0	; () banked
 26714  0157DA  2B6B               	incf	___lwmod@counter& (0+255),f,b
 26715  0157DC                     l2843:
 26716                           
 26717                           ; BSR set to: 0
 26718                           
 26719                           ; BSR set to: 0
 26720  0157DC  0100               	movlb	0	; () banked
 26721  0157DE  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 26722  0157E0  D7F7               	goto	l2844
 26723  0157E2                     u8870:
 26724                           
 26725                           ; BSR set to: 0
 26726                           
 26727                           ; BSR set to: 0
 26728                           
 26729                           ; BSR set to: 0
 26730  0157E2  0100               	movlb	0	; () banked
 26731  0157E4  5169               	movf	___lwmod@divisor& (0+255),w,b
 26732  0157E6  0100               	movlb	0	; () banked
 26733  0157E8  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 26734  0157EA  0100               	movlb	0	; () banked
 26735  0157EC  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26736  0157EE  0100               	movlb	0	; () banked
 26737  0157F0  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 26738  0157F2  A0D8               	btfss	status,0,c
 26739  0157F4  D008               	goto	l2847
 26740                           
 26741                           ; BSR set to: 0
 26742  0157F6  0100               	movlb	0	; () banked
 26743  0157F8  5169               	movf	___lwmod@divisor& (0+255),w,b
 26744  0157FA  0100               	movlb	0	; () banked
 26745  0157FC  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 26746  0157FE  0100               	movlb	0	; () banked
 26747  015800  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26748  015802  0100               	movlb	0	; () banked
 26749  015804  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 26750  015806                     l2847:
 26751                           
 26752                           ; BSR set to: 0
 26753                           
 26754                           ; BSR set to: 0
 26755  015806  0100               	movlb	0	; () banked
 26756  015808  90D8               	bcf	status,0,c
 26757  01580A  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 26758  01580C  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 26759                           
 26760                           ; BSR set to: 0
 26761  01580E  0100               	movlb	0	; () banked
 26762  015810  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 26763  015812  D7E7               	goto	u8870
 26764  015814                     l2848:
 26765                           
 26766                           ; BSR set to: 0
 26767                           
 26768                           ; BSR set to: 0
 26769  015814  C067  F067         	movff	___lwmod@dividend,?___lwmod
 26770  015818  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 26771                           
 26772                           ; BSR set to: 0
 26773  01581C  0012               	return		;funcret
 26774  01581E                     __end_of___lwmod:
 26775                           	opt stack 0
 26776                           tosu	equ	0xFFF
 26777                           tosh	equ	0xFFE
 26778                           tosl	equ	0xFFD
 26779                           pclath	equ	0xFFA
 26780                           tblptru	equ	0xFF8
 26781                           tblptrh	equ	0xFF7
 26782                           tblptrl	equ	0xFF6
 26783                           tablat	equ	0xFF5
 26784                           prodh	equ	0xFF4
 26785                           prodl	equ	0xFF3
 26786                           intcon	equ	0xFF2
 26787                           postinc0	equ	0xFEE
 26788                           wreg	equ	0xFE8
 26789                           indf1	equ	0xFE7
 26790                           postdec1	equ	0xFE5
 26791                           fsr1h	equ	0xFE2
 26792                           fsr1l	equ	0xFE1
 26793                           indf2	equ	0xFDF
 26794                           postinc2	equ	0xFDE
 26795                           postdec2	equ	0xFDD
 26796                           plusw2	equ	0xFDB
 26797                           fsr2h	equ	0xFDA
 26798                           fsr2l	equ	0xFD9
 26799                           status	equ	0xFD8
 26800                           
 26801 ;; *************** function ___lwdiv *****************
 26802 ;; Defined at:
 26803 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 26804 ;; Parameters:    Size  Location     Type
 26805 ;;  dividend        2    0[BANK0 ] unsigned int 
 26806 ;;  divisor         2    2[BANK0 ] unsigned int 
 26807 ;; Auto vars:     Size  Location     Type
 26808 ;;  quotient        2    5[BANK0 ] unsigned int 
 26809 ;;  counter         1    4[BANK0 ] unsigned char 
 26810 ;; Return value:  Size  Location     Type
 26811 ;;                  2    0[BANK0 ] unsigned int 
 26812 ;; Registers used:
 26813 ;;		wreg, status,2, status,0
 26814 ;; Tracked objects:
 26815 ;;		On entry : 0/0
 26816 ;;		On exit  : 0/0
 26817 ;;		Unchanged: 0/0
 26818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26820 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26822 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26823 ;;Total ram usage:        7 bytes
 26824 ;; Hardware stack levels used:    1
 26825 ;; Hardware stack levels required when called:    7
 26826 ;; This function calls:
 26827 ;;		Nothing
 26828 ;; This function is called by:
 26829 ;;		_itos
 26830 ;;		_printf
 26831 ;; This function uses a non-reentrant model
 26832 ;;
 26833                           
 26834                           	psect	text141
 26835  0150E6                     __ptext141:
 26836                           	opt stack 0
 26837  0150E6                     ___lwdiv:
 26838                           	opt stack 22
 26839                           
 26840                           ; BSR set to: 0
 26841                           ;incstack = 0
 26842  0150E6  0E00               	movlw	0
 26843  0150E8  0100               	movlb	0	; () banked
 26844  0150EA  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 26845  0150EC  0E00               	movlw	0
 26846  0150EE  6F65               	movwf	___lwdiv@quotient& (0+255),b
 26847                           
 26848                           ; BSR set to: 0
 26849  0150F0  0100               	movlb	0	; () banked
 26850  0150F2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 26851  0150F4  0100               	movlb	0	; () banked
 26852  0150F6  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 26853  0150F8  B4D8               	btfsc	status,2,c
 26854  0150FA  D02C               	goto	l2838
 26855                           
 26856                           ; BSR set to: 0
 26857  0150FC  0E01               	movlw	1
 26858  0150FE  0100               	movlb	0	; () banked
 26859  015100  6F64               	movwf	___lwdiv@counter& (0+255),b
 26860  015102  D006               	goto	l2833
 26861  015104                     
 26862                           ; BSR set to: 0
 26863                           
 26864                           ; BSR set to: 0
 26865  015104  0100               	movlb	0	; () banked
 26866  015106  90D8               	bcf	status,0,c
 26867  015108  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 26868  01510A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 26869  01510C  0100               	movlb	0	; () banked
 26870  01510E  2B64               	incf	___lwdiv@counter& (0+255),f,b
 26871  015110                     l2833:
 26872                           
 26873                           ; BSR set to: 0
 26874                           
 26875                           ; BSR set to: 0
 26876  015110  0100               	movlb	0	; () banked
 26877  015112  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 26878  015114  D7F7               	goto	l2834
 26879  015116                     u8840:
 26880                           
 26881                           ; BSR set to: 0
 26882                           
 26883                           ; BSR set to: 0
 26884                           
 26885                           ; BSR set to: 0
 26886  015116  0100               	movlb	0	; () banked
 26887  015118  90D8               	bcf	status,0,c
 26888  01511A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 26889  01511C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 26890                           
 26891                           ; BSR set to: 0
 26892  01511E  0100               	movlb	0	; () banked
 26893  015120  5162               	movf	___lwdiv@divisor& (0+255),w,b
 26894  015122  0100               	movlb	0	; () banked
 26895  015124  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 26896  015126  0100               	movlb	0	; () banked
 26897  015128  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 26898  01512A  0100               	movlb	0	; () banked
 26899  01512C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 26900  01512E  A0D8               	btfss	status,0,c
 26901  015130  D00A               	goto	l2837
 26902                           
 26903                           ; BSR set to: 0
 26904  015132  0100               	movlb	0	; () banked
 26905  015134  5162               	movf	___lwdiv@divisor& (0+255),w,b
 26906  015136  0100               	movlb	0	; () banked
 26907  015138  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 26908  01513A  0100               	movlb	0	; () banked
 26909  01513C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 26910  01513E  0100               	movlb	0	; () banked
 26911  015140  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 26912                           
 26913                           ; BSR set to: 0
 26914  015142  0100               	movlb	0	; () banked
 26915  015144  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 26916  015146                     l2837:
 26917                           
 26918                           ; BSR set to: 0
 26919                           
 26920                           ; BSR set to: 0
 26921  015146  0100               	movlb	0	; () banked
 26922  015148  90D8               	bcf	status,0,c
 26923  01514A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 26924  01514C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 26925                           
 26926                           ; BSR set to: 0
 26927  01514E  0100               	movlb	0	; () banked
 26928  015150  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 26929  015152  D7E1               	goto	u8840
 26930  015154                     l2838:
 26931                           
 26932                           ; BSR set to: 0
 26933                           
 26934                           ; BSR set to: 0
 26935  015154  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 26936  015158  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 26937                           
 26938                           ; BSR set to: 0
 26939  01515C  0012               	return		;funcret
 26940  01515E                     __end_of___lwdiv:
 26941                           	opt stack 0
 26942                           tosu	equ	0xFFF
 26943                           tosh	equ	0xFFE
 26944                           tosl	equ	0xFFD
 26945                           pclath	equ	0xFFA
 26946                           tblptru	equ	0xFF8
 26947                           tblptrh	equ	0xFF7
 26948                           tblptrl	equ	0xFF6
 26949                           tablat	equ	0xFF5
 26950                           prodh	equ	0xFF4
 26951                           prodl	equ	0xFF3
 26952                           intcon	equ	0xFF2
 26953                           postinc0	equ	0xFEE
 26954                           wreg	equ	0xFE8
 26955                           indf1	equ	0xFE7
 26956                           postdec1	equ	0xFE5
 26957                           fsr1h	equ	0xFE2
 26958                           fsr1l	equ	0xFE1
 26959                           indf2	equ	0xFDF
 26960                           postinc2	equ	0xFDE
 26961                           postdec2	equ	0xFDD
 26962                           plusw2	equ	0xFDB
 26963                           fsr2h	equ	0xFDA
 26964                           fsr2l	equ	0xFD9
 26965                           status	equ	0xFD8
 26966                           
 26967 ;; *************** function _HMI_SetSegments *****************
 26968 ;; Defined at:
 26969 ;;		line 226 in file "HMI.c"
 26970 ;; Parameters:    Size  Location     Type
 26971 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 26972 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26973 ;; Auto vars:     Size  Location     Type
 26974 ;;  in              2    4[BANK0 ] unsigned short 
 26975 ;; Return value:  Size  Location     Type
 26976 ;;                  1    wreg      void 
 26977 ;; Registers used:
 26978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26979 ;; Tracked objects:
 26980 ;;		On entry : 0/0
 26981 ;;		On exit  : 0/0
 26982 ;;		Unchanged: 0/0
 26983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26985 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26987 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26988 ;;Total ram usage:        5 bytes
 26989 ;; Hardware stack levels used:    1
 26990 ;; Hardware stack levels required when called:    8
 26991 ;; This function calls:
 26992 ;;		_ToSegment
 26993 ;; This function is called by:
 26994 ;;		_HMI_SetNumber
 26995 ;; This function uses a non-reentrant model
 26996 ;;
 26997                           
 26998                           	psect	text142
 26999  014252                     __ptext142:
 27000                           	opt stack 0
 27001  014252                     _HMI_SetSegments:
 27002                           	opt stack 20
 27003                           
 27004                           ;HMI.c: 228: UINT16 in=0;
 27005                           
 27006                           ; BSR set to: 0
 27007                           ;incstack = 0
 27008  014252  0E00               	movlw	0
 27009  014254  0100               	movlb	0	; () banked
 27010  014256  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27011  014258  0E00               	movlw	0
 27012  01425A  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27013                           
 27014                           ;HMI.c: 229: while(*pString)
 27015  01425C  D038               	goto	l1202
 27016  01425E                     
 27017                           ; BSR set to: 0
 27018                           ;HMI.c: 230: {
 27019                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27020                           
 27021                           ; BSR set to: 0
 27022  01425E  0E29               	movlw	low _HMIBoard
 27023  014260  0100               	movlb	0	; () banked
 27024  014262  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27025  014264  6ED9               	movwf	fsr2l,c
 27026  014266  0E03               	movlw	high _HMIBoard
 27027  014268  0100               	movlb	0	; () banked
 27028  01426A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27029  01426C  6EDA               	movwf	fsr2h,c
 27030  01426E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27031  014272  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27032  014276  50E7               	movf	indf1,w,c
 27033  014278  EC00  F08C         	call	_ToSegment
 27034  01427C  6EDF               	movwf	indf2,c
 27035                           
 27036                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27037  01427E  0E29               	movlw	low _HMIBoard
 27038  014280  0100               	movlb	0	; () banked
 27039  014282  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27040  014284  6ED9               	movwf	fsr2l,c
 27041  014286  0E03               	movlw	high _HMIBoard
 27042  014288  0100               	movlb	0	; () banked
 27043  01428A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27044  01428C  6EDA               	movwf	fsr2h,c
 27045  01428E  0E80               	movlw	128
 27046  014290  18DE               	xorwf	postinc2,w,c
 27047  014292  A4D8               	btfss	status,2,c
 27048  014294  D00E               	goto	l1201
 27049                           
 27050                           ; BSR set to: 0
 27051                           ;HMI.c: 234: {
 27052                           ;HMI.c: 235: in--;
 27053  014296  0100               	movlb	0	; () banked
 27054  014298  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27055  01429A  A0D8               	btfss	status,0,c
 27056  01429C  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27057                           
 27058                           ; BSR set to: 0
 27059                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27060  01429E  0E29               	movlw	low _HMIBoard
 27061  0142A0  0100               	movlb	0	; () banked
 27062  0142A2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27063  0142A4  6ED9               	movwf	fsr2l,c
 27064  0142A6  0E03               	movlw	high _HMIBoard
 27065  0142A8  0100               	movlb	0	; () banked
 27066  0142AA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27067  0142AC  6EDA               	movwf	fsr2h,c
 27068  0142AE  0E00               	movlw	0
 27069  0142B0  8EDB               	bsf	plusw2,7,c
 27070  0142B2                     l1201:
 27071                           
 27072                           ; BSR set to: 0
 27073                           ;HMI.c: 237: }
 27074                           ;HMI.c: 239: pString++;
 27075                           
 27076                           ; BSR set to: 0
 27077  0142B2  0100               	movlb	0	; () banked
 27078  0142B4  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27079  0142B6  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27080                           
 27081                           ; BSR set to: 0
 27082                           ;HMI.c: 240: in++;
 27083  0142B8  0100               	movlb	0	; () banked
 27084  0142BA  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27085  0142BC  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27086                           
 27087                           ; BSR set to: 0
 27088                           ;HMI.c: 241: if (in>=6)
 27089  0142BE  0100               	movlb	0	; () banked
 27090  0142C0  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27091  0142C2  E11A               	bnz	l12353
 27092  0142C4  0E06               	movlw	6
 27093  0142C6  0100               	movlb	0	; () banked
 27094  0142C8  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27095  0142CA  B0D8               	btfsc	status,0,c
 27096  0142CC  D015               	goto	l1204
 27097  0142CE                     l1202:
 27098                           
 27099                           ; BSR set to: 0
 27100                           
 27101                           ; BSR set to: 0
 27102                           
 27103                           ; BSR set to: 0
 27104  0142CE  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27105  0142D2  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27106  0142D6  50DF               	movf	indf2,w,c
 27107  0142D8  B4D8               	btfsc	status,2,c
 27108  0142DA  D00E               	goto	l1204
 27109  0142DC  D7C0               	goto	l1200
 27110  0142DE                     
 27111                           ; BSR set to: 0
 27112                           ;HMI.c: 245: {
 27113                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27114                           
 27115                           ; BSR set to: 0
 27116  0142DE  0E29               	movlw	low _HMIBoard
 27117  0142E0  0100               	movlb	0	; () banked
 27118  0142E2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27119  0142E4  6ED9               	movwf	fsr2l,c
 27120  0142E6  0E03               	movlw	high _HMIBoard
 27121  0142E8  0100               	movlb	0	; () banked
 27122  0142EA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27123  0142EC  6EDA               	movwf	fsr2h,c
 27124  0142EE  0E00               	movlw	0
 27125  0142F0  6EDF               	movwf	indf2,c
 27126                           
 27127                           ; BSR set to: 0
 27128                           ;HMI.c: 247: in++;
 27129  0142F2  0100               	movlb	0	; () banked
 27130  0142F4  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27131  0142F6  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27132  0142F8                     l1204:
 27133  0142F8                     l12353:
 27134                           
 27135                           ; BSR set to: 0
 27136  0142F8  0100               	movlb	0	; () banked
 27137  0142FA  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27138  0142FC  E106               	bnz	l1207
 27139  0142FE  0E06               	movlw	6
 27140  014300  0100               	movlb	0	; () banked
 27141  014302  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27142  014304  B0D8               	btfsc	status,0,c
 27143  014306  0012               	return	
 27144  014308  D7EA               	goto	l1205
 27145  01430A                     l1207:
 27146                           
 27147                           ; BSR set to: 0
 27148  01430A  0012               	return		;funcret
 27149  01430C                     __end_of_HMI_SetSegments:
 27150                           	opt stack 0
 27151                           tosu	equ	0xFFF
 27152                           tosh	equ	0xFFE
 27153                           tosl	equ	0xFFD
 27154                           pclath	equ	0xFFA
 27155                           tblptru	equ	0xFF8
 27156                           tblptrh	equ	0xFF7
 27157                           tblptrl	equ	0xFF6
 27158                           tablat	equ	0xFF5
 27159                           prodh	equ	0xFF4
 27160                           prodl	equ	0xFF3
 27161                           intcon	equ	0xFF2
 27162                           postinc0	equ	0xFEE
 27163                           wreg	equ	0xFE8
 27164                           indf1	equ	0xFE7
 27165                           postdec1	equ	0xFE5
 27166                           fsr1h	equ	0xFE2
 27167                           fsr1l	equ	0xFE1
 27168                           indf2	equ	0xFDF
 27169                           postinc2	equ	0xFDE
 27170                           postdec2	equ	0xFDD
 27171                           plusw2	equ	0xFDB
 27172                           fsr2h	equ	0xFDA
 27173                           fsr2l	equ	0xFD9
 27174                           status	equ	0xFD8
 27175                           
 27176 ;; *************** function _ToSegment *****************
 27177 ;; Defined at:
 27178 ;;		line 284 in file "Library/Types.c"
 27179 ;; Parameters:    Size  Location     Type
 27180 ;;  pCHR            1    wreg     unsigned char 
 27181 ;; Auto vars:     Size  Location     Type
 27182 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27183 ;; Return value:  Size  Location     Type
 27184 ;;                  1    wreg      unsigned char 
 27185 ;; Registers used:
 27186 ;;		wreg, status,2, status,0
 27187 ;; Tracked objects:
 27188 ;;		On entry : 0/0
 27189 ;;		On exit  : 0/0
 27190 ;;		Unchanged: 0/0
 27191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27195 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27196 ;;Total ram usage:        1 bytes
 27197 ;; Hardware stack levels used:    1
 27198 ;; Hardware stack levels required when called:    7
 27199 ;; This function calls:
 27200 ;;		Nothing
 27201 ;; This function is called by:
 27202 ;;		_HMI_SetSegments
 27203 ;; This function uses a non-reentrant model
 27204 ;;
 27205                           
 27206                           	psect	text143
 27207  011800                     __ptext143:
 27208                           	opt stack 0
 27209  011800                     _ToSegment:
 27210                           	opt stack 20
 27211                           
 27212                           ; BSR set to: 0
 27213                           ;incstack = 0
 27214                           ;ToSegment@pCHR stored from wreg
 27215  011800  0100               	movlb	0	; () banked
 27216  011802  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27217                           
 27218                           ;Types.c: 286: switch(pCHR)
 27219  011804  D07E               	goto	l853
 27220  011806  0E3F               	movlw	63
 27221  011808  0012               	return	
 27222  01180A  0E06               	movlw	6
 27223  01180C  0012               	return	
 27224  01180E  0E5B               	movlw	91
 27225  011810  0012               	return	
 27226  011812  0E4F               	movlw	79
 27227  011814  0012               	return	
 27228  011816  0E66               	movlw	102
 27229  011818  0012               	return	
 27230  01181A  0E6D               	movlw	109
 27231  01181C  0012               	return	
 27232  01181E  0E7D               	movlw	125
 27233  011820  0012               	return	
 27234  011822  0E07               	movlw	7
 27235  011824  0012               	return	
 27236  011826  0E7F               	movlw	127
 27237  011828  0012               	return	
 27238  01182A  0E6F               	movlw	111
 27239  01182C  0012               	return	
 27240  01182E  0E5F               	movlw	95
 27241  011830  0012               	return	
 27242  011832  0E7C               	movlw	124
 27243  011834  0012               	return	
 27244  011836  0E58               	movlw	88
 27245  011838  0012               	return	
 27246  01183A  0E5E               	movlw	94
 27247  01183C  0012               	return	
 27248  01183E  0E7B               	movlw	123
 27249  011840  0012               	return	
 27250  011842  0E71               	movlw	113
 27251  011844  0012               	return	
 27252  011846  0E6F               	movlw	111
 27253  011848  0012               	return	
 27254  01184A  0E74               	movlw	116
 27255  01184C  0012               	return	
 27256  01184E  0E04               	movlw	4
 27257  011850  0012               	return	
 27258  011852  0E0E               	movlw	14
 27259  011854  0012               	return	
 27260  011856  0E7A               	movlw	122
 27261  011858  0012               	return	
 27262  01185A  0E06               	movlw	6
 27263  01185C  0012               	return	
 27264  01185E  0E14               	movlw	20
 27265  011860  0012               	return	
 27266  011862  0E54               	movlw	84
 27267  011864  0012               	return	
 27268  011866  0E5C               	movlw	92
 27269  011868  0012               	return	
 27270  01186A  0E73               	movlw	115
 27271  01186C  0012               	return	
 27272  01186E  0E67               	movlw	103
 27273  011870  0012               	return	
 27274  011872  0E50               	movlw	80
 27275  011874  0012               	return	
 27276  011876  0E6D               	movlw	109
 27277  011878  0012               	return	
 27278  01187A  0E78               	movlw	120
 27279  01187C  0012               	return	
 27280  01187E  0E1C               	movlw	28
 27281  011880  0012               	return	
 27282  011882  0E62               	movlw	98
 27283  011884  0012               	return	
 27284  011886  0E2A               	movlw	42
 27285  011888  0012               	return	
 27286  01188A  0E64               	movlw	100
 27287  01188C  0012               	return	
 27288  01188E  0E6E               	movlw	110
 27289  011890  0012               	return	
 27290  011892  0E5B               	movlw	91
 27291  011894  0012               	return	
 27292  011896  0E77               	movlw	119
 27293  011898  0012               	return	
 27294  01189A  0E7F               	movlw	127
 27295  01189C  0012               	return	
 27296  01189E  0E39               	movlw	57
 27297  0118A0  0012               	return	
 27298  0118A2  0E3F               	movlw	63
 27299  0118A4  0012               	return	
 27300  0118A6  0E79               	movlw	121
 27301  0118A8  0012               	return	
 27302  0118AA  0E71               	movlw	113
 27303  0118AC  0012               	return	
 27304  0118AE  0E3D               	movlw	61
 27305  0118B0  0012               	return	
 27306  0118B2  0E76               	movlw	118
 27307  0118B4  0012               	return	
 27308  0118B6  0E06               	movlw	6
 27309  0118B8  0012               	return	
 27310  0118BA  0E1E               	movlw	30
 27311  0118BC  0012               	return	
 27312  0118BE  0E57               	movlw	87
 27313  0118C0  0012               	return	
 27314  0118C2  0E38               	movlw	56
 27315  0118C4  0012               	return	
 27316  0118C6  0E76               	movlw	118
 27317  0118C8  0012               	return	
 27318  0118CA  0E76               	movlw	118
 27319  0118CC  0012               	return	
 27320  0118CE  0E3F               	movlw	63
 27321  0118D0  0012               	return	
 27322  0118D2  0E73               	movlw	115
 27323  0118D4  0012               	return	
 27324  0118D6  0E3F               	movlw	63
 27325  0118D8  0012               	return	
 27326  0118DA  0E77               	movlw	119
 27327  0118DC  0012               	return	
 27328  0118DE  0E6D               	movlw	109
 27329  0118E0  0012               	return	
 27330  0118E2  0E31               	movlw	49
 27331  0118E4  0012               	return	
 27332  0118E6  0E3E               	movlw	62
 27333  0118E8  0012               	return	
 27334  0118EA  0E3E               	movlw	62
 27335  0118EC  0012               	return	
 27336  0118EE  0E7E               	movlw	126
 27337  0118F0  0012               	return	
 27338  0118F2  0E76               	movlw	118
 27339  0118F4  0012               	return	
 27340  0118F6  0E66               	movlw	102
 27341  0118F8  0012               	return	
 27342  0118FA  0E5B               	movlw	91
 27343  0118FC  0012               	return	
 27344  0118FE  0E80               	movlw	128
 27345  011900  0012               	return	
 27346  011902                     l853:
 27347  011902  0100               	movlb	0	; () banked
 27348  011904  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27349                           
 27350                           ; Switch size 1, requested type "space"
 27351                           ; Number of cases is 63, Range of values is 46 to 122
 27352                           ; switch strategies available:
 27353                           ; Name         Instructions Cycles
 27354                           ; simple_byte          190    96 (average)
 27355                           ;	Chosen strategy is simple_byte
 27356  011906  0A2E               	xorlw	46	; case 46
 27357  011908  B4D8               	btfsc	status,2,c
 27358  01190A  D7F9               	goto	l917
 27359  01190C  0A1E               	xorlw	30	; case 48
 27360  01190E  B4D8               	btfsc	status,2,c
 27361  011910  D77A               	goto	l854
 27362  011912  0A01               	xorlw	1	; case 49
 27363  011914  B4D8               	btfsc	status,2,c
 27364  011916  D779               	goto	l856
 27365  011918  0A03               	xorlw	3	; case 50
 27366  01191A  B4D8               	btfsc	status,2,c
 27367  01191C  D778               	goto	l857
 27368  01191E  0A01               	xorlw	1	; case 51
 27369  011920  B4D8               	btfsc	status,2,c
 27370  011922  D777               	goto	l858
 27371  011924  0A07               	xorlw	7	; case 52
 27372  011926  B4D8               	btfsc	status,2,c
 27373  011928  D776               	goto	l859
 27374  01192A  0A01               	xorlw	1	; case 53
 27375  01192C  B4D8               	btfsc	status,2,c
 27376  01192E  D775               	goto	l860
 27377  011930  0A03               	xorlw	3	; case 54
 27378  011932  B4D8               	btfsc	status,2,c
 27379  011934  D774               	goto	l861
 27380  011936  0A01               	xorlw	1	; case 55
 27381  011938  B4D8               	btfsc	status,2,c
 27382  01193A  D773               	goto	l862
 27383  01193C  0A0F               	xorlw	15	; case 56
 27384  01193E  B4D8               	btfsc	status,2,c
 27385  011940  D772               	goto	l863
 27386  011942  0A01               	xorlw	1	; case 57
 27387  011944  B4D8               	btfsc	status,2,c
 27388  011946  D771               	goto	l864
 27389  011948  0A78               	xorlw	120	; case 65
 27390  01194A  B4D8               	btfsc	status,2,c
 27391  01194C  D7A4               	goto	l891
 27392  01194E  0A03               	xorlw	3	; case 66
 27393  011950  B4D8               	btfsc	status,2,c
 27394  011952  D7A3               	goto	l892
 27395  011954  0A01               	xorlw	1	; case 67
 27396  011956  B4D8               	btfsc	status,2,c
 27397  011958  D7A2               	goto	l893
 27398  01195A  0A07               	xorlw	7	; case 68
 27399  01195C  B4D8               	btfsc	status,2,c
 27400  01195E  D7A1               	goto	l894
 27401  011960  0A01               	xorlw	1	; case 69
 27402  011962  B4D8               	btfsc	status,2,c
 27403  011964  D7A0               	goto	l895
 27404  011966  0A03               	xorlw	3	; case 70
 27405  011968  B4D8               	btfsc	status,2,c
 27406  01196A  D79F               	goto	l896
 27407  01196C  0A01               	xorlw	1	; case 71
 27408  01196E  B4D8               	btfsc	status,2,c
 27409  011970  D79E               	goto	l897
 27410  011972  0A0F               	xorlw	15	; case 72
 27411  011974  B4D8               	btfsc	status,2,c
 27412  011976  D79D               	goto	l898
 27413  011978  0A01               	xorlw	1	; case 73
 27414  01197A  B4D8               	btfsc	status,2,c
 27415  01197C  D79C               	goto	l899
 27416  01197E  0A03               	xorlw	3	; case 74
 27417  011980  B4D8               	btfsc	status,2,c
 27418  011982  D79B               	goto	l900
 27419  011984  0A01               	xorlw	1	; case 75
 27420  011986  B4D8               	btfsc	status,2,c
 27421  011988  D79A               	goto	l901
 27422  01198A  0A07               	xorlw	7	; case 76
 27423  01198C  B4D8               	btfsc	status,2,c
 27424  01198E  D799               	goto	l902
 27425  011990  0A01               	xorlw	1	; case 77
 27426  011992  B4D8               	btfsc	status,2,c
 27427  011994  D798               	goto	l903
 27428  011996  0A03               	xorlw	3	; case 78
 27429  011998  B4D8               	btfsc	status,2,c
 27430  01199A  D797               	goto	l904
 27431  01199C  0A01               	xorlw	1	; case 79
 27432  01199E  B4D8               	btfsc	status,2,c
 27433  0119A0  D796               	goto	l905
 27434  0119A2  0A1F               	xorlw	31	; case 80
 27435  0119A4  B4D8               	btfsc	status,2,c
 27436  0119A6  D795               	goto	l906
 27437  0119A8  0A01               	xorlw	1	; case 81
 27438  0119AA  B4D8               	btfsc	status,2,c
 27439  0119AC  D794               	goto	l907
 27440  0119AE  0A03               	xorlw	3	; case 82
 27441  0119B0  B4D8               	btfsc	status,2,c
 27442  0119B2  D793               	goto	l908
 27443  0119B4  0A01               	xorlw	1	; case 83
 27444  0119B6  B4D8               	btfsc	status,2,c
 27445  0119B8  D792               	goto	l909
 27446  0119BA  0A07               	xorlw	7	; case 84
 27447  0119BC  B4D8               	btfsc	status,2,c
 27448  0119BE  D791               	goto	l910
 27449  0119C0  0A01               	xorlw	1	; case 85
 27450  0119C2  B4D8               	btfsc	status,2,c
 27451  0119C4  D790               	goto	l911
 27452  0119C6  0A03               	xorlw	3	; case 86
 27453  0119C8  B4D8               	btfsc	status,2,c
 27454  0119CA  D78F               	goto	l912
 27455  0119CC  0A01               	xorlw	1	; case 87
 27456  0119CE  B4D8               	btfsc	status,2,c
 27457  0119D0  D78E               	goto	l913
 27458  0119D2  0A0F               	xorlw	15	; case 88
 27459  0119D4  B4D8               	btfsc	status,2,c
 27460  0119D6  D78D               	goto	l914
 27461  0119D8  0A01               	xorlw	1	; case 89
 27462  0119DA  B4D8               	btfsc	status,2,c
 27463  0119DC  D78C               	goto	l915
 27464  0119DE  0A03               	xorlw	3	; case 90
 27465  0119E0  B4D8               	btfsc	status,2,c
 27466  0119E2  D78B               	goto	l916
 27467  0119E4  0A3B               	xorlw	59	; case 97
 27468  0119E6  B4D8               	btfsc	status,2,c
 27469  0119E8  D722               	goto	l865
 27470  0119EA  0A03               	xorlw	3	; case 98
 27471  0119EC  B4D8               	btfsc	status,2,c
 27472  0119EE  D721               	goto	l866
 27473  0119F0  0A01               	xorlw	1	; case 99
 27474  0119F2  B4D8               	btfsc	status,2,c
 27475  0119F4  D720               	goto	l867
 27476  0119F6  0A07               	xorlw	7	; case 100
 27477  0119F8  B4D8               	btfsc	status,2,c
 27478  0119FA  D71F               	goto	l868
 27479  0119FC  0A01               	xorlw	1	; case 101
 27480  0119FE  B4D8               	btfsc	status,2,c
 27481  011A00  D71E               	goto	l869
 27482  011A02  0A03               	xorlw	3	; case 102
 27483  011A04  B4D8               	btfsc	status,2,c
 27484  011A06  D71D               	goto	l870
 27485  011A08  0A01               	xorlw	1	; case 103
 27486  011A0A  B4D8               	btfsc	status,2,c
 27487  011A0C  D71C               	goto	l871
 27488  011A0E  0A0F               	xorlw	15	; case 104
 27489  011A10  B4D8               	btfsc	status,2,c
 27490  011A12  D71B               	goto	l872
 27491  011A14  0A01               	xorlw	1	; case 105
 27492  011A16  B4D8               	btfsc	status,2,c
 27493  011A18  D71A               	goto	l873
 27494  011A1A  0A03               	xorlw	3	; case 106
 27495  011A1C  B4D8               	btfsc	status,2,c
 27496  011A1E  D719               	goto	l874
 27497  011A20  0A01               	xorlw	1	; case 107
 27498  011A22  B4D8               	btfsc	status,2,c
 27499  011A24  D718               	goto	l875
 27500  011A26  0A07               	xorlw	7	; case 108
 27501  011A28  B4D8               	btfsc	status,2,c
 27502  011A2A  D717               	goto	l876
 27503  011A2C  0A01               	xorlw	1	; case 109
 27504  011A2E  B4D8               	btfsc	status,2,c
 27505  011A30  D716               	goto	l877
 27506  011A32  0A03               	xorlw	3	; case 110
 27507  011A34  B4D8               	btfsc	status,2,c
 27508  011A36  D715               	goto	l878
 27509  011A38  0A01               	xorlw	1	; case 111
 27510  011A3A  B4D8               	btfsc	status,2,c
 27511  011A3C  D714               	goto	l879
 27512  011A3E  0A1F               	xorlw	31	; case 112
 27513  011A40  B4D8               	btfsc	status,2,c
 27514  011A42  D713               	goto	l880
 27515  011A44  0A01               	xorlw	1	; case 113
 27516  011A46  B4D8               	btfsc	status,2,c
 27517  011A48  D712               	goto	l881
 27518  011A4A  0A03               	xorlw	3	; case 114
 27519  011A4C  B4D8               	btfsc	status,2,c
 27520  011A4E  D711               	goto	l882
 27521  011A50  0A01               	xorlw	1	; case 115
 27522  011A52  B4D8               	btfsc	status,2,c
 27523  011A54  D710               	goto	l883
 27524  011A56  0A07               	xorlw	7	; case 116
 27525  011A58  B4D8               	btfsc	status,2,c
 27526  011A5A  D70F               	goto	l884
 27527  011A5C  0A01               	xorlw	1	; case 117
 27528  011A5E  B4D8               	btfsc	status,2,c
 27529  011A60  D70E               	goto	l885
 27530  011A62  0A03               	xorlw	3	; case 118
 27531  011A64  B4D8               	btfsc	status,2,c
 27532  011A66  D70D               	goto	l886
 27533  011A68  0A01               	xorlw	1	; case 119
 27534  011A6A  B4D8               	btfsc	status,2,c
 27535  011A6C  D70C               	goto	l887
 27536  011A6E  0A0F               	xorlw	15	; case 120
 27537  011A70  B4D8               	btfsc	status,2,c
 27538  011A72  D70B               	goto	l888
 27539  011A74  0A01               	xorlw	1	; case 121
 27540  011A76  B4D8               	btfsc	status,2,c
 27541  011A78  D70A               	goto	l889
 27542  011A7A  0A03               	xorlw	3	; case 122
 27543  011A7C  B4D8               	btfsc	status,2,c
 27544  011A7E  D709               	goto	l890
 27545                           
 27546                           ;Types.c: 354: return 0;
 27547                           
 27548                           ; BSR set to: 0
 27549  011A80  0E00               	movlw	0
 27550  011A82  0012               	return	
 27551  011A84                     __end_of_ToSegment:
 27552                           	opt stack 0
 27553                           tosu	equ	0xFFF
 27554                           tosh	equ	0xFFE
 27555                           tosl	equ	0xFFD
 27556                           pclath	equ	0xFFA
 27557                           tblptru	equ	0xFF8
 27558                           tblptrh	equ	0xFF7
 27559                           tblptrl	equ	0xFF6
 27560                           tablat	equ	0xFF5
 27561                           prodh	equ	0xFF4
 27562                           prodl	equ	0xFF3
 27563                           intcon	equ	0xFF2
 27564                           postinc0	equ	0xFEE
 27565                           wreg	equ	0xFE8
 27566                           indf1	equ	0xFE7
 27567                           postdec1	equ	0xFE5
 27568                           fsr1h	equ	0xFE2
 27569                           fsr1l	equ	0xFE1
 27570                           indf2	equ	0xFDF
 27571                           postinc2	equ	0xFDE
 27572                           postdec2	equ	0xFDD
 27573                           plusw2	equ	0xFDB
 27574                           fsr2h	equ	0xFDA
 27575                           fsr2l	equ	0xFD9
 27576                           status	equ	0xFD8
 27577                           
 27578 ;; *************** function _HMI_SetButton *****************
 27579 ;; Defined at:
 27580 ;;		line 186 in file "HMI.c"
 27581 ;; Parameters:    Size  Location     Type
 27582 ;;  pValue          1    wreg     unsigned char 
 27583 ;; Auto vars:     Size  Location     Type
 27584 ;;  pValue          1    6[BANK0 ] unsigned char 
 27585 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 27586 ;;  v               1    7[BANK0 ] unsigned char 
 27587 ;; Return value:  Size  Location     Type
 27588 ;;                  1    wreg      void 
 27589 ;; Registers used:
 27590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27591 ;; Tracked objects:
 27592 ;;		On entry : 0/0
 27593 ;;		On exit  : 0/0
 27594 ;;		Unchanged: 0/0
 27595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27597 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27598 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27599 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27600 ;;Total ram usage:        8 bytes
 27601 ;; Hardware stack levels used:    1
 27602 ;; Hardware stack levels required when called:    7
 27603 ;; This function calls:
 27604 ;;		Nothing
 27605 ;; This function is called by:
 27606 ;;		_Event_TestButton
 27607 ;; This function uses a non-reentrant model
 27608 ;;
 27609                           
 27610                           	psect	text144
 27611  014C30                     __ptext144:
 27612                           	opt stack 0
 27613  014C30                     _HMI_SetButton:
 27614                           	opt stack 19
 27615                           
 27616                           ;incstack = 0
 27617                           ;HMI_SetButton@pValue stored from wreg
 27618  014C30  0100               	movlb	0	; () banked
 27619  014C32  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 27620                           
 27621                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 27622  014C34  0E6C               	movlw	low HMI_SetButton@F7213
 27623  014C36  6EF6               	movwf	tblptrl,c
 27624  014C38                     	if	1	;There is more than 1 active tblptr byte
 27625  014C38  0EFD               	movlw	high HMI_SetButton@F7213
 27626  014C3A  6EF7               	movwf	tblptrh,c
 27627  014C3C                     	endif
 27628  014C3C                     	if	1	;There are 3 active tblptr bytes
 27629  014C3C  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 27630  014C3E  6EF8               	movwf	tblptru,c
 27631  014C40                     	endif
 27632  014C40  0009               	tblrd		*+
 27633  014C42  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 27634  014C46  0009               	tblrd		*+
 27635  014C48  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 27636  014C4C  0009               	tblrd		*+
 27637  014C4E  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 27638  014C52  000A               	tblrd		*-
 27639  014C54  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 27640                           
 27641                           ;HMI.c: 189: UINT8 v = 0b00010001;
 27642  014C58  0E11               	movlw	17
 27643  014C5A  0100               	movlb	0	; () banked
 27644  014C5C  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27645                           
 27646                           ; BSR set to: 0
 27647                           ;HMI.c: 190: pValue &= 3;
 27648  014C5E  0E03               	movlw	3
 27649  014C60  0100               	movlb	0	; () banked
 27650  014C62  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 27651                           
 27652                           ; BSR set to: 0
 27653                           ;HMI.c: 191: v = v << reindex[pValue];
 27654  014C64  0100               	movlb	0	; () banked
 27655  014C66  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 27656  014C68  0D01               	mullw	1
 27657  014C6A  0E62               	movlw	low HMI_SetButton@reindex
 27658  014C6C  24F3               	addwf	prodl,w,c
 27659  014C6E  6ED9               	movwf	fsr2l,c
 27660  014C70  0E00               	movlw	high HMI_SetButton@reindex
 27661  014C72  20F4               	addwfc	prodh,w,c
 27662  014C74  6EDA               	movwf	fsr2h,c
 27663  014C76  50DF               	movf	indf2,w,c
 27664  014C78  0100               	movlb	0	; () banked
 27665  014C7A  6F60               	movwf	??_HMI_SetButton& (0+255),b
 27666  014C7C  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 27667  014C80  0100               	movlb	0	; () banked
 27668  014C82  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 27669  014C84  D003               	goto	u9384
 27670  014C86                     u9385:
 27671  014C86  0100               	movlb	0	; () banked
 27672  014C88  90D8               	bcf	status,0,c
 27673  014C8A  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 27674  014C8C                     u9384:
 27675  014C8C  0100               	movlb	0	; () banked
 27676  014C8E  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 27677  014C90  D7FA               	goto	u9385
 27678  014C92  0100               	movlb	0	; () banked
 27679  014C94  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 27680  014C96  0100               	movlb	0	; () banked
 27681  014C98  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27682                           
 27683                           ; BSR set to: 0
 27684                           ;HMI.c: 192: v = v >> 4;
 27685  014C9A  0100               	movlb	0	; () banked
 27686  014C9C  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 27687  014C9E  0B0F               	andlw	15
 27688  014CA0  0100               	movlb	0	; () banked
 27689  014CA2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27690                           
 27691                           ; BSR set to: 0
 27692                           ;HMI.c: 193: v = v & 0x0F;
 27693  014CA4  0100               	movlb	0	; () banked
 27694  014CA6  5167               	movf	HMI_SetButton@v& (0+255),w,b
 27695  014CA8  0B0F               	andlw	15
 27696  014CAA  0100               	movlb	0	; () banked
 27697  014CAC  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27698                           
 27699                           ; BSR set to: 0
 27700                           ;HMI.c: 194: HMIBoard.pButton = v;
 27701  014CAE  0103               	movlb	3	; () banked
 27702  014CB0  512F               	movf	(_HMIBoard+6)& (0+255),w,b
 27703  014CB2  0100               	movlb	0	; () banked
 27704  014CB4  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 27705  014CB6  0BF0               	andlw	-16
 27706  014CB8  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 27707  014CBA  0103               	movlb	3	; () banked
 27708  014CBC  6F2F               	movwf	(_HMIBoard+6)& (0+255),b
 27709                           
 27710                           ; BSR set to: 3
 27711  014CBE  0012               	return		;funcret
 27712  014CC0                     __end_of_HMI_SetButton:
 27713                           	opt stack 0
 27714                           tosu	equ	0xFFF
 27715                           tosh	equ	0xFFE
 27716                           tosl	equ	0xFFD
 27717                           pclath	equ	0xFFA
 27718                           tblptru	equ	0xFF8
 27719                           tblptrh	equ	0xFF7
 27720                           tblptrl	equ	0xFF6
 27721                           tablat	equ	0xFF5
 27722                           prodh	equ	0xFF4
 27723                           prodl	equ	0xFF3
 27724                           intcon	equ	0xFF2
 27725                           postinc0	equ	0xFEE
 27726                           wreg	equ	0xFE8
 27727                           indf1	equ	0xFE7
 27728                           postdec1	equ	0xFE5
 27729                           fsr1h	equ	0xFE2
 27730                           fsr1l	equ	0xFE1
 27731                           indf2	equ	0xFDF
 27732                           postinc2	equ	0xFDE
 27733                           postdec2	equ	0xFDD
 27734                           plusw2	equ	0xFDB
 27735                           fsr2h	equ	0xFDA
 27736                           fsr2l	equ	0xFD9
 27737                           status	equ	0xFD8
 27738                           
 27739 ;; *************** function _LED_Toggle *****************
 27740 ;; Defined at:
 27741 ;;		line 50 in file "Library/LED.c"
 27742 ;; Parameters:    Size  Location     Type
 27743 ;;  pLED            1    wreg     enum E6739
 27744 ;; Auto vars:     Size  Location     Type
 27745 ;;  pLED            1   24[BANK0 ] enum E6739
 27746 ;; Return value:  Size  Location     Type
 27747 ;;                  1    wreg      void 
 27748 ;; Registers used:
 27749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27750 ;; Tracked objects:
 27751 ;;		On entry : 0/0
 27752 ;;		On exit  : 0/0
 27753 ;;		Unchanged: 0/0
 27754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27758 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27759 ;;Total ram usage:        1 bytes
 27760 ;; Hardware stack levels used:    1
 27761 ;; Hardware stack levels required when called:   12
 27762 ;; This function calls:
 27763 ;;		_Port_TogglePin
 27764 ;; This function is called by:
 27765 ;;		_LCD_Reset
 27766 ;;		_Event_DIPSwitch
 27767 ;;		_Event_TestButton
 27768 ;;		_Event_ADCSequenceComplete
 27769 ;;		_Event_HMI_DIPSwitch
 27770 ;;		_Event_HMI_LeftButton
 27771 ;;		_Event_HMI_RightButton
 27772 ;;		_Event_HMI_UpButton
 27773 ;;		_Event_HMI_DownButton
 27774 ;; This function uses a non-reentrant model
 27775 ;;
 27776                           
 27777                           	psect	text145
 27778  015B9C                     __ptext145:
 27779                           	opt stack 0
 27780  015B9C                     _LED_Toggle:
 27781                           	opt stack 14
 27782                           
 27783                           ; BSR set to: 3
 27784                           ;incstack = 0
 27785                           ;LED_Toggle@pLED stored from wreg
 27786  015B9C  0100               	movlb	0	; () banked
 27787  015B9E  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 27788                           
 27789                           ;LED.c: 52: switch (pLED)
 27790  015BA0  D018               	goto	l234
 27791  015BA2                     
 27792                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 27793  015BA2  0EEA               	movlw	low _PortC
 27794  015BA4  0100               	movlb	0	; () banked
 27795  015BA6  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 27796  015BA8  0E00               	movlw	high _PortC
 27797  015BAA  0100               	movlb	0	; () banked
 27798  015BAC  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 27799  015BAE  0E00               	movlw	0
 27800  015BB0  0100               	movlb	0	; () banked
 27801  015BB2  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 27802  015BB4  EC33  F0B0         	call	_Port_TogglePin	;wreg free
 27803                           
 27804                           ;LED.c: 56: break;
 27805  015BB8  0012               	return	
 27806  015BBA                     
 27807                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 27808  015BBA  0EEA               	movlw	low _PortC
 27809  015BBC  0100               	movlb	0	; () banked
 27810  015BBE  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 27811  015BC0  0E00               	movlw	high _PortC
 27812  015BC2  0100               	movlb	0	; () banked
 27813  015BC4  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 27814  015BC6  0E01               	movlw	1
 27815  015BC8  0100               	movlb	0	; () banked
 27816  015BCA  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 27817  015BCC  EC33  F0B0         	call	_Port_TogglePin	;wreg free
 27818                           
 27819                           ;LED.c: 60: }
 27820                           
 27821                           ;LED.c: 59: break;
 27822  015BD0  0012               	return	
 27823  015BD2                     l234:
 27824  015BD2  0100               	movlb	0	; () banked
 27825  015BD4  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 27826                           
 27827                           ; Switch size 1, requested type "space"
 27828                           ; Number of cases is 2, Range of values is 0 to 1
 27829                           ; switch strategies available:
 27830                           ; Name         Instructions Cycles
 27831                           ; simple_byte            7     4 (average)
 27832                           ;	Chosen strategy is simple_byte
 27833  015BD6  0A00               	xorlw	0	; case 0
 27834  015BD8  B4D8               	btfsc	status,2,c
 27835  015BDA  D7E3               	goto	l235
 27836  015BDC  0A01               	xorlw	1	; case 1
 27837  015BDE  A4D8               	btfss	status,2,c
 27838  015BE0  0012               	return	
 27839  015BE2  D7EB               	goto	l237
 27840  015BE4                     __end_of_LED_Toggle:
 27841                           	opt stack 0
 27842                           tosu	equ	0xFFF
 27843                           tosh	equ	0xFFE
 27844                           tosl	equ	0xFFD
 27845                           pclath	equ	0xFFA
 27846                           tblptru	equ	0xFF8
 27847                           tblptrh	equ	0xFF7
 27848                           tblptrl	equ	0xFF6
 27849                           tablat	equ	0xFF5
 27850                           prodh	equ	0xFF4
 27851                           prodl	equ	0xFF3
 27852                           intcon	equ	0xFF2
 27853                           postinc0	equ	0xFEE
 27854                           wreg	equ	0xFE8
 27855                           indf1	equ	0xFE7
 27856                           postdec1	equ	0xFE5
 27857                           fsr1h	equ	0xFE2
 27858                           fsr1l	equ	0xFE1
 27859                           indf2	equ	0xFDF
 27860                           postinc2	equ	0xFDE
 27861                           postdec2	equ	0xFDD
 27862                           plusw2	equ	0xFDB
 27863                           fsr2h	equ	0xFDA
 27864                           fsr2l	equ	0xFD9
 27865                           status	equ	0xFD8
 27866                           
 27867 ;; *************** function _Port_TogglePin *****************
 27868 ;; Defined at:
 27869 ;;		line 278 in file "Library/Port.c"
 27870 ;; Parameters:    Size  Location     Type
 27871 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 27872 ;;		 -> PortC(10), 
 27873 ;;  pPin            1   22[BANK0 ] enum E6750
 27874 ;; Auto vars:     Size  Location     Type
 27875 ;;  Value           1   23[BANK0 ] unsigned char 
 27876 ;; Return value:  Size  Location     Type
 27877 ;;                  1    wreg      void 
 27878 ;; Registers used:
 27879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27880 ;; Tracked objects:
 27881 ;;		On entry : 0/0
 27882 ;;		On exit  : 0/0
 27883 ;;		Unchanged: 0/0
 27884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27885 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27888 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27889 ;;Total ram usage:        4 bytes
 27890 ;; Hardware stack levels used:    1
 27891 ;; Hardware stack levels required when called:   11
 27892 ;; This function calls:
 27893 ;;		_Port_GetPin
 27894 ;;		_Port_SetPin
 27895 ;; This function is called by:
 27896 ;;		_LED_Toggle
 27897 ;; This function uses a non-reentrant model
 27898 ;;
 27899                           
 27900                           	psect	text146
 27901  016066                     __ptext146:
 27902                           	opt stack 0
 27903  016066                     _Port_TogglePin:
 27904                           	opt stack 14
 27905                           
 27906                           ;Port.c: 280: UINT8 Value;
 27907                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 27908                           
 27909                           ;incstack = 0
 27910  016066  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 27911  01606A  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 27912  01606E  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 27913  016072  EC38  F0AE         	call	_Port_GetPin	;wreg free
 27914  016076  0100               	movlb	0	; () banked
 27915  016078  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 27916                           
 27917                           ; BSR set to: 0
 27918                           ;Port.c: 282: Value ^= 0x01;
 27919  01607A  0E01               	movlw	1
 27920  01607C  0100               	movlb	0	; () banked
 27921  01607E  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 27922                           
 27923                           ; BSR set to: 0
 27924                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 27925  016080  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 27926  016084  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 27927  016088  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 27928  01608C  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 27929  016090  EC49  F09F         	call	_Port_SetPin	;wreg free
 27930  016094  0012               	return		;funcret
 27931  016096                     __end_of_Port_TogglePin:
 27932                           	opt stack 0
 27933                           tosu	equ	0xFFF
 27934                           tosh	equ	0xFFE
 27935                           tosl	equ	0xFFD
 27936                           pclath	equ	0xFFA
 27937                           tblptru	equ	0xFF8
 27938                           tblptrh	equ	0xFF7
 27939                           tblptrl	equ	0xFF6
 27940                           tablat	equ	0xFF5
 27941                           prodh	equ	0xFF4
 27942                           prodl	equ	0xFF3
 27943                           intcon	equ	0xFF2
 27944                           postinc0	equ	0xFEE
 27945                           wreg	equ	0xFE8
 27946                           indf1	equ	0xFE7
 27947                           postdec1	equ	0xFE5
 27948                           fsr1h	equ	0xFE2
 27949                           fsr1l	equ	0xFE1
 27950                           indf2	equ	0xFDF
 27951                           postinc2	equ	0xFDE
 27952                           postdec2	equ	0xFDD
 27953                           plusw2	equ	0xFDB
 27954                           fsr2h	equ	0xFDA
 27955                           fsr2l	equ	0xFD9
 27956                           status	equ	0xFD8
 27957                           
 27958 ;; *************** function _Port_SetPin *****************
 27959 ;; Defined at:
 27960 ;;		line 247 in file "Library/Port.c"
 27961 ;; Parameters:    Size  Location     Type
 27962 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 27963 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 27964 ;;  pPin            1   17[BANK0 ] enum E6750
 27965 ;;  pValue          1   18[BANK0 ] unsigned char 
 27966 ;; Auto vars:     Size  Location     Type
 27967 ;;  Type            1   19[BANK0 ] enum E6795
 27968 ;; Return value:  Size  Location     Type
 27969 ;;                  1    wreg      void 
 27970 ;; Registers used:
 27971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27972 ;; Tracked objects:
 27973 ;;		On entry : 0/0
 27974 ;;		On exit  : 0/0
 27975 ;;		Unchanged: 0/0
 27976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27980 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27981 ;;Total ram usage:        5 bytes
 27982 ;; Hardware stack levels used:    1
 27983 ;; Hardware stack levels required when called:   10
 27984 ;; This function calls:
 27985 ;;		_Byte_SetBit
 27986 ;;		_Word_GetPair
 27987 ;; This function is called by:
 27988 ;;		_Reset_Low
 27989 ;;		_Reset_High
 27990 ;;		_LED_Set
 27991 ;;		_Port_TogglePin
 27992 ;;		_Motor_Init
 27993 ;;		_Motor_Step
 27994 ;;		_MXK_Init
 27995 ;; This function uses a non-reentrant model
 27996 ;;
 27997                           
 27998                           	psect	text147
 27999  013E92                     __ptext147:
 28000                           	opt stack 0
 28001  013E92                     _Port_SetPin:
 28002                           	opt stack 17
 28003                           
 28004                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28005                           
 28006                           ;incstack = 0
 28007  013E92  0E08               	movlw	8
 28008  013E94  0100               	movlb	0	; () banked
 28009  013E96  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 28010  013E98  0100               	movlb	0	; () banked
 28011  013E9A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 28012  013E9C  0E00               	movlw	0
 28013  013E9E  0100               	movlb	0	; () banked
 28014  013EA0  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28015  013EA2  0100               	movlb	0	; () banked
 28016  013EA4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28017  013EA6  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28018  013EAA  EC3B  F0AF         	call	_Word_GetPair	;wreg free
 28019  013EAE  0100               	movlb	0	; () banked
 28020  013EB0  6F73               	movwf	Port_SetPin@Type& (0+255),b
 28021                           
 28022                           ;Port.c: 250: switch (Type)
 28023  013EB2  D042               	goto	l427
 28024  013EB4                     
 28025                           ; BSR set to: 0
 28026                           ;Port.c: 256: pValue &= 1;
 28027                           
 28028                           ; BSR set to: 0
 28029  013EB4  0E01               	movlw	1
 28030  013EB6  0100               	movlb	0	; () banked
 28031  013EB8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28032                           
 28033                           ; BSR set to: 0
 28034                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28035  013EBA  0100               	movlb	0	; () banked
 28036  013EBC  EE20 F002          	lfsr	2,2
 28037  013EC0  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28038  013EC2  26D9               	addwf	fsr2l,f,c
 28039  013EC4  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28040  013EC6  22DA               	addwfc	fsr2h,f,c
 28041  013EC8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28042  013ECC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28043  013ED0  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28044  013ED4  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28045  013ED8  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 28046                           
 28047                           ;Port.c: 258: break;
 28048  013EDC  0012               	return	
 28049  013EDE                     
 28050                           ;Port.c: 261: pValue &= 1;
 28051  013EDE  0E01               	movlw	1
 28052  013EE0  0100               	movlb	0	; () banked
 28053  013EE2  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28054                           
 28055                           ;Port.c: 262: pValue ^= 1;
 28056  013EE4  0E01               	movlw	1
 28057  013EE6  0100               	movlb	0	; () banked
 28058  013EE8  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28059                           
 28060                           ; BSR set to: 0
 28061                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28062  013EEA  0100               	movlb	0	; () banked
 28063  013EEC  EE20 F002          	lfsr	2,2
 28064  013EF0  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28065  013EF2  26D9               	addwf	fsr2l,f,c
 28066  013EF4  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28067  013EF6  22DA               	addwfc	fsr2h,f,c
 28068  013EF8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28069  013EFC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28070  013F00  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28071  013F04  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28072  013F08  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 28073                           
 28074                           ;Port.c: 264: break;
 28075  013F0C  0012               	return	
 28076  013F0E                     
 28077                           ;Port.c: 266: pValue &= 1;
 28078  013F0E  0E01               	movlw	1
 28079  013F10  0100               	movlb	0	; () banked
 28080  013F12  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28081                           
 28082                           ; BSR set to: 0
 28083                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28084  013F14  0100               	movlb	0	; () banked
 28085  013F16  EE20 F004          	lfsr	2,4
 28086  013F1A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28087  013F1C  26D9               	addwf	fsr2l,f,c
 28088  013F1E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28089  013F20  22DA               	addwfc	fsr2h,f,c
 28090  013F22  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28091  013F26  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28092  013F2A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28093  013F2E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28094  013F32  EC7B  F0AB         	call	_Byte_SetBit	;wreg free
 28095                           
 28096                           ;Port.c: 269: }
 28097                           
 28098                           ;Port.c: 268: break;
 28099  013F36  0012               	return	
 28100  013F38                     l427:
 28101  013F38  0100               	movlb	0	; () banked
 28102  013F3A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 28103                           
 28104                           ; Switch size 1, requested type "space"
 28105                           ; Number of cases is 4, Range of values is 0 to 3
 28106                           ; switch strategies available:
 28107                           ; Name         Instructions Cycles
 28108                           ; simple_byte           13     7 (average)
 28109                           ;	Chosen strategy is simple_byte
 28110  013F3C  0A00               	xorlw	0	; case 0
 28111  013F3E  B4D8               	btfsc	status,2,c
 28112  013F40  0012               	return	
 28113  013F42  0A01               	xorlw	1	; case 1
 28114  013F44  B4D8               	btfsc	status,2,c
 28115  013F46  D7B6               	goto	l430
 28116  013F48  0A03               	xorlw	3	; case 2
 28117  013F4A  B4D8               	btfsc	status,2,c
 28118  013F4C  D7C8               	goto	l432
 28119  013F4E  0A01               	xorlw	1	; case 3
 28120  013F50  A4D8               	btfss	status,2,c
 28121  013F52  0012               	return	
 28122  013F54  D7DC               	goto	l433
 28123  013F56                     __end_of_Port_SetPin:
 28124                           	opt stack 0
 28125                           tosu	equ	0xFFF
 28126                           tosh	equ	0xFFE
 28127                           tosl	equ	0xFFD
 28128                           pclath	equ	0xFFA
 28129                           tblptru	equ	0xFF8
 28130                           tblptrh	equ	0xFF7
 28131                           tblptrl	equ	0xFF6
 28132                           tablat	equ	0xFF5
 28133                           prodh	equ	0xFF4
 28134                           prodl	equ	0xFF3
 28135                           intcon	equ	0xFF2
 28136                           postinc0	equ	0xFEE
 28137                           wreg	equ	0xFE8
 28138                           indf1	equ	0xFE7
 28139                           postdec1	equ	0xFE5
 28140                           fsr1h	equ	0xFE2
 28141                           fsr1l	equ	0xFE1
 28142                           indf2	equ	0xFDF
 28143                           postinc2	equ	0xFDE
 28144                           postdec2	equ	0xFDD
 28145                           plusw2	equ	0xFDB
 28146                           fsr2h	equ	0xFDA
 28147                           fsr2l	equ	0xFD9
 28148                           status	equ	0xFD8
 28149                           
 28150 ;; *************** function _Word_GetPair *****************
 28151 ;; Defined at:
 28152 ;;		line 156 in file "Library/Types.c"
 28153 ;; Parameters:    Size  Location     Type
 28154 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28155 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28156 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28157 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28158 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28159 ;;  pPair           1   14[BANK0 ] unsigned char 
 28160 ;; Auto vars:     Size  Location     Type
 28161 ;;		None
 28162 ;; Return value:  Size  Location     Type
 28163 ;;                  1    wreg      unsigned char 
 28164 ;; Registers used:
 28165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28166 ;; Tracked objects:
 28167 ;;		On entry : 0/0
 28168 ;;		On exit  : 0/0
 28169 ;;		Unchanged: 0/0
 28170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28171 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28175 ;;Total ram usage:        3 bytes
 28176 ;; Hardware stack levels used:    1
 28177 ;; Hardware stack levels required when called:    9
 28178 ;; This function calls:
 28179 ;;		_Byte_GetPair
 28180 ;; This function is called by:
 28181 ;;		_Port_Init
 28182 ;;		_Port_SetPin
 28183 ;;		_Port_Set
 28184 ;;		_PortProperty_Valid
 28185 ;;		_Port_SetPair
 28186 ;;		_Port_SetQuad
 28187 ;; This function uses a non-reentrant model
 28188 ;;
 28189                           
 28190                           	psect	text148
 28191  015E76                     __ptext148:
 28192                           	opt stack 0
 28193  015E76                     _Word_GetPair:
 28194                           	opt stack 17
 28195                           
 28196                           ;Types.c: 158: if (pPair >= 4)
 28197                           
 28198                           ;incstack = 0
 28199  015E76  0E03               	movlw	3
 28200  015E78  0100               	movlb	0	; () banked
 28201  015E7A  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28202  015E7C  D012               	goto	l781
 28203                           
 28204                           ; BSR set to: 0
 28205                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28206  015E7E  0E01               	movlw	1
 28207  015E80  0100               	movlb	0	; () banked
 28208  015E82  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 28209  015E84  0100               	movlb	0	; () banked
 28210  015E86  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 28211  015E88  0E00               	movlw	0
 28212  015E8A  0100               	movlb	0	; () banked
 28213  015E8C  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28214  015E8E  0100               	movlb	0	; () banked
 28215  015E90  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28216  015E92  0100               	movlb	0	; () banked
 28217  015E94  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 28218  015E96  0FFC               	addlw	252
 28219  015E98  0100               	movlb	0	; () banked
 28220  015E9A  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 28221  015E9C  EC8E  F0B1         	call	_Byte_GetPair	;wreg free
 28222  015EA0  0012               	return	
 28223  015EA2                     l781:
 28224                           
 28225                           ;Types.c: 160: else
 28226                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28227  015EA2  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28228  015EA6  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28229  015EAA  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28230  015EAE  EC8E  F0B1         	call	_Byte_GetPair	;wreg free
 28231  015EB2  0012               	return	
 28232  015EB4                     __end_of_Word_GetPair:
 28233                           	opt stack 0
 28234                           tosu	equ	0xFFF
 28235                           tosh	equ	0xFFE
 28236                           tosl	equ	0xFFD
 28237                           pclath	equ	0xFFA
 28238                           tblptru	equ	0xFF8
 28239                           tblptrh	equ	0xFF7
 28240                           tblptrl	equ	0xFF6
 28241                           tablat	equ	0xFF5
 28242                           prodh	equ	0xFF4
 28243                           prodl	equ	0xFF3
 28244                           intcon	equ	0xFF2
 28245                           postinc0	equ	0xFEE
 28246                           wreg	equ	0xFE8
 28247                           indf1	equ	0xFE7
 28248                           postdec1	equ	0xFE5
 28249                           fsr1h	equ	0xFE2
 28250                           fsr1l	equ	0xFE1
 28251                           indf2	equ	0xFDF
 28252                           postinc2	equ	0xFDE
 28253                           postdec2	equ	0xFDD
 28254                           plusw2	equ	0xFDB
 28255                           fsr2h	equ	0xFDA
 28256                           fsr2l	equ	0xFD9
 28257                           status	equ	0xFD8
 28258                           
 28259 ;; *************** function _Byte_GetPair *****************
 28260 ;; Defined at:
 28261 ;;		line 87 in file "Library/Types.c"
 28262 ;; Parameters:    Size  Location     Type
 28263 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28264 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28265 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28266 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28267 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28268 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28269 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28270 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28271 ;;		 -> NULL(0), 
 28272 ;;  pPair           1   11[BANK0 ] unsigned char 
 28273 ;; Auto vars:     Size  Location     Type
 28274 ;;		None
 28275 ;; Return value:  Size  Location     Type
 28276 ;;                  1    wreg      unsigned char 
 28277 ;; Registers used:
 28278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28279 ;; Tracked objects:
 28280 ;;		On entry : 0/0
 28281 ;;		On exit  : 0/0
 28282 ;;		Unchanged: 0/0
 28283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28284 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28287 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28288 ;;Total ram usage:        3 bytes
 28289 ;; Hardware stack levels used:    1
 28290 ;; Hardware stack levels required when called:    8
 28291 ;; This function calls:
 28292 ;;		_Byte_GetZone
 28293 ;; This function is called by:
 28294 ;;		_Word_GetPair
 28295 ;; This function uses a non-reentrant model
 28296 ;;
 28297                           
 28298                           	psect	text149
 28299  01631C                     __ptext149:
 28300                           	opt stack 0
 28301  01631C                     _Byte_GetPair:
 28302                           	opt stack 17
 28303                           
 28304                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28305                           
 28306                           ;incstack = 0
 28307  01631C  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28308  016320  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28309  016324  0E04               	movlw	4
 28310  016326  0100               	movlb	0	; () banked
 28311  016328  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 28312  01632A  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28313  01632E  0E02               	movlw	2
 28314  016330  0100               	movlb	0	; () banked
 28315  016332  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28316  016334  EC7E  F0A5         	call	_Byte_GetZone	;wreg free
 28317  016338  0012               	return	
 28318  01633A                     __end_of_Byte_GetPair:
 28319                           	opt stack 0
 28320                           tosu	equ	0xFFF
 28321                           tosh	equ	0xFFE
 28322                           tosl	equ	0xFFD
 28323                           pclath	equ	0xFFA
 28324                           tblptru	equ	0xFF8
 28325                           tblptrh	equ	0xFF7
 28326                           tblptrl	equ	0xFF6
 28327                           tablat	equ	0xFF5
 28328                           prodh	equ	0xFF4
 28329                           prodl	equ	0xFF3
 28330                           intcon	equ	0xFF2
 28331                           postinc0	equ	0xFEE
 28332                           wreg	equ	0xFE8
 28333                           indf1	equ	0xFE7
 28334                           postdec1	equ	0xFE5
 28335                           fsr1h	equ	0xFE2
 28336                           fsr1l	equ	0xFE1
 28337                           indf2	equ	0xFDF
 28338                           postinc2	equ	0xFDE
 28339                           postdec2	equ	0xFDD
 28340                           plusw2	equ	0xFDB
 28341                           fsr2h	equ	0xFDA
 28342                           fsr2l	equ	0xFD9
 28343                           status	equ	0xFD8
 28344                           
 28345 ;; *************** function _Byte_GetZone *****************
 28346 ;; Defined at:
 28347 ;;		line 64 in file "Library/Types.c"
 28348 ;; Parameters:    Size  Location     Type
 28349 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28350 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28351 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28352 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28353 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28354 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28355 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28356 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28357 ;;		 -> NULL(0), 
 28358 ;;  pMax            1    2[BANK0 ] unsigned char 
 28359 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28360 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28361 ;; Auto vars:     Size  Location     Type
 28362 ;;  Output          1    8[BANK0 ] unsigned char 
 28363 ;;  Offset          1    7[BANK0 ] unsigned char 
 28364 ;;  MASK            1    6[BANK0 ] unsigned char 
 28365 ;; Return value:  Size  Location     Type
 28366 ;;                  1    wreg      unsigned char 
 28367 ;; Registers used:
 28368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28369 ;; Tracked objects:
 28370 ;;		On entry : 0/0
 28371 ;;		On exit  : 0/0
 28372 ;;		Unchanged: 0/0
 28373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28374 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28375 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28377 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28378 ;;Total ram usage:        9 bytes
 28379 ;; Hardware stack levels used:    1
 28380 ;; Hardware stack levels required when called:    7
 28381 ;; This function calls:
 28382 ;;		Nothing
 28383 ;; This function is called by:
 28384 ;;		_Byte_GetPair
 28385 ;;		_Byte_GetTriple
 28386 ;;		_Byte_GetQuad
 28387 ;; This function uses a non-reentrant model
 28388 ;;
 28389                           
 28390                           	psect	text150
 28391  014AFC                     __ptext150:
 28392                           	opt stack 0
 28393  014AFC                     _Byte_GetZone:
 28394                           	opt stack 17
 28395                           
 28396                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28397                           
 28398                           ;incstack = 0
 28399  014AFC  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28400  014B00  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28401  014B04  0E00               	movlw	low (__mediumconst shr (0+16))
 28402  014B06  6EF8               	movwf	tblptru,c
 28403  014B08  0E0F               	movlw	(high __ramtop+-1)
 28404  014B0A  64F7               	cpfsgt	tblptrh,c
 28405  014B0C  D003               	bra	u8627
 28406  014B0E  0008               	tblrd		*
 28407  014B10  50F5               	movf	tablat,w,c
 28408  014B12  D005               	bra	u8620
 28409  014B14                     u8627:
 28410  014B14  CFF6 FFE9          	movff	tblptrl,fsr0l
 28411  014B18  CFF7 FFEA          	movff	tblptrh,fsr0h
 28412  014B1C  50EF               	movf	indf0,w,c
 28413  014B1E                     u8620:
 28414  014B1E  0100               	movlb	0	; () banked
 28415  014B20  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 28416                           
 28417                           ; BSR set to: 0
 28418                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28419  014B22  0100               	movlb	0	; () banked
 28420  014B24  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28421  014B26  0D01               	mullw	1
 28422  014B28  0E63               	movlw	low _MASKS
 28423  014B2A  24F3               	addwf	prodl,w,c
 28424  014B2C  6EF6               	movwf	tblptrl,c
 28425  014B2E  0EFD               	movlw	high _MASKS
 28426  014B30  20F4               	addwfc	prodh,w,c
 28427  014B32  6EF7               	movwf	tblptrh,c
 28428  014B34                     	if	1	;There are 3 active tblptr bytes
 28429  014B34  6AF8               	clrf	tblptru,c
 28430  014B36  0E00               	movlw	low (__mediumconst shr (0+16))
 28431  014B38  22F8               	addwfc	tblptru,f,c
 28432  014B3A                     	endif
 28433  014B3A  0008               	tblrd		*
 28434  014B3C  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 28435                           
 28436                           ; BSR set to: 0
 28437                           ;Types.c: 68: UINT8 Offset = 0;
 28438  014B40  0E00               	movlw	0
 28439  014B42  0100               	movlb	0	; () banked
 28440  014B44  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 28441                           
 28442                           ;Types.c: 70: while (pChunk >= pMax)
 28443  014B46  D006               	goto	l732
 28444  014B48                     
 28445                           ; BSR set to: 0
 28446                           ;Types.c: 71: {
 28447                           ;Types.c: 72: pChunk -= pMax;
 28448                           
 28449                           ; BSR set to: 0
 28450  014B48  0100               	movlb	0	; () banked
 28451  014B4A  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 28452  014B4C  0100               	movlb	0	; () banked
 28453  014B4E  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28454                           
 28455                           ; BSR set to: 0
 28456                           ;Types.c: 73: Offset += 1;
 28457  014B50  0100               	movlb	0	; () banked
 28458  014B52  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 28459  014B54                     l732:
 28460                           
 28461                           ; BSR set to: 0
 28462                           
 28463                           ; BSR set to: 0
 28464  014B54  0100               	movlb	0	; () banked
 28465  014B56  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 28466  014B58  0100               	movlb	0	; () banked
 28467  014B5A  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28468  014B5C  B0D8               	btfsc	status,0,c
 28469  014B5E  D7F4               	goto	l733
 28470                           
 28471                           ; BSR set to: 0
 28472                           ;Types.c: 74: }
 28473                           ;Types.c: 75: pChunk *= pChunkSize;
 28474                           
 28475                           ; BSR set to: 0
 28476  014B60  0100               	movlb	0	; () banked
 28477  014B62  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28478  014B64  0100               	movlb	0	; () banked
 28479  014B66  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28480  014B68  50F3               	movf	prodl,w,c
 28481  014B6A  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 28482                           
 28483                           ; BSR set to: 0
 28484                           ;Types.c: 76: pChunk += Offset;
 28485  014B6C  0100               	movlb	0	; () banked
 28486  014B6E  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 28487  014B70  0100               	movlb	0	; () banked
 28488  014B72  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28489                           
 28490                           ; BSR set to: 0
 28491                           ;Types.c: 78: Output >>= pChunk;
 28492  014B74  0100               	movlb	0	; () banked
 28493  014B76  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28494  014B78  0100               	movlb	0	; () banked
 28495  014B7A  6F65               	movwf	??_Byte_GetZone& (0+255),b
 28496  014B7C  D003               	goto	u8640
 28497  014B7E                     u8645:
 28498  014B7E  0100               	movlb	0	; () banked
 28499  014B80  90D8               	bcf	status,0,c
 28500  014B82  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28501  014B84                     u8640:
 28502  014B84  0100               	movlb	0	; () banked
 28503  014B86  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 28504  014B88  D7FA               	goto	u8645
 28505                           
 28506                           ;Types.c: 79: Output &= MASK;
 28507  014B8A  0100               	movlb	0	; () banked
 28508  014B8C  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 28509  014B8E  0100               	movlb	0	; () banked
 28510  014B90  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 28511                           
 28512                           ; BSR set to: 0
 28513                           ;Types.c: 80: return Output;
 28514  014B92  0100               	movlb	0	; () banked
 28515  014B94  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 28516  014B96  0012               	return	
 28517  014B98                     __end_of_Byte_GetZone:
 28518                           	opt stack 0
 28519                           tosu	equ	0xFFF
 28520                           tosh	equ	0xFFE
 28521                           tosl	equ	0xFFD
 28522                           pclath	equ	0xFFA
 28523                           tblptru	equ	0xFF8
 28524                           tblptrh	equ	0xFF7
 28525                           tblptrl	equ	0xFF6
 28526                           tablat	equ	0xFF5
 28527                           prodh	equ	0xFF4
 28528                           prodl	equ	0xFF3
 28529                           intcon	equ	0xFF2
 28530                           indf0	equ	0xFEF
 28531                           postinc0	equ	0xFEE
 28532                           fsr0h	equ	0xFEA
 28533                           fsr0l	equ	0xFE9
 28534                           wreg	equ	0xFE8
 28535                           indf1	equ	0xFE7
 28536                           postdec1	equ	0xFE5
 28537                           fsr1h	equ	0xFE2
 28538                           fsr1l	equ	0xFE1
 28539                           indf2	equ	0xFDF
 28540                           postinc2	equ	0xFDE
 28541                           postdec2	equ	0xFDD
 28542                           plusw2	equ	0xFDB
 28543                           fsr2h	equ	0xFDA
 28544                           fsr2l	equ	0xFD9
 28545                           status	equ	0xFD8
 28546                           
 28547 ;; *************** function _Byte_SetBit *****************
 28548 ;; Defined at:
 28549 ;;		line 32 in file "Library/Types.c"
 28550 ;; Parameters:    Size  Location     Type
 28551 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28552 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28553 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28554 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28555 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28556 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28557 ;;		 -> NULL(0), 
 28558 ;;  pBit            1    2[BANK0 ] unsigned char 
 28559 ;;  pValue          1    3[BANK0 ] unsigned char 
 28560 ;; Auto vars:     Size  Location     Type
 28561 ;;		None
 28562 ;; Return value:  Size  Location     Type
 28563 ;;                  1    wreg      void 
 28564 ;; Registers used:
 28565 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28566 ;; Tracked objects:
 28567 ;;		On entry : 0/0
 28568 ;;		On exit  : 0/0
 28569 ;;		Unchanged: 0/0
 28570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28571 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28573 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28574 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28575 ;;Total ram usage:        7 bytes
 28576 ;; Hardware stack levels used:    1
 28577 ;; Hardware stack levels required when called:    7
 28578 ;; This function calls:
 28579 ;;		Nothing
 28580 ;; This function is called by:
 28581 ;;		_Port_SetPinType
 28582 ;;		_Port_SetPin
 28583 ;;		_SPI_Init
 28584 ;;		_SPI_MinSpeed
 28585 ;;		_SPI_MaxSpeed
 28586 ;;		_Word_SetBit
 28587 ;;		_I2C_Init
 28588 ;; This function uses a non-reentrant model
 28589 ;;
 28590                           
 28591                           	psect	text151
 28592  0156F6                     __ptext151:
 28593                           	opt stack 0
 28594  0156F6                     _Byte_SetBit:
 28595                           	opt stack 19
 28596                           
 28597                           ;Types.c: 34: pValue &= 1;
 28598                           
 28599                           ; BSR set to: 0
 28600                           ;incstack = 0
 28601  0156F6  0E01               	movlw	1
 28602  0156F8  0100               	movlb	0	; () banked
 28603  0156FA  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 28604                           
 28605                           ; BSR set to: 0
 28606                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28607  0156FC  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28608  015700  0E01               	movlw	1
 28609  015702  0100               	movlb	0	; () banked
 28610  015704  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 28611  015706  0100               	movlb	0	; () banked
 28612  015708  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 28613  01570A  D003               	goto	u8694
 28614  01570C                     u8695:
 28615  01570C  0100               	movlb	0	; () banked
 28616  01570E  90D8               	bcf	status,0,c
 28617  015710  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28618  015712                     u8694:
 28619  015712  0100               	movlb	0	; () banked
 28620  015714  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 28621  015716  D7FA               	goto	u8695
 28622  015718  0100               	movlb	0	; () banked
 28623  01571A  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28624  01571C  0AFF               	xorlw	255
 28625  01571E  0100               	movlb	0	; () banked
 28626  015720  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 28627  015722  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28628  015726  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28629  01572A  0100               	movlb	0	; () banked
 28630  01572C  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 28631  01572E  16DF               	andwf	indf2,f,c
 28632                           
 28633                           ; BSR set to: 0
 28634                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28635  015730  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28636  015734  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 28637  015738  0100               	movlb	0	; () banked
 28638  01573A  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 28639  01573C  D003               	goto	u8704
 28640  01573E                     u8705:
 28641  01573E  0100               	movlb	0	; () banked
 28642  015740  90D8               	bcf	status,0,c
 28643  015742  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28644  015744                     u8704:
 28645  015744  0100               	movlb	0	; () banked
 28646  015746  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 28647  015748  D7FA               	goto	u8705
 28648  01574A  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28649  01574E  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28650  015752  0100               	movlb	0	; () banked
 28651  015754  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28652  015756  12DF               	iorwf	indf2,f,c
 28653                           
 28654                           ; BSR set to: 0
 28655  015758  0012               	return		;funcret
 28656  01575A                     __end_of_Byte_SetBit:
 28657                           	opt stack 0
 28658                           tosu	equ	0xFFF
 28659                           tosh	equ	0xFFE
 28660                           tosl	equ	0xFFD
 28661                           pclath	equ	0xFFA
 28662                           tblptru	equ	0xFF8
 28663                           tblptrh	equ	0xFF7
 28664                           tblptrl	equ	0xFF6
 28665                           tablat	equ	0xFF5
 28666                           prodh	equ	0xFF4
 28667                           prodl	equ	0xFF3
 28668                           intcon	equ	0xFF2
 28669                           indf0	equ	0xFEF
 28670                           postinc0	equ	0xFEE
 28671                           fsr0h	equ	0xFEA
 28672                           fsr0l	equ	0xFE9
 28673                           wreg	equ	0xFE8
 28674                           indf1	equ	0xFE7
 28675                           postdec1	equ	0xFE5
 28676                           fsr1h	equ	0xFE2
 28677                           fsr1l	equ	0xFE1
 28678                           indf2	equ	0xFDF
 28679                           postinc2	equ	0xFDE
 28680                           postdec2	equ	0xFDD
 28681                           plusw2	equ	0xFDB
 28682                           fsr2h	equ	0xFDA
 28683                           fsr2l	equ	0xFD9
 28684                           status	equ	0xFD8
 28685                           
 28686 ;; *************** function _Port_GetPin *****************
 28687 ;; Defined at:
 28688 ;;		line 271 in file "Library/Port.c"
 28689 ;; Parameters:    Size  Location     Type
 28690 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28691 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28692 ;;  pPin            1    2[BANK0 ] enum E6750
 28693 ;; Auto vars:     Size  Location     Type
 28694 ;;  Output          1    5[BANK0 ] unsigned char 
 28695 ;; Return value:  Size  Location     Type
 28696 ;;                  1    wreg      unsigned char 
 28697 ;; Registers used:
 28698 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28699 ;; Tracked objects:
 28700 ;;		On entry : 0/0
 28701 ;;		On exit  : 0/0
 28702 ;;		Unchanged: 0/0
 28703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28704 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28707 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28708 ;;Total ram usage:        6 bytes
 28709 ;; Hardware stack levels used:    1
 28710 ;; Hardware stack levels required when called:    7
 28711 ;; This function calls:
 28712 ;;		Nothing
 28713 ;; This function is called by:
 28714 ;;		_Port_TogglePin
 28715 ;;		_HMI_LeftSwitch
 28716 ;;		_HMI_RightSwitch
 28717 ;;		_HMI_UpSwitch
 28718 ;;		_HMI_DownSwitch
 28719 ;;		_MXK_TestButton
 28720 ;; This function uses a non-reentrant model
 28721 ;;
 28722                           
 28723                           	psect	text152
 28724  015C70                     __ptext152:
 28725                           	opt stack 0
 28726  015C70                     _Port_GetPin:
 28727                           	opt stack 19
 28728                           
 28729                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28730                           
 28731                           ; BSR set to: 0
 28732                           ;incstack = 0
 28733  015C70  0100               	movlb	0	; () banked
 28734  015C72  EE20 F006          	lfsr	2,6
 28735  015C76  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 28736  015C78  26D9               	addwf	fsr2l,f,c
 28737  015C7A  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28738  015C7C  22DA               	addwfc	fsr2h,f,c
 28739  015C7E  CFDE F063          	movff	postinc2,??_Port_GetPin
 28740  015C82  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 28741  015C86  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 28742  015C8A  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28743  015C8E  50DF               	movf	indf2,w,c
 28744  015C90  0100               	movlb	0	; () banked
 28745  015C92  6F65               	movwf	Port_GetPin@Output& (0+255),b
 28746                           
 28747                           ; BSR set to: 0
 28748                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28749  015C94  0100               	movlb	0	; () banked
 28750  015C96  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 28751  015C98  0100               	movlb	0	; () banked
 28752  015C9A  6F63               	movwf	??_Port_GetPin& (0+255),b
 28753  015C9C  D003               	goto	u8750
 28754  015C9E                     u8755:
 28755  015C9E  0100               	movlb	0	; () banked
 28756  015CA0  90D8               	bcf	status,0,c
 28757  015CA2  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 28758  015CA4                     u8750:
 28759  015CA4  0100               	movlb	0	; () banked
 28760  015CA6  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 28761  015CA8  D7FA               	goto	u8755
 28762                           
 28763                           ;Port.c: 275: Output &= 1;
 28764  015CAA  0E01               	movlw	1
 28765  015CAC  0100               	movlb	0	; () banked
 28766  015CAE  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 28767                           
 28768                           ; BSR set to: 0
 28769                           ;Port.c: 276: return Output;
 28770  015CB0  0100               	movlb	0	; () banked
 28771  015CB2  5165               	movf	Port_GetPin@Output& (0+255),w,b
 28772  015CB4  0012               	return	
 28773  015CB6                     __end_of_Port_GetPin:
 28774                           	opt stack 0
 28775                           tosu	equ	0xFFF
 28776                           tosh	equ	0xFFE
 28777                           tosl	equ	0xFFD
 28778                           pclath	equ	0xFFA
 28779                           tblptru	equ	0xFF8
 28780                           tblptrh	equ	0xFF7
 28781                           tblptrl	equ	0xFF6
 28782                           tablat	equ	0xFF5
 28783                           prodh	equ	0xFF4
 28784                           prodl	equ	0xFF3
 28785                           intcon	equ	0xFF2
 28786                           indf0	equ	0xFEF
 28787                           postinc0	equ	0xFEE
 28788                           fsr0h	equ	0xFEA
 28789                           fsr0l	equ	0xFE9
 28790                           wreg	equ	0xFE8
 28791                           indf1	equ	0xFE7
 28792                           postdec1	equ	0xFE5
 28793                           fsr1h	equ	0xFE2
 28794                           fsr1l	equ	0xFE1
 28795                           indf2	equ	0xFDF
 28796                           postinc2	equ	0xFDE
 28797                           postdec2	equ	0xFDD
 28798                           plusw2	equ	0xFDB
 28799                           fsr2h	equ	0xFDA
 28800                           fsr2l	equ	0xFD9
 28801                           status	equ	0xFD8
 28802                           
 28803 ;; *************** function _HMI_SetBar *****************
 28804 ;; Defined at:
 28805 ;;		line 205 in file "HMI.c"
 28806 ;; Parameters:    Size  Location     Type
 28807 ;;  pValue          1    wreg     unsigned char 
 28808 ;; Auto vars:     Size  Location     Type
 28809 ;;  pValue          1    0[BANK0 ] unsigned char 
 28810 ;; Return value:  Size  Location     Type
 28811 ;;                  1    wreg      void 
 28812 ;; Registers used:
 28813 ;;		wreg
 28814 ;; Tracked objects:
 28815 ;;		On entry : 0/0
 28816 ;;		On exit  : 0/0
 28817 ;;		Unchanged: 0/0
 28818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28823 ;;Total ram usage:        1 bytes
 28824 ;; Hardware stack levels used:    1
 28825 ;; Hardware stack levels required when called:    7
 28826 ;; This function calls:
 28827 ;;		Nothing
 28828 ;; This function is called by:
 28829 ;;		_Event_DIPSwitch
 28830 ;;		_Event_HMI_DIPSwitch
 28831 ;;		_Event_HMI_LeftButton
 28832 ;;		_Event_HMI_RightButton
 28833 ;; This function uses a non-reentrant model
 28834 ;;
 28835                           
 28836                           	psect	text153
 28837  01657A                     __ptext153:
 28838                           	opt stack 0
 28839  01657A                     _HMI_SetBar:
 28840                           	opt stack 19
 28841                           
 28842                           ; BSR set to: 0
 28843                           ;incstack = 0
 28844                           ;HMI_SetBar@pValue stored from wreg
 28845  01657A  0100               	movlb	0	; () banked
 28846  01657C  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 28847                           
 28848                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 28849  01657E  C060  F330         	movff	HMI_SetBar@pValue,_HMIBoard+7
 28850  016582  0012               	return		;funcret
 28851  016584                     __end_of_HMI_SetBar:
 28852                           	opt stack 0
 28853                           tosu	equ	0xFFF
 28854                           tosh	equ	0xFFE
 28855                           tosl	equ	0xFFD
 28856                           pclath	equ	0xFFA
 28857                           tblptru	equ	0xFF8
 28858                           tblptrh	equ	0xFF7
 28859                           tblptrl	equ	0xFF6
 28860                           tablat	equ	0xFF5
 28861                           prodh	equ	0xFF4
 28862                           prodl	equ	0xFF3
 28863                           intcon	equ	0xFF2
 28864                           indf0	equ	0xFEF
 28865                           postinc0	equ	0xFEE
 28866                           fsr0h	equ	0xFEA
 28867                           fsr0l	equ	0xFE9
 28868                           wreg	equ	0xFE8
 28869                           indf1	equ	0xFE7
 28870                           postdec1	equ	0xFE5
 28871                           fsr1h	equ	0xFE2
 28872                           fsr1l	equ	0xFE1
 28873                           indf2	equ	0xFDF
 28874                           postinc2	equ	0xFDE
 28875                           postdec2	equ	0xFDD
 28876                           plusw2	equ	0xFDB
 28877                           fsr2h	equ	0xFDA
 28878                           fsr2l	equ	0xFD9
 28879                           status	equ	0xFD8
 28880                           
 28881 ;; *************** function _HMI_GetBar *****************
 28882 ;; Defined at:
 28883 ;;		line 209 in file "HMI.c"
 28884 ;; Parameters:    Size  Location     Type
 28885 ;;		None
 28886 ;; Auto vars:     Size  Location     Type
 28887 ;;		None
 28888 ;; Return value:  Size  Location     Type
 28889 ;;                  1    wreg      unsigned char 
 28890 ;; Registers used:
 28891 ;;		wreg, status,2
 28892 ;; Tracked objects:
 28893 ;;		On entry : 0/0
 28894 ;;		On exit  : 0/0
 28895 ;;		Unchanged: 0/0
 28896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28901 ;;Total ram usage:        0 bytes
 28902 ;; Hardware stack levels used:    1
 28903 ;; Hardware stack levels required when called:    7
 28904 ;; This function calls:
 28905 ;;		Nothing
 28906 ;; This function is called by:
 28907 ;;		_Event_DIPSwitch
 28908 ;;		_Event_HMI_DIPSwitch
 28909 ;; This function uses a non-reentrant model
 28910 ;;
 28911                           
 28912                           	psect	text154
 28913  0165B6                     __ptext154:
 28914                           	opt stack 0
 28915  0165B6                     _HMI_GetBar:
 28916                           	opt stack 19
 28917                           
 28918                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 28919                           
 28920                           ;incstack = 0
 28921  0165B6  0103               	movlb	3	; () banked
 28922  0165B8  5130               	movf	(_HMIBoard+7)& (0+255),w,b
 28923  0165BA  0012               	return	
 28924  0165BC                     __end_of_HMI_GetBar:
 28925                           	opt stack 0
 28926                           tosu	equ	0xFFF
 28927                           tosh	equ	0xFFE
 28928                           tosl	equ	0xFFD
 28929                           pclath	equ	0xFFA
 28930                           tblptru	equ	0xFF8
 28931                           tblptrh	equ	0xFF7
 28932                           tblptrl	equ	0xFF6
 28933                           tablat	equ	0xFF5
 28934                           prodh	equ	0xFF4
 28935                           prodl	equ	0xFF3
 28936                           intcon	equ	0xFF2
 28937                           indf0	equ	0xFEF
 28938                           postinc0	equ	0xFEE
 28939                           fsr0h	equ	0xFEA
 28940                           fsr0l	equ	0xFE9
 28941                           wreg	equ	0xFE8
 28942                           indf1	equ	0xFE7
 28943                           postdec1	equ	0xFE5
 28944                           fsr1h	equ	0xFE2
 28945                           fsr1l	equ	0xFE1
 28946                           indf2	equ	0xFDF
 28947                           postinc2	equ	0xFDE
 28948                           postdec2	equ	0xFDD
 28949                           plusw2	equ	0xFDB
 28950                           fsr2h	equ	0xFDA
 28951                           fsr2l	equ	0xFD9
 28952                           status	equ	0xFD8
 28953                           
 28954 ;; *************** function _ISR_Function *****************
 28955 ;; Defined at:
 28956 ;;		line 38 in file "Library/ISR.c"
 28957 ;; Parameters:    Size  Location     Type
 28958 ;;		None
 28959 ;; Auto vars:     Size  Location     Type
 28960 ;;		None
 28961 ;; Return value:  Size  Location     Type
 28962 ;;                  1    wreg      void 
 28963 ;; Registers used:
 28964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28965 ;; Tracked objects:
 28966 ;;		On entry : 0/0
 28967 ;;		On exit  : 0/0
 28968 ;;		Unchanged: 0/0
 28969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28972 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28973 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28974 ;;Total ram usage:       18 bytes
 28975 ;; Hardware stack levels used:    1
 28976 ;; Hardware stack levels required when called:    6
 28977 ;; This function calls:
 28978 ;;		_Timer0_ISR
 28979 ;; This function is called by:
 28980 ;;		Interrupt level 2
 28981 ;; This function uses a non-reentrant model
 28982 ;;
 28983                           
 28984                           	psect	intcode
 28985  001408                     __pintcode:
 28986                           	opt stack 0
 28987  001408                     _ISR_Function:
 28988                           	opt stack 13
 28989                           
 28990                           ; BSR set to: 3
 28991                           ;incstack = 0
 28992  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28993  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28994  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28995  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28996  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28997  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28998  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28999  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29000  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29001  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29002  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29003  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29004  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29005  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29006  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29007  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29008  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29009  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29010  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29011                           
 29012                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29013  001452  92F2               	bcf	intcon,1,c	;volatile
 29014                           
 29015                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29016  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29017  001456  AAF2               	btfss	intcon,5,c	;volatile
 29018  001458  D002               	goto	i2l1590
 29019                           
 29020                           ;ISR.c: 68: Timer0_ISR();
 29021  00145A  EC7A  F0B0         	call	_Timer0_ISR	;wreg free
 29022  00145E                     i2l1590:
 29023  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29024  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29025  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29026  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29027  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29028  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29029  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29030  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29031  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29032  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29033  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29034  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29035  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29036  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29037  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29038  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29039  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29040  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29041  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29042  0014A8  0011               	retfie		f
 29043  0014AA                     __end_of_ISR_Function:
 29044                           	opt stack 0
 29045                           tosu	equ	0xFFF
 29046                           tosh	equ	0xFFE
 29047                           tosl	equ	0xFFD
 29048                           pclatu	equ	0xFFB
 29049                           pclath	equ	0xFFA
 29050                           tblptru	equ	0xFF8
 29051                           tblptrh	equ	0xFF7
 29052                           tblptrl	equ	0xFF6
 29053                           tablat	equ	0xFF5
 29054                           prodh	equ	0xFF4
 29055                           prodl	equ	0xFF3
 29056                           intcon	equ	0xFF2
 29057                           indf0	equ	0xFEF
 29058                           postinc0	equ	0xFEE
 29059                           fsr0h	equ	0xFEA
 29060                           fsr0l	equ	0xFE9
 29061                           wreg	equ	0xFE8
 29062                           indf1	equ	0xFE7
 29063                           postdec1	equ	0xFE5
 29064                           fsr1h	equ	0xFE2
 29065                           fsr1l	equ	0xFE1
 29066                           indf2	equ	0xFDF
 29067                           postinc2	equ	0xFDE
 29068                           postdec2	equ	0xFDD
 29069                           plusw2	equ	0xFDB
 29070                           fsr2h	equ	0xFDA
 29071                           fsr2l	equ	0xFD9
 29072                           status	equ	0xFD8
 29073                           
 29074 ;; *************** function _Timer0_ISR *****************
 29075 ;; Defined at:
 29076 ;;		line 94 in file "Library/Timer0.c"
 29077 ;; Parameters:    Size  Location     Type
 29078 ;;		None
 29079 ;; Auto vars:     Size  Location     Type
 29080 ;;		None
 29081 ;; Return value:  Size  Location     Type
 29082 ;;                  1    wreg      void 
 29083 ;; Registers used:
 29084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29085 ;; Tracked objects:
 29086 ;;		On entry : 0/0
 29087 ;;		On exit  : 0/0
 29088 ;;		Unchanged: 0/0
 29089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29094 ;;Total ram usage:        0 bytes
 29095 ;; Hardware stack levels used:    1
 29096 ;; Hardware stack levels required when called:    5
 29097 ;; This function calls:
 29098 ;;		Absolute function
 29099 ;;		i2_Motor_Step
 29100 ;;		i2_Timer0_Stop
 29101 ;; This function is called by:
 29102 ;;		_ISR_Function
 29103 ;; This function uses a non-reentrant model
 29104 ;;
 29105                           
 29106                           	psect	text156
 29107  0160F4                     __ptext156:
 29108                           	opt stack 0
 29109  0160F4                     _Timer0_ISR:
 29110                           	opt stack 13
 29111                           
 29112                           ;Timer0.c: 96: Timer0_Stop();
 29113                           
 29114                           ;incstack = 0
 29115  0160F4  ECDE  F0B2         	call	i2_Timer0_Stop	;wreg free
 29116                           
 29117                           ;Timer0.c: 99: if (gISR != 0)
 29118  0160F8  0103               	movlb	3	; () banked
 29119  0160FA  5114               	movf	_gISR& (0+255),w,b
 29120  0160FC  0103               	movlb	3	; () banked
 29121  0160FE  1115               	iorwf	(_gISR+1)& (0+255),w,b
 29122  016100  0103               	movlb	3	; () banked
 29123  016102  1116               	iorwf	(_gISR+2)& (0+255),w,b
 29124  016104  B4D8               	btfsc	status,2,c
 29125  016106  0012               	return	
 29126                           
 29127                           ; BSR set to: 3
 29128                           ;Timer0.c: 100: gISR();
 29129  016108  D801               	call	i2u1344_48
 29130  01610A  0012               	return	
 29131  01610C                     i2u1344_48:
 29132  01610C  0005               	push	
 29133  01610E  6EFA               	movwf	pclath,c
 29134  016110  0103               	movlb	3	; () banked
 29135  016112  5114               	movf	_gISR& (0+255),w,b
 29136  016114  6EFD               	movwf	tosl,c
 29137  016116  5115               	movf	(_gISR+1)& (0+255),w,b
 29138  016118  6EFE               	movwf	tosh,c
 29139  01611A  5116               	movf	(_gISR+2)& (0+255),w,b
 29140  01611C  6EFF               	movwf	tosu,c
 29141  01611E  50FA               	movf	pclath,w,c
 29142  016120  0012               	return		;indir
 29143  016122                     __end_of_Timer0_ISR:
 29144                           	opt stack 0
 29145                           tosu	equ	0xFFF
 29146                           tosh	equ	0xFFE
 29147                           tosl	equ	0xFFD
 29148                           pclatu	equ	0xFFB
 29149                           pclath	equ	0xFFA
 29150                           tblptru	equ	0xFF8
 29151                           tblptrh	equ	0xFF7
 29152                           tblptrl	equ	0xFF6
 29153                           tablat	equ	0xFF5
 29154                           prodh	equ	0xFF4
 29155                           prodl	equ	0xFF3
 29156                           intcon	equ	0xFF2
 29157                           indf0	equ	0xFEF
 29158                           postinc0	equ	0xFEE
 29159                           fsr0h	equ	0xFEA
 29160                           fsr0l	equ	0xFE9
 29161                           wreg	equ	0xFE8
 29162                           indf1	equ	0xFE7
 29163                           postdec1	equ	0xFE5
 29164                           fsr1h	equ	0xFE2
 29165                           fsr1l	equ	0xFE1
 29166                           indf2	equ	0xFDF
 29167                           postinc2	equ	0xFDE
 29168                           postdec2	equ	0xFDD
 29169                           plusw2	equ	0xFDB
 29170                           fsr2h	equ	0xFDA
 29171                           fsr2l	equ	0xFD9
 29172                           status	equ	0xFD8
 29173                           
 29174 ;; *************** function i2_Motor_Step *****************
 29175 ;; Defined at:
 29176 ;;		line 75 in file "Library/Motor.c"
 29177 ;; Parameters:    Size  Location     Type
 29178 ;;		None
 29179 ;; Auto vars:     Size  Location     Type
 29180 ;;		None
 29181 ;; Return value:  Size  Location     Type
 29182 ;;                  1    wreg      void 
 29183 ;; Registers used:
 29184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29185 ;; Tracked objects:
 29186 ;;		On entry : 0/0
 29187 ;;		On exit  : 0/0
 29188 ;;		Unchanged: 0/0
 29189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29194 ;;Total ram usage:        2 bytes
 29195 ;; Hardware stack levels used:    1
 29196 ;; Hardware stack levels required when called:    4
 29197 ;; This function calls:
 29198 ;;		i2_MXK_Queue
 29199 ;;		i2_MXK_Release
 29200 ;;		i2_MXK_SwitchTo
 29201 ;;		i2_Port_SetPin
 29202 ;;		i2_Timer0_Restart
 29203 ;;		i2_Timer0_Stop
 29204 ;; This function is called by:
 29205 ;; This function uses a non-reentrant model
 29206 ;;
 29207                           
 29208                           	psect	text157
 29209  013798                     __ptext157:
 29210                           	opt stack 0
 29211  013798                     i2_Motor_Step:
 29212                           	opt stack 13
 29213                           
 29214                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29215                           
 29216                           ;incstack = 0
 29217  013798  0100               	movlb	0	; () banked
 29218  01379A  EE20 F004          	lfsr	2,4
 29219  01379E  51CE               	movf	_lMotor& (0+255),w,b
 29220  0137A0  26D9               	addwf	fsr2l,f,c
 29221  0137A2  51CF               	movf	(_lMotor+1)& (0+255),w,b
 29222  0137A4  22DA               	addwfc	fsr2h,f,c
 29223  0137A6  50DF               	movf	indf2,w,c
 29224  0137A8  ECCD  F0AF         	call	i2_MXK_SwitchTo
 29225  0137AC  0900               	iorlw	0
 29226  0137AE  B4D8               	btfsc	status,2,c
 29227  0137B0  D06A               	goto	i2l1627
 29228                           
 29229                           ;Motor.c: 78: {
 29230                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29231  0137B2  C0CE  FFD9         	movff	_lMotor,fsr2l
 29232  0137B6  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29233  0137BA  50DE               	movf	postinc2,w,c
 29234  0137BC  10DE               	iorwf	postinc2,w,c
 29235  0137BE  B4D8               	btfsc	status,2,c
 29236  0137C0  D05D               	goto	i2l1628
 29237                           
 29238                           ;Motor.c: 80: {
 29239                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29240  0137C2  C0CE  FFD9         	movff	_lMotor,fsr2l
 29241  0137C6  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29242  0137CA  0E01               	movlw	1
 29243  0137CC  BEDB               	btfsc	plusw2,7,c
 29244  0137CE  D022               	goto	i2l1629
 29245  0137D0  0E01               	movlw	1
 29246  0137D2  50DB               	movf	plusw2,w,c
 29247  0137D4  E103               	bnz	i2u711_40
 29248  0137D6  04DE               	decf	postinc2,w,c
 29249  0137D8  A0D8               	btfss	status,0,c
 29250  0137DA  D01C               	goto	i2l1629
 29251  0137DC                     i2u711_40:
 29252                           
 29253                           ;Motor.c: 83: {
 29254                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29255  0137DC  C0CE  FFD9         	movff	_lMotor,fsr2l
 29256  0137E0  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29257  0137E4  28DE               	incf	postinc2,w,c
 29258  0137E6  E104               	bnz	i2u712_40
 29259  0137E8  0E7F               	movlw	127
 29260  0137EA  18DE               	xorwf	postinc2,w,c
 29261  0137EC  B4D8               	btfsc	status,2,c
 29262  0137EE  D007               	goto	i2l1630
 29263  0137F0                     i2u712_40:
 29264                           
 29265                           ;Motor.c: 85: lMotor->mDelta --;
 29266  0137F0  C0CE  FFD9         	movff	_lMotor,fsr2l
 29267  0137F4  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29268  0137F8  06DE               	decf	postinc2,f,c
 29269  0137FA  0E00               	movlw	0
 29270  0137FC  5ADD               	subwfb	postdec2,f,c
 29271  0137FE                     i2l1630:
 29272                           
 29273                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29274  0137FE  0E97               	movlw	low _PortE
 29275  013800  6E10               	movwf	i2Port_SetPin@pInput,c
 29276  013802  0E03               	movlw	high _PortE
 29277  013804  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29278  013806  0E00               	movlw	0
 29279  013808  6E12               	movwf	i2Port_SetPin@pPin,c
 29280  01380A  0E01               	movlw	1
 29281  01380C  6E13               	movwf	i2Port_SetPin@pValue,c
 29282  01380E  EC3A  F0A3         	call	i2_Port_SetPin	;wreg free
 29283                           
 29284                           ;Motor.c: 88: }
 29285  013812  D01B               	goto	i2l1631
 29286  013814                     i2l1629:
 29287                           
 29288                           ;Motor.c: 89: else
 29289                           ;Motor.c: 90: {
 29290                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29291  013814  C0CE  FFD9         	movff	_lMotor,fsr2l
 29292  013818  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29293  01381C  04DE               	decf	postinc2,w,c
 29294  01381E  E104               	bnz	i2u713_40
 29295  013820  0E80               	movlw	128
 29296  013822  18DE               	xorwf	postinc2,w,c
 29297  013824  B4D8               	btfsc	status,2,c
 29298  013826  D007               	goto	i2l1632
 29299  013828                     i2u713_40:
 29300                           
 29301                           ;Motor.c: 92: lMotor->mDelta ++;
 29302  013828  C0CE  FFD9         	movff	_lMotor,fsr2l
 29303  01382C  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29304  013830  2ADE               	incf	postinc2,f,c
 29305  013832  0E00               	movlw	0
 29306  013834  22DD               	addwfc	postdec2,f,c
 29307  013836                     i2l1632:
 29308                           
 29309                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29310  013836  0E97               	movlw	low _PortE
 29311  013838  6E10               	movwf	i2Port_SetPin@pInput,c
 29312  01383A  0E03               	movlw	high _PortE
 29313  01383C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29314  01383E  0E00               	movlw	0
 29315  013840  6E12               	movwf	i2Port_SetPin@pPin,c
 29316  013842  0E00               	movlw	0
 29317  013844  6E13               	movwf	i2Port_SetPin@pValue,c
 29318  013846  EC3A  F0A3         	call	i2_Port_SetPin	;wreg free
 29319  01384A                     i2l1631:
 29320                           
 29321                           ;Motor.c: 95: }
 29322                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29323  01384A  0E97               	movlw	low _PortE
 29324  01384C  6E10               	movwf	i2Port_SetPin@pInput,c
 29325  01384E  0E03               	movlw	high _PortE
 29326  013850  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29327  013852  0E01               	movlw	1
 29328  013854  6E12               	movwf	i2Port_SetPin@pPin,c
 29329  013856  0E01               	movlw	1
 29330  013858  6E13               	movwf	i2Port_SetPin@pValue,c
 29331  01385A  EC3A  F0A3         	call	i2_Port_SetPin	;wreg free
 29332                           
 29333                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29334  01385E  0E97               	movlw	low _PortE
 29335  013860  6E10               	movwf	i2Port_SetPin@pInput,c
 29336  013862  0E03               	movlw	high _PortE
 29337  013864  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29338  013866  0E01               	movlw	1
 29339  013868  6E12               	movwf	i2Port_SetPin@pPin,c
 29340  01386A  0E00               	movlw	0
 29341  01386C  6E13               	movwf	i2Port_SetPin@pValue,c
 29342  01386E  EC3A  F0A3         	call	i2_Port_SetPin	;wreg free
 29343                           
 29344                           ;Motor.c: 101: MXK_Release();
 29345  013872  ECE1  F0B2         	call	i2_MXK_Release	;wreg free
 29346                           
 29347                           ;Motor.c: 102: Timer0_Restart();
 29348  013876  ECAD  F0B2         	call	i2_Timer0_Restart	;wreg free
 29349                           
 29350                           ;Motor.c: 103: return;
 29351  01387A  0012               	return	
 29352  01387C                     i2l1628:
 29353                           
 29354                           ;Motor.c: 104: }
 29355                           ;Motor.c: 105: MXK_Release();
 29356  01387C  ECE1  F0B2         	call	i2_MXK_Release	;wreg free
 29357                           
 29358                           ;Motor.c: 106: Timer0_Stop();
 29359  013880  ECDE  F0B2         	call	i2_Timer0_Stop	;wreg free
 29360                           
 29361                           ;Motor.c: 107: return;
 29362  013884  0012               	return	
 29363  013886                     i2l1627:
 29364                           
 29365                           ;Motor.c: 108: }
 29366                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29367  013886  C0BB  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29368  01388A  C0BC  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29369  01388E  C0BD  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29370  013892  EC94  F0B2         	call	i2_MXK_Queue	;wreg free
 29371  013896  0012               	return		;funcret
 29372  013898                     __end_ofi2_Motor_Step:
 29373                           	opt stack 0
 29374                           tosu	equ	0xFFF
 29375                           tosh	equ	0xFFE
 29376                           tosl	equ	0xFFD
 29377                           pclatu	equ	0xFFB
 29378                           pclath	equ	0xFFA
 29379                           tblptru	equ	0xFF8
 29380                           tblptrh	equ	0xFF7
 29381                           tblptrl	equ	0xFF6
 29382                           tablat	equ	0xFF5
 29383                           prodh	equ	0xFF4
 29384                           prodl	equ	0xFF3
 29385                           intcon	equ	0xFF2
 29386                           indf0	equ	0xFEF
 29387                           postinc0	equ	0xFEE
 29388                           fsr0h	equ	0xFEA
 29389                           fsr0l	equ	0xFE9
 29390                           wreg	equ	0xFE8
 29391                           indf1	equ	0xFE7
 29392                           postdec1	equ	0xFE5
 29393                           fsr1h	equ	0xFE2
 29394                           fsr1l	equ	0xFE1
 29395                           indf2	equ	0xFDF
 29396                           postinc2	equ	0xFDE
 29397                           postdec2	equ	0xFDD
 29398                           plusw2	equ	0xFDB
 29399                           fsr2h	equ	0xFDA
 29400                           fsr2l	equ	0xFD9
 29401                           status	equ	0xFD8
 29402                           
 29403 ;; *************** function i2_Timer0_Stop *****************
 29404 ;; Defined at:
 29405 ;;		line 89 in file "Library/Timer0.c"
 29406 ;; Parameters:    Size  Location     Type
 29407 ;;		None
 29408 ;; Auto vars:     Size  Location     Type
 29409 ;;		None
 29410 ;; Return value:  Size  Location     Type
 29411 ;;                  1    wreg      void 
 29412 ;; Registers used:
 29413 ;;		None
 29414 ;; Tracked objects:
 29415 ;;		On entry : 0/0
 29416 ;;		On exit  : 0/0
 29417 ;;		Unchanged: 0/0
 29418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29423 ;;Total ram usage:        0 bytes
 29424 ;; Hardware stack levels used:    1
 29425 ;; This function calls:
 29426 ;;		Nothing
 29427 ;; This function is called by:
 29428 ;;		_Timer0_ISR
 29429 ;;		i2_Motor_Step
 29430 ;; This function uses a non-reentrant model
 29431 ;;
 29432                           
 29433                           	psect	text158
 29434  0165BC                     __ptext158:
 29435                           	opt stack 0
 29436  0165BC                     i2_Timer0_Stop:
 29437                           	opt stack 17
 29438                           
 29439                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29440                           
 29441                           ;incstack = 0
 29442  0165BC  9AF2               	bcf	intcon,5,c	;volatile
 29443                           
 29444                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29445  0165BE  94F2               	bcf	intcon,2,c	;volatile
 29446  0165C0  0012               	return		;funcret
 29447  0165C2                     __end_ofi2_Timer0_Stop:
 29448                           	opt stack 0
 29449                           tosu	equ	0xFFF
 29450                           tosh	equ	0xFFE
 29451                           tosl	equ	0xFFD
 29452                           pclatu	equ	0xFFB
 29453                           pclath	equ	0xFFA
 29454                           tblptru	equ	0xFF8
 29455                           tblptrh	equ	0xFF7
 29456                           tblptrl	equ	0xFF6
 29457                           tablat	equ	0xFF5
 29458                           prodh	equ	0xFF4
 29459                           prodl	equ	0xFF3
 29460                           intcon	equ	0xFF2
 29461                           indf0	equ	0xFEF
 29462                           postinc0	equ	0xFEE
 29463                           fsr0h	equ	0xFEA
 29464                           fsr0l	equ	0xFE9
 29465                           wreg	equ	0xFE8
 29466                           indf1	equ	0xFE7
 29467                           postdec1	equ	0xFE5
 29468                           fsr1h	equ	0xFE2
 29469                           fsr1l	equ	0xFE1
 29470                           indf2	equ	0xFDF
 29471                           postinc2	equ	0xFDE
 29472                           postdec2	equ	0xFDD
 29473                           plusw2	equ	0xFDB
 29474                           fsr2h	equ	0xFDA
 29475                           fsr2l	equ	0xFD9
 29476                           status	equ	0xFD8
 29477                           
 29478 ;; *************** function i2_Timer0_Restart *****************
 29479 ;; Defined at:
 29480 ;;		line 83 in file "Library/Timer0.c"
 29481 ;; Parameters:    Size  Location     Type
 29482 ;;		None
 29483 ;; Auto vars:     Size  Location     Type
 29484 ;;		None
 29485 ;; Return value:  Size  Location     Type
 29486 ;;                  1    wreg      void 
 29487 ;; Registers used:
 29488 ;;		None
 29489 ;; Tracked objects:
 29490 ;;		On entry : 0/0
 29491 ;;		On exit  : 0/0
 29492 ;;		Unchanged: 0/0
 29493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29498 ;;Total ram usage:        0 bytes
 29499 ;; Hardware stack levels used:    1
 29500 ;; This function calls:
 29501 ;;		Nothing
 29502 ;; This function is called by:
 29503 ;;		i2_Motor_Step
 29504 ;; This function uses a non-reentrant model
 29505 ;;
 29506                           
 29507                           	psect	text159
 29508  01655A                     __ptext159:
 29509                           	opt stack 0
 29510  01655A                     i2_Timer0_Restart:
 29511                           	opt stack 16
 29512                           
 29513                           ;Timer0.c: 85: TMR0 = COUNTER;
 29514                           
 29515                           ;incstack = 0
 29516  01655A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29517  01655E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29518                           
 29519                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29520  016562  8AF2               	bsf	intcon,5,c	;volatile
 29521  016564  0012               	return		;funcret
 29522  016566                     __end_ofi2_Timer0_Restart:
 29523                           	opt stack 0
 29524                           tosu	equ	0xFFF
 29525                           tosh	equ	0xFFE
 29526                           tosl	equ	0xFFD
 29527                           pclatu	equ	0xFFB
 29528                           pclath	equ	0xFFA
 29529                           tblptru	equ	0xFF8
 29530                           tblptrh	equ	0xFF7
 29531                           tblptrl	equ	0xFF6
 29532                           tablat	equ	0xFF5
 29533                           prodh	equ	0xFF4
 29534                           prodl	equ	0xFF3
 29535                           intcon	equ	0xFF2
 29536                           indf0	equ	0xFEF
 29537                           postinc0	equ	0xFEE
 29538                           fsr0h	equ	0xFEA
 29539                           fsr0l	equ	0xFE9
 29540                           wreg	equ	0xFE8
 29541                           indf1	equ	0xFE7
 29542                           postdec1	equ	0xFE5
 29543                           fsr1h	equ	0xFE2
 29544                           fsr1l	equ	0xFE1
 29545                           indf2	equ	0xFDF
 29546                           postinc2	equ	0xFDE
 29547                           postdec2	equ	0xFDD
 29548                           plusw2	equ	0xFDB
 29549                           fsr2h	equ	0xFDA
 29550                           fsr2l	equ	0xFD9
 29551                           status	equ	0xFD8
 29552                           
 29553 ;; *************** function i2_Port_SetPin *****************
 29554 ;; Defined at:
 29555 ;;		line 247 in file "Library/Port.c"
 29556 ;; Parameters:    Size  Location     Type
 29557 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29558 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29559 ;;  pPin            1   17[COMRAM] enum E6750
 29560 ;;  pValue          1   18[COMRAM] unsigned char 
 29561 ;; Auto vars:     Size  Location     Type
 29562 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29563 ;; Return value:  Size  Location     Type
 29564 ;;                  1    wreg      void 
 29565 ;; Registers used:
 29566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29567 ;; Tracked objects:
 29568 ;;		On entry : 0/0
 29569 ;;		On exit  : 0/0
 29570 ;;		Unchanged: 0/0
 29571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29575 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29576 ;;Total ram usage:        5 bytes
 29577 ;; Hardware stack levels used:    1
 29578 ;; Hardware stack levels required when called:    3
 29579 ;; This function calls:
 29580 ;;		i2_Byte_SetBit
 29581 ;;		i2_Word_GetPair
 29582 ;; This function is called by:
 29583 ;;		i2_Motor_Step
 29584 ;; This function uses a non-reentrant model
 29585 ;;
 29586                           
 29587                           	psect	text160
 29588  014674                     __ptext160:
 29589                           	opt stack 0
 29590  014674                     i2_Port_SetPin:
 29591                           	opt stack 13
 29592                           
 29593                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29594                           
 29595                           ;incstack = 0
 29596  014674  0E08               	movlw	8
 29597  014676  2410               	addwf	i2Port_SetPin@pInput,w,c
 29598  014678  6E0D               	movwf	i2Word_GetPair@pInput,c
 29599  01467A  0E00               	movlw	0
 29600  01467C  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29601  01467E  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29602  014680  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29603  014684  EC4B  F0B0         	call	i2_Word_GetPair	;wreg free
 29604  014688  6E14               	movwf	i2Port_SetPin@Type,c
 29605                           
 29606                           ;Port.c: 250: switch (Type)
 29607  01468A  D03B               	goto	i2l427
 29608  01468C                     
 29609                           ;Port.c: 256: pValue &= 1;
 29610  01468C  0E01               	movlw	1
 29611  01468E  1613               	andwf	i2Port_SetPin@pValue,f,c
 29612                           
 29613                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29614  014690  EE20 F002          	lfsr	2,2
 29615  014694  5010               	movf	i2Port_SetPin@pInput,w,c
 29616  014696  26D9               	addwf	fsr2l,f,c
 29617  014698  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29618  01469A  22DA               	addwfc	fsr2h,f,c
 29619  01469C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29620  0146A0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29621  0146A4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29622  0146A8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29623  0146AC  EC3B  F0AD         	call	i2_Byte_SetBit	;wreg free
 29624                           
 29625                           ;Port.c: 258: break;
 29626  0146B0  0012               	return	
 29627  0146B2                     
 29628                           ;Port.c: 261: pValue &= 1;
 29629  0146B2  0E01               	movlw	1
 29630  0146B4  1613               	andwf	i2Port_SetPin@pValue,f,c
 29631                           
 29632                           ;Port.c: 262: pValue ^= 1;
 29633  0146B6  0E01               	movlw	1
 29634  0146B8  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29635                           
 29636                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29637  0146BA  EE20 F002          	lfsr	2,2
 29638  0146BE  5010               	movf	i2Port_SetPin@pInput,w,c
 29639  0146C0  26D9               	addwf	fsr2l,f,c
 29640  0146C2  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29641  0146C4  22DA               	addwfc	fsr2h,f,c
 29642  0146C6  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29643  0146CA  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29644  0146CE  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29645  0146D2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29646  0146D6  EC3B  F0AD         	call	i2_Byte_SetBit	;wreg free
 29647                           
 29648                           ;Port.c: 264: break;
 29649  0146DA  0012               	return	
 29650  0146DC                     
 29651                           ;Port.c: 266: pValue &= 1;
 29652  0146DC  0E01               	movlw	1
 29653  0146DE  1613               	andwf	i2Port_SetPin@pValue,f,c
 29654                           
 29655                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29656  0146E0  EE20 F004          	lfsr	2,4
 29657  0146E4  5010               	movf	i2Port_SetPin@pInput,w,c
 29658  0146E6  26D9               	addwf	fsr2l,f,c
 29659  0146E8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29660  0146EA  22DA               	addwfc	fsr2h,f,c
 29661  0146EC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29662  0146F0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29663  0146F4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29664  0146F8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29665  0146FC  EC3B  F0AD         	call	i2_Byte_SetBit	;wreg free
 29666                           
 29667                           ;Port.c: 269: }
 29668                           
 29669                           ;Port.c: 268: break;
 29670  014700  0012               	return	
 29671  014702                     i2l427:
 29672  014702  5014               	movf	i2Port_SetPin@Type,w,c
 29673                           
 29674                           ; Switch size 1, requested type "space"
 29675                           ; Number of cases is 4, Range of values is 0 to 3
 29676                           ; switch strategies available:
 29677                           ; Name         Instructions Cycles
 29678                           ; simple_byte           13     7 (average)
 29679                           ;	Chosen strategy is simple_byte
 29680  014704  0A00               	xorlw	0	; case 0
 29681  014706  B4D8               	btfsc	status,2,c
 29682  014708  0012               	return	
 29683  01470A  0A01               	xorlw	1	; case 1
 29684  01470C  B4D8               	btfsc	status,2,c
 29685  01470E  D7BE               	goto	i2l430
 29686  014710  0A03               	xorlw	3	; case 2
 29687  014712  B4D8               	btfsc	status,2,c
 29688  014714  D7CE               	goto	i2l432
 29689  014716  0A01               	xorlw	1	; case 3
 29690  014718  A4D8               	btfss	status,2,c
 29691  01471A  0012               	return	
 29692  01471C  D7DF               	goto	i2l433
 29693  01471E                     __end_ofi2_Port_SetPin:
 29694                           	opt stack 0
 29695                           tosu	equ	0xFFF
 29696                           tosh	equ	0xFFE
 29697                           tosl	equ	0xFFD
 29698                           pclatu	equ	0xFFB
 29699                           pclath	equ	0xFFA
 29700                           tblptru	equ	0xFF8
 29701                           tblptrh	equ	0xFF7
 29702                           tblptrl	equ	0xFF6
 29703                           tablat	equ	0xFF5
 29704                           prodh	equ	0xFF4
 29705                           prodl	equ	0xFF3
 29706                           intcon	equ	0xFF2
 29707                           indf0	equ	0xFEF
 29708                           postinc0	equ	0xFEE
 29709                           fsr0h	equ	0xFEA
 29710                           fsr0l	equ	0xFE9
 29711                           wreg	equ	0xFE8
 29712                           indf1	equ	0xFE7
 29713                           postdec1	equ	0xFE5
 29714                           fsr1h	equ	0xFE2
 29715                           fsr1l	equ	0xFE1
 29716                           indf2	equ	0xFDF
 29717                           postinc2	equ	0xFDE
 29718                           postdec2	equ	0xFDD
 29719                           plusw2	equ	0xFDB
 29720                           fsr2h	equ	0xFDA
 29721                           fsr2l	equ	0xFD9
 29722                           status	equ	0xFD8
 29723                           
 29724 ;; *************** function i2_Word_GetPair *****************
 29725 ;; Defined at:
 29726 ;;		line 156 in file "Library/Types.c"
 29727 ;; Parameters:    Size  Location     Type
 29728 ;;  pInput          2   12[COMRAM] PTR struct Word
 29729 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29730 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29731 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29732 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29733 ;;  pPair           1   14[COMRAM] unsigned char 
 29734 ;; Auto vars:     Size  Location     Type
 29735 ;;		None
 29736 ;; Return value:  Size  Location     Type
 29737 ;;                  1    wreg      unsigned char 
 29738 ;; Registers used:
 29739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29740 ;; Tracked objects:
 29741 ;;		On entry : 0/0
 29742 ;;		On exit  : 0/0
 29743 ;;		Unchanged: 0/0
 29744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29745 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29749 ;;Total ram usage:        3 bytes
 29750 ;; Hardware stack levels used:    1
 29751 ;; Hardware stack levels required when called:    2
 29752 ;; This function calls:
 29753 ;;		i2_Byte_GetPair
 29754 ;; This function is called by:
 29755 ;;		i2_Port_SetPin
 29756 ;; This function uses a non-reentrant model
 29757 ;;
 29758                           
 29759                           	psect	text161
 29760  016096                     __ptext161:
 29761                           	opt stack 0
 29762  016096                     i2_Word_GetPair:
 29763                           	opt stack 13
 29764                           
 29765                           ;Types.c: 158: if (pPair >= 4)
 29766                           
 29767                           ;incstack = 0
 29768  016096  0E03               	movlw	3
 29769  016098  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29770  01609A  D00C               	goto	i2l781
 29771                           
 29772                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29773  01609C  0E01               	movlw	1
 29774  01609E  240D               	addwf	i2Word_GetPair@pInput,w,c
 29775  0160A0  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29776  0160A2  0E00               	movlw	0
 29777  0160A4  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29778  0160A6  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29779  0160A8  500F               	movf	i2Word_GetPair@pPair,w,c
 29780  0160AA  0FFC               	addlw	252
 29781  0160AC  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29782  0160AE  ECD5  F0B1         	call	i2_Byte_GetPair	;wreg free
 29783  0160B2  0012               	return	
 29784  0160B4                     i2l781:
 29785                           
 29786                           ;Types.c: 160: else
 29787                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29788  0160B4  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29789  0160B8  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29790  0160BC  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29791  0160C0  ECD5  F0B1         	call	i2_Byte_GetPair	;wreg free
 29792  0160C4  0012               	return	
 29793  0160C6                     __end_ofi2_Word_GetPair:
 29794                           	opt stack 0
 29795                           tosu	equ	0xFFF
 29796                           tosh	equ	0xFFE
 29797                           tosl	equ	0xFFD
 29798                           pclatu	equ	0xFFB
 29799                           pclath	equ	0xFFA
 29800                           tblptru	equ	0xFF8
 29801                           tblptrh	equ	0xFF7
 29802                           tblptrl	equ	0xFF6
 29803                           tablat	equ	0xFF5
 29804                           prodh	equ	0xFF4
 29805                           prodl	equ	0xFF3
 29806                           intcon	equ	0xFF2
 29807                           indf0	equ	0xFEF
 29808                           postinc0	equ	0xFEE
 29809                           fsr0h	equ	0xFEA
 29810                           fsr0l	equ	0xFE9
 29811                           wreg	equ	0xFE8
 29812                           indf1	equ	0xFE7
 29813                           postdec1	equ	0xFE5
 29814                           fsr1h	equ	0xFE2
 29815                           fsr1l	equ	0xFE1
 29816                           indf2	equ	0xFDF
 29817                           postinc2	equ	0xFDE
 29818                           postdec2	equ	0xFDD
 29819                           plusw2	equ	0xFDB
 29820                           fsr2h	equ	0xFDA
 29821                           fsr2l	equ	0xFD9
 29822                           status	equ	0xFD8
 29823                           
 29824 ;; *************** function i2_Byte_GetPair *****************
 29825 ;; Defined at:
 29826 ;;		line 87 in file "Library/Types.c"
 29827 ;; Parameters:    Size  Location     Type
 29828 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29829 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29830 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29831 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29832 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29833 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29834 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29835 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29836 ;;		 -> NULL(0), 
 29837 ;;  pPair           1   11[COMRAM] unsigned char 
 29838 ;; Auto vars:     Size  Location     Type
 29839 ;;		None
 29840 ;; Return value:  Size  Location     Type
 29841 ;;                  1    wreg      unsigned char 
 29842 ;; Registers used:
 29843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29844 ;; Tracked objects:
 29845 ;;		On entry : 0/0
 29846 ;;		On exit  : 0/0
 29847 ;;		Unchanged: 0/0
 29848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29849 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29853 ;;Total ram usage:        3 bytes
 29854 ;; Hardware stack levels used:    1
 29855 ;; Hardware stack levels required when called:    1
 29856 ;; This function calls:
 29857 ;;		i2_Byte_GetZone
 29858 ;; This function is called by:
 29859 ;;		i2_Word_GetPair
 29860 ;; This function uses a non-reentrant model
 29861 ;;
 29862                           
 29863                           	psect	text162
 29864  0163AA                     __ptext162:
 29865                           	opt stack 0
 29866  0163AA                     i2_Byte_GetPair:
 29867                           	opt stack 13
 29868                           
 29869                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29870                           
 29871                           ;incstack = 0
 29872  0163AA  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29873  0163AE  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29874  0163B2  0E04               	movlw	4
 29875  0163B4  6E03               	movwf	i2Byte_GetZone@pMax,c
 29876  0163B6  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29877  0163BA  0E02               	movlw	2
 29878  0163BC  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29879  0163BE  ECAF  F0A8         	call	i2_Byte_GetZone	;wreg free
 29880  0163C2  0012               	return	
 29881  0163C4                     __end_ofi2_Byte_GetPair:
 29882                           	opt stack 0
 29883                           tosu	equ	0xFFF
 29884                           tosh	equ	0xFFE
 29885                           tosl	equ	0xFFD
 29886                           pclatu	equ	0xFFB
 29887                           pclath	equ	0xFFA
 29888                           tblptru	equ	0xFF8
 29889                           tblptrh	equ	0xFF7
 29890                           tblptrl	equ	0xFF6
 29891                           tablat	equ	0xFF5
 29892                           prodh	equ	0xFF4
 29893                           prodl	equ	0xFF3
 29894                           intcon	equ	0xFF2
 29895                           indf0	equ	0xFEF
 29896                           postinc0	equ	0xFEE
 29897                           fsr0h	equ	0xFEA
 29898                           fsr0l	equ	0xFE9
 29899                           wreg	equ	0xFE8
 29900                           indf1	equ	0xFE7
 29901                           postdec1	equ	0xFE5
 29902                           fsr1h	equ	0xFE2
 29903                           fsr1l	equ	0xFE1
 29904                           indf2	equ	0xFDF
 29905                           postinc2	equ	0xFDE
 29906                           postdec2	equ	0xFDD
 29907                           plusw2	equ	0xFDB
 29908                           fsr2h	equ	0xFDA
 29909                           fsr2l	equ	0xFD9
 29910                           status	equ	0xFD8
 29911                           
 29912 ;; *************** function i2_Byte_GetZone *****************
 29913 ;; Defined at:
 29914 ;;		line 64 in file "Library/Types.c"
 29915 ;; Parameters:    Size  Location     Type
 29916 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29917 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29918 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29919 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29920 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29921 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29922 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29923 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29924 ;;		 -> NULL(0), 
 29925 ;;  pMax            1    2[COMRAM] unsigned char 
 29926 ;;  pChunk          1    3[COMRAM] unsigned char 
 29927 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29928 ;; Auto vars:     Size  Location     Type
 29929 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29930 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29931 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29932 ;; Return value:  Size  Location     Type
 29933 ;;                  1    wreg      unsigned char 
 29934 ;; Registers used:
 29935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29936 ;; Tracked objects:
 29937 ;;		On entry : 0/0
 29938 ;;		On exit  : 0/0
 29939 ;;		Unchanged: 0/0
 29940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29941 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29942 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29944 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29945 ;;Total ram usage:        9 bytes
 29946 ;; Hardware stack levels used:    1
 29947 ;; This function calls:
 29948 ;;		Nothing
 29949 ;; This function is called by:
 29950 ;;		i2_Byte_GetPair
 29951 ;; This function uses a non-reentrant model
 29952 ;;
 29953                           
 29954                           	psect	text163
 29955  01515E                     __ptext163:
 29956                           	opt stack 0
 29957  01515E                     i2_Byte_GetZone:
 29958                           	opt stack 13
 29959                           
 29960                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29961                           
 29962                           ;incstack = 0
 29963  01515E  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29964  015162  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29965  015166  0E00               	movlw	low (__mediumconst shr (0+16))
 29966  015168  6EF8               	movwf	tblptru,c
 29967  01516A  0E0F               	movlw	(high __ramtop+-1)
 29968  01516C  64F7               	cpfsgt	tblptrh,c
 29969  01516E  D003               	bra	i2u490_47
 29970  015170  0008               	tblrd		*
 29971  015172  50F5               	movf	tablat,w,c
 29972  015174  D005               	bra	i2u490_40
 29973  015176                     i2u490_47:
 29974  015176  CFF6 FFE9          	movff	tblptrl,fsr0l
 29975  01517A  CFF7 FFEA          	movff	tblptrh,fsr0h
 29976  01517E  50EF               	movf	indf0,w,c
 29977  015180                     i2u490_40:
 29978  015180  6E09               	movwf	i2Byte_GetZone@Output,c
 29979                           
 29980                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29981  015182  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29982  015184  0D01               	mullw	1
 29983  015186  0E63               	movlw	low _MASKS
 29984  015188  24F3               	addwf	prodl,w,c
 29985  01518A  6EF6               	movwf	tblptrl,c
 29986  01518C  0EFD               	movlw	high _MASKS
 29987  01518E  20F4               	addwfc	prodh,w,c
 29988  015190  6EF7               	movwf	tblptrh,c
 29989  015192                     	if	1	;There are 3 active tblptr bytes
 29990  015192  6AF8               	clrf	tblptru,c
 29991  015194  0E00               	movlw	low (__mediumconst shr (0+16))
 29992  015196  22F8               	addwfc	tblptru,f,c
 29993  015198                     	endif
 29994  015198  0008               	tblrd		*
 29995  01519A  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29996                           
 29997                           ;Types.c: 68: UINT8 Offset = 0;
 29998  01519E  0E00               	movlw	0
 29999  0151A0  6E08               	movwf	i2Byte_GetZone@Offset,c
 30000                           
 30001                           ;Types.c: 70: while (pChunk >= pMax)
 30002  0151A2  D003               	goto	i2l732
 30003  0151A4                     
 30004                           ;Types.c: 71: {
 30005                           ;Types.c: 72: pChunk -= pMax;
 30006  0151A4  5003               	movf	i2Byte_GetZone@pMax,w,c
 30007  0151A6  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30008                           
 30009                           ;Types.c: 73: Offset += 1;
 30010  0151A8  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30011  0151AA                     i2l732:
 30012  0151AA  5003               	movf	i2Byte_GetZone@pMax,w,c
 30013  0151AC  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30014  0151AE  B0D8               	btfsc	status,0,c
 30015  0151B0  D7F9               	goto	i2l733
 30016                           
 30017                           ;Types.c: 74: }
 30018                           ;Types.c: 75: pChunk *= pChunkSize;
 30019  0151B2  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30020  0151B4  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30021  0151B6  50F3               	movf	prodl,w,c
 30022  0151B8  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30023                           
 30024                           ;Types.c: 76: pChunk += Offset;
 30025  0151BA  5008               	movf	i2Byte_GetZone@Offset,w,c
 30026  0151BC  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30027                           
 30028                           ;Types.c: 78: Output >>= pChunk;
 30029  0151BE  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30030  0151C0  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30031  0151C2  D002               	goto	i2u492_40
 30032  0151C4                     i2u492_45:
 30033  0151C4  90D8               	bcf	status,0,c
 30034  0151C6  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30035  0151C8                     i2u492_40:
 30036  0151C8  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30037  0151CA  D7FC               	goto	i2u492_45
 30038                           
 30039                           ;Types.c: 79: Output &= MASK;
 30040  0151CC  5007               	movf	i2Byte_GetZone@MASK,w,c
 30041  0151CE  1609               	andwf	i2Byte_GetZone@Output,f,c
 30042                           
 30043                           ;Types.c: 80: return Output;
 30044  0151D0  5009               	movf	i2Byte_GetZone@Output,w,c
 30045  0151D2  0012               	return	
 30046  0151D4                     __end_ofi2_Byte_GetZone:
 30047                           	opt stack 0
 30048                           tosu	equ	0xFFF
 30049                           tosh	equ	0xFFE
 30050                           tosl	equ	0xFFD
 30051                           pclatu	equ	0xFFB
 30052                           pclath	equ	0xFFA
 30053                           tblptru	equ	0xFF8
 30054                           tblptrh	equ	0xFF7
 30055                           tblptrl	equ	0xFF6
 30056                           tablat	equ	0xFF5
 30057                           prodh	equ	0xFF4
 30058                           prodl	equ	0xFF3
 30059                           intcon	equ	0xFF2
 30060                           indf0	equ	0xFEF
 30061                           postinc0	equ	0xFEE
 30062                           fsr0h	equ	0xFEA
 30063                           fsr0l	equ	0xFE9
 30064                           wreg	equ	0xFE8
 30065                           indf1	equ	0xFE7
 30066                           postdec1	equ	0xFE5
 30067                           fsr1h	equ	0xFE2
 30068                           fsr1l	equ	0xFE1
 30069                           indf2	equ	0xFDF
 30070                           postinc2	equ	0xFDE
 30071                           postdec2	equ	0xFDD
 30072                           plusw2	equ	0xFDB
 30073                           fsr2h	equ	0xFDA
 30074                           fsr2l	equ	0xFD9
 30075                           status	equ	0xFD8
 30076                           
 30077 ;; *************** function i2_Byte_SetBit *****************
 30078 ;; Defined at:
 30079 ;;		line 32 in file "Library/Types.c"
 30080 ;; Parameters:    Size  Location     Type
 30081 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30082 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30083 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30084 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30085 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30086 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30087 ;;		 -> NULL(0), 
 30088 ;;  pBit            1    2[COMRAM] unsigned char 
 30089 ;;  pValue          1    3[COMRAM] unsigned char 
 30090 ;; Auto vars:     Size  Location     Type
 30091 ;;		None
 30092 ;; Return value:  Size  Location     Type
 30093 ;;                  1    wreg      void 
 30094 ;; Registers used:
 30095 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30096 ;; Tracked objects:
 30097 ;;		On entry : 0/0
 30098 ;;		On exit  : 0/0
 30099 ;;		Unchanged: 0/0
 30100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30103 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30104 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30105 ;;Total ram usage:        7 bytes
 30106 ;; Hardware stack levels used:    1
 30107 ;; This function calls:
 30108 ;;		Nothing
 30109 ;; This function is called by:
 30110 ;;		i2_Port_SetPin
 30111 ;; This function uses a non-reentrant model
 30112 ;;
 30113                           
 30114                           	psect	text164
 30115  015A76                     __ptext164:
 30116                           	opt stack 0
 30117  015A76                     i2_Byte_SetBit:
 30118                           	opt stack 15
 30119                           
 30120                           ;Types.c: 34: pValue &= 1;
 30121                           
 30122                           ;incstack = 0
 30123  015A76  0E01               	movlw	1
 30124  015A78  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30125                           
 30126                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30127  015A7A  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30128  015A7E  0E01               	movlw	1
 30129  015A80  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30130  015A82  2A05               	incf	??i2_Byte_SetBit,f,c
 30131  015A84  D002               	goto	i2u547_44
 30132  015A86                     i2u547_45:
 30133  015A86  90D8               	bcf	status,0,c
 30134  015A88  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30135  015A8A                     i2u547_44:
 30136  015A8A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30137  015A8C  D7FC               	goto	i2u547_45
 30138  015A8E  5006               	movf	??i2_Byte_SetBit+1,w,c
 30139  015A90  0AFF               	xorlw	255
 30140  015A92  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30141  015A94  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30142  015A98  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30143  015A9C  5007               	movf	??i2_Byte_SetBit+2,w,c
 30144  015A9E  16DF               	andwf	indf2,f,c
 30145                           
 30146                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30147  015AA0  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30148  015AA4  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30149  015AA8  2A05               	incf	??i2_Byte_SetBit,f,c
 30150  015AAA  D002               	goto	i2u548_44
 30151  015AAC                     i2u548_45:
 30152  015AAC  90D8               	bcf	status,0,c
 30153  015AAE  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30154  015AB0                     i2u548_44:
 30155  015AB0  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30156  015AB2  D7FC               	goto	i2u548_45
 30157  015AB4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30158  015AB8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30159  015ABC  5006               	movf	??i2_Byte_SetBit+1,w,c
 30160  015ABE  12DF               	iorwf	indf2,f,c
 30161  015AC0  0012               	return		;funcret
 30162  015AC2                     __end_ofi2_Byte_SetBit:
 30163                           	opt stack 0
 30164                           tosu	equ	0xFFF
 30165                           tosh	equ	0xFFE
 30166                           tosl	equ	0xFFD
 30167                           pclatu	equ	0xFFB
 30168                           pclath	equ	0xFFA
 30169                           tblptru	equ	0xFF8
 30170                           tblptrh	equ	0xFF7
 30171                           tblptrl	equ	0xFF6
 30172                           tablat	equ	0xFF5
 30173                           prodh	equ	0xFF4
 30174                           prodl	equ	0xFF3
 30175                           intcon	equ	0xFF2
 30176                           indf0	equ	0xFEF
 30177                           postinc0	equ	0xFEE
 30178                           fsr0h	equ	0xFEA
 30179                           fsr0l	equ	0xFE9
 30180                           wreg	equ	0xFE8
 30181                           indf1	equ	0xFE7
 30182                           postdec1	equ	0xFE5
 30183                           fsr1h	equ	0xFE2
 30184                           fsr1l	equ	0xFE1
 30185                           indf2	equ	0xFDF
 30186                           postinc2	equ	0xFDE
 30187                           postdec2	equ	0xFDD
 30188                           plusw2	equ	0xFDB
 30189                           fsr2h	equ	0xFDA
 30190                           fsr2l	equ	0xFD9
 30191                           status	equ	0xFD8
 30192                           
 30193 ;; *************** function i2_MXK_SwitchTo *****************
 30194 ;; Defined at:
 30195 ;;		line 105 in file "Library/MXK.c"
 30196 ;; Parameters:    Size  Location     Type
 30197 ;;  pModule         1    wreg     enum E6927
 30198 ;; Auto vars:     Size  Location     Type
 30199 ;;  pModule         1    7[COMRAM] enum E6927
 30200 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30201 ;; Return value:  Size  Location     Type
 30202 ;;                  1    wreg      unsigned char 
 30203 ;; Registers used:
 30204 ;;		wreg, status,2, status,0, cstack
 30205 ;; Tracked objects:
 30206 ;;		On entry : 0/0
 30207 ;;		On exit  : 0/0
 30208 ;;		Unchanged: 0/0
 30209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30214 ;;Total ram usage:        2 bytes
 30215 ;; Hardware stack levels used:    1
 30216 ;; Hardware stack levels required when called:    1
 30217 ;; This function calls:
 30218 ;;		i2_delay_us
 30219 ;; This function is called by:
 30220 ;;		i2_Motor_Step
 30221 ;; This function uses a non-reentrant model
 30222 ;;
 30223                           
 30224                           	psect	text165
 30225  015F9A                     __ptext165:
 30226                           	opt stack 0
 30227  015F9A                     i2_MXK_SwitchTo:
 30228                           	opt stack 15
 30229                           
 30230                           ;incstack = 0
 30231                           ;i2MXK_SwitchTo@pModule stored from wreg
 30232  015F9A  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30233                           
 30234                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30235  015F9C  5086               	movf	3974,w,c	;volatile
 30236  015F9E  0B0F               	andlw	15
 30237  015FA0  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30238                           
 30239                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30240  015FA2  504B               	movf	_Bus_State,w,c
 30241  015FA4  A4D8               	btfss	status,2,c
 30242  015FA6  D002               	goto	i2l1730
 30243                           
 30244                           ;MXK.c: 110: return 0;
 30245  015FA8  0E00               	movlw	0
 30246  015FAA  0012               	return	
 30247  015FAC                     i2l1730:
 30248                           
 30249                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30250  015FAC  0E00               	movlw	0
 30251  015FAE  6E4B               	movwf	_Bus_State,c
 30252                           
 30253                           ;MXK.c: 114: if (CUR != pModule)
 30254  015FB0  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30255  015FB2  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30256  015FB4  B4D8               	btfsc	status,2,c
 30257  015FB6  D00A               	goto	i2l1732
 30258                           
 30259                           ;MXK.c: 115: {
 30260                           ;MXK.c: 116: PORTG &= ~(0xF);
 30261  015FB8  0EF0               	movlw	240
 30262  015FBA  1686               	andwf	3974,f,c	;volatile
 30263                           
 30264                           ;MXK.c: 117: PORTG |= pModule;
 30265  015FBC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30266  015FBE  1286               	iorwf	3974,f,c	;volatile
 30267                           
 30268                           ;MXK.c: 120: delay_us(10);
 30269  015FC0  0E00               	movlw	0
 30270  015FC2  6E02               	movwf	i2delay_us@us+1,c
 30271  015FC4  0E0A               	movlw	10
 30272  015FC6  6E01               	movwf	i2delay_us@us,c
 30273  015FC8  ECBE  F0AE         	call	i2_delay_us	;wreg free
 30274  015FCC                     i2l1732:
 30275                           
 30276                           ;MXK.c: 121: }
 30277                           ;MXK.c: 122: return 1;
 30278  015FCC  0E01               	movlw	1
 30279  015FCE  0012               	return	
 30280  015FD0                     __end_ofi2_MXK_SwitchTo:
 30281                           	opt stack 0
 30282                           tosu	equ	0xFFF
 30283                           tosh	equ	0xFFE
 30284                           tosl	equ	0xFFD
 30285                           pclatu	equ	0xFFB
 30286                           pclath	equ	0xFFA
 30287                           tblptru	equ	0xFF8
 30288                           tblptrh	equ	0xFF7
 30289                           tblptrl	equ	0xFF6
 30290                           tablat	equ	0xFF5
 30291                           prodh	equ	0xFF4
 30292                           prodl	equ	0xFF3
 30293                           intcon	equ	0xFF2
 30294                           indf0	equ	0xFEF
 30295                           postinc0	equ	0xFEE
 30296                           fsr0h	equ	0xFEA
 30297                           fsr0l	equ	0xFE9
 30298                           wreg	equ	0xFE8
 30299                           indf1	equ	0xFE7
 30300                           postdec1	equ	0xFE5
 30301                           fsr1h	equ	0xFE2
 30302                           fsr1l	equ	0xFE1
 30303                           indf2	equ	0xFDF
 30304                           postinc2	equ	0xFDE
 30305                           postdec2	equ	0xFDD
 30306                           plusw2	equ	0xFDB
 30307                           fsr2h	equ	0xFDA
 30308                           fsr2l	equ	0xFD9
 30309                           status	equ	0xFD8
 30310                           
 30311 ;; *************** function i2_delay_us *****************
 30312 ;; Defined at:
 30313 ;;		line 255 in file "Library/Types.c"
 30314 ;; Parameters:    Size  Location     Type
 30315 ;;  us              2    0[COMRAM] unsigned short 
 30316 ;; Auto vars:     Size  Location     Type
 30317 ;;  delay_us        4    2[COMRAM] unsigned long 
 30318 ;; Return value:  Size  Location     Type
 30319 ;;                  1    wreg      void 
 30320 ;; Registers used:
 30321 ;;		wreg, status,2, status,0
 30322 ;; Tracked objects:
 30323 ;;		On entry : 0/0
 30324 ;;		On exit  : 0/0
 30325 ;;		Unchanged: 0/0
 30326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30328 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30331 ;;Total ram usage:        6 bytes
 30332 ;; Hardware stack levels used:    1
 30333 ;; This function calls:
 30334 ;;		Nothing
 30335 ;; This function is called by:
 30336 ;;		i2_MXK_SwitchTo
 30337 ;; This function uses a non-reentrant model
 30338 ;;
 30339                           
 30340                           	psect	text166
 30341  015D7C                     __ptext166:
 30342                           	opt stack 0
 30343  015D7C                     i2_delay_us:
 30344                           	opt stack 15
 30345                           
 30346                           ;Types.c: 256: unsigned long u;
 30347                           ;Types.c: 257: while (us--) {
 30348                           
 30349                           ;incstack = 0
 30350  015D7C  D016               	goto	i2u551_40
 30351  015D7E                     i2l9087:
 30352                           
 30353                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30354  015D7E  0E00               	movlw	0
 30355  015D80  6E03               	movwf	i2delay_us@u,c
 30356  015D82  0E00               	movlw	0
 30357  015D84  6E04               	movwf	i2delay_us@u+1,c
 30358  015D86  0E00               	movlw	0
 30359  015D88  6E05               	movwf	i2delay_us@u+2,c
 30360  015D8A  0E00               	movlw	0
 30361  015D8C  6E06               	movwf	i2delay_us@u+3,c
 30362  015D8E                     i2l9089:
 30363  015D8E  5003               	movf	i2delay_us@u,w,c
 30364  015D90  1004               	iorwf	i2delay_us@u+1,w,c
 30365  015D92  1005               	iorwf	i2delay_us@u+2,w,c
 30366  015D94  1006               	iorwf	i2delay_us@u+3,w,c
 30367  015D96  A4D8               	btfss	status,2,c
 30368  015D98  D008               	goto	i2u551_40
 30369  015D9A  F000               	nop		; ;# 
 30370  015D9C  0E01               	movlw	1
 30371  015D9E  2603               	addwf	i2delay_us@u,f,c
 30372  015DA0  0E00               	movlw	0
 30373  015DA2  2204               	addwfc	i2delay_us@u+1,f,c
 30374  015DA4  2205               	addwfc	i2delay_us@u+2,f,c
 30375  015DA6  2206               	addwfc	i2delay_us@u+3,f,c
 30376  015DA8  D7F2               	goto	i2l9089
 30377  015DAA                     i2u551_40:
 30378  015DAA  0601               	decf	i2delay_us@us,f,c
 30379  015DAC  A0D8               	btfss	status,0,c
 30380  015DAE  0602               	decf	i2delay_us@us+1,f,c
 30381  015DB0  2801               	incf	i2delay_us@us,w,c
 30382  015DB2  E1E5               	bnz	i2l9087
 30383  015DB4  2802               	incf	i2delay_us@us+1,w,c
 30384  015DB6  B4D8               	btfsc	status,2,c
 30385  015DB8  0012               	return	
 30386  015DBA  D7E1               	goto	i2l832
 30387  015DBC                     __end_ofi2_delay_us:
 30388                           	opt stack 0
 30389                           tosu	equ	0xFFF
 30390                           tosh	equ	0xFFE
 30391                           tosl	equ	0xFFD
 30392                           pclatu	equ	0xFFB
 30393                           pclath	equ	0xFFA
 30394                           tblptru	equ	0xFF8
 30395                           tblptrh	equ	0xFF7
 30396                           tblptrl	equ	0xFF6
 30397                           tablat	equ	0xFF5
 30398                           prodh	equ	0xFF4
 30399                           prodl	equ	0xFF3
 30400                           intcon	equ	0xFF2
 30401                           indf0	equ	0xFEF
 30402                           postinc0	equ	0xFEE
 30403                           fsr0h	equ	0xFEA
 30404                           fsr0l	equ	0xFE9
 30405                           wreg	equ	0xFE8
 30406                           indf1	equ	0xFE7
 30407                           postdec1	equ	0xFE5
 30408                           fsr1h	equ	0xFE2
 30409                           fsr1l	equ	0xFE1
 30410                           indf2	equ	0xFDF
 30411                           postinc2	equ	0xFDE
 30412                           postdec2	equ	0xFDD
 30413                           plusw2	equ	0xFDB
 30414                           fsr2h	equ	0xFDA
 30415                           fsr2l	equ	0xFD9
 30416                           status	equ	0xFD8
 30417                           
 30418 ;; *************** function i2_MXK_Release *****************
 30419 ;; Defined at:
 30420 ;;		line 130 in file "Library/MXK.c"
 30421 ;; Parameters:    Size  Location     Type
 30422 ;;		None
 30423 ;; Auto vars:     Size  Location     Type
 30424 ;;		None
 30425 ;; Return value:  Size  Location     Type
 30426 ;;                  1    wreg      unsigned char 
 30427 ;; Registers used:
 30428 ;;		wreg, status,2, status,0
 30429 ;; Tracked objects:
 30430 ;;		On entry : 0/0
 30431 ;;		On exit  : 0/0
 30432 ;;		Unchanged: 0/0
 30433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30438 ;;Total ram usage:        0 bytes
 30439 ;; Hardware stack levels used:    1
 30440 ;; This function calls:
 30441 ;;		Nothing
 30442 ;; This function is called by:
 30443 ;;		i2_Motor_Step
 30444 ;; This function uses a non-reentrant model
 30445 ;;
 30446                           
 30447                           	psect	text167
 30448  0165C2                     __ptext167:
 30449                           	opt stack 0
 30450  0165C2                     i2_MXK_Release:
 30451                           	opt stack 16
 30452                           
 30453                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30454                           
 30455                           ;incstack = 0
 30456  0165C2  0E01               	movlw	1
 30457  0165C4  6E4B               	movwf	_Bus_State,c
 30458                           
 30459                           ;MXK.c: 135: return 1;
 30460                           ;	Return value of i2_MXK_Release is never used
 30461  0165C6  0012               	return	
 30462  0165C8                     __end_ofi2_MXK_Release:
 30463                           	opt stack 0
 30464                           tosu	equ	0xFFF
 30465                           tosh	equ	0xFFE
 30466                           tosl	equ	0xFFD
 30467                           pclatu	equ	0xFFB
 30468                           pclath	equ	0xFFA
 30469                           tblptru	equ	0xFF8
 30470                           tblptrh	equ	0xFF7
 30471                           tblptrl	equ	0xFF6
 30472                           tablat	equ	0xFF5
 30473                           prodh	equ	0xFF4
 30474                           prodl	equ	0xFF3
 30475                           intcon	equ	0xFF2
 30476                           indf0	equ	0xFEF
 30477                           postinc0	equ	0xFEE
 30478                           fsr0h	equ	0xFEA
 30479                           fsr0l	equ	0xFE9
 30480                           wreg	equ	0xFE8
 30481                           indf1	equ	0xFE7
 30482                           postdec1	equ	0xFE5
 30483                           fsr1h	equ	0xFE2
 30484                           fsr1l	equ	0xFE1
 30485                           indf2	equ	0xFDF
 30486                           postinc2	equ	0xFDE
 30487                           postdec2	equ	0xFDD
 30488                           plusw2	equ	0xFDB
 30489                           fsr2h	equ	0xFDA
 30490                           fsr2l	equ	0xFD9
 30491                           status	equ	0xFD8
 30492                           
 30493 ;; *************** function i2_MXK_Queue *****************
 30494 ;; Defined at:
 30495 ;;		line 144 in file "Library/MXK.c"
 30496 ;; Parameters:    Size  Location     Type
 30497 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30498 ;;		 -> Absolute function(1), Motor_Step(1), 
 30499 ;; Auto vars:     Size  Location     Type
 30500 ;;		None
 30501 ;; Return value:  Size  Location     Type
 30502 ;;                  1    wreg      void 
 30503 ;; Registers used:
 30504 ;;		wreg, status,2, status,0
 30505 ;; Tracked objects:
 30506 ;;		On entry : 0/0
 30507 ;;		On exit  : 0/0
 30508 ;;		Unchanged: 0/0
 30509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30510 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30513 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30514 ;;Total ram usage:        3 bytes
 30515 ;; Hardware stack levels used:    1
 30516 ;; This function calls:
 30517 ;;		Nothing
 30518 ;; This function is called by:
 30519 ;;		i2_Motor_Step
 30520 ;; This function uses a non-reentrant model
 30521 ;;
 30522                           
 30523                           	psect	text168
 30524  016528                     __ptext168:
 30525                           	opt stack 0
 30526  016528                     i2_MXK_Queue:
 30527                           	opt stack 16
 30528                           
 30529                           ;MXK.c: 146: lQueue = pCallback;
 30530                           
 30531                           ;incstack = 0
 30532  016528  C001  F0B8         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30533  01652C  C002  F0B9         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30534  016530  C003  F0BA         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30535  016534  0012               	return		;funcret
 30536  016536                     __end_ofi2_MXK_Queue:
 30537                           	opt stack 0
 30538                           tosu	equ	0xFFF
 30539                           tosh	equ	0xFFE
 30540                           tosl	equ	0xFFD
 30541                           pclatu	equ	0xFFB
 30542                           pclath	equ	0xFFA
 30543                           tblptru	equ	0xFF8
 30544                           tblptrh	equ	0xFF7
 30545                           tblptrl	equ	0xFF6
 30546                           tablat	equ	0xFF5
 30547                           prodh	equ	0xFF4
 30548                           prodl	equ	0xFF3
 30549                           intcon	equ	0xFF2
 30550                           indf0	equ	0xFEF
 30551                           postinc0	equ	0xFEE
 30552                           fsr0h	equ	0xFEA
 30553                           fsr0l	equ	0xFE9
 30554                           wreg	equ	0xFE8
 30555                           indf1	equ	0xFE7
 30556                           postdec1	equ	0xFE5
 30557                           fsr1h	equ	0xFE2
 30558                           fsr1l	equ	0xFE1
 30559                           indf2	equ	0xFDF
 30560                           postinc2	equ	0xFDE
 30561                           postdec2	equ	0xFDD
 30562                           plusw2	equ	0xFDB
 30563                           fsr2h	equ	0xFDA
 30564                           fsr2l	equ	0xFD9
 30565                           status	equ	0xFD8
 30566                           tosu	equ	0xFFF
 30567                           tosh	equ	0xFFE
 30568                           tosl	equ	0xFFD
 30569                           pclatu	equ	0xFFB
 30570                           pclath	equ	0xFFA
 30571                           tblptru	equ	0xFF8
 30572                           tblptrh	equ	0xFF7
 30573                           tblptrl	equ	0xFF6
 30574                           tablat	equ	0xFF5
 30575                           prodh	equ	0xFF4
 30576                           prodl	equ	0xFF3
 30577                           intcon	equ	0xFF2
 30578                           indf0	equ	0xFEF
 30579                           postinc0	equ	0xFEE
 30580                           fsr0h	equ	0xFEA
 30581                           fsr0l	equ	0xFE9
 30582                           wreg	equ	0xFE8
 30583                           indf1	equ	0xFE7
 30584                           postdec1	equ	0xFE5
 30585                           fsr1h	equ	0xFE2
 30586                           fsr1l	equ	0xFE1
 30587                           indf2	equ	0xFDF
 30588                           postinc2	equ	0xFDE
 30589                           postdec2	equ	0xFDD
 30590                           plusw2	equ	0xFDB
 30591                           fsr2h	equ	0xFDA
 30592                           fsr2l	equ	0xFD9
 30593                           status	equ	0xFD8
 30594                           
 30595                           	psect	text169
 30596  000000                     __ptext169:
 30597                           	opt stack 0
 30598                           tosu	equ	0xFFF
 30599                           tosh	equ	0xFFE
 30600                           tosl	equ	0xFFD
 30601                           pclatu	equ	0xFFB
 30602                           pclath	equ	0xFFA
 30603                           tblptru	equ	0xFF8
 30604                           tblptrh	equ	0xFF7
 30605                           tblptrl	equ	0xFF6
 30606                           tablat	equ	0xFF5
 30607                           prodh	equ	0xFF4
 30608                           prodl	equ	0xFF3
 30609                           intcon	equ	0xFF2
 30610                           indf0	equ	0xFEF
 30611                           postinc0	equ	0xFEE
 30612                           fsr0h	equ	0xFEA
 30613                           fsr0l	equ	0xFE9
 30614                           wreg	equ	0xFE8
 30615                           indf1	equ	0xFE7
 30616                           postdec1	equ	0xFE5
 30617                           fsr1h	equ	0xFE2
 30618                           fsr1l	equ	0xFE1
 30619                           indf2	equ	0xFDF
 30620                           postinc2	equ	0xFDE
 30621                           postdec2	equ	0xFDD
 30622                           plusw2	equ	0xFDB
 30623                           fsr2h	equ	0xFDA
 30624                           fsr2l	equ	0xFD9
 30625                           status	equ	0xFD8
 30626                           
 30627                           	psect	rparam
 30628  0000                     tosu	equ	0xFFF
 30629                           tosh	equ	0xFFE
 30630                           tosl	equ	0xFFD
 30631                           pclatu	equ	0xFFB
 30632                           pclath	equ	0xFFA
 30633                           tblptru	equ	0xFF8
 30634                           tblptrh	equ	0xFF7
 30635                           tblptrl	equ	0xFF6
 30636                           tablat	equ	0xFF5
 30637                           prodh	equ	0xFF4
 30638                           prodl	equ	0xFF3
 30639                           intcon	equ	0xFF2
 30640                           indf0	equ	0xFEF
 30641                           postinc0	equ	0xFEE
 30642                           fsr0h	equ	0xFEA
 30643                           fsr0l	equ	0xFE9
 30644                           wreg	equ	0xFE8
 30645                           indf1	equ	0xFE7
 30646                           postdec1	equ	0xFE5
 30647                           fsr1h	equ	0xFE2
 30648                           fsr1l	equ	0xFE1
 30649                           indf2	equ	0xFDF
 30650                           postinc2	equ	0xFDE
 30651                           postdec2	equ	0xFDD
 30652                           plusw2	equ	0xFDB
 30653                           fsr2h	equ	0xFDA
 30654                           fsr2l	equ	0xFD9
 30655                           status	equ	0xFD8
 30656                           
 30657                           	psect	temp
 30658  000051                     btemp:
 30659                           	opt stack 0
 30660  000051                     	ds	1
 30661  0000                     int$flags	set	btemp
 30662  0000                     wtemp6	set	btemp+1
 30663                           tosu	equ	0xFFF
 30664                           tosh	equ	0xFFE
 30665                           tosl	equ	0xFFD
 30666                           pclatu	equ	0xFFB
 30667                           pclath	equ	0xFFA
 30668                           tblptru	equ	0xFF8
 30669                           tblptrh	equ	0xFF7
 30670                           tblptrl	equ	0xFF6
 30671                           tablat	equ	0xFF5
 30672                           prodh	equ	0xFF4
 30673                           prodl	equ	0xFF3
 30674                           intcon	equ	0xFF2
 30675                           indf0	equ	0xFEF
 30676                           postinc0	equ	0xFEE
 30677                           fsr0h	equ	0xFEA
 30678                           fsr0l	equ	0xFE9
 30679                           wreg	equ	0xFE8
 30680                           indf1	equ	0xFE7
 30681                           postdec1	equ	0xFE5
 30682                           fsr1h	equ	0xFE2
 30683                           fsr1l	equ	0xFE1
 30684                           indf2	equ	0xFDF
 30685                           postinc2	equ	0xFDE
 30686                           postdec2	equ	0xFDD
 30687                           plusw2	equ	0xFDB
 30688                           fsr2h	equ	0xFDA
 30689                           fsr2l	equ	0xFD9
 30690                           status	equ	0xFD8


Data Sizes:
    Strings     157
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     88     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     249
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_16(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[3]), STR_10(CODE[35]), STR_9(CODE[3]), 
		 -> STR_8(CODE[17]), STR_7(CODE[3]), STR_6(CODE[14]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _mode4->___fltol
    _mode3->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1824729
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  197891
                                              0 BANK3      5     5      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0    8986
                      _irobot_rotate
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                       10     6      4    8986
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  170606
                                             44 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3358
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194640
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8    6795
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1097
                                             82 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    8729
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3065
                                             39 BANK0     25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    4007
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  997184
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      F9      11       97.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B1      12        0.0%
DATA                 0      0     5DD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Sep 14 13:27:23 2017

                                 _update_angle 64BE                                  i2_Timer0_Stop 65BC  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3798                                              _A 004C  
                        __end_of_irobot_rotate 45CA                                              l8 3D40  
                                 ___fldiv@aexp 0086                                   ___fldiv@bexp 0085  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6356                                   ___fldiv@sign 007A  
                                           l11 3084                                             l12 306E  
                                           l90 2FBA                                             l85 2EB6  
                                           l87 2F24                                             l89 2F90  
                                 ___awdiv@sign 0065                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 0062                                  _HMI_DIPSwitch 63F4  
                           LCD_DrawField@pSize 0078                             LCD_DrawField@count 007E  
                   __end_of_irobot_stop_motion 5C2A                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 655A                           ADC_ClockDivision@reg 0061  
                                          l120 4BD0                                            l121 4BE6  
                                          l122 4BFC                                            l220 579C  
                                          l117 4C12                                            l221 5760  
                                          l118 4BBA                                            l230 59F8  
                                          l222 57AC                                            l223 577E  
                                  ?_LED_Toggle 0001                                            l234 5BD2  
                                          l235 5BA2                                            l227 5A14  
                                          l403 2B44                                            l412 2820  
                                          l228 59DC                                            l340 487E  
                                          l404 2AE4                                            l237 5BBA  
                                          l421 27B4                                            l413 26B6  
                                          l341 488C                                            l405 2B74  
                                ??_Console_Tab 0068                                            l430 3EB4  
                                          l414 283C                                            l350 4986  
                                          l342 489A                                            l510 1CE2  
                                          l406 2AFC                                            l415 26DC  
                                          l351 4916                                            l343 48A8  
                                          l511 1DF2                                            l407 2B14  
                                          l183 4A3A                                            l432 3EDE  
                                          l600 04B2                                            l344 48B6  
                                          l512 1D04                                            l408 2B2C  
                                          l184 4A14                                            l433 3F0E  
                                          l417 2748                                            l601 0646  
                                          l353 4924                                            l337 48E0  
                                          l345 48C4                                            l610 06CE  
                                          l602 04E4                                            l354 4932  
                                          l346 48D2                                            l338 4870  
                                          l370 4810                                            l427 3F38  
                                          l611 071C                                            l603 0658  
                                          l355 4940                                            l363 483A  
                                          l371 481E                                            l531 13F2  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 494E  
                                          l372 482C                                            l364 47CA  
                                          l532 1416                                            l516 1D4C  
                                          l357 495C                                            l509 1DD6  
                                          l614 084C                                            l358 496A  
                                          l366 47D8                                            l526 1436  
                                          l615 0844                                            l607 07B8  
                                          l359 4978                                            l367 47E6  
                                          l519 1D94                                            l616 085E  
                                          l608 0680                                            l368 47F4  
                                          l528 1454                                            l393 58CE  
                                          l617 0848                                            l609 07D6  
                                          l369 4802                                            l529 13D2  
                                          l483 1B42                                            l732 4B54  
                                          l900 18BA                                            l476 1C1A  
                                          l733 4B48                                            l901 18BE  
                                          l389 5624                                            l477 1A8C  
                                          l397 5B4E                                            l910 18E2  
                                          l902 18C2                                            l726 433E  
                                          l478 1C36                                            l486 1BAE  
                                          l654 6180                                            l911 18E6  
                                          l903 18C6                                            l727 4332  
                                          l479 1AD6                                            l655 6178  
                                          l912 18EA                                            l904 18CA  
                                          l824 5558                                            l832 5986  
                                          l913 18EE                                            l905 18CE  
                                          l921 54CE                                            l673 6058  
                                          l657 617C                                            l681 5426  
                                          l914 18F2                                            l906 18D2  
                                          l922 549A                                            l930 3B7E  
                                          l915 18F6                                            l907 18D6  
                                          l819 5068                                            l916 18FA  
                                          l908 18DA                                            l860 181A  
                                          l684 543C                                            l781 5EA2  
                                          l853 1902                                            l917 18FE  
                                          l909 18DE                                            l861 181E  
                                          l597 04C0                                            l870 1842  
                                          l862 1822                                            l854 1806  
                                          l598 04A8                                            l678 5462  
                                          l686 544C                                            l871 1846  
                                          l863 1826                                            l599 04D0  
                                          l679 5416                                            l880 186A  
                                          l872 184A                                            l864 182A  
                                          l856 180A                                            l928 3BFE  
                                          l776 5C5A                                            l881 186E  
                                          l873 184E                                            l865 182E  
                                          l857 180E                                            l929 3BCE  
                                          l890 1892                                            l882 1872  
                                          l874 1852                                            l866 1832  
                                          l858 1812                                            l891 1896  
                                          l883 1876                                            l875 1856  
                                          l867 1836                                            l859 1816  
                                          l892 189A                                            l884 187A  
                                          l876 185A                                            l868 183A  
                                          l893 189E                                            l885 187E  
                                          l877 185E                                            l869 183E  
                                          l894 18A2                                            l886 1882  
                                          l878 1862                                            l990 4CDC  
                                          l895 18A6                                            l887 1886  
                                          l879 1866                                            l983 4AD8  
                                          l896 18AA                                            l888 188A  
                                          l976 4D6A                                            l992 4CEC  
                                          l984 4A5C                                            l897 18AE  
                                          l889 188E                                            l985 4AD4  
                                          l898 18B2                                            l978 4D7A  
                                          l899 18B6                                            l997 5834  
                                          l999 5858                                            _PR2 000FCB  
                                          _dip 0325                                            _val 00CC  
                              __end_of_ADC_Off 659C                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 0079                                   _Word_GetPair 5E76  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 0067                     __end_of_ADC_ConversionTime 5B9C  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 0070                             Console_MakeField@y 0071  
                                   _TXSTA1bits 000FAD                                _update_distance 64AC  
                                 Console_Tab@c 006F                                   Console_Tab@i 006E  
                          LCD_DrawField@pField 0072                                   Console_Tab@t 006D  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 0094  
                                 ___flmul@bexp 0099                                     i2_delay_us 5D7C  
                         Port_Set@TypeRequired 0082                                   ___flmul@sign 0093  
                                 ___flmul@temp 009E                                   ___flmul@prod 009A  
                            Console_FormFeed@x 0062                              Console_FormFeed@y 0063  
                          LCD_DrawField@pPoint 0074                                 ?_LCD_DrawField 0072  
                        Port_SetPinType@Output 008A                                Port_SetPin@Type 0073  
                              Port_SetPin@pPin 0071                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 0069                                __end_of_LED_Set 5A26  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4674  
                                 ___fltol@exp1 00B7                                   _Word_SetPair 5C2A  
                                         l1000 5874                                           l1010 3FA8  
                                         l1004 56C4                                  ?_Byte_GetZone 0060  
                                         l1005 56F2                                           l1200 425E  
                                         l1040 286A                                           l1201 42B2  
                                         l1009 3FB4                                           l1041 2870  
                                         l1202 42CE                                           l1042 2876  
                                         l1043 287C                                           l1204 42F8  
                                         l1300 4DFC                                           l1036 29C6  
                                         l1044 2882                                           l1205 42DE  
                                         l1301 4E00                                           l1045 2888  
                                         l1037 2864                                           l2021 5654  
                                         l2101 2D06                                           l1302 4E0A  
                                         l1062 209E                                           l2110 5CF0  
                                         l2030 564C                                           l2022 5630  
                                         l2102 2C4A                                           l1207 430A  
                                         l1303 4E18                                           l1063 20CC  
                                         l1047 292E                                           l2031 5650  
                                         l2103 2C92                                           l1056 1F2E  
                                         l2112 5CDC                                           l2024 5634  
                                         l2040 38B4                                           l2104 2C50  
                                         l1313 5B7C                                           l1153 230C  
                                         l1057 20F4                                           l2025 5638  
                                         l2041 38BA                                           l1082 3E2E  
                                         l1058 1F36                                           l1146 4F8A  
                                         l2114 5CE4                                           l2026 563C  
                                         l2042 38C0                                           l1059 1F60  
                                         l2027 5640                                           l2035 394C  
                                         l2051 3920                                           l2043 38C6  
                                         l1084 3E36                                           l2028 5644  
                                         l2044 38CC                                           l2036 389E  
                                         l1077 3DFE                                           l2029 5648  
                                         l1254 64A0                                           l2118 5542  
                                         l1158 5DF8                                           l2070 4EC8  
                                         l2062 4E84                                           l2046 38E0  
                                         l2038 38A8                                           l2119 5504  
                                         l1079 3E0E                                           l2039 38AE  
                                         l1280 4F06                                           l2144 590C  
                                         l2312 08EC                                           l2305 4052  
                                         l2049 390C                                           l2321 0A3E  
                                         l2161 45A2                                           l2306 407E  
                                         l2074 4EE4                                           l2066 4EA4  
                                         l2058 4E6A                                           l2322 0A6E  
                                         l2162 458E                                           l2307 40AA  
                                         l1283 4F68                                           l2139 444A  
                                         l2315 0908                                           l1276 4EEE  
                                         l2420 25BC                                           l2324 0ABA  
                                         l2156 454E                                           l2317 0966  
                                         l1294 4E20                                           l1630 35D2  
                                         l2414 256A                                           l2334 0CC6  
                                         l2326 0B7C                                           l2342 3464  
                                         l2158 4554                                           l1295 4DE6  
                                         l1631 362E                                           l2415 2506  
                                         l2407 24EA                                           l2095 2C06  
                                         l2335 0C2C                                           l2327 0ADA  
                                         l2319 099E                                           l2159 4576  
                                         l1296 4E4A                                           l1632 3612  
                                         l2168 5C0E                                           l2600 4134  
                                         l2424 2612                                           l2416 251E  
                                         l2408 24FE                                           l2096 2BC0  
                                         l2360 149A                                           l1297 4DF0  
                                         l2601 4128                                           l2425 2670  
                                         l2409 252E                                           l2417 2528  
                                         l2337 0C64                                           l2329 0B12  
                                         l2345 3480                                           l1298 4DF4  
                                         l1730 5D10                                           l2426 2618  
                                         l2418 25A2                                           l2098 2C36  
                                         l2362 14E8                                           l1299 4DF8  
                                         l1627 367A                                           l2099 2C1A  
                                         l2347 353A                                           l2371 1772  
                                         l1724 5E44                                           l1732 5D38  
                                         l1628 3670                                           l2604 416A  
                                         l2348 34F0                                           l2372 16D0  
                                         l2364 1596                                           l1629 35F0  
                                         l2605 4178                                           l2357 147E  
                                         l1726 5E72                                           l2606 418C  
                                         l2374 1708                                           l2366 1636  
                                         l2390 39A4                                           l1735 638A  
                                         l2367 1666                                           l2391 39AA  
                                         l2384 398C                                           l2297 474A  
                                         l2377 17DC                                           l2369 16B0  
                                         l2385 3A38                                           l2386 3992  
                                         l1827 3338                                           l2299 477C  
                                         l1828 3358                                           l2388 3998  
                                         l2661 3734                                           l2389 399E  
                                         l2670 3786                                           l2662 3720  
                                         l1784 31D2                                           l2920 0CFA  
                                         l2833 5110                                           l1873 5EE8  
                                         l1785 31E0                                           l2921 0D28  
                                         l2834 5104                                           l2930 0E08  
                                         l2922 0D1E                                           l2843 57DC  
                                         l1787 31EA                                           l2931 0F0A  
                                         l2667 3760                                           l2659 36B2  
                                         l2844 57D0                                           l2780 41D4  
                                         l2940 0F42                                           l2932 0E86  
                                         l2924 0D58                                           l2668 3750  
                                         l2837 5146                                           l2781 41C4  
                                         l2933 0EBE                                           l2925 0D86  
                                         l2597 40F4                                           l2838 5154  
                                         l2950 1074                                           l2934 0EB2  
                                         l2926 0D7C                                           l2598 410A  
                                         l2847 5806                                           l2951 1078  
                                         l2935 0F06                                           l2848 5814  
                                         l2784 422E                                           l2928 0DDA  
                                         l2960 009C                                           l2785 4240  
                                         l2945 0FB0                                           l2961 00B4  
                                         l2938 0F56                                           l2962 00DC  
                                         l2954 001E                                           l2947 1000  
                                         l2939 0F2C                                           l2955 0048  
                                         l2948 102E                                           l2980 0482  
                                         l2956 0042                                           l2949 1064  
                                         l2973 03BE                                           l2957 005A  
                                         l2966 0364                                           l2958 0078  
                                         l2990 2404                                           l2975 040E  
                                         l2967 033A                                           l2959 00A2  
                                         l2991 23E6                                           l2983 2358  
                                         l2976 0434                                           l2968 0350  
                                         l2984 2368                                           l2993 2452  
                                         l2985 2390                                           l2978 0462  
                                         l2994 2442                                           l2979 048C  
                                         l2987 23A8                                           l2988 2398  
                                         l2998 2478                                           l2999 24CA  
                               ??_Console_Init 0060                          Port_SetPinType@pInput 0086  
                                         STR_1 FFFB                                           STR_2 FF61  
                                         STR_3 FFFB                                           STR_4 FF61  
                                         STR_5 FFFB                                           STR_6 FFED  
                                         STR_7 FFFB                                           STR_8 FFDC  
                                         STR_9 FFFB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 49B6  
                     __end_of_irobot_song_play 6498                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9110 413A                            __end_of_GetPortTRIS 486A  
                                         u9210 5596                                           u9300 33A4  
                                         u9150 41DA                                           u9330 59BE  
                                         u8620 4B1E                                           u9270 5AFA  
                                         u8704 5744                                           u8640 4B84  
                                         u9440 5CD0                                           u8705 573E  
                                         u9505 10E2                                           u8810 4D30  
                                         u8627 4B14                                           u9275 5AF4  
                                         u9515 10FA                                           u8724 437A  
                                         u8660 5002                                           u8820 4D36  
                                         u8645 4B7E                                           u8725 4374  
                                         u9285 32F0                                           u9525 111C  
                                         u8750 5CA4                                           u8734 43AC  
                                         u8735 43A6                                           u9535 129C  
                                         u9384 4C8C                                           u8840 5116  
                                         u9385 4C86                                           u9545 131A  
                                         u8755 5C9E                                           u9555 135C  
                                         _SPI1 0363                                           u9580 5FF2  
                                         _SPI2 036E                                           u9565 139E  
                                         u8694 5712                                           u8870 57E2  
                                         u8695 570C                                           u9495 10CA  
                                         u8960 3BEA                                           u9585 5FEC  
                                         u9850 597E                                           u9930 2B7A  
                                         u8970 56C0                                           u9828 3154  
                                         u8980 56EA                                           u8895 64DE  
                                         u9768 3DAC                                           u8896 64E0  
                                         _TMR0 000FD6                                           u9778 3018  
                                         u9970 3E78                                           u9890 5242  
                                         u9779 302C                                           u9980 3E84  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 0065  
                                         _gISR 0314                             Event_DIPSwitch@Bar 007A  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 0063  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 006F                                  ?_Byte_SetByte 0060  
                                ?_Byte_SetPair 006B                                __end_of_SPI_DCS 6066  
                                         _main 3988                     irobot_leds@powerLuminosity 0072  
                                         _init 471E                                           _mode 0323  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 006B  
                                         _itos 3B40                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 0060                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 50E6  
                                ??_Byte_SetBit 0064                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 0065  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 007F  
                            Timer0_Init@DIVIDE 0077                                ?_SPI_DisableISR 0060  
                             Motor_Move@pMotor 0063                            HMI_SetButton@pValue 0066  
                                Console_Init@x 0062                                  Console_Init@y 0063  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FF53  
                         Set_Rotation@rotation 0066                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                                    ?_ISR_Enable 0001  
                           _irobot_init_song_0 622A                   __size_of_Console_ClearCursor 0040  
                             __end_of_LCD_Fill 5984                               __end_of_LCD_Init 3006  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 57BC                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00A8                        GetPortProperties@pInput 0062  
                                ??_Button_Poll 007E                               __end_of_HMI_Init 230E  
                                        l12301 3BEA                                          l12163 4CD2  
                                        l12503 5558                                          l12511 5596  
                                        l12353 42F8                                          l14041 4D60  
                                        l12505 556A                                          l12169 4CE2  
                                        l14019 2F24                                          l13411 5226  
                                        l14117 22E0                                          l14029 2FC8  
                                        l13501 3DF4                                          l14047 4D70  
                                        l12607 5986                                          l13407 5218  
                                        l12609 5998                                          l14129 5DC6  
                                        l13611 31D2                                          l13507 3E04  
                                        l14075 1F56                                          l13383 5954  
                                        l12735 6502                                          l12569 3338  
                                        l13465 2ADA                                          l13537 4F82  
                                        l13387 5962                                          l14419 25C2  
                                        l16311 0B7C                                          l13817 1064  
                             __end_of_HMI_Poll 53A4                                          l16327 0C2C  
                                        l16293 0ADA                                          l16463 16D0  
                                        l16481 1772                                          _I2C1T 0040  
                                        _I2C2T 03BF                                  ___fltol@sign1 00B6  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 109C                                __end_of___awdiv 4196  
                        irobot_rotate@isScript 0082                                          ?_itos 006C  
                                        STR_10 FF8F                                          STR_11 FFFB  
                                        STR_12 FFC7                                          STR_13 FFB2  
                                        STR_14 FFB2                                          STR_15 FFB2  
                                        STR_16 FFB2                                __end_of___flmul 04A6  
                              __end_of___fltol 3798                                _Event_DIPSwitch 60C6  
                              __end_of___lldiv 4252                                          u10020 4FD8  
                                        u10015 4F9A                                          u10050 5B76  
                                        u10130 323E                                          u10160 35B0  
                                        u11120 25FE                                          u11040 4542  
                                        u10170 35C4                                          u10410 1014  
                                        u11210 376A                                          u10084 601E  
                                        u10180 3604                                          u10420 1042  
                                        u11140 267C                                          u10085 6018  
                                        u10510 00C8                                          u10600 0422  
                                        u10520 02DC                                          u10610 0448  
                                        u11170 36D2                        __size_of_HMI_LeftSwitch 0018  
                                        u10380 0FAA                                ___awdiv@divisor 0062  
                                        u10525 02D0                                          u11175 36C6  
                                        u10800 4DD2                                          u10730 2EB4  
                                        u10570 03B8                                          u11508 402E  
                                        u11509 4042                                          u11528 405A  
                                        u11529 406E                                          u10770 2FC8  
                                        u10690 2460                                          u11548 4086  
                                        u13500 08E0                                          u11549 409A  
                                        u10870 20DC                                          u13510 0902  
                                        u11568 40B2                                          u11569 40C6  
                                        u13428 5E0E                                          u13620 0B90  
                                        u13700 3458                                          u13429 5E24  
                                        u13710 347A                                          u13760 1472  
                                        u13770 1494                                          u13880 1786  
                                        _INDEX 00DC                                __end_of___lwdiv 515E  
                                        _MASKS FD63                                __end_of___lwmod 581E  
                                        i2l430 468C                                          i2l432 46B2  
                                        i2l433 46DC                                          i2l427 4702  
                                        i2l732 51AA                                          i2l733 51A4  
                                        i2l832 5D7E                                          i2l781 60B4  
                              ___awdiv@counter 0064                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 0076  
                              __end_of_getMode 40D8                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03AB                                          _PortB 03A1  
                                        _PortC 00EA                                          _PortD 00E0  
                                        _PortE 0397                                          _PortF 03B5  
                                        _PortG 038D                        __end_of_Port_SetPinType 285E  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 006C  
                        ??_irobot_led_power_on 0074                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 0075                                __end_of_dpowers FD63  
                               ??_Byte_GetZone 0065                      irobot_move@moveTurnRadius 0072  
                                        _mode1 08C4                                          _mode2 342C  
                                        _mode3 633A                                          _mode4 1456  
                               Button_Poll@Pin 0083                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 4018                               __end_of_MXK_Init 2E94  
                     __size_of_sort_iRBumpDrop 0088                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 64E2  
                             __end_of_SPI_Init 08C4                               __end_of_SPI_Send 5480  
                        __end_ofi2_MXK_Release 65C8                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 54EC  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 0063  
                            __end_of_ADC_Start 4F6E                                 ??_Byte_SetPair 006F  
                               ??_Byte_SetQuad 006F                                          plusw2 000FDB  
                               ??_Byte_SetZone 0066                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 53A4                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 0061  
                               _LCD_Word_Write 6286                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F1                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 0070                                   ?_irobot_init 0001  
                              __initialization 4472                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 0070                            __end_of_Byte_GetBit 6004  
                       irobot_leds@powerColour 0071                                   __end_of_main 3A68  
                                 __end_of_init 47C4               irobot_query_and_update@packetIDs 0075  
                                 __end_of_itos 3C18                           HMI_SetButton@reindex 0062  
                                 SPI_Send9@dat 00D4                            __end_of_Byte_SetBit 575A  
                             __end_of_InitList FD39                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 64E2                                      ??_ADC_Off 0060  
                      __end_of_update_distance 64BE                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 0068                                         ??_main 03F7  
                                       ??_init 00AA                                         ??_itos 0070  
                      _Console_MakeField$10974 006E                                  __activetblptr 000003  
                            Port_SetPin@pInput 006F                              __end_of_LCD_Reset 5A76  
                            Port_SetPin@pValue 0072                                      ??_LED_Set 0075  
                            _MXK_InitDIPSwitch 62E0                              GetPortPORT@pInput 0062  
                       Port_CheckPairType@Pin1 008A                         Port_CheckPairType@Pin2 008B  
                            __end_of_LCD_Write 61E6                                    _GetPortPORT 4910  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 47C4  
                              ??_LCD_DrawField 007C                     __end_of_PortProperty_Valid 506C  
                             __end_of_Port_Set 1456                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3DC2  
                          __end_of_Button_Poll 316C                              Word_GetPair@pPair 006E  
                      LCD_FillRectangle@pPoint 006B                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4C30                                      ??_SPI_DCS 0062  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 65B0                                  _HMI_SetNumber 614C  
                       Port_SetQuadType@Output 009A                                         _ANCON0 000FC1  
                             ___awdiv@dividend 0060                                         ?_putch 0001  
                             ??_Console_Render 0083                                  ToSegment@pCHR 0060  
                             _Console_FormFeed 4CC0                         Port_SetQuadType@pInput 0096  
                                       i2l1630 37FE                                         i2l1631 384A  
                                       i2l1632 3836                                         i2l1730 5FAC  
                                       i2l1627 3886                                         i2l1732 5FCC  
                                       i2l1628 387C                                         i2l1629 3814  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9087 5D7E  
                                       i2l9089 5D8E                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 62A4  
                               _Timer0_Restart 654E                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 009B                                         _TXREG1 000FAE  
                             __end_of___xxtofl 24DC                                 i2_MXK_SwitchTo 5F9A  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 0062  
                                   _Reset_High 62C2                             Console_Render@temp 0085  
                               ??_HMI_UpSwitch 0066                                 OutSeg@pSegment 0063  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 0077  
                       ADC_SetChannel@pChannel 0061                               __end_of_delay_ms 55C0  
                                 LED_Init@pLED 008D                               __end_of_delay_us 59D6  
                                ??_Timer0_Init 0071                                  ??_Timer2_Init 0071  
                                ??_Timer0_Stop 0060                                     _Timer0_ISR 60F4  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 007A  
                               __CFG_XINST$OFF 000000                                         _TimerX 00F9  
                                       _OutSeg 4F6E                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 3C18                     __end_of_load_iRScriptStack 5556  
                                   _Motor_Move 5F2A                                         _iRWall 0035  
                                ??_Motor_Speed 007F                                     _Motor_Step 3566  
                          rx_assign@byteNumber 0062                        __end_of_Event_DIPSwitch 60F4  
                                       ___wmul 5F64                                ??_HMI_DIPSwitch 0066  
                load_iRScriptStack@bytesToLoad 006E                                      ??___fldiv 0076  
                                    ??___awdiv 0064                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 008F  
                                       _lMotor 00CE                                      ??___fltol 0100  
                                    ??___lldiv 0068                                         _lQueue 00B8  
                                   _TestButton 0383                                      ??___lwdiv 0064  
                           __size_of_ToSegment 0284                                      ??___lwmod 006B  
                     __end_of_Port_SetQuadType 1CDA                       i2Byte_GetZone@pChunkSize 0005  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4DD8  
                            GetPortTRIS@pInput 0062                             __size_of_Reset_Low 001E  
                                       clear_0 44DA                                         clear_1 44EC  
                                       clear_2 44F8                                         clear_3 4504  
                                       clear_4 4510                               ___awdiv@quotient 0066  
                   irobot_stop_motion@isScript 0079                                  ?_eusart_getch 0001  
                                   Port_Init@i 00A5                                     _iRDistance 0327  
                            __end_of_MXK_Queue 6528                     __end_ofHMI_SetButton@F7213 FD70  
                                    ??_getMode 0084                                     _iRBumpLeft 00D6  
                                       _printf 24DC                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 62FE                                  _ADC_Calibrate 6498  
                                   _iRDropLeft 002E                                 HMI_SetButton@v 0067  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 0061  
                                  _Console_Tab 3F56                            LCD_Word_Write@value 0065  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 0063                       Port_CheckPortType@Output 0099  
                                    ?_ADC_Init 0064                             _twos_complement_of 5CB6  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC86  
                  __end_ofTimer2_Init@PRESCALE FD73                       Port_CheckPortType@pDrive 0098  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 0096  
                                ??_Port_SetPin 0073                                      ??_reverse 0064  
                                   _StepRotate 00C2                          Console_MakeField@Fill 0482  
                             ?_Port_SetPinType 0086                                         putch@c 0074  
                            Motor_Speed@pMotor 007B                                 ?_HMI_SetNumber 0076  
                               i2_Word_GetPair 6096                        __end_of_Configure_GPIOs 5414  
                          irobot_leds@isScript 0073                               ??_MXK_TestButton 0066  
                       __end_of_Timer0_Restart 655A                                  Set_Rotation@m 0065  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 0060  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 5FD0                                   ___xxtofl@arg 006A  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 0069  
                                 ___xxtofl@val 0060                          _update_bump_and_cliff 5EF0  
                              ?_LCD_Word_Write 0065                                     __accesstop 0060  
                      __end_of__initialization 4516                                      ?_LCD_Fill 0069  
        irobot_query_and_update@packetVariable 0079                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 0092                                    _Byte_GetBit 5FD0  
                                   _Stepstomin 00C0                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 6566                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 0068                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 0060                                     ___fltol@f1 00B2  
                                  _Byte_SetBit 56F6                                  __end_of_MASKS FD6C  
                               _PortA_Property FF5F                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 006B                                      LCD_Fill@j 006C  
                          load_iRScriptStack@i 006F                                      LCD_Init@i 0097  
                               __pcstackCOMRAM 0001                                 _PortB_Property FF5D  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 659C  
                                 __pidataBANK3 6536              irobot_move_straight@straightSpeed 0079  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 633A  
                              Console_Render@x 008A                                Console_Render@y 008B  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FD39                           __end_of_Byte_GetZone 4B98  
                                __end_of_mode1 0CDC                                  __end_of_mode2 3566  
                                __end_of_mode3 6356                                  __end_of_mode4 1800  
                         ??_twos_complement_of 0062                              irobot_leds@LEDBit 0070  
                               _PortC_Property FF5B                            __end_of_Timer0_Init 32CC  
                                __end_of_putch 64F0                                 ??_eusart_getch 0060  
                                    ?_MXK_Init 0001                            __end_of_Timer2_Init 342C  
                          __end_of_Timer0_Stop 65AA                                 ?_ADC_Calibrate 0001  
                                    ?_SPI_Init 008D                               ?_update_distance 0001  
                                    ?_SPI_Send 0060                                 ??_eusart_putch 0060  
                                  _Button_Init 3CEE                              Port_SetType@pType 009C  
                                  _Button_Poll 3006                           __end_of_Byte_SetByte 651A  
                         __end_of_Byte_SetPair 6208                                 _HMI_LeftSwitch 6454  
                               _PortD_Property FF59                           __end_of_Byte_SetQuad 622A  
                                 ??_LED_Toggle 0078                                   ??_HMI_GetBar 0060  
                   eusart_putch@eusartSendChar 0060                           __end_of_Byte_SetZone 43C2  
                          __end_of_Motor_Speed 614C                                 _HMI_DownSwitch 640C  
                                SPI_Send@pData 0062                          __end_of_MXK_DIPSwitch 63F4  
                                 ??_HMI_SetBar 0060                       __size_of_get_packet_size 0066  
                                 ??_HMI_Render 0068                                 _PortE_Property FF57  
                                   ??_ADC_Init 0067                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 60C6                        irobot_rotate@angleTotal 0083  
                               _PortF_Property FF55                        Port_CheckQuadType@Pair1 0093  
                      Port_CheckQuadType@Pair2 0094                       MXK_BlockSwitchTo@pModule 0067  
                                      ??_mode1 03EF                                        ??_mode2 008C  
                                      ??_mode3 0087                                        ??_mode4 03EF  
                                      ?_ADC_On 0001                              _Console_Backspace 581E  
                              ?_Timer0_Restart 0001                                        ??_putch 0074  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 5D3C  
                            __end_of_ToSegment 1A84                                 _PortG_Property FF53  
                                   __pbssBANK0 00B8                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 5CB6  
                           _irobot_stop_motion 5BE4                        Port_CheckQuadType@pQuad 0091  
                              reverse@iterator 0065                               ??_SPI_DisableISR 0062  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 62C2  
                    __size_of_Event_TestButton 003C                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 006B                                     ??_LCD_Init 0095  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 3F56  
                       __end_of_PortA_Property FF61               irobot_led_power_on@powerOnColour 0074  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 0060  
                                   ??_LED_Init 008D                       ADC_ClockDivision@pDivide 0060  
                           Byte_SetByte@pValue 0062                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                             _ADC_ConversionTime 5B54  
                                ?_Timer0_Clear 0001                                     ??_HMI_Init 00A8  
                           ??_irobot_song_play 0061                                     ??_HMI_Poll 0084  
                                ?_Timer2_Clear 0001                        Port_CheckPairType@Props 008D  
                       __end_of_PortB_Property FF5F                                  ?_Timer0_Start 0060  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 2B8E  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 0088  
                           __end_of_LED_Toggle 5BE4                             __end_of_HMI_GetBar 65BC  
                     LCD_FillRectangle@pColour 0069                                     _angleTotal 00C4  
                          ??_Console_Backspace 0062                              Set_Addr_Window@xe 0066  
                            Set_Addr_Window@ye 0067                              Set_Addr_Window@xs 0068  
                            Set_Addr_Window@ys 0065                                        ?_OutSeg 0063  
                                  ?_Motor_Init 008D                             Byte_SetPair@pInput 006B  
                                  ?_Motor_Move 0063                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 006E                             __end_of_HMI_SetBar 6584  
                       __end_of_PortC_Property FF5D                             Word_GetPair@pInput 006C  
                           __end_of_HMI_Render 5DFA                                 ??_Set_Rotation 0065  
                                    ?_Port_Set 006F                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 0060                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 0065                                   ??_ISR_Enable 0060  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 646C  
                       __end_of_PortD_Property FF5B                                        _ADC_AN0 00F4  
                                      _ADC_AN1 03D6                                        _ADC_AN2 03D1  
                                      _ADC_AN3 03CC                                     ??_MXK_Init 00A6  
                            Port_GetPin@pInput 0060                              _Console_MakeField 3DC2  
                                      _ADC_Off 6594                              ??_Console_NewLine 0060  
                     ADC_ClockDivision@unfound 0062                         __end_of_HMI_DownSwitch 6424  
                                   ??_SPI_Init 0093                         Event_TestButton@pState 0079  
                                   ??_SPI_Send 0063                                        ?_printf 0075  
                            ??_HMI_InitButtons 0060                     __size_of_MXK_InitDIPSwitch 001E  
                       __end_of_PortE_Property FF59                            Console_Render@F6956 03E3  
                           ?_Console_MakeField 0065                                        _COUNTER 0029  
                              ??_HMI_SetButton 0060                           __end_of_HMI_UpSwitch 643C  
                         ??_irobot_stop_motion 0079                                        _LED_Set 59D6  
                      _Console_IncrementCursor 5690                                      ?___xxtofl 0060  
                       __end_of_PortF_Property FF57                                    _gBackcolour 00D2  
                              ??_HMI_SetNumber 0078                                      _I2C1_Done 0320  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 031D  
                                    _I2C1_More 031A                                      _I2C2_More 0317  
                                    ?_delay_ms 0060                      __end_of_Console_Backspace 587A  
                                    ?_delay_us 0060                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 631C                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 0060  
                       __end_of_PortG_Property FF55                            ??_Console_MakeField 0067  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 00BE  
                                      _SPI_DCS 6036                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 0060                               ?_Configure_GPIOs 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 00AA                               ADC_Init@pChannel 0066  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00A4  
                           __end_of_ISR_Enable 657A                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 0060  
                            Event_TestButton@j 00D8                                     ??_Mode_Set 0060  
                               ??_Timer2_Clear 0060                                        _Font5x7 FD73  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 0061  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 0063                           SPI_DisableISR@pInput 0060  
                                ?_Port_GetQuad 0060                                Byte_SetBit@pBit 0062  
                         Port_TogglePin@pInput 0074                          __end_ofi2_Byte_SetBit 5AC2  
                                    _ADC_Start 4EEA                                        __Hparam 0000  
                            Port_GetQuad@pQuad 0062                                    _Timer0_Init 316C  
                                  _Timer2_Init 32CC                                        __Lparam 0000  
                                  _Timer0_Stop 65A4                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD59  
                                      _iRAngle 00C8                                  LCD_Write@mode 0063  
                              __size_of_OutSeg 0082                                     ??_Port_Set 0072  
                    __end_of_Console_MakeField 3E92                              _Console_PrintChar 285E  
                                  _Motor_Speed 6122                                        _Stepper 03C6  
                                ?_Port_SetType 009A                                        _gCursor 0047  
                                      ___fldiv 0CDC                                        ___awdiv 40D8  
                        ??_Console_ClearCursor 0060                                        ___flmul 0000  
                                      ___fltol 368C                                        _lBuffer 04C8  
                                      ___lldiv 4196                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 0060                                        ___lwdiv 50E6  
                                      ___lwmod 57BC                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4D4E                             ?_Console_PrintChar 0001  
                                      __pcinit 4472                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 4018  
                                      __ptext0 3988                                        __ptext1 1456  
                                      __ptext2 633A                                        __ptext3 4520  
                                      __ptext4 342C                                        __ptext5 63C4  
                                      __ptext6 08C4                                        __ptext7 64AC  
                                      __ptext8 5EF0                                        __ptext9 64BE  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6372                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD59                                      _T2CONbits 000FCA  
                                LED_Set@pValue 0074                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 0079                                     ??___xxtofl 0064  
                                 ?_GetPortPORT 0060                                   ?_GetPortTRIS 0060  
                          ??_Console_PrintChar 0070                                    _Port_GetPin 5C70  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03DF  
                          LCD_DrawRectangle@p4 03DB                                   ??i2_delay_us 0003  
                                   ??_delay_ms 0062                                     ??_delay_us 0062  
                                      _reverse 5480                                      _DIPSwitch 0379  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3E92  
                                  _iRBumpRight 00D7                                 LCD_DrawField@i 0082  
                                    _LCD_Reset 5A26                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 61C4                                    _iRDropRight 002F  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 0060  
                         end_of_initialization 4516                            ADC_SetupIO@pChannel 0062  
                            ??_get_packet_size 0060  irobot_query_and_update@numberOfPacketRequests 0078  
                                   delay_us@us 0060                              ??_HMI_SetSegments 0063  
                      Console_PrintChar@pInput 0073                                   _Console_Init 4D4E  
                         __end_of_eusart_getch 658C                        _irobot_query_and_update 2B8E  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 562A  
                         __end_of_eusart_putch 650C                                        itos@Out 0074  
                               ??_Port_GetQuad 0063                             _PortProperty_Valid 4FF0  
                                    i2u1344_48 610C                             Byte_SetQuad@pInput 006B  
                           SPI_MinSpeed@pInput 006F                             Byte_SetQuad@pValue 006E  
                          __end_of_ADC_SetupIO 6036                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 0064  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 0062  
                            ??_HMI_RightSwitch 0066                                ___lldiv@counter 006C  
                    __end_of_Console_PrintChar 29FC                            __end_of_ADC_Voltage 3B40  
                               ??_Port_SetType 009D                     __end_of_Port_CheckQuadType 58D4  
                                      printf@c 0084                                        printf@f 0075  
                               Port_Init@pPort 00A2                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 0069  
                            __end_of_rx_assign 3988                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 006F  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 5B54  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 5DBC  
                           Button_Init@pInitIO 009F                                  _irobot_rotate 4520  
                        Timer0_Init@pFrequency 006D                              ?_Port_SetQuadType 0096  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 0064  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 009A                                   ?_Console_Tab 0001  
                             Byte_GetZone@MASK 0066                          Console_Render@lCursor 0086  
                           _load_iRScriptStack 54EC                                      _MXK_Queue 651A  
                             __CFG_CPUDIV$OSC1 000000                                  ___xxtofl@sign 0068  
                             Byte_GetZone@pMax 0062                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 006C  
                              _Set_Addr_Window 45CA                                 SPI_Init@pClock 008D  
                             ??_LCD_Word_Write 0067                                _sort_iRBumpDrop 4E62  
                                  ___fldiv@grs 0081                                    ___fldiv@rem 007B  
                        __end_of_LCD_DrawField 4A5A                                 Port_Set@pInput 006F  
                               SPI_Init@pInput 0093                           ??_PortProperty_Valid 0073  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 0071  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4C30  
                                   ?_LCD_Write 0063                                   _Byte_GetPair 631C  
                           HMI_SetButton@F7213 FD6C                            ?_load_iRScriptStack 0060  
                                 _Byte_GetZone 4AFC                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 0080                              LCD_DrawField@ymax 0081  
                               __end_of_ADC_On 65B6                                 _Port_TogglePin 6066  
                             _Event_TestButton 5EB4                                    ___flmul@grs 0095  
                         Port_SetPinType@Props 008B                                   ?_Byte_GetBit 0060  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 650C  
                                 _Byte_SetPair 61E6                                ADC_SetupIO@MASK 0063  
                                 _Byte_SetQuad 6208                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 430C                           Port_SetPinType@pType 0089  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 0060  
                                ?_SPI_MaxSpeed 006F                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 0060                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 006F  
                        __end_ofi2_Timer0_Stop 65C2                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 007D  
                               __end_of_OutSeg 4FF0                           ??_load_iRScriptStack 006A  
                 __end_of_irobot_move_straight 63DC                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 5F9A                          __end_of_HMI_DIPSwitch 640C  
                                __pidataCOMRAM 6566                                   ?_Button_Init 009B  
                                 ?_Button_Poll 007B                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 654E                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6594                                 __end_of_printf 269E  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 0060  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 006C  
                             ??_Timer0_Restart 0060                           __end_of_Timer0_Start 61C4  
                           Port_SetType@Output 009F                            start_initialization 4472  
                                   ?_MXK_Queue 0060                       PortProperty_Valid@Errors 0075  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 51D4  
                           Port_SetType@pInput 009A                                 _ADC_SetChannel 638E  
                                   HMI_Init@in 00A8                            HMI_SetNumber@pInput 0076  
                        __end_ofi2_Port_SetPin 471E                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 0061                         __end_of_Port_TogglePin 6096  
                                ?_Word_SetPair 006F                              Byte_SetBit@pInput 0060  
                                     ??_ADC_On 0060                                 ??_MXK_SwitchTo 0066  
                            Byte_SetBit@pValue 0063                             ?_LCD_FillRectangle 0069  
                    ??_irobot_query_and_update 0070                            _Console_ResetCursor 624A  
                  PortProperty_Valid@pPinDrive 0071                                    _ADC_SetupIO 6004  
                         MXK_BlockSwitchTo@CUR 0066                       PortProperty_Valid@pInput 006F  
                                i2_MXK_Release 65C2                                    _ADC_Voltage 3A68  
                       LCD_FillRectangle@pSize 006F                                 SPI_Send@pInput 0060  
                                 ??_Reset_High 0074                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 0071                          Port_SetQuadType@pQuad 0098  
                                    _ToSegment 1800                            ??_LCD_FillRectangle 0073  
                        Port_SetQuadType@pType 0099                                _Console_NewLine 4A5A  
                               ??_SPI_MinSpeed 0071                                    ??_ADC_Start 0064  
                                 _HMI_UpSwitch 6424                                      _Reset_Low 62A4  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 65AA  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 007D                                 ADC_Init@pInput 0064  
                                    _gCharSize 03EB                               Timer2_Init@INDEX 00DA  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 0091                                       ??_OutSeg 0064  
                                    OutSeg@out 0067                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 0067                                   ??_Motor_Step 0074  
                                    _iRAngleSS 0304                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 0069  
                                     ??___wmul 0064                           ?_Console_ResetCursor 0001  
                                    _Port_Init 29FC                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03E3                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 0063                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 0060  
                           Byte_SetZone@pValue 0065                                  Mode_Set@pMode 0060  
                                     ??_printf 007D                        __end_of_Set_Addr_Window 4674  
                     Port_CheckQuadType@Output 0095                        __end_of_sort_iRBumpDrop 4EEA  
                                    _gLineSize 03E7                       Port_CheckQuadType@pDrive 0092  
                               ??_Word_GetPair 006F                       Port_CheckQuadType@pInput 008F  
                         __end_of_Port_GetQuad 5B0C                                      ___fldiv@a 0072  
                                    ___fldiv@b 006E                      __end_of_LCD_FillRectangle 5248  
                                  __pbssBIGRAM 04C8                         __end_of_ADC_SetChannel 63AA  
                                     ?_LED_Set 0074                                      ___flmul@a 008B  
                                    ___flmul@b 0087                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 0062                             __end_of_Reset_High 62E0  
                                __pcstackBANK0 0060                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03EF  
                      ??_update_bump_and_cliff 007D                                     itos@Length 0072  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 0073  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 6122                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 0079                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F04                                       ?_SPI_DCS 0060  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 0074  
                                ??_eusart_init 0060                                    ??_LCD_Write 0064  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3CEE                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 5F64                             __end_of_Motor_Step 368C  
                        Timer2_Init@pFrequency 006D                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 008C              twos_complement_of@complementValue 0060  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 0089  
                     Port_CheckPairType@pInput 0086                                 reverse@tempVar 0064  
                           _MXK_InitTestButton 62FE                                     ?_Reset_Low 0001  
                                 ?_Timer0_Init 006D                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 006D                               ??_HMI_LeftSwitch 0066  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 0060  
                                ??_irobot_leds 0073                                  ??_irobot_init 0061  
                              ??_irobot_rotate 0081                                  ??_irobot_move 0074  
                                _lStepFunction 00BB                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 006D                               ??_HMI_DownSwitch 0066  
                                    __pintcode 1408                                  __pmediumconst FC86  
                                 ?_Motor_Speed 007B                          ??_Console_ResetCursor 0060  
                                     ?___fldiv 006E                                       ?___awdiv 0060  
                                    __ptext100 3CEE                                      __ptext101 62E0  
                                    __ptext110 4FF0                                      __ptext102 65AA  
                                    __ptext111 6208                                      __ptext103 62FE  
                                    __ptext120 6498                                      __ptext112 430C  
                                    __ptext104 269E                                      __ptext121 65B0  
                                    __ptext113 4D4E                                      __ptext105 1A84  
                                    __ptext130 643C                                      __ptext122 6594  
                                    __ptext114 4EEA                                      __ptext106 5C2A  
                                    __ptext131 6454                                      __ptext123 4018  
                                    __ptext115 506C                                      __ptext107 61E6  
                                    __ptext140 57BC                                      __ptext132 646C  
                                    __ptext124 5330                                      __ptext116 6004  
                                    __ptext108 587A                                      __ptext141 50E6  
                                    __ptext133 5AC2                                      __ptext125 3006  
                                    __ptext117 638E                                      __ptext109 55C0  
                                    __ptext150 4AFC                                      __ptext142 4252  
                                    __ptext134 60C6                                      __ptext126 63DC  
                                    __ptext118 5B54                                      __ptext151 56F6  
                                    __ptext143 1800                                      __ptext135 1404  
                                    __ptext127 63F4                                      __ptext119 4DD8  
                                    __ptext160 4674                                      __ptext152 5C70  
                                    __ptext144 4C30                                      __ptext136 5EB4  
                                    __ptext128 640C                                      __ptext161 6096  
                                    __ptext153 657A                                      __ptext145 5B9C  
                                    __ptext137 614C                                      __ptext129 6424  
                                    __ptext162 63AA                                      __ptext154 65B6  
                                    __ptext146 6066                                      __ptext138 3B40  
                                    __ptext163 515E                                      __ptext147 3E92  
                                    __ptext139 5480                __end_of_irobot_query_and_update 2D14  
                                    __ptext164 5A76                                      __ptext156 60F4  
                                    __ptext148 5E76                                      __ptext165 5F9A  
                                    __ptext157 3798                                      __ptext149 631C  
                                    __ptext166 5D7C                                      __ptext158 65BC  
                                    _pShiftVal 00CA                                      __ptext167 65C2  
                                    __ptext159 655A                                      __ptext168 6528  
                                    __ptext169 0000                                       ?___flmul 0087  
                                     ?___fltol 00B2                                       ?___lldiv 0060  
                                   ?_Port_Init 00A0                           Timer0_Init@pCPUClock 0073  
                                     ?___lwdiv 0060                                       ?___lwmod 0067  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 486A                                       ?_getMode 0001  
                                 _eusart_getch 6584                    __end_ofTimer0_Init@PRESCALE FD49  
                              _get_packet_size 562A                                   _eusart_putch 64FE  
                           ??_Console_FormFeed 0060                                _HMI_SetSegments 4252  
                           ?_GetPortProperties 0060                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 0063                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 0060                                       _ADC_Init 506C  
                 irobot_rotate@rotateDirection 0085                          __end_of_HMI_SetButton 4CC0  
                         __size_of_Console_Tab 00C2                                       ?_reverse 0060  
                         irobot_move@moveSpeed 0070                                   ?_Port_SetPin 006F  
                        __end_of_HMI_SetNumber 6176                               ___lwdiv@quotient 0065  
                              _HMI_RightSwitch 643C                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 0418                                 __size_of_mode2 013A  
                               __size_of_mode3 001C                                 __size_of_mode4 03AA  
                          ??_GetPortProperties 0062                        __end_of_Console_NewLine 4AFC  
                         ??_MXK_InitTestButton 008D                             Byte_GetPair@pInput 0069  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 65B0  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 63C4  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 63AA  
                                     _LCD_Fill 592C                                       _LCD_Init 2E94  
                               ___wmul@product 0064                                       _HMIBoard 0329  
                               i2_Byte_GetZone 515E                                       _LED_Init 575A  
                                    delay_ms@u 0062                             Button_Poll@pButton 007B  
                                    delay_us@u 0062                                       _HMI_Init 2114  
                                     _HMI_Poll 5330                             MXK_Queue@pCallback 0060  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6286  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5D7C  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 006D                                       _PIR1bits 000F9E  
                                     _PIR3bits 000FA4                                       i2u551_40 5DAA  
                                     i2u711_40 37DC                                       i2u712_40 37F0  
                                     i2u713_40 3828                                       i2u490_40 5180  
                                     i2u490_47 5176                                       i2u547_44 5A8A  
                                     i2u547_45 5A86                                       i2u492_40 51C8  
                                     i2u548_44 5AB0                                       i2u548_45 5AAC  
                                     i2u492_45 51C4                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15584 03F3                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 0061                               HMI_SetBar@pValue 0060  
                            Button_Init@pInput 009B                        __size_of_SPI_DisableISR 0028  
                                  _mode4$15585 03F0                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 008A                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4910  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4B98  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5D3C  
                           _Port_CheckPairType 55C0                                       _MXK_Init 2D14  
                        __size_of_Timer0_Start 0026                                MXK_SwitchTo@CUR 0066  
                        __end_of_ADC_Calibrate 64AC                            __end_of_irobot_leds 592C  
                                     _SPI_Init 04A6                            __end_of_irobot_init 64FE  
                     __end_of_Event_TestButton 5EF0                                       _SPI_Send 5414  
                          __end_of_irobot_move 4472                                      _rx_assign 3898  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 0065  
                            ___wmul@multiplier 0060                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 0064                                     printf@flag 007F  
                         Timer2_Init@pCPUClock 0076                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 52BC  
                                   printf@prec 007E                          Motor_Speed@pFrequency 007D  
                            Byte_GetBit@pInput 0060                            Port_SetPinType@pPin 0088  
                         __size_of_Button_Poll 0166                                  _MXK_DIPSwitch 63DC  
                           _Port_CheckQuadType 587A                            ?_Port_CheckPairType 0086  
                         __end_of_SPI_MinSpeed 5330                                  ??_MXK_Dequeue 0076  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 5B0C                           __end_of_update_angle 64D0  
                        Button_Poll@pIncrement 007D                        PortProperty_Valid@F6830 FD49  
                         __end_ofi2_Motor_Step 3898                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 4486  
                                    copy_data1 44A6                                      copy_data2 44C6  
                                ??_MXK_Release 0060                         __end_ofi2_Byte_GetPair 63C4  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 008F                          ?_irobot_move_straight 0079  
                       __end_ofi2_Byte_GetZone 51D4                            __end_ofi2_MXK_Queue 6536  
                                    mode2@dist 008C                            ?_Port_CheckPortType 0096  
                              itos@destination 006E                                       _InitList FC87  
                   __end_of_irobot_init_song_0 624A                           _Motor_Step$intlevel0 356C  
                                     _Mode_Set 64D0                             Port_GetQuad@Output 0065  
                            ??_update_distance 007D                                    ??_ToSegment 0060  
                                 _ISR_Function 1408                                   _Timer0_Clear 6542  
                           Port_GetQuad@pInput 0060                                   _Timer2_Clear 658C  
                         __end_of_Word_GetPair 5EB4                                       _lCBuffer 0400  
                         ??_Port_CheckPairType 008A                                    ??_Reset_Low 0074  
                                     __Hrparam 0000                                   _Timer0_Start 619E  
                                 OutSeg@pInput 0066                                 _Console_Render 1F04  
                                     __Lrparam 0000                                Timer2_Init@RDIV 0072  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                            _stepsToMinDegrees 0300                                 LCD_Write@value 0064  
                                     _Port_Set 109C                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5C70  
                      __end_of_get_packet_size 5690                                    ??_Port_Init 00A3  
                      __end_of_HMI_SetSegments 430C                           ??_Port_CheckQuadType 0093  
                             __size_of___fldiv 03C0                               _irobot_song_play 6484  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5E38  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 0099  
                             __size_of___lwmod 0062                                       _lBufferX 00DE  
                                     _lBufferY 00DD                            Timer2_Init@PRESCALE FD70  
                                   ?_rx_assign 0061                                LCD_Fill@pColour 0069  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 00D0                               __size_of_getMode 00C0  
                      __end_of_HMI_RightSwitch 6454                         Byte_GetZone@pChunkSize 0064  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 0064  
                        __size_of_Port_SetType 022A                                  reverse@length 0062  
                                    itos@input 006C                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 230E                            irobot_move@isScript 0078  
                           Motor_Init@pAddress 008F                                       _delay_ms 5556  
                                     _delay_us 5984                                       _clearall 00DF  
                              ___lwdiv@divisor 0062                                ___lwdiv@counter 0064  
                              Port_GetPin@pPin 0062                                       __ptext10 2B8E  
                                     __ptext11 3898                                       __ptext20 5690  
                                     __ptext12 4E62                                       __ptext21 4A5A  
                                     __ptext13 562A                                       __ptext30 368C  
                                     __ptext22 4CC0                                       __ptext14 6584  
                                     __ptext31 6122                                       __ptext23 624A  
                                     __ptext15 24DC                                       __ptext40 3DC2  
                                     __ptext32 5F2A                                       __ptext24 581E  
                                     __ptext16 64E2                                       __ptext41 5FD0  
                                     __ptext33 619E                                       __ptext25 5D3C  
                                     __ptext17 285E                                       __ptext50 622A  
                                     __ptext42 3A68                                       __ptext34 5DBC  
                                     __ptext26 5BE4                                       __ptext18 3F56  
                                     __ptext51 64F0                                       __ptext43 230E  
                                     __ptext35 4F6E                                       __ptext27 43C2  
                                     __ptext19 40D8                                       __ptext60 5B0C  
                                     __ptext52 64FE                                       __ptext44 0000  
                                     __ptext36 1F04                                       __ptext28 5CB6  
                                     __ptext61 109C                                       __ptext53 6268  
                                     __ptext45 0CDC                                       __ptext37 51D4  
                                     __ptext29 6484                                       __ptext70 65A4  
                                     __ptext62 650C                                       __ptext54 3C18  
                                     __ptext46 471E                                       __ptext38 49B6  
                                     __ptext71 654E                                       __ptext63 47C4  
                                     __ptext55 316C                                       __ptext47 6356  
                                     __ptext39 5F64                            ??_MXK_BlockSwitchTo 0066  
                                     __ptext80 45CA                                       __ptext72 5CFA  
                                     __ptext64 486A                                       __ptext56 6542  
                                     __ptext48 58D4                                       __ptext81 6286  
                                     __ptext73 6372                                       __ptext65 4910  
                                     __ptext57 2D14                                       __ptext49 54EC  
                                     __ptext90 62C2                                       __ptext82 61C4  
                                     __ptext74 651A                                       __ptext66 575A  
                                     __ptext58 29FC                                       __ptext91 6570  
                                     __ptext83 5414                                       __ptext75 5E38  
                                     __ptext67 59D6                                       __ptext59 1CDA  
                                     __ptext92 2114                                       __ptext84 64D0  
                                     __ptext76 5984                                       __ptext68 5DFA  
                                     __ptext93 52BC                                       __ptext85 53A4  
                                     __ptext77 2E94                                       __ptext69 3566  
                                     __ptext94 04A6                                       __ptext86 5248  
                                     __ptext78 4B98                                       __ptext95 32CC  
                                     __ptext87 5A26                                       __ptext79 592C  
                                     __ptext96 4196                                       __ptext88 5556  
                                     __ptext97 658C                                       __ptext89 62A4  
                                     __ptext98 6176                                       __ptext99 6036  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 4DD8  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 6268  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 0079                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00A0  
                          __end_of_MXK_Dequeue 5E38                              HMI_SetSegments@in 0064  
                        Button_Init@pThreshold 009D                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 006B                         __end_of_Console_Render 2114  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5AC2                            __end_of_MXK_Release 638E  
                               _MXK_TestButton 646C                                  i2_Byte_SetBit 5A76  
                          ??_ADC_ClockDivision 0060                                   _iRDistanceSS 0308  
                                  _irobot_leds 58D4                                    _irobot_init 64F0  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 43C2  
                               ADC_Voltage@max 00A6                                 ADC_Voltage@ref 00AA  
                    __end_of_MXK_BlockSwitchTo 5E76                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1CDA                                   Port_Set@Type 0086  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002D                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 0095                                      printf@val 0082  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 0310                                 Timer0_Init@PRE 00DB  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5B9C  
                                   _HMI_GetBar 65B6                           Button_Init@pGetState 00A2  
                       PortProperty_Valid@Pair 0085                               ??_Port_TogglePin 0077  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 0072                                     _HMI_SetBar 657A  
                                   _HMI_Render 5DBC                               Byte_SetZone@MASK 006A  
                                  i2_MXK_Queue 6528                      __end_of_ADC_ClockDivision 4E62  
                               Timer2_Init@DIV 030C                                 Timer2_Init@PRE 00D9  
                             Byte_SetZone@pMax 0062                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 007B  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 00A5  
                                     itos@Data 0070                  __end_of_update_bump_and_cliff 5F2A  
                           LCD_FillRectangle@i 0075                             LCD_FillRectangle@j 0076  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 0060                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 0067                               ___lldiv@dividend 0060  
                       __end_of_MXK_TestButton 6484                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 041E  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 007C  
                     irobot_query_and_update@j 007A                                 _SPI_DisableISR 6176  
                   __end_of_twos_complement_of 5CFA                       irobot_rotate@rotateAngle 007D  
                              Port_Init@pInput 00A0                                       printf@ap 0080  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 007F                                     _ISR_Enable 6570  
                             ?_HMI_SetSegments 0061                        Console_MakeField@Column 006C  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 0060  
                                SPI_DCS@pInput 0060                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 0066                                    ??_rx_assign 0063  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00A0                        Console_MakeField@pInput 006B  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 0068  
                                ??_GetPortPORT 0062                                ___lwmod@divisor 0069  
                                ??_GetPortTRIS 0062                          Timer0_Start@pFunction 0060  
                           Word_SetPair@pInput 006F                                ___lwmod@counter 006B  
                           Word_SetPair@pValue 0072                       ?_irobot_query_and_update 0066  
                             Motor_Init@pMotor 008D                                    _MXK_Dequeue 5DFA  
                            ADC_Voltage@output 00AE                                  _distanceTotal 00C6  
                               LED_Toggle@pLED 0078                                  _LCD_DrawField 49B6  
                             _Port_SetQuadType 1A84                                    _MXK_Release 6372  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5CFA  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 007B  
                           Byte_GetZone@Offset 0067                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 0071                                _Port_SetPinType 269E  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 0068  
                           Byte_GetZone@pChunk 0063                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 6268                             Byte_GetZone@pInput 0060  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 56F6  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 619E  
                                 _SPI_MaxSpeed 5248              irobot_query_and_update@streamSize 0077  
                                 _SPI_MinSpeed 52BC                             Port_Set@TypeActual 0084  
