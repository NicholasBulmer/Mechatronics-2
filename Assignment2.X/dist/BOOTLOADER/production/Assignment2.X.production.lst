

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Sep 14 22:08:03 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,inline
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   198                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   199  0000                     
   200                           ; Version 1.43
   201                           ; Generated 25/07/2017 GMT
   202                           ; 
   203                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   204                           ; All rights reserved.
   205                           ; 
   206                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   207                           ; 
   208                           ; Redistribution and use in source and binary forms, with or without modification, are
   209                           ; permitted provided that the following conditions are met:
   210                           ; 
   211                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   212                           ;        conditions and the following disclaimer.
   213                           ; 
   214                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   215                           ;        of conditions and the following disclaimer in the documentation and/or other
   216                           ;        materials provided with the distribution.
   217                           ; 
   218                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   219                           ;        software without specific prior written permission.
   220                           ; 
   221                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   222                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   223                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   224                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   225                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   226                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   227                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   228                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   229                           ; 
   230                           ; 
   231                           ; Code-generator required, PIC18F67J50 Definitions
   232                           ; 
   233                           ; SFR Addresses
   234  0000                     
   235                           	psect	idataCOMRAM
   236  016566                     __pidataCOMRAM:
   237                           	opt stack 0
   238                           
   239                           ;initializer for _gCursor
   240  016566  0006               	dw	6
   241  016568  0006               	dw	6
   242                           
   243                           ;initializer for _Bus_State
   244  01656A  01                 	db	1
   245                           
   246                           ;initializer for _A
   247  01656B  41                 	db	65
   248                           
   249                           ;initializer for _a
   250  01656C  61                 	db	97
   251                           
   252                           ;initializer for _zero
   253  01656D  30                 	db	48
   254                           
   255                           ;initializer for _l
   256  01656E  80                 	db	128
   257                           
   258                           ;initializer for _w
   259  01656F  80                 	db	128
   260                           
   261                           	psect	idataBANK0
   262  01659C                     __pidataBANK0:
   263                           	opt stack 0
   264                           
   265                           ;initializer for _TimerX
   266  01659C  0008               	dw	8
   267                           
   268                           ;initializer for _MinDist
   269  01659E  03E8               	dw	1000
   270                           
   271                           ;initializer for _gForecolour
   272  0165A0  FFFF               	dw	65535
   273                           
   274                           ;initializer for _change
   275  0165A2  01                 	db	1
   276                           
   277                           	psect	idataBANK3
   278  016536                     __pidataBANK3:
   279                           	opt stack 0
   280                           
   281                           ;initializer for Console_Render@F6956
   282  016536  0006               	dw	6
   283  016538  0006               	dw	6
   284                           
   285                           ;initializer for _gLineSize
   286  01653A  0080               	dw	128
   287  01653C  0007               	dw	7
   288                           
   289                           ;initializer for _gCharSize
   290  01653E  0005               	dw	5
   291  016540  0007               	dw	7
   292                           
   293                           	psect	mediumconst
   294  00FC7E                     __pmediumconst:
   295                           	opt stack 0
   296  00FC7E  00                 	db	0
   297  00FC7F                     _InitList:
   298                           	opt stack 0
   299  00FC7F  1100               	dw	4352
   300  00FC81  0080               	dw	128
   301  00FC83  012C               	dw	300
   302  00FC85  B100               	dw	45312
   303  00FC87  0002               	dw	2
   304  00FC89  0035               	dw	53
   305  00FC8B  0036               	dw	54
   306  00FC8D  B200               	dw	45568
   307  00FC8F  0002               	dw	2
   308  00FC91  0035               	dw	53
   309  00FC93  0036               	dw	54
   310  00FC95  B300               	dw	45824
   311  00FC97  0002               	dw	2
   312  00FC99  0035               	dw	53
   313  00FC9B  0036               	dw	54
   314  00FC9D  0002               	dw	2
   315  00FC9F  0035               	dw	53
   316  00FCA1  0036               	dw	54
   317  00FCA3  B400               	dw	46080
   318  00FCA5  0000               	dw	0
   319  00FCA7  C000               	dw	49152
   320  00FCA9  00A2               	dw	162
   321  00FCAB  0002               	dw	2
   322  00FCAD  0084               	dw	132
   323  00FCAF  C100               	dw	49408
   324  00FCB1  00C5               	dw	197
   325  00FCB3  C200               	dw	49664
   326  00FCB5  000D               	dw	13
   327  00FCB7  0000               	dw	0
   328  00FCB9  C300               	dw	49920
   329  00FCBB  008D               	dw	141
   330  00FCBD  002A               	dw	42
   331  00FCBF  C400               	dw	50176
   332  00FCC1  008D               	dw	141
   333  00FCC3  00EE               	dw	238
   334  00FCC5  C500               	dw	50432
   335  00FCC7  000A               	dw	10
   336  00FCC9  3600               	dw	13824
   337  00FCCB  00C8               	dw	200
   338  00FCCD  E000               	dw	57344
   339  00FCCF  0012               	dw	18
   340  00FCD1  001C               	dw	28
   341  00FCD3  0010               	dw	16
   342  00FCD5  0018               	dw	24
   343  00FCD7  0033               	dw	51
   344  00FCD9  002C               	dw	44
   345  00FCDB  0025               	dw	37
   346  00FCDD  0028               	dw	40
   347  00FCDF  0028               	dw	40
   348  00FCE1  0027               	dw	39
   349  00FCE3  002F               	dw	47
   350  00FCE5  003C               	dw	60
   351  00FCE7  0000               	dw	0
   352  00FCE9  0003               	dw	3
   353  00FCEB  0003               	dw	3
   354  00FCED  0010               	dw	16
   355  00FCEF  0080               	dw	128
   356  00FCF1  0078               	dw	120
   357  00FCF3  E100               	dw	57600
   358  00FCF5  0012               	dw	18
   359  00FCF7  001C               	dw	28
   360  00FCF9  0010               	dw	16
   361  00FCFB  0018               	dw	24
   362  00FCFD  002D               	dw	45
   363  00FCFF  0028               	dw	40
   364  00FD01  0023               	dw	35
   365  00FD03  0028               	dw	40
   366  00FD05  0028               	dw	40
   367  00FD07  0026               	dw	38
   368  00FD09  002F               	dw	47
   369  00FD0B  003B               	dw	59
   370  00FD0D  0000               	dw	0
   371  00FD0F  0003               	dw	3
   372  00FD11  0003               	dw	3
   373  00FD13  0010               	dw	16
   374  00FD15  3A00               	dw	14848
   375  00FD17  0005               	dw	5
   376  00FD19  2A00               	dw	10752
   377  00FD1B  0000               	dw	0
   378  00FD1D  0002               	dw	2
   379  00FD1F  0000               	dw	0
   380  00FD21  0081               	dw	129
   381  00FD23  2B00               	dw	11008
   382  00FD25  0000               	dw	0
   383  00FD27  0003               	dw	3
   384  00FD29  0000               	dw	0
   385  00FD2B  00A2               	dw	162
   386  00FD2D  2900               	dw	10496
   387  00FD2F  2C00               	dw	11264
   388  00FD31                     __end_of_InitList:
   389                           	opt stack 0
   390  00FD31                     Timer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FD31  0002               	dw	2
   393  00FD33  0004               	dw	4
   394  00FD35  0008               	dw	8
   395  00FD37  0010               	dw	16
   396  00FD39  0020               	dw	32
   397  00FD3B  0040               	dw	64
   398  00FD3D  0080               	dw	128
   399  00FD3F  0100               	dw	256
   400  00FD41                     __end_ofTimer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FD41                     PortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FD41  00                 	db	0
   405  00FD42  01                 	db	1
   406  00FD43  02                 	db	2
   407  00FD44  00                 	db	0
   408  00FD45  01                 	db	1
   409  00FD46  00                 	db	0
   410  00FD47  01                 	db	1
   411  00FD48  00                 	db	0
   412  00FD49  02                 	db	2
   413  00FD4A  02                 	db	2
   414  00FD4B  00                 	db	0
   415  00FD4C  00                 	db	0
   416  00FD4D  03                 	db	3
   417  00FD4E  03                 	db	3
   418  00FD4F  03                 	db	3
   419  00FD50  00                 	db	0
   420  00FD51                     __end_ofPortProperty_Valid@F6830:
   421                           	opt stack 0
   422  00FD51                     _dpowers:
   423                           	opt stack 0
   424  00FD51  0001               	dw	1
   425  00FD53  000A               	dw	10
   426  00FD55  0064               	dw	100
   427  00FD57  03E8               	dw	1000
   428  00FD59  2710               	dw	10000
   429  00FD5B                     __end_of_dpowers:
   430                           	opt stack 0
   431  00FD5B                     _MASKS:
   432                           	opt stack 0
   433  00FD5B  00                 	db	0
   434  00FD5C  01                 	db	1
   435  00FD5D  03                 	db	3
   436  00FD5E  07                 	db	7
   437  00FD5F  0F                 	db	15
   438  00FD60  1F                 	db	31
   439  00FD61  3F                 	db	63
   440  00FD62  7F                 	db	127
   441  00FD63  FF                 	db	255
   442  00FD64                     __end_of_MASKS:
   443                           	opt stack 0
   444  00FD64                     HMI_SetButton@F7213:
   445                           	opt stack 0
   446  00FD64  00                 	db	0
   447  00FD65  02                 	db	2
   448  00FD66  01                 	db	1
   449  00FD67  03                 	db	3
   450  00FD68                     __end_ofHMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD68                     Timer2_Init@PRESCALE:
   453                           	opt stack 0
   454  00FD68  01                 	db	1
   455  00FD69  04                 	db	4
   456  00FD6A  10                 	db	16
   457  00FD6B                     __end_ofTimer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD6B                     _Font5x7:
   460                           	opt stack 0
   461  00FD6B  00                 	db	0
   462  00FD6C  00                 	db	0
   463  00FD6D  00                 	db	0
   464  00FD6E  00                 	db	0
   465  00FD6F  00                 	db	0
   466  00FD70  00                 	db	0
   467  00FD71  00                 	db	0
   468  00FD72  5F                 	db	95
   469  00FD73  00                 	db	0
   470  00FD74  00                 	db	0
   471  00FD75  00                 	db	0
   472  00FD76  07                 	db	7
   473  00FD77  00                 	db	0
   474  00FD78  07                 	db	7
   475  00FD79  00                 	db	0
   476  00FD7A  14                 	db	20
   477  00FD7B  7F                 	db	127
   478  00FD7C  14                 	db	20
   479  00FD7D  7F                 	db	127
   480  00FD7E  14                 	db	20
   481  00FD7F  24                 	db	36
   482  00FD80  2A                 	db	42
   483  00FD81  7F                 	db	127
   484  00FD82  2A                 	db	42
   485  00FD83  12                 	db	18
   486  00FD84  23                 	db	35
   487  00FD85  13                 	db	19
   488  00FD86  08                 	db	8
   489  00FD87  64                 	db	100
   490  00FD88  62                 	db	98
   491  00FD89  36                 	db	54
   492  00FD8A  49                 	db	73
   493  00FD8B  55                 	db	85
   494  00FD8C  22                 	db	34
   495  00FD8D  50                 	db	80
   496  00FD8E  00                 	db	0
   497  00FD8F  05                 	db	5
   498  00FD90  03                 	db	3
   499  00FD91  00                 	db	0
   500  00FD92  00                 	db	0
   501  00FD93  00                 	db	0
   502  00FD94  1C                 	db	28
   503  00FD95  22                 	db	34
   504  00FD96  41                 	db	65
   505  00FD97  00                 	db	0
   506  00FD98  00                 	db	0
   507  00FD99  41                 	db	65
   508  00FD9A  22                 	db	34
   509  00FD9B  1C                 	db	28
   510  00FD9C  00                 	db	0
   511  00FD9D  08                 	db	8
   512  00FD9E  2A                 	db	42
   513  00FD9F  1C                 	db	28
   514  00FDA0  2A                 	db	42
   515  00FDA1  08                 	db	8
   516  00FDA2  08                 	db	8
   517  00FDA3  08                 	db	8
   518  00FDA4  3E                 	db	62
   519  00FDA5  08                 	db	8
   520  00FDA6  08                 	db	8
   521  00FDA7  00                 	db	0
   522  00FDA8  50                 	db	80
   523  00FDA9  30                 	db	48
   524  00FDAA  00                 	db	0
   525  00FDAB  00                 	db	0
   526  00FDAC  08                 	db	8
   527  00FDAD  08                 	db	8
   528  00FDAE  08                 	db	8
   529  00FDAF  08                 	db	8
   530  00FDB0  08                 	db	8
   531  00FDB1  00                 	db	0
   532  00FDB2  60                 	db	96
   533  00FDB3  60                 	db	96
   534  00FDB4  00                 	db	0
   535  00FDB5  00                 	db	0
   536  00FDB6  20                 	db	32
   537  00FDB7  10                 	db	16
   538  00FDB8  08                 	db	8
   539  00FDB9  04                 	db	4
   540  00FDBA  02                 	db	2
   541  00FDBB  3E                 	db	62
   542  00FDBC  51                 	db	81
   543  00FDBD  49                 	db	73
   544  00FDBE  45                 	db	69
   545  00FDBF  3E                 	db	62
   546  00FDC0  00                 	db	0
   547  00FDC1  42                 	db	66
   548  00FDC2  7F                 	db	127
   549  00FDC3  40                 	db	64
   550  00FDC4  00                 	db	0
   551  00FDC5  42                 	db	66
   552  00FDC6  61                 	db	97
   553  00FDC7  51                 	db	81
   554  00FDC8  49                 	db	73
   555  00FDC9  46                 	db	70
   556  00FDCA  21                 	db	33
   557  00FDCB  41                 	db	65
   558  00FDCC  45                 	db	69
   559  00FDCD  4B                 	db	75
   560  00FDCE  31                 	db	49
   561  00FDCF  18                 	db	24
   562  00FDD0  14                 	db	20
   563  00FDD1  12                 	db	18
   564  00FDD2  7F                 	db	127
   565  00FDD3  10                 	db	16
   566  00FDD4  27                 	db	39
   567  00FDD5  45                 	db	69
   568  00FDD6  45                 	db	69
   569  00FDD7  45                 	db	69
   570  00FDD8  39                 	db	57
   571  00FDD9  3C                 	db	60
   572  00FDDA  4A                 	db	74
   573  00FDDB  49                 	db	73
   574  00FDDC  49                 	db	73
   575  00FDDD  30                 	db	48
   576  00FDDE  01                 	db	1
   577  00FDDF  71                 	db	113
   578  00FDE0  09                 	db	9
   579  00FDE1  05                 	db	5
   580  00FDE2  03                 	db	3
   581  00FDE3  36                 	db	54
   582  00FDE4  49                 	db	73
   583  00FDE5  49                 	db	73
   584  00FDE6  49                 	db	73
   585  00FDE7  36                 	db	54
   586  00FDE8  06                 	db	6
   587  00FDE9  49                 	db	73
   588  00FDEA  49                 	db	73
   589  00FDEB  29                 	db	41
   590  00FDEC  1E                 	db	30
   591  00FDED  00                 	db	0
   592  00FDEE  36                 	db	54
   593  00FDEF  36                 	db	54
   594  00FDF0  00                 	db	0
   595  00FDF1  00                 	db	0
   596  00FDF2  00                 	db	0
   597  00FDF3  56                 	db	86
   598  00FDF4  36                 	db	54
   599  00FDF5  00                 	db	0
   600  00FDF6  00                 	db	0
   601  00FDF7  00                 	db	0
   602  00FDF8  08                 	db	8
   603  00FDF9  14                 	db	20
   604  00FDFA  22                 	db	34
   605  00FDFB  41                 	db	65
   606  00FDFC  14                 	db	20
   607  00FDFD  14                 	db	20
   608  00FDFE  14                 	db	20
   609  00FDFF  14                 	db	20
   610  00FE00  14                 	db	20
   611  00FE01  41                 	db	65
   612  00FE02  22                 	db	34
   613  00FE03  14                 	db	20
   614  00FE04  08                 	db	8
   615  00FE05  00                 	db	0
   616  00FE06  02                 	db	2
   617  00FE07  01                 	db	1
   618  00FE08  51                 	db	81
   619  00FE09  09                 	db	9
   620  00FE0A  06                 	db	6
   621  00FE0B  32                 	db	50
   622  00FE0C  49                 	db	73
   623  00FE0D  79                 	db	121
   624  00FE0E  41                 	db	65
   625  00FE0F  3E                 	db	62
   626  00FE10  7E                 	db	126
   627  00FE11  11                 	db	17
   628  00FE12  11                 	db	17
   629  00FE13  11                 	db	17
   630  00FE14  7E                 	db	126
   631  00FE15  7F                 	db	127
   632  00FE16  49                 	db	73
   633  00FE17  49                 	db	73
   634  00FE18  49                 	db	73
   635  00FE19  36                 	db	54
   636  00FE1A  3E                 	db	62
   637  00FE1B  41                 	db	65
   638  00FE1C  41                 	db	65
   639  00FE1D  41                 	db	65
   640  00FE1E  22                 	db	34
   641  00FE1F  7F                 	db	127
   642  00FE20  41                 	db	65
   643  00FE21  41                 	db	65
   644  00FE22  22                 	db	34
   645  00FE23  1C                 	db	28
   646  00FE24  7F                 	db	127
   647  00FE25  49                 	db	73
   648  00FE26  49                 	db	73
   649  00FE27  49                 	db	73
   650  00FE28  41                 	db	65
   651  00FE29  7F                 	db	127
   652  00FE2A  09                 	db	9
   653  00FE2B  09                 	db	9
   654  00FE2C  01                 	db	1
   655  00FE2D  01                 	db	1
   656  00FE2E  3E                 	db	62
   657  00FE2F  41                 	db	65
   658  00FE30  41                 	db	65
   659  00FE31  51                 	db	81
   660  00FE32  32                 	db	50
   661  00FE33  7F                 	db	127
   662  00FE34  08                 	db	8
   663  00FE35  08                 	db	8
   664  00FE36  08                 	db	8
   665  00FE37  7F                 	db	127
   666  00FE38  00                 	db	0
   667  00FE39  41                 	db	65
   668  00FE3A  7F                 	db	127
   669  00FE3B  41                 	db	65
   670  00FE3C  00                 	db	0
   671  00FE3D  20                 	db	32
   672  00FE3E  40                 	db	64
   673  00FE3F  41                 	db	65
   674  00FE40  3F                 	db	63
   675  00FE41  01                 	db	1
   676  00FE42  7F                 	db	127
   677  00FE43  08                 	db	8
   678  00FE44  14                 	db	20
   679  00FE45  22                 	db	34
   680  00FE46  41                 	db	65
   681  00FE47  7F                 	db	127
   682  00FE48  40                 	db	64
   683  00FE49  40                 	db	64
   684  00FE4A  40                 	db	64
   685  00FE4B  40                 	db	64
   686  00FE4C  7F                 	db	127
   687  00FE4D  02                 	db	2
   688  00FE4E  04                 	db	4
   689  00FE4F  02                 	db	2
   690  00FE50  7F                 	db	127
   691  00FE51  7F                 	db	127
   692  00FE52  04                 	db	4
   693  00FE53  08                 	db	8
   694  00FE54  10                 	db	16
   695  00FE55  7F                 	db	127
   696  00FE56  3E                 	db	62
   697  00FE57  41                 	db	65
   698  00FE58  41                 	db	65
   699  00FE59  41                 	db	65
   700  00FE5A  3E                 	db	62
   701  00FE5B  7F                 	db	127
   702  00FE5C  09                 	db	9
   703  00FE5D  09                 	db	9
   704  00FE5E  09                 	db	9
   705  00FE5F  06                 	db	6
   706  00FE60  3E                 	db	62
   707  00FE61  41                 	db	65
   708  00FE62  51                 	db	81
   709  00FE63  21                 	db	33
   710  00FE64  5E                 	db	94
   711  00FE65  7F                 	db	127
   712  00FE66  09                 	db	9
   713  00FE67  19                 	db	25
   714  00FE68  29                 	db	41
   715  00FE69  46                 	db	70
   716  00FE6A  46                 	db	70
   717  00FE6B  49                 	db	73
   718  00FE6C  49                 	db	73
   719  00FE6D  49                 	db	73
   720  00FE6E  31                 	db	49
   721  00FE6F  01                 	db	1
   722  00FE70  01                 	db	1
   723  00FE71  7F                 	db	127
   724  00FE72  01                 	db	1
   725  00FE73  01                 	db	1
   726  00FE74  3F                 	db	63
   727  00FE75  40                 	db	64
   728  00FE76  40                 	db	64
   729  00FE77  40                 	db	64
   730  00FE78  3F                 	db	63
   731  00FE79  1F                 	db	31
   732  00FE7A  20                 	db	32
   733  00FE7B  40                 	db	64
   734  00FE7C  20                 	db	32
   735  00FE7D  1F                 	db	31
   736  00FE7E  7F                 	db	127
   737  00FE7F  20                 	db	32
   738  00FE80  18                 	db	24
   739  00FE81  20                 	db	32
   740  00FE82  7F                 	db	127
   741  00FE83  63                 	db	99
   742  00FE84  14                 	db	20
   743  00FE85  08                 	db	8
   744  00FE86  14                 	db	20
   745  00FE87  63                 	db	99
   746  00FE88  03                 	db	3
   747  00FE89  04                 	db	4
   748  00FE8A  78                 	db	120
   749  00FE8B  04                 	db	4
   750  00FE8C  03                 	db	3
   751  00FE8D  61                 	db	97
   752  00FE8E  51                 	db	81
   753  00FE8F  49                 	db	73
   754  00FE90  45                 	db	69
   755  00FE91  43                 	db	67
   756  00FE92  00                 	db	0
   757  00FE93  00                 	db	0
   758  00FE94  7F                 	db	127
   759  00FE95  41                 	db	65
   760  00FE96  41                 	db	65
   761  00FE97  02                 	db	2
   762  00FE98  04                 	db	4
   763  00FE99  08                 	db	8
   764  00FE9A  10                 	db	16
   765  00FE9B  20                 	db	32
   766  00FE9C  41                 	db	65
   767  00FE9D  41                 	db	65
   768  00FE9E  7F                 	db	127
   769  00FE9F  00                 	db	0
   770  00FEA0  00                 	db	0
   771  00FEA1  04                 	db	4
   772  00FEA2  02                 	db	2
   773  00FEA3  01                 	db	1
   774  00FEA4  02                 	db	2
   775  00FEA5  04                 	db	4
   776  00FEA6  40                 	db	64
   777  00FEA7  40                 	db	64
   778  00FEA8  40                 	db	64
   779  00FEA9  40                 	db	64
   780  00FEAA  40                 	db	64
   781  00FEAB  00                 	db	0
   782  00FEAC  01                 	db	1
   783  00FEAD  02                 	db	2
   784  00FEAE  04                 	db	4
   785  00FEAF  00                 	db	0
   786  00FEB0  20                 	db	32
   787  00FEB1  54                 	db	84
   788  00FEB2  54                 	db	84
   789  00FEB3  54                 	db	84
   790  00FEB4  78                 	db	120
   791  00FEB5  7F                 	db	127
   792  00FEB6  48                 	db	72
   793  00FEB7  44                 	db	68
   794  00FEB8  44                 	db	68
   795  00FEB9  38                 	db	56
   796  00FEBA  38                 	db	56
   797  00FEBB  44                 	db	68
   798  00FEBC  44                 	db	68
   799  00FEBD  44                 	db	68
   800  00FEBE  20                 	db	32
   801  00FEBF  38                 	db	56
   802  00FEC0  44                 	db	68
   803  00FEC1  44                 	db	68
   804  00FEC2  48                 	db	72
   805  00FEC3  7F                 	db	127
   806  00FEC4  38                 	db	56
   807  00FEC5  54                 	db	84
   808  00FEC6  54                 	db	84
   809  00FEC7  54                 	db	84
   810  00FEC8  18                 	db	24
   811  00FEC9  08                 	db	8
   812  00FECA  7E                 	db	126
   813  00FECB  09                 	db	9
   814  00FECC  01                 	db	1
   815  00FECD  02                 	db	2
   816  00FECE  08                 	db	8
   817  00FECF  14                 	db	20
   818  00FED0  54                 	db	84
   819  00FED1  54                 	db	84
   820  00FED2  3C                 	db	60
   821  00FED3  7F                 	db	127
   822  00FED4  08                 	db	8
   823  00FED5  04                 	db	4
   824  00FED6  04                 	db	4
   825  00FED7  78                 	db	120
   826  00FED8  00                 	db	0
   827  00FED9  44                 	db	68
   828  00FEDA  7D                 	db	125
   829  00FEDB  40                 	db	64
   830  00FEDC  00                 	db	0
   831  00FEDD  20                 	db	32
   832  00FEDE  40                 	db	64
   833  00FEDF  44                 	db	68
   834  00FEE0  3D                 	db	61
   835  00FEE1  00                 	db	0
   836  00FEE2  00                 	db	0
   837  00FEE3  7F                 	db	127
   838  00FEE4  10                 	db	16
   839  00FEE5  28                 	db	40
   840  00FEE6  44                 	db	68
   841  00FEE7  00                 	db	0
   842  00FEE8  41                 	db	65
   843  00FEE9  7F                 	db	127
   844  00FEEA  40                 	db	64
   845  00FEEB  00                 	db	0
   846  00FEEC  7C                 	db	124
   847  00FEED  04                 	db	4
   848  00FEEE  18                 	db	24
   849  00FEEF  04                 	db	4
   850  00FEF0  78                 	db	120
   851  00FEF1  7C                 	db	124
   852  00FEF2  08                 	db	8
   853  00FEF3  04                 	db	4
   854  00FEF4  04                 	db	4
   855  00FEF5  78                 	db	120
   856  00FEF6  38                 	db	56
   857  00FEF7  44                 	db	68
   858  00FEF8  44                 	db	68
   859  00FEF9  44                 	db	68
   860  00FEFA  38                 	db	56
   861  00FEFB  7C                 	db	124
   862  00FEFC  14                 	db	20
   863  00FEFD  14                 	db	20
   864  00FEFE  14                 	db	20
   865  00FEFF  08                 	db	8
   866  00FF00  08                 	db	8
   867  00FF01  14                 	db	20
   868  00FF02  14                 	db	20
   869  00FF03  18                 	db	24
   870  00FF04  7C                 	db	124
   871  00FF05  7C                 	db	124
   872  00FF06  08                 	db	8
   873  00FF07  04                 	db	4
   874  00FF08  04                 	db	4
   875  00FF09  08                 	db	8
   876  00FF0A  48                 	db	72
   877  00FF0B  54                 	db	84
   878  00FF0C  54                 	db	84
   879  00FF0D  54                 	db	84
   880  00FF0E  20                 	db	32
   881  00FF0F  04                 	db	4
   882  00FF10  3F                 	db	63
   883  00FF11  44                 	db	68
   884  00FF12  40                 	db	64
   885  00FF13  20                 	db	32
   886  00FF14  3C                 	db	60
   887  00FF15  40                 	db	64
   888  00FF16  40                 	db	64
   889  00FF17  20                 	db	32
   890  00FF18  7C                 	db	124
   891  00FF19  1C                 	db	28
   892  00FF1A  20                 	db	32
   893  00FF1B  40                 	db	64
   894  00FF1C  20                 	db	32
   895  00FF1D  1C                 	db	28
   896  00FF1E  3C                 	db	60
   897  00FF1F  40                 	db	64
   898  00FF20  30                 	db	48
   899  00FF21  40                 	db	64
   900  00FF22  3C                 	db	60
   901  00FF23  44                 	db	68
   902  00FF24  28                 	db	40
   903  00FF25  10                 	db	16
   904  00FF26  28                 	db	40
   905  00FF27  44                 	db	68
   906  00FF28  0C                 	db	12
   907  00FF29  50                 	db	80
   908  00FF2A  50                 	db	80
   909  00FF2B  50                 	db	80
   910  00FF2C  3C                 	db	60
   911  00FF2D  44                 	db	68
   912  00FF2E  64                 	db	100
   913  00FF2F  54                 	db	84
   914  00FF30  4C                 	db	76
   915  00FF31  44                 	db	68
   916  00FF32  00                 	db	0
   917  00FF33  08                 	db	8
   918  00FF34  36                 	db	54
   919  00FF35  41                 	db	65
   920  00FF36  00                 	db	0
   921  00FF37  00                 	db	0
   922  00FF38  00                 	db	0
   923  00FF39  7F                 	db	127
   924  00FF3A  00                 	db	0
   925  00FF3B  00                 	db	0
   926  00FF3C  00                 	db	0
   927  00FF3D  41                 	db	65
   928  00FF3E  36                 	db	54
   929  00FF3F  08                 	db	8
   930  00FF40  00                 	db	0
   931  00FF41  08                 	db	8
   932  00FF42  08                 	db	8
   933  00FF43  2A                 	db	42
   934  00FF44  1C                 	db	28
   935  00FF45  08                 	db	8
   936  00FF46  08                 	db	8
   937  00FF47  1C                 	db	28
   938  00FF48  2A                 	db	42
   939  00FF49  08                 	db	8
   940  00FF4A  08                 	db	8
   941  00FF4B                     __end_of_Font5x7:
   942                           	opt stack 0
   943  00FF4B                     _PortG_Property:
   944                           	opt stack 0
   945  00FF4B  FC00               	dw	64512
   946  00FF4D                     __end_of_PortG_Property:
   947                           	opt stack 0
   948  00FF4D                     _PortF_Property:
   949                           	opt stack 0
   950  00FF4D  0FFF               	dw	4095
   951  00FF4F                     __end_of_PortF_Property:
   952                           	opt stack 0
   953  00FF4F                     _PortE_Property:
   954                           	opt stack 0
   955  00FF4F  0000               	dw	0
   956  00FF51                     __end_of_PortE_Property:
   957                           	opt stack 0
   958  00FF51                     _PortD_Property:
   959                           	opt stack 0
   960  00FF51  FFFF               	dw	65535
   961  00FF53                     __end_of_PortD_Property:
   962                           	opt stack 0
   963  00FF53                     _PortC_Property:
   964                           	opt stack 0
   965  00FF53  FFF0               	dw	65520
   966  00FF55                     __end_of_PortC_Property:
   967                           	opt stack 0
   968  00FF55                     _PortB_Property:
   969                           	opt stack 0
   970  00FF55  FF00               	dw	65280
   971  00FF57                     __end_of_PortB_Property:
   972                           	opt stack 0
   973  00FF57                     _PortA_Property:
   974                           	opt stack 0
   975  00FF57  00FF               	dw	255
   976  00FF59                     __end_of_PortA_Property:
   977                           	opt stack 0
   978  0000                     _TMR0	set	4054
   979  0000                     _RCREG1	set	4015
   980  0000                     _TXREG1	set	4014
   981  0000                     _SPBRG1	set	4016
   982  0000                     _TXSTA1bits	set	4013
   983  0000                     _BAUDCON1bits	set	3966
   984  0000                     _RCSTA1	set	4012
   985  0000                     _TXSTA1	set	4013
   986  0000                     _TRISCbits	set	3988
   987  0000                     _PR2	set	4043
   988  0000                     _T2CONbits	set	4042
   989  0000                     _T0CONbits	set	4053
   990  0000                     _RCONbits	set	4048
   991  0000                     _OSCTUNEbits	set	3995
   992  0000                     _PIR3	set	4004
   993  0000                     _PIR2	set	4001
   994  0000                     _PIR1	set	3998
   995  0000                     _INTCONbits	set	4082
   996  0000                     _SSP2CON2bits	set	3947
   997  0000                     _SSP1CON2bits	set	4037
   998  0000                     _SSP1ADD	set	4040
   999  0000                     _ANCON0	set	4033
  1000  0000                     _ADRESL	set	4035
  1001  0000                     _ADRESH	set	4036
  1002  0000                     _ADCON1bits	set	4033
  1003  0000                     _ADCON0bits	set	4034
  1004  0000                     _SSP2CON1bits	set	3948
  1005  0000                     _SSP1CON1bits	set	4038
  1006  0000                     _SSP2STATbits	set	3949
  1007  0000                     _SSP1STATbits	set	4039
  1008  0000                     _PIE3bits	set	4003
  1009  0000                     _PIE1bits	set	3997
  1010  0000                     _PIR3bits	set	4004
  1011  0000                     _PIR1bits	set	3998
  1012  0000                     _IPR3bits	set	4005
  1013  0000                     _IPR1bits	set	3999
  1014  0000                     _PORTFbits	set	3973
  1015  0000                     _SSP2CON2	set	3947
  1016  0000                     _SSP1CON2	set	4037
  1017  0000                     _SSP2BUF	set	3951
  1018  0000                     _SSP2CON1	set	3948
  1019  0000                     _SSP2STAT	set	3949
  1020  0000                     _SSP1BUF	set	4041
  1021  0000                     _SSP1CON1	set	4038
  1022  0000                     _SSP1STAT	set	4039
  1023  0000                     _LATG	set	3983
  1024  0000                     _LATF	set	3982
  1025  0000                     _LATE	set	3981
  1026  0000                     _LATD	set	3980
  1027  0000                     _LATC	set	3979
  1028  0000                     _LATB	set	3978
  1029  0000                     _LATA	set	3977
  1030  0000                     _TRISG	set	3992
  1031  0000                     _TRISF	set	3991
  1032  0000                     _TRISE	set	3990
  1033  0000                     _TRISD	set	3989
  1034  0000                     _TRISC	set	3988
  1035  0000                     _TRISB	set	3987
  1036  0000                     _TRISA	set	3986
  1037  0000                     _PORTG	set	3974
  1038  0000                     _PORTF	set	3973
  1039  0000                     _PORTE	set	3972
  1040  0000                     _PORTD	set	3971
  1041  0000                     _PORTC	set	3970
  1042  0000                     _PORTB	set	3969
  1043  0000                     _PORTA	set	3968
  1044  00FF59                     STR_2:
  1045  00FF59  43                 	db	67	;'C'
  1046  00FF5A  6C                 	db	108	;'l'
  1047  00FF5B  6F                 	db	111	;'o'
  1048  00FF5C  73                 	db	115	;'s'
  1049  00FF5D  65                 	db	101	;'e'
  1050  00FF5E  73                 	db	115	;'s'
  1051  00FF5F  74                 	db	116	;'t'
  1052  00FF60  20                 	db	32
  1053  00FF61  57                 	db	87	;'W'
  1054  00FF62  61                 	db	97	;'a'
  1055  00FF63  6C                 	db	108	;'l'
  1056  00FF64  6C                 	db	108	;'l'
  1057  00FF65  3A                 	db	58	;':'
  1058  00FF66  25                 	db	37
  1059  00FF67  75                 	db	117	;'u'
  1060  00FF68  0A                 	db	10
  1061  00FF69  43                 	db	67	;'C'
  1062  00FF6A  6C                 	db	108	;'l'
  1063  00FF6B  6F                 	db	111	;'o'
  1064  00FF6C  73                 	db	115	;'s'
  1065  00FF6D  65                 	db	101	;'e'
  1066  00FF6E  73                 	db	115	;'s'
  1067  00FF6F  74                 	db	116	;'t'
  1068  00FF70  20                 	db	32
  1069  00FF71  41                 	db	65	;'A'
  1070  00FF72  6E                 	db	110	;'n'
  1071  00FF73  67                 	db	103	;'g'
  1072  00FF74  6C                 	db	108	;'l'
  1073  00FF75  65                 	db	101	;'e'
  1074  00FF76  3A                 	db	58	;':'
  1075  00FF77  25                 	db	37
  1076  00FF78  63                 	db	99	;'c'
  1077  00FF79  0A                 	db	10
  1078  00FF7A  4C                 	db	76	;'L'
  1079  00FF7B  65                 	db	101	;'e'
  1080  00FF7C  66                 	db	102	;'f'
  1081  00FF7D  74                 	db	116	;'t'
  1082  00FF7E  20                 	db	32
  1083  00FF7F  42                 	db	66	;'B'
  1084  00FF80  75                 	db	117	;'u'
  1085  00FF81  6D                 	db	109	;'m'
  1086  00FF82  70                 	db	112	;'p'
  1087  00FF83  3A                 	db	58	;':'
  1088  00FF84  25                 	db	37
  1089  00FF85  75                 	db	117	;'u'
  1090  00FF86  0A                 	db	10
  1091  00FF87  52                 	db	82	;'R'
  1092  00FF88  69                 	db	105	;'i'
  1093  00FF89  67                 	db	103	;'g'
  1094  00FF8A  68                 	db	104	;'h'
  1095  00FF8B  74                 	db	116	;'t'
  1096  00FF8C  42                 	db	66	;'B'
  1097  00FF8D  75                 	db	117	;'u'
  1098  00FF8E  6D                 	db	109	;'m'
  1099  00FF8F  70                 	db	112	;'p'
  1100  00FF90  3A                 	db	58	;':'
  1101  00FF91  25                 	db	37
  1102  00FF92  75                 	db	117	;'u'
  1103  00FF93  0A                 	db	10
  1104  00FF94  00                 	db	0
  1105  00FF95                     STR_4:
  1106  00FF95  54                 	db	84	;'T'
  1107  00FF96  6F                 	db	111	;'o'
  1108  00FF97  74                 	db	116	;'t'
  1109  00FF98  61                 	db	97	;'a'
  1110  00FF99  6C                 	db	108	;'l'
  1111  00FF9A  20                 	db	32
  1112  00FF9B  44                 	db	68	;'D'
  1113  00FF9C  69                 	db	105	;'i'
  1114  00FF9D  73                 	db	115	;'s'
  1115  00FF9E  74                 	db	116	;'t'
  1116  00FF9F  61                 	db	97	;'a'
  1117  00FFA0  6E                 	db	110	;'n'
  1118  00FFA1  63                 	db	99	;'c'
  1119  00FFA2  65                 	db	101	;'e'
  1120  00FFA3  3A                 	db	58	;':'
  1121  00FFA4  25                 	db	37
  1122  00FFA5  75                 	db	117	;'u'
  1123  00FFA6  0A                 	db	10
  1124  00FFA7  4C                 	db	76	;'L'
  1125  00FFA8  65                 	db	101	;'e'
  1126  00FFA9  66                 	db	102	;'f'
  1127  00FFAA  74                 	db	116	;'t'
  1128  00FFAB  20                 	db	32
  1129  00FFAC  42                 	db	66	;'B'
  1130  00FFAD  75                 	db	117	;'u'
  1131  00FFAE  6D                 	db	109	;'m'
  1132  00FFAF  70                 	db	112	;'p'
  1133  00FFB0  3A                 	db	58	;':'
  1134  00FFB1  25                 	db	37
  1135  00FFB2  75                 	db	117	;'u'
  1136  00FFB3  0A                 	db	10
  1137  00FFB4  52                 	db	82	;'R'
  1138  00FFB5  69                 	db	105	;'i'
  1139  00FFB6  67                 	db	103	;'g'
  1140  00FFB7  68                 	db	104	;'h'
  1141  00FFB8  74                 	db	116	;'t'
  1142  00FFB9  20                 	db	32
  1143  00FFBA  42                 	db	66	;'B'
  1144  00FFBB  75                 	db	117	;'u'
  1145  00FFBC  6D                 	db	109	;'m'
  1146  00FFBD  70                 	db	112	;'p'
  1147  00FFBE  3A                 	db	58	;':'
  1148  00FFBF  25                 	db	37
  1149  00FFC0  75                 	db	117	;'u'
  1150  00FFC1  0A                 	db	10
  1151  00FFC2  00                 	db	0
  1152  00FFC3                     STR_11:
  1153  00FFC3  20                 	db	32
  1154  00FFC4  20                 	db	32
  1155  00FFC5  20                 	db	32
  1156  00FFC6  20                 	db	32
  1157  00FFC7  20                 	db	32
  1158  00FFC8  20                 	db	32
  1159  00FFC9  20                 	db	32
  1160  00FFCA  20                 	db	32
  1161  00FFCB  20                 	db	32
  1162  00FFCC  20                 	db	32
  1163  00FFCD  20                 	db	32
  1164  00FFCE  20                 	db	32
  1165  00FFCF  20                 	db	32
  1166  00FFD0  20                 	db	32
  1167  00FFD1  20                 	db	32
  1168  00FFD2  20                 	db	32
  1169  00FFD3  20                 	db	32
  1170  00FFD4  20                 	db	32
  1171  00FFD5  20                 	db	32
  1172  00FFD6  0A                 	db	10
  1173  00FFD7  00                 	db	0
  1174  00FFD8                     STR_10:
  1175  00FFD8  50                 	db	80	;'P'
  1176  00FFD9  6C                 	db	108	;'l'
  1177  00FFDA  65                 	db	101	;'e'
  1178  00FFDB  61                 	db	97	;'a'
  1179  00FFDC  73                 	db	115	;'s'
  1180  00FFDD  65                 	db	101	;'e'
  1181  00FFDE  20                 	db	32
  1182  00FFDF  73                 	db	115	;'s'
  1183  00FFE0  65                 	db	101	;'e'
  1184  00FFE1  6C                 	db	108	;'l'
  1185  00FFE2  65                 	db	101	;'e'
  1186  00FFE3  63                 	db	99	;'c'
  1187  00FFE4  74                 	db	116	;'t'
  1188  00FFE5  20                 	db	32
  1189  00FFE6  6D                 	db	109	;'m'
  1190  00FFE7  6F                 	db	111	;'o'
  1191  00FFE8  64                 	db	100	;'d'
  1192  00FFE9  65                 	db	101	;'e'
  1193  00FFEA  2E                 	db	46
  1194  00FFEB  0A                 	db	10
  1195  00FFEC  00                 	db	0
  1196  00FFED                     STR_8:
  1197  00FFED  44                 	db	68	;'D'
  1198  00FFEE  69                 	db	105	;'i'
  1199  00FFEF  73                 	db	115	;'s'
  1200  00FFF0  74                 	db	116	;'t'
  1201  00FFF1  61                 	db	97	;'a'
  1202  00FFF2  6E                 	db	110	;'n'
  1203  00FFF3  63                 	db	99	;'c'
  1204  00FFF4  65                 	db	101	;'e'
  1205  00FFF5  3A                 	db	58	;':'
  1206  00FFF6  20                 	db	32
  1207  00FFF7  25                 	db	37
  1208  00FFF8  64                 	db	100	;'d'
  1209  00FFF9  0A                 	db	10
  1210  00FFFA  00                 	db	0
  1211  00FFFB                     STR_1:
  1212  00FFFB  25                 	db	37
  1213  00FFFC  63                 	db	99	;'c'
  1214  00FFFD  00                 	db	0
  1215  0000                     
  1216                           ; #config settings
  1217  00FFFE  00                 	db	0	; dummy byte at the end
  1218  0000                     
  1219                           	psect	cinit
  1220  0143A8                     __pcinit:
  1221                           	opt stack 0
  1222  0143A8                     start_initialization:
  1223                           	opt stack 0
  1224  0143A8                     __initialization:
  1225                           	opt stack 0
  1226                           
  1227                           ; Initialize objects allocated to BANK3 (12 bytes)
  1228                           ; load TBLPTR registers with __pidataBANK3
  1229  0143A8  0E36               	movlw	low __pidataBANK3
  1230  0143AA  6EF6               	movwf	tblptrl,c
  1231  0143AC  0E65               	movlw	high __pidataBANK3
  1232  0143AE  6EF7               	movwf	tblptrh,c
  1233  0143B0  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1234  0143B2  6EF8               	movwf	tblptru,c
  1235  0143B4  EE03  F0E8         	lfsr	0,__pdataBANK3
  1236  0143B8  EE10 F00C          	lfsr	1,12
  1237  0143BC                     copy_data0:
  1238  0143BC  0009               	tblrd		*+
  1239  0143BE  CFF5 FFEE          	movff	tablat,postinc0
  1240  0143C2  50E5               	movf	postdec1,w,c
  1241  0143C4  50E1               	movf	fsr1l,w,c
  1242  0143C6  E1FA               	bnz	copy_data0
  1243                           
  1244                           ; Initialize objects allocated to BANK0 (7 bytes)
  1245                           ; load TBLPTR registers with __pidataBANK0
  1246  0143C8  0E9C               	movlw	low __pidataBANK0
  1247  0143CA  6EF6               	movwf	tblptrl,c
  1248  0143CC  0E65               	movlw	high __pidataBANK0
  1249  0143CE  6EF7               	movwf	tblptrh,c
  1250  0143D0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1251  0143D2  6EF8               	movwf	tblptru,c
  1252  0143D4  EE00  F0F9         	lfsr	0,__pdataBANK0
  1253  0143D8  EE10 F007          	lfsr	1,7
  1254  0143DC                     copy_data1:
  1255  0143DC  0009               	tblrd		*+
  1256  0143DE  CFF5 FFEE          	movff	tablat,postinc0
  1257  0143E2  50E5               	movf	postdec1,w,c
  1258  0143E4  50E1               	movf	fsr1l,w,c
  1259  0143E6  E1FA               	bnz	copy_data1
  1260                           
  1261                           ; Initialize objects allocated to COMRAM (10 bytes)
  1262                           ; load TBLPTR registers with __pidataCOMRAM
  1263  0143E8  0E66               	movlw	low __pidataCOMRAM
  1264  0143EA  6EF6               	movwf	tblptrl,c
  1265  0143EC  0E65               	movlw	high __pidataCOMRAM
  1266  0143EE  6EF7               	movwf	tblptrh,c
  1267  0143F0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1268  0143F2  6EF8               	movwf	tblptru,c
  1269  0143F4  EE00  F047         	lfsr	0,__pdataCOMRAM
  1270  0143F8  EE10 F00A          	lfsr	1,10
  1271  0143FC                     copy_data2:
  1272  0143FC  0009               	tblrd		*+
  1273  0143FE  CFF5 FFEE          	movff	tablat,postinc0
  1274  014402  50E5               	movf	postdec1,w,c
  1275  014404  50E1               	movf	fsr1l,w,c
  1276  014406  E1FA               	bnz	copy_data2
  1277                           
  1278                           ; Clear objects allocated to BIGRAM (300 bytes)
  1279  014408  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1280  01440C  EE11 F02C          	lfsr	1,300
  1281  014410                     clear_0:
  1282  014410  6AEE               	clrf	postinc0,c
  1283  014412  50E5               	movf	postdec1,w,c
  1284  014414  50E1               	movf	fsr1l,w,c
  1285  014416  E1FC               	bnz	clear_0
  1286  014418  50E2               	movf	fsr1h,w,c
  1287  01441A  E1FA               	bnz	clear_0
  1288                           
  1289                           ; Clear objects allocated to BANK4 (170 bytes)
  1290  01441C  EE04  F000         	lfsr	0,__pbssBANK4
  1291  014420  0EAA               	movlw	170
  1292  014422                     clear_1:
  1293  014422  6AEE               	clrf	postinc0,c
  1294  014424  06E8               	decf	wreg,f,c
  1295  014426  E1FD               	bnz	clear_1
  1296                           
  1297                           ; Clear objects allocated to BANK3 (232 bytes)
  1298  014428  EE03  F000         	lfsr	0,__pbssBANK3
  1299  01442C  0EE8               	movlw	232
  1300  01442E                     clear_2:
  1301  01442E  6AEE               	clrf	postinc0,c
  1302  014430  06E8               	decf	wreg,f,c
  1303  014432  E1FD               	bnz	clear_2
  1304                           
  1305                           ; Clear objects allocated to BANK0 (90 bytes)
  1306  014434  EE00  F060         	lfsr	0,__pbssBANK0
  1307  014438  0E5A               	movlw	90
  1308  01443A                     clear_3:
  1309  01443A  6AEE               	clrf	postinc0,c
  1310  01443C  06E8               	decf	wreg,f,c
  1311  01443E  E1FD               	bnz	clear_3
  1312                           
  1313                           ; Clear objects allocated to COMRAM (30 bytes)
  1314  014440  EE00  F029         	lfsr	0,__pbssCOMRAM
  1315  014444  0E1E               	movlw	30
  1316  014446                     clear_4:
  1317  014446  6AEE               	clrf	postinc0,c
  1318  014448  06E8               	decf	wreg,f,c
  1319  01444A  E1FD               	bnz	clear_4
  1320  01444C                     end_of_initialization:
  1321                           	opt stack 0
  1322  01444C                     __end_of__initialization:
  1323                           	opt stack 0
  1324  01444C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1325  01444E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1326  014450  0100               	movlb	0
  1327  014452  EFFF  F09B         	goto	_main	;jump to C main() function
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           postdec1	equ	0xFE5
  1335                           fsr1h	equ	0xFE2
  1336                           fsr1l	equ	0xFE1
  1337                           
  1338                           	psect	bssCOMRAM
  1339  000029                     __pbssCOMRAM:
  1340                           	opt stack 0
  1341  000029                     _COUNTER:
  1342                           	opt stack 0
  1343  000029                     	ds	2
  1344  00002B                     HMI_GRender@a:
  1345                           	opt stack 0
  1346  00002B                     	ds	2
  1347  00002D                     SPI_Send9@dat:
  1348                           	opt stack 0
  1349  00002D                     	ds	2
  1350  00002F                     _iRDropCaster:
  1351                           	opt stack 0
  1352  00002F                     	ds	1
  1353  000030                     _iRVirtualWall:
  1354                           	opt stack 0
  1355  000030                     	ds	1
  1356  000031                     _iRCliffR:
  1357                           	opt stack 0
  1358  000031                     	ds	1
  1359  000032                     _iRCliffFR:
  1360                           	opt stack 0
  1361  000032                     	ds	1
  1362  000033                     _iRCliffFL:
  1363                           	opt stack 0
  1364  000033                     	ds	1
  1365  000034                     _iRCliffL:
  1366                           	opt stack 0
  1367  000034                     	ds	1
  1368  000035                     _iRWall:
  1369                           	opt stack 0
  1370  000035                     	ds	1
  1371  000036                     _iRBumpDrop:
  1372                           	opt stack 0
  1373  000036                     	ds	1
  1374  000037                     _iRScriptIndex:
  1375                           	opt stack 0
  1376  000037                     	ds	1
  1377  000038                     _u:
  1378                           	opt stack 0
  1379  000038                     	ds	1
  1380  000039                     _j:
  1381                           	opt stack 0
  1382  000039                     	ds	1
  1383  00003A                     _i:
  1384                           	opt stack 0
  1385  00003A                     	ds	1
  1386  00003B                     rand@screw:
  1387                           	opt stack 0
  1388  00003B                     	ds	1
  1389  00003C                     _ADC_Initialised:
  1390                           	opt stack 0
  1391  00003C                     	ds	1
  1392  00003D                     OutSeg@a:
  1393                           	opt stack 0
  1394  00003D                     	ds	1
  1395  00003E                     OutSeg@segset:
  1396                           	opt stack 0
  1397  00003E                     	ds	1
  1398  00003F                     OutSeg@cur:
  1399                           	opt stack 0
  1400  00003F                     	ds	1
  1401  000040                     _I2C1T:
  1402                           	opt stack 0
  1403  000040                     	ds	7
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1h	equ	0xFE2
  1412                           fsr1l	equ	0xFE1
  1413                           
  1414                           	psect	dataCOMRAM
  1415  000047                     __pdataCOMRAM:
  1416                           	opt stack 0
  1417  000047                     _gCursor:
  1418                           	opt stack 0
  1419  000047                     	ds	4
  1420  00004B                     _Bus_State:
  1421                           	opt stack 0
  1422  00004B                     	ds	1
  1423  00004C                     	ds	1
  1424  00004D                     	ds	1
  1425  00004E                     	ds	1
  1426  00004F                     _l:
  1427                           	opt stack 0
  1428  00004F                     	ds	1
  1429  000050                     _w:
  1430                           	opt stack 0
  1431  000050                     	ds	1
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1h	equ	0xFE2
  1440                           fsr1l	equ	0xFE1
  1441                           
  1442                           	psect	bssBANK0
  1443  000060                     __pbssBANK0:
  1444                           	opt stack 0
  1445  000060                     _gISR:
  1446                           	opt stack 0
  1447  000060                     	ds	3
  1448  000063                     _lQueue:
  1449                           	opt stack 0
  1450  000063                     	ds	3
  1451  000066                     _lStepFunction:
  1452                           	opt stack 0
  1453  000066                     	ds	3
  1454  000069                     _dist:
  1455                           	opt stack 0
  1456  000069                     	ds	2
  1457  00006B                     _angleToClosestWall:
  1458                           	opt stack 0
  1459  00006B                     	ds	2
  1460  00006D                     _IRValue:
  1461                           	opt stack 0
  1462  00006D                     	ds	2
  1463  00006F                     _Stepstomin:
  1464                           	opt stack 0
  1465  00006F                     	ds	2
  1466  000071                     _StepRotate:
  1467                           	opt stack 0
  1468  000071                     	ds	2
  1469  000073                     _mode:
  1470                           	opt stack 0
  1471  000073                     	ds	2
  1472  000075                     _angleTotal:
  1473                           	opt stack 0
  1474  000075                     	ds	2
  1475  000077                     _distanceTotal:
  1476                           	opt stack 0
  1477  000077                     	ds	2
  1478  000079                     _iRAngle:
  1479                           	opt stack 0
  1480  000079                     	ds	2
  1481  00007B                     _iRDistance:
  1482                           	opt stack 0
  1483  00007B                     	ds	2
  1484  00007D                     _pShiftVal:
  1485                           	opt stack 0
  1486  00007D                     	ds	2
  1487  00007F                     _val:
  1488                           	opt stack 0
  1489  00007F                     	ds	2
  1490  000081                     _lMotor:
  1491                           	opt stack 0
  1492  000081                     	ds	2
  1493  000083                     _lCurrent:
  1494                           	opt stack 0
  1495  000083                     	ds	2
  1496  000085                     _gBackcolour:
  1497                           	opt stack 0
  1498  000085                     	ds	2
  1499  000087                     _iRDropLeft:
  1500                           	opt stack 0
  1501  000087                     	ds	1
  1502  000088                     _iRDropRight:
  1503                           	opt stack 0
  1504  000088                     	ds	1
  1505  000089                     _iRBumpLeft:
  1506                           	opt stack 0
  1507  000089                     	ds	1
  1508  00008A                     _iRBumpRight:
  1509                           	opt stack 0
  1510  00008A                     	ds	1
  1511  00008B                     Event_TestButton@j:
  1512                           	opt stack 0
  1513  00008B                     	ds	1
  1514  00008C                     Timer2_Init@PRE:
  1515                           	opt stack 0
  1516  00008C                     	ds	1
  1517  00008D                     Timer2_Init@INDEX:
  1518                           	opt stack 0
  1519  00008D                     	ds	1
  1520  00008E                     Timer0_Init@PRE:
  1521                           	opt stack 0
  1522  00008E                     	ds	1
  1523  00008F                     _INDEX:
  1524                           	opt stack 0
  1525  00008F                     	ds	1
  1526  000090                     _lBufferY:
  1527                           	opt stack 0
  1528  000090                     	ds	1
  1529  000091                     _lBufferX:
  1530                           	opt stack 0
  1531  000091                     	ds	1
  1532  000092                     _clearall:
  1533                           	opt stack 0
  1534  000092                     	ds	1
  1535  000093                     _PortE:
  1536                           	opt stack 0
  1537  000093                     	ds	10
  1538  00009D                     _PortD:
  1539                           	opt stack 0
  1540  00009D                     	ds	10
  1541  0000A7                     _PortC:
  1542                           	opt stack 0
  1543  0000A7                     	ds	10
  1544  0000B1                     _ADC_AN0:
  1545                           	opt stack 0
  1546  0000B1                     	ds	5
  1547  0000B6                     LCD_DrawRectangle@p2:
  1548                           	opt stack 0
  1549  0000B6                     	ds	4
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           postdec1	equ	0xFE5
  1557                           fsr1h	equ	0xFE2
  1558                           fsr1l	equ	0xFE1
  1559                           
  1560                           	psect	dataBANK0
  1561  0000F9                     __pdataBANK0:
  1562                           	opt stack 0
  1563  0000F9                     _TimerX:
  1564                           	opt stack 0
  1565  0000F9                     	ds	2
  1566  0000FB                     _MinDist:
  1567                           	opt stack 0
  1568  0000FB                     	ds	2
  1569  0000FD                     _gForecolour:
  1570                           	opt stack 0
  1571  0000FD                     	ds	2
  1572  0000FF                     _change:
  1573                           	opt stack 0
  1574  0000FF                     	ds	1
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           postdec1	equ	0xFE5
  1582                           fsr1h	equ	0xFE2
  1583                           fsr1l	equ	0xFE1
  1584                           
  1585                           	psect	bssBANK3
  1586  000300                     __pbssBANK3:
  1587                           	opt stack 0
  1588  000300                     _lCBuffer:
  1589                           	opt stack 0
  1590  000300                     	ds	30
  1591  00031E                     _iRAngleSS:
  1592                           	opt stack 0
  1593  00031E                     	ds	4
  1594  000322                     _iRDistanceSS:
  1595                           	opt stack 0
  1596  000322                     	ds	4
  1597  000326                     Timer2_Init@DIV:
  1598                           	opt stack 0
  1599  000326                     	ds	4
  1600  00032A                     Timer0_Init@DIV:
  1601                           	opt stack 0
  1602  00032A                     	ds	4
  1603  00032E                     _I2C2_More:
  1604                           	opt stack 0
  1605  00032E                     	ds	3
  1606  000331                     _I2C1_More:
  1607                           	opt stack 0
  1608  000331                     	ds	3
  1609  000334                     _I2C2_Done:
  1610                           	opt stack 0
  1611  000334                     	ds	3
  1612  000337                     _I2C1_Done:
  1613                           	opt stack 0
  1614  000337                     	ds	3
  1615  00033A                     _dip:
  1616                           	opt stack 0
  1617  00033A                     	ds	2
  1618  00033C                     _HMIBoard:
  1619                           	opt stack 0
  1620  00033C                     	ds	58
  1621  000376                     _SPI1:
  1622                           	opt stack 0
  1623  000376                     	ds	11
  1624  000381                     _SPI2:
  1625                           	opt stack 0
  1626  000381                     	ds	11
  1627  00038C                     _DIPSwitch:
  1628                           	opt stack 0
  1629  00038C                     	ds	10
  1630  000396                     _TestButton:
  1631                           	opt stack 0
  1632  000396                     	ds	10
  1633  0003A0                     _PortG:
  1634                           	opt stack 0
  1635  0003A0                     	ds	10
  1636  0003AA                     _PortB:
  1637                           	opt stack 0
  1638  0003AA                     	ds	10
  1639  0003B4                     _PortA:
  1640                           	opt stack 0
  1641  0003B4                     	ds	10
  1642  0003BE                     _PortF:
  1643                           	opt stack 0
  1644  0003BE                     	ds	10
  1645  0003C8                     _I2C2T:
  1646                           	opt stack 0
  1647  0003C8                     	ds	7
  1648  0003CF                     _Stepper:
  1649                           	opt stack 0
  1650  0003CF                     	ds	6
  1651  0003D5                     _ADC_AN3:
  1652                           	opt stack 0
  1653  0003D5                     	ds	5
  1654  0003DA                     _ADC_AN2:
  1655                           	opt stack 0
  1656  0003DA                     	ds	5
  1657  0003DF                     _ADC_AN1:
  1658                           	opt stack 0
  1659  0003DF                     	ds	5
  1660  0003E4                     LCD_DrawRectangle@p4:
  1661                           	opt stack 0
  1662  0003E4                     	ds	4
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           postdec1	equ	0xFE5
  1670                           fsr1h	equ	0xFE2
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673                           	psect	dataBANK3
  1674  0003E8                     __pdataBANK3:
  1675                           	opt stack 0
  1676  0003E8                     Console_Render@F6956:
  1677                           	opt stack 0
  1678  0003E8                     	ds	4
  1679  0003EC                     _gLineSize:
  1680                           	opt stack 0
  1681  0003EC                     	ds	4
  1682  0003F0                     _gCharSize:
  1683                           	opt stack 0
  1684  0003F0                     	ds	4
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1h	equ	0xFE2
  1693                           fsr1l	equ	0xFE1
  1694                           
  1695                           	psect	bssBANK4
  1696  000400                     __pbssBANK4:
  1697                           	opt stack 0
  1698  000400                     _iRScriptStack:
  1699                           	opt stack 0
  1700  000400                     	ds	100
  1701  000464                     Console_MakeField@Fill:
  1702                           	opt stack 0
  1703  000464                     	ds	70
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           postdec1	equ	0xFE5
  1711                           fsr1h	equ	0xFE2
  1712                           fsr1l	equ	0xFE1
  1713                           
  1714                           	psect	bssBIGRAM
  1715  0004AA                     __pbssBIGRAM:
  1716                           	opt stack 0
  1717  0004AA                     _lBuffer:
  1718                           	opt stack 0
  1719  0004AA                     	ds	300
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           postdec1	equ	0xFE5
  1727                           fsr1h	equ	0xFE2
  1728                           fsr1l	equ	0xFE1
  1729                           
  1730                           	psect	cstackBANK3
  1731  0003F4                     __pcstackBANK3:
  1732                           	opt stack 0
  1733  0003F4                     ??_mode1:
  1734                           
  1735                           ; 1 bytes @ 0x0
  1736  0003F4                     	ds	2
  1737  0003F6                     mode1@moveto:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x2
  1741  0003F6                     	ds	2
  1742  0003F8                     _mode1$15597:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x4
  1746  0003F8                     	ds	4
  1747  0003FC                     ??_main:
  1748                           
  1749                           ; 1 bytes @ 0x8
  1750  0003FC                     	ds	2
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           
  1761                           	psect	cstackBANK2
  1762  000200                     __pcstackBANK2:
  1763                           	opt stack 0
  1764  000200                     irobot_query_and_update@TXArray:
  1765                           	opt stack 0
  1766                           
  1767                           ; 256 bytes @ 0x0
  1768  000200                     	ds	256
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1h	equ	0xFE2
  1777                           fsr1l	equ	0xFE1
  1778                           
  1779                           	psect	cstackBANK1
  1780  000100                     __pcstackBANK1:
  1781                           	opt stack 0
  1782  000100                     ??___fltol:
  1783  000100                     Port_SetType@Output:
  1784                           	opt stack 0
  1785  000100                     Button_Init@pInput:
  1786                           	opt stack 0
  1787  000100                     irobot_query_and_update@RXArray:
  1788                           	opt stack 0
  1789                           
  1790                           ; 256 bytes @ 0x0
  1791  000100                     	ds	1
  1792  000101                     Port_Init@pInput:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x1
  1796  000101                     	ds	1
  1797  000102                     Button_Init@pThreshold:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x2
  1801  000102                     	ds	1
  1802  000103                     Port_Init@pPort:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x3
  1806  000103                     	ds	1
  1807  000104                     ??_Port_Init:
  1808  000104                     ??_findClosestWall:
  1809  000104                     Button_Init@pInitIO:
  1810                           	opt stack 0
  1811                           
  1812                           ; 3 bytes @ 0x4
  1813  000104                     	ds	1
  1814  000105                     _findClosestWall$15596:
  1815                           	opt stack 0
  1816                           
  1817                           ; 4 bytes @ 0x5
  1818  000105                     	ds	1
  1819  000106                     Port_Init@i:
  1820                           	opt stack 0
  1821                           
  1822                           ; 1 bytes @ 0x6
  1823  000106                     	ds	1
  1824  000107                     Button_Init@pGetState:
  1825                           	opt stack 0
  1826                           
  1827                           ; 3 bytes @ 0x7
  1828  000107                     	ds	3
  1829  00010A                     Button_Init@pFunction:
  1830                           	opt stack 0
  1831                           
  1832                           ; 3 bytes @ 0xA
  1833  00010A                     	ds	246
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1h	equ	0xFE2
  1842                           fsr1l	equ	0xFE1
  1843                           
  1844                           	psect	cstackBANK0
  1845  0000BA                     __pcstackBANK0:
  1846                           	opt stack 0
  1847  0000BA                     ??_Console_ClearCursor:
  1848  0000BA                     ??_ADC_SetChannel:
  1849  0000BA                     ??_ADC_ConversionTime:
  1850  0000BA                     ??_ADC_SetupIO:
  1851  0000BA                     ??_sort_iRBumpDrop:
  1852  0000BA                     ?_load_iRScriptStack:
  1853                           	opt stack 0
  1854  0000BA                     ??_Console_Init:
  1855  0000BA                     ??_Console_NewLine:
  1856  0000BA                     ??_Console_FormFeed:
  1857  0000BA                     ??_HMI_SetButton:
  1858  0000BA                     ?_GetPortProperties:
  1859                           	opt stack 0
  1860  0000BA                     ?_GetPortPORT:
  1861                           	opt stack 0
  1862  0000BA                     ?_GetPortTRIS:
  1863                           	opt stack 0
  1864  0000BA                     ?_twos_complement_of:
  1865                           	opt stack 0
  1866  0000BA                     ?___wmul:
  1867                           	opt stack 0
  1868  0000BA                     ?___awdiv:
  1869                           	opt stack 0
  1870  0000BA                     ?___lwdiv:
  1871                           	opt stack 0
  1872  0000BA                     ?___fldiv:
  1873                           	opt stack 0
  1874  0000BA                     ?___lldiv:
  1875                           	opt stack 0
  1876  0000BA                     ?___xxtofl:
  1877                           	opt stack 0
  1878  0000BA                     Mode_Set@pMode:
  1879                           	opt stack 0
  1880  0000BA                     ToSegment@pCHR:
  1881                           	opt stack 0
  1882  0000BA                     HMI_SetBar@pValue:
  1883                           	opt stack 0
  1884  0000BA                     ADC_ClockDivision@pDivide:
  1885                           	opt stack 0
  1886  0000BA                     get_packet_size@packetID:
  1887                           	opt stack 0
  1888  0000BA                     eusart_putch@eusartSendChar:
  1889                           	opt stack 0
  1890  0000BA                     Port_GetPin@pInput:
  1891                           	opt stack 0
  1892  0000BA                     Port_GetQuad@pInput:
  1893                           	opt stack 0
  1894  0000BA                     SPI_DisableISR@pInput:
  1895                           	opt stack 0
  1896  0000BA                     SPI_DCS@pInput:
  1897                           	opt stack 0
  1898  0000BA                     SPI_Send@pInput:
  1899                           	opt stack 0
  1900  0000BA                     Byte_SetBit@pInput:
  1901                           	opt stack 0
  1902  0000BA                     Byte_GetBit@pInput:
  1903                           	opt stack 0
  1904  0000BA                     Byte_SetZone@pInput:
  1905                           	opt stack 0
  1906  0000BA                     Byte_GetZone@pInput:
  1907                           	opt stack 0
  1908  0000BA                     Byte_SetByte@pInput:
  1909                           	opt stack 0
  1910  0000BA                     delay_ms@ms:
  1911                           	opt stack 0
  1912  0000BA                     delay_us@us:
  1913                           	opt stack 0
  1914  0000BA                     reverse@input:
  1915                           	opt stack 0
  1916  0000BA                     twos_complement_of@complementValue:
  1917                           	opt stack 0
  1918  0000BA                     ___wmul@multiplier:
  1919                           	opt stack 0
  1920  0000BA                     ___awdiv@dividend:
  1921                           	opt stack 0
  1922  0000BA                     ___lwdiv@dividend:
  1923                           	opt stack 0
  1924  0000BA                     MXK_Queue@pCallback:
  1925                           	opt stack 0
  1926  0000BA                     Timer0_Start@pFunction:
  1927                           	opt stack 0
  1928  0000BA                     ___lldiv@dividend:
  1929                           	opt stack 0
  1930  0000BA                     ___fldiv@b:
  1931                           	opt stack 0
  1932  0000BA                     ___xxtofl@val:
  1933                           	opt stack 0
  1934                           
  1935                           ; 4 bytes @ 0x0
  1936  0000BA                     	ds	1
  1937  0000BB                     ADC_SetChannel@pChannel:
  1938                           	opt stack 0
  1939  0000BB                     ADC_ClockDivision@reg:
  1940                           	opt stack 0
  1941  0000BB                     ADC_ConversionTime@pCount:
  1942                           	opt stack 0
  1943  0000BB                     rx_assign@packetIDValue:
  1944                           	opt stack 0
  1945  0000BB                     irobot_song_play@songNumber:
  1946                           	opt stack 0
  1947  0000BB                     HMI_SetSegments@pString:
  1948                           	opt stack 0
  1949                           
  1950                           ; 2 bytes @ 0x1
  1951  0000BB                     	ds	1
  1952  0000BC                     GetPortProperties@pInput:
  1953                           	opt stack 0
  1954  0000BC                     GetPortPORT@pInput:
  1955                           	opt stack 0
  1956  0000BC                     GetPortTRIS@pInput:
  1957                           	opt stack 0
  1958  0000BC                     Port_GetPin@pPin:
  1959                           	opt stack 0
  1960  0000BC                     Port_GetQuad@pQuad:
  1961                           	opt stack 0
  1962  0000BC                     SPI_Send@pData:
  1963                           	opt stack 0
  1964  0000BC                     Byte_SetBit@pBit:
  1965                           	opt stack 0
  1966  0000BC                     Byte_GetBit@pBit:
  1967                           	opt stack 0
  1968  0000BC                     Byte_SetZone@pMax:
  1969                           	opt stack 0
  1970  0000BC                     Byte_GetZone@pMax:
  1971                           	opt stack 0
  1972  0000BC                     Byte_SetByte@pValue:
  1973                           	opt stack 0
  1974  0000BC                     Console_Init@x:
  1975                           	opt stack 0
  1976  0000BC                     Console_FormFeed@x:
  1977                           	opt stack 0
  1978  0000BC                     ADC_SetupIO@pChannel:
  1979                           	opt stack 0
  1980  0000BC                     ADC_ClockDivision@unfound:
  1981                           	opt stack 0
  1982  0000BC                     rx_assign@byteNumber:
  1983                           	opt stack 0
  1984  0000BC                     reverse@length:
  1985                           	opt stack 0
  1986  0000BC                     ADC_Start@pInput:
  1987                           	opt stack 0
  1988  0000BC                     ___wmul@multiplicand:
  1989                           	opt stack 0
  1990  0000BC                     ___awdiv@divisor:
  1991                           	opt stack 0
  1992  0000BC                     ___lwdiv@divisor:
  1993                           	opt stack 0
  1994  0000BC                     delay_ms@u:
  1995                           	opt stack 0
  1996  0000BC                     delay_us@u:
  1997                           	opt stack 0
  1998  0000BC                     HMI_SetButton@reindex:
  1999                           	opt stack 0
  2000                           
  2001                           ; 4 bytes @ 0x2
  2002  0000BC                     	ds	1
  2003  0000BD                     ??_Port_GetPin:
  2004  0000BD                     ??_Port_GetQuad:
  2005  0000BD                     ??_Byte_GetBit:
  2006  0000BD                     ??_rx_assign:
  2007  0000BD                     LCD_Write@mode:
  2008                           	opt stack 0
  2009  0000BD                     Byte_SetBit@pValue:
  2010                           	opt stack 0
  2011  0000BD                     Byte_SetZone@pChunk:
  2012                           	opt stack 0
  2013  0000BD                     Byte_GetZone@pChunk:
  2014                           	opt stack 0
  2015  0000BD                     Console_Init@y:
  2016                           	opt stack 0
  2017  0000BD                     Console_FormFeed@y:
  2018                           	opt stack 0
  2019  0000BD                     OutSeg@pSegment:
  2020                           	opt stack 0
  2021  0000BD                     ADC_SetupIO@MASK:
  2022                           	opt stack 0
  2023  0000BD                     Motor_Move@pMotor:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x3
  2027  0000BD                     	ds	1
  2028  0000BE                     ??_Byte_SetBit:
  2029  0000BE                     ??_Console_IncrementCursor:
  2030  0000BE                     ??_OutSeg:
  2031  0000BE                     ??_ADC_Start:
  2032  0000BE                     ??___xxtofl:
  2033  0000BE                     LCD_Write@value:
  2034                           	opt stack 0
  2035  0000BE                     Byte_GetBit@Output:
  2036                           	opt stack 0
  2037  0000BE                     Byte_SetZone@pChunkSize:
  2038                           	opt stack 0
  2039  0000BE                     Byte_GetZone@pChunkSize:
  2040                           	opt stack 0
  2041  0000BE                     reverse@tempVar:
  2042                           	opt stack 0
  2043  0000BE                     ___awdiv@counter:
  2044                           	opt stack 0
  2045  0000BE                     ___lwdiv@counter:
  2046                           	opt stack 0
  2047  0000BE                     HMI_SetSegments@in:
  2048                           	opt stack 0
  2049  0000BE                     ADC_Init@pInput:
  2050                           	opt stack 0
  2051  0000BE                     ___wmul@product:
  2052                           	opt stack 0
  2053  0000BE                     ___lldiv@divisor:
  2054                           	opt stack 0
  2055  0000BE                     ___fldiv@a:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x4
  2059  0000BE                     	ds	1
  2060  0000BF                     ??_Byte_GetZone:
  2061  0000BF                     ?_Console_MakeField:
  2062                           	opt stack 0
  2063  0000BF                     Set_Addr_Window@ys:
  2064                           	opt stack 0
  2065  0000BF                     Set_Rotation@m:
  2066                           	opt stack 0
  2067  0000BF                     Port_GetPin@Output:
  2068                           	opt stack 0
  2069  0000BF                     Port_GetQuad@Output:
  2070                           	opt stack 0
  2071  0000BF                     Byte_SetZone@pValue:
  2072                           	opt stack 0
  2073  0000BF                     rx_assign@packetID:
  2074                           	opt stack 0
  2075  0000BF                     ___awdiv@sign:
  2076                           	opt stack 0
  2077  0000BF                     LCD_Word_Write@value:
  2078                           	opt stack 0
  2079  0000BF                     reverse@iterator:
  2080                           	opt stack 0
  2081  0000BF                     Motor_Move@pDelta:
  2082                           	opt stack 0
  2083  0000BF                     ___lwdiv@quotient:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x5
  2087  0000BF                     	ds	1
  2088  0000C0                     ?_irobot_query_and_update:
  2089                           	opt stack 0
  2090  0000C0                     ??_Byte_SetZone:
  2091  0000C0                     Set_Addr_Window@xe:
  2092                           	opt stack 0
  2093  0000C0                     Set_Rotation@rotation:
  2094                           	opt stack 0
  2095  0000C0                     Byte_GetZone@MASK:
  2096                           	opt stack 0
  2097  0000C0                     OutSeg@pInput:
  2098                           	opt stack 0
  2099  0000C0                     HMI_SetButton@pValue:
  2100                           	opt stack 0
  2101  0000C0                     ADC_Init@pChannel:
  2102                           	opt stack 0
  2103  0000C0                     MXK_BlockSwitchTo@CUR:
  2104                           	opt stack 0
  2105  0000C0                     MXK_SwitchTo@CUR:
  2106                           	opt stack 0
  2107  0000C0                     ___awdiv@quotient:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0x6
  2111  0000C0                     	ds	1
  2112  0000C1                     ??_Console_MakeField:
  2113  0000C1                     ?___lwmod:
  2114                           	opt stack 0
  2115  0000C1                     Set_Addr_Window@ye:
  2116                           	opt stack 0
  2117  0000C1                     Byte_GetZone@Offset:
  2118                           	opt stack 0
  2119  0000C1                     OutSeg@out:
  2120                           	opt stack 0
  2121  0000C1                     HMI_SetButton@v:
  2122                           	opt stack 0
  2123  0000C1                     MXK_BlockSwitchTo@pModule:
  2124                           	opt stack 0
  2125  0000C1                     MXK_SwitchTo@pModule:
  2126                           	opt stack 0
  2127  0000C1                     ___lwmod@dividend:
  2128                           	opt stack 0
  2129                           
  2130                           ; 2 bytes @ 0x7
  2131  0000C1                     	ds	1
  2132  0000C2                     ??___fldiv:
  2133  0000C2                     ??_Console_Tab:
  2134  0000C2                     Set_Addr_Window@xs:
  2135                           	opt stack 0
  2136  0000C2                     Byte_GetZone@Output:
  2137                           	opt stack 0
  2138  0000C2                     ___xxtofl@sign:
  2139                           	opt stack 0
  2140  0000C2                     HMI_Render@a:
  2141                           	opt stack 0
  2142  0000C2                     ___lldiv@quotient:
  2143                           	opt stack 0
  2144                           
  2145                           ; 4 bytes @ 0x8
  2146  0000C2                     	ds	1
  2147  0000C3                     Byte_SetZone@Offset:
  2148                           	opt stack 0
  2149  0000C3                     ___xxtofl@exp:
  2150                           	opt stack 0
  2151  0000C3                     LCD_Fill@pColour:
  2152                           	opt stack 0
  2153  0000C3                     LCD_FillRectangle@pColour:
  2154                           	opt stack 0
  2155  0000C3                     Byte_GetPair@pInput:
  2156                           	opt stack 0
  2157  0000C3                     Console_MakeField@Index:
  2158                           	opt stack 0
  2159  0000C3                     ___lwmod@divisor:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x9
  2163  0000C3                     	ds	1
  2164  0000C4                     ??_load_iRScriptStack:
  2165  0000C4                     Byte_SetZone@MASK:
  2166                           	opt stack 0
  2167  0000C4                     ___xxtofl@arg:
  2168                           	opt stack 0
  2169                           
  2170                           ; 4 bytes @ 0xA
  2171  0000C4                     	ds	1
  2172  0000C5                     LCD_Fill@i:
  2173                           	opt stack 0
  2174  0000C5                     Byte_GetPair@pPair:
  2175                           	opt stack 0
  2176  0000C5                     Console_MakeField@pInput:
  2177                           	opt stack 0
  2178  0000C5                     ___lwmod@counter:
  2179                           	opt stack 0
  2180  0000C5                     Byte_SetPair@pInput:
  2181                           	opt stack 0
  2182  0000C5                     Byte_SetQuad@pInput:
  2183                           	opt stack 0
  2184  0000C5                     LCD_FillRectangle@pPoint:
  2185                           	opt stack 0
  2186                           
  2187                           ; 4 bytes @ 0xB
  2188  0000C5                     	ds	1
  2189  0000C6                     LCD_Fill@j:
  2190                           	opt stack 0
  2191  0000C6                     ___lldiv@counter:
  2192                           	opt stack 0
  2193  0000C6                     ___fldiv@sign:
  2194                           	opt stack 0
  2195  0000C6                     Word_GetPair@pInput:
  2196                           	opt stack 0
  2197  0000C6                     itos@input:
  2198                           	opt stack 0
  2199  0000C6                     Console_MakeField@Column:
  2200                           	opt stack 0
  2201  0000C6                     load_iRScriptStack@loadByte:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0xC
  2205  0000C6                     	ds	1
  2206  0000C7                     Byte_SetPair@pPair:
  2207                           	opt stack 0
  2208  0000C7                     Byte_SetQuad@pQuad:
  2209                           	opt stack 0
  2210  0000C7                     Console_Tab@t:
  2211                           	opt stack 0
  2212  0000C7                     Timer0_Init@pFrequency:
  2213                           	opt stack 0
  2214  0000C7                     Timer2_Init@pFrequency:
  2215                           	opt stack 0
  2216  0000C7                     ___fldiv@rem:
  2217                           	opt stack 0
  2218                           
  2219                           ; 4 bytes @ 0xD
  2220  0000C7                     	ds	1
  2221  0000C8                     ?___flmul:
  2222                           	opt stack 0
  2223  0000C8                     Byte_SetPair@pValue:
  2224                           	opt stack 0
  2225  0000C8                     Byte_SetQuad@pValue:
  2226                           	opt stack 0
  2227  0000C8                     Word_GetPair@pPair:
  2228                           	opt stack 0
  2229  0000C8                     Console_Tab@i:
  2230                           	opt stack 0
  2231  0000C8                     load_iRScriptStack@bytesToLoad:
  2232                           	opt stack 0
  2233  0000C8                     itos@destination:
  2234                           	opt stack 0
  2235  0000C8                     _Console_MakeField$10974:
  2236                           	opt stack 0
  2237  0000C8                     ___flmul@b:
  2238                           	opt stack 0
  2239                           
  2240                           ; 4 bytes @ 0xE
  2241  0000C8                     	ds	1
  2242  0000C9                     Console_Tab@c:
  2243                           	opt stack 0
  2244  0000C9                     load_iRScriptStack@i:
  2245                           	opt stack 0
  2246  0000C9                     Port_SetPin@pInput:
  2247                           	opt stack 0
  2248  0000C9                     Port_Set@pInput:
  2249                           	opt stack 0
  2250  0000C9                     SPI_MinSpeed@pInput:
  2251                           	opt stack 0
  2252  0000C9                     SPI_MaxSpeed@pInput:
  2253                           	opt stack 0
  2254  0000C9                     Word_SetPair@pInput:
  2255                           	opt stack 0
  2256  0000C9                     PortProperty_Valid@pInput:
  2257                           	opt stack 0
  2258  0000C9                     LCD_FillRectangle@pSize:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0xF
  2262  0000C9                     	ds	1
  2263  0000CA                     ??_irobot_query_and_update:
  2264  0000CA                     ??_Console_PrintChar:
  2265  0000CA                     Console_MakeField@x:
  2266                           	opt stack 0
  2267  0000CA                     irobot_leds@LEDBit:
  2268                           	opt stack 0
  2269  0000CA                     itos@Data:
  2270                           	opt stack 0
  2271  0000CA                     irobot_move@moveSpeed:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x10
  2275  0000CA                     	ds	1
  2276  0000CB                     ??_Timer2_Init:
  2277  0000CB                     ??_Timer0_Init:
  2278  0000CB                     Port_SetPin@pPin:
  2279                           	opt stack 0
  2280  0000CB                     Port_Set@pValue:
  2281                           	opt stack 0
  2282  0000CB                     Word_SetPair@pPair:
  2283                           	opt stack 0
  2284  0000CB                     PortProperty_Valid@pPinDrive:
  2285                           	opt stack 0
  2286  0000CB                     Console_MakeField@y:
  2287                           	opt stack 0
  2288  0000CB                     irobot_leds@powerColour:
  2289                           	opt stack 0
  2290  0000CB                     ___fldiv@new_exp:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x11
  2294  0000CB                     	ds	1
  2295  0000CC                     ??_Port_Set:
  2296  0000CC                     Port_SetPin@pValue:
  2297                           	opt stack 0
  2298  0000CC                     Word_SetPair@pValue:
  2299                           	opt stack 0
  2300  0000CC                     PortProperty_Valid@pPin:
  2301                           	opt stack 0
  2302  0000CC                     irobot_leds@powerLuminosity:
  2303                           	opt stack 0
  2304  0000CC                     LCD_DrawField@pField:
  2305                           	opt stack 0
  2306  0000CC                     itos@Length:
  2307                           	opt stack 0
  2308  0000CC                     irobot_move@moveTurnRadius:
  2309                           	opt stack 0
  2310  0000CC                     Timer2_Init@RDIV:
  2311                           	opt stack 0
  2312  0000CC                     ___flmul@a:
  2313                           	opt stack 0
  2314                           
  2315                           ; 4 bytes @ 0x12
  2316  0000CC                     	ds	1
  2317  0000CD                     ??_PortProperty_Valid:
  2318  0000CD                     ??_LCD_FillRectangle:
  2319  0000CD                     Port_SetPin@Type:
  2320                           	opt stack 0
  2321  0000CD                     Console_PrintChar@pInput:
  2322                           	opt stack 0
  2323  0000CD                     irobot_leds@isScript:
  2324                           	opt stack 0
  2325  0000CD                     Timer0_Init@pCPUClock:
  2326                           	opt stack 0
  2327  0000CD                     ___fldiv@grs:
  2328                           	opt stack 0
  2329                           
  2330                           ; 4 bytes @ 0x13
  2331  0000CD                     	ds	1
  2332  0000CE                     ??_irobot_move:
  2333  0000CE                     LED_Set@pValue:
  2334                           	opt stack 0
  2335  0000CE                     putch@c:
  2336                           	opt stack 0
  2337  0000CE                     irobot_led_power_on@powerOnColour:
  2338                           	opt stack 0
  2339  0000CE                     Port_TogglePin@pInput:
  2340                           	opt stack 0
  2341  0000CE                     itos@Out:
  2342                           	opt stack 0
  2343  0000CE                     LCD_DrawField@pPoint:
  2344                           	opt stack 0
  2345                           
  2346                           ; 4 bytes @ 0x14
  2347  0000CE                     	ds	1
  2348  0000CF                     ?_printf:
  2349                           	opt stack 0
  2350  0000CF                     LCD_FillRectangle@i:
  2351                           	opt stack 0
  2352  0000CF                     LED_Set@pLED:
  2353                           	opt stack 0
  2354  0000CF                     irobot_query_and_update@packetIDs:
  2355                           	opt stack 0
  2356  0000CF                     printf@f:
  2357                           	opt stack 0
  2358  0000CF                     PortProperty_Valid@Errors:
  2359                           	opt stack 0
  2360                           
  2361                           ; 16 bytes @ 0x15
  2362  0000CF                     	ds	1
  2363  0000D0                     ??___flmul:
  2364  0000D0                     LCD_FillRectangle@j:
  2365                           	opt stack 0
  2366  0000D0                     Port_TogglePin@pPin:
  2367                           	opt stack 0
  2368  0000D0                     HMI_SetNumber@pInput:
  2369                           	opt stack 0
  2370  0000D0                     Timer2_Init@pCPUClock:
  2371                           	opt stack 0
  2372                           
  2373                           ; 4 bytes @ 0x16
  2374  0000D0                     	ds	1
  2375  0000D1                     Port_TogglePin@Value:
  2376                           	opt stack 0
  2377  0000D1                     irobot_query_and_update@streamSize:
  2378                           	opt stack 0
  2379  0000D1                     ___fldiv@bexp:
  2380                           	opt stack 0
  2381  0000D1                     Timer0_Init@DIVIDE:
  2382                           	opt stack 0
  2383                           
  2384                           ; 4 bytes @ 0x17
  2385  0000D1                     	ds	1
  2386  0000D2                     LED_Toggle@pLED:
  2387                           	opt stack 0
  2388  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2389                           	opt stack 0
  2390  0000D2                     irobot_move@isScript:
  2391                           	opt stack 0
  2392  0000D2                     ___fldiv@aexp:
  2393                           	opt stack 0
  2394  0000D2                     LCD_DrawField@pSize:
  2395                           	opt stack 0
  2396                           
  2397                           ; 4 bytes @ 0x18
  2398  0000D2                     	ds	1
  2399  0000D3                     Event_DIPSwitch@pState:
  2400                           	opt stack 0
  2401  0000D3                     Event_TestButton@pState:
  2402                           	opt stack 0
  2403  0000D3                     irobot_query_and_update@packetVariable:
  2404                           	opt stack 0
  2405  0000D3                     irobot_stop_motion@isScript:
  2406                           	opt stack 0
  2407  0000D3                     irobot_move_straight@straightSpeed:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x19
  2411  0000D3                     	ds	1
  2412  0000D4                     Event_DIPSwitch@Bar:
  2413                           	opt stack 0
  2414  0000D4                     irobot_query_and_update@j:
  2415                           	opt stack 0
  2416  0000D4                     ___flmul@sign:
  2417                           	opt stack 0
  2418  0000D4                     Timer2_Init@DIVIDE:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0x1A
  2422  0000D4                     	ds	1
  2423  0000D5                     irobot_query_and_update@startIndex:
  2424                           	opt stack 0
  2425  0000D5                     ___flmul@aexp:
  2426                           	opt stack 0
  2427  0000D5                     Button_Poll@pButton:
  2428                           	opt stack 0
  2429  0000D5                     Motor_Speed@pMotor:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x1B
  2433  0000D5                     	ds	1
  2434  0000D6                     ??_LCD_DrawField:
  2435  0000D6                     irobot_query_and_update@i:
  2436                           	opt stack 0
  2437  0000D6                     ___flmul@grs:
  2438                           	opt stack 0
  2439                           
  2440                           ; 4 bytes @ 0x1C
  2441  0000D6                     	ds	1
  2442  0000D7                     Button_Poll@pIncrement:
  2443                           	opt stack 0
  2444  0000D7                     Motor_Speed@pFrequency:
  2445                           	opt stack 0
  2446  0000D7                     irobot_rotate@rotateAngle:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x1D
  2450  0000D7                     	ds	1
  2451  0000D8                     ??_Button_Poll:
  2452  0000D8                     LCD_DrawField@count:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x1E
  2456  0000D8                     	ds	1
  2457  0000D9                     ??_printf:
  2458  0000D9                     irobot_rotate@rotateSpeed:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x1F
  2462  0000D9                     	ds	1
  2463  0000DA                     LCD_DrawField@xmax:
  2464                           	opt stack 0
  2465  0000DA                     printf@prec:
  2466                           	opt stack 0
  2467  0000DA                     ___flmul@bexp:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x20
  2471  0000DA                     	ds	1
  2472  0000DB                     ??_irobot_rotate:
  2473  0000DB                     LCD_DrawField@ymax:
  2474                           	opt stack 0
  2475  0000DB                     printf@flag:
  2476                           	opt stack 0
  2477  0000DB                     ___flmul@prod:
  2478                           	opt stack 0
  2479                           
  2480                           ; 4 bytes @ 0x21
  2481  0000DB                     	ds	1
  2482  0000DC                     LCD_DrawField@i:
  2483                           	opt stack 0
  2484  0000DC                     irobot_rotate@isScript:
  2485                           	opt stack 0
  2486  0000DC                     Port_Set@TypeRequired:
  2487                           	opt stack 0
  2488  0000DC                     printf@ap:
  2489                           	opt stack 0
  2490                           
  2491                           ; 2 bytes @ 0x22
  2492  0000DC                     	ds	1
  2493  0000DD                     ??_Console_Render:
  2494  0000DD                     Button_Poll@Pin:
  2495                           	opt stack 0
  2496  0000DD                     irobot_rotate@angleTotal:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x23
  2500  0000DD                     	ds	1
  2501  0000DE                     Port_Set@TypeActual:
  2502                           	opt stack 0
  2503  0000DE                     printf@val:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x24
  2507  0000DE                     	ds	1
  2508  0000DF                     PortProperty_Valid@Pair:
  2509                           	opt stack 0
  2510  0000DF                     Console_Render@temp:
  2511                           	opt stack 0
  2512  0000DF                     irobot_rotate@rotateDirection:
  2513                           	opt stack 0
  2514  0000DF                     ___flmul@temp:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x25
  2518  0000DF                     	ds	1
  2519  0000E0                     Port_Set@Type:
  2520                           	opt stack 0
  2521  0000E0                     printf@c:
  2522                           	opt stack 0
  2523  0000E0                     Port_CheckPairType@pInput:
  2524                           	opt stack 0
  2525  0000E0                     Port_SetPinType@pInput:
  2526                           	opt stack 0
  2527  0000E0                     Console_Render@lCursor:
  2528                           	opt stack 0
  2529                           
  2530                           ; 4 bytes @ 0x26
  2531  0000E0                     	ds	1
  2532  0000E1                     ?_ADC_Voltage:
  2533                           	opt stack 0
  2534  0000E1                     ADC_Voltage@pInput:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x27
  2538  0000E1                     	ds	1
  2539  0000E2                     Port_CheckPairType@pPair:
  2540                           	opt stack 0
  2541  0000E2                     Port_SetPinType@pPin:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x28
  2545  0000E2                     	ds	1
  2546  0000E3                     Port_CheckPairType@pDrive:
  2547                           	opt stack 0
  2548  0000E3                     Port_SetPinType@pType:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x29
  2552  0000E3                     	ds	1
  2553  0000E4                     Port_CheckPairType@Pin1:
  2554                           	opt stack 0
  2555  0000E4                     Port_SetPinType@Output:
  2556                           	opt stack 0
  2557  0000E4                     Console_Render@x:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x2A
  2561  0000E4                     	ds	1
  2562  0000E5                     ??_ADC_Voltage:
  2563  0000E5                     Port_CheckPairType@Pin2:
  2564                           	opt stack 0
  2565  0000E5                     Console_Render@y:
  2566                           	opt stack 0
  2567  0000E5                     Port_SetPinType@Props:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x2B
  2571  0000E5                     	ds	1
  2572  0000E6                     Port_CheckPairType@Output:
  2573                           	opt stack 0
  2574  0000E6                     mode2@dist:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x2C
  2578  0000E6                     	ds	1
  2579  0000E7                     LED_Init@pLED:
  2580                           	opt stack 0
  2581  0000E7                     Port_CheckPairType@Props:
  2582                           	opt stack 0
  2583  0000E7                     Motor_Init@pMotor:
  2584                           	opt stack 0
  2585  0000E7                     SPI_Init@pClock:
  2586                           	opt stack 0
  2587  0000E7                     ADC_Voltage@max:
  2588                           	opt stack 0
  2589                           
  2590                           ; 4 bytes @ 0x2D
  2591  0000E7                     	ds	2
  2592  0000E9                     Port_CheckQuadType@pInput:
  2593                           	opt stack 0
  2594  0000E9                     Motor_Init@pAddress:
  2595                           	opt stack 0
  2596                           
  2597                           ; 2 bytes @ 0x2F
  2598  0000E9                     	ds	2
  2599  0000EB                     Port_CheckQuadType@pQuad:
  2600                           	opt stack 0
  2601  0000EB                     SPI_Init@pChannel:
  2602                           	opt stack 0
  2603  0000EB                     ADC_Voltage@ref:
  2604                           	opt stack 0
  2605                           
  2606                           ; 4 bytes @ 0x31
  2607  0000EB                     	ds	1
  2608  0000EC                     Port_CheckQuadType@pDrive:
  2609                           	opt stack 0
  2610  0000EC                     SPI_Init@pMode:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x32
  2614  0000EC                     	ds	1
  2615  0000ED                     Port_CheckQuadType@Pair1:
  2616                           	opt stack 0
  2617  0000ED                     SPI_Init@pInput:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0x33
  2621  0000ED                     	ds	1
  2622  0000EE                     Port_CheckQuadType@Pair2:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x34
  2626  0000EE                     	ds	1
  2627  0000EF                     ??_LCD_Init:
  2628  0000EF                     Port_CheckQuadType@Output:
  2629                           	opt stack 0
  2630  0000EF                     ADC_Voltage@output:
  2631                           	opt stack 0
  2632                           
  2633                           ; 4 bytes @ 0x35
  2634  0000EF                     	ds	1
  2635  0000F0                     Port_CheckPortType@pInput:
  2636                           	opt stack 0
  2637  0000F0                     Port_SetQuadType@pInput:
  2638                           	opt stack 0
  2639                           
  2640                           ; 2 bytes @ 0x36
  2641  0000F0                     	ds	1
  2642  0000F1                     LCD_Init@i:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x37
  2646  0000F1                     	ds	1
  2647  0000F2                     Port_CheckPortType@pDrive:
  2648                           	opt stack 0
  2649  0000F2                     Port_SetQuadType@pQuad:
  2650                           	opt stack 0
  2651                           
  2652                           ; 1 bytes @ 0x38
  2653  0000F2                     	ds	1
  2654  0000F3                     ?___fltol:
  2655                           	opt stack 0
  2656  0000F3                     Port_CheckPortType@Output:
  2657                           	opt stack 0
  2658  0000F3                     Port_SetQuadType@pType:
  2659                           	opt stack 0
  2660  0000F3                     ___fltol@f1:
  2661                           	opt stack 0
  2662                           
  2663                           ; 4 bytes @ 0x39
  2664  0000F3                     	ds	1
  2665  0000F4                     Port_SetQuadType@Output:
  2666                           	opt stack 0
  2667  0000F4                     Port_SetType@pInput:
  2668                           	opt stack 0
  2669                           
  2670                           ; 2 bytes @ 0x3A
  2671  0000F4                     	ds	1
  2672  0000F5                     HMI_Init@in:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0x3B
  2676  0000F5                     	ds	1
  2677  0000F6                     Port_SetType@pType:
  2678                           	opt stack 0
  2679                           
  2680                           ; 1 bytes @ 0x3C
  2681  0000F6                     	ds	1
  2682  0000F7                     ??_Port_SetType:
  2683  0000F7                     ___fltol@sign1:
  2684                           	opt stack 0
  2685                           
  2686                           ; 1 bytes @ 0x3D
  2687  0000F7                     	ds	1
  2688  0000F8                     ___fltol@exp1:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x3E
  2692  0000F8                     	ds	1
  2693  0000F9                     tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1h	equ	0xFE2
  2701                           fsr1l	equ	0xFE1
  2702                           
  2703                           ; 1 bytes @ 0x3F
  2704                           
  2705                           	psect	cstackCOMRAM
  2706  000001                     __pcstackCOMRAM:
  2707                           	opt stack 0
  2708  000001                     i2Byte_SetBit@pInput:
  2709                           	opt stack 0
  2710  000001                     i2Byte_GetZone@pInput:
  2711                           	opt stack 0
  2712  000001                     i2delay_us@us:
  2713                           	opt stack 0
  2714  000001                     i2MXK_Queue@pCallback:
  2715                           	opt stack 0
  2716                           
  2717                           ; 3 bytes @ 0x0
  2718  000001                     	ds	2
  2719  000003                     i2Byte_SetBit@pBit:
  2720                           	opt stack 0
  2721  000003                     i2Byte_GetZone@pMax:
  2722                           	opt stack 0
  2723  000003                     i2delay_us@u:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x2
  2727  000003                     	ds	1
  2728  000004                     i2Byte_SetBit@pValue:
  2729                           	opt stack 0
  2730  000004                     i2Byte_GetZone@pChunk:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0x3
  2734  000004                     	ds	1
  2735  000005                     ??i2_Byte_SetBit:
  2736  000005                     i2Byte_GetZone@pChunkSize:
  2737                           	opt stack 0
  2738                           
  2739                           ; 1 bytes @ 0x4
  2740  000005                     	ds	1
  2741  000006                     ??i2_Byte_GetZone:
  2742                           
  2743                           ; 1 bytes @ 0x5
  2744  000006                     	ds	1
  2745  000007                     i2Byte_GetZone@MASK:
  2746                           	opt stack 0
  2747  000007                     i2MXK_SwitchTo@CUR:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0x6
  2751  000007                     	ds	1
  2752  000008                     i2Byte_GetZone@Offset:
  2753                           	opt stack 0
  2754  000008                     i2MXK_SwitchTo@pModule:
  2755                           	opt stack 0
  2756                           
  2757                           ; 1 bytes @ 0x7
  2758  000008                     	ds	1
  2759  000009                     i2Byte_GetZone@Output:
  2760                           	opt stack 0
  2761                           
  2762                           ; 1 bytes @ 0x8
  2763  000009                     	ds	1
  2764  00000A                     i2Byte_GetPair@pInput:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0x9
  2768  00000A                     	ds	2
  2769  00000C                     i2Byte_GetPair@pPair:
  2770                           	opt stack 0
  2771                           
  2772                           ; 1 bytes @ 0xB
  2773  00000C                     	ds	1
  2774  00000D                     i2Word_GetPair@pInput:
  2775                           	opt stack 0
  2776                           
  2777                           ; 2 bytes @ 0xC
  2778  00000D                     	ds	2
  2779  00000F                     i2Word_GetPair@pPair:
  2780                           	opt stack 0
  2781                           
  2782                           ; 1 bytes @ 0xE
  2783  00000F                     	ds	1
  2784  000010                     i2Port_SetPin@pInput:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0xF
  2788  000010                     	ds	2
  2789  000012                     i2Port_SetPin@pPin:
  2790                           	opt stack 0
  2791                           
  2792                           ; 1 bytes @ 0x11
  2793  000012                     	ds	1
  2794  000013                     i2Port_SetPin@pValue:
  2795                           	opt stack 0
  2796                           
  2797                           ; 1 bytes @ 0x12
  2798  000013                     	ds	1
  2799  000014                     i2Port_SetPin@Type:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x13
  2803  000014                     	ds	1
  2804  000015                     
  2805                           ; 1 bytes @ 0x14
  2806  000015                     	ds	2
  2807  000017                     ??_ISR_Function:
  2808                           
  2809                           ; 1 bytes @ 0x16
  2810  000017                     	ds	18
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           
  2821 ;;
  2822 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2823 ;;
  2824 ;; *************** function _main *****************
  2825 ;; Defined at:
  2826 ;;		line 319 in file "main.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        2 bytes
  2845 ;; Hardware stack levels required when called:   18
  2846 ;; This function calls:
  2847 ;;		_Console_Render
  2848 ;;		_HMI_Poll
  2849 ;;		_MXK_Dequeue
  2850 ;;		_MXK_Release
  2851 ;;		_MXK_SwitchTo
  2852 ;;		_getMode
  2853 ;;		_init
  2854 ;;		_mode1
  2855 ;;		_mode2
  2856 ;;		_mode3
  2857 ;;		_mode4
  2858 ;;		_printf
  2859 ;; This function is called by:
  2860 ;;		Startup code after reset
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text0
  2865  0137FE                     __ptext0:
  2866                           	opt stack 0
  2867  0137FE                     _main:
  2868                           	opt stack 13
  2869                           
  2870                           ;main.c: 321: init();
  2871                           
  2872                           ;incstack = 0
  2873  0137FE  EC2A  F0A3         	call	_init	;wreg free
  2874  013802                     l2395:
  2875                           
  2876                           ;main.c: 324: getMode();
  2877  013802  ECA7  F09F         	call	_getMode	;wreg free
  2878                           
  2879                           ;main.c: 325: switch (mode) {
  2880  013806  D053               	goto	l2396
  2881  013808                     
  2882                           ;main.c: 327: mode1();
  2883  013808  EC62  F084         	call	_mode1	;wreg free
  2884                           
  2885                           ;main.c: 328: break;
  2886  01380C  D7FA               	goto	l2395
  2887  01380E                     
  2888                           ;main.c: 330: mode2();
  2889  01380E  EC8C  F09B         	call	_mode2	;wreg free
  2890                           
  2891                           ;main.c: 331: break;
  2892  013812  D7F7               	goto	l2395
  2893  013814                     
  2894                           ;main.c: 333: mode3();
  2895  013814  EC37  F0B2         	call	_mode3	;wreg free
  2896                           
  2897                           ;main.c: 334: break;
  2898  013818  D7F4               	goto	l2395
  2899  01381A                     
  2900                           ;main.c: 336: mode4();
  2901  01381A  EC47  F09F         	call	_mode4	;wreg free
  2902                           
  2903                           ;main.c: 337: break;
  2904  01381E  D7F1               	goto	l2395
  2905  013820                     
  2906                           ;main.c: 339: if (MXK_SwitchTo(eMXK_HMI)) {
  2907  013820  0E01               	movlw	1
  2908  013822  EC80  F0AE         	call	_MXK_SwitchTo
  2909  013826  0900               	iorlw	0
  2910  013828  B4D8               	btfsc	status,2,c
  2911  01382A  D7EB               	goto	l2395
  2912                           
  2913                           ;main.c: 340: printf("%c", (char)35);
  2914  01382C  0EFB               	movlw	low STR_1
  2915  01382E  0100               	movlb	0	; () banked
  2916  013830  6FCF               	movwf	printf@f& (0+255),b
  2917  013832  0EFF               	movlw	high STR_1
  2918  013834  0100               	movlb	0	; () banked
  2919  013836  6FD0               	movwf	(printf@f+1)& (0+255),b
  2920  013838  0E00               	movlw	0
  2921  01383A  0100               	movlb	0	; () banked
  2922  01383C  6FD2               	movwf	(?_printf+3)& (0+255),b
  2923  01383E  0E23               	movlw	35
  2924  013840  6FD1               	movwf	(?_printf+2)& (0+255),b
  2925  013842  ECD3  F091         	call	_printf	;wreg free
  2926                           
  2927                           ;main.c: 341: printf("Please select mode.\n");
  2928  013846  0ED8               	movlw	low STR_10
  2929  013848  0100               	movlb	0	; () banked
  2930  01384A  6FCF               	movwf	printf@f& (0+255),b
  2931  01384C  0EFF               	movlw	high STR_10
  2932  01384E  0100               	movlb	0	; () banked
  2933  013850  6FD0               	movwf	(printf@f+1)& (0+255),b
  2934  013852  ECD3  F091         	call	_printf	;wreg free
  2935                           
  2936                           ;main.c: 342: printf("                   \n");
  2937  013856  0EC3               	movlw	low STR_11
  2938  013858  0100               	movlb	0	; () banked
  2939  01385A  6FCF               	movwf	printf@f& (0+255),b
  2940  01385C  0EFF               	movlw	high STR_11
  2941  01385E  0100               	movlb	0	; () banked
  2942  013860  6FD0               	movwf	(printf@f+1)& (0+255),b
  2943  013862  ECD3  F091         	call	_printf	;wreg free
  2944                           
  2945                           ;main.c: 343: printf("                   \n");
  2946  013866  0EC3               	movlw	low STR_11
  2947  013868  0100               	movlb	0	; () banked
  2948  01386A  6FCF               	movwf	printf@f& (0+255),b
  2949  01386C  0EFF               	movlw	high STR_11
  2950  01386E  0100               	movlb	0	; () banked
  2951  013870  6FD0               	movwf	(printf@f+1)& (0+255),b
  2952  013872  ECD3  F091         	call	_printf	;wreg free
  2953                           
  2954                           ;main.c: 344: printf("                   \n");
  2955  013876  0EC3               	movlw	low STR_11
  2956  013878  0100               	movlb	0	; () banked
  2957  01387A  6FCF               	movwf	printf@f& (0+255),b
  2958  01387C  0EFF               	movlw	high STR_11
  2959  01387E  0100               	movlb	0	; () banked
  2960  013880  6FD0               	movwf	(printf@f+1)& (0+255),b
  2961  013882  ECD3  F091         	call	_printf	;wreg free
  2962                           
  2963                           ;main.c: 345: printf("                   \n");
  2964  013886  0EC3               	movlw	low STR_11
  2965  013888  0100               	movlb	0	; () banked
  2966  01388A  6FCF               	movwf	printf@f& (0+255),b
  2967  01388C  0EFF               	movlw	high STR_11
  2968  01388E  0100               	movlb	0	; () banked
  2969  013890  6FD0               	movwf	(printf@f+1)& (0+255),b
  2970  013892  ECD3  F091         	call	_printf	;wreg free
  2971                           
  2972                           ;main.c: 346: Console_Render();
  2973  013896  ECE7  F08E         	call	_Console_Render	;wreg free
  2974                           
  2975                           ;main.c: 347: HMI_Poll();
  2976  01389A  EC76  F0A9         	call	_HMI_Poll	;wreg free
  2977                           
  2978                           ;main.c: 348: if (MXK_Release())
  2979  01389E  ECAE  F0B1         	call	_MXK_Release	;wreg free
  2980  0138A2  0900               	iorlw	0
  2981  0138A4  B4D8               	btfsc	status,2,c
  2982  0138A6  D7AD               	goto	l2395
  2983                           
  2984                           ;main.c: 349: MXK_Dequeue();
  2985  0138A8  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  2986                           
  2987                           ;main.c: 350: }
  2988                           ;main.c: 351: }
  2989  0138AC  D7AA               	goto	l2395
  2990  0138AE                     l2396:
  2991  0138AE  C073  F3FC         	movff	_mode,??_main
  2992  0138B2  C074  F3FD         	movff	_mode+1,??_main+1
  2993                           
  2994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2995                           ; Switch size 1, requested type "space"
  2996                           ; Number of cases is 1, Range of values is 0 to 0
  2997                           ; switch strategies available:
  2998                           ; Name         Instructions Cycles
  2999                           ; simple_byte            4     3 (average)
  3000                           ;	Chosen strategy is simple_byte
  3001  0138B6  0103               	movlb	3	; () banked
  3002  0138B8  51FD               	movf	(??_main+1)& (0+255),w,b
  3003  0138BA  0A00               	xorlw	0	; case 0
  3004  0138BC  A4D8               	btfss	status,2,c
  3005  0138BE  D7B0               	goto	l2402
  3006                           
  3007                           ; BSR set to: 3
  3008                           ; Switch size 1, requested type "space"
  3009                           ; Number of cases is 4, Range of values is 1 to 4
  3010                           ; switch strategies available:
  3011                           ; Name         Instructions Cycles
  3012                           ; simple_byte           13     7 (average)
  3013                           ;	Chosen strategy is simple_byte
  3014  0138C0  0103               	movlb	3	; () banked
  3015  0138C2  51FC               	movf	??_main& (0+255),w,b
  3016  0138C4  0A01               	xorlw	1	; case 1
  3017  0138C6  B4D8               	btfsc	status,2,c
  3018  0138C8  D79F               	goto	l2397
  3019  0138CA  0A03               	xorlw	3	; case 2
  3020  0138CC  B4D8               	btfsc	status,2,c
  3021  0138CE  D79F               	goto	l2399
  3022  0138D0  0A01               	xorlw	1	; case 3
  3023  0138D2  B4D8               	btfsc	status,2,c
  3024  0138D4  D79F               	goto	l2400
  3025  0138D6  0A07               	xorlw	7	; case 4
  3026  0138D8  B4D8               	btfsc	status,2,c
  3027  0138DA  D79F               	goto	l2401
  3028  0138DC  D7A1               	goto	l2402
  3029  0138DE                     __end_of_main:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           postdec1	equ	0xFE5
  3038                           fsr1h	equ	0xFE2
  3039                           fsr1l	equ	0xFE1
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _mode4 *****************
  3043 ;; Defined at:
  3044 ;;		line 298 in file "main.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;		None
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:        0 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:   17
  3065 ;; This function calls:
  3066 ;;		_findClosestWall
  3067 ;;		_irobot_move_straight
  3068 ;;		_irobot_rotate
  3069 ;;		_irobot_song_play
  3070 ;;		_irobot_stop_motion
  3071 ;;		_safeToGo
  3072 ;;		_update_bump_and_cliff
  3073 ;; This function is called by:
  3074 ;;		_main
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text1
  3079  013E8E                     __ptext1:
  3080                           	opt stack 0
  3081  013E8E                     _mode4:
  3082                           	opt stack 13
  3083                           
  3084                           ;main.c: 299: safeToGo();
  3085                           
  3086                           ; BSR set to: 3
  3087                           ;incstack = 0
  3088  013E8E  EC3F  F0AD         	call	_safeToGo	;wreg free
  3089                           
  3090                           ;main.c: 300: StepRotate = 401;
  3091  013E92  0E01               	movlw	1
  3092  013E94  0100               	movlb	0	; () banked
  3093  013E96  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3094  013E98  0E91               	movlw	145
  3095  013E9A  6F71               	movwf	_StepRotate& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;main.c: 301: MinDist = 1000;
  3099  013E9C  0E03               	movlw	3
  3100  013E9E  0100               	movlb	0	; () banked
  3101  013EA0  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3102  013EA2  0EE8               	movlw	232
  3103  013EA4  6FFB               	movwf	_MinDist& (0+255),b
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;main.c: 302: Stepstomin = 0;
  3107  013EA6  0E00               	movlw	0
  3108  013EA8  0100               	movlb	0	; () banked
  3109  013EAA  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3110  013EAC  0E00               	movlw	0
  3111  013EAE  6F6F               	movwf	_Stepstomin& (0+255),b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;main.c: 303: angleToClosestWall = 1000;
  3115  013EB0  0E03               	movlw	3
  3116  013EB2  0100               	movlb	0	; () banked
  3117  013EB4  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3118  013EB6  0EE8               	movlw	232
  3119  013EB8  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 304: IRValue = 0;
  3123  013EBA  0E00               	movlw	0
  3124  013EBC  0100               	movlb	0	; () banked
  3125  013EBE  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3126  013EC0  0E00               	movlw	0
  3127  013EC2  6F6D               	movwf	_IRValue& (0+255),b
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;main.c: 305: TimerX = 8;
  3131  013EC4  0E00               	movlw	0
  3132  013EC6  0100               	movlb	0	; () banked
  3133  013EC8  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3134  013ECA  0E08               	movlw	8
  3135  013ECC  6FF9               	movwf	_TimerX& (0+255),b
  3136                           
  3137                           ;main.c: 306: while (StepRotate > 0) {
  3138  013ECE  D002               	goto	l2382
  3139  013ED0                     l16408:
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 307: findClosestWall();
  3143  013ED0  EC09  F08A         	call	_findClosestWall	;wreg free
  3144  013ED4                     l2382:
  3145  013ED4  0100               	movlb	0	; () banked
  3146  013ED6  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3147  013ED8  D007               	goto	u13570
  3148  013EDA  0100               	movlb	0	; () banked
  3149  013EDC  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3150  013EDE  E1F8               	bnz	l16408
  3151  013EE0  0100               	movlb	0	; () banked
  3152  013EE2  0571               	decf	_StepRotate& (0+255),w,b
  3153  013EE4  B0D8               	btfsc	status,0,c
  3154  013EE6  D7F4               	goto	l2383
  3155  013EE8                     u13570:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 308: }
  3159                           ;main.c: 309: irobot_rotate(0, angleToClosestWall - 67, 200);
  3160                           
  3161                           ; BSR set to: 0
  3162  013EE8  0EBD               	movlw	189
  3163  013EEA  0100               	movlb	0	; () banked
  3164  013EEC  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3165  013EEE  0100               	movlb	0	; () banked
  3166  013EF0  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3167  013EF2  0EFF               	movlw	255
  3168  013EF4  0100               	movlb	0	; () banked
  3169  013EF6  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3170  013EF8  0100               	movlb	0	; () banked
  3171  013EFA  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3172  013EFC  0E00               	movlw	0
  3173  013EFE  0100               	movlb	0	; () banked
  3174  013F00  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3175  013F02  0EC8               	movlw	200
  3176  013F04  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3177  013F06  0E00               	movlw	0
  3178  013F08  EC2B  F0A2         	call	_irobot_rotate
  3179                           
  3180                           ;main.c: 310: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3181  013F0C  D009               	goto	l2385
  3182  013F0E                     
  3183                           ;main.c: 311: irobot_move_straight(200);
  3184  013F0E  0E00               	movlw	0
  3185  013F10  0100               	movlb	0	; () banked
  3186  013F12  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3187  013F14  0EC8               	movlw	200
  3188  013F16  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3189  013F18  ECD7  F0B1         	call	_irobot_move_straight	;wreg free
  3190                           
  3191                           ;main.c: 312: update_bump_and_cliff();
  3192  013F1C  EC7B  F0AF         	call	_update_bump_and_cliff	;wreg free
  3193  013F20                     l2385:
  3194  013F20  0100               	movlb	0	; () banked
  3195  013F22  5189               	movf	_iRBumpLeft& (0+255),w,b
  3196  013F24  A4D8               	btfss	status,2,c
  3197  013F26  D00C               	goto	u13610
  3198                           
  3199                           ; BSR set to: 0
  3200  013F28  0100               	movlb	0	; () banked
  3201  013F2A  518A               	movf	_iRBumpRight& (0+255),w,b
  3202  013F2C  A4D8               	btfss	status,2,c
  3203  013F2E  D008               	goto	u13610
  3204                           
  3205                           ; BSR set to: 0
  3206  013F30  0100               	movlb	0	; () banked
  3207  013F32  5188               	movf	_iRDropRight& (0+255),w,b
  3208  013F34  A4D8               	btfss	status,2,c
  3209  013F36  D004               	goto	u13610
  3210                           
  3211                           ; BSR set to: 0
  3212  013F38  0100               	movlb	0	; () banked
  3213  013F3A  5187               	movf	_iRDropLeft& (0+255),w,b
  3214  013F3C  B4D8               	btfsc	status,2,c
  3215  013F3E  D7E7               	goto	l2386
  3216  013F40                     u13610:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 313: }
  3220                           ;main.c: 314: irobot_song_play(0);
  3221                           
  3222                           ; BSR set to: 0
  3223                           
  3224                           ; BSR set to: 0
  3225  013F40  0E00               	movlw	0
  3226  013F42  EC42  F0B2         	call	_irobot_song_play
  3227                           
  3228                           ;main.c: 315: irobot_stop_motion(0);
  3229  013F46  0E00               	movlw	0
  3230  013F48  ECF5  F0AD         	call	_irobot_stop_motion
  3231  013F4C  0012               	return		;funcret
  3232  013F4E                     __end_of_mode4:
  3233                           	opt stack 0
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postdec1	equ	0xFE5
  3241                           fsr1h	equ	0xFE2
  3242                           fsr1l	equ	0xFE1
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _findClosestWall *****************
  3246 ;; Defined at:
  3247 ;;		line 150 in file "main.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;		None
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;		None
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;Total ram usage:        5 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:   13
  3268 ;; This function calls:
  3269 ;;		_ADC_Start
  3270 ;;		_ADC_Voltage
  3271 ;;		_Console_Render
  3272 ;;		_HMI_Render
  3273 ;;		_HMI_SetNumber
  3274 ;;		_MXK_Dequeue
  3275 ;;		_MXK_Release
  3276 ;;		_MXK_SwitchTo
  3277 ;;		_Motor_Move
  3278 ;;		_Motor_Speed
  3279 ;;		___fldiv
  3280 ;;		___flmul
  3281 ;;		___fltol
  3282 ;;		___xxtofl
  3283 ;;		_printf
  3284 ;; This function is called by:
  3285 ;;		_mode4
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text2
  3290  011412                     __ptext2:
  3291                           	opt stack 0
  3292  011412                     _findClosestWall:
  3293                           	opt stack 16
  3294                           
  3295                           ;main.c: 151: StepRotate--;
  3296                           
  3297                           ;incstack = 0
  3298  011412  0100               	movlb	0	; () banked
  3299  011414  0771               	decf	_StepRotate& (0+255),f,b
  3300  011416  A0D8               	btfss	status,0,c
  3301  011418  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 152: ADC_Start(&ADC_AN0);
  3305  01141A  0EB1               	movlw	low _ADC_AN0
  3306  01141C  0100               	movlb	0	; () banked
  3307  01141E  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3308  011420  0E00               	movlw	high _ADC_AN0
  3309  011422  0100               	movlb	0	; () banked
  3310  011424  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3311  011426  EC12  F0A7         	call	_ADC_Start	;wreg free
  3312                           
  3313                           ;main.c: 153: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3314  01142A  0EB1               	movlw	low _ADC_AN0
  3315  01142C  0100               	movlb	0	; () banked
  3316  01142E  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3317  011430  0E00               	movlw	high _ADC_AN0
  3318  011432  0100               	movlb	0	; () banked
  3319  011434  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3320  011436  EC6F  F09C         	call	_ADC_Voltage	;wreg free
  3321  01143A  C0E1  F105         	movff	?_ADC_Voltage,_findClosestWall$15596
  3322  01143E  C0E2  F106         	movff	?_ADC_Voltage+1,_findClosestWall$15596+1
  3323  011442  C0E3  F107         	movff	?_ADC_Voltage+2,_findClosestWall$15596+2
  3324  011446  C0E4  F108         	movff	?_ADC_Voltage+3,_findClosestWall$15596+3
  3325                           
  3326                           ;main.c: 153: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3327  01144A  C105  F0BE         	movff	_findClosestWall$15596,___fldiv@a
  3328  01144E  C106  F0BF         	movff	_findClosestWall$15596+1,___fldiv@a+1
  3329  011452  C107  F0C0         	movff	_findClosestWall$15596+2,___fldiv@a+2
  3330  011456  C108  F0C1         	movff	_findClosestWall$15596+3,___fldiv@a+3
  3331  01145A  0E00               	movlw	0
  3332  01145C  0100               	movlb	0	; () banked
  3333  01145E  6FBA               	movwf	___fldiv@b& (0+255),b
  3334  011460  0E00               	movlw	0
  3335  011462  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3336  011464  0E6C               	movlw	108
  3337  011466  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3338  011468  0E42               	movlw	66
  3339  01146A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3340  01146C  EC4C  F086         	call	___fldiv	;wreg free
  3341  011470  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3342  011474  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3343  011478  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3344  01147C  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3345  011480  EC0E  F09A         	call	___fltol	;wreg free
  3346  011484  C0F3  F06D         	movff	?___fltol,_IRValue
  3347  011488  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3348                           
  3349                           ;main.c: 154: if (MXK_SwitchTo(eMXK_HMI)) {
  3350  01148C  0E01               	movlw	1
  3351  01148E  EC80  F0AE         	call	_MXK_SwitchTo
  3352  011492  0900               	iorlw	0
  3353  011494  B4D8               	btfsc	status,2,c
  3354  011496  D00E               	goto	l2330
  3355                           
  3356                           ;main.c: 155: HMI_SetNumber(IRValue);
  3357  011498  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3358  01149C  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3359  0114A0  ECA9  F0B0         	call	_HMI_SetNumber	;wreg free
  3360                           
  3361                           ;main.c: 156: HMI_Render();
  3362  0114A4  ECE1  F0AE         	call	_HMI_Render	;wreg free
  3363                           
  3364                           ;main.c: 157: if (MXK_Release())
  3365  0114A8  ECAE  F0B1         	call	_MXK_Release	;wreg free
  3366  0114AC  0900               	iorlw	0
  3367  0114AE  A4D8               	btfss	status,2,c
  3368                           
  3369                           ;main.c: 158: MXK_Dequeue();
  3370  0114B0  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  3371  0114B4                     l2330:
  3372                           
  3373                           ;main.c: 159: }
  3374                           ;main.c: 160: if (IRValue < MinDist) {
  3375  0114B4  0100               	movlb	0	; () banked
  3376  0114B6  51FB               	movf	_MinDist& (0+255),w,b
  3377  0114B8  0100               	movlb	0	; () banked
  3378  0114BA  5D6D               	subwf	_IRValue& (0+255),w,b
  3379  0114BC  0100               	movlb	0	; () banked
  3380  0114BE  516E               	movf	(_IRValue+1)& (0+255),w,b
  3381  0114C0  0A80               	xorlw	128
  3382  0114C2  0101               	movlb	1	; () banked
  3383  0114C4  6F04               	movwf	??_findClosestWall& (0+255),b
  3384  0114C6  0100               	movlb	0	; () banked
  3385  0114C8  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3386  0114CA  0A80               	xorlw	128
  3387  0114CC  0101               	movlb	1	; () banked
  3388  0114CE  5904               	subwfb	??_findClosestWall& (0+255),w,b
  3389  0114D0  B0D8               	btfsc	status,0,c
  3390  0114D2  D008               	goto	l2331
  3391                           
  3392                           ; BSR set to: 1
  3393                           ;main.c: 161: MinDist = IRValue;
  3394  0114D4  C06D  F0FB         	movff	_IRValue,_MinDist
  3395  0114D8  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3396                           
  3397                           ;main.c: 162: Stepstomin = StepRotate;
  3398  0114DC  C071  F06F         	movff	_StepRotate,_Stepstomin
  3399  0114E0  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3400  0114E4                     l2331:
  3401                           
  3402                           ; BSR set to: 1
  3403                           ;main.c: 163: }
  3404                           ;main.c: 164: if (MXK_SwitchTo(eMXK_Motor)) {
  3405                           
  3406                           ; BSR set to: 1
  3407  0114E4  0E08               	movlw	8
  3408  0114E6  EC80  F0AE         	call	_MXK_SwitchTo
  3409  0114EA  0900               	iorlw	0
  3410  0114EC  B4D8               	btfsc	status,2,c
  3411  0114EE  D01F               	goto	l2333
  3412                           
  3413                           ;main.c: 165: Motor_Speed(&Stepper, (50));
  3414  0114F0  0ECF               	movlw	low _Stepper
  3415  0114F2  0100               	movlb	0	; () banked
  3416  0114F4  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3417  0114F6  0E03               	movlw	high _Stepper
  3418  0114F8  0100               	movlb	0	; () banked
  3419  0114FA  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3420  0114FC  0E00               	movlw	0
  3421  0114FE  0100               	movlb	0	; () banked
  3422  011500  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3423  011502  0E32               	movlw	50
  3424  011504  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3425  011506  EC94  F0B0         	call	_Motor_Speed	;wreg free
  3426                           
  3427                           ;main.c: 166: Motor_Move(&Stepper, -1);
  3428  01150A  0ECF               	movlw	low _Stepper
  3429  01150C  0100               	movlb	0	; () banked
  3430  01150E  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3431  011510  0E03               	movlw	high _Stepper
  3432  011512  0100               	movlb	0	; () banked
  3433  011514  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3434  011516  0EFF               	movlw	255
  3435  011518  0100               	movlb	0	; () banked
  3436  01151A  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3437  01151C  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3438  01151E  EC98  F0AF         	call	_Motor_Move	;wreg free
  3439                           
  3440                           ;main.c: 167: if (MXK_Release())
  3441  011522  ECAE  F0B1         	call	_MXK_Release	;wreg free
  3442  011526  0900               	iorlw	0
  3443  011528  A4D8               	btfss	status,2,c
  3444                           
  3445                           ;main.c: 168: MXK_Dequeue();
  3446  01152A  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  3447  01152E                     l2333:
  3448                           
  3449                           ;main.c: 169: }
  3450                           ;main.c: 170: TimerX = 10;
  3451  01152E  0E00               	movlw	0
  3452  011530  0100               	movlb	0	; () banked
  3453  011532  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3454  011534  0E0A               	movlw	10
  3455  011536  6FF9               	movwf	_TimerX& (0+255),b
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;main.c: 171: if (TimerX > 0) {
  3459  011538  0100               	movlb	0	; () banked
  3460  01153A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3461  01153C  D063               	goto	u13280
  3462  01153E  0100               	movlb	0	; () banked
  3463  011540  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3464  011542  E156               	bnz	l16200
  3465  011544  0100               	movlb	0	; () banked
  3466  011546  05F9               	decf	_TimerX& (0+255),w,b
  3467  011548  B0D8               	btfsc	status,0,c
  3468  01154A  D052               	goto	l2335
  3469  01154C  D05B               	goto	u13280
  3470  01154E                     l16182:
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;main.c: 173: ADC_Start(&ADC_AN0);
  3474  01154E  0EB1               	movlw	low _ADC_AN0
  3475  011550  0100               	movlb	0	; () banked
  3476  011552  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3477  011554  0E00               	movlw	high _ADC_AN0
  3478  011556  0100               	movlb	0	; () banked
  3479  011558  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3480  01155A  EC12  F0A7         	call	_ADC_Start	;wreg free
  3481                           
  3482                           ;main.c: 174: if (MXK_SwitchTo(eMXK_HMI)) {
  3483  01155E  0E01               	movlw	1
  3484  011560  EC80  F0AE         	call	_MXK_SwitchTo
  3485  011564  0900               	iorlw	0
  3486  011566  B4D8               	btfsc	status,2,c
  3487  011568  D00E               	goto	l2338
  3488                           
  3489                           ;main.c: 175: HMI_SetNumber(IRValue);
  3490  01156A  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3491  01156E  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3492  011572  ECA9  F0B0         	call	_HMI_SetNumber	;wreg free
  3493                           
  3494                           ;main.c: 176: HMI_Render();
  3495  011576  ECE1  F0AE         	call	_HMI_Render	;wreg free
  3496                           
  3497                           ;main.c: 177: if (MXK_Release())
  3498  01157A  ECAE  F0B1         	call	_MXK_Release	;wreg free
  3499  01157E  0900               	iorlw	0
  3500  011580  A4D8               	btfss	status,2,c
  3501                           
  3502                           ;main.c: 178: MXK_Dequeue();
  3503  011582  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  3504  011586                     l2338:
  3505                           
  3506                           ;main.c: 179: }
  3507                           ;main.c: 180: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3508  011586  0EB1               	movlw	low _ADC_AN0
  3509  011588  0100               	movlb	0	; () banked
  3510  01158A  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3511  01158C  0E00               	movlw	high _ADC_AN0
  3512  01158E  0100               	movlb	0	; () banked
  3513  011590  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3514  011592  EC6F  F09C         	call	_ADC_Voltage	;wreg free
  3515  011596  C0E1  F105         	movff	?_ADC_Voltage,_findClosestWall$15596
  3516  01159A  C0E2  F106         	movff	?_ADC_Voltage+1,_findClosestWall$15596+1
  3517  01159E  C0E3  F107         	movff	?_ADC_Voltage+2,_findClosestWall$15596+2
  3518  0115A2  C0E4  F108         	movff	?_ADC_Voltage+3,_findClosestWall$15596+3
  3519                           
  3520                           ;main.c: 179: }
  3521                           ;main.c: 180: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3522  0115A6  C105  F0BE         	movff	_findClosestWall$15596,___fldiv@a
  3523  0115AA  C106  F0BF         	movff	_findClosestWall$15596+1,___fldiv@a+1
  3524  0115AE  C107  F0C0         	movff	_findClosestWall$15596+2,___fldiv@a+2
  3525  0115B2  C108  F0C1         	movff	_findClosestWall$15596+3,___fldiv@a+3
  3526  0115B6  0E00               	movlw	0
  3527  0115B8  0100               	movlb	0	; () banked
  3528  0115BA  6FBA               	movwf	___fldiv@b& (0+255),b
  3529  0115BC  0E00               	movlw	0
  3530  0115BE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3531  0115C0  0E6C               	movlw	108
  3532  0115C2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3533  0115C4  0E42               	movlw	66
  3534  0115C6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3535  0115C8  EC4C  F086         	call	___fldiv	;wreg free
  3536  0115CC  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3537  0115D0  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3538  0115D4  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3539  0115D8  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3540  0115DC  EC0E  F09A         	call	___fltol	;wreg free
  3541  0115E0  C0F3  F06D         	movff	?___fltol,_IRValue
  3542  0115E4  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3543                           
  3544                           ;main.c: 181: TimerX--;
  3545  0115E8  0100               	movlb	0	; () banked
  3546  0115EA  07F9               	decf	_TimerX& (0+255),f,b
  3547  0115EC  A0D8               	btfss	status,0,c
  3548  0115EE  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3549  0115F0                     l2335:
  3550  0115F0                     l16200:
  3551                           
  3552                           ; BSR set to: 0
  3553  0115F0  0100               	movlb	0	; () banked
  3554  0115F2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3555  0115F4  D007               	goto	u13280
  3556  0115F6  0100               	movlb	0	; () banked
  3557  0115F8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3558  0115FA  E1A9               	bnz	l16182
  3559  0115FC  0100               	movlb	0	; () banked
  3560  0115FE  05F9               	decf	_TimerX& (0+255),w,b
  3561  011600  B0D8               	btfsc	status,0,c
  3562  011602  D7A5               	goto	l2336
  3563  011604                     u13280:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;main.c: 182: }
  3567                           ;main.c: 183: }
  3568                           ;main.c: 184: angleToClosestWall = Stepstomin * 0.67;
  3569                           
  3570                           ; BSR set to: 0
  3571                           
  3572                           ; BSR set to: 0
  3573  011604  0E1F               	movlw	31
  3574  011606  0100               	movlb	0	; () banked
  3575  011608  6FCC               	movwf	___flmul@a& (0+255),b
  3576  01160A  0E85               	movlw	133
  3577  01160C  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3578  01160E  0E2B               	movlw	43
  3579  011610  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3580  011612  0E3F               	movlw	63
  3581  011614  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3582  011616  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3583  01161A  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3584  01161E  0100               	movlb	0	; () banked
  3585  011620  0E00               	movlw	0
  3586  011622  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3587  011624  0EFF               	movlw	-1
  3588  011626  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3589  011628  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3590  01162A  0E01               	movlw	1
  3591  01162C  ECEC  F090         	call	___xxtofl
  3592  011630  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3593  011634  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3594  011638  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3595  01163C  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3596  011640  EC00  F080         	call	___flmul	;wreg free
  3597  011644  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3598  011648  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3599  01164C  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3600  011650  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3601  011654  EC0E  F09A         	call	___fltol	;wreg free
  3602  011658  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3603  01165C  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3604                           
  3605                           ;main.c: 185: if (MXK_SwitchTo(eMXK_HMI)) {
  3606  011660  0E01               	movlw	1
  3607  011662  EC80  F0AE         	call	_MXK_SwitchTo
  3608  011666  0900               	iorlw	0
  3609  011668  B4D8               	btfsc	status,2,c
  3610  01166A  0012               	return	
  3611                           
  3612                           ;main.c: 186: printf("%c", (char)35);
  3613  01166C  0EFB               	movlw	low STR_1
  3614  01166E  0100               	movlb	0	; () banked
  3615  011670  6FCF               	movwf	printf@f& (0+255),b
  3616  011672  0EFF               	movlw	high STR_1
  3617  011674  0100               	movlb	0	; () banked
  3618  011676  6FD0               	movwf	(printf@f+1)& (0+255),b
  3619  011678  0E00               	movlw	0
  3620  01167A  0100               	movlb	0	; () banked
  3621  01167C  6FD2               	movwf	(?_printf+3)& (0+255),b
  3622  01167E  0E23               	movlw	35
  3623  011680  6FD1               	movwf	(?_printf+2)& (0+255),b
  3624  011682  ECD3  F091         	call	_printf	;wreg free
  3625                           
  3626                           ;main.c: 187: printf("Closest Wall:%u\nClosest Angle:%c\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3627  011686  0E59               	movlw	low STR_2
  3628  011688  0100               	movlb	0	; () banked
  3629  01168A  6FCF               	movwf	printf@f& (0+255),b
  3630  01168C  0EFF               	movlw	high STR_2
  3631  01168E  0100               	movlb	0	; () banked
  3632  011690  6FD0               	movwf	(printf@f+1)& (0+255),b
  3633  011692  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3634  011696  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3635  01169A  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3636  01169E  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3637  0116A2  C089  F0D5         	movff	_iRBumpLeft,?_printf+6
  3638  0116A6  0100               	movlb	0	; () banked
  3639  0116A8  6BD6               	clrf	(?_printf+7)& (0+255),b
  3640  0116AA  C08A  F0D7         	movff	_iRBumpRight,?_printf+8
  3641  0116AE  0100               	movlb	0	; () banked
  3642  0116B0  6BD8               	clrf	(?_printf+9)& (0+255),b
  3643  0116B2  ECD3  F091         	call	_printf	;wreg free
  3644                           
  3645                           ;main.c: 188: Console_Render();
  3646  0116B6  ECE7  F08E         	call	_Console_Render	;wreg free
  3647                           
  3648                           ;main.c: 189: if (MXK_Release())
  3649  0116BA  ECAE  F0B1         	call	_MXK_Release	;wreg free
  3650  0116BE  0900               	iorlw	0
  3651  0116C0  B4D8               	btfsc	status,2,c
  3652  0116C2  0012               	return	
  3653                           
  3654                           ;main.c: 190: MXK_Dequeue();
  3655  0116C4  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  3656  0116C8  0012               	return	
  3657  0116CA                     __end_of_findClosestWall:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           postdec1	equ	0xFE5
  3666                           fsr1h	equ	0xFE2
  3667                           fsr1l	equ	0xFE1
  3668                           status	equ	0xFD8
  3669                           
  3670 ;; *************** function _mode3 *****************
  3671 ;; Defined at:
  3672 ;;		line 289 in file "main.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;Total ram usage:        0 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:   17
  3693 ;; This function calls:
  3694 ;;		_move_and_rotate
  3695 ;;		_safeToGo
  3696 ;; This function is called by:
  3697 ;;		_main
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text3
  3702  01646E                     __ptext3:
  3703                           	opt stack 0
  3704  01646E                     _mode3:
  3705                           	opt stack 13
  3706                           
  3707                           ;main.c: 290: safeToGo();
  3708                           
  3709                           ;incstack = 0
  3710  01646E  EC3F  F0AD         	call	_safeToGo	;wreg free
  3711                           
  3712                           ;main.c: 291: move_and_rotate();
  3713  016472  EC54  F0A7         	call	_move_and_rotate	;wreg free
  3714                           
  3715                           ;main.c: 292: move_and_rotate();
  3716  016476  EC54  F0A7         	call	_move_and_rotate	;wreg free
  3717                           
  3718                           ;main.c: 293: move_and_rotate();
  3719  01647A  EC54  F0A7         	call	_move_and_rotate	;wreg free
  3720                           
  3721                           ;main.c: 294: move_and_rotate();
  3722  01647E  EC54  F0A7         	call	_move_and_rotate	;wreg free
  3723  016482  0012               	return		;funcret
  3724  016484                     __end_of_mode3:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           postdec1	equ	0xFE5
  3733                           fsr1h	equ	0xFE2
  3734                           fsr1l	equ	0xFE1
  3735                           status	equ	0xFD8
  3736                           
  3737 ;; *************** function _move_and_rotate *****************
  3738 ;; Defined at:
  3739 ;;		line 136 in file "main.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;Total ram usage:        0 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:   12
  3760 ;; This function calls:
  3761 ;;		_delay_ms
  3762 ;;		_irobot_move_straight
  3763 ;;		_irobot_rotate
  3764 ;;		_irobot_stop_motion
  3765 ;;		_update_distance
  3766 ;; This function is called by:
  3767 ;;		_mode3
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text4
  3772  014EA8                     __ptext4:
  3773                           	opt stack 0
  3774  014EA8                     _move_and_rotate:
  3775                           	opt stack 17
  3776                           
  3777                           ;main.c: 137: dist = 0;
  3778                           
  3779                           ;incstack = 0
  3780  014EA8  0E00               	movlw	0
  3781  014EAA  0100               	movlb	0	; () banked
  3782  014EAC  6F6A               	movwf	(_dist+1)& (0+255),b
  3783  014EAE  0E00               	movlw	0
  3784  014EB0  6F69               	movwf	_dist& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;main.c: 138: irobot_move_straight(100);
  3788  014EB2  0E00               	movlw	0
  3789  014EB4  0100               	movlb	0	; () banked
  3790  014EB6  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3791  014EB8  0E64               	movlw	100
  3792  014EBA  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3793  014EBC  ECD7  F0B1         	call	_irobot_move_straight	;wreg free
  3794                           
  3795                           ;main.c: 139: while (dist < 1000) {
  3796  014EC0  D00A               	goto	l2323
  3797  014EC2                     
  3798                           ;main.c: 140: update_distance();
  3799  014EC2  EC56  F0B2         	call	_update_distance	;wreg free
  3800                           
  3801                           ;main.c: 141: dist += iRDistance;
  3802  014EC6  0100               	movlb	0	; () banked
  3803  014EC8  517B               	movf	_iRDistance& (0+255),w,b
  3804  014ECA  0100               	movlb	0	; () banked
  3805  014ECC  2769               	addwf	_dist& (0+255),f,b
  3806  014ECE  0100               	movlb	0	; () banked
  3807  014ED0  517C               	movf	(_iRDistance+1)& (0+255),w,b
  3808  014ED2  0100               	movlb	0	; () banked
  3809  014ED4  236A               	addwfc	(_dist+1)& (0+255),f,b
  3810  014ED6                     l2323:
  3811                           
  3812                           ; BSR set to: 0
  3813  014ED6  0100               	movlb	0	; () banked
  3814  014ED8  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3815  014EDA  D7F3               	goto	l2324
  3816  014EDC  0EE8               	movlw	232
  3817  014EDE  0100               	movlb	0	; () banked
  3818  014EE0  5D69               	subwf	_dist& (0+255),w,b
  3819  014EE2  0E03               	movlw	3
  3820  014EE4  0100               	movlb	0	; () banked
  3821  014EE6  596A               	subwfb	(_dist+1)& (0+255),w,b
  3822  014EE8  A0D8               	btfss	status,0,c
  3823  014EEA  D7EB               	goto	l2324
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;main.c: 142: }
  3827                           ;main.c: 143: irobot_stop_motion(0);
  3828                           
  3829                           ; BSR set to: 0
  3830  014EEC  0E00               	movlw	0
  3831  014EEE  ECF5  F0AD         	call	_irobot_stop_motion
  3832                           
  3833                           ;main.c: 144: delay_ms(100);
  3834  014EF2  0E00               	movlw	0
  3835  014EF4  0100               	movlb	0	; () banked
  3836  014EF6  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3837  014EF8  0E64               	movlw	100
  3838  014EFA  6FBA               	movwf	delay_ms@ms& (0+255),b
  3839  014EFC  EC89  F0AA         	call	_delay_ms	;wreg free
  3840                           
  3841                           ;main.c: 145: irobot_rotate(0, 67, 200);
  3842  014F00  0E00               	movlw	0
  3843  014F02  0100               	movlb	0	; () banked
  3844  014F04  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3845  014F06  0E43               	movlw	67
  3846  014F08  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3847  014F0A  0E00               	movlw	0
  3848  014F0C  0100               	movlb	0	; () banked
  3849  014F0E  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3850  014F10  0EC8               	movlw	200
  3851  014F12  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3852  014F14  0E00               	movlw	0
  3853  014F16  EC2B  F0A2         	call	_irobot_rotate
  3854                           
  3855                           ;main.c: 146: delay_ms(100);
  3856  014F1A  0E00               	movlw	0
  3857  014F1C  0100               	movlb	0	; () banked
  3858  014F1E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3859  014F20  0E64               	movlw	100
  3860  014F22  6FBA               	movwf	delay_ms@ms& (0+255),b
  3861  014F24  EC89  F0AA         	call	_delay_ms	;wreg free
  3862  014F28  0012               	return		;funcret
  3863  014F2A                     __end_of_move_and_rotate:
  3864                           	opt stack 0
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           postdec1	equ	0xFE5
  3872                           fsr1h	equ	0xFE2
  3873                           fsr1l	equ	0xFE1
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _irobot_rotate *****************
  3877 ;; Defined at:
  3878 ;;		line 279 in file "Library/iRobotSerial.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  isScript        1    wreg     unsigned char 
  3881 ;;  rotateAngle     2   29[BANK0 ] short 
  3882 ;;  rotateSpeed     2   31[BANK0 ] short 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;  isScript        1   34[BANK0 ] unsigned char 
  3885 ;;  rotateDirect    2   37[BANK0 ] short 
  3886 ;;  angleTotal      2   35[BANK0 ] short 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      void 
  3889 ;; Registers used:
  3890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3896 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;Total ram usage:       10 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:   11
  3903 ;; This function calls:
  3904 ;;		_irobot_move
  3905 ;;		_irobot_stop_motion
  3906 ;;		_update_angle
  3907 ;; This function is called by:
  3908 ;;		_move_and_rotate
  3909 ;;		_mode4
  3910 ;;		_irobot_rotate_to
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text5
  3915  014456                     __ptext5:
  3916                           	opt stack 0
  3917  014456                     _irobot_rotate:
  3918                           	opt stack 18
  3919                           
  3920                           ;incstack = 0
  3921                           ;irobot_rotate@isScript stored from wreg
  3922  014456  0100               	movlb	0	; () banked
  3923  014458  6FDC               	movwf	irobot_rotate@isScript& (0+255),b
  3924                           
  3925                           ;iRobotSerial.c: 280: INT16 angleTotal = 0;
  3926  01445A  0E00               	movlw	0
  3927  01445C  0100               	movlb	0	; () banked
  3928  01445E  6FDE               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  3929  014460  0E00               	movlw	0
  3930  014462  6FDD               	movwf	irobot_rotate@angleTotal& (0+255),b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;iRobotSerial.c: 281: INT16 rotateDirection;
  3934                           ;iRobotSerial.c: 283: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateDire
      +                          ction = iR_CONST_CW);
  3935  014464  0100               	movlb	0	; () banked
  3936  014466  BFD8               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  3937  014468  D00D               	goto	l2156
  3938  01446A  0100               	movlb	0	; () banked
  3939  01446C  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3940  01446E  E104               	bnz	u10830
  3941  014470  0100               	movlb	0	; () banked
  3942  014472  05D7               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  3943  014474  A0D8               	btfss	status,0,c
  3944  014476  D006               	goto	l2156
  3945  014478                     u10830:
  3946                           
  3947                           ; BSR set to: 0
  3948  014478  0E00               	movlw	0
  3949  01447A  0100               	movlb	0	; () banked
  3950  01447C  6FE0               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  3951  01447E  0E01               	movlw	1
  3952  014480  6FDF               	movwf	irobot_rotate@rotateDirection& (0+255),b
  3953  014482  D003               	goto	l2158
  3954  014484                     l2156:
  3955                           
  3956                           ; BSR set to: 0
  3957  014484  0100               	movlb	0	; () banked
  3958  014486  69DF               	setf	irobot_rotate@rotateDirection& (0+255),b
  3959  014488  69E0               	setf	(irobot_rotate@rotateDirection+1)& (0+255),b
  3960  01448A                     l2158:
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;iRobotSerial.c: 284: if (isScript) {
  3964                           
  3965                           ; BSR set to: 0
  3966  01448A  0100               	movlb	0	; () banked
  3967  01448C  51DC               	movf	irobot_rotate@isScript& (0+255),w,b
  3968  01448E  0100               	movlb	0	; () banked
  3969  014490  B4D8               	btfsc	status,2,c
  3970  014492  D00C               	goto	l2159
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;iRobotSerial.c: 285: irobot_move(1, rotateSpeed, rotateDirection);
  3974  014494  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3975  014498  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3976  01449C  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  3977  0144A0  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  3978  0144A4  0E01               	movlw	1
  3979  0144A6  EC7C  F0A1         	call	_irobot_move
  3980                           
  3981                           ;iRobotSerial.c: 286: }
  3982  0144AA  0012               	return	
  3983  0144AC                     l2159:
  3984                           
  3985                           ;iRobotSerial.c: 287: else {
  3986                           ;iRobotSerial.c: 288: irobot_move(0, rotateSpeed, rotateDirection);
  3987  0144AC  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3988  0144B0  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3989  0144B4  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  3990  0144B8  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  3991  0144BC  0E00               	movlw	0
  3992  0144BE  EC7C  F0A1         	call	_irobot_move
  3993                           
  3994                           ;iRobotSerial.c: 289: while (angleTotal < rotateAngle) {
  3995  0144C2  D00A               	goto	l2161
  3996  0144C4                     
  3997                           ;iRobotSerial.c: 290: update_angle();
  3998  0144C4  EC5F  F0B2         	call	_update_angle	;wreg free
  3999                           
  4000                           ;iRobotSerial.c: 291: angleTotal += iRAngle;
  4001  0144C8  0100               	movlb	0	; () banked
  4002  0144CA  5179               	movf	_iRAngle& (0+255),w,b
  4003  0144CC  0100               	movlb	0	; () banked
  4004  0144CE  27DD               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4005  0144D0  0100               	movlb	0	; () banked
  4006  0144D2  517A               	movf	(_iRAngle+1)& (0+255),w,b
  4007  0144D4  0100               	movlb	0	; () banked
  4008  0144D6  23DE               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4009  0144D8                     l2161:
  4010                           
  4011                           ; BSR set to: 0
  4012  0144D8  0100               	movlb	0	; () banked
  4013  0144DA  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4014  0144DC  0100               	movlb	0	; () banked
  4015  0144DE  5DDD               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4016  0144E0  0100               	movlb	0	; () banked
  4017  0144E2  51DE               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4018  0144E4  0A80               	xorlw	128
  4019  0144E6  0100               	movlb	0	; () banked
  4020  0144E8  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4021  0144EA  0100               	movlb	0	; () banked
  4022  0144EC  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4023  0144EE  0A80               	xorlw	128
  4024  0144F0  0100               	movlb	0	; () banked
  4025  0144F2  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4026  0144F4  A0D8               	btfss	status,0,c
  4027  0144F6  D7E6               	goto	l2162
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;iRobotSerial.c: 292: }
  4031                           ;iRobotSerial.c: 293: irobot_stop_motion(0);
  4032                           
  4033                           ; BSR set to: 0
  4034  0144F8  0E00               	movlw	0
  4035  0144FA  ECF5  F0AD         	call	_irobot_stop_motion
  4036  0144FE  0012               	return	
  4037  014500                     __end_of_irobot_rotate:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           postdec1	equ	0xFE5
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _mode2 *****************
  4051 ;; Defined at:
  4052 ;;		line 265 in file "main.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  dist            2   44[BANK0 ] int 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:        2 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:   17
  4073 ;; This function calls:
  4074 ;;		_Console_Render
  4075 ;;		_MXK_Dequeue
  4076 ;;		_MXK_Release
  4077 ;;		_MXK_SwitchTo
  4078 ;;		_irobot_move_straight
  4079 ;;		_irobot_stop_motion
  4080 ;;		_printf
  4081 ;;		_safeToGo
  4082 ;;		_update_distance
  4083 ;; This function is called by:
  4084 ;;		_main
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text6
  4089  013718                     __ptext6:
  4090                           	opt stack 0
  4091  013718                     _mode2:
  4092                           	opt stack 13
  4093                           
  4094                           ;main.c: 266: safeToGo();
  4095                           
  4096                           ;incstack = 0
  4097  013718  EC3F  F0AD         	call	_safeToGo	;wreg free
  4098                           
  4099                           ;main.c: 267: if (MXK_SwitchTo(eMXK_HMI)) {
  4100  01371C  0E01               	movlw	1
  4101  01371E  EC80  F0AE         	call	_MXK_SwitchTo
  4102  013722  0900               	iorlw	0
  4103  013724  B4D8               	btfsc	status,2,c
  4104  013726  0012               	return	
  4105                           
  4106                           ;main.c: 268: printf("%c", (char)35);
  4107  013728  0EFB               	movlw	low STR_1
  4108  01372A  0100               	movlb	0	; () banked
  4109  01372C  6FCF               	movwf	printf@f& (0+255),b
  4110  01372E  0EFF               	movlw	high STR_1
  4111  013730  0100               	movlb	0	; () banked
  4112  013732  6FD0               	movwf	(printf@f+1)& (0+255),b
  4113  013734  0E00               	movlw	0
  4114  013736  0100               	movlb	0	; () banked
  4115  013738  6FD2               	movwf	(?_printf+3)& (0+255),b
  4116  01373A  0E23               	movlw	35
  4117  01373C  6FD1               	movwf	(?_printf+2)& (0+255),b
  4118  01373E  ECD3  F091         	call	_printf	;wreg free
  4119                           
  4120                           ;main.c: 269: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4121  013742  0E95               	movlw	low STR_4
  4122  013744  0100               	movlb	0	; () banked
  4123  013746  6FCF               	movwf	printf@f& (0+255),b
  4124  013748  0EFF               	movlw	high STR_4
  4125  01374A  0100               	movlb	0	; () banked
  4126  01374C  6FD0               	movwf	(printf@f+1)& (0+255),b
  4127  01374E  C077  F0D1         	movff	_distanceTotal,?_printf+2
  4128  013752  C078  F0D2         	movff	_distanceTotal+1,?_printf+3
  4129  013756  C089  F0D3         	movff	_iRBumpLeft,?_printf+4
  4130  01375A  0100               	movlb	0	; () banked
  4131  01375C  6BD4               	clrf	(?_printf+5)& (0+255),b
  4132  01375E  C08A  F0D5         	movff	_iRBumpRight,?_printf+6
  4133  013762  0100               	movlb	0	; () banked
  4134  013764  6BD6               	clrf	(?_printf+7)& (0+255),b
  4135  013766  ECD3  F091         	call	_printf	;wreg free
  4136                           
  4137                           ;main.c: 270: Console_Render();
  4138  01376A  ECE7  F08E         	call	_Console_Render	;wreg free
  4139                           
  4140                           ;main.c: 272: int dist = 0;
  4141  01376E  0E00               	movlw	0
  4142  013770  0100               	movlb	0	; () banked
  4143  013772  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  4144  013774  0E00               	movlw	0
  4145  013776  6FE6               	movwf	mode2@dist& (0+255),b
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;main.c: 273: irobot_move_straight(200);
  4149  013778  0E00               	movlw	0
  4150  01377A  0100               	movlb	0	; () banked
  4151  01377C  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4152  01377E  0EC8               	movlw	200
  4153  013780  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4154  013782  ECD7  F0B1         	call	_irobot_move_straight	;wreg free
  4155                           
  4156                           ;main.c: 274: while (dist < 5000) {
  4157  013786  D025               	goto	l2372
  4158  013788                     
  4159                           ;main.c: 275: update_distance();
  4160  013788  EC56  F0B2         	call	_update_distance	;wreg free
  4161                           
  4162                           ;main.c: 276: dist += iRDistance;
  4163  01378C  0100               	movlb	0	; () banked
  4164  01378E  517B               	movf	_iRDistance& (0+255),w,b
  4165  013790  0100               	movlb	0	; () banked
  4166  013792  27E6               	addwf	mode2@dist& (0+255),f,b
  4167  013794  0100               	movlb	0	; () banked
  4168  013796  517C               	movf	(_iRDistance+1)& (0+255),w,b
  4169  013798  0100               	movlb	0	; () banked
  4170  01379A  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;main.c: 277: printf("%c", (char)35);
  4174  01379C  0EFB               	movlw	low STR_1
  4175  01379E  0100               	movlb	0	; () banked
  4176  0137A0  6FCF               	movwf	printf@f& (0+255),b
  4177  0137A2  0EFF               	movlw	high STR_1
  4178  0137A4  0100               	movlb	0	; () banked
  4179  0137A6  6FD0               	movwf	(printf@f+1)& (0+255),b
  4180  0137A8  0E00               	movlw	0
  4181  0137AA  0100               	movlb	0	; () banked
  4182  0137AC  6FD2               	movwf	(?_printf+3)& (0+255),b
  4183  0137AE  0E23               	movlw	35
  4184  0137B0  6FD1               	movwf	(?_printf+2)& (0+255),b
  4185  0137B2  ECD3  F091         	call	_printf	;wreg free
  4186                           
  4187                           ;main.c: 278: printf("Distance: %d\n", dist);
  4188  0137B6  0EED               	movlw	low STR_8
  4189  0137B8  0100               	movlb	0	; () banked
  4190  0137BA  6FCF               	movwf	printf@f& (0+255),b
  4191  0137BC  0EFF               	movlw	high STR_8
  4192  0137BE  0100               	movlb	0	; () banked
  4193  0137C0  6FD0               	movwf	(printf@f+1)& (0+255),b
  4194  0137C2  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  4195  0137C6  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  4196  0137CA  ECD3  F091         	call	_printf	;wreg free
  4197                           
  4198                           ;main.c: 279: Console_Render();
  4199  0137CE  ECE7  F08E         	call	_Console_Render	;wreg free
  4200  0137D2                     l2372:
  4201  0137D2  0100               	movlb	0	; () banked
  4202  0137D4  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  4203  0137D6  D7D8               	goto	l2373
  4204  0137D8  0E88               	movlw	136
  4205  0137DA  0100               	movlb	0	; () banked
  4206  0137DC  5DE6               	subwf	mode2@dist& (0+255),w,b
  4207  0137DE  0E13               	movlw	19
  4208  0137E0  0100               	movlb	0	; () banked
  4209  0137E2  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  4210  0137E4  A0D8               	btfss	status,0,c
  4211  0137E6  D7D0               	goto	l2373
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;main.c: 280: }
  4215                           ;main.c: 281: irobot_stop_motion(0);
  4216                           
  4217                           ; BSR set to: 0
  4218  0137E8  0E00               	movlw	0
  4219  0137EA  ECF5  F0AD         	call	_irobot_stop_motion
  4220                           
  4221                           ;main.c: 283: if (MXK_Release())
  4222  0137EE  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4223  0137F2  0900               	iorlw	0
  4224  0137F4  B4D8               	btfsc	status,2,c
  4225  0137F6  0012               	return	
  4226                           
  4227                           ;main.c: 284: MXK_Dequeue();
  4228  0137F8  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4229  0137FC  0012               	return	
  4230  0137FE                     __end_of_mode2:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           postdec1	equ	0xFE5
  4239                           fsr1h	equ	0xFE2
  4240                           fsr1l	equ	0xFE1
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function _irobot_move_straight *****************
  4244 ;; Defined at:
  4245 ;;		line 313 in file "Library/iRobotSerial.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  straightSpee    2   25[BANK0 ] short 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        2 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    9
  4266 ;; This function calls:
  4267 ;;		_irobot_move
  4268 ;; This function is called by:
  4269 ;;		_move_and_rotate
  4270 ;;		_mode2
  4271 ;;		_mode4
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text7
  4276  0163AE                     __ptext7:
  4277                           	opt stack 0
  4278  0163AE                     _irobot_move_straight:
  4279                           	opt stack 20
  4280                           
  4281                           ;iRobotSerial.c: 314: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4282                           
  4283                           ;incstack = 0
  4284  0163AE  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4285  0163B2  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4286  0163B6  0E7F               	movlw	127
  4287  0163B8  0100               	movlb	0	; () banked
  4288  0163BA  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4289  0163BC  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4290  0163BE  0E00               	movlw	0
  4291  0163C0  EC7C  F0A1         	call	_irobot_move
  4292  0163C4  0012               	return		;funcret
  4293  0163C6                     __end_of_irobot_move_straight:
  4294                           	opt stack 0
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           postdec1	equ	0xFE5
  4302                           fsr1h	equ	0xFE2
  4303                           fsr1l	equ	0xFE1
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _mode1 *****************
  4307 ;; Defined at:
  4308 ;;		line 195 in file "main.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  moveto          2    2[BANK3 ] int 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        8 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:   17
  4329 ;; This function calls:
  4330 ;;		_ADC_Start
  4331 ;;		_ADC_Voltage
  4332 ;;		_Console_Render
  4333 ;;		_HMI_Render
  4334 ;;		_HMI_SetNumber
  4335 ;;		_MXK_Dequeue
  4336 ;;		_MXK_Release
  4337 ;;		_MXK_SwitchTo
  4338 ;;		_Motor_Move
  4339 ;;		_Motor_Speed
  4340 ;;		___fldiv
  4341 ;;		___fltol
  4342 ;;		_printf
  4343 ;;		_safeToGo
  4344 ;; This function is called by:
  4345 ;;		_main
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text8
  4350  0108C4                     __ptext8:
  4351                           	opt stack 0
  4352  0108C4                     _mode1:
  4353                           	opt stack 13
  4354                           
  4355                           ;main.c: 196: safeToGo();
  4356                           
  4357                           ;incstack = 0
  4358  0108C4  EC3F  F0AD         	call	_safeToGo	;wreg free
  4359                           
  4360                           ;main.c: 197: if (MXK_SwitchTo(eMXK_HMI)) {
  4361  0108C8  0E01               	movlw	1
  4362  0108CA  EC80  F0AE         	call	_MXK_SwitchTo
  4363  0108CE  0900               	iorlw	0
  4364  0108D0  B4D8               	btfsc	status,2,c
  4365  0108D2  D029               	goto	l2346
  4366                           
  4367                           ;main.c: 198: printf("%c", (char)35);
  4368  0108D4  0EFB               	movlw	low STR_1
  4369  0108D6  0100               	movlb	0	; () banked
  4370  0108D8  6FCF               	movwf	printf@f& (0+255),b
  4371  0108DA  0EFF               	movlw	high STR_1
  4372  0108DC  0100               	movlb	0	; () banked
  4373  0108DE  6FD0               	movwf	(printf@f+1)& (0+255),b
  4374  0108E0  0E00               	movlw	0
  4375  0108E2  0100               	movlb	0	; () banked
  4376  0108E4  6FD2               	movwf	(?_printf+3)& (0+255),b
  4377  0108E6  0E23               	movlw	35
  4378  0108E8  6FD1               	movwf	(?_printf+2)& (0+255),b
  4379  0108EA  ECD3  F091         	call	_printf	;wreg free
  4380                           
  4381                           ;main.c: 199: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4382  0108EE  0E95               	movlw	low STR_4
  4383  0108F0  0100               	movlb	0	; () banked
  4384  0108F2  6FCF               	movwf	printf@f& (0+255),b
  4385  0108F4  0EFF               	movlw	high STR_4
  4386  0108F6  0100               	movlb	0	; () banked
  4387  0108F8  6FD0               	movwf	(printf@f+1)& (0+255),b
  4388  0108FA  C077  F0D1         	movff	_distanceTotal,?_printf+2
  4389  0108FE  C078  F0D2         	movff	_distanceTotal+1,?_printf+3
  4390  010902  C089  F0D3         	movff	_iRBumpLeft,?_printf+4
  4391  010906  0100               	movlb	0	; () banked
  4392  010908  6BD4               	clrf	(?_printf+5)& (0+255),b
  4393  01090A  C08A  F0D5         	movff	_iRBumpRight,?_printf+6
  4394  01090E  0100               	movlb	0	; () banked
  4395  010910  6BD6               	clrf	(?_printf+7)& (0+255),b
  4396  010912  ECD3  F091         	call	_printf	;wreg free
  4397                           
  4398                           ;main.c: 200: Console_Render();
  4399  010916  ECE7  F08E         	call	_Console_Render	;wreg free
  4400                           
  4401                           ;main.c: 201: if (MXK_Release())
  4402  01091A  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4403  01091E  0900               	iorlw	0
  4404  010920  A4D8               	btfss	status,2,c
  4405                           
  4406                           ;main.c: 202: MXK_Dequeue();
  4407  010922  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4408  010926                     l2346:
  4409                           
  4410                           ;main.c: 203: }
  4411                           ;main.c: 204: StepRotate = 0;
  4412  010926  0E00               	movlw	0
  4413  010928  0100               	movlb	0	; () banked
  4414  01092A  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4415  01092C  0E00               	movlw	0
  4416  01092E  6F71               	movwf	_StepRotate& (0+255),b
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 205: MinDist = 1000;
  4420  010930  0E03               	movlw	3
  4421  010932  0100               	movlb	0	; () banked
  4422  010934  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4423  010936  0EE8               	movlw	232
  4424  010938  6FFB               	movwf	_MinDist& (0+255),b
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 206: Stepstomin = 0;
  4428  01093A  0E00               	movlw	0
  4429  01093C  0100               	movlb	0	; () banked
  4430  01093E  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4431  010940  0E00               	movlw	0
  4432  010942  6F6F               	movwf	_Stepstomin& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;main.c: 207: IRValue = 0;
  4436  010944  0E00               	movlw	0
  4437  010946  0100               	movlb	0	; () banked
  4438  010948  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4439  01094A  0E00               	movlw	0
  4440  01094C  6F6D               	movwf	_IRValue& (0+255),b
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;main.c: 208: TimerX = 8;
  4444  01094E  0E00               	movlw	0
  4445  010950  0100               	movlb	0	; () banked
  4446  010952  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4447  010954  0E08               	movlw	8
  4448  010956  6FF9               	movwf	_TimerX& (0+255),b
  4449                           
  4450                           ;main.c: 209: while (StepRotate < 400) {
  4451  010958  D0F9               	goto	u13470
  4452  01095A                     
  4453                           ; BSR set to: 0
  4454                           ;main.c: 210: StepRotate++;
  4455                           
  4456                           ; BSR set to: 0
  4457  01095A  0100               	movlb	0	; () banked
  4458  01095C  4B71               	infsnz	_StepRotate& (0+255),f,b
  4459  01095E  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 211: ADC_Start(&ADC_AN0);
  4463  010960  0EB1               	movlw	low _ADC_AN0
  4464  010962  0100               	movlb	0	; () banked
  4465  010964  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4466  010966  0E00               	movlw	high _ADC_AN0
  4467  010968  0100               	movlb	0	; () banked
  4468  01096A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4469  01096C  EC12  F0A7         	call	_ADC_Start	;wreg free
  4470                           
  4471                           ;main.c: 212: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4472  010970  0EB1               	movlw	low _ADC_AN0
  4473  010972  0100               	movlb	0	; () banked
  4474  010974  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4475  010976  0E00               	movlw	high _ADC_AN0
  4476  010978  0100               	movlb	0	; () banked
  4477  01097A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4478  01097C  EC6F  F09C         	call	_ADC_Voltage	;wreg free
  4479  010980  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15597
  4480  010984  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15597+1
  4481  010988  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15597+2
  4482  01098C  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15597+3
  4483                           
  4484                           ;main.c: 212: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4485  010990  C3F8  F0BE         	movff	_mode1$15597,___fldiv@a
  4486  010994  C3F9  F0BF         	movff	_mode1$15597+1,___fldiv@a+1
  4487  010998  C3FA  F0C0         	movff	_mode1$15597+2,___fldiv@a+2
  4488  01099C  C3FB  F0C1         	movff	_mode1$15597+3,___fldiv@a+3
  4489  0109A0  0E00               	movlw	0
  4490  0109A2  0100               	movlb	0	; () banked
  4491  0109A4  6FBA               	movwf	___fldiv@b& (0+255),b
  4492  0109A6  0E00               	movlw	0
  4493  0109A8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4494  0109AA  0E6C               	movlw	108
  4495  0109AC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4496  0109AE  0E42               	movlw	66
  4497  0109B0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4498  0109B2  EC4C  F086         	call	___fldiv	;wreg free
  4499  0109B6  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4500  0109BA  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4501  0109BE  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4502  0109C2  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4503  0109C6  EC0E  F09A         	call	___fltol	;wreg free
  4504  0109CA  C0F3  F06D         	movff	?___fltol,_IRValue
  4505  0109CE  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4506                           
  4507                           ;main.c: 213: if (MXK_SwitchTo(eMXK_HMI)) {
  4508  0109D2  0E01               	movlw	1
  4509  0109D4  EC80  F0AE         	call	_MXK_SwitchTo
  4510  0109D8  0900               	iorlw	0
  4511  0109DA  B4D8               	btfsc	status,2,c
  4512  0109DC  D00E               	goto	l2350
  4513                           
  4514                           ;main.c: 214: HMI_SetNumber(IRValue);
  4515  0109DE  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4516  0109E2  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4517  0109E6  ECA9  F0B0         	call	_HMI_SetNumber	;wreg free
  4518                           
  4519                           ;main.c: 215: HMI_Render();
  4520  0109EA  ECE1  F0AE         	call	_HMI_Render	;wreg free
  4521                           
  4522                           ;main.c: 216: if (MXK_Release())
  4523  0109EE  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4524  0109F2  0900               	iorlw	0
  4525  0109F4  A4D8               	btfss	status,2,c
  4526                           
  4527                           ;main.c: 217: MXK_Dequeue();
  4528  0109F6  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4529  0109FA                     l2350:
  4530                           
  4531                           ;main.c: 218: }
  4532                           ;main.c: 219: if (IRValue < MinDist) {
  4533  0109FA  0100               	movlb	0	; () banked
  4534  0109FC  51FB               	movf	_MinDist& (0+255),w,b
  4535  0109FE  0100               	movlb	0	; () banked
  4536  010A00  5D6D               	subwf	_IRValue& (0+255),w,b
  4537  010A02  0100               	movlb	0	; () banked
  4538  010A04  516E               	movf	(_IRValue+1)& (0+255),w,b
  4539  010A06  0A80               	xorlw	128
  4540  010A08  0103               	movlb	3	; () banked
  4541  010A0A  6FF4               	movwf	??_mode1& (0+255),b
  4542  010A0C  0100               	movlb	0	; () banked
  4543  010A0E  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4544  010A10  0A80               	xorlw	128
  4545  010A12  0103               	movlb	3	; () banked
  4546  010A14  59F4               	subwfb	??_mode1& (0+255),w,b
  4547  010A16  B0D8               	btfsc	status,0,c
  4548  010A18  D008               	goto	l2351
  4549                           
  4550                           ; BSR set to: 3
  4551                           ;main.c: 220: MinDist = IRValue;
  4552  010A1A  C06D  F0FB         	movff	_IRValue,_MinDist
  4553  010A1E  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4554                           
  4555                           ;main.c: 221: Stepstomin = StepRotate;
  4556  010A22  C071  F06F         	movff	_StepRotate,_Stepstomin
  4557  010A26  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4558  010A2A                     l2351:
  4559                           
  4560                           ; BSR set to: 3
  4561                           ;main.c: 222: }
  4562                           ;main.c: 223: if (MXK_SwitchTo(eMXK_Motor)) {
  4563                           
  4564                           ; BSR set to: 3
  4565  010A2A  0E08               	movlw	8
  4566  010A2C  EC80  F0AE         	call	_MXK_SwitchTo
  4567  010A30  0900               	iorlw	0
  4568  010A32  B4D8               	btfsc	status,2,c
  4569  010A34  D020               	goto	l2353
  4570                           
  4571                           ;main.c: 224: Motor_Speed(&Stepper, (50));
  4572  010A36  0ECF               	movlw	low _Stepper
  4573  010A38  0100               	movlb	0	; () banked
  4574  010A3A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4575  010A3C  0E03               	movlw	high _Stepper
  4576  010A3E  0100               	movlb	0	; () banked
  4577  010A40  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4578  010A42  0E00               	movlw	0
  4579  010A44  0100               	movlb	0	; () banked
  4580  010A46  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4581  010A48  0E32               	movlw	50
  4582  010A4A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4583  010A4C  EC94  F0B0         	call	_Motor_Speed	;wreg free
  4584                           
  4585                           ;main.c: 225: Motor_Move(&Stepper, 1);
  4586  010A50  0ECF               	movlw	low _Stepper
  4587  010A52  0100               	movlb	0	; () banked
  4588  010A54  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4589  010A56  0E03               	movlw	high _Stepper
  4590  010A58  0100               	movlb	0	; () banked
  4591  010A5A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4592  010A5C  0E00               	movlw	0
  4593  010A5E  0100               	movlb	0	; () banked
  4594  010A60  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4595  010A62  0E01               	movlw	1
  4596  010A64  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  4597  010A66  EC98  F0AF         	call	_Motor_Move	;wreg free
  4598                           
  4599                           ;main.c: 226: if (MXK_Release())
  4600  010A6A  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4601  010A6E  0900               	iorlw	0
  4602  010A70  A4D8               	btfss	status,2,c
  4603                           
  4604                           ;main.c: 227: MXK_Dequeue();
  4605  010A72  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4606  010A76                     l2353:
  4607                           
  4608                           ;main.c: 228: }
  4609                           ;main.c: 229: TimerX = 10;
  4610  010A76  0E00               	movlw	0
  4611  010A78  0100               	movlb	0	; () banked
  4612  010A7A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4613  010A7C  0E0A               	movlw	10
  4614  010A7E  6FF9               	movwf	_TimerX& (0+255),b
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;main.c: 230: if (TimerX > 0) {
  4618  010A80  0100               	movlb	0	; () banked
  4619  010A82  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4620  010A84  D063               	goto	u13470
  4621  010A86  0100               	movlb	0	; () banked
  4622  010A88  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4623  010A8A  E156               	bnz	l16332
  4624  010A8C  0100               	movlb	0	; () banked
  4625  010A8E  05F9               	decf	_TimerX& (0+255),w,b
  4626  010A90  B0D8               	btfsc	status,0,c
  4627  010A92  D052               	goto	l2355
  4628  010A94  D05B               	goto	u13470
  4629  010A96                     l16314:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 232: ADC_Start(&ADC_AN0);
  4633  010A96  0EB1               	movlw	low _ADC_AN0
  4634  010A98  0100               	movlb	0	; () banked
  4635  010A9A  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4636  010A9C  0E00               	movlw	high _ADC_AN0
  4637  010A9E  0100               	movlb	0	; () banked
  4638  010AA0  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4639  010AA2  EC12  F0A7         	call	_ADC_Start	;wreg free
  4640                           
  4641                           ;main.c: 233: if (MXK_SwitchTo(eMXK_HMI)) {
  4642  010AA6  0E01               	movlw	1
  4643  010AA8  EC80  F0AE         	call	_MXK_SwitchTo
  4644  010AAC  0900               	iorlw	0
  4645  010AAE  B4D8               	btfsc	status,2,c
  4646  010AB0  D00E               	goto	l2358
  4647                           
  4648                           ;main.c: 234: HMI_SetNumber(IRValue);
  4649  010AB2  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4650  010AB6  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4651  010ABA  ECA9  F0B0         	call	_HMI_SetNumber	;wreg free
  4652                           
  4653                           ;main.c: 235: HMI_Render();
  4654  010ABE  ECE1  F0AE         	call	_HMI_Render	;wreg free
  4655                           
  4656                           ;main.c: 236: if (MXK_Release())
  4657  010AC2  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4658  010AC6  0900               	iorlw	0
  4659  010AC8  A4D8               	btfss	status,2,c
  4660                           
  4661                           ;main.c: 237: MXK_Dequeue();
  4662  010ACA  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4663  010ACE                     l2358:
  4664                           
  4665                           ;main.c: 238: }
  4666                           ;main.c: 239: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4667  010ACE  0EB1               	movlw	low _ADC_AN0
  4668  010AD0  0100               	movlb	0	; () banked
  4669  010AD2  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4670  010AD4  0E00               	movlw	high _ADC_AN0
  4671  010AD6  0100               	movlb	0	; () banked
  4672  010AD8  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4673  010ADA  EC6F  F09C         	call	_ADC_Voltage	;wreg free
  4674  010ADE  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15597
  4675  010AE2  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15597+1
  4676  010AE6  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15597+2
  4677  010AEA  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15597+3
  4678                           
  4679                           ;main.c: 238: }
  4680                           ;main.c: 239: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4681  010AEE  C3F8  F0BE         	movff	_mode1$15597,___fldiv@a
  4682  010AF2  C3F9  F0BF         	movff	_mode1$15597+1,___fldiv@a+1
  4683  010AF6  C3FA  F0C0         	movff	_mode1$15597+2,___fldiv@a+2
  4684  010AFA  C3FB  F0C1         	movff	_mode1$15597+3,___fldiv@a+3
  4685  010AFE  0E00               	movlw	0
  4686  010B00  0100               	movlb	0	; () banked
  4687  010B02  6FBA               	movwf	___fldiv@b& (0+255),b
  4688  010B04  0E00               	movlw	0
  4689  010B06  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4690  010B08  0E6C               	movlw	108
  4691  010B0A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4692  010B0C  0E42               	movlw	66
  4693  010B0E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4694  010B10  EC4C  F086         	call	___fldiv	;wreg free
  4695  010B14  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4696  010B18  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4697  010B1C  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4698  010B20  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4699  010B24  EC0E  F09A         	call	___fltol	;wreg free
  4700  010B28  C0F3  F06D         	movff	?___fltol,_IRValue
  4701  010B2C  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4702                           
  4703                           ;main.c: 240: TimerX--;
  4704  010B30  0100               	movlb	0	; () banked
  4705  010B32  07F9               	decf	_TimerX& (0+255),f,b
  4706  010B34  A0D8               	btfss	status,0,c
  4707  010B36  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4708  010B38                     l2355:
  4709  010B38                     l16332:
  4710                           
  4711                           ; BSR set to: 0
  4712  010B38  0100               	movlb	0	; () banked
  4713  010B3A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4714  010B3C  D007               	goto	u13470
  4715  010B3E  0100               	movlb	0	; () banked
  4716  010B40  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4717  010B42  E1A9               	bnz	l16314
  4718  010B44  0100               	movlb	0	; () banked
  4719  010B46  05F9               	decf	_TimerX& (0+255),w,b
  4720  010B48  B0D8               	btfsc	status,0,c
  4721  010B4A  D7A5               	goto	l2356
  4722  010B4C                     u13470:
  4723                           
  4724                           ; BSR set to: 0
  4725                           
  4726                           ; BSR set to: 0
  4727                           
  4728                           ; BSR set to: 0
  4729                           
  4730                           ; BSR set to: 0
  4731  010B4C  0100               	movlb	0	; () banked
  4732  010B4E  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  4733  010B50  D704               	goto	l2348
  4734  010B52  0E90               	movlw	144
  4735  010B54  0100               	movlb	0	; () banked
  4736  010B56  5D71               	subwf	_StepRotate& (0+255),w,b
  4737  010B58  0E01               	movlw	1
  4738  010B5A  0100               	movlb	0	; () banked
  4739  010B5C  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  4740  010B5E  A0D8               	btfss	status,0,c
  4741  010B60  D6FC               	goto	l2348
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;main.c: 241: }
  4745                           ;main.c: 242: }
  4746                           ;main.c: 243: }
  4747                           ;main.c: 244: if (MXK_SwitchTo(eMXK_Motor)) {
  4748                           
  4749                           ; BSR set to: 0
  4750  010B62  0E08               	movlw	8
  4751  010B64  EC80  F0AE         	call	_MXK_SwitchTo
  4752  010B68  0900               	iorlw	0
  4753  010B6A  B4D8               	btfsc	status,2,c
  4754  010B6C  D08A               	goto	l2363
  4755                           
  4756                           ;main.c: 245: Motor_Speed(&Stepper, (50));
  4757  010B6E  0ECF               	movlw	low _Stepper
  4758  010B70  0100               	movlb	0	; () banked
  4759  010B72  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4760  010B74  0E03               	movlw	high _Stepper
  4761  010B76  0100               	movlb	0	; () banked
  4762  010B78  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4763  010B7A  0E00               	movlw	0
  4764  010B7C  0100               	movlb	0	; () banked
  4765  010B7E  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4766  010B80  0E32               	movlw	50
  4767  010B82  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4768  010B84  EC94  F0B0         	call	_Motor_Speed	;wreg free
  4769                           
  4770                           ;main.c: 246: int moveto = 400 - Stepstomin;
  4771  010B88  C06F  F3F4         	movff	_Stepstomin,??_mode1
  4772  010B8C  C070  F3F5         	movff	_Stepstomin+1,??_mode1+1
  4773  010B90  0103               	movlb	3	; () banked
  4774  010B92  1FF4               	comf	??_mode1& (0+255),f,b
  4775  010B94  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  4776  010B96  4BF4               	infsnz	??_mode1& (0+255),f,b
  4777  010B98  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  4778  010B9A  0E90               	movlw	144
  4779  010B9C  0103               	movlb	3	; () banked
  4780  010B9E  25F4               	addwf	??_mode1& (0+255),w,b
  4781  010BA0  0103               	movlb	3	; () banked
  4782  010BA2  6FF6               	movwf	mode1@moveto& (0+255),b
  4783  010BA4  0E01               	movlw	1
  4784  010BA6  0103               	movlb	3	; () banked
  4785  010BA8  21F5               	addwfc	(??_mode1+1)& (0+255),w,b
  4786  010BAA  0103               	movlb	3	; () banked
  4787  010BAC  6FF7               	movwf	(mode1@moveto+1)& (0+255),b
  4788                           
  4789                           ; BSR set to: 3
  4790                           ;main.c: 248: Motor_Move(&Stepper, (-moveto));
  4791  010BAE  0ECF               	movlw	low _Stepper
  4792  010BB0  0100               	movlb	0	; () banked
  4793  010BB2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4794  010BB4  0E03               	movlw	high _Stepper
  4795  010BB6  0100               	movlb	0	; () banked
  4796  010BB8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4797  010BBA  C3F6  F3F4         	movff	mode1@moveto,??_mode1
  4798  010BBE  C3F7  F3F5         	movff	mode1@moveto+1,??_mode1+1
  4799  010BC2  0103               	movlb	3	; () banked
  4800  010BC4  1FF4               	comf	??_mode1& (0+255),f,b
  4801  010BC6  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  4802  010BC8  4BF4               	infsnz	??_mode1& (0+255),f,b
  4803  010BCA  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  4804  010BCC  C3F4  F0BF         	movff	??_mode1,Motor_Move@pDelta
  4805  010BD0  C3F5  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  4806  010BD4  EC98  F0AF         	call	_Motor_Move	;wreg free
  4807                           
  4808                           ;main.c: 249: if (MXK_Release())
  4809  010BD8  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4810  010BDC  0900               	iorlw	0
  4811  010BDE  B4D8               	btfsc	status,2,c
  4812  010BE0  D050               	goto	l2363
  4813                           
  4814                           ;main.c: 250: MXK_Dequeue();
  4815  010BE2  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4816                           
  4817                           ;main.c: 251: }
  4818                           ;main.c: 252: while (Stepper.mDelta > 0) {
  4819  010BE6  D04D               	goto	l2363
  4820  010BE8                     l16348:
  4821                           
  4822                           ;main.c: 253: ADC_Start(&ADC_AN0);
  4823  010BE8  0EB1               	movlw	low _ADC_AN0
  4824  010BEA  0100               	movlb	0	; () banked
  4825  010BEC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4826  010BEE  0E00               	movlw	high _ADC_AN0
  4827  010BF0  0100               	movlb	0	; () banked
  4828  010BF2  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4829  010BF4  EC12  F0A7         	call	_ADC_Start	;wreg free
  4830                           
  4831                           ;main.c: 254: if (MXK_SwitchTo(eMXK_HMI)) {
  4832  010BF8  0E01               	movlw	1
  4833  010BFA  EC80  F0AE         	call	_MXK_SwitchTo
  4834  010BFE  0900               	iorlw	0
  4835  010C00  B4D8               	btfsc	status,2,c
  4836  010C02  D00E               	goto	l2366
  4837                           
  4838                           ;main.c: 255: HMI_SetNumber(IRValue);
  4839  010C04  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4840  010C08  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4841  010C0C  ECA9  F0B0         	call	_HMI_SetNumber	;wreg free
  4842                           
  4843                           ;main.c: 256: HMI_Render();
  4844  010C10  ECE1  F0AE         	call	_HMI_Render	;wreg free
  4845                           
  4846                           ;main.c: 257: if (MXK_Release())
  4847  010C14  ECAE  F0B1         	call	_MXK_Release	;wreg free
  4848  010C18  0900               	iorlw	0
  4849  010C1A  A4D8               	btfss	status,2,c
  4850                           
  4851                           ;main.c: 258: MXK_Dequeue();
  4852  010C1C  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
  4853  010C20                     l2366:
  4854                           
  4855                           ;main.c: 259: }
  4856                           ;main.c: 260: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4857  010C20  0EB1               	movlw	low _ADC_AN0
  4858  010C22  0100               	movlb	0	; () banked
  4859  010C24  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4860  010C26  0E00               	movlw	high _ADC_AN0
  4861  010C28  0100               	movlb	0	; () banked
  4862  010C2A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4863  010C2C  EC6F  F09C         	call	_ADC_Voltage	;wreg free
  4864  010C30  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15597
  4865  010C34  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15597+1
  4866  010C38  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15597+2
  4867  010C3C  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15597+3
  4868                           
  4869                           ;main.c: 259: }
  4870                           ;main.c: 260: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4871  010C40  C3F8  F0BE         	movff	_mode1$15597,___fldiv@a
  4872  010C44  C3F9  F0BF         	movff	_mode1$15597+1,___fldiv@a+1
  4873  010C48  C3FA  F0C0         	movff	_mode1$15597+2,___fldiv@a+2
  4874  010C4C  C3FB  F0C1         	movff	_mode1$15597+3,___fldiv@a+3
  4875  010C50  0E00               	movlw	0
  4876  010C52  0100               	movlb	0	; () banked
  4877  010C54  6FBA               	movwf	___fldiv@b& (0+255),b
  4878  010C56  0E00               	movlw	0
  4879  010C58  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4880  010C5A  0E6C               	movlw	108
  4881  010C5C  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4882  010C5E  0E42               	movlw	66
  4883  010C60  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4884  010C62  EC4C  F086         	call	___fldiv	;wreg free
  4885  010C66  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4886  010C6A  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4887  010C6E  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4888  010C72  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4889  010C76  EC0E  F09A         	call	___fltol	;wreg free
  4890  010C7A  C0F3  F06D         	movff	?___fltol,_IRValue
  4891  010C7E  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4892  010C82                     l2363:
  4893  010C82  0103               	movlb	3	; () banked
  4894  010C84  BFD0               	btfsc	(_Stepper+1)& (0+255),7,b
  4895  010C86  0012               	return	
  4896  010C88  0103               	movlb	3	; () banked
  4897  010C8A  51D0               	movf	(_Stepper+1)& (0+255),w,b
  4898  010C8C  E1AD               	bnz	l16348
  4899  010C8E  0103               	movlb	3	; () banked
  4900  010C90  05CF               	decf	_Stepper& (0+255),w,b
  4901  010C92  A0D8               	btfss	status,0,c
  4902  010C94  0012               	return	
  4903  010C96  D7A8               	goto	l2364
  4904  010C98                     __end_of_mode1:
  4905                           	opt stack 0
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           postdec1	equ	0xFE5
  4913                           fsr1h	equ	0xFE2
  4914                           fsr1l	equ	0xFE1
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _safeToGo *****************
  4918 ;; Defined at:
  4919 ;;		line 121 in file "main.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;		None
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;Total ram usage:        0 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:   16
  4940 ;; This function calls:
  4941 ;;		_HMI_Poll
  4942 ;;		_irobot_song_play
  4943 ;;		_irobot_stop_motion
  4944 ;;		_update_angle
  4945 ;;		_update_bump_and_cliff
  4946 ;;		_update_distance
  4947 ;; This function is called by:
  4948 ;;		_mode1
  4949 ;;		_mode2
  4950 ;;		_mode3
  4951 ;;		_mode4
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text9
  4956  015A7E                     __ptext9:
  4957                           	opt stack 0
  4958  015A7E                     _safeToGo:
  4959                           	opt stack 13
  4960                           
  4961                           ;main.c: 122: update_bump_and_cliff();
  4962                           
  4963                           ; BSR set to: 3
  4964                           ;incstack = 0
  4965  015A7E  EC7B  F0AF         	call	_update_bump_and_cliff	;wreg free
  4966                           
  4967                           ;main.c: 123: update_distance();
  4968  015A82  EC56  F0B2         	call	_update_distance	;wreg free
  4969                           
  4970                           ;main.c: 124: update_angle();
  4971  015A86  EC5F  F0B2         	call	_update_angle	;wreg free
  4972                           
  4973                           ;main.c: 125: if (iRBumpLeft || iRBumpRight) {
  4974  015A8A  0100               	movlb	0	; () banked
  4975  015A8C  5189               	movf	_iRBumpLeft& (0+255),w,b
  4976  015A8E  A4D8               	btfss	status,2,c
  4977  015A90  D004               	goto	u11180
  4978                           
  4979                           ; BSR set to: 0
  4980  015A92  0100               	movlb	0	; () banked
  4981  015A94  518A               	movf	_iRBumpRight& (0+255),w,b
  4982  015A96  B4D8               	btfsc	status,2,c
  4983  015A98  D006               	goto	l2316
  4984  015A9A                     u11180:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;main.c: 126: irobot_song_play(0);
  4988                           
  4989                           ; BSR set to: 0
  4990  015A9A  0E00               	movlw	0
  4991  015A9C  EC42  F0B2         	call	_irobot_song_play
  4992                           
  4993                           ;main.c: 127: irobot_stop_motion(0);
  4994  015AA0  0E00               	movlw	0
  4995  015AA2  ECF5  F0AD         	call	_irobot_stop_motion
  4996  015AA6                     l2316:
  4997                           
  4998                           ;main.c: 128: }
  4999                           ;main.c: 129: if (angleTotal > 83) {
  5000  015AA6  0100               	movlb	0	; () banked
  5001  015AA8  BF76               	btfsc	(_angleTotal+1)& (0+255),7,b
  5002  015AAA  D00B               	goto	l2319
  5003  015AAC  0100               	movlb	0	; () banked
  5004  015AAE  5176               	movf	(_angleTotal+1)& (0+255),w,b
  5005  015AB0  E105               	bnz	u11190
  5006  015AB2  0E54               	movlw	84
  5007  015AB4  0100               	movlb	0	; () banked
  5008  015AB6  5D75               	subwf	_angleTotal& (0+255),w,b
  5009  015AB8  A0D8               	btfss	status,0,c
  5010  015ABA  D003               	goto	l2319
  5011  015ABC                     u11190:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;main.c: 130: irobot_stop_motion(0);
  5015  015ABC  0E00               	movlw	0
  5016  015ABE  ECF5  F0AD         	call	_irobot_stop_motion
  5017  015AC2                     l2319:
  5018                           
  5019                           ;main.c: 131: }
  5020                           ;main.c: 132: HMI_Poll();
  5021  015AC2  EC76  F0A9         	call	_HMI_Poll	;wreg free
  5022  015AC6  0012               	return		;funcret
  5023  015AC8                     __end_of_safeToGo:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           postinc0	equ	0xFEE
  5030                           wreg	equ	0xFE8
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           status	equ	0xFD8
  5035                           
  5036 ;; *************** function _update_distance *****************
  5037 ;; Defined at:
  5038 ;;		line 325 in file "Library/iRobotSerial.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;Total ram usage:        0 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:   10
  5059 ;; This function calls:
  5060 ;;		_irobot_query_and_update
  5061 ;; This function is called by:
  5062 ;;		_safeToGo
  5063 ;;		_move_and_rotate
  5064 ;;		_mode2
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text10
  5069  0164AC                     __ptext10:
  5070                           	opt stack 0
  5071  0164AC                     _update_distance:
  5072                           	opt stack 18
  5073                           
  5074                           ;iRobotSerial.c: 326: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5075                           
  5076                           ;incstack = 0
  5077  0164AC  0E00               	movlw	0
  5078  0164AE  0100               	movlb	0	; () banked
  5079  0164B0  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5080  0164B2  0E13               	movlw	19
  5081  0164B4  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5082  0164B6  0E01               	movlw	1
  5083  0164B8  EC2C  F095         	call	_irobot_query_and_update
  5084  0164BC  0012               	return		;funcret
  5085  0164BE                     __end_of_update_distance:
  5086                           	opt stack 0
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           postdec1	equ	0xFE5
  5094                           fsr1h	equ	0xFE2
  5095                           fsr1l	equ	0xFE1
  5096                           status	equ	0xFD8
  5097                           
  5098 ;; *************** function _update_bump_and_cliff *****************
  5099 ;; Defined at:
  5100 ;;		line 318 in file "Library/iRobotSerial.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;		None
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;		None
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      void 
  5107 ;; Registers used:
  5108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;Total ram usage:        0 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:   10
  5121 ;; This function calls:
  5122 ;;		_irobot_query_and_update
  5123 ;; This function is called by:
  5124 ;;		_safeToGo
  5125 ;;		_mode4
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           	psect	text11
  5130  015EF6                     __ptext11:
  5131                           	opt stack 0
  5132  015EF6                     _update_bump_and_cliff:
  5133                           	opt stack 19
  5134                           
  5135                           ;iRobotSerial.c: 319: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5136                           ;iRobotSerial.c: 320: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5137                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5138                           
  5139                           ;incstack = 0
  5140  015EF6  0E00               	movlw	0
  5141  015EF8  0100               	movlb	0	; () banked
  5142  015EFA  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5143  015EFC  0E07               	movlw	7
  5144  015EFE  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5145  015F00  0E00               	movlw	0
  5146  015F02  0100               	movlb	0	; () banked
  5147  015F04  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5148  015F06  0E09               	movlw	9
  5149  015F08  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5150  015F0A  0E00               	movlw	0
  5151  015F0C  0100               	movlb	0	; () banked
  5152  015F0E  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5153  015F10  0E0A               	movlw	10
  5154  015F12  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5155  015F14  0E00               	movlw	0
  5156  015F16  0100               	movlb	0	; () banked
  5157  015F18  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5158  015F1A  0E0B               	movlw	11
  5159  015F1C  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5160  015F1E  0E00               	movlw	0
  5161  015F20  0100               	movlb	0	; () banked
  5162  015F22  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5163  015F24  0E0C               	movlw	12
  5164  015F26  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5165  015F28  0E05               	movlw	5
  5166  015F2A  EC2C  F095         	call	_irobot_query_and_update
  5167  015F2E  0012               	return		;funcret
  5168  015F30                     __end_of_update_bump_and_cliff:
  5169                           	opt stack 0
  5170                           tblptru	equ	0xFF8
  5171                           tblptrh	equ	0xFF7
  5172                           tblptrl	equ	0xFF6
  5173                           tablat	equ	0xFF5
  5174                           postinc0	equ	0xFEE
  5175                           wreg	equ	0xFE8
  5176                           postdec1	equ	0xFE5
  5177                           fsr1h	equ	0xFE2
  5178                           fsr1l	equ	0xFE1
  5179                           status	equ	0xFD8
  5180                           
  5181 ;; *************** function _update_angle *****************
  5182 ;; Defined at:
  5183 ;;		line 330 in file "Library/iRobotSerial.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5201 ;;Total ram usage:        0 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:   10
  5204 ;; This function calls:
  5205 ;;		_irobot_query_and_update
  5206 ;; This function is called by:
  5207 ;;		_irobot_rotate
  5208 ;;		_safeToGo
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text12
  5213  0164BE                     __ptext12:
  5214                           	opt stack 0
  5215  0164BE                     _update_angle:
  5216                           	opt stack 18
  5217                           
  5218                           ;iRobotSerial.c: 331: irobot_query_and_update(1, iR_PKT_ANGLE);
  5219                           
  5220                           ;incstack = 0
  5221  0164BE  0E00               	movlw	0
  5222  0164C0  0100               	movlb	0	; () banked
  5223  0164C2  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5224  0164C4  0E14               	movlw	20
  5225  0164C6  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5226  0164C8  0E01               	movlw	1
  5227  0164CA  EC2C  F095         	call	_irobot_query_and_update
  5228  0164CE  0012               	return		;funcret
  5229  0164D0                     __end_of_update_angle:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           postinc0	equ	0xFEE
  5236                           wreg	equ	0xFE8
  5237                           postdec1	equ	0xFE5
  5238                           fsr1h	equ	0xFE2
  5239                           fsr1l	equ	0xFE1
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _irobot_query_and_update *****************
  5243 ;; Defined at:
  5244 ;;		line 130 in file "Library/iRobotSerial.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  numberOfPack    1    wreg     unsigned char 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5249 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5250 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5251 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5252 ;;		 -> ?_irobot_query_and_update(1), 
  5253 ;;  i               1   28[BANK0 ] unsigned char 
  5254 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5255 ;;  j               1   26[BANK0 ] unsigned char 
  5256 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5257 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  1    wreg      void 
  5260 ;; Registers used:
  5261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5267 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;Total ram usage:      535 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    9
  5274 ;; This function calls:
  5275 ;;		_eusart_getch
  5276 ;;		_eusart_putch
  5277 ;;		_get_packet_size
  5278 ;;		_rx_assign
  5279 ;; This function is called by:
  5280 ;;		_update_bump_and_cliff
  5281 ;;		_update_distance
  5282 ;;		_update_angle
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           	psect	text13
  5287  012A58                     __ptext13:
  5288                           	opt stack 0
  5289  012A58                     _irobot_query_and_update:
  5290                           	opt stack 19
  5291                           
  5292                           ;incstack = 0
  5293                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5294  012A58  0100               	movlb	0	; () banked
  5295  012A5A  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5296                           
  5297                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5298  012A5C  0E00               	movlw	0
  5299  012A5E  0100               	movlb	0	; () banked
  5300  012A60  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5301  012A62  0E00               	movlw	0
  5302  012A64  0100               	movlb	0	; () banked
  5303  012A66  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5304                           
  5305                           ;iRobotSerial.c: 132: va_list packetIDs;
  5306                           ;iRobotSerial.c: 133: *packetIDs = __va_start();
  5307  012A68  0EC0               	movlw	low ?_irobot_query_and_update
  5308  012A6A  0100               	movlb	0	; () banked
  5309  012A6C  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5310  012A6E  0E00               	movlw	high ?_irobot_query_and_update
  5311  012A70  0100               	movlb	0	; () banked
  5312  012A72  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;iRobotSerial.c: 134: eusart_putch(iR_QUERY_LIST);
  5316  012A74  0E95               	movlw	149
  5317  012A76  EC7F  F0B2         	call	_eusart_putch
  5318                           
  5319                           ;iRobotSerial.c: 135: eusart_putch(numberOfPacketRequests);
  5320  012A7A  0100               	movlb	0	; () banked
  5321  012A7C  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5322  012A7E  EC7F  F0B2         	call	_eusart_putch
  5323                           
  5324                           ;iRobotSerial.c: 136: for (i = 0; i < numberOfPacketRequests; i++) {
  5325  012A82  0E00               	movlw	0
  5326  012A84  0100               	movlb	0	; () banked
  5327  012A86  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5328  012A88  D023               	goto	l2095
  5329  012A8A                     
  5330                           ; BSR set to: 0
  5331                           ;iRobotSerial.c: 137: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5332                           
  5333                           ; BSR set to: 0
  5334  012A8A  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5335  012A8E  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5336  012A92  50DF               	movf	indf2,w,c
  5337  012A94  0100               	movlb	0	; () banked
  5338  012A96  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5339                           
  5340                           ; BSR set to: 0
  5341  012A98  0E02               	movlw	2
  5342  012A9A  0100               	movlb	0	; () banked
  5343  012A9C  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5344  012A9E  0E00               	movlw	0
  5345  012AA0  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;iRobotSerial.c: 138: streamSize += get_packet_size(packetVariable);
  5349  012AA2  0100               	movlb	0	; () banked
  5350  012AA4  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5351  012AA6  ECF3  F0AA         	call	_get_packet_size
  5352  012AAA  0100               	movlb	0	; () banked
  5353  012AAC  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;iRobotSerial.c: 139: TXArray[i] = packetVariable;
  5357  012AAE  0100               	movlb	0	; () banked
  5358  012AB0  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5359  012AB2  0D01               	mullw	1
  5360  012AB4  0E00               	movlw	low irobot_query_and_update@TXArray
  5361  012AB6  24F3               	addwf	prodl,w,c
  5362  012AB8  6ED9               	movwf	fsr2l,c
  5363  012ABA  0E02               	movlw	high irobot_query_and_update@TXArray
  5364  012ABC  20F4               	addwfc	prodh,w,c
  5365  012ABE  6EDA               	movwf	fsr2h,c
  5366  012AC0  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;iRobotSerial.c: 140: eusart_putch(packetVariable);
  5370  012AC4  0100               	movlb	0	; () banked
  5371  012AC6  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5372  012AC8  EC7F  F0B2         	call	_eusart_putch
  5373  012ACC  0100               	movlb	0	; () banked
  5374  012ACE  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5375  012AD0                     l2095:
  5376                           
  5377                           ; BSR set to: 0
  5378                           
  5379                           ; BSR set to: 0
  5380  012AD0  0100               	movlb	0	; () banked
  5381  012AD2  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5382  012AD4  0100               	movlb	0	; () banked
  5383  012AD6  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5384  012AD8  A0D8               	btfss	status,0,c
  5385  012ADA  D7D7               	goto	l2096
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;iRobotSerial.c: 141: }
  5389                           ;iRobotSerial.c: 142: ;
  5390                           ;iRobotSerial.c: 144: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5391                           
  5392                           ; BSR set to: 0
  5393  012ADC  0E00               	movlw	0
  5394  012ADE  0100               	movlb	0	; () banked
  5395  012AE0  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5396  012AE2  D00E               	goto	l2098
  5397  012AE4                     
  5398                           ; BSR set to: 0
  5399                           
  5400                           ; BSR set to: 0
  5401  012AE4  0100               	movlb	0	; () banked
  5402  012AE6  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5403  012AE8  0D01               	mullw	1
  5404  012AEA  0E00               	movlw	low irobot_query_and_update@RXArray
  5405  012AEC  24F3               	addwf	prodl,w,c
  5406  012AEE  6ED9               	movwf	fsr2l,c
  5407  012AF0  0E01               	movlw	high irobot_query_and_update@RXArray
  5408  012AF2  20F4               	addwfc	prodh,w,c
  5409  012AF4  6EDA               	movwf	fsr2h,c
  5410  012AF6  ECC2  F0B2         	call	_eusart_getch	;wreg free
  5411  012AFA  6EDF               	movwf	indf2,c
  5412  012AFC  0100               	movlb	0	; () banked
  5413  012AFE  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5414  012B00                     l2098:
  5415                           
  5416                           ; BSR set to: 0
  5417                           
  5418                           ; BSR set to: 0
  5419  012B00  0100               	movlb	0	; () banked
  5420  012B02  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5421  012B04  0100               	movlb	0	; () banked
  5422  012B06  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5423  012B08  A0D8               	btfss	status,0,c
  5424  012B0A  D7EC               	goto	l2099
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;iRobotSerial.c: 146: for (i = 0; i < numberOfPacketRequests; i++) {
  5428                           
  5429                           ; BSR set to: 0
  5430  012B0C  0E00               	movlw	0
  5431  012B0E  0100               	movlb	0	; () banked
  5432  012B10  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5433  012B12  D05E               	goto	l2101
  5434  012B14                     l2102:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;iRobotSerial.c: 147: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5438  012B14  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5439  012B18  D021               	goto	l2103
  5440  012B1A                     
  5441                           ; BSR set to: 0
  5442                           ;iRobotSerial.c: 148: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5443                           
  5444                           ; BSR set to: 0
  5445  012B1A  0100               	movlb	0	; () banked
  5446  012B1C  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5447  012B1E  0D01               	mullw	1
  5448  012B20  0E00               	movlw	low irobot_query_and_update@RXArray
  5449  012B22  24F3               	addwf	prodl,w,c
  5450  012B24  6ED9               	movwf	fsr2l,c
  5451  012B26  0E01               	movlw	high irobot_query_and_update@RXArray
  5452  012B28  20F4               	addwfc	prodh,w,c
  5453  012B2A  6EDA               	movwf	fsr2h,c
  5454  012B2C  50DF               	movf	indf2,w,c
  5455  012B2E  0100               	movlb	0	; () banked
  5456  012B30  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  5457  012B32  0100               	movlb	0	; () banked
  5458  012B34  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5459  012B36  0800               	sublw	0
  5460  012B38  0100               	movlb	0	; () banked
  5461  012B3A  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  5462  012B3C  0100               	movlb	0	; () banked
  5463  012B3E  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  5464  012B40  0100               	movlb	0	; () banked
  5465  012B42  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5466  012B44  0D01               	mullw	1
  5467  012B46  0E00               	movlw	low irobot_query_and_update@TXArray
  5468  012B48  24F3               	addwf	prodl,w,c
  5469  012B4A  6ED9               	movwf	fsr2l,c
  5470  012B4C  0E02               	movlw	high irobot_query_and_update@TXArray
  5471  012B4E  20F4               	addwfc	prodh,w,c
  5472  012B50  6EDA               	movwf	fsr2h,c
  5473  012B52  50DF               	movf	indf2,w,c
  5474  012B54  EC14  F09B         	call	_rx_assign
  5475  012B58  0100               	movlb	0	; () banked
  5476  012B5A  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  5477  012B5C                     l2103:
  5478                           
  5479                           ; BSR set to: 0
  5480                           
  5481                           ; BSR set to: 0
  5482  012B5C  0100               	movlb	0	; () banked
  5483  012B5E  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5484  012B60  0D01               	mullw	1
  5485  012B62  0E00               	movlw	low irobot_query_and_update@TXArray
  5486  012B64  24F3               	addwf	prodl,w,c
  5487  012B66  6ED9               	movwf	fsr2l,c
  5488  012B68  0E02               	movlw	high irobot_query_and_update@TXArray
  5489  012B6A  20F4               	addwfc	prodh,w,c
  5490  012B6C  6EDA               	movwf	fsr2h,c
  5491  012B6E  50DF               	movf	indf2,w,c
  5492  012B70  ECF3  F0AA         	call	_get_packet_size
  5493  012B74  0100               	movlb	0	; () banked
  5494  012B76  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  5495  012B78  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5496  012B7A  0100               	movlb	0	; () banked
  5497  012B7C  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5498  012B7E  0100               	movlb	0	; () banked
  5499  012B80  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  5500  012B82  0E00               	movlw	0
  5501  012B84  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5502  012B86  0100               	movlb	0	; () banked
  5503  012B88  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5504  012B8A  0100               	movlb	0	; () banked
  5505  012B8C  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5506  012B8E  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5507  012B90  0100               	movlb	0	; () banked
  5508  012B92  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  5509  012B94  0100               	movlb	0	; () banked
  5510  012B96  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5511  012B98  0100               	movlb	0	; () banked
  5512  012B9A  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5513  012B9C  0A80               	xorlw	128
  5514  012B9E  0100               	movlb	0	; () banked
  5515  012BA0  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5516  012BA2  0100               	movlb	0	; () banked
  5517  012BA4  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5518  012BA6  0A80               	xorlw	128
  5519  012BA8  0100               	movlb	0	; () banked
  5520  012BAA  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5521  012BAC  A0D8               	btfss	status,0,c
  5522  012BAE  D7B5               	goto	l2104
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;iRobotSerial.c: 149: }
  5526                           ;iRobotSerial.c: 150: startIndex += get_packet_size(TXArray[i]);
  5527                           
  5528                           ; BSR set to: 0
  5529  012BB0  0100               	movlb	0	; () banked
  5530  012BB2  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5531  012BB4  0D01               	mullw	1
  5532  012BB6  0E00               	movlw	low irobot_query_and_update@TXArray
  5533  012BB8  24F3               	addwf	prodl,w,c
  5534  012BBA  6ED9               	movwf	fsr2l,c
  5535  012BBC  0E02               	movlw	high irobot_query_and_update@TXArray
  5536  012BBE  20F4               	addwfc	prodh,w,c
  5537  012BC0  6EDA               	movwf	fsr2h,c
  5538  012BC2  50DF               	movf	indf2,w,c
  5539  012BC4  ECF3  F0AA         	call	_get_packet_size
  5540  012BC8  0100               	movlb	0	; () banked
  5541  012BCA  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5542                           
  5543                           ; BSR set to: 0
  5544  012BCC  0100               	movlb	0	; () banked
  5545  012BCE  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5546  012BD0                     l2101:
  5547                           
  5548                           ; BSR set to: 0
  5549                           
  5550                           ; BSR set to: 0
  5551  012BD0  0100               	movlb	0	; () banked
  5552  012BD2  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5553  012BD4  0100               	movlb	0	; () banked
  5554  012BD6  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5555  012BD8  B0D8               	btfsc	status,0,c
  5556  012BDA  0012               	return	
  5557  012BDC  D79B               	goto	l2102
  5558  012BDE                     __end_of_irobot_query_and_update:
  5559                           	opt stack 0
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           prodh	equ	0xFF4
  5565                           prodl	equ	0xFF3
  5566                           postinc0	equ	0xFEE
  5567                           wreg	equ	0xFE8
  5568                           postdec1	equ	0xFE5
  5569                           fsr1h	equ	0xFE2
  5570                           fsr1l	equ	0xFE1
  5571                           indf2	equ	0xFDF
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function _rx_assign *****************
  5577 ;; Defined at:
  5578 ;;		line 74 in file "Library/iRobotSerial.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  packetID        1    wreg     unsigned char 
  5581 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5582 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  packetID        1    5[BANK0 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5594 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;Total ram usage:        5 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    8
  5601 ;; This function calls:
  5602 ;;		_sort_iRBumpDrop
  5603 ;; This function is called by:
  5604 ;;		_irobot_query_and_update
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text14
  5609  013628                     __ptext14:
  5610                           	opt stack 0
  5611  013628                     _rx_assign:
  5612                           	opt stack 19
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;incstack = 0
  5616                           ;rx_assign@packetID stored from wreg
  5617  013628  0100               	movlb	0	; () banked
  5618  01362A  6FBF               	movwf	rx_assign@packetID& (0+255),b
  5619                           
  5620                           ;iRobotSerial.c: 75: switch (packetID) {
  5621  01362C  D057               	goto	l2035
  5622  01362E                     l2036:
  5623                           
  5624                           ; BSR set to: 0
  5625  01362E  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5626                           
  5627                           ; BSR set to: 0
  5628  013632  EC42  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5629  013636  0012               	return	
  5630  013638                     l2038:
  5631                           
  5632                           ; BSR set to: 0
  5633  013638  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  5634  01363C  0012               	return	
  5635  01363E                     l2039:
  5636                           
  5637                           ; BSR set to: 0
  5638  01363E  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5639  013642  0012               	return	
  5640  013644                     l2040:
  5641                           
  5642                           ; BSR set to: 0
  5643  013644  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5644  013648  0012               	return	
  5645  01364A                     l2041:
  5646                           
  5647                           ; BSR set to: 0
  5648  01364A  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5649  01364E  0012               	return	
  5650  013650                     l2042:
  5651                           
  5652                           ; BSR set to: 0
  5653  013650  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5654  013654  0012               	return	
  5655  013656                     l2043:
  5656                           
  5657                           ; BSR set to: 0
  5658  013656  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5659  01365A  0012               	return	
  5660  01365C                     
  5661                           ; BSR set to: 0
  5662                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5663                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5664                           
  5665                           ; BSR set to: 0
  5666  01365C  0100               	movlb	0	; () banked
  5667  01365E  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5668  013660  0100               	movlb	0	; () banked
  5669  013662  A4D8               	btfss	status,2,c
  5670  013664  D005               	goto	l2046
  5671                           
  5672                           ; BSR set to: 0
  5673  013666  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5674  01366A  0103               	movlb	3	; () banked
  5675  01366C  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  5676  01366E  0012               	return	
  5677  013670                     l2046:
  5678                           
  5679                           ; BSR set to: 0
  5680  013670  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5681  013674  0103               	movlb	3	; () banked
  5682  013676  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  5683                           
  5684                           ; BSR set to: 3
  5685  013678  0103               	movlb	3	; () banked
  5686  01367A  5122               	movf	_iRDistanceSS& (0+255),w,b
  5687  01367C  0100               	movlb	0	; () banked
  5688  01367E  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  5689  013680  6BBD               	clrf	??_rx_assign& (0+255),b
  5690  013682  0103               	movlb	3	; () banked
  5691  013684  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5692  013686  0100               	movlb	0	; () banked
  5693  013688  25BD               	addwf	??_rx_assign& (0+255),w,b
  5694  01368A  0100               	movlb	0	; () banked
  5695  01368C  6F7B               	movwf	_iRDistance& (0+255),b
  5696  01368E  0103               	movlb	3	; () banked
  5697  013690  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5698  013692  0100               	movlb	0	; () banked
  5699  013694  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5700  013696  0100               	movlb	0	; () banked
  5701  013698  6F7C               	movwf	(_iRDistance+1)& (0+255),b
  5702                           
  5703                           ; BSR set to: 0
  5704  01369A  0012               	return	
  5705  01369C                     
  5706                           ; BSR set to: 0
  5707                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5708                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5709                           
  5710                           ; BSR set to: 0
  5711  01369C  0100               	movlb	0	; () banked
  5712  01369E  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5713  0136A0  0100               	movlb	0	; () banked
  5714  0136A2  A4D8               	btfss	status,2,c
  5715  0136A4  D005               	goto	l2051
  5716                           
  5717                           ; BSR set to: 0
  5718  0136A6  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  5719  0136AA  0103               	movlb	3	; () banked
  5720  0136AC  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  5721  0136AE  0012               	return	
  5722  0136B0                     l2051:
  5723                           
  5724                           ; BSR set to: 0
  5725  0136B0  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5726  0136B4  0103               	movlb	3	; () banked
  5727  0136B6  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  5728                           
  5729                           ; BSR set to: 3
  5730  0136B8  0103               	movlb	3	; () banked
  5731  0136BA  511E               	movf	_iRAngleSS& (0+255),w,b
  5732  0136BC  0100               	movlb	0	; () banked
  5733  0136BE  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  5734  0136C0  6BBD               	clrf	??_rx_assign& (0+255),b
  5735  0136C2  0103               	movlb	3	; () banked
  5736  0136C4  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  5737  0136C6  0100               	movlb	0	; () banked
  5738  0136C8  25BD               	addwf	??_rx_assign& (0+255),w,b
  5739  0136CA  0100               	movlb	0	; () banked
  5740  0136CC  6F79               	movwf	_iRAngle& (0+255),b
  5741  0136CE  0103               	movlb	3	; () banked
  5742  0136D0  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  5743  0136D2  0100               	movlb	0	; () banked
  5744  0136D4  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5745  0136D6  0100               	movlb	0	; () banked
  5746  0136D8  6F7A               	movwf	(_iRAngle+1)& (0+255),b
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;iRobotSerial.c: 89: }
  5750                           
  5751                           ; BSR set to: 0
  5752  0136DA  0012               	return	
  5753  0136DC                     l2035:
  5754                           
  5755                           ; BSR set to: 0
  5756  0136DC  0100               	movlb	0	; () banked
  5757  0136DE  51BF               	movf	rx_assign@packetID& (0+255),w,b
  5758                           
  5759                           ; Switch size 1, requested type "space"
  5760                           ; Number of cases is 9, Range of values is 7 to 20
  5761                           ; switch strategies available:
  5762                           ; Name         Instructions Cycles
  5763                           ; simple_byte           28    15 (average)
  5764                           ;	Chosen strategy is simple_byte
  5765  0136E0  0A07               	xorlw	7	; case 7
  5766  0136E2  B4D8               	btfsc	status,2,c
  5767  0136E4  D7A4               	goto	l2036
  5768  0136E6  0A0F               	xorlw	15	; case 8
  5769  0136E8  B4D8               	btfsc	status,2,c
  5770  0136EA  D7A6               	goto	l2038
  5771  0136EC  0A01               	xorlw	1	; case 9
  5772  0136EE  B4D8               	btfsc	status,2,c
  5773  0136F0  D7A6               	goto	l2039
  5774  0136F2  0A03               	xorlw	3	; case 10
  5775  0136F4  B4D8               	btfsc	status,2,c
  5776  0136F6  D7A6               	goto	l2040
  5777  0136F8  0A01               	xorlw	1	; case 11
  5778  0136FA  B4D8               	btfsc	status,2,c
  5779  0136FC  D7A6               	goto	l2041
  5780  0136FE  0A07               	xorlw	7	; case 12
  5781  013700  B4D8               	btfsc	status,2,c
  5782  013702  D7A6               	goto	l2042
  5783  013704  0A01               	xorlw	1	; case 13
  5784  013706  B4D8               	btfsc	status,2,c
  5785  013708  D7A6               	goto	l2043
  5786  01370A  0A1E               	xorlw	30	; case 19
  5787  01370C  B4D8               	btfsc	status,2,c
  5788  01370E  D7A6               	goto	l2044
  5789  013710  0A07               	xorlw	7	; case 20
  5790  013712  A4D8               	btfss	status,2,c
  5791  013714  0012               	return	
  5792  013716  D7C2               	goto	l2049
  5793  013718                     __end_of_rx_assign:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           fsr1h	equ	0xFE2
  5805                           fsr1l	equ	0xFE1
  5806                           indf2	equ	0xFDF
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _sort_iRBumpDrop *****************
  5812 ;; Defined at:
  5813 ;;		line 92 in file "Library/iRobotSerial.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  1    wreg      void 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;Total ram usage:        1 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    7
  5834 ;; This function calls:
  5835 ;;		Nothing
  5836 ;; This function is called by:
  5837 ;;		_rx_assign
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text15
  5842  014C84                     __ptext15:
  5843                           	opt stack 0
  5844  014C84                     _sort_iRBumpDrop:
  5845                           	opt stack 19
  5846                           
  5847                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5848                           
  5849                           ;incstack = 0
  5850  014C84  A036               	btfss	_iRBumpDrop,0,c
  5851  014C86  D002               	goto	l2058
  5852  014C88  0E01               	movlw	1
  5853  014C8A  D001               	goto	L1
  5854  014C8C                     l2058:
  5855                           
  5856                           ; BSR set to: 0
  5857  014C8C  0E00               	movlw	0
  5858  014C8E                     L1:
  5859  014C8E  0100               	movlb	0	; () banked
  5860  014C90  6F8A               	movwf	_iRBumpRight& (0+255),b
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5864                           
  5865                           ; BSR set to: 0
  5866  014C92  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5867  014C96  0100               	movlb	0	; () banked
  5868  014C98  90D8               	bcf	status,0,c
  5869  014C9A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5870  014C9C  0100               	movlb	0	; () banked
  5871  014C9E  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5872  014CA0  D002               	goto	l2062
  5873                           
  5874                           ; BSR set to: 0
  5875  014CA2  0E01               	movlw	1
  5876  014CA4  D001               	goto	L2
  5877  014CA6                     l2062:
  5878                           
  5879                           ; BSR set to: 0
  5880                           
  5881                           ; BSR set to: 0
  5882  014CA6  0E00               	movlw	0
  5883  014CA8                     L2:
  5884  014CA8  0100               	movlb	0	; () banked
  5885  014CAA  6F89               	movwf	_iRBumpLeft& (0+255),b
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5889                           
  5890                           ; BSR set to: 0
  5891  014CAC  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5892  014CB0  0100               	movlb	0	; () banked
  5893  014CB2  90D8               	bcf	status,0,c
  5894  014CB4  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5895  014CB6  0100               	movlb	0	; () banked
  5896  014CB8  90D8               	bcf	status,0,c
  5897  014CBA  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5898  014CBC  0100               	movlb	0	; () banked
  5899  014CBE  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5900  014CC0  D002               	goto	l2066
  5901                           
  5902                           ; BSR set to: 0
  5903  014CC2  0E01               	movlw	1
  5904  014CC4  D001               	goto	L3
  5905  014CC6                     l2066:
  5906                           
  5907                           ; BSR set to: 0
  5908                           
  5909                           ; BSR set to: 0
  5910  014CC6  0E00               	movlw	0
  5911  014CC8                     L3:
  5912  014CC8  0100               	movlb	0	; () banked
  5913  014CCA  6F88               	movwf	_iRDropRight& (0+255),b
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5917                           
  5918                           ; BSR set to: 0
  5919  014CCC  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5920  014CD0  0100               	movlb	0	; () banked
  5921  014CD2  90D8               	bcf	status,0,c
  5922  014CD4  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5923  014CD6  0100               	movlb	0	; () banked
  5924  014CD8  90D8               	bcf	status,0,c
  5925  014CDA  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5926  014CDC  0100               	movlb	0	; () banked
  5927  014CDE  90D8               	bcf	status,0,c
  5928  014CE0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5929  014CE2  0100               	movlb	0	; () banked
  5930  014CE4  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5931  014CE6  D002               	goto	l2070
  5932                           
  5933                           ; BSR set to: 0
  5934  014CE8  0E01               	movlw	1
  5935  014CEA  D001               	goto	L4
  5936  014CEC                     l2070:
  5937                           
  5938                           ; BSR set to: 0
  5939                           
  5940                           ; BSR set to: 0
  5941  014CEC  0E00               	movlw	0
  5942  014CEE                     L4:
  5943  014CEE  0100               	movlb	0	; () banked
  5944  014CF0  6F87               	movwf	_iRDropLeft& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  5948                           
  5949                           ; BSR set to: 0
  5950  014CF2  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5951  014CF6  0100               	movlb	0	; () banked
  5952  014CF8  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  5953  014CFA  0E0F               	movlw	15
  5954  014CFC  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  5955  014CFE  0100               	movlb	0	; () banked
  5956  014D00  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5957  014D02  D003               	goto	l2074
  5958                           
  5959                           ; BSR set to: 0
  5960  014D04  0E01               	movlw	1
  5961  014D06  6E2F               	movwf	_iRDropCaster,c
  5962  014D08  0012               	return	
  5963  014D0A                     l2074:
  5964                           
  5965                           ; BSR set to: 0
  5966                           
  5967                           ; BSR set to: 0
  5968  014D0A  0E00               	movlw	0
  5969  014D0C  6E2F               	movwf	_iRDropCaster,c
  5970  014D0E  0012               	return	
  5971  014D10                     __end_of_sort_iRBumpDrop:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           postdec1	equ	0xFE5
  5982                           fsr1h	equ	0xFE2
  5983                           fsr1l	equ	0xFE1
  5984                           indf2	equ	0xFDF
  5985                           fsr2h	equ	0xFDA
  5986                           fsr2l	equ	0xFD9
  5987                           status	equ	0xFD8
  5988                           
  5989 ;; *************** function _get_packet_size *****************
  5990 ;; Defined at:
  5991 ;;		line 60 in file "Library/iRobotSerial.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  packetID        1    wreg     unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  packetID        1    0[BANK0 ] unsigned char 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  1    wreg      unsigned char 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;Total ram usage:        1 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:    7
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_irobot_query_and_update
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text16
  6020  0155E6                     __ptext16:
  6021                           	opt stack 0
  6022  0155E6                     _get_packet_size:
  6023                           	opt stack 20
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;incstack = 0
  6027                           ;get_packet_size@packetID stored from wreg
  6028  0155E6  0100               	movlb	0	; () banked
  6029  0155E8  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6030                           
  6031                           ;iRobotSerial.c: 61: switch (packetID) {
  6032  0155EA  D012               	goto	l2021
  6033  0155EC  0E01               	movlw	1
  6034  0155EE  0012               	return	
  6035  0155F0  0E01               	movlw	1
  6036  0155F2  0012               	return	
  6037  0155F4  0E01               	movlw	1
  6038  0155F6  0012               	return	
  6039  0155F8  0E01               	movlw	1
  6040  0155FA  0012               	return	
  6041  0155FC  0E01               	movlw	1
  6042  0155FE  0012               	return	
  6043  015600  0E01               	movlw	1
  6044  015602  0012               	return	
  6045  015604  0E01               	movlw	1
  6046  015606  0012               	return	
  6047  015608  0E02               	movlw	2
  6048  01560A  0012               	return	
  6049  01560C  0E02               	movlw	2
  6050                           
  6051                           ;iRobotSerial.c: 71: }
  6052  01560E  0012               	return	
  6053  015610                     l2021:
  6054  015610  0100               	movlb	0	; () banked
  6055  015612  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6056                           
  6057                           ; Switch size 1, requested type "space"
  6058                           ; Number of cases is 9, Range of values is 7 to 20
  6059                           ; switch strategies available:
  6060                           ; Name         Instructions Cycles
  6061                           ; simple_byte           28    15 (average)
  6062                           ;	Chosen strategy is simple_byte
  6063  015614  0A07               	xorlw	7	; case 7
  6064  015616  B4D8               	btfsc	status,2,c
  6065  015618  D7E9               	goto	l2022
  6066  01561A  0A0F               	xorlw	15	; case 8
  6067  01561C  B4D8               	btfsc	status,2,c
  6068  01561E  D7E8               	goto	l2024
  6069  015620  0A01               	xorlw	1	; case 9
  6070  015622  B4D8               	btfsc	status,2,c
  6071  015624  D7E7               	goto	l2025
  6072  015626  0A03               	xorlw	3	; case 10
  6073  015628  B4D8               	btfsc	status,2,c
  6074  01562A  D7E6               	goto	l2026
  6075  01562C  0A01               	xorlw	1	; case 11
  6076  01562E  B4D8               	btfsc	status,2,c
  6077  015630  D7E5               	goto	l2027
  6078  015632  0A07               	xorlw	7	; case 12
  6079  015634  B4D8               	btfsc	status,2,c
  6080  015636  D7E4               	goto	l2028
  6081  015638  0A01               	xorlw	1	; case 13
  6082  01563A  B4D8               	btfsc	status,2,c
  6083  01563C  D7E3               	goto	l2029
  6084  01563E  0A1E               	xorlw	30	; case 19
  6085  015640  B4D8               	btfsc	status,2,c
  6086  015642  D7E2               	goto	l2030
  6087  015644  0A07               	xorlw	7	; case 20
  6088  015646  A4D8               	btfss	status,2,c
  6089  015648  0012               	return	
  6090  01564A  D7E0               	goto	l2031
  6091  01564C                     __end_of_get_packet_size:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           postinc0	equ	0xFEE
  6100                           wreg	equ	0xFE8
  6101                           postdec1	equ	0xFE5
  6102                           fsr1h	equ	0xFE2
  6103                           fsr1l	equ	0xFE1
  6104                           indf2	equ	0xFDF
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _eusart_getch *****************
  6110 ;; Defined at:
  6111 ;;		line 125 in file "Library/iRobotSerial.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      unsigned char 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;Total ram usage:        0 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    7
  6132 ;; This function calls:
  6133 ;;		Nothing
  6134 ;; This function is called by:
  6135 ;;		_irobot_query_and_update
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text17
  6140  016584                     __ptext17:
  6141                           	opt stack 0
  6142  016584                     _eusart_getch:
  6143                           	opt stack 20
  6144                           
  6145                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6146                           
  6147                           ;incstack = 0
  6148  016584  AA9E               	btfss	3998,5,c	;volatile
  6149  016586  D7FE               	goto	_eusart_getch
  6150                           
  6151                           ;iRobotSerial.c: 127: return RCREG1;
  6152  016588  50AF               	movf	4015,w,c	;volatile
  6153  01658A  0012               	return	
  6154  01658C                     __end_of_eusart_getch:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           postinc0	equ	0xFEE
  6163                           wreg	equ	0xFE8
  6164                           postdec1	equ	0xFE5
  6165                           fsr1h	equ	0xFE2
  6166                           fsr1l	equ	0xFE1
  6167                           indf2	equ	0xFDF
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _irobot_stop_motion *****************
  6173 ;; Defined at:
  6174 ;;		line 298 in file "Library/iRobotSerial.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  isScript        1    wreg     unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  isScript        1   25[BANK0 ] unsigned char 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;Total ram usage:        1 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    9
  6195 ;; This function calls:
  6196 ;;		_irobot_move
  6197 ;; This function is called by:
  6198 ;;		_irobot_rotate
  6199 ;;		_safeToGo
  6200 ;;		_move_and_rotate
  6201 ;;		_mode2
  6202 ;;		_mode4
  6203 ;;		_irobot_move_to_simple
  6204 ;;		_irobot_rotate_to
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text18
  6209  015BEA                     __ptext18:
  6210                           	opt stack 0
  6211  015BEA                     _irobot_stop_motion:
  6212                           	opt stack 19
  6213                           
  6214                           ;incstack = 0
  6215                           ;irobot_stop_motion@isScript stored from wreg
  6216  015BEA  0100               	movlb	0	; () banked
  6217  015BEC  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6218                           
  6219                           ;iRobotSerial.c: 299: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6220  015BEE  0100               	movlb	0	; () banked
  6221  015BF0  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6222  015BF2  0100               	movlb	0	; () banked
  6223  015BF4  B4D8               	btfsc	status,2,c
  6224  015BF6  D00E               	goto	l2168
  6225                           
  6226                           ; BSR set to: 0
  6227  015BF8  0E00               	movlw	0
  6228  015BFA  0100               	movlb	0	; () banked
  6229  015BFC  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6230  015BFE  0E00               	movlw	0
  6231  015C00  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6232  015C02  0E00               	movlw	0
  6233  015C04  0100               	movlb	0	; () banked
  6234  015C06  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6235  015C08  0E00               	movlw	0
  6236  015C0A  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6237  015C0C  0E01               	movlw	1
  6238  015C0E  EC7C  F0A1         	call	_irobot_move
  6239  015C12  0012               	return	
  6240  015C14                     l2168:
  6241  015C14  0E00               	movlw	0
  6242  015C16  0100               	movlb	0	; () banked
  6243  015C18  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6244  015C1A  0E00               	movlw	0
  6245  015C1C  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6246  015C1E  0E00               	movlw	0
  6247  015C20  0100               	movlb	0	; () banked
  6248  015C22  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6249  015C24  0E00               	movlw	0
  6250  015C26  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6251  015C28  0E00               	movlw	0
  6252  015C2A  EC7C  F0A1         	call	_irobot_move
  6253  015C2E  0012               	return	
  6254  015C30                     __end_of_irobot_stop_motion:
  6255                           	opt stack 0
  6256                           tblptru	equ	0xFF8
  6257                           tblptrh	equ	0xFF7
  6258                           tblptrl	equ	0xFF6
  6259                           tablat	equ	0xFF5
  6260                           prodh	equ	0xFF4
  6261                           prodl	equ	0xFF3
  6262                           postinc0	equ	0xFEE
  6263                           wreg	equ	0xFE8
  6264                           postdec1	equ	0xFE5
  6265                           fsr1h	equ	0xFE2
  6266                           fsr1l	equ	0xFE1
  6267                           indf2	equ	0xFDF
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function _irobot_move *****************
  6273 ;; Defined at:
  6274 ;;		line 219 in file "Library/iRobotSerial.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  isScript        1    wreg     unsigned char 
  6277 ;;  moveSpeed       2   16[BANK0 ] short 
  6278 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  isScript        1   24[BANK0 ] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6290 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;Total ram usage:        9 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    8
  6297 ;; This function calls:
  6298 ;;		_eusart_putch
  6299 ;;		_load_iRScriptStack
  6300 ;;		_twos_complement_of
  6301 ;; This function is called by:
  6302 ;;		_irobot_rotate
  6303 ;;		_irobot_stop_motion
  6304 ;;		_irobot_move_straight
  6305 ;;		_irobot_move_to_simple
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text19
  6310  0142F8                     __ptext19:
  6311                           	opt stack 0
  6312  0142F8                     _irobot_move:
  6313                           	opt stack 19
  6314                           
  6315                           ;incstack = 0
  6316                           ;irobot_move@isScript stored from wreg
  6317  0142F8  0100               	movlb	0	; () banked
  6318  0142FA  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6319                           
  6320                           ;iRobotSerial.c: 220: moveSpeed = twos_complement_of(moveSpeed);
  6321  0142FC  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6322  014300  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6323  014304  EC5E  F0AE         	call	_twos_complement_of	;wreg free
  6324  014308  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6325  01430C  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6326                           
  6327                           ;iRobotSerial.c: 221: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6328  014310  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6329  014314  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6330  014318  EC5E  F0AE         	call	_twos_complement_of	;wreg free
  6331  01431C  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6332  014320  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6333                           
  6334                           ;iRobotSerial.c: 223: if (isScript) {
  6335  014324  0100               	movlb	0	; () banked
  6336  014326  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6337  014328  0100               	movlb	0	; () banked
  6338  01432A  B4D8               	btfsc	status,2,c
  6339  01432C  D029               	goto	l2139
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;iRobotSerial.c: 224: load_iRScriptStack(5, iR_DRIVE,
  6343                           ;iRobotSerial.c: 225: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6344                           ;iRobotSerial.c: 226: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6345  01432E  0E00               	movlw	0
  6346  014330  0100               	movlb	0	; () banked
  6347  014332  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6348  014334  0E89               	movlw	137
  6349  014336  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  6350  014338  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6351  01433C  0100               	movlb	0	; () banked
  6352  01433E  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  6353  014340  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  6354  014342  69CF               	setf	(??_irobot_move+1)& (0+255),b
  6355  014344  0100               	movlb	0	; () banked
  6356  014346  51CE               	movf	??_irobot_move& (0+255),w,b
  6357  014348  0100               	movlb	0	; () banked
  6358  01434A  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6359  01434C  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6360  01434E  0100               	movlb	0	; () banked
  6361  014350  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6362  014352  0100               	movlb	0	; () banked
  6363  014354  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6364  014356  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6365  014358  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6366  01435C  0100               	movlb	0	; () banked
  6367  01435E  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  6368  014360  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6369  014362  69D1               	setf	(??_irobot_move+3)& (0+255),b
  6370  014364  0100               	movlb	0	; () banked
  6371  014366  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  6372  014368  0100               	movlb	0	; () banked
  6373  01436A  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6374  01436C  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6375  01436E  0100               	movlb	0	; () banked
  6376  014370  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6377  014372  0100               	movlb	0	; () banked
  6378  014374  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6379  014376  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6380  014378  0E05               	movlw	5
  6381  01437A  EC54  F0AA         	call	_load_iRScriptStack
  6382                           
  6383                           ;iRobotSerial.c: 227: }
  6384  01437E  0012               	return	
  6385  014380                     l2139:
  6386                           
  6387                           ;iRobotSerial.c: 228: else{
  6388                           ;iRobotSerial.c: 229: eusart_putch(iR_DRIVE);
  6389  014380  0E89               	movlw	137
  6390  014382  EC7F  F0B2         	call	_eusart_putch
  6391                           
  6392                           ;iRobotSerial.c: 230: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6393  014386  0100               	movlb	0	; () banked
  6394  014388  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6395  01438A  EC7F  F0B2         	call	_eusart_putch
  6396                           
  6397                           ;iRobotSerial.c: 231: eusart_putch(((moveSpeed) & 0xFF));
  6398  01438E  0100               	movlb	0	; () banked
  6399  014390  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6400  014392  EC7F  F0B2         	call	_eusart_putch
  6401                           
  6402                           ;iRobotSerial.c: 232: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6403  014396  0100               	movlb	0	; () banked
  6404  014398  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6405  01439A  EC7F  F0B2         	call	_eusart_putch
  6406                           
  6407                           ;iRobotSerial.c: 233: eusart_putch(((moveTurnRadius) & 0xFF));
  6408  01439E  0100               	movlb	0	; () banked
  6409  0143A0  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6410  0143A2  EC7F  F0B2         	call	_eusart_putch
  6411  0143A6  0012               	return	
  6412  0143A8                     __end_of_irobot_move:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           postinc0	equ	0xFEE
  6421                           wreg	equ	0xFE8
  6422                           postdec1	equ	0xFE5
  6423                           fsr1h	equ	0xFE2
  6424                           fsr1l	equ	0xFE1
  6425                           indf2	equ	0xFDF
  6426                           fsr2h	equ	0xFDA
  6427                           fsr2l	equ	0xFD9
  6428                           status	equ	0xFD8
  6429                           
  6430 ;; *************** function _twos_complement_of *****************
  6431 ;; Defined at:
  6432 ;;		line 166 in file "Library/iRobotSerial.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;  complementVa    2    0[BANK0 ] short 
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  2    0[BANK0 ] unsigned short 
  6439 ;; Registers used:
  6440 ;;		wreg, status,2, status,0
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6446 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;Total ram usage:        2 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    7
  6453 ;; This function calls:
  6454 ;;		Nothing
  6455 ;; This function is called by:
  6456 ;;		_irobot_move
  6457 ;;		_irobot_angle_wait
  6458 ;;		_irobot_distance_wait
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           	psect	text20
  6463  015CBC                     __ptext20:
  6464                           	opt stack 0
  6465  015CBC                     _twos_complement_of:
  6466                           	opt stack 19
  6467                           
  6468                           ;iRobotSerial.c: 167: if (complementValue < 0) {
  6469                           
  6470                           ;incstack = 0
  6471  015CBC  0100               	movlb	0	; () banked
  6472  015CBE  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6473  015CC0  D01A               	goto	l2110
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;iRobotSerial.c: 168: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6477  015CC2  0100               	movlb	0	; () banked
  6478  015CC4  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6479  015CC6  D007               	goto	u9210
  6480  015CC8  0100               	movlb	0	; () banked
  6481  015CCA  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6482  015CCC  E10A               	bnz	l2112
  6483  015CCE  0100               	movlb	0	; () banked
  6484  015CD0  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  6485  015CD2  B0D8               	btfsc	status,0,c
  6486  015CD4  D006               	goto	l2112
  6487  015CD6                     u9210:
  6488                           
  6489                           ; BSR set to: 0
  6490  015CD6  0100               	movlb	0	; () banked
  6491  015CD8  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  6492  015CDA  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6493  015CDC  B0D8               	btfsc	status,0,c
  6494  015CDE  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6495  015CE0  D004               	goto	l2114
  6496  015CE2                     l2112:
  6497                           
  6498                           ; BSR set to: 0
  6499  015CE2  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6500  015CE6  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6501  015CEA                     l2114:
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;iRobotSerial.c: 169: complementValue = ~complementValue;
  6505                           
  6506                           ; BSR set to: 0
  6507  015CEA  0100               	movlb	0	; () banked
  6508  015CEC  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  6509  015CEE  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6510                           
  6511                           ;iRobotSerial.c: 170: complementValue += 1;
  6512  015CF0  0100               	movlb	0	; () banked
  6513  015CF2  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6514  015CF4  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6515  015CF6                     l2110:
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;iRobotSerial.c: 171: }
  6519                           ;iRobotSerial.c: 172: return complementValue;
  6520                           
  6521                           ; BSR set to: 0
  6522  015CF6  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6523  015CFA  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6524  015CFE  0012               	return	
  6525  015D00                     __end_of_twos_complement_of:
  6526                           	opt stack 0
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           postdec1	equ	0xFE5
  6536                           fsr1h	equ	0xFE2
  6537                           fsr1l	equ	0xFE1
  6538                           indf2	equ	0xFDF
  6539                           fsr2h	equ	0xFDA
  6540                           fsr2l	equ	0xFD9
  6541                           status	equ	0xFD8
  6542                           
  6543 ;; *************** function _irobot_song_play *****************
  6544 ;; Defined at:
  6545 ;;		line 273 in file "Library/iRobotSerial.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  songNumber      1    wreg     unsigned char 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      void 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;Total ram usage:        1 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    8
  6566 ;; This function calls:
  6567 ;;		_eusart_putch
  6568 ;; This function is called by:
  6569 ;;		_safeToGo
  6570 ;;		_mode4
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text21
  6575  016484                     __ptext21:
  6576                           	opt stack 0
  6577  016484                     _irobot_song_play:
  6578                           	opt stack 20
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;incstack = 0
  6582                           ;irobot_song_play@songNumber stored from wreg
  6583  016484  0100               	movlb	0	; () banked
  6584  016486  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  6585                           
  6586                           ;iRobotSerial.c: 274: eusart_putch(iR_SONG_PLAY);
  6587  016488  0E8D               	movlw	141
  6588  01648A  EC7F  F0B2         	call	_eusart_putch
  6589                           
  6590                           ;iRobotSerial.c: 275: eusart_putch(songNumber);
  6591  01648E  0100               	movlb	0	; () banked
  6592  016490  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  6593  016492  EC7F  F0B2         	call	_eusart_putch
  6594  016496  0012               	return		;funcret
  6595  016498                     __end_of_irobot_song_play:
  6596                           	opt stack 0
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           postinc0	equ	0xFEE
  6604                           wreg	equ	0xFE8
  6605                           postdec1	equ	0xFE5
  6606                           fsr1h	equ	0xFE2
  6607                           fsr1l	equ	0xFE1
  6608                           indf2	equ	0xFDF
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _printf *****************
  6614 ;; Defined at:
  6615 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6618 ;;		 -> STR_14(21), STR_13(21), STR_12(21), STR_11(21), 
  6619 ;;		 -> STR_10(21), STR_9(3), STR_8(14), STR_7(3), 
  6620 ;;		 -> STR_6(46), STR_5(3), STR_4(46), STR_3(3), 
  6621 ;;		 -> STR_2(60), STR_1(3), 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  tmpval          4    0        struct .
  6624 ;;  cp              3    0        PTR const unsigned char 
  6625 ;;  val             2   36[BANK0 ] unsigned int 
  6626 ;;  ap              2   34[BANK0 ] PTR void [1]
  6627 ;;		 -> ?_printf(2), 
  6628 ;;  len             2    0        unsigned int 
  6629 ;;  c               1   38[BANK0 ] char 
  6630 ;;  flag            1   33[BANK0 ] unsigned char 
  6631 ;;  prec            1   32[BANK0 ] char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  2   21[BANK0 ] int 
  6634 ;; Registers used:
  6635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6641 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;Total ram usage:       18 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:   12
  6648 ;; This function calls:
  6649 ;;		___lwdiv
  6650 ;;		___lwmod
  6651 ;;		_putch
  6652 ;; This function is called by:
  6653 ;;		_findClosestWall
  6654 ;;		_mode1
  6655 ;;		_mode2
  6656 ;;		_main
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text22
  6661  0123A6                     __ptext22:
  6662                           	opt stack 0
  6663  0123A6                     _printf:
  6664                           	opt stack 18
  6665                           
  6666                           ;doprnt.c: 466: va_list ap;
  6667                           ;doprnt.c: 499: signed char c;
  6668                           ;doprnt.c: 506: signed char prec;
  6669                           ;doprnt.c: 508: unsigned char flag;
  6670                           ;doprnt.c: 523: union {
  6671                           ;doprnt.c: 524: unsigned long vd;
  6672                           ;doprnt.c: 525: double integ;
  6673                           ;doprnt.c: 526: } tmpval;
  6674                           ;doprnt.c: 528: unsigned int val;
  6675                           ;doprnt.c: 529: unsigned len;
  6676                           ;doprnt.c: 530: const char * cp;
  6677                           ;doprnt.c: 533: *ap = __va_start();
  6678                           
  6679                           ;incstack = 0
  6680  0123A6  0ED1               	movlw	low (?_printf+2)
  6681  0123A8  0100               	movlb	0	; () banked
  6682  0123AA  6FDC               	movwf	printf@ap& (0+255),b
  6683  0123AC  0E00               	movlw	high (?_printf+2)
  6684  0123AE  0100               	movlb	0	; () banked
  6685  0123B0  6FDD               	movwf	(printf@ap+1)& (0+255),b
  6686                           
  6687                           ;doprnt.c: 536: while(c = *f++) {
  6688  0123B2  D0C9               	goto	u10930
  6689  0123B4                     
  6690                           ; BSR set to: 0
  6691                           ;doprnt.c: 538: if(c != '%')
  6692                           
  6693                           ; BSR set to: 0
  6694  0123B4  0E25               	movlw	37
  6695  0123B6  0100               	movlb	0	; () banked
  6696  0123B8  19E0               	xorwf	printf@c& (0+255),w,b
  6697  0123BA  B4D8               	btfsc	status,2,c
  6698  0123BC  D005               	goto	l2419
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;doprnt.c: 540: {
  6702                           ;doprnt.c: 541: (putch(c) );
  6703  0123BE  0100               	movlb	0	; () banked
  6704  0123C0  51E0               	movf	printf@c& (0+255),w,b
  6705  0123C2  EC71  F0B2         	call	_putch
  6706                           
  6707                           ;doprnt.c: 542: continue;
  6708  0123C6  D0BF               	goto	u10930
  6709  0123C8                     l2419:
  6710                           
  6711                           ;doprnt.c: 543: }
  6712                           ;doprnt.c: 548: flag = 0;
  6713  0123C8  0E00               	movlw	0
  6714  0123CA  0100               	movlb	0	; () banked
  6715  0123CC  6FDB               	movwf	printf@flag& (0+255),b
  6716                           
  6717                           ;doprnt.c: 635: switch(c = *f++) {
  6718  0123CE  D014               	goto	l2420
  6719  0123D0                     
  6720                           ; BSR set to: 0
  6721                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6722                           
  6723                           ; BSR set to: 0
  6724  0123D0  C0DC  FFD9         	movff	printf@ap,fsr2l
  6725  0123D4  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  6726  0123D8  50DF               	movf	indf2,w,c
  6727  0123DA  0100               	movlb	0	; () banked
  6728  0123DC  6FE0               	movwf	printf@c& (0+255),b
  6729                           
  6730                           ; BSR set to: 0
  6731  0123DE  0E02               	movlw	2
  6732  0123E0  0100               	movlb	0	; () banked
  6733  0123E2  27DC               	addwf	printf@ap& (0+255),f,b
  6734  0123E4  0E00               	movlw	0
  6735  0123E6  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  6736  0123E8                     
  6737                           ; BSR set to: 0
  6738                           ;doprnt.c: 809: (putch(c) );
  6739                           
  6740                           ; BSR set to: 0
  6741  0123E8  0100               	movlb	0	; () banked
  6742  0123EA  51E0               	movf	printf@c& (0+255),w,b
  6743  0123EC  EC71  F0B2         	call	_putch
  6744                           
  6745                           ;doprnt.c: 810: continue;
  6746  0123F0  D0AA               	goto	u10930
  6747  0123F2                     
  6748                           ;doprnt.c: 818: flag |= 0x40;
  6749  0123F2  0100               	movlb	0	; () banked
  6750  0123F4  8DDB               	bsf	printf@flag& (0+255),6,b
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;doprnt.c: 822: }
  6754                           
  6755                           ;doprnt.c: 819: break;
  6756  0123F6  D01E               	goto	l2425
  6757  0123F8                     l2420:
  6758                           
  6759                           ; BSR set to: 0
  6760                           
  6761                           ; BSR set to: 0
  6762  0123F8  C0CF  FFF6         	movff	printf@f,tblptrl
  6763  0123FC  C0D0  FFF7         	movff	printf@f+1,tblptrh
  6764  012400  0100               	movlb	0	; () banked
  6765  012402  4BCF               	infsnz	printf@f& (0+255),f,b
  6766  012404  2BD0               	incf	(printf@f+1)& (0+255),f,b
  6767  012406                     	if	0	;tblptru may be non-zero
  6768  012406                     	endif
  6769  012406                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6770  012406  0E00               	movlw	low (__mediumconst shr (0+16))
  6771  012408  6EF8               	movwf	tblptru,c
  6772  01240A                     	endif
  6773  01240A  0008               	tblrd		*
  6774  01240C  CFF5 F0E0          	movff	tablat,printf@c
  6775  012410  0100               	movlb	0	; () banked
  6776  012412  51E0               	movf	printf@c& (0+255),w,b
  6777                           
  6778                           ; Switch size 1, requested type "space"
  6779                           ; Number of cases is 5, Range of values is 0 to 117
  6780                           ; switch strategies available:
  6781                           ; Name         Instructions Cycles
  6782                           ; simple_byte           16     9 (average)
  6783                           ;	Chosen strategy is simple_byte
  6784  012414  0A00               	xorlw	0	; case 0
  6785  012416  B4D8               	btfsc	status,2,c
  6786  012418  0012               	return	
  6787  01241A  0A63               	xorlw	99	; case 99
  6788  01241C  B4D8               	btfsc	status,2,c
  6789  01241E  D7D8               	goto	l2426
  6790  012420  0A07               	xorlw	7	; case 100
  6791  012422  B4D8               	btfsc	status,2,c
  6792  012424  D007               	goto	l2425
  6793  012426  0A0D               	xorlw	13	; case 105
  6794  012428  B4D8               	btfsc	status,2,c
  6795  01242A  D004               	goto	l2425
  6796  01242C  0A1C               	xorlw	28	; case 117
  6797  01242E  B4D8               	btfsc	status,2,c
  6798  012430  D7E0               	goto	l2428
  6799  012432  D7DA               	goto	l2427
  6800  012434                     l2425:
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6804  012434  0100               	movlb	0	; () banked
  6805  012436  BDDB               	btfsc	printf@flag& (0+255),6,b
  6806  012438  D019               	goto	l2429
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;doprnt.c: 1253: {
  6810                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6811  01243A  C0DC  FFD9         	movff	printf@ap,fsr2l
  6812  01243E  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  6813  012442  CFDE F0DE          	movff	postinc2,printf@val
  6814  012446  CFDD F0DF          	movff	postdec2,printf@val+1
  6815                           
  6816                           ; BSR set to: 0
  6817  01244A  0E02               	movlw	2
  6818  01244C  0100               	movlb	0	; () banked
  6819  01244E  27DC               	addwf	printf@ap& (0+255),f,b
  6820  012450  0E00               	movlw	0
  6821  012452  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;doprnt.c: 1261: if((int)val < 0) {
  6825  012454  0100               	movlb	0	; () banked
  6826  012456  AFDF               	btfss	(printf@val+1)& (0+255),7,b
  6827  012458  D016               	goto	l2431
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;doprnt.c: 1262: flag |= 0x03;
  6831  01245A  0E03               	movlw	3
  6832  01245C  0100               	movlb	0	; () banked
  6833  01245E  13DB               	iorwf	printf@flag& (0+255),f,b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;doprnt.c: 1263: val = -val;
  6837  012460  0100               	movlb	0	; () banked
  6838  012462  6DDE               	negf	printf@val& (0+255),b
  6839  012464  1FDF               	comf	(printf@val+1)& (0+255),f,b
  6840  012466  B0D8               	btfsc	status,0,c
  6841  012468  2BDF               	incf	(printf@val+1)& (0+255),f,b
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;doprnt.c: 1264: }
  6845                           ;doprnt.c: 1266: }
  6846  01246A  D00D               	goto	l2431
  6847  01246C                     l2429:
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;doprnt.c: 1268: else
  6851                           ;doprnt.c: 1273: {
  6852                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6853                           
  6854                           ; BSR set to: 0
  6855  01246C  C0DC  FFD9         	movff	printf@ap,fsr2l
  6856  012470  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  6857  012474  CFDE F0DE          	movff	postinc2,printf@val
  6858  012478  CFDD F0DF          	movff	postdec2,printf@val+1
  6859                           
  6860                           ; BSR set to: 0
  6861  01247C  0E02               	movlw	2
  6862  01247E  0100               	movlb	0	; () banked
  6863  012480  27DC               	addwf	printf@ap& (0+255),f,b
  6864  012482  0E00               	movlw	0
  6865  012484  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  6866  012486                     l2431:
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;doprnt.c: 1287: }
  6870                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6871                           
  6872                           ; BSR set to: 0
  6873  012486  0E01               	movlw	1
  6874  012488  0100               	movlb	0	; () banked
  6875  01248A  6FE0               	movwf	printf@c& (0+255),b
  6876  01248C                     l14226:
  6877                           
  6878                           ; BSR set to: 0
  6879  01248C  0E05               	movlw	5
  6880  01248E  0100               	movlb	0	; () banked
  6881  012490  19E0               	xorwf	printf@c& (0+255),w,b
  6882  012492  B4D8               	btfsc	status,2,c
  6883  012494  D019               	goto	u10910
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;doprnt.c: 1306: if(val < dpowers[c])
  6887                           
  6888                           ; BSR set to: 0
  6889                           
  6890                           ; BSR set to: 0
  6891  012496  0100               	movlb	0	; () banked
  6892  012498  51E0               	movf	printf@c& (0+255),w,b
  6893  01249A  0D02               	mullw	2
  6894  01249C  0E51               	movlw	low _dpowers
  6895  01249E  24F3               	addwf	prodl,w,c
  6896  0124A0  6EF6               	movwf	tblptrl,c
  6897  0124A2  0EFD               	movlw	high _dpowers
  6898  0124A4  20F4               	addwfc	prodh,w,c
  6899  0124A6  6EF7               	movwf	tblptrh,c
  6900  0124A8                     	if	1	;There are 3 active tblptr bytes
  6901  0124A8  6AF8               	clrf	tblptru,c
  6902  0124AA  0E00               	movlw	low (__mediumconst shr (0+16))
  6903  0124AC  22F8               	addwfc	tblptru,f,c
  6904  0124AE                     	endif
  6905  0124AE  0009               	tblrd		*+
  6906  0124B0  50F5               	movf	tablat,w,c
  6907  0124B2  0100               	movlb	0	; () banked
  6908  0124B4  5DDE               	subwf	printf@val& (0+255),w,b
  6909  0124B6  0009               	tblrd		*+
  6910  0124B8  50F5               	movf	tablat,w,c
  6911  0124BA  0100               	movlb	0	; () banked
  6912  0124BC  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  6913  0124BE  A0D8               	btfss	status,0,c
  6914  0124C0  D003               	goto	u10910
  6915                           
  6916                           ; BSR set to: 0
  6917                           
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;doprnt.c: 1307: break;
  6922  0124C2  0100               	movlb	0	; () banked
  6923  0124C4  2BE0               	incf	printf@c& (0+255),f,b
  6924  0124C6  D7E2               	goto	l14226
  6925  0124C8                     u10910:
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;doprnt.c: 1422: {
  6929                           ;doprnt.c: 1438: if(flag & 0x03)
  6930                           
  6931                           ; BSR set to: 0
  6932  0124C8  C0DB  F0D9         	movff	printf@flag,??_printf
  6933  0124CC  0E03               	movlw	3
  6934  0124CE  0100               	movlb	0	; () banked
  6935  0124D0  17D9               	andwf	??_printf& (0+255),f,b
  6936  0124D2  B4D8               	btfsc	status,2,c
  6937  0124D4  D003               	goto	l2435
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;doprnt.c: 1439: (putch('-') );
  6941  0124D6  0E2D               	movlw	45
  6942  0124D8  EC71  F0B2         	call	_putch
  6943  0124DC                     l2435:
  6944                           
  6945                           ;doprnt.c: 1469: }
  6946                           ;doprnt.c: 1472: prec = c;
  6947  0124DC  C0E0  F0DA         	movff	printf@c,printf@prec
  6948                           
  6949                           ;doprnt.c: 1474: while(prec--) {
  6950  0124E0  D02C               	goto	l2436
  6951  0124E2                     
  6952                           ;doprnt.c: 1478: {
  6953                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6954  0124E2  0100               	movlb	0	; () banked
  6955  0124E4  51DA               	movf	printf@prec& (0+255),w,b
  6956  0124E6  0D02               	mullw	2
  6957  0124E8  0E51               	movlw	low _dpowers
  6958  0124EA  24F3               	addwf	prodl,w,c
  6959  0124EC  6EF6               	movwf	tblptrl,c
  6960  0124EE  0EFD               	movlw	high _dpowers
  6961  0124F0  20F4               	addwfc	prodh,w,c
  6962  0124F2  6EF7               	movwf	tblptrh,c
  6963  0124F4                     	if	1	;There are 3 active tblptr bytes
  6964  0124F4  6AF8               	clrf	tblptru,c
  6965  0124F6  0E00               	movlw	low (__mediumconst shr (0+16))
  6966  0124F8  22F8               	addwfc	tblptru,f,c
  6967  0124FA                     	endif
  6968  0124FA  0009               	tblrd		*+
  6969  0124FC  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  6970  012500  000A               	tblrd		*-
  6971  012502  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  6972  012506  C0DE  F0BA         	movff	printf@val,___lwdiv@dividend
  6973  01250A  C0DF  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  6974  01250E  EC51  F0A8         	call	___lwdiv	;wreg free
  6975  012512  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  6976  012516  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  6977  01251A  0E00               	movlw	0
  6978  01251C  0100               	movlb	0	; () banked
  6979  01251E  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  6980  012520  0E0A               	movlw	10
  6981  012522  6FC3               	movwf	___lwmod@divisor& (0+255),b
  6982  012524  ECBC  F0AB         	call	___lwmod	;wreg free
  6983  012528  0100               	movlb	0	; () banked
  6984  01252A  51C1               	movf	?___lwmod& (0+255),w,b
  6985  01252C  0F30               	addlw	48
  6986  01252E  0100               	movlb	0	; () banked
  6987  012530  6FE0               	movwf	printf@c& (0+255),b
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;doprnt.c: 1523: }
  6991                           ;doprnt.c: 1524: (putch(c) );
  6992  012532  0100               	movlb	0	; () banked
  6993  012534  51E0               	movf	printf@c& (0+255),w,b
  6994  012536  EC71  F0B2         	call	_putch
  6995  01253A                     l2436:
  6996  01253A  0100               	movlb	0	; () banked
  6997  01253C  07DA               	decf	printf@prec& (0+255),f,b
  6998  01253E  0100               	movlb	0	; () banked
  6999  012540  29DA               	incf	printf@prec& (0+255),w,b
  7000  012542  A4D8               	btfss	status,2,c
  7001  012544  D7CE               	goto	l2437
  7002  012546                     u10930:
  7003                           
  7004                           ; BSR set to: 0
  7005                           
  7006                           ; BSR set to: 0
  7007  012546  C0CF  FFF6         	movff	printf@f,tblptrl
  7008  01254A  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7009  01254E  0100               	movlb	0	; () banked
  7010  012550  4BCF               	infsnz	printf@f& (0+255),f,b
  7011  012552  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7012  012554                     	if	0	;tblptru may be non-zero
  7013  012554                     	endif
  7014  012554                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7015  012554  0E00               	movlw	low (__mediumconst shr (0+16))
  7016  012556  6EF8               	movwf	tblptru,c
  7017  012558                     	endif
  7018  012558  0008               	tblrd		*
  7019  01255A  CFF5 F0E0          	movff	tablat,printf@c
  7020  01255E  0100               	movlb	0	; () banked
  7021  012560  51E0               	movf	printf@c& (0+255),w,b
  7022  012562  B4D8               	btfsc	status,2,c
  7023  012564  0012               	return	
  7024  012566  D726               	goto	l2418
  7025  012568                     __end_of_printf:
  7026                           	opt stack 0
  7027                           tblptru	equ	0xFF8
  7028                           tblptrh	equ	0xFF7
  7029                           tblptrl	equ	0xFF6
  7030                           tablat	equ	0xFF5
  7031                           prodh	equ	0xFF4
  7032                           prodl	equ	0xFF3
  7033                           postinc0	equ	0xFEE
  7034                           wreg	equ	0xFE8
  7035                           postdec1	equ	0xFE5
  7036                           fsr1h	equ	0xFE2
  7037                           fsr1l	equ	0xFE1
  7038                           indf2	equ	0xFDF
  7039                           postinc2	equ	0xFDE
  7040                           postdec2	equ	0xFDD
  7041                           fsr2h	equ	0xFDA
  7042                           fsr2l	equ	0xFD9
  7043                           status	equ	0xFD8
  7044                           
  7045 ;; *************** function _putch *****************
  7046 ;; Defined at:
  7047 ;;		line 454 in file "Library/Console.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  c               1    wreg     unsigned char 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  c               1   20[BANK0 ] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      void 
  7054 ;; Registers used:
  7055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;Total ram usage:        1 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:   11
  7068 ;; This function calls:
  7069 ;;		_Console_PrintChar
  7070 ;; This function is called by:
  7071 ;;		_printf
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text23
  7076  0164E2                     __ptext23:
  7077                           	opt stack 0
  7078  0164E2                     _putch:
  7079                           	opt stack 18
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;incstack = 0
  7083                           ;putch@c stored from wreg
  7084  0164E2  0100               	movlb	0	; () banked
  7085  0164E4  6FCE               	movwf	putch@c& (0+255),b
  7086                           
  7087                           ;Console.c: 456: Console_PrintChar(c);
  7088  0164E6  0100               	movlb	0	; () banked
  7089  0164E8  51CE               	movf	putch@c& (0+255),w,b
  7090  0164EA  EC94  F093         	call	_Console_PrintChar
  7091  0164EE  0012               	return		;funcret
  7092  0164F0                     __end_of_putch:
  7093                           	opt stack 0
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           postinc0	equ	0xFEE
  7101                           wreg	equ	0xFE8
  7102                           postdec1	equ	0xFE5
  7103                           fsr1h	equ	0xFE2
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           fsr2h	equ	0xFDA
  7109                           fsr2l	equ	0xFD9
  7110                           status	equ	0xFD8
  7111                           
  7112 ;; *************** function _Console_PrintChar *****************
  7113 ;; Defined at:
  7114 ;;		line 322 in file "Library/Console.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  pInput          1    wreg     unsigned char 
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;  pInput          1   19[BANK0 ] unsigned char 
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      void 
  7121 ;; Registers used:
  7122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;Total ram usage:        4 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:   10
  7135 ;; This function calls:
  7136 ;;		_Console_Backspace
  7137 ;;		_Console_FormFeed
  7138 ;;		_Console_IncrementCursor
  7139 ;;		_Console_NewLine
  7140 ;;		_Console_ResetCursor
  7141 ;;		_Console_Tab
  7142 ;; This function is called by:
  7143 ;;		_putch
  7144 ;;		_Console_PrintString
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text24
  7149  012728                     __ptext24:
  7150                           	opt stack 0
  7151  012728                     _Console_PrintChar:
  7152                           	opt stack 18
  7153                           
  7154                           ;incstack = 0
  7155                           ;Console_PrintChar@pInput stored from wreg
  7156  012728  0100               	movlb	0	; () banked
  7157  01272A  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7158                           
  7159                           ;Console.c: 324: switch(pInput)
  7160  01272C  D0B1               	goto	l1036
  7161  01272E                     
  7162                           ;Console.c: 327: case '\n':
  7163                           ;Console.c: 328: Console_NewLine();
  7164  01272E  ECC8  F0A4         	call	_Console_NewLine	;wreg free
  7165                           
  7166                           ;Console.c: 329: return;
  7167  012732  0012               	return	
  7168  012734                     
  7169                           ;Console.c: 331: Console_Backspace();
  7170  012734  ECED  F0AB         	call	_Console_Backspace	;wreg free
  7171                           
  7172                           ;Console.c: 332: return;
  7173  012738  0012               	return	
  7174  01273A                     
  7175                           ;Console.c: 334: Console_FormFeed();
  7176  01273A  ECFB  F0A5         	call	_Console_FormFeed	;wreg free
  7177                           
  7178                           ;Console.c: 335: return;
  7179  01273E  0012               	return	
  7180  012740                     
  7181                           ;Console.c: 337: Console_Tab();
  7182  012740  ECE6  F09E         	call	_Console_Tab	;wreg free
  7183                           
  7184                           ;Console.c: 338: return;
  7185  012744  0012               	return	
  7186  012746                     
  7187                           ;Console.c: 340: Console_IncrementCursor();
  7188  012746  EC26  F0AB         	call	_Console_IncrementCursor	;wreg free
  7189                           
  7190                           ;Console.c: 341: return;
  7191  01274A  0012               	return	
  7192  01274C                     
  7193                           ;Console.c: 343: Console_ResetCursor();
  7194  01274C  EC28  F0B1         	call	_Console_ResetCursor	;wreg free
  7195                           
  7196                           ;Console.c: 344: return;
  7197  012750  0012               	return	
  7198  012752                     
  7199                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7200                           
  7201                           ;Console.c: 349: default:
  7202  012752  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7203  012756  0E7F               	movlw	127
  7204  012758  0100               	movlb	0	; () banked
  7205  01275A  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7206  01275C  0100               	movlb	0	; () banked
  7207  01275E  5190               	movf	_lBufferY& (0+255),w,b
  7208  012760  0D14               	mullw	20
  7209  012762  0EAA               	movlw	low _lBuffer
  7210  012764  0100               	movlb	0	; () banked
  7211  012766  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7212  012768  0E04               	movlw	high _lBuffer
  7213  01276A  0100               	movlb	0	; () banked
  7214  01276C  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7215  01276E  50F3               	movf	prodl,w,c
  7216  012770  0100               	movlb	0	; () banked
  7217  012772  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7218  012774  50F4               	movf	prodh,w,c
  7219  012776  0100               	movlb	0	; () banked
  7220  012778  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7221  01277A  0100               	movlb	0	; () banked
  7222  01277C  5191               	movf	_lBufferX& (0+255),w,b
  7223  01277E  0D01               	mullw	1
  7224  012780  50F3               	movf	prodl,w,c
  7225  012782  0100               	movlb	0	; () banked
  7226  012784  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7227  012786  6ED9               	movwf	fsr2l,c
  7228  012788  50F4               	movf	prodh,w,c
  7229  01278A  0100               	movlb	0	; () banked
  7230  01278C  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7231  01278E  6EDA               	movwf	fsr2h,c
  7232  012790  50DF               	movf	indf2,w,c
  7233  012792  0B7F               	andlw	127
  7234  012794  0100               	movlb	0	; () banked
  7235  012796  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7236  012798  B4D8               	btfsc	status,2,c
  7237  01279A  D02E               	goto	l1047
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;Console.c: 351: {
  7241                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7242  01279C  0E01               	movlw	1
  7243  01279E  0100               	movlb	0	; () banked
  7244  0127A0  6FFF               	movwf	_change& (0+255),b
  7245                           
  7246                           ; BSR set to: 0
  7247  0127A2  0100               	movlb	0	; () banked
  7248  0127A4  5190               	movf	_lBufferY& (0+255),w,b
  7249  0127A6  0D14               	mullw	20
  7250  0127A8  0EAA               	movlw	low _lBuffer
  7251  0127AA  0100               	movlb	0	; () banked
  7252  0127AC  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7253  0127AE  0E04               	movlw	high _lBuffer
  7254  0127B0  0100               	movlb	0	; () banked
  7255  0127B2  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7256  0127B4  50F3               	movf	prodl,w,c
  7257  0127B6  0100               	movlb	0	; () banked
  7258  0127B8  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7259  0127BA  50F4               	movf	prodh,w,c
  7260  0127BC  0100               	movlb	0	; () banked
  7261  0127BE  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7262  0127C0  0100               	movlb	0	; () banked
  7263  0127C2  5191               	movf	_lBufferX& (0+255),w,b
  7264  0127C4  0D01               	mullw	1
  7265  0127C6  50F3               	movf	prodl,w,c
  7266  0127C8  0100               	movlb	0	; () banked
  7267  0127CA  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7268  0127CC  6ED9               	movwf	fsr2l,c
  7269  0127CE  50F4               	movf	prodh,w,c
  7270  0127D0  0100               	movlb	0	; () banked
  7271  0127D2  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7272  0127D4  6EDA               	movwf	fsr2h,c
  7273  0127D6  0100               	movlb	0	; () banked
  7274  0127D8  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7275  0127DA  0980               	iorlw	128
  7276  0127DC  6EDF               	movwf	indf2,c
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7280  0127DE  0100               	movlb	0	; () banked
  7281  0127E0  5190               	movf	_lBufferY& (0+255),w,b
  7282  0127E2  0D02               	mullw	2
  7283  0127E4  0E00               	movlw	low _lCBuffer
  7284  0127E6  24F3               	addwf	prodl,w,c
  7285  0127E8  6ED9               	movwf	fsr2l,c
  7286  0127EA  0E03               	movlw	high _lCBuffer
  7287  0127EC  20F4               	addwfc	prodh,w,c
  7288  0127EE  6EDA               	movwf	fsr2h,c
  7289  0127F0  C0FD  FFDE         	movff	_gForecolour,postinc2
  7290  0127F4  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7291  0127F8                     l1047:
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;Console.c: 354: }
  7295                           ;Console.c: 368: if(Console_IncrementCursor())
  7296                           
  7297                           ; BSR set to: 0
  7298  0127F8  EC26  F0AB         	call	_Console_IncrementCursor	;wreg free
  7299  0127FC  0900               	iorlw	0
  7300  0127FE  B4D8               	btfsc	status,2,c
  7301  012800  0012               	return	
  7302                           
  7303                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7304  012802  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7305  012806  0E7F               	movlw	127
  7306  012808  0100               	movlb	0	; () banked
  7307  01280A  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7308  01280C  0100               	movlb	0	; () banked
  7309  01280E  5190               	movf	_lBufferY& (0+255),w,b
  7310  012810  0D14               	mullw	20
  7311  012812  0EAA               	movlw	low _lBuffer
  7312  012814  0100               	movlb	0	; () banked
  7313  012816  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7314  012818  0E04               	movlw	high _lBuffer
  7315  01281A  0100               	movlb	0	; () banked
  7316  01281C  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7317  01281E  50F3               	movf	prodl,w,c
  7318  012820  0100               	movlb	0	; () banked
  7319  012822  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7320  012824  50F4               	movf	prodh,w,c
  7321  012826  0100               	movlb	0	; () banked
  7322  012828  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7323  01282A  0100               	movlb	0	; () banked
  7324  01282C  5191               	movf	_lBufferX& (0+255),w,b
  7325  01282E  0D01               	mullw	1
  7326  012830  50F3               	movf	prodl,w,c
  7327  012832  0100               	movlb	0	; () banked
  7328  012834  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7329  012836  6ED9               	movwf	fsr2l,c
  7330  012838  50F4               	movf	prodh,w,c
  7331  01283A  0100               	movlb	0	; () banked
  7332  01283C  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7333  01283E  6EDA               	movwf	fsr2h,c
  7334  012840  50DF               	movf	indf2,w,c
  7335  012842  0B7F               	andlw	127
  7336  012844  0100               	movlb	0	; () banked
  7337  012846  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7338  012848  B4D8               	btfsc	status,2,c
  7339  01284A  0012               	return	
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7343  01284C  0E01               	movlw	1
  7344  01284E  0100               	movlb	0	; () banked
  7345  012850  6FFF               	movwf	_change& (0+255),b
  7346                           
  7347                           ; BSR set to: 0
  7348  012852  0100               	movlb	0	; () banked
  7349  012854  5190               	movf	_lBufferY& (0+255),w,b
  7350  012856  0D14               	mullw	20
  7351  012858  0EAA               	movlw	low _lBuffer
  7352  01285A  0100               	movlb	0	; () banked
  7353  01285C  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7354  01285E  0E04               	movlw	high _lBuffer
  7355  012860  0100               	movlb	0	; () banked
  7356  012862  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7357  012864  50F3               	movf	prodl,w,c
  7358  012866  0100               	movlb	0	; () banked
  7359  012868  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7360  01286A  50F4               	movf	prodh,w,c
  7361  01286C  0100               	movlb	0	; () banked
  7362  01286E  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7363  012870  0100               	movlb	0	; () banked
  7364  012872  5191               	movf	_lBufferX& (0+255),w,b
  7365  012874  0D01               	mullw	1
  7366  012876  50F3               	movf	prodl,w,c
  7367  012878  0100               	movlb	0	; () banked
  7368  01287A  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7369  01287C  6ED9               	movwf	fsr2l,c
  7370  01287E  50F4               	movf	prodh,w,c
  7371  012880  0100               	movlb	0	; () banked
  7372  012882  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7373  012884  6EDA               	movwf	fsr2h,c
  7374  012886  0100               	movlb	0	; () banked
  7375  012888  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7376  01288A  0980               	iorlw	128
  7377  01288C  6EDF               	movwf	indf2,c
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;Console.c: 372: };
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;Console.c: 371: return;
  7384                           
  7385                           ; BSR set to: 0
  7386                           
  7387                           ; BSR set to: 0
  7388  01288E  0012               	return	
  7389  012890                     l1036:
  7390                           
  7391                           ; BSR set to: 0
  7392  012890  0100               	movlb	0	; () banked
  7393  012892  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7394                           
  7395                           ; Switch size 1, requested type "space"
  7396                           ; Number of cases is 8, Range of values is 7 to 35
  7397                           ; switch strategies available:
  7398                           ; Name         Instructions Cycles
  7399                           ; simple_byte           25    13 (average)
  7400                           ;	Chosen strategy is simple_byte
  7401  012894  0A07               	xorlw	7	; case 7
  7402  012896  B4D8               	btfsc	status,2,c
  7403  012898  D756               	goto	l1043
  7404  01289A  0A0F               	xorlw	15	; case 8
  7405  01289C  B4D8               	btfsc	status,2,c
  7406  01289E  D74A               	goto	l1040
  7407  0128A0  0A01               	xorlw	1	; case 9
  7408  0128A2  B4D8               	btfsc	status,2,c
  7409  0128A4  D74D               	goto	l1042
  7410  0128A6  0A03               	xorlw	3	; case 10
  7411  0128A8  B4D8               	btfsc	status,2,c
  7412  0128AA  D741               	goto	l1037
  7413  0128AC  0A06               	xorlw	6	; case 12
  7414  0128AE  B4D8               	btfsc	status,2,c
  7415  0128B0  D744               	goto	l1041
  7416  0128B2  0A01               	xorlw	1	; case 13
  7417  0128B4  B4D8               	btfsc	status,2,c
  7418  0128B6  D73B               	goto	l1037
  7419  0128B8  0A2D               	xorlw	45	; case 32
  7420  0128BA  B4D8               	btfsc	status,2,c
  7421  0128BC  D74A               	goto	l1045
  7422  0128BE  0A03               	xorlw	3	; case 35
  7423  0128C0  B4D8               	btfsc	status,2,c
  7424  0128C2  D744               	goto	l1044
  7425  0128C4  D746               	goto	l1045
  7426  0128C6                     __end_of_Console_PrintChar:
  7427                           	opt stack 0
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           postinc0	equ	0xFEE
  7435                           wreg	equ	0xFE8
  7436                           postdec1	equ	0xFE5
  7437                           fsr1h	equ	0xFE2
  7438                           fsr1l	equ	0xFE1
  7439                           indf2	equ	0xFDF
  7440                           postinc2	equ	0xFDE
  7441                           postdec2	equ	0xFDD
  7442                           fsr2h	equ	0xFDA
  7443                           fsr2l	equ	0xFD9
  7444                           status	equ	0xFD8
  7445                           
  7446 ;; *************** function _Console_Tab *****************
  7447 ;; Defined at:
  7448 ;;		line 260 in file "Library/Console.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;		None
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  c               1   15[BANK0 ] unsigned char 
  7453 ;;  i               1   14[BANK0 ] unsigned char 
  7454 ;;  t               1   13[BANK0 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;Total ram usage:        8 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    9
  7471 ;; This function calls:
  7472 ;;		_Console_ClearCursor
  7473 ;;		_Console_IncrementCursor
  7474 ;;		___awdiv
  7475 ;; This function is called by:
  7476 ;;		_Console_PrintChar
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text25
  7481  013DCC                     __ptext25:
  7482                           	opt stack 0
  7483  013DCC                     _Console_Tab:
  7484                           	opt stack 18
  7485                           
  7486                           ;Console.c: 262: UINT8 i = 0;
  7487                           
  7488                           ;incstack = 0
  7489  013DCC  0E00               	movlw	0
  7490  013DCE  0100               	movlb	0	; () banked
  7491  013DD0  6FC8               	movwf	Console_Tab@i& (0+255),b
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7495  013DD2  0EFA               	movlw	250
  7496  013DD4  2447               	addwf	_gCursor,w,c
  7497  013DD6  0100               	movlb	0	; () banked
  7498  013DD8  6FBA               	movwf	___awdiv@dividend& (0+255),b
  7499  013DDA  0EFF               	movlw	255
  7500  013DDC  2048               	addwfc	_gCursor+1,w,c
  7501  013DDE  0100               	movlb	0	; () banked
  7502  013DE0  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  7503  013DE2  0E00               	movlw	0
  7504  013DE4  0100               	movlb	0	; () banked
  7505  013DE6  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7506  013DE8  0E06               	movlw	6
  7507  013DEA  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7508  013DEC  EC07  F0A0         	call	___awdiv	;wreg free
  7509  013DF0  0100               	movlb	0	; () banked
  7510  013DF2  51BA               	movf	?___awdiv& (0+255),w,b
  7511  013DF4  0100               	movlb	0	; () banked
  7512  013DF6  6FC9               	movwf	Console_Tab@c& (0+255),b
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;Console.c: 264: UINT8 t = c/4;
  7516  013DF8  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  7517  013DFC  0100               	movlb	0	; () banked
  7518  013DFE  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  7519  013E00  0E00               	movlw	0
  7520  013E02  0100               	movlb	0	; () banked
  7521  013E04  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7522  013E06  0E04               	movlw	4
  7523  013E08  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7524  013E0A  EC07  F0A0         	call	___awdiv	;wreg free
  7525  013E0E  0100               	movlb	0	; () banked
  7526  013E10  51BA               	movf	?___awdiv& (0+255),w,b
  7527  013E12  0100               	movlb	0	; () banked
  7528  013E14  6FC7               	movwf	Console_Tab@t& (0+255),b
  7529                           
  7530                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7531  013E16  0E00               	movlw	0
  7532  013E18  0100               	movlb	0	; () banked
  7533  013E1A  6FC8               	movwf	Console_Tab@i& (0+255),b
  7534  013E1C  D006               	goto	l1009
  7535  013E1E                     
  7536                           ; BSR set to: 0
  7537                           ;Console.c: 266: {
  7538                           ;Console.c: 267: Console_ClearCursor();
  7539                           
  7540                           ; BSR set to: 0
  7541  013E1E  ECA1  F0AE         	call	_Console_ClearCursor	;wreg free
  7542                           
  7543                           ;Console.c: 268: Console_IncrementCursor();
  7544  013E22  EC26  F0AB         	call	_Console_IncrementCursor	;wreg free
  7545  013E26  0100               	movlb	0	; () banked
  7546  013E28  2BC8               	incf	Console_Tab@i& (0+255),f,b
  7547  013E2A                     l1009:
  7548                           
  7549                           ; BSR set to: 0
  7550                           
  7551                           ; BSR set to: 0
  7552  013E2A  0100               	movlb	0	; () banked
  7553  013E2C  51C7               	movf	Console_Tab@t& (0+255),w,b
  7554  013E2E  0D04               	mullw	4
  7555  013E30  1EF3               	comf	prodl,f,c
  7556  013E32  1EF4               	comf	prodh,f,c
  7557  013E34  4AF3               	infsnz	prodl,f,c
  7558  013E36  2AF4               	incf	prodh,f,c
  7559  013E38  0100               	movlb	0	; () banked
  7560  013E3A  51C9               	movf	Console_Tab@c& (0+255),w,b
  7561  013E3C  0100               	movlb	0	; () banked
  7562  013E3E  6FC2               	movwf	??_Console_Tab& (0+255),b
  7563  013E40  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  7564  013E42  50F3               	movf	prodl,w,c
  7565  013E44  0100               	movlb	0	; () banked
  7566  013E46  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7567  013E48  50F4               	movf	prodh,w,c
  7568  013E4A  0100               	movlb	0	; () banked
  7569  013E4C  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7570  013E4E  0100               	movlb	0	; () banked
  7571  013E50  1FC2               	comf	??_Console_Tab& (0+255),f,b
  7572  013E52  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  7573  013E54  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  7574  013E56  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  7575  013E58  0E04               	movlw	4
  7576  013E5A  0100               	movlb	0	; () banked
  7577  013E5C  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7578  013E5E  0E00               	movlw	0
  7579  013E60  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7580  013E62  0100               	movlb	0	; () banked
  7581  013E64  51C8               	movf	Console_Tab@i& (0+255),w,b
  7582  013E66  0100               	movlb	0	; () banked
  7583  013E68  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  7584  013E6A  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  7585  013E6C  0100               	movlb	0	; () banked
  7586  013E6E  51C2               	movf	??_Console_Tab& (0+255),w,b
  7587  013E70  0100               	movlb	0	; () banked
  7588  013E72  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7589  013E74  0100               	movlb	0	; () banked
  7590  013E76  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  7591  013E78  0A80               	xorlw	128
  7592  013E7A  0100               	movlb	0	; () banked
  7593  013E7C  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  7594  013E7E  0100               	movlb	0	; () banked
  7595  013E80  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  7596  013E82  0A80               	xorlw	128
  7597  013E84  0100               	movlb	0	; () banked
  7598  013E86  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7599  013E88  B0D8               	btfsc	status,0,c
  7600  013E8A  0012               	return	
  7601  013E8C  D7C8               	goto	l1010
  7602  013E8E                     __end_of_Console_Tab:
  7603                           	opt stack 0
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           postinc0	equ	0xFEE
  7611                           wreg	equ	0xFE8
  7612                           postdec1	equ	0xFE5
  7613                           fsr1h	equ	0xFE2
  7614                           fsr1l	equ	0xFE1
  7615                           indf2	equ	0xFDF
  7616                           postinc2	equ	0xFDE
  7617                           postdec2	equ	0xFDD
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function ___awdiv *****************
  7623 ;; Defined at:
  7624 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;  dividend        2    0[BANK0 ] int 
  7627 ;;  divisor         2    2[BANK0 ] int 
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  quotient        2    6[BANK0 ] int 
  7630 ;;  sign            1    5[BANK0 ] unsigned char 
  7631 ;;  counter         1    4[BANK0 ] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  2    0[BANK0 ] int 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7641 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;Total ram usage:        8 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    7
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_Console_Tab
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text26
  7656  01400E                     __ptext26:
  7657                           	opt stack 0
  7658  01400E                     ___awdiv:
  7659                           	opt stack 19
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;incstack = 0
  7663  01400E  0E00               	movlw	0
  7664  014010  0100               	movlb	0	; () banked
  7665  014012  6FBF               	movwf	___awdiv@sign& (0+255),b
  7666                           
  7667                           ; BSR set to: 0
  7668  014014  0100               	movlb	0	; () banked
  7669  014016  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7670  014018  D008               	goto	l2608
  7671                           
  7672                           ; BSR set to: 0
  7673  01401A  0100               	movlb	0	; () banked
  7674  01401C  6DBC               	negf	___awdiv@divisor& (0+255),b
  7675  01401E  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7676  014020  B0D8               	btfsc	status,0,c
  7677  014022  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7678                           
  7679                           ; BSR set to: 0
  7680  014024  0E01               	movlw	1
  7681  014026  0100               	movlb	0	; () banked
  7682  014028  6FBF               	movwf	___awdiv@sign& (0+255),b
  7683  01402A                     l2608:
  7684                           
  7685                           ; BSR set to: 0
  7686                           
  7687                           ; BSR set to: 0
  7688  01402A  0100               	movlb	0	; () banked
  7689  01402C  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7690  01402E  D008               	goto	l2609
  7691                           
  7692                           ; BSR set to: 0
  7693  014030  0100               	movlb	0	; () banked
  7694  014032  6DBA               	negf	___awdiv@dividend& (0+255),b
  7695  014034  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7696  014036  B0D8               	btfsc	status,0,c
  7697  014038  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7698                           
  7699                           ; BSR set to: 0
  7700  01403A  0E01               	movlw	1
  7701  01403C  0100               	movlb	0	; () banked
  7702  01403E  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  7703  014040                     l2609:
  7704                           
  7705                           ; BSR set to: 0
  7706                           
  7707                           ; BSR set to: 0
  7708  014040  0E00               	movlw	0
  7709  014042  0100               	movlb	0	; () banked
  7710  014044  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  7711  014046  0E00               	movlw	0
  7712  014048  6FC0               	movwf	___awdiv@quotient& (0+255),b
  7713                           
  7714                           ; BSR set to: 0
  7715  01404A  0100               	movlb	0	; () banked
  7716  01404C  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7717  01404E  0100               	movlb	0	; () banked
  7718  014050  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7719  014052  B4D8               	btfsc	status,2,c
  7720  014054  D02C               	goto	l2616
  7721                           
  7722                           ; BSR set to: 0
  7723  014056  0E01               	movlw	1
  7724  014058  0100               	movlb	0	; () banked
  7725  01405A  6FBE               	movwf	___awdiv@counter& (0+255),b
  7726  01405C  D006               	goto	l2611
  7727  01405E                     
  7728                           ; BSR set to: 0
  7729                           
  7730                           ; BSR set to: 0
  7731  01405E  0100               	movlb	0	; () banked
  7732  014060  90D8               	bcf	status,0,c
  7733  014062  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  7734  014064  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7735  014066  0100               	movlb	0	; () banked
  7736  014068  2BBE               	incf	___awdiv@counter& (0+255),f,b
  7737  01406A                     l2611:
  7738                           
  7739                           ; BSR set to: 0
  7740                           
  7741                           ; BSR set to: 0
  7742  01406A  0100               	movlb	0	; () banked
  7743  01406C  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7744  01406E  D7F7               	goto	l2612
  7745  014070                     u9030:
  7746                           
  7747                           ; BSR set to: 0
  7748                           
  7749                           ; BSR set to: 0
  7750                           
  7751                           ; BSR set to: 0
  7752  014070  0100               	movlb	0	; () banked
  7753  014072  90D8               	bcf	status,0,c
  7754  014074  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  7755  014076  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7756                           
  7757                           ; BSR set to: 0
  7758  014078  0100               	movlb	0	; () banked
  7759  01407A  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7760  01407C  0100               	movlb	0	; () banked
  7761  01407E  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  7762  014080  0100               	movlb	0	; () banked
  7763  014082  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7764  014084  0100               	movlb	0	; () banked
  7765  014086  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7766  014088  A0D8               	btfss	status,0,c
  7767  01408A  D00A               	goto	l2615
  7768                           
  7769                           ; BSR set to: 0
  7770  01408C  0100               	movlb	0	; () banked
  7771  01408E  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7772  014090  0100               	movlb	0	; () banked
  7773  014092  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  7774  014094  0100               	movlb	0	; () banked
  7775  014096  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7776  014098  0100               	movlb	0	; () banked
  7777  01409A  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7778                           
  7779                           ; BSR set to: 0
  7780  01409C  0100               	movlb	0	; () banked
  7781  01409E  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  7782  0140A0                     l2615:
  7783                           
  7784                           ; BSR set to: 0
  7785                           
  7786                           ; BSR set to: 0
  7787  0140A0  0100               	movlb	0	; () banked
  7788  0140A2  90D8               	bcf	status,0,c
  7789  0140A4  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7790  0140A6  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  7791                           
  7792                           ; BSR set to: 0
  7793  0140A8  0100               	movlb	0	; () banked
  7794  0140AA  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  7795  0140AC  D7E1               	goto	u9030
  7796  0140AE                     l2616:
  7797                           
  7798                           ; BSR set to: 0
  7799                           
  7800                           ; BSR set to: 0
  7801                           
  7802                           ; BSR set to: 0
  7803  0140AE  0100               	movlb	0	; () banked
  7804  0140B0  51BF               	movf	___awdiv@sign& (0+255),w,b
  7805  0140B2  0100               	movlb	0	; () banked
  7806  0140B4  B4D8               	btfsc	status,2,c
  7807  0140B6  D005               	goto	l2617
  7808                           
  7809                           ; BSR set to: 0
  7810  0140B8  0100               	movlb	0	; () banked
  7811  0140BA  6DC0               	negf	___awdiv@quotient& (0+255),b
  7812  0140BC  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7813  0140BE  B0D8               	btfsc	status,0,c
  7814  0140C0  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7815  0140C2                     l2617:
  7816                           
  7817                           ; BSR set to: 0
  7818                           
  7819                           ; BSR set to: 0
  7820  0140C2  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  7821  0140C6  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  7822  0140CA  0012               	return	
  7823  0140CC                     __end_of___awdiv:
  7824                           	opt stack 0
  7825                           tblptru	equ	0xFF8
  7826                           tblptrh	equ	0xFF7
  7827                           tblptrl	equ	0xFF6
  7828                           tablat	equ	0xFF5
  7829                           prodh	equ	0xFF4
  7830                           prodl	equ	0xFF3
  7831                           postinc0	equ	0xFEE
  7832                           wreg	equ	0xFE8
  7833                           postdec1	equ	0xFE5
  7834                           fsr1h	equ	0xFE2
  7835                           fsr1l	equ	0xFE1
  7836                           indf2	equ	0xFDF
  7837                           postinc2	equ	0xFDE
  7838                           postdec2	equ	0xFDD
  7839                           fsr2h	equ	0xFDA
  7840                           fsr2l	equ	0xFD9
  7841                           status	equ	0xFD8
  7842                           
  7843 ;; *************** function _Console_IncrementCursor *****************
  7844 ;; Defined at:
  7845 ;;		line 243 in file "Library/Console.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;		None
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;		None
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  1    wreg      unsigned char 
  7852 ;; Registers used:
  7853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;Total ram usage:        2 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    8
  7866 ;; This function calls:
  7867 ;;		_Console_FormFeed
  7868 ;;		_Console_NewLine
  7869 ;; This function is called by:
  7870 ;;		_Console_Tab
  7871 ;;		_Console_PrintChar
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text27
  7876  01564C                     __ptext27:
  7877                           	opt stack 0
  7878  01564C                     _Console_IncrementCursor:
  7879                           	opt stack 18
  7880                           
  7881                           ;Console.c: 246: lBufferX += 1;
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;incstack = 0
  7885  01564C  0100               	movlb	0	; () banked
  7886  01564E  2B91               	incf	_lBufferX& (0+255),f,b
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;Console.c: 248: gCursor.x += 6;
  7890  015650  0E06               	movlw	6
  7891  015652  2647               	addwf	_gCursor,f,c
  7892  015654  0E00               	movlw	0
  7893  015656  2248               	addwfc	_gCursor+1,f,c
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7897  015658  0E06               	movlw	6
  7898  01565A  2447               	addwf	_gCursor,w,c
  7899  01565C  0100               	movlb	0	; () banked
  7900  01565E  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  7901  015660  0E00               	movlw	0
  7902  015662  2048               	addwfc	_gCursor+1,w,c
  7903  015664  0100               	movlb	0	; () banked
  7904  015666  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7905  015668  0100               	movlb	0	; () banked
  7906  01566A  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7907  01566C  D009               	goto	l1004
  7908  01566E  0100               	movlb	0	; () banked
  7909  015670  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7910  015672  E104               	bnz	u8890
  7911  015674  0E80               	movlw	128
  7912  015676  0100               	movlb	0	; () banked
  7913  015678  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7914  01567A  B0D8               	btfsc	status,0,c
  7915  01567C                     u8890:
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;Console.c: 250: Console_NewLine();
  7919  01567C  ECC8  F0A4         	call	_Console_NewLine	;wreg free
  7920  015680                     l1004:
  7921                           
  7922                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7923  015680  0E08               	movlw	8
  7924  015682  2449               	addwf	_gCursor+2,w,c
  7925  015684  0100               	movlb	0	; () banked
  7926  015686  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  7927  015688  0E00               	movlw	0
  7928  01568A  204A               	addwfc	_gCursor+3,w,c
  7929  01568C  0100               	movlb	0	; () banked
  7930  01568E  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7931  015690  0100               	movlb	0	; () banked
  7932  015692  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7933  015694  D00C               	goto	l1005
  7934  015696  0100               	movlb	0	; () banked
  7935  015698  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7936  01569A  E105               	bnz	u8900
  7937  01569C  0E80               	movlw	128
  7938  01569E  0100               	movlb	0	; () banked
  7939  0156A0  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7940  0156A2  A0D8               	btfss	status,0,c
  7941  0156A4  D004               	goto	l1005
  7942  0156A6                     u8900:
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;Console.c: 252: {
  7946                           ;Console.c: 253: Console_FormFeed();
  7947  0156A6  ECFB  F0A5         	call	_Console_FormFeed	;wreg free
  7948                           
  7949                           ;Console.c: 254: return 1;
  7950  0156AA  0E01               	movlw	1
  7951  0156AC  0012               	return	
  7952  0156AE                     l1005:
  7953                           
  7954                           ;Console.c: 255: }
  7955                           ;Console.c: 257: return 0;
  7956  0156AE  0E00               	movlw	0
  7957  0156B0  0012               	return	
  7958  0156B2                     __end_of_Console_IncrementCursor:
  7959                           	opt stack 0
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           postinc0	equ	0xFEE
  7967                           wreg	equ	0xFE8
  7968                           postdec1	equ	0xFE5
  7969                           fsr1h	equ	0xFE2
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           fsr2h	equ	0xFDA
  7975                           fsr2l	equ	0xFD9
  7976                           status	equ	0xFD8
  7977                           
  7978 ;; *************** function _Console_NewLine *****************
  7979 ;; Defined at:
  7980 ;;		line 175 in file "Library/Console.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;		None
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;		None
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;Total ram usage:        2 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    7
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_Console_IncrementCursor
  8005 ;;		_Console_PrintChar
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text28
  8010  014990                     __ptext28:
  8011                           	opt stack 0
  8012  014990                     _Console_NewLine:
  8013                           	opt stack 18
  8014                           
  8015                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8016                           
  8017                           ;incstack = 0
  8018  014990  D03E               	goto	l983
  8019  014992                     
  8020                           ;Console.c: 179: {
  8021                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8022  014992  0100               	movlb	0	; () banked
  8023  014994  5190               	movf	_lBufferY& (0+255),w,b
  8024  014996  0D14               	mullw	20
  8025  014998  0EAA               	movlw	low _lBuffer
  8026  01499A  0100               	movlb	0	; () banked
  8027  01499C  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8028  01499E  0E04               	movlw	high _lBuffer
  8029  0149A0  0100               	movlb	0	; () banked
  8030  0149A2  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8031  0149A4  50F3               	movf	prodl,w,c
  8032  0149A6  0100               	movlb	0	; () banked
  8033  0149A8  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8034  0149AA  50F4               	movf	prodh,w,c
  8035  0149AC  0100               	movlb	0	; () banked
  8036  0149AE  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8037  0149B0  0100               	movlb	0	; () banked
  8038  0149B2  5191               	movf	_lBufferX& (0+255),w,b
  8039  0149B4  0D01               	mullw	1
  8040  0149B6  50F3               	movf	prodl,w,c
  8041  0149B8  0100               	movlb	0	; () banked
  8042  0149BA  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8043  0149BC  6ED9               	movwf	fsr2l,c
  8044  0149BE  50F4               	movf	prodh,w,c
  8045  0149C0  0100               	movlb	0	; () banked
  8046  0149C2  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8047  0149C4  6EDA               	movwf	fsr2h,c
  8048  0149C6  50DF               	movf	indf2,w,c
  8049  0149C8  B4D8               	btfsc	status,2,c
  8050  0149CA  D01F               	goto	l985
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8054  0149CC  0E01               	movlw	1
  8055  0149CE  0100               	movlb	0	; () banked
  8056  0149D0  6FFF               	movwf	_change& (0+255),b
  8057                           
  8058                           ; BSR set to: 0
  8059  0149D2  0100               	movlb	0	; () banked
  8060  0149D4  5190               	movf	_lBufferY& (0+255),w,b
  8061  0149D6  0D14               	mullw	20
  8062  0149D8  0EAA               	movlw	low _lBuffer
  8063  0149DA  0100               	movlb	0	; () banked
  8064  0149DC  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8065  0149DE  0E04               	movlw	high _lBuffer
  8066  0149E0  0100               	movlb	0	; () banked
  8067  0149E2  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8068  0149E4  50F3               	movf	prodl,w,c
  8069  0149E6  0100               	movlb	0	; () banked
  8070  0149E8  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8071  0149EA  50F4               	movf	prodh,w,c
  8072  0149EC  0100               	movlb	0	; () banked
  8073  0149EE  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8074  0149F0  0100               	movlb	0	; () banked
  8075  0149F2  5191               	movf	_lBufferX& (0+255),w,b
  8076  0149F4  0D01               	mullw	1
  8077  0149F6  50F3               	movf	prodl,w,c
  8078  0149F8  0100               	movlb	0	; () banked
  8079  0149FA  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8080  0149FC  6ED9               	movwf	fsr2l,c
  8081  0149FE  50F4               	movf	prodh,w,c
  8082  014A00  0100               	movlb	0	; () banked
  8083  014A02  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8084  014A04  6EDA               	movwf	fsr2h,c
  8085  014A06  0E80               	movlw	128
  8086  014A08  6EDF               	movwf	indf2,c
  8087  014A0A                     l985:
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;Console.c: 182: lBufferX ++;
  8091                           
  8092                           ; BSR set to: 0
  8093  014A0A  0100               	movlb	0	; () banked
  8094  014A0C  2B91               	incf	_lBufferX& (0+255),f,b
  8095  014A0E                     l983:
  8096                           
  8097                           ; BSR set to: 0
  8098  014A0E  0E13               	movlw	19
  8099  014A10  0100               	movlb	0	; () banked
  8100  014A12  6591               	cpfsgt	_lBufferX& (0+255),b
  8101  014A14  D7BE               	goto	l984
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;Console.c: 183: }
  8105                           ;Console.c: 185: lBufferX = 0;
  8106                           
  8107                           ; BSR set to: 0
  8108  014A16  0E00               	movlw	0
  8109  014A18  0100               	movlb	0	; () banked
  8110  014A1A  6F91               	movwf	_lBufferX& (0+255),b
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;Console.c: 186: lBufferY ++;
  8114  014A1C  0100               	movlb	0	; () banked
  8115  014A1E  2B90               	incf	_lBufferY& (0+255),f,b
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;Console.c: 188: gCursor.y += 8;
  8119  014A20  0E08               	movlw	8
  8120  014A22  2649               	addwf	_gCursor+2,f,c
  8121  014A24  0E00               	movlw	0
  8122  014A26  224A               	addwfc	_gCursor+3,f,c
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;Console.c: 189: gCursor.x = 6;
  8126  014A28  0E00               	movlw	0
  8127  014A2A  6E48               	movwf	_gCursor+1,c
  8128  014A2C  0E06               	movlw	6
  8129  014A2E  6E47               	movwf	_gCursor,c
  8130                           
  8131                           ; BSR set to: 0
  8132  014A30  0012               	return		;funcret
  8133  014A32                     __end_of_Console_NewLine:
  8134                           	opt stack 0
  8135                           tblptru	equ	0xFF8
  8136                           tblptrh	equ	0xFF7
  8137                           tblptrl	equ	0xFF6
  8138                           tablat	equ	0xFF5
  8139                           prodh	equ	0xFF4
  8140                           prodl	equ	0xFF3
  8141                           postinc0	equ	0xFEE
  8142                           wreg	equ	0xFE8
  8143                           postdec1	equ	0xFE5
  8144                           fsr1h	equ	0xFE2
  8145                           fsr1l	equ	0xFE1
  8146                           indf2	equ	0xFDF
  8147                           postinc2	equ	0xFDE
  8148                           postdec2	equ	0xFDD
  8149                           fsr2h	equ	0xFDA
  8150                           fsr2l	equ	0xFD9
  8151                           status	equ	0xFD8
  8152                           
  8153 ;; *************** function _Console_FormFeed *****************
  8154 ;; Defined at:
  8155 ;;		line 192 in file "Library/Console.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;  y               1    3[BANK0 ] unsigned char 
  8160 ;;  x               1    2[BANK0 ] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      void 
  8163 ;; Registers used:
  8164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;Total ram usage:        4 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    7
  8177 ;; This function calls:
  8178 ;;		Nothing
  8179 ;; This function is called by:
  8180 ;;		_Console_IncrementCursor
  8181 ;;		_Console_PrintChar
  8182 ;; This function uses a non-reentrant model
  8183 ;;
  8184                           
  8185                           	psect	text29
  8186  014BF6                     __ptext29:
  8187                           	opt stack 0
  8188  014BF6                     _Console_FormFeed:
  8189                           	opt stack 18
  8190                           
  8191                           ;Console.c: 195: lBufferX = 0;
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;incstack = 0
  8195  014BF6  0E00               	movlw	0
  8196  014BF8  0100               	movlb	0	; () banked
  8197  014BFA  6F91               	movwf	_lBufferX& (0+255),b
  8198                           
  8199                           ;Console.c: 196: lBufferY = 0;
  8200  014BFC  0E00               	movlw	0
  8201  014BFE  0100               	movlb	0	; () banked
  8202  014C00  6F90               	movwf	_lBufferY& (0+255),b
  8203                           
  8204                           ;Console.c: 197: UINT8 x, y;
  8205                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8206  014C02  0E00               	movlw	0
  8207  014C04  0100               	movlb	0	; () banked
  8208  014C06  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8209  014C08                     l12172:
  8210                           
  8211                           ; BSR set to: 0
  8212  014C08  0E0E               	movlw	14
  8213  014C0A  0100               	movlb	0	; () banked
  8214  014C0C  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8215  014C0E  D001               	goto	l990
  8216  014C10  D02D               	goto	u8750
  8217  014C12                     l990:
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8221                           
  8222                           ; BSR set to: 0
  8223  014C12  0E00               	movlw	0
  8224  014C14  0100               	movlb	0	; () banked
  8225  014C16  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8226  014C18                     l12178:
  8227                           
  8228                           ; BSR set to: 0
  8229  014C18  0E13               	movlw	19
  8230  014C1A  0100               	movlb	0	; () banked
  8231  014C1C  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8232  014C1E  D001               	goto	l992
  8233  014C20  D022               	goto	u8740
  8234  014C22                     l992:
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8238                           
  8239                           ; BSR set to: 0
  8240  014C22  0E01               	movlw	1
  8241  014C24  0100               	movlb	0	; () banked
  8242  014C26  6FFF               	movwf	_change& (0+255),b
  8243                           
  8244                           ; BSR set to: 0
  8245  014C28  0100               	movlb	0	; () banked
  8246  014C2A  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8247  014C2C  0D14               	mullw	20
  8248  014C2E  0EAA               	movlw	low _lBuffer
  8249  014C30  0100               	movlb	0	; () banked
  8250  014C32  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8251  014C34  0E04               	movlw	high _lBuffer
  8252  014C36  0100               	movlb	0	; () banked
  8253  014C38  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8254  014C3A  50F3               	movf	prodl,w,c
  8255  014C3C  0100               	movlb	0	; () banked
  8256  014C3E  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8257  014C40  50F4               	movf	prodh,w,c
  8258  014C42  0100               	movlb	0	; () banked
  8259  014C44  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8260  014C46  0100               	movlb	0	; () banked
  8261  014C48  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8262  014C4A  0D01               	mullw	1
  8263  014C4C  50F3               	movf	prodl,w,c
  8264  014C4E  0100               	movlb	0	; () banked
  8265  014C50  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8266  014C52  6ED9               	movwf	fsr2l,c
  8267  014C54  50F4               	movf	prodh,w,c
  8268  014C56  0100               	movlb	0	; () banked
  8269  014C58  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8270  014C5A  6EDA               	movwf	fsr2h,c
  8271  014C5C  0E80               	movlw	128
  8272  014C5E  6EDF               	movwf	indf2,c
  8273                           
  8274                           ; BSR set to: 0
  8275  014C60  0100               	movlb	0	; () banked
  8276  014C62  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8277  014C64  D7D9               	goto	l12178
  8278  014C66                     u8740:
  8279                           
  8280                           ; BSR set to: 0
  8281                           
  8282                           ; BSR set to: 0
  8283  014C66  0100               	movlb	0	; () banked
  8284  014C68  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8285  014C6A  D7CE               	goto	l12172
  8286  014C6C                     u8750:
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;Console.c: 204: clearall = 1;
  8290                           
  8291                           ; BSR set to: 0
  8292  014C6C  0E01               	movlw	1
  8293  014C6E  0100               	movlb	0	; () banked
  8294  014C70  6F92               	movwf	_clearall& (0+255),b
  8295                           
  8296                           ;Console.c: 205: gCursor.x = 6;
  8297  014C72  0E00               	movlw	0
  8298  014C74  6E48               	movwf	_gCursor+1,c
  8299  014C76  0E06               	movlw	6
  8300  014C78  6E47               	movwf	_gCursor,c
  8301                           
  8302                           ;Console.c: 206: gCursor.y = 6;
  8303  014C7A  0E00               	movlw	0
  8304  014C7C  6E4A               	movwf	_gCursor+3,c
  8305  014C7E  0E06               	movlw	6
  8306  014C80  6E49               	movwf	_gCursor+2,c
  8307                           
  8308                           ; BSR set to: 0
  8309  014C82  0012               	return		;funcret
  8310  014C84                     __end_of_Console_FormFeed:
  8311                           	opt stack 0
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodh	equ	0xFF4
  8317                           prodl	equ	0xFF3
  8318                           postinc0	equ	0xFEE
  8319                           wreg	equ	0xFE8
  8320                           postdec1	equ	0xFE5
  8321                           fsr1h	equ	0xFE2
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _Console_ResetCursor *****************
  8331 ;; Defined at:
  8332 ;;		line 297 in file "Library/Console.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;		None
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;		None
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  1    wreg      void 
  8339 ;; Registers used:
  8340 ;;		wreg, status,2
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;Total ram usage:        0 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    7
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		_Console_PrintChar
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text30
  8361  016250                     __ptext30:
  8362                           	opt stack 0
  8363  016250                     _Console_ResetCursor:
  8364                           	opt stack 20
  8365                           
  8366                           ;Console.c: 299: gCursor.x = 6;
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;incstack = 0
  8370  016250  0E00               	movlw	0
  8371  016252  6E48               	movwf	_gCursor+1,c
  8372  016254  0E06               	movlw	6
  8373  016256  6E47               	movwf	_gCursor,c
  8374                           
  8375                           ;Console.c: 300: gCursor.y = 6;
  8376  016258  0E00               	movlw	0
  8377  01625A  6E4A               	movwf	_gCursor+3,c
  8378  01625C  0E06               	movlw	6
  8379  01625E  6E49               	movwf	_gCursor+2,c
  8380                           
  8381                           ;Console.c: 303: lBufferX = 0;
  8382  016260  0E00               	movlw	0
  8383  016262  0100               	movlb	0	; () banked
  8384  016264  6F91               	movwf	_lBufferX& (0+255),b
  8385                           
  8386                           ;Console.c: 304: lBufferY = 0;
  8387  016266  0E00               	movlw	0
  8388  016268  0100               	movlb	0	; () banked
  8389  01626A  6F90               	movwf	_lBufferY& (0+255),b
  8390                           
  8391                           ; BSR set to: 0
  8392  01626C  0012               	return		;funcret
  8393  01626E                     __end_of_Console_ResetCursor:
  8394                           	opt stack 0
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           prodh	equ	0xFF4
  8400                           prodl	equ	0xFF3
  8401                           postinc0	equ	0xFEE
  8402                           wreg	equ	0xFE8
  8403                           postdec1	equ	0xFE5
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _Console_Backspace *****************
  8414 ;; Defined at:
  8415 ;;		line 209 in file "Library/Console.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;Total ram usage:        0 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    8
  8436 ;; This function calls:
  8437 ;;		_Console_ClearCursor
  8438 ;; This function is called by:
  8439 ;;		_Console_PrintChar
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text31
  8444  0157DA                     __ptext31:
  8445                           	opt stack 0
  8446  0157DA                     _Console_Backspace:
  8447                           	opt stack 19
  8448                           
  8449                           ;Console.c: 211: if (lBufferX > 0)
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;incstack = 0
  8453  0157DA  0100               	movlb	0	; () banked
  8454  0157DC  5191               	movf	_lBufferX& (0+255),w,b
  8455  0157DE  B4D8               	btfsc	status,2,c
  8456  0157E0  D007               	goto	l997
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;Console.c: 212: {
  8460                           ;Console.c: 213: gCursor.x -= 6;
  8461  0157E2  0EFA               	movlw	250
  8462  0157E4  2647               	addwf	_gCursor,f,c
  8463  0157E6  0EFF               	movlw	255
  8464  0157E8  2248               	addwfc	_gCursor+1,f,c
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;Console.c: 216: lBufferX --;
  8468  0157EA  0100               	movlb	0	; () banked
  8469  0157EC  0791               	decf	_lBufferX& (0+255),f,b
  8470                           
  8471                           ;Console.c: 218: }
  8472  0157EE  D020               	goto	l1000
  8473  0157F0                     l997:
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;Console.c: 219: else if (lBufferY > 0)
  8477                           
  8478                           ; BSR set to: 0
  8479  0157F0  0100               	movlb	0	; () banked
  8480  0157F2  5190               	movf	_lBufferY& (0+255),w,b
  8481  0157F4  B4D8               	btfsc	status,2,c
  8482  0157F6  D00E               	goto	l999
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;Console.c: 220: {
  8486                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8487  0157F8  0E00               	movlw	0
  8488  0157FA  6E48               	movwf	_gCursor+1,c
  8489  0157FC  0E72               	movlw	114
  8490  0157FE  6E47               	movwf	_gCursor,c
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;Console.c: 222: gCursor.y -= 8;
  8494  015800  0EF8               	movlw	248
  8495  015802  2649               	addwf	_gCursor+2,f,c
  8496  015804  0EFF               	movlw	255
  8497  015806  224A               	addwfc	_gCursor+3,f,c
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8501  015808  0E13               	movlw	19
  8502  01580A  0100               	movlb	0	; () banked
  8503  01580C  6F91               	movwf	_lBufferX& (0+255),b
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;Console.c: 226: lBufferY --;
  8507  01580E  0100               	movlb	0	; () banked
  8508  015810  0790               	decf	_lBufferY& (0+255),f,b
  8509                           
  8510                           ;Console.c: 228: }
  8511  015812  D00E               	goto	l1000
  8512  015814                     l999:
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;Console.c: 229: else
  8516                           ;Console.c: 230: {
  8517                           ;Console.c: 231: gCursor.x = 6;
  8518                           
  8519                           ; BSR set to: 0
  8520  015814  0E00               	movlw	0
  8521  015816  6E48               	movwf	_gCursor+1,c
  8522  015818  0E06               	movlw	6
  8523  01581A  6E47               	movwf	_gCursor,c
  8524                           
  8525                           ;Console.c: 232: gCursor.y = 6;
  8526  01581C  0E00               	movlw	0
  8527  01581E  6E4A               	movwf	_gCursor+3,c
  8528  015820  0E06               	movlw	6
  8529  015822  6E49               	movwf	_gCursor+2,c
  8530                           
  8531                           ;Console.c: 235: lBufferX = 0;
  8532  015824  0E00               	movlw	0
  8533  015826  0100               	movlb	0	; () banked
  8534  015828  6F91               	movwf	_lBufferX& (0+255),b
  8535                           
  8536                           ;Console.c: 236: lBufferY = 0;
  8537  01582A  0E00               	movlw	0
  8538  01582C  0100               	movlb	0	; () banked
  8539  01582E  6F90               	movwf	_lBufferY& (0+255),b
  8540  015830                     l1000:
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;Console.c: 238: }
  8544                           ;Console.c: 240: Console_ClearCursor();
  8545                           
  8546                           ; BSR set to: 0
  8547                           
  8548                           ; BSR set to: 0
  8549  015830  ECA1  F0AE         	call	_Console_ClearCursor	;wreg free
  8550  015834  0012               	return		;funcret
  8551  015836                     __end_of_Console_Backspace:
  8552                           	opt stack 0
  8553                           tblptru	equ	0xFF8
  8554                           tblptrh	equ	0xFF7
  8555                           tblptrl	equ	0xFF6
  8556                           tablat	equ	0xFF5
  8557                           prodh	equ	0xFF4
  8558                           prodl	equ	0xFF3
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           postdec1	equ	0xFE5
  8562                           fsr1h	equ	0xFE2
  8563                           fsr1l	equ	0xFE1
  8564                           indf2	equ	0xFDF
  8565                           postinc2	equ	0xFDE
  8566                           postdec2	equ	0xFDD
  8567                           fsr2h	equ	0xFDA
  8568                           fsr2l	equ	0xFD9
  8569                           status	equ	0xFD8
  8570                           
  8571 ;; *************** function _Console_ClearCursor *****************
  8572 ;; Defined at:
  8573 ;;		line 308 in file "Library/Console.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;		None
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;		None
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      void 
  8580 ;; Registers used:
  8581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:        2 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    7
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_Console_Backspace
  8598 ;;		_Console_Tab
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text32
  8603  015D42                     __ptext32:
  8604                           	opt stack 0
  8605  015D42                     _Console_ClearCursor:
  8606                           	opt stack 19
  8607                           
  8608                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8609                           
  8610                           ;incstack = 0
  8611  015D42  0E01               	movlw	1
  8612  015D44  0100               	movlb	0	; () banked
  8613  015D46  6FFF               	movwf	_change& (0+255),b
  8614                           
  8615                           ; BSR set to: 0
  8616  015D48  0100               	movlb	0	; () banked
  8617  015D4A  5190               	movf	_lBufferY& (0+255),w,b
  8618  015D4C  0D14               	mullw	20
  8619  015D4E  0EAA               	movlw	low _lBuffer
  8620  015D50  0100               	movlb	0	; () banked
  8621  015D52  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  8622  015D54  0E04               	movlw	high _lBuffer
  8623  015D56  0100               	movlb	0	; () banked
  8624  015D58  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8625  015D5A  50F3               	movf	prodl,w,c
  8626  015D5C  0100               	movlb	0	; () banked
  8627  015D5E  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  8628  015D60  50F4               	movf	prodh,w,c
  8629  015D62  0100               	movlb	0	; () banked
  8630  015D64  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8631  015D66  0100               	movlb	0	; () banked
  8632  015D68  5191               	movf	_lBufferX& (0+255),w,b
  8633  015D6A  0D01               	mullw	1
  8634  015D6C  50F3               	movf	prodl,w,c
  8635  015D6E  0100               	movlb	0	; () banked
  8636  015D70  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  8637  015D72  6ED9               	movwf	fsr2l,c
  8638  015D74  50F4               	movf	prodh,w,c
  8639  015D76  0100               	movlb	0	; () banked
  8640  015D78  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8641  015D7A  6EDA               	movwf	fsr2h,c
  8642  015D7C  0E80               	movlw	128
  8643  015D7E  6EDF               	movwf	indf2,c
  8644                           
  8645                           ; BSR set to: 0
  8646  015D80  0012               	return		;funcret
  8647  015D82                     __end_of_Console_ClearCursor:
  8648                           	opt stack 0
  8649                           tblptru	equ	0xFF8
  8650                           tblptrh	equ	0xFF7
  8651                           tblptrl	equ	0xFF6
  8652                           tablat	equ	0xFF5
  8653                           prodh	equ	0xFF4
  8654                           prodl	equ	0xFF3
  8655                           postinc0	equ	0xFEE
  8656                           wreg	equ	0xFE8
  8657                           postdec1	equ	0xFE5
  8658                           fsr1h	equ	0xFE2
  8659                           fsr1l	equ	0xFE1
  8660                           indf2	equ	0xFDF
  8661                           postinc2	equ	0xFDE
  8662                           postdec2	equ	0xFDD
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function ___fltol *****************
  8668 ;; Defined at:
  8669 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  f1              4   57[BANK0 ] void 
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  exp1            1   62[BANK0 ] unsigned char 
  8674 ;;  sign1           1   61[BANK0 ] unsigned char 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  4   57[BANK0 ] long 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8684 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;Total ram usage:       10 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    7
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_findClosestWall
  8695 ;;		_mode1
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           	psect	text33
  8700  01341C                     __ptext33:
  8701                           	opt stack 0
  8702  01341C                     ___fltol:
  8703                           	opt stack 21
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;incstack = 0
  8707  01341C  0100               	movlb	0	; () banked
  8708  01341E  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8709  013420  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8710  013422  0100               	movlb	0	; () banked
  8711  013424  6FF8               	movwf	___fltol@exp1& (0+255),b
  8712  013426  0100               	movlb	0	; () banked
  8713  013428  51F8               	movf	___fltol@exp1& (0+255),w,b
  8714  01342A  A4D8               	btfss	status,2,c
  8715  01342C  D00A               	goto	l2670
  8716                           
  8717                           ; BSR set to: 0
  8718  01342E  0E00               	movlw	0
  8719  013430  0100               	movlb	0	; () banked
  8720  013432  6FF3               	movwf	?___fltol& (0+255),b
  8721  013434  0E00               	movlw	0
  8722  013436  6FF4               	movwf	(?___fltol+1)& (0+255),b
  8723  013438  0E00               	movlw	0
  8724  01343A  6FF5               	movwf	(?___fltol+2)& (0+255),b
  8725  01343C  0E00               	movlw	0
  8726  01343E  6FF6               	movwf	(?___fltol+3)& (0+255),b
  8727                           
  8728                           ; BSR set to: 0
  8729  013440  0012               	return	
  8730  013442                     l2670:
  8731                           
  8732                           ; BSR set to: 0
  8733                           
  8734                           ; BSR set to: 0
  8735  013442  C0F3  F100         	movff	___fltol@f1,??___fltol
  8736  013446  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  8737  01344A  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  8738  01344E  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  8739  013452  0E20               	movlw	32
  8740  013454  D006               	goto	u10960
  8741  013456                     u10965:
  8742  013456  0101               	movlb	1	; () banked
  8743  013458  90D8               	bcf	status,0,c
  8744  01345A  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  8745  01345C  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  8746  01345E  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  8747  013460  3300               	rrcf	??___fltol& (0+255),f,b
  8748  013462                     u10960:
  8749  013462  2EE8               	decfsz	wreg,f,c
  8750  013464  D7F8               	goto	u10965
  8751  013466  0101               	movlb	1	; () banked
  8752  013468  5100               	movf	??___fltol& (0+255),w,b
  8753  01346A  0100               	movlb	0	; () banked
  8754  01346C  6FF7               	movwf	___fltol@sign1& (0+255),b
  8755                           
  8756                           ; BSR set to: 0
  8757  01346E  0100               	movlb	0	; () banked
  8758  013470  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  8759                           
  8760                           ; BSR set to: 0
  8761  013472  0EFF               	movlw	255
  8762  013474  0100               	movlb	0	; () banked
  8763  013476  17F3               	andwf	___fltol@f1& (0+255),f,b
  8764  013478  0EFF               	movlw	255
  8765  01347A  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  8766  01347C  0EFF               	movlw	255
  8767  01347E  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  8768  013480  0E00               	movlw	0
  8769  013482  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  8770                           
  8771                           ; BSR set to: 0
  8772  013484  0E96               	movlw	150
  8773  013486  0100               	movlb	0	; () banked
  8774  013488  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  8775                           
  8776                           ; BSR set to: 0
  8777  01348A  0100               	movlb	0	; () banked
  8778  01348C  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  8779  01348E  D01A               	goto	l2672
  8780                           
  8781                           ; BSR set to: 0
  8782  013490  0100               	movlb	0	; () banked
  8783  013492  51F8               	movf	___fltol@exp1& (0+255),w,b
  8784  013494  0A80               	xorlw	128
  8785  013496  0F97               	addlw	151
  8786  013498  B0D8               	btfsc	status,0,c
  8787  01349A  D00A               	goto	l2673
  8788                           
  8789                           ; BSR set to: 0
  8790  01349C  0E00               	movlw	0
  8791  01349E  0100               	movlb	0	; () banked
  8792  0134A0  6FF3               	movwf	?___fltol& (0+255),b
  8793  0134A2  0E00               	movlw	0
  8794  0134A4  6FF4               	movwf	(?___fltol+1)& (0+255),b
  8795  0134A6  0E00               	movlw	0
  8796  0134A8  6FF5               	movwf	(?___fltol+2)& (0+255),b
  8797  0134AA  0E00               	movlw	0
  8798  0134AC  6FF6               	movwf	(?___fltol+3)& (0+255),b
  8799                           
  8800                           ; BSR set to: 0
  8801  0134AE  0012               	return	
  8802  0134B0                     l2673:
  8803                           
  8804                           ; BSR set to: 0
  8805                           
  8806                           ; BSR set to: 0
  8807                           
  8808                           ; BSR set to: 0
  8809  0134B0  0100               	movlb	0	; () banked
  8810  0134B2  90D8               	bcf	status,0,c
  8811  0134B4  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8812  0134B6  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8813  0134B8  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8814  0134BA  33F3               	rrcf	___fltol@f1& (0+255),f,b
  8815                           
  8816                           ; BSR set to: 0
  8817  0134BC  0100               	movlb	0	; () banked
  8818  0134BE  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  8819  0134C0  D7F7               	goto	l2673
  8820                           
  8821                           ; BSR set to: 0
  8822  0134C2  D01B               	goto	u11000
  8823  0134C4                     l2672:
  8824                           
  8825                           ; BSR set to: 0
  8826                           
  8827                           ; BSR set to: 0
  8828  0134C4  0E1F               	movlw	31
  8829  0134C6  0100               	movlb	0	; () banked
  8830  0134C8  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  8831  0134CA  D012               	goto	l2678
  8832                           
  8833                           ; BSR set to: 0
  8834  0134CC  0E00               	movlw	0
  8835  0134CE  0100               	movlb	0	; () banked
  8836  0134D0  6FF3               	movwf	?___fltol& (0+255),b
  8837  0134D2  0E00               	movlw	0
  8838  0134D4  6FF4               	movwf	(?___fltol+1)& (0+255),b
  8839  0134D6  0E00               	movlw	0
  8840  0134D8  6FF5               	movwf	(?___fltol+2)& (0+255),b
  8841  0134DA  0E00               	movlw	0
  8842  0134DC  6FF6               	movwf	(?___fltol+3)& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845  0134DE  0012               	return	
  8846  0134E0                     
  8847                           ; BSR set to: 0
  8848                           
  8849                           ; BSR set to: 0
  8850  0134E0  0100               	movlb	0	; () banked
  8851  0134E2  90D8               	bcf	status,0,c
  8852  0134E4  37F3               	rlcf	___fltol@f1& (0+255),f,b
  8853  0134E6  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8854  0134E8  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8855  0134EA  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8856  0134EC  0100               	movlb	0	; () banked
  8857  0134EE  07F8               	decf	___fltol@exp1& (0+255),f,b
  8858  0134F0                     l2678:
  8859                           
  8860                           ; BSR set to: 0
  8861                           
  8862                           ; BSR set to: 0
  8863  0134F0  0100               	movlb	0	; () banked
  8864  0134F2  51F8               	movf	___fltol@exp1& (0+255),w,b
  8865  0134F4  0100               	movlb	0	; () banked
  8866  0134F6  A4D8               	btfss	status,2,c
  8867  0134F8  D7F3               	goto	l2679
  8868  0134FA                     u11000:
  8869                           
  8870                           ; BSR set to: 0
  8871                           
  8872                           ; BSR set to: 0
  8873                           
  8874                           ; BSR set to: 0
  8875  0134FA  0100               	movlb	0	; () banked
  8876  0134FC  51F7               	movf	___fltol@sign1& (0+255),w,b
  8877  0134FE  0100               	movlb	0	; () banked
  8878  013500  B4D8               	btfsc	status,2,c
  8879  013502  D009               	goto	l2681
  8880                           
  8881                           ; BSR set to: 0
  8882  013504  0100               	movlb	0	; () banked
  8883  013506  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  8884  013508  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  8885  01350A  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  8886  01350C  6DF3               	negf	___fltol@f1& (0+255),b
  8887  01350E  0E00               	movlw	0
  8888  013510  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8889  013512  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8890  013514  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8891  013516                     l2681:
  8892                           
  8893                           ; BSR set to: 0
  8894                           
  8895                           ; BSR set to: 0
  8896  013516  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  8897  01351A  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  8898  01351E  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  8899  013522  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  8900  013526  0012               	return	
  8901  013528                     __end_of___fltol:
  8902                           	opt stack 0
  8903                           tblptru	equ	0xFF8
  8904                           tblptrh	equ	0xFF7
  8905                           tblptrl	equ	0xFF6
  8906                           tablat	equ	0xFF5
  8907                           prodh	equ	0xFF4
  8908                           prodl	equ	0xFF3
  8909                           postinc0	equ	0xFEE
  8910                           wreg	equ	0xFE8
  8911                           postdec1	equ	0xFE5
  8912                           fsr1h	equ	0xFE2
  8913                           fsr1l	equ	0xFE1
  8914                           indf2	equ	0xFDF
  8915                           postinc2	equ	0xFDE
  8916                           postdec2	equ	0xFDD
  8917                           fsr2h	equ	0xFDA
  8918                           fsr2l	equ	0xFD9
  8919                           status	equ	0xFD8
  8920                           
  8921 ;; *************** function _Motor_Speed *****************
  8922 ;; Defined at:
  8923 ;;		line 117 in file "Library/Motor.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8926 ;;		 -> Stepper(6), 
  8927 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;		None
  8930 ;; Return value:  Size  Location     Type
  8931 ;;                  1    wreg      unsigned char 
  8932 ;; Registers used:
  8933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8934 ;; Tracked objects:
  8935 ;;		On entry : 0/0
  8936 ;;		On exit  : 0/0
  8937 ;;		Unchanged: 0/0
  8938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8943 ;;Total ram usage:        4 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:    9
  8946 ;; This function calls:
  8947 ;;		_Timer0_Init
  8948 ;; This function is called by:
  8949 ;;		_findClosestWall
  8950 ;;		_mode1
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           	psect	text34
  8955  016128                     __ptext34:
  8956                           	opt stack 0
  8957  016128                     _Motor_Speed:
  8958                           	opt stack 19
  8959                           
  8960                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;incstack = 0
  8964  016128  0100               	movlb	0	; () banked
  8965  01612A  EE20 F002          	lfsr	2,2
  8966  01612E  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  8967  016130  26D9               	addwf	fsr2l,f,c
  8968  016132  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  8969  016134  22DA               	addwfc	fsr2h,f,c
  8970  016136  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8971  01613A  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8972                           
  8973                           ; BSR set to: 0
  8974                           ;Motor.c: 120: Timer0_Init(pFrequency);
  8975  01613E  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8976  016142  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8977  016146  0100               	movlb	0	; () banked
  8978  016148  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8979  01614A  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8980  01614C  EC1B  F098         	call	_Timer0_Init	;wreg free
  8981  016150  0012               	return	
  8982  016152                     __end_of_Motor_Speed:
  8983                           	opt stack 0
  8984                           tblptru	equ	0xFF8
  8985                           tblptrh	equ	0xFF7
  8986                           tblptrl	equ	0xFF6
  8987                           tablat	equ	0xFF5
  8988                           prodh	equ	0xFF4
  8989                           prodl	equ	0xFF3
  8990                           postinc0	equ	0xFEE
  8991                           wreg	equ	0xFE8
  8992                           postdec1	equ	0xFE5
  8993                           fsr1h	equ	0xFE2
  8994                           fsr1l	equ	0xFE1
  8995                           indf2	equ	0xFDF
  8996                           postinc2	equ	0xFDE
  8997                           postdec2	equ	0xFDD
  8998                           fsr2h	equ	0xFDA
  8999                           fsr2l	equ	0xFD9
  9000                           status	equ	0xFD8
  9001                           
  9002 ;; *************** function _Motor_Move *****************
  9003 ;; Defined at:
  9004 ;;		line 51 in file "Library/Motor.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9007 ;;		 -> Stepper(6), 
  9008 ;;  pDelta          2    5[BANK0 ] short 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      unsigned char 
  9013 ;; Registers used:
  9014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9020 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;Total ram usage:        6 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    8
  9027 ;; This function calls:
  9028 ;;		_Timer0_Start
  9029 ;; This function is called by:
  9030 ;;		_findClosestWall
  9031 ;;		_mode1
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text35
  9036  015F30                     __ptext35:
  9037                           	opt stack 0
  9038  015F30                     _Motor_Move:
  9039                           	opt stack 20
  9040                           
  9041                           ;Motor.c: 54: lMotor = pMotor;
  9042                           
  9043                           ;incstack = 0
  9044  015F30  C0BD  F081         	movff	Motor_Move@pMotor,_lMotor
  9045  015F34  C0BE  F082         	movff	Motor_Move@pMotor+1,_lMotor+1
  9046                           
  9047                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9048  015F38  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9049  015F3C  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9050  015F40  50DE               	movf	postinc2,w,c
  9051  015F42  10DE               	iorwf	postinc2,w,c
  9052  015F44  A4D8               	btfss	status,2,c
  9053  015F46  0012               	return	
  9054                           
  9055                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9056                           
  9057                           ;Motor.c: 59: return 0;
  9058                           ;	Return value of _Motor_Move is never used
  9059  015F48  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9060  015F4C  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9061  015F50  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9062  015F54  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9063                           
  9064                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9065  015F58  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9066  015F5C  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9067  015F60  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9068  015F64  ECD2  F0B0         	call	_Timer0_Start	;wreg free
  9069  015F68  0012               	return	
  9070  015F6A                     __end_of_Motor_Move:
  9071                           	opt stack 0
  9072                           tblptru	equ	0xFF8
  9073                           tblptrh	equ	0xFF7
  9074                           tblptrl	equ	0xFF6
  9075                           tablat	equ	0xFF5
  9076                           prodh	equ	0xFF4
  9077                           prodl	equ	0xFF3
  9078                           postinc0	equ	0xFEE
  9079                           wreg	equ	0xFE8
  9080                           postdec1	equ	0xFE5
  9081                           fsr1h	equ	0xFE2
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           fsr2h	equ	0xFDA
  9087                           fsr2l	equ	0xFD9
  9088                           status	equ	0xFD8
  9089                           
  9090 ;; *************** function _Timer0_Start *****************
  9091 ;; Defined at:
  9092 ;;		line 75 in file "Library/Timer0.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9095 ;;		 -> Absolute function(1), Motor_Step(1), 
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  1    wreg      void 
  9100 ;; Registers used:
  9101 ;;		wreg, status,2, status,0
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9107 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9111 ;;Total ram usage:        3 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    7
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_Motor_Move
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	text36
  9122  0161A4                     __ptext36:
  9123                           	opt stack 0
  9124  0161A4                     _Timer0_Start:
  9125                           	opt stack 20
  9126                           
  9127                           ;Timer0.c: 77: gISR = pFunction;
  9128                           
  9129                           ;incstack = 0
  9130  0161A4  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9131  0161A8  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9132  0161AC  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9133                           
  9134                           ;Timer0.c: 78: TMR0 = COUNTER;
  9135  0161B0  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9136  0161B4  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9137                           
  9138                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9139  0161B8  50D5               	movf	4053,w,c	;volatile
  9140  0161BA  0100               	movlb	0	; () banked
  9141  0161BC  198F               	xorwf	_INDEX& (0+255),w,b
  9142  0161BE  0BF8               	andlw	-8
  9143  0161C0  198F               	xorwf	_INDEX& (0+255),w,b
  9144  0161C2  6ED5               	movwf	4053,c	;volatile
  9145                           
  9146                           ; BSR set to: 0
  9147                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9148  0161C4  94F2               	bcf	intcon,2,c	;volatile
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9152  0161C6  8AF2               	bsf	intcon,5,c	;volatile
  9153                           
  9154                           ; BSR set to: 0
  9155  0161C8  0012               	return		;funcret
  9156  0161CA                     __end_of_Timer0_Start:
  9157                           	opt stack 0
  9158                           tblptru	equ	0xFF8
  9159                           tblptrh	equ	0xFF7
  9160                           tblptrl	equ	0xFF6
  9161                           tablat	equ	0xFF5
  9162                           prodh	equ	0xFF4
  9163                           prodl	equ	0xFF3
  9164                           intcon	equ	0xFF2
  9165                           postinc0	equ	0xFEE
  9166                           wreg	equ	0xFE8
  9167                           postdec1	equ	0xFE5
  9168                           fsr1h	equ	0xFE2
  9169                           fsr1l	equ	0xFE1
  9170                           indf2	equ	0xFDF
  9171                           postinc2	equ	0xFDE
  9172                           postdec2	equ	0xFDD
  9173                           fsr2h	equ	0xFDA
  9174                           fsr2l	equ	0xFD9
  9175                           status	equ	0xFD8
  9176                           
  9177 ;; *************** function _HMI_Render *****************
  9178 ;; Defined at:
  9179 ;;		line 138 in file "HMI.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  a               2    8[BANK0 ] unsigned short 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;Total ram usage:        2 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    9
  9200 ;; This function calls:
  9201 ;;		_OutSeg
  9202 ;; This function is called by:
  9203 ;;		_findClosestWall
  9204 ;;		_mode1
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text37
  9209  015DC2                     __ptext37:
  9210                           	opt stack 0
  9211  015DC2                     _HMI_Render:
  9212                           	opt stack 19
  9213                           
  9214                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;incstack = 0
  9218  015DC2  0E00               	movlw	0
  9219  015DC4  0100               	movlb	0	; () banked
  9220  015DC6  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9221  015DC8  0E00               	movlw	0
  9222  015DCA  6FC2               	movwf	HMI_Render@a& (0+255),b
  9223  015DCC                     l14022:
  9224                           
  9225                           ; BSR set to: 0
  9226  015DCC  0100               	movlb	0	; () banked
  9227  015DCE  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9228  015DD0  E116               	bnz	l1158
  9229  015DD2  0E08               	movlw	8
  9230  015DD4  0100               	movlb	0	; () banked
  9231  015DD6  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9232  015DD8  B0D8               	btfsc	status,0,c
  9233  015DDA  0012               	return	
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9237                           
  9238                           ; BSR set to: 0
  9239                           
  9240                           ; BSR set to: 0
  9241  015DDC  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9242  015DE0  0E3C               	movlw	low _HMIBoard
  9243  015DE2  0100               	movlb	0	; () banked
  9244  015DE4  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9245  015DE6  6ED9               	movwf	fsr2l,c
  9246  015DE8  0E03               	movlw	high _HMIBoard
  9247  015DEA  0100               	movlb	0	; () banked
  9248  015DEC  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9249  015DEE  6EDA               	movwf	fsr2h,c
  9250  015DF0  50DF               	movf	indf2,w,c
  9251  015DF2  EC95  F0A7         	call	_OutSeg
  9252  015DF6  0100               	movlb	0	; () banked
  9253  015DF8  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9254  015DFA  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9255  015DFC  D7E7               	goto	l14022
  9256  015DFE                     l1158:
  9257                           
  9258                           ; BSR set to: 0
  9259  015DFE  0012               	return		;funcret
  9260  015E00                     __end_of_HMI_Render:
  9261                           	opt stack 0
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           postinc0	equ	0xFEE
  9270                           wreg	equ	0xFE8
  9271                           postdec1	equ	0xFE5
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function _OutSeg *****************
  9282 ;; Defined at:
  9283 ;;		line 54 in file "HMI.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;  pInput          1    wreg     unsigned char 
  9286 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;  pInput          1    6[BANK0 ] unsigned char 
  9289 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9299 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;Total ram usage:        5 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    8
  9306 ;; This function calls:
  9307 ;;		_SPI_Send
  9308 ;; This function is called by:
  9309 ;;		_HMI_Render
  9310 ;;		_HMI_GRender
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text38
  9315  014F2A                     __ptext38:
  9316                           	opt stack 0
  9317  014F2A                     _OutSeg:
  9318                           	opt stack 19
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;incstack = 0
  9322                           ;OutSeg@pInput stored from wreg
  9323  014F2A  0100               	movlb	0	; () banked
  9324  014F2C  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9325                           
  9326                           ;HMI.c: 58: static UINT8 cur;
  9327                           ;HMI.c: 59: volatile UINT8 out;
  9328                           ;HMI.c: 60: static UINT8 segset;
  9329                           ;HMI.c: 61: static UINT8 a;
  9330                           ;HMI.c: 83: if (pSegment <= 8)
  9331  014F2E  0E09               	movlw	9
  9332  014F30  0100               	movlb	0	; () banked
  9333  014F32  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9334  014F34  0012               	return	
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;HMI.c: 84: {
  9338                           ;HMI.c: 85: cur = pInput;
  9339  014F36  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9343  014F3A  0E00               	movlw	0
  9344  014F3C  6E3D               	movwf	OutSeg@a,c
  9345  014F3E                     l13412:
  9346                           
  9347                           ; BSR set to: 0
  9348  014F3E  0E07               	movlw	7
  9349  014F40  643D               	cpfsgt	OutSeg@a,c
  9350  014F42  D001               	goto	l1146
  9351  014F44  D027               	goto	u9840
  9352  014F46                     l1146:
  9353                           
  9354                           ;HMI.c: 87: {
  9355                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9356                           
  9357                           ; BSR set to: 0
  9358  014F46  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  9359  014F4A  0E01               	movlw	1
  9360  014F4C  0100               	movlb	0	; () banked
  9361  014F4E  17BE               	andwf	??_OutSeg& (0+255),f,b
  9362  014F50  0E06               	movlw	6
  9363  014F52  0100               	movlb	0	; () banked
  9364  014F54  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  9365  014F56                     u9835:
  9366  014F56  0100               	movlb	0	; () banked
  9367  014F58  90D8               	bcf	status,0,c
  9368  014F5A  37BE               	rlcf	??_OutSeg& (0+255),f,b
  9369  014F5C  0100               	movlb	0	; () banked
  9370  014F5E  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9371  014F60  D7FA               	goto	u9835
  9372  014F62  0100               	movlb	0	; () banked
  9373  014F64  51BE               	movf	??_OutSeg& (0+255),w,b
  9374  014F66  6E3E               	movwf	OutSeg@segset,c
  9375                           
  9376                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9377  014F68  0100               	movlb	0	; () banked
  9378  014F6A  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  9379  014F6C  42E8               	rrncf	wreg,f,c
  9380  014F6E  0BF8               	andlw	248
  9381  014F70  103D               	iorwf	OutSeg@a,w,c
  9382  014F72  103E               	iorwf	OutSeg@segset,w,c
  9383  014F74  0100               	movlb	0	; () banked
  9384  014F76  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  9385                           
  9386                           ;HMI.c: 90: cur >>= 1;
  9387  014F78  90D8               	bcf	status,0,c
  9388  014F7A  323F               	rrcf	OutSeg@cur,f,c
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9392  014F7C  0E76               	movlw	low _SPI1
  9393  014F7E  0100               	movlb	0	; () banked
  9394  014F80  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9395  014F82  0E03               	movlw	high _SPI1
  9396  014F84  0100               	movlb	0	; () banked
  9397  014F86  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9398  014F88  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9399  014F8C  ECE8  F0A9         	call	_SPI_Send	;wreg free
  9400  014F90  2A3D               	incf	OutSeg@a,f,c
  9401  014F92  D7D5               	goto	l13412
  9402  014F94                     u9840:
  9403                           
  9404                           ;HMI.c: 96: }
  9405                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9406  014F94  0E76               	movlw	low _SPI1
  9407  014F96  0100               	movlb	0	; () banked
  9408  014F98  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9409  014F9A  0E03               	movlw	high _SPI1
  9410  014F9C  0100               	movlb	0	; () banked
  9411  014F9E  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9412  014FA0  0E00               	movlw	0
  9413  014FA2  0100               	movlb	0	; () banked
  9414  014FA4  6FBC               	movwf	SPI_Send@pData& (0+255),b
  9415  014FA6  ECE8  F0A9         	call	_SPI_Send	;wreg free
  9416  014FAA  0012               	return	
  9417  014FAC                     __end_of_OutSeg:
  9418                           	opt stack 0
  9419                           tblptru	equ	0xFF8
  9420                           tblptrh	equ	0xFF7
  9421                           tblptrl	equ	0xFF6
  9422                           tablat	equ	0xFF5
  9423                           prodh	equ	0xFF4
  9424                           prodl	equ	0xFF3
  9425                           intcon	equ	0xFF2
  9426                           postinc0	equ	0xFEE
  9427                           wreg	equ	0xFE8
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           fsr2h	equ	0xFDA
  9435                           fsr2l	equ	0xFD9
  9436                           status	equ	0xFD8
  9437                           
  9438 ;; *************** function _Console_Render *****************
  9439 ;; Defined at:
  9440 ;;		line 377 in file "Library/Console.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;  lCursor         4   38[BANK0 ] struct Point
  9445 ;;  y               1   43[BANK0 ] unsigned char 
  9446 ;;  x               1   42[BANK0 ] unsigned char 
  9447 ;;  temp            1   37[BANK0 ] unsigned char 
  9448 ;;  Temp            2    0        unsigned short 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  1    wreg      void 
  9451 ;; Registers used:
  9452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;Total ram usage:        9 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:   11
  9465 ;; This function calls:
  9466 ;;		_Console_MakeField
  9467 ;;		_LCD_DrawField
  9468 ;;		_LCD_FillRectangle
  9469 ;; This function is called by:
  9470 ;;		_findClosestWall
  9471 ;;		_mode1
  9472 ;;		_mode2
  9473 ;;		_main
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           	psect	text39
  9478  011DCE                     __ptext39:
  9479                           	opt stack 0
  9480  011DCE                     _Console_Render:
  9481                           	opt stack 17
  9482                           
  9483                           ;Console.c: 379: Colour Temp;
  9484                           ;Console.c: 380: if (change)
  9485                           
  9486                           ;incstack = 0
  9487  011DCE  0100               	movlb	0	; () banked
  9488  011DD0  51FF               	movf	_change& (0+255),w,b
  9489  011DD2  B4D8               	btfsc	status,2,c
  9490  011DD4  0012               	return	
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;Console.c: 381: {
  9494                           ;Console.c: 382: UINT8 x, y, temp;
  9495                           ;Console.c: 383: Point lCursor = {6,6};
  9496  011DD6  C3E8  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
  9497  011DDA  C3E9  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9498  011DDE  C3EA  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9499  011DE2  C3EB  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;Console.c: 385: if (clearall)
  9503  011DE6  0100               	movlb	0	; () banked
  9504  011DE8  5192               	movf	_clearall& (0+255),w,b
  9505  011DEA  B4D8               	btfsc	status,2,c
  9506  011DEC  D005               	goto	l1056
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;Console.c: 386: {
  9510                           ;Console.c: 389: temp = lBufferY;
  9511  011DEE  C090  F0DF         	movff	_lBufferY,Console_Render@temp
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9515  011DF2  0E0F               	movlw	15
  9516  011DF4  0100               	movlb	0	; () banked
  9517  011DF6  6F90               	movwf	_lBufferY& (0+255),b
  9518  011DF8                     l1056:
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;Console.c: 391: }
  9522                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9523  011DF8  0E00               	movlw	0
  9524  011DFA  0100               	movlb	0	; () banked
  9525  011DFC  6FE5               	movwf	Console_Render@y& (0+255),b
  9526  011DFE  D0DF               	goto	l1057
  9527  011E00                     
  9528                           ; BSR set to: 0
  9529                           ;Console.c: 394: {
  9530                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9531                           
  9532                           ; BSR set to: 0
  9533  011E00  0100               	movlb	0	; () banked
  9534  011E02  51E5               	movf	Console_Render@y& (0+255),w,b
  9535  011E04  0D02               	mullw	2
  9536  011E06  0E00               	movlw	low _lCBuffer
  9537  011E08  24F3               	addwf	prodl,w,c
  9538  011E0A  6ED9               	movwf	fsr2l,c
  9539  011E0C  0E03               	movlw	high _lCBuffer
  9540  011E0E  20F4               	addwfc	prodh,w,c
  9541  011E10  6EDA               	movwf	fsr2h,c
  9542  011E12  CFDE F0FD          	movff	postinc2,_gForecolour
  9543  011E16  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9547  011E1A  0E00               	movlw	0
  9548  011E1C  0100               	movlb	0	; () banked
  9549  011E1E  6FE4               	movwf	Console_Render@x& (0+255),b
  9550  011E20                     l13986:
  9551                           
  9552                           ; BSR set to: 0
  9553  011E20  0E13               	movlw	19
  9554  011E22  0100               	movlb	0	; () banked
  9555  011E24  65E4               	cpfsgt	Console_Render@x& (0+255),b
  9556  011E26  D001               	goto	l1059
  9557  011E28  D0BE               	goto	u10640
  9558  011E2A                     l1059:
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;Console.c: 397: {
  9562                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9563                           
  9564                           ; BSR set to: 0
  9565  011E2A  0100               	movlb	0	; () banked
  9566  011E2C  51E5               	movf	Console_Render@y& (0+255),w,b
  9567  011E2E  0D14               	mullw	20
  9568  011E30  0EAA               	movlw	low _lBuffer
  9569  011E32  0100               	movlb	0	; () banked
  9570  011E34  6FDD               	movwf	??_Console_Render& (0+255),b
  9571  011E36  0E04               	movlw	high _lBuffer
  9572  011E38  0100               	movlb	0	; () banked
  9573  011E3A  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9574  011E3C  50F3               	movf	prodl,w,c
  9575  011E3E  0100               	movlb	0	; () banked
  9576  011E40  27DD               	addwf	??_Console_Render& (0+255),f,b
  9577  011E42  50F4               	movf	prodh,w,c
  9578  011E44  0100               	movlb	0	; () banked
  9579  011E46  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9580  011E48  0100               	movlb	0	; () banked
  9581  011E4A  51E4               	movf	Console_Render@x& (0+255),w,b
  9582  011E4C  0D01               	mullw	1
  9583  011E4E  50F3               	movf	prodl,w,c
  9584  011E50  0100               	movlb	0	; () banked
  9585  011E52  25DD               	addwf	??_Console_Render& (0+255),w,b
  9586  011E54  6ED9               	movwf	fsr2l,c
  9587  011E56  50F4               	movf	prodh,w,c
  9588  011E58  0100               	movlb	0	; () banked
  9589  011E5A  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9590  011E5C  6EDA               	movwf	fsr2h,c
  9591  011E5E  AEDF               	btfss	indf2,7,c
  9592  011E60  D09A               	goto	l1063
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;Console.c: 399: {
  9596                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9597  011E62  0100               	movlb	0	; () banked
  9598  011E64  51E5               	movf	Console_Render@y& (0+255),w,b
  9599  011E66  0D14               	mullw	20
  9600  011E68  0EAA               	movlw	low _lBuffer
  9601  011E6A  0100               	movlb	0	; () banked
  9602  011E6C  6FDD               	movwf	??_Console_Render& (0+255),b
  9603  011E6E  0E04               	movlw	high _lBuffer
  9604  011E70  0100               	movlb	0	; () banked
  9605  011E72  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9606  011E74  50F3               	movf	prodl,w,c
  9607  011E76  0100               	movlb	0	; () banked
  9608  011E78  27DD               	addwf	??_Console_Render& (0+255),f,b
  9609  011E7A  50F4               	movf	prodh,w,c
  9610  011E7C  0100               	movlb	0	; () banked
  9611  011E7E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9612  011E80  0100               	movlb	0	; () banked
  9613  011E82  51E4               	movf	Console_Render@x& (0+255),w,b
  9614  011E84  0D01               	mullw	1
  9615  011E86  50F3               	movf	prodl,w,c
  9616  011E88  0100               	movlb	0	; () banked
  9617  011E8A  25DD               	addwf	??_Console_Render& (0+255),w,b
  9618  011E8C  6ED9               	movwf	fsr2l,c
  9619  011E8E  50F4               	movf	prodh,w,c
  9620  011E90  0100               	movlb	0	; () banked
  9621  011E92  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9622  011E94  6EDA               	movwf	fsr2h,c
  9623  011E96  0E7F               	movlw	127
  9624  011E98  16DF               	andwf	indf2,f,c
  9625                           
  9626                           ;Console.c: 401: if (lBuffer[y][x])
  9627  011E9A  0100               	movlb	0	; () banked
  9628  011E9C  51E5               	movf	Console_Render@y& (0+255),w,b
  9629  011E9E  0D14               	mullw	20
  9630  011EA0  0EAA               	movlw	low _lBuffer
  9631  011EA2  0100               	movlb	0	; () banked
  9632  011EA4  6FDD               	movwf	??_Console_Render& (0+255),b
  9633  011EA6  0E04               	movlw	high _lBuffer
  9634  011EA8  0100               	movlb	0	; () banked
  9635  011EAA  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9636  011EAC  50F3               	movf	prodl,w,c
  9637  011EAE  0100               	movlb	0	; () banked
  9638  011EB0  27DD               	addwf	??_Console_Render& (0+255),f,b
  9639  011EB2  50F4               	movf	prodh,w,c
  9640  011EB4  0100               	movlb	0	; () banked
  9641  011EB6  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9642  011EB8  0100               	movlb	0	; () banked
  9643  011EBA  51E4               	movf	Console_Render@x& (0+255),w,b
  9644  011EBC  0D01               	mullw	1
  9645  011EBE  50F3               	movf	prodl,w,c
  9646  011EC0  0100               	movlb	0	; () banked
  9647  011EC2  25DD               	addwf	??_Console_Render& (0+255),w,b
  9648  011EC4  6ED9               	movwf	fsr2l,c
  9649  011EC6  50F4               	movf	prodh,w,c
  9650  011EC8  0100               	movlb	0	; () banked
  9651  011ECA  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9652  011ECC  6EDA               	movwf	fsr2h,c
  9653  011ECE  50DF               	movf	indf2,w,c
  9654  011ED0  B4D8               	btfsc	status,2,c
  9655  011ED2  D04A               	goto	l1062
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;Console.c: 402: {
  9659                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9660  011ED4  C085  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9661  011ED8  C086  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9662  011EDC  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9663  011EE0  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9664  011EE4  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9665  011EE8  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9666  011EEC  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
  9667  011EF0  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9668  011EF4  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9669  011EF8  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9670  011EFC  ECC8  F0A8         	call	_LCD_FillRectangle	;wreg free
  9671                           
  9672                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9673  011F00  0100               	movlb	0	; () banked
  9674  011F02  51E5               	movf	Console_Render@y& (0+255),w,b
  9675  011F04  0D14               	mullw	20
  9676  011F06  0EAA               	movlw	low _lBuffer
  9677  011F08  0100               	movlb	0	; () banked
  9678  011F0A  6FDD               	movwf	??_Console_Render& (0+255),b
  9679  011F0C  0E04               	movlw	high _lBuffer
  9680  011F0E  0100               	movlb	0	; () banked
  9681  011F10  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9682  011F12  50F3               	movf	prodl,w,c
  9683  011F14  0100               	movlb	0	; () banked
  9684  011F16  27DD               	addwf	??_Console_Render& (0+255),f,b
  9685  011F18  50F4               	movf	prodh,w,c
  9686  011F1A  0100               	movlb	0	; () banked
  9687  011F1C  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9688  011F1E  0100               	movlb	0	; () banked
  9689  011F20  51E4               	movf	Console_Render@x& (0+255),w,b
  9690  011F22  0D01               	mullw	1
  9691  011F24  50F3               	movf	prodl,w,c
  9692  011F26  0100               	movlb	0	; () banked
  9693  011F28  25DD               	addwf	??_Console_Render& (0+255),w,b
  9694  011F2A  6ED9               	movwf	fsr2l,c
  9695  011F2C  50F4               	movf	prodh,w,c
  9696  011F2E  0100               	movlb	0	; () banked
  9697  011F30  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9698  011F32  6EDA               	movwf	fsr2h,c
  9699  011F34  50DF               	movf	indf2,w,c
  9700  011F36  EC1C  F09E         	call	_Console_MakeField
  9701  011F3A  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
  9702  011F3E  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9703  011F42  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9704  011F46  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9705  011F4A  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9706  011F4E  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9707  011F52  C3F0  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
  9708  011F56  C3F1  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9709  011F5A  C3F2  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9710  011F5E  C3F3  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9711  011F62  EC76  F0A4         	call	_LCD_DrawField	;wreg free
  9712                           
  9713                           ;Console.c: 405: }
  9714  011F66  D017               	goto	l1063
  9715  011F68                     l1062:
  9716                           
  9717                           ;Console.c: 406: else
  9718                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9719  011F68  0E00               	movlw	0
  9720  011F6A  0100               	movlb	0	; () banked
  9721  011F6C  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9722  011F6E  0E00               	movlw	0
  9723  011F70  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9724  011F72  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9725  011F76  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9726  011F7A  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9727  011F7E  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9728  011F82  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
  9729  011F86  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9730  011F8A  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9731  011F8E  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9732  011F92  ECC8  F0A8         	call	_LCD_FillRectangle	;wreg free
  9733  011F96                     l1063:
  9734                           
  9735                           ;Console.c: 408: }
  9736                           ;Console.c: 409: lCursor.x += (5 + 1);
  9737  011F96  0E06               	movlw	6
  9738  011F98  0100               	movlb	0	; () banked
  9739  011F9A  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
  9740  011F9C  0E00               	movlw	0
  9741  011F9E  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9742                           
  9743                           ; BSR set to: 0
  9744  011FA0  0100               	movlb	0	; () banked
  9745  011FA2  2BE4               	incf	Console_Render@x& (0+255),f,b
  9746  011FA4  D73D               	goto	l13986
  9747  011FA6                     u10640:
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;Console.c: 410: }
  9751                           ;Console.c: 411: lCursor.y += (7 + 1);
  9752                           
  9753                           ; BSR set to: 0
  9754  011FA6  0E08               	movlw	8
  9755  011FA8  0100               	movlb	0	; () banked
  9756  011FAA  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9757  011FAC  0E00               	movlw	0
  9758  011FAE  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9759                           
  9760                           ; BSR set to: 0
  9761                           ;Console.c: 412: lCursor.x = 6;
  9762  011FB0  0E00               	movlw	0
  9763  011FB2  0100               	movlb	0	; () banked
  9764  011FB4  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9765  011FB6  0E06               	movlw	6
  9766  011FB8  6FE0               	movwf	Console_Render@lCursor& (0+255),b
  9767                           
  9768                           ; BSR set to: 0
  9769  011FBA  0100               	movlb	0	; () banked
  9770  011FBC  2BE5               	incf	Console_Render@y& (0+255),f,b
  9771  011FBE                     l1057:
  9772                           
  9773                           ; BSR set to: 0
  9774                           
  9775                           ; BSR set to: 0
  9776  011FBE  0100               	movlb	0	; () banked
  9777  011FC0  51E5               	movf	Console_Render@y& (0+255),w,b
  9778  011FC2  0100               	movlb	0	; () banked
  9779  011FC4  5D90               	subwf	_lBufferY& (0+255),w,b
  9780  011FC6  B0D8               	btfsc	status,0,c
  9781  011FC8  D71B               	goto	l1058
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;Console.c: 413: }
  9785                           ;Console.c: 415: if (clearall)
  9786                           
  9787                           ; BSR set to: 0
  9788  011FCA  0100               	movlb	0	; () banked
  9789  011FCC  5192               	movf	_clearall& (0+255),w,b
  9790  011FCE  B4D8               	btfsc	status,2,c
  9791  011FD0  0012               	return	
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;Console.c: 416: {
  9795                           ;Console.c: 417: clearall = 0;
  9796  011FD2  0E00               	movlw	0
  9797  011FD4  0100               	movlb	0	; () banked
  9798  011FD6  6F92               	movwf	_clearall& (0+255),b
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;Console.c: 418: lBufferY = temp;
  9802  011FD8  C0DF  F090         	movff	Console_Render@temp,_lBufferY
  9803                           
  9804                           ; BSR set to: 0
  9805  011FDC  0012               	return	
  9806  011FDE                     __end_of_Console_Render:
  9807                           	opt stack 0
  9808                           tblptru	equ	0xFF8
  9809                           tblptrh	equ	0xFF7
  9810                           tblptrl	equ	0xFF6
  9811                           tablat	equ	0xFF5
  9812                           prodh	equ	0xFF4
  9813                           prodl	equ	0xFF3
  9814                           intcon	equ	0xFF2
  9815                           postinc0	equ	0xFEE
  9816                           wreg	equ	0xFE8
  9817                           postdec1	equ	0xFE5
  9818                           fsr1h	equ	0xFE2
  9819                           fsr1l	equ	0xFE1
  9820                           indf2	equ	0xFDF
  9821                           postinc2	equ	0xFDE
  9822                           postdec2	equ	0xFDD
  9823                           fsr2h	equ	0xFDA
  9824                           fsr2l	equ	0xFD9
  9825                           status	equ	0xFD8
  9826                           
  9827 ;; *************** function _LCD_FillRectangle *****************
  9828 ;; Defined at:
  9829 ;;		line 318 in file "Library/LCD.c"
  9830 ;; Parameters:    Size  Location     Type
  9831 ;;  pColour         2    9[BANK0 ] unsigned short 
  9832 ;;  pPoint          4   11[BANK0 ] struct Point
  9833 ;;  pSize           4   15[BANK0 ] struct Point
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  j               1   22[BANK0 ] unsigned char 
  9836 ;;  i               1   21[BANK0 ] unsigned char 
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9846 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;Total ram usage:       14 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:   10
  9853 ;; This function calls:
  9854 ;;		_LCD_Word_Write
  9855 ;;		_Set_Addr_Window
  9856 ;; This function is called by:
  9857 ;;		_Console_Render
  9858 ;;		_Console_ClearLine
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           	psect	text40
  9863  015190                     __ptext40:
  9864                           	opt stack 0
  9865  015190                     _LCD_FillRectangle:
  9866                           	opt stack 17
  9867                           
  9868                           ;LCD.c: 320: UINT8 i = 0x00;
  9869                           
  9870                           ; BSR set to: 0
  9871                           ;incstack = 0
  9872  015190  0E00               	movlw	0
  9873  015192  0100               	movlb	0	; () banked
  9874  015194  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
  9875                           
  9876                           ;LCD.c: 321: UINT8 j = 0x00;
  9877  015196  0E00               	movlw	0
  9878  015198  0100               	movlb	0	; () banked
  9879  01519A  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9883  01519C  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9884  0151A0  0100               	movlb	0	; () banked
  9885  0151A2  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9886  0151A4  0100               	movlb	0	; () banked
  9887  0151A6  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  9888  0151A8  0100               	movlb	0	; () banked
  9889  0151AA  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
  9890  0151AC  0100               	movlb	0	; () banked
  9891  0151AE  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
  9892  0151B0  0100               	movlb	0	; () banked
  9893  0151B2  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
  9894  0151B4  0100               	movlb	0	; () banked
  9895  0151B6  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  9896  0151B8  0100               	movlb	0	; () banked
  9897  0151BA  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  9898  0151BC  0100               	movlb	0	; () banked
  9899  0151BE  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  9900  0151C0  0100               	movlb	0	; () banked
  9901  0151C2  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  9902  0151C4  0100               	movlb	0	; () banked
  9903  0151C6  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
  9904  0151C8  0100               	movlb	0	; () banked
  9905  0151CA  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9906  0151CC  EC80  F0A2         	call	_Set_Addr_Window
  9907                           
  9908                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  9909  0151D0  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  9910  0151D4                     l13148:
  9911  0151D4  0100               	movlb	0	; () banked
  9912  0151D6  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
  9913  0151D8  0100               	movlb	0	; () banked
  9914  0151DA  B4D8               	btfsc	status,2,c
  9915  0151DC  0012               	return	
  9916                           
  9917                           ; BSR set to: 0
  9918                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  9919                           
  9920                           ; BSR set to: 0
  9921  0151DE  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  9922  0151E2                     l13152:
  9923                           
  9924                           ; BSR set to: 0
  9925  0151E2  0100               	movlb	0	; () banked
  9926  0151E4  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
  9927  0151E6  0100               	movlb	0	; () banked
  9928  0151E8  B4D8               	btfsc	status,2,c
  9929  0151EA  D009               	goto	u9610
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;LCD.c: 333: LCD_Word_Write(pColour);
  9933                           
  9934                           ; BSR set to: 0
  9935                           
  9936                           ; BSR set to: 0
  9937  0151EC  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  9938  0151F0  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  9939  0151F4  EC46  F0B1         	call	_LCD_Word_Write	;wreg free
  9940  0151F8  0100               	movlb	0	; () banked
  9941  0151FA  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
  9942  0151FC  D7F2               	goto	l13152
  9943  0151FE                     u9610:
  9944                           
  9945                           ; BSR set to: 0
  9946                           
  9947                           ; BSR set to: 0
  9948  0151FE  0100               	movlb	0	; () banked
  9949  015200  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
  9950  015202  D7E8               	goto	l13148
  9951  015204                     __end_of_LCD_FillRectangle:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           postinc0	equ	0xFEE
  9961                           wreg	equ	0xFE8
  9962                           postdec1	equ	0xFE5
  9963                           fsr1h	equ	0xFE2
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           fsr2h	equ	0xFDA
  9969                           fsr2l	equ	0xFD9
  9970                           status	equ	0xFD8
  9971                           
  9972 ;; *************** function _LCD_DrawField *****************
  9973 ;; Defined at:
  9974 ;;		line 393 in file "Library/LCD.c"
  9975 ;; Parameters:    Size  Location     Type
  9976 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  9977 ;;		 -> Console_MakeField@Fill(70), 
  9978 ;;  pPoint          4   20[BANK0 ] struct Point
  9979 ;;  pSize           4   24[BANK0 ] struct Point
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;  count           2   30[BANK0 ] unsigned short 
  9982 ;;  i               1   34[BANK0 ] unsigned char 
  9983 ;;  ymax            1   33[BANK0 ] unsigned char 
  9984 ;;  xmax            1   32[BANK0 ] unsigned char 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;                  1    wreg      void 
  9987 ;; Registers used:
  9988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9994 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9995 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;Total ram usage:       17 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:   10
 10001 ;; This function calls:
 10002 ;;		_LCD_Word_Write
 10003 ;;		_Set_Addr_Window
 10004 ;;		___wmul
 10005 ;; This function is called by:
 10006 ;;		_Console_Render
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           	psect	text41
 10011  0148EC                     __ptext41:
 10012                           	opt stack 0
 10013  0148EC                     _LCD_DrawField:
 10014                           	opt stack 17
 10015                           
 10016                           ;LCD.c: 396: UINT8 i = 0x00;
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;incstack = 0
 10020  0148EC  0E00               	movlw	0
 10021  0148EE  0100               	movlb	0	; () banked
 10022  0148F0  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10026  0148F2  0100               	movlb	0	; () banked
 10027  0148F4  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10028  0148F6  0100               	movlb	0	; () banked
 10029  0148F8  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10030  0148FA  0100               	movlb	0	; () banked
 10031  0148FC  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10035  0148FE  0100               	movlb	0	; () banked
 10036  014900  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10037  014902  0100               	movlb	0	; () banked
 10038  014904  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10039  014906  0100               	movlb	0	; () banked
 10040  014908  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10044  01490A  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10045  01490E  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10046  014912  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10047  014916  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10048  01491A  ECB5  F0AF         	call	___wmul	;wreg free
 10049  01491E  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10050  014922  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10051                           
 10052                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10053  014926  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10054  01492A  0100               	movlb	0	; () banked
 10055  01492C  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10056  01492E  0100               	movlb	0	; () banked
 10057  014930  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10058  014932  0100               	movlb	0	; () banked
 10059  014934  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10060  014936  0100               	movlb	0	; () banked
 10061  014938  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10062  01493A  0100               	movlb	0	; () banked
 10063  01493C  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10064  01493E  EC80  F0A2         	call	_Set_Addr_Window
 10065                           
 10066                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10067  014942  0E00               	movlw	0
 10068  014944  0100               	movlb	0	; () banked
 10069  014946  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10070  014948  D013               	goto	l183
 10071  01494A                     
 10072                           ; BSR set to: 0
 10073                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10074                           
 10075                           ; BSR set to: 0
 10076  01494A  0100               	movlb	0	; () banked
 10077  01494C  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10078  01494E  0D02               	mullw	2
 10079  014950  50F3               	movf	prodl,w,c
 10080  014952  0100               	movlb	0	; () banked
 10081  014954  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10082  014956  6ED9               	movwf	fsr2l,c
 10083  014958  50F4               	movf	prodh,w,c
 10084  01495A  0100               	movlb	0	; () banked
 10085  01495C  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10086  01495E  6EDA               	movwf	fsr2h,c
 10087  014960  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10088  014964  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10089  014968  EC46  F0B1         	call	_LCD_Word_Write	;wreg free
 10090  01496C  0100               	movlb	0	; () banked
 10091  01496E  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10092  014970                     l183:
 10093                           
 10094                           ; BSR set to: 0
 10095                           
 10096                           ; BSR set to: 0
 10097  014970  0100               	movlb	0	; () banked
 10098  014972  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10099  014974  0100               	movlb	0	; () banked
 10100  014976  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10101  014978  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10102  01497A  0100               	movlb	0	; () banked
 10103  01497C  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10104  01497E  0100               	movlb	0	; () banked
 10105  014980  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10106  014982  0100               	movlb	0	; () banked
 10107  014984  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10108  014986  0100               	movlb	0	; () banked
 10109  014988  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10110  01498A  B0D8               	btfsc	status,0,c
 10111  01498C  0012               	return	
 10112  01498E  D7DD               	goto	l184
 10113  014990                     __end_of_LCD_DrawField:
 10114                           	opt stack 0
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           postinc0	equ	0xFEE
 10123                           wreg	equ	0xFE8
 10124                           postdec1	equ	0xFE5
 10125                           fsr1h	equ	0xFE2
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           postdec2	equ	0xFDD
 10130                           fsr2h	equ	0xFDA
 10131                           fsr2l	equ	0xFD9
 10132                           status	equ	0xFD8
 10133                           
 10134 ;; *************** function ___wmul *****************
 10135 ;; Defined at:
 10136 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10139 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;  product         2    4[BANK0 ] unsigned int 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  2    0[BANK0 ] unsigned int 
 10144 ;; Registers used:
 10145 ;;		wreg, status,2, status,0, prodl, prodh
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;Total ram usage:        6 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    7
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		_LCD_DrawField
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           	psect	text42
 10166  015F6A                     __ptext42:
 10167                           	opt stack 0
 10168  015F6A                     ___wmul:
 10169                           	opt stack 19
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;incstack = 0
 10173  015F6A  0100               	movlb	0	; () banked
 10174  015F6C  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10175  015F6E  0100               	movlb	0	; () banked
 10176  015F70  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10177  015F72  CFF3 F0BE          	movff	prodl,___wmul@product
 10178  015F76  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10179  015F7A  0100               	movlb	0	; () banked
 10180  015F7C  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10181  015F7E  0100               	movlb	0	; () banked
 10182  015F80  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10183  015F82  50F3               	movf	prodl,w,c
 10184  015F84  0100               	movlb	0	; () banked
 10185  015F86  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10186  015F88  0100               	movlb	0	; () banked
 10187  015F8A  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10188  015F8C  0100               	movlb	0	; () banked
 10189  015F8E  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10190  015F90  50F3               	movf	prodl,w,c
 10191  015F92  0100               	movlb	0	; () banked
 10192  015F94  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10193                           
 10194                           ; BSR set to: 0
 10195  015F96  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10196  015F9A  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10197  015F9E  0012               	return	
 10198  015FA0                     __end_of___wmul:
 10199                           	opt stack 0
 10200                           tblptru	equ	0xFF8
 10201                           tblptrh	equ	0xFF7
 10202                           tblptrl	equ	0xFF6
 10203                           tablat	equ	0xFF5
 10204                           prodh	equ	0xFF4
 10205                           prodl	equ	0xFF3
 10206                           intcon	equ	0xFF2
 10207                           postinc0	equ	0xFEE
 10208                           wreg	equ	0xFE8
 10209                           postdec1	equ	0xFE5
 10210                           fsr1h	equ	0xFE2
 10211                           fsr1l	equ	0xFE1
 10212                           indf2	equ	0xFDF
 10213                           postinc2	equ	0xFDE
 10214                           postdec2	equ	0xFDD
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function _Console_MakeField *****************
 10220 ;; Defined at:
 10221 ;;		line 435 in file "Library/Console.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  pInput          1    wreg     unsigned char 
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;  pInput          1   11[BANK0 ] unsigned char 
 10226 ;;  y               1   17[BANK0 ] unsigned char 
 10227 ;;  x               1   16[BANK0 ] unsigned char 
 10228 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10229 ;;		 -> Font5x7(480), 
 10230 ;;  Index           2    9[BANK0 ] unsigned short 
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  2    5[BANK0 ] PTR unsigned short 
 10233 ;; Registers used:
 10234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;Total ram usage:       13 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:    8
 10247 ;; This function calls:
 10248 ;;		_Byte_GetBit
 10249 ;; This function is called by:
 10250 ;;		_Console_Render
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text43
 10255  013C38                     __ptext43:
 10256                           	opt stack 0
 10257  013C38                     _Console_MakeField:
 10258                           	opt stack 19
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;incstack = 0
 10262                           ;Console_MakeField@pInput stored from wreg
 10263  013C38  0100               	movlb	0	; () banked
 10264  013C3A  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10265                           
 10266                           ;Console.c: 437: static Colour Fill[7][5];
 10267                           ;Console.c: 438: pInput -= 32;
 10268  013C3C  0E20               	movlw	32
 10269  013C3E  0100               	movlb	0	; () banked
 10270  013C40  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10271                           
 10272                           ; BSR set to: 0
 10273                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10274  013C42  0100               	movlb	0	; () banked
 10275  013C44  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10276  013C46  0D05               	mullw	5
 10277  013C48  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10278  013C4C  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10282  013C50  0E6B               	movlw	low _Font5x7
 10283  013C52  0100               	movlb	0	; () banked
 10284  013C54  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10285  013C56  0100               	movlb	0	; () banked
 10286  013C58  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10287  013C5A  0EFD               	movlw	high _Font5x7
 10288  013C5C  0100               	movlb	0	; () banked
 10289  013C5E  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10290  013C60  0100               	movlb	0	; () banked
 10291  013C62  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10295  013C64  0E00               	movlw	0
 10296  013C66  0100               	movlb	0	; () banked
 10297  013C68  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10298  013C6A                     l13374:
 10299                           
 10300                           ; BSR set to: 0
 10301  013C6A  0E04               	movlw	4
 10302  013C6C  0100               	movlb	0	; () banked
 10303  013C6E  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10304  013C70  D001               	goto	l1077
 10305  013C72  D043               	goto	u9800
 10306  013C74                     l1077:
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;Console.c: 444: {
 10310                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10311                           
 10312                           ; BSR set to: 0
 10313  013C74  0E00               	movlw	0
 10314  013C76  0100               	movlb	0	; () banked
 10315  013C78  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10316  013C7A                     l13380:
 10317                           
 10318                           ; BSR set to: 0
 10319  013C7A  0E06               	movlw	6
 10320  013C7C  0100               	movlb	0	; () banked
 10321  013C7E  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10322  013C80  D001               	goto	l1079
 10323  013C82  D035               	goto	u9790
 10324  013C84                     l1079:
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10328                           
 10329                           ; BSR set to: 0
 10330  013C84  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10331  013C88  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10332  013C8C  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10333  013C90  ECEB  F0AF         	call	_Byte_GetBit	;wreg free
 10334  013C94  0900               	iorlw	0
 10335  013C96  A4D8               	btfss	status,2,c
 10336  013C98  D005               	goto	l1082
 10337  013C9A  C085  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 10338  013C9E  C086  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10339  013CA2  D004               	goto	l1084
 10340  013CA4                     l1082:
 10341  013CA4  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 10342  013CA8  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10343  013CAC                     l1084:
 10344  013CAC  0100               	movlb	0	; () banked
 10345  013CAE  51CB               	movf	Console_MakeField@y& (0+255),w,b
 10346  013CB0  0D0A               	mullw	10
 10347  013CB2  0E64               	movlw	low Console_MakeField@Fill
 10348  013CB4  0100               	movlb	0	; () banked
 10349  013CB6  6FC1               	movwf	??_Console_MakeField& (0+255),b
 10350  013CB8  0E04               	movlw	high Console_MakeField@Fill
 10351  013CBA  0100               	movlb	0	; () banked
 10352  013CBC  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 10353  013CBE  50F3               	movf	prodl,w,c
 10354  013CC0  0100               	movlb	0	; () banked
 10355  013CC2  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 10356  013CC4  50F4               	movf	prodh,w,c
 10357  013CC6  0100               	movlb	0	; () banked
 10358  013CC8  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10359  013CCA  0100               	movlb	0	; () banked
 10360  013CCC  51CA               	movf	Console_MakeField@x& (0+255),w,b
 10361  013CCE  0D02               	mullw	2
 10362  013CD0  50F3               	movf	prodl,w,c
 10363  013CD2  0100               	movlb	0	; () banked
 10364  013CD4  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 10365  013CD6  6ED9               	movwf	fsr2l,c
 10366  013CD8  50F4               	movf	prodh,w,c
 10367  013CDA  0100               	movlb	0	; () banked
 10368  013CDC  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10369  013CDE  6EDA               	movwf	fsr2h,c
 10370  013CE0  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 10371  013CE4  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10372                           
 10373                           ; BSR set to: 0
 10374  013CE8  0100               	movlb	0	; () banked
 10375  013CEA  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 10376  013CEC  D7C6               	goto	l13380
 10377  013CEE                     u9790:
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;Console.c: 447: Column += 1;
 10381                           
 10382                           ; BSR set to: 0
 10383  013CEE  0100               	movlb	0	; () banked
 10384  013CF0  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 10385  013CF2  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10386  013CF4  0100               	movlb	0	; () banked
 10387  013CF6  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 10388  013CF8  D7B8               	goto	l13374
 10389  013CFA                     u9800:
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;Console.c: 448: }
 10393                           ;Console.c: 449: return (ColourPtr)Fill;
 10394                           
 10395                           ; BSR set to: 0
 10396  013CFA  0E64               	movlw	low Console_MakeField@Fill
 10397  013CFC  0100               	movlb	0	; () banked
 10398  013CFE  6FBF               	movwf	?_Console_MakeField& (0+255),b
 10399  013D00  0E04               	movlw	high Console_MakeField@Fill
 10400  013D02  0100               	movlb	0	; () banked
 10401  013D04  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 10402  013D06  0012               	return	
 10403  013D08                     __end_of_Console_MakeField:
 10404                           	opt stack 0
 10405                           tblptru	equ	0xFF8
 10406                           tblptrh	equ	0xFF7
 10407                           tblptrl	equ	0xFF6
 10408                           tablat	equ	0xFF5
 10409                           prodh	equ	0xFF4
 10410                           prodl	equ	0xFF3
 10411                           intcon	equ	0xFF2
 10412                           postinc0	equ	0xFEE
 10413                           wreg	equ	0xFE8
 10414                           postdec1	equ	0xFE5
 10415                           fsr1h	equ	0xFE2
 10416                           fsr1l	equ	0xFE1
 10417                           indf2	equ	0xFDF
 10418                           postinc2	equ	0xFDE
 10419                           postdec2	equ	0xFDD
 10420                           fsr2h	equ	0xFDA
 10421                           fsr2l	equ	0xFD9
 10422                           status	equ	0xFD8
 10423                           
 10424 ;; *************** function _Byte_GetBit *****************
 10425 ;; Defined at:
 10426 ;;		line 38 in file "Library/Types.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10429 ;;		 -> Font5x7(480), 
 10430 ;;  pBit            1    2[BANK0 ] unsigned char 
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;  Output          1    4[BANK0 ] unsigned char 
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  1    wreg      unsigned char 
 10435 ;; Registers used:
 10436 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10442 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10445 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;Total ram usage:        5 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    7
 10449 ;; This function calls:
 10450 ;;		Nothing
 10451 ;; This function is called by:
 10452 ;;		_Console_MakeField
 10453 ;;		_Word_GetBit
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text44
 10458  015FD6                     __ptext44:
 10459                           	opt stack 0
 10460  015FD6                     _Byte_GetBit:
 10461                           	opt stack 19
 10462                           
 10463                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;incstack = 0
 10467  015FD6  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10468  015FDA  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10469  015FDE                     	if	0	;tblptru may be non-zero
 10470  015FDE                     	endif
 10471  015FDE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10472  015FDE  0E00               	movlw	low (__mediumconst shr (0+16))
 10473  015FE0  6EF8               	movwf	tblptru,c
 10474  015FE2                     	endif
 10475  015FE2  0008               	tblrd		*
 10476  015FE4  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 10477                           
 10478                           ;Types.c: 42: Output >>= pBit;
 10479  015FE8  0100               	movlb	0	; () banked
 10480  015FEA  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 10481  015FEC  0100               	movlb	0	; () banked
 10482  015FEE  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 10483  015FF0  D003               	goto	u9400
 10484  015FF2                     u9405:
 10485  015FF2  0100               	movlb	0	; () banked
 10486  015FF4  90D8               	bcf	status,0,c
 10487  015FF6  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10488  015FF8                     u9400:
 10489  015FF8  0100               	movlb	0	; () banked
 10490  015FFA  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 10491  015FFC  D7FA               	goto	u9405
 10492                           
 10493                           ;Types.c: 43: Output &= 1;
 10494  015FFE  0E01               	movlw	1
 10495  016000  0100               	movlb	0	; () banked
 10496  016002  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;Types.c: 44: return Output;
 10500  016004  0100               	movlb	0	; () banked
 10501  016006  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 10502  016008  0012               	return	
 10503  01600A                     __end_of_Byte_GetBit:
 10504                           	opt stack 0
 10505                           tblptru	equ	0xFF8
 10506                           tblptrh	equ	0xFF7
 10507                           tblptrl	equ	0xFF6
 10508                           tablat	equ	0xFF5
 10509                           prodh	equ	0xFF4
 10510                           prodl	equ	0xFF3
 10511                           intcon	equ	0xFF2
 10512                           postinc0	equ	0xFEE
 10513                           wreg	equ	0xFE8
 10514                           postdec1	equ	0xFE5
 10515                           fsr1h	equ	0xFE2
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           fsr2h	equ	0xFDA
 10521                           fsr2l	equ	0xFD9
 10522                           status	equ	0xFD8
 10523                           
 10524 ;; *************** function _ADC_Voltage *****************
 10525 ;; Defined at:
 10526 ;;		line 259 in file "Library/ADC.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10529 ;;		 -> ADC_AN0(5), 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  output          4   53[BANK0 ] float 
 10532 ;;  ref             4   49[BANK0 ] const float 
 10533 ;;  max             4   45[BANK0 ] const float 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  4   39[BANK0 ] float 
 10536 ;; Registers used:
 10537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;Total ram usage:       18 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    8
 10550 ;; This function calls:
 10551 ;;		___fldiv
 10552 ;;		___flmul
 10553 ;;		___xxtofl
 10554 ;; This function is called by:
 10555 ;;		_findClosestWall
 10556 ;;		_mode1
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text45
 10561  0138DE                     __ptext45:
 10562                           	opt stack 0
 10563  0138DE                     _ADC_Voltage:
 10564                           	opt stack 20
 10565                           
 10566                           ;ADC.c: 261: const float max = 1024;
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;incstack = 0
 10570  0138DE  0E00               	movlw	0
 10571  0138E0  0100               	movlb	0	; () banked
 10572  0138E2  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 10573  0138E4  0E00               	movlw	0
 10574  0138E6  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10575  0138E8  0E80               	movlw	128
 10576  0138EA  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10577  0138EC  0E44               	movlw	68
 10578  0138EE  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10579                           
 10580                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10581  0138F0  0E33               	movlw	51
 10582  0138F2  0100               	movlb	0	; () banked
 10583  0138F4  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 10584  0138F6  0E33               	movlw	51
 10585  0138F8  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10586  0138FA  0E53               	movlw	83
 10587  0138FC  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10588  0138FE  0E40               	movlw	64
 10589  013900  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;ADC.c: 263: float output = pInput->mValue;
 10593  013902  0100               	movlb	0	; () banked
 10594  013904  EE20 F001          	lfsr	2,1
 10595  013908  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 10596  01390A  26D9               	addwf	fsr2l,f,c
 10597  01390C  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10598  01390E  22DA               	addwfc	fsr2h,f,c
 10599  013910  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 10600  013914  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 10601  013918  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 10602  01391C  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10603  013920  0100               	movlb	0	; () banked
 10604  013922  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 10605  013924  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 10606  013926  0E00               	movlw	0
 10607  013928  ECEC  F090         	call	___xxtofl
 10608  01392C  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 10609  013930  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10610  013934  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10611  013938  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10612                           
 10613                           ;ADC.c: 265: output /= max;
 10614  01393C  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 10615  013940  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10616  013944  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10617  013948  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10618  01394C  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 10619  013950  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10620  013954  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10621  013958  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10622  01395C  EC4C  F086         	call	___fldiv	;wreg free
 10623  013960  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 10624  013964  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 10625  013968  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 10626  01396C  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 10627                           
 10628                           ;ADC.c: 266: output *= ref;
 10629  013970  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 10630  013974  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 10631  013978  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 10632  01397C  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 10633  013980  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 10634  013984  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10635  013988  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10636  01398C  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10637  013990  EC00  F080         	call	___flmul	;wreg free
 10638  013994  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 10639  013998  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 10640  01399C  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 10641  0139A0  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 10642                           
 10643                           ;ADC.c: 268: return output + (float)0.000;
 10644  0139A4  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 10645  0139A8  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10646  0139AC  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10647  0139B0  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10648  0139B4  0012               	return	
 10649  0139B6                     __end_of_ADC_Voltage:
 10650                           	opt stack 0
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           postinc0	equ	0xFEE
 10659                           wreg	equ	0xFE8
 10660                           postdec1	equ	0xFE5
 10661                           fsr1h	equ	0xFE2
 10662                           fsr1l	equ	0xFE1
 10663                           indf2	equ	0xFDF
 10664                           postinc2	equ	0xFDE
 10665                           postdec2	equ	0xFDD
 10666                           fsr2h	equ	0xFDA
 10667                           fsr2l	equ	0xFD9
 10668                           status	equ	0xFD8
 10669                           
 10670 ;; *************** function ___xxtofl *****************
 10671 ;; Defined at:
 10672 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;  sign            1    wreg     unsigned char 
 10675 ;;  val             4    0[BANK0 ] long 
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;  sign            1    8[BANK0 ] unsigned char 
 10678 ;;  arg             4   10[BANK0 ] unsigned long 
 10679 ;;  exp             1    9[BANK0 ] unsigned char 
 10680 ;; Return value:  Size  Location     Type
 10681 ;;                  4    0[BANK0 ] unsigned char 
 10682 ;; Registers used:
 10683 ;;		wreg, status,2, status,0
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;Total ram usage:       14 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; Hardware stack levels required when called:    7
 10696 ;; This function calls:
 10697 ;;		Nothing
 10698 ;; This function is called by:
 10699 ;;		_ADC_Voltage
 10700 ;;		_findClosestWall
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	text46
 10705  0121D8                     __ptext46:
 10706                           	opt stack 0
 10707  0121D8                     ___xxtofl:
 10708                           	opt stack 21
 10709                           
 10710                           ;incstack = 0
 10711                           ;___xxtofl@sign stored from wreg
 10712  0121D8  0100               	movlb	0	; () banked
 10713  0121DA  6FC2               	movwf	___xxtofl@sign& (0+255),b
 10714  0121DC  0100               	movlb	0	; () banked
 10715  0121DE  51C2               	movf	___xxtofl@sign& (0+255),w,b
 10716  0121E0  0100               	movlb	0	; () banked
 10717  0121E2  B4D8               	btfsc	status,2,c
 10718  0121E4  D01E               	goto	l2994
 10719                           
 10720                           ; BSR set to: 0
 10721  0121E6  0100               	movlb	0	; () banked
 10722  0121E8  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10723  0121EA  D01B               	goto	l2994
 10724                           
 10725                           ; BSR set to: 0
 10726  0121EC  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 10727  0121F0  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 10728  0121F4  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 10729  0121F8  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 10730  0121FC  0100               	movlb	0	; () banked
 10731  0121FE  1FBE               	comf	??___xxtofl& (0+255),f,b
 10732  012200  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 10733  012202  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 10734  012204  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 10735  012206  2BBE               	incf	??___xxtofl& (0+255),f,b
 10736  012208  0E00               	movlw	0
 10737  01220A  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10738  01220C  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10739  01220E  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10740  012210  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 10741  012214  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 10742  012218  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 10743  01221C  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 10744  012220  D008               	goto	l2995
 10745  012222                     l2994:
 10746                           
 10747                           ; BSR set to: 0
 10748  012222  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 10749  012226  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10750  01222A  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10751  01222E  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10752  012232                     l2995:
 10753                           
 10754                           ; BSR set to: 0
 10755                           
 10756                           ; BSR set to: 0
 10757  012232  0100               	movlb	0	; () banked
 10758  012234  51BA               	movf	___xxtofl@val& (0+255),w,b
 10759  012236  0100               	movlb	0	; () banked
 10760  012238  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10761  01223A  0100               	movlb	0	; () banked
 10762  01223C  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10763  01223E  0100               	movlb	0	; () banked
 10764  012240  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10765  012242  A4D8               	btfss	status,2,c
 10766  012244  D00A               	goto	l2996
 10767                           
 10768                           ; BSR set to: 0
 10769  012246  0E00               	movlw	0
 10770  012248  0100               	movlb	0	; () banked
 10771  01224A  6FBA               	movwf	?___xxtofl& (0+255),b
 10772  01224C  0E00               	movlw	0
 10773  01224E  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 10774  012250  0E00               	movlw	0
 10775  012252  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 10776  012254  0E00               	movlw	0
 10777  012256  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 10778                           
 10779                           ; BSR set to: 0
 10780  012258  0012               	return	
 10781  01225A                     l2996:
 10782                           
 10783                           ; BSR set to: 0
 10784                           
 10785                           ; BSR set to: 0
 10786  01225A  0E96               	movlw	150
 10787  01225C  0100               	movlb	0	; () banked
 10788  01225E  6FC3               	movwf	___xxtofl@exp& (0+255),b
 10789  012260  D008               	goto	l2998
 10790  012262                     
 10791                           ; BSR set to: 0
 10792                           
 10793                           ; BSR set to: 0
 10794  012262  0100               	movlb	0	; () banked
 10795  012264  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 10796  012266  0100               	movlb	0	; () banked
 10797  012268  90D8               	bcf	status,0,c
 10798  01226A  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10799  01226C  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10800  01226E  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10801  012270  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 10802  012272                     l2998:
 10803                           
 10804                           ; BSR set to: 0
 10805                           
 10806                           ; BSR set to: 0
 10807  012272  0E00               	movlw	0
 10808  012274  0100               	movlb	0	; () banked
 10809  012276  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 10810  012278  0100               	movlb	0	; () banked
 10811  01227A  6FBE               	movwf	??___xxtofl& (0+255),b
 10812  01227C  0E00               	movlw	0
 10813  01227E  0100               	movlb	0	; () banked
 10814  012280  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10815  012282  0100               	movlb	0	; () banked
 10816  012284  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 10817  012286  0E00               	movlw	0
 10818  012288  0100               	movlb	0	; () banked
 10819  01228A  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10820  01228C  0100               	movlb	0	; () banked
 10821  01228E  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 10822  012290  0EFE               	movlw	254
 10823  012292  0100               	movlb	0	; () banked
 10824  012294  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10825  012296  0100               	movlb	0	; () banked
 10826  012298  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 10827  01229A  0100               	movlb	0	; () banked
 10828  01229C  51BE               	movf	??___xxtofl& (0+255),w,b
 10829  01229E  0100               	movlb	0	; () banked
 10830  0122A0  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10831  0122A2  0100               	movlb	0	; () banked
 10832  0122A4  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10833  0122A6  0100               	movlb	0	; () banked
 10834  0122A8  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10835  0122AA  B4D8               	btfsc	status,2,c
 10836  0122AC  D010               	goto	l3001
 10837  0122AE  D7D9               	goto	l2999
 10838  0122B0                     
 10839                           ; BSR set to: 0
 10840                           
 10841                           ; BSR set to: 0
 10842  0122B0  0100               	movlb	0	; () banked
 10843  0122B2  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 10844                           
 10845                           ; BSR set to: 0
 10846  0122B4  0E01               	movlw	1
 10847  0122B6  0100               	movlb	0	; () banked
 10848  0122B8  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 10849  0122BA  0E00               	movlw	0
 10850  0122BC  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 10851  0122BE  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 10852  0122C0  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 10853                           
 10854                           ; BSR set to: 0
 10855  0122C2  0100               	movlb	0	; () banked
 10856  0122C4  90D8               	bcf	status,0,c
 10857  0122C6  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10858  0122C8  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10859  0122CA  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10860  0122CC  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 10861  0122CE                     l3001:
 10862                           
 10863                           ; BSR set to: 0
 10864  0122CE  0E00               	movlw	0
 10865  0122D0  0100               	movlb	0	; () banked
 10866  0122D2  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 10867  0122D4  0100               	movlb	0	; () banked
 10868  0122D6  6FBE               	movwf	??___xxtofl& (0+255),b
 10869  0122D8  0E00               	movlw	0
 10870  0122DA  0100               	movlb	0	; () banked
 10871  0122DC  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10872  0122DE  0100               	movlb	0	; () banked
 10873  0122E0  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 10874  0122E2  0E00               	movlw	0
 10875  0122E4  0100               	movlb	0	; () banked
 10876  0122E6  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10877  0122E8  0100               	movlb	0	; () banked
 10878  0122EA  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 10879  0122EC  0EFF               	movlw	255
 10880  0122EE  0100               	movlb	0	; () banked
 10881  0122F0  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10882  0122F2  0100               	movlb	0	; () banked
 10883  0122F4  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 10884  0122F6  0100               	movlb	0	; () banked
 10885  0122F8  51BE               	movf	??___xxtofl& (0+255),w,b
 10886  0122FA  0100               	movlb	0	; () banked
 10887  0122FC  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10888  0122FE  0100               	movlb	0	; () banked
 10889  012300  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10890  012302  0100               	movlb	0	; () banked
 10891  012304  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10892  012306  B4D8               	btfsc	status,2,c
 10893  012308  D009               	goto	l3004
 10894  01230A  D7D2               	goto	l3002
 10895  01230C                     
 10896                           ; BSR set to: 0
 10897                           
 10898                           ; BSR set to: 0
 10899  01230C  0100               	movlb	0	; () banked
 10900  01230E  07C3               	decf	___xxtofl@exp& (0+255),f,b
 10901  012310  0100               	movlb	0	; () banked
 10902  012312  90D8               	bcf	status,0,c
 10903  012314  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 10904  012316  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 10905  012318  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 10906  01231A  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 10907  01231C                     l3004:
 10908                           
 10909                           ; BSR set to: 0
 10910                           
 10911                           ; BSR set to: 0
 10912  01231C  0100               	movlb	0	; () banked
 10913  01231E  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 10914  012320  D004               	goto	u10430
 10915                           
 10916                           ; BSR set to: 0
 10917  012322  0E02               	movlw	2
 10918  012324  0100               	movlb	0	; () banked
 10919  012326  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 10920  012328  D7F1               	goto	l3005
 10921  01232A                     u10430:
 10922                           
 10923                           ; BSR set to: 0
 10924                           
 10925                           ; BSR set to: 0
 10926  01232A  0100               	movlb	0	; () banked
 10927  01232C  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 10928  01232E  D009               	goto	l3009
 10929                           
 10930                           ; BSR set to: 0
 10931  012330  0EFF               	movlw	255
 10932  012332  0100               	movlb	0	; () banked
 10933  012334  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 10934  012336  0EFF               	movlw	255
 10935  012338  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 10936  01233A  0E7F               	movlw	127
 10937  01233C  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 10938  01233E  0EFF               	movlw	255
 10939  012340  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 10940  012342                     l3009:
 10941                           
 10942                           ; BSR set to: 0
 10943  012342  0100               	movlb	0	; () banked
 10944  012344  90D8               	bcf	status,0,c
 10945  012346  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 10946  012348  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 10947  01234C  0100               	movlb	0	; () banked
 10948  01234E  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 10949  012350  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 10950  012352  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 10951  012354  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 10952  012358  0100               	movlb	0	; () banked
 10953  01235A  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 10954  01235C  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 10955  01235E  6BBE               	clrf	??___xxtofl& (0+255),b
 10956  012360  0100               	movlb	0	; () banked
 10957  012362  51BE               	movf	??___xxtofl& (0+255),w,b
 10958  012364  0100               	movlb	0	; () banked
 10959  012366  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 10960  012368  0100               	movlb	0	; () banked
 10961  01236A  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 10962  01236C  0100               	movlb	0	; () banked
 10963  01236E  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 10964  012370  0100               	movlb	0	; () banked
 10965  012372  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 10966  012374  0100               	movlb	0	; () banked
 10967  012376  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 10968  012378  0100               	movlb	0	; () banked
 10969  01237A  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 10970  01237C  0100               	movlb	0	; () banked
 10971  01237E  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 10972                           
 10973                           ; BSR set to: 0
 10974  012380  0100               	movlb	0	; () banked
 10975  012382  51C2               	movf	___xxtofl@sign& (0+255),w,b
 10976  012384  0100               	movlb	0	; () banked
 10977  012386  B4D8               	btfsc	status,2,c
 10978  012388  D005               	goto	l3010
 10979                           
 10980                           ; BSR set to: 0
 10981  01238A  0100               	movlb	0	; () banked
 10982  01238C  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10983  01238E  D002               	goto	l3010
 10984                           
 10985                           ; BSR set to: 0
 10986  012390  0100               	movlb	0	; () banked
 10987  012392  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 10988  012394                     l3010:
 10989                           
 10990                           ; BSR set to: 0
 10991                           
 10992                           ; BSR set to: 0
 10993  012394  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 10994  012398  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 10995  01239C  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 10996  0123A0  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 10997  0123A4  0012               	return	
 10998  0123A6                     __end_of___xxtofl:
 10999                           	opt stack 0
 11000                           tblptru	equ	0xFF8
 11001                           tblptrh	equ	0xFF7
 11002                           tblptrl	equ	0xFF6
 11003                           tablat	equ	0xFF5
 11004                           prodh	equ	0xFF4
 11005                           prodl	equ	0xFF3
 11006                           intcon	equ	0xFF2
 11007                           postinc0	equ	0xFEE
 11008                           wreg	equ	0xFE8
 11009                           postdec1	equ	0xFE5
 11010                           fsr1h	equ	0xFE2
 11011                           fsr1l	equ	0xFE1
 11012                           indf2	equ	0xFDF
 11013                           postinc2	equ	0xFDE
 11014                           postdec2	equ	0xFDD
 11015                           fsr2h	equ	0xFDA
 11016                           fsr2l	equ	0xFD9
 11017                           status	equ	0xFD8
 11018                           
 11019 ;; *************** function ___flmul *****************
 11020 ;; Defined at:
 11021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;  b               4   14[BANK0 ] unsigned char 
 11024 ;;  a               4   18[BANK0 ] unsigned char 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  prod            4   33[BANK0 ] struct .
 11027 ;;  grs             4   28[BANK0 ] unsigned long 
 11028 ;;  temp            2   37[BANK0 ] struct .
 11029 ;;  bexp            1   32[BANK0 ] unsigned char 
 11030 ;;  aexp            1   27[BANK0 ] unsigned char 
 11031 ;;  sign            1   26[BANK0 ] unsigned char 
 11032 ;; Return value:  Size  Location     Type
 11033 ;;                  4   14[BANK0 ] unsigned char 
 11034 ;; Registers used:
 11035 ;;		wreg, status,2, status,0, prodl, prodh
 11036 ;; Tracked objects:
 11037 ;;		On entry : 0/0
 11038 ;;		On exit  : 0/0
 11039 ;;		Unchanged: 0/0
 11040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11041 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11045 ;;Total ram usage:       25 bytes
 11046 ;; Hardware stack levels used:    1
 11047 ;; Hardware stack levels required when called:    7
 11048 ;; This function calls:
 11049 ;;		Nothing
 11050 ;; This function is called by:
 11051 ;;		_ADC_Voltage
 11052 ;;		_findClosestWall
 11053 ;; This function uses a non-reentrant model
 11054 ;;
 11055                           
 11056                           	psect	text47
 11057  010000                     __ptext47:
 11058                           	opt stack 0
 11059  010000                     ___flmul:
 11060                           	opt stack 21
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;incstack = 0
 11064  010000  0100               	movlb	0	; () banked
 11065  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11066  010004  0B80               	andlw	128
 11067  010006  0100               	movlb	0	; () banked
 11068  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11069  01000A  0100               	movlb	0	; () banked
 11070  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11071  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11072  010010  0100               	movlb	0	; () banked
 11073  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11074                           
 11075                           ; BSR set to: 0
 11076  010014  0100               	movlb	0	; () banked
 11077  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11078  010018  D002               	goto	l2965
 11079                           
 11080                           ; BSR set to: 0
 11081  01001A  0100               	movlb	0	; () banked
 11082  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11083  01001E                     l2965:
 11084                           
 11085                           ; BSR set to: 0
 11086                           
 11087                           ; BSR set to: 0
 11088  01001E  0100               	movlb	0	; () banked
 11089  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11090  010022  0100               	movlb	0	; () banked
 11091  010024  B4D8               	btfsc	status,2,c
 11092  010026  D010               	goto	l2966
 11093                           
 11094                           ; BSR set to: 0
 11095  010028  0100               	movlb	0	; () banked
 11096  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11097  01002C  A4D8               	btfss	status,2,c
 11098  01002E  D009               	goto	l2967
 11099                           
 11100                           ; BSR set to: 0
 11101  010030  0E00               	movlw	0
 11102  010032  0100               	movlb	0	; () banked
 11103  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11104  010036  0E00               	movlw	0
 11105  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11106  01003A  0E00               	movlw	0
 11107  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11108  01003E  0E00               	movlw	0
 11109  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11110  010042                     l2967:
 11111                           
 11112                           ; BSR set to: 0
 11113                           
 11114                           ; BSR set to: 0
 11115  010042  0100               	movlb	0	; () banked
 11116  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11117  010046  D009               	goto	l2968
 11118  010048                     l2966:
 11119                           
 11120                           ; BSR set to: 0
 11121                           
 11122                           ; BSR set to: 0
 11123  010048  0E00               	movlw	0
 11124  01004A  0100               	movlb	0	; () banked
 11125  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11126  01004E  0E00               	movlw	0
 11127  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11128  010052  0E00               	movlw	0
 11129  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11130  010056  0E00               	movlw	0
 11131  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11132  01005A                     l2968:
 11133                           
 11134                           ; BSR set to: 0
 11135                           
 11136                           ; BSR set to: 0
 11137  01005A  0100               	movlb	0	; () banked
 11138  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11139  01005E  0B80               	andlw	128
 11140  010060  0100               	movlb	0	; () banked
 11141  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11142                           
 11143                           ; BSR set to: 0
 11144  010064  0100               	movlb	0	; () banked
 11145  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11146  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11147  01006A  0100               	movlb	0	; () banked
 11148  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11149                           
 11150                           ; BSR set to: 0
 11151  01006E  0100               	movlb	0	; () banked
 11152  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11153  010072  D002               	goto	l2969
 11154                           
 11155                           ; BSR set to: 0
 11156  010074  0100               	movlb	0	; () banked
 11157  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11158  010078                     l2969:
 11159                           
 11160                           ; BSR set to: 0
 11161                           
 11162                           ; BSR set to: 0
 11163  010078  0100               	movlb	0	; () banked
 11164  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11165  01007C  0100               	movlb	0	; () banked
 11166  01007E  B4D8               	btfsc	status,2,c
 11167  010080  D010               	goto	l2970
 11168                           
 11169                           ; BSR set to: 0
 11170  010082  0100               	movlb	0	; () banked
 11171  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11172  010086  A4D8               	btfss	status,2,c
 11173  010088  D009               	goto	l2971
 11174                           
 11175                           ; BSR set to: 0
 11176  01008A  0E00               	movlw	0
 11177  01008C  0100               	movlb	0	; () banked
 11178  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11179  010090  0E00               	movlw	0
 11180  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11181  010094  0E00               	movlw	0
 11182  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11183  010098  0E00               	movlw	0
 11184  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11185  01009C                     l2971:
 11186                           
 11187                           ; BSR set to: 0
 11188                           
 11189                           ; BSR set to: 0
 11190  01009C  0100               	movlb	0	; () banked
 11191  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11192  0100A0  D009               	goto	l2972
 11193  0100A2                     l2970:
 11194                           
 11195                           ; BSR set to: 0
 11196                           
 11197                           ; BSR set to: 0
 11198  0100A2  0E00               	movlw	0
 11199  0100A4  0100               	movlb	0	; () banked
 11200  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11201  0100A8  0E00               	movlw	0
 11202  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11203  0100AC  0E00               	movlw	0
 11204  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11205  0100B0  0E00               	movlw	0
 11206  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11207  0100B4                     l2972:
 11208                           
 11209                           ; BSR set to: 0
 11210  0100B4  0100               	movlb	0	; () banked
 11211  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11212  0100B8  0100               	movlb	0	; () banked
 11213  0100BA  B4D8               	btfsc	status,2,c
 11214  0100BC  D005               	goto	u10250
 11215                           
 11216                           ; BSR set to: 0
 11217  0100BE  0100               	movlb	0	; () banked
 11218  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11219  0100C2  0100               	movlb	0	; () banked
 11220  0100C4  A4D8               	btfss	status,2,c
 11221  0100C6  D00A               	goto	l2973
 11222  0100C8                     u10250:
 11223                           
 11224                           ; BSR set to: 0
 11225                           
 11226                           ; BSR set to: 0
 11227  0100C8  0E00               	movlw	0
 11228  0100CA  0100               	movlb	0	; () banked
 11229  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11230  0100CE  0E00               	movlw	0
 11231  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11232  0100D2  0E00               	movlw	0
 11233  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11234  0100D6  0E00               	movlw	0
 11235  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238  0100DA  0012               	return	
 11239  0100DC                     l2973:
 11240                           
 11241                           ; BSR set to: 0
 11242                           
 11243                           ; BSR set to: 0
 11244  0100DC  0100               	movlb	0	; () banked
 11245  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11246  0100E0  0100               	movlb	0	; () banked
 11247  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11248  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11249  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11250                           
 11251                           ; BSR set to: 0
 11252  0100EC  0100               	movlb	0	; () banked
 11253  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11254  0100F0  0100               	movlb	0	; () banked
 11255  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11256  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11257  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11258  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11259                           
 11260                           ; BSR set to: 0
 11261  0100FA  0100               	movlb	0	; () banked
 11262  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11263  0100FE  0100               	movlb	0	; () banked
 11264  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11265  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11266  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11267  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11268  010108  0100               	movlb	0	; () banked
 11269  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11270  01010C  0100               	movlb	0	; () banked
 11271  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11272  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11273  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11274                           
 11275                           ; BSR set to: 0
 11276  010118  0100               	movlb	0	; () banked
 11277  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11278  01011C  0100               	movlb	0	; () banked
 11279  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11280  010120  0E00               	movlw	0
 11281  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11282  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11283  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11284                           
 11285                           ; BSR set to: 0
 11286  010128  0100               	movlb	0	; () banked
 11287  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11288  01012C  0100               	movlb	0	; () banked
 11289  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11290  010130  0E00               	movlw	0
 11291  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11292  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11293  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11294  010138  0100               	movlb	0	; () banked
 11295  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11296  01013C  0100               	movlb	0	; () banked
 11297  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11298  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11299  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11300                           
 11301                           ; BSR set to: 0
 11302  010148  0100               	movlb	0	; () banked
 11303  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11304  01014C  0100               	movlb	0	; () banked
 11305  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11306  010150  0E00               	movlw	0
 11307  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11308  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11309  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11310                           
 11311                           ; BSR set to: 0
 11312  010158  0100               	movlb	0	; () banked
 11313  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11314  01015C  0100               	movlb	0	; () banked
 11315  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11316  010160  0E00               	movlw	0
 11317  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11318  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11319  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11320                           
 11321                           ; BSR set to: 0
 11322  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11323  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11324  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11325  010174  0100               	movlb	0	; () banked
 11326  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11327                           
 11328                           ; BSR set to: 0
 11329  010178  0100               	movlb	0	; () banked
 11330  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11331  01017C  0100               	movlb	0	; () banked
 11332  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11333  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 11334  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11335                           
 11336                           ; BSR set to: 0
 11337  010188  0100               	movlb	0	; () banked
 11338  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 11339  01018C  0100               	movlb	0	; () banked
 11340  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11341  010190  0100               	movlb	0	; () banked
 11342  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11343  010194  0100               	movlb	0	; () banked
 11344  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11345  010198  0E00               	movlw	0
 11346  01019A  0100               	movlb	0	; () banked
 11347  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11348  01019E  0E00               	movlw	0
 11349  0101A0  0100               	movlb	0	; () banked
 11350  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11351                           
 11352                           ; BSR set to: 0
 11353  0101A4  0100               	movlb	0	; () banked
 11354  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11355  0101A8  0100               	movlb	0	; () banked
 11356  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 11357  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 11358  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11359                           
 11360                           ; BSR set to: 0
 11361  0101B4  0100               	movlb	0	; () banked
 11362  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 11363  0101B8  0100               	movlb	0	; () banked
 11364  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 11365  0101BC  0100               	movlb	0	; () banked
 11366  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11367  0101C0  0100               	movlb	0	; () banked
 11368  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11369  0101C4  0E00               	movlw	0
 11370  0101C6  0100               	movlb	0	; () banked
 11371  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11372  0101CA  0E00               	movlw	0
 11373  0101CC  0100               	movlb	0	; () banked
 11374  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11375                           
 11376                           ; BSR set to: 0
 11377  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11378  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11379  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11380  0101DC  0100               	movlb	0	; () banked
 11381  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 11382  0101E0  0100               	movlb	0	; () banked
 11383  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 11384  0101E4  0100               	movlb	0	; () banked
 11385  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 11386  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 11387  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11388                           
 11389                           ; BSR set to: 0
 11390  0101F0  0100               	movlb	0	; () banked
 11391  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 11392  0101F4  0100               	movlb	0	; () banked
 11393  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 11394  0101F8  0100               	movlb	0	; () banked
 11395  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11396  0101FC  0100               	movlb	0	; () banked
 11397  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11398  010200  0E00               	movlw	0
 11399  010202  0100               	movlb	0	; () banked
 11400  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11401  010206  0E00               	movlw	0
 11402  010208  0100               	movlb	0	; () banked
 11403  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11404                           
 11405                           ; BSR set to: 0
 11406  01020C  0100               	movlb	0	; () banked
 11407  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11408  010210  0100               	movlb	0	; () banked
 11409  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11410  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 11411  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11412  01021C  0100               	movlb	0	; () banked
 11413  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 11414  010220  0100               	movlb	0	; () banked
 11415  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 11416  010224  0100               	movlb	0	; () banked
 11417  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11418  010228  0100               	movlb	0	; () banked
 11419  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11420  01022C  0E00               	movlw	0
 11421  01022E  0100               	movlb	0	; () banked
 11422  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11423  010232  0E00               	movlw	0
 11424  010234  0100               	movlb	0	; () banked
 11425  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11426                           
 11427                           ; BSR set to: 0
 11428  010238  0100               	movlb	0	; () banked
 11429  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11430  01023C  0100               	movlb	0	; () banked
 11431  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11432  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 11433  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11434                           
 11435                           ; BSR set to: 0
 11436  010248  0100               	movlb	0	; () banked
 11437  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 11438  01024C  0100               	movlb	0	; () banked
 11439  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11440  010250  0100               	movlb	0	; () banked
 11441  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11442  010254  0100               	movlb	0	; () banked
 11443  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11444  010258  0E00               	movlw	0
 11445  01025A  0100               	movlb	0	; () banked
 11446  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11447  01025E  0E00               	movlw	0
 11448  010260  0100               	movlb	0	; () banked
 11449  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11450  010264  0100               	movlb	0	; () banked
 11451  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11452  010268  0100               	movlb	0	; () banked
 11453  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11454  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 11455  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11456                           
 11457                           ; BSR set to: 0
 11458  010274  0100               	movlb	0	; () banked
 11459  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 11460  010278  0100               	movlb	0	; () banked
 11461  01027A  6FD0               	movwf	??___flmul& (0+255),b
 11462  01027C  0100               	movlb	0	; () banked
 11463  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11464  010280  0100               	movlb	0	; () banked
 11465  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11466  010284  0100               	movlb	0	; () banked
 11467  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 11468  010288  0100               	movlb	0	; () banked
 11469  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 11470  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 11471  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 11472  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 11473  010298  0100               	movlb	0	; () banked
 11474  01029A  6BD0               	clrf	??___flmul& (0+255),b
 11475  01029C  0100               	movlb	0	; () banked
 11476  01029E  51D0               	movf	??___flmul& (0+255),w,b
 11477  0102A0  0100               	movlb	0	; () banked
 11478  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 11479  0102A4  0100               	movlb	0	; () banked
 11480  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11481  0102A8  0100               	movlb	0	; () banked
 11482  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11483  0102AC  0100               	movlb	0	; () banked
 11484  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11485  0102B0  0100               	movlb	0	; () banked
 11486  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11487  0102B4  0100               	movlb	0	; () banked
 11488  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11489  0102B8  0100               	movlb	0	; () banked
 11490  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11491                           
 11492                           ; BSR set to: 0
 11493  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 11494  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 11495  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 11496  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 11497  0102CC  0E19               	movlw	25
 11498  0102CE  D006               	goto	u10260
 11499  0102D0                     u10265:
 11500  0102D0  0100               	movlb	0	; () banked
 11501  0102D2  90D8               	bcf	status,0,c
 11502  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11503  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11504  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11505  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 11506  0102DC                     u10260:
 11507  0102DC  2EE8               	decfsz	wreg,f,c
 11508  0102DE  D7F8               	goto	u10265
 11509  0102E0  0100               	movlb	0	; () banked
 11510  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 11511  0102E4  0100               	movlb	0	; () banked
 11512  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 11513  0102E8  0100               	movlb	0	; () banked
 11514  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11515  0102EC  0100               	movlb	0	; () banked
 11516  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11517  0102F0  0100               	movlb	0	; () banked
 11518  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11519  0102F4  0100               	movlb	0	; () banked
 11520  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11521  0102F8  0100               	movlb	0	; () banked
 11522  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11523  0102FC  0100               	movlb	0	; () banked
 11524  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11525                           
 11526                           ; BSR set to: 0
 11527  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11528  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11529  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11530  01030C  0100               	movlb	0	; () banked
 11531  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 11532                           
 11533                           ; BSR set to: 0
 11534  010310  0100               	movlb	0	; () banked
 11535  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 11536  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 11537  010318  0100               	movlb	0	; () banked
 11538  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 11539  01031C  0100               	movlb	0	; () banked
 11540  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 11541  010320  0E00               	movlw	0
 11542  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 11543  010324  0E82               	movlw	130
 11544  010326  0100               	movlb	0	; () banked
 11545  010328  25D0               	addwf	??___flmul& (0+255),w,b
 11546  01032A  0100               	movlb	0	; () banked
 11547  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 11548  01032E  0EFF               	movlw	255
 11549  010330  0100               	movlb	0	; () banked
 11550  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 11551  010334  0100               	movlb	0	; () banked
 11552  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 11553  010338  D015               	goto	l2977
 11554  01033A                     
 11555                           ; BSR set to: 0
 11556                           
 11557                           ; BSR set to: 0
 11558  01033A  0100               	movlb	0	; () banked
 11559  01033C  90D8               	bcf	status,0,c
 11560  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 11561  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11562  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11563  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11564                           
 11565                           ; BSR set to: 0
 11566  010346  0100               	movlb	0	; () banked
 11567  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11568  01034A  D002               	goto	l2979
 11569                           
 11570                           ; BSR set to: 0
 11571  01034C  0100               	movlb	0	; () banked
 11572  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 11573  010350                     l2979:
 11574                           
 11575                           ; BSR set to: 0
 11576  010350  0100               	movlb	0	; () banked
 11577  010352  90D8               	bcf	status,0,c
 11578  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 11579  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11580  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11581  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11582  01035C  0100               	movlb	0	; () banked
 11583  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 11584  010360  A0D8               	btfss	status,0,c
 11585  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 11586  010364                     l2977:
 11587                           
 11588                           ; BSR set to: 0
 11589                           
 11590                           ; BSR set to: 0
 11591  010364  0100               	movlb	0	; () banked
 11592  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 11593  010368  D7E8               	goto	l2978
 11594                           
 11595                           ; BSR set to: 0
 11596                           
 11597                           ; BSR set to: 0
 11598  01036A  0E00               	movlw	0
 11599  01036C  0100               	movlb	0	; () banked
 11600  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 11601                           
 11602                           ; BSR set to: 0
 11603  010370  0100               	movlb	0	; () banked
 11604  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11605  010374  D024               	goto	l2984
 11606                           
 11607                           ; BSR set to: 0
 11608  010376  0EFF               	movlw	255
 11609  010378  0100               	movlb	0	; () banked
 11610  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 11611  01037C  0100               	movlb	0	; () banked
 11612  01037E  6FD0               	movwf	??___flmul& (0+255),b
 11613  010380  0EFF               	movlw	255
 11614  010382  0100               	movlb	0	; () banked
 11615  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 11616  010386  0100               	movlb	0	; () banked
 11617  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11618  01038A  0EFF               	movlw	255
 11619  01038C  0100               	movlb	0	; () banked
 11620  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 11621  010390  0100               	movlb	0	; () banked
 11622  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 11623  010394  0E7F               	movlw	127
 11624  010396  0100               	movlb	0	; () banked
 11625  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 11626  01039A  0100               	movlb	0	; () banked
 11627  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 11628  01039E  0100               	movlb	0	; () banked
 11629  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 11630  0103A2  0100               	movlb	0	; () banked
 11631  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 11632  0103A6  0100               	movlb	0	; () banked
 11633  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 11634  0103AA  0100               	movlb	0	; () banked
 11635  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 11636  0103AE  A4D8               	btfss	status,2,c
 11637  0103B0  D003               	goto	u10310
 11638                           
 11639                           ; BSR set to: 0
 11640                           
 11641                           ; BSR set to: 0
 11642  0103B2  0100               	movlb	0	; () banked
 11643  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 11644  0103B6  D003               	goto	l2984
 11645  0103B8                     u10310:
 11646                           
 11647                           ; BSR set to: 0
 11648  0103B8  0E01               	movlw	1
 11649  0103BA  0100               	movlb	0	; () banked
 11650  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 11651  0103BE                     l2984:
 11652                           
 11653                           ; BSR set to: 0
 11654                           
 11655                           ; BSR set to: 0
 11656                           
 11657                           ; BSR set to: 0
 11658  0103BE  0100               	movlb	0	; () banked
 11659  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 11660  0103C2  0100               	movlb	0	; () banked
 11661  0103C4  B4D8               	btfsc	status,2,c
 11662  0103C6  D023               	goto	l2986
 11663                           
 11664                           ; BSR set to: 0
 11665  0103C8  0E01               	movlw	1
 11666  0103CA  0100               	movlb	0	; () banked
 11667  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 11668  0103CE  0E00               	movlw	0
 11669  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11670  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11671  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11672                           
 11673                           ; BSR set to: 0
 11674  0103D6  0100               	movlb	0	; () banked
 11675  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 11676  0103DA  D019               	goto	l2986
 11677                           
 11678                           ; BSR set to: 0
 11679  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 11680  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 11681  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 11682  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 11683  0103EC  0100               	movlb	0	; () banked
 11684  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 11685  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11686  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11687  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11688  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 11689  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 11690  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 11691  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 11692  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 11693                           
 11694                           ; BSR set to: 0
 11695  010408  0100               	movlb	0	; () banked
 11696  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 11697  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 11698  01040E                     l2986:
 11699                           
 11700                           ; BSR set to: 0
 11701                           
 11702                           ; BSR set to: 0
 11703                           
 11704                           ; BSR set to: 0
 11705  01040E  0100               	movlb	0	; () banked
 11706  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11707  010412  D010               	goto	l2987
 11708  010414  0100               	movlb	0	; () banked
 11709  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11710  010418  E104               	bnz	u10340
 11711  01041A  0100               	movlb	0	; () banked
 11712  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 11713  01041E  A0D8               	btfss	status,0,c
 11714  010420  D009               	goto	l2987
 11715  010422                     u10340:
 11716                           
 11717                           ; BSR set to: 0
 11718  010422  0E00               	movlw	0
 11719  010424  0100               	movlb	0	; () banked
 11720  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 11721  010428  0E00               	movlw	0
 11722  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 11723  01042C  0E80               	movlw	128
 11724  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 11725  010430  0E7F               	movlw	127
 11726  010432  D02B               	goto	L5
 11727  010434                     l2987:
 11728                           
 11729                           ; BSR set to: 0
 11730                           
 11731                           ; BSR set to: 0
 11732  010434  0100               	movlb	0	; () banked
 11733  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11734  010438  D007               	goto	u10350
 11735  01043A  0100               	movlb	0	; () banked
 11736  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11737  01043E  E111               	bnz	l2989
 11738  010440  0100               	movlb	0	; () banked
 11739  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 11740  010444  B0D8               	btfsc	status,0,c
 11741  010446  D00D               	goto	l2989
 11742  010448                     u10350:
 11743                           
 11744                           ; BSR set to: 0
 11745  010448  0E00               	movlw	0
 11746  01044A  0100               	movlb	0	; () banked
 11747  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 11748  01044E  0E00               	movlw	0
 11749  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 11750  010452  0E00               	movlw	0
 11751  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 11752  010456  0E00               	movlw	0
 11753  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 11754  01045A  0E00               	movlw	0
 11755  01045C  0100               	movlb	0	; () banked
 11756  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 11757  010460  D015               	goto	l2990
 11758  010462                     l2989:
 11759                           
 11760                           ; BSR set to: 0
 11761  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 11762                           
 11763                           ; BSR set to: 0
 11764  010466  0EFF               	movlw	255
 11765  010468  0100               	movlb	0	; () banked
 11766  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 11767  01046C  0EFF               	movlw	255
 11768  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 11769  010470  0E7F               	movlw	127
 11770  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 11771  010474  0E00               	movlw	0
 11772  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 11773                           
 11774                           ; BSR set to: 0
 11775  010478  0100               	movlb	0	; () banked
 11776  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 11777  01047C  D002               	goto	l2991
 11778                           
 11779                           ; BSR set to: 0
 11780  01047E  0100               	movlb	0	; () banked
 11781  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 11782  010482                     l2991:
 11783                           
 11784                           ; BSR set to: 0
 11785                           
 11786                           ; BSR set to: 0
 11787  010482  0100               	movlb	0	; () banked
 11788  010484  90D8               	bcf	status,0,c
 11789  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 11790  010488  0100               	movlb	0	; () banked
 11791  01048A                     L5:
 11792  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 11793  01048C                     l2990:
 11794                           
 11795                           ; BSR set to: 0
 11796                           
 11797                           ; BSR set to: 0
 11798                           
 11799                           ; BSR set to: 0
 11800  01048C  0100               	movlb	0	; () banked
 11801  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 11802  010490  0100               	movlb	0	; () banked
 11803  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11804                           
 11805                           ; BSR set to: 0
 11806  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 11807  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 11808  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 11809  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 11810  0104A4  0012               	return	
 11811  0104A6                     __end_of___flmul:
 11812                           	opt stack 0
 11813                           tblptru	equ	0xFF8
 11814                           tblptrh	equ	0xFF7
 11815                           tblptrl	equ	0xFF6
 11816                           tablat	equ	0xFF5
 11817                           prodh	equ	0xFF4
 11818                           prodl	equ	0xFF3
 11819                           intcon	equ	0xFF2
 11820                           postinc0	equ	0xFEE
 11821                           wreg	equ	0xFE8
 11822                           postdec1	equ	0xFE5
 11823                           fsr1h	equ	0xFE2
 11824                           fsr1l	equ	0xFE1
 11825                           indf2	equ	0xFDF
 11826                           postinc2	equ	0xFDE
 11827                           postdec2	equ	0xFDD
 11828                           fsr2h	equ	0xFDA
 11829                           fsr2l	equ	0xFD9
 11830                           status	equ	0xFD8
 11831                           
 11832 ;; *************** function ___fldiv *****************
 11833 ;; Defined at:
 11834 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;  b               4    0[BANK0 ] unsigned char 
 11837 ;;  a               4    4[BANK0 ] unsigned char 
 11838 ;; Auto vars:     Size  Location     Type
 11839 ;;  grs             4   19[BANK0 ] unsigned long 
 11840 ;;  rem             4   13[BANK0 ] unsigned long 
 11841 ;;  new_exp         2   17[BANK0 ] int 
 11842 ;;  aexp            1   24[BANK0 ] unsigned char 
 11843 ;;  bexp            1   23[BANK0 ] unsigned char 
 11844 ;;  sign            1   12[BANK0 ] unsigned char 
 11845 ;; Return value:  Size  Location     Type
 11846 ;;                  4    0[BANK0 ] unsigned char 
 11847 ;; Registers used:
 11848 ;;		wreg, status,2, status,0
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11854 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11858 ;;Total ram usage:       25 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    7
 11861 ;; This function calls:
 11862 ;;		Nothing
 11863 ;; This function is called by:
 11864 ;;		_ADC_Voltage
 11865 ;;		_findClosestWall
 11866 ;;		_mode1
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           	psect	text48
 11871  010C98                     __ptext48:
 11872                           	opt stack 0
 11873  010C98                     ___fldiv:
 11874                           	opt stack 21
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;incstack = 0
 11878  010C98  0100               	movlb	0	; () banked
 11879  010C9A  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 11880  010C9C  0B80               	andlw	128
 11881  010C9E  0100               	movlb	0	; () banked
 11882  010CA0  6FC6               	movwf	___fldiv@sign& (0+255),b
 11883  010CA2  0100               	movlb	0	; () banked
 11884  010CA4  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 11885  010CA6  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 11886  010CA8  0100               	movlb	0	; () banked
 11887  010CAA  6FD1               	movwf	___fldiv@bexp& (0+255),b
 11888                           
 11889                           ; BSR set to: 0
 11890  010CAC  0100               	movlb	0	; () banked
 11891  010CAE  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 11892  010CB0  D002               	goto	l2931
 11893                           
 11894                           ; BSR set to: 0
 11895  010CB2  0100               	movlb	0	; () banked
 11896  010CB4  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 11897  010CB6                     l2931:
 11898                           
 11899                           ; BSR set to: 0
 11900                           
 11901                           ; BSR set to: 0
 11902  010CB6  0100               	movlb	0	; () banked
 11903  010CB8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 11904  010CBA  0100               	movlb	0	; () banked
 11905  010CBC  B4D8               	btfsc	status,2,c
 11906  010CBE  D012               	goto	l2932
 11907                           
 11908                           ; BSR set to: 0
 11909  010CC0  0100               	movlb	0	; () banked
 11910  010CC2  29D1               	incf	___fldiv@bexp& (0+255),w,b
 11911  010CC4  A4D8               	btfss	status,2,c
 11912  010CC6  D009               	goto	l2933
 11913                           
 11914                           ; BSR set to: 0
 11915  010CC8  0E00               	movlw	0
 11916  010CCA  0100               	movlb	0	; () banked
 11917  010CCC  6FBA               	movwf	___fldiv@b& (0+255),b
 11918  010CCE  0E00               	movlw	0
 11919  010CD0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 11920  010CD2  0E00               	movlw	0
 11921  010CD4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 11922  010CD6  0E00               	movlw	0
 11923  010CD8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 11924  010CDA                     l2933:
 11925                           
 11926                           ; BSR set to: 0
 11927                           
 11928                           ; BSR set to: 0
 11929  010CDA  0100               	movlb	0	; () banked
 11930  010CDC  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 11931                           
 11932                           ; BSR set to: 0
 11933  010CDE  0E00               	movlw	0
 11934  010CE0  0100               	movlb	0	; () banked
 11935  010CE2  D008               	goto	L6
 11936  010CE4                     l2932:
 11937                           
 11938                           ; BSR set to: 0
 11939                           
 11940                           ; BSR set to: 0
 11941  010CE4  0E00               	movlw	0
 11942  010CE6  0100               	movlb	0	; () banked
 11943  010CE8  6FBA               	movwf	___fldiv@b& (0+255),b
 11944  010CEA  0E00               	movlw	0
 11945  010CEC  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 11946  010CEE  0E00               	movlw	0
 11947  010CF0  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 11948  010CF2  0E00               	movlw	0
 11949  010CF4                     L6:
 11950  010CF4  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 11951                           
 11952                           ; BSR set to: 0
 11953                           
 11954                           ; BSR set to: 0
 11955  010CF6  0100               	movlb	0	; () banked
 11956  010CF8  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 11957  010CFA  0B80               	andlw	128
 11958  010CFC  0100               	movlb	0	; () banked
 11959  010CFE  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 11960                           
 11961                           ; BSR set to: 0
 11962  010D00  0100               	movlb	0	; () banked
 11963  010D02  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 11964  010D04  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 11965  010D06  0100               	movlb	0	; () banked
 11966  010D08  6FD2               	movwf	___fldiv@aexp& (0+255),b
 11967                           
 11968                           ; BSR set to: 0
 11969  010D0A  0100               	movlb	0	; () banked
 11970  010D0C  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 11971  010D0E  D002               	goto	l2935
 11972                           
 11973                           ; BSR set to: 0
 11974  010D10  0100               	movlb	0	; () banked
 11975  010D12  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 11976  010D14                     l2935:
 11977                           
 11978                           ; BSR set to: 0
 11979                           
 11980                           ; BSR set to: 0
 11981  010D14  0100               	movlb	0	; () banked
 11982  010D16  51D2               	movf	___fldiv@aexp& (0+255),w,b
 11983  010D18  0100               	movlb	0	; () banked
 11984  010D1A  B4D8               	btfsc	status,2,c
 11985  010D1C  D012               	goto	l2936
 11986                           
 11987                           ; BSR set to: 0
 11988  010D1E  0100               	movlb	0	; () banked
 11989  010D20  29D2               	incf	___fldiv@aexp& (0+255),w,b
 11990  010D22  A4D8               	btfss	status,2,c
 11991  010D24  D009               	goto	l2937
 11992                           
 11993                           ; BSR set to: 0
 11994  010D26  0E00               	movlw	0
 11995  010D28  0100               	movlb	0	; () banked
 11996  010D2A  6FBE               	movwf	___fldiv@a& (0+255),b
 11997  010D2C  0E00               	movlw	0
 11998  010D2E  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 11999  010D30  0E00               	movlw	0
 12000  010D32  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12001  010D34  0E00               	movlw	0
 12002  010D36  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12003  010D38                     l2937:
 12004                           
 12005                           ; BSR set to: 0
 12006                           
 12007                           ; BSR set to: 0
 12008  010D38  0100               	movlb	0	; () banked
 12009  010D3A  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12010                           
 12011                           ; BSR set to: 0
 12012  010D3C  0E00               	movlw	0
 12013  010D3E  0100               	movlb	0	; () banked
 12014  010D40  D008               	goto	L7
 12015  010D42                     l2936:
 12016                           
 12017                           ; BSR set to: 0
 12018                           
 12019                           ; BSR set to: 0
 12020  010D42  0E00               	movlw	0
 12021  010D44  0100               	movlb	0	; () banked
 12022  010D46  6FBE               	movwf	___fldiv@a& (0+255),b
 12023  010D48  0E00               	movlw	0
 12024  010D4A  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12025  010D4C  0E00               	movlw	0
 12026  010D4E  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12027  010D50  0E00               	movlw	0
 12028  010D52                     L7:
 12029  010D52  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12030                           
 12031                           ; BSR set to: 0
 12032                           
 12033                           ; BSR set to: 0
 12034  010D54  0100               	movlb	0	; () banked
 12035  010D56  51BE               	movf	___fldiv@a& (0+255),w,b
 12036  010D58  0100               	movlb	0	; () banked
 12037  010D5A  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12038  010D5C  0100               	movlb	0	; () banked
 12039  010D5E  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12040  010D60  0100               	movlb	0	; () banked
 12041  010D62  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12042  010D64  A4D8               	btfss	status,2,c
 12043  010D66  D017               	goto	l2939
 12044                           
 12045                           ; BSR set to: 0
 12046  010D68  0E00               	movlw	0
 12047  010D6A  0100               	movlb	0	; () banked
 12048  010D6C  6FBA               	movwf	___fldiv@b& (0+255),b
 12049  010D6E  0E00               	movlw	0
 12050  010D70  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12051  010D72  0E00               	movlw	0
 12052  010D74  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12053  010D76  0E00               	movlw	0
 12054  010D78  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12055                           
 12056                           ; BSR set to: 0
 12057  010D7A  0100               	movlb	0	; () banked
 12058  010D7C  0E80               	movlw	128
 12059  010D7E  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12060  010D80  0E7F               	movlw	127
 12061  010D82  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12062                           
 12063                           ; BSR set to: 0
 12064  010D84  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12065  010D88  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12066  010D8C  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12067  010D90  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12068                           
 12069                           ; BSR set to: 0
 12070  010D94  0012               	return	
 12071  010D96                     l2939:
 12072                           
 12073                           ; BSR set to: 0
 12074                           
 12075                           ; BSR set to: 0
 12076  010D96  0100               	movlb	0	; () banked
 12077  010D98  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12078  010D9A  0100               	movlb	0	; () banked
 12079  010D9C  A4D8               	btfss	status,2,c
 12080  010D9E  D012               	goto	l2941
 12081                           
 12082                           ; BSR set to: 0
 12083  010DA0  0E00               	movlw	0
 12084  010DA2  0100               	movlb	0	; () banked
 12085  010DA4  6FBA               	movwf	___fldiv@b& (0+255),b
 12086  010DA6  0E00               	movlw	0
 12087  010DA8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12088  010DAA  0E00               	movlw	0
 12089  010DAC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12090  010DAE  0E00               	movlw	0
 12091  010DB0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12092                           
 12093                           ; BSR set to: 0
 12094  010DB2  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12095  010DB6  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12096  010DBA  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12097  010DBE  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12098                           
 12099                           ; BSR set to: 0
 12100  010DC2  0012               	return	
 12101  010DC4                     l2941:
 12102                           
 12103                           ; BSR set to: 0
 12104                           
 12105                           ; BSR set to: 0
 12106  010DC4  0100               	movlb	0	; () banked
 12107  010DC6  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12108  010DC8  0100               	movlb	0	; () banked
 12109  010DCA  6FC2               	movwf	??___fldiv& (0+255),b
 12110  010DCC  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12111  010DCE  0100               	movlb	0	; () banked
 12112  010DD0  1FC2               	comf	??___fldiv& (0+255),f,b
 12113  010DD2  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12114  010DD4  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12115  010DD6  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12116  010DD8  0100               	movlb	0	; () banked
 12117  010DDA  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12118  010DDC  0100               	movlb	0	; () banked
 12119  010DDE  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12120  010DE0  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12121  010DE2  0100               	movlb	0	; () banked
 12122  010DE4  51C2               	movf	??___fldiv& (0+255),w,b
 12123  010DE6  0100               	movlb	0	; () banked
 12124  010DE8  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12125  010DEA  0100               	movlb	0	; () banked
 12126  010DEC  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12127  010DEE  0100               	movlb	0	; () banked
 12128  010DF0  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12129  010DF2  0E7F               	movlw	127
 12130  010DF4  0100               	movlb	0	; () banked
 12131  010DF6  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12132  010DF8  0100               	movlb	0	; () banked
 12133  010DFA  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12134  010DFC  0E00               	movlw	0
 12135  010DFE  0100               	movlb	0	; () banked
 12136  010E00  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12137  010E02  0100               	movlb	0	; () banked
 12138  010E04  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12139                           
 12140                           ; BSR set to: 0
 12141  010E06  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12142  010E0A  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12143  010E0E  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12144  010E12  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12145                           
 12146                           ; BSR set to: 0
 12147  010E16  0E00               	movlw	0
 12148  010E18  0100               	movlb	0	; () banked
 12149  010E1A  6FBA               	movwf	___fldiv@b& (0+255),b
 12150  010E1C  0E00               	movlw	0
 12151  010E1E  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12152  010E20  0E00               	movlw	0
 12153  010E22  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12154  010E24  0E00               	movlw	0
 12155  010E26  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12156                           
 12157                           ; BSR set to: 0
 12158  010E28  0E00               	movlw	0
 12159  010E2A  0100               	movlb	0	; () banked
 12160  010E2C  6FCD               	movwf	___fldiv@grs& (0+255),b
 12161  010E2E  0E00               	movlw	0
 12162  010E30  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12163  010E32  0E00               	movlw	0
 12164  010E34  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12165  010E36  0E00               	movlw	0
 12166  010E38  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12167                           
 12168                           ; BSR set to: 0
 12169  010E3A  0E00               	movlw	0
 12170  010E3C  0100               	movlb	0	; () banked
 12171  010E3E  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12172  010E40  D042               	goto	l2942
 12173  010E42                     
 12174                           ; BSR set to: 0
 12175                           
 12176                           ; BSR set to: 0
 12177  010E42  0100               	movlb	0	; () banked
 12178  010E44  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12179  010E46  0100               	movlb	0	; () banked
 12180  010E48  B4D8               	btfsc	status,2,c
 12181  010E4A  D017               	goto	l2944
 12182                           
 12183                           ; BSR set to: 0
 12184  010E4C  0100               	movlb	0	; () banked
 12185  010E4E  90D8               	bcf	status,0,c
 12186  010E50  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12187  010E52  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12188  010E54  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12189  010E56  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12190  010E58  0100               	movlb	0	; () banked
 12191  010E5A  90D8               	bcf	status,0,c
 12192  010E5C  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12193  010E5E  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12194  010E60  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12195  010E62  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12196                           
 12197                           ; BSR set to: 0
 12198  010E64  0100               	movlb	0	; () banked
 12199  010E66  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12200  010E68  D002               	goto	l2945
 12201                           
 12202                           ; BSR set to: 0
 12203  010E6A  0100               	movlb	0	; () banked
 12204  010E6C  81BA               	bsf	___fldiv@b& (0+255),0,b
 12205  010E6E                     l2945:
 12206                           
 12207                           ; BSR set to: 0
 12208  010E6E  0100               	movlb	0	; () banked
 12209  010E70  90D8               	bcf	status,0,c
 12210  010E72  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12211  010E74  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12212  010E76  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12213  010E78  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12214  010E7A                     l2944:
 12215                           
 12216                           ; BSR set to: 0
 12217                           
 12218                           ; BSR set to: 0
 12219  010E7A  0100               	movlb	0	; () banked
 12220  010E7C  51BE               	movf	___fldiv@a& (0+255),w,b
 12221  010E7E  0100               	movlb	0	; () banked
 12222  010E80  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12223  010E82  0100               	movlb	0	; () banked
 12224  010E84  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12225  010E86  0100               	movlb	0	; () banked
 12226  010E88  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12227  010E8A  0100               	movlb	0	; () banked
 12228  010E8C  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12229  010E8E  0100               	movlb	0	; () banked
 12230  010E90  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12231  010E92  0100               	movlb	0	; () banked
 12232  010E94  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12233  010E96  0100               	movlb	0	; () banked
 12234  010E98  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12235  010E9A  A0D8               	btfss	status,0,c
 12236  010E9C  D012               	goto	l2946
 12237                           
 12238                           ; BSR set to: 0
 12239  010E9E  0100               	movlb	0	; () banked
 12240  010EA0  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12241                           
 12242                           ; BSR set to: 0
 12243  010EA2  0100               	movlb	0	; () banked
 12244  010EA4  51BE               	movf	___fldiv@a& (0+255),w,b
 12245  010EA6  0100               	movlb	0	; () banked
 12246  010EA8  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12247  010EAA  0100               	movlb	0	; () banked
 12248  010EAC  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12249  010EAE  0100               	movlb	0	; () banked
 12250  010EB0  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12251  010EB2  0100               	movlb	0	; () banked
 12252  010EB4  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12253  010EB6  0100               	movlb	0	; () banked
 12254  010EB8  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12255  010EBA  0100               	movlb	0	; () banked
 12256  010EBC  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12257  010EBE  0100               	movlb	0	; () banked
 12258  010EC0  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12259  010EC2                     l2946:
 12260                           
 12261                           ; BSR set to: 0
 12262                           
 12263                           ; BSR set to: 0
 12264  010EC2  0100               	movlb	0	; () banked
 12265  010EC4  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12266  010EC6                     l2942:
 12267                           
 12268                           ; BSR set to: 0
 12269  010EC6  0E19               	movlw	25
 12270  010EC8  0100               	movlb	0	; () banked
 12271  010ECA  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12272  010ECC  D7BA               	goto	l2943
 12273                           
 12274                           ; BSR set to: 0
 12275                           
 12276                           ; BSR set to: 0
 12277  010ECE  0100               	movlb	0	; () banked
 12278  010ED0  51C7               	movf	___fldiv@rem& (0+255),w,b
 12279  010ED2  0100               	movlb	0	; () banked
 12280  010ED4  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12281  010ED6  0100               	movlb	0	; () banked
 12282  010ED8  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12283  010EDA  0100               	movlb	0	; () banked
 12284  010EDC  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12285  010EDE  B4D8               	btfsc	status,2,c
 12286  010EE0  D018               	goto	l2949
 12287                           
 12288                           ; BSR set to: 0
 12289  010EE2  0100               	movlb	0	; () banked
 12290  010EE4  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12291                           
 12292                           ; BSR set to: 0
 12293  010EE6  D015               	goto	l2949
 12294  010EE8                     
 12295                           ; BSR set to: 0
 12296                           
 12297                           ; BSR set to: 0
 12298  010EE8  0100               	movlb	0	; () banked
 12299  010EEA  90D8               	bcf	status,0,c
 12300  010EEC  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12301  010EEE  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12302  010EF0  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12303  010EF2  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12304                           
 12305                           ; BSR set to: 0
 12306  010EF4  0100               	movlb	0	; () banked
 12307  010EF6  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12308  010EF8  D002               	goto	l2951
 12309                           
 12310                           ; BSR set to: 0
 12311  010EFA  0100               	movlb	0	; () banked
 12312  010EFC  81BA               	bsf	___fldiv@b& (0+255),0,b
 12313  010EFE                     l2951:
 12314                           
 12315                           ; BSR set to: 0
 12316  010EFE  0100               	movlb	0	; () banked
 12317  010F00  90D8               	bcf	status,0,c
 12318  010F02  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12319  010F04  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12320  010F06  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12321  010F08  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12322  010F0A  0100               	movlb	0	; () banked
 12323  010F0C  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12324  010F0E  A0D8               	btfss	status,0,c
 12325  010F10  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12326  010F12                     l2949:
 12327                           
 12328                           ; BSR set to: 0
 12329                           
 12330                           ; BSR set to: 0
 12331  010F12  0100               	movlb	0	; () banked
 12332  010F14  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12333  010F16  D7E8               	goto	l2950
 12334                           
 12335                           ; BSR set to: 0
 12336                           
 12337                           ; BSR set to: 0
 12338  010F18  0E00               	movlw	0
 12339  010F1A  0100               	movlb	0	; () banked
 12340  010F1C  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12341                           
 12342                           ; BSR set to: 0
 12343  010F1E  0100               	movlb	0	; () banked
 12344  010F20  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12345  010F22  D024               	goto	l2956
 12346                           
 12347                           ; BSR set to: 0
 12348  010F24  0EFF               	movlw	255
 12349  010F26  0100               	movlb	0	; () banked
 12350  010F28  15CD               	andwf	___fldiv@grs& (0+255),w,b
 12351  010F2A  0100               	movlb	0	; () banked
 12352  010F2C  6FC2               	movwf	??___fldiv& (0+255),b
 12353  010F2E  0EFF               	movlw	255
 12354  010F30  0100               	movlb	0	; () banked
 12355  010F32  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12356  010F34  0100               	movlb	0	; () banked
 12357  010F36  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 12358  010F38  0EFF               	movlw	255
 12359  010F3A  0100               	movlb	0	; () banked
 12360  010F3C  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12361  010F3E  0100               	movlb	0	; () banked
 12362  010F40  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12363  010F42  0E7F               	movlw	127
 12364  010F44  0100               	movlb	0	; () banked
 12365  010F46  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12366  010F48  0100               	movlb	0	; () banked
 12367  010F4A  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 12368  010F4C  0100               	movlb	0	; () banked
 12369  010F4E  51C2               	movf	??___fldiv& (0+255),w,b
 12370  010F50  0100               	movlb	0	; () banked
 12371  010F52  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 12372  010F54  0100               	movlb	0	; () banked
 12373  010F56  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 12374  010F58  0100               	movlb	0	; () banked
 12375  010F5A  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 12376  010F5C  A4D8               	btfss	status,2,c
 12377  010F5E  D003               	goto	u10120
 12378                           
 12379                           ; BSR set to: 0
 12380                           
 12381                           ; BSR set to: 0
 12382  010F60  0100               	movlb	0	; () banked
 12383  010F62  A1BA               	btfss	___fldiv@b& (0+255),0,b
 12384  010F64  D003               	goto	l2956
 12385  010F66                     u10120:
 12386                           
 12387                           ; BSR set to: 0
 12388  010F66  0E01               	movlw	1
 12389  010F68  0100               	movlb	0	; () banked
 12390  010F6A  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12391  010F6C                     l2956:
 12392                           
 12393                           ; BSR set to: 0
 12394                           
 12395                           ; BSR set to: 0
 12396                           
 12397                           ; BSR set to: 0
 12398  010F6C  0100               	movlb	0	; () banked
 12399  010F6E  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12400  010F70  0100               	movlb	0	; () banked
 12401  010F72  B4D8               	btfsc	status,2,c
 12402  010F74  D023               	goto	l2958
 12403                           
 12404                           ; BSR set to: 0
 12405  010F76  0E01               	movlw	1
 12406  010F78  0100               	movlb	0	; () banked
 12407  010F7A  27BA               	addwf	___fldiv@b& (0+255),f,b
 12408  010F7C  0E00               	movlw	0
 12409  010F7E  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12410  010F80  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12411  010F82  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12412                           
 12413                           ; BSR set to: 0
 12414  010F84  0100               	movlb	0	; () banked
 12415  010F86  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 12416  010F88  D019               	goto	l2958
 12417                           
 12418                           ; BSR set to: 0
 12419  010F8A  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 12420  010F8E  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 12421  010F92  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 12422  010F96  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 12423  010F9A  0100               	movlb	0	; () banked
 12424  010F9C  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 12425  010F9E  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 12426  010FA0  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 12427  010FA2  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 12428  010FA4  33C2               	rrcf	??___fldiv& (0+255),f,b
 12429  010FA6  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 12430  010FAA  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 12431  010FAE  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 12432  010FB2  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 12433                           
 12434                           ; BSR set to: 0
 12435  010FB6  0100               	movlb	0	; () banked
 12436  010FB8  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 12437  010FBA  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12438  010FBC                     l2958:
 12439                           
 12440                           ; BSR set to: 0
 12441                           
 12442                           ; BSR set to: 0
 12443                           
 12444                           ; BSR set to: 0
 12445  010FBC  0100               	movlb	0	; () banked
 12446  010FBE  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12447  010FC0  D014               	goto	l2959
 12448  010FC2  0100               	movlb	0	; () banked
 12449  010FC4  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12450  010FC6  E104               	bnz	u10150
 12451  010FC8  0100               	movlb	0	; () banked
 12452  010FCA  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 12453  010FCC  A0D8               	btfss	status,0,c
 12454  010FCE  D00D               	goto	l2959
 12455  010FD0                     u10150:
 12456                           
 12457                           ; BSR set to: 0
 12458  010FD0  0E00               	movlw	0
 12459  010FD2  0100               	movlb	0	; () banked
 12460  010FD4  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12461  010FD6  69CB               	setf	___fldiv@new_exp& (0+255),b
 12462  010FD8  0E00               	movlw	0
 12463  010FDA  0100               	movlb	0	; () banked
 12464  010FDC  6FBA               	movwf	___fldiv@b& (0+255),b
 12465  010FDE  0E00               	movlw	0
 12466  010FE0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12467  010FE2  0E00               	movlw	0
 12468  010FE4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12469  010FE6  0E00               	movlw	0
 12470  010FE8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12471  010FEA                     l2959:
 12472                           
 12473                           ; BSR set to: 0
 12474                           
 12475                           ; BSR set to: 0
 12476  010FEA  0100               	movlb	0	; () banked
 12477  010FEC  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12478  010FEE  D007               	goto	u10160
 12479  010FF0  0100               	movlb	0	; () banked
 12480  010FF2  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12481  010FF4  E115               	bnz	l13640
 12482  010FF6  0100               	movlb	0	; () banked
 12483  010FF8  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 12484  010FFA  B0D8               	btfsc	status,0,c
 12485  010FFC  D011               	goto	l2960
 12486  010FFE                     u10160:
 12487                           
 12488                           ; BSR set to: 0
 12489  010FFE  0E00               	movlw	0
 12490  011000  0100               	movlb	0	; () banked
 12491  011002  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12492  011004  0E00               	movlw	0
 12493  011006  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12494  011008  0E00               	movlw	0
 12495  01100A  0100               	movlb	0	; () banked
 12496  01100C  6FBA               	movwf	___fldiv@b& (0+255),b
 12497  01100E  0E00               	movlw	0
 12498  011010  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12499  011012  0E00               	movlw	0
 12500  011014  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12501  011016  0E00               	movlw	0
 12502  011018  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12503  01101A  0E00               	movlw	0
 12504  01101C  0100               	movlb	0	; () banked
 12505  01101E  6FC6               	movwf	___fldiv@sign& (0+255),b
 12506  011020                     l2960:
 12507  011020                     l13640:
 12508                           
 12509                           ; BSR set to: 0
 12510  011020  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 12511                           
 12512                           ; BSR set to: 0
 12513  011024  0100               	movlb	0	; () banked
 12514  011026  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 12515  011028  D003               	goto	l2961
 12516                           
 12517                           ; BSR set to: 0
 12518  01102A  0100               	movlb	0	; () banked
 12519  01102C  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12520  01102E  D002               	goto	l2962
 12521  011030                     l2961:
 12522                           
 12523                           ; BSR set to: 0
 12524                           
 12525                           ; BSR set to: 0
 12526  011030  0100               	movlb	0	; () banked
 12527  011032  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 12528  011034                     l2962:
 12529                           
 12530                           ; BSR set to: 0
 12531                           
 12532                           ; BSR set to: 0
 12533  011034  0100               	movlb	0	; () banked
 12534  011036  90D8               	bcf	status,0,c
 12535  011038  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 12536  01103A  0100               	movlb	0	; () banked
 12537  01103C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12538                           
 12539                           ; BSR set to: 0
 12540  01103E  0100               	movlb	0	; () banked
 12541  011040  51C6               	movf	___fldiv@sign& (0+255),w,b
 12542  011042  0100               	movlb	0	; () banked
 12543  011044  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12544                           
 12545                           ; BSR set to: 0
 12546  011046  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12547  01104A  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12548  01104E  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12549  011052  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12550  011056  0012               	return	
 12551  011058                     __end_of___fldiv:
 12552                           	opt stack 0
 12553                           tblptru	equ	0xFF8
 12554                           tblptrh	equ	0xFF7
 12555                           tblptrl	equ	0xFF6
 12556                           tablat	equ	0xFF5
 12557                           prodh	equ	0xFF4
 12558                           prodl	equ	0xFF3
 12559                           intcon	equ	0xFF2
 12560                           postinc0	equ	0xFEE
 12561                           wreg	equ	0xFE8
 12562                           postdec1	equ	0xFE5
 12563                           fsr1h	equ	0xFE2
 12564                           fsr1l	equ	0xFE1
 12565                           indf2	equ	0xFDF
 12566                           postinc2	equ	0xFDE
 12567                           postdec2	equ	0xFDD
 12568                           fsr2h	equ	0xFDA
 12569                           fsr2l	equ	0xFD9
 12570                           status	equ	0xFD8
 12571                           
 12572 ;; *************** function _init *****************
 12573 ;; Defined at:
 12574 ;;		line 64 in file "main.c"
 12575 ;; Parameters:    Size  Location     Type
 12576 ;;		None
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;		None
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  1    wreg      void 
 12581 ;; Registers used:
 12582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;Total ram usage:        0 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:   17
 12595 ;; This function calls:
 12596 ;;		_ADC_Init
 12597 ;;		_ADC_Start
 12598 ;;		_Console_Init
 12599 ;;		_HMI_Init
 12600 ;;		_ISR_Enable
 12601 ;;		_LCD_Init
 12602 ;;		_MXK_BlockSwitchTo
 12603 ;;		_MXK_Dequeue
 12604 ;;		_MXK_Init
 12605 ;;		_MXK_Release
 12606 ;;		_Motor_Init
 12607 ;;		_delay_ms
 12608 ;;		_eusart_init
 12609 ;;		_irobot_init
 12610 ;;		_irobot_init_song_0
 12611 ;;		_irobot_led_power_on
 12612 ;; This function is called by:
 12613 ;;		_main
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           	psect	text49
 12618  014654                     __ptext49:
 12619                           	opt stack 0
 12620  014654                     _init:
 12621                           	opt stack 13
 12622                           
 12623                           ;main.c: 66: MXK_Init();
 12624                           
 12625                           ; BSR set to: 0
 12626                           ;incstack = 0
 12627  014654  ECEF  F095         	call	_MXK_Init	;wreg free
 12628                           
 12629                           ;main.c: 69: ISR_Enable();
 12630  014658  ECB8  F0B2         	call	_ISR_Enable	;wreg free
 12631                           
 12632                           ;main.c: 72: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12633  01465C  0E01               	movlw	1
 12634  01465E  EC1F  F0AF         	call	_MXK_BlockSwitchTo
 12635  014662  0900               	iorlw	0
 12636  014664  B4D8               	btfsc	status,2,c
 12637  014666  D00C               	goto	l2301
 12638                           
 12639                           ;main.c: 73: Console_Init();
 12640  014668  EC88  F0A6         	call	_Console_Init	;wreg free
 12641                           
 12642                           ;main.c: 74: HMI_Init();
 12643  01466C  ECEF  F08F         	call	_HMI_Init	;wreg free
 12644                           
 12645                           ;main.c: 75: LCD_Init();
 12646  014670  ECAF  F096         	call	_LCD_Init	;wreg free
 12647                           
 12648                           ;main.c: 76: if (MXK_Release())
 12649  014674  ECAE  F0B1         	call	_MXK_Release	;wreg free
 12650  014678  0900               	iorlw	0
 12651  01467A  A4D8               	btfss	status,2,c
 12652                           
 12653                           ;main.c: 77: MXK_Dequeue();
 12654  01467C  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
 12655  014680                     l2301:
 12656                           
 12657                           ;main.c: 78: }
 12658                           ;main.c: 81: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12659  014680  0E08               	movlw	8
 12660  014682  EC1F  F0AF         	call	_MXK_BlockSwitchTo
 12661  014686  0900               	iorlw	0
 12662  014688  B4D8               	btfsc	status,2,c
 12663  01468A  D013               	goto	l2303
 12664                           
 12665                           ;main.c: 82: Motor_Init(&Stepper, 0b1000);
 12666  01468C  0ECF               	movlw	low _Stepper
 12667  01468E  0100               	movlb	0	; () banked
 12668  014690  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 12669  014692  0E03               	movlw	high _Stepper
 12670  014694  0100               	movlb	0	; () banked
 12671  014696  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12672  014698  0E00               	movlw	0
 12673  01469A  0100               	movlb	0	; () banked
 12674  01469C  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12675  01469E  0E08               	movlw	8
 12676  0146A0  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 12677  0146A2  EC47  F09D         	call	_Motor_Init	;wreg free
 12678                           
 12679                           ;main.c: 83: if (MXK_Release())
 12680  0146A6  ECAE  F0B1         	call	_MXK_Release	;wreg free
 12681  0146AA  0900               	iorlw	0
 12682  0146AC  A4D8               	btfss	status,2,c
 12683                           
 12684                           ;main.c: 84: MXK_Dequeue();
 12685  0146AE  EC00  F0AF         	call	_MXK_Dequeue	;wreg free
 12686  0146B2                     l2303:
 12687                           
 12688                           ;main.c: 85: }
 12689                           ;main.c: 88: ADC_Init(&ADC_AN0, eADC_Ch0);
 12690  0146B2  0EB1               	movlw	low _ADC_AN0
 12691  0146B4  0100               	movlb	0	; () banked
 12692  0146B6  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 12693  0146B8  0E00               	movlw	high _ADC_AN0
 12694  0146BA  0100               	movlb	0	; () banked
 12695  0146BC  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12696  0146BE  0E00               	movlw	0
 12697  0146C0  0100               	movlb	0	; () banked
 12698  0146C2  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 12699  0146C4  EC14  F0A8         	call	_ADC_Init	;wreg free
 12700                           
 12701                           ;main.c: 89: float ADC_Voltage(ADCPtr plnput);
 12702                           ;main.c: 90: ADC_Start(&ADC_AN0);
 12703  0146C8  0EB1               	movlw	low _ADC_AN0
 12704  0146CA  0100               	movlb	0	; () banked
 12705  0146CC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 12706  0146CE  0E00               	movlw	high _ADC_AN0
 12707  0146D0  0100               	movlb	0	; () banked
 12708  0146D2  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 12709  0146D4  EC12  F0A7         	call	_ADC_Start	;wreg free
 12710                           
 12711                           ;main.c: 92: eusart_init();
 12712  0146D8  EC37  F0B1         	call	_eusart_init	;wreg free
 12713                           
 12714                           ;main.c: 93: irobot_init();
 12715  0146DC  EC78  F0B2         	call	_irobot_init	;wreg free
 12716                           
 12717                           ;main.c: 95: irobot_led_power_on(0xA);
 12718  0146E0  0E0A               	movlw	10
 12719  0146E2  ECA0  F0B1         	call	_irobot_led_power_on
 12720                           
 12721                           ;main.c: 96: irobot_init_song_0();
 12722  0146E6  EC18  F0B1         	call	_irobot_init_song_0	;wreg free
 12723                           
 12724                           ;main.c: 97: delay_ms(20);
 12725  0146EA  0E00               	movlw	0
 12726  0146EC  0100               	movlb	0	; () banked
 12727  0146EE  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 12728  0146F0  0E14               	movlw	20
 12729  0146F2  6FBA               	movwf	delay_ms@ms& (0+255),b
 12730  0146F4  EC89  F0AA         	call	_delay_ms	;wreg free
 12731  0146F8  0012               	return		;funcret
 12732  0146FA                     __end_of_init:
 12733                           	opt stack 0
 12734                           tblptru	equ	0xFF8
 12735                           tblptrh	equ	0xFF7
 12736                           tblptrl	equ	0xFF6
 12737                           tablat	equ	0xFF5
 12738                           prodh	equ	0xFF4
 12739                           prodl	equ	0xFF3
 12740                           intcon	equ	0xFF2
 12741                           postinc0	equ	0xFEE
 12742                           wreg	equ	0xFE8
 12743                           postdec1	equ	0xFE5
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           fsr2h	equ	0xFDA
 12750                           fsr2l	equ	0xFD9
 12751                           status	equ	0xFD8
 12752                           
 12753 ;; *************** function _irobot_led_power_on *****************
 12754 ;; Defined at:
 12755 ;;		line 303 in file "Library/iRobotSerial.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;  powerOnColou    1    wreg     unsigned char 
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      void 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;Total ram usage:        1 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    9
 12776 ;; This function calls:
 12777 ;;		_irobot_leds
 12778 ;; This function is called by:
 12779 ;;		_init
 12780 ;; This function uses a non-reentrant model
 12781 ;;
 12782                           
 12783                           	psect	text50
 12784  016340                     __ptext50:
 12785                           	opt stack 0
 12786  016340                     _irobot_led_power_on:
 12787                           	opt stack 20
 12788                           
 12789                           ;incstack = 0
 12790                           ;irobot_led_power_on@powerOnColour stored from wreg
 12791  016340  0100               	movlb	0	; () banked
 12792  016342  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 12793                           
 12794                           ;iRobotSerial.c: 304: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 12795  016344  0E00               	movlw	0
 12796  016346  0100               	movlb	0	; () banked
 12797  016348  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 12798  01634A  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 12799  01634E  0EFF               	movlw	255
 12800  016350  0100               	movlb	0	; () banked
 12801  016352  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 12802  016354  0E00               	movlw	0
 12803  016356  EC48  F0AC         	call	_irobot_leds
 12804  01635A  0012               	return		;funcret
 12805  01635C                     __end_of_irobot_led_power_on:
 12806                           	opt stack 0
 12807                           tblptru	equ	0xFF8
 12808                           tblptrh	equ	0xFF7
 12809                           tblptrl	equ	0xFF6
 12810                           tablat	equ	0xFF5
 12811                           prodh	equ	0xFF4
 12812                           prodl	equ	0xFF3
 12813                           intcon	equ	0xFF2
 12814                           postinc0	equ	0xFEE
 12815                           wreg	equ	0xFE8
 12816                           postdec1	equ	0xFE5
 12817                           fsr1h	equ	0xFE2
 12818                           fsr1l	equ	0xFE1
 12819                           indf2	equ	0xFDF
 12820                           postinc2	equ	0xFDE
 12821                           postdec2	equ	0xFDD
 12822                           fsr2h	equ	0xFDA
 12823                           fsr2l	equ	0xFD9
 12824                           status	equ	0xFD8
 12825                           
 12826 ;; *************** function _irobot_leds *****************
 12827 ;; Defined at:
 12828 ;;		line 238 in file "Library/iRobotSerial.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;  isScript        1    wreg     unsigned char 
 12831 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 12832 ;;  powerColour     1   17[BANK0 ] unsigned char 
 12833 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  isScript        1   19[BANK0 ] unsigned char 
 12836 ;; Return value:  Size  Location     Type
 12837 ;;                  1    wreg      void 
 12838 ;; Registers used:
 12839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12840 ;; Tracked objects:
 12841 ;;		On entry : 0/0
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12845 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;Total ram usage:        4 bytes
 12850 ;; Hardware stack levels used:    1
 12851 ;; Hardware stack levels required when called:    8
 12852 ;; This function calls:
 12853 ;;		_eusart_putch
 12854 ;;		_load_iRScriptStack
 12855 ;; This function is called by:
 12856 ;;		_irobot_led_power_on
 12857 ;;		_irobot_led_power_off
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           	psect	text51
 12862  015890                     __ptext51:
 12863                           	opt stack 0
 12864  015890                     _irobot_leds:
 12865                           	opt stack 20
 12866                           
 12867                           ;incstack = 0
 12868                           ;irobot_leds@isScript stored from wreg
 12869  015890  0100               	movlb	0	; () banked
 12870  015892  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 12871                           
 12872                           ;iRobotSerial.c: 239: if (isScript) {
 12873  015894  0100               	movlb	0	; () banked
 12874  015896  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 12875  015898  0100               	movlb	0	; () banked
 12876  01589A  B4D8               	btfsc	status,2,c
 12877  01589C  D015               	goto	l2144
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;iRobotSerial.c: 240: load_iRScriptStack(4, iR_LEDS,
 12881                           ;iRobotSerial.c: 241: LEDBit, powerColour, powerLuminosity);
 12882  01589E  0E00               	movlw	0
 12883  0158A0  0100               	movlb	0	; () banked
 12884  0158A2  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 12885  0158A4  0E8B               	movlw	139
 12886  0158A6  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 12887  0158A8  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 12888  0158AC  0100               	movlb	0	; () banked
 12889  0158AE  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 12890  0158B0  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 12891  0158B4  0100               	movlb	0	; () banked
 12892  0158B6  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 12893  0158B8  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 12894  0158BC  0100               	movlb	0	; () banked
 12895  0158BE  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 12896  0158C0  0E04               	movlw	4
 12897  0158C2  EC54  F0AA         	call	_load_iRScriptStack
 12898                           
 12899                           ;iRobotSerial.c: 242: }
 12900  0158C6  0012               	return	
 12901  0158C8                     l2144:
 12902                           
 12903                           ;iRobotSerial.c: 243: else{
 12904                           ;iRobotSerial.c: 244: eusart_putch(iR_LEDS);
 12905  0158C8  0E8B               	movlw	139
 12906  0158CA  EC7F  F0B2         	call	_eusart_putch
 12907                           
 12908                           ;iRobotSerial.c: 245: eusart_putch(LEDBit);
 12909  0158CE  0100               	movlb	0	; () banked
 12910  0158D0  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 12911  0158D2  EC7F  F0B2         	call	_eusart_putch
 12912                           
 12913                           ;iRobotSerial.c: 246: eusart_putch(powerColour);
 12914  0158D6  0100               	movlb	0	; () banked
 12915  0158D8  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 12916  0158DA  EC7F  F0B2         	call	_eusart_putch
 12917                           
 12918                           ;iRobotSerial.c: 247: eusart_putch(powerLuminosity);
 12919  0158DE  0100               	movlb	0	; () banked
 12920  0158E0  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 12921  0158E2  EC7F  F0B2         	call	_eusart_putch
 12922  0158E6  0012               	return	
 12923  0158E8                     __end_of_irobot_leds:
 12924                           	opt stack 0
 12925                           tblptru	equ	0xFF8
 12926                           tblptrh	equ	0xFF7
 12927                           tblptrl	equ	0xFF6
 12928                           tablat	equ	0xFF5
 12929                           prodh	equ	0xFF4
 12930                           prodl	equ	0xFF3
 12931                           intcon	equ	0xFF2
 12932                           postinc0	equ	0xFEE
 12933                           wreg	equ	0xFE8
 12934                           postdec1	equ	0xFE5
 12935                           fsr1h	equ	0xFE2
 12936                           fsr1l	equ	0xFE1
 12937                           indf2	equ	0xFDF
 12938                           postinc2	equ	0xFDE
 12939                           postdec2	equ	0xFDD
 12940                           fsr2h	equ	0xFDA
 12941                           fsr2l	equ	0xFD9
 12942                           status	equ	0xFD8
 12943                           
 12944 ;; *************** function _load_iRScriptStack *****************
 12945 ;; Defined at:
 12946 ;;		line 175 in file "Library/iRobotSerial.c"
 12947 ;; Parameters:    Size  Location     Type
 12948 ;;  bytesToLoad     1    wreg     unsigned char 
 12949 ;; Auto vars:     Size  Location     Type
 12950 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 12951 ;;  i               1   15[BANK0 ] unsigned char 
 12952 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 12953 ;;		 -> ?_load_iRScriptStack(1), 
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  1    wreg      void 
 12956 ;; Registers used:
 12957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12963 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;Total ram usage:       16 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:    7
 12970 ;; This function calls:
 12971 ;;		Nothing
 12972 ;; This function is called by:
 12973 ;;		_irobot_move
 12974 ;;		_irobot_leds
 12975 ;;		_irobot_angle_wait
 12976 ;;		_irobot_distance_wait
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text52
 12981  0154A8                     __ptext52:
 12982                           	opt stack 0
 12983  0154A8                     _load_iRScriptStack:
 12984                           	opt stack 19
 12985                           
 12986                           ;incstack = 0
 12987                           ;load_iRScriptStack@bytesToLoad stored from wreg
 12988  0154A8  0100               	movlb	0	; () banked
 12989  0154AA  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 12990                           
 12991                           ;iRobotSerial.c: 176: va_list loadByte;
 12992                           ;iRobotSerial.c: 177: *loadByte = __va_start();
 12993  0154AC  0EBA               	movlw	low ?_load_iRScriptStack
 12994  0154AE  0100               	movlb	0	; () banked
 12995  0154B0  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 12996  0154B2  0E00               	movlw	high ?_load_iRScriptStack
 12997  0154B4  0100               	movlb	0	; () banked
 12998  0154B6  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 12999                           
 13000                           ;iRobotSerial.c: 178: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13001  0154B8  0E00               	movlw	0
 13002  0154BA  0100               	movlb	0	; () banked
 13003  0154BC  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13004  0154BE  D01F               	goto	l2118
 13005  0154C0                     
 13006                           ; BSR set to: 0
 13007                           ;iRobotSerial.c: 179: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13008                           
 13009                           ; BSR set to: 0
 13010  0154C0  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13011  0154C4  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13012  0154C8  0100               	movlb	0	; () banked
 13013  0154CA  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13014  0154CC  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13015  0154D0  0100               	movlb	0	; () banked
 13016  0154D2  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13017  0154D4  0100               	movlb	0	; () banked
 13018  0154D6  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13019  0154D8  0E00               	movlw	0
 13020  0154DA  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13021  0154DC  0E00               	movlw	low _iRScriptStack
 13022  0154DE  0100               	movlb	0	; () banked
 13023  0154E0  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13024  0154E2  6EE1               	movwf	fsr1l,c
 13025  0154E4  0E04               	movlw	high _iRScriptStack
 13026  0154E6  0100               	movlb	0	; () banked
 13027  0154E8  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13028  0154EA  6EE2               	movwf	fsr1h,c
 13029  0154EC  CFDF FFE7          	movff	indf2,indf1
 13030                           
 13031                           ; BSR set to: 0
 13032  0154F0  0E02               	movlw	2
 13033  0154F2  0100               	movlb	0	; () banked
 13034  0154F4  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13035  0154F6  0E00               	movlw	0
 13036  0154F8  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13037                           
 13038                           ; BSR set to: 0
 13039  0154FA  0100               	movlb	0	; () banked
 13040  0154FC  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13041  0154FE                     l2118:
 13042                           
 13043                           ; BSR set to: 0
 13044                           
 13045                           ; BSR set to: 0
 13046  0154FE  0100               	movlb	0	; () banked
 13047  015500  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13048  015502  0100               	movlb	0	; () banked
 13049  015504  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13050  015506  A0D8               	btfss	status,0,c
 13051  015508  D7DB               	goto	l2119
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;iRobotSerial.c: 180: }
 13055                           ;iRobotSerial.c: 181: ;
 13056                           ;iRobotSerial.c: 182: iRScriptIndex += bytesToLoad;
 13057                           
 13058                           ; BSR set to: 0
 13059  01550A  0100               	movlb	0	; () banked
 13060  01550C  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13061  01550E  2637               	addwf	_iRScriptIndex,f,c
 13062                           
 13063                           ; BSR set to: 0
 13064  015510  0012               	return		;funcret
 13065  015512                     __end_of_load_iRScriptStack:
 13066                           	opt stack 0
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           postinc0	equ	0xFEE
 13075                           wreg	equ	0xFE8
 13076                           indf1	equ	0xFE7
 13077                           postdec1	equ	0xFE5
 13078                           fsr1h	equ	0xFE2
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           postdec2	equ	0xFDD
 13083                           fsr2h	equ	0xFDA
 13084                           fsr2l	equ	0xFD9
 13085                           status	equ	0xFD8
 13086                           
 13087 ;; *************** function _irobot_init_song_0 *****************
 13088 ;; Defined at:
 13089 ;;		line 251 in file "Library/iRobotSerial.c"
 13090 ;; Parameters:    Size  Location     Type
 13091 ;;		None
 13092 ;; Auto vars:     Size  Location     Type
 13093 ;;		None
 13094 ;; Return value:  Size  Location     Type
 13095 ;;                  1    wreg      void 
 13096 ;; Registers used:
 13097 ;;		wreg, cstack
 13098 ;; Tracked objects:
 13099 ;;		On entry : 0/0
 13100 ;;		On exit  : 0/0
 13101 ;;		Unchanged: 0/0
 13102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;Total ram usage:        0 bytes
 13108 ;; Hardware stack levels used:    1
 13109 ;; Hardware stack levels required when called:    8
 13110 ;; This function calls:
 13111 ;;		_eusart_putch
 13112 ;; This function is called by:
 13113 ;;		_init
 13114 ;; This function uses a non-reentrant model
 13115 ;;
 13116                           
 13117                           	psect	text53
 13118  016230                     __ptext53:
 13119                           	opt stack 0
 13120  016230                     _irobot_init_song_0:
 13121                           	opt stack 21
 13122                           
 13123                           ;iRobotSerial.c: 252: eusart_putch(iR_SONG_INIT);
 13124                           
 13125                           ; BSR set to: 0
 13126                           ;incstack = 0
 13127  016230  0E8C               	movlw	140
 13128  016232  EC7F  F0B2         	call	_eusart_putch
 13129                           
 13130                           ;iRobotSerial.c: 253: eusart_putch(0);
 13131  016236  0E00               	movlw	0
 13132  016238  EC7F  F0B2         	call	_eusart_putch
 13133                           
 13134                           ;iRobotSerial.c: 254: eusart_putch(1);
 13135  01623C  0E01               	movlw	1
 13136  01623E  EC7F  F0B2         	call	_eusart_putch
 13137                           
 13138                           ;iRobotSerial.c: 255: eusart_putch(60);
 13139  016242  0E3C               	movlw	60
 13140  016244  EC7F  F0B2         	call	_eusart_putch
 13141                           
 13142                           ;iRobotSerial.c: 256: eusart_putch(4);
 13143  016248  0E04               	movlw	4
 13144  01624A  EC7F  F0B2         	call	_eusart_putch
 13145  01624E  0012               	return		;funcret
 13146  016250                     __end_of_irobot_init_song_0:
 13147                           	opt stack 0
 13148                           tblptru	equ	0xFF8
 13149                           tblptrh	equ	0xFF7
 13150                           tblptrl	equ	0xFF6
 13151                           tablat	equ	0xFF5
 13152                           prodh	equ	0xFF4
 13153                           prodl	equ	0xFF3
 13154                           intcon	equ	0xFF2
 13155                           postinc0	equ	0xFEE
 13156                           wreg	equ	0xFE8
 13157                           indf1	equ	0xFE7
 13158                           postdec1	equ	0xFE5
 13159                           fsr1h	equ	0xFE2
 13160                           fsr1l	equ	0xFE1
 13161                           indf2	equ	0xFDF
 13162                           postinc2	equ	0xFDE
 13163                           postdec2	equ	0xFDD
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168 ;; *************** function _irobot_init *****************
 13169 ;; Defined at:
 13170 ;;		line 197 in file "Library/iRobotSerial.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, cstack
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;Total ram usage:        0 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; Hardware stack levels required when called:    8
 13191 ;; This function calls:
 13192 ;;		_eusart_putch
 13193 ;; This function is called by:
 13194 ;;		_init
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           	psect	text54
 13199  0164F0                     __ptext54:
 13200                           	opt stack 0
 13201  0164F0                     _irobot_init:
 13202                           	opt stack 21
 13203                           
 13204                           ;iRobotSerial.c: 198: eusart_putch(iR_START);
 13205                           
 13206                           ;incstack = 0
 13207  0164F0  0E80               	movlw	128
 13208  0164F2  EC7F  F0B2         	call	_eusart_putch
 13209                           
 13210                           ;iRobotSerial.c: 199: eusart_putch(iR_FULL_MODE);
 13211  0164F6  0E84               	movlw	132
 13212  0164F8  EC7F  F0B2         	call	_eusart_putch
 13213  0164FC  0012               	return		;funcret
 13214  0164FE                     __end_of_irobot_init:
 13215                           	opt stack 0
 13216                           tblptru	equ	0xFF8
 13217                           tblptrh	equ	0xFF7
 13218                           tblptrl	equ	0xFF6
 13219                           tablat	equ	0xFF5
 13220                           prodh	equ	0xFF4
 13221                           prodl	equ	0xFF3
 13222                           intcon	equ	0xFF2
 13223                           postinc0	equ	0xFEE
 13224                           wreg	equ	0xFE8
 13225                           indf1	equ	0xFE7
 13226                           postdec1	equ	0xFE5
 13227                           fsr1h	equ	0xFE2
 13228                           fsr1l	equ	0xFE1
 13229                           indf2	equ	0xFDF
 13230                           postinc2	equ	0xFDE
 13231                           postdec2	equ	0xFDD
 13232                           fsr2h	equ	0xFDA
 13233                           fsr2l	equ	0xFD9
 13234                           status	equ	0xFD8
 13235                           
 13236 ;; *************** function _eusart_putch *****************
 13237 ;; Defined at:
 13238 ;;		line 120 in file "Library/iRobotSerial.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  eusartSendCh    1    wreg     unsigned char 
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13243 ;; Return value:  Size  Location     Type
 13244 ;;                  1    wreg      void 
 13245 ;; Registers used:
 13246 ;;		wreg
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13256 ;;Total ram usage:        1 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    7
 13259 ;; This function calls:
 13260 ;;		Nothing
 13261 ;; This function is called by:
 13262 ;;		_irobot_query_and_update
 13263 ;;		_irobot_init
 13264 ;;		_irobot_move
 13265 ;;		_irobot_leds
 13266 ;;		_irobot_init_song_0
 13267 ;;		_irobot_song_play
 13268 ;;		_irobot_script_play
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           	psect	text55
 13273  0164FE                     __ptext55:
 13274                           	opt stack 0
 13275  0164FE                     _eusart_putch:
 13276                           	opt stack 20
 13277                           
 13278                           ;incstack = 0
 13279                           ;eusart_putch@eusartSendChar stored from wreg
 13280  0164FE  0100               	movlb	0	; () banked
 13281  016500  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13282  016502                     
 13283                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13284  016502  A2AD               	btfss	4013,1,c	;volatile
 13285  016504  D7FE               	goto	l12612
 13286                           
 13287                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13288  016506  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13289  01650A  0012               	return		;funcret
 13290  01650C                     __end_of_eusart_putch:
 13291                           	opt stack 0
 13292                           tblptru	equ	0xFF8
 13293                           tblptrh	equ	0xFF7
 13294                           tblptrl	equ	0xFF6
 13295                           tablat	equ	0xFF5
 13296                           prodh	equ	0xFF4
 13297                           prodl	equ	0xFF3
 13298                           intcon	equ	0xFF2
 13299                           postinc0	equ	0xFEE
 13300                           wreg	equ	0xFE8
 13301                           indf1	equ	0xFE7
 13302                           postdec1	equ	0xFE5
 13303                           fsr1h	equ	0xFE2
 13304                           fsr1l	equ	0xFE1
 13305                           indf2	equ	0xFDF
 13306                           postinc2	equ	0xFDE
 13307                           postdec2	equ	0xFDD
 13308                           fsr2h	equ	0xFDA
 13309                           fsr2l	equ	0xFD9
 13310                           status	equ	0xFD8
 13311                           
 13312 ;; *************** function _eusart_init *****************
 13313 ;; Defined at:
 13314 ;;		line 103 in file "Library/iRobotSerial.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;		None
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;		None
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  1    wreg      void 
 13321 ;; Registers used:
 13322 ;;		wreg, status,2
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;Total ram usage:        0 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; Hardware stack levels required when called:    7
 13335 ;; This function calls:
 13336 ;;		Nothing
 13337 ;; This function is called by:
 13338 ;;		_init
 13339 ;; This function uses a non-reentrant model
 13340 ;;
 13341                           
 13342                           	psect	text56
 13343  01626E                     __ptext56:
 13344                           	opt stack 0
 13345  01626E                     _eusart_init:
 13346                           	opt stack 22
 13347                           
 13348                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13349                           
 13350                           ;incstack = 0
 13351  01626E  9C94               	bcf	3988,6,c	;volatile
 13352                           
 13353                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13354  016270  8E94               	bsf	3988,7,c	;volatile
 13355                           
 13356                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13357  016272  0E24               	movlw	36
 13358  016274  6EAD               	movwf	4013,c	;volatile
 13359                           
 13360                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13361  016276  0E98               	movlw	152
 13362  016278  6EAC               	movwf	4012,c	;volatile
 13363                           
 13364                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13365  01627A  9A7E               	bcf	3966,5,c	;volatile
 13366                           
 13367                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13368  01627C  987E               	bcf	3966,4,c	;volatile
 13369                           
 13370                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13371  01627E  927E               	bcf	3966,1,c	;volatile
 13372                           
 13373                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13374  016280  907E               	bcf	3966,0,c	;volatile
 13375                           
 13376                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13377  016282  84AD               	bsf	4013,2,c	;volatile
 13378                           
 13379                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13380  016284  967E               	bcf	3966,3,c	;volatile
 13381                           
 13382                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13383  016286  0E33               	movlw	51
 13384  016288  6EB0               	movwf	4016,c	;volatile
 13385  01628A  0012               	return		;funcret
 13386  01628C                     __end_of_eusart_init:
 13387                           	opt stack 0
 13388                           tblptru	equ	0xFF8
 13389                           tblptrh	equ	0xFF7
 13390                           tblptrl	equ	0xFF6
 13391                           tablat	equ	0xFF5
 13392                           prodh	equ	0xFF4
 13393                           prodl	equ	0xFF3
 13394                           intcon	equ	0xFF2
 13395                           postinc0	equ	0xFEE
 13396                           wreg	equ	0xFE8
 13397                           indf1	equ	0xFE7
 13398                           postdec1	equ	0xFE5
 13399                           fsr1h	equ	0xFE2
 13400                           fsr1l	equ	0xFE1
 13401                           indf2	equ	0xFDF
 13402                           postinc2	equ	0xFDE
 13403                           postdec2	equ	0xFDD
 13404                           fsr2h	equ	0xFDA
 13405                           fsr2l	equ	0xFD9
 13406                           status	equ	0xFD8
 13407                           
 13408 ;; *************** function _Motor_Init *****************
 13409 ;; Defined at:
 13410 ;;		line 26 in file "Library/Motor.c"
 13411 ;; Parameters:    Size  Location     Type
 13412 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13413 ;;		 -> Stepper(6), 
 13414 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;		None
 13417 ;; Return value:  Size  Location     Type
 13418 ;;                  1    wreg      void 
 13419 ;; Registers used:
 13420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13421 ;; Tracked objects:
 13422 ;;		On entry : 0/0
 13423 ;;		On exit  : 0/0
 13424 ;;		Unchanged: 0/0
 13425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13426 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13429 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;Total ram usage:        4 bytes
 13431 ;; Hardware stack levels used:    1
 13432 ;; Hardware stack levels required when called:   12
 13433 ;; This function calls:
 13434 ;;		_Port_SetPin
 13435 ;;		_Port_SetPinType
 13436 ;;		_Timer0_Init
 13437 ;; This function is called by:
 13438 ;;		_init
 13439 ;; This function uses a non-reentrant model
 13440 ;;
 13441                           
 13442                           	psect	text57
 13443  013A8E                     __ptext57:
 13444                           	opt stack 0
 13445  013A8E                     _Motor_Init:
 13446                           	opt stack 17
 13447                           
 13448                           ;Motor.c: 28: pMotor->mDelta = 0;
 13449                           
 13450                           ;incstack = 0
 13451  013A8E  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13452  013A92  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13453  013A96  0E00               	movlw	0
 13454  013A98  6EDE               	movwf	postinc2,c
 13455  013A9A  0E00               	movlw	0
 13456  013A9C  6EDD               	movwf	postdec2,c
 13457                           
 13458                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13459  013A9E  0100               	movlb	0	; () banked
 13460  013AA0  EE20 F002          	lfsr	2,2
 13461  013AA4  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13462  013AA6  26D9               	addwf	fsr2l,f,c
 13463  013AA8  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13464  013AAA  22DA               	addwfc	fsr2h,f,c
 13465  013AAC  0E00               	movlw	0
 13466  013AAE  6EDE               	movwf	postinc2,c
 13467  013AB0  0E00               	movlw	0
 13468  013AB2  6EDD               	movwf	postdec2,c
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13472  013AB4  0100               	movlb	0	; () banked
 13473  013AB6  EE20 F004          	lfsr	2,4
 13474  013ABA  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13475  013ABC  26D9               	addwf	fsr2l,f,c
 13476  013ABE  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13477  013AC0  22DA               	addwfc	fsr2h,f,c
 13478  013AC2  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 13479  013AC6  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13483  013ACA  0E93               	movlw	low _PortE
 13484  013ACC  0100               	movlb	0	; () banked
 13485  013ACE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13486  013AD0  0E00               	movlw	high _PortE
 13487  013AD2  0100               	movlb	0	; () banked
 13488  013AD4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13489  013AD6  0E00               	movlw	0
 13490  013AD8  0100               	movlb	0	; () banked
 13491  013ADA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13492  013ADC  0E03               	movlw	3
 13493  013ADE  0100               	movlb	0	; () banked
 13494  013AE0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13495  013AE2  ECB4  F092         	call	_Port_SetPinType	;wreg free
 13496                           
 13497                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13498  013AE6  0E93               	movlw	low _PortE
 13499  013AE8  0100               	movlb	0	; () banked
 13500  013AEA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13501  013AEC  0E00               	movlw	high _PortE
 13502  013AEE  0100               	movlb	0	; () banked
 13503  013AF0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13504  013AF2  0E01               	movlw	1
 13505  013AF4  0100               	movlb	0	; () banked
 13506  013AF6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13507  013AF8  0E03               	movlw	3
 13508  013AFA  0100               	movlb	0	; () banked
 13509  013AFC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13510  013AFE  ECB4  F092         	call	_Port_SetPinType	;wreg free
 13511                           
 13512                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13513  013B02  0E93               	movlw	low _PortE
 13514  013B04  0100               	movlb	0	; () banked
 13515  013B06  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13516  013B08  0E00               	movlw	high _PortE
 13517  013B0A  0100               	movlb	0	; () banked
 13518  013B0C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13519  013B0E  0E00               	movlw	0
 13520  013B10  0100               	movlb	0	; () banked
 13521  013B12  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13522  013B14  0E00               	movlw	0
 13523  013B16  0100               	movlb	0	; () banked
 13524  013B18  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13525  013B1A  EC84  F09E         	call	_Port_SetPin	;wreg free
 13526                           
 13527                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13528  013B1E  0E93               	movlw	low _PortE
 13529  013B20  0100               	movlb	0	; () banked
 13530  013B22  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13531  013B24  0E00               	movlw	high _PortE
 13532  013B26  0100               	movlb	0	; () banked
 13533  013B28  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13534  013B2A  0E01               	movlw	1
 13535  013B2C  0100               	movlb	0	; () banked
 13536  013B2E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13537  013B30  0E00               	movlw	0
 13538  013B32  0100               	movlb	0	; () banked
 13539  013B34  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13540  013B36  EC84  F09E         	call	_Port_SetPin	;wreg free
 13541                           
 13542                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13543  013B3A  0EF6               	movlw	low _Motor_Step
 13544  013B3C  0100               	movlb	0	; () banked
 13545  013B3E  6F66               	movwf	_lStepFunction& (0+255),b
 13546  013B40  0E32               	movlw	high _Motor_Step
 13547  013B42  0100               	movlb	0	; () banked
 13548  013B44  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 13549  013B46  0E01               	movlw	low (_Motor_Step shr (0+16))
 13550  013B48  0100               	movlb	0	; () banked
 13551  013B4A  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;Motor.c: 39: Timer0_Init(1000);
 13555  013B4C  0EE8               	movlw	232
 13556  013B4E  0100               	movlb	0	; () banked
 13557  013B50  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 13558  013B52  0E03               	movlw	3
 13559  013B54  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13560  013B56  0E00               	movlw	0
 13561  013B58  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13562  013B5A  0E00               	movlw	0
 13563  013B5C  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13564  013B5E  EC1B  F098         	call	_Timer0_Init	;wreg free
 13565  013B62  0012               	return		;funcret
 13566  013B64                     __end_of_Motor_Init:
 13567                           	opt stack 0
 13568                           tblptru	equ	0xFF8
 13569                           tblptrh	equ	0xFF7
 13570                           tblptrl	equ	0xFF6
 13571                           tablat	equ	0xFF5
 13572                           prodh	equ	0xFF4
 13573                           prodl	equ	0xFF3
 13574                           intcon	equ	0xFF2
 13575                           postinc0	equ	0xFEE
 13576                           wreg	equ	0xFE8
 13577                           indf1	equ	0xFE7
 13578                           postdec1	equ	0xFE5
 13579                           fsr1h	equ	0xFE2
 13580                           fsr1l	equ	0xFE1
 13581                           indf2	equ	0xFDF
 13582                           postinc2	equ	0xFDE
 13583                           postdec2	equ	0xFDD
 13584                           fsr2h	equ	0xFDA
 13585                           fsr2l	equ	0xFD9
 13586                           status	equ	0xFD8
 13587                           
 13588 ;; *************** function _Timer0_Init *****************
 13589 ;; Defined at:
 13590 ;;		line 25 in file "Library/Timer0.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13595 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13596 ;; Return value:  Size  Location     Type
 13597 ;;                  1    wreg      void 
 13598 ;; Registers used:
 13599 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13600 ;; Tracked objects:
 13601 ;;		On entry : 0/0
 13602 ;;		On exit  : 0/0
 13603 ;;		Unchanged: 0/0
 13604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13605 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;Total ram usage:       14 bytes
 13610 ;; Hardware stack levels used:    1
 13611 ;; Hardware stack levels required when called:    8
 13612 ;; This function calls:
 13613 ;;		_Timer0_Clear
 13614 ;;		___lldiv
 13615 ;; This function is called by:
 13616 ;;		_Motor_Init
 13617 ;;		_Motor_Speed
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           	psect	text58
 13622  013036                     __ptext58:
 13623                           	opt stack 0
 13624  013036                     _Timer0_Init:
 13625                           	opt stack 19
 13626                           
 13627                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13628                           
 13629                           ;incstack = 0
 13630  013036  0E80               	movlw	128
 13631  013038  0100               	movlb	0	; () banked
 13632  01303A  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13633  01303C  0E8D               	movlw	141
 13634  01303E  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13635  013040  0E5B               	movlw	91
 13636  013042  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13637  013044  0E00               	movlw	0
 13638  013046  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13642                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13643                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13644                           ;Timer0.c: 34: UINT32 DIVIDE;
 13645                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13646  013048  9ED5               	bcf	4053,7,c	;volatile
 13647                           
 13648                           ; BSR set to: 0
 13649                           ;Timer0.c: 38: if (pFrequency == 0)
 13650  01304A  0100               	movlb	0	; () banked
 13651  01304C  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13652  01304E  0100               	movlb	0	; () banked
 13653  013050  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13654  013052  0100               	movlb	0	; () banked
 13655  013054  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13656  013056  0100               	movlb	0	; () banked
 13657  013058  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13658  01305A  B4D8               	btfsc	status,2,c
 13659  01305C  0012               	return	
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13663                           
 13664                           ; BSR set to: 0
 13665                           ;Timer0.c: 39: return;
 13666  01305E  96D5               	bcf	4053,3,c	;volatile
 13667                           
 13668                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13669  013060  9CD5               	bcf	4053,6,c	;volatile
 13670                           
 13671                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13672  013062  9AD5               	bcf	4053,5,c	;volatile
 13673                           
 13674                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13675  013064  98D5               	bcf	4053,4,c	;volatile
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13679  013066  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13680  01306A  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13681  01306E  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13682  013072  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13683  013076  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13684  01307A  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13685  01307E  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13686  013082  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13687  013086  EC66  F0A0         	call	___lldiv	;wreg free
 13688  01308A  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 13689  01308E  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13690  013092  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13691  013096  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13692                           
 13693                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13694  01309A  D00C               	goto	l1787
 13695  01309C                     l13442:
 13696                           
 13697                           ;Timer0.c: 50: {
 13698                           ;Timer0.c: 51: INDEX ++;
 13699  01309C  0100               	movlb	0	; () banked
 13700  01309E  2B8F               	incf	_INDEX& (0+255),f,b
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;Timer0.c: 52: if (INDEX >= 3)
 13704  0130A0  0E02               	movlw	2
 13705  0130A2  0100               	movlb	0	; () banked
 13706  0130A4  658F               	cpfsgt	_INDEX& (0+255),b
 13707  0130A6  D001               	goto	l1785
 13708  0130A8  D02F               	goto	u9880
 13709  0130AA                     l1785:
 13710                           
 13711                           ; BSR set to: 0
 13712                           ;Timer0.c: 56: if (INDEX >= 8)
 13713                           
 13714                           ; BSR set to: 0
 13715  0130AA  0E07               	movlw	7
 13716  0130AC  0100               	movlb	0	; () banked
 13717  0130AE  658F               	cpfsgt	_INDEX& (0+255),b
 13718  0130B0  D001               	goto	l1787
 13719  0130B2  0012               	return	
 13720  0130B4                     l1787:
 13721                           
 13722                           ; BSR set to: 0
 13723                           
 13724                           ; BSR set to: 0
 13725  0130B4  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 13726  0130B8  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 13727  0130BC  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 13728  0130C0  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 13729  0130C4  0100               	movlb	0	; () banked
 13730  0130C6  518F               	movf	_INDEX& (0+255),w,b
 13731  0130C8  0D02               	mullw	2
 13732  0130CA  0E31               	movlw	low Timer0_Init@PRESCALE
 13733  0130CC  24F3               	addwf	prodl,w,c
 13734  0130CE  6EF6               	movwf	tblptrl,c
 13735  0130D0  0EFD               	movlw	high Timer0_Init@PRESCALE
 13736  0130D2  20F4               	addwfc	prodh,w,c
 13737  0130D4  6EF7               	movwf	tblptrh,c
 13738  0130D6                     	if	1	;There are 3 active tblptr bytes
 13739  0130D6  6AF8               	clrf	tblptru,c
 13740  0130D8  0E00               	movlw	low (__mediumconst shr (0+16))
 13741  0130DA  22F8               	addwfc	tblptru,f,c
 13742  0130DC                     	endif
 13743  0130DC  0009               	tblrd		*+
 13744  0130DE  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 13745  0130E2  0009               	tblrd		*+
 13746  0130E4  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 13747  0130E8  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 13748  0130EC  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 13749  0130F0  0100               	movlb	0	; () banked
 13750  0130F2  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 13751  0130F4  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 13752  0130F6  EC66  F0A0         	call	___lldiv	;wreg free
 13753  0130FA  0100               	movlb	0	; () banked
 13754  0130FC  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 13755  0130FE  E1CE               	bnz	l13442
 13756  013100  0100               	movlb	0	; () banked
 13757  013102  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 13758  013104  B0D8               	btfsc	status,0,c
 13759  013106  D7CA               	goto	l1784
 13760  013108                     u9880:
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;Timer0.c: 58: }
 13764                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 13765                           
 13766                           ; BSR set to: 0
 13767  013108  0100               	movlb	0	; () banked
 13768  01310A  518F               	movf	_INDEX& (0+255),w,b
 13769  01310C  0D02               	mullw	2
 13770  01310E  0E31               	movlw	low Timer0_Init@PRESCALE
 13771  013110  24F3               	addwf	prodl,w,c
 13772  013112  6EF6               	movwf	tblptrl,c
 13773  013114  0EFD               	movlw	high Timer0_Init@PRESCALE
 13774  013116  20F4               	addwfc	prodh,w,c
 13775  013118  6EF7               	movwf	tblptrh,c
 13776  01311A                     	if	1	;There are 3 active tblptr bytes
 13777  01311A  6AF8               	clrf	tblptru,c
 13778  01311C  0E00               	movlw	low (__mediumconst shr (0+16))
 13779  01311E  22F8               	addwfc	tblptru,f,c
 13780  013120                     	endif
 13781  013120  0008               	tblrd		*
 13782  013122  CFF5 F08E          	movff	tablat,Timer0_Init@PRE
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 13786  013126  0EFF               	movlw	255
 13787  013128  0100               	movlb	0	; () banked
 13788  01312A  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 13789  01312C  0103               	movlb	3	; () banked
 13790  01312E  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 13791  013130  0EFF               	movlw	255
 13792  013132  0100               	movlb	0	; () banked
 13793  013134  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 13794  013136  0103               	movlb	3	; () banked
 13795  013138  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 13796  01313A  0EFF               	movlw	255
 13797  01313C  0100               	movlb	0	; () banked
 13798  01313E  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 13799  013140  0103               	movlb	3	; () banked
 13800  013142  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 13801  013144  0EFF               	movlw	255
 13802  013146  0100               	movlb	0	; () banked
 13803  013148  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 13804  01314A  0103               	movlb	3	; () banked
 13805  01314C  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 13806                           
 13807                           ; BSR set to: 3
 13808                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 13809  01314E  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 13810  013152  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 13811  013156  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 13812  01315A  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 13813  01315E  0100               	movlb	0	; () banked
 13814  013160  518E               	movf	Timer0_Init@PRE& (0+255),w,b
 13815  013162  0100               	movlb	0	; () banked
 13816  013164  6FBE               	movwf	___lldiv@divisor& (0+255),b
 13817  013166  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 13818  013168  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 13819  01316A  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 13820  01316C  EC66  F0A0         	call	___lldiv	;wreg free
 13821  013170  0100               	movlb	0	; () banked
 13822  013172  1FBA               	comf	?___lldiv& (0+255),f,b
 13823  013174  0100               	movlb	0	; () banked
 13824  013176  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 13825  013178  0100               	movlb	0	; () banked
 13826  01317A  4BBA               	infsnz	?___lldiv& (0+255),f,b
 13827  01317C  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 13828  01317E  0EFF               	movlw	255
 13829  013180  0100               	movlb	0	; () banked
 13830  013182  25BA               	addwf	?___lldiv& (0+255),w,b
 13831  013184  6E29               	movwf	_COUNTER,c
 13832  013186  0EFF               	movlw	255
 13833  013188  0100               	movlb	0	; () banked
 13834  01318A  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 13835  01318C  6E2A               	movwf	_COUNTER+1,c
 13836                           
 13837                           ; BSR set to: 0
 13838                           ;Timer0.c: 68: Timer0_Clear();
 13839  01318E  ECA1  F0B2         	call	_Timer0_Clear	;wreg free
 13840                           
 13841                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 13842  013192  8ED5               	bsf	4053,7,c	;volatile
 13843  013194  0012               	return		;funcret
 13844  013196                     __end_of_Timer0_Init:
 13845                           	opt stack 0
 13846                           tblptru	equ	0xFF8
 13847                           tblptrh	equ	0xFF7
 13848                           tblptrl	equ	0xFF6
 13849                           tablat	equ	0xFF5
 13850                           prodh	equ	0xFF4
 13851                           prodl	equ	0xFF3
 13852                           intcon	equ	0xFF2
 13853                           postinc0	equ	0xFEE
 13854                           wreg	equ	0xFE8
 13855                           indf1	equ	0xFE7
 13856                           postdec1	equ	0xFE5
 13857                           fsr1h	equ	0xFE2
 13858                           fsr1l	equ	0xFE1
 13859                           indf2	equ	0xFDF
 13860                           postinc2	equ	0xFDE
 13861                           postdec2	equ	0xFDD
 13862                           fsr2h	equ	0xFDA
 13863                           fsr2l	equ	0xFD9
 13864                           status	equ	0xFD8
 13865                           
 13866 ;; *************** function _Timer0_Clear *****************
 13867 ;; Defined at:
 13868 ;;		line 20 in file "Library/Timer0.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;		None
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;		None
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  1    wreg      void 
 13875 ;; Registers used:
 13876 ;;		None
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;Total ram usage:        0 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    7
 13889 ;; This function calls:
 13890 ;;		Nothing
 13891 ;; This function is called by:
 13892 ;;		_Timer0_Init
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text59
 13897  016542                     __ptext59:
 13898                           	opt stack 0
 13899  016542                     _Timer0_Clear:
 13900                           	opt stack 19
 13901                           
 13902                           ;Timer0.c: 22: TMR0 = COUNTER;
 13903                           
 13904                           ;incstack = 0
 13905  016542  C029  FFD6         	movff	_COUNTER,4054	;volatile
 13906  016546  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 13907                           
 13908                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 13909  01654A  94F2               	bcf	intcon,2,c	;volatile
 13910  01654C  0012               	return		;funcret
 13911  01654E                     __end_of_Timer0_Clear:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           postinc0	equ	0xFEE
 13921                           wreg	equ	0xFE8
 13922                           indf1	equ	0xFE7
 13923                           postdec1	equ	0xFE5
 13924                           fsr1h	equ	0xFE2
 13925                           fsr1l	equ	0xFE1
 13926                           indf2	equ	0xFDF
 13927                           postinc2	equ	0xFDE
 13928                           postdec2	equ	0xFDD
 13929                           fsr2h	equ	0xFDA
 13930                           fsr2l	equ	0xFD9
 13931                           status	equ	0xFD8
 13932                           
 13933 ;; *************** function _MXK_Init *****************
 13934 ;; Defined at:
 13935 ;;		line 33 in file "Library/MXK.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;		None
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;		None
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  1    wreg      void 
 13942 ;; Registers used:
 13943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;Total ram usage:        0 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:   16
 13956 ;; This function calls:
 13957 ;;		_LED_Init
 13958 ;;		_Port_Init
 13959 ;;		_Port_SetPin
 13960 ;;		_Port_SetPinType
 13961 ;;		_Port_SetQuadType
 13962 ;;		_Port_SetType
 13963 ;;		_delay_ms
 13964 ;; This function is called by:
 13965 ;;		_init
 13966 ;; This function uses a non-reentrant model
 13967 ;;
 13968                           
 13969                           	psect	text60
 13970  012BDE                     __ptext60:
 13971                           	opt stack 0
 13972  012BDE                     _MXK_Init:
 13973                           	opt stack 13
 13974                           
 13975                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 13976                           
 13977                           ;incstack = 0
 13978  012BDE  0E01               	movlw	1
 13979  012BE0  6E4B               	movwf	_Bus_State,c
 13980                           
 13981                           ;MXK.c: 36: lQueue = (Function)0;
 13982  012BE2  0E00               	movlw	0
 13983  012BE4  0100               	movlb	0	; () banked
 13984  012BE6  6F63               	movwf	_lQueue& (0+255),b	;volatile
 13985  012BE8  0E00               	movlw	0
 13986  012BEA  0100               	movlb	0	; () banked
 13987  012BEC  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 13988  012BEE  0E00               	movlw	0
 13989  012BF0  0100               	movlb	0	; () banked
 13990  012BF2  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 13994  012BF4  0EB4               	movlw	low _PortA
 13995  012BF6  0101               	movlb	1	; () banked
 13996  012BF8  6F01               	movwf	Port_Init@pInput& (0+255),b
 13997  012BFA  0E03               	movlw	high _PortA
 13998  012BFC  0101               	movlb	1	; () banked
 13999  012BFE  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14000  012C00  0E00               	movlw	0
 14001  012C02  0101               	movlb	1	; () banked
 14002  012C04  6F03               	movwf	Port_Init@pPort& (0+255),b
 14003  012C06  EC63  F094         	call	_Port_Init	;wreg free
 14004                           
 14005                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14006  012C0A  0EAA               	movlw	low _PortB
 14007  012C0C  0101               	movlb	1	; () banked
 14008  012C0E  6F01               	movwf	Port_Init@pInput& (0+255),b
 14009  012C10  0E03               	movlw	high _PortB
 14010  012C12  0101               	movlb	1	; () banked
 14011  012C14  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14012  012C16  0E01               	movlw	1
 14013  012C18  0101               	movlb	1	; () banked
 14014  012C1A  6F03               	movwf	Port_Init@pPort& (0+255),b
 14015  012C1C  EC63  F094         	call	_Port_Init	;wreg free
 14016                           
 14017                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14018  012C20  0EA7               	movlw	low _PortC
 14019  012C22  0101               	movlb	1	; () banked
 14020  012C24  6F01               	movwf	Port_Init@pInput& (0+255),b
 14021  012C26  0E00               	movlw	high _PortC
 14022  012C28  0101               	movlb	1	; () banked
 14023  012C2A  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14024  012C2C  0E02               	movlw	2
 14025  012C2E  0101               	movlb	1	; () banked
 14026  012C30  6F03               	movwf	Port_Init@pPort& (0+255),b
 14027  012C32  EC63  F094         	call	_Port_Init	;wreg free
 14028                           
 14029                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14030  012C36  0E9D               	movlw	low _PortD
 14031  012C38  0101               	movlb	1	; () banked
 14032  012C3A  6F01               	movwf	Port_Init@pInput& (0+255),b
 14033  012C3C  0E00               	movlw	high _PortD
 14034  012C3E  0101               	movlb	1	; () banked
 14035  012C40  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14036  012C42  0E03               	movlw	3
 14037  012C44  0101               	movlb	1	; () banked
 14038  012C46  6F03               	movwf	Port_Init@pPort& (0+255),b
 14039  012C48  EC63  F094         	call	_Port_Init	;wreg free
 14040                           
 14041                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14042  012C4C  0E93               	movlw	low _PortE
 14043  012C4E  0101               	movlb	1	; () banked
 14044  012C50  6F01               	movwf	Port_Init@pInput& (0+255),b
 14045  012C52  0E00               	movlw	high _PortE
 14046  012C54  0101               	movlb	1	; () banked
 14047  012C56  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14048  012C58  0E04               	movlw	4
 14049  012C5A  0101               	movlb	1	; () banked
 14050  012C5C  6F03               	movwf	Port_Init@pPort& (0+255),b
 14051  012C5E  EC63  F094         	call	_Port_Init	;wreg free
 14052                           
 14053                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14054  012C62  0EBE               	movlw	low _PortF
 14055  012C64  0101               	movlb	1	; () banked
 14056  012C66  6F01               	movwf	Port_Init@pInput& (0+255),b
 14057  012C68  0E03               	movlw	high _PortF
 14058  012C6A  0101               	movlb	1	; () banked
 14059  012C6C  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14060  012C6E  0E05               	movlw	5
 14061  012C70  0101               	movlb	1	; () banked
 14062  012C72  6F03               	movwf	Port_Init@pPort& (0+255),b
 14063  012C74  EC63  F094         	call	_Port_Init	;wreg free
 14064                           
 14065                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14066  012C78  0EA0               	movlw	low _PortG
 14067  012C7A  0101               	movlb	1	; () banked
 14068  012C7C  6F01               	movwf	Port_Init@pInput& (0+255),b
 14069  012C7E  0E03               	movlw	high _PortG
 14070  012C80  0101               	movlb	1	; () banked
 14071  012C82  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14072  012C84  0E06               	movlw	6
 14073  012C86  0101               	movlb	1	; () banked
 14074  012C88  6F03               	movwf	Port_Init@pPort& (0+255),b
 14075  012C8A  EC63  F094         	call	_Port_Init	;wreg free
 14076                           
 14077                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14078  012C8E  0EBE               	movlw	low _PortF
 14079  012C90  0100               	movlb	0	; () banked
 14080  012C92  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14081  012C94  0E03               	movlw	high _PortF
 14082  012C96  0100               	movlb	0	; () banked
 14083  012C98  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14084  012C9A  0E05               	movlw	5
 14085  012C9C  0100               	movlb	0	; () banked
 14086  012C9E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14087  012CA0  0E00               	movlw	0
 14088  012CA2  0100               	movlb	0	; () banked
 14089  012CA4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14090  012CA6  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14091                           
 14092                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14093  012CAA  0EAA               	movlw	low _PortB
 14094  012CAC  0100               	movlb	0	; () banked
 14095  012CAE  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14096  012CB0  0E03               	movlw	high _PortB
 14097  012CB2  0100               	movlb	0	; () banked
 14098  012CB4  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14099  012CB6  0E00               	movlw	0
 14100  012CB8  0100               	movlb	0	; () banked
 14101  012CBA  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14102  012CBC  0E00               	movlw	0
 14103  012CBE  0100               	movlb	0	; () banked
 14104  012CC0  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14105  012CC2  ECA7  F08C         	call	_Port_SetQuadType	;wreg free
 14106                           
 14107                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14108  012CC6  0EBE               	movlw	low _PortF
 14109  012CC8  0100               	movlb	0	; () banked
 14110  012CCA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14111  012CCC  0E03               	movlw	high _PortF
 14112  012CCE  0100               	movlb	0	; () banked
 14113  012CD0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14114  012CD2  0E06               	movlw	6
 14115  012CD4  0100               	movlb	0	; () banked
 14116  012CD6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14117  012CD8  0E03               	movlw	3
 14118  012CDA  0100               	movlb	0	; () banked
 14119  012CDC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14120  012CDE  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14121                           
 14122                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14123  012CE2  0EA0               	movlw	low _PortG
 14124  012CE4  0100               	movlb	0	; () banked
 14125  012CE6  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14126  012CE8  0E03               	movlw	high _PortG
 14127  012CEA  0100               	movlb	0	; () banked
 14128  012CEC  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14129  012CEE  0E03               	movlw	3
 14130  012CF0  0100               	movlb	0	; () banked
 14131  012CF2  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14132  012CF4  ECD2  F08D         	call	_Port_SetType	;wreg free
 14133                           
 14134                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14135  012CF8  0EA0               	movlw	low _PortG
 14136  012CFA  0100               	movlb	0	; () banked
 14137  012CFC  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14138  012CFE  0E03               	movlw	high _PortG
 14139  012D00  0100               	movlb	0	; () banked
 14140  012D02  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14141  012D04  0E04               	movlw	4
 14142  012D06  0100               	movlb	0	; () banked
 14143  012D08  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14144  012D0A  0E00               	movlw	0
 14145  012D0C  0100               	movlb	0	; () banked
 14146  012D0E  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14147  012D10  EC84  F09E         	call	_Port_SetPin	;wreg free
 14148                           
 14149                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14150  012D14  0EBE               	movlw	low _PortF
 14151  012D16  0100               	movlb	0	; () banked
 14152  012D18  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14153  012D1A  0E03               	movlw	high _PortF
 14154  012D1C  0100               	movlb	0	; () banked
 14155  012D1E  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14156  012D20  0E06               	movlw	6
 14157  012D22  0100               	movlb	0	; () banked
 14158  012D24  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14159  012D26  0E01               	movlw	1
 14160  012D28  0100               	movlb	0	; () banked
 14161  012D2A  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14162  012D2C  EC84  F09E         	call	_Port_SetPin	;wreg free
 14163                           
 14164                           ;MXK.c: 55: LED_Init(eLED1);
 14165  012D30  0E00               	movlw	0
 14166  012D32  EC8B  F0AB         	call	_LED_Init
 14167                           
 14168                           ;MXK.c: 56: LED_Init(eLED2);
 14169  012D36  0E01               	movlw	1
 14170  012D38  EC8B  F0AB         	call	_LED_Init
 14171                           
 14172                           ;MXK.c: 58: PIR1 = 0;
 14173  012D3C  0E00               	movlw	0
 14174  012D3E  6E9E               	movwf	3998,c	;volatile
 14175                           
 14176                           ;MXK.c: 59: PIR2 = 0;
 14177  012D40  0E00               	movlw	0
 14178  012D42  6EA1               	movwf	4001,c	;volatile
 14179                           
 14180                           ;MXK.c: 60: PIR3 = 0;
 14181  012D44  0E00               	movlw	0
 14182  012D46  6EA4               	movwf	4004,c	;volatile
 14183                           
 14184                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14185  012D48  8E9B               	bsf	3995,7,c	;volatile
 14186                           
 14187                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14188  012D4A  8C9B               	bsf	3995,6,c	;volatile
 14189                           
 14190                           ;MXK.c: 66: delay_ms(100);
 14191  012D4C  0E00               	movlw	0
 14192  012D4E  0100               	movlb	0	; () banked
 14193  012D50  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14194  012D52  0E64               	movlw	100
 14195  012D54  6FBA               	movwf	delay_ms@ms& (0+255),b
 14196  012D56  EC89  F0AA         	call	_delay_ms	;wreg free
 14197                           
 14198                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14199  012D5A  8ED0               	bsf	4048,7,c	;volatile
 14200  012D5C  0012               	return		;funcret
 14201  012D5E                     __end_of_MXK_Init:
 14202                           	opt stack 0
 14203                           tblptru	equ	0xFF8
 14204                           tblptrh	equ	0xFF7
 14205                           tblptrl	equ	0xFF6
 14206                           tablat	equ	0xFF5
 14207                           prodh	equ	0xFF4
 14208                           prodl	equ	0xFF3
 14209                           intcon	equ	0xFF2
 14210                           postinc0	equ	0xFEE
 14211                           wreg	equ	0xFE8
 14212                           indf1	equ	0xFE7
 14213                           postdec1	equ	0xFE5
 14214                           fsr1h	equ	0xFE2
 14215                           fsr1l	equ	0xFE1
 14216                           indf2	equ	0xFDF
 14217                           postinc2	equ	0xFDE
 14218                           postdec2	equ	0xFDD
 14219                           fsr2h	equ	0xFDA
 14220                           fsr2l	equ	0xFD9
 14221                           status	equ	0xFD8
 14222                           
 14223 ;; *************** function _Port_Init *****************
 14224 ;; Defined at:
 14225 ;;		line 150 in file "Library/Port.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14228 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14229 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14230 ;;  pPort           1    3[BANK1 ] enum E6786
 14231 ;; Auto vars:     Size  Location     Type
 14232 ;;  i               1    6[BANK1 ] unsigned char 
 14233 ;; Return value:  Size  Location     Type
 14234 ;;                  1    wreg      void 
 14235 ;; Registers used:
 14236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14237 ;; Tracked objects:
 14238 ;;		On entry : 0/0
 14239 ;;		On exit  : 0/0
 14240 ;;		Unchanged: 0/0
 14241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14242 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14243 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14244 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14245 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14246 ;;Total ram usage:        6 bytes
 14247 ;; Hardware stack levels used:    1
 14248 ;; Hardware stack levels required when called:   15
 14249 ;; This function calls:
 14250 ;;		_GetPortPORT
 14251 ;;		_GetPortProperties
 14252 ;;		_GetPortTRIS
 14253 ;;		_Port_Set
 14254 ;;		_Port_SetPinType
 14255 ;;		_Port_SetType
 14256 ;;		_Word_GetPair
 14257 ;; This function is called by:
 14258 ;;		_MXK_Init
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           	psect	text61
 14263  0128C6                     __ptext61:
 14264                           	opt stack 0
 14265  0128C6                     _Port_Init:
 14266                           	opt stack 13
 14267                           
 14268                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14269                           
 14270                           ;incstack = 0
 14271  0128C6  0101               	movlb	1	; () banked
 14272  0128C8  5103               	movf	Port_Init@pPort& (0+255),w,b
 14273  0128CA  ECD0  F0A3         	call	_GetPortProperties
 14274  0128CE  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14275  0128D2  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14276  0128D6  0100               	movlb	0	; () banked
 14277  0128D8  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14278  0128DC  0100               	movlb	0	; () banked
 14279  0128DE  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14280                           
 14281                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14282  0128E2  0101               	movlb	1	; () banked
 14283  0128E4  5103               	movf	Port_Init@pPort& (0+255),w,b
 14284  0128E6  EC23  F0A4         	call	_GetPortPORT
 14285  0128EA  0101               	movlb	1	; () banked
 14286  0128EC  EE20 F006          	lfsr	2,6
 14287  0128F0  5101               	movf	Port_Init@pInput& (0+255),w,b
 14288  0128F2  26D9               	addwf	fsr2l,f,c
 14289  0128F4  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14290  0128F6  22DA               	addwfc	fsr2h,f,c
 14291  0128F8  0100               	movlb	0	; () banked
 14292  0128FA  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14293  0128FE  0100               	movlb	0	; () banked
 14294  012900  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14295                           
 14296                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14297  012904  0101               	movlb	1	; () banked
 14298  012906  5103               	movf	Port_Init@pPort& (0+255),w,b
 14299  012908  EC23  F0A4         	call	_GetPortPORT
 14300  01290C  0101               	movlb	1	; () banked
 14301  01290E  EE20 F004          	lfsr	2,4
 14302  012912  5101               	movf	Port_Init@pInput& (0+255),w,b
 14303  012914  26D9               	addwf	fsr2l,f,c
 14304  012916  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14305  012918  22DA               	addwfc	fsr2h,f,c
 14306  01291A  0100               	movlb	0	; () banked
 14307  01291C  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14308  012920  0100               	movlb	0	; () banked
 14309  012922  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14310                           
 14311                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14312  012926  0101               	movlb	1	; () banked
 14313  012928  5103               	movf	Port_Init@pPort& (0+255),w,b
 14314  01292A  EC7D  F0A3         	call	_GetPortTRIS
 14315  01292E  0101               	movlb	1	; () banked
 14316  012930  EE20 F002          	lfsr	2,2
 14317  012934  5101               	movf	Port_Init@pInput& (0+255),w,b
 14318  012936  26D9               	addwf	fsr2l,f,c
 14319  012938  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14320  01293A  22DA               	addwfc	fsr2h,f,c
 14321  01293C  0100               	movlb	0	; () banked
 14322  01293E  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14323  012942  0100               	movlb	0	; () banked
 14324  012944  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14325                           
 14326                           ; BSR set to: 0
 14327                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14328  012948  0101               	movlb	1	; () banked
 14329  01294A  EE20 F004          	lfsr	2,4
 14330  01294E  5101               	movf	Port_Init@pInput& (0+255),w,b
 14331  012950  26D9               	addwf	fsr2l,f,c
 14332  012952  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14333  012954  22DA               	addwfc	fsr2h,f,c
 14334  012956  CFDE F104          	movff	postinc2,??_Port_Init
 14335  01295A  CFDD F105          	movff	postdec2,??_Port_Init+1
 14336  01295E  C104  FFD9         	movff	??_Port_Init,fsr2l
 14337  012962  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14338  012966  0E00               	movlw	0
 14339  012968  6EDF               	movwf	indf2,c
 14340                           
 14341                           ; BSR set to: 1
 14342                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14343  01296A  0101               	movlb	1	; () banked
 14344  01296C  EE20 F002          	lfsr	2,2
 14345  012970  5101               	movf	Port_Init@pInput& (0+255),w,b
 14346  012972  26D9               	addwf	fsr2l,f,c
 14347  012974  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14348  012976  22DA               	addwfc	fsr2h,f,c
 14349  012978  CFDE F104          	movff	postinc2,??_Port_Init
 14350  01297C  CFDD F105          	movff	postdec2,??_Port_Init+1
 14351  012980  C104  FFD9         	movff	??_Port_Init,fsr2l
 14352  012984  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14353  012988  0EFF               	movlw	255
 14354  01298A  6EDF               	movwf	indf2,c
 14355                           
 14356                           ; BSR set to: 1
 14357                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14358  01298C  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 14359  012990  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14360  012994  0E00               	movlw	0
 14361  012996  0100               	movlb	0	; () banked
 14362  012998  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14363  01299A  ECD2  F08D         	call	_Port_SetType	;wreg free
 14364                           
 14365                           ;Port.c: 166: UINT8 i;
 14366                           ;Port.c: 167: for (i=0; i<8; i++)
 14367  01299E  0E00               	movlw	0
 14368  0129A0  0101               	movlb	1	; () banked
 14369  0129A2  6F06               	movwf	Port_Init@i& (0+255),b
 14370  0129A4                     l13944:
 14371                           
 14372                           ; BSR set to: 1
 14373  0129A4  0E07               	movlw	7
 14374  0129A6  0101               	movlb	1	; () banked
 14375  0129A8  6506               	cpfsgt	Port_Init@i& (0+255),b
 14376  0129AA  D031               	goto	l403
 14377  0129AC  D04B               	goto	u10580
 14378  0129AE                     
 14379                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14380                           
 14381                           ; BSR set to: 1
 14382  0129AE  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14383  0129B2  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14384  0129B6  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14385  0129BA  0E03               	movlw	3
 14386  0129BC  0100               	movlb	0	; () banked
 14387  0129BE  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14388  0129C0  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14389                           
 14390                           ;Port.c: 173: break;
 14391  0129C4  D03C               	goto	l405
 14392  0129C6                     
 14393                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14394  0129C6  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14395  0129CA  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14396  0129CE  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14397  0129D2  0E02               	movlw	2
 14398  0129D4  0100               	movlb	0	; () banked
 14399  0129D6  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14400  0129D8  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14401                           
 14402                           ;Port.c: 176: break;
 14403  0129DC  D030               	goto	l405
 14404  0129DE                     
 14405                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14406  0129DE  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14407  0129E2  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14408  0129E6  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14409  0129EA  0E01               	movlw	1
 14410  0129EC  0100               	movlb	0	; () banked
 14411  0129EE  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14412  0129F0  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14413                           
 14414                           ;Port.c: 179: break;
 14415  0129F4  D024               	goto	l405
 14416  0129F6                     
 14417                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14418  0129F6  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14419  0129FA  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14420  0129FE  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14421  012A02  0E00               	movlw	0
 14422  012A04  0100               	movlb	0	; () banked
 14423  012A06  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14424  012A08  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14425                           
 14426                           ;Port.c: 183: }
 14427                           
 14428                           ;Port.c: 182: break;
 14429  012A0C  D018               	goto	l405
 14430  012A0E                     l403:
 14431  012A0E  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14432  012A12  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14433  012A16  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 14434  012A1A  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 14435  012A1E  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 14436  012A22  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 14437                           
 14438                           ; Switch size 1, requested type "space"
 14439                           ; Number of cases is 4, Range of values is 0 to 3
 14440                           ; switch strategies available:
 14441                           ; Name         Instructions Cycles
 14442                           ; simple_byte           13     7 (average)
 14443                           ;	Chosen strategy is simple_byte
 14444  012A26  0A00               	xorlw	0	; case 0
 14445  012A28  B4D8               	btfsc	status,2,c
 14446  012A2A  D7C1               	goto	l404
 14447  012A2C  0A01               	xorlw	1	; case 1
 14448  012A2E  B4D8               	btfsc	status,2,c
 14449  012A30  D7D6               	goto	l407
 14450  012A32  0A03               	xorlw	3	; case 2
 14451  012A34  B4D8               	btfsc	status,2,c
 14452  012A36  D7C7               	goto	l406
 14453  012A38  0A01               	xorlw	1	; case 3
 14454  012A3A  B4D8               	btfsc	status,2,c
 14455  012A3C  D7DC               	goto	l408
 14456  012A3E                     l405:
 14457  012A3E  0101               	movlb	1	; () banked
 14458  012A40  2B06               	incf	Port_Init@i& (0+255),f,b
 14459  012A42  D7B0               	goto	l13944
 14460  012A44                     u10580:
 14461                           
 14462                           ; BSR set to: 1
 14463                           ;Port.c: 184: }
 14464                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14465                           
 14466                           ; BSR set to: 1
 14467  012A44  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 14468  012A48  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14469  012A4C  0E00               	movlw	0
 14470  012A4E  0100               	movlb	0	; () banked
 14471  012A50  6FCB               	movwf	Port_Set@pValue& (0+255),b
 14472  012A52  EC2C  F088         	call	_Port_Set	;wreg free
 14473  012A56  0012               	return		;funcret
 14474  012A58                     __end_of_Port_Init:
 14475                           	opt stack 0
 14476                           tblptru	equ	0xFF8
 14477                           tblptrh	equ	0xFF7
 14478                           tblptrl	equ	0xFF6
 14479                           tablat	equ	0xFF5
 14480                           prodh	equ	0xFF4
 14481                           prodl	equ	0xFF3
 14482                           intcon	equ	0xFF2
 14483                           postinc0	equ	0xFEE
 14484                           wreg	equ	0xFE8
 14485                           indf1	equ	0xFE7
 14486                           postdec1	equ	0xFE5
 14487                           fsr1h	equ	0xFE2
 14488                           fsr1l	equ	0xFE1
 14489                           indf2	equ	0xFDF
 14490                           postinc2	equ	0xFDE
 14491                           postdec2	equ	0xFDD
 14492                           fsr2h	equ	0xFDA
 14493                           fsr2l	equ	0xFD9
 14494                           status	equ	0xFD8
 14495                           
 14496 ;; *************** function _Port_SetType *****************
 14497 ;; Defined at:
 14498 ;;		line 513 in file "Library/Port.c"
 14499 ;; Parameters:    Size  Location     Type
 14500 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14501 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14502 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14503 ;;  pType           1   60[BANK0 ] enum E6795
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;  Output          1    0[BANK1 ] enum E6475
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      enum E6475
 14508 ;; Registers used:
 14509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14515 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14516 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14518 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14519 ;;Total ram usage:        6 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; Hardware stack levels required when called:   14
 14522 ;; This function calls:
 14523 ;;		_Port_CheckPortType
 14524 ;;		_Word_SetPair
 14525 ;; This function is called by:
 14526 ;;		_Port_Init
 14527 ;;		_MXK_Init
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           	psect	text62
 14532  011BA4                     __ptext62:
 14533                           	opt stack 0
 14534  011BA4                     _Port_SetType:
 14535                           	opt stack 14
 14536                           
 14537                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14538                           
 14539                           ;incstack = 0
 14540  011BA4  0E05               	movlw	5
 14541  011BA6  0101               	movlb	1	; () banked
 14542  011BA8  6F00               	movwf	Port_SetType@Output& (0+255),b
 14543                           
 14544                           ;Port.c: 517: switch (pType)
 14545  011BAA  D07A               	goto	l509
 14546  011BAC                     
 14547                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14548                           
 14549                           ; BSR set to: 1
 14550  011BAC  0100               	movlb	0	; () banked
 14551  011BAE  EE20 F002          	lfsr	2,2
 14552  011BB2  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14553  011BB4  26D9               	addwf	fsr2l,f,c
 14554  011BB6  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14555  011BB8  22DA               	addwfc	fsr2h,f,c
 14556  011BBA  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14557  011BBE  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14558  011BC2  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14559  011BC6  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14560  011BCA  0EFF               	movlw	255
 14561  011BCC  D067               	goto	L10
 14562  011BCE                     
 14563                           ; BSR set to: 0
 14564                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14565                           
 14566                           ; BSR set to: 0
 14567  011BCE  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14568  011BD2  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14569  011BD6  0E01               	movlw	1
 14570  011BD8  0100               	movlb	0	; () banked
 14571  011BDA  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14572  011BDC  EC89  F0AD         	call	_Port_CheckPortType	;wreg free
 14573  011BE0  0101               	movlb	1	; () banked
 14574  011BE2  6F00               	movwf	Port_SetType@Output& (0+255),b
 14575  011BE4  0101               	movlb	1	; () banked
 14576  011BE6  5100               	movf	Port_SetType@Output& (0+255),w,b
 14577  011BE8  A4D8               	btfss	status,2,c
 14578  011BEA  0012               	return	
 14579                           
 14580                           ; BSR set to: 1
 14581                           ;Port.c: 527: {
 14582                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14583  011BEC  0100               	movlb	0	; () banked
 14584  011BEE  EE20 F002          	lfsr	2,2
 14585  011BF2  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14586  011BF4  26D9               	addwf	fsr2l,f,c
 14587  011BF6  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14588  011BF8  22DA               	addwfc	fsr2h,f,c
 14589  011BFA  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14590  011BFE  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14591  011C02  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14592  011C06  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14593  011C0A  0E00               	movlw	0
 14594  011C0C  6EDF               	movwf	indf2,c
 14595                           
 14596                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14597  011C0E  0100               	movlb	0	; () banked
 14598  011C10  EE20 F004          	lfsr	2,4
 14599  011C14  D036               	goto	L21
 14600  011C16                     
 14601                           ; BSR set to: 0
 14602                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14603                           
 14604                           ; BSR set to: 0
 14605  011C16  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14606  011C1A  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14607  011C1E  0E02               	movlw	2
 14608  011C20  0100               	movlb	0	; () banked
 14609  011C22  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14610  011C24  EC89  F0AD         	call	_Port_CheckPortType	;wreg free
 14611  011C28  0101               	movlb	1	; () banked
 14612  011C2A  6F00               	movwf	Port_SetType@Output& (0+255),b
 14613  011C2C  0101               	movlb	1	; () banked
 14614  011C2E  5100               	movf	Port_SetType@Output& (0+255),w,b
 14615  011C30  A4D8               	btfss	status,2,c
 14616  011C32  0012               	return	
 14617                           
 14618                           ; BSR set to: 1
 14619                           ;Port.c: 538: {
 14620                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14621  011C34  0100               	movlb	0	; () banked
 14622  011C36  EE20 F002          	lfsr	2,2
 14623  011C3A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14624  011C3C  26D9               	addwf	fsr2l,f,c
 14625  011C3E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14626  011C40  22DA               	addwfc	fsr2h,f,c
 14627  011C42  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14628  011C46  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14629  011C4A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14630  011C4E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14631  011C52  0EFF               	movlw	255
 14632  011C54  6EDF               	movwf	indf2,c
 14633                           
 14634                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14635  011C56  0100               	movlb	0	; () banked
 14636  011C58  EE20 F004          	lfsr	2,4
 14637  011C5C  D7AA               	goto	L11
 14638  011C5E                     
 14639                           ; BSR set to: 0
 14640                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14641                           
 14642                           ; BSR set to: 0
 14643  011C5E  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14644  011C62  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14645  011C66  0E00               	movlw	0
 14646  011C68  0100               	movlb	0	; () banked
 14647  011C6A  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14648  011C6C  EC89  F0AD         	call	_Port_CheckPortType	;wreg free
 14649  011C70  0101               	movlb	1	; () banked
 14650  011C72  6F00               	movwf	Port_SetType@Output& (0+255),b
 14651  011C74  0101               	movlb	1	; () banked
 14652  011C76  5100               	movf	Port_SetType@Output& (0+255),w,b
 14653  011C78  A4D8               	btfss	status,2,c
 14654  011C7A  0012               	return	
 14655                           
 14656                           ; BSR set to: 1
 14657                           ;Port.c: 549: {
 14658                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14659  011C7C  0100               	movlb	0	; () banked
 14660  011C7E  EE20 F002          	lfsr	2,2
 14661  011C82                     L21:
 14662  011C82  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14663  011C84  26D9               	addwf	fsr2l,f,c
 14664  011C86  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14665  011C88  22DA               	addwfc	fsr2h,f,c
 14666  011C8A  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14667  011C8E  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14668  011C92  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14669  011C96  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14670  011C9A  0E00               	movlw	0
 14671  011C9C                     L10:
 14672  011C9C  6EDF               	movwf	indf2,c
 14673                           
 14674                           ;Port.c: 552: }
 14675  011C9E  D00E               	goto	l511
 14676  011CA0                     l509:
 14677                           
 14678                           ; BSR set to: 0
 14679  011CA0  0100               	movlb	0	; () banked
 14680  011CA2  51F6               	movf	Port_SetType@pType& (0+255),w,b
 14681                           
 14682                           ; Switch size 1, requested type "space"
 14683                           ; Number of cases is 4, Range of values is 0 to 3
 14684                           ; switch strategies available:
 14685                           ; Name         Instructions Cycles
 14686                           ; simple_byte           13     7 (average)
 14687                           ;	Chosen strategy is simple_byte
 14688  011CA4  0A00               	xorlw	0	; case 0
 14689  011CA6  B4D8               	btfsc	status,2,c
 14690  011CA8  D781               	goto	l510
 14691  011CAA  0A01               	xorlw	1	; case 1
 14692  011CAC  B4D8               	btfsc	status,2,c
 14693  011CAE  D78F               	goto	l512
 14694  011CB0  0A03               	xorlw	3	; case 2
 14695  011CB2  B4D8               	btfsc	status,2,c
 14696  011CB4  D7B0               	goto	l516
 14697  011CB6  0A01               	xorlw	1	; case 3
 14698  011CB8  B4D8               	btfsc	status,2,c
 14699  011CBA  D7D1               	goto	l519
 14700  011CBC                     l511:
 14701                           
 14702                           ; BSR set to: 0
 14703                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14704                           
 14705                           ; BSR set to: 0
 14706  011CBC  0E08               	movlw	8
 14707  011CBE  0100               	movlb	0	; () banked
 14708  011CC0  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14709  011CC2  0100               	movlb	0	; () banked
 14710  011CC4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14711  011CC6  0E00               	movlw	0
 14712  011CC8  0100               	movlb	0	; () banked
 14713  011CCA  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14714  011CCC  0100               	movlb	0	; () banked
 14715  011CCE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14716  011CD0  0E00               	movlw	0
 14717  011CD2  0100               	movlb	0	; () banked
 14718  011CD4  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14719  011CD6  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14720  011CDA  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14721                           
 14722                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14723  011CDE  0E08               	movlw	8
 14724  011CE0  0100               	movlb	0	; () banked
 14725  011CE2  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14726  011CE4  0100               	movlb	0	; () banked
 14727  011CE6  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14728  011CE8  0E00               	movlw	0
 14729  011CEA  0100               	movlb	0	; () banked
 14730  011CEC  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14731  011CEE  0100               	movlb	0	; () banked
 14732  011CF0  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14733  011CF2  0E01               	movlw	1
 14734  011CF4  0100               	movlb	0	; () banked
 14735  011CF6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14736  011CF8  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14737  011CFC  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14738                           
 14739                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14740  011D00  0E08               	movlw	8
 14741  011D02  0100               	movlb	0	; () banked
 14742  011D04  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14743  011D06  0100               	movlb	0	; () banked
 14744  011D08  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14745  011D0A  0E00               	movlw	0
 14746  011D0C  0100               	movlb	0	; () banked
 14747  011D0E  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14748  011D10  0100               	movlb	0	; () banked
 14749  011D12  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14750  011D14  0E02               	movlw	2
 14751  011D16  0100               	movlb	0	; () banked
 14752  011D18  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14753  011D1A  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14754  011D1E  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14755                           
 14756                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14757  011D22  0E08               	movlw	8
 14758  011D24  0100               	movlb	0	; () banked
 14759  011D26  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14760  011D28  0100               	movlb	0	; () banked
 14761  011D2A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14762  011D2C  0E00               	movlw	0
 14763  011D2E  0100               	movlb	0	; () banked
 14764  011D30  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14765  011D32  0100               	movlb	0	; () banked
 14766  011D34  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14767  011D36  0E03               	movlw	3
 14768  011D38  0100               	movlb	0	; () banked
 14769  011D3A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14770  011D3C  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14771  011D40  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14772                           
 14773                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14774  011D44  0E08               	movlw	8
 14775  011D46  0100               	movlb	0	; () banked
 14776  011D48  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14777  011D4A  0100               	movlb	0	; () banked
 14778  011D4C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14779  011D4E  0E00               	movlw	0
 14780  011D50  0100               	movlb	0	; () banked
 14781  011D52  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14782  011D54  0100               	movlb	0	; () banked
 14783  011D56  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14784  011D58  0E04               	movlw	4
 14785  011D5A  0100               	movlb	0	; () banked
 14786  011D5C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14787  011D5E  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14788  011D62  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14789                           
 14790                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14791  011D66  0E08               	movlw	8
 14792  011D68  0100               	movlb	0	; () banked
 14793  011D6A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14794  011D6C  0100               	movlb	0	; () banked
 14795  011D6E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14796  011D70  0E00               	movlw	0
 14797  011D72  0100               	movlb	0	; () banked
 14798  011D74  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14799  011D76  0100               	movlb	0	; () banked
 14800  011D78  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14801  011D7A  0E05               	movlw	5
 14802  011D7C  0100               	movlb	0	; () banked
 14803  011D7E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14804  011D80  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14805  011D84  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14806                           
 14807                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 14808  011D88  0E08               	movlw	8
 14809  011D8A  0100               	movlb	0	; () banked
 14810  011D8C  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14811  011D8E  0100               	movlb	0	; () banked
 14812  011D90  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14813  011D92  0E00               	movlw	0
 14814  011D94  0100               	movlb	0	; () banked
 14815  011D96  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14816  011D98  0100               	movlb	0	; () banked
 14817  011D9A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14818  011D9C  0E06               	movlw	6
 14819  011D9E  0100               	movlb	0	; () banked
 14820  011DA0  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14821  011DA2  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14822  011DA6  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14823                           
 14824                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 14825  011DAA  0E08               	movlw	8
 14826  011DAC  0100               	movlb	0	; () banked
 14827  011DAE  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14828  011DB0  0100               	movlb	0	; () banked
 14829  011DB2  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14830  011DB4  0E00               	movlw	0
 14831  011DB6  0100               	movlb	0	; () banked
 14832  011DB8  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14833  011DBA  0100               	movlb	0	; () banked
 14834  011DBC  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14835  011DBE  0E07               	movlw	7
 14836  011DC0  0100               	movlb	0	; () banked
 14837  011DC2  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14838  011DC4  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14839  011DC8  EC18  F0AE         	call	_Word_SetPair	;wreg free
 14840  011DCC  0012               	return	
 14841  011DCE                     __end_of_Port_SetType:
 14842                           	opt stack 0
 14843                           tblptru	equ	0xFF8
 14844                           tblptrh	equ	0xFF7
 14845                           tblptrl	equ	0xFF6
 14846                           tablat	equ	0xFF5
 14847                           prodh	equ	0xFF4
 14848                           prodl	equ	0xFF3
 14849                           intcon	equ	0xFF2
 14850                           postinc0	equ	0xFEE
 14851                           wreg	equ	0xFE8
 14852                           indf1	equ	0xFE7
 14853                           postdec1	equ	0xFE5
 14854                           fsr1h	equ	0xFE2
 14855                           fsr1l	equ	0xFE1
 14856                           indf2	equ	0xFDF
 14857                           postinc2	equ	0xFDE
 14858                           postdec2	equ	0xFDD
 14859                           fsr2h	equ	0xFDA
 14860                           fsr2l	equ	0xFD9
 14861                           status	equ	0xFD8
 14862                           
 14863 ;; *************** function _Port_CheckPortType *****************
 14864 ;; Defined at:
 14865 ;;		line 138 in file "Library/Port.c"
 14866 ;; Parameters:    Size  Location     Type
 14867 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14868 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14869 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14870 ;;  pDrive          1   56[BANK0 ] enum E6469
 14871 ;; Auto vars:     Size  Location     Type
 14872 ;;  Output          1   57[BANK0 ] enum E6475
 14873 ;; Return value:  Size  Location     Type
 14874 ;;                  1    wreg      enum E6475
 14875 ;; Registers used:
 14876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14877 ;; Tracked objects:
 14878 ;;		On entry : 0/0
 14879 ;;		On exit  : 0/0
 14880 ;;		Unchanged: 0/0
 14881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14882 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14886 ;;Total ram usage:        4 bytes
 14887 ;; Hardware stack levels used:    1
 14888 ;; Hardware stack levels required when called:   13
 14889 ;; This function calls:
 14890 ;;		_Port_CheckQuadType
 14891 ;; This function is called by:
 14892 ;;		_Port_SetType
 14893 ;; This function uses a non-reentrant model
 14894 ;;
 14895                           
 14896                           	psect	text63
 14897  015B12                     __ptext63:
 14898                           	opt stack 0
 14899  015B12                     _Port_CheckPortType:
 14900                           	opt stack 14
 14901                           
 14902                           ;Port.c: 140: ePinError Output = ePinErrorState;
 14903                           
 14904                           ;incstack = 0
 14905  015B12  0E05               	movlw	5
 14906  015B14  0100               	movlb	0	; () banked
 14907  015B16  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 14911  015B18  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14912  015B1C  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14913  015B20  0E00               	movlw	0
 14914  015B22  0100               	movlb	0	; () banked
 14915  015B24  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14916  015B26  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14917  015B2A  EC1B  F0AC         	call	_Port_CheckQuadType	;wreg free
 14918  015B2E  0100               	movlb	0	; () banked
 14919  015B30  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 14920  015B32  0100               	movlb	0	; () banked
 14921  015B34  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 14922  015B36  A4D8               	btfss	status,2,c
 14923  015B38  D00D               	goto	l397
 14924                           
 14925                           ; BSR set to: 0
 14926                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 14927  015B3A  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14928  015B3E  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14929  015B42  0E01               	movlw	1
 14930  015B44  0100               	movlb	0	; () banked
 14931  015B46  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14932  015B48  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14933  015B4C  EC1B  F0AC         	call	_Port_CheckQuadType	;wreg free
 14934  015B50  0100               	movlb	0	; () banked
 14935  015B52  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 14936  015B54                     l397:
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;Port.c: 146: return Output;
 14940                           
 14941                           ; BSR set to: 0
 14942  015B54  0100               	movlb	0	; () banked
 14943  015B56  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 14944  015B58  0012               	return	
 14945  015B5A                     __end_of_Port_CheckPortType:
 14946                           	opt stack 0
 14947                           tblptru	equ	0xFF8
 14948                           tblptrh	equ	0xFF7
 14949                           tblptrl	equ	0xFF6
 14950                           tablat	equ	0xFF5
 14951                           prodh	equ	0xFF4
 14952                           prodl	equ	0xFF3
 14953                           intcon	equ	0xFF2
 14954                           postinc0	equ	0xFEE
 14955                           wreg	equ	0xFE8
 14956                           indf1	equ	0xFE7
 14957                           postdec1	equ	0xFE5
 14958                           fsr1h	equ	0xFE2
 14959                           fsr1l	equ	0xFE1
 14960                           indf2	equ	0xFDF
 14961                           postinc2	equ	0xFDE
 14962                           postdec2	equ	0xFDD
 14963                           fsr2h	equ	0xFDA
 14964                           fsr2l	equ	0xFD9
 14965                           status	equ	0xFD8
 14966                           
 14967 ;; *************** function _Port_Set *****************
 14968 ;; Defined at:
 14969 ;;		line 570 in file "Library/Port.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14972 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14973 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14974 ;;  pValue          1   17[BANK0 ] unsigned char 
 14975 ;; Auto vars:     Size  Location     Type
 14976 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 14977 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 14978 ;;  Type            1   38[BANK0 ] enum E6795
 14979 ;; Return value:  Size  Location     Type
 14980 ;;                  1    wreg      void 
 14981 ;; Registers used:
 14982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14983 ;; Tracked objects:
 14984 ;;		On entry : 0/0
 14985 ;;		On exit  : 0/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14988 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14989 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14990 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14991 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14992 ;;Total ram usage:       24 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:   10
 14995 ;; This function calls:
 14996 ;;		_Byte_SetByte
 14997 ;;		_Word_GetPair
 14998 ;; This function is called by:
 14999 ;;		_Port_Init
 15000 ;;		_Port_Toggle
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           	psect	text64
 15005  011058                     __ptext64:
 15006                           	opt stack 0
 15007  011058                     _Port_Set:
 15008                           	opt stack 17
 15009                           
 15010                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15011                           
 15012                           ; BSR set to: 0
 15013                           ;incstack = 0
 15014  011058  0E08               	movlw	8
 15015  01105A  0100               	movlb	0	; () banked
 15016  01105C  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15017  01105E  0100               	movlb	0	; () banked
 15018  011060  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15019  011062  0E00               	movlw	0
 15020  011064  0100               	movlb	0	; () banked
 15021  011066  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15022  011068  0100               	movlb	0	; () banked
 15023  01106A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15024  01106C  0E00               	movlw	0
 15025  01106E  0100               	movlb	0	; () banked
 15026  011070  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15027  011072  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15028  011076  0100               	movlb	0	; () banked
 15029  011078  6FE0               	movwf	Port_Set@Type& (0+255),b
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15033  01107A  0100               	movlb	0	; () banked
 15034  01107C  51E0               	movf	Port_Set@Type& (0+255),w,b
 15035  01107E  0100               	movlb	0	; () banked
 15036  011080  6FCC               	movwf	??_Port_Set& (0+255),b
 15037  011082  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15038  011084  0E0E               	movlw	14
 15039  011086                     u9675:
 15040  011086  90D8               	bcf	status,0,c
 15041  011088  0100               	movlb	0	; () banked
 15042  01108A  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15043  01108C  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15044  01108E  2EE8               	decfsz	wreg,f,c
 15045  011090  D7FA               	goto	u9675
 15046  011092  0100               	movlb	0	; () banked
 15047  011094  51E0               	movf	Port_Set@Type& (0+255),w,b
 15048  011096  0100               	movlb	0	; () banked
 15049  011098  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15050  01109A  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15051  01109C  0E0C               	movlw	12
 15052  01109E                     u9685:
 15053  01109E  90D8               	bcf	status,0,c
 15054  0110A0  0100               	movlb	0	; () banked
 15055  0110A2  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15056  0110A4  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15057  0110A6  2EE8               	decfsz	wreg,f,c
 15058  0110A8  D7FA               	goto	u9685
 15059  0110AA  0100               	movlb	0	; () banked
 15060  0110AC  51E0               	movf	Port_Set@Type& (0+255),w,b
 15061  0110AE  0100               	movlb	0	; () banked
 15062  0110B0  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15063  0110B2  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15064  0110B4  0E0A               	movlw	10
 15065  0110B6                     u9695:
 15066  0110B6  90D8               	bcf	status,0,c
 15067  0110B8  0100               	movlb	0	; () banked
 15068  0110BA  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15069  0110BC  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15070  0110BE  2EE8               	decfsz	wreg,f,c
 15071  0110C0  D7FA               	goto	u9695
 15072  0110C2  0100               	movlb	0	; () banked
 15073  0110C4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15074  0110C6  0100               	movlb	0	; () banked
 15075  0110C8  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15076  0110CA  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15077  0110CC  0100               	movlb	0	; () banked
 15078  0110CE  51E0               	movf	Port_Set@Type& (0+255),w,b
 15079  0110D0  0100               	movlb	0	; () banked
 15080  0110D2  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15081  0110D4  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15082  0110D6  0E06               	movlw	6
 15083  0110D8                     u9705:
 15084  0110D8  90D8               	bcf	status,0,c
 15085  0110DA  0100               	movlb	0	; () banked
 15086  0110DC  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15087  0110DE  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15088  0110E0  2EE8               	decfsz	wreg,f,c
 15089  0110E2  D7FA               	goto	u9705
 15090  0110E4  0100               	movlb	0	; () banked
 15091  0110E6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15092  0110E8  0100               	movlb	0	; () banked
 15093  0110EA  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15094  0110EC  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15095  0110EE  0100               	movlb	0	; () banked
 15096  0110F0  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15097  0110F2  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15098  0110F4  0EF0               	movlw	240
 15099  0110F6  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15100  0110F8  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15101  0110FA  0B0F               	andlw	15
 15102  0110FC  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15103  0110FE  0EF0               	movlw	240
 15104  011100  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15105  011102  0100               	movlb	0	; () banked
 15106  011104  51E0               	movf	Port_Set@Type& (0+255),w,b
 15107  011106  0100               	movlb	0	; () banked
 15108  011108  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15109  01110A  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15110  01110C  0100               	movlb	0	; () banked
 15111  01110E  90D8               	bcf	status,0,c
 15112  011110  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15113  011112  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15114  011114  0100               	movlb	0	; () banked
 15115  011116  90D8               	bcf	status,0,c
 15116  011118  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15117  01111A  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15118  01111C  0100               	movlb	0	; () banked
 15119  01111E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15120  011120  0100               	movlb	0	; () banked
 15121  011122  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15122  011124  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15123  011126  0100               	movlb	0	; () banked
 15124  011128  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15125  01112A  0100               	movlb	0	; () banked
 15126  01112C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15127  01112E  0100               	movlb	0	; () banked
 15128  011130  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15129  011132  0100               	movlb	0	; () banked
 15130  011134  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15131  011136  0100               	movlb	0	; () banked
 15132  011138  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15133  01113A  0100               	movlb	0	; () banked
 15134  01113C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15135  01113E  0100               	movlb	0	; () banked
 15136  011140  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15137  011142  0100               	movlb	0	; () banked
 15138  011144  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15139  011146  0100               	movlb	0	; () banked
 15140  011148  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15141  01114A  0100               	movlb	0	; () banked
 15142  01114C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15143  01114E  0100               	movlb	0	; () banked
 15144  011150  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15145  011152  0100               	movlb	0	; () banked
 15146  011154  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15147  011156  0100               	movlb	0	; () banked
 15148  011158  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15149  01115A  0100               	movlb	0	; () banked
 15150  01115C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15151  01115E  0100               	movlb	0	; () banked
 15152  011160  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15153  011162  0100               	movlb	0	; () banked
 15154  011164  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15155  011166  0100               	movlb	0	; () banked
 15156  011168  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15157  01116A  0100               	movlb	0	; () banked
 15158  01116C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15159  01116E  0100               	movlb	0	; () banked
 15160  011170  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15161  011172  0100               	movlb	0	; () banked
 15162  011174  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15163  011176  0100               	movlb	0	; () banked
 15164  011178  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15165  01117A  0100               	movlb	0	; () banked
 15166  01117C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15167  01117E  0100               	movlb	0	; () banked
 15168  011180  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15169  011182  0100               	movlb	0	; () banked
 15170  011184  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15171  011186  0100               	movlb	0	; () banked
 15172  011188  51CC               	movf	??_Port_Set& (0+255),w,b
 15173  01118A  0100               	movlb	0	; () banked
 15174  01118C  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15175  01118E  0100               	movlb	0	; () banked
 15176  011190  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15177  011192  0100               	movlb	0	; () banked
 15178  011194  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15179  011196  0100               	movlb	0	; () banked
 15180  011198  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15181  01119A  0100               	movlb	0	; () banked
 15182  01119C  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;Port.c: 574: UINT16 TypeActual = Type;
 15186  01119E  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15187  0111A2  0100               	movlb	0	; () banked
 15188  0111A4  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15189                           
 15190                           ; BSR set to: 0
 15191                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15192  0111A6  0E08               	movlw	8
 15193  0111A8  0100               	movlb	0	; () banked
 15194  0111AA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15195  0111AC  0100               	movlb	0	; () banked
 15196  0111AE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15197  0111B0  0E00               	movlw	0
 15198  0111B2  0100               	movlb	0	; () banked
 15199  0111B4  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15200  0111B6  0100               	movlb	0	; () banked
 15201  0111B8  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15202  0111BA  0E01               	movlw	1
 15203  0111BC  0100               	movlb	0	; () banked
 15204  0111BE  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15205  0111C0  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15206  0111C4  0100               	movlb	0	; () banked
 15207  0111C6  6FCC               	movwf	??_Port_Set& (0+255),b
 15208  0111C8  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15209  0111CA  0100               	movlb	0	; () banked
 15210  0111CC  90D8               	bcf	status,0,c
 15211  0111CE  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15212  0111D0  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15213  0111D2  0100               	movlb	0	; () banked
 15214  0111D4  90D8               	bcf	status,0,c
 15215  0111D6  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15216  0111D8  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15217  0111DA  0100               	movlb	0	; () banked
 15218  0111DC  51CC               	movf	??_Port_Set& (0+255),w,b
 15219  0111DE  0100               	movlb	0	; () banked
 15220  0111E0  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15221  0111E2  0100               	movlb	0	; () banked
 15222  0111E4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15223  0111E6  0100               	movlb	0	; () banked
 15224  0111E8  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15228  0111EA  0E08               	movlw	8
 15229  0111EC  0100               	movlb	0	; () banked
 15230  0111EE  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15231  0111F0  0100               	movlb	0	; () banked
 15232  0111F2  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15233  0111F4  0E00               	movlw	0
 15234  0111F6  0100               	movlb	0	; () banked
 15235  0111F8  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15236  0111FA  0100               	movlb	0	; () banked
 15237  0111FC  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15238  0111FE  0E02               	movlw	2
 15239  011200  0100               	movlb	0	; () banked
 15240  011202  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15241  011204  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15242  011208  0100               	movlb	0	; () banked
 15243  01120A  6FCC               	movwf	??_Port_Set& (0+255),b
 15244  01120C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15245  01120E  0100               	movlb	0	; () banked
 15246  011210  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15247  011212  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15248  011214  0EF0               	movlw	240
 15249  011216  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15250  011218  51CC               	movf	??_Port_Set& (0+255),w,b
 15251  01121A  0B0F               	andlw	15
 15252  01121C  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15253  01121E  0EF0               	movlw	240
 15254  011220  17CC               	andwf	??_Port_Set& (0+255),f,b
 15255  011222  0100               	movlb	0	; () banked
 15256  011224  51CC               	movf	??_Port_Set& (0+255),w,b
 15257  011226  0100               	movlb	0	; () banked
 15258  011228  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15259  01122A  0100               	movlb	0	; () banked
 15260  01122C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15261  01122E  0100               	movlb	0	; () banked
 15262  011230  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15266  011232  0E08               	movlw	8
 15267  011234  0100               	movlb	0	; () banked
 15268  011236  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15269  011238  0100               	movlb	0	; () banked
 15270  01123A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15271  01123C  0E00               	movlw	0
 15272  01123E  0100               	movlb	0	; () banked
 15273  011240  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15274  011242  0100               	movlb	0	; () banked
 15275  011244  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15276  011246  0E03               	movlw	3
 15277  011248  0100               	movlb	0	; () banked
 15278  01124A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15279  01124C  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15280  011250  0100               	movlb	0	; () banked
 15281  011252  6FCC               	movwf	??_Port_Set& (0+255),b
 15282  011254  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15283  011256  0E06               	movlw	6
 15284  011258                     u9715:
 15285  011258  90D8               	bcf	status,0,c
 15286  01125A  0100               	movlb	0	; () banked
 15287  01125C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15288  01125E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15289  011260  2EE8               	decfsz	wreg,f,c
 15290  011262  D7FA               	goto	u9715
 15291  011264  0100               	movlb	0	; () banked
 15292  011266  51CC               	movf	??_Port_Set& (0+255),w,b
 15293  011268  0100               	movlb	0	; () banked
 15294  01126A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15295  01126C  0100               	movlb	0	; () banked
 15296  01126E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15297  011270  0100               	movlb	0	; () banked
 15298  011272  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15302  011274  0E08               	movlw	8
 15303  011276  0100               	movlb	0	; () banked
 15304  011278  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15305  01127A  0100               	movlb	0	; () banked
 15306  01127C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15307  01127E  0E00               	movlw	0
 15308  011280  0100               	movlb	0	; () banked
 15309  011282  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15310  011284  0100               	movlb	0	; () banked
 15311  011286  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15312  011288  0E04               	movlw	4
 15313  01128A  0100               	movlb	0	; () banked
 15314  01128C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15315  01128E  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15316  011292  0100               	movlb	0	; () banked
 15317  011294  6FCC               	movwf	??_Port_Set& (0+255),b
 15318  011296  0100               	movlb	0	; () banked
 15319  011298  51CC               	movf	??_Port_Set& (0+255),w,b
 15320  01129A  0100               	movlb	0	; () banked
 15321  01129C  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15322  01129E  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15323  0112A0  0100               	movlb	0	; () banked
 15324  0112A2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15325  0112A4  0100               	movlb	0	; () banked
 15326  0112A6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15327  0112A8  0100               	movlb	0	; () banked
 15328  0112AA  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15329  0112AC  0100               	movlb	0	; () banked
 15330  0112AE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15331                           
 15332                           ; BSR set to: 0
 15333                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15334  0112B0  0E08               	movlw	8
 15335  0112B2  0100               	movlb	0	; () banked
 15336  0112B4  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15337  0112B6  0100               	movlb	0	; () banked
 15338  0112B8  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15339  0112BA  0E00               	movlw	0
 15340  0112BC  0100               	movlb	0	; () banked
 15341  0112BE  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15342  0112C0  0100               	movlb	0	; () banked
 15343  0112C2  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15344  0112C4  0E05               	movlw	5
 15345  0112C6  0100               	movlb	0	; () banked
 15346  0112C8  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15347  0112CA  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15348  0112CE  0100               	movlb	0	; () banked
 15349  0112D0  6FCC               	movwf	??_Port_Set& (0+255),b
 15350  0112D2  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15351  0112D4  0E0A               	movlw	10
 15352  0112D6                     u9725:
 15353  0112D6  90D8               	bcf	status,0,c
 15354  0112D8  0100               	movlb	0	; () banked
 15355  0112DA  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15356  0112DC  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15357  0112DE  2EE8               	decfsz	wreg,f,c
 15358  0112E0  D7FA               	goto	u9725
 15359  0112E2  0100               	movlb	0	; () banked
 15360  0112E4  51CC               	movf	??_Port_Set& (0+255),w,b
 15361  0112E6  0100               	movlb	0	; () banked
 15362  0112E8  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15363  0112EA  0100               	movlb	0	; () banked
 15364  0112EC  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15365  0112EE  0100               	movlb	0	; () banked
 15366  0112F0  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15367                           
 15368                           ; BSR set to: 0
 15369                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15370  0112F2  0E08               	movlw	8
 15371  0112F4  0100               	movlb	0	; () banked
 15372  0112F6  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15373  0112F8  0100               	movlb	0	; () banked
 15374  0112FA  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15375  0112FC  0E00               	movlw	0
 15376  0112FE  0100               	movlb	0	; () banked
 15377  011300  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15378  011302  0100               	movlb	0	; () banked
 15379  011304  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15380  011306  0E06               	movlw	6
 15381  011308  0100               	movlb	0	; () banked
 15382  01130A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15383  01130C  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15384  011310  0100               	movlb	0	; () banked
 15385  011312  6FCC               	movwf	??_Port_Set& (0+255),b
 15386  011314  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15387  011316  0E0C               	movlw	12
 15388  011318                     u9735:
 15389  011318  90D8               	bcf	status,0,c
 15390  01131A  0100               	movlb	0	; () banked
 15391  01131C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15392  01131E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15393  011320  2EE8               	decfsz	wreg,f,c
 15394  011322  D7FA               	goto	u9735
 15395  011324  0100               	movlb	0	; () banked
 15396  011326  51CC               	movf	??_Port_Set& (0+255),w,b
 15397  011328  0100               	movlb	0	; () banked
 15398  01132A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15399  01132C  0100               	movlb	0	; () banked
 15400  01132E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15401  011330  0100               	movlb	0	; () banked
 15402  011332  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15406  011334  0E08               	movlw	8
 15407  011336  0100               	movlb	0	; () banked
 15408  011338  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15409  01133A  0100               	movlb	0	; () banked
 15410  01133C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15411  01133E  0E00               	movlw	0
 15412  011340  0100               	movlb	0	; () banked
 15413  011342  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15414  011344  0100               	movlb	0	; () banked
 15415  011346  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15416  011348  0E07               	movlw	7
 15417  01134A  0100               	movlb	0	; () banked
 15418  01134C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15419  01134E  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 15420  011352  0100               	movlb	0	; () banked
 15421  011354  6FCC               	movwf	??_Port_Set& (0+255),b
 15422  011356  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15423  011358  0E0E               	movlw	14
 15424  01135A                     u9745:
 15425  01135A  90D8               	bcf	status,0,c
 15426  01135C  0100               	movlb	0	; () banked
 15427  01135E  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15428  011360  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15429  011362  2EE8               	decfsz	wreg,f,c
 15430  011364  D7FA               	goto	u9745
 15431  011366  0100               	movlb	0	; () banked
 15432  011368  51CC               	movf	??_Port_Set& (0+255),w,b
 15433  01136A  0100               	movlb	0	; () banked
 15434  01136C  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15435  01136E  0100               	movlb	0	; () banked
 15436  011370  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15437  011372  0100               	movlb	0	; () banked
 15438  011374  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15439                           
 15440                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15441  011376  0100               	movlb	0	; () banked
 15442  011378  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 15443  01137A  0100               	movlb	0	; () banked
 15444  01137C  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15445  01137E  E148               	bnz	l528
 15446  011380  0100               	movlb	0	; () banked
 15447  011382  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15448  011384  0100               	movlb	0	; () banked
 15449  011386  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15450  011388  A4D8               	btfss	status,2,c
 15451  01138A  0012               	return	
 15452  01138C  D032               	goto	l526
 15453  01138E                     
 15454                           ; BSR set to: 0
 15455                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15456                           
 15457                           ; BSR set to: 0
 15458  01138E  0100               	movlb	0	; () banked
 15459  011390  EE20 F002          	lfsr	2,2
 15460  011394  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15461  011396  26D9               	addwf	fsr2l,f,c
 15462  011398  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15463  01139A  22DA               	addwfc	fsr2h,f,c
 15464  01139C  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15465  0113A0  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15466  0113A4  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15467  0113A8  EC86  F0B2         	call	_Byte_SetByte	;wreg free
 15468                           
 15469                           ;Port.c: 594: break;
 15470  0113AC  0012               	return	
 15471  0113AE                     
 15472                           ;Port.c: 597: pValue = ~pValue;
 15473  0113AE  0100               	movlb	0	; () banked
 15474  0113B0  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 15475                           
 15476                           ; BSR set to: 0
 15477                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15478  0113B2  0100               	movlb	0	; () banked
 15479  0113B4  EE20 F002          	lfsr	2,2
 15480  0113B8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15481  0113BA  26D9               	addwf	fsr2l,f,c
 15482  0113BC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15483  0113BE  22DA               	addwfc	fsr2h,f,c
 15484  0113C0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15485  0113C4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15486  0113C8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15487  0113CC  EC86  F0B2         	call	_Byte_SetByte	;wreg free
 15488                           
 15489                           ;Port.c: 599: break;
 15490  0113D0  0012               	return	
 15491  0113D2                     
 15492                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15493  0113D2  0100               	movlb	0	; () banked
 15494  0113D4  EE20 F004          	lfsr	2,4
 15495  0113D8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15496  0113DA  26D9               	addwf	fsr2l,f,c
 15497  0113DC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15498  0113DE  22DA               	addwfc	fsr2h,f,c
 15499  0113E0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15500  0113E4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15501  0113E8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15502  0113EC  EC86  F0B2         	call	_Byte_SetByte	;wreg free
 15503                           
 15504                           ;Port.c: 606: }
 15505                           
 15506                           ;Port.c: 605: break;
 15507                           
 15508                           ;Port.c: 604: default:
 15509                           
 15510                           ;Port.c: 603: break;
 15511  0113F0  0012               	return	
 15512  0113F2                     l526:
 15513  0113F2  0100               	movlb	0	; () banked
 15514  0113F4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15515                           
 15516                           ; Switch size 1, requested type "space"
 15517                           ; Number of cases is 4, Range of values is 0 to 3
 15518                           ; switch strategies available:
 15519                           ; Name         Instructions Cycles
 15520                           ; simple_byte           13     7 (average)
 15521                           ;	Chosen strategy is simple_byte
 15522  0113F6  0A00               	xorlw	0	; case 0
 15523  0113F8  B4D8               	btfsc	status,2,c
 15524  0113FA  0012               	return	
 15525  0113FC  0A01               	xorlw	1	; case 1
 15526  0113FE  B4D8               	btfsc	status,2,c
 15527  011400  D7C6               	goto	l529
 15528  011402  0A03               	xorlw	3	; case 2
 15529  011404  B4D8               	btfsc	status,2,c
 15530  011406  D7D3               	goto	l531
 15531  011408  0A01               	xorlw	1	; case 3
 15532  01140A  A4D8               	btfss	status,2,c
 15533                           
 15534                           ; BSR set to: 0
 15535                           
 15536                           ; BSR set to: 0
 15537                           ;Port.c: 607: }
 15538  01140C  0012               	return	
 15539  01140E  D7E1               	goto	l532
 15540  011410                     l528:
 15541  011410  0012               	return		;funcret
 15542  011412                     __end_of_Port_Set:
 15543                           	opt stack 0
 15544                           tblptru	equ	0xFF8
 15545                           tblptrh	equ	0xFF7
 15546                           tblptrl	equ	0xFF6
 15547                           tablat	equ	0xFF5
 15548                           prodh	equ	0xFF4
 15549                           prodl	equ	0xFF3
 15550                           intcon	equ	0xFF2
 15551                           postinc0	equ	0xFEE
 15552                           wreg	equ	0xFE8
 15553                           indf1	equ	0xFE7
 15554                           postdec1	equ	0xFE5
 15555                           fsr1h	equ	0xFE2
 15556                           fsr1l	equ	0xFE1
 15557                           indf2	equ	0xFDF
 15558                           postinc2	equ	0xFDE
 15559                           postdec2	equ	0xFDD
 15560                           fsr2h	equ	0xFDA
 15561                           fsr2l	equ	0xFD9
 15562                           status	equ	0xFD8
 15563                           
 15564 ;; *************** function _Byte_SetByte *****************
 15565 ;; Defined at:
 15566 ;;		line 110 in file "Library/Types.c"
 15567 ;; Parameters:    Size  Location     Type
 15568 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15569 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15570 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15571 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15572 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15573 ;;		 -> NULL(0), 
 15574 ;;  pValue          1    2[BANK0 ] unsigned char 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;		None
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  1    wreg      void 
 15579 ;; Registers used:
 15580 ;;		fsr2l, fsr2h
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15586 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15589 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15590 ;;Total ram usage:        3 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    7
 15593 ;; This function calls:
 15594 ;;		Nothing
 15595 ;; This function is called by:
 15596 ;;		_Port_Set
 15597 ;;		_I2C_Init
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           	psect	text65
 15602  01650C                     __ptext65:
 15603                           	opt stack 0
 15604  01650C                     _Byte_SetByte:
 15605                           	opt stack 19
 15606                           
 15607                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15608                           
 15609                           ;incstack = 0
 15610  01650C  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15611  016510  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15612  016514  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 15613  016518  0012               	return		;funcret
 15614  01651A                     __end_of_Byte_SetByte:
 15615                           	opt stack 0
 15616                           tblptru	equ	0xFF8
 15617                           tblptrh	equ	0xFF7
 15618                           tblptrl	equ	0xFF6
 15619                           tablat	equ	0xFF5
 15620                           prodh	equ	0xFF4
 15621                           prodl	equ	0xFF3
 15622                           intcon	equ	0xFF2
 15623                           postinc0	equ	0xFEE
 15624                           wreg	equ	0xFE8
 15625                           indf1	equ	0xFE7
 15626                           postdec1	equ	0xFE5
 15627                           fsr1h	equ	0xFE2
 15628                           fsr1l	equ	0xFE1
 15629                           indf2	equ	0xFDF
 15630                           postinc2	equ	0xFDE
 15631                           postdec2	equ	0xFDD
 15632                           fsr2h	equ	0xFDA
 15633                           fsr2l	equ	0xFD9
 15634                           status	equ	0xFD8
 15635                           
 15636 ;; *************** function _GetPortTRIS *****************
 15637 ;; Defined at:
 15638 ;;		line 67 in file "Library/Port.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  pInput          1    wreg     enum E6786
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;  pInput          1    2[BANK0 ] enum E6786
 15643 ;; Return value:  Size  Location     Type
 15644 ;;                  2    0[BANK0 ] PTR struct Byte
 15645 ;; Registers used:
 15646 ;;		wreg, status,2, status,0
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/0
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15652 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;Total ram usage:        3 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    7
 15659 ;; This function calls:
 15660 ;;		Nothing
 15661 ;; This function is called by:
 15662 ;;		_Port_Init
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           	psect	text66
 15667  0146FA                     __ptext66:
 15668                           	opt stack 0
 15669  0146FA                     _GetPortTRIS:
 15670                           	opt stack 20
 15671                           
 15672                           ;incstack = 0
 15673                           ;GetPortTRIS@pInput stored from wreg
 15674  0146FA  0100               	movlb	0	; () banked
 15675  0146FC  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 15676                           
 15677                           ;Port.c: 69: switch (pInput)
 15678  0146FE  D038               	goto	l363
 15679  014700                     
 15680                           ;Port.c: 72: return (BytePtr)&TRISA;
 15681  014700  0E92               	movlw	146
 15682  014702  0100               	movlb	0	; () banked
 15683  014704  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15684  014706  0E0F               	movlw	15
 15685  014708  0100               	movlb	0	; () banked
 15686  01470A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15687                           
 15688                           ; BSR set to: 0
 15689  01470C  0012               	return	
 15690  01470E                     
 15691                           ; BSR set to: 0
 15692                           ;Port.c: 74: return (BytePtr)&TRISB;
 15693                           
 15694                           ; BSR set to: 0
 15695  01470E  0E93               	movlw	147
 15696  014710  0100               	movlb	0	; () banked
 15697  014712  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15698  014714  0E0F               	movlw	15
 15699  014716  0100               	movlb	0	; () banked
 15700  014718  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15701                           
 15702                           ; BSR set to: 0
 15703  01471A  0012               	return	
 15704  01471C                     
 15705                           ; BSR set to: 0
 15706                           ;Port.c: 76: return (BytePtr)&TRISC;
 15707                           
 15708                           ; BSR set to: 0
 15709  01471C  0E94               	movlw	148
 15710  01471E  0100               	movlb	0	; () banked
 15711  014720  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15712  014722  0E0F               	movlw	15
 15713  014724  0100               	movlb	0	; () banked
 15714  014726  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15715                           
 15716                           ; BSR set to: 0
 15717  014728  0012               	return	
 15718  01472A                     
 15719                           ; BSR set to: 0
 15720                           ;Port.c: 78: return (BytePtr)&TRISD;
 15721                           
 15722                           ; BSR set to: 0
 15723  01472A  0E95               	movlw	149
 15724  01472C  0100               	movlb	0	; () banked
 15725  01472E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15726  014730  0E0F               	movlw	15
 15727  014732  0100               	movlb	0	; () banked
 15728  014734  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15729                           
 15730                           ; BSR set to: 0
 15731  014736  0012               	return	
 15732  014738                     
 15733                           ; BSR set to: 0
 15734                           ;Port.c: 80: return (BytePtr)&TRISE;
 15735                           
 15736                           ; BSR set to: 0
 15737  014738  0E96               	movlw	150
 15738  01473A  0100               	movlb	0	; () banked
 15739  01473C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15740  01473E  0E0F               	movlw	15
 15741  014740  0100               	movlb	0	; () banked
 15742  014742  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15743                           
 15744                           ; BSR set to: 0
 15745  014744  0012               	return	
 15746  014746                     
 15747                           ; BSR set to: 0
 15748                           ;Port.c: 82: return (BytePtr)&TRISF;
 15749                           
 15750                           ; BSR set to: 0
 15751  014746  0E97               	movlw	151
 15752  014748  0100               	movlb	0	; () banked
 15753  01474A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15754  01474C  0E0F               	movlw	15
 15755  01474E  0100               	movlb	0	; () banked
 15756  014750  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15757                           
 15758                           ; BSR set to: 0
 15759  014752  0012               	return	
 15760  014754                     
 15761                           ; BSR set to: 0
 15762                           ;Port.c: 84: return (BytePtr)&TRISG;
 15763                           
 15764                           ; BSR set to: 0
 15765  014754  0E98               	movlw	152
 15766  014756  0100               	movlb	0	; () banked
 15767  014758  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15768  01475A  0E0F               	movlw	15
 15769  01475C  0100               	movlb	0	; () banked
 15770  01475E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15771                           
 15772                           ; BSR set to: 0
 15773  014760  0012               	return	
 15774  014762                     
 15775                           ; BSR set to: 0
 15776                           ;Port.c: 86: return (void*)0;
 15777                           
 15778                           ; BSR set to: 0
 15779  014762  0E00               	movlw	0
 15780  014764  0100               	movlb	0	; () banked
 15781  014766  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15782  014768  0E00               	movlw	0
 15783  01476A  0100               	movlb	0	; () banked
 15784  01476C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;Port.c: 87: }
 15788                           
 15789                           ; BSR set to: 0
 15790  01476E  0012               	return	
 15791  014770                     l363:
 15792                           
 15793                           ; BSR set to: 0
 15794  014770  0100               	movlb	0	; () banked
 15795  014772  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 15796                           
 15797                           ; Switch size 1, requested type "space"
 15798                           ; Number of cases is 7, Range of values is 0 to 6
 15799                           ; switch strategies available:
 15800                           ; Name         Instructions Cycles
 15801                           ; simple_byte           22    12 (average)
 15802                           ;	Chosen strategy is simple_byte
 15803  014774  0A00               	xorlw	0	; case 0
 15804  014776  B4D8               	btfsc	status,2,c
 15805  014778  D7C3               	goto	l364
 15806  01477A  0A01               	xorlw	1	; case 1
 15807  01477C  B4D8               	btfsc	status,2,c
 15808  01477E  D7C7               	goto	l366
 15809  014780  0A03               	xorlw	3	; case 2
 15810  014782  B4D8               	btfsc	status,2,c
 15811  014784  D7CB               	goto	l367
 15812  014786  0A01               	xorlw	1	; case 3
 15813  014788  B4D8               	btfsc	status,2,c
 15814  01478A  D7CF               	goto	l368
 15815  01478C  0A07               	xorlw	7	; case 4
 15816  01478E  B4D8               	btfsc	status,2,c
 15817  014790  D7D3               	goto	l369
 15818  014792  0A01               	xorlw	1	; case 5
 15819  014794  B4D8               	btfsc	status,2,c
 15820  014796  D7D7               	goto	l370
 15821  014798  0A03               	xorlw	3	; case 6
 15822  01479A  B4D8               	btfsc	status,2,c
 15823  01479C  D7DB               	goto	l371
 15824  01479E  D7E1               	goto	l372
 15825  0147A0                     __end_of_GetPortTRIS:
 15826                           	opt stack 0
 15827                           tblptru	equ	0xFF8
 15828                           tblptrh	equ	0xFF7
 15829                           tblptrl	equ	0xFF6
 15830                           tablat	equ	0xFF5
 15831                           prodh	equ	0xFF4
 15832                           prodl	equ	0xFF3
 15833                           intcon	equ	0xFF2
 15834                           postinc0	equ	0xFEE
 15835                           wreg	equ	0xFE8
 15836                           indf1	equ	0xFE7
 15837                           postdec1	equ	0xFE5
 15838                           fsr1h	equ	0xFE2
 15839                           fsr1l	equ	0xFE1
 15840                           indf2	equ	0xFDF
 15841                           postinc2	equ	0xFDE
 15842                           postdec2	equ	0xFDD
 15843                           fsr2h	equ	0xFDA
 15844                           fsr2l	equ	0xFD9
 15845                           status	equ	0xFD8
 15846                           
 15847 ;; *************** function _GetPortProperties *****************
 15848 ;; Defined at:
 15849 ;;		line 21 in file "Library/Port.c"
 15850 ;; Parameters:    Size  Location     Type
 15851 ;;  pInput          1    wreg     enum E6786
 15852 ;; Auto vars:     Size  Location     Type
 15853 ;;  pInput          1    2[BANK0 ] enum E6786
 15854 ;; Return value:  Size  Location     Type
 15855 ;;                  2    0[BANK0 ] PTR struct PortProperty
 15856 ;; Registers used:
 15857 ;;		wreg, status,2, status,0
 15858 ;; Tracked objects:
 15859 ;;		On entry : 0/0
 15860 ;;		On exit  : 0/0
 15861 ;;		Unchanged: 0/0
 15862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15863 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15866 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15867 ;;Total ram usage:        3 bytes
 15868 ;; Hardware stack levels used:    1
 15869 ;; Hardware stack levels required when called:    7
 15870 ;; This function calls:
 15871 ;;		Nothing
 15872 ;; This function is called by:
 15873 ;;		_Port_Init
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text67
 15878  0147A0                     __ptext67:
 15879                           	opt stack 0
 15880  0147A0                     _GetPortProperties:
 15881                           	opt stack 20
 15882                           
 15883                           ; BSR set to: 0
 15884                           ;incstack = 0
 15885                           ;GetPortProperties@pInput stored from wreg
 15886  0147A0  0100               	movlb	0	; () banked
 15887  0147A2  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 15888                           
 15889                           ;Port.c: 23: switch (pInput)
 15890  0147A4  D038               	goto	l337
 15891  0147A6                     
 15892                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 15893  0147A6  0E57               	movlw	low _PortA_Property
 15894  0147A8  0100               	movlb	0	; () banked
 15895  0147AA  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15896  0147AC  0EFF               	movlw	high _PortA_Property
 15897  0147AE  0100               	movlb	0	; () banked
 15898  0147B0  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15899                           
 15900                           ; BSR set to: 0
 15901  0147B2  0012               	return	
 15902  0147B4                     
 15903                           ; BSR set to: 0
 15904                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 15905                           
 15906                           ; BSR set to: 0
 15907  0147B4  0E55               	movlw	low _PortB_Property
 15908  0147B6  0100               	movlb	0	; () banked
 15909  0147B8  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15910  0147BA  0EFF               	movlw	high _PortB_Property
 15911  0147BC  0100               	movlb	0	; () banked
 15912  0147BE  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15913                           
 15914                           ; BSR set to: 0
 15915  0147C0  0012               	return	
 15916  0147C2                     
 15917                           ; BSR set to: 0
 15918                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 15919                           
 15920                           ; BSR set to: 0
 15921  0147C2  0E53               	movlw	low _PortC_Property
 15922  0147C4  0100               	movlb	0	; () banked
 15923  0147C6  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15924  0147C8  0EFF               	movlw	high _PortC_Property
 15925  0147CA  0100               	movlb	0	; () banked
 15926  0147CC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15927                           
 15928                           ; BSR set to: 0
 15929  0147CE  0012               	return	
 15930  0147D0                     
 15931                           ; BSR set to: 0
 15932                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 15933                           
 15934                           ; BSR set to: 0
 15935  0147D0  0E51               	movlw	low _PortD_Property
 15936  0147D2  0100               	movlb	0	; () banked
 15937  0147D4  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15938  0147D6  0EFF               	movlw	high _PortD_Property
 15939  0147D8  0100               	movlb	0	; () banked
 15940  0147DA  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15941                           
 15942                           ; BSR set to: 0
 15943  0147DC  0012               	return	
 15944  0147DE                     
 15945                           ; BSR set to: 0
 15946                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 15947                           
 15948                           ; BSR set to: 0
 15949  0147DE  0E4F               	movlw	low _PortE_Property
 15950  0147E0  0100               	movlb	0	; () banked
 15951  0147E2  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15952  0147E4  0EFF               	movlw	high _PortE_Property
 15953  0147E6  0100               	movlb	0	; () banked
 15954  0147E8  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15955                           
 15956                           ; BSR set to: 0
 15957  0147EA  0012               	return	
 15958  0147EC                     
 15959                           ; BSR set to: 0
 15960                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 15961                           
 15962                           ; BSR set to: 0
 15963  0147EC  0E4D               	movlw	low _PortF_Property
 15964  0147EE  0100               	movlb	0	; () banked
 15965  0147F0  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15966  0147F2  0EFF               	movlw	high _PortF_Property
 15967  0147F4  0100               	movlb	0	; () banked
 15968  0147F6  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15969                           
 15970                           ; BSR set to: 0
 15971  0147F8  0012               	return	
 15972  0147FA                     
 15973                           ; BSR set to: 0
 15974                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 15975                           
 15976                           ; BSR set to: 0
 15977  0147FA  0E4B               	movlw	low _PortG_Property
 15978  0147FC  0100               	movlb	0	; () banked
 15979  0147FE  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15980  014800  0EFF               	movlw	high _PortG_Property
 15981  014802  0100               	movlb	0	; () banked
 15982  014804  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15983                           
 15984                           ; BSR set to: 0
 15985  014806  0012               	return	
 15986  014808                     
 15987                           ; BSR set to: 0
 15988                           ;Port.c: 40: return (void*)0;
 15989                           
 15990                           ; BSR set to: 0
 15991  014808  0E00               	movlw	0
 15992  01480A  0100               	movlb	0	; () banked
 15993  01480C  6FBA               	movwf	?_GetPortProperties& (0+255),b
 15994  01480E  0E00               	movlw	0
 15995  014810  0100               	movlb	0	; () banked
 15996  014812  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 15997                           
 15998                           ; BSR set to: 0
 15999                           ;Port.c: 41: }
 16000                           
 16001                           ; BSR set to: 0
 16002  014814  0012               	return	
 16003  014816                     l337:
 16004                           
 16005                           ; BSR set to: 0
 16006  014816  0100               	movlb	0	; () banked
 16007  014818  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16008                           
 16009                           ; Switch size 1, requested type "space"
 16010                           ; Number of cases is 7, Range of values is 0 to 6
 16011                           ; switch strategies available:
 16012                           ; Name         Instructions Cycles
 16013                           ; simple_byte           22    12 (average)
 16014                           ;	Chosen strategy is simple_byte
 16015  01481A  0A00               	xorlw	0	; case 0
 16016  01481C  B4D8               	btfsc	status,2,c
 16017  01481E  D7C3               	goto	l338
 16018  014820  0A01               	xorlw	1	; case 1
 16019  014822  B4D8               	btfsc	status,2,c
 16020  014824  D7C7               	goto	l340
 16021  014826  0A03               	xorlw	3	; case 2
 16022  014828  B4D8               	btfsc	status,2,c
 16023  01482A  D7CB               	goto	l341
 16024  01482C  0A01               	xorlw	1	; case 3
 16025  01482E  B4D8               	btfsc	status,2,c
 16026  014830  D7CF               	goto	l342
 16027  014832  0A07               	xorlw	7	; case 4
 16028  014834  B4D8               	btfsc	status,2,c
 16029  014836  D7D3               	goto	l343
 16030  014838  0A01               	xorlw	1	; case 5
 16031  01483A  B4D8               	btfsc	status,2,c
 16032  01483C  D7D7               	goto	l344
 16033  01483E  0A03               	xorlw	3	; case 6
 16034  014840  B4D8               	btfsc	status,2,c
 16035  014842  D7DB               	goto	l345
 16036  014844  D7E1               	goto	l346
 16037  014846                     __end_of_GetPortProperties:
 16038                           	opt stack 0
 16039                           tblptru	equ	0xFF8
 16040                           tblptrh	equ	0xFF7
 16041                           tblptrl	equ	0xFF6
 16042                           tablat	equ	0xFF5
 16043                           prodh	equ	0xFF4
 16044                           prodl	equ	0xFF3
 16045                           intcon	equ	0xFF2
 16046                           postinc0	equ	0xFEE
 16047                           wreg	equ	0xFE8
 16048                           indf1	equ	0xFE7
 16049                           postdec1	equ	0xFE5
 16050                           fsr1h	equ	0xFE2
 16051                           fsr1l	equ	0xFE1
 16052                           indf2	equ	0xFDF
 16053                           postinc2	equ	0xFDE
 16054                           postdec2	equ	0xFDD
 16055                           fsr2h	equ	0xFDA
 16056                           fsr2l	equ	0xFD9
 16057                           status	equ	0xFD8
 16058                           
 16059 ;; *************** function _GetPortPORT *****************
 16060 ;; Defined at:
 16061 ;;		line 44 in file "Library/Port.c"
 16062 ;; Parameters:    Size  Location     Type
 16063 ;;  pInput          1    wreg     enum E6786
 16064 ;; Auto vars:     Size  Location     Type
 16065 ;;  pInput          1    2[BANK0 ] enum E6786
 16066 ;; Return value:  Size  Location     Type
 16067 ;;                  2    0[BANK0 ] PTR struct Byte
 16068 ;; Registers used:
 16069 ;;		wreg, status,2, status,0
 16070 ;; Tracked objects:
 16071 ;;		On entry : 0/0
 16072 ;;		On exit  : 0/0
 16073 ;;		Unchanged: 0/0
 16074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16078 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;Total ram usage:        3 bytes
 16080 ;; Hardware stack levels used:    1
 16081 ;; Hardware stack levels required when called:    7
 16082 ;; This function calls:
 16083 ;;		Nothing
 16084 ;; This function is called by:
 16085 ;;		_Port_Init
 16086 ;; This function uses a non-reentrant model
 16087 ;;
 16088                           
 16089                           	psect	text68
 16090  014846                     __ptext68:
 16091                           	opt stack 0
 16092  014846                     _GetPortPORT:
 16093                           	opt stack 20
 16094                           
 16095                           ; BSR set to: 0
 16096                           ;incstack = 0
 16097                           ;GetPortPORT@pInput stored from wreg
 16098  014846  0100               	movlb	0	; () banked
 16099  014848  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16100                           
 16101                           ;Port.c: 46: switch (pInput)
 16102  01484A  D038               	goto	l350
 16103  01484C                     
 16104                           ;Port.c: 49: return (BytePtr)&PORTA;
 16105  01484C  0E80               	movlw	128
 16106  01484E  0100               	movlb	0	; () banked
 16107  014850  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16108  014852  0E0F               	movlw	15
 16109  014854  0100               	movlb	0	; () banked
 16110  014856  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16111                           
 16112                           ; BSR set to: 0
 16113  014858  0012               	return	
 16114  01485A                     
 16115                           ; BSR set to: 0
 16116                           ;Port.c: 51: return (BytePtr)&PORTB;
 16117                           
 16118                           ; BSR set to: 0
 16119  01485A  0E81               	movlw	129
 16120  01485C  0100               	movlb	0	; () banked
 16121  01485E  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16122  014860  0E0F               	movlw	15
 16123  014862  0100               	movlb	0	; () banked
 16124  014864  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16125                           
 16126                           ; BSR set to: 0
 16127  014866  0012               	return	
 16128  014868                     
 16129                           ; BSR set to: 0
 16130                           ;Port.c: 53: return (BytePtr)&PORTC;
 16131                           
 16132                           ; BSR set to: 0
 16133  014868  0E82               	movlw	130
 16134  01486A  0100               	movlb	0	; () banked
 16135  01486C  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16136  01486E  0E0F               	movlw	15
 16137  014870  0100               	movlb	0	; () banked
 16138  014872  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16139                           
 16140                           ; BSR set to: 0
 16141  014874  0012               	return	
 16142  014876                     
 16143                           ; BSR set to: 0
 16144                           ;Port.c: 55: return (BytePtr)&PORTD;
 16145                           
 16146                           ; BSR set to: 0
 16147  014876  0E83               	movlw	131
 16148  014878  0100               	movlb	0	; () banked
 16149  01487A  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16150  01487C  0E0F               	movlw	15
 16151  01487E  0100               	movlb	0	; () banked
 16152  014880  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16153                           
 16154                           ; BSR set to: 0
 16155  014882  0012               	return	
 16156  014884                     
 16157                           ; BSR set to: 0
 16158                           ;Port.c: 57: return (BytePtr)&PORTE;
 16159                           
 16160                           ; BSR set to: 0
 16161  014884  0E84               	movlw	132
 16162  014886  0100               	movlb	0	; () banked
 16163  014888  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16164  01488A  0E0F               	movlw	15
 16165  01488C  0100               	movlb	0	; () banked
 16166  01488E  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16167                           
 16168                           ; BSR set to: 0
 16169  014890  0012               	return	
 16170  014892                     
 16171                           ; BSR set to: 0
 16172                           ;Port.c: 59: return (BytePtr)&PORTF;
 16173                           
 16174                           ; BSR set to: 0
 16175  014892  0E85               	movlw	133
 16176  014894  0100               	movlb	0	; () banked
 16177  014896  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16178  014898  0E0F               	movlw	15
 16179  01489A  0100               	movlb	0	; () banked
 16180  01489C  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16181                           
 16182                           ; BSR set to: 0
 16183  01489E  0012               	return	
 16184  0148A0                     
 16185                           ; BSR set to: 0
 16186                           ;Port.c: 61: return (BytePtr)&PORTG;
 16187                           
 16188                           ; BSR set to: 0
 16189  0148A0  0E86               	movlw	134
 16190  0148A2  0100               	movlb	0	; () banked
 16191  0148A4  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16192  0148A6  0E0F               	movlw	15
 16193  0148A8  0100               	movlb	0	; () banked
 16194  0148AA  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16195                           
 16196                           ; BSR set to: 0
 16197  0148AC  0012               	return	
 16198  0148AE                     
 16199                           ; BSR set to: 0
 16200                           ;Port.c: 63: return (void*)0;
 16201                           
 16202                           ; BSR set to: 0
 16203  0148AE  0E00               	movlw	0
 16204  0148B0  0100               	movlb	0	; () banked
 16205  0148B2  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16206  0148B4  0E00               	movlw	0
 16207  0148B6  0100               	movlb	0	; () banked
 16208  0148B8  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;Port.c: 64: }
 16212                           
 16213                           ; BSR set to: 0
 16214  0148BA  0012               	return	
 16215  0148BC                     l350:
 16216                           
 16217                           ; BSR set to: 0
 16218  0148BC  0100               	movlb	0	; () banked
 16219  0148BE  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16220                           
 16221                           ; Switch size 1, requested type "space"
 16222                           ; Number of cases is 7, Range of values is 0 to 6
 16223                           ; switch strategies available:
 16224                           ; Name         Instructions Cycles
 16225                           ; simple_byte           22    12 (average)
 16226                           ;	Chosen strategy is simple_byte
 16227  0148C0  0A00               	xorlw	0	; case 0
 16228  0148C2  B4D8               	btfsc	status,2,c
 16229  0148C4  D7C3               	goto	l351
 16230  0148C6  0A01               	xorlw	1	; case 1
 16231  0148C8  B4D8               	btfsc	status,2,c
 16232  0148CA  D7C7               	goto	l353
 16233  0148CC  0A03               	xorlw	3	; case 2
 16234  0148CE  B4D8               	btfsc	status,2,c
 16235  0148D0  D7CB               	goto	l354
 16236  0148D2  0A01               	xorlw	1	; case 3
 16237  0148D4  B4D8               	btfsc	status,2,c
 16238  0148D6  D7CF               	goto	l355
 16239  0148D8  0A07               	xorlw	7	; case 4
 16240  0148DA  B4D8               	btfsc	status,2,c
 16241  0148DC  D7D3               	goto	l356
 16242  0148DE  0A01               	xorlw	1	; case 5
 16243  0148E0  B4D8               	btfsc	status,2,c
 16244  0148E2  D7D7               	goto	l357
 16245  0148E4  0A03               	xorlw	3	; case 6
 16246  0148E6  B4D8               	btfsc	status,2,c
 16247  0148E8  D7DB               	goto	l358
 16248  0148EA  D7E1               	goto	l359
 16249  0148EC                     __end_of_GetPortPORT:
 16250                           	opt stack 0
 16251                           tblptru	equ	0xFF8
 16252                           tblptrh	equ	0xFF7
 16253                           tblptrl	equ	0xFF6
 16254                           tablat	equ	0xFF5
 16255                           prodh	equ	0xFF4
 16256                           prodl	equ	0xFF3
 16257                           intcon	equ	0xFF2
 16258                           postinc0	equ	0xFEE
 16259                           wreg	equ	0xFE8
 16260                           indf1	equ	0xFE7
 16261                           postdec1	equ	0xFE5
 16262                           fsr1h	equ	0xFE2
 16263                           fsr1l	equ	0xFE1
 16264                           indf2	equ	0xFDF
 16265                           postinc2	equ	0xFDE
 16266                           postdec2	equ	0xFDD
 16267                           fsr2h	equ	0xFDA
 16268                           fsr2l	equ	0xFD9
 16269                           status	equ	0xFD8
 16270                           
 16271 ;; *************** function _LED_Init *****************
 16272 ;; Defined at:
 16273 ;;		line 15 in file "Library/LED.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;  pLED            1    wreg     enum E6739
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  pLED            1   45[BANK0 ] enum E6739
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  1    wreg      void 
 16280 ;; Registers used:
 16281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16291 ;;Total ram usage:        1 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:   12
 16294 ;; This function calls:
 16295 ;;		_LED_Set
 16296 ;;		_Port_SetPinType
 16297 ;; This function is called by:
 16298 ;;		_MXK_Init
 16299 ;; This function uses a non-reentrant model
 16300 ;;
 16301                           
 16302                           	psect	text69
 16303  015716                     __ptext69:
 16304                           	opt stack 0
 16305  015716                     _LED_Init:
 16306                           	opt stack 16
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;incstack = 0
 16310                           ;LED_Init@pLED stored from wreg
 16311  015716  0100               	movlb	0	; () banked
 16312  015718  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16313                           
 16314                           ;LED.c: 17: switch (pLED)
 16315  01571A  D01E               	goto	l220
 16316  01571C                     
 16317                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16318  01571C  0EA7               	movlw	low _PortC
 16319  01571E  0100               	movlb	0	; () banked
 16320  015720  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16321  015722  0E00               	movlw	high _PortC
 16322  015724  0100               	movlb	0	; () banked
 16323  015726  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16324  015728  0E00               	movlw	0
 16325  01572A  0100               	movlb	0	; () banked
 16326  01572C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16327  01572E  0E03               	movlw	3
 16328  015730  0100               	movlb	0	; () banked
 16329  015732  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16330  015734  ECB4  F092         	call	_Port_SetPinType	;wreg free
 16331                           
 16332                           ;LED.c: 21: break;
 16333  015738  D017               	goto	l222
 16334  01573A                     
 16335                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16336  01573A  0EA7               	movlw	low _PortC
 16337  01573C  0100               	movlb	0	; () banked
 16338  01573E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16339  015740  0E00               	movlw	high _PortC
 16340  015742  0100               	movlb	0	; () banked
 16341  015744  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16342  015746  0E01               	movlw	1
 16343  015748  0100               	movlb	0	; () banked
 16344  01574A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16345  01574C  0E03               	movlw	3
 16346  01574E  0100               	movlb	0	; () banked
 16347  015750  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16348  015752  ECB4  F092         	call	_Port_SetPinType	;wreg free
 16349                           
 16350                           ;LED.c: 25: }
 16351                           
 16352                           ;LED.c: 24: break;
 16353  015756  D008               	goto	l222
 16354  015758                     l220:
 16355  015758  0100               	movlb	0	; () banked
 16356  01575A  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16357                           
 16358                           ; Switch size 1, requested type "space"
 16359                           ; Number of cases is 2, Range of values is 0 to 1
 16360                           ; switch strategies available:
 16361                           ; Name         Instructions Cycles
 16362                           ; simple_byte            7     4 (average)
 16363                           ;	Chosen strategy is simple_byte
 16364  01575C  0A00               	xorlw	0	; case 0
 16365  01575E  B4D8               	btfsc	status,2,c
 16366  015760  D7DD               	goto	l221
 16367  015762  0A01               	xorlw	1	; case 1
 16368  015764  B4D8               	btfsc	status,2,c
 16369  015766  D7E9               	goto	l223
 16370  015768                     l222:
 16371                           
 16372                           ;LED.c: 26: LED_Set(pLED, 0);
 16373                           
 16374                           ; BSR set to: 0
 16375  015768  0E00               	movlw	0
 16376  01576A  0100               	movlb	0	; () banked
 16377  01576C  6FCE               	movwf	LED_Set@pValue& (0+255),b
 16378  01576E  0100               	movlb	0	; () banked
 16379  015770  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16380  015772  ECC9  F0AC         	call	_LED_Set
 16381  015776  0012               	return		;funcret
 16382  015778                     __end_of_LED_Init:
 16383                           	opt stack 0
 16384                           tblptru	equ	0xFF8
 16385                           tblptrh	equ	0xFF7
 16386                           tblptrl	equ	0xFF6
 16387                           tablat	equ	0xFF5
 16388                           prodh	equ	0xFF4
 16389                           prodl	equ	0xFF3
 16390                           intcon	equ	0xFF2
 16391                           postinc0	equ	0xFEE
 16392                           wreg	equ	0xFE8
 16393                           indf1	equ	0xFE7
 16394                           postdec1	equ	0xFE5
 16395                           fsr1h	equ	0xFE2
 16396                           fsr1l	equ	0xFE1
 16397                           indf2	equ	0xFDF
 16398                           postinc2	equ	0xFDE
 16399                           postdec2	equ	0xFDD
 16400                           fsr2h	equ	0xFDA
 16401                           fsr2l	equ	0xFD9
 16402                           status	equ	0xFD8
 16403                           
 16404 ;; *************** function _LED_Set *****************
 16405 ;; Defined at:
 16406 ;;		line 33 in file "Library/LED.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;  pLED            1    wreg     enum E6739
 16409 ;;  pValue          1   20[BANK0 ] unsigned char 
 16410 ;; Auto vars:     Size  Location     Type
 16411 ;;  pLED            1   21[BANK0 ] enum E6739
 16412 ;; Return value:  Size  Location     Type
 16413 ;;                  1    wreg      void 
 16414 ;; Registers used:
 16415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16416 ;; Tracked objects:
 16417 ;;		On entry : 0/0
 16418 ;;		On exit  : 0/0
 16419 ;;		Unchanged: 0/0
 16420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16421 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16425 ;;Total ram usage:        2 bytes
 16426 ;; Hardware stack levels used:    1
 16427 ;; Hardware stack levels required when called:   11
 16428 ;; This function calls:
 16429 ;;		_Port_SetPin
 16430 ;; This function is called by:
 16431 ;;		_LED_Init
 16432 ;;		_SYSTEM_Initialize
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           	psect	text70
 16437  015992                     __ptext70:
 16438                           	opt stack 0
 16439  015992                     _LED_Set:
 16440                           	opt stack 16
 16441                           
 16442                           ;incstack = 0
 16443                           ;LED_Set@pLED stored from wreg
 16444  015992  0100               	movlb	0	; () banked
 16445  015994  6FCF               	movwf	LED_Set@pLED& (0+255),b
 16446                           
 16447                           ;LED.c: 35: switch (pLED)
 16448  015996  D01C               	goto	l227
 16449  015998                     
 16450                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16451  015998  0EA7               	movlw	low _PortC
 16452  01599A  0100               	movlb	0	; () banked
 16453  01599C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16454  01599E  0E00               	movlw	high _PortC
 16455  0159A0  0100               	movlb	0	; () banked
 16456  0159A2  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16457  0159A4  0E00               	movlw	0
 16458  0159A6  0100               	movlb	0	; () banked
 16459  0159A8  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16460  0159AA  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16461  0159AE  EC84  F09E         	call	_Port_SetPin	;wreg free
 16462                           
 16463                           ;LED.c: 39: break;
 16464  0159B2  0012               	return	
 16465  0159B4                     
 16466                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16467  0159B4  0EA7               	movlw	low _PortC
 16468  0159B6  0100               	movlb	0	; () banked
 16469  0159B8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16470  0159BA  0E00               	movlw	high _PortC
 16471  0159BC  0100               	movlb	0	; () banked
 16472  0159BE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16473  0159C0  0E01               	movlw	1
 16474  0159C2  0100               	movlb	0	; () banked
 16475  0159C4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16476  0159C6  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16477  0159CA  EC84  F09E         	call	_Port_SetPin	;wreg free
 16478                           
 16479                           ;LED.c: 43: }
 16480                           
 16481                           ;LED.c: 42: break;
 16482  0159CE  0012               	return	
 16483  0159D0                     l227:
 16484  0159D0  0100               	movlb	0	; () banked
 16485  0159D2  51CF               	movf	LED_Set@pLED& (0+255),w,b
 16486                           
 16487                           ; Switch size 1, requested type "space"
 16488                           ; Number of cases is 2, Range of values is 0 to 1
 16489                           ; switch strategies available:
 16490                           ; Name         Instructions Cycles
 16491                           ; simple_byte            7     4 (average)
 16492                           ;	Chosen strategy is simple_byte
 16493  0159D4  0A00               	xorlw	0	; case 0
 16494  0159D6  B4D8               	btfsc	status,2,c
 16495  0159D8  D7DF               	goto	l228
 16496  0159DA  0A01               	xorlw	1	; case 1
 16497  0159DC  A4D8               	btfss	status,2,c
 16498  0159DE  0012               	return	
 16499  0159E0  D7E9               	goto	l230
 16500  0159E2                     __end_of_LED_Set:
 16501                           	opt stack 0
 16502                           tblptru	equ	0xFF8
 16503                           tblptrh	equ	0xFF7
 16504                           tblptrl	equ	0xFF6
 16505                           tablat	equ	0xFF5
 16506                           prodh	equ	0xFF4
 16507                           prodl	equ	0xFF3
 16508                           intcon	equ	0xFF2
 16509                           postinc0	equ	0xFEE
 16510                           wreg	equ	0xFE8
 16511                           indf1	equ	0xFE7
 16512                           postdec1	equ	0xFE5
 16513                           fsr1h	equ	0xFE2
 16514                           fsr1l	equ	0xFE1
 16515                           indf2	equ	0xFDF
 16516                           postinc2	equ	0xFDE
 16517                           postdec2	equ	0xFDD
 16518                           fsr2h	equ	0xFDA
 16519                           fsr2l	equ	0xFD9
 16520                           status	equ	0xFD8
 16521                           
 16522 ;; *************** function _MXK_Dequeue *****************
 16523 ;; Defined at:
 16524 ;;		line 153 in file "Library/MXK.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;		None
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;		None
 16529 ;; Return value:  Size  Location     Type
 16530 ;;                  1    wreg      void 
 16531 ;; Registers used:
 16532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16533 ;; Tracked objects:
 16534 ;;		On entry : 0/0
 16535 ;;		On exit  : 0/0
 16536 ;;		Unchanged: 0/0
 16537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;Total ram usage:        0 bytes
 16543 ;; Hardware stack levels used:    1
 16544 ;; Hardware stack levels required when called:   12
 16545 ;; This function calls:
 16546 ;;		Absolute function
 16547 ;;		_Motor_Step
 16548 ;; This function is called by:
 16549 ;;		_init
 16550 ;;		_findClosestWall
 16551 ;;		_mode1
 16552 ;;		_mode2
 16553 ;;		_main
 16554 ;; This function uses a non-reentrant model
 16555 ;;
 16556                           
 16557                           	psect	text71
 16558  015E00                     __ptext71:
 16559                           	opt stack 0
 16560  015E00                     _MXK_Dequeue:
 16561                           	opt stack 16
 16562                           
 16563                           ;MXK.c: 155: if (lQueue)
 16564                           
 16565                           ;incstack = 0
 16566  015E00  0100               	movlb	0	; () banked
 16567  015E02  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16568  015E04  0100               	movlb	0	; () banked
 16569  015E06  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16570  015E08  0100               	movlb	0	; () banked
 16571  015E0A  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16572  015E0C  B4D8               	btfsc	status,2,c
 16573  015E0E  D00D               	goto	u13199
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;MXK.c: 156: lQueue();
 16577  015E10  D801               	call	u13198
 16578  015E12  D00B               	goto	u13199
 16579  015E14                     u13198:
 16580  015E14  0005               	push	
 16581  015E16  6EFA               	movwf	pclath,c
 16582  015E18  0100               	movlb	0	; () banked
 16583  015E1A  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16584  015E1C  6EFD               	movwf	tosl,c
 16585  015E1E  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16586  015E20  6EFE               	movwf	tosh,c
 16587  015E22  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16588  015E24  6EFF               	movwf	tosu,c
 16589  015E26  50FA               	movf	pclath,w,c
 16590  015E28  0012               	return		;indir
 16591  015E2A                     u13199:
 16592                           
 16593                           ;MXK.c: 157: lQueue = 0;
 16594  015E2A  0E00               	movlw	0
 16595  015E2C  0100               	movlb	0	; () banked
 16596  015E2E  6F63               	movwf	_lQueue& (0+255),b	;volatile
 16597  015E30  0E00               	movlw	0
 16598  015E32  0100               	movlb	0	; () banked
 16599  015E34  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16600  015E36  0E00               	movlw	0
 16601  015E38  0100               	movlb	0	; () banked
 16602  015E3A  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16603                           
 16604                           ; BSR set to: 0
 16605  015E3C  0012               	return		;funcret
 16606  015E3E                     __end_of_MXK_Dequeue:
 16607                           	opt stack 0
 16608                           tosu	equ	0xFFF
 16609                           tosh	equ	0xFFE
 16610                           tosl	equ	0xFFD
 16611                           pclath	equ	0xFFA
 16612                           tblptru	equ	0xFF8
 16613                           tblptrh	equ	0xFF7
 16614                           tblptrl	equ	0xFF6
 16615                           tablat	equ	0xFF5
 16616                           prodh	equ	0xFF4
 16617                           prodl	equ	0xFF3
 16618                           intcon	equ	0xFF2
 16619                           postinc0	equ	0xFEE
 16620                           wreg	equ	0xFE8
 16621                           indf1	equ	0xFE7
 16622                           postdec1	equ	0xFE5
 16623                           fsr1h	equ	0xFE2
 16624                           fsr1l	equ	0xFE1
 16625                           indf2	equ	0xFDF
 16626                           postinc2	equ	0xFDE
 16627                           postdec2	equ	0xFDD
 16628                           fsr2h	equ	0xFDA
 16629                           fsr2l	equ	0xFD9
 16630                           status	equ	0xFD8
 16631                           
 16632 ;; *************** function _Motor_Step *****************
 16633 ;; Defined at:
 16634 ;;		line 75 in file "Library/Motor.c"
 16635 ;; Parameters:    Size  Location     Type
 16636 ;;		None
 16637 ;; Auto vars:     Size  Location     Type
 16638 ;;		None
 16639 ;; Return value:  Size  Location     Type
 16640 ;;                  1    wreg      void 
 16641 ;; Registers used:
 16642 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16643 ;; Tracked objects:
 16644 ;;		On entry : 0/0
 16645 ;;		On exit  : 0/0
 16646 ;;		Unchanged: 0/0
 16647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16650 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16652 ;;Total ram usage:        2 bytes
 16653 ;; Hardware stack levels used:    1
 16654 ;; Hardware stack levels required when called:   11
 16655 ;; This function calls:
 16656 ;;		_MXK_Queue
 16657 ;;		_MXK_Release
 16658 ;;		_MXK_SwitchTo
 16659 ;;		_Port_SetPin
 16660 ;;		_Timer0_Restart
 16661 ;;		_Timer0_Stop
 16662 ;; This function is called by:
 16663 ;;		_Motor_Init
 16664 ;;		_MXK_Dequeue
 16665 ;;		_Timer0_ISR
 16666 ;; This function uses a non-reentrant model
 16667 ;;
 16668                           
 16669                           	psect	text72
 16670  0132F6                     __ptext72:
 16671                           	opt stack 0
 16672  0132F6                     _Motor_Step:
 16673                           	opt stack 0
 16674                           
 16675                           ; BSR set to: 0
 16676                           ;Skip over the trampoline to the duplicate function for level 2
 16677  0132F6  B251               	btfsc	btemp,1,c
 16678  0132F8  EF94  F09A         	goto	i2_Motor_Step
 16679  0132FC                     _Motor_Step$intlevel0:
 16680                           	opt stack 16
 16681                           
 16682                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16683                           
 16684                           ;incstack = 0
 16685  0132FC  0100               	movlb	0	; () banked
 16686  0132FE  EE20 F004          	lfsr	2,4
 16687  013302  5181               	movf	_lMotor& (0+255),w,b
 16688  013304  26D9               	addwf	fsr2l,f,c
 16689  013306  5182               	movf	(_lMotor+1)& (0+255),w,b
 16690  013308  22DA               	addwfc	fsr2h,f,c
 16691  01330A  50DF               	movf	indf2,w,c
 16692  01330C  EC80  F0AE         	call	_MXK_SwitchTo
 16693  013310  0900               	iorlw	0
 16694  013312  B4D8               	btfsc	status,2,c
 16695  013314  D07A               	goto	l1627
 16696                           
 16697                           ;Motor.c: 78: {
 16698                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16699  013316  C081  FFD9         	movff	_lMotor,fsr2l
 16700  01331A  C082  FFDA         	movff	_lMotor+1,fsr2h
 16701  01331E  50DE               	movf	postinc2,w,c
 16702  013320  10DE               	iorwf	postinc2,w,c
 16703  013322  B4D8               	btfsc	status,2,c
 16704  013324  D06D               	goto	l1628
 16705                           
 16706                           ;Motor.c: 80: {
 16707                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16708  013326  C081  FFD9         	movff	_lMotor,fsr2l
 16709  01332A  C082  FFDA         	movff	_lMotor+1,fsr2h
 16710  01332E  0E01               	movlw	1
 16711  013330  BEDB               	btfsc	plusw2,7,c
 16712  013332  D026               	goto	l1629
 16713  013334  0E01               	movlw	1
 16714  013336  50DB               	movf	plusw2,w,c
 16715  013338  E103               	bnz	u9910
 16716  01333A  04DE               	decf	postinc2,w,c
 16717  01333C  A0D8               	btfss	status,0,c
 16718  01333E  D020               	goto	l1629
 16719  013340                     u9910:
 16720                           
 16721                           ;Motor.c: 83: {
 16722                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16723  013340  C081  FFD9         	movff	_lMotor,fsr2l
 16724  013344  C082  FFDA         	movff	_lMotor+1,fsr2h
 16725  013348  28DE               	incf	postinc2,w,c
 16726  01334A  E104               	bnz	u9920
 16727  01334C  0E7F               	movlw	127
 16728  01334E  18DE               	xorwf	postinc2,w,c
 16729  013350  B4D8               	btfsc	status,2,c
 16730  013352  D007               	goto	l1630
 16731  013354                     u9920:
 16732                           
 16733                           ;Motor.c: 85: lMotor->mDelta --;
 16734  013354  C081  FFD9         	movff	_lMotor,fsr2l
 16735  013358  C082  FFDA         	movff	_lMotor+1,fsr2h
 16736  01335C  06DE               	decf	postinc2,f,c
 16737  01335E  0E00               	movlw	0
 16738  013360  5ADD               	subwfb	postdec2,f,c
 16739  013362                     l1630:
 16740                           
 16741                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16742  013362  0E93               	movlw	low _PortE
 16743  013364  0100               	movlb	0	; () banked
 16744  013366  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16745  013368  0E00               	movlw	high _PortE
 16746  01336A  0100               	movlb	0	; () banked
 16747  01336C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16748  01336E  0E00               	movlw	0
 16749  013370  0100               	movlb	0	; () banked
 16750  013372  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16751  013374  0E01               	movlw	1
 16752  013376  0100               	movlb	0	; () banked
 16753  013378  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 16754  01337A  EC84  F09E         	call	_Port_SetPin	;wreg free
 16755                           
 16756                           ;Motor.c: 88: }
 16757  01337E  D01F               	goto	l1631
 16758  013380                     l1629:
 16759                           
 16760                           ;Motor.c: 89: else
 16761                           ;Motor.c: 90: {
 16762                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16763  013380  C081  FFD9         	movff	_lMotor,fsr2l
 16764  013384  C082  FFDA         	movff	_lMotor+1,fsr2h
 16765  013388  04DE               	decf	postinc2,w,c
 16766  01338A  E104               	bnz	u9930
 16767  01338C  0E80               	movlw	128
 16768  01338E  18DE               	xorwf	postinc2,w,c
 16769  013390  B4D8               	btfsc	status,2,c
 16770  013392  D007               	goto	l1632
 16771  013394                     u9930:
 16772                           
 16773                           ;Motor.c: 92: lMotor->mDelta ++;
 16774  013394  C081  FFD9         	movff	_lMotor,fsr2l
 16775  013398  C082  FFDA         	movff	_lMotor+1,fsr2h
 16776  01339C  2ADE               	incf	postinc2,f,c
 16777  01339E  0E00               	movlw	0
 16778  0133A0  22DD               	addwfc	postdec2,f,c
 16779  0133A2                     l1632:
 16780                           
 16781                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16782  0133A2  0E93               	movlw	low _PortE
 16783  0133A4  0100               	movlb	0	; () banked
 16784  0133A6  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16785  0133A8  0E00               	movlw	high _PortE
 16786  0133AA  0100               	movlb	0	; () banked
 16787  0133AC  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16788  0133AE  0E00               	movlw	0
 16789  0133B0  0100               	movlb	0	; () banked
 16790  0133B2  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16791  0133B4  0E00               	movlw	0
 16792  0133B6  0100               	movlb	0	; () banked
 16793  0133B8  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 16794  0133BA  EC84  F09E         	call	_Port_SetPin	;wreg free
 16795  0133BE                     l1631:
 16796                           
 16797                           ;Motor.c: 95: }
 16798                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16799  0133BE  0E93               	movlw	low _PortE
 16800  0133C0  0100               	movlb	0	; () banked
 16801  0133C2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16802  0133C4  0E00               	movlw	high _PortE
 16803  0133C6  0100               	movlb	0	; () banked
 16804  0133C8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16805  0133CA  0E01               	movlw	1
 16806  0133CC  0100               	movlb	0	; () banked
 16807  0133CE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16808  0133D0  0E01               	movlw	1
 16809  0133D2  0100               	movlb	0	; () banked
 16810  0133D4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 16811  0133D6  EC84  F09E         	call	_Port_SetPin	;wreg free
 16812                           
 16813                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16814  0133DA  0E93               	movlw	low _PortE
 16815  0133DC  0100               	movlb	0	; () banked
 16816  0133DE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16817  0133E0  0E00               	movlw	high _PortE
 16818  0133E2  0100               	movlb	0	; () banked
 16819  0133E4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16820  0133E6  0E01               	movlw	1
 16821  0133E8  0100               	movlb	0	; () banked
 16822  0133EA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16823  0133EC  0E00               	movlw	0
 16824  0133EE  0100               	movlb	0	; () banked
 16825  0133F0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 16826  0133F2  EC84  F09E         	call	_Port_SetPin	;wreg free
 16827                           
 16828                           ;Motor.c: 101: MXK_Release();
 16829  0133F6  ECAE  F0B1         	call	_MXK_Release	;wreg free
 16830                           
 16831                           ;Motor.c: 102: Timer0_Restart();
 16832  0133FA  ECA7  F0B2         	call	_Timer0_Restart	;wreg free
 16833                           
 16834                           ;Motor.c: 103: return;
 16835  0133FE  0012               	return	
 16836  013400                     l1628:
 16837                           
 16838                           ;Motor.c: 104: }
 16839                           ;Motor.c: 105: MXK_Release();
 16840  013400  ECAE  F0B1         	call	_MXK_Release	;wreg free
 16841                           
 16842                           ;Motor.c: 106: Timer0_Stop();
 16843  013404  ECD2  F0B2         	call	_Timer0_Stop	;wreg free
 16844                           
 16845                           ;Motor.c: 107: return;
 16846  013408  0012               	return	
 16847  01340A                     l1627:
 16848                           
 16849                           ;Motor.c: 108: }
 16850                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16851  01340A  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 16852  01340E  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16853  013412  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16854  013416  EC8D  F0B2         	call	_MXK_Queue	;wreg free
 16855  01341A  0012               	return		;funcret
 16856  01341C                     __end_of_Motor_Step:
 16857                           	opt stack 0
 16858                           tosu	equ	0xFFF
 16859                           tosh	equ	0xFFE
 16860                           tosl	equ	0xFFD
 16861                           pclath	equ	0xFFA
 16862                           tblptru	equ	0xFF8
 16863                           tblptrh	equ	0xFF7
 16864                           tblptrl	equ	0xFF6
 16865                           tablat	equ	0xFF5
 16866                           prodh	equ	0xFF4
 16867                           prodl	equ	0xFF3
 16868                           intcon	equ	0xFF2
 16869                           postinc0	equ	0xFEE
 16870                           wreg	equ	0xFE8
 16871                           indf1	equ	0xFE7
 16872                           postdec1	equ	0xFE5
 16873                           fsr1h	equ	0xFE2
 16874                           fsr1l	equ	0xFE1
 16875                           indf2	equ	0xFDF
 16876                           postinc2	equ	0xFDE
 16877                           postdec2	equ	0xFDD
 16878                           plusw2	equ	0xFDB
 16879                           fsr2h	equ	0xFDA
 16880                           fsr2l	equ	0xFD9
 16881                           status	equ	0xFD8
 16882                           
 16883 ;; *************** function _Timer0_Stop *****************
 16884 ;; Defined at:
 16885 ;;		line 89 in file "Library/Timer0.c"
 16886 ;; Parameters:    Size  Location     Type
 16887 ;;		None
 16888 ;; Auto vars:     Size  Location     Type
 16889 ;;		None
 16890 ;; Return value:  Size  Location     Type
 16891 ;;                  1    wreg      void 
 16892 ;; Registers used:
 16893 ;;		None
 16894 ;; Tracked objects:
 16895 ;;		On entry : 0/0
 16896 ;;		On exit  : 0/0
 16897 ;;		Unchanged: 0/0
 16898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;Total ram usage:        0 bytes
 16904 ;; Hardware stack levels used:    1
 16905 ;; Hardware stack levels required when called:    7
 16906 ;; This function calls:
 16907 ;;		Nothing
 16908 ;; This function is called by:
 16909 ;;		_Motor_Step
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           	psect	text73
 16914  0165A4                     __ptext73:
 16915                           	opt stack 0
 16916  0165A4                     _Timer0_Stop:
 16917                           	opt stack 19
 16918                           
 16919                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16920                           
 16921                           ;incstack = 0
 16922  0165A4  9AF2               	bcf	intcon,5,c	;volatile
 16923                           
 16924                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16925  0165A6  94F2               	bcf	intcon,2,c	;volatile
 16926  0165A8  0012               	return		;funcret
 16927  0165AA                     __end_of_Timer0_Stop:
 16928                           	opt stack 0
 16929                           tosu	equ	0xFFF
 16930                           tosh	equ	0xFFE
 16931                           tosl	equ	0xFFD
 16932                           pclath	equ	0xFFA
 16933                           tblptru	equ	0xFF8
 16934                           tblptrh	equ	0xFF7
 16935                           tblptrl	equ	0xFF6
 16936                           tablat	equ	0xFF5
 16937                           prodh	equ	0xFF4
 16938                           prodl	equ	0xFF3
 16939                           intcon	equ	0xFF2
 16940                           postinc0	equ	0xFEE
 16941                           wreg	equ	0xFE8
 16942                           indf1	equ	0xFE7
 16943                           postdec1	equ	0xFE5
 16944                           fsr1h	equ	0xFE2
 16945                           fsr1l	equ	0xFE1
 16946                           indf2	equ	0xFDF
 16947                           postinc2	equ	0xFDE
 16948                           postdec2	equ	0xFDD
 16949                           plusw2	equ	0xFDB
 16950                           fsr2h	equ	0xFDA
 16951                           fsr2l	equ	0xFD9
 16952                           status	equ	0xFD8
 16953                           
 16954 ;; *************** function _Timer0_Restart *****************
 16955 ;; Defined at:
 16956 ;;		line 83 in file "Library/Timer0.c"
 16957 ;; Parameters:    Size  Location     Type
 16958 ;;		None
 16959 ;; Auto vars:     Size  Location     Type
 16960 ;;		None
 16961 ;; Return value:  Size  Location     Type
 16962 ;;                  1    wreg      void 
 16963 ;; Registers used:
 16964 ;;		None
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;Total ram usage:        0 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    7
 16977 ;; This function calls:
 16978 ;;		Nothing
 16979 ;; This function is called by:
 16980 ;;		_Motor_Step
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           	psect	text74
 16985  01654E                     __ptext74:
 16986                           	opt stack 0
 16987  01654E                     _Timer0_Restart:
 16988                           	opt stack 19
 16989                           
 16990                           ;Timer0.c: 85: TMR0 = COUNTER;
 16991                           
 16992                           ;incstack = 0
 16993  01654E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 16994  016552  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 16995                           
 16996                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 16997  016556  8AF2               	bsf	intcon,5,c	;volatile
 16998  016558  0012               	return		;funcret
 16999  01655A                     __end_of_Timer0_Restart:
 17000                           	opt stack 0
 17001                           tosu	equ	0xFFF
 17002                           tosh	equ	0xFFE
 17003                           tosl	equ	0xFFD
 17004                           pclath	equ	0xFFA
 17005                           tblptru	equ	0xFF8
 17006                           tblptrh	equ	0xFF7
 17007                           tblptrl	equ	0xFF6
 17008                           tablat	equ	0xFF5
 17009                           prodh	equ	0xFF4
 17010                           prodl	equ	0xFF3
 17011                           intcon	equ	0xFF2
 17012                           postinc0	equ	0xFEE
 17013                           wreg	equ	0xFE8
 17014                           indf1	equ	0xFE7
 17015                           postdec1	equ	0xFE5
 17016                           fsr1h	equ	0xFE2
 17017                           fsr1l	equ	0xFE1
 17018                           indf2	equ	0xFDF
 17019                           postinc2	equ	0xFDE
 17020                           postdec2	equ	0xFDD
 17021                           plusw2	equ	0xFDB
 17022                           fsr2h	equ	0xFDA
 17023                           fsr2l	equ	0xFD9
 17024                           status	equ	0xFD8
 17025                           
 17026 ;; *************** function _MXK_SwitchTo *****************
 17027 ;; Defined at:
 17028 ;;		line 105 in file "Library/MXK.c"
 17029 ;; Parameters:    Size  Location     Type
 17030 ;;  pModule         1    wreg     enum E6927
 17031 ;; Auto vars:     Size  Location     Type
 17032 ;;  pModule         1    7[BANK0 ] enum E6927
 17033 ;;  CUR             1    6[BANK0 ] unsigned char 
 17034 ;; Return value:  Size  Location     Type
 17035 ;;                  1    wreg      unsigned char 
 17036 ;; Registers used:
 17037 ;;		wreg, status,2, status,0, cstack
 17038 ;; Tracked objects:
 17039 ;;		On entry : 0/0
 17040 ;;		On exit  : 0/0
 17041 ;;		Unchanged: 0/0
 17042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17047 ;;Total ram usage:        2 bytes
 17048 ;; Hardware stack levels used:    1
 17049 ;; Hardware stack levels required when called:    8
 17050 ;; This function calls:
 17051 ;;		_delay_us
 17052 ;; This function is called by:
 17053 ;;		_Motor_Step
 17054 ;;		_findClosestWall
 17055 ;;		_mode1
 17056 ;;		_mode2
 17057 ;;		_main
 17058 ;; This function uses a non-reentrant model
 17059 ;;
 17060                           
 17061                           	psect	text75
 17062  015D00                     __ptext75:
 17063                           	opt stack 0
 17064  015D00                     _MXK_SwitchTo:
 17065                           	opt stack 20
 17066                           
 17067                           ;incstack = 0
 17068                           ;MXK_SwitchTo@pModule stored from wreg
 17069  015D00  0100               	movlb	0	; () banked
 17070  015D02  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17071                           
 17072                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17073  015D04  5086               	movf	3974,w,c	;volatile
 17074  015D06  0B0F               	andlw	15
 17075  015D08  0100               	movlb	0	; () banked
 17076  015D0A  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17080  015D0C  504B               	movf	_Bus_State,w,c
 17081  015D0E  A4D8               	btfss	status,2,c
 17082  015D10  D002               	goto	l1730
 17083                           
 17084                           ; BSR set to: 0
 17085                           ;MXK.c: 110: return 0;
 17086  015D12  0E00               	movlw	0
 17087                           
 17088                           ; BSR set to: 0
 17089  015D14  0012               	return	
 17090  015D16                     l1730:
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17094                           
 17095                           ; BSR set to: 0
 17096  015D16  0E00               	movlw	0
 17097  015D18  6E4B               	movwf	_Bus_State,c
 17098                           
 17099                           ; BSR set to: 0
 17100                           ;MXK.c: 114: if (CUR != pModule)
 17101  015D1A  0100               	movlb	0	; () banked
 17102  015D1C  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17103  015D1E  0100               	movlb	0	; () banked
 17104  015D20  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17105  015D22  B4D8               	btfsc	status,2,c
 17106  015D24  D00C               	goto	l1732
 17107                           
 17108                           ; BSR set to: 0
 17109                           ;MXK.c: 115: {
 17110                           ;MXK.c: 116: PORTG &= ~(0xF);
 17111  015D26  0EF0               	movlw	240
 17112  015D28  1686               	andwf	3974,f,c	;volatile
 17113                           
 17114                           ;MXK.c: 117: PORTG |= pModule;
 17115  015D2A  0100               	movlb	0	; () banked
 17116  015D2C  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17117  015D2E  1286               	iorwf	3974,f,c	;volatile
 17118                           
 17119                           ; BSR set to: 0
 17120                           ;MXK.c: 120: delay_us(10);
 17121  015D30  0E00               	movlw	0
 17122  015D32  0100               	movlb	0	; () banked
 17123  015D34  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17124  015D36  0E0A               	movlw	10
 17125  015D38  6FBA               	movwf	delay_us@us& (0+255),b
 17126  015D3A  ECA0  F0AC         	call	_delay_us	;wreg free
 17127  015D3E                     l1732:
 17128                           
 17129                           ;MXK.c: 121: }
 17130                           ;MXK.c: 122: return 1;
 17131  015D3E  0E01               	movlw	1
 17132  015D40  0012               	return	
 17133  015D42                     __end_of_MXK_SwitchTo:
 17134                           	opt stack 0
 17135                           tosu	equ	0xFFF
 17136                           tosh	equ	0xFFE
 17137                           tosl	equ	0xFFD
 17138                           pclath	equ	0xFFA
 17139                           tblptru	equ	0xFF8
 17140                           tblptrh	equ	0xFF7
 17141                           tblptrl	equ	0xFF6
 17142                           tablat	equ	0xFF5
 17143                           prodh	equ	0xFF4
 17144                           prodl	equ	0xFF3
 17145                           intcon	equ	0xFF2
 17146                           postinc0	equ	0xFEE
 17147                           wreg	equ	0xFE8
 17148                           indf1	equ	0xFE7
 17149                           postdec1	equ	0xFE5
 17150                           fsr1h	equ	0xFE2
 17151                           fsr1l	equ	0xFE1
 17152                           indf2	equ	0xFDF
 17153                           postinc2	equ	0xFDE
 17154                           postdec2	equ	0xFDD
 17155                           plusw2	equ	0xFDB
 17156                           fsr2h	equ	0xFDA
 17157                           fsr2l	equ	0xFD9
 17158                           status	equ	0xFD8
 17159                           
 17160 ;; *************** function _MXK_Release *****************
 17161 ;; Defined at:
 17162 ;;		line 130 in file "Library/MXK.c"
 17163 ;; Parameters:    Size  Location     Type
 17164 ;;		None
 17165 ;; Auto vars:     Size  Location     Type
 17166 ;;		None
 17167 ;; Return value:  Size  Location     Type
 17168 ;;                  1    wreg      unsigned char 
 17169 ;; Registers used:
 17170 ;;		wreg, status,2, status,0
 17171 ;; Tracked objects:
 17172 ;;		On entry : 0/0
 17173 ;;		On exit  : 0/0
 17174 ;;		Unchanged: 0/0
 17175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17180 ;;Total ram usage:        0 bytes
 17181 ;; Hardware stack levels used:    1
 17182 ;; Hardware stack levels required when called:    7
 17183 ;; This function calls:
 17184 ;;		Nothing
 17185 ;; This function is called by:
 17186 ;;		_Motor_Step
 17187 ;;		_init
 17188 ;;		_findClosestWall
 17189 ;;		_mode1
 17190 ;;		_mode2
 17191 ;;		_main
 17192 ;; This function uses a non-reentrant model
 17193 ;;
 17194                           
 17195                           	psect	text76
 17196  01635C                     __ptext76:
 17197                           	opt stack 0
 17198  01635C                     _MXK_Release:
 17199                           	opt stack 21
 17200                           
 17201                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17202                           
 17203                           ;incstack = 0
 17204  01635C  0E01               	movlw	1
 17205  01635E  6E4B               	movwf	_Bus_State,c
 17206                           
 17207                           ;MXK.c: 134: if (lQueue != 0)
 17208  016360  0100               	movlb	0	; () banked
 17209  016362  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17210  016364  0100               	movlb	0	; () banked
 17211  016366  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17212  016368  0100               	movlb	0	; () banked
 17213  01636A  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17214  01636C  B4D8               	btfsc	status,2,c
 17215  01636E  D002               	goto	l1735
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;MXK.c: 135: return 1;
 17219  016370  0E01               	movlw	1
 17220                           
 17221                           ; BSR set to: 0
 17222  016372  0012               	return	
 17223  016374                     l1735:
 17224                           
 17225                           ; BSR set to: 0
 17226                           ;MXK.c: 137: return 0;
 17227                           
 17228                           ; BSR set to: 0
 17229  016374  0E00               	movlw	0
 17230  016376  0012               	return	
 17231  016378                     __end_of_MXK_Release:
 17232                           	opt stack 0
 17233                           tosu	equ	0xFFF
 17234                           tosh	equ	0xFFE
 17235                           tosl	equ	0xFFD
 17236                           pclath	equ	0xFFA
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           postinc0	equ	0xFEE
 17245                           wreg	equ	0xFE8
 17246                           indf1	equ	0xFE7
 17247                           postdec1	equ	0xFE5
 17248                           fsr1h	equ	0xFE2
 17249                           fsr1l	equ	0xFE1
 17250                           indf2	equ	0xFDF
 17251                           postinc2	equ	0xFDE
 17252                           postdec2	equ	0xFDD
 17253                           plusw2	equ	0xFDB
 17254                           fsr2h	equ	0xFDA
 17255                           fsr2l	equ	0xFD9
 17256                           status	equ	0xFD8
 17257                           
 17258 ;; *************** function _MXK_Queue *****************
 17259 ;; Defined at:
 17260 ;;		line 144 in file "Library/MXK.c"
 17261 ;; Parameters:    Size  Location     Type
 17262 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17263 ;;		 -> Absolute function(1), Motor_Step(1), 
 17264 ;; Auto vars:     Size  Location     Type
 17265 ;;		None
 17266 ;; Return value:  Size  Location     Type
 17267 ;;                  1    wreg      void 
 17268 ;; Registers used:
 17269 ;;		wreg, status,2, status,0
 17270 ;; Tracked objects:
 17271 ;;		On entry : 0/0
 17272 ;;		On exit  : 0/0
 17273 ;;		Unchanged: 0/0
 17274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17275 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17278 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;Total ram usage:        3 bytes
 17280 ;; Hardware stack levels used:    1
 17281 ;; Hardware stack levels required when called:    7
 17282 ;; This function calls:
 17283 ;;		Nothing
 17284 ;; This function is called by:
 17285 ;;		_Motor_Step
 17286 ;; This function uses a non-reentrant model
 17287 ;;
 17288                           
 17289                           	psect	text77
 17290  01651A                     __ptext77:
 17291                           	opt stack 0
 17292  01651A                     _MXK_Queue:
 17293                           	opt stack 19
 17294                           
 17295                           ;MXK.c: 146: lQueue = pCallback;
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;incstack = 0
 17299  01651A  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17300  01651E  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17301  016522  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17302  016526  0012               	return		;funcret
 17303  016528                     __end_of_MXK_Queue:
 17304                           	opt stack 0
 17305                           tosu	equ	0xFFF
 17306                           tosh	equ	0xFFE
 17307                           tosl	equ	0xFFD
 17308                           pclath	equ	0xFFA
 17309                           tblptru	equ	0xFF8
 17310                           tblptrh	equ	0xFF7
 17311                           tblptrl	equ	0xFF6
 17312                           tablat	equ	0xFF5
 17313                           prodh	equ	0xFF4
 17314                           prodl	equ	0xFF3
 17315                           intcon	equ	0xFF2
 17316                           postinc0	equ	0xFEE
 17317                           wreg	equ	0xFE8
 17318                           indf1	equ	0xFE7
 17319                           postdec1	equ	0xFE5
 17320                           fsr1h	equ	0xFE2
 17321                           fsr1l	equ	0xFE1
 17322                           indf2	equ	0xFDF
 17323                           postinc2	equ	0xFDE
 17324                           postdec2	equ	0xFDD
 17325                           plusw2	equ	0xFDB
 17326                           fsr2h	equ	0xFDA
 17327                           fsr2l	equ	0xFD9
 17328                           status	equ	0xFD8
 17329                           
 17330 ;; *************** function _MXK_BlockSwitchTo *****************
 17331 ;; Defined at:
 17332 ;;		line 82 in file "Library/MXK.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;  pModule         1    wreg     enum E6927
 17335 ;; Auto vars:     Size  Location     Type
 17336 ;;  pModule         1    7[BANK0 ] enum E6927
 17337 ;;  CUR             1    6[BANK0 ] unsigned char 
 17338 ;; Return value:  Size  Location     Type
 17339 ;;                  1    wreg      unsigned char 
 17340 ;; Registers used:
 17341 ;;		wreg, status,2, status,0, cstack
 17342 ;; Tracked objects:
 17343 ;;		On entry : 0/0
 17344 ;;		On exit  : 0/0
 17345 ;;		Unchanged: 0/0
 17346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17351 ;;Total ram usage:        2 bytes
 17352 ;; Hardware stack levels used:    1
 17353 ;; Hardware stack levels required when called:    8
 17354 ;; This function calls:
 17355 ;;		_delay_us
 17356 ;; This function is called by:
 17357 ;;		_init
 17358 ;; This function uses a non-reentrant model
 17359 ;;
 17360                           
 17361                           	psect	text78
 17362  015E3E                     __ptext78:
 17363                           	opt stack 0
 17364  015E3E                     _MXK_BlockSwitchTo:
 17365                           	opt stack 21
 17366                           
 17367                           ;incstack = 0
 17368                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17369  015E3E  0100               	movlb	0	; () banked
 17370  015E40  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17371                           
 17372                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17373  015E42  5086               	movf	3974,w,c	;volatile
 17374  015E44  0B0F               	andlw	15
 17375  015E46  0100               	movlb	0	; () banked
 17376  015E48  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17377  015E4A                     
 17378                           ; BSR set to: 0
 17379                           
 17380                           ; BSR set to: 0
 17381  015E4A  504B               	movf	_Bus_State,w,c
 17382  015E4C  B4D8               	btfsc	status,2,c
 17383  015E4E  D7FD               	goto	l1724
 17384                           
 17385                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17386  015E50  0E00               	movlw	0
 17387  015E52  6E4B               	movwf	_Bus_State,c
 17388                           
 17389                           ;MXK.c: 90: if (CUR != pModule)
 17390  015E54  0100               	movlb	0	; () banked
 17391  015E56  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17392  015E58  0100               	movlb	0	; () banked
 17393  015E5A  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17394  015E5C  B4D8               	btfsc	status,2,c
 17395  015E5E  D00C               	goto	l1726
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;MXK.c: 91: {
 17399                           ;MXK.c: 92: PORTG &= ~(0xF);
 17400  015E60  0EF0               	movlw	240
 17401  015E62  1686               	andwf	3974,f,c	;volatile
 17402                           
 17403                           ;MXK.c: 93: PORTG |= pModule;
 17404  015E64  0100               	movlb	0	; () banked
 17405  015E66  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17406  015E68  1286               	iorwf	3974,f,c	;volatile
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;MXK.c: 96: delay_us(10);
 17410  015E6A  0E00               	movlw	0
 17411  015E6C  0100               	movlb	0	; () banked
 17412  015E6E  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17413  015E70  0E0A               	movlw	10
 17414  015E72  6FBA               	movwf	delay_us@us& (0+255),b
 17415  015E74  ECA0  F0AC         	call	_delay_us	;wreg free
 17416  015E78                     l1726:
 17417                           
 17418                           ;MXK.c: 97: }
 17419                           ;MXK.c: 98: return 1;
 17420  015E78  0E01               	movlw	1
 17421  015E7A  0012               	return	
 17422  015E7C                     __end_of_MXK_BlockSwitchTo:
 17423                           	opt stack 0
 17424                           tosu	equ	0xFFF
 17425                           tosh	equ	0xFFE
 17426                           tosl	equ	0xFFD
 17427                           pclath	equ	0xFFA
 17428                           tblptru	equ	0xFF8
 17429                           tblptrh	equ	0xFF7
 17430                           tblptrl	equ	0xFF6
 17431                           tablat	equ	0xFF5
 17432                           prodh	equ	0xFF4
 17433                           prodl	equ	0xFF3
 17434                           intcon	equ	0xFF2
 17435                           postinc0	equ	0xFEE
 17436                           wreg	equ	0xFE8
 17437                           indf1	equ	0xFE7
 17438                           postdec1	equ	0xFE5
 17439                           fsr1h	equ	0xFE2
 17440                           fsr1l	equ	0xFE1
 17441                           indf2	equ	0xFDF
 17442                           postinc2	equ	0xFDE
 17443                           postdec2	equ	0xFDD
 17444                           plusw2	equ	0xFDB
 17445                           fsr2h	equ	0xFDA
 17446                           fsr2l	equ	0xFD9
 17447                           status	equ	0xFD8
 17448                           
 17449 ;; *************** function _delay_us *****************
 17450 ;; Defined at:
 17451 ;;		line 255 in file "Library/Types.c"
 17452 ;; Parameters:    Size  Location     Type
 17453 ;;  us              2    0[BANK0 ] unsigned short 
 17454 ;; Auto vars:     Size  Location     Type
 17455 ;;  u               4    2[BANK0 ] unsigned long 
 17456 ;; Return value:  Size  Location     Type
 17457 ;;                  1    wreg      void 
 17458 ;; Registers used:
 17459 ;;		wreg, status,2, status,0
 17460 ;; Tracked objects:
 17461 ;;		On entry : 0/0
 17462 ;;		On exit  : 0/0
 17463 ;;		Unchanged: 0/0
 17464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17465 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17466 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17468 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17469 ;;Total ram usage:        6 bytes
 17470 ;; Hardware stack levels used:    1
 17471 ;; Hardware stack levels required when called:    7
 17472 ;; This function calls:
 17473 ;;		Nothing
 17474 ;; This function is called by:
 17475 ;;		_MXK_BlockSwitchTo
 17476 ;;		_MXK_SwitchTo
 17477 ;; This function uses a non-reentrant model
 17478 ;;
 17479                           
 17480                           	psect	text79
 17481  015940                     __ptext79:
 17482                           	opt stack 0
 17483  015940                     _delay_us:
 17484                           	opt stack 20
 17485                           
 17486                           ;Types.c: 256: unsigned long u;
 17487                           ;Types.c: 257: while (us--) {
 17488                           
 17489                           ;incstack = 0
 17490  015940  D01C               	goto	u9100
 17491  015942                     l12482:
 17492                           
 17493                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17494  015942  0E00               	movlw	0
 17495  015944  0100               	movlb	0	; () banked
 17496  015946  6FBC               	movwf	delay_us@u& (0+255),b
 17497  015948  0E00               	movlw	0
 17498  01594A  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 17499  01594C  0E00               	movlw	0
 17500  01594E  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 17501  015950  0E00               	movlw	0
 17502  015952  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 17503  015954                     l12484:
 17504                           
 17505                           ; BSR set to: 0
 17506  015954  0100               	movlb	0	; () banked
 17507  015956  51BC               	movf	delay_us@u& (0+255),w,b
 17508  015958  0100               	movlb	0	; () banked
 17509  01595A  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 17510  01595C  0100               	movlb	0	; () banked
 17511  01595E  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 17512  015960  0100               	movlb	0	; () banked
 17513  015962  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 17514  015964  A4D8               	btfss	status,2,c
 17515  015966  D009               	goto	u9100
 17516                           
 17517                           ; BSR set to: 0
 17518                           
 17519                           ; BSR set to: 0
 17520  015968  F000               	nop		; ;# 
 17521  01596A  0E01               	movlw	1
 17522  01596C  0100               	movlb	0	; () banked
 17523  01596E  27BC               	addwf	delay_us@u& (0+255),f,b
 17524  015970  0E00               	movlw	0
 17525  015972  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 17526  015974  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 17527  015976  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 17528  015978  D7ED               	goto	l12484
 17529  01597A                     u9100:
 17530                           
 17531                           ; BSR set to: 0
 17532                           
 17533                           ; BSR set to: 0
 17534  01597A  0100               	movlb	0	; () banked
 17535  01597C  07BA               	decf	delay_us@us& (0+255),f,b
 17536  01597E  A0D8               	btfss	status,0,c
 17537  015980  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 17538  015982  0100               	movlb	0	; () banked
 17539  015984  29BA               	incf	delay_us@us& (0+255),w,b
 17540  015986  E1DD               	bnz	l12482
 17541  015988  0100               	movlb	0	; () banked
 17542  01598A  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 17543  01598C  B4D8               	btfsc	status,2,c
 17544  01598E  0012               	return	
 17545  015990  D7D8               	goto	l832
 17546  015992                     __end_of_delay_us:
 17547                           	opt stack 0
 17548                           tosu	equ	0xFFF
 17549                           tosh	equ	0xFFE
 17550                           tosl	equ	0xFFD
 17551                           pclath	equ	0xFFA
 17552                           tblptru	equ	0xFF8
 17553                           tblptrh	equ	0xFF7
 17554                           tblptrl	equ	0xFF6
 17555                           tablat	equ	0xFF5
 17556                           prodh	equ	0xFF4
 17557                           prodl	equ	0xFF3
 17558                           intcon	equ	0xFF2
 17559                           postinc0	equ	0xFEE
 17560                           wreg	equ	0xFE8
 17561                           indf1	equ	0xFE7
 17562                           postdec1	equ	0xFE5
 17563                           fsr1h	equ	0xFE2
 17564                           fsr1l	equ	0xFE1
 17565                           indf2	equ	0xFDF
 17566                           postinc2	equ	0xFDE
 17567                           postdec2	equ	0xFDD
 17568                           plusw2	equ	0xFDB
 17569                           fsr2h	equ	0xFDA
 17570                           fsr2l	equ	0xFD9
 17571                           status	equ	0xFD8
 17572                           
 17573 ;; *************** function _LCD_Init *****************
 17574 ;; Defined at:
 17575 ;;		line 172 in file "Library/LCD.c"
 17576 ;; Parameters:    Size  Location     Type
 17577 ;;		None
 17578 ;; Auto vars:     Size  Location     Type
 17579 ;;  i               2   55[BANK0 ] unsigned short 
 17580 ;; Return value:  Size  Location     Type
 17581 ;;                  1    wreg      void 
 17582 ;; Registers used:
 17583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17584 ;; Tracked objects:
 17585 ;;		On entry : 0/0
 17586 ;;		On exit  : 0/0
 17587 ;;		Unchanged: 0/0
 17588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17591 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17592 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17593 ;;Total ram usage:        4 bytes
 17594 ;; Hardware stack levels used:    1
 17595 ;; Hardware stack levels required when called:   15
 17596 ;; This function calls:
 17597 ;;		_Configure_GPIOs
 17598 ;;		_LCD_Fill
 17599 ;;		_LCD_Write
 17600 ;;		_Set_Rotation
 17601 ;;		_delay_ms
 17602 ;; This function is called by:
 17603 ;;		_init
 17604 ;; This function uses a non-reentrant model
 17605 ;;
 17606                           
 17607                           	psect	text80
 17608  012D5E                     __ptext80:
 17609                           	opt stack 0
 17610  012D5E                     _LCD_Init:
 17611                           	opt stack 14
 17612                           
 17613                           ;LCD.c: 174: UINT16 i;
 17614                           ;LCD.c: 175: Configure_GPIOs();
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;incstack = 0
 17618  012D5E  ECB0  F0A9         	call	_Configure_GPIOs	;wreg free
 17619                           
 17620                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17621  012D62  0E00               	movlw	0
 17622  012D64  0100               	movlb	0	; () banked
 17623  012D66  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 17624  012D68  0E00               	movlw	0
 17625  012D6A  6FF1               	movwf	LCD_Init@i& (0+255),b
 17626                           
 17627                           ; BSR set to: 0
 17628  012D6C  0100               	movlb	0	; () banked
 17629  012D6E  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17630  012D70  E106               	bnz	u11020
 17631  012D72  0E59               	movlw	89
 17632  012D74  0100               	movlb	0	; () banked
 17633  012D76  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17634  012D78  B0D8               	btfsc	status,0,c
 17635  012D7A  D08B               	goto	u11060
 17636  012D7C  D001               	goto	l85
 17637  012D7E                     u11020:
 17638                           
 17639                           ; BSR set to: 0
 17640  012D7E  D089               	goto	u11060
 17641  012D80                     l85:
 17642                           
 17643                           ; BSR set to: 0
 17644                           ;LCD.c: 178: {
 17645                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17646                           
 17647                           ; BSR set to: 0
 17648  012D80  90D8               	bcf	status,0,c
 17649  012D82  0100               	movlb	0	; () banked
 17650  012D84  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17651  012D86  6EF6               	movwf	tblptrl,c
 17652  012D88  0100               	movlb	0	; () banked
 17653  012D8A  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17654  012D8C  6EF7               	movwf	tblptrh,c
 17655  012D8E  0E7F               	movlw	low _InitList
 17656  012D90  26F6               	addwf	tblptrl,f,c
 17657  012D92  0EFC               	movlw	high _InitList
 17658  012D94  22F7               	addwfc	tblptrh,f,c
 17659  012D96                     	if	1	;There are 3 active tblptr bytes
 17660  012D96  6AF8               	clrf	tblptru,c
 17661  012D98  0E00               	movlw	low (__mediumconst shr (0+16))
 17662  012D9A  22F8               	addwfc	tblptru,f,c
 17663  012D9C                     	endif
 17664  012D9C  0009               	tblrd		*+
 17665  012D9E  0E80               	movlw	128
 17666  012DA0  18F5               	xorwf	tablat,w,c
 17667  012DA2  0009               	tblrd		*+
 17668  012DA4  10F5               	iorwf	tablat,w,c
 17669  012DA6  A4D8               	btfss	status,2,c
 17670  012DA8  D022               	goto	l87
 17671                           
 17672                           ; BSR set to: 0
 17673  012DAA  0100               	movlb	0	; () banked
 17674  012DAC  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17675  012DAE  E11F               	bnz	l14310
 17676  012DB0  0E58               	movlw	88
 17677  012DB2  0100               	movlb	0	; () banked
 17678  012DB4  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17679  012DB6  B0D8               	btfsc	status,0,c
 17680  012DB8  D01A               	goto	l87
 17681                           
 17682                           ; BSR set to: 0
 17683                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17684  012DBA  0100               	movlb	0	; () banked
 17685  012DBC  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 17686  012DBE  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 17687  012DC0  90D8               	bcf	status,0,c
 17688  012DC2  0100               	movlb	0	; () banked
 17689  012DC4  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17690  012DC6  6EF6               	movwf	tblptrl,c
 17691  012DC8  0100               	movlb	0	; () banked
 17692  012DCA  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17693  012DCC  6EF7               	movwf	tblptrh,c
 17694  012DCE  0E7F               	movlw	low _InitList
 17695  012DD0  26F6               	addwf	tblptrl,f,c
 17696  012DD2  0EFC               	movlw	high _InitList
 17697  012DD4  22F7               	addwfc	tblptrh,f,c
 17698  012DD6                     	if	1	;There are 3 active tblptr bytes
 17699  012DD6  6AF8               	clrf	tblptru,c
 17700  012DD8  0E00               	movlw	low (__mediumconst shr (0+16))
 17701  012DDA  22F8               	addwfc	tblptru,f,c
 17702  012DDC                     	endif
 17703  012DDC  0009               	tblrd		*+
 17704  012DDE  CFF5 F0BA          	movff	tablat,delay_ms@ms
 17705  012DE2  000A               	tblrd		*-
 17706  012DE4  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 17707  012DE8  EC89  F0AA         	call	_delay_ms	;wreg free
 17708  012DEC  D04B               	goto	l90
 17709  012DEE                     l87:
 17710  012DEE                     l14310:
 17711                           
 17712                           ;LCD.c: 181: else
 17713                           ;LCD.c: 182: {
 17714                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17715  012DEE  90D8               	bcf	status,0,c
 17716  012DF0  0100               	movlb	0	; () banked
 17717  012DF2  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17718  012DF4  6EF6               	movwf	tblptrl,c
 17719  012DF6  0100               	movlb	0	; () banked
 17720  012DF8  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17721  012DFA  6EF7               	movwf	tblptrh,c
 17722  012DFC  0E7F               	movlw	low _InitList
 17723  012DFE  26F6               	addwf	tblptrl,f,c
 17724  012E00  0EFC               	movlw	high _InitList
 17725  012E02  22F7               	addwfc	tblptrh,f,c
 17726  012E04                     	if	1	;There are 3 active tblptr bytes
 17727  012E04  6AF8               	clrf	tblptru,c
 17728  012E06  0E00               	movlw	low (__mediumconst shr (0+16))
 17729  012E08  22F8               	addwfc	tblptru,f,c
 17730  012E0A                     	endif
 17731  012E0A  0009               	tblrd		*+
 17732  012E0C  0E00               	movlw	0
 17733  012E0E  5EF5               	subwf	tablat,f,c
 17734  012E10  0009               	tblrd		*+
 17735  012E12  0E01               	movlw	1
 17736  012E14  5AF5               	subwfb	tablat,f,c
 17737  012E16  A0D8               	btfss	status,0,c
 17738  012E18  D020               	goto	l89
 17739                           
 17740                           ; BSR set to: 0
 17741  012E1A  0E00               	movlw	0
 17742  012E1C  0100               	movlb	0	; () banked
 17743  012E1E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17744  012E20  90D8               	bcf	status,0,c
 17745  012E22  0100               	movlb	0	; () banked
 17746  012E24  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17747  012E26  6EF6               	movwf	tblptrl,c
 17748  012E28  0100               	movlb	0	; () banked
 17749  012E2A  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17750  012E2C  6EF7               	movwf	tblptrh,c
 17751  012E2E  0E7F               	movlw	low _InitList
 17752  012E30  26F6               	addwf	tblptrl,f,c
 17753  012E32  0EFC               	movlw	high _InitList
 17754  012E34  22F7               	addwfc	tblptrh,f,c
 17755  012E36                     	if	1	;There are 3 active tblptr bytes
 17756  012E36  6AF8               	clrf	tblptru,c
 17757  012E38  0E00               	movlw	low (__mediumconst shr (0+16))
 17758  012E3A  22F8               	addwfc	tblptru,f,c
 17759  012E3C                     	endif
 17760  012E3C  0009               	tblrd		*+
 17761  012E3E  CFF5 F0EF          	movff	tablat,??_LCD_Init
 17762  012E42  0009               	tblrd		*+
 17763  012E44  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 17764  012E48  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 17765  012E4C  0100               	movlb	0	; () banked
 17766  012E4E  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 17767  012E50  0100               	movlb	0	; () banked
 17768  012E52  51EF               	movf	??_LCD_Init& (0+255),w,b
 17769  012E54  ECE5  F0B0         	call	_LCD_Write
 17770  012E58  D015               	goto	l90
 17771  012E5A                     l89:
 17772                           
 17773                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17774  012E5A  0E01               	movlw	1
 17775  012E5C  0100               	movlb	0	; () banked
 17776  012E5E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17777  012E60  90D8               	bcf	status,0,c
 17778  012E62  0100               	movlb	0	; () banked
 17779  012E64  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17780  012E66  6EF6               	movwf	tblptrl,c
 17781  012E68  0100               	movlb	0	; () banked
 17782  012E6A  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17783  012E6C  6EF7               	movwf	tblptrh,c
 17784  012E6E  0E7F               	movlw	low _InitList
 17785  012E70  26F6               	addwf	tblptrl,f,c
 17786  012E72  0EFC               	movlw	high _InitList
 17787  012E74  22F7               	addwfc	tblptrh,f,c
 17788  012E76                     	if	1	;There are 3 active tblptr bytes
 17789  012E76  6AF8               	clrf	tblptru,c
 17790  012E78  0E00               	movlw	low (__mediumconst shr (0+16))
 17791  012E7A  22F8               	addwfc	tblptru,f,c
 17792  012E7C                     	endif
 17793  012E7C  0008               	tblrd		*
 17794  012E7E  50F5               	movf	tablat,w,c
 17795  012E80  ECE5  F0B0         	call	_LCD_Write
 17796  012E84                     l90:
 17797  012E84  0100               	movlb	0	; () banked
 17798  012E86  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 17799  012E88  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 17800                           
 17801                           ; BSR set to: 0
 17802  012E8A  0100               	movlb	0	; () banked
 17803  012E8C  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17804  012E8E  E101               	bnz	l14320
 17805  012E90  D770               	goto	L12
 17806  012E92                     u11060:
 17807  012E92                     l14320:
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;LCD.c: 185: }
 17811                           ;LCD.c: 186: }
 17812                           ;LCD.c: 187: delay_ms(100);
 17813  012E92  0E00               	movlw	0
 17814  012E94  0100               	movlb	0	; () banked
 17815  012E96  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 17816  012E98  0E64               	movlw	100
 17817  012E9A  6FBA               	movwf	delay_ms@ms& (0+255),b
 17818  012E9C  EC89  F0AA         	call	_delay_ms	;wreg free
 17819                           
 17820                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 17821  012EA0  0E00               	movlw	0
 17822  012EA2  0100               	movlb	0	; () banked
 17823  012EA4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17824  012EA6  0E29               	movlw	41
 17825  012EA8  ECE5  F0B0         	call	_LCD_Write
 17826                           
 17827                           ;LCD.c: 189: Set_Rotation(1);
 17828  012EAC  0E01               	movlw	1
 17829  012EAE  EC67  F0A5         	call	_Set_Rotation
 17830                           
 17831                           ;LCD.c: 191: delay_ms(100);
 17832  012EB2  0E00               	movlw	0
 17833  012EB4  0100               	movlb	0	; () banked
 17834  012EB6  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 17835  012EB8  0E64               	movlw	100
 17836  012EBA  6FBA               	movwf	delay_ms@ms& (0+255),b
 17837  012EBC  EC89  F0AA         	call	_delay_ms	;wreg free
 17838                           
 17839                           ;LCD.c: 192: LCD_Fill(0x0000);
 17840  012EC0  0E00               	movlw	0
 17841  012EC2  0100               	movlb	0	; () banked
 17842  012EC4  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 17843  012EC6  0E00               	movlw	0
 17844  012EC8  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 17845  012ECA  EC74  F0AC         	call	_LCD_Fill	;wreg free
 17846  012ECE  0012               	return		;funcret
 17847  012ED0                     __end_of_LCD_Init:
 17848                           	opt stack 0
 17849                           tosu	equ	0xFFF
 17850                           tosh	equ	0xFFE
 17851                           tosl	equ	0xFFD
 17852                           pclath	equ	0xFFA
 17853                           tblptru	equ	0xFF8
 17854                           tblptrh	equ	0xFF7
 17855                           tblptrl	equ	0xFF6
 17856                           tablat	equ	0xFF5
 17857                           prodh	equ	0xFF4
 17858                           prodl	equ	0xFF3
 17859                           intcon	equ	0xFF2
 17860                           postinc0	equ	0xFEE
 17861                           wreg	equ	0xFE8
 17862                           indf1	equ	0xFE7
 17863                           postdec1	equ	0xFE5
 17864                           fsr1h	equ	0xFE2
 17865                           fsr1l	equ	0xFE1
 17866                           indf2	equ	0xFDF
 17867                           postinc2	equ	0xFDE
 17868                           postdec2	equ	0xFDD
 17869                           plusw2	equ	0xFDB
 17870                           fsr2h	equ	0xFDA
 17871                           fsr2l	equ	0xFD9
 17872                           status	equ	0xFD8
 17873                           
 17874 ;; *************** function _Set_Rotation *****************
 17875 ;; Defined at:
 17876 ;;		line 248 in file "Library/LCD.c"
 17877 ;; Parameters:    Size  Location     Type
 17878 ;;  m               1    wreg     unsigned char 
 17879 ;; Auto vars:     Size  Location     Type
 17880 ;;  m               1    5[BANK0 ] unsigned char 
 17881 ;;  rotation        1    6[BANK0 ] unsigned char 
 17882 ;; Return value:  Size  Location     Type
 17883 ;;                  1    wreg      void 
 17884 ;; Registers used:
 17885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17886 ;; Tracked objects:
 17887 ;;		On entry : 0/0
 17888 ;;		On exit  : 0/0
 17889 ;;		Unchanged: 0/0
 17890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17894 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17895 ;;Total ram usage:        2 bytes
 17896 ;; Hardware stack levels used:    1
 17897 ;; Hardware stack levels required when called:    9
 17898 ;; This function calls:
 17899 ;;		_LCD_Write
 17900 ;; This function is called by:
 17901 ;;		_LCD_Init
 17902 ;; This function uses a non-reentrant model
 17903 ;;
 17904                           
 17905                           	psect	text81
 17906  014ACE                     __ptext81:
 17907                           	opt stack 0
 17908  014ACE                     _Set_Rotation:
 17909                           	opt stack 19
 17910                           
 17911                           ;incstack = 0
 17912                           ;Set_Rotation@m stored from wreg
 17913  014ACE  0100               	movlb	0	; () banked
 17914  014AD0  6FBF               	movwf	Set_Rotation@m& (0+255),b
 17915                           
 17916                           ;LCD.c: 250: UINT8 rotation = 0x00;
 17917  014AD2  0E00               	movlw	0
 17918  014AD4  0100               	movlb	0	; () banked
 17919  014AD6  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 17923  014AD8  0E00               	movlw	0
 17924  014ADA  0100               	movlb	0	; () banked
 17925  014ADC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17926  014ADE  0E36               	movlw	54
 17927  014AE0  ECE5  F0B0         	call	_LCD_Write
 17928                           
 17929                           ;LCD.c: 253: rotation = (m % 4);
 17930  014AE4  0100               	movlb	0	; () banked
 17931  014AE6  51BF               	movf	Set_Rotation@m& (0+255),w,b
 17932  014AE8  0B03               	andlw	3
 17933  014AEA  0100               	movlb	0	; () banked
 17934  014AEC  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 17935                           
 17936                           ;LCD.c: 255: switch(rotation)
 17937  014AEE  D02C               	goto	l117
 17938  014AF0                     
 17939                           ; BSR set to: 0
 17940                           ;LCD.c: 258: {
 17941                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 17942                           
 17943                           ; BSR set to: 0
 17944  014AF0  0E01               	movlw	1
 17945  014AF2  0100               	movlb	0	; () banked
 17946  014AF4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17947  014AF6  0EC8               	movlw	200
 17948  014AF8  ECE5  F0B0         	call	_LCD_Write
 17949                           
 17950                           ;LCD.c: 260: w = 128;
 17951  014AFC  0E80               	movlw	128
 17952  014AFE  6E50               	movwf	_w,c
 17953                           
 17954                           ;LCD.c: 261: l = 128;
 17955  014B00  0E80               	movlw	128
 17956  014B02  6E4F               	movwf	_l,c
 17957                           
 17958                           ;LCD.c: 262: break;
 17959  014B04  0012               	return	
 17960  014B06                     
 17961                           ;LCD.c: 265: {
 17962                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 17963  014B06  0E01               	movlw	1
 17964  014B08  0100               	movlb	0	; () banked
 17965  014B0A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17966  014B0C  0EA8               	movlw	168
 17967  014B0E  ECE5  F0B0         	call	_LCD_Write
 17968                           
 17969                           ;LCD.c: 267: w = 128;
 17970  014B12  0E80               	movlw	128
 17971  014B14  6E50               	movwf	_w,c
 17972                           
 17973                           ;LCD.c: 268: l = 128;
 17974  014B16  0E80               	movlw	128
 17975  014B18  6E4F               	movwf	_l,c
 17976                           
 17977                           ;LCD.c: 269: break;
 17978  014B1A  0012               	return	
 17979  014B1C                     
 17980                           ;LCD.c: 272: {
 17981                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 17982  014B1C  0E01               	movlw	1
 17983  014B1E  0100               	movlb	0	; () banked
 17984  014B20  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17985  014B22  0E08               	movlw	8
 17986  014B24  ECE5  F0B0         	call	_LCD_Write
 17987                           
 17988                           ;LCD.c: 274: w = 128;
 17989  014B28  0E80               	movlw	128
 17990  014B2A  6E50               	movwf	_w,c
 17991                           
 17992                           ;LCD.c: 275: l = 128;
 17993  014B2C  0E80               	movlw	128
 17994  014B2E  6E4F               	movwf	_l,c
 17995                           
 17996                           ;LCD.c: 276: break;
 17997  014B30  0012               	return	
 17998  014B32                     
 17999                           ;LCD.c: 279: {
 18000                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18001  014B32  0E01               	movlw	1
 18002  014B34  0100               	movlb	0	; () banked
 18003  014B36  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18004  014B38  0E68               	movlw	104
 18005  014B3A  ECE5  F0B0         	call	_LCD_Write
 18006                           
 18007                           ;LCD.c: 281: w = 128;
 18008  014B3E  0E80               	movlw	128
 18009  014B40  6E50               	movwf	_w,c
 18010                           
 18011                           ;LCD.c: 282: l = 128;
 18012  014B42  0E80               	movlw	128
 18013  014B44  6E4F               	movwf	_l,c
 18014                           
 18015                           ;LCD.c: 284: }
 18016                           ;LCD.c: 285: }
 18017                           
 18018                           ;LCD.c: 283: break;
 18019  014B46  0012               	return	
 18020  014B48                     l117:
 18021  014B48  0100               	movlb	0	; () banked
 18022  014B4A  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18023                           
 18024                           ; Switch size 1, requested type "space"
 18025                           ; Number of cases is 4, Range of values is 0 to 3
 18026                           ; switch strategies available:
 18027                           ; Name         Instructions Cycles
 18028                           ; simple_byte           13     7 (average)
 18029                           ;	Chosen strategy is simple_byte
 18030  014B4C  0A00               	xorlw	0	; case 0
 18031  014B4E  B4D8               	btfsc	status,2,c
 18032  014B50  D7CF               	goto	l118
 18033  014B52  0A01               	xorlw	1	; case 1
 18034  014B54  B4D8               	btfsc	status,2,c
 18035  014B56  D7D7               	goto	l120
 18036  014B58  0A03               	xorlw	3	; case 2
 18037  014B5A  B4D8               	btfsc	status,2,c
 18038  014B5C  D7DF               	goto	l121
 18039  014B5E  0A01               	xorlw	1	; case 3
 18040  014B60  A4D8               	btfss	status,2,c
 18041  014B62  0012               	return	
 18042  014B64  D7E6               	goto	l122
 18043  014B66                     __end_of_Set_Rotation:
 18044                           	opt stack 0
 18045                           tosu	equ	0xFFF
 18046                           tosh	equ	0xFFE
 18047                           tosl	equ	0xFFD
 18048                           pclath	equ	0xFFA
 18049                           tblptru	equ	0xFF8
 18050                           tblptrh	equ	0xFF7
 18051                           tblptrl	equ	0xFF6
 18052                           tablat	equ	0xFF5
 18053                           prodh	equ	0xFF4
 18054                           prodl	equ	0xFF3
 18055                           intcon	equ	0xFF2
 18056                           postinc0	equ	0xFEE
 18057                           wreg	equ	0xFE8
 18058                           indf1	equ	0xFE7
 18059                           postdec1	equ	0xFE5
 18060                           fsr1h	equ	0xFE2
 18061                           fsr1l	equ	0xFE1
 18062                           indf2	equ	0xFDF
 18063                           postinc2	equ	0xFDE
 18064                           postdec2	equ	0xFDD
 18065                           plusw2	equ	0xFDB
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070 ;; *************** function _LCD_Fill *****************
 18071 ;; Defined at:
 18072 ;;		line 287 in file "Library/LCD.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;  pColour         2    9[BANK0 ] unsigned short 
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;  j               1   12[BANK0 ] unsigned char 
 18077 ;;  i               1   11[BANK0 ] unsigned char 
 18078 ;; Return value:  Size  Location     Type
 18079 ;;                  1    wreg      void 
 18080 ;; Registers used:
 18081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18082 ;; Tracked objects:
 18083 ;;		On entry : 0/0
 18084 ;;		On exit  : 0/0
 18085 ;;		Unchanged: 0/0
 18086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18090 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18091 ;;Total ram usage:        4 bytes
 18092 ;; Hardware stack levels used:    1
 18093 ;; Hardware stack levels required when called:   10
 18094 ;; This function calls:
 18095 ;;		_LCD_Word_Write
 18096 ;;		_Set_Addr_Window
 18097 ;; This function is called by:
 18098 ;;		_LCD_Init
 18099 ;; This function uses a non-reentrant model
 18100 ;;
 18101                           
 18102                           	psect	text82
 18103  0158E8                     __ptext82:
 18104                           	opt stack 0
 18105  0158E8                     _LCD_Fill:
 18106                           	opt stack 18
 18107                           
 18108                           ;LCD.c: 296: UINT8 i = 0x00;
 18109                           
 18110                           ;incstack = 0
 18111  0158E8  0E00               	movlw	0
 18112  0158EA  0100               	movlb	0	; () banked
 18113  0158EC  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18114                           
 18115                           ;LCD.c: 297: UINT8 j = 0x00;
 18116  0158EE  0E00               	movlw	0
 18117  0158F0  0100               	movlb	0	; () banked
 18118  0158F2  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18119                           
 18120                           ; BSR set to: 0
 18121                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18122  0158F4  0E00               	movlw	0
 18123  0158F6  0100               	movlb	0	; () banked
 18124  0158F8  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18125  0158FA  0450               	decf	_w,w,c
 18126  0158FC  0100               	movlb	0	; () banked
 18127  0158FE  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18128  015900  044F               	decf	_l,w,c
 18129  015902  0100               	movlb	0	; () banked
 18130  015904  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18131  015906  0E00               	movlw	0
 18132  015908  EC80  F0A2         	call	_Set_Addr_Window
 18133                           
 18134                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18135  01590C  C04F  F0C6         	movff	_l,LCD_Fill@j
 18136  015910                     l13904:
 18137  015910  0100               	movlb	0	; () banked
 18138  015912  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18139  015914  0100               	movlb	0	; () banked
 18140  015916  B4D8               	btfsc	status,2,c
 18141  015918  0012               	return	
 18142                           
 18143                           ; BSR set to: 0
 18144                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18145                           
 18146                           ; BSR set to: 0
 18147  01591A  C050  F0C5         	movff	_w,LCD_Fill@i
 18148  01591E                     l13908:
 18149                           
 18150                           ; BSR set to: 0
 18151  01591E  0100               	movlb	0	; () banked
 18152  015920  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18153  015922  0100               	movlb	0	; () banked
 18154  015924  B4D8               	btfsc	status,2,c
 18155  015926  D009               	goto	u10550
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18159                           
 18160                           ; BSR set to: 0
 18161                           
 18162                           ; BSR set to: 0
 18163  015928  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18164  01592C  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18165  015930  EC46  F0B1         	call	_LCD_Word_Write	;wreg free
 18166  015934  0100               	movlb	0	; () banked
 18167  015936  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18168  015938  D7F2               	goto	l13908
 18169  01593A                     u10550:
 18170                           
 18171                           ; BSR set to: 0
 18172                           
 18173                           ; BSR set to: 0
 18174  01593A  0100               	movlb	0	; () banked
 18175  01593C  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18176  01593E  D7E8               	goto	l13904
 18177  015940                     __end_of_LCD_Fill:
 18178                           	opt stack 0
 18179                           tosu	equ	0xFFF
 18180                           tosh	equ	0xFFE
 18181                           tosl	equ	0xFFD
 18182                           pclath	equ	0xFFA
 18183                           tblptru	equ	0xFF8
 18184                           tblptrh	equ	0xFF7
 18185                           tblptrl	equ	0xFF6
 18186                           tablat	equ	0xFF5
 18187                           prodh	equ	0xFF4
 18188                           prodl	equ	0xFF3
 18189                           intcon	equ	0xFF2
 18190                           postinc0	equ	0xFEE
 18191                           wreg	equ	0xFE8
 18192                           indf1	equ	0xFE7
 18193                           postdec1	equ	0xFE5
 18194                           fsr1h	equ	0xFE2
 18195                           fsr1l	equ	0xFE1
 18196                           indf2	equ	0xFDF
 18197                           postinc2	equ	0xFDE
 18198                           postdec2	equ	0xFDD
 18199                           plusw2	equ	0xFDB
 18200                           fsr2h	equ	0xFDA
 18201                           fsr2l	equ	0xFD9
 18202                           status	equ	0xFD8
 18203                           
 18204 ;; *************** function _Set_Addr_Window *****************
 18205 ;; Defined at:
 18206 ;;		line 214 in file "Library/LCD.c"
 18207 ;; Parameters:    Size  Location     Type
 18208 ;;  xs              1    wreg     unsigned char 
 18209 ;;  ys              1    5[BANK0 ] unsigned char 
 18210 ;;  xe              1    6[BANK0 ] unsigned char 
 18211 ;;  ye              1    7[BANK0 ] unsigned char 
 18212 ;; Auto vars:     Size  Location     Type
 18213 ;;  xs              1    8[BANK0 ] unsigned char 
 18214 ;; Return value:  Size  Location     Type
 18215 ;;                  1    wreg      void 
 18216 ;; Registers used:
 18217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18218 ;; Tracked objects:
 18219 ;;		On entry : 0/0
 18220 ;;		On exit  : 0/0
 18221 ;;		Unchanged: 0/0
 18222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18223 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;Total ram usage:        4 bytes
 18228 ;; Hardware stack levels used:    1
 18229 ;; Hardware stack levels required when called:    9
 18230 ;; This function calls:
 18231 ;;		_LCD_Write
 18232 ;; This function is called by:
 18233 ;;		_LCD_Fill
 18234 ;;		_LCD_FillRectangle
 18235 ;;		_LCD_DrawField
 18236 ;;		_RAM_Address_Set
 18237 ;;		_LCD_DrawPixel
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           	psect	text83
 18242  014500                     __ptext83:
 18243                           	opt stack 0
 18244  014500                     _Set_Addr_Window:
 18245                           	opt stack 17
 18246                           
 18247                           ; BSR set to: 0
 18248                           ;incstack = 0
 18249                           ;Set_Addr_Window@xs stored from wreg
 18250  014500  0100               	movlb	0	; () banked
 18251  014502  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18252                           
 18253                           ;LCD.c: 216: ys+=2;
 18254  014504  0E02               	movlw	2
 18255  014506  0100               	movlb	0	; () banked
 18256  014508  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18257                           
 18258                           ;LCD.c: 217: ye+=2;
 18259  01450A  0E02               	movlw	2
 18260  01450C  0100               	movlb	0	; () banked
 18261  01450E  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18262                           
 18263                           ;LCD.c: 218: xs+=3;
 18264  014510  0E03               	movlw	3
 18265  014512  0100               	movlb	0	; () banked
 18266  014514  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18267                           
 18268                           ;LCD.c: 219: xe+=3;
 18269  014516  0E03               	movlw	3
 18270  014518  0100               	movlb	0	; () banked
 18271  01451A  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18272                           
 18273                           ; BSR set to: 0
 18274                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18275  01451C  0E00               	movlw	0
 18276  01451E  0100               	movlb	0	; () banked
 18277  014520  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18278  014522  0E2A               	movlw	42
 18279  014524  ECE5  F0B0         	call	_LCD_Write
 18280                           
 18281                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18282  014528  0E01               	movlw	1
 18283  01452A  0100               	movlb	0	; () banked
 18284  01452C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18285  01452E  0E00               	movlw	0
 18286  014530  ECE5  F0B0         	call	_LCD_Write
 18287                           
 18288                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18289  014534  0E01               	movlw	1
 18290  014536  0100               	movlb	0	; () banked
 18291  014538  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18292  01453A  0100               	movlb	0	; () banked
 18293  01453C  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18294  01453E  ECE5  F0B0         	call	_LCD_Write
 18295                           
 18296                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18297  014542  0E01               	movlw	1
 18298  014544  0100               	movlb	0	; () banked
 18299  014546  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18300  014548  0E00               	movlw	0
 18301  01454A  ECE5  F0B0         	call	_LCD_Write
 18302                           
 18303                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18304  01454E  0E01               	movlw	1
 18305  014550  0100               	movlb	0	; () banked
 18306  014552  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18307  014554  0100               	movlb	0	; () banked
 18308  014556  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18309  014558  ECE5  F0B0         	call	_LCD_Write
 18310                           
 18311                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18312  01455C  0E00               	movlw	0
 18313  01455E  0100               	movlb	0	; () banked
 18314  014560  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18315  014562  0E2B               	movlw	43
 18316  014564  ECE5  F0B0         	call	_LCD_Write
 18317                           
 18318                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18319  014568  0E01               	movlw	1
 18320  01456A  0100               	movlb	0	; () banked
 18321  01456C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18322  01456E  0E00               	movlw	0
 18323  014570  ECE5  F0B0         	call	_LCD_Write
 18324                           
 18325                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18326  014574  0E01               	movlw	1
 18327  014576  0100               	movlb	0	; () banked
 18328  014578  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18329  01457A  0100               	movlb	0	; () banked
 18330  01457C  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 18331  01457E  ECE5  F0B0         	call	_LCD_Write
 18332                           
 18333                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18334  014582  0E01               	movlw	1
 18335  014584  0100               	movlb	0	; () banked
 18336  014586  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18337  014588  0E00               	movlw	0
 18338  01458A  ECE5  F0B0         	call	_LCD_Write
 18339                           
 18340                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18341  01458E  0E01               	movlw	1
 18342  014590  0100               	movlb	0	; () banked
 18343  014592  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18344  014594  0100               	movlb	0	; () banked
 18345  014596  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 18346  014598  ECE5  F0B0         	call	_LCD_Write
 18347                           
 18348                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18349  01459C  0E00               	movlw	0
 18350  01459E  0100               	movlb	0	; () banked
 18351  0145A0  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18352  0145A2  0E2C               	movlw	44
 18353  0145A4  ECE5  F0B0         	call	_LCD_Write
 18354  0145A8  0012               	return		;funcret
 18355  0145AA                     __end_of_Set_Addr_Window:
 18356                           	opt stack 0
 18357                           tosu	equ	0xFFF
 18358                           tosh	equ	0xFFE
 18359                           tosl	equ	0xFFD
 18360                           pclath	equ	0xFFA
 18361                           tblptru	equ	0xFF8
 18362                           tblptrh	equ	0xFF7
 18363                           tblptrl	equ	0xFF6
 18364                           tablat	equ	0xFF5
 18365                           prodh	equ	0xFF4
 18366                           prodl	equ	0xFF3
 18367                           intcon	equ	0xFF2
 18368                           postinc0	equ	0xFEE
 18369                           wreg	equ	0xFE8
 18370                           indf1	equ	0xFE7
 18371                           postdec1	equ	0xFE5
 18372                           fsr1h	equ	0xFE2
 18373                           fsr1l	equ	0xFE1
 18374                           indf2	equ	0xFDF
 18375                           postinc2	equ	0xFDE
 18376                           postdec2	equ	0xFDD
 18377                           plusw2	equ	0xFDB
 18378                           fsr2h	equ	0xFDA
 18379                           fsr2l	equ	0xFD9
 18380                           status	equ	0xFD8
 18381                           
 18382 ;; *************** function _LCD_Word_Write *****************
 18383 ;; Defined at:
 18384 ;;		line 198 in file "Library/LCD.c"
 18385 ;; Parameters:    Size  Location     Type
 18386 ;;  value           2    5[BANK0 ] unsigned short 
 18387 ;; Auto vars:     Size  Location     Type
 18388 ;;		None
 18389 ;; Return value:  Size  Location     Type
 18390 ;;                  1    wreg      void 
 18391 ;; Registers used:
 18392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18393 ;; Tracked objects:
 18394 ;;		On entry : 0/0
 18395 ;;		On exit  : 0/0
 18396 ;;		Unchanged: 0/0
 18397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18398 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18402 ;;Total ram usage:        2 bytes
 18403 ;; Hardware stack levels used:    1
 18404 ;; Hardware stack levels required when called:    9
 18405 ;; This function calls:
 18406 ;;		_LCD_Write
 18407 ;; This function is called by:
 18408 ;;		_LCD_Fill
 18409 ;;		_LCD_FillRectangle
 18410 ;;		_LCD_DrawField
 18411 ;;		_LCD_DrawPixel
 18412 ;; This function uses a non-reentrant model
 18413 ;;
 18414                           
 18415                           	psect	text84
 18416  01628C                     __ptext84:
 18417                           	opt stack 0
 18418  01628C                     _LCD_Word_Write:
 18419                           	opt stack 17
 18420                           
 18421                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18422                           
 18423                           ;incstack = 0
 18424  01628C  0E01               	movlw	1
 18425  01628E  0100               	movlb	0	; () banked
 18426  016290  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18427  016292  0100               	movlb	0	; () banked
 18428  016294  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18429  016296  ECE5  F0B0         	call	_LCD_Write
 18430                           
 18431                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18432  01629A  0E01               	movlw	1
 18433  01629C  0100               	movlb	0	; () banked
 18434  01629E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18435  0162A0  0100               	movlb	0	; () banked
 18436  0162A2  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 18437  0162A4  ECE5  F0B0         	call	_LCD_Write
 18438  0162A8  0012               	return		;funcret
 18439  0162AA                     __end_of_LCD_Word_Write:
 18440                           	opt stack 0
 18441                           tosu	equ	0xFFF
 18442                           tosh	equ	0xFFE
 18443                           tosl	equ	0xFFD
 18444                           pclath	equ	0xFFA
 18445                           tblptru	equ	0xFF8
 18446                           tblptrh	equ	0xFF7
 18447                           tblptrl	equ	0xFF6
 18448                           tablat	equ	0xFF5
 18449                           prodh	equ	0xFF4
 18450                           prodl	equ	0xFF3
 18451                           intcon	equ	0xFF2
 18452                           postinc0	equ	0xFEE
 18453                           wreg	equ	0xFE8
 18454                           indf1	equ	0xFE7
 18455                           postdec1	equ	0xFE5
 18456                           fsr1h	equ	0xFE2
 18457                           fsr1l	equ	0xFE1
 18458                           indf2	equ	0xFDF
 18459                           postinc2	equ	0xFDE
 18460                           postdec2	equ	0xFDD
 18461                           plusw2	equ	0xFDB
 18462                           fsr2h	equ	0xFDA
 18463                           fsr2l	equ	0xFD9
 18464                           status	equ	0xFD8
 18465                           
 18466 ;; *************** function _LCD_Write *****************
 18467 ;; Defined at:
 18468 ;;		line 67 in file "Library/LCD.c"
 18469 ;; Parameters:    Size  Location     Type
 18470 ;;  value           1    wreg     unsigned char 
 18471 ;;  mode            1    3[BANK0 ] enum E6761
 18472 ;; Auto vars:     Size  Location     Type
 18473 ;;  value           1    4[BANK0 ] unsigned char 
 18474 ;; Return value:  Size  Location     Type
 18475 ;;                  1    wreg      void 
 18476 ;; Registers used:
 18477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18478 ;; Tracked objects:
 18479 ;;		On entry : 0/0
 18480 ;;		On exit  : 0/0
 18481 ;;		Unchanged: 0/0
 18482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18487 ;;Total ram usage:        2 bytes
 18488 ;; Hardware stack levels used:    1
 18489 ;; Hardware stack levels required when called:    8
 18490 ;; This function calls:
 18491 ;;		_Mode_Set
 18492 ;;		_SPI_Send
 18493 ;; This function is called by:
 18494 ;;		_LCD_Init
 18495 ;;		_LCD_Word_Write
 18496 ;;		_Set_Addr_Window
 18497 ;;		_Set_Rotation
 18498 ;;		_LCD_WriteCMD
 18499 ;;		_LCD_WriteData
 18500 ;;		_LCD_Data_Write
 18501 ;;		_LCD_Data_Write_4k
 18502 ;;		_Invert_Display
 18503 ;; This function uses a non-reentrant model
 18504 ;;
 18505                           
 18506                           	psect	text85
 18507  0161CA                     __ptext85:
 18508                           	opt stack 0
 18509  0161CA                     _LCD_Write:
 18510                           	opt stack 17
 18511                           
 18512                           ;incstack = 0
 18513                           ;LCD_Write@value stored from wreg
 18514  0161CA  0100               	movlb	0	; () banked
 18515  0161CC  6FBE               	movwf	LCD_Write@value& (0+255),b
 18516                           
 18517                           ;LCD.c: 89: Mode_Set(mode);
 18518  0161CE  0100               	movlb	0	; () banked
 18519  0161D0  51BD               	movf	LCD_Write@mode& (0+255),w,b
 18520  0161D2  EC68  F0B2         	call	_Mode_Set
 18521                           
 18522                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18523  0161D6  0E81               	movlw	low _SPI2
 18524  0161D8  0100               	movlb	0	; () banked
 18525  0161DA  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 18526  0161DC  0E03               	movlw	high _SPI2
 18527  0161DE  0100               	movlb	0	; () banked
 18528  0161E0  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18529  0161E2  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 18530  0161E6  ECE8  F0A9         	call	_SPI_Send	;wreg free
 18531  0161EA  0012               	return		;funcret
 18532  0161EC                     __end_of_LCD_Write:
 18533                           	opt stack 0
 18534                           tosu	equ	0xFFF
 18535                           tosh	equ	0xFFE
 18536                           tosl	equ	0xFFD
 18537                           pclath	equ	0xFFA
 18538                           tblptru	equ	0xFF8
 18539                           tblptrh	equ	0xFF7
 18540                           tblptrl	equ	0xFF6
 18541                           tablat	equ	0xFF5
 18542                           prodh	equ	0xFF4
 18543                           prodl	equ	0xFF3
 18544                           intcon	equ	0xFF2
 18545                           postinc0	equ	0xFEE
 18546                           wreg	equ	0xFE8
 18547                           indf1	equ	0xFE7
 18548                           postdec1	equ	0xFE5
 18549                           fsr1h	equ	0xFE2
 18550                           fsr1l	equ	0xFE1
 18551                           indf2	equ	0xFDF
 18552                           postinc2	equ	0xFDE
 18553                           postdec2	equ	0xFDD
 18554                           plusw2	equ	0xFDB
 18555                           fsr2h	equ	0xFDA
 18556                           fsr2l	equ	0xFD9
 18557                           status	equ	0xFD8
 18558                           
 18559 ;; *************** function _SPI_Send *****************
 18560 ;; Defined at:
 18561 ;;		line 226 in file "Library/SPI.c"
 18562 ;; Parameters:    Size  Location     Type
 18563 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18564 ;;		 -> SPI1(11), SPI2(11), 
 18565 ;;  pData           1    2[BANK0 ] unsigned char 
 18566 ;; Auto vars:     Size  Location     Type
 18567 ;;		None
 18568 ;; Return value:  Size  Location     Type
 18569 ;;                  1    wreg      unsigned char 
 18570 ;; Registers used:
 18571 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18572 ;; Tracked objects:
 18573 ;;		On entry : 0/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18577 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18580 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18581 ;;Total ram usage:        3 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    7
 18584 ;; This function calls:
 18585 ;;		Nothing
 18586 ;; This function is called by:
 18587 ;;		_LCD_Write
 18588 ;;		_OutSeg
 18589 ;; This function uses a non-reentrant model
 18590 ;;
 18591                           
 18592                           	psect	text86
 18593  0153D0                     __ptext86:
 18594                           	opt stack 0
 18595  0153D0                     _SPI_Send:
 18596                           	opt stack 19
 18597                           
 18598                           ;SPI.c: 253: switch (pInput->mChannel)
 18599                           
 18600                           ;incstack = 0
 18601  0153D0  D026               	goto	l678
 18602  0153D2                     
 18603                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18604  0153D2  C0AB  FFD9         	movff	_PortC+4,fsr2l
 18605  0153D6  C0AC  FFDA         	movff	_PortC+5,fsr2h
 18606  0153DA  0100               	movlb	0	; () banked
 18607  0153DC  94DF               	bcf	indf2,2,c
 18608                           
 18609                           ; BSR set to: 0
 18610                           ;SPI.c: 257: SSP1BUF = pData;
 18611  0153DE  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18612  0153E2                     
 18613                           ; BSR set to: 0
 18614  0153E2  A0C7               	btfss	4039,0,c	;volatile
 18615  0153E4  D7FE               	goto	l681
 18616                           
 18617                           ;SPI.c: 259: pData = SSP1BUF;
 18618  0153E6  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 18619                           
 18620                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18621  0153EA  C0AB  FFD9         	movff	_PortC+4,fsr2l
 18622  0153EE  C0AC  FFDA         	movff	_PortC+5,fsr2h
 18623  0153F2  0100               	movlb	0	; () banked
 18624  0153F4  84DF               	bsf	indf2,2,c
 18625                           
 18626                           ; BSR set to: 0
 18627                           ;SPI.c: 261: return pData;
 18628                           ;	Return value of _SPI_Send is never used
 18629  0153F6  0012               	return	
 18630  0153F8                     
 18631                           ; BSR set to: 0
 18632                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18633                           
 18634                           ; BSR set to: 0
 18635  0153F8  C0A1  FFD9         	movff	_PortD+4,fsr2l
 18636  0153FC  C0A2  FFDA         	movff	_PortD+5,fsr2h
 18637  015400  0100               	movlb	0	; () banked
 18638  015402  9EDF               	bcf	indf2,7,c
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;SPI.c: 264: SSP2BUF = pData;
 18642  015404  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18643  015408                     
 18644                           ; BSR set to: 0
 18645  015408  A06D               	btfss	3949,0,c	;volatile
 18646  01540A  D7FE               	goto	l686
 18647                           
 18648                           ;SPI.c: 266: pData = SSP2BUF;
 18649  01540C  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 18650                           
 18651                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18652  015410  C0A1  FFD9         	movff	_PortD+4,fsr2l
 18653  015414  C0A2  FFDA         	movff	_PortD+5,fsr2h
 18654  015418  0100               	movlb	0	; () banked
 18655  01541A  8EDF               	bsf	indf2,7,c
 18656                           
 18657                           ; BSR set to: 0
 18658                           ;SPI.c: 269: };
 18659                           
 18660                           ; BSR set to: 0
 18661                           ;SPI.c: 268: return pData;
 18662                           ;	Return value of _SPI_Send is never used
 18663  01541C  0012               	return	
 18664  01541E                     l678:
 18665                           
 18666                           ; BSR set to: 0
 18667  01541E  0100               	movlb	0	; () banked
 18668  015420  EE20 F002          	lfsr	2,2
 18669  015424  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 18670  015426  26D9               	addwf	fsr2l,f,c
 18671  015428  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18672  01542A  22DA               	addwfc	fsr2h,f,c
 18673  01542C  50DF               	movf	indf2,w,c
 18674                           
 18675                           ; Switch size 1, requested type "space"
 18676                           ; Number of cases is 2, Range of values is 0 to 1
 18677                           ; switch strategies available:
 18678                           ; Name         Instructions Cycles
 18679                           ; simple_byte            7     4 (average)
 18680                           ;	Chosen strategy is simple_byte
 18681  01542E  0A00               	xorlw	0	; case 0
 18682  015430  B4D8               	btfsc	status,2,c
 18683  015432  D7CF               	goto	l679
 18684  015434  0A01               	xorlw	1	; case 1
 18685  015436  A4D8               	btfss	status,2,c
 18686  015438  0012               	return	
 18687  01543A  D7DE               	goto	l684
 18688  01543C                     __end_of_SPI_Send:
 18689                           	opt stack 0
 18690                           tosu	equ	0xFFF
 18691                           tosh	equ	0xFFE
 18692                           tosl	equ	0xFFD
 18693                           pclath	equ	0xFFA
 18694                           tblptru	equ	0xFF8
 18695                           tblptrh	equ	0xFF7
 18696                           tblptrl	equ	0xFF6
 18697                           tablat	equ	0xFF5
 18698                           prodh	equ	0xFF4
 18699                           prodl	equ	0xFF3
 18700                           intcon	equ	0xFF2
 18701                           postinc0	equ	0xFEE
 18702                           wreg	equ	0xFE8
 18703                           indf1	equ	0xFE7
 18704                           postdec1	equ	0xFE5
 18705                           fsr1h	equ	0xFE2
 18706                           fsr1l	equ	0xFE1
 18707                           indf2	equ	0xFDF
 18708                           postinc2	equ	0xFDE
 18709                           postdec2	equ	0xFDD
 18710                           plusw2	equ	0xFDB
 18711                           fsr2h	equ	0xFDA
 18712                           fsr2l	equ	0xFD9
 18713                           status	equ	0xFD8
 18714                           
 18715 ;; *************** function _Mode_Set *****************
 18716 ;; Defined at:
 18717 ;;		line 40 in file "Library/LCD.c"
 18718 ;; Parameters:    Size  Location     Type
 18719 ;;  pMode           1    wreg     enum E6761
 18720 ;; Auto vars:     Size  Location     Type
 18721 ;;  pMode           1    0[BANK0 ] enum E6761
 18722 ;; Return value:  Size  Location     Type
 18723 ;;                  1    wreg      void 
 18724 ;; Registers used:
 18725 ;;		wreg
 18726 ;; Tracked objects:
 18727 ;;		On entry : 0/0
 18728 ;;		On exit  : 0/0
 18729 ;;		Unchanged: 0/0
 18730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18735 ;;Total ram usage:        1 bytes
 18736 ;; Hardware stack levels used:    1
 18737 ;; Hardware stack levels required when called:    7
 18738 ;; This function calls:
 18739 ;;		Nothing
 18740 ;; This function is called by:
 18741 ;;		_LCD_Write
 18742 ;; This function uses a non-reentrant model
 18743 ;;
 18744                           
 18745                           	psect	text87
 18746  0164D0                     __ptext87:
 18747                           	opt stack 0
 18748  0164D0                     _Mode_Set:
 18749                           	opt stack 17
 18750                           
 18751                           ; BSR set to: 0
 18752                           ;incstack = 0
 18753                           ;Mode_Set@pMode stored from wreg
 18754  0164D0  0100               	movlb	0	; () banked
 18755  0164D2  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 18756                           
 18757                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18758  0164D4  0100               	movlb	0	; () banked
 18759  0164D6  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 18760  0164D8  D002               	bra	u8825
 18761  0164DA  9E85               	bcf	3973,7,c	;volatile
 18762  0164DC  D001               	bra	u8826
 18763  0164DE                     u8825:
 18764  0164DE  8E85               	bsf	3973,7,c	;volatile
 18765  0164E0                     u8826:
 18766  0164E0  0012               	return		;funcret
 18767  0164E2                     __end_of_Mode_Set:
 18768                           	opt stack 0
 18769                           tosu	equ	0xFFF
 18770                           tosh	equ	0xFFE
 18771                           tosl	equ	0xFFD
 18772                           pclath	equ	0xFFA
 18773                           tblptru	equ	0xFF8
 18774                           tblptrh	equ	0xFF7
 18775                           tblptrl	equ	0xFF6
 18776                           tablat	equ	0xFF5
 18777                           prodh	equ	0xFF4
 18778                           prodl	equ	0xFF3
 18779                           intcon	equ	0xFF2
 18780                           postinc0	equ	0xFEE
 18781                           wreg	equ	0xFE8
 18782                           indf1	equ	0xFE7
 18783                           postdec1	equ	0xFE5
 18784                           fsr1h	equ	0xFE2
 18785                           fsr1l	equ	0xFE1
 18786                           indf2	equ	0xFDF
 18787                           postinc2	equ	0xFDE
 18788                           postdec2	equ	0xFDD
 18789                           plusw2	equ	0xFDB
 18790                           fsr2h	equ	0xFDA
 18791                           fsr2l	equ	0xFD9
 18792                           status	equ	0xFD8
 18793                           
 18794 ;; *************** function _Configure_GPIOs *****************
 18795 ;; Defined at:
 18796 ;;		line 46 in file "Library/LCD.c"
 18797 ;; Parameters:    Size  Location     Type
 18798 ;;		None
 18799 ;; Auto vars:     Size  Location     Type
 18800 ;;		None
 18801 ;; Return value:  Size  Location     Type
 18802 ;;                  1    wreg      void 
 18803 ;; Registers used:
 18804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18805 ;; Tracked objects:
 18806 ;;		On entry : 0/0
 18807 ;;		On exit  : 0/0
 18808 ;;		Unchanged: 0/0
 18809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18814 ;;Total ram usage:        0 bytes
 18815 ;; Hardware stack levels used:    1
 18816 ;; Hardware stack levels required when called:   14
 18817 ;; This function calls:
 18818 ;;		_LCD_Reset
 18819 ;;		_Port_SetPinType
 18820 ;;		_SPI_Init
 18821 ;;		_SPI_MaxSpeed
 18822 ;; This function is called by:
 18823 ;;		_LCD_Init
 18824 ;; This function uses a non-reentrant model
 18825 ;;
 18826                           
 18827                           	psect	text88
 18828  015360                     __ptext88:
 18829                           	opt stack 0
 18830  015360                     _Configure_GPIOs:
 18831                           	opt stack 14
 18832                           
 18833                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 18834                           
 18835                           ;incstack = 0
 18836  015360  0EBE               	movlw	low _PortF
 18837  015362  0100               	movlb	0	; () banked
 18838  015364  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 18839  015366  0E03               	movlw	high _PortF
 18840  015368  0100               	movlb	0	; () banked
 18841  01536A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18842  01536C  0E07               	movlw	7
 18843  01536E  0100               	movlb	0	; () banked
 18844  015370  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 18845  015372  0E03               	movlw	3
 18846  015374  0100               	movlb	0	; () banked
 18847  015376  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 18848  015378  ECB4  F092         	call	_Port_SetPinType	;wreg free
 18849                           
 18850                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 18851  01537C  0EBE               	movlw	low _PortF
 18852  01537E  0100               	movlb	0	; () banked
 18853  015380  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 18854  015382  0E03               	movlw	high _PortF
 18855  015384  0100               	movlb	0	; () banked
 18856  015386  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18857  015388  0E06               	movlw	6
 18858  01538A  0100               	movlb	0	; () banked
 18859  01538C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 18860  01538E  0E03               	movlw	3
 18861  015390  0100               	movlb	0	; () banked
 18862  015392  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 18863  015394  ECB4  F092         	call	_Port_SetPinType	;wreg free
 18864                           
 18865                           ;LCD.c: 55: LCD_Reset();
 18866  015398  ECF1  F0AC         	call	_LCD_Reset	;wreg free
 18867                           
 18868                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 18869  01539C  0EC0               	movlw	192
 18870  01539E  0100               	movlb	0	; () banked
 18871  0153A0  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 18872  0153A2  0EC6               	movlw	198
 18873  0153A4  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18874  0153A6  0E2D               	movlw	45
 18875  0153A8  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18876  0153AA  0E00               	movlw	0
 18877  0153AC  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18878  0153AE  0E01               	movlw	1
 18879  0153B0  0100               	movlb	0	; () banked
 18880  0153B2  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 18881  0153B4  0E01               	movlw	1
 18882  0153B6  0100               	movlb	0	; () banked
 18883  0153B8  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 18884  0153BA  EC53  F082         	call	_SPI_Init	;wreg free
 18885                           
 18886                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 18887  0153BE  0E81               	movlw	low _SPI2
 18888  0153C0  0100               	movlb	0	; () banked
 18889  0153C2  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 18890  0153C4  0E03               	movlw	high _SPI2
 18891  0153C6  0100               	movlb	0	; () banked
 18892  0153C8  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 18893  0153CA  EC02  F0A9         	call	_SPI_MaxSpeed	;wreg free
 18894  0153CE  0012               	return		;funcret
 18895  0153D0                     __end_of_Configure_GPIOs:
 18896                           	opt stack 0
 18897                           tosu	equ	0xFFF
 18898                           tosh	equ	0xFFE
 18899                           tosl	equ	0xFFD
 18900                           pclath	equ	0xFFA
 18901                           tblptru	equ	0xFF8
 18902                           tblptrh	equ	0xFF7
 18903                           tblptrl	equ	0xFF6
 18904                           tablat	equ	0xFF5
 18905                           prodh	equ	0xFF4
 18906                           prodl	equ	0xFF3
 18907                           intcon	equ	0xFF2
 18908                           postinc0	equ	0xFEE
 18909                           wreg	equ	0xFE8
 18910                           indf1	equ	0xFE7
 18911                           postdec1	equ	0xFE5
 18912                           fsr1h	equ	0xFE2
 18913                           fsr1l	equ	0xFE1
 18914                           indf2	equ	0xFDF
 18915                           postinc2	equ	0xFDE
 18916                           postdec2	equ	0xFDD
 18917                           plusw2	equ	0xFDB
 18918                           fsr2h	equ	0xFDA
 18919                           fsr2l	equ	0xFD9
 18920                           status	equ	0xFD8
 18921                           
 18922 ;; *************** function _SPI_MaxSpeed *****************
 18923 ;; Defined at:
 18924 ;;		line 201 in file "Library/SPI.c"
 18925 ;; Parameters:    Size  Location     Type
 18926 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18927 ;;		 -> SPI2(11), 
 18928 ;; Auto vars:     Size  Location     Type
 18929 ;;		None
 18930 ;; Return value:  Size  Location     Type
 18931 ;;                  1    wreg      void 
 18932 ;; Registers used:
 18933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18934 ;; Tracked objects:
 18935 ;;		On entry : 0/0
 18936 ;;		On exit  : 0/0
 18937 ;;		Unchanged: 0/0
 18938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18939 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;Total ram usage:        2 bytes
 18944 ;; Hardware stack levels used:    1
 18945 ;; Hardware stack levels required when called:    9
 18946 ;; This function calls:
 18947 ;;		_Byte_SetBit
 18948 ;;		_Byte_SetQuad
 18949 ;; This function is called by:
 18950 ;;		_Configure_GPIOs
 18951 ;; This function uses a non-reentrant model
 18952 ;;
 18953                           
 18954                           	psect	text89
 18955  015204                     __ptext89:
 18956                           	opt stack 0
 18957  015204                     _SPI_MaxSpeed:
 18958                           	opt stack 18
 18959                           
 18960                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18961                           
 18962                           ;incstack = 0
 18963  015204  0100               	movlb	0	; () banked
 18964  015206  EE20 F006          	lfsr	2,6
 18965  01520A  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18966  01520C  26D9               	addwf	fsr2l,f,c
 18967  01520E  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18968  015210  22DA               	addwfc	fsr2h,f,c
 18969  015212  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 18970  015216  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 18971  01521A  0E05               	movlw	5
 18972  01521C  0100               	movlb	0	; () banked
 18973  01521E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 18974  015220  0E00               	movlw	0
 18975  015222  0100               	movlb	0	; () banked
 18976  015224  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 18977  015226  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 18978                           
 18979                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 18980  01522A  0100               	movlb	0	; () banked
 18981  01522C  EE20 F006          	lfsr	2,6
 18982  015230  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18983  015232  26D9               	addwf	fsr2l,f,c
 18984  015234  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18985  015236  22DA               	addwfc	fsr2h,f,c
 18986  015238  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18987  01523C  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18988  015240  0E00               	movlw	0
 18989  015242  0100               	movlb	0	; () banked
 18990  015244  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18991  015246  0E00               	movlw	0
 18992  015248  0100               	movlb	0	; () banked
 18993  01524A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18994  01524C  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 18995                           
 18996                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18997  015250  0100               	movlb	0	; () banked
 18998  015252  EE20 F006          	lfsr	2,6
 18999  015256  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19000  015258  26D9               	addwf	fsr2l,f,c
 19001  01525A  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19002  01525C  22DA               	addwfc	fsr2h,f,c
 19003  01525E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19004  015262  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19005  015266  0E05               	movlw	5
 19006  015268  0100               	movlb	0	; () banked
 19007  01526A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19008  01526C  0E01               	movlw	1
 19009  01526E  0100               	movlb	0	; () banked
 19010  015270  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19011  015272  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 19012  015276  0012               	return		;funcret
 19013  015278                     __end_of_SPI_MaxSpeed:
 19014                           	opt stack 0
 19015                           tosu	equ	0xFFF
 19016                           tosh	equ	0xFFE
 19017                           tosl	equ	0xFFD
 19018                           pclath	equ	0xFFA
 19019                           tblptru	equ	0xFF8
 19020                           tblptrh	equ	0xFF7
 19021                           tblptrl	equ	0xFF6
 19022                           tablat	equ	0xFF5
 19023                           prodh	equ	0xFF4
 19024                           prodl	equ	0xFF3
 19025                           intcon	equ	0xFF2
 19026                           postinc0	equ	0xFEE
 19027                           wreg	equ	0xFE8
 19028                           indf1	equ	0xFE7
 19029                           postdec1	equ	0xFE5
 19030                           fsr1h	equ	0xFE2
 19031                           fsr1l	equ	0xFE1
 19032                           indf2	equ	0xFDF
 19033                           postinc2	equ	0xFDE
 19034                           postdec2	equ	0xFDD
 19035                           plusw2	equ	0xFDB
 19036                           fsr2h	equ	0xFDA
 19037                           fsr2l	equ	0xFD9
 19038                           status	equ	0xFD8
 19039                           
 19040 ;; *************** function _LCD_Reset *****************
 19041 ;; Defined at:
 19042 ;;		line 95 in file "Library/LCD.c"
 19043 ;; Parameters:    Size  Location     Type
 19044 ;;		None
 19045 ;; Auto vars:     Size  Location     Type
 19046 ;;		None
 19047 ;; Return value:  Size  Location     Type
 19048 ;;                  1    wreg      void 
 19049 ;; Registers used:
 19050 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19051 ;; Tracked objects:
 19052 ;;		On entry : 0/0
 19053 ;;		On exit  : 0/0
 19054 ;;		Unchanged: 0/0
 19055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19060 ;;Total ram usage:        0 bytes
 19061 ;; Hardware stack levels used:    1
 19062 ;; Hardware stack levels required when called:   13
 19063 ;; This function calls:
 19064 ;;		_LED_Toggle
 19065 ;;		_Reset_High
 19066 ;;		_Reset_Low
 19067 ;;		_delay_ms
 19068 ;; This function is called by:
 19069 ;;		_Configure_GPIOs
 19070 ;; This function uses a non-reentrant model
 19071 ;;
 19072                           
 19073                           	psect	text90
 19074  0159E2                     __ptext90:
 19075                           	opt stack 0
 19076  0159E2                     _LCD_Reset:
 19077                           	opt stack 14
 19078                           
 19079                           ;LCD.c: 97: Reset_High();
 19080                           
 19081                           ;incstack = 0
 19082  0159E2  EC64  F0B1         	call	_Reset_High	;wreg free
 19083                           
 19084                           ;LCD.c: 98: LED_Toggle(eLED2);
 19085  0159E6  0E01               	movlw	1
 19086  0159E8  ECD1  F0AD         	call	_LED_Toggle
 19087                           
 19088                           ;LCD.c: 99: delay_ms(0x80);
 19089  0159EC  0E00               	movlw	0
 19090  0159EE  0100               	movlb	0	; () banked
 19091  0159F0  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19092  0159F2  0E80               	movlw	128
 19093  0159F4  6FBA               	movwf	delay_ms@ms& (0+255),b
 19094  0159F6  EC89  F0AA         	call	_delay_ms	;wreg free
 19095                           
 19096                           ;LCD.c: 100: LED_Toggle(eLED2);
 19097  0159FA  0E01               	movlw	1
 19098  0159FC  ECD1  F0AD         	call	_LED_Toggle
 19099                           
 19100                           ;LCD.c: 101: Reset_Low();
 19101  015A00  EC55  F0B1         	call	_Reset_Low	;wreg free
 19102                           
 19103                           ;LCD.c: 102: delay_ms(0x80);
 19104  015A04  0E00               	movlw	0
 19105  015A06  0100               	movlb	0	; () banked
 19106  015A08  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19107  015A0A  0E80               	movlw	128
 19108  015A0C  6FBA               	movwf	delay_ms@ms& (0+255),b
 19109  015A0E  EC89  F0AA         	call	_delay_ms	;wreg free
 19110                           
 19111                           ;LCD.c: 103: LED_Toggle(eLED2);
 19112  015A12  0E01               	movlw	1
 19113  015A14  ECD1  F0AD         	call	_LED_Toggle
 19114                           
 19115                           ;LCD.c: 104: Reset_High();
 19116  015A18  EC64  F0B1         	call	_Reset_High	;wreg free
 19117                           
 19118                           ;LCD.c: 105: delay_ms(0x80);
 19119  015A1C  0E00               	movlw	0
 19120  015A1E  0100               	movlb	0	; () banked
 19121  015A20  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19122  015A22  0E80               	movlw	128
 19123  015A24  6FBA               	movwf	delay_ms@ms& (0+255),b
 19124  015A26  EC89  F0AA         	call	_delay_ms	;wreg free
 19125                           
 19126                           ;LCD.c: 106: LED_Toggle(eLED2);
 19127  015A2A  0E01               	movlw	1
 19128  015A2C  ECD1  F0AD         	call	_LED_Toggle
 19129  015A30  0012               	return		;funcret
 19130  015A32                     __end_of_LCD_Reset:
 19131                           	opt stack 0
 19132                           tosu	equ	0xFFF
 19133                           tosh	equ	0xFFE
 19134                           tosl	equ	0xFFD
 19135                           pclath	equ	0xFFA
 19136                           tblptru	equ	0xFF8
 19137                           tblptrh	equ	0xFF7
 19138                           tblptrl	equ	0xFF6
 19139                           tablat	equ	0xFF5
 19140                           prodh	equ	0xFF4
 19141                           prodl	equ	0xFF3
 19142                           intcon	equ	0xFF2
 19143                           postinc0	equ	0xFEE
 19144                           wreg	equ	0xFE8
 19145                           indf1	equ	0xFE7
 19146                           postdec1	equ	0xFE5
 19147                           fsr1h	equ	0xFE2
 19148                           fsr1l	equ	0xFE1
 19149                           indf2	equ	0xFDF
 19150                           postinc2	equ	0xFDE
 19151                           postdec2	equ	0xFDD
 19152                           plusw2	equ	0xFDB
 19153                           fsr2h	equ	0xFDA
 19154                           fsr2l	equ	0xFD9
 19155                           status	equ	0xFD8
 19156                           
 19157 ;; *************** function _delay_ms *****************
 19158 ;; Defined at:
 19159 ;;		line 240 in file "Library/Types.c"
 19160 ;; Parameters:    Size  Location     Type
 19161 ;;  ms              2    0[BANK0 ] unsigned short 
 19162 ;; Auto vars:     Size  Location     Type
 19163 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19164 ;; Return value:  Size  Location     Type
 19165 ;;                  1    wreg      void 
 19166 ;; Registers used:
 19167 ;;		wreg, status,2, status,0
 19168 ;; Tracked objects:
 19169 ;;		On entry : 0/0
 19170 ;;		On exit  : 0/0
 19171 ;;		Unchanged: 0/0
 19172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19173 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19174 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19176 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19177 ;;Total ram usage:        6 bytes
 19178 ;; Hardware stack levels used:    1
 19179 ;; Hardware stack levels required when called:    7
 19180 ;; This function calls:
 19181 ;;		Nothing
 19182 ;; This function is called by:
 19183 ;;		_LCD_Reset
 19184 ;;		_LCD_Init
 19185 ;;		_MXK_Init
 19186 ;;		_init
 19187 ;;		_move_and_rotate
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           	psect	text91
 19192  015512                     __ptext91:
 19193                           	opt stack 0
 19194  015512                     _delay_ms:
 19195                           	opt stack 21
 19196                           
 19197                           ;Types.c: 242: volatile unsigned long u;
 19198                           ;Types.c: 243: while (ms--)
 19199                           
 19200                           ;incstack = 0
 19201  015512  D01F               	goto	u9300
 19202  015514                     l12704:
 19203                           
 19204                           ;Types.c: 244: {
 19205                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19206  015514  0E00               	movlw	0
 19207  015516  0100               	movlb	0	; () banked
 19208  015518  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19209  01551A  0E00               	movlw	0
 19210  01551C  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19211  01551E  0E00               	movlw	0
 19212  015520  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19213  015522  0E00               	movlw	0
 19214  015524  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19215  015526                     l12706:
 19216                           
 19217                           ; BSR set to: 0
 19218  015526  0100               	movlb	0	; () banked
 19219  015528  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19220  01552A  0100               	movlb	0	; () banked
 19221  01552C  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19222  01552E  E111               	bnz	l12712
 19223  015530  0EB0               	movlw	176
 19224  015532  0100               	movlb	0	; () banked
 19225  015534  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19226  015536  0E04               	movlw	4
 19227  015538  0100               	movlb	0	; () banked
 19228  01553A  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19229  01553C  B0D8               	btfsc	status,0,c
 19230  01553E  D009               	goto	u9300
 19231                           
 19232                           ; BSR set to: 0
 19233                           
 19234                           ; BSR set to: 0
 19235  015540  F000               	nop		; ;# 
 19236  015542  0E01               	movlw	1
 19237  015544  0100               	movlb	0	; () banked
 19238  015546  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19239  015548  0E00               	movlw	0
 19240  01554A  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19241  01554C  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19242  01554E  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19243  015550  D7EA               	goto	l12706
 19244  015552                     u9300:
 19245  015552                     l12712:
 19246  015552  0100               	movlb	0	; () banked
 19247  015554  07BA               	decf	delay_ms@ms& (0+255),f,b
 19248  015556  A0D8               	btfss	status,0,c
 19249  015558  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19250  01555A  0100               	movlb	0	; () banked
 19251  01555C  29BA               	incf	delay_ms@ms& (0+255),w,b
 19252  01555E  E1DA               	bnz	l12704
 19253  015560  0100               	movlb	0	; () banked
 19254  015562  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19255  015564  A4D8               	btfss	status,2,c
 19256  015566  D7D6               	goto	l824
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;Types.c: 251: }
 19260                           ;Types.c: 252: }
 19261                           ;Types.c: 253: u = 0x8008;
 19262                           
 19263                           ; BSR set to: 0
 19264  015568  0E08               	movlw	8
 19265  01556A  0100               	movlb	0	; () banked
 19266  01556C  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19267  01556E  0E80               	movlw	128
 19268  015570  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19269  015572  0E00               	movlw	0
 19270  015574  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19271  015576  0E00               	movlw	0
 19272  015578  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19273                           
 19274                           ; BSR set to: 0
 19275  01557A  0012               	return		;funcret
 19276  01557C                     __end_of_delay_ms:
 19277                           	opt stack 0
 19278                           tosu	equ	0xFFF
 19279                           tosh	equ	0xFFE
 19280                           tosl	equ	0xFFD
 19281                           pclath	equ	0xFFA
 19282                           tblptru	equ	0xFF8
 19283                           tblptrh	equ	0xFF7
 19284                           tblptrl	equ	0xFF6
 19285                           tablat	equ	0xFF5
 19286                           prodh	equ	0xFF4
 19287                           prodl	equ	0xFF3
 19288                           intcon	equ	0xFF2
 19289                           postinc0	equ	0xFEE
 19290                           wreg	equ	0xFE8
 19291                           indf1	equ	0xFE7
 19292                           postdec1	equ	0xFE5
 19293                           fsr1h	equ	0xFE2
 19294                           fsr1l	equ	0xFE1
 19295                           indf2	equ	0xFDF
 19296                           postinc2	equ	0xFDE
 19297                           postdec2	equ	0xFDD
 19298                           plusw2	equ	0xFDB
 19299                           fsr2h	equ	0xFDA
 19300                           fsr2l	equ	0xFD9
 19301                           status	equ	0xFD8
 19302                           
 19303 ;; *************** function _Reset_Low *****************
 19304 ;; Defined at:
 19305 ;;		line 32 in file "Library/LCD.c"
 19306 ;; Parameters:    Size  Location     Type
 19307 ;;		None
 19308 ;; Auto vars:     Size  Location     Type
 19309 ;;		None
 19310 ;; Return value:  Size  Location     Type
 19311 ;;                  1    wreg      void 
 19312 ;; Registers used:
 19313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19314 ;; Tracked objects:
 19315 ;;		On entry : 0/0
 19316 ;;		On exit  : 0/0
 19317 ;;		Unchanged: 0/0
 19318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19323 ;;Total ram usage:        0 bytes
 19324 ;; Hardware stack levels used:    1
 19325 ;; Hardware stack levels required when called:   11
 19326 ;; This function calls:
 19327 ;;		_Port_SetPin
 19328 ;; This function is called by:
 19329 ;;		_LCD_Reset
 19330 ;; This function uses a non-reentrant model
 19331 ;;
 19332                           
 19333                           	psect	text92
 19334  0162AA                     __ptext92:
 19335                           	opt stack 0
 19336  0162AA                     _Reset_Low:
 19337                           	opt stack 15
 19338                           
 19339                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;incstack = 0
 19343  0162AA  0EBE               	movlw	low _PortF
 19344  0162AC  0100               	movlb	0	; () banked
 19345  0162AE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19346  0162B0  0E03               	movlw	high _PortF
 19347  0162B2  0100               	movlb	0	; () banked
 19348  0162B4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19349  0162B6  0E06               	movlw	6
 19350  0162B8  0100               	movlb	0	; () banked
 19351  0162BA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19352  0162BC  0E01               	movlw	1
 19353  0162BE  0100               	movlb	0	; () banked
 19354  0162C0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19355  0162C2  EC84  F09E         	call	_Port_SetPin	;wreg free
 19356  0162C6  0012               	return		;funcret
 19357  0162C8                     __end_of_Reset_Low:
 19358                           	opt stack 0
 19359                           tosu	equ	0xFFF
 19360                           tosh	equ	0xFFE
 19361                           tosl	equ	0xFFD
 19362                           pclath	equ	0xFFA
 19363                           tblptru	equ	0xFF8
 19364                           tblptrh	equ	0xFF7
 19365                           tblptrl	equ	0xFF6
 19366                           tablat	equ	0xFF5
 19367                           prodh	equ	0xFF4
 19368                           prodl	equ	0xFF3
 19369                           intcon	equ	0xFF2
 19370                           postinc0	equ	0xFEE
 19371                           wreg	equ	0xFE8
 19372                           indf1	equ	0xFE7
 19373                           postdec1	equ	0xFE5
 19374                           fsr1h	equ	0xFE2
 19375                           fsr1l	equ	0xFE1
 19376                           indf2	equ	0xFDF
 19377                           postinc2	equ	0xFDE
 19378                           postdec2	equ	0xFDD
 19379                           plusw2	equ	0xFDB
 19380                           fsr2h	equ	0xFDA
 19381                           fsr2l	equ	0xFD9
 19382                           status	equ	0xFD8
 19383                           
 19384 ;; *************** function _Reset_High *****************
 19385 ;; Defined at:
 19386 ;;		line 36 in file "Library/LCD.c"
 19387 ;; Parameters:    Size  Location     Type
 19388 ;;		None
 19389 ;; Auto vars:     Size  Location     Type
 19390 ;;		None
 19391 ;; Return value:  Size  Location     Type
 19392 ;;                  1    wreg      void 
 19393 ;; Registers used:
 19394 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19395 ;; Tracked objects:
 19396 ;;		On entry : 0/0
 19397 ;;		On exit  : 0/0
 19398 ;;		Unchanged: 0/0
 19399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19404 ;;Total ram usage:        0 bytes
 19405 ;; Hardware stack levels used:    1
 19406 ;; Hardware stack levels required when called:   11
 19407 ;; This function calls:
 19408 ;;		_Port_SetPin
 19409 ;; This function is called by:
 19410 ;;		_LCD_Reset
 19411 ;; This function uses a non-reentrant model
 19412 ;;
 19413                           
 19414                           	psect	text93
 19415  0162C8                     __ptext93:
 19416                           	opt stack 0
 19417  0162C8                     _Reset_High:
 19418                           	opt stack 15
 19419                           
 19420                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19421                           
 19422                           ;incstack = 0
 19423  0162C8  0EBE               	movlw	low _PortF
 19424  0162CA  0100               	movlb	0	; () banked
 19425  0162CC  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19426  0162CE  0E03               	movlw	high _PortF
 19427  0162D0  0100               	movlb	0	; () banked
 19428  0162D2  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19429  0162D4  0E06               	movlw	6
 19430  0162D6  0100               	movlb	0	; () banked
 19431  0162D8  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19432  0162DA  0E00               	movlw	0
 19433  0162DC  0100               	movlb	0	; () banked
 19434  0162DE  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19435  0162E0  EC84  F09E         	call	_Port_SetPin	;wreg free
 19436  0162E4  0012               	return		;funcret
 19437  0162E6                     __end_of_Reset_High:
 19438                           	opt stack 0
 19439                           tosu	equ	0xFFF
 19440                           tosh	equ	0xFFE
 19441                           tosl	equ	0xFFD
 19442                           pclath	equ	0xFFA
 19443                           tblptru	equ	0xFF8
 19444                           tblptrh	equ	0xFF7
 19445                           tblptrl	equ	0xFF6
 19446                           tablat	equ	0xFF5
 19447                           prodh	equ	0xFF4
 19448                           prodl	equ	0xFF3
 19449                           intcon	equ	0xFF2
 19450                           postinc0	equ	0xFEE
 19451                           wreg	equ	0xFE8
 19452                           indf1	equ	0xFE7
 19453                           postdec1	equ	0xFE5
 19454                           fsr1h	equ	0xFE2
 19455                           fsr1l	equ	0xFE1
 19456                           indf2	equ	0xFDF
 19457                           postinc2	equ	0xFDE
 19458                           postdec2	equ	0xFDD
 19459                           plusw2	equ	0xFDB
 19460                           fsr2h	equ	0xFDA
 19461                           fsr2l	equ	0xFD9
 19462                           status	equ	0xFD8
 19463                           
 19464 ;; *************** function _ISR_Enable *****************
 19465 ;; Defined at:
 19466 ;;		line 27 in file "Library/ISR.c"
 19467 ;; Parameters:    Size  Location     Type
 19468 ;;		None
 19469 ;; Auto vars:     Size  Location     Type
 19470 ;;		None
 19471 ;; Return value:  Size  Location     Type
 19472 ;;                  1    wreg      void 
 19473 ;; Registers used:
 19474 ;;		None
 19475 ;; Tracked objects:
 19476 ;;		On entry : 0/0
 19477 ;;		On exit  : 0/0
 19478 ;;		Unchanged: 0/0
 19479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;Total ram usage:        0 bytes
 19485 ;; Hardware stack levels used:    1
 19486 ;; Hardware stack levels required when called:    7
 19487 ;; This function calls:
 19488 ;;		Nothing
 19489 ;; This function is called by:
 19490 ;;		_init
 19491 ;; This function uses a non-reentrant model
 19492 ;;
 19493                           
 19494                           	psect	text94
 19495  016570                     __ptext94:
 19496                           	opt stack 0
 19497  016570                     _ISR_Enable:
 19498                           	opt stack 22
 19499                           
 19500                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19501                           
 19502                           ;incstack = 0
 19503  016570  8CF2               	bsf	intcon,6,c	;volatile
 19504                           
 19505                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19506  016572  8EF2               	bsf	intcon,7,c	;volatile
 19507                           
 19508                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19509  016574  88F2               	bsf	intcon,4,c	;volatile
 19510                           
 19511                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19512  016576  92F2               	bcf	intcon,1,c	;volatile
 19513  016578  0012               	return		;funcret
 19514  01657A                     __end_of_ISR_Enable:
 19515                           	opt stack 0
 19516                           tosu	equ	0xFFF
 19517                           tosh	equ	0xFFE
 19518                           tosl	equ	0xFFD
 19519                           pclath	equ	0xFFA
 19520                           tblptru	equ	0xFF8
 19521                           tblptrh	equ	0xFF7
 19522                           tblptrl	equ	0xFF6
 19523                           tablat	equ	0xFF5
 19524                           prodh	equ	0xFF4
 19525                           prodl	equ	0xFF3
 19526                           intcon	equ	0xFF2
 19527                           postinc0	equ	0xFEE
 19528                           wreg	equ	0xFE8
 19529                           indf1	equ	0xFE7
 19530                           postdec1	equ	0xFE5
 19531                           fsr1h	equ	0xFE2
 19532                           fsr1l	equ	0xFE1
 19533                           indf2	equ	0xFDF
 19534                           postinc2	equ	0xFDE
 19535                           postdec2	equ	0xFDD
 19536                           plusw2	equ	0xFDB
 19537                           fsr2h	equ	0xFDA
 19538                           fsr2l	equ	0xFD9
 19539                           status	equ	0xFD8
 19540                           
 19541 ;; *************** function _HMI_Init *****************
 19542 ;; Defined at:
 19543 ;;		line 104 in file "HMI.c"
 19544 ;; Parameters:    Size  Location     Type
 19545 ;;		None
 19546 ;; Auto vars:     Size  Location     Type
 19547 ;;  in              2   59[BANK0 ] unsigned short 
 19548 ;; Return value:  Size  Location     Type
 19549 ;;                  1    wreg      void 
 19550 ;; Registers used:
 19551 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19552 ;; Tracked objects:
 19553 ;;		On entry : 0/0
 19554 ;;		On exit  : 0/0
 19555 ;;		Unchanged: 0/0
 19556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19558 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19561 ;;Total ram usage:        2 bytes
 19562 ;; Hardware stack levels used:    1
 19563 ;; Hardware stack levels required when called:   16
 19564 ;; This function calls:
 19565 ;;		_Button_Init
 19566 ;;		_SPI_Init
 19567 ;;		_SPI_MinSpeed
 19568 ;; This function is called by:
 19569 ;;		_init
 19570 ;; This function uses a non-reentrant model
 19571 ;;
 19572                           
 19573                           	psect	text95
 19574  011FDE                     __ptext95:
 19575                           	opt stack 0
 19576  011FDE                     _HMI_Init:
 19577                           	opt stack 13
 19578                           
 19579                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19580                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19581                           
 19582                           ;incstack = 0
 19583  011FDE  0E6C               	movlw	low (_HMIBoard+48)
 19584  011FE0  0101               	movlb	1	; () banked
 19585  011FE2  6F00               	movwf	Button_Init@pInput& (0+255),b
 19586  011FE4  0E03               	movlw	high (_HMIBoard+48)
 19587  011FE6  0101               	movlb	1	; () banked
 19588  011FE8  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19589  011FEA  0E00               	movlw	0
 19590  011FEC  0101               	movlb	1	; () banked
 19591  011FEE  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19592  011FF0  0E02               	movlw	2
 19593  011FF2  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19594  011FF4  0EAA               	movlw	low _HMI_InitButtons
 19595  011FF6  0101               	movlb	1	; () banked
 19596  011FF8  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19597  011FFA  0E65               	movlw	high _HMI_InitButtons
 19598  011FFC  0101               	movlb	1	; () banked
 19599  011FFE  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19600  012000  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19601  012002  0101               	movlb	1	; () banked
 19602  012004  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19603  012006  0EDE               	movlw	low _HMI_DIPSwitch
 19604  012008  0101               	movlb	1	; () banked
 19605  01200A  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19606  01200C  0E63               	movlw	high _HMI_DIPSwitch
 19607  01200E  0101               	movlb	1	; () banked
 19608  012010  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19609  012012  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19610  012014  0101               	movlb	1	; () banked
 19611  012016  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19612  012018  0E04               	movlw	low _Event_NULL
 19613  01201A  0101               	movlb	1	; () banked
 19614  01201C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19615  01201E  0E14               	movlw	high _Event_NULL
 19616  012020  0101               	movlb	1	; () banked
 19617  012022  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19618  012024  0E00               	movlw	low (_Event_NULL shr (0+16))
 19619  012026  0101               	movlb	1	; () banked
 19620  012028  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19621  01202A  ECB2  F09D         	call	_Button_Init	;wreg free
 19622                           
 19623                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19624                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19625  01202E  0E4E               	movlw	low (_HMIBoard+18)
 19626  012030  0101               	movlb	1	; () banked
 19627  012032  6F00               	movwf	Button_Init@pInput& (0+255),b
 19628  012034  0E03               	movlw	high (_HMIBoard+18)
 19629  012036  0101               	movlb	1	; () banked
 19630  012038  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19631  01203A  0E00               	movlw	0
 19632  01203C  0101               	movlb	1	; () banked
 19633  01203E  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19634  012040  0E02               	movlw	2
 19635  012042  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19636  012044  0EAA               	movlw	low _HMI_InitButtons
 19637  012046  0101               	movlb	1	; () banked
 19638  012048  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19639  01204A  0E65               	movlw	high _HMI_InitButtons
 19640  01204C  0101               	movlb	1	; () banked
 19641  01204E  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19642  012050  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19643  012052  0101               	movlb	1	; () banked
 19644  012054  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19645  012056  0E3E               	movlw	low _HMI_LeftSwitch
 19646  012058  0101               	movlb	1	; () banked
 19647  01205A  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19648  01205C  0E64               	movlw	high _HMI_LeftSwitch
 19649  01205E  0101               	movlb	1	; () banked
 19650  012060  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19651  012062  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19652  012064  0101               	movlb	1	; () banked
 19653  012066  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19654  012068  0E04               	movlw	low _Event_NULL
 19655  01206A  0101               	movlb	1	; () banked
 19656  01206C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19657  01206E  0E14               	movlw	high _Event_NULL
 19658  012070  0101               	movlb	1	; () banked
 19659  012072  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19660  012074  0E00               	movlw	low (_Event_NULL shr (0+16))
 19661  012076  0101               	movlb	1	; () banked
 19662  012078  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19663  01207A  ECB2  F09D         	call	_Button_Init	;wreg free
 19664                           
 19665                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19666                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19667  01207E  0E44               	movlw	low (_HMIBoard+8)
 19668  012080  0101               	movlb	1	; () banked
 19669  012082  6F00               	movwf	Button_Init@pInput& (0+255),b
 19670  012084  0E03               	movlw	high (_HMIBoard+8)
 19671  012086  0101               	movlb	1	; () banked
 19672  012088  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19673  01208A  0E00               	movlw	0
 19674  01208C  0101               	movlb	1	; () banked
 19675  01208E  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19676  012090  0E02               	movlw	2
 19677  012092  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19678  012094  0EAA               	movlw	low _HMI_InitButtons
 19679  012096  0101               	movlb	1	; () banked
 19680  012098  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19681  01209A  0E65               	movlw	high _HMI_InitButtons
 19682  01209C  0101               	movlb	1	; () banked
 19683  01209E  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19684  0120A0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19685  0120A2  0101               	movlb	1	; () banked
 19686  0120A4  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19687  0120A6  0E26               	movlw	low _HMI_RightSwitch
 19688  0120A8  0101               	movlb	1	; () banked
 19689  0120AA  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19690  0120AC  0E64               	movlw	high _HMI_RightSwitch
 19691  0120AE  0101               	movlb	1	; () banked
 19692  0120B0  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19693  0120B2  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19694  0120B4  0101               	movlb	1	; () banked
 19695  0120B6  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19696  0120B8  0E04               	movlw	low _Event_NULL
 19697  0120BA  0101               	movlb	1	; () banked
 19698  0120BC  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19699  0120BE  0E14               	movlw	high _Event_NULL
 19700  0120C0  0101               	movlb	1	; () banked
 19701  0120C2  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19702  0120C4  0E00               	movlw	low (_Event_NULL shr (0+16))
 19703  0120C6  0101               	movlb	1	; () banked
 19704  0120C8  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19705  0120CA  ECB2  F09D         	call	_Button_Init	;wreg free
 19706                           
 19707                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19708                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19709  0120CE  0E58               	movlw	low (_HMIBoard+28)
 19710  0120D0  0101               	movlb	1	; () banked
 19711  0120D2  6F00               	movwf	Button_Init@pInput& (0+255),b
 19712  0120D4  0E03               	movlw	high (_HMIBoard+28)
 19713  0120D6  0101               	movlb	1	; () banked
 19714  0120D8  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19715  0120DA  0E00               	movlw	0
 19716  0120DC  0101               	movlb	1	; () banked
 19717  0120DE  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19718  0120E0  0E02               	movlw	2
 19719  0120E2  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19720  0120E4  0EAA               	movlw	low _HMI_InitButtons
 19721  0120E6  0101               	movlb	1	; () banked
 19722  0120E8  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19723  0120EA  0E65               	movlw	high _HMI_InitButtons
 19724  0120EC  0101               	movlb	1	; () banked
 19725  0120EE  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19726  0120F0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19727  0120F2  0101               	movlb	1	; () banked
 19728  0120F4  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19729  0120F6  0E0E               	movlw	low _HMI_UpSwitch
 19730  0120F8  0101               	movlb	1	; () banked
 19731  0120FA  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19732  0120FC  0E64               	movlw	high _HMI_UpSwitch
 19733  0120FE  0101               	movlb	1	; () banked
 19734  012100  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19735  012102  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 19736  012104  0101               	movlb	1	; () banked
 19737  012106  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19738  012108  0E04               	movlw	low _Event_NULL
 19739  01210A  0101               	movlb	1	; () banked
 19740  01210C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19741  01210E  0E14               	movlw	high _Event_NULL
 19742  012110  0101               	movlb	1	; () banked
 19743  012112  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19744  012114  0E00               	movlw	low (_Event_NULL shr (0+16))
 19745  012116  0101               	movlb	1	; () banked
 19746  012118  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19747  01211A  ECB2  F09D         	call	_Button_Init	;wreg free
 19748                           
 19749                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 19750                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 19751  01211E  0E62               	movlw	low (_HMIBoard+38)
 19752  012120  0101               	movlb	1	; () banked
 19753  012122  6F00               	movwf	Button_Init@pInput& (0+255),b
 19754  012124  0E03               	movlw	high (_HMIBoard+38)
 19755  012126  0101               	movlb	1	; () banked
 19756  012128  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19757  01212A  0E00               	movlw	0
 19758  01212C  0101               	movlb	1	; () banked
 19759  01212E  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19760  012130  0E02               	movlw	2
 19761  012132  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19762  012134  0EAA               	movlw	low _HMI_InitButtons
 19763  012136  0101               	movlb	1	; () banked
 19764  012138  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19765  01213A  0E65               	movlw	high _HMI_InitButtons
 19766  01213C  0101               	movlb	1	; () banked
 19767  01213E  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19768  012140  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19769  012142  0101               	movlb	1	; () banked
 19770  012144  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19771  012146  0EF6               	movlw	low _HMI_DownSwitch
 19772  012148  0101               	movlb	1	; () banked
 19773  01214A  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19774  01214C  0E63               	movlw	high _HMI_DownSwitch
 19775  01214E  0101               	movlb	1	; () banked
 19776  012150  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19777  012152  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 19778  012154  0101               	movlb	1	; () banked
 19779  012156  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19780  012158  0E04               	movlw	low _Event_NULL
 19781  01215A  0101               	movlb	1	; () banked
 19782  01215C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19783  01215E  0E14               	movlw	high _Event_NULL
 19784  012160  0101               	movlb	1	; () banked
 19785  012162  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19786  012164  0E00               	movlw	low (_Event_NULL shr (0+16))
 19787  012166  0101               	movlb	1	; () banked
 19788  012168  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19789  01216A  ECB2  F09D         	call	_Button_Init	;wreg free
 19790                           
 19791                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 19792  01216E  0EA0               	movlw	160
 19793  012170  0100               	movlb	0	; () banked
 19794  012172  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19795  012174  0E86               	movlw	134
 19796  012176  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19797  012178  0E01               	movlw	1
 19798  01217A  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19799  01217C  0E00               	movlw	0
 19800  01217E  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19801  012180  0E00               	movlw	0
 19802  012182  0100               	movlb	0	; () banked
 19803  012184  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19804  012186  0E02               	movlw	2
 19805  012188  0100               	movlb	0	; () banked
 19806  01218A  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19807  01218C  EC53  F082         	call	_SPI_Init	;wreg free
 19808                           
 19809                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 19810  012190  0E76               	movlw	low _SPI1
 19811  012192  0100               	movlb	0	; () banked
 19812  012194  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 19813  012196  0E03               	movlw	high _SPI1
 19814  012198  0100               	movlb	0	; () banked
 19815  01219A  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 19816  01219C  EC3C  F0A9         	call	_SPI_MinSpeed	;wreg free
 19817                           
 19818                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 19819  0121A0  0E00               	movlw	0
 19820  0121A2  0100               	movlb	0	; () banked
 19821  0121A4  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 19822  0121A6  0E00               	movlw	0
 19823  0121A8  6FF5               	movwf	HMI_Init@in& (0+255),b
 19824  0121AA                     l14360:
 19825                           
 19826                           ; BSR set to: 0
 19827  0121AA  0100               	movlb	0	; () banked
 19828  0121AC  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 19829  0121AE  E113               	bnz	l1153
 19830  0121B0  0E08               	movlw	8
 19831  0121B2  0100               	movlb	0	; () banked
 19832  0121B4  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 19833  0121B6  B0D8               	btfsc	status,0,c
 19834  0121B8  0012               	return	
 19835                           
 19836                           ; BSR set to: 0
 19837                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 19838                           
 19839                           ; BSR set to: 0
 19840                           
 19841                           ; BSR set to: 0
 19842  0121BA  0E3C               	movlw	low _HMIBoard
 19843  0121BC  0100               	movlb	0	; () banked
 19844  0121BE  25F5               	addwf	HMI_Init@in& (0+255),w,b
 19845  0121C0  6ED9               	movwf	fsr2l,c
 19846  0121C2  0E03               	movlw	high _HMIBoard
 19847  0121C4  0100               	movlb	0	; () banked
 19848  0121C6  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 19849  0121C8  6EDA               	movwf	fsr2h,c
 19850  0121CA  0E00               	movlw	0
 19851  0121CC  6EDF               	movwf	indf2,c
 19852                           
 19853                           ; BSR set to: 0
 19854  0121CE  0100               	movlb	0	; () banked
 19855  0121D0  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 19856  0121D2  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 19857  0121D4  D7EA               	goto	l14360
 19858  0121D6                     l1153:
 19859                           
 19860                           ; BSR set to: 0
 19861  0121D6  0012               	return		;funcret
 19862  0121D8                     __end_of_HMI_Init:
 19863                           	opt stack 0
 19864                           tosu	equ	0xFFF
 19865                           tosh	equ	0xFFE
 19866                           tosl	equ	0xFFD
 19867                           pclath	equ	0xFFA
 19868                           tblptru	equ	0xFF8
 19869                           tblptrh	equ	0xFF7
 19870                           tblptrl	equ	0xFF6
 19871                           tablat	equ	0xFF5
 19872                           prodh	equ	0xFF4
 19873                           prodl	equ	0xFF3
 19874                           intcon	equ	0xFF2
 19875                           postinc0	equ	0xFEE
 19876                           wreg	equ	0xFE8
 19877                           indf1	equ	0xFE7
 19878                           postdec1	equ	0xFE5
 19879                           fsr1h	equ	0xFE2
 19880                           fsr1l	equ	0xFE1
 19881                           indf2	equ	0xFDF
 19882                           postinc2	equ	0xFDE
 19883                           postdec2	equ	0xFDD
 19884                           plusw2	equ	0xFDB
 19885                           fsr2h	equ	0xFDA
 19886                           fsr2l	equ	0xFD9
 19887                           status	equ	0xFD8
 19888                           
 19889 ;; *************** function _SPI_MinSpeed *****************
 19890 ;; Defined at:
 19891 ;;		line 190 in file "Library/SPI.c"
 19892 ;; Parameters:    Size  Location     Type
 19893 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19894 ;;		 -> SPI1(11), 
 19895 ;; Auto vars:     Size  Location     Type
 19896 ;;		None
 19897 ;; Return value:  Size  Location     Type
 19898 ;;                  1    wreg      void 
 19899 ;; Registers used:
 19900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19901 ;; Tracked objects:
 19902 ;;		On entry : 0/0
 19903 ;;		On exit  : 0/0
 19904 ;;		Unchanged: 0/0
 19905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19906 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;Total ram usage:        2 bytes
 19911 ;; Hardware stack levels used:    1
 19912 ;; Hardware stack levels required when called:    9
 19913 ;; This function calls:
 19914 ;;		_Byte_SetBit
 19915 ;;		_Byte_SetQuad
 19916 ;; This function is called by:
 19917 ;;		_HMI_Init
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           	psect	text96
 19922  015278                     __ptext96:
 19923                           	opt stack 0
 19924  015278                     _SPI_MinSpeed:
 19925                           	opt stack 19
 19926                           
 19927                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19928                           
 19929                           ; BSR set to: 0
 19930                           ;incstack = 0
 19931  015278  0100               	movlb	0	; () banked
 19932  01527A  EE20 F006          	lfsr	2,6
 19933  01527E  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19934  015280  26D9               	addwf	fsr2l,f,c
 19935  015282  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19936  015284  22DA               	addwfc	fsr2h,f,c
 19937  015286  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19938  01528A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19939  01528E  0E05               	movlw	5
 19940  015290  0100               	movlb	0	; () banked
 19941  015292  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19942  015294  0E00               	movlw	0
 19943  015296  0100               	movlb	0	; () banked
 19944  015298  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19945  01529A  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 19946                           
 19947                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 19948  01529E  0100               	movlb	0	; () banked
 19949  0152A0  EE20 F006          	lfsr	2,6
 19950  0152A4  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19951  0152A6  26D9               	addwf	fsr2l,f,c
 19952  0152A8  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19953  0152AA  22DA               	addwfc	fsr2h,f,c
 19954  0152AC  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19955  0152B0  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19956  0152B4  0E00               	movlw	0
 19957  0152B6  0100               	movlb	0	; () banked
 19958  0152B8  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19959  0152BA  0E02               	movlw	2
 19960  0152BC  0100               	movlb	0	; () banked
 19961  0152BE  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19962  0152C0  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 19963                           
 19964                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19965  0152C4  0100               	movlb	0	; () banked
 19966  0152C6  EE20 F006          	lfsr	2,6
 19967  0152CA  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19968  0152CC  26D9               	addwf	fsr2l,f,c
 19969  0152CE  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19970  0152D0  22DA               	addwfc	fsr2h,f,c
 19971  0152D2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19972  0152D6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19973  0152DA  0E05               	movlw	5
 19974  0152DC  0100               	movlb	0	; () banked
 19975  0152DE  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19976  0152E0  0E01               	movlw	1
 19977  0152E2  0100               	movlb	0	; () banked
 19978  0152E4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19979  0152E6  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 19980  0152EA  0012               	return		;funcret
 19981  0152EC                     __end_of_SPI_MinSpeed:
 19982                           	opt stack 0
 19983                           tosu	equ	0xFFF
 19984                           tosh	equ	0xFFE
 19985                           tosl	equ	0xFFD
 19986                           pclath	equ	0xFFA
 19987                           tblptru	equ	0xFF8
 19988                           tblptrh	equ	0xFF7
 19989                           tblptrl	equ	0xFF6
 19990                           tablat	equ	0xFF5
 19991                           prodh	equ	0xFF4
 19992                           prodl	equ	0xFF3
 19993                           intcon	equ	0xFF2
 19994                           postinc0	equ	0xFEE
 19995                           wreg	equ	0xFE8
 19996                           indf1	equ	0xFE7
 19997                           postdec1	equ	0xFE5
 19998                           fsr1h	equ	0xFE2
 19999                           fsr1l	equ	0xFE1
 20000                           indf2	equ	0xFDF
 20001                           postinc2	equ	0xFDE
 20002                           postdec2	equ	0xFDD
 20003                           plusw2	equ	0xFDB
 20004                           fsr2h	equ	0xFDA
 20005                           fsr2l	equ	0xFD9
 20006                           status	equ	0xFD8
 20007                           
 20008 ;; *************** function _SPI_Init *****************
 20009 ;; Defined at:
 20010 ;;		line 12 in file "Library/SPI.c"
 20011 ;; Parameters:    Size  Location     Type
 20012 ;;  pClock          4   45[BANK0 ] unsigned long 
 20013 ;;  pChannel        1   49[BANK0 ] enum E6744
 20014 ;;  pMode           1   50[BANK0 ] enum E6748
 20015 ;; Auto vars:     Size  Location     Type
 20016 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20017 ;;		 -> SPI1(11), SPI2(11), 
 20018 ;; Return value:  Size  Location     Type
 20019 ;;                  1    wreg      void 
 20020 ;; Registers used:
 20021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20022 ;; Tracked objects:
 20023 ;;		On entry : 0/0
 20024 ;;		On exit  : 0/0
 20025 ;;		Unchanged: 0/0
 20026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20027 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20030 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20031 ;;Total ram usage:        8 bytes
 20032 ;; Hardware stack levels used:    1
 20033 ;; Hardware stack levels required when called:   12
 20034 ;; This function calls:
 20035 ;;		_Byte_SetBit
 20036 ;;		_Byte_SetQuad
 20037 ;;		_Port_SetPinType
 20038 ;;		_SPI_DCS
 20039 ;;		_SPI_DisableISR
 20040 ;;		_Timer2_Init
 20041 ;; This function is called by:
 20042 ;;		_Configure_GPIOs
 20043 ;;		_HMI_Init
 20044 ;; This function uses a non-reentrant model
 20045 ;;
 20046                           
 20047                           	psect	text97
 20048  0104A6                     __ptext97:
 20049                           	opt stack 0
 20050  0104A6                     _SPI_Init:
 20051                           	opt stack 15
 20052                           
 20053                           ;SPI.c: 14: SPIPtr pInput;
 20054                           ;SPI.c: 16: switch (pChannel)
 20055                           
 20056                           ;incstack = 0
 20057  0104A6  D00C               	goto	l597
 20058  0104A8                     
 20059                           ;SPI.c: 19: pInput = &SPI1;
 20060  0104A8  0E76               	movlw	low _SPI1
 20061  0104AA  0100               	movlb	0	; () banked
 20062  0104AC  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20063  0104AE  0E03               	movlw	high _SPI1
 20064  0104B0  D004               	goto	L13
 20065  0104B2                     
 20066                           ; BSR set to: 0
 20067                           ;SPI.c: 22: pInput = &SPI2;
 20068                           
 20069                           ; BSR set to: 0
 20070  0104B2  0E81               	movlw	low _SPI2
 20071  0104B4  0100               	movlb	0	; () banked
 20072  0104B6  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20073  0104B8  0E03               	movlw	high _SPI2
 20074  0104BA                     L13:
 20075  0104BA  0100               	movlb	0	; () banked
 20076  0104BC  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20077                           
 20078                           ; BSR set to: 0
 20079                           ;SPI.c: 24: };
 20080                           
 20081                           ;SPI.c: 23: break;
 20082  0104BE  D008               	goto	l599
 20083  0104C0                     l597:
 20084                           
 20085                           ; BSR set to: 0
 20086  0104C0  0100               	movlb	0	; () banked
 20087  0104C2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20088                           
 20089                           ; Switch size 1, requested type "space"
 20090                           ; Number of cases is 2, Range of values is 0 to 1
 20091                           ; switch strategies available:
 20092                           ; Name         Instructions Cycles
 20093                           ; simple_byte            7     4 (average)
 20094                           ;	Chosen strategy is simple_byte
 20095  0104C4  0A00               	xorlw	0	; case 0
 20096  0104C6  B4D8               	btfsc	status,2,c
 20097  0104C8  D7EF               	goto	l598
 20098  0104CA  0A01               	xorlw	1	; case 1
 20099  0104CC  B4D8               	btfsc	status,2,c
 20100  0104CE  D7F1               	goto	l600
 20101  0104D0                     l599:
 20102                           
 20103                           ; BSR set to: 0
 20104                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20105                           
 20106                           ; BSR set to: 0
 20107  0104D0  0100               	movlb	0	; () banked
 20108  0104D2  EE20 F002          	lfsr	2,2
 20109  0104D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20110  0104D8  26D9               	addwf	fsr2l,f,c
 20111  0104DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20112  0104DC  22DA               	addwfc	fsr2h,f,c
 20113  0104DE  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20114                           
 20115                           ;SPI.c: 35: switch (pChannel)
 20116  0104E2  D0B1               	goto	l601
 20117  0104E4                     
 20118                           ; BSR set to: 0
 20119                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20120                           
 20121                           ; BSR set to: 0
 20122  0104E4  0EA7               	movlw	low _PortC
 20123  0104E6  0100               	movlb	0	; () banked
 20124  0104E8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20125  0104EA  0E00               	movlw	high _PortC
 20126  0104EC  0100               	movlb	0	; () banked
 20127  0104EE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20128  0104F0  0E02               	movlw	2
 20129  0104F2  0100               	movlb	0	; () banked
 20130  0104F4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20131  0104F6  0E03               	movlw	3
 20132  0104F8  0100               	movlb	0	; () banked
 20133  0104FA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20134  0104FC  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20135                           
 20136                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20137  010500  0EA7               	movlw	low _PortC
 20138  010502  0100               	movlb	0	; () banked
 20139  010504  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20140  010506  0E00               	movlw	high _PortC
 20141  010508  0100               	movlb	0	; () banked
 20142  01050A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20143  01050C  0E03               	movlw	3
 20144  01050E  0100               	movlb	0	; () banked
 20145  010510  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20146  010512  0E03               	movlw	3
 20147  010514  0100               	movlb	0	; () banked
 20148  010516  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20149  010518  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20150                           
 20151                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20152  01051C  0EA7               	movlw	low _PortC
 20153  01051E  0100               	movlb	0	; () banked
 20154  010520  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20155  010522  0E00               	movlw	high _PortC
 20156  010524  0100               	movlb	0	; () banked
 20157  010526  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20158  010528  0E05               	movlw	5
 20159  01052A  0100               	movlb	0	; () banked
 20160  01052C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20161  01052E  0E03               	movlw	3
 20162  010530  0100               	movlb	0	; () banked
 20163  010532  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20164  010534  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20165                           
 20166                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20167  010538  0EA7               	movlw	low _PortC
 20168  01053A  0100               	movlb	0	; () banked
 20169  01053C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20170  01053E  0E00               	movlw	high _PortC
 20171  010540  0100               	movlb	0	; () banked
 20172  010542  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20173  010544  0E04               	movlw	4
 20174  010546  0100               	movlb	0	; () banked
 20175  010548  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20176  01054A  0E00               	movlw	0
 20177  01054C  0100               	movlb	0	; () banked
 20178  01054E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20179  010550  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20180                           
 20181                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20182  010554  0100               	movlb	0	; () banked
 20183  010556  EE20 F003          	lfsr	2,3
 20184  01055A  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20185  01055C  26D9               	addwf	fsr2l,f,c
 20186  01055E  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20187  010560  22DA               	addwfc	fsr2h,f,c
 20188  010562  0EC7               	movlw	199
 20189  010564  6EDE               	movwf	postinc2,c
 20190  010566  0E0F               	movlw	15
 20191  010568  6EDD               	movwf	postdec2,c
 20192                           
 20193                           ; BSR set to: 0
 20194                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20195  01056A  0100               	movlb	0	; () banked
 20196  01056C  EE20 F006          	lfsr	2,6
 20197  010570  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20198  010572  26D9               	addwf	fsr2l,f,c
 20199  010574  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20200  010576  22DA               	addwfc	fsr2h,f,c
 20201  010578  0EC6               	movlw	198
 20202  01057A  6EDE               	movwf	postinc2,c
 20203  01057C  0E0F               	movlw	15
 20204  01057E  6EDD               	movwf	postdec2,c
 20205                           
 20206                           ; BSR set to: 0
 20207                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20208  010580  0100               	movlb	0	; () banked
 20209  010582  EE20 F009          	lfsr	2,9
 20210  010586  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20211  010588  26D9               	addwf	fsr2l,f,c
 20212  01058A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20213  01058C  22DA               	addwfc	fsr2h,f,c
 20214  01058E  0EC9               	movlw	201
 20215  010590  D056               	goto	L14
 20216  010592                     
 20217                           ; BSR set to: 0
 20218                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20219                           
 20220                           ; BSR set to: 0
 20221  010592  0E9D               	movlw	low _PortD
 20222  010594  0100               	movlb	0	; () banked
 20223  010596  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20224  010598  0E00               	movlw	high _PortD
 20225  01059A  0100               	movlb	0	; () banked
 20226  01059C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20227  01059E  0E07               	movlw	7
 20228  0105A0  0100               	movlb	0	; () banked
 20229  0105A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20230  0105A4  0E03               	movlw	3
 20231  0105A6  0100               	movlb	0	; () banked
 20232  0105A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20233  0105AA  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20234                           
 20235                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20236  0105AE  0E9D               	movlw	low _PortD
 20237  0105B0  0100               	movlb	0	; () banked
 20238  0105B2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20239  0105B4  0E00               	movlw	high _PortD
 20240  0105B6  0100               	movlb	0	; () banked
 20241  0105B8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20242  0105BA  0E06               	movlw	6
 20243  0105BC  0100               	movlb	0	; () banked
 20244  0105BE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20245  0105C0  0E03               	movlw	3
 20246  0105C2  0100               	movlb	0	; () banked
 20247  0105C4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20248  0105C6  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20249                           
 20250                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20251  0105CA  0E9D               	movlw	low _PortD
 20252  0105CC  0100               	movlb	0	; () banked
 20253  0105CE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20254  0105D0  0E00               	movlw	high _PortD
 20255  0105D2  0100               	movlb	0	; () banked
 20256  0105D4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20257  0105D6  0E04               	movlw	4
 20258  0105D8  0100               	movlb	0	; () banked
 20259  0105DA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20260  0105DC  0E03               	movlw	3
 20261  0105DE  0100               	movlb	0	; () banked
 20262  0105E0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20263  0105E2  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20264                           
 20265                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20266  0105E6  0E9D               	movlw	low _PortD
 20267  0105E8  0100               	movlb	0	; () banked
 20268  0105EA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20269  0105EC  0E00               	movlw	high _PortD
 20270  0105EE  0100               	movlb	0	; () banked
 20271  0105F0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20272  0105F2  0E05               	movlw	5
 20273  0105F4  0100               	movlb	0	; () banked
 20274  0105F6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20275  0105F8  0E00               	movlw	0
 20276  0105FA  0100               	movlb	0	; () banked
 20277  0105FC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20278  0105FE  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20279                           
 20280                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20281  010602  0100               	movlb	0	; () banked
 20282  010604  EE20 F003          	lfsr	2,3
 20283  010608  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20284  01060A  26D9               	addwf	fsr2l,f,c
 20285  01060C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20286  01060E  22DA               	addwfc	fsr2h,f,c
 20287  010610  0E6D               	movlw	109
 20288  010612  6EDE               	movwf	postinc2,c
 20289  010614  0E0F               	movlw	15
 20290  010616  6EDD               	movwf	postdec2,c
 20291                           
 20292                           ; BSR set to: 0
 20293                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20294  010618  0100               	movlb	0	; () banked
 20295  01061A  EE20 F006          	lfsr	2,6
 20296  01061E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20297  010620  26D9               	addwf	fsr2l,f,c
 20298  010622  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20299  010624  22DA               	addwfc	fsr2h,f,c
 20300  010626  0E6C               	movlw	108
 20301  010628  6EDE               	movwf	postinc2,c
 20302  01062A  0E0F               	movlw	15
 20303  01062C  6EDD               	movwf	postdec2,c
 20304                           
 20305                           ; BSR set to: 0
 20306                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20307  01062E  0100               	movlb	0	; () banked
 20308  010630  EE20 F009          	lfsr	2,9
 20309  010634  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20310  010636  26D9               	addwf	fsr2l,f,c
 20311  010638  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20312  01063A  22DA               	addwfc	fsr2h,f,c
 20313  01063C  0E6F               	movlw	111
 20314  01063E                     L14:
 20315  01063E  6EDE               	movwf	postinc2,c
 20316  010640  0E0F               	movlw	15
 20317  010642  6EDD               	movwf	postdec2,c
 20318                           
 20319                           ;SPI.c: 68: break;
 20320  010644  D009               	goto	l603
 20321  010646                     l601:
 20322                           
 20323                           ; BSR set to: 0
 20324                           
 20325                           ; BSR set to: 0
 20326  010646  0100               	movlb	0	; () banked
 20327  010648  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20328                           
 20329                           ; Switch size 1, requested type "space"
 20330                           ; Number of cases is 2, Range of values is 0 to 1
 20331                           ; switch strategies available:
 20332                           ; Name         Instructions Cycles
 20333                           ; simple_byte            7     4 (average)
 20334                           ;	Chosen strategy is simple_byte
 20335  01064A  0A00               	xorlw	0	; case 0
 20336  01064C  B4D8               	btfsc	status,2,c
 20337  01064E  D74A               	goto	l602
 20338  010650  0A01               	xorlw	1	; case 1
 20339  010652  A4D8               	btfss	status,2,c
 20340  010654  0012               	return	
 20341  010656  D79D               	goto	l604
 20342  010658                     l603:
 20343                           
 20344                           ; BSR set to: 0
 20345                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20346                           
 20347                           ; BSR set to: 0
 20348  010658  0100               	movlb	0	; () banked
 20349  01065A  EE20 F006          	lfsr	2,6
 20350  01065E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20351  010660  26D9               	addwf	fsr2l,f,c
 20352  010662  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20353  010664  22DA               	addwfc	fsr2h,f,c
 20354  010666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20355  01066A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20356  01066E  0E05               	movlw	5
 20357  010670  0100               	movlb	0	; () banked
 20358  010672  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20359  010674  0E00               	movlw	0
 20360  010676  0100               	movlb	0	; () banked
 20361  010678  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20362  01067A  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20363                           
 20364                           ;SPI.c: 77: switch(pMode)
 20365  01067E  D09C               	goto	l607
 20366  010680                     
 20367                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20368  010680  0100               	movlb	0	; () banked
 20369  010682  EE20 F006          	lfsr	2,6
 20370  010686  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20371  010688  26D9               	addwf	fsr2l,f,c
 20372  01068A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20373  01068C  22DA               	addwfc	fsr2h,f,c
 20374  01068E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20375  010692  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20376  010696  0E04               	movlw	4
 20377  010698  0100               	movlb	0	; () banked
 20378  01069A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20379  01069C  0E00               	movlw	0
 20380  01069E  0100               	movlb	0	; () banked
 20381  0106A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20382  0106A2  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20383                           
 20384                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20385  0106A6  0100               	movlb	0	; () banked
 20386  0106A8  EE20 F003          	lfsr	2,3
 20387  0106AC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20388  0106AE  26D9               	addwf	fsr2l,f,c
 20389  0106B0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20390  0106B2  22DA               	addwfc	fsr2h,f,c
 20391  0106B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20392  0106B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20393  0106BC  0E06               	movlw	6
 20394  0106BE  0100               	movlb	0	; () banked
 20395  0106C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20396  0106C2  0E00               	movlw	0
 20397  0106C4  0100               	movlb	0	; () banked
 20398  0106C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20399  0106C8  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20400                           
 20401                           ;SPI.c: 82: break;
 20402  0106CC  D084               	goto	l609
 20403  0106CE                     
 20404                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20405  0106CE  0100               	movlb	0	; () banked
 20406  0106D0  EE20 F006          	lfsr	2,6
 20407  0106D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20408  0106D6  26D9               	addwf	fsr2l,f,c
 20409  0106D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20410  0106DA  22DA               	addwfc	fsr2h,f,c
 20411  0106DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20412  0106E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20413  0106E4  0E04               	movlw	4
 20414  0106E6  0100               	movlb	0	; () banked
 20415  0106E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20416  0106EA  0E00               	movlw	0
 20417  0106EC  0100               	movlb	0	; () banked
 20418  0106EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20419  0106F0  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20420                           
 20421                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20422  0106F4  0100               	movlb	0	; () banked
 20423  0106F6  EE20 F003          	lfsr	2,3
 20424  0106FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20425  0106FC  26D9               	addwf	fsr2l,f,c
 20426  0106FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20427  010700  22DA               	addwfc	fsr2h,f,c
 20428  010702  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20429  010706  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20430  01070A  0E06               	movlw	6
 20431  01070C  0100               	movlb	0	; () banked
 20432  01070E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20433  010710  0E01               	movlw	1
 20434  010712  0100               	movlb	0	; () banked
 20435  010714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20436  010716  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20437                           
 20438                           ;SPI.c: 86: break;
 20439  01071A  D05D               	goto	l609
 20440  01071C                     
 20441                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20442  01071C  0100               	movlb	0	; () banked
 20443  01071E  EE20 F006          	lfsr	2,6
 20444  010722  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20445  010724  26D9               	addwf	fsr2l,f,c
 20446  010726  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20447  010728  22DA               	addwfc	fsr2h,f,c
 20448  01072A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20449  01072E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20450  010732  0E04               	movlw	4
 20451  010734  0100               	movlb	0	; () banked
 20452  010736  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20453  010738  0E01               	movlw	1
 20454  01073A  0100               	movlb	0	; () banked
 20455  01073C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20456  01073E  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20457                           
 20458                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20459  010742  0100               	movlb	0	; () banked
 20460  010744  EE20 F003          	lfsr	2,3
 20461  010748  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20462  01074A  26D9               	addwf	fsr2l,f,c
 20463  01074C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20464  01074E  22DA               	addwfc	fsr2h,f,c
 20465  010750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20466  010754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20467  010758  0E06               	movlw	6
 20468  01075A  0100               	movlb	0	; () banked
 20469  01075C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20470  01075E  0E00               	movlw	0
 20471  010760  0100               	movlb	0	; () banked
 20472  010762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20473  010764  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20474                           
 20475                           ;SPI.c: 90: break;
 20476  010768  D036               	goto	l609
 20477  01076A                     
 20478                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20479  01076A  0100               	movlb	0	; () banked
 20480  01076C  EE20 F006          	lfsr	2,6
 20481  010770  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20482  010772  26D9               	addwf	fsr2l,f,c
 20483  010774  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20484  010776  22DA               	addwfc	fsr2h,f,c
 20485  010778  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20486  01077C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20487  010780  0E04               	movlw	4
 20488  010782  0100               	movlb	0	; () banked
 20489  010784  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20490  010786  0E01               	movlw	1
 20491  010788  0100               	movlb	0	; () banked
 20492  01078A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20493  01078C  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20494                           
 20495                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20496  010790  0100               	movlb	0	; () banked
 20497  010792  EE20 F003          	lfsr	2,3
 20498  010796  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20499  010798  26D9               	addwf	fsr2l,f,c
 20500  01079A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20501  01079C  22DA               	addwfc	fsr2h,f,c
 20502  01079E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20503  0107A2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20504  0107A6  0E06               	movlw	6
 20505  0107A8  0100               	movlb	0	; () banked
 20506  0107AA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20507  0107AC  0E01               	movlw	1
 20508  0107AE  0100               	movlb	0	; () banked
 20509  0107B0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20510  0107B2  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20511                           
 20512                           ;SPI.c: 94: break;
 20513  0107B6  D00F               	goto	l609
 20514  0107B8                     l607:
 20515  0107B8  0100               	movlb	0	; () banked
 20516  0107BA  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 20517                           
 20518                           ; Switch size 1, requested type "space"
 20519                           ; Number of cases is 4, Range of values is 0 to 3
 20520                           ; switch strategies available:
 20521                           ; Name         Instructions Cycles
 20522                           ; simple_byte           13     7 (average)
 20523                           ;	Chosen strategy is simple_byte
 20524  0107BC  0A00               	xorlw	0	; case 0
 20525  0107BE  B4D8               	btfsc	status,2,c
 20526  0107C0  D75F               	goto	l608
 20527  0107C2  0A01               	xorlw	1	; case 1
 20528  0107C4  B4D8               	btfsc	status,2,c
 20529  0107C6  D783               	goto	l610
 20530  0107C8  0A03               	xorlw	3	; case 2
 20531  0107CA  B4D8               	btfsc	status,2,c
 20532  0107CC  D7A7               	goto	l611
 20533  0107CE  0A01               	xorlw	1	; case 3
 20534  0107D0  A4D8               	btfss	status,2,c
 20535  0107D2  0012               	return	
 20536  0107D4  D7CA               	goto	l612
 20537  0107D6                     l609:
 20538                           
 20539                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20540                           
 20541                           ; BSR set to: 0
 20542  0107D6  0100               	movlb	0	; () banked
 20543  0107D8  EE20 F006          	lfsr	2,6
 20544  0107DC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20545  0107DE  26D9               	addwf	fsr2l,f,c
 20546  0107E0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20547  0107E2  22DA               	addwfc	fsr2h,f,c
 20548  0107E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20549  0107E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20550  0107EC  0E07               	movlw	7
 20551  0107EE  0100               	movlb	0	; () banked
 20552  0107F0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20553  0107F2  0E00               	movlw	0
 20554  0107F4  0100               	movlb	0	; () banked
 20555  0107F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20556  0107F8  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20557                           
 20558                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20559  0107FC  0100               	movlb	0	; () banked
 20560  0107FE  EE20 F006          	lfsr	2,6
 20561  010802  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20562  010804  26D9               	addwf	fsr2l,f,c
 20563  010806  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20564  010808  22DA               	addwfc	fsr2h,f,c
 20565  01080A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20566  01080E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20567  010812  0E06               	movlw	6
 20568  010814  0100               	movlb	0	; () banked
 20569  010816  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20570  010818  0E00               	movlw	0
 20571  01081A  0100               	movlb	0	; () banked
 20572  01081C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20573  01081E  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20574                           
 20575                           ;SPI.c: 106: Timer2_Init(pClock);
 20576  010822  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20577  010826  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20578  01082A  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20579  01082E  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20580  010832  ECCB  F098         	call	_Timer2_Init	;wreg free
 20581                           
 20582                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20583  010836  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20584  01083A  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20585  01083E  ECBE  F0B0         	call	_SPI_DisableISR	;wreg free
 20586                           
 20587                           ;SPI.c: 116: switch (pChannel)
 20588  010842  D004               	goto	l614
 20589  010844                     l615:
 20590                           
 20591                           ; BSR set to: 0
 20592  010844  869F               	bsf	3999,3,c	;volatile
 20593  010846  D00B               	goto	l616
 20594  010848                     l617:
 20595                           
 20596                           ; BSR set to: 0
 20597  010848  8EA5               	bsf	4005,7,c	;volatile
 20598  01084A  D009               	goto	l616
 20599  01084C                     l614:
 20600                           
 20601                           ; BSR set to: 0
 20602  01084C  0100               	movlb	0	; () banked
 20603  01084E  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20604                           
 20605                           ; Switch size 1, requested type "space"
 20606                           ; Number of cases is 2, Range of values is 0 to 1
 20607                           ; switch strategies available:
 20608                           ; Name         Instructions Cycles
 20609                           ; simple_byte            7     4 (average)
 20610                           ;	Chosen strategy is simple_byte
 20611  010850  0A00               	xorlw	0	; case 0
 20612  010852  B4D8               	btfsc	status,2,c
 20613  010854  D7F7               	goto	l615
 20614  010856  0A01               	xorlw	1	; case 1
 20615  010858  A4D8               	btfss	status,2,c
 20616  01085A  0012               	return	
 20617  01085C  D7F5               	goto	l617
 20618  01085E                     l616:
 20619                           
 20620                           ; BSR set to: 0
 20621                           ;SPI.c: 124: SPI_DCS(pInput);
 20622                           
 20623                           ; BSR set to: 0
 20624  01085E  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20625  010862  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20626  010866  EC1E  F0B0         	call	_SPI_DCS	;wreg free
 20627                           
 20628                           ;SPI.c: 126: pInput->mBusy = 0;
 20629  01086A  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 20630  01086E  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20631  010872  0E00               	movlw	0
 20632  010874  6EDF               	movwf	indf2,c
 20633                           
 20634                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20635  010876  0100               	movlb	0	; () banked
 20636  010878  EE20 F006          	lfsr	2,6
 20637  01087C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20638  01087E  26D9               	addwf	fsr2l,f,c
 20639  010880  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20640  010882  22DA               	addwfc	fsr2h,f,c
 20641  010884  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20642  010888  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20643  01088C  0E00               	movlw	0
 20644  01088E  0100               	movlb	0	; () banked
 20645  010890  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20646  010892  0E03               	movlw	3
 20647  010894  0100               	movlb	0	; () banked
 20648  010896  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20649  010898  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 20650                           
 20651                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20652  01089C  0100               	movlb	0	; () banked
 20653  01089E  EE20 F006          	lfsr	2,6
 20654  0108A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20655  0108A4  26D9               	addwf	fsr2l,f,c
 20656  0108A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20657  0108A8  22DA               	addwfc	fsr2h,f,c
 20658  0108AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20659  0108AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20660  0108B2  0E05               	movlw	5
 20661  0108B4  0100               	movlb	0	; () banked
 20662  0108B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20663  0108B8  0E01               	movlw	1
 20664  0108BA  0100               	movlb	0	; () banked
 20665  0108BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20666  0108BE  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 20667  0108C2  0012               	return		;funcret
 20668  0108C4                     __end_of_SPI_Init:
 20669                           	opt stack 0
 20670                           tosu	equ	0xFFF
 20671                           tosh	equ	0xFFE
 20672                           tosl	equ	0xFFD
 20673                           pclath	equ	0xFFA
 20674                           tblptru	equ	0xFF8
 20675                           tblptrh	equ	0xFF7
 20676                           tblptrl	equ	0xFF6
 20677                           tablat	equ	0xFF5
 20678                           prodh	equ	0xFF4
 20679                           prodl	equ	0xFF3
 20680                           intcon	equ	0xFF2
 20681                           postinc0	equ	0xFEE
 20682                           wreg	equ	0xFE8
 20683                           indf1	equ	0xFE7
 20684                           postdec1	equ	0xFE5
 20685                           fsr1h	equ	0xFE2
 20686                           fsr1l	equ	0xFE1
 20687                           indf2	equ	0xFDF
 20688                           postinc2	equ	0xFDE
 20689                           postdec2	equ	0xFDD
 20690                           plusw2	equ	0xFDB
 20691                           fsr2h	equ	0xFDA
 20692                           fsr2l	equ	0xFD9
 20693                           status	equ	0xFD8
 20694                           
 20695 ;; *************** function _Timer2_Init *****************
 20696 ;; Defined at:
 20697 ;;		line 10 in file "Library/Timer2.c"
 20698 ;; Parameters:    Size  Location     Type
 20699 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20700 ;; Auto vars:     Size  Location     Type
 20701 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20702 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20703 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20704 ;; Return value:  Size  Location     Type
 20705 ;;                  1    wreg      void 
 20706 ;; Registers used:
 20707 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20708 ;; Tracked objects:
 20709 ;;		On entry : 0/0
 20710 ;;		On exit  : 0/0
 20711 ;;		Unchanged: 0/0
 20712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20714 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20717 ;;Total ram usage:       17 bytes
 20718 ;; Hardware stack levels used:    1
 20719 ;; Hardware stack levels required when called:    8
 20720 ;; This function calls:
 20721 ;;		_Timer2_Clear
 20722 ;;		___lldiv
 20723 ;; This function is called by:
 20724 ;;		_SPI_Init
 20725 ;; This function uses a non-reentrant model
 20726 ;;
 20727                           
 20728                           	psect	text98
 20729  013196                     __ptext98:
 20730                           	opt stack 0
 20731  013196                     _Timer2_Init:
 20732                           	opt stack 18
 20733                           
 20734                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 20735                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 20736                           ;Timer2.c: 14: static UINT8 PRE = 0;
 20737                           ;Timer2.c: 15: static UINT32 DIV = 0;
 20738                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 20739                           
 20740                           ;incstack = 0
 20741  013196  0E00               	movlw	0
 20742  013198  0100               	movlb	0	; () banked
 20743  01319A  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 20744  01319C  0E6C               	movlw	108
 20745  01319E  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 20746  0131A0  0EDC               	movlw	220
 20747  0131A2  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 20748  0131A4  0E02               	movlw	2
 20749  0131A6  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 20750                           
 20751                           ; BSR set to: 0
 20752                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 20753                           ;Timer2.c: 20: pFrequency *= 2;
 20754  0131A8  0100               	movlb	0	; () banked
 20755  0131AA  90D8               	bcf	status,0,c
 20756  0131AC  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 20757  0131AE  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 20758  0131B0  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 20759  0131B2  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 20760                           
 20761                           ; BSR set to: 0
 20762                           ;Timer2.c: 23: pCPUClock /= 4;
 20763  0131B4  0E02               	movlw	2
 20764  0131B6  0100               	movlb	0	; () banked
 20765  0131B8  6FCB               	movwf	??_Timer2_Init& (0+255),b
 20766  0131BA                     u9365:
 20767  0131BA  90D8               	bcf	status,0,c
 20768  0131BC  0100               	movlb	0	; () banked
 20769  0131BE  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 20770  0131C0  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 20771  0131C2  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 20772  0131C4  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 20773  0131C6  0100               	movlb	0	; () banked
 20774  0131C8  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 20775  0131CA  D7F7               	goto	u9365
 20776                           
 20777                           ; BSR set to: 0
 20778                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 20779  0131CC  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 20780  0131D0  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 20781  0131D4  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 20782  0131D8  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 20783  0131DC  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 20784  0131E0  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 20785  0131E4  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 20786  0131E8  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 20787  0131EC  EC66  F0A0         	call	___lldiv	;wreg free
 20788  0131F0  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 20789  0131F4  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 20790  0131F8  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 20791  0131FC  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 20792                           
 20793                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 20794  013200  D010               	goto	l1828
 20795  013202                     l12786:
 20796                           
 20797                           ;Timer2.c: 28: {
 20798                           ;Timer2.c: 29: RDIV = 0;
 20799  013202  0E00               	movlw	0
 20800  013204  0100               	movlb	0	; () banked
 20801  013206  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 20802  013208  0E00               	movlw	0
 20803  01320A  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 20804  01320C  0E00               	movlw	0
 20805  01320E  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 20806  013210  0E00               	movlw	0
 20807  013212  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 20808                           
 20809                           ; BSR set to: 0
 20810                           ;Timer2.c: 30: INDEX ++;
 20811  013214  0100               	movlb	0	; () banked
 20812  013216  2B8D               	incf	Timer2_Init@INDEX& (0+255),f,b
 20813                           
 20814                           ; BSR set to: 0
 20815                           ;Timer2.c: 31: if (INDEX >= 3)
 20816  013218  0E02               	movlw	2
 20817  01321A  0100               	movlb	0	; () banked
 20818  01321C  658D               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 20819  01321E  D001               	goto	l1828
 20820  013220  D026               	goto	u9380
 20821  013222                     l1828:
 20822                           
 20823                           ; BSR set to: 0
 20824                           
 20825                           ; BSR set to: 0
 20826  013222  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 20827  013226  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 20828  01322A  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 20829  01322E  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 20830  013232  0100               	movlb	0	; () banked
 20831  013234  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 20832  013236  0D01               	mullw	1
 20833  013238  0E68               	movlw	low Timer2_Init@PRESCALE
 20834  01323A  24F3               	addwf	prodl,w,c
 20835  01323C  6EF6               	movwf	tblptrl,c
 20836  01323E  0EFD               	movlw	high Timer2_Init@PRESCALE
 20837  013240  20F4               	addwfc	prodh,w,c
 20838  013242  6EF7               	movwf	tblptrh,c
 20839  013244                     	if	1	;There are 3 active tblptr bytes
 20840  013244  6AF8               	clrf	tblptru,c
 20841  013246  0E00               	movlw	low (__mediumconst shr (0+16))
 20842  013248  22F8               	addwfc	tblptru,f,c
 20843  01324A                     	endif
 20844  01324A  0008               	tblrd		*
 20845  01324C  50F5               	movf	tablat,w,c
 20846  01324E  0100               	movlb	0	; () banked
 20847  013250  6FBE               	movwf	___lldiv@divisor& (0+255),b
 20848  013252  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 20849  013254  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 20850  013256  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 20851  013258  EC66  F0A0         	call	___lldiv	;wreg free
 20852  01325C  0100               	movlb	0	; () banked
 20853  01325E  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 20854  013260  0100               	movlb	0	; () banked
 20855  013262  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 20856  013264  E1CE               	bnz	l12786
 20857  013266  0100               	movlb	0	; () banked
 20858  013268  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 20859  01326A  B0D8               	btfsc	status,0,c
 20860  01326C  D7CA               	goto	l1827
 20861  01326E                     u9380:
 20862                           
 20863                           ; BSR set to: 0
 20864                           ;Timer2.c: 33: }
 20865                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 20866                           
 20867                           ; BSR set to: 0
 20868  01326E  50CA               	movf	4042,w,c	;volatile
 20869  013270  0100               	movlb	0	; () banked
 20870  013272  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20871  013274  0BFC               	andlw	-4
 20872  013276  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20873  013278  6ECA               	movwf	4042,c	;volatile
 20874                           
 20875                           ; BSR set to: 0
 20876                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 20877  01327A  84CA               	bsf	4042,2,c	;volatile
 20878                           
 20879                           ; BSR set to: 0
 20880                           ;Timer2.c: 44: Timer2_Clear();
 20881  01327C  ECC6  F0B2         	call	_Timer2_Clear	;wreg free
 20882                           
 20883                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 20884  013280  0100               	movlb	0	; () banked
 20885  013282  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 20886  013284  0D01               	mullw	1
 20887  013286  0E68               	movlw	low Timer2_Init@PRESCALE
 20888  013288  24F3               	addwf	prodl,w,c
 20889  01328A  6EF6               	movwf	tblptrl,c
 20890  01328C  0EFD               	movlw	high Timer2_Init@PRESCALE
 20891  01328E  20F4               	addwfc	prodh,w,c
 20892  013290  6EF7               	movwf	tblptrh,c
 20893  013292                     	if	1	;There are 3 active tblptr bytes
 20894  013292  6AF8               	clrf	tblptru,c
 20895  013294  0E00               	movlw	low (__mediumconst shr (0+16))
 20896  013296  22F8               	addwfc	tblptru,f,c
 20897  013298                     	endif
 20898  013298  0008               	tblrd		*
 20899  01329A  CFF5 F08C          	movff	tablat,Timer2_Init@PRE
 20900                           
 20901                           ; BSR set to: 0
 20902                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 20903  01329E  0EFF               	movlw	255
 20904  0132A0  0100               	movlb	0	; () banked
 20905  0132A2  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 20906  0132A4  0103               	movlb	3	; () banked
 20907  0132A6  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 20908  0132A8  0EFF               	movlw	255
 20909  0132AA  0100               	movlb	0	; () banked
 20910  0132AC  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 20911  0132AE  0103               	movlb	3	; () banked
 20912  0132B0  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 20913  0132B2  0EFF               	movlw	255
 20914  0132B4  0100               	movlb	0	; () banked
 20915  0132B6  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 20916  0132B8  0103               	movlb	3	; () banked
 20917  0132BA  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 20918  0132BC  0EFF               	movlw	255
 20919  0132BE  0100               	movlb	0	; () banked
 20920  0132C0  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 20921  0132C2  0103               	movlb	3	; () banked
 20922  0132C4  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 20923                           
 20924                           ; BSR set to: 3
 20925                           ;Timer2.c: 48: INDEX = DIV/PRE;
 20926  0132C6  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 20927  0132CA  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 20928  0132CE  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 20929  0132D2  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 20930  0132D6  0100               	movlb	0	; () banked
 20931  0132D8  518C               	movf	Timer2_Init@PRE& (0+255),w,b
 20932  0132DA  0100               	movlb	0	; () banked
 20933  0132DC  6FBE               	movwf	___lldiv@divisor& (0+255),b
 20934  0132DE  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 20935  0132E0  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 20936  0132E2  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 20937  0132E4  EC66  F0A0         	call	___lldiv	;wreg free
 20938  0132E8  0100               	movlb	0	; () banked
 20939  0132EA  51BA               	movf	?___lldiv& (0+255),w,b
 20940  0132EC  0100               	movlb	0	; () banked
 20941  0132EE  6F8D               	movwf	Timer2_Init@INDEX& (0+255),b
 20942                           
 20943                           ; BSR set to: 0
 20944                           ;Timer2.c: 49: PR2 = INDEX;
 20945  0132F0  C08D  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 20946                           
 20947                           ; BSR set to: 0
 20948  0132F4  0012               	return		;funcret
 20949  0132F6                     __end_of_Timer2_Init:
 20950                           	opt stack 0
 20951                           tosu	equ	0xFFF
 20952                           tosh	equ	0xFFE
 20953                           tosl	equ	0xFFD
 20954                           pclath	equ	0xFFA
 20955                           tblptru	equ	0xFF8
 20956                           tblptrh	equ	0xFF7
 20957                           tblptrl	equ	0xFF6
 20958                           tablat	equ	0xFF5
 20959                           prodh	equ	0xFF4
 20960                           prodl	equ	0xFF3
 20961                           intcon	equ	0xFF2
 20962                           postinc0	equ	0xFEE
 20963                           wreg	equ	0xFE8
 20964                           indf1	equ	0xFE7
 20965                           postdec1	equ	0xFE5
 20966                           fsr1h	equ	0xFE2
 20967                           fsr1l	equ	0xFE1
 20968                           indf2	equ	0xFDF
 20969                           postinc2	equ	0xFDE
 20970                           postdec2	equ	0xFDD
 20971                           plusw2	equ	0xFDB
 20972                           fsr2h	equ	0xFDA
 20973                           fsr2l	equ	0xFD9
 20974                           status	equ	0xFD8
 20975                           
 20976 ;; *************** function ___lldiv *****************
 20977 ;; Defined at:
 20978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 20979 ;; Parameters:    Size  Location     Type
 20980 ;;  dividend        4    0[BANK0 ] unsigned long 
 20981 ;;  divisor         4    4[BANK0 ] unsigned long 
 20982 ;; Auto vars:     Size  Location     Type
 20983 ;;  quotient        4    8[BANK0 ] unsigned long 
 20984 ;;  counter         1   12[BANK0 ] unsigned char 
 20985 ;; Return value:  Size  Location     Type
 20986 ;;                  4    0[BANK0 ] unsigned long 
 20987 ;; Registers used:
 20988 ;;		wreg, status,2, status,0
 20989 ;; Tracked objects:
 20990 ;;		On entry : 0/0
 20991 ;;		On exit  : 0/0
 20992 ;;		Unchanged: 0/0
 20993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20994 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20995 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20997 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20998 ;;Total ram usage:       13 bytes
 20999 ;; Hardware stack levels used:    1
 21000 ;; Hardware stack levels required when called:    7
 21001 ;; This function calls:
 21002 ;;		Nothing
 21003 ;; This function is called by:
 21004 ;;		_Timer0_Init
 21005 ;;		_Timer2_Init
 21006 ;;		_rand_between
 21007 ;;		_I2C_Init
 21008 ;; This function uses a non-reentrant model
 21009 ;;
 21010                           
 21011                           	psect	text99
 21012  0140CC                     __ptext99:
 21013                           	opt stack 0
 21014  0140CC                     ___lldiv:
 21015                           	opt stack 19
 21016                           
 21017                           ; BSR set to: 0
 21018                           ;incstack = 0
 21019  0140CC  0E00               	movlw	0
 21020  0140CE  0100               	movlb	0	; () banked
 21021  0140D0  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21022  0140D2  0E00               	movlw	0
 21023  0140D4  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21024  0140D6  0E00               	movlw	0
 21025  0140D8  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21026  0140DA  0E00               	movlw	0
 21027  0140DC  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21028                           
 21029                           ; BSR set to: 0
 21030  0140DE  0100               	movlb	0	; () banked
 21031  0140E0  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21032  0140E2  0100               	movlb	0	; () banked
 21033  0140E4  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21034  0140E6  0100               	movlb	0	; () banked
 21035  0140E8  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21036  0140EA  0100               	movlb	0	; () banked
 21037  0140EC  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21038  0140EE  B4D8               	btfsc	status,2,c
 21039  0140F0  D042               	goto	l2796
 21040                           
 21041                           ; BSR set to: 0
 21042  0140F2  0E01               	movlw	1
 21043  0140F4  0100               	movlb	0	; () banked
 21044  0140F6  6FC6               	movwf	___lldiv@counter& (0+255),b
 21045  0140F8  D008               	goto	l2791
 21046  0140FA                     
 21047                           ; BSR set to: 0
 21048                           
 21049                           ; BSR set to: 0
 21050  0140FA  0100               	movlb	0	; () banked
 21051  0140FC  90D8               	bcf	status,0,c
 21052  0140FE  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21053  014100  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21054  014102  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21055  014104  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21056  014106  0100               	movlb	0	; () banked
 21057  014108  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21058  01410A                     l2791:
 21059                           
 21060                           ; BSR set to: 0
 21061                           
 21062                           ; BSR set to: 0
 21063  01410A  0100               	movlb	0	; () banked
 21064  01410C  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21065  01410E  D7F5               	goto	l2792
 21066  014110                     u9240:
 21067                           
 21068                           ; BSR set to: 0
 21069                           
 21070                           ; BSR set to: 0
 21071                           
 21072                           ; BSR set to: 0
 21073  014110  0100               	movlb	0	; () banked
 21074  014112  90D8               	bcf	status,0,c
 21075  014114  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21076  014116  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21077  014118  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21078  01411A  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21079                           
 21080                           ; BSR set to: 0
 21081  01411C  0100               	movlb	0	; () banked
 21082  01411E  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21083  014120  0100               	movlb	0	; () banked
 21084  014122  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21085  014124  0100               	movlb	0	; () banked
 21086  014126  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21087  014128  0100               	movlb	0	; () banked
 21088  01412A  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21089  01412C  0100               	movlb	0	; () banked
 21090  01412E  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21091  014130  0100               	movlb	0	; () banked
 21092  014132  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21093  014134  0100               	movlb	0	; () banked
 21094  014136  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21095  014138  0100               	movlb	0	; () banked
 21096  01413A  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21097  01413C  A0D8               	btfss	status,0,c
 21098  01413E  D012               	goto	l2795
 21099                           
 21100                           ; BSR set to: 0
 21101  014140  0100               	movlb	0	; () banked
 21102  014142  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21103  014144  0100               	movlb	0	; () banked
 21104  014146  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21105  014148  0100               	movlb	0	; () banked
 21106  01414A  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21107  01414C  0100               	movlb	0	; () banked
 21108  01414E  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21109  014150  0100               	movlb	0	; () banked
 21110  014152  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21111  014154  0100               	movlb	0	; () banked
 21112  014156  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21113  014158  0100               	movlb	0	; () banked
 21114  01415A  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21115  01415C  0100               	movlb	0	; () banked
 21116  01415E  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21117                           
 21118                           ; BSR set to: 0
 21119  014160  0100               	movlb	0	; () banked
 21120  014162  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21121  014164                     l2795:
 21122                           
 21123                           ; BSR set to: 0
 21124                           
 21125                           ; BSR set to: 0
 21126  014164  0100               	movlb	0	; () banked
 21127  014166  90D8               	bcf	status,0,c
 21128  014168  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21129  01416A  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21130  01416C  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21131  01416E  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21132                           
 21133                           ; BSR set to: 0
 21134  014170  0100               	movlb	0	; () banked
 21135  014172  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21136  014174  D7CD               	goto	u9240
 21137  014176                     l2796:
 21138                           
 21139                           ; BSR set to: 0
 21140                           
 21141                           ; BSR set to: 0
 21142  014176  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21143  01417A  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21144  01417E  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21145  014182  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21146                           
 21147                           ; BSR set to: 0
 21148  014186  0012               	return		;funcret
 21149  014188                     __end_of___lldiv:
 21150                           	opt stack 0
 21151                           tosu	equ	0xFFF
 21152                           tosh	equ	0xFFE
 21153                           tosl	equ	0xFFD
 21154                           pclath	equ	0xFFA
 21155                           tblptru	equ	0xFF8
 21156                           tblptrh	equ	0xFF7
 21157                           tblptrl	equ	0xFF6
 21158                           tablat	equ	0xFF5
 21159                           prodh	equ	0xFF4
 21160                           prodl	equ	0xFF3
 21161                           intcon	equ	0xFF2
 21162                           postinc0	equ	0xFEE
 21163                           wreg	equ	0xFE8
 21164                           indf1	equ	0xFE7
 21165                           postdec1	equ	0xFE5
 21166                           fsr1h	equ	0xFE2
 21167                           fsr1l	equ	0xFE1
 21168                           indf2	equ	0xFDF
 21169                           postinc2	equ	0xFDE
 21170                           postdec2	equ	0xFDD
 21171                           plusw2	equ	0xFDB
 21172                           fsr2h	equ	0xFDA
 21173                           fsr2l	equ	0xFD9
 21174                           status	equ	0xFD8
 21175                           
 21176 ;; *************** function _Timer2_Clear *****************
 21177 ;; Defined at:
 21178 ;;		line 3 in file "Library/Timer2.c"
 21179 ;; Parameters:    Size  Location     Type
 21180 ;;		None
 21181 ;; Auto vars:     Size  Location     Type
 21182 ;;		None
 21183 ;; Return value:  Size  Location     Type
 21184 ;;                  1    wreg      void 
 21185 ;; Registers used:
 21186 ;;		None
 21187 ;; Tracked objects:
 21188 ;;		On entry : 0/0
 21189 ;;		On exit  : 0/0
 21190 ;;		Unchanged: 0/0
 21191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21196 ;;Total ram usage:        0 bytes
 21197 ;; Hardware stack levels used:    1
 21198 ;; Hardware stack levels required when called:    7
 21199 ;; This function calls:
 21200 ;;		Nothing
 21201 ;; This function is called by:
 21202 ;;		_Timer2_Init
 21203 ;; This function uses a non-reentrant model
 21204 ;;
 21205                           
 21206                           	psect	text100
 21207  01658C                     __ptext100:
 21208                           	opt stack 0
 21209  01658C                     _Timer2_Clear:
 21210                           	opt stack 18
 21211                           
 21212                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21213                           
 21214                           ; BSR set to: 0
 21215                           ;incstack = 0
 21216  01658C  929E               	bcf	3998,1,c	;volatile
 21217                           
 21218                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21219  01658E  929D               	bcf	3997,1,c	;volatile
 21220                           
 21221                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21222  016590  929F               	bcf	3999,1,c	;volatile
 21223  016592  0012               	return		;funcret
 21224  016594                     __end_of_Timer2_Clear:
 21225                           	opt stack 0
 21226                           tosu	equ	0xFFF
 21227                           tosh	equ	0xFFE
 21228                           tosl	equ	0xFFD
 21229                           pclath	equ	0xFFA
 21230                           tblptru	equ	0xFF8
 21231                           tblptrh	equ	0xFF7
 21232                           tblptrl	equ	0xFF6
 21233                           tablat	equ	0xFF5
 21234                           prodh	equ	0xFF4
 21235                           prodl	equ	0xFF3
 21236                           intcon	equ	0xFF2
 21237                           postinc0	equ	0xFEE
 21238                           wreg	equ	0xFE8
 21239                           indf1	equ	0xFE7
 21240                           postdec1	equ	0xFE5
 21241                           fsr1h	equ	0xFE2
 21242                           fsr1l	equ	0xFE1
 21243                           indf2	equ	0xFDF
 21244                           postinc2	equ	0xFDE
 21245                           postdec2	equ	0xFDD
 21246                           plusw2	equ	0xFDB
 21247                           fsr2h	equ	0xFDA
 21248                           fsr2l	equ	0xFD9
 21249                           status	equ	0xFD8
 21250                           
 21251 ;; *************** function _SPI_DisableISR *****************
 21252 ;; Defined at:
 21253 ;;		line 181 in file "Library/SPI.c"
 21254 ;; Parameters:    Size  Location     Type
 21255 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21256 ;;		 -> SPI1(11), SPI2(11), 
 21257 ;; Auto vars:     Size  Location     Type
 21258 ;;		None
 21259 ;; Return value:  Size  Location     Type
 21260 ;;                  1    wreg      void 
 21261 ;; Registers used:
 21262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21263 ;; Tracked objects:
 21264 ;;		On entry : 0/0
 21265 ;;		On exit  : 0/0
 21266 ;;		Unchanged: 0/0
 21267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21272 ;;Total ram usage:        2 bytes
 21273 ;; Hardware stack levels used:    1
 21274 ;; Hardware stack levels required when called:    7
 21275 ;; This function calls:
 21276 ;;		Nothing
 21277 ;; This function is called by:
 21278 ;;		_SPI_Init
 21279 ;; This function uses a non-reentrant model
 21280 ;;
 21281                           
 21282                           	psect	text101
 21283  01617C                     __ptext101:
 21284                           	opt stack 0
 21285  01617C                     _SPI_DisableISR:
 21286                           	opt stack 19
 21287                           
 21288                           ;SPI.c: 183: switch (pInput->mChannel)
 21289                           
 21290                           ;incstack = 0
 21291  01617C  D004               	goto	l654
 21292  01617E                     l655:
 21293                           
 21294                           ; BSR set to: 0
 21295  01617E  969D               	bcf	3997,3,c	;volatile
 21296  016180  0012               	return	
 21297  016182                     l657:
 21298                           
 21299                           ; BSR set to: 0
 21300  016182  9EA3               	bcf	4003,7,c	;volatile
 21301                           
 21302                           ; BSR set to: 0
 21303                           ;SPI.c: 188: };
 21304                           
 21305                           ; BSR set to: 0
 21306                           
 21307                           ;SPI.c: 187: default: return;
 21308  016184  0012               	return	
 21309  016186                     l654:
 21310                           
 21311                           ; BSR set to: 0
 21312  016186  0100               	movlb	0	; () banked
 21313  016188  EE20 F002          	lfsr	2,2
 21314  01618C  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21315  01618E  26D9               	addwf	fsr2l,f,c
 21316  016190  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21317  016192  22DA               	addwfc	fsr2h,f,c
 21318  016194  50DF               	movf	indf2,w,c
 21319                           
 21320                           ; Switch size 1, requested type "space"
 21321                           ; Number of cases is 2, Range of values is 0 to 1
 21322                           ; switch strategies available:
 21323                           ; Name         Instructions Cycles
 21324                           ; simple_byte            7     4 (average)
 21325                           ;	Chosen strategy is simple_byte
 21326  016196  0A00               	xorlw	0	; case 0
 21327  016198  B4D8               	btfsc	status,2,c
 21328  01619A  D7F1               	goto	l655
 21329  01619C  0A01               	xorlw	1	; case 1
 21330  01619E  A4D8               	btfss	status,2,c
 21331  0161A0  0012               	return	
 21332  0161A2  D7EF               	goto	l657
 21333  0161A4                     __end_of_SPI_DisableISR:
 21334                           	opt stack 0
 21335                           tosu	equ	0xFFF
 21336                           tosh	equ	0xFFE
 21337                           tosl	equ	0xFFD
 21338                           pclath	equ	0xFFA
 21339                           tblptru	equ	0xFF8
 21340                           tblptrh	equ	0xFF7
 21341                           tblptrl	equ	0xFF6
 21342                           tablat	equ	0xFF5
 21343                           prodh	equ	0xFF4
 21344                           prodl	equ	0xFF3
 21345                           intcon	equ	0xFF2
 21346                           postinc0	equ	0xFEE
 21347                           wreg	equ	0xFE8
 21348                           indf1	equ	0xFE7
 21349                           postdec1	equ	0xFE5
 21350                           fsr1h	equ	0xFE2
 21351                           fsr1l	equ	0xFE1
 21352                           indf2	equ	0xFDF
 21353                           postinc2	equ	0xFDE
 21354                           postdec2	equ	0xFDD
 21355                           plusw2	equ	0xFDB
 21356                           fsr2h	equ	0xFDA
 21357                           fsr2l	equ	0xFD9
 21358                           status	equ	0xFD8
 21359                           
 21360 ;; *************** function _SPI_DCS *****************
 21361 ;; Defined at:
 21362 ;;		line 219 in file "Library/SPI.c"
 21363 ;; Parameters:    Size  Location     Type
 21364 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21365 ;;		 -> SPI1(11), SPI2(11), 
 21366 ;; Auto vars:     Size  Location     Type
 21367 ;;		None
 21368 ;; Return value:  Size  Location     Type
 21369 ;;                  1    wreg      void 
 21370 ;; Registers used:
 21371 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21372 ;; Tracked objects:
 21373 ;;		On entry : 0/0
 21374 ;;		On exit  : 0/0
 21375 ;;		Unchanged: 0/0
 21376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21381 ;;Total ram usage:        2 bytes
 21382 ;; Hardware stack levels used:    1
 21383 ;; Hardware stack levels required when called:    7
 21384 ;; This function calls:
 21385 ;;		Nothing
 21386 ;; This function is called by:
 21387 ;;		_SPI_Init
 21388 ;; This function uses a non-reentrant model
 21389 ;;
 21390                           
 21391                           	psect	text102
 21392  01603C                     __ptext102:
 21393                           	opt stack 0
 21394  01603C                     _SPI_DCS:
 21395                           	opt stack 19
 21396                           
 21397                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;incstack = 0
 21401  01603C  0100               	movlb	0	; () banked
 21402  01603E  EE20 F002          	lfsr	2,2
 21403  016042  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 21404  016044  26D9               	addwf	fsr2l,f,c
 21405  016046  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21406  016048  22DA               	addwfc	fsr2h,f,c
 21407  01604A  50DF               	movf	indf2,w,c
 21408  01604C  A4D8               	btfss	status,2,c
 21409  01604E  D007               	goto	l673
 21410                           
 21411                           ; BSR set to: 0
 21412                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21413  016050  C0AB  FFD9         	movff	_PortC+4,fsr2l
 21414  016054  C0AC  FFDA         	movff	_PortC+5,fsr2h
 21415  016058  0100               	movlb	0	; () banked
 21416  01605A  84DF               	bsf	indf2,2,c
 21417  01605C  0012               	return	
 21418  01605E                     l673:
 21419                           
 21420                           ; BSR set to: 0
 21421                           ;SPI.c: 223: else
 21422                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21423                           
 21424                           ; BSR set to: 0
 21425  01605E  C0A1  FFD9         	movff	_PortD+4,fsr2l
 21426  016062  C0A2  FFDA         	movff	_PortD+5,fsr2h
 21427  016066  0100               	movlb	0	; () banked
 21428  016068  8EDF               	bsf	indf2,7,c
 21429  01606A  0012               	return	
 21430  01606C                     __end_of_SPI_DCS:
 21431                           	opt stack 0
 21432                           tosu	equ	0xFFF
 21433                           tosh	equ	0xFFE
 21434                           tosl	equ	0xFFD
 21435                           pclath	equ	0xFFA
 21436                           tblptru	equ	0xFF8
 21437                           tblptrh	equ	0xFF7
 21438                           tblptrl	equ	0xFF6
 21439                           tablat	equ	0xFF5
 21440                           prodh	equ	0xFF4
 21441                           prodl	equ	0xFF3
 21442                           intcon	equ	0xFF2
 21443                           postinc0	equ	0xFEE
 21444                           wreg	equ	0xFE8
 21445                           indf1	equ	0xFE7
 21446                           postdec1	equ	0xFE5
 21447                           fsr1h	equ	0xFE2
 21448                           fsr1l	equ	0xFE1
 21449                           indf2	equ	0xFDF
 21450                           postinc2	equ	0xFDE
 21451                           postdec2	equ	0xFDD
 21452                           plusw2	equ	0xFDB
 21453                           fsr2h	equ	0xFDA
 21454                           fsr2l	equ	0xFD9
 21455                           status	equ	0xFD8
 21456                           
 21457 ;; *************** function _Button_Init *****************
 21458 ;; Defined at:
 21459 ;;		line 18 in file "Library/Button.c"
 21460 ;; Parameters:    Size  Location     Type
 21461 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 21462 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21463 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 21464 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 21465 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21466 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 21467 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21468 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21469 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 21470 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21471 ;; Auto vars:     Size  Location     Type
 21472 ;;		None
 21473 ;; Return value:  Size  Location     Type
 21474 ;;                  1    wreg      void 
 21475 ;; Registers used:
 21476 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21477 ;; Tracked objects:
 21478 ;;		On entry : 0/0
 21479 ;;		On exit  : 0/0
 21480 ;;		Unchanged: 0/0
 21481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21482 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21485 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21486 ;;Total ram usage:       13 bytes
 21487 ;; Hardware stack levels used:    1
 21488 ;; Hardware stack levels required when called:   15
 21489 ;; This function calls:
 21490 ;;		_HMI_InitButtons
 21491 ;;		_MXK_InitDIPSwitch
 21492 ;;		_MXK_InitTestButton
 21493 ;; This function is called by:
 21494 ;;		_HMI_Init
 21495 ;;		_FunctInitButton
 21496 ;; This function uses a non-reentrant model
 21497 ;;
 21498                           
 21499                           	psect	text103
 21500  013B64                     __ptext103:
 21501                           	opt stack 0
 21502  013B64                     _Button_Init:
 21503                           	opt stack 13
 21504                           
 21505                           ;Button.c: 21: if(pInput==(void*)0)
 21506                           
 21507                           ; BSR set to: 0
 21508                           ;incstack = 0
 21509  013B64  0101               	movlb	1	; () banked
 21510  013B66  5100               	movf	Button_Init@pInput& (0+255),w,b
 21511  013B68  0101               	movlb	1	; () banked
 21512  013B6A  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21513  013B6C  B4D8               	btfsc	status,2,c
 21514  013B6E  0012               	return	
 21515                           
 21516                           ; BSR set to: 1
 21517                           ;Button.c: 23: if(pInitIO==(void*)0)
 21518                           
 21519                           ; BSR set to: 1
 21520                           
 21521                           ; BSR set to: 1
 21522                           ;Button.c: 22: return;
 21523  013B70  0101               	movlb	1	; () banked
 21524  013B72  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21525  013B74  0101               	movlb	1	; () banked
 21526  013B76  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21527  013B78  0101               	movlb	1	; () banked
 21528  013B7A  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21529  013B7C  B4D8               	btfsc	status,2,c
 21530  013B7E  0012               	return	
 21531                           
 21532                           ; BSR set to: 1
 21533                           ;Button.c: 25: if(pGetState==(void*)0)
 21534                           
 21535                           ; BSR set to: 1
 21536                           
 21537                           ; BSR set to: 1
 21538                           ;Button.c: 24: return;
 21539  013B80  0101               	movlb	1	; () banked
 21540  013B82  5107               	movf	Button_Init@pGetState& (0+255),w,b
 21541  013B84  0101               	movlb	1	; () banked
 21542  013B86  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21543  013B88  0101               	movlb	1	; () banked
 21544  013B8A  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21545  013B8C  B4D8               	btfsc	status,2,c
 21546  013B8E  0012               	return	
 21547                           
 21548                           ; BSR set to: 1
 21549                           ;Button.c: 27: if(pFunction==(void*)0)
 21550                           
 21551                           ; BSR set to: 1
 21552                           
 21553                           ; BSR set to: 1
 21554                           ;Button.c: 26: return;
 21555  013B90  0101               	movlb	1	; () banked
 21556  013B92  510A               	movf	Button_Init@pFunction& (0+255),w,b
 21557  013B94  0101               	movlb	1	; () banked
 21558  013B96  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21559  013B98  0101               	movlb	1	; () banked
 21560  013B9A  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21561  013B9C  B4D8               	btfsc	status,2,c
 21562  013B9E  0012               	return	
 21563                           
 21564                           ; BSR set to: 1
 21565                           ;Button.c: 30: if(pThreshold == 0)
 21566                           
 21567                           ; BSR set to: 1
 21568                           
 21569                           ; BSR set to: 1
 21570                           ;Button.c: 28: return;
 21571  013BA0  0101               	movlb	1	; () banked
 21572  013BA2  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 21573  013BA4  0101               	movlb	1	; () banked
 21574  013BA6  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21575  013BA8  A4D8               	btfss	status,2,c
 21576  013BAA  D005               	goto	l8
 21577                           
 21578                           ; BSR set to: 1
 21579                           ;Button.c: 31: pThreshold = 1;
 21580  013BAC  0E00               	movlw	0
 21581  013BAE  0101               	movlb	1	; () banked
 21582  013BB0  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21583  013BB2  0E01               	movlw	1
 21584  013BB4  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21585  013BB6                     l8:
 21586                           
 21587                           ; BSR set to: 1
 21588                           ;Button.c: 34: pInput->mState = 0;
 21589                           
 21590                           ; BSR set to: 1
 21591  013BB6  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 21592  013BBA  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21593  013BBE  0E00               	movlw	0
 21594  013BC0  6EDF               	movwf	indf2,c
 21595                           
 21596                           ; BSR set to: 1
 21597                           ;Button.c: 35: pInput->mCount = 0;
 21598  013BC2  0101               	movlb	1	; () banked
 21599  013BC4  EE20 F001          	lfsr	2,1
 21600  013BC8  5100               	movf	Button_Init@pInput& (0+255),w,b
 21601  013BCA  26D9               	addwf	fsr2l,f,c
 21602  013BCC  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21603  013BCE  22DA               	addwfc	fsr2h,f,c
 21604  013BD0  0E00               	movlw	0
 21605  013BD2  6EDF               	movwf	indf2,c
 21606                           
 21607                           ; BSR set to: 1
 21608                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21609  013BD4  0101               	movlb	1	; () banked
 21610  013BD6  EE20 F002          	lfsr	2,2
 21611  013BDA  5100               	movf	Button_Init@pInput& (0+255),w,b
 21612  013BDC  26D9               	addwf	fsr2l,f,c
 21613  013BDE  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21614  013BE0  22DA               	addwfc	fsr2h,f,c
 21615  013BE2  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 21616  013BE6  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21617                           
 21618                           ; BSR set to: 1
 21619                           ;Button.c: 37: pInput->mFunction = pFunction;
 21620  013BEA  0101               	movlb	1	; () banked
 21621  013BEC  EE20 F004          	lfsr	2,4
 21622  013BF0  5100               	movf	Button_Init@pInput& (0+255),w,b
 21623  013BF2  26D9               	addwf	fsr2l,f,c
 21624  013BF4  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21625  013BF6  22DA               	addwfc	fsr2h,f,c
 21626  013BF8  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 21627  013BFC  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21628  013C00  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21629                           
 21630                           ; BSR set to: 1
 21631                           ;Button.c: 38: pInput->mGetState = pGetState;
 21632  013C04  0101               	movlb	1	; () banked
 21633  013C06  EE20 F007          	lfsr	2,7
 21634  013C0A  5100               	movf	Button_Init@pInput& (0+255),w,b
 21635  013C0C  26D9               	addwf	fsr2l,f,c
 21636  013C0E  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21637  013C10  22DA               	addwfc	fsr2h,f,c
 21638  013C12  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 21639  013C16  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21640  013C1A  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21641                           
 21642                           ; BSR set to: 1
 21643                           ;Button.c: 41: pInitIO();
 21644  013C1E  D801               	call	u10528
 21645  013C20  0012               	return	
 21646  013C22                     u10528:
 21647  013C22  0005               	push	
 21648  013C24  6EFA               	movwf	pclath,c
 21649  013C26  0101               	movlb	1	; () banked
 21650  013C28  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21651  013C2A  6EFD               	movwf	tosl,c
 21652  013C2C  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21653  013C2E  6EFE               	movwf	tosh,c
 21654  013C30  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21655  013C32  6EFF               	movwf	tosu,c
 21656  013C34  50FA               	movf	pclath,w,c
 21657  013C36  0012               	return		;indir
 21658  013C38                     __end_of_Button_Init:
 21659                           	opt stack 0
 21660                           tosu	equ	0xFFF
 21661                           tosh	equ	0xFFE
 21662                           tosl	equ	0xFFD
 21663                           pclath	equ	0xFFA
 21664                           tblptru	equ	0xFF8
 21665                           tblptrh	equ	0xFF7
 21666                           tblptrl	equ	0xFF6
 21667                           tablat	equ	0xFF5
 21668                           prodh	equ	0xFF4
 21669                           prodl	equ	0xFF3
 21670                           intcon	equ	0xFF2
 21671                           postinc0	equ	0xFEE
 21672                           wreg	equ	0xFE8
 21673                           indf1	equ	0xFE7
 21674                           postdec1	equ	0xFE5
 21675                           fsr1h	equ	0xFE2
 21676                           fsr1l	equ	0xFE1
 21677                           indf2	equ	0xFDF
 21678                           postinc2	equ	0xFDE
 21679                           postdec2	equ	0xFDD
 21680                           plusw2	equ	0xFDB
 21681                           fsr2h	equ	0xFDA
 21682                           fsr2l	equ	0xFD9
 21683                           status	equ	0xFD8
 21684                           
 21685 ;; *************** function _MXK_InitDIPSwitch *****************
 21686 ;; Defined at:
 21687 ;;		line 20 in file "Library/MXK.c"
 21688 ;; Parameters:    Size  Location     Type
 21689 ;;		None
 21690 ;; Auto vars:     Size  Location     Type
 21691 ;;		None
 21692 ;; Return value:  Size  Location     Type
 21693 ;;                  1    wreg      void 
 21694 ;; Registers used:
 21695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21696 ;; Tracked objects:
 21697 ;;		On entry : 0/0
 21698 ;;		On exit  : 0/0
 21699 ;;		Unchanged: 0/0
 21700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21705 ;;Total ram usage:        0 bytes
 21706 ;; Hardware stack levels used:    1
 21707 ;; Hardware stack levels required when called:   14
 21708 ;; This function calls:
 21709 ;;		_Port_SetQuadType
 21710 ;; This function is called by:
 21711 ;;		_FunctInitButton
 21712 ;;		_Button_Init
 21713 ;; This function uses a non-reentrant model
 21714 ;;
 21715                           
 21716                           	psect	text104
 21717  0162E6                     __ptext104:
 21718                           	opt stack 0
 21719  0162E6                     _MXK_InitDIPSwitch:
 21720                           	opt stack 13
 21721                           
 21722                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 21723                           
 21724                           ;incstack = 0
 21725  0162E6  0E9D               	movlw	low _PortD
 21726  0162E8  0100               	movlb	0	; () banked
 21727  0162EA  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 21728  0162EC  0E00               	movlw	high _PortD
 21729  0162EE  0100               	movlb	0	; () banked
 21730  0162F0  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 21731  0162F2  0E00               	movlw	0
 21732  0162F4  0100               	movlb	0	; () banked
 21733  0162F6  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 21734  0162F8  0E00               	movlw	0
 21735  0162FA  0100               	movlb	0	; () banked
 21736  0162FC  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 21737  0162FE  ECA7  F08C         	call	_Port_SetQuadType	;wreg free
 21738  016302  0012               	return		;funcret
 21739  016304                     __end_of_MXK_InitDIPSwitch:
 21740                           	opt stack 0
 21741                           tosu	equ	0xFFF
 21742                           tosh	equ	0xFFE
 21743                           tosl	equ	0xFFD
 21744                           pclath	equ	0xFFA
 21745                           tblptru	equ	0xFF8
 21746                           tblptrh	equ	0xFF7
 21747                           tblptrl	equ	0xFF6
 21748                           tablat	equ	0xFF5
 21749                           prodh	equ	0xFF4
 21750                           prodl	equ	0xFF3
 21751                           intcon	equ	0xFF2
 21752                           postinc0	equ	0xFEE
 21753                           wreg	equ	0xFE8
 21754                           indf1	equ	0xFE7
 21755                           postdec1	equ	0xFE5
 21756                           fsr1h	equ	0xFE2
 21757                           fsr1l	equ	0xFE1
 21758                           indf2	equ	0xFDF
 21759                           postinc2	equ	0xFDE
 21760                           postdec2	equ	0xFDD
 21761                           plusw2	equ	0xFDB
 21762                           fsr2h	equ	0xFDA
 21763                           fsr2l	equ	0xFD9
 21764                           status	equ	0xFD8
 21765                           
 21766 ;; *************** function _HMI_InitButtons *****************
 21767 ;; Defined at:
 21768 ;;		line 21 in file "HMI.c"
 21769 ;; Parameters:    Size  Location     Type
 21770 ;;		None
 21771 ;; Auto vars:     Size  Location     Type
 21772 ;;		None
 21773 ;; Return value:  Size  Location     Type
 21774 ;;                  1    wreg      void 
 21775 ;; Registers used:
 21776 ;;		wreg, status,2
 21777 ;; Tracked objects:
 21778 ;;		On entry : 0/0
 21779 ;;		On exit  : 0/0
 21780 ;;		Unchanged: 0/0
 21781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21786 ;;Total ram usage:        0 bytes
 21787 ;; Hardware stack levels used:    1
 21788 ;; Hardware stack levels required when called:    7
 21789 ;; This function calls:
 21790 ;;		Nothing
 21791 ;; This function is called by:
 21792 ;;		_HMI_Init
 21793 ;;		_Button_Init
 21794 ;; This function uses a non-reentrant model
 21795 ;;
 21796                           
 21797                           	psect	text105
 21798  0165AA                     __ptext105:
 21799                           	opt stack 0
 21800  0165AA                     _HMI_InitButtons:
 21801                           	opt stack 20
 21802                           
 21803                           ;HMI.c: 23: TRISE = 0xFC;
 21804                           
 21805                           ;incstack = 0
 21806  0165AA  0EFC               	movlw	252
 21807  0165AC  6E96               	movwf	3990,c	;volatile
 21808  0165AE  0012               	return		;funcret
 21809  0165B0                     __end_of_HMI_InitButtons:
 21810                           	opt stack 0
 21811                           tosu	equ	0xFFF
 21812                           tosh	equ	0xFFE
 21813                           tosl	equ	0xFFD
 21814                           pclath	equ	0xFFA
 21815                           tblptru	equ	0xFF8
 21816                           tblptrh	equ	0xFF7
 21817                           tblptrl	equ	0xFF6
 21818                           tablat	equ	0xFF5
 21819                           prodh	equ	0xFF4
 21820                           prodl	equ	0xFF3
 21821                           intcon	equ	0xFF2
 21822                           postinc0	equ	0xFEE
 21823                           wreg	equ	0xFE8
 21824                           indf1	equ	0xFE7
 21825                           postdec1	equ	0xFE5
 21826                           fsr1h	equ	0xFE2
 21827                           fsr1l	equ	0xFE1
 21828                           indf2	equ	0xFDF
 21829                           postinc2	equ	0xFDE
 21830                           postdec2	equ	0xFDD
 21831                           plusw2	equ	0xFDB
 21832                           fsr2h	equ	0xFDA
 21833                           fsr2l	equ	0xFD9
 21834                           status	equ	0xFD8
 21835                           
 21836 ;; *************** function _MXK_InitTestButton *****************
 21837 ;; Defined at:
 21838 ;;		line 10 in file "Library/MXK.c"
 21839 ;; Parameters:    Size  Location     Type
 21840 ;;		None
 21841 ;; Auto vars:     Size  Location     Type
 21842 ;;		None
 21843 ;; Return value:  Size  Location     Type
 21844 ;;                  1    wreg      void 
 21845 ;; Registers used:
 21846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21847 ;; Tracked objects:
 21848 ;;		On entry : 0/0
 21849 ;;		On exit  : 0/0
 21850 ;;		Unchanged: 0/0
 21851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21856 ;;Total ram usage:        0 bytes
 21857 ;; Hardware stack levels used:    1
 21858 ;; Hardware stack levels required when called:   12
 21859 ;; This function calls:
 21860 ;;		_Port_SetPinType
 21861 ;; This function is called by:
 21862 ;;		_FunctInitButton
 21863 ;;		_Button_Init
 21864 ;; This function uses a non-reentrant model
 21865 ;;
 21866                           
 21867                           	psect	text106
 21868  016304                     __ptext106:
 21869                           	opt stack 0
 21870  016304                     _MXK_InitTestButton:
 21871                           	opt stack 15
 21872                           
 21873                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 21874                           
 21875                           ;incstack = 0
 21876  016304  0EAA               	movlw	low _PortB
 21877  016306  0100               	movlb	0	; () banked
 21878  016308  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 21879  01630A  0E03               	movlw	high _PortB
 21880  01630C  0100               	movlb	0	; () banked
 21881  01630E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21882  016310  0E04               	movlw	4
 21883  016312  0100               	movlb	0	; () banked
 21884  016314  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 21885  016316  0E00               	movlw	0
 21886  016318  0100               	movlb	0	; () banked
 21887  01631A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 21888  01631C  ECB4  F092         	call	_Port_SetPinType	;wreg free
 21889  016320  0012               	return		;funcret
 21890  016322                     __end_of_MXK_InitTestButton:
 21891                           	opt stack 0
 21892                           tosu	equ	0xFFF
 21893                           tosh	equ	0xFFE
 21894                           tosl	equ	0xFFD
 21895                           pclath	equ	0xFFA
 21896                           tblptru	equ	0xFF8
 21897                           tblptrh	equ	0xFF7
 21898                           tblptrl	equ	0xFF6
 21899                           tablat	equ	0xFF5
 21900                           prodh	equ	0xFF4
 21901                           prodl	equ	0xFF3
 21902                           intcon	equ	0xFF2
 21903                           postinc0	equ	0xFEE
 21904                           wreg	equ	0xFE8
 21905                           indf1	equ	0xFE7
 21906                           postdec1	equ	0xFE5
 21907                           fsr1h	equ	0xFE2
 21908                           fsr1l	equ	0xFE1
 21909                           indf2	equ	0xFDF
 21910                           postinc2	equ	0xFDE
 21911                           postdec2	equ	0xFDD
 21912                           plusw2	equ	0xFDB
 21913                           fsr2h	equ	0xFDA
 21914                           fsr2l	equ	0xFD9
 21915                           status	equ	0xFD8
 21916                           
 21917 ;; *************** function _Port_SetPinType *****************
 21918 ;; Defined at:
 21919 ;;		line 189 in file "Library/Port.c"
 21920 ;; Parameters:    Size  Location     Type
 21921 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21922 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21923 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21924 ;;  pPin            1   40[BANK0 ] enum E6750
 21925 ;;  pType           1   41[BANK0 ] enum E6795
 21926 ;; Auto vars:     Size  Location     Type
 21927 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 21928 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 21929 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 21930 ;;  Output          1   42[BANK0 ] enum E6475
 21931 ;; Return value:  Size  Location     Type
 21932 ;;                  1    wreg      enum E6475
 21933 ;; Registers used:
 21934 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21935 ;; Tracked objects:
 21936 ;;		On entry : 0/0
 21937 ;;		On exit  : 0/0
 21938 ;;		Unchanged: 0/0
 21939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21940 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21941 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21943 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;Total ram usage:        7 bytes
 21945 ;; Hardware stack levels used:    1
 21946 ;; Hardware stack levels required when called:   11
 21947 ;; This function calls:
 21948 ;;		_Byte_SetBit
 21949 ;;		_PortProperty_Valid
 21950 ;;		_Word_SetPair
 21951 ;; This function is called by:
 21952 ;;		_Configure_GPIOs
 21953 ;;		_LED_Init
 21954 ;;		_Port_Init
 21955 ;;		_SPI_Init
 21956 ;;		_Motor_Init
 21957 ;;		_MXK_InitTestButton
 21958 ;;		_MXK_Init
 21959 ;;		_I2C_Init
 21960 ;; This function uses a non-reentrant model
 21961 ;;
 21962                           
 21963                           	psect	text107
 21964  012568                     __ptext107:
 21965                           	opt stack 0
 21966  012568                     _Port_SetPinType:
 21967                           	opt stack 17
 21968                           
 21969                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 21970                           
 21971                           ;incstack = 0
 21972  012568  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 21973  01256C  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 21974  012570  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 21975  012574  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 21976                           
 21977                           ;Port.c: 192: ePinError Output = ePinErrorState;
 21978  012578  0E05               	movlw	5
 21979  01257A  0100               	movlb	0	; () banked
 21980  01257C  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 21981                           
 21982                           ;Port.c: 193: switch (pType)
 21983  01257E  D0B5               	goto	l412
 21984  012580                     
 21985                           ; BSR set to: 0
 21986                           ;Port.c: 197: {
 21987                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21988                           
 21989                           ; BSR set to: 0
 21990  012580  0100               	movlb	0	; () banked
 21991  012582  EE20 F002          	lfsr	2,2
 21992  012586  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 21993  012588  26D9               	addwf	fsr2l,f,c
 21994  01258A  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21995  01258C  22DA               	addwfc	fsr2h,f,c
 21996  01258E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21997  012592  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21998  012596  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21999  01259A  0E01               	movlw	1
 22000  01259C  0100               	movlb	0	; () banked
 22001  01259E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22002  0125A0  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22003                           
 22004                           ;Port.c: 203: break;
 22005  0125A4  D0B0               	goto	l414
 22006  0125A6                     
 22007                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22008  0125A6  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22009  0125AA  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22010  0125AE  0E01               	movlw	1
 22011  0125B0  0100               	movlb	0	; () banked
 22012  0125B2  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22013  0125B4  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22014  0125B8  ECD6  F0A7         	call	_PortProperty_Valid	;wreg free
 22015  0125BC  0100               	movlb	0	; () banked
 22016  0125BE  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22017  0125C0  0100               	movlb	0	; () banked
 22018  0125C2  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22019  0125C4  A4D8               	btfss	status,2,c
 22020  0125C6  0012               	return	
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;Port.c: 208: {
 22024                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22025  0125C8  0100               	movlb	0	; () banked
 22026  0125CA  EE20 F002          	lfsr	2,2
 22027  0125CE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22028  0125D0  26D9               	addwf	fsr2l,f,c
 22029  0125D2  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22030  0125D4  22DA               	addwfc	fsr2h,f,c
 22031  0125D6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22032  0125DA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22033  0125DE  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22034  0125E2  0E00               	movlw	0
 22035  0125E4  0100               	movlb	0	; () banked
 22036  0125E6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22037  0125E8  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22038                           
 22039                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22040  0125EC  0100               	movlb	0	; () banked
 22041  0125EE  EE20 F004          	lfsr	2,4
 22042  0125F2  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22043  0125F4  26D9               	addwf	fsr2l,f,c
 22044  0125F6  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22045  0125F8  22DA               	addwfc	fsr2h,f,c
 22046  0125FA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22047  0125FE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22048  012602  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22049  012606  0E00               	movlw	0
 22050  012608  0100               	movlb	0	; () banked
 22051  01260A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22052  01260C  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22053                           
 22054                           ;Port.c: 214: break;
 22055  012610  D07A               	goto	l414
 22056  012612                     
 22057                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22058                           
 22059                           ;Port.c: 218: case eTypeOutputOpenSource:
 22060  012612  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22061  012616  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22062  01261A  0E02               	movlw	2
 22063  01261C  0100               	movlb	0	; () banked
 22064  01261E  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22065  012620  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22066  012624  ECD6  F0A7         	call	_PortProperty_Valid	;wreg free
 22067  012628  0100               	movlb	0	; () banked
 22068  01262A  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22069  01262C  0100               	movlb	0	; () banked
 22070  01262E  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22071  012630  A4D8               	btfss	status,2,c
 22072  012632  0012               	return	
 22073                           
 22074                           ; BSR set to: 0
 22075                           ;Port.c: 220: {
 22076                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22077  012634  0100               	movlb	0	; () banked
 22078  012636  EE20 F002          	lfsr	2,2
 22079  01263A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22080  01263C  26D9               	addwf	fsr2l,f,c
 22081  01263E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22082  012640  22DA               	addwfc	fsr2h,f,c
 22083  012642  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22084  012646  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22085  01264A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22086  01264E  0E01               	movlw	1
 22087  012650  0100               	movlb	0	; () banked
 22088  012652  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22089  012654  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22090                           
 22091                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22092  012658  0100               	movlb	0	; () banked
 22093  01265A  EE20 F004          	lfsr	2,4
 22094  01265E  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22095  012660  26D9               	addwf	fsr2l,f,c
 22096  012662  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22097  012664  22DA               	addwfc	fsr2h,f,c
 22098  012666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22099  01266A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22100  01266E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22101  012672  0E01               	movlw	1
 22102  012674  0100               	movlb	0	; () banked
 22103  012676  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22104  012678  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22105                           
 22106                           ;Port.c: 226: break;
 22107  01267C  D044               	goto	l414
 22108  01267E                     
 22109                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22110                           
 22111                           ;Port.c: 230: case eTypeOutputPushPull:
 22112  01267E  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22113  012682  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22114  012686  0E00               	movlw	0
 22115  012688  0100               	movlb	0	; () banked
 22116  01268A  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22117  01268C  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22118  012690  ECD6  F0A7         	call	_PortProperty_Valid	;wreg free
 22119  012694  0100               	movlb	0	; () banked
 22120  012696  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22121  012698  0100               	movlb	0	; () banked
 22122  01269A  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22123  01269C  A4D8               	btfss	status,2,c
 22124  01269E  0012               	return	
 22125                           
 22126                           ; BSR set to: 0
 22127                           ;Port.c: 232: {
 22128                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22129  0126A0  0100               	movlb	0	; () banked
 22130  0126A2  EE20 F002          	lfsr	2,2
 22131  0126A6  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22132  0126A8  26D9               	addwf	fsr2l,f,c
 22133  0126AA  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22134  0126AC  22DA               	addwfc	fsr2h,f,c
 22135  0126AE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22136  0126B2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22137  0126B6  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22138  0126BA  0E00               	movlw	0
 22139  0126BC  0100               	movlb	0	; () banked
 22140  0126BE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22141  0126C0  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22142                           
 22143                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22144  0126C4  0100               	movlb	0	; () banked
 22145  0126C6  EE20 F004          	lfsr	2,4
 22146  0126CA  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22147  0126CC  26D9               	addwf	fsr2l,f,c
 22148  0126CE  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22149  0126D0  22DA               	addwfc	fsr2h,f,c
 22150  0126D2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22151  0126D6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22152  0126DA  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22153  0126DE  0E00               	movlw	0
 22154  0126E0  0100               	movlb	0	; () banked
 22155  0126E2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22156  0126E4  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 22157                           
 22158                           ;Port.c: 239: }
 22159                           
 22160                           ;Port.c: 238: break;
 22161  0126E8  D00E               	goto	l414
 22162  0126EA                     l412:
 22163  0126EA  0100               	movlb	0	; () banked
 22164  0126EC  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22165                           
 22166                           ; Switch size 1, requested type "space"
 22167                           ; Number of cases is 4, Range of values is 0 to 3
 22168                           ; switch strategies available:
 22169                           ; Name         Instructions Cycles
 22170                           ; simple_byte           13     7 (average)
 22171                           ;	Chosen strategy is simple_byte
 22172  0126EE  0A00               	xorlw	0	; case 0
 22173  0126F0  B4D8               	btfsc	status,2,c
 22174  0126F2  D746               	goto	l413
 22175  0126F4  0A01               	xorlw	1	; case 1
 22176  0126F6  B4D8               	btfsc	status,2,c
 22177  0126F8  D756               	goto	l415
 22178  0126FA  0A03               	xorlw	3	; case 2
 22179  0126FC  B4D8               	btfsc	status,2,c
 22180  0126FE  D789               	goto	l417
 22181  012700  0A01               	xorlw	1	; case 3
 22182  012702  B4D8               	btfsc	status,2,c
 22183  012704  D7BC               	goto	l421
 22184  012706                     l414:
 22185                           
 22186                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22187                           
 22188                           ; BSR set to: 0
 22189  012706  0E08               	movlw	8
 22190  012708  0100               	movlb	0	; () banked
 22191  01270A  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22192  01270C  0100               	movlb	0	; () banked
 22193  01270E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22194  012710  0E00               	movlw	0
 22195  012712  0100               	movlb	0	; () banked
 22196  012714  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22197  012716  0100               	movlb	0	; () banked
 22198  012718  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22199  01271A  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22200  01271E  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22201  012722  EC18  F0AE         	call	_Word_SetPair	;wreg free
 22202  012726  0012               	return	
 22203  012728                     __end_of_Port_SetPinType:
 22204                           	opt stack 0
 22205                           tosu	equ	0xFFF
 22206                           tosh	equ	0xFFE
 22207                           tosl	equ	0xFFD
 22208                           pclath	equ	0xFFA
 22209                           tblptru	equ	0xFF8
 22210                           tblptrh	equ	0xFF7
 22211                           tblptrl	equ	0xFF6
 22212                           tablat	equ	0xFF5
 22213                           prodh	equ	0xFF4
 22214                           prodl	equ	0xFF3
 22215                           intcon	equ	0xFF2
 22216                           postinc0	equ	0xFEE
 22217                           wreg	equ	0xFE8
 22218                           indf1	equ	0xFE7
 22219                           postdec1	equ	0xFE5
 22220                           fsr1h	equ	0xFE2
 22221                           fsr1l	equ	0xFE1
 22222                           indf2	equ	0xFDF
 22223                           postinc2	equ	0xFDE
 22224                           postdec2	equ	0xFDD
 22225                           plusw2	equ	0xFDB
 22226                           fsr2h	equ	0xFDA
 22227                           fsr2l	equ	0xFD9
 22228                           status	equ	0xFD8
 22229                           
 22230 ;; *************** function _Port_SetQuadType *****************
 22231 ;; Defined at:
 22232 ;;		line 399 in file "Library/Port.c"
 22233 ;; Parameters:    Size  Location     Type
 22234 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22235 ;;		 -> PortB(10), PortD(10), 
 22236 ;;  pQuad           1   56[BANK0 ] enum E6776
 22237 ;;  pType           1   57[BANK0 ] enum E6795
 22238 ;; Auto vars:     Size  Location     Type
 22239 ;;  Output          1   58[BANK0 ] enum E6475
 22240 ;; Return value:  Size  Location     Type
 22241 ;;                  1    wreg      enum E6475
 22242 ;; Registers used:
 22243 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22244 ;; Tracked objects:
 22245 ;;		On entry : 0/0
 22246 ;;		On exit  : 0/0
 22247 ;;		Unchanged: 0/0
 22248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22249 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22252 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22253 ;;Total ram usage:        5 bytes
 22254 ;; Hardware stack levels used:    1
 22255 ;; Hardware stack levels required when called:   13
 22256 ;; This function calls:
 22257 ;;		_Byte_SetQuad
 22258 ;;		_Port_CheckQuadType
 22259 ;;		_Word_SetPair
 22260 ;; This function is called by:
 22261 ;;		_MXK_InitDIPSwitch
 22262 ;;		_MXK_Init
 22263 ;; This function uses a non-reentrant model
 22264 ;;
 22265                           
 22266                           	psect	text108
 22267  01194E                     __ptext108:
 22268                           	opt stack 0
 22269  01194E                     _Port_SetQuadType:
 22270                           	opt stack 15
 22271                           
 22272                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22273                           
 22274                           ;incstack = 0
 22275  01194E  0E05               	movlw	5
 22276  011950  0100               	movlb	0	; () banked
 22277  011952  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22278                           
 22279                           ;Port.c: 403: switch (pType)
 22280  011954  D0C7               	goto	l476
 22281  011956                     
 22282                           ; BSR set to: 0
 22283                           ;Port.c: 407: {
 22284                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22285                           
 22286                           ; BSR set to: 0
 22287  011956  0100               	movlb	0	; () banked
 22288  011958  EE20 F002          	lfsr	2,2
 22289  01195C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22290  01195E  26D9               	addwf	fsr2l,f,c
 22291  011960  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22292  011962  22DA               	addwfc	fsr2h,f,c
 22293  011964  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22294  011968  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22295  01196C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22296  011970  0E0F               	movlw	15
 22297  011972  0100               	movlb	0	; () banked
 22298  011974  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22299  011976  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22300                           
 22301                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22302  01197A  0100               	movlb	0	; () banked
 22303  01197C  EE20 F004          	lfsr	2,4
 22304  011980  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22305  011982  26D9               	addwf	fsr2l,f,c
 22306  011984  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22307  011986  22DA               	addwfc	fsr2h,f,c
 22308  011988  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22309  01198C  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22310  011990  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22311  011994  0E00               	movlw	0
 22312  011996  0100               	movlb	0	; () banked
 22313  011998  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22314  01199A  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22315                           
 22316                           ;Port.c: 413: }
 22317                           ;Port.c: 415: break;
 22318  01199E  D0B0               	goto	l478
 22319  0119A0                     
 22320                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22321  0119A0  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22322  0119A4  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22323  0119A8  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22324  0119AC  0E03               	movlw	3
 22325  0119AE  0100               	movlb	0	; () banked
 22326  0119B0  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22327  0119B2  EC1B  F0AC         	call	_Port_CheckQuadType	;wreg free
 22328  0119B6  0100               	movlb	0	; () banked
 22329  0119B8  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22330  0119BA  0100               	movlb	0	; () banked
 22331  0119BC  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22332  0119BE  A4D8               	btfss	status,2,c
 22333  0119C0  0012               	return	
 22334                           
 22335                           ; BSR set to: 0
 22336                           ;Port.c: 418: {
 22337                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22338  0119C2  0100               	movlb	0	; () banked
 22339  0119C4  EE20 F002          	lfsr	2,2
 22340  0119C8  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22341  0119CA  26D9               	addwf	fsr2l,f,c
 22342  0119CC  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22343  0119CE  22DA               	addwfc	fsr2h,f,c
 22344  0119D0  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22345  0119D4  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22346  0119D8  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22347  0119DC  0E00               	movlw	0
 22348  0119DE  0100               	movlb	0	; () banked
 22349  0119E0  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22350  0119E2  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22351                           
 22352                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22353  0119E6  0100               	movlb	0	; () banked
 22354  0119E8  EE20 F004          	lfsr	2,4
 22355  0119EC  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22356  0119EE  26D9               	addwf	fsr2l,f,c
 22357  0119F0  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22358  0119F2  22DA               	addwfc	fsr2h,f,c
 22359  0119F4  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22360  0119F8  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22361  0119FC  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22362  011A00  0E00               	movlw	0
 22363  011A02  0100               	movlb	0	; () banked
 22364  011A04  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22365  011A06  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22366                           
 22367                           ;Port.c: 424: }
 22368  011A0A  D07A               	goto	l478
 22369  011A0C                     
 22370                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22371  011A0C  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22372  011A10  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22373  011A14  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22374  011A18  0E03               	movlw	3
 22375  011A1A  0100               	movlb	0	; () banked
 22376  011A1C  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22377  011A1E  EC1B  F0AC         	call	_Port_CheckQuadType	;wreg free
 22378  011A22  0100               	movlb	0	; () banked
 22379  011A24  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22380  011A26  0100               	movlb	0	; () banked
 22381  011A28  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22382  011A2A  A4D8               	btfss	status,2,c
 22383  011A2C  0012               	return	
 22384                           
 22385                           ; BSR set to: 0
 22386                           ;Port.c: 429: {
 22387                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22388  011A2E  0100               	movlb	0	; () banked
 22389  011A30  EE20 F002          	lfsr	2,2
 22390  011A34  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22391  011A36  26D9               	addwf	fsr2l,f,c
 22392  011A38  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22393  011A3A  22DA               	addwfc	fsr2h,f,c
 22394  011A3C  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22395  011A40  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22396  011A44  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22397  011A48  0E0F               	movlw	15
 22398  011A4A  0100               	movlb	0	; () banked
 22399  011A4C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22400  011A4E  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22401                           
 22402                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22403  011A52  0100               	movlb	0	; () banked
 22404  011A54  EE20 F004          	lfsr	2,4
 22405  011A58  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22406  011A5A  26D9               	addwf	fsr2l,f,c
 22407  011A5C  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22408  011A5E  22DA               	addwfc	fsr2h,f,c
 22409  011A60  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22410  011A64  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22411  011A68  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22412  011A6C  0E0F               	movlw	15
 22413  011A6E  0100               	movlb	0	; () banked
 22414  011A70  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22415  011A72  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22416                           
 22417                           ;Port.c: 435: }
 22418  011A76  D044               	goto	l478
 22419  011A78                     
 22420                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22421  011A78  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22422  011A7C  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22423  011A80  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22424  011A84  0E03               	movlw	3
 22425  011A86  0100               	movlb	0	; () banked
 22426  011A88  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22427  011A8A  EC1B  F0AC         	call	_Port_CheckQuadType	;wreg free
 22428  011A8E  0100               	movlb	0	; () banked
 22429  011A90  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22430  011A92  0100               	movlb	0	; () banked
 22431  011A94  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22432  011A96  A4D8               	btfss	status,2,c
 22433  011A98  0012               	return	
 22434                           
 22435                           ; BSR set to: 0
 22436                           ;Port.c: 440: {
 22437                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22438  011A9A  0100               	movlb	0	; () banked
 22439  011A9C  EE20 F002          	lfsr	2,2
 22440  011AA0  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22441  011AA2  26D9               	addwf	fsr2l,f,c
 22442  011AA4  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22443  011AA6  22DA               	addwfc	fsr2h,f,c
 22444  011AA8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22445  011AAC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22446  011AB0  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22447  011AB4  0E00               	movlw	0
 22448  011AB6  0100               	movlb	0	; () banked
 22449  011AB8  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22450  011ABA  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22451                           
 22452                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22453  011ABE  0100               	movlb	0	; () banked
 22454  011AC0  EE20 F004          	lfsr	2,4
 22455  011AC4  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22456  011AC6  26D9               	addwf	fsr2l,f,c
 22457  011AC8  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22458  011ACA  22DA               	addwfc	fsr2h,f,c
 22459  011ACC  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22460  011AD0  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22461  011AD4  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22462  011AD8  0E00               	movlw	0
 22463  011ADA  0100               	movlb	0	; () banked
 22464  011ADC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22465  011ADE  EC07  F0B1         	call	_Byte_SetQuad	;wreg free
 22466                           
 22467                           ;Port.c: 446: }
 22468  011AE2  D00E               	goto	l478
 22469  011AE4                     l476:
 22470  011AE4  0100               	movlb	0	; () banked
 22471  011AE6  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 22472                           
 22473                           ; Switch size 1, requested type "space"
 22474                           ; Number of cases is 4, Range of values is 0 to 3
 22475                           ; switch strategies available:
 22476                           ; Name         Instructions Cycles
 22477                           ; simple_byte           13     7 (average)
 22478                           ;	Chosen strategy is simple_byte
 22479  011AE8  0A00               	xorlw	0	; case 0
 22480  011AEA  B4D8               	btfsc	status,2,c
 22481  011AEC  D734               	goto	l477
 22482  011AEE  0A01               	xorlw	1	; case 1
 22483  011AF0  B4D8               	btfsc	status,2,c
 22484  011AF2  D756               	goto	l479
 22485  011AF4  0A03               	xorlw	3	; case 2
 22486  011AF6  B4D8               	btfsc	status,2,c
 22487  011AF8  D789               	goto	l483
 22488  011AFA  0A01               	xorlw	1	; case 3
 22489  011AFC  B4D8               	btfsc	status,2,c
 22490  011AFE  D7BC               	goto	l486
 22491  011B00                     l478:
 22492                           
 22493                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22494                           
 22495                           ; BSR set to: 0
 22496  011B00  0E08               	movlw	8
 22497  011B02  0100               	movlb	0	; () banked
 22498  011B04  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22499  011B06  0100               	movlb	0	; () banked
 22500  011B08  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22501  011B0A  0E00               	movlw	0
 22502  011B0C  0100               	movlb	0	; () banked
 22503  011B0E  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22504  011B10  0100               	movlb	0	; () banked
 22505  011B12  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22506  011B14  0100               	movlb	0	; () banked
 22507  011B16  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22508  011B18  0D04               	mullw	4
 22509  011B1A  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 22510  011B1E  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22511  011B22  EC18  F0AE         	call	_Word_SetPair	;wreg free
 22512                           
 22513                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22514  011B26  0E08               	movlw	8
 22515  011B28  0100               	movlb	0	; () banked
 22516  011B2A  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22517  011B2C  0100               	movlb	0	; () banked
 22518  011B2E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22519  011B30  0E00               	movlw	0
 22520  011B32  0100               	movlb	0	; () banked
 22521  011B34  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22522  011B36  0100               	movlb	0	; () banked
 22523  011B38  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22524  011B3A  0100               	movlb	0	; () banked
 22525  011B3C  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22526  011B3E  0D04               	mullw	4
 22527  011B40  28F3               	incf	prodl,w,c
 22528  011B42  0100               	movlb	0	; () banked
 22529  011B44  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22530  011B46  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22531  011B4A  EC18  F0AE         	call	_Word_SetPair	;wreg free
 22532                           
 22533                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22534  011B4E  0E08               	movlw	8
 22535  011B50  0100               	movlb	0	; () banked
 22536  011B52  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22537  011B54  0100               	movlb	0	; () banked
 22538  011B56  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22539  011B58  0E00               	movlw	0
 22540  011B5A  0100               	movlb	0	; () banked
 22541  011B5C  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22542  011B5E  0100               	movlb	0	; () banked
 22543  011B60  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22544  011B62  0100               	movlb	0	; () banked
 22545  011B64  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22546  011B66  0D04               	mullw	4
 22547  011B68  50F3               	movf	prodl,w,c
 22548  011B6A  0F02               	addlw	2
 22549  011B6C  0100               	movlb	0	; () banked
 22550  011B6E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22551  011B70  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22552  011B74  EC18  F0AE         	call	_Word_SetPair	;wreg free
 22553                           
 22554                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22555  011B78  0E08               	movlw	8
 22556  011B7A  0100               	movlb	0	; () banked
 22557  011B7C  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22558  011B7E  0100               	movlb	0	; () banked
 22559  011B80  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22560  011B82  0E00               	movlw	0
 22561  011B84  0100               	movlb	0	; () banked
 22562  011B86  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22563  011B88  0100               	movlb	0	; () banked
 22564  011B8A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22565  011B8C  0100               	movlb	0	; () banked
 22566  011B8E  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22567  011B90  0D04               	mullw	4
 22568  011B92  50F3               	movf	prodl,w,c
 22569  011B94  0F03               	addlw	3
 22570  011B96  0100               	movlb	0	; () banked
 22571  011B98  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22572  011B9A  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22573  011B9E  EC18  F0AE         	call	_Word_SetPair	;wreg free
 22574  011BA2  0012               	return	
 22575  011BA4                     __end_of_Port_SetQuadType:
 22576                           	opt stack 0
 22577                           tosu	equ	0xFFF
 22578                           tosh	equ	0xFFE
 22579                           tosl	equ	0xFFD
 22580                           pclath	equ	0xFFA
 22581                           tblptru	equ	0xFF8
 22582                           tblptrh	equ	0xFF7
 22583                           tblptrl	equ	0xFF6
 22584                           tablat	equ	0xFF5
 22585                           prodh	equ	0xFF4
 22586                           prodl	equ	0xFF3
 22587                           intcon	equ	0xFF2
 22588                           postinc0	equ	0xFEE
 22589                           wreg	equ	0xFE8
 22590                           indf1	equ	0xFE7
 22591                           postdec1	equ	0xFE5
 22592                           fsr1h	equ	0xFE2
 22593                           fsr1l	equ	0xFE1
 22594                           indf2	equ	0xFDF
 22595                           postinc2	equ	0xFDE
 22596                           postdec2	equ	0xFDD
 22597                           plusw2	equ	0xFDB
 22598                           fsr2h	equ	0xFDA
 22599                           fsr2l	equ	0xFD9
 22600                           status	equ	0xFD8
 22601                           
 22602 ;; *************** function _Word_SetPair *****************
 22603 ;; Defined at:
 22604 ;;		line 149 in file "Library/Types.c"
 22605 ;; Parameters:    Size  Location     Type
 22606 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22607 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22608 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22609 ;;  pPair           1   17[BANK0 ] unsigned char 
 22610 ;;  pValue          1   18[BANK0 ] unsigned char 
 22611 ;; Auto vars:     Size  Location     Type
 22612 ;;		None
 22613 ;; Return value:  Size  Location     Type
 22614 ;;                  1    wreg      void 
 22615 ;; Registers used:
 22616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22617 ;; Tracked objects:
 22618 ;;		On entry : 0/0
 22619 ;;		On exit  : 0/0
 22620 ;;		Unchanged: 0/0
 22621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22626 ;;Total ram usage:        4 bytes
 22627 ;; Hardware stack levels used:    1
 22628 ;; Hardware stack levels required when called:    9
 22629 ;; This function calls:
 22630 ;;		_Byte_SetPair
 22631 ;; This function is called by:
 22632 ;;		_Port_SetPinType
 22633 ;;		_Port_SetQuadType
 22634 ;;		_Port_SetType
 22635 ;;		_Port_SetPairType
 22636 ;;		_PortProperty_Init
 22637 ;; This function uses a non-reentrant model
 22638 ;;
 22639                           
 22640                           	psect	text109
 22641  015C30                     __ptext109:
 22642                           	opt stack 0
 22643  015C30                     _Word_SetPair:
 22644                           	opt stack 18
 22645                           
 22646                           ;Types.c: 151: if (pPair >= 4)
 22647                           
 22648                           ;incstack = 0
 22649  015C30  0E03               	movlw	3
 22650  015C32  0100               	movlb	0	; () banked
 22651  015C34  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22652  015C36  D014               	goto	l776
 22653                           
 22654                           ; BSR set to: 0
 22655                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22656  015C38  0E01               	movlw	1
 22657  015C3A  0100               	movlb	0	; () banked
 22658  015C3C  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 22659  015C3E  0100               	movlb	0	; () banked
 22660  015C40  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 22661  015C42  0E00               	movlw	0
 22662  015C44  0100               	movlb	0	; () banked
 22663  015C46  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22664  015C48  0100               	movlb	0	; () banked
 22665  015C4A  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22666  015C4C  0100               	movlb	0	; () banked
 22667  015C4E  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 22668  015C50  0FFC               	addlw	252
 22669  015C52  0100               	movlb	0	; () banked
 22670  015C54  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 22671  015C56  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22672  015C5A  ECF6  F0B0         	call	_Byte_SetPair	;wreg free
 22673  015C5E  0012               	return	
 22674  015C60                     l776:
 22675                           
 22676                           ;Types.c: 153: else
 22677                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22678  015C60  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22679  015C64  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22680  015C68  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22681  015C6C  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22682  015C70  ECF6  F0B0         	call	_Byte_SetPair	;wreg free
 22683  015C74  0012               	return	
 22684  015C76                     __end_of_Word_SetPair:
 22685                           	opt stack 0
 22686                           tosu	equ	0xFFF
 22687                           tosh	equ	0xFFE
 22688                           tosl	equ	0xFFD
 22689                           pclath	equ	0xFFA
 22690                           tblptru	equ	0xFF8
 22691                           tblptrh	equ	0xFF7
 22692                           tblptrl	equ	0xFF6
 22693                           tablat	equ	0xFF5
 22694                           prodh	equ	0xFF4
 22695                           prodl	equ	0xFF3
 22696                           intcon	equ	0xFF2
 22697                           postinc0	equ	0xFEE
 22698                           wreg	equ	0xFE8
 22699                           indf1	equ	0xFE7
 22700                           postdec1	equ	0xFE5
 22701                           fsr1h	equ	0xFE2
 22702                           fsr1l	equ	0xFE1
 22703                           indf2	equ	0xFDF
 22704                           postinc2	equ	0xFDE
 22705                           postdec2	equ	0xFDD
 22706                           plusw2	equ	0xFDB
 22707                           fsr2h	equ	0xFDA
 22708                           fsr2l	equ	0xFD9
 22709                           status	equ	0xFD8
 22710                           
 22711 ;; *************** function _Byte_SetPair *****************
 22712 ;; Defined at:
 22713 ;;		line 83 in file "Library/Types.c"
 22714 ;; Parameters:    Size  Location     Type
 22715 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22716 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22717 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22718 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 22719 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 22720 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 22721 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 22722 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 22723 ;;		 -> NULL(0), 
 22724 ;;  pPair           1   13[BANK0 ] unsigned char 
 22725 ;;  pValue          1   14[BANK0 ] unsigned char 
 22726 ;; Auto vars:     Size  Location     Type
 22727 ;;		None
 22728 ;; Return value:  Size  Location     Type
 22729 ;;                  1    wreg      void 
 22730 ;; Registers used:
 22731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22732 ;; Tracked objects:
 22733 ;;		On entry : 0/0
 22734 ;;		On exit  : 0/0
 22735 ;;		Unchanged: 0/0
 22736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22737 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22740 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22741 ;;Total ram usage:        4 bytes
 22742 ;; Hardware stack levels used:    1
 22743 ;; Hardware stack levels required when called:    8
 22744 ;; This function calls:
 22745 ;;		_Byte_SetZone
 22746 ;; This function is called by:
 22747 ;;		_Word_SetPair
 22748 ;;		_Port_SetPairType
 22749 ;;		_Port_SetPair
 22750 ;; This function uses a non-reentrant model
 22751 ;;
 22752                           
 22753                           	psect	text110
 22754  0161EC                     __ptext110:
 22755                           	opt stack 0
 22756  0161EC                     _Byte_SetPair:
 22757                           	opt stack 18
 22758                           
 22759                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 22760                           
 22761                           ;incstack = 0
 22762  0161EC  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 22763  0161F0  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 22764  0161F4  0E04               	movlw	4
 22765  0161F6  0100               	movlb	0	; () banked
 22766  0161F8  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 22767  0161FA  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 22768  0161FE  0E02               	movlw	2
 22769  016200  0100               	movlb	0	; () banked
 22770  016202  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22771  016204  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 22772  016208  EC21  F0A1         	call	_Byte_SetZone	;wreg free
 22773  01620C  0012               	return		;funcret
 22774  01620E                     __end_of_Byte_SetPair:
 22775                           	opt stack 0
 22776                           tosu	equ	0xFFF
 22777                           tosh	equ	0xFFE
 22778                           tosl	equ	0xFFD
 22779                           pclath	equ	0xFFA
 22780                           tblptru	equ	0xFF8
 22781                           tblptrh	equ	0xFF7
 22782                           tblptrl	equ	0xFF6
 22783                           tablat	equ	0xFF5
 22784                           prodh	equ	0xFF4
 22785                           prodl	equ	0xFF3
 22786                           intcon	equ	0xFF2
 22787                           postinc0	equ	0xFEE
 22788                           wreg	equ	0xFE8
 22789                           indf1	equ	0xFE7
 22790                           postdec1	equ	0xFE5
 22791                           fsr1h	equ	0xFE2
 22792                           fsr1l	equ	0xFE1
 22793                           indf2	equ	0xFDF
 22794                           postinc2	equ	0xFDE
 22795                           postdec2	equ	0xFDD
 22796                           plusw2	equ	0xFDB
 22797                           fsr2h	equ	0xFDA
 22798                           fsr2l	equ	0xFD9
 22799                           status	equ	0xFD8
 22800                           
 22801 ;; *************** function _Port_CheckQuadType *****************
 22802 ;; Defined at:
 22803 ;;		line 126 in file "Library/Port.c"
 22804 ;; Parameters:    Size  Location     Type
 22805 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 22806 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22807 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22808 ;;  pQuad           1   49[BANK0 ] enum E6776
 22809 ;;  pDrive          1   50[BANK0 ] enum E6469
 22810 ;; Auto vars:     Size  Location     Type
 22811 ;;  Output          1   53[BANK0 ] enum E6475
 22812 ;;  Pair2           1   52[BANK0 ] enum E6760
 22813 ;;  Pair1           1   51[BANK0 ] enum E6760
 22814 ;; Return value:  Size  Location     Type
 22815 ;;                  1    wreg      enum E6475
 22816 ;; Registers used:
 22817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22818 ;; Tracked objects:
 22819 ;;		On entry : 0/0
 22820 ;;		On exit  : 0/0
 22821 ;;		Unchanged: 0/0
 22822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22823 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22824 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22826 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22827 ;;Total ram usage:        7 bytes
 22828 ;; Hardware stack levels used:    1
 22829 ;; Hardware stack levels required when called:   12
 22830 ;; This function calls:
 22831 ;;		_Port_CheckPairType
 22832 ;; This function is called by:
 22833 ;;		_Port_CheckPortType
 22834 ;;		_Port_SetQuadType
 22835 ;; This function uses a non-reentrant model
 22836 ;;
 22837                           
 22838                           	psect	text111
 22839  015836                     __ptext111:
 22840                           	opt stack 0
 22841  015836                     _Port_CheckQuadType:
 22842                           	opt stack 14
 22843                           
 22844                           ;Port.c: 128: ePinError Output = ePinErrorState;
 22845                           
 22846                           ;incstack = 0
 22847  015836  0E05               	movlw	5
 22848  015838  0100               	movlb	0	; () banked
 22849  01583A  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 22850                           
 22851                           ; BSR set to: 0
 22852                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 22853  01583C  0100               	movlb	0	; () banked
 22854  01583E  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22855  015840  0D02               	mullw	2
 22856  015842  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 22860  015846  0100               	movlb	0	; () banked
 22861  015848  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22862  01584A  0D02               	mullw	2
 22863  01584C  28F3               	incf	prodl,w,c
 22864  01584E  0100               	movlb	0	; () banked
 22865  015850  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 22866                           
 22867                           ; BSR set to: 0
 22868                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 22869  015852  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22870  015856  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22871  01585A  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 22872  01585E  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22873  015862  ECBE  F0AA         	call	_Port_CheckPairType	;wreg free
 22874  015866  0100               	movlb	0	; () banked
 22875  015868  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 22876  01586A  0100               	movlb	0	; () banked
 22877  01586C  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22878  01586E  A4D8               	btfss	status,2,c
 22879  015870  D00C               	goto	l393
 22880                           
 22881                           ; BSR set to: 0
 22882                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 22883  015872  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22884  015876  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22885  01587A  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 22886  01587E  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22887  015882  ECBE  F0AA         	call	_Port_CheckPairType	;wreg free
 22888  015886  0100               	movlb	0	; () banked
 22889  015888  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 22890  01588A                     l393:
 22891                           
 22892                           ; BSR set to: 0
 22893                           ;Port.c: 136: return Output;
 22894                           
 22895                           ; BSR set to: 0
 22896  01588A  0100               	movlb	0	; () banked
 22897  01588C  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22898  01588E  0012               	return	
 22899  015890                     __end_of_Port_CheckQuadType:
 22900                           	opt stack 0
 22901                           tosu	equ	0xFFF
 22902                           tosh	equ	0xFFE
 22903                           tosl	equ	0xFFD
 22904                           pclath	equ	0xFFA
 22905                           tblptru	equ	0xFF8
 22906                           tblptrh	equ	0xFF7
 22907                           tblptrl	equ	0xFF6
 22908                           tablat	equ	0xFF5
 22909                           prodh	equ	0xFF4
 22910                           prodl	equ	0xFF3
 22911                           intcon	equ	0xFF2
 22912                           postinc0	equ	0xFEE
 22913                           wreg	equ	0xFE8
 22914                           indf1	equ	0xFE7
 22915                           postdec1	equ	0xFE5
 22916                           fsr1h	equ	0xFE2
 22917                           fsr1l	equ	0xFE1
 22918                           indf2	equ	0xFDF
 22919                           postinc2	equ	0xFDE
 22920                           postdec2	equ	0xFDD
 22921                           plusw2	equ	0xFDB
 22922                           fsr2h	equ	0xFDA
 22923                           fsr2l	equ	0xFD9
 22924                           status	equ	0xFD8
 22925                           
 22926 ;; *************** function _Port_CheckPairType *****************
 22927 ;; Defined at:
 22928 ;;		line 112 in file "Library/Port.c"
 22929 ;; Parameters:    Size  Location     Type
 22930 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22931 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22932 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22933 ;;  pPair           1   40[BANK0 ] enum E6760
 22934 ;;  pDrive          1   41[BANK0 ] enum E6469
 22935 ;; Auto vars:     Size  Location     Type
 22936 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 22937 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22938 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22939 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22940 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22941 ;;  Output          1   44[BANK0 ] enum E6475
 22942 ;;  Pin2            1   43[BANK0 ] enum E6750
 22943 ;;  Pin1            1   42[BANK0 ] enum E6750
 22944 ;; Return value:  Size  Location     Type
 22945 ;;                  1    wreg      enum E6475
 22946 ;; Registers used:
 22947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22948 ;; Tracked objects:
 22949 ;;		On entry : 0/0
 22950 ;;		On exit  : 0/0
 22951 ;;		Unchanged: 0/0
 22952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22954 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22956 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22957 ;;Total ram usage:        9 bytes
 22958 ;; Hardware stack levels used:    1
 22959 ;; Hardware stack levels required when called:   11
 22960 ;; This function calls:
 22961 ;;		_PortProperty_Valid
 22962 ;; This function is called by:
 22963 ;;		_Port_CheckQuadType
 22964 ;;		_Port_SetPairType
 22965 ;; This function uses a non-reentrant model
 22966 ;;
 22967                           
 22968                           	psect	text112
 22969  01557C                     __ptext112:
 22970                           	opt stack 0
 22971  01557C                     _Port_CheckPairType:
 22972                           	opt stack 14
 22973                           
 22974                           ;Port.c: 114: ePinError Output = ePinErrorState;
 22975                           
 22976                           ; BSR set to: 0
 22977                           ;incstack = 0
 22978  01557C  0E05               	movlw	5
 22979  01557E  0100               	movlb	0	; () banked
 22980  015580  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 22981                           
 22982                           ; BSR set to: 0
 22983                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 22984  015582  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 22985  015586  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 22986  01558A  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 22987  01558E  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 22988                           
 22989                           ; BSR set to: 0
 22990                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 22991  015592  0100               	movlb	0	; () banked
 22992  015594  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22993  015596  0D02               	mullw	2
 22994  015598  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 22998  01559C  0100               	movlb	0	; () banked
 22999  01559E  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23000  0155A0  0D02               	mullw	2
 23001  0155A2  28F3               	incf	prodl,w,c
 23002  0155A4  0100               	movlb	0	; () banked
 23003  0155A6  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23004                           
 23005                           ; BSR set to: 0
 23006                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23007  0155A8  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23008  0155AC  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23009  0155B0  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23010  0155B4  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23011  0155B8  ECD6  F0A7         	call	_PortProperty_Valid	;wreg free
 23012  0155BC  0100               	movlb	0	; () banked
 23013  0155BE  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23014  0155C0  0100               	movlb	0	; () banked
 23015  0155C2  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23016  0155C4  A4D8               	btfss	status,2,c
 23017  0155C6  D00C               	goto	l389
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23021  0155C8  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23022  0155CC  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23023  0155D0  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23024  0155D4  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23025  0155D8  ECD6  F0A7         	call	_PortProperty_Valid	;wreg free
 23026  0155DC  0100               	movlb	0	; () banked
 23027  0155DE  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23028  0155E0                     l389:
 23029                           
 23030                           ; BSR set to: 0
 23031                           ;Port.c: 124: return Output;
 23032                           
 23033                           ; BSR set to: 0
 23034  0155E0  0100               	movlb	0	; () banked
 23035  0155E2  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23036  0155E4  0012               	return	
 23037  0155E6                     __end_of_Port_CheckPairType:
 23038                           	opt stack 0
 23039                           tosu	equ	0xFFF
 23040                           tosh	equ	0xFFE
 23041                           tosl	equ	0xFFD
 23042                           pclath	equ	0xFFA
 23043                           tblptru	equ	0xFF8
 23044                           tblptrh	equ	0xFF7
 23045                           tblptrl	equ	0xFF6
 23046                           tablat	equ	0xFF5
 23047                           prodh	equ	0xFF4
 23048                           prodl	equ	0xFF3
 23049                           intcon	equ	0xFF2
 23050                           postinc0	equ	0xFEE
 23051                           wreg	equ	0xFE8
 23052                           indf1	equ	0xFE7
 23053                           postdec1	equ	0xFE5
 23054                           fsr1h	equ	0xFE2
 23055                           fsr1l	equ	0xFE1
 23056                           indf2	equ	0xFDF
 23057                           postinc2	equ	0xFDE
 23058                           postdec2	equ	0xFDD
 23059                           plusw2	equ	0xFDB
 23060                           fsr2h	equ	0xFDA
 23061                           fsr2l	equ	0xFD9
 23062                           status	equ	0xFD8
 23063                           
 23064 ;; *************** function _PortProperty_Valid *****************
 23065 ;; Defined at:
 23066 ;;		line 220 in file "Library/Types.c"
 23067 ;; Parameters:    Size  Location     Type
 23068 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23069 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23070 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23071 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23072 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23073 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23074 ;;  pPin            1   18[BANK0 ] unsigned char 
 23075 ;; Auto vars:     Size  Location     Type
 23076 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23077 ;;  Pair            1   37[BANK0 ] enum E6469
 23078 ;; Return value:  Size  Location     Type
 23079 ;;                  1    wreg      enum E6475
 23080 ;; Registers used:
 23081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23082 ;; Tracked objects:
 23083 ;;		On entry : 0/0
 23084 ;;		On exit  : 0/0
 23085 ;;		Unchanged: 0/0
 23086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23087 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23088 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23090 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23091 ;;Total ram usage:       23 bytes
 23092 ;; Hardware stack levels used:    1
 23093 ;; Hardware stack levels required when called:   10
 23094 ;; This function calls:
 23095 ;;		_Word_GetPair
 23096 ;; This function is called by:
 23097 ;;		_Port_CheckPairType
 23098 ;;		_Port_SetPinType
 23099 ;; This function uses a non-reentrant model
 23100 ;;
 23101                           
 23102                           	psect	text113
 23103  014FAC                     __ptext113:
 23104                           	opt stack 0
 23105  014FAC                     _PortProperty_Valid:
 23106                           	opt stack 17
 23107                           
 23108                           ;Types.c: 222: ePinDrive Pair;
 23109                           ;Types.c: 223: const ePinError Errors[4][4] =
 23110                           ;Types.c: 224: {
 23111                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23112                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23113                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23114                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23115                           ;Types.c: 230: };
 23116                           
 23117                           ; BSR set to: 0
 23118                           ;incstack = 0
 23119  014FAC  0E41               	movlw	low PortProperty_Valid@F6830
 23120  014FAE  6EF6               	movwf	tblptrl,c
 23121  014FB0                     	if	1	;There is more than 1 active tblptr byte
 23122  014FB0  0EFD               	movlw	high PortProperty_Valid@F6830
 23123  014FB2  6EF7               	movwf	tblptrh,c
 23124  014FB4                     	endif
 23125  014FB4                     	if	1	;There are 3 active tblptr bytes
 23126  014FB4  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23127  014FB6  6EF8               	movwf	tblptru,c
 23128  014FB8                     	endif
 23129  014FB8  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23130  014FBC  0E0F               	movlw	15
 23131  014FBE                     u8620:
 23132  014FBE  0009               	tblrd		*+
 23133  014FC0  CFF5 FFDE          	movff	tablat,postinc2
 23134  014FC4  06E8               	decf	wreg,f,c
 23135  014FC6  E2FB               	bc	u8620
 23136                           
 23137                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23138  014FC8  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23139  014FCC  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23140  014FD0  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23141  014FD4  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 23142  014FD8  0100               	movlb	0	; () banked
 23143  014FDA  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23144                           
 23145                           ; BSR set to: 0
 23146                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23147  014FDC  0E04               	movlw	4
 23148  014FDE  0100               	movlb	0	; () banked
 23149  014FE0  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23150  014FE2  D020               	goto	l819
 23151                           
 23152                           ; BSR set to: 0
 23153  014FE4  0E04               	movlw	4
 23154  014FE6  0100               	movlb	0	; () banked
 23155  014FE8  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23156  014FEA  D01C               	goto	l819
 23157                           
 23158                           ; BSR set to: 0
 23159                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23160  014FEC  0100               	movlb	0	; () banked
 23161  014FEE  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23162  014FF0  0D04               	mullw	4
 23163  014FF2  0ECF               	movlw	low PortProperty_Valid@Errors
 23164  014FF4  0100               	movlb	0	; () banked
 23165  014FF6  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23166  014FF8  0E00               	movlw	high PortProperty_Valid@Errors
 23167  014FFA  0100               	movlb	0	; () banked
 23168  014FFC  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23169  014FFE  50F3               	movf	prodl,w,c
 23170  015000  0100               	movlb	0	; () banked
 23171  015002  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23172  015004  50F4               	movf	prodh,w,c
 23173  015006  0100               	movlb	0	; () banked
 23174  015008  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23175  01500A  0100               	movlb	0	; () banked
 23176  01500C  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23177  01500E  0D01               	mullw	1
 23178  015010  50F3               	movf	prodl,w,c
 23179  015012  0100               	movlb	0	; () banked
 23180  015014  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23181  015016  6ED9               	movwf	fsr2l,c
 23182  015018  50F4               	movf	prodh,w,c
 23183  01501A  0100               	movlb	0	; () banked
 23184  01501C  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23185  01501E  6EDA               	movwf	fsr2h,c
 23186  015020  50DF               	movf	indf2,w,c
 23187                           
 23188                           ; BSR set to: 0
 23189  015022  0012               	return	
 23190  015024                     l819:
 23191                           
 23192                           ; BSR set to: 0
 23193                           ;Types.c: 237: return ePinErrorState;
 23194                           
 23195                           ; BSR set to: 0
 23196  015024  0E05               	movlw	5
 23197  015026  0012               	return	
 23198  015028                     __end_of_PortProperty_Valid:
 23199                           	opt stack 0
 23200                           tosu	equ	0xFFF
 23201                           tosh	equ	0xFFE
 23202                           tosl	equ	0xFFD
 23203                           pclath	equ	0xFFA
 23204                           tblptru	equ	0xFF8
 23205                           tblptrh	equ	0xFF7
 23206                           tblptrl	equ	0xFF6
 23207                           tablat	equ	0xFF5
 23208                           prodh	equ	0xFF4
 23209                           prodl	equ	0xFF3
 23210                           intcon	equ	0xFF2
 23211                           postinc0	equ	0xFEE
 23212                           wreg	equ	0xFE8
 23213                           indf1	equ	0xFE7
 23214                           postdec1	equ	0xFE5
 23215                           fsr1h	equ	0xFE2
 23216                           fsr1l	equ	0xFE1
 23217                           indf2	equ	0xFDF
 23218                           postinc2	equ	0xFDE
 23219                           postdec2	equ	0xFDD
 23220                           plusw2	equ	0xFDB
 23221                           fsr2h	equ	0xFDA
 23222                           fsr2l	equ	0xFD9
 23223                           status	equ	0xFD8
 23224                           
 23225 ;; *************** function _Byte_SetQuad *****************
 23226 ;; Defined at:
 23227 ;;		line 101 in file "Library/Types.c"
 23228 ;; Parameters:    Size  Location     Type
 23229 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23230 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23231 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23232 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23233 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23234 ;;		 -> NULL(0), 
 23235 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23236 ;;  pValue          1   14[BANK0 ] unsigned char 
 23237 ;; Auto vars:     Size  Location     Type
 23238 ;;		None
 23239 ;; Return value:  Size  Location     Type
 23240 ;;                  1    wreg      void 
 23241 ;; Registers used:
 23242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23243 ;; Tracked objects:
 23244 ;;		On entry : 0/0
 23245 ;;		On exit  : 0/0
 23246 ;;		Unchanged: 0/0
 23247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23248 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23251 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23252 ;;Total ram usage:        4 bytes
 23253 ;; Hardware stack levels used:    1
 23254 ;; Hardware stack levels required when called:    8
 23255 ;; This function calls:
 23256 ;;		_Byte_SetZone
 23257 ;; This function is called by:
 23258 ;;		_Port_SetQuadType
 23259 ;;		_SPI_Init
 23260 ;;		_SPI_MinSpeed
 23261 ;;		_SPI_MaxSpeed
 23262 ;;		_Port_SetQuad
 23263 ;;		_Word_SetQuad
 23264 ;;		_I2C_Init
 23265 ;; This function uses a non-reentrant model
 23266 ;;
 23267                           
 23268                           	psect	text114
 23269  01620E                     __ptext114:
 23270                           	opt stack 0
 23271  01620E                     _Byte_SetQuad:
 23272                           	opt stack 19
 23273                           
 23274                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23275                           
 23276                           ; BSR set to: 0
 23277                           ;incstack = 0
 23278  01620E  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23279  016212  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23280  016216  0E02               	movlw	2
 23281  016218  0100               	movlb	0	; () banked
 23282  01621A  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23283  01621C  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23284  016220  0E04               	movlw	4
 23285  016222  0100               	movlb	0	; () banked
 23286  016224  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23287  016226  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23288  01622A  EC21  F0A1         	call	_Byte_SetZone	;wreg free
 23289  01622E  0012               	return		;funcret
 23290  016230                     __end_of_Byte_SetQuad:
 23291                           	opt stack 0
 23292                           tosu	equ	0xFFF
 23293                           tosh	equ	0xFFE
 23294                           tosl	equ	0xFFD
 23295                           pclath	equ	0xFFA
 23296                           tblptru	equ	0xFF8
 23297                           tblptrh	equ	0xFF7
 23298                           tblptrl	equ	0xFF6
 23299                           tablat	equ	0xFF5
 23300                           prodh	equ	0xFF4
 23301                           prodl	equ	0xFF3
 23302                           intcon	equ	0xFF2
 23303                           postinc0	equ	0xFEE
 23304                           wreg	equ	0xFE8
 23305                           indf1	equ	0xFE7
 23306                           postdec1	equ	0xFE5
 23307                           fsr1h	equ	0xFE2
 23308                           fsr1l	equ	0xFE1
 23309                           indf2	equ	0xFDF
 23310                           postinc2	equ	0xFDE
 23311                           postdec2	equ	0xFDD
 23312                           plusw2	equ	0xFDB
 23313                           fsr2h	equ	0xFDA
 23314                           fsr2l	equ	0xFD9
 23315                           status	equ	0xFD8
 23316                           
 23317 ;; *************** function _Byte_SetZone *****************
 23318 ;; Defined at:
 23319 ;;		line 47 in file "Library/Types.c"
 23320 ;; Parameters:    Size  Location     Type
 23321 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23322 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23323 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23324 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23325 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23326 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23327 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23328 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23329 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23330 ;;  pMax            1    2[BANK0 ] unsigned char 
 23331 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23332 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23333 ;;  pValue          1    5[BANK0 ] unsigned char 
 23334 ;; Auto vars:     Size  Location     Type
 23335 ;;  MASK            1   10[BANK0 ] unsigned char 
 23336 ;;  Offset          1    9[BANK0 ] unsigned char 
 23337 ;; Return value:  Size  Location     Type
 23338 ;;                  1    wreg      void 
 23339 ;; Registers used:
 23340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23341 ;; Tracked objects:
 23342 ;;		On entry : 0/0
 23343 ;;		On exit  : 0/0
 23344 ;;		Unchanged: 0/0
 23345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23346 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23350 ;;Total ram usage:       11 bytes
 23351 ;; Hardware stack levels used:    1
 23352 ;; Hardware stack levels required when called:    7
 23353 ;; This function calls:
 23354 ;;		Nothing
 23355 ;; This function is called by:
 23356 ;;		_Byte_SetPair
 23357 ;;		_Byte_SetQuad
 23358 ;;		_Byte_SetTriple
 23359 ;; This function uses a non-reentrant model
 23360 ;;
 23361                           
 23362                           	psect	text115
 23363  014242                     __ptext115:
 23364                           	opt stack 0
 23365  014242                     _Byte_SetZone:
 23366                           	opt stack 18
 23367                           
 23368                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23369                           
 23370                           ;incstack = 0
 23371  014242  0100               	movlb	0	; () banked
 23372  014244  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23373  014246  0D01               	mullw	1
 23374  014248  0E5B               	movlw	low _MASKS
 23375  01424A  24F3               	addwf	prodl,w,c
 23376  01424C  6EF6               	movwf	tblptrl,c
 23377  01424E  0EFD               	movlw	high _MASKS
 23378  014250  20F4               	addwfc	prodh,w,c
 23379  014252  6EF7               	movwf	tblptrh,c
 23380  014254                     	if	1	;There are 3 active tblptr bytes
 23381  014254  6AF8               	clrf	tblptru,c
 23382  014256  0E00               	movlw	low (__mediumconst shr (0+16))
 23383  014258  22F8               	addwfc	tblptru,f,c
 23384  01425A                     	endif
 23385  01425A  0008               	tblrd		*
 23386  01425C  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 23387                           
 23388                           ; BSR set to: 0
 23389                           ;Types.c: 50: UINT8 Offset = 0;
 23390  014260  0E00               	movlw	0
 23391  014262  0100               	movlb	0	; () banked
 23392  014264  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 23393                           
 23394                           ;Types.c: 52: while (pChunk >= pMax)
 23395  014266  D006               	goto	l726
 23396  014268                     
 23397                           ; BSR set to: 0
 23398                           ;Types.c: 53: {
 23399                           ;Types.c: 54: pChunk -= pMax;
 23400                           
 23401                           ; BSR set to: 0
 23402  014268  0100               	movlb	0	; () banked
 23403  01426A  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23404  01426C  0100               	movlb	0	; () banked
 23405  01426E  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23406                           
 23407                           ; BSR set to: 0
 23408                           ;Types.c: 55: Offset += 1;
 23409  014270  0100               	movlb	0	; () banked
 23410  014272  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 23411  014274                     l726:
 23412                           
 23413                           ; BSR set to: 0
 23414                           
 23415                           ; BSR set to: 0
 23416  014274  0100               	movlb	0	; () banked
 23417  014276  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23418  014278  0100               	movlb	0	; () banked
 23419  01427A  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23420  01427C  B0D8               	btfsc	status,0,c
 23421  01427E  D7F4               	goto	l727
 23422                           
 23423                           ; BSR set to: 0
 23424                           ;Types.c: 56: }
 23425                           ;Types.c: 57: pChunk *= pChunkSize;
 23426                           
 23427                           ; BSR set to: 0
 23428  014280  0100               	movlb	0	; () banked
 23429  014282  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23430  014284  0100               	movlb	0	; () banked
 23431  014286  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23432  014288  50F3               	movf	prodl,w,c
 23433  01428A  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 23434                           
 23435                           ; BSR set to: 0
 23436                           ;Types.c: 58: pChunk += Offset;
 23437  01428C  0100               	movlb	0	; () banked
 23438  01428E  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 23439  014290  0100               	movlb	0	; () banked
 23440  014292  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23441                           
 23442                           ; BSR set to: 0
 23443                           ;Types.c: 60: pValue &= MASK;
 23444  014294  0100               	movlb	0	; () banked
 23445  014296  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 23446  014298  0100               	movlb	0	; () banked
 23447  01429A  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23448                           
 23449                           ; BSR set to: 0
 23450                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23451  01429C  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23452  0142A0  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23453  0142A4  0100               	movlb	0	; () banked
 23454  0142A6  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23455  0142A8  D003               	goto	u8674
 23456  0142AA                     u8675:
 23457  0142AA  0100               	movlb	0	; () banked
 23458  0142AC  90D8               	bcf	status,0,c
 23459  0142AE  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23460  0142B0                     u8674:
 23461  0142B0  0100               	movlb	0	; () banked
 23462  0142B2  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23463  0142B4  D7FA               	goto	u8675
 23464  0142B6  0100               	movlb	0	; () banked
 23465  0142B8  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23466  0142BA  0AFF               	xorlw	255
 23467  0142BC  0100               	movlb	0	; () banked
 23468  0142BE  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23469  0142C0  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23470  0142C4  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23471  0142C8  0100               	movlb	0	; () banked
 23472  0142CA  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23473  0142CC  16DF               	andwf	indf2,f,c
 23474                           
 23475                           ; BSR set to: 0
 23476                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23477  0142CE  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23478  0142D2  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23479  0142D6  0100               	movlb	0	; () banked
 23480  0142D8  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23481  0142DA  D003               	goto	u8684
 23482  0142DC                     u8685:
 23483  0142DC  0100               	movlb	0	; () banked
 23484  0142DE  90D8               	bcf	status,0,c
 23485  0142E0  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23486  0142E2                     u8684:
 23487  0142E2  0100               	movlb	0	; () banked
 23488  0142E4  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23489  0142E6  D7FA               	goto	u8685
 23490  0142E8  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23491  0142EC  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23492  0142F0  0100               	movlb	0	; () banked
 23493  0142F2  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23494  0142F4  12DF               	iorwf	indf2,f,c
 23495                           
 23496                           ; BSR set to: 0
 23497  0142F6  0012               	return		;funcret
 23498  0142F8                     __end_of_Byte_SetZone:
 23499                           	opt stack 0
 23500                           tosu	equ	0xFFF
 23501                           tosh	equ	0xFFE
 23502                           tosl	equ	0xFFD
 23503                           pclath	equ	0xFFA
 23504                           tblptru	equ	0xFF8
 23505                           tblptrh	equ	0xFF7
 23506                           tblptrl	equ	0xFF6
 23507                           tablat	equ	0xFF5
 23508                           prodh	equ	0xFF4
 23509                           prodl	equ	0xFF3
 23510                           intcon	equ	0xFF2
 23511                           postinc0	equ	0xFEE
 23512                           wreg	equ	0xFE8
 23513                           indf1	equ	0xFE7
 23514                           postdec1	equ	0xFE5
 23515                           fsr1h	equ	0xFE2
 23516                           fsr1l	equ	0xFE1
 23517                           indf2	equ	0xFDF
 23518                           postinc2	equ	0xFDE
 23519                           postdec2	equ	0xFDD
 23520                           plusw2	equ	0xFDB
 23521                           fsr2h	equ	0xFDA
 23522                           fsr2l	equ	0xFD9
 23523                           status	equ	0xFD8
 23524                           
 23525 ;; *************** function _Console_Init *****************
 23526 ;; Defined at:
 23527 ;;		line 157 in file "Library/Console.c"
 23528 ;; Parameters:    Size  Location     Type
 23529 ;;		None
 23530 ;; Auto vars:     Size  Location     Type
 23531 ;;  y               1    3[BANK0 ] unsigned char 
 23532 ;;  x               1    2[BANK0 ] unsigned char 
 23533 ;; Return value:  Size  Location     Type
 23534 ;;                  1    wreg      void 
 23535 ;; Registers used:
 23536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23537 ;; Tracked objects:
 23538 ;;		On entry : 0/0
 23539 ;;		On exit  : 0/0
 23540 ;;		Unchanged: 0/0
 23541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23546 ;;Total ram usage:        4 bytes
 23547 ;; Hardware stack levels used:    1
 23548 ;; Hardware stack levels required when called:    7
 23549 ;; This function calls:
 23550 ;;		Nothing
 23551 ;; This function is called by:
 23552 ;;		_init
 23553 ;; This function uses a non-reentrant model
 23554 ;;
 23555                           
 23556                           	psect	text116
 23557  014D10                     __ptext116:
 23558                           	opt stack 0
 23559  014D10                     _Console_Init:
 23560                           	opt stack 22
 23561                           
 23562                           ;Console.c: 160: lBufferX = 0;
 23563                           
 23564                           ; BSR set to: 0
 23565                           ;incstack = 0
 23566  014D10  0E00               	movlw	0
 23567  014D12  0100               	movlb	0	; () banked
 23568  014D14  6F91               	movwf	_lBufferX& (0+255),b
 23569                           
 23570                           ;Console.c: 161: lBufferY = 0;
 23571  014D16  0E00               	movlw	0
 23572  014D18  0100               	movlb	0	; () banked
 23573  014D1A  6F90               	movwf	_lBufferY& (0+255),b
 23574                           
 23575                           ;Console.c: 163: UINT8 x, y;
 23576                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23577  014D1C  0E00               	movlw	0
 23578  014D1E  0100               	movlb	0	; () banked
 23579  014D20  6FBC               	movwf	Console_Init@x& (0+255),b
 23580  014D22                     l14332:
 23581                           
 23582                           ; BSR set to: 0
 23583  014D22  0E13               	movlw	19
 23584  014D24  0100               	movlb	0	; () banked
 23585  014D26  65BC               	cpfsgt	Console_Init@x& (0+255),b
 23586  014D28  D001               	goto	l976
 23587  014D2A  0012               	return	
 23588  014D2C                     l976:
 23589                           
 23590                           ; BSR set to: 0
 23591                           ;Console.c: 165: {
 23592                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23593                           
 23594                           ; BSR set to: 0
 23595  014D2C  0E00               	movlw	0
 23596  014D2E  0100               	movlb	0	; () banked
 23597  014D30  6FBD               	movwf	Console_Init@y& (0+255),b
 23598  014D32                     l14338:
 23599                           
 23600                           ; BSR set to: 0
 23601  014D32  0E0E               	movlw	14
 23602  014D34  0100               	movlb	0	; () banked
 23603  014D36  65BD               	cpfsgt	Console_Init@y& (0+255),b
 23604  014D38  D001               	goto	l978
 23605  014D3A  D02C               	goto	u11090
 23606  014D3C                     l978:
 23607                           
 23608                           ; BSR set to: 0
 23609                           ;Console.c: 167: {
 23610                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23611                           
 23612                           ; BSR set to: 0
 23613  014D3C  0100               	movlb	0	; () banked
 23614  014D3E  51BD               	movf	Console_Init@y& (0+255),w,b
 23615  014D40  0D14               	mullw	20
 23616  014D42  0EAA               	movlw	low _lBuffer
 23617  014D44  0100               	movlb	0	; () banked
 23618  014D46  6FBA               	movwf	??_Console_Init& (0+255),b
 23619  014D48  0E04               	movlw	high _lBuffer
 23620  014D4A  0100               	movlb	0	; () banked
 23621  014D4C  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 23622  014D4E  50F3               	movf	prodl,w,c
 23623  014D50  0100               	movlb	0	; () banked
 23624  014D52  27BA               	addwf	??_Console_Init& (0+255),f,b
 23625  014D54  50F4               	movf	prodh,w,c
 23626  014D56  0100               	movlb	0	; () banked
 23627  014D58  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23628  014D5A  0100               	movlb	0	; () banked
 23629  014D5C  51BC               	movf	Console_Init@x& (0+255),w,b
 23630  014D5E  0D01               	mullw	1
 23631  014D60  50F3               	movf	prodl,w,c
 23632  014D62  0100               	movlb	0	; () banked
 23633  014D64  25BA               	addwf	??_Console_Init& (0+255),w,b
 23634  014D66  6ED9               	movwf	fsr2l,c
 23635  014D68  50F4               	movf	prodh,w,c
 23636  014D6A  0100               	movlb	0	; () banked
 23637  014D6C  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23638  014D6E  6EDA               	movwf	fsr2h,c
 23639  014D70  0E00               	movlw	0
 23640  014D72  6EDF               	movwf	indf2,c
 23641                           
 23642                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23643  014D74  0100               	movlb	0	; () banked
 23644  014D76  51BD               	movf	Console_Init@y& (0+255),w,b
 23645  014D78  0D02               	mullw	2
 23646  014D7A  0E00               	movlw	low _lCBuffer
 23647  014D7C  24F3               	addwf	prodl,w,c
 23648  014D7E  6ED9               	movwf	fsr2l,c
 23649  014D80  0E03               	movlw	high _lCBuffer
 23650  014D82  20F4               	addwfc	prodh,w,c
 23651  014D84  6EDA               	movwf	fsr2h,c
 23652  014D86  0EFF               	movlw	255
 23653  014D88  6EDE               	movwf	postinc2,c
 23654  014D8A  0EFF               	movlw	255
 23655  014D8C  6EDD               	movwf	postdec2,c
 23656                           
 23657                           ; BSR set to: 0
 23658  014D8E  0100               	movlb	0	; () banked
 23659  014D90  2BBD               	incf	Console_Init@y& (0+255),f,b
 23660  014D92  D7CF               	goto	l14338
 23661  014D94                     u11090:
 23662                           
 23663                           ; BSR set to: 0
 23664                           
 23665                           ; BSR set to: 0
 23666  014D94  0100               	movlb	0	; () banked
 23667  014D96  2BBC               	incf	Console_Init@x& (0+255),f,b
 23668  014D98  D7C4               	goto	l14332
 23669  014D9A                     __end_of_Console_Init:
 23670                           	opt stack 0
 23671                           tosu	equ	0xFFF
 23672                           tosh	equ	0xFFE
 23673                           tosl	equ	0xFFD
 23674                           pclath	equ	0xFFA
 23675                           tblptru	equ	0xFF8
 23676                           tblptrh	equ	0xFF7
 23677                           tblptrl	equ	0xFF6
 23678                           tablat	equ	0xFF5
 23679                           prodh	equ	0xFF4
 23680                           prodl	equ	0xFF3
 23681                           intcon	equ	0xFF2
 23682                           postinc0	equ	0xFEE
 23683                           wreg	equ	0xFE8
 23684                           indf1	equ	0xFE7
 23685                           postdec1	equ	0xFE5
 23686                           fsr1h	equ	0xFE2
 23687                           fsr1l	equ	0xFE1
 23688                           indf2	equ	0xFDF
 23689                           postinc2	equ	0xFDE
 23690                           postdec2	equ	0xFDD
 23691                           plusw2	equ	0xFDB
 23692                           fsr2h	equ	0xFDA
 23693                           fsr2l	equ	0xFD9
 23694                           status	equ	0xFD8
 23695                           
 23696 ;; *************** function _ADC_Start *****************
 23697 ;; Defined at:
 23698 ;;		line 114 in file "Library/ADC.c"
 23699 ;; Parameters:    Size  Location     Type
 23700 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23701 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23702 ;;		 -> NULL(0), 
 23703 ;; Auto vars:     Size  Location     Type
 23704 ;;		None
 23705 ;; Return value:  Size  Location     Type
 23706 ;;                  1    wreg      void 
 23707 ;; Registers used:
 23708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23709 ;; Tracked objects:
 23710 ;;		On entry : 0/0
 23711 ;;		On exit  : 0/0
 23712 ;;		Unchanged: 0/0
 23713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23714 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23718 ;;Total ram usage:        4 bytes
 23719 ;; Hardware stack levels used:    1
 23720 ;; Hardware stack levels required when called:    8
 23721 ;; This function calls:
 23722 ;;		_ADC_Off
 23723 ;;		_ADC_On
 23724 ;;		_ADC_SetChannel
 23725 ;; This function is called by:
 23726 ;;		_init
 23727 ;;		_findClosestWall
 23728 ;;		_mode1
 23729 ;;		_FunctADC
 23730 ;; This function uses a non-reentrant model
 23731 ;;
 23732                           
 23733                           	psect	text117
 23734  014E24                     __ptext117:
 23735                           	opt stack 0
 23736  014E24                     _ADC_Start:
 23737                           	opt stack 20
 23738                           
 23739                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 23740                           
 23741                           ; BSR set to: 0
 23742                           ;incstack = 0
 23743  014E24  B2C2               	btfsc	4034,1,c	;volatile
 23744  014E26  0012               	return	
 23745  014E28                     
 23746                           ;ADC.c: 128: {
 23747                           ;ADC.c: 129: ADC_Off();
 23748                           
 23749                           ;ADC.c: 127: for(;;)
 23750  014E28  ECCA  F0B2         	call	_ADC_Off	;wreg free
 23751                           
 23752                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 23753  014E2C  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 23754  014E30  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 23755  014E34  50DF               	movf	indf2,w,c
 23756  014E36  ECBC  F0B1         	call	_ADC_SetChannel
 23757                           
 23758                           ;ADC.c: 131: ADC_On();
 23759  014E3A  ECD8  F0B2         	call	_ADC_On	;wreg free
 23760                           
 23761                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 23762  014E3E  82C2               	bsf	4034,1,c	;volatile
 23763  014E40  B2C2               	btfsc	4034,1,c	;volatile
 23764  014E42  D7FE               	goto	l1280
 23765                           
 23766                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 23767  014E44  50C3               	movf	4035,w,c	;volatile
 23768  014E46  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 23769  014E4A  0100               	movlb	0	; () banked
 23770  014E4C  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 23771  014E4E  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 23772  014E52  0100               	movlb	0	; () banked
 23773  014E54  6BBE               	clrf	??_ADC_Start& (0+255),b
 23774  014E56  0100               	movlb	0	; () banked
 23775  014E58  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 23776  014E5A  0E00               	movlw	0
 23777  014E5C  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 23778  014E5E  0100               	movlb	0	; () banked
 23779  014E60  EE20 F001          	lfsr	2,1
 23780  014E64  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 23781  014E66  26D9               	addwf	fsr2l,f,c
 23782  014E68  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23783  014E6A  22DA               	addwfc	fsr2h,f,c
 23784  014E6C  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 23785  014E70  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 23786                           
 23787                           ;ADC.c: 141: if (pInput->mNext == 0)
 23788  014E74  0100               	movlb	0	; () banked
 23789  014E76  EE20 F003          	lfsr	2,3
 23790  014E7A  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 23791  014E7C  26D9               	addwf	fsr2l,f,c
 23792  014E7E  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23793  014E80  22DA               	addwfc	fsr2h,f,c
 23794  014E82  50DE               	movf	postinc2,w,c
 23795  014E84  10DE               	iorwf	postinc2,w,c
 23796  014E86  B4D8               	btfsc	status,2,c
 23797  014E88  D00C               	goto	l1283
 23798                           
 23799                           ; BSR set to: 0
 23800                           ;ADC.c: 145: pInput = pInput->mNext;
 23801                           
 23802                           ; BSR set to: 0
 23803                           
 23804                           ; BSR set to: 0
 23805                           ;ADC.c: 142: break;
 23806  014E8A  0100               	movlb	0	; () banked
 23807  014E8C  EE20 F003          	lfsr	2,3
 23808  014E90  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 23809  014E92  26D9               	addwf	fsr2l,f,c
 23810  014E94  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23811  014E96  22DA               	addwfc	fsr2h,f,c
 23812  014E98  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 23813  014E9C  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 23814                           
 23815                           ;ADC.c: 146: }
 23816  014EA0  D7C3               	goto	l1276
 23817  014EA2                     l1283:
 23818                           
 23819                           ; BSR set to: 0
 23820                           ;ADC.c: 147: ADC_Off();
 23821                           
 23822                           ; BSR set to: 0
 23823  014EA2  ECCA  F0B2         	call	_ADC_Off	;wreg free
 23824  014EA6  0012               	return		;funcret
 23825  014EA8                     __end_of_ADC_Start:
 23826                           	opt stack 0
 23827                           tosu	equ	0xFFF
 23828                           tosh	equ	0xFFE
 23829                           tosl	equ	0xFFD
 23830                           pclath	equ	0xFFA
 23831                           tblptru	equ	0xFF8
 23832                           tblptrh	equ	0xFF7
 23833                           tblptrl	equ	0xFF6
 23834                           tablat	equ	0xFF5
 23835                           prodh	equ	0xFF4
 23836                           prodl	equ	0xFF3
 23837                           intcon	equ	0xFF2
 23838                           postinc0	equ	0xFEE
 23839                           wreg	equ	0xFE8
 23840                           indf1	equ	0xFE7
 23841                           postdec1	equ	0xFE5
 23842                           fsr1h	equ	0xFE2
 23843                           fsr1l	equ	0xFE1
 23844                           indf2	equ	0xFDF
 23845                           postinc2	equ	0xFDE
 23846                           postdec2	equ	0xFDD
 23847                           plusw2	equ	0xFDB
 23848                           fsr2h	equ	0xFDA
 23849                           fsr2l	equ	0xFD9
 23850                           status	equ	0xFD8
 23851                           
 23852 ;; *************** function _ADC_Init *****************
 23853 ;; Defined at:
 23854 ;;		line 19 in file "Library/ADC.c"
 23855 ;; Parameters:    Size  Location     Type
 23856 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 23857 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23858 ;;  pChannel        1    6[BANK0 ] enum E6742
 23859 ;; Auto vars:     Size  Location     Type
 23860 ;;		None
 23861 ;; Return value:  Size  Location     Type
 23862 ;;                  1    wreg      void 
 23863 ;; Registers used:
 23864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23865 ;; Tracked objects:
 23866 ;;		On entry : 0/0
 23867 ;;		On exit  : 0/0
 23868 ;;		Unchanged: 0/0
 23869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23870 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23873 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23874 ;;Total ram usage:        3 bytes
 23875 ;; Hardware stack levels used:    1
 23876 ;; Hardware stack levels required when called:    9
 23877 ;; This function calls:
 23878 ;;		_ADC_Calibrate
 23879 ;;		_ADC_ClockDivision
 23880 ;;		_ADC_ConversionTime
 23881 ;;		_ADC_SetChannel
 23882 ;;		_ADC_SetupIO
 23883 ;; This function is called by:
 23884 ;;		_init
 23885 ;;		_FunctInitADC
 23886 ;; This function uses a non-reentrant model
 23887 ;;
 23888                           
 23889                           	psect	text118
 23890  015028                     __ptext118:
 23891                           	opt stack 0
 23892  015028                     _ADC_Init:
 23893                           	opt stack 20
 23894                           
 23895                           ;ADC.c: 21: if(pInput==(void*)0)
 23896                           
 23897                           ;incstack = 0
 23898  015028  0100               	movlb	0	; () banked
 23899  01502A  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 23900  01502C  0100               	movlb	0	; () banked
 23901  01502E  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 23902  015030  B4D8               	btfsc	status,2,c
 23903  015032  0012               	return	
 23904                           
 23905                           ; BSR set to: 0
 23906                           ;ADC.c: 25: lCurrent = pInput;
 23907                           
 23908                           ; BSR set to: 0
 23909                           
 23910                           ; BSR set to: 0
 23911                           ;ADC.c: 22: return;
 23912  015034  C0BE  F083         	movff	ADC_Init@pInput,_lCurrent
 23913  015038  C0BF  F084         	movff	ADC_Init@pInput+1,_lCurrent+1
 23914                           
 23915                           ; BSR set to: 0
 23916                           ;ADC.c: 27: pInput->mChannel = pChannel;
 23917  01503C  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 23918  015040  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 23919  015044  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 23920                           
 23921                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 23922  015048  0100               	movlb	0	; () banked
 23923  01504A  EE20 F003          	lfsr	2,3
 23924  01504E  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 23925  015050  26D9               	addwf	fsr2l,f,c
 23926  015052  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23927  015054  22DA               	addwfc	fsr2h,f,c
 23928  015056  0E00               	movlw	0
 23929  015058  6EDE               	movwf	postinc2,c
 23930  01505A  0E00               	movlw	0
 23931  01505C  6EDD               	movwf	postdec2,c
 23932                           
 23933                           ;ADC.c: 29: pInput->mValue = 0;
 23934  01505E  0100               	movlb	0	; () banked
 23935  015060  EE20 F001          	lfsr	2,1
 23936  015064  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 23937  015066  26D9               	addwf	fsr2l,f,c
 23938  015068  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23939  01506A  22DA               	addwfc	fsr2h,f,c
 23940  01506C  0E00               	movlw	0
 23941  01506E  6EDE               	movwf	postinc2,c
 23942  015070  0E00               	movlw	0
 23943  015072  6EDD               	movwf	postdec2,c
 23944                           
 23945                           ; BSR set to: 0
 23946                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 23947  015074  0100               	movlb	0	; () banked
 23948  015076  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 23949  015078  ECBC  F0B1         	call	_ADC_SetChannel
 23950                           
 23951                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 23952  01507C  9EC2               	bcf	4034,7,c	;volatile
 23953                           
 23954                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 23955  01507E  9CC2               	bcf	4034,6,c	;volatile
 23956                           
 23957                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 23958  015080  8EC1               	bsf	4033,7,c	;volatile
 23959                           
 23960                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 23961  015082  8CC1               	bsf	4033,6,c	;volatile
 23962                           
 23963                           ;ADC.c: 43: ADC_ConversionTime(12);
 23964  015084  0E0C               	movlw	12
 23965  015086  ECAD  F0AD         	call	_ADC_ConversionTime
 23966                           
 23967                           ;ADC.c: 47: ADC_ClockDivision(16);
 23968  01508A  0E10               	movlw	16
 23969  01508C  ECCD  F0A6         	call	_ADC_ClockDivision
 23970                           
 23971                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 23972  015090  0100               	movlb	0	; () banked
 23973  015092  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 23974  015094  EC05  F0B0         	call	_ADC_SetupIO
 23975                           
 23976                           ;ADC.c: 58: ADC_Initialised = 1;
 23977  015098  0E01               	movlw	1
 23978  01509A  6E3C               	movwf	_ADC_Initialised,c
 23979                           
 23980                           ;ADC.c: 61: ADC_Calibrate();
 23981  01509C  EC4C  F0B2         	call	_ADC_Calibrate	;wreg free
 23982  0150A0  0012               	return		;funcret
 23983  0150A2                     __end_of_ADC_Init:
 23984                           	opt stack 0
 23985                           tosu	equ	0xFFF
 23986                           tosh	equ	0xFFE
 23987                           tosl	equ	0xFFD
 23988                           pclath	equ	0xFFA
 23989                           tblptru	equ	0xFF8
 23990                           tblptrh	equ	0xFF7
 23991                           tblptrl	equ	0xFF6
 23992                           tablat	equ	0xFF5
 23993                           prodh	equ	0xFF4
 23994                           prodl	equ	0xFF3
 23995                           intcon	equ	0xFF2
 23996                           postinc0	equ	0xFEE
 23997                           wreg	equ	0xFE8
 23998                           indf1	equ	0xFE7
 23999                           postdec1	equ	0xFE5
 24000                           fsr1h	equ	0xFE2
 24001                           fsr1l	equ	0xFE1
 24002                           indf2	equ	0xFDF
 24003                           postinc2	equ	0xFDE
 24004                           postdec2	equ	0xFDD
 24005                           plusw2	equ	0xFDB
 24006                           fsr2h	equ	0xFDA
 24007                           fsr2l	equ	0xFD9
 24008                           status	equ	0xFD8
 24009                           
 24010 ;; *************** function _ADC_SetupIO *****************
 24011 ;; Defined at:
 24012 ;;		line 150 in file "Library/ADC.c"
 24013 ;; Parameters:    Size  Location     Type
 24014 ;;  pChannel        1    wreg     enum E6742
 24015 ;; Auto vars:     Size  Location     Type
 24016 ;;  pChannel        1    2[BANK0 ] enum E6742
 24017 ;;  MASK            1    3[BANK0 ] unsigned char 
 24018 ;; Return value:  Size  Location     Type
 24019 ;;                  1    wreg      void 
 24020 ;; Registers used:
 24021 ;;		wreg, status,2, status,0
 24022 ;; Tracked objects:
 24023 ;;		On entry : 0/0
 24024 ;;		On exit  : 0/0
 24025 ;;		Unchanged: 0/0
 24026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24030 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24031 ;;Total ram usage:        4 bytes
 24032 ;; Hardware stack levels used:    1
 24033 ;; Hardware stack levels required when called:    7
 24034 ;; This function calls:
 24035 ;;		Nothing
 24036 ;; This function is called by:
 24037 ;;		_ADC_Init
 24038 ;; This function uses a non-reentrant model
 24039 ;;
 24040                           
 24041                           	psect	text119
 24042  01600A                     __ptext119:
 24043                           	opt stack 0
 24044  01600A                     _ADC_SetupIO:
 24045                           	opt stack 21
 24046                           
 24047                           ;incstack = 0
 24048                           ;ADC_SetupIO@pChannel stored from wreg
 24049  01600A  0100               	movlb	0	; () banked
 24050  01600C  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24051                           
 24052                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24053  01600E  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24054  016012  0E01               	movlw	1
 24055  016014  0100               	movlb	0	; () banked
 24056  016016  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24057  016018  0100               	movlb	0	; () banked
 24058  01601A  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24059  01601C  D003               	goto	u10744
 24060  01601E                     u10745:
 24061  01601E  0100               	movlb	0	; () banked
 24062  016020  90D8               	bcf	status,0,c
 24063  016022  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24064  016024                     u10744:
 24065  016024  0100               	movlb	0	; () banked
 24066  016026  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24067  016028  D7FA               	goto	u10745
 24068  01602A  0100               	movlb	0	; () banked
 24069  01602C  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24070  01602E  0AFF               	xorlw	255
 24071  016030  0100               	movlb	0	; () banked
 24072  016032  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24073                           
 24074                           ;ADC.c: 153: ANCON0 &= MASK;
 24075  016034  0100               	movlb	0	; () banked
 24076  016036  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24077  016038  16C1               	andwf	4033,f,c	;volatile
 24078                           
 24079                           ; BSR set to: 0
 24080  01603A  0012               	return		;funcret
 24081  01603C                     __end_of_ADC_SetupIO:
 24082                           	opt stack 0
 24083                           tosu	equ	0xFFF
 24084                           tosh	equ	0xFFE
 24085                           tosl	equ	0xFFD
 24086                           pclath	equ	0xFFA
 24087                           tblptru	equ	0xFF8
 24088                           tblptrh	equ	0xFF7
 24089                           tblptrl	equ	0xFF6
 24090                           tablat	equ	0xFF5
 24091                           prodh	equ	0xFF4
 24092                           prodl	equ	0xFF3
 24093                           intcon	equ	0xFF2
 24094                           postinc0	equ	0xFEE
 24095                           wreg	equ	0xFE8
 24096                           indf1	equ	0xFE7
 24097                           postdec1	equ	0xFE5
 24098                           fsr1h	equ	0xFE2
 24099                           fsr1l	equ	0xFE1
 24100                           indf2	equ	0xFDF
 24101                           postinc2	equ	0xFDE
 24102                           postdec2	equ	0xFDD
 24103                           plusw2	equ	0xFDB
 24104                           fsr2h	equ	0xFDA
 24105                           fsr2l	equ	0xFD9
 24106                           status	equ	0xFD8
 24107                           
 24108 ;; *************** function _ADC_SetChannel *****************
 24109 ;; Defined at:
 24110 ;;		line 155 in file "Library/ADC.c"
 24111 ;; Parameters:    Size  Location     Type
 24112 ;;  pChannel        1    wreg     enum E6742
 24113 ;; Auto vars:     Size  Location     Type
 24114 ;;  pChannel        1    1[BANK0 ] enum E6742
 24115 ;; Return value:  Size  Location     Type
 24116 ;;                  1    wreg      void 
 24117 ;; Registers used:
 24118 ;;		wreg, status,2, status,0
 24119 ;; Tracked objects:
 24120 ;;		On entry : 0/0
 24121 ;;		On exit  : 0/0
 24122 ;;		Unchanged: 0/0
 24123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24128 ;;Total ram usage:        2 bytes
 24129 ;; Hardware stack levels used:    1
 24130 ;; Hardware stack levels required when called:    7
 24131 ;; This function calls:
 24132 ;;		Nothing
 24133 ;; This function is called by:
 24134 ;;		_ADC_Init
 24135 ;;		_ADC_Start
 24136 ;;		_ADC_ISR
 24137 ;;		_ADC_Sample
 24138 ;; This function uses a non-reentrant model
 24139 ;;
 24140                           
 24141                           	psect	text120
 24142  016378                     __ptext120:
 24143                           	opt stack 0
 24144  016378                     _ADC_SetChannel:
 24145                           	opt stack 20
 24146                           
 24147                           ; BSR set to: 0
 24148                           ;incstack = 0
 24149                           ;ADC_SetChannel@pChannel stored from wreg
 24150  016378  0100               	movlb	0	; () banked
 24151  01637A  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24152                           
 24153                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24154  01637C  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24155  016380  0100               	movlb	0	; () banked
 24156  016382  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24157  016384  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24158  016386  50C2               	movf	4034,w,c	;volatile
 24159  016388  0100               	movlb	0	; () banked
 24160  01638A  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24161  01638C  0BC3               	andlw	-61
 24162  01638E  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24163  016390  6EC2               	movwf	4034,c	;volatile
 24164                           
 24165                           ; BSR set to: 0
 24166  016392  0012               	return		;funcret
 24167  016394                     __end_of_ADC_SetChannel:
 24168                           	opt stack 0
 24169                           tosu	equ	0xFFF
 24170                           tosh	equ	0xFFE
 24171                           tosl	equ	0xFFD
 24172                           pclath	equ	0xFFA
 24173                           tblptru	equ	0xFF8
 24174                           tblptrh	equ	0xFF7
 24175                           tblptrl	equ	0xFF6
 24176                           tablat	equ	0xFF5
 24177                           prodh	equ	0xFF4
 24178                           prodl	equ	0xFF3
 24179                           intcon	equ	0xFF2
 24180                           postinc0	equ	0xFEE
 24181                           wreg	equ	0xFE8
 24182                           indf1	equ	0xFE7
 24183                           postdec1	equ	0xFE5
 24184                           fsr1h	equ	0xFE2
 24185                           fsr1l	equ	0xFE1
 24186                           indf2	equ	0xFDF
 24187                           postinc2	equ	0xFDE
 24188                           postdec2	equ	0xFDD
 24189                           plusw2	equ	0xFDB
 24190                           fsr2h	equ	0xFDA
 24191                           fsr2l	equ	0xFD9
 24192                           status	equ	0xFD8
 24193                           
 24194 ;; *************** function _ADC_ConversionTime *****************
 24195 ;; Defined at:
 24196 ;;		line 199 in file "Library/ADC.c"
 24197 ;; Parameters:    Size  Location     Type
 24198 ;;  pCount          1    wreg     unsigned char 
 24199 ;; Auto vars:     Size  Location     Type
 24200 ;;  pCount          1    1[BANK0 ] unsigned char 
 24201 ;; Return value:  Size  Location     Type
 24202 ;;                  1    wreg      void 
 24203 ;; Registers used:
 24204 ;;		wreg, status,2, status,0
 24205 ;; Tracked objects:
 24206 ;;		On entry : 0/0
 24207 ;;		On exit  : 0/0
 24208 ;;		Unchanged: 0/0
 24209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24214 ;;Total ram usage:        2 bytes
 24215 ;; Hardware stack levels used:    1
 24216 ;; Hardware stack levels required when called:    7
 24217 ;; This function calls:
 24218 ;;		Nothing
 24219 ;; This function is called by:
 24220 ;;		_ADC_Init
 24221 ;; This function uses a non-reentrant model
 24222 ;;
 24223                           
 24224                           	psect	text121
 24225  015B5A                     __ptext121:
 24226                           	opt stack 0
 24227  015B5A                     _ADC_ConversionTime:
 24228                           	opt stack 21
 24229                           
 24230                           ; BSR set to: 0
 24231                           ;incstack = 0
 24232                           ;ADC_ConversionTime@pCount stored from wreg
 24233  015B5A  0100               	movlb	0	; () banked
 24234  015B5C  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24235                           
 24236                           ;ADC.c: 201: if (pCount == 10)
 24237  015B5E  0E0A               	movlw	10
 24238  015B60  0100               	movlb	0	; () banked
 24239  015B62  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24240  015B64  B4D8               	btfsc	status,2,c
 24241  015B66  D00A               	goto	u10710
 24242                           
 24243                           ; BSR set to: 0
 24244                           ;ADC.c: 203: else if (pCount == 14)
 24245                           
 24246                           ; BSR set to: 0
 24247                           
 24248                           ; BSR set to: 0
 24249                           ;ADC.c: 202: pCount -= 2;
 24250  015B68  0E0E               	movlw	14
 24251  015B6A  0100               	movlb	0	; () banked
 24252  015B6C  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24253  015B6E  B4D8               	btfsc	status,2,c
 24254  015B70  D005               	goto	u10710
 24255                           
 24256                           ; BSR set to: 0
 24257                           ;ADC.c: 205: else if (pCount == 18)
 24258                           
 24259                           ; BSR set to: 0
 24260                           
 24261                           ; BSR set to: 0
 24262                           ;ADC.c: 204: pCount -= 2;
 24263  015B72  0E12               	movlw	18
 24264  015B74  0100               	movlb	0	; () banked
 24265  015B76  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24266  015B78  A4D8               	btfss	status,2,c
 24267  015B7A  D003               	goto	l1313
 24268  015B7C                     u10710:
 24269                           
 24270                           ; BSR set to: 0
 24271                           ;ADC.c: 206: pCount -= 2;
 24272  015B7C  0E02               	movlw	2
 24273  015B7E  0100               	movlb	0	; () banked
 24274  015B80  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24275  015B82                     l1313:
 24276                           
 24277                           ; BSR set to: 0
 24278                           ;ADC.c: 208: pCount <<= 1;
 24279                           
 24280                           ; BSR set to: 0
 24281                           
 24282                           ; BSR set to: 0
 24283  015B82  0100               	movlb	0	; () banked
 24284  015B84  90D8               	bcf	status,0,c
 24285  015B86  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24286                           
 24287                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24288  015B88  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24289  015B8C  0100               	movlb	0	; () banked
 24290  015B8E  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24291  015B90  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24292  015B92  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24293  015B94  50C1               	movf	4033,w,c	;volatile
 24294  015B96  0100               	movlb	0	; () banked
 24295  015B98  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24296  015B9A  0BC7               	andlw	-57
 24297  015B9C  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24298  015B9E  6EC1               	movwf	4033,c	;volatile
 24299                           
 24300                           ; BSR set to: 0
 24301  015BA0  0012               	return		;funcret
 24302  015BA2                     __end_of_ADC_ConversionTime:
 24303                           	opt stack 0
 24304                           tosu	equ	0xFFF
 24305                           tosh	equ	0xFFE
 24306                           tosl	equ	0xFFD
 24307                           pclath	equ	0xFFA
 24308                           tblptru	equ	0xFF8
 24309                           tblptrh	equ	0xFF7
 24310                           tblptrl	equ	0xFF6
 24311                           tablat	equ	0xFF5
 24312                           prodh	equ	0xFF4
 24313                           prodl	equ	0xFF3
 24314                           intcon	equ	0xFF2
 24315                           postinc0	equ	0xFEE
 24316                           wreg	equ	0xFE8
 24317                           indf1	equ	0xFE7
 24318                           postdec1	equ	0xFE5
 24319                           fsr1h	equ	0xFE2
 24320                           fsr1l	equ	0xFE1
 24321                           indf2	equ	0xFDF
 24322                           postinc2	equ	0xFDE
 24323                           postdec2	equ	0xFDD
 24324                           plusw2	equ	0xFDB
 24325                           fsr2h	equ	0xFDA
 24326                           fsr2l	equ	0xFD9
 24327                           status	equ	0xFD8
 24328                           
 24329 ;; *************** function _ADC_ClockDivision *****************
 24330 ;; Defined at:
 24331 ;;		line 159 in file "Library/ADC.c"
 24332 ;; Parameters:    Size  Location     Type
 24333 ;;  pDivide         1    wreg     unsigned char 
 24334 ;; Auto vars:     Size  Location     Type
 24335 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24336 ;;  unfound         1    2[BANK0 ] unsigned char 
 24337 ;;  reg             1    1[BANK0 ] unsigned char 
 24338 ;; Return value:  Size  Location     Type
 24339 ;;                  1    wreg      void 
 24340 ;; Registers used:
 24341 ;;		wreg, status,2, status,0
 24342 ;; Tracked objects:
 24343 ;;		On entry : 0/0
 24344 ;;		On exit  : 0/0
 24345 ;;		Unchanged: 0/0
 24346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24348 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24350 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24351 ;;Total ram usage:        3 bytes
 24352 ;; Hardware stack levels used:    1
 24353 ;; Hardware stack levels required when called:    7
 24354 ;; This function calls:
 24355 ;;		Nothing
 24356 ;; This function is called by:
 24357 ;;		_ADC_Init
 24358 ;; This function uses a non-reentrant model
 24359 ;;
 24360                           
 24361                           	psect	text122
 24362  014D9A                     __ptext122:
 24363                           	opt stack 0
 24364  014D9A                     _ADC_ClockDivision:
 24365                           	opt stack 21
 24366                           
 24367                           ; BSR set to: 0
 24368                           ;incstack = 0
 24369                           ;ADC_ClockDivision@pDivide stored from wreg
 24370  014D9A  0100               	movlb	0	; () banked
 24371  014D9C  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24372                           
 24373                           ;ADC.c: 161: UINT8 reg = 0;
 24374  014D9E  0E00               	movlw	0
 24375  014DA0  0100               	movlb	0	; () banked
 24376  014DA2  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24377                           
 24378                           ;ADC.c: 162: bool unfound = 1;
 24379  014DA4  0E01               	movlw	1
 24380  014DA6  D002               	goto	L15
 24381  014DA8                     
 24382                           ; BSR set to: 0
 24383                           ;ADC.c: 167: reg = 0;
 24384                           
 24385                           ; BSR set to: 0
 24386  014DA8  0E00               	movlw	0
 24387  014DAA  D00C               	goto	L20
 24388  014DAC                     L15:
 24389  014DAC  0100               	movlb	0	; () banked
 24390  014DAE  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24391                           
 24392                           ;ADC.c: 169: break;
 24393  014DB0  D02D               	goto	l1296
 24394  014DB2                     
 24395                           ; BSR set to: 0
 24396                           ;ADC.c: 171: reg = 0b100;
 24397                           
 24398                           ; BSR set to: 0
 24399  014DB2  0E04               	movlw	4
 24400  014DB4  D007               	goto	L20
 24401  014DB6                     
 24402                           ; BSR set to: 0
 24403                           ;ADC.c: 175: reg = 0b001;
 24404                           
 24405                           ; BSR set to: 0
 24406  014DB6  0E01               	movlw	1
 24407  014DB8  D005               	goto	L20
 24408  014DBA                     
 24409                           ; BSR set to: 0
 24410                           ;ADC.c: 179: reg = 0b101;
 24411                           
 24412                           ; BSR set to: 0
 24413  014DBA  0E05               	movlw	5
 24414  014DBC  D003               	goto	L20
 24415  014DBE                     
 24416                           ; BSR set to: 0
 24417                           ;ADC.c: 183: reg = 0b010;
 24418                           
 24419                           ; BSR set to: 0
 24420  014DBE  0E02               	movlw	2
 24421  014DC0  D001               	goto	L20
 24422  014DC2                     
 24423                           ; BSR set to: 0
 24424                           ;ADC.c: 187: reg = 0b110;
 24425                           
 24426                           ; BSR set to: 0
 24427  014DC2  0E06               	movlw	6
 24428  014DC4                     L20:
 24429  014DC4  0100               	movlb	0	; () banked
 24430  014DC6  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24431                           
 24432                           ;ADC.c: 188: unfound = 0;
 24433  014DC8  0E00               	movlw	0
 24434  014DCA  D7F0               	goto	L15
 24435  014DCC                     
 24436                           ; BSR set to: 0
 24437                           ;ADC.c: 191: if (pDivide > 2)
 24438                           
 24439                           ; BSR set to: 0
 24440  014DCC  0E02               	movlw	2
 24441  014DCE  0100               	movlb	0	; () banked
 24442  014DD0  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24443  014DD2  D003               	goto	l1303
 24444                           
 24445                           ; BSR set to: 0
 24446                           ;ADC.c: 192: pDivide --;
 24447  014DD4  0100               	movlb	0	; () banked
 24448  014DD6  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24449  014DD8  D019               	goto	l1296
 24450  014DDA                     l1303:
 24451                           
 24452                           ; BSR set to: 0
 24453                           ;ADC.c: 193: else
 24454                           ;ADC.c: 194: pDivide = 2;
 24455                           
 24456                           ; BSR set to: 0
 24457  014DDA  0E02               	movlw	2
 24458  014DDC  0100               	movlb	0	; () banked
 24459  014DDE  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24460                           
 24461                           ; BSR set to: 0
 24462                           ;ADC.c: 195: };
 24463  014DE0  D015               	goto	l1296
 24464  014DE2                     
 24465                           ; BSR set to: 0
 24466                           
 24467                           ; BSR set to: 0
 24468  014DE2  0100               	movlb	0	; () banked
 24469  014DE4  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24470                           
 24471                           ; Switch size 1, requested type "space"
 24472                           ; Number of cases is 6, Range of values is 2 to 64
 24473                           ; switch strategies available:
 24474                           ; Name         Instructions Cycles
 24475                           ; simple_byte           19    10 (average)
 24476                           ;	Chosen strategy is simple_byte
 24477  014DE6  0A02               	xorlw	2	; case 2
 24478  014DE8  B4D8               	btfsc	status,2,c
 24479  014DEA  D7DE               	goto	l1295
 24480  014DEC  0A06               	xorlw	6	; case 4
 24481  014DEE  B4D8               	btfsc	status,2,c
 24482  014DF0  D7E0               	goto	l1297
 24483  014DF2  0A0C               	xorlw	12	; case 8
 24484  014DF4  B4D8               	btfsc	status,2,c
 24485  014DF6  D7DF               	goto	l1298
 24486  014DF8  0A18               	xorlw	24	; case 16
 24487  014DFA  B4D8               	btfsc	status,2,c
 24488  014DFC  D7DE               	goto	l1299
 24489  014DFE  0A30               	xorlw	48	; case 32
 24490  014E00  B4D8               	btfsc	status,2,c
 24491  014E02  D7DD               	goto	l1300
 24492  014E04  0A60               	xorlw	96	; case 64
 24493  014E06  B4D8               	btfsc	status,2,c
 24494  014E08  D7DC               	goto	l1301
 24495  014E0A  D7E0               	goto	l1302
 24496  014E0C                     l1296:
 24497                           
 24498                           ; BSR set to: 0
 24499                           
 24500                           ; BSR set to: 0
 24501                           
 24502                           ; BSR set to: 0
 24503  014E0C  0100               	movlb	0	; () banked
 24504  014E0E  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24505  014E10  0100               	movlb	0	; () banked
 24506  014E12  A4D8               	btfss	status,2,c
 24507  014E14  D7E6               	goto	l1294
 24508                           
 24509                           ; BSR set to: 0
 24510                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24511                           
 24512                           ; BSR set to: 0
 24513  014E16  50C1               	movf	4033,w,c	;volatile
 24514  014E18  0100               	movlb	0	; () banked
 24515  014E1A  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24516  014E1C  0BF8               	andlw	-8
 24517  014E1E  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24518  014E20  6EC1               	movwf	4033,c	;volatile
 24519                           
 24520                           ; BSR set to: 0
 24521  014E22  0012               	return		;funcret
 24522  014E24                     __end_of_ADC_ClockDivision:
 24523                           	opt stack 0
 24524                           tosu	equ	0xFFF
 24525                           tosh	equ	0xFFE
 24526                           tosl	equ	0xFFD
 24527                           pclath	equ	0xFFA
 24528                           tblptru	equ	0xFF8
 24529                           tblptrh	equ	0xFF7
 24530                           tblptrl	equ	0xFF6
 24531                           tablat	equ	0xFF5
 24532                           prodh	equ	0xFF4
 24533                           prodl	equ	0xFF3
 24534                           intcon	equ	0xFF2
 24535                           postinc0	equ	0xFEE
 24536                           wreg	equ	0xFE8
 24537                           indf1	equ	0xFE7
 24538                           postdec1	equ	0xFE5
 24539                           fsr1h	equ	0xFE2
 24540                           fsr1l	equ	0xFE1
 24541                           indf2	equ	0xFDF
 24542                           postinc2	equ	0xFDE
 24543                           postdec2	equ	0xFDD
 24544                           plusw2	equ	0xFDB
 24545                           fsr2h	equ	0xFDA
 24546                           fsr2l	equ	0xFD9
 24547                           status	equ	0xFD8
 24548                           
 24549 ;; *************** function _ADC_Calibrate *****************
 24550 ;; Defined at:
 24551 ;;		line 63 in file "Library/ADC.c"
 24552 ;; Parameters:    Size  Location     Type
 24553 ;;		None
 24554 ;; Auto vars:     Size  Location     Type
 24555 ;;		None
 24556 ;; Return value:  Size  Location     Type
 24557 ;;                  1    wreg      void 
 24558 ;; Registers used:
 24559 ;;		cstack
 24560 ;; Tracked objects:
 24561 ;;		On entry : 0/0
 24562 ;;		On exit  : 0/0
 24563 ;;		Unchanged: 0/0
 24564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24569 ;;Total ram usage:        0 bytes
 24570 ;; Hardware stack levels used:    1
 24571 ;; Hardware stack levels required when called:    8
 24572 ;; This function calls:
 24573 ;;		_ADC_Off
 24574 ;;		_ADC_On
 24575 ;; This function is called by:
 24576 ;;		_ADC_Init
 24577 ;; This function uses a non-reentrant model
 24578 ;;
 24579                           
 24580                           	psect	text123
 24581  016498                     __ptext123:
 24582                           	opt stack 0
 24583  016498                     _ADC_Calibrate:
 24584                           	opt stack 20
 24585                           
 24586                           ;ADC.c: 65: ADC_On();
 24587                           
 24588                           ; BSR set to: 0
 24589                           ;incstack = 0
 24590  016498  ECD8  F0B2         	call	_ADC_On	;wreg free
 24591                           
 24592                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24593  01649C  8CC1               	bsf	4033,6,c	;volatile
 24594                           
 24595                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24596  01649E  82C2               	bsf	4034,1,c	;volatile
 24597  0164A0  B2C2               	btfsc	4034,1,c	;volatile
 24598  0164A2  D7FE               	goto	l1254
 24599                           
 24600                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24601  0164A4  9CC1               	bcf	4033,6,c	;volatile
 24602                           
 24603                           ;ADC.c: 73: ADC_Off();
 24604  0164A6  ECCA  F0B2         	call	_ADC_Off	;wreg free
 24605  0164AA  0012               	return		;funcret
 24606  0164AC                     __end_of_ADC_Calibrate:
 24607                           	opt stack 0
 24608                           tosu	equ	0xFFF
 24609                           tosh	equ	0xFFE
 24610                           tosl	equ	0xFFD
 24611                           pclath	equ	0xFFA
 24612                           tblptru	equ	0xFF8
 24613                           tblptrh	equ	0xFF7
 24614                           tblptrl	equ	0xFF6
 24615                           tablat	equ	0xFF5
 24616                           prodh	equ	0xFF4
 24617                           prodl	equ	0xFF3
 24618                           intcon	equ	0xFF2
 24619                           postinc0	equ	0xFEE
 24620                           wreg	equ	0xFE8
 24621                           indf1	equ	0xFE7
 24622                           postdec1	equ	0xFE5
 24623                           fsr1h	equ	0xFE2
 24624                           fsr1l	equ	0xFE1
 24625                           indf2	equ	0xFDF
 24626                           postinc2	equ	0xFDE
 24627                           postdec2	equ	0xFDD
 24628                           plusw2	equ	0xFDB
 24629                           fsr2h	equ	0xFDA
 24630                           fsr2l	equ	0xFD9
 24631                           status	equ	0xFD8
 24632                           
 24633 ;; *************** function _ADC_On *****************
 24634 ;; Defined at:
 24635 ;;		line 85 in file "Library/ADC.c"
 24636 ;; Parameters:    Size  Location     Type
 24637 ;;		None
 24638 ;; Auto vars:     Size  Location     Type
 24639 ;;		None
 24640 ;; Return value:  Size  Location     Type
 24641 ;;                  1    wreg      void 
 24642 ;; Registers used:
 24643 ;;		None
 24644 ;; Tracked objects:
 24645 ;;		On entry : 0/0
 24646 ;;		On exit  : 0/0
 24647 ;;		Unchanged: 0/0
 24648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24653 ;;Total ram usage:        0 bytes
 24654 ;; Hardware stack levels used:    1
 24655 ;; Hardware stack levels required when called:    7
 24656 ;; This function calls:
 24657 ;;		Nothing
 24658 ;; This function is called by:
 24659 ;;		_ADC_Calibrate
 24660 ;;		_ADC_Start
 24661 ;;		_ADC_ISR
 24662 ;;		_ADC_Sample
 24663 ;; This function uses a non-reentrant model
 24664 ;;
 24665                           
 24666                           	psect	text124
 24667  0165B0                     __ptext124:
 24668                           	opt stack 0
 24669  0165B0                     _ADC_On:
 24670                           	opt stack 20
 24671                           
 24672                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24673                           
 24674                           ;incstack = 0
 24675  0165B0  80C2               	bsf	4034,0,c	;volatile
 24676                           
 24677                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24678  0165B2  9C9E               	bcf	3998,6,c	;volatile
 24679  0165B4  0012               	return		;funcret
 24680  0165B6                     __end_of_ADC_On:
 24681                           	opt stack 0
 24682                           tosu	equ	0xFFF
 24683                           tosh	equ	0xFFE
 24684                           tosl	equ	0xFFD
 24685                           pclath	equ	0xFFA
 24686                           tblptru	equ	0xFF8
 24687                           tblptrh	equ	0xFF7
 24688                           tblptrl	equ	0xFF6
 24689                           tablat	equ	0xFF5
 24690                           prodh	equ	0xFF4
 24691                           prodl	equ	0xFF3
 24692                           intcon	equ	0xFF2
 24693                           postinc0	equ	0xFEE
 24694                           wreg	equ	0xFE8
 24695                           indf1	equ	0xFE7
 24696                           postdec1	equ	0xFE5
 24697                           fsr1h	equ	0xFE2
 24698                           fsr1l	equ	0xFE1
 24699                           indf2	equ	0xFDF
 24700                           postinc2	equ	0xFDE
 24701                           postdec2	equ	0xFDD
 24702                           plusw2	equ	0xFDB
 24703                           fsr2h	equ	0xFDA
 24704                           fsr2l	equ	0xFD9
 24705                           status	equ	0xFD8
 24706                           
 24707 ;; *************** function _ADC_Off *****************
 24708 ;; Defined at:
 24709 ;;		line 94 in file "Library/ADC.c"
 24710 ;; Parameters:    Size  Location     Type
 24711 ;;		None
 24712 ;; Auto vars:     Size  Location     Type
 24713 ;;		None
 24714 ;; Return value:  Size  Location     Type
 24715 ;;                  1    wreg      void 
 24716 ;; Registers used:
 24717 ;;		None
 24718 ;; Tracked objects:
 24719 ;;		On entry : 0/0
 24720 ;;		On exit  : 0/0
 24721 ;;		Unchanged: 0/0
 24722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24727 ;;Total ram usage:        0 bytes
 24728 ;; Hardware stack levels used:    1
 24729 ;; Hardware stack levels required when called:    7
 24730 ;; This function calls:
 24731 ;;		Nothing
 24732 ;; This function is called by:
 24733 ;;		_ADC_Calibrate
 24734 ;;		_ADC_Start
 24735 ;;		_ADC_ISR
 24736 ;;		_ADC_Sample
 24737 ;; This function uses a non-reentrant model
 24738 ;;
 24739                           
 24740                           	psect	text125
 24741  016594                     __ptext125:
 24742                           	opt stack 0
 24743  016594                     _ADC_Off:
 24744                           	opt stack 20
 24745                           
 24746                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 24747                           
 24748                           ;incstack = 0
 24749  016594  90C2               	bcf	4034,0,c	;volatile
 24750                           
 24751                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 24752  016596  9C9E               	bcf	3998,6,c	;volatile
 24753                           
 24754                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 24755  016598  9C9D               	bcf	3997,6,c	;volatile
 24756  01659A  0012               	return		;funcret
 24757  01659C                     __end_of_ADC_Off:
 24758                           	opt stack 0
 24759                           tosu	equ	0xFFF
 24760                           tosh	equ	0xFFE
 24761                           tosl	equ	0xFFD
 24762                           pclath	equ	0xFFA
 24763                           tblptru	equ	0xFF8
 24764                           tblptrh	equ	0xFF7
 24765                           tblptrl	equ	0xFF6
 24766                           tablat	equ	0xFF5
 24767                           prodh	equ	0xFF4
 24768                           prodl	equ	0xFF3
 24769                           intcon	equ	0xFF2
 24770                           postinc0	equ	0xFEE
 24771                           wreg	equ	0xFE8
 24772                           indf1	equ	0xFE7
 24773                           postdec1	equ	0xFE5
 24774                           fsr1h	equ	0xFE2
 24775                           fsr1l	equ	0xFE1
 24776                           indf2	equ	0xFDF
 24777                           postinc2	equ	0xFDE
 24778                           postdec2	equ	0xFDD
 24779                           plusw2	equ	0xFDB
 24780                           fsr2h	equ	0xFDA
 24781                           fsr2l	equ	0xFD9
 24782                           status	equ	0xFD8
 24783                           
 24784 ;; *************** function _getMode *****************
 24785 ;; Defined at:
 24786 ;;		line 104 in file "main.c"
 24787 ;; Parameters:    Size  Location     Type
 24788 ;;		None
 24789 ;; Auto vars:     Size  Location     Type
 24790 ;;		None
 24791 ;; Return value:  Size  Location     Type
 24792 ;;                  1    wreg      void 
 24793 ;; Registers used:
 24794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24795 ;; Tracked objects:
 24796 ;;		On entry : 0/0
 24797 ;;		On exit  : 0/0
 24798 ;;		Unchanged: 0/0
 24799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24804 ;;Total ram usage:        0 bytes
 24805 ;; Hardware stack levels used:    1
 24806 ;; Hardware stack levels required when called:   16
 24807 ;; This function calls:
 24808 ;;		_HMI_DIPSwitch
 24809 ;;		_HMI_DownSwitch
 24810 ;;		_HMI_LeftSwitch
 24811 ;;		_HMI_Poll
 24812 ;;		_HMI_RightSwitch
 24813 ;;		_HMI_UpSwitch
 24814 ;;		_MXK_DIPSwitch
 24815 ;;		_MXK_TestButton
 24816 ;; This function is called by:
 24817 ;;		_main
 24818 ;; This function uses a non-reentrant model
 24819 ;;
 24820                           
 24821                           	psect	text126
 24822  013F4E                     __ptext126:
 24823                           	opt stack 0
 24824  013F4E                     _getMode:
 24825                           	opt stack 14
 24826                           
 24827                           ;main.c: 105: HMI_Poll();
 24828                           
 24829                           ;incstack = 0
 24830  013F4E  EC76  F0A9         	call	_HMI_Poll	;wreg free
 24831                           
 24832                           ;main.c: 106: mode = 0;
 24833  013F52  0E00               	movlw	0
 24834  013F54  0100               	movlb	0	; () banked
 24835  013F56  6F74               	movwf	(_mode+1)& (0+255),b
 24836  013F58  0E00               	movlw	0
 24837  013F5A  6F73               	movwf	_mode& (0+255),b
 24838                           
 24839                           ; BSR set to: 0
 24840                           ;main.c: 107: if (HMIBoard.mUp.mGetState()) {
 24841  013F5C  EE23  F05F         	lfsr	2,_HMIBoard+35
 24842  013F60  D801               	call	u11598
 24843  013F62  D00A               	goto	u11599
 24844  013F64                     u11598:
 24845  013F64  0005               	push	
 24846  013F66  6EFA               	movwf	pclath,c
 24847  013F68  50DE               	movf	postinc2,w,c
 24848  013F6A  6EFD               	movwf	tosl,c
 24849  013F6C  50DE               	movf	postinc2,w,c
 24850  013F6E  6EFE               	movwf	tosh,c
 24851  013F70  50DE               	movf	postinc2,w,c
 24852  013F72  6EFF               	movwf	tosu,c
 24853  013F74  50FA               	movf	pclath,w,c
 24854  013F76  0012               	return		;indir
 24855  013F78                     u11599:
 24856  013F78  0900               	iorlw	0
 24857  013F7A  B4D8               	btfsc	status,2,c
 24858  013F7C  D005               	goto	l2309
 24859                           
 24860                           ;main.c: 108: mode = 1;
 24861  013F7E  0E00               	movlw	0
 24862  013F80  0100               	movlb	0	; () banked
 24863  013F82  6F74               	movwf	(_mode+1)& (0+255),b
 24864  013F84  0E01               	movlw	1
 24865  013F86  6F73               	movwf	_mode& (0+255),b
 24866  013F88                     l2309:
 24867                           
 24868                           ;main.c: 109: }
 24869                           ;main.c: 110: if (HMIBoard.mRight.mGetState()) {
 24870                           
 24871                           ; BSR set to: 0
 24872  013F88  EE23  F04B         	lfsr	2,_HMIBoard+15
 24873  013F8C  D801               	call	u11618
 24874  013F8E  D00A               	goto	u11619
 24875  013F90                     u11618:
 24876  013F90  0005               	push	
 24877  013F92  6EFA               	movwf	pclath,c
 24878  013F94  50DE               	movf	postinc2,w,c
 24879  013F96  6EFD               	movwf	tosl,c
 24880  013F98  50DE               	movf	postinc2,w,c
 24881  013F9A  6EFE               	movwf	tosh,c
 24882  013F9C  50DE               	movf	postinc2,w,c
 24883  013F9E  6EFF               	movwf	tosu,c
 24884  013FA0  50FA               	movf	pclath,w,c
 24885  013FA2  0012               	return		;indir
 24886  013FA4                     u11619:
 24887  013FA4  0900               	iorlw	0
 24888  013FA6  B4D8               	btfsc	status,2,c
 24889  013FA8  D005               	goto	l2310
 24890                           
 24891                           ;main.c: 111: mode = 2;
 24892  013FAA  0E00               	movlw	0
 24893  013FAC  0100               	movlb	0	; () banked
 24894  013FAE  6F74               	movwf	(_mode+1)& (0+255),b
 24895  013FB0  0E02               	movlw	2
 24896  013FB2  6F73               	movwf	_mode& (0+255),b
 24897  013FB4                     l2310:
 24898                           
 24899                           ;main.c: 112: }
 24900                           ;main.c: 113: if (HMIBoard.mDown.mGetState()) {
 24901                           
 24902                           ; BSR set to: 0
 24903  013FB4  EE23  F069         	lfsr	2,_HMIBoard+45
 24904  013FB8  D801               	call	u11638
 24905  013FBA  D00A               	goto	u11639
 24906  013FBC                     u11638:
 24907  013FBC  0005               	push	
 24908  013FBE  6EFA               	movwf	pclath,c
 24909  013FC0  50DE               	movf	postinc2,w,c
 24910  013FC2  6EFD               	movwf	tosl,c
 24911  013FC4  50DE               	movf	postinc2,w,c
 24912  013FC6  6EFE               	movwf	tosh,c
 24913  013FC8  50DE               	movf	postinc2,w,c
 24914  013FCA  6EFF               	movwf	tosu,c
 24915  013FCC  50FA               	movf	pclath,w,c
 24916  013FCE  0012               	return		;indir
 24917  013FD0                     u11639:
 24918  013FD0  0900               	iorlw	0
 24919  013FD2  B4D8               	btfsc	status,2,c
 24920  013FD4  D005               	goto	l2311
 24921                           
 24922                           ;main.c: 114: mode = 3;
 24923  013FD6  0E00               	movlw	0
 24924  013FD8  0100               	movlb	0	; () banked
 24925  013FDA  6F74               	movwf	(_mode+1)& (0+255),b
 24926  013FDC  0E03               	movlw	3
 24927  013FDE  6F73               	movwf	_mode& (0+255),b
 24928  013FE0                     l2311:
 24929                           
 24930                           ;main.c: 115: }
 24931                           ;main.c: 116: if (HMIBoard.mLeft.mGetState()) {
 24932                           
 24933                           ; BSR set to: 0
 24934  013FE0  EE23  F055         	lfsr	2,_HMIBoard+25
 24935  013FE4  D801               	call	u11658
 24936  013FE6  D00A               	goto	u11659
 24937  013FE8                     u11658:
 24938  013FE8  0005               	push	
 24939  013FEA  6EFA               	movwf	pclath,c
 24940  013FEC  50DE               	movf	postinc2,w,c
 24941  013FEE  6EFD               	movwf	tosl,c
 24942  013FF0  50DE               	movf	postinc2,w,c
 24943  013FF2  6EFE               	movwf	tosh,c
 24944  013FF4  50DE               	movf	postinc2,w,c
 24945  013FF6  6EFF               	movwf	tosu,c
 24946  013FF8  50FA               	movf	pclath,w,c
 24947  013FFA  0012               	return		;indir
 24948  013FFC                     u11659:
 24949  013FFC  0900               	iorlw	0
 24950  013FFE  B4D8               	btfsc	status,2,c
 24951  014000  0012               	return	
 24952                           
 24953                           ;main.c: 117: mode = 4;
 24954  014002  0E00               	movlw	0
 24955  014004  0100               	movlb	0	; () banked
 24956  014006  6F74               	movwf	(_mode+1)& (0+255),b
 24957  014008  0E04               	movlw	4
 24958  01400A  6F73               	movwf	_mode& (0+255),b
 24959  01400C  0012               	return	
 24960  01400E                     __end_of_getMode:
 24961                           	opt stack 0
 24962                           tosu	equ	0xFFF
 24963                           tosh	equ	0xFFE
 24964                           tosl	equ	0xFFD
 24965                           pclath	equ	0xFFA
 24966                           tblptru	equ	0xFF8
 24967                           tblptrh	equ	0xFF7
 24968                           tblptrl	equ	0xFF6
 24969                           tablat	equ	0xFF5
 24970                           prodh	equ	0xFF4
 24971                           prodl	equ	0xFF3
 24972                           intcon	equ	0xFF2
 24973                           postinc0	equ	0xFEE
 24974                           wreg	equ	0xFE8
 24975                           indf1	equ	0xFE7
 24976                           postdec1	equ	0xFE5
 24977                           fsr1h	equ	0xFE2
 24978                           fsr1l	equ	0xFE1
 24979                           indf2	equ	0xFDF
 24980                           postinc2	equ	0xFDE
 24981                           postdec2	equ	0xFDD
 24982                           plusw2	equ	0xFDB
 24983                           fsr2h	equ	0xFDA
 24984                           fsr2l	equ	0xFD9
 24985                           status	equ	0xFD8
 24986                           
 24987 ;; *************** function _HMI_Poll *****************
 24988 ;; Defined at:
 24989 ;;		line 252 in file "HMI.c"
 24990 ;; Parameters:    Size  Location     Type
 24991 ;;		None
 24992 ;; Auto vars:     Size  Location     Type
 24993 ;;		None
 24994 ;; Return value:  Size  Location     Type
 24995 ;;                  1    wreg      void 
 24996 ;; Registers used:
 24997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24998 ;; Tracked objects:
 24999 ;;		On entry : 0/0
 25000 ;;		On exit  : 0/0
 25001 ;;		Unchanged: 0/0
 25002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25007 ;;Total ram usage:        0 bytes
 25008 ;; Hardware stack levels used:    1
 25009 ;; Hardware stack levels required when called:   15
 25010 ;; This function calls:
 25011 ;;		_Button_Poll
 25012 ;; This function is called by:
 25013 ;;		_getMode
 25014 ;;		_safeToGo
 25015 ;;		_main
 25016 ;; This function uses a non-reentrant model
 25017 ;;
 25018                           
 25019                           	psect	text127
 25020  0152EC                     __ptext127:
 25021                           	opt stack 0
 25022  0152EC                     _HMI_Poll:
 25023                           	opt stack 13
 25024                           
 25025                           ;HMI.c: 254: TRISE = 0xFC;
 25026                           
 25027                           ;incstack = 0
 25028  0152EC  0EFC               	movlw	252
 25029  0152EE  6E96               	movwf	3990,c	;volatile
 25030                           
 25031                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25032  0152F0  0E6C               	movlw	low (_HMIBoard+48)
 25033  0152F2  0100               	movlb	0	; () banked
 25034  0152F4  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25035  0152F6  0E03               	movlw	high (_HMIBoard+48)
 25036  0152F8  0100               	movlb	0	; () banked
 25037  0152FA  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25038  0152FC  0E01               	movlw	1
 25039  0152FE  0100               	movlb	0	; () banked
 25040  015300  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25041  015302  EC68  F097         	call	_Button_Poll	;wreg free
 25042                           
 25043                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25044  015306  0E4E               	movlw	low (_HMIBoard+18)
 25045  015308  0100               	movlb	0	; () banked
 25046  01530A  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25047  01530C  0E03               	movlw	high (_HMIBoard+18)
 25048  01530E  0100               	movlb	0	; () banked
 25049  015310  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25050  015312  0E01               	movlw	1
 25051  015314  0100               	movlb	0	; () banked
 25052  015316  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25053  015318  EC68  F097         	call	_Button_Poll	;wreg free
 25054                           
 25055                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25056  01531C  0E44               	movlw	low (_HMIBoard+8)
 25057  01531E  0100               	movlb	0	; () banked
 25058  015320  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25059  015322  0E03               	movlw	high (_HMIBoard+8)
 25060  015324  0100               	movlb	0	; () banked
 25061  015326  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25062  015328  0E01               	movlw	1
 25063  01532A  0100               	movlb	0	; () banked
 25064  01532C  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25065  01532E  EC68  F097         	call	_Button_Poll	;wreg free
 25066                           
 25067                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25068  015332  0E58               	movlw	low (_HMIBoard+28)
 25069  015334  0100               	movlb	0	; () banked
 25070  015336  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25071  015338  0E03               	movlw	high (_HMIBoard+28)
 25072  01533A  0100               	movlb	0	; () banked
 25073  01533C  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25074  01533E  0E01               	movlw	1
 25075  015340  0100               	movlb	0	; () banked
 25076  015342  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25077  015344  EC68  F097         	call	_Button_Poll	;wreg free
 25078                           
 25079                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25080  015348  0E62               	movlw	low (_HMIBoard+38)
 25081  01534A  0100               	movlb	0	; () banked
 25082  01534C  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25083  01534E  0E03               	movlw	high (_HMIBoard+38)
 25084  015350  0100               	movlb	0	; () banked
 25085  015352  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25086  015354  0E01               	movlw	1
 25087  015356  0100               	movlb	0	; () banked
 25088  015358  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25089  01535A  EC68  F097         	call	_Button_Poll	;wreg free
 25090  01535E  0012               	return		;funcret
 25091  015360                     __end_of_HMI_Poll:
 25092                           	opt stack 0
 25093                           tosu	equ	0xFFF
 25094                           tosh	equ	0xFFE
 25095                           tosl	equ	0xFFD
 25096                           pclath	equ	0xFFA
 25097                           tblptru	equ	0xFF8
 25098                           tblptrh	equ	0xFF7
 25099                           tblptrl	equ	0xFF6
 25100                           tablat	equ	0xFF5
 25101                           prodh	equ	0xFF4
 25102                           prodl	equ	0xFF3
 25103                           intcon	equ	0xFF2
 25104                           postinc0	equ	0xFEE
 25105                           wreg	equ	0xFE8
 25106                           indf1	equ	0xFE7
 25107                           postdec1	equ	0xFE5
 25108                           fsr1h	equ	0xFE2
 25109                           fsr1l	equ	0xFE1
 25110                           indf2	equ	0xFDF
 25111                           postinc2	equ	0xFDE
 25112                           postdec2	equ	0xFDD
 25113                           plusw2	equ	0xFDB
 25114                           fsr2h	equ	0xFDA
 25115                           fsr2l	equ	0xFD9
 25116                           status	equ	0xFD8
 25117                           
 25118 ;; *************** function _Button_Poll *****************
 25119 ;; Defined at:
 25120 ;;		line 57 in file "Library/Button.c"
 25121 ;; Parameters:    Size  Location     Type
 25122 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25123 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25124 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25125 ;; Auto vars:     Size  Location     Type
 25126 ;;  Pin             1   35[BANK0 ] unsigned char 
 25127 ;; Return value:  Size  Location     Type
 25128 ;;                  1    wreg      unsigned char 
 25129 ;; Registers used:
 25130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25131 ;; Tracked objects:
 25132 ;;		On entry : 0/0
 25133 ;;		On exit  : 0/0
 25134 ;;		Unchanged: 0/0
 25135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25136 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25138 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25139 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25140 ;;Total ram usage:        9 bytes
 25141 ;; Hardware stack levels used:    1
 25142 ;; Hardware stack levels required when called:   14
 25143 ;; This function calls:
 25144 ;;		_Event_DIPSwitch
 25145 ;;		_Event_NULL
 25146 ;;		_Event_TestButton
 25147 ;;		_HMI_DIPSwitch
 25148 ;;		_HMI_DownSwitch
 25149 ;;		_HMI_LeftSwitch
 25150 ;;		_HMI_RightSwitch
 25151 ;;		_HMI_UpSwitch
 25152 ;;		_MXK_DIPSwitch
 25153 ;;		_MXK_TestButton
 25154 ;; This function is called by:
 25155 ;;		_HMI_Poll
 25156 ;;		_MXK_Poll
 25157 ;; This function uses a non-reentrant model
 25158 ;;
 25159                           
 25160                           	psect	text128
 25161  012ED0                     __ptext128:
 25162                           	opt stack 0
 25163  012ED0                     _Button_Poll:
 25164                           	opt stack 13
 25165                           
 25166                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25167                           
 25168                           ;incstack = 0
 25169  012ED0  0100               	movlb	0	; () banked
 25170  012ED2  EE20 F007          	lfsr	2,7
 25171  012ED6  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25172  012ED8  26D9               	addwf	fsr2l,f,c
 25173  012EDA  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25174  012EDC  22DA               	addwfc	fsr2h,f,c
 25175  012EDE  D801               	call	u9538
 25176  012EE0  D00A               	goto	u9539
 25177  012EE2                     u9538:
 25178  012EE2  0005               	push	
 25179  012EE4  6EFA               	movwf	pclath,c
 25180  012EE6  50DE               	movf	postinc2,w,c
 25181  012EE8  6EFD               	movwf	tosl,c
 25182  012EEA  50DE               	movf	postinc2,w,c
 25183  012EEC  6EFE               	movwf	tosh,c
 25184  012EEE  50DE               	movf	postinc2,w,c
 25185  012EF0  6EFF               	movwf	tosu,c
 25186  012EF2  50FA               	movf	pclath,w,c
 25187  012EF4  0012               	return		;indir
 25188  012EF6                     u9539:
 25189  012EF6  0100               	movlb	0	; () banked
 25190  012EF8  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25191                           
 25192                           ; BSR set to: 0
 25193                           ;Button.c: 61: if (pButton->mState == Pin)
 25194  012EFA  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25195  012EFE  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25196  012F02  0100               	movlb	0	; () banked
 25197  012F04  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25198  012F06  18DE               	xorwf	postinc2,w,c
 25199  012F08  A4D8               	btfss	status,2,c
 25200  012F0A  D021               	goto	l11
 25201                           
 25202                           ; BSR set to: 0
 25203                           ;Button.c: 62: {
 25204                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25205  012F0C  0100               	movlb	0	; () banked
 25206  012F0E  EE20 F001          	lfsr	2,1
 25207  012F12  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25208  012F14  26D9               	addwf	fsr2l,f,c
 25209  012F16  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25210  012F18  22DA               	addwfc	fsr2h,f,c
 25211  012F1A  0100               	movlb	0	; () banked
 25212  012F1C  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25213  012F1E  5CDE               	subwf	postinc2,w,c
 25214  012F20  B0D8               	btfsc	status,0,c
 25215  012F22  D00A               	goto	l12
 25216                           
 25217                           ; BSR set to: 0
 25218                           ;Button.c: 66: pButton->mCount = 0;
 25219  012F24  0100               	movlb	0	; () banked
 25220  012F26  EE20 F001          	lfsr	2,1
 25221  012F2A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25222  012F2C  26D9               	addwf	fsr2l,f,c
 25223  012F2E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25224  012F30  22DA               	addwfc	fsr2h,f,c
 25225  012F32  0E00               	movlw	0
 25226  012F34  6EDF               	movwf	indf2,c
 25227  012F36  0012               	return	
 25228  012F38                     l12:
 25229                           
 25230                           ; BSR set to: 0
 25231                           ;Button.c: 67: else
 25232                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25233                           
 25234                           ; BSR set to: 0
 25235  012F38  0100               	movlb	0	; () banked
 25236  012F3A  EE20 F001          	lfsr	2,1
 25237  012F3E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25238  012F40  26D9               	addwf	fsr2l,f,c
 25239  012F42  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25240  012F44  22DA               	addwfc	fsr2h,f,c
 25241  012F46  0100               	movlb	0	; () banked
 25242  012F48  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25243  012F4A  5EDF               	subwf	indf2,f,c
 25244                           
 25245                           ; BSR set to: 0
 25246                           ;Button.c: 69: }
 25247  012F4C  0012               	return	
 25248  012F4E                     l11:
 25249                           
 25250                           ; BSR set to: 0
 25251                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25252                           
 25253                           ; BSR set to: 0
 25254  012F4E  0100               	movlb	0	; () banked
 25255  012F50  EE20 F001          	lfsr	2,1
 25256  012F54  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25257  012F56  26D9               	addwf	fsr2l,f,c
 25258  012F58  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25259  012F5A  22DA               	addwfc	fsr2h,f,c
 25260  012F5C  50DF               	movf	indf2,w,c
 25261  012F5E  0100               	movlb	0	; () banked
 25262  012F60  6FD8               	movwf	??_Button_Poll& (0+255),b
 25263  012F62  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25264  012F64  0100               	movlb	0	; () banked
 25265  012F66  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25266  012F68  0100               	movlb	0	; () banked
 25267  012F6A  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25268  012F6C  0E00               	movlw	0
 25269  012F6E  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25270  012F70  0100               	movlb	0	; () banked
 25271  012F72  EE20 F001          	lfsr	2,1
 25272  012F76  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25273  012F78  26D9               	addwf	fsr2l,f,c
 25274  012F7A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25275  012F7C  22DA               	addwfc	fsr2h,f,c
 25276  012F7E  50DF               	movf	indf2,w,c
 25277  012F80  0100               	movlb	0	; () banked
 25278  012F82  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25279  012F84  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25280  012F86  0100               	movlb	0	; () banked
 25281  012F88  51D8               	movf	??_Button_Poll& (0+255),w,b
 25282  012F8A  0100               	movlb	0	; () banked
 25283  012F8C  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25284  012F8E  0100               	movlb	0	; () banked
 25285  012F90  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25286  012F92  0A80               	xorlw	128
 25287  012F94  0100               	movlb	0	; () banked
 25288  012F96  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25289  012F98  0100               	movlb	0	; () banked
 25290  012F9A  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25291  012F9C  0A80               	xorlw	128
 25292  012F9E  0100               	movlb	0	; () banked
 25293  012FA0  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25294  012FA2  B0D8               	btfsc	status,0,c
 25295  012FA4  0012               	return	
 25296                           
 25297                           ; BSR set to: 0
 25298                           ;Button.c: 73: {
 25299                           ;Button.c: 75: pButton->mCount += pIncrement;
 25300  012FA6  0100               	movlb	0	; () banked
 25301  012FA8  EE20 F001          	lfsr	2,1
 25302  012FAC  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25303  012FAE  26D9               	addwf	fsr2l,f,c
 25304  012FB0  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25305  012FB2  22DA               	addwfc	fsr2h,f,c
 25306  012FB4  0100               	movlb	0	; () banked
 25307  012FB6  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25308  012FB8  26DF               	addwf	indf2,f,c
 25309                           
 25310                           ; BSR set to: 0
 25311                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25312  012FBA  0100               	movlb	0	; () banked
 25313  012FBC  EE20 F002          	lfsr	2,2
 25314  012FC0  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25315  012FC2  26D9               	addwf	fsr2l,f,c
 25316  012FC4  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25317  012FC6  22DA               	addwfc	fsr2h,f,c
 25318  012FC8  0100               	movlb	0	; () banked
 25319  012FCA  EE10 F001          	lfsr	1,1
 25320  012FCE  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25321  012FD0  26E1               	addwf	fsr1l,f,c
 25322  012FD2  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25323  012FD4  22E2               	addwfc	fsr1h,f,c
 25324  012FD6  50E7               	movf	indf1,w,c
 25325  012FD8  0100               	movlb	0	; () banked
 25326  012FDA  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25327  012FDC  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25328  012FDE  50DE               	movf	postinc2,w,c
 25329  012FE0  0100               	movlb	0	; () banked
 25330  012FE2  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25331  012FE4  50DE               	movf	postinc2,w,c
 25332  012FE6  0100               	movlb	0	; () banked
 25333  012FE8  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25334  012FEA  A0D8               	btfss	status,0,c
 25335  012FEC  0012               	return	
 25336                           
 25337                           ; BSR set to: 0
 25338                           ;Button.c: 77: {
 25339                           ;Button.c: 79: pButton->mState = Pin;
 25340  012FEE  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25341  012FF2  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25342  012FF6  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 25343                           
 25344                           ; BSR set to: 0
 25345                           ;Button.c: 80: pButton->mCount = 0;
 25346  012FFA  0100               	movlb	0	; () banked
 25347  012FFC  EE20 F001          	lfsr	2,1
 25348  013000  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25349  013002  26D9               	addwf	fsr2l,f,c
 25350  013004  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25351  013006  22DA               	addwfc	fsr2h,f,c
 25352  013008  0E00               	movlw	0
 25353  01300A  6EDF               	movwf	indf2,c
 25354                           
 25355                           ; BSR set to: 0
 25356                           ;Button.c: 83: pButton->mFunction(Pin);
 25357  01300C  0100               	movlb	0	; () banked
 25358  01300E  EE20 F004          	lfsr	2,4
 25359  013012  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25360  013014  26D9               	addwf	fsr2l,f,c
 25361  013016  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25362  013018  22DA               	addwfc	fsr2h,f,c
 25363  01301A  D801               	call	u9588
 25364  01301C  0012               	return	
 25365  01301E                     u9588:
 25366  01301E  0005               	push	
 25367  013020  6EFA               	movwf	pclath,c
 25368  013022  50DE               	movf	postinc2,w,c
 25369  013024  6EFD               	movwf	tosl,c
 25370  013026  50DE               	movf	postinc2,w,c
 25371  013028  6EFE               	movwf	tosh,c
 25372  01302A  50DE               	movf	postinc2,w,c
 25373  01302C  6EFF               	movwf	tosu,c
 25374  01302E  50FA               	movf	pclath,w,c
 25375  013030  0100               	movlb	0	; () banked
 25376  013032  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25377  013034  0012               	return		;indir
 25378  013036                     __end_of_Button_Poll:
 25379                           	opt stack 0
 25380                           tosu	equ	0xFFF
 25381                           tosh	equ	0xFFE
 25382                           tosl	equ	0xFFD
 25383                           pclath	equ	0xFFA
 25384                           tblptru	equ	0xFF8
 25385                           tblptrh	equ	0xFF7
 25386                           tblptrl	equ	0xFF6
 25387                           tablat	equ	0xFF5
 25388                           prodh	equ	0xFF4
 25389                           prodl	equ	0xFF3
 25390                           intcon	equ	0xFF2
 25391                           postinc0	equ	0xFEE
 25392                           wreg	equ	0xFE8
 25393                           indf1	equ	0xFE7
 25394                           postdec1	equ	0xFE5
 25395                           fsr1h	equ	0xFE2
 25396                           fsr1l	equ	0xFE1
 25397                           indf2	equ	0xFDF
 25398                           postinc2	equ	0xFDE
 25399                           postdec2	equ	0xFDD
 25400                           plusw2	equ	0xFDB
 25401                           fsr2h	equ	0xFDA
 25402                           fsr2l	equ	0xFD9
 25403                           status	equ	0xFD8
 25404                           
 25405 ;; *************** function _MXK_DIPSwitch *****************
 25406 ;; Defined at:
 25407 ;;		line 24 in file "Library/MXK.c"
 25408 ;; Parameters:    Size  Location     Type
 25409 ;;		None
 25410 ;; Auto vars:     Size  Location     Type
 25411 ;;		None
 25412 ;; Return value:  Size  Location     Type
 25413 ;;                  1    wreg      unsigned char 
 25414 ;; Registers used:
 25415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25416 ;; Tracked objects:
 25417 ;;		On entry : 0/0
 25418 ;;		On exit  : 0/0
 25419 ;;		Unchanged: 0/0
 25420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25425 ;;Total ram usage:        0 bytes
 25426 ;; Hardware stack levels used:    1
 25427 ;; Hardware stack levels required when called:    8
 25428 ;; This function calls:
 25429 ;;		_Port_GetQuad
 25430 ;; This function is called by:
 25431 ;;		_FunctInitButton
 25432 ;;		_Button_Poll
 25433 ;;		_getMode
 25434 ;; This function uses a non-reentrant model
 25435 ;;
 25436                           
 25437                           	psect	text129
 25438  0163C6                     __ptext129:
 25439                           	opt stack 0
 25440  0163C6                     _MXK_DIPSwitch:
 25441                           	opt stack 18
 25442                           
 25443                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25444                           
 25445                           ;incstack = 0
 25446  0163C6  0E9D               	movlw	low _PortD
 25447  0163C8  0100               	movlb	0	; () banked
 25448  0163CA  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25449  0163CC  0E00               	movlw	high _PortD
 25450  0163CE  0100               	movlb	0	; () banked
 25451  0163D0  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25452  0163D2  0E00               	movlw	0
 25453  0163D4  0100               	movlb	0	; () banked
 25454  0163D6  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25455  0163D8  EC64  F0AD         	call	_Port_GetQuad
 25456  0163DC  0012               	return	
 25457  0163DE                     __end_of_MXK_DIPSwitch:
 25458                           	opt stack 0
 25459                           tosu	equ	0xFFF
 25460                           tosh	equ	0xFFE
 25461                           tosl	equ	0xFFD
 25462                           pclath	equ	0xFFA
 25463                           tblptru	equ	0xFF8
 25464                           tblptrh	equ	0xFF7
 25465                           tblptrl	equ	0xFF6
 25466                           tablat	equ	0xFF5
 25467                           prodh	equ	0xFF4
 25468                           prodl	equ	0xFF3
 25469                           intcon	equ	0xFF2
 25470                           postinc0	equ	0xFEE
 25471                           wreg	equ	0xFE8
 25472                           indf1	equ	0xFE7
 25473                           postdec1	equ	0xFE5
 25474                           fsr1h	equ	0xFE2
 25475                           fsr1l	equ	0xFE1
 25476                           indf2	equ	0xFDF
 25477                           postinc2	equ	0xFDE
 25478                           postdec2	equ	0xFDD
 25479                           plusw2	equ	0xFDB
 25480                           fsr2h	equ	0xFDA
 25481                           fsr2l	equ	0xFD9
 25482                           status	equ	0xFD8
 25483                           
 25484 ;; *************** function _HMI_DIPSwitch *****************
 25485 ;; Defined at:
 25486 ;;		line 47 in file "HMI.c"
 25487 ;; Parameters:    Size  Location     Type
 25488 ;;		None
 25489 ;; Auto vars:     Size  Location     Type
 25490 ;;		None
 25491 ;; Return value:  Size  Location     Type
 25492 ;;                  1    wreg      unsigned char 
 25493 ;; Registers used:
 25494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25495 ;; Tracked objects:
 25496 ;;		On entry : 0/0
 25497 ;;		On exit  : 0/0
 25498 ;;		Unchanged: 0/0
 25499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25504 ;;Total ram usage:        0 bytes
 25505 ;; Hardware stack levels used:    1
 25506 ;; Hardware stack levels required when called:    8
 25507 ;; This function calls:
 25508 ;;		_Port_GetQuad
 25509 ;; This function is called by:
 25510 ;;		_HMI_Init
 25511 ;;		_Button_Poll
 25512 ;;		_getMode
 25513 ;; This function uses a non-reentrant model
 25514 ;;
 25515                           
 25516                           	psect	text130
 25517  0163DE                     __ptext130:
 25518                           	opt stack 0
 25519  0163DE                     _HMI_DIPSwitch:
 25520                           	opt stack 18
 25521                           
 25522                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25523                           
 25524                           ;incstack = 0
 25525  0163DE  0E93               	movlw	low _PortE
 25526  0163E0  0100               	movlb	0	; () banked
 25527  0163E2  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25528  0163E4  0E00               	movlw	high _PortE
 25529  0163E6  0100               	movlb	0	; () banked
 25530  0163E8  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25531  0163EA  0E00               	movlw	0
 25532  0163EC  0100               	movlb	0	; () banked
 25533  0163EE  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25534  0163F0  EC64  F0AD         	call	_Port_GetQuad	;wreg free
 25535  0163F4  0012               	return	
 25536  0163F6                     __end_of_HMI_DIPSwitch:
 25537                           	opt stack 0
 25538                           tosu	equ	0xFFF
 25539                           tosh	equ	0xFFE
 25540                           tosl	equ	0xFFD
 25541                           pclath	equ	0xFFA
 25542                           tblptru	equ	0xFF8
 25543                           tblptrh	equ	0xFF7
 25544                           tblptrl	equ	0xFF6
 25545                           tablat	equ	0xFF5
 25546                           prodh	equ	0xFF4
 25547                           prodl	equ	0xFF3
 25548                           intcon	equ	0xFF2
 25549                           postinc0	equ	0xFEE
 25550                           wreg	equ	0xFE8
 25551                           indf1	equ	0xFE7
 25552                           postdec1	equ	0xFE5
 25553                           fsr1h	equ	0xFE2
 25554                           fsr1l	equ	0xFE1
 25555                           indf2	equ	0xFDF
 25556                           postinc2	equ	0xFDE
 25557                           postdec2	equ	0xFDD
 25558                           plusw2	equ	0xFDB
 25559                           fsr2h	equ	0xFDA
 25560                           fsr2l	equ	0xFD9
 25561                           status	equ	0xFD8
 25562                           
 25563 ;; *************** function _HMI_DownSwitch *****************
 25564 ;; Defined at:
 25565 ;;		line 42 in file "HMI.c"
 25566 ;; Parameters:    Size  Location     Type
 25567 ;;		None
 25568 ;; Auto vars:     Size  Location     Type
 25569 ;;		None
 25570 ;; Return value:  Size  Location     Type
 25571 ;;                  1    wreg      unsigned char 
 25572 ;; Registers used:
 25573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25574 ;; Tracked objects:
 25575 ;;		On entry : 0/0
 25576 ;;		On exit  : 0/0
 25577 ;;		Unchanged: 0/0
 25578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25583 ;;Total ram usage:        0 bytes
 25584 ;; Hardware stack levels used:    1
 25585 ;; Hardware stack levels required when called:    8
 25586 ;; This function calls:
 25587 ;;		_Port_GetPin
 25588 ;; This function is called by:
 25589 ;;		_HMI_Init
 25590 ;;		_Button_Poll
 25591 ;;		_getMode
 25592 ;; This function uses a non-reentrant model
 25593 ;;
 25594                           
 25595                           	psect	text131
 25596  0163F6                     __ptext131:
 25597                           	opt stack 0
 25598  0163F6                     _HMI_DownSwitch:
 25599                           	opt stack 18
 25600                           
 25601                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25602                           
 25603                           ;incstack = 0
 25604  0163F6  0E93               	movlw	low _PortE
 25605  0163F8  0100               	movlb	0	; () banked
 25606  0163FA  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25607  0163FC  0E00               	movlw	high _PortE
 25608  0163FE  0100               	movlb	0	; () banked
 25609  016400  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25610  016402  0E06               	movlw	6
 25611  016404  0100               	movlb	0	; () banked
 25612  016406  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25613  016408  EC3B  F0AE         	call	_Port_GetPin	;wreg free
 25614  01640C  0012               	return	
 25615  01640E                     __end_of_HMI_DownSwitch:
 25616                           	opt stack 0
 25617                           tosu	equ	0xFFF
 25618                           tosh	equ	0xFFE
 25619                           tosl	equ	0xFFD
 25620                           pclath	equ	0xFFA
 25621                           tblptru	equ	0xFF8
 25622                           tblptrh	equ	0xFF7
 25623                           tblptrl	equ	0xFF6
 25624                           tablat	equ	0xFF5
 25625                           prodh	equ	0xFF4
 25626                           prodl	equ	0xFF3
 25627                           intcon	equ	0xFF2
 25628                           postinc0	equ	0xFEE
 25629                           wreg	equ	0xFE8
 25630                           indf1	equ	0xFE7
 25631                           postdec1	equ	0xFE5
 25632                           fsr1h	equ	0xFE2
 25633                           fsr1l	equ	0xFE1
 25634                           indf2	equ	0xFDF
 25635                           postinc2	equ	0xFDE
 25636                           postdec2	equ	0xFDD
 25637                           plusw2	equ	0xFDB
 25638                           fsr2h	equ	0xFDA
 25639                           fsr2l	equ	0xFD9
 25640                           status	equ	0xFD8
 25641                           
 25642 ;; *************** function _HMI_UpSwitch *****************
 25643 ;; Defined at:
 25644 ;;		line 37 in file "HMI.c"
 25645 ;; Parameters:    Size  Location     Type
 25646 ;;		None
 25647 ;; Auto vars:     Size  Location     Type
 25648 ;;		None
 25649 ;; Return value:  Size  Location     Type
 25650 ;;                  1    wreg      unsigned char 
 25651 ;; Registers used:
 25652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25653 ;; Tracked objects:
 25654 ;;		On entry : 0/0
 25655 ;;		On exit  : 0/0
 25656 ;;		Unchanged: 0/0
 25657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25662 ;;Total ram usage:        0 bytes
 25663 ;; Hardware stack levels used:    1
 25664 ;; Hardware stack levels required when called:    8
 25665 ;; This function calls:
 25666 ;;		_Port_GetPin
 25667 ;; This function is called by:
 25668 ;;		_HMI_Init
 25669 ;;		_Button_Poll
 25670 ;;		_getMode
 25671 ;; This function uses a non-reentrant model
 25672 ;;
 25673                           
 25674                           	psect	text132
 25675  01640E                     __ptext132:
 25676                           	opt stack 0
 25677  01640E                     _HMI_UpSwitch:
 25678                           	opt stack 18
 25679                           
 25680                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25681                           
 25682                           ;incstack = 0
 25683  01640E  0E93               	movlw	low _PortE
 25684  016410  0100               	movlb	0	; () banked
 25685  016412  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25686  016414  0E00               	movlw	high _PortE
 25687  016416  0100               	movlb	0	; () banked
 25688  016418  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25689  01641A  0E07               	movlw	7
 25690  01641C  0100               	movlb	0	; () banked
 25691  01641E  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25692  016420  EC3B  F0AE         	call	_Port_GetPin	;wreg free
 25693  016424  0012               	return	
 25694  016426                     __end_of_HMI_UpSwitch:
 25695                           	opt stack 0
 25696                           tosu	equ	0xFFF
 25697                           tosh	equ	0xFFE
 25698                           tosl	equ	0xFFD
 25699                           pclath	equ	0xFFA
 25700                           tblptru	equ	0xFF8
 25701                           tblptrh	equ	0xFF7
 25702                           tblptrl	equ	0xFF6
 25703                           tablat	equ	0xFF5
 25704                           prodh	equ	0xFF4
 25705                           prodl	equ	0xFF3
 25706                           intcon	equ	0xFF2
 25707                           postinc0	equ	0xFEE
 25708                           wreg	equ	0xFE8
 25709                           indf1	equ	0xFE7
 25710                           postdec1	equ	0xFE5
 25711                           fsr1h	equ	0xFE2
 25712                           fsr1l	equ	0xFE1
 25713                           indf2	equ	0xFDF
 25714                           postinc2	equ	0xFDE
 25715                           postdec2	equ	0xFDD
 25716                           plusw2	equ	0xFDB
 25717                           fsr2h	equ	0xFDA
 25718                           fsr2l	equ	0xFD9
 25719                           status	equ	0xFD8
 25720                           
 25721 ;; *************** function _HMI_RightSwitch *****************
 25722 ;; Defined at:
 25723 ;;		line 32 in file "HMI.c"
 25724 ;; Parameters:    Size  Location     Type
 25725 ;;		None
 25726 ;; Auto vars:     Size  Location     Type
 25727 ;;		None
 25728 ;; Return value:  Size  Location     Type
 25729 ;;                  1    wreg      unsigned char 
 25730 ;; Registers used:
 25731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25732 ;; Tracked objects:
 25733 ;;		On entry : 0/0
 25734 ;;		On exit  : 0/0
 25735 ;;		Unchanged: 0/0
 25736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25741 ;;Total ram usage:        0 bytes
 25742 ;; Hardware stack levels used:    1
 25743 ;; Hardware stack levels required when called:    8
 25744 ;; This function calls:
 25745 ;;		_Port_GetPin
 25746 ;; This function is called by:
 25747 ;;		_HMI_Init
 25748 ;;		_Button_Poll
 25749 ;;		_getMode
 25750 ;; This function uses a non-reentrant model
 25751 ;;
 25752                           
 25753                           	psect	text133
 25754  016426                     __ptext133:
 25755                           	opt stack 0
 25756  016426                     _HMI_RightSwitch:
 25757                           	opt stack 18
 25758                           
 25759                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 25760                           
 25761                           ;incstack = 0
 25762  016426  0E93               	movlw	low _PortE
 25763  016428  0100               	movlb	0	; () banked
 25764  01642A  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25765  01642C  0E00               	movlw	high _PortE
 25766  01642E  0100               	movlb	0	; () banked
 25767  016430  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25768  016432  0E04               	movlw	4
 25769  016434  0100               	movlb	0	; () banked
 25770  016436  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25771  016438  EC3B  F0AE         	call	_Port_GetPin	;wreg free
 25772  01643C  0012               	return	
 25773  01643E                     __end_of_HMI_RightSwitch:
 25774                           	opt stack 0
 25775                           tosu	equ	0xFFF
 25776                           tosh	equ	0xFFE
 25777                           tosl	equ	0xFFD
 25778                           pclath	equ	0xFFA
 25779                           tblptru	equ	0xFF8
 25780                           tblptrh	equ	0xFF7
 25781                           tblptrl	equ	0xFF6
 25782                           tablat	equ	0xFF5
 25783                           prodh	equ	0xFF4
 25784                           prodl	equ	0xFF3
 25785                           intcon	equ	0xFF2
 25786                           postinc0	equ	0xFEE
 25787                           wreg	equ	0xFE8
 25788                           indf1	equ	0xFE7
 25789                           postdec1	equ	0xFE5
 25790                           fsr1h	equ	0xFE2
 25791                           fsr1l	equ	0xFE1
 25792                           indf2	equ	0xFDF
 25793                           postinc2	equ	0xFDE
 25794                           postdec2	equ	0xFDD
 25795                           plusw2	equ	0xFDB
 25796                           fsr2h	equ	0xFDA
 25797                           fsr2l	equ	0xFD9
 25798                           status	equ	0xFD8
 25799                           
 25800 ;; *************** function _HMI_LeftSwitch *****************
 25801 ;; Defined at:
 25802 ;;		line 27 in file "HMI.c"
 25803 ;; Parameters:    Size  Location     Type
 25804 ;;		None
 25805 ;; Auto vars:     Size  Location     Type
 25806 ;;		None
 25807 ;; Return value:  Size  Location     Type
 25808 ;;                  1    wreg      unsigned char 
 25809 ;; Registers used:
 25810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25811 ;; Tracked objects:
 25812 ;;		On entry : 0/0
 25813 ;;		On exit  : 0/0
 25814 ;;		Unchanged: 0/0
 25815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25820 ;;Total ram usage:        0 bytes
 25821 ;; Hardware stack levels used:    1
 25822 ;; Hardware stack levels required when called:    8
 25823 ;; This function calls:
 25824 ;;		_Port_GetPin
 25825 ;; This function is called by:
 25826 ;;		_HMI_Init
 25827 ;;		_Button_Poll
 25828 ;;		_getMode
 25829 ;; This function uses a non-reentrant model
 25830 ;;
 25831                           
 25832                           	psect	text134
 25833  01643E                     __ptext134:
 25834                           	opt stack 0
 25835  01643E                     _HMI_LeftSwitch:
 25836                           	opt stack 18
 25837                           
 25838                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 25839                           
 25840                           ;incstack = 0
 25841  01643E  0E93               	movlw	low _PortE
 25842  016440  0100               	movlb	0	; () banked
 25843  016442  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25844  016444  0E00               	movlw	high _PortE
 25845  016446  0100               	movlb	0	; () banked
 25846  016448  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25847  01644A  0E05               	movlw	5
 25848  01644C  0100               	movlb	0	; () banked
 25849  01644E  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25850  016450  EC3B  F0AE         	call	_Port_GetPin	;wreg free
 25851  016454  0012               	return	
 25852  016456                     __end_of_HMI_LeftSwitch:
 25853                           	opt stack 0
 25854                           tosu	equ	0xFFF
 25855                           tosh	equ	0xFFE
 25856                           tosl	equ	0xFFD
 25857                           pclath	equ	0xFFA
 25858                           tblptru	equ	0xFF8
 25859                           tblptrh	equ	0xFF7
 25860                           tblptrl	equ	0xFF6
 25861                           tablat	equ	0xFF5
 25862                           prodh	equ	0xFF4
 25863                           prodl	equ	0xFF3
 25864                           intcon	equ	0xFF2
 25865                           postinc0	equ	0xFEE
 25866                           wreg	equ	0xFE8
 25867                           indf1	equ	0xFE7
 25868                           postdec1	equ	0xFE5
 25869                           fsr1h	equ	0xFE2
 25870                           fsr1l	equ	0xFE1
 25871                           indf2	equ	0xFDF
 25872                           postinc2	equ	0xFDE
 25873                           postdec2	equ	0xFDD
 25874                           plusw2	equ	0xFDB
 25875                           fsr2h	equ	0xFDA
 25876                           fsr2l	equ	0xFD9
 25877                           status	equ	0xFD8
 25878                           
 25879 ;; *************** function _MXK_TestButton *****************
 25880 ;; Defined at:
 25881 ;;		line 14 in file "Library/MXK.c"
 25882 ;; Parameters:    Size  Location     Type
 25883 ;;		None
 25884 ;; Auto vars:     Size  Location     Type
 25885 ;;		None
 25886 ;; Return value:  Size  Location     Type
 25887 ;;                  1    wreg      unsigned char 
 25888 ;; Registers used:
 25889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25890 ;; Tracked objects:
 25891 ;;		On entry : 0/0
 25892 ;;		On exit  : 0/0
 25893 ;;		Unchanged: 0/0
 25894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25899 ;;Total ram usage:        0 bytes
 25900 ;; Hardware stack levels used:    1
 25901 ;; Hardware stack levels required when called:    8
 25902 ;; This function calls:
 25903 ;;		_Port_GetPin
 25904 ;; This function is called by:
 25905 ;;		_FunctInitButton
 25906 ;;		_Button_Poll
 25907 ;;		_getMode
 25908 ;; This function uses a non-reentrant model
 25909 ;;
 25910                           
 25911                           	psect	text135
 25912  016456                     __ptext135:
 25913                           	opt stack 0
 25914  016456                     _MXK_TestButton:
 25915                           	opt stack 18
 25916                           
 25917                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 25918                           
 25919                           ;incstack = 0
 25920  016456  0EAA               	movlw	low _PortB
 25921  016458  0100               	movlb	0	; () banked
 25922  01645A  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25923  01645C  0E03               	movlw	high _PortB
 25924  01645E  0100               	movlb	0	; () banked
 25925  016460  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25926  016462  0E04               	movlw	4
 25927  016464  0100               	movlb	0	; () banked
 25928  016466  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25929  016468  EC3B  F0AE         	call	_Port_GetPin	;wreg free
 25930  01646C  0012               	return	
 25931  01646E                     __end_of_MXK_TestButton:
 25932                           	opt stack 0
 25933                           tosu	equ	0xFFF
 25934                           tosh	equ	0xFFE
 25935                           tosl	equ	0xFFD
 25936                           pclath	equ	0xFFA
 25937                           tblptru	equ	0xFF8
 25938                           tblptrh	equ	0xFF7
 25939                           tblptrl	equ	0xFF6
 25940                           tablat	equ	0xFF5
 25941                           prodh	equ	0xFF4
 25942                           prodl	equ	0xFF3
 25943                           intcon	equ	0xFF2
 25944                           postinc0	equ	0xFEE
 25945                           wreg	equ	0xFE8
 25946                           indf1	equ	0xFE7
 25947                           postdec1	equ	0xFE5
 25948                           fsr1h	equ	0xFE2
 25949                           fsr1l	equ	0xFE1
 25950                           indf2	equ	0xFDF
 25951                           postinc2	equ	0xFDE
 25952                           postdec2	equ	0xFDD
 25953                           plusw2	equ	0xFDB
 25954                           fsr2h	equ	0xFDA
 25955                           fsr2l	equ	0xFD9
 25956                           status	equ	0xFD8
 25957                           
 25958 ;; *************** function _Port_GetQuad *****************
 25959 ;; Defined at:
 25960 ;;		line 498 in file "Library/Port.c"
 25961 ;; Parameters:    Size  Location     Type
 25962 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 25963 ;;		 -> PortE(10), PortD(10), 
 25964 ;;  pQuad           1    2[BANK0 ] enum E6776
 25965 ;; Auto vars:     Size  Location     Type
 25966 ;;  Output          1    5[BANK0 ] unsigned char 
 25967 ;; Return value:  Size  Location     Type
 25968 ;;                  1    wreg      unsigned char 
 25969 ;; Registers used:
 25970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25971 ;; Tracked objects:
 25972 ;;		On entry : 0/0
 25973 ;;		On exit  : 0/0
 25974 ;;		Unchanged: 0/0
 25975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25976 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25979 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25980 ;;Total ram usage:        6 bytes
 25981 ;; Hardware stack levels used:    1
 25982 ;; Hardware stack levels required when called:    7
 25983 ;; This function calls:
 25984 ;;		Nothing
 25985 ;; This function is called by:
 25986 ;;		_HMI_DIPSwitch
 25987 ;;		_MXK_DIPSwitch
 25988 ;;		_Port_ToggleQuad
 25989 ;; This function uses a non-reentrant model
 25990 ;;
 25991                           
 25992                           	psect	text136
 25993  015AC8                     __ptext136:
 25994                           	opt stack 0
 25995  015AC8                     _Port_GetQuad:
 25996                           	opt stack 18
 25997                           
 25998                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 25999                           
 26000                           ;incstack = 0
 26001  015AC8  0100               	movlb	0	; () banked
 26002  015ACA  EE20 F006          	lfsr	2,6
 26003  015ACE  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26004  015AD0  26D9               	addwf	fsr2l,f,c
 26005  015AD2  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26006  015AD4  22DA               	addwfc	fsr2h,f,c
 26007  015AD6  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26008  015ADA  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26009  015ADE  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26010  015AE2  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26011  015AE6  50DF               	movf	indf2,w,c
 26012  015AE8  0100               	movlb	0	; () banked
 26013  015AEA  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26014                           
 26015                           ; BSR set to: 0
 26016                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26017  015AEC  0100               	movlb	0	; () banked
 26018  015AEE  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26019  015AF0  0D04               	mullw	4
 26020  015AF2  28F3               	incf	prodl,w,c
 26021  015AF4  0100               	movlb	0	; () banked
 26022  015AF6  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26023  015AF8  D003               	goto	u9080
 26024  015AFA                     u9085:
 26025  015AFA  0100               	movlb	0	; () banked
 26026  015AFC  90D8               	bcf	status,0,c
 26027  015AFE  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26028  015B00                     u9080:
 26029  015B00  0100               	movlb	0	; () banked
 26030  015B02  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26031  015B04  D7FA               	goto	u9085
 26032                           
 26033                           ;Port.c: 502: Output &= 0xF;
 26034  015B06  0E0F               	movlw	15
 26035  015B08  0100               	movlb	0	; () banked
 26036  015B0A  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26037                           
 26038                           ; BSR set to: 0
 26039                           ;Port.c: 503: return Output;
 26040  015B0C  0100               	movlb	0	; () banked
 26041  015B0E  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26042  015B10  0012               	return	
 26043  015B12                     __end_of_Port_GetQuad:
 26044                           	opt stack 0
 26045                           tosu	equ	0xFFF
 26046                           tosh	equ	0xFFE
 26047                           tosl	equ	0xFFD
 26048                           pclath	equ	0xFFA
 26049                           tblptru	equ	0xFF8
 26050                           tblptrh	equ	0xFF7
 26051                           tblptrl	equ	0xFF6
 26052                           tablat	equ	0xFF5
 26053                           prodh	equ	0xFF4
 26054                           prodl	equ	0xFF3
 26055                           intcon	equ	0xFF2
 26056                           postinc0	equ	0xFEE
 26057                           wreg	equ	0xFE8
 26058                           indf1	equ	0xFE7
 26059                           postdec1	equ	0xFE5
 26060                           fsr1h	equ	0xFE2
 26061                           fsr1l	equ	0xFE1
 26062                           indf2	equ	0xFDF
 26063                           postinc2	equ	0xFDE
 26064                           postdec2	equ	0xFDD
 26065                           plusw2	equ	0xFDB
 26066                           fsr2h	equ	0xFDA
 26067                           fsr2l	equ	0xFD9
 26068                           status	equ	0xFD8
 26069                           
 26070 ;; *************** function _Event_DIPSwitch *****************
 26071 ;; Defined at:
 26072 ;;		line 22 in file "Events.c"
 26073 ;; Parameters:    Size  Location     Type
 26074 ;;  pState          1    wreg     unsigned char 
 26075 ;; Auto vars:     Size  Location     Type
 26076 ;;  pState          1   25[BANK0 ] unsigned char 
 26077 ;;  Bar             1   26[BANK0 ] unsigned char 
 26078 ;; Return value:  Size  Location     Type
 26079 ;;                  1    wreg      void 
 26080 ;; Registers used:
 26081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26082 ;; Tracked objects:
 26083 ;;		On entry : 0/0
 26084 ;;		On exit  : 0/0
 26085 ;;		Unchanged: 0/0
 26086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26091 ;;Total ram usage:        2 bytes
 26092 ;; Hardware stack levels used:    1
 26093 ;; Hardware stack levels required when called:   13
 26094 ;; This function calls:
 26095 ;;		_HMI_GetBar
 26096 ;;		_HMI_SetBar
 26097 ;;		_LED_Toggle
 26098 ;; This function is called by:
 26099 ;;		_FunctInitButton
 26100 ;;		_Button_Poll
 26101 ;; This function uses a non-reentrant model
 26102 ;;
 26103                           
 26104                           	psect	text137
 26105  0160CC                     __ptext137:
 26106                           	opt stack 0
 26107  0160CC                     _Event_DIPSwitch:
 26108                           	opt stack 13
 26109                           
 26110                           ; BSR set to: 0
 26111                           ;incstack = 0
 26112                           ;Event_DIPSwitch@pState stored from wreg
 26113  0160CC  0100               	movlb	0	; () banked
 26114  0160CE  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26115                           
 26116                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26117  0160D0  ECDB  F0B2         	call	_HMI_GetBar	;wreg free
 26118  0160D4  0100               	movlb	0	; () banked
 26119  0160D6  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26120                           
 26121                           ; BSR set to: 0
 26122                           ;Events.c: 25: Bar &= 0x0F;
 26123  0160D8  0E0F               	movlw	15
 26124  0160DA  0100               	movlb	0	; () banked
 26125  0160DC  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26126                           
 26127                           ; BSR set to: 0
 26128                           ;Events.c: 26: pState <<= 4;
 26129  0160DE  0100               	movlb	0	; () banked
 26130  0160E0  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26131  0160E2  0EF0               	movlw	240
 26132  0160E4  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26133                           
 26134                           ; BSR set to: 0
 26135                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26136  0160E6  0100               	movlb	0	; () banked
 26137  0160E8  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26138  0160EA  0100               	movlb	0	; () banked
 26139  0160EC  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26140  0160EE  ECBD  F0B2         	call	_HMI_SetBar
 26141                           
 26142                           ;Events.c: 32: LED_Toggle(eLED1);
 26143  0160F2  0E00               	movlw	0
 26144  0160F4  ECD1  F0AD         	call	_LED_Toggle
 26145  0160F8  0012               	return		;funcret
 26146  0160FA                     __end_of_Event_DIPSwitch:
 26147                           	opt stack 0
 26148                           tosu	equ	0xFFF
 26149                           tosh	equ	0xFFE
 26150                           tosl	equ	0xFFD
 26151                           pclath	equ	0xFFA
 26152                           tblptru	equ	0xFF8
 26153                           tblptrh	equ	0xFF7
 26154                           tblptrl	equ	0xFF6
 26155                           tablat	equ	0xFF5
 26156                           prodh	equ	0xFF4
 26157                           prodl	equ	0xFF3
 26158                           intcon	equ	0xFF2
 26159                           postinc0	equ	0xFEE
 26160                           wreg	equ	0xFE8
 26161                           indf1	equ	0xFE7
 26162                           postdec1	equ	0xFE5
 26163                           fsr1h	equ	0xFE2
 26164                           fsr1l	equ	0xFE1
 26165                           indf2	equ	0xFDF
 26166                           postinc2	equ	0xFDE
 26167                           postdec2	equ	0xFDD
 26168                           plusw2	equ	0xFDB
 26169                           fsr2h	equ	0xFDA
 26170                           fsr2l	equ	0xFD9
 26171                           status	equ	0xFD8
 26172                           
 26173 ;; *************** function _Event_NULL *****************
 26174 ;; Defined at:
 26175 ;;		line 9 in file "Events.c"
 26176 ;; Parameters:    Size  Location     Type
 26177 ;;  pState          1    wreg     unsigned char 
 26178 ;; Auto vars:     Size  Location     Type
 26179 ;;  pState          1    0[COMRAM] unsigned char 
 26180 ;; Return value:  Size  Location     Type
 26181 ;;                  1    wreg      void 
 26182 ;; Registers used:
 26183 ;;		wreg
 26184 ;; Tracked objects:
 26185 ;;		On entry : 0/0
 26186 ;;		On exit  : 0/0
 26187 ;;		Unchanged: 0/0
 26188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26193 ;;Total ram usage:        0 bytes
 26194 ;; Hardware stack levels used:    1
 26195 ;; Hardware stack levels required when called:    7
 26196 ;; This function calls:
 26197 ;;		Nothing
 26198 ;; This function is called by:
 26199 ;;		_HMI_Init
 26200 ;;		_Button_Poll
 26201 ;; This function uses a non-reentrant model
 26202 ;;
 26203                           
 26204                           	psect	text138
 26205  001404                     __ptext138:
 26206                           	opt stack 0
 26207  001404                     _Event_NULL:
 26208                           	opt stack 19
 26209                           
 26210                           ;incstack = 0
 26211  001404  0012               	return		;funcret
 26212  001406                     __end_of_Event_NULL:
 26213                           	opt stack 0
 26214                           tosu	equ	0xFFF
 26215                           tosh	equ	0xFFE
 26216                           tosl	equ	0xFFD
 26217                           pclath	equ	0xFFA
 26218                           tblptru	equ	0xFF8
 26219                           tblptrh	equ	0xFF7
 26220                           tblptrl	equ	0xFF6
 26221                           tablat	equ	0xFF5
 26222                           prodh	equ	0xFF4
 26223                           prodl	equ	0xFF3
 26224                           intcon	equ	0xFF2
 26225                           postinc0	equ	0xFEE
 26226                           wreg	equ	0xFE8
 26227                           indf1	equ	0xFE7
 26228                           postdec1	equ	0xFE5
 26229                           fsr1h	equ	0xFE2
 26230                           fsr1l	equ	0xFE1
 26231                           indf2	equ	0xFDF
 26232                           postinc2	equ	0xFDE
 26233                           postdec2	equ	0xFDD
 26234                           plusw2	equ	0xFDB
 26235                           fsr2h	equ	0xFDA
 26236                           fsr2l	equ	0xFD9
 26237                           status	equ	0xFD8
 26238                           
 26239 ;; *************** function _Event_TestButton *****************
 26240 ;; Defined at:
 26241 ;;		line 52 in file "Events.c"
 26242 ;; Parameters:    Size  Location     Type
 26243 ;;  pState          1    wreg     unsigned char 
 26244 ;; Auto vars:     Size  Location     Type
 26245 ;;  pState          1   25[BANK0 ] unsigned char 
 26246 ;; Return value:  Size  Location     Type
 26247 ;;                  1    wreg      void 
 26248 ;; Registers used:
 26249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26250 ;; Tracked objects:
 26251 ;;		On entry : 0/0
 26252 ;;		On exit  : 0/0
 26253 ;;		Unchanged: 0/0
 26254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26259 ;;Total ram usage:        1 bytes
 26260 ;; Hardware stack levels used:    1
 26261 ;; Hardware stack levels required when called:   13
 26262 ;; This function calls:
 26263 ;;		_HMI_SetButton
 26264 ;;		_HMI_SetNumber
 26265 ;;		_LED_Toggle
 26266 ;; This function is called by:
 26267 ;;		_FunctInitButton
 26268 ;;		_Button_Poll
 26269 ;; This function uses a non-reentrant model
 26270 ;;
 26271                           
 26272                           	psect	text139
 26273  015EBA                     __ptext139:
 26274                           	opt stack 0
 26275  015EBA                     _Event_TestButton:
 26276                           	opt stack 13
 26277                           
 26278                           ;incstack = 0
 26279                           ;Event_TestButton@pState stored from wreg
 26280  015EBA  0100               	movlb	0	; () banked
 26281  015EBC  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26282                           
 26283                           ;Events.c: 56: static UINT8 j = 0;
 26284                           ;Events.c: 60: if (pState == 0)
 26285  015EBE  0100               	movlb	0	; () banked
 26286  015EC0  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26287  015EC2  0100               	movlb	0	; () banked
 26288  015EC4  A4D8               	btfss	status,2,c
 26289  015EC6  D013               	goto	l1873
 26290                           
 26291                           ; BSR set to: 0
 26292                           ;Events.c: 61: {
 26293                           ;Events.c: 62: j++;
 26294  015EC8  0100               	movlb	0	; () banked
 26295  015ECA  2B8B               	incf	Event_TestButton@j& (0+255),f,b
 26296                           
 26297                           ; BSR set to: 0
 26298                           ;Events.c: 63: val += j;
 26299  015ECC  0100               	movlb	0	; () banked
 26300  015ECE  518B               	movf	Event_TestButton@j& (0+255),w,b
 26301  015ED0  0100               	movlb	0	; () banked
 26302  015ED2  277F               	addwf	_val& (0+255),f,b
 26303  015ED4  0E00               	movlw	0
 26304  015ED6  2380               	addwfc	(_val+1)& (0+255),f,b
 26305                           
 26306                           ; BSR set to: 0
 26307                           ;Events.c: 64: HMI_SetNumber( val );
 26308  015ED8  C07F  F0D0         	movff	_val,HMI_SetNumber@pInput
 26309  015EDC  C080  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26310  015EE0  ECA9  F0B0         	call	_HMI_SetNumber	;wreg free
 26311                           
 26312                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26313  015EE4  0100               	movlb	0	; () banked
 26314  015EE6  518B               	movf	Event_TestButton@j& (0+255),w,b
 26315  015EE8  0B03               	andlw	3
 26316  015EEA  ECB3  F0A5         	call	_HMI_SetButton
 26317  015EEE                     l1873:
 26318                           
 26319                           ;Events.c: 68: }
 26320                           ;Events.c: 72: LED_Toggle(eLED1);
 26321  015EEE  0E00               	movlw	0
 26322  015EF0  ECD1  F0AD         	call	_LED_Toggle
 26323  015EF4  0012               	return		;funcret
 26324  015EF6                     __end_of_Event_TestButton:
 26325                           	opt stack 0
 26326                           tosu	equ	0xFFF
 26327                           tosh	equ	0xFFE
 26328                           tosl	equ	0xFFD
 26329                           pclath	equ	0xFFA
 26330                           tblptru	equ	0xFF8
 26331                           tblptrh	equ	0xFF7
 26332                           tblptrl	equ	0xFF6
 26333                           tablat	equ	0xFF5
 26334                           prodh	equ	0xFF4
 26335                           prodl	equ	0xFF3
 26336                           intcon	equ	0xFF2
 26337                           postinc0	equ	0xFEE
 26338                           wreg	equ	0xFE8
 26339                           indf1	equ	0xFE7
 26340                           postdec1	equ	0xFE5
 26341                           fsr1h	equ	0xFE2
 26342                           fsr1l	equ	0xFE1
 26343                           indf2	equ	0xFDF
 26344                           postinc2	equ	0xFDE
 26345                           postdec2	equ	0xFDD
 26346                           plusw2	equ	0xFDB
 26347                           fsr2h	equ	0xFDA
 26348                           fsr2l	equ	0xFD9
 26349                           status	equ	0xFD8
 26350                           
 26351 ;; *************** function _HMI_SetNumber *****************
 26352 ;; Defined at:
 26353 ;;		line 221 in file "HMI.c"
 26354 ;; Parameters:    Size  Location     Type
 26355 ;;  pInput          2   22[BANK0 ] int 
 26356 ;; Auto vars:     Size  Location     Type
 26357 ;;		None
 26358 ;; Return value:  Size  Location     Type
 26359 ;;                  1    wreg      void 
 26360 ;; Registers used:
 26361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26362 ;; Tracked objects:
 26363 ;;		On entry : 0/0
 26364 ;;		On exit  : 0/0
 26365 ;;		Unchanged: 0/0
 26366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26371 ;;Total ram usage:        2 bytes
 26372 ;; Hardware stack levels used:    1
 26373 ;; Hardware stack levels required when called:    9
 26374 ;; This function calls:
 26375 ;;		_HMI_SetSegments
 26376 ;;		_itos
 26377 ;; This function is called by:
 26378 ;;		_Event_TestButton
 26379 ;;		_findClosestWall
 26380 ;;		_mode1
 26381 ;;		_Event_HMI_UpButton
 26382 ;;		_Event_HMI_DownButton
 26383 ;; This function uses a non-reentrant model
 26384 ;;
 26385                           
 26386                           	psect	text140
 26387  016152                     __ptext140:
 26388                           	opt stack 0
 26389  016152                     _HMI_SetNumber:
 26390                           	opt stack 16
 26391                           
 26392                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26393                           
 26394                           ;incstack = 0
 26395  016152  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 26396  016156  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26397  01615A  0E3C               	movlw	low _HMIBoard
 26398  01615C  0100               	movlb	0	; () banked
 26399  01615E  6FC8               	movwf	itos@destination& (0+255),b
 26400  016160  0E03               	movlw	high _HMIBoard
 26401  016162  0100               	movlb	0	; () banked
 26402  016164  6FC9               	movwf	(itos@destination+1)& (0+255),b
 26403  016166  ECDB  F09C         	call	_itos	;wreg free
 26404                           
 26405                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26406  01616A  0E3C               	movlw	low _HMIBoard
 26407  01616C  0100               	movlb	0	; () banked
 26408  01616E  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 26409  016170  0E03               	movlw	high _HMIBoard
 26410  016172  0100               	movlb	0	; () banked
 26411  016174  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26412  016176  ECC4  F0A0         	call	_HMI_SetSegments	;wreg free
 26413  01617A  0012               	return		;funcret
 26414  01617C                     __end_of_HMI_SetNumber:
 26415                           	opt stack 0
 26416                           tosu	equ	0xFFF
 26417                           tosh	equ	0xFFE
 26418                           tosl	equ	0xFFD
 26419                           pclath	equ	0xFFA
 26420                           tblptru	equ	0xFF8
 26421                           tblptrh	equ	0xFF7
 26422                           tblptrl	equ	0xFF6
 26423                           tablat	equ	0xFF5
 26424                           prodh	equ	0xFF4
 26425                           prodl	equ	0xFF3
 26426                           intcon	equ	0xFF2
 26427                           postinc0	equ	0xFEE
 26428                           wreg	equ	0xFE8
 26429                           indf1	equ	0xFE7
 26430                           postdec1	equ	0xFE5
 26431                           fsr1h	equ	0xFE2
 26432                           fsr1l	equ	0xFE1
 26433                           indf2	equ	0xFDF
 26434                           postinc2	equ	0xFDE
 26435                           postdec2	equ	0xFDD
 26436                           plusw2	equ	0xFDB
 26437                           fsr2h	equ	0xFDA
 26438                           fsr2l	equ	0xFD9
 26439                           status	equ	0xFD8
 26440                           
 26441 ;; *************** function _itos *****************
 26442 ;; Defined at:
 26443 ;;		line 369 in file "Library/Types.c"
 26444 ;; Parameters:    Size  Location     Type
 26445 ;;  input           2   12[BANK0 ] unsigned short 
 26446 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26447 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26448 ;; Auto vars:     Size  Location     Type
 26449 ;;  Out             2   20[BANK0 ] unsigned short 
 26450 ;;  Length          2   18[BANK0 ] unsigned short 
 26451 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26452 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26453 ;; Return value:  Size  Location     Type
 26454 ;;                  1    wreg      void 
 26455 ;; Registers used:
 26456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26457 ;; Tracked objects:
 26458 ;;		On entry : 0/0
 26459 ;;		On exit  : 0/0
 26460 ;;		Unchanged: 0/0
 26461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26463 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26465 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26466 ;;Total ram usage:       10 bytes
 26467 ;; Hardware stack levels used:    1
 26468 ;; Hardware stack levels required when called:    8
 26469 ;; This function calls:
 26470 ;;		___lwdiv
 26471 ;;		___lwmod
 26472 ;;		_reverse
 26473 ;; This function is called by:
 26474 ;;		_HMI_SetNumber
 26475 ;; This function uses a non-reentrant model
 26476 ;;
 26477                           
 26478                           	psect	text141
 26479  0139B6                     __ptext141:
 26480                           	opt stack 0
 26481  0139B6                     _itos:
 26482                           	opt stack 16
 26483                           
 26484                           ;Types.c: 371: UINT16 Out = input;
 26485                           
 26486                           ;incstack = 0
 26487  0139B6  C0C6  F0CE         	movff	itos@input,itos@Out
 26488  0139BA  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 26489                           
 26490                           ;Types.c: 372: UINT16 Length = 0;
 26491  0139BE  0E00               	movlw	0
 26492  0139C0  0100               	movlb	0	; () banked
 26493  0139C2  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26494  0139C4  0E00               	movlw	0
 26495  0139C6  6FCC               	movwf	itos@Length& (0+255),b
 26496                           
 26497                           ; BSR set to: 0
 26498                           ;Types.c: 373: char *Data = destination;
 26499  0139C8  C0C8  F0CA         	movff	itos@destination,itos@Data
 26500  0139CC  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 26501                           
 26502                           ; BSR set to: 0
 26503                           ;Types.c: 374: if(Out == 0)
 26504  0139D0  0100               	movlb	0	; () banked
 26505  0139D2  51CE               	movf	itos@Out& (0+255),w,b
 26506  0139D4  0100               	movlb	0	; () banked
 26507  0139D6  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26508  0139D8  A4D8               	btfss	status,2,c
 26509  0139DA  D034               	goto	l929
 26510                           
 26511                           ; BSR set to: 0
 26512                           ;Types.c: 375: {
 26513                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26514  0139DC  C0CA  FFD9         	movff	itos@Data,fsr2l
 26515  0139E0  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26516  0139E4  0E30               	movlw	48
 26517  0139E6  6EDF               	movwf	indf2,c
 26518                           
 26519                           ; BSR set to: 0
 26520                           ;Types.c: 377: Length = 1;
 26521  0139E8  0E00               	movlw	0
 26522  0139EA  0100               	movlb	0	; () banked
 26523  0139EC  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26524  0139EE  0E01               	movlw	1
 26525  0139F0  6FCC               	movwf	itos@Length& (0+255),b
 26526                           
 26527                           ;Types.c: 378: }
 26528  0139F2  D040               	goto	l928
 26529  0139F4                     
 26530                           ; BSR set to: 0
 26531                           ;Types.c: 382: {
 26532                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26533                           
 26534                           ; BSR set to: 0
 26535  0139F4  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 26536  0139F8  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 26537  0139FC  0E00               	movlw	0
 26538  0139FE  0100               	movlb	0	; () banked
 26539  013A00  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 26540  013A02  0E0A               	movlw	10
 26541  013A04  6FC3               	movwf	___lwmod@divisor& (0+255),b
 26542  013A06  ECBC  F0AB         	call	___lwmod	;wreg free
 26543  013A0A  0100               	movlb	0	; () banked
 26544  013A0C  51C1               	movf	?___lwmod& (0+255),w,b
 26545  013A0E  0F30               	addlw	48
 26546  013A10  C0CA  FFD9         	movff	itos@Data,fsr2l
 26547  013A14  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26548  013A18  6EDF               	movwf	indf2,c
 26549                           
 26550                           ; BSR set to: 0
 26551                           ;Types.c: 384: Out /= 10;
 26552  013A1A  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 26553  013A1E  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 26554  013A22  0E00               	movlw	0
 26555  013A24  0100               	movlb	0	; () banked
 26556  013A26  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26557  013A28  0E0A               	movlw	10
 26558  013A2A  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 26559  013A2C  EC51  F0A8         	call	___lwdiv	;wreg free
 26560  013A30  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 26561  013A34  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 26562                           
 26563                           ;Types.c: 385: Length ++;
 26564  013A38  0100               	movlb	0	; () banked
 26565  013A3A  4BCC               	infsnz	itos@Length& (0+255),f,b
 26566  013A3C  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 26567                           
 26568                           ; BSR set to: 0
 26569                           ;Types.c: 386: Data++;
 26570  013A3E  0100               	movlb	0	; () banked
 26571  013A40  4BCA               	infsnz	itos@Data& (0+255),f,b
 26572  013A42  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 26573  013A44                     l929:
 26574                           
 26575                           ; BSR set to: 0
 26576                           
 26577                           ; BSR set to: 0
 26578  013A44  0100               	movlb	0	; () banked
 26579  013A46  51CE               	movf	itos@Out& (0+255),w,b
 26580  013A48  0100               	movlb	0	; () banked
 26581  013A4A  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26582  013A4C  B4D8               	btfsc	status,2,c
 26583  013A4E  D008               	goto	u8880
 26584                           
 26585                           ; BSR set to: 0
 26586  013A50  0100               	movlb	0	; () banked
 26587  013A52  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26588  013A54  E105               	bnz	l12306
 26589  013A56  0E06               	movlw	6
 26590  013A58  0100               	movlb	0	; () banked
 26591  013A5A  5DCC               	subwf	itos@Length& (0+255),w,b
 26592  013A5C  A0D8               	btfss	status,0,c
 26593  013A5E  D7CA               	goto	l930
 26594  013A60                     u8880:
 26595  013A60                     l12306:
 26596                           
 26597                           ; BSR set to: 0
 26598                           ;Types.c: 387: }
 26599                           ;Types.c: 388: reverse(destination, Length);
 26600  013A60  C0C8  F0BA         	movff	itos@destination,reverse@input
 26601  013A64  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 26602  013A68  C0CC  F0BC         	movff	itos@Length,reverse@length
 26603  013A6C  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 26604  013A70  EC1E  F0AA         	call	_reverse	;wreg free
 26605  013A74                     l928:
 26606                           
 26607                           ;Types.c: 389: }
 26608                           ;Types.c: 390: destination[Length] = '\0';
 26609  013A74  0100               	movlb	0	; () banked
 26610  013A76  51CC               	movf	itos@Length& (0+255),w,b
 26611  013A78  0100               	movlb	0	; () banked
 26612  013A7A  25C8               	addwf	itos@destination& (0+255),w,b
 26613  013A7C  6ED9               	movwf	fsr2l,c
 26614  013A7E  0100               	movlb	0	; () banked
 26615  013A80  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26616  013A82  0100               	movlb	0	; () banked
 26617  013A84  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 26618  013A86  6EDA               	movwf	fsr2h,c
 26619  013A88  0E00               	movlw	0
 26620  013A8A  6EDF               	movwf	indf2,c
 26621                           
 26622                           ; BSR set to: 0
 26623  013A8C  0012               	return		;funcret
 26624  013A8E                     __end_of_itos:
 26625                           	opt stack 0
 26626                           tosu	equ	0xFFF
 26627                           tosh	equ	0xFFE
 26628                           tosl	equ	0xFFD
 26629                           pclath	equ	0xFFA
 26630                           tblptru	equ	0xFF8
 26631                           tblptrh	equ	0xFF7
 26632                           tblptrl	equ	0xFF6
 26633                           tablat	equ	0xFF5
 26634                           prodh	equ	0xFF4
 26635                           prodl	equ	0xFF3
 26636                           intcon	equ	0xFF2
 26637                           postinc0	equ	0xFEE
 26638                           wreg	equ	0xFE8
 26639                           indf1	equ	0xFE7
 26640                           postdec1	equ	0xFE5
 26641                           fsr1h	equ	0xFE2
 26642                           fsr1l	equ	0xFE1
 26643                           indf2	equ	0xFDF
 26644                           postinc2	equ	0xFDE
 26645                           postdec2	equ	0xFDD
 26646                           plusw2	equ	0xFDB
 26647                           fsr2h	equ	0xFDA
 26648                           fsr2l	equ	0xFD9
 26649                           status	equ	0xFD8
 26650                           
 26651 ;; *************** function _reverse *****************
 26652 ;; Defined at:
 26653 ;;		line 357 in file "Library/Types.c"
 26654 ;; Parameters:    Size  Location     Type
 26655 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26656 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26657 ;;  length          2    2[BANK0 ] unsigned short 
 26658 ;; Auto vars:     Size  Location     Type
 26659 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26660 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26661 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26662 ;; Return value:  Size  Location     Type
 26663 ;;                  1    wreg      void 
 26664 ;; Registers used:
 26665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26666 ;; Tracked objects:
 26667 ;;		On entry : 0/0
 26668 ;;		On exit  : 0/0
 26669 ;;		Unchanged: 0/0
 26670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26672 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26674 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26675 ;;Total ram usage:        7 bytes
 26676 ;; Hardware stack levels used:    1
 26677 ;; Hardware stack levels required when called:    7
 26678 ;; This function calls:
 26679 ;;		Nothing
 26680 ;; This function is called by:
 26681 ;;		_itos
 26682 ;; This function uses a non-reentrant model
 26683 ;;
 26684                           
 26685                           	psect	text142
 26686  01543C                     __ptext142:
 26687                           	opt stack 0
 26688  01543C                     _reverse:
 26689                           	opt stack 16
 26690                           
 26691                           ;Types.c: 359: char tempVar,
 26692                           ;Types.c: 360: *iterator = input + length;
 26693                           
 26694                           ; BSR set to: 0
 26695                           ;incstack = 0
 26696  01543C  0100               	movlb	0	; () banked
 26697  01543E  51BC               	movf	reverse@length& (0+255),w,b
 26698  015440  0100               	movlb	0	; () banked
 26699  015442  25BA               	addwf	reverse@input& (0+255),w,b
 26700  015444  0100               	movlb	0	; () banked
 26701  015446  6FBF               	movwf	reverse@iterator& (0+255),b
 26702  015448  0100               	movlb	0	; () banked
 26703  01544A  51BD               	movf	(reverse@length+1)& (0+255),w,b
 26704  01544C  0100               	movlb	0	; () banked
 26705  01544E  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 26706  015450  0100               	movlb	0	; () banked
 26707  015452  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 26708                           
 26709                           ;Types.c: 362: while ( --iterator > input )
 26710  015454  D01A               	goto	l921
 26711  015456                     
 26712                           ; BSR set to: 0
 26713                           ;Types.c: 363: {
 26714                           ;Types.c: 364: tempVar = *input;
 26715                           
 26716                           ; BSR set to: 0
 26717  015456  C0BA  FFD9         	movff	reverse@input,fsr2l
 26718  01545A  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 26719  01545E  50DF               	movf	indf2,w,c
 26720  015460  0100               	movlb	0	; () banked
 26721  015462  6FBE               	movwf	reverse@tempVar& (0+255),b
 26722                           
 26723                           ; BSR set to: 0
 26724                           ;Types.c: 365: *input++=*iterator;
 26725  015464  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 26726  015468  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 26727  01546C  C0BA  FFE1         	movff	reverse@input,fsr1l
 26728  015470  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 26729  015474  CFDF FFE7          	movff	indf2,indf1
 26730                           
 26731                           ; BSR set to: 0
 26732  015478  0100               	movlb	0	; () banked
 26733  01547A  4BBA               	infsnz	reverse@input& (0+255),f,b
 26734  01547C  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 26735                           
 26736                           ; BSR set to: 0
 26737                           ;Types.c: 366: *iterator=tempVar;
 26738  01547E  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 26739  015482  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 26740  015486  C0BE  FFDF         	movff	reverse@tempVar,indf2
 26741  01548A                     l921:
 26742                           
 26743                           ; BSR set to: 0
 26744                           
 26745                           ; BSR set to: 0
 26746  01548A  0100               	movlb	0	; () banked
 26747  01548C  07BF               	decf	reverse@iterator& (0+255),f,b
 26748  01548E  A0D8               	btfss	status,0,c
 26749  015490  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 26750  015492  0100               	movlb	0	; () banked
 26751  015494  51BF               	movf	reverse@iterator& (0+255),w,b
 26752  015496  0100               	movlb	0	; () banked
 26753  015498  5DBA               	subwf	reverse@input& (0+255),w,b
 26754  01549A  0100               	movlb	0	; () banked
 26755  01549C  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 26756  01549E  0100               	movlb	0	; () banked
 26757  0154A0  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 26758  0154A2  B0D8               	btfsc	status,0,c
 26759  0154A4  0012               	return	
 26760  0154A6  D7D7               	goto	l922
 26761  0154A8                     __end_of_reverse:
 26762                           	opt stack 0
 26763                           tosu	equ	0xFFF
 26764                           tosh	equ	0xFFE
 26765                           tosl	equ	0xFFD
 26766                           pclath	equ	0xFFA
 26767                           tblptru	equ	0xFF8
 26768                           tblptrh	equ	0xFF7
 26769                           tblptrl	equ	0xFF6
 26770                           tablat	equ	0xFF5
 26771                           prodh	equ	0xFF4
 26772                           prodl	equ	0xFF3
 26773                           intcon	equ	0xFF2
 26774                           postinc0	equ	0xFEE
 26775                           wreg	equ	0xFE8
 26776                           indf1	equ	0xFE7
 26777                           postdec1	equ	0xFE5
 26778                           fsr1h	equ	0xFE2
 26779                           fsr1l	equ	0xFE1
 26780                           indf2	equ	0xFDF
 26781                           postinc2	equ	0xFDE
 26782                           postdec2	equ	0xFDD
 26783                           plusw2	equ	0xFDB
 26784                           fsr2h	equ	0xFDA
 26785                           fsr2l	equ	0xFD9
 26786                           status	equ	0xFD8
 26787                           
 26788 ;; *************** function ___lwmod *****************
 26789 ;; Defined at:
 26790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 26791 ;; Parameters:    Size  Location     Type
 26792 ;;  dividend        2    7[BANK0 ] unsigned int 
 26793 ;;  divisor         2    9[BANK0 ] unsigned int 
 26794 ;; Auto vars:     Size  Location     Type
 26795 ;;  counter         1   11[BANK0 ] unsigned char 
 26796 ;; Return value:  Size  Location     Type
 26797 ;;                  2    7[BANK0 ] unsigned int 
 26798 ;; Registers used:
 26799 ;;		wreg, status,2, status,0
 26800 ;; Tracked objects:
 26801 ;;		On entry : 0/0
 26802 ;;		On exit  : 0/0
 26803 ;;		Unchanged: 0/0
 26804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26805 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26808 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26809 ;;Total ram usage:        5 bytes
 26810 ;; Hardware stack levels used:    1
 26811 ;; Hardware stack levels required when called:    7
 26812 ;; This function calls:
 26813 ;;		Nothing
 26814 ;; This function is called by:
 26815 ;;		_itos
 26816 ;;		_printf
 26817 ;; This function uses a non-reentrant model
 26818 ;;
 26819                           
 26820                           	psect	text143
 26821  015778                     __ptext143:
 26822                           	opt stack 0
 26823  015778                     ___lwmod:
 26824                           	opt stack 22
 26825                           
 26826                           ; BSR set to: 0
 26827                           ;incstack = 0
 26828  015778  0100               	movlb	0	; () banked
 26829  01577A  51C3               	movf	___lwmod@divisor& (0+255),w,b
 26830  01577C  0100               	movlb	0	; () banked
 26831  01577E  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 26832  015780  B4D8               	btfsc	status,2,c
 26833  015782  D026               	goto	l2859
 26834                           
 26835                           ; BSR set to: 0
 26836  015784  0E01               	movlw	1
 26837  015786  0100               	movlb	0	; () banked
 26838  015788  6FC5               	movwf	___lwmod@counter& (0+255),b
 26839  01578A  D006               	goto	l2854
 26840  01578C                     
 26841                           ; BSR set to: 0
 26842                           
 26843                           ; BSR set to: 0
 26844  01578C  0100               	movlb	0	; () banked
 26845  01578E  90D8               	bcf	status,0,c
 26846  015790  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 26847  015792  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 26848  015794  0100               	movlb	0	; () banked
 26849  015796  2BC5               	incf	___lwmod@counter& (0+255),f,b
 26850  015798                     l2854:
 26851                           
 26852                           ; BSR set to: 0
 26853                           
 26854                           ; BSR set to: 0
 26855  015798  0100               	movlb	0	; () banked
 26856  01579A  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 26857  01579C  D7F7               	goto	l2855
 26858  01579E                     u8800:
 26859                           
 26860                           ; BSR set to: 0
 26861                           
 26862                           ; BSR set to: 0
 26863                           
 26864                           ; BSR set to: 0
 26865  01579E  0100               	movlb	0	; () banked
 26866  0157A0  51C3               	movf	___lwmod@divisor& (0+255),w,b
 26867  0157A2  0100               	movlb	0	; () banked
 26868  0157A4  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 26869  0157A6  0100               	movlb	0	; () banked
 26870  0157A8  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26871  0157AA  0100               	movlb	0	; () banked
 26872  0157AC  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 26873  0157AE  A0D8               	btfss	status,0,c
 26874  0157B0  D008               	goto	l2858
 26875                           
 26876                           ; BSR set to: 0
 26877  0157B2  0100               	movlb	0	; () banked
 26878  0157B4  51C3               	movf	___lwmod@divisor& (0+255),w,b
 26879  0157B6  0100               	movlb	0	; () banked
 26880  0157B8  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 26881  0157BA  0100               	movlb	0	; () banked
 26882  0157BC  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26883  0157BE  0100               	movlb	0	; () banked
 26884  0157C0  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 26885  0157C2                     l2858:
 26886                           
 26887                           ; BSR set to: 0
 26888                           
 26889                           ; BSR set to: 0
 26890  0157C2  0100               	movlb	0	; () banked
 26891  0157C4  90D8               	bcf	status,0,c
 26892  0157C6  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 26893  0157C8  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 26894                           
 26895                           ; BSR set to: 0
 26896  0157CA  0100               	movlb	0	; () banked
 26897  0157CC  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 26898  0157CE  D7E7               	goto	u8800
 26899  0157D0                     l2859:
 26900                           
 26901                           ; BSR set to: 0
 26902                           
 26903                           ; BSR set to: 0
 26904  0157D0  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 26905  0157D4  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 26906                           
 26907                           ; BSR set to: 0
 26908  0157D8  0012               	return		;funcret
 26909  0157DA                     __end_of___lwmod:
 26910                           	opt stack 0
 26911                           tosu	equ	0xFFF
 26912                           tosh	equ	0xFFE
 26913                           tosl	equ	0xFFD
 26914                           pclath	equ	0xFFA
 26915                           tblptru	equ	0xFF8
 26916                           tblptrh	equ	0xFF7
 26917                           tblptrl	equ	0xFF6
 26918                           tablat	equ	0xFF5
 26919                           prodh	equ	0xFF4
 26920                           prodl	equ	0xFF3
 26921                           intcon	equ	0xFF2
 26922                           postinc0	equ	0xFEE
 26923                           wreg	equ	0xFE8
 26924                           indf1	equ	0xFE7
 26925                           postdec1	equ	0xFE5
 26926                           fsr1h	equ	0xFE2
 26927                           fsr1l	equ	0xFE1
 26928                           indf2	equ	0xFDF
 26929                           postinc2	equ	0xFDE
 26930                           postdec2	equ	0xFDD
 26931                           plusw2	equ	0xFDB
 26932                           fsr2h	equ	0xFDA
 26933                           fsr2l	equ	0xFD9
 26934                           status	equ	0xFD8
 26935                           
 26936 ;; *************** function ___lwdiv *****************
 26937 ;; Defined at:
 26938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 26939 ;; Parameters:    Size  Location     Type
 26940 ;;  dividend        2    0[BANK0 ] unsigned int 
 26941 ;;  divisor         2    2[BANK0 ] unsigned int 
 26942 ;; Auto vars:     Size  Location     Type
 26943 ;;  quotient        2    5[BANK0 ] unsigned int 
 26944 ;;  counter         1    4[BANK0 ] unsigned char 
 26945 ;; Return value:  Size  Location     Type
 26946 ;;                  2    0[BANK0 ] unsigned int 
 26947 ;; Registers used:
 26948 ;;		wreg, status,2, status,0
 26949 ;; Tracked objects:
 26950 ;;		On entry : 0/0
 26951 ;;		On exit  : 0/0
 26952 ;;		Unchanged: 0/0
 26953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26954 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26955 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26957 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26958 ;;Total ram usage:        7 bytes
 26959 ;; Hardware stack levels used:    1
 26960 ;; Hardware stack levels required when called:    7
 26961 ;; This function calls:
 26962 ;;		Nothing
 26963 ;; This function is called by:
 26964 ;;		_itos
 26965 ;;		_printf
 26966 ;; This function uses a non-reentrant model
 26967 ;;
 26968                           
 26969                           	psect	text144
 26970  0150A2                     __ptext144:
 26971                           	opt stack 0
 26972  0150A2                     ___lwdiv:
 26973                           	opt stack 22
 26974                           
 26975                           ; BSR set to: 0
 26976                           ;incstack = 0
 26977  0150A2  0E00               	movlw	0
 26978  0150A4  0100               	movlb	0	; () banked
 26979  0150A6  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 26980  0150A8  0E00               	movlw	0
 26981  0150AA  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 26982                           
 26983                           ; BSR set to: 0
 26984  0150AC  0100               	movlb	0	; () banked
 26985  0150AE  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 26986  0150B0  0100               	movlb	0	; () banked
 26987  0150B2  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 26988  0150B4  B4D8               	btfsc	status,2,c
 26989  0150B6  D02C               	goto	l2849
 26990                           
 26991                           ; BSR set to: 0
 26992  0150B8  0E01               	movlw	1
 26993  0150BA  0100               	movlb	0	; () banked
 26994  0150BC  6FBE               	movwf	___lwdiv@counter& (0+255),b
 26995  0150BE  D006               	goto	l2844
 26996  0150C0                     
 26997                           ; BSR set to: 0
 26998                           
 26999                           ; BSR set to: 0
 27000  0150C0  0100               	movlb	0	; () banked
 27001  0150C2  90D8               	bcf	status,0,c
 27002  0150C4  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27003  0150C6  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27004  0150C8  0100               	movlb	0	; () banked
 27005  0150CA  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27006  0150CC                     l2844:
 27007                           
 27008                           ; BSR set to: 0
 27009                           
 27010                           ; BSR set to: 0
 27011  0150CC  0100               	movlb	0	; () banked
 27012  0150CE  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27013  0150D0  D7F7               	goto	l2845
 27014  0150D2                     u8770:
 27015                           
 27016                           ; BSR set to: 0
 27017                           
 27018                           ; BSR set to: 0
 27019                           
 27020                           ; BSR set to: 0
 27021  0150D2  0100               	movlb	0	; () banked
 27022  0150D4  90D8               	bcf	status,0,c
 27023  0150D6  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27024  0150D8  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27025                           
 27026                           ; BSR set to: 0
 27027  0150DA  0100               	movlb	0	; () banked
 27028  0150DC  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27029  0150DE  0100               	movlb	0	; () banked
 27030  0150E0  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27031  0150E2  0100               	movlb	0	; () banked
 27032  0150E4  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27033  0150E6  0100               	movlb	0	; () banked
 27034  0150E8  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27035  0150EA  A0D8               	btfss	status,0,c
 27036  0150EC  D00A               	goto	l2848
 27037                           
 27038                           ; BSR set to: 0
 27039  0150EE  0100               	movlb	0	; () banked
 27040  0150F0  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27041  0150F2  0100               	movlb	0	; () banked
 27042  0150F4  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27043  0150F6  0100               	movlb	0	; () banked
 27044  0150F8  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27045  0150FA  0100               	movlb	0	; () banked
 27046  0150FC  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27047                           
 27048                           ; BSR set to: 0
 27049  0150FE  0100               	movlb	0	; () banked
 27050  015100  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27051  015102                     l2848:
 27052                           
 27053                           ; BSR set to: 0
 27054                           
 27055                           ; BSR set to: 0
 27056  015102  0100               	movlb	0	; () banked
 27057  015104  90D8               	bcf	status,0,c
 27058  015106  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27059  015108  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27060                           
 27061                           ; BSR set to: 0
 27062  01510A  0100               	movlb	0	; () banked
 27063  01510C  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27064  01510E  D7E1               	goto	u8770
 27065  015110                     l2849:
 27066                           
 27067                           ; BSR set to: 0
 27068                           
 27069                           ; BSR set to: 0
 27070  015110  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27071  015114  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27072                           
 27073                           ; BSR set to: 0
 27074  015118  0012               	return		;funcret
 27075  01511A                     __end_of___lwdiv:
 27076                           	opt stack 0
 27077                           tosu	equ	0xFFF
 27078                           tosh	equ	0xFFE
 27079                           tosl	equ	0xFFD
 27080                           pclath	equ	0xFFA
 27081                           tblptru	equ	0xFF8
 27082                           tblptrh	equ	0xFF7
 27083                           tblptrl	equ	0xFF6
 27084                           tablat	equ	0xFF5
 27085                           prodh	equ	0xFF4
 27086                           prodl	equ	0xFF3
 27087                           intcon	equ	0xFF2
 27088                           postinc0	equ	0xFEE
 27089                           wreg	equ	0xFE8
 27090                           indf1	equ	0xFE7
 27091                           postdec1	equ	0xFE5
 27092                           fsr1h	equ	0xFE2
 27093                           fsr1l	equ	0xFE1
 27094                           indf2	equ	0xFDF
 27095                           postinc2	equ	0xFDE
 27096                           postdec2	equ	0xFDD
 27097                           plusw2	equ	0xFDB
 27098                           fsr2h	equ	0xFDA
 27099                           fsr2l	equ	0xFD9
 27100                           status	equ	0xFD8
 27101                           
 27102 ;; *************** function _HMI_SetSegments *****************
 27103 ;; Defined at:
 27104 ;;		line 226 in file "HMI.c"
 27105 ;; Parameters:    Size  Location     Type
 27106 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27107 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27108 ;; Auto vars:     Size  Location     Type
 27109 ;;  in              2    4[BANK0 ] unsigned short 
 27110 ;; Return value:  Size  Location     Type
 27111 ;;                  1    wreg      void 
 27112 ;; Registers used:
 27113 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27114 ;; Tracked objects:
 27115 ;;		On entry : 0/0
 27116 ;;		On exit  : 0/0
 27117 ;;		Unchanged: 0/0
 27118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27119 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27122 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27123 ;;Total ram usage:        5 bytes
 27124 ;; Hardware stack levels used:    1
 27125 ;; Hardware stack levels required when called:    8
 27126 ;; This function calls:
 27127 ;;		_ToSegment
 27128 ;; This function is called by:
 27129 ;;		_HMI_SetNumber
 27130 ;; This function uses a non-reentrant model
 27131 ;;
 27132                           
 27133                           	psect	text145
 27134  014188                     __ptext145:
 27135                           	opt stack 0
 27136  014188                     _HMI_SetSegments:
 27137                           	opt stack 16
 27138                           
 27139                           ;HMI.c: 228: UINT16 in=0;
 27140                           
 27141                           ; BSR set to: 0
 27142                           ;incstack = 0
 27143  014188  0E00               	movlw	0
 27144  01418A  0100               	movlb	0	; () banked
 27145  01418C  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27146  01418E  0E00               	movlw	0
 27147  014190  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27148                           
 27149                           ;HMI.c: 229: while(*pString)
 27150  014192  D038               	goto	l1202
 27151  014194                     
 27152                           ; BSR set to: 0
 27153                           ;HMI.c: 230: {
 27154                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27155                           
 27156                           ; BSR set to: 0
 27157  014194  0E3C               	movlw	low _HMIBoard
 27158  014196  0100               	movlb	0	; () banked
 27159  014198  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27160  01419A  6ED9               	movwf	fsr2l,c
 27161  01419C  0E03               	movlw	high _HMIBoard
 27162  01419E  0100               	movlb	0	; () banked
 27163  0141A0  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27164  0141A2  6EDA               	movwf	fsr2h,c
 27165  0141A4  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27166  0141A8  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27167  0141AC  50E7               	movf	indf1,w,c
 27168  0141AE  EC65  F08B         	call	_ToSegment
 27169  0141B2  6EDF               	movwf	indf2,c
 27170                           
 27171                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27172  0141B4  0E3C               	movlw	low _HMIBoard
 27173  0141B6  0100               	movlb	0	; () banked
 27174  0141B8  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27175  0141BA  6ED9               	movwf	fsr2l,c
 27176  0141BC  0E03               	movlw	high _HMIBoard
 27177  0141BE  0100               	movlb	0	; () banked
 27178  0141C0  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27179  0141C2  6EDA               	movwf	fsr2h,c
 27180  0141C4  0E80               	movlw	128
 27181  0141C6  18DE               	xorwf	postinc2,w,c
 27182  0141C8  A4D8               	btfss	status,2,c
 27183  0141CA  D00E               	goto	l1201
 27184                           
 27185                           ; BSR set to: 0
 27186                           ;HMI.c: 234: {
 27187                           ;HMI.c: 235: in--;
 27188  0141CC  0100               	movlb	0	; () banked
 27189  0141CE  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27190  0141D0  A0D8               	btfss	status,0,c
 27191  0141D2  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27192                           
 27193                           ; BSR set to: 0
 27194                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27195  0141D4  0E3C               	movlw	low _HMIBoard
 27196  0141D6  0100               	movlb	0	; () banked
 27197  0141D8  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27198  0141DA  6ED9               	movwf	fsr2l,c
 27199  0141DC  0E03               	movlw	high _HMIBoard
 27200  0141DE  0100               	movlb	0	; () banked
 27201  0141E0  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27202  0141E2  6EDA               	movwf	fsr2h,c
 27203  0141E4  0E00               	movlw	0
 27204  0141E6  8EDB               	bsf	plusw2,7,c
 27205  0141E8                     l1201:
 27206                           
 27207                           ; BSR set to: 0
 27208                           ;HMI.c: 237: }
 27209                           ;HMI.c: 239: pString++;
 27210                           
 27211                           ; BSR set to: 0
 27212  0141E8  0100               	movlb	0	; () banked
 27213  0141EA  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27214  0141EC  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27215                           
 27216                           ; BSR set to: 0
 27217                           ;HMI.c: 240: in++;
 27218  0141EE  0100               	movlb	0	; () banked
 27219  0141F0  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27220  0141F2  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27221                           
 27222                           ; BSR set to: 0
 27223                           ;HMI.c: 241: if (in>=6)
 27224  0141F4  0100               	movlb	0	; () banked
 27225  0141F6  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27226  0141F8  E11A               	bnz	l12358
 27227  0141FA  0E06               	movlw	6
 27228  0141FC  0100               	movlb	0	; () banked
 27229  0141FE  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27230  014200  B0D8               	btfsc	status,0,c
 27231  014202  D015               	goto	l1204
 27232  014204                     l1202:
 27233                           
 27234                           ; BSR set to: 0
 27235                           
 27236                           ; BSR set to: 0
 27237                           
 27238                           ; BSR set to: 0
 27239  014204  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27240  014208  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27241  01420C  50DF               	movf	indf2,w,c
 27242  01420E  B4D8               	btfsc	status,2,c
 27243  014210  D00E               	goto	l1204
 27244  014212  D7C0               	goto	l1200
 27245  014214                     
 27246                           ; BSR set to: 0
 27247                           ;HMI.c: 245: {
 27248                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27249                           
 27250                           ; BSR set to: 0
 27251  014214  0E3C               	movlw	low _HMIBoard
 27252  014216  0100               	movlb	0	; () banked
 27253  014218  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27254  01421A  6ED9               	movwf	fsr2l,c
 27255  01421C  0E03               	movlw	high _HMIBoard
 27256  01421E  0100               	movlb	0	; () banked
 27257  014220  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27258  014222  6EDA               	movwf	fsr2h,c
 27259  014224  0E00               	movlw	0
 27260  014226  6EDF               	movwf	indf2,c
 27261                           
 27262                           ; BSR set to: 0
 27263                           ;HMI.c: 247: in++;
 27264  014228  0100               	movlb	0	; () banked
 27265  01422A  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27266  01422C  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27267  01422E                     l1204:
 27268  01422E                     l12358:
 27269                           
 27270                           ; BSR set to: 0
 27271  01422E  0100               	movlb	0	; () banked
 27272  014230  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27273  014232  E106               	bnz	l1207
 27274  014234  0E06               	movlw	6
 27275  014236  0100               	movlb	0	; () banked
 27276  014238  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27277  01423A  B0D8               	btfsc	status,0,c
 27278  01423C  0012               	return	
 27279  01423E  D7EA               	goto	l1205
 27280  014240                     l1207:
 27281                           
 27282                           ; BSR set to: 0
 27283  014240  0012               	return		;funcret
 27284  014242                     __end_of_HMI_SetSegments:
 27285                           	opt stack 0
 27286                           tosu	equ	0xFFF
 27287                           tosh	equ	0xFFE
 27288                           tosl	equ	0xFFD
 27289                           pclath	equ	0xFFA
 27290                           tblptru	equ	0xFF8
 27291                           tblptrh	equ	0xFF7
 27292                           tblptrl	equ	0xFF6
 27293                           tablat	equ	0xFF5
 27294                           prodh	equ	0xFF4
 27295                           prodl	equ	0xFF3
 27296                           intcon	equ	0xFF2
 27297                           postinc0	equ	0xFEE
 27298                           wreg	equ	0xFE8
 27299                           indf1	equ	0xFE7
 27300                           postdec1	equ	0xFE5
 27301                           fsr1h	equ	0xFE2
 27302                           fsr1l	equ	0xFE1
 27303                           indf2	equ	0xFDF
 27304                           postinc2	equ	0xFDE
 27305                           postdec2	equ	0xFDD
 27306                           plusw2	equ	0xFDB
 27307                           fsr2h	equ	0xFDA
 27308                           fsr2l	equ	0xFD9
 27309                           status	equ	0xFD8
 27310                           
 27311 ;; *************** function _ToSegment *****************
 27312 ;; Defined at:
 27313 ;;		line 284 in file "Library/Types.c"
 27314 ;; Parameters:    Size  Location     Type
 27315 ;;  pCHR            1    wreg     unsigned char 
 27316 ;; Auto vars:     Size  Location     Type
 27317 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27318 ;; Return value:  Size  Location     Type
 27319 ;;                  1    wreg      unsigned char 
 27320 ;; Registers used:
 27321 ;;		wreg, status,2, status,0
 27322 ;; Tracked objects:
 27323 ;;		On entry : 0/0
 27324 ;;		On exit  : 0/0
 27325 ;;		Unchanged: 0/0
 27326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27330 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27331 ;;Total ram usage:        1 bytes
 27332 ;; Hardware stack levels used:    1
 27333 ;; Hardware stack levels required when called:    7
 27334 ;; This function calls:
 27335 ;;		Nothing
 27336 ;; This function is called by:
 27337 ;;		_HMI_SetSegments
 27338 ;; This function uses a non-reentrant model
 27339 ;;
 27340                           
 27341                           	psect	text146
 27342  0116CA                     __ptext146:
 27343                           	opt stack 0
 27344  0116CA                     _ToSegment:
 27345                           	opt stack 16
 27346                           
 27347                           ; BSR set to: 0
 27348                           ;incstack = 0
 27349                           ;ToSegment@pCHR stored from wreg
 27350  0116CA  0100               	movlb	0	; () banked
 27351  0116CC  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 27352                           
 27353                           ;Types.c: 286: switch(pCHR)
 27354  0116CE  D07E               	goto	l853
 27355  0116D0  0E3F               	movlw	63
 27356  0116D2  0012               	return	
 27357  0116D4  0E06               	movlw	6
 27358  0116D6  0012               	return	
 27359  0116D8  0E5B               	movlw	91
 27360  0116DA  0012               	return	
 27361  0116DC  0E4F               	movlw	79
 27362  0116DE  0012               	return	
 27363  0116E0  0E66               	movlw	102
 27364  0116E2  0012               	return	
 27365  0116E4  0E6D               	movlw	109
 27366  0116E6  0012               	return	
 27367  0116E8  0E7D               	movlw	125
 27368  0116EA  0012               	return	
 27369  0116EC  0E07               	movlw	7
 27370  0116EE  0012               	return	
 27371  0116F0  0E7F               	movlw	127
 27372  0116F2  0012               	return	
 27373  0116F4  0E6F               	movlw	111
 27374  0116F6  0012               	return	
 27375  0116F8  0E5F               	movlw	95
 27376  0116FA  0012               	return	
 27377  0116FC  0E7C               	movlw	124
 27378  0116FE  0012               	return	
 27379  011700  0E58               	movlw	88
 27380  011702  0012               	return	
 27381  011704  0E5E               	movlw	94
 27382  011706  0012               	return	
 27383  011708  0E7B               	movlw	123
 27384  01170A  0012               	return	
 27385  01170C  0E71               	movlw	113
 27386  01170E  0012               	return	
 27387  011710  0E6F               	movlw	111
 27388  011712  0012               	return	
 27389  011714  0E74               	movlw	116
 27390  011716  0012               	return	
 27391  011718  0E04               	movlw	4
 27392  01171A  0012               	return	
 27393  01171C  0E0E               	movlw	14
 27394  01171E  0012               	return	
 27395  011720  0E7A               	movlw	122
 27396  011722  0012               	return	
 27397  011724  0E06               	movlw	6
 27398  011726  0012               	return	
 27399  011728  0E14               	movlw	20
 27400  01172A  0012               	return	
 27401  01172C  0E54               	movlw	84
 27402  01172E  0012               	return	
 27403  011730  0E5C               	movlw	92
 27404  011732  0012               	return	
 27405  011734  0E73               	movlw	115
 27406  011736  0012               	return	
 27407  011738  0E67               	movlw	103
 27408  01173A  0012               	return	
 27409  01173C  0E50               	movlw	80
 27410  01173E  0012               	return	
 27411  011740  0E6D               	movlw	109
 27412  011742  0012               	return	
 27413  011744  0E78               	movlw	120
 27414  011746  0012               	return	
 27415  011748  0E1C               	movlw	28
 27416  01174A  0012               	return	
 27417  01174C  0E62               	movlw	98
 27418  01174E  0012               	return	
 27419  011750  0E2A               	movlw	42
 27420  011752  0012               	return	
 27421  011754  0E64               	movlw	100
 27422  011756  0012               	return	
 27423  011758  0E6E               	movlw	110
 27424  01175A  0012               	return	
 27425  01175C  0E5B               	movlw	91
 27426  01175E  0012               	return	
 27427  011760  0E77               	movlw	119
 27428  011762  0012               	return	
 27429  011764  0E7F               	movlw	127
 27430  011766  0012               	return	
 27431  011768  0E39               	movlw	57
 27432  01176A  0012               	return	
 27433  01176C  0E3F               	movlw	63
 27434  01176E  0012               	return	
 27435  011770  0E79               	movlw	121
 27436  011772  0012               	return	
 27437  011774  0E71               	movlw	113
 27438  011776  0012               	return	
 27439  011778  0E3D               	movlw	61
 27440  01177A  0012               	return	
 27441  01177C  0E76               	movlw	118
 27442  01177E  0012               	return	
 27443  011780  0E06               	movlw	6
 27444  011782  0012               	return	
 27445  011784  0E1E               	movlw	30
 27446  011786  0012               	return	
 27447  011788  0E57               	movlw	87
 27448  01178A  0012               	return	
 27449  01178C  0E38               	movlw	56
 27450  01178E  0012               	return	
 27451  011790  0E76               	movlw	118
 27452  011792  0012               	return	
 27453  011794  0E76               	movlw	118
 27454  011796  0012               	return	
 27455  011798  0E3F               	movlw	63
 27456  01179A  0012               	return	
 27457  01179C  0E73               	movlw	115
 27458  01179E  0012               	return	
 27459  0117A0  0E3F               	movlw	63
 27460  0117A2  0012               	return	
 27461  0117A4  0E77               	movlw	119
 27462  0117A6  0012               	return	
 27463  0117A8  0E6D               	movlw	109
 27464  0117AA  0012               	return	
 27465  0117AC  0E31               	movlw	49
 27466  0117AE  0012               	return	
 27467  0117B0  0E3E               	movlw	62
 27468  0117B2  0012               	return	
 27469  0117B4  0E3E               	movlw	62
 27470  0117B6  0012               	return	
 27471  0117B8  0E7E               	movlw	126
 27472  0117BA  0012               	return	
 27473  0117BC  0E76               	movlw	118
 27474  0117BE  0012               	return	
 27475  0117C0  0E66               	movlw	102
 27476  0117C2  0012               	return	
 27477  0117C4  0E5B               	movlw	91
 27478  0117C6  0012               	return	
 27479  0117C8  0E80               	movlw	128
 27480  0117CA  0012               	return	
 27481  0117CC                     l853:
 27482  0117CC  0100               	movlb	0	; () banked
 27483  0117CE  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 27484                           
 27485                           ; Switch size 1, requested type "space"
 27486                           ; Number of cases is 63, Range of values is 46 to 122
 27487                           ; switch strategies available:
 27488                           ; Name         Instructions Cycles
 27489                           ; simple_byte          190    96 (average)
 27490                           ;	Chosen strategy is simple_byte
 27491  0117D0  0A2E               	xorlw	46	; case 46
 27492  0117D2  B4D8               	btfsc	status,2,c
 27493  0117D4  D7F9               	goto	l917
 27494  0117D6  0A1E               	xorlw	30	; case 48
 27495  0117D8  B4D8               	btfsc	status,2,c
 27496  0117DA  D77A               	goto	l854
 27497  0117DC  0A01               	xorlw	1	; case 49
 27498  0117DE  B4D8               	btfsc	status,2,c
 27499  0117E0  D779               	goto	l856
 27500  0117E2  0A03               	xorlw	3	; case 50
 27501  0117E4  B4D8               	btfsc	status,2,c
 27502  0117E6  D778               	goto	l857
 27503  0117E8  0A01               	xorlw	1	; case 51
 27504  0117EA  B4D8               	btfsc	status,2,c
 27505  0117EC  D777               	goto	l858
 27506  0117EE  0A07               	xorlw	7	; case 52
 27507  0117F0  B4D8               	btfsc	status,2,c
 27508  0117F2  D776               	goto	l859
 27509  0117F4  0A01               	xorlw	1	; case 53
 27510  0117F6  B4D8               	btfsc	status,2,c
 27511  0117F8  D775               	goto	l860
 27512  0117FA  0A03               	xorlw	3	; case 54
 27513  0117FC  B4D8               	btfsc	status,2,c
 27514  0117FE  D774               	goto	l861
 27515  011800  0A01               	xorlw	1	; case 55
 27516  011802  B4D8               	btfsc	status,2,c
 27517  011804  D773               	goto	l862
 27518  011806  0A0F               	xorlw	15	; case 56
 27519  011808  B4D8               	btfsc	status,2,c
 27520  01180A  D772               	goto	l863
 27521  01180C  0A01               	xorlw	1	; case 57
 27522  01180E  B4D8               	btfsc	status,2,c
 27523  011810  D771               	goto	l864
 27524  011812  0A78               	xorlw	120	; case 65
 27525  011814  B4D8               	btfsc	status,2,c
 27526  011816  D7A4               	goto	l891
 27527  011818  0A03               	xorlw	3	; case 66
 27528  01181A  B4D8               	btfsc	status,2,c
 27529  01181C  D7A3               	goto	l892
 27530  01181E  0A01               	xorlw	1	; case 67
 27531  011820  B4D8               	btfsc	status,2,c
 27532  011822  D7A2               	goto	l893
 27533  011824  0A07               	xorlw	7	; case 68
 27534  011826  B4D8               	btfsc	status,2,c
 27535  011828  D7A1               	goto	l894
 27536  01182A  0A01               	xorlw	1	; case 69
 27537  01182C  B4D8               	btfsc	status,2,c
 27538  01182E  D7A0               	goto	l895
 27539  011830  0A03               	xorlw	3	; case 70
 27540  011832  B4D8               	btfsc	status,2,c
 27541  011834  D79F               	goto	l896
 27542  011836  0A01               	xorlw	1	; case 71
 27543  011838  B4D8               	btfsc	status,2,c
 27544  01183A  D79E               	goto	l897
 27545  01183C  0A0F               	xorlw	15	; case 72
 27546  01183E  B4D8               	btfsc	status,2,c
 27547  011840  D79D               	goto	l898
 27548  011842  0A01               	xorlw	1	; case 73
 27549  011844  B4D8               	btfsc	status,2,c
 27550  011846  D79C               	goto	l899
 27551  011848  0A03               	xorlw	3	; case 74
 27552  01184A  B4D8               	btfsc	status,2,c
 27553  01184C  D79B               	goto	l900
 27554  01184E  0A01               	xorlw	1	; case 75
 27555  011850  B4D8               	btfsc	status,2,c
 27556  011852  D79A               	goto	l901
 27557  011854  0A07               	xorlw	7	; case 76
 27558  011856  B4D8               	btfsc	status,2,c
 27559  011858  D799               	goto	l902
 27560  01185A  0A01               	xorlw	1	; case 77
 27561  01185C  B4D8               	btfsc	status,2,c
 27562  01185E  D798               	goto	l903
 27563  011860  0A03               	xorlw	3	; case 78
 27564  011862  B4D8               	btfsc	status,2,c
 27565  011864  D797               	goto	l904
 27566  011866  0A01               	xorlw	1	; case 79
 27567  011868  B4D8               	btfsc	status,2,c
 27568  01186A  D796               	goto	l905
 27569  01186C  0A1F               	xorlw	31	; case 80
 27570  01186E  B4D8               	btfsc	status,2,c
 27571  011870  D795               	goto	l906
 27572  011872  0A01               	xorlw	1	; case 81
 27573  011874  B4D8               	btfsc	status,2,c
 27574  011876  D794               	goto	l907
 27575  011878  0A03               	xorlw	3	; case 82
 27576  01187A  B4D8               	btfsc	status,2,c
 27577  01187C  D793               	goto	l908
 27578  01187E  0A01               	xorlw	1	; case 83
 27579  011880  B4D8               	btfsc	status,2,c
 27580  011882  D792               	goto	l909
 27581  011884  0A07               	xorlw	7	; case 84
 27582  011886  B4D8               	btfsc	status,2,c
 27583  011888  D791               	goto	l910
 27584  01188A  0A01               	xorlw	1	; case 85
 27585  01188C  B4D8               	btfsc	status,2,c
 27586  01188E  D790               	goto	l911
 27587  011890  0A03               	xorlw	3	; case 86
 27588  011892  B4D8               	btfsc	status,2,c
 27589  011894  D78F               	goto	l912
 27590  011896  0A01               	xorlw	1	; case 87
 27591  011898  B4D8               	btfsc	status,2,c
 27592  01189A  D78E               	goto	l913
 27593  01189C  0A0F               	xorlw	15	; case 88
 27594  01189E  B4D8               	btfsc	status,2,c
 27595  0118A0  D78D               	goto	l914
 27596  0118A2  0A01               	xorlw	1	; case 89
 27597  0118A4  B4D8               	btfsc	status,2,c
 27598  0118A6  D78C               	goto	l915
 27599  0118A8  0A03               	xorlw	3	; case 90
 27600  0118AA  B4D8               	btfsc	status,2,c
 27601  0118AC  D78B               	goto	l916
 27602  0118AE  0A3B               	xorlw	59	; case 97
 27603  0118B0  B4D8               	btfsc	status,2,c
 27604  0118B2  D722               	goto	l865
 27605  0118B4  0A03               	xorlw	3	; case 98
 27606  0118B6  B4D8               	btfsc	status,2,c
 27607  0118B8  D721               	goto	l866
 27608  0118BA  0A01               	xorlw	1	; case 99
 27609  0118BC  B4D8               	btfsc	status,2,c
 27610  0118BE  D720               	goto	l867
 27611  0118C0  0A07               	xorlw	7	; case 100
 27612  0118C2  B4D8               	btfsc	status,2,c
 27613  0118C4  D71F               	goto	l868
 27614  0118C6  0A01               	xorlw	1	; case 101
 27615  0118C8  B4D8               	btfsc	status,2,c
 27616  0118CA  D71E               	goto	l869
 27617  0118CC  0A03               	xorlw	3	; case 102
 27618  0118CE  B4D8               	btfsc	status,2,c
 27619  0118D0  D71D               	goto	l870
 27620  0118D2  0A01               	xorlw	1	; case 103
 27621  0118D4  B4D8               	btfsc	status,2,c
 27622  0118D6  D71C               	goto	l871
 27623  0118D8  0A0F               	xorlw	15	; case 104
 27624  0118DA  B4D8               	btfsc	status,2,c
 27625  0118DC  D71B               	goto	l872
 27626  0118DE  0A01               	xorlw	1	; case 105
 27627  0118E0  B4D8               	btfsc	status,2,c
 27628  0118E2  D71A               	goto	l873
 27629  0118E4  0A03               	xorlw	3	; case 106
 27630  0118E6  B4D8               	btfsc	status,2,c
 27631  0118E8  D719               	goto	l874
 27632  0118EA  0A01               	xorlw	1	; case 107
 27633  0118EC  B4D8               	btfsc	status,2,c
 27634  0118EE  D718               	goto	l875
 27635  0118F0  0A07               	xorlw	7	; case 108
 27636  0118F2  B4D8               	btfsc	status,2,c
 27637  0118F4  D717               	goto	l876
 27638  0118F6  0A01               	xorlw	1	; case 109
 27639  0118F8  B4D8               	btfsc	status,2,c
 27640  0118FA  D716               	goto	l877
 27641  0118FC  0A03               	xorlw	3	; case 110
 27642  0118FE  B4D8               	btfsc	status,2,c
 27643  011900  D715               	goto	l878
 27644  011902  0A01               	xorlw	1	; case 111
 27645  011904  B4D8               	btfsc	status,2,c
 27646  011906  D714               	goto	l879
 27647  011908  0A1F               	xorlw	31	; case 112
 27648  01190A  B4D8               	btfsc	status,2,c
 27649  01190C  D713               	goto	l880
 27650  01190E  0A01               	xorlw	1	; case 113
 27651  011910  B4D8               	btfsc	status,2,c
 27652  011912  D712               	goto	l881
 27653  011914  0A03               	xorlw	3	; case 114
 27654  011916  B4D8               	btfsc	status,2,c
 27655  011918  D711               	goto	l882
 27656  01191A  0A01               	xorlw	1	; case 115
 27657  01191C  B4D8               	btfsc	status,2,c
 27658  01191E  D710               	goto	l883
 27659  011920  0A07               	xorlw	7	; case 116
 27660  011922  B4D8               	btfsc	status,2,c
 27661  011924  D70F               	goto	l884
 27662  011926  0A01               	xorlw	1	; case 117
 27663  011928  B4D8               	btfsc	status,2,c
 27664  01192A  D70E               	goto	l885
 27665  01192C  0A03               	xorlw	3	; case 118
 27666  01192E  B4D8               	btfsc	status,2,c
 27667  011930  D70D               	goto	l886
 27668  011932  0A01               	xorlw	1	; case 119
 27669  011934  B4D8               	btfsc	status,2,c
 27670  011936  D70C               	goto	l887
 27671  011938  0A0F               	xorlw	15	; case 120
 27672  01193A  B4D8               	btfsc	status,2,c
 27673  01193C  D70B               	goto	l888
 27674  01193E  0A01               	xorlw	1	; case 121
 27675  011940  B4D8               	btfsc	status,2,c
 27676  011942  D70A               	goto	l889
 27677  011944  0A03               	xorlw	3	; case 122
 27678  011946  B4D8               	btfsc	status,2,c
 27679  011948  D709               	goto	l890
 27680                           
 27681                           ;Types.c: 354: return 0;
 27682                           
 27683                           ; BSR set to: 0
 27684  01194A  0E00               	movlw	0
 27685  01194C  0012               	return	
 27686  01194E                     __end_of_ToSegment:
 27687                           	opt stack 0
 27688                           tosu	equ	0xFFF
 27689                           tosh	equ	0xFFE
 27690                           tosl	equ	0xFFD
 27691                           pclath	equ	0xFFA
 27692                           tblptru	equ	0xFF8
 27693                           tblptrh	equ	0xFF7
 27694                           tblptrl	equ	0xFF6
 27695                           tablat	equ	0xFF5
 27696                           prodh	equ	0xFF4
 27697                           prodl	equ	0xFF3
 27698                           intcon	equ	0xFF2
 27699                           postinc0	equ	0xFEE
 27700                           wreg	equ	0xFE8
 27701                           indf1	equ	0xFE7
 27702                           postdec1	equ	0xFE5
 27703                           fsr1h	equ	0xFE2
 27704                           fsr1l	equ	0xFE1
 27705                           indf2	equ	0xFDF
 27706                           postinc2	equ	0xFDE
 27707                           postdec2	equ	0xFDD
 27708                           plusw2	equ	0xFDB
 27709                           fsr2h	equ	0xFDA
 27710                           fsr2l	equ	0xFD9
 27711                           status	equ	0xFD8
 27712                           
 27713 ;; *************** function _HMI_SetButton *****************
 27714 ;; Defined at:
 27715 ;;		line 186 in file "HMI.c"
 27716 ;; Parameters:    Size  Location     Type
 27717 ;;  pValue          1    wreg     unsigned char 
 27718 ;; Auto vars:     Size  Location     Type
 27719 ;;  pValue          1    6[BANK0 ] unsigned char 
 27720 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 27721 ;;  v               1    7[BANK0 ] unsigned char 
 27722 ;; Return value:  Size  Location     Type
 27723 ;;                  1    wreg      void 
 27724 ;; Registers used:
 27725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27726 ;; Tracked objects:
 27727 ;;		On entry : 0/0
 27728 ;;		On exit  : 0/0
 27729 ;;		Unchanged: 0/0
 27730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27732 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27734 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27735 ;;Total ram usage:        8 bytes
 27736 ;; Hardware stack levels used:    1
 27737 ;; Hardware stack levels required when called:    7
 27738 ;; This function calls:
 27739 ;;		Nothing
 27740 ;; This function is called by:
 27741 ;;		_Event_TestButton
 27742 ;; This function uses a non-reentrant model
 27743 ;;
 27744                           
 27745                           	psect	text147
 27746  014B66                     __ptext147:
 27747                           	opt stack 0
 27748  014B66                     _HMI_SetButton:
 27749                           	opt stack 18
 27750                           
 27751                           ;incstack = 0
 27752                           ;HMI_SetButton@pValue stored from wreg
 27753  014B66  0100               	movlb	0	; () banked
 27754  014B68  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 27755                           
 27756                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 27757  014B6A  0E64               	movlw	low HMI_SetButton@F7213
 27758  014B6C  6EF6               	movwf	tblptrl,c
 27759  014B6E                     	if	1	;There is more than 1 active tblptr byte
 27760  014B6E  0EFD               	movlw	high HMI_SetButton@F7213
 27761  014B70  6EF7               	movwf	tblptrh,c
 27762  014B72                     	endif
 27763  014B72                     	if	1	;There are 3 active tblptr bytes
 27764  014B72  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 27765  014B74  6EF8               	movwf	tblptru,c
 27766  014B76                     	endif
 27767  014B76  0009               	tblrd		*+
 27768  014B78  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 27769  014B7C  0009               	tblrd		*+
 27770  014B7E  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 27771  014B82  0009               	tblrd		*+
 27772  014B84  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 27773  014B88  000A               	tblrd		*-
 27774  014B8A  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 27775                           
 27776                           ;HMI.c: 189: UINT8 v = 0b00010001;
 27777  014B8E  0E11               	movlw	17
 27778  014B90  0100               	movlb	0	; () banked
 27779  014B92  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 27780                           
 27781                           ; BSR set to: 0
 27782                           ;HMI.c: 190: pValue &= 3;
 27783  014B94  0E03               	movlw	3
 27784  014B96  0100               	movlb	0	; () banked
 27785  014B98  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 27786                           
 27787                           ; BSR set to: 0
 27788                           ;HMI.c: 191: v = v << reindex[pValue];
 27789  014B9A  0100               	movlb	0	; () banked
 27790  014B9C  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 27791  014B9E  0D01               	mullw	1
 27792  014BA0  0EBC               	movlw	low HMI_SetButton@reindex
 27793  014BA2  24F3               	addwf	prodl,w,c
 27794  014BA4  6ED9               	movwf	fsr2l,c
 27795  014BA6  0E00               	movlw	high HMI_SetButton@reindex
 27796  014BA8  20F4               	addwfc	prodh,w,c
 27797  014BAA  6EDA               	movwf	fsr2h,c
 27798  014BAC  50DF               	movf	indf2,w,c
 27799  014BAE  0100               	movlb	0	; () banked
 27800  014BB0  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 27801  014BB2  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 27802  014BB6  0100               	movlb	0	; () banked
 27803  014BB8  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 27804  014BBA  D003               	goto	u9154
 27805  014BBC                     u9155:
 27806  014BBC  0100               	movlb	0	; () banked
 27807  014BBE  90D8               	bcf	status,0,c
 27808  014BC0  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 27809  014BC2                     u9154:
 27810  014BC2  0100               	movlb	0	; () banked
 27811  014BC4  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 27812  014BC6  D7FA               	goto	u9155
 27813  014BC8  0100               	movlb	0	; () banked
 27814  014BCA  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 27815  014BCC  0100               	movlb	0	; () banked
 27816  014BCE  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 27817                           
 27818                           ; BSR set to: 0
 27819                           ;HMI.c: 192: v = v >> 4;
 27820  014BD0  0100               	movlb	0	; () banked
 27821  014BD2  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 27822  014BD4  0B0F               	andlw	15
 27823  014BD6  0100               	movlb	0	; () banked
 27824  014BD8  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 27825                           
 27826                           ; BSR set to: 0
 27827                           ;HMI.c: 193: v = v & 0x0F;
 27828  014BDA  0100               	movlb	0	; () banked
 27829  014BDC  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 27830  014BDE  0B0F               	andlw	15
 27831  014BE0  0100               	movlb	0	; () banked
 27832  014BE2  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 27833                           
 27834                           ; BSR set to: 0
 27835                           ;HMI.c: 194: HMIBoard.pButton = v;
 27836  014BE4  0103               	movlb	3	; () banked
 27837  014BE6  5142               	movf	(_HMIBoard+6)& (0+255),w,b
 27838  014BE8  0100               	movlb	0	; () banked
 27839  014BEA  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 27840  014BEC  0BF0               	andlw	-16
 27841  014BEE  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 27842  014BF0  0103               	movlb	3	; () banked
 27843  014BF2  6F42               	movwf	(_HMIBoard+6)& (0+255),b
 27844                           
 27845                           ; BSR set to: 3
 27846  014BF4  0012               	return		;funcret
 27847  014BF6                     __end_of_HMI_SetButton:
 27848                           	opt stack 0
 27849                           tosu	equ	0xFFF
 27850                           tosh	equ	0xFFE
 27851                           tosl	equ	0xFFD
 27852                           pclath	equ	0xFFA
 27853                           tblptru	equ	0xFF8
 27854                           tblptrh	equ	0xFF7
 27855                           tblptrl	equ	0xFF6
 27856                           tablat	equ	0xFF5
 27857                           prodh	equ	0xFF4
 27858                           prodl	equ	0xFF3
 27859                           intcon	equ	0xFF2
 27860                           postinc0	equ	0xFEE
 27861                           wreg	equ	0xFE8
 27862                           indf1	equ	0xFE7
 27863                           postdec1	equ	0xFE5
 27864                           fsr1h	equ	0xFE2
 27865                           fsr1l	equ	0xFE1
 27866                           indf2	equ	0xFDF
 27867                           postinc2	equ	0xFDE
 27868                           postdec2	equ	0xFDD
 27869                           plusw2	equ	0xFDB
 27870                           fsr2h	equ	0xFDA
 27871                           fsr2l	equ	0xFD9
 27872                           status	equ	0xFD8
 27873                           
 27874 ;; *************** function _LED_Toggle *****************
 27875 ;; Defined at:
 27876 ;;		line 50 in file "Library/LED.c"
 27877 ;; Parameters:    Size  Location     Type
 27878 ;;  pLED            1    wreg     enum E6739
 27879 ;; Auto vars:     Size  Location     Type
 27880 ;;  pLED            1   24[BANK0 ] enum E6739
 27881 ;; Return value:  Size  Location     Type
 27882 ;;                  1    wreg      void 
 27883 ;; Registers used:
 27884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27885 ;; Tracked objects:
 27886 ;;		On entry : 0/0
 27887 ;;		On exit  : 0/0
 27888 ;;		Unchanged: 0/0
 27889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27894 ;;Total ram usage:        1 bytes
 27895 ;; Hardware stack levels used:    1
 27896 ;; Hardware stack levels required when called:   12
 27897 ;; This function calls:
 27898 ;;		_Port_TogglePin
 27899 ;; This function is called by:
 27900 ;;		_LCD_Reset
 27901 ;;		_Event_DIPSwitch
 27902 ;;		_Event_TestButton
 27903 ;;		_Event_ADCSequenceComplete
 27904 ;;		_Event_HMI_DIPSwitch
 27905 ;;		_Event_HMI_LeftButton
 27906 ;;		_Event_HMI_RightButton
 27907 ;;		_Event_HMI_UpButton
 27908 ;;		_Event_HMI_DownButton
 27909 ;; This function uses a non-reentrant model
 27910 ;;
 27911                           
 27912                           	psect	text148
 27913  015BA2                     __ptext148:
 27914                           	opt stack 0
 27915  015BA2                     _LED_Toggle:
 27916                           	opt stack 13
 27917                           
 27918                           ; BSR set to: 3
 27919                           ;incstack = 0
 27920                           ;LED_Toggle@pLED stored from wreg
 27921  015BA2  0100               	movlb	0	; () banked
 27922  015BA4  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 27923                           
 27924                           ;LED.c: 52: switch (pLED)
 27925  015BA6  D018               	goto	l234
 27926  015BA8                     
 27927                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 27928  015BA8  0EA7               	movlw	low _PortC
 27929  015BAA  0100               	movlb	0	; () banked
 27930  015BAC  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 27931  015BAE  0E00               	movlw	high _PortC
 27932  015BB0  0100               	movlb	0	; () banked
 27933  015BB2  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 27934  015BB4  0E00               	movlw	0
 27935  015BB6  0100               	movlb	0	; () banked
 27936  015BB8  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 27937  015BBA  EC36  F0B0         	call	_Port_TogglePin	;wreg free
 27938                           
 27939                           ;LED.c: 56: break;
 27940  015BBE  0012               	return	
 27941  015BC0                     
 27942                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 27943  015BC0  0EA7               	movlw	low _PortC
 27944  015BC2  0100               	movlb	0	; () banked
 27945  015BC4  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 27946  015BC6  0E00               	movlw	high _PortC
 27947  015BC8  0100               	movlb	0	; () banked
 27948  015BCA  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 27949  015BCC  0E01               	movlw	1
 27950  015BCE  0100               	movlb	0	; () banked
 27951  015BD0  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 27952  015BD2  EC36  F0B0         	call	_Port_TogglePin	;wreg free
 27953                           
 27954                           ;LED.c: 60: }
 27955                           
 27956                           ;LED.c: 59: break;
 27957  015BD6  0012               	return	
 27958  015BD8                     l234:
 27959  015BD8  0100               	movlb	0	; () banked
 27960  015BDA  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 27961                           
 27962                           ; Switch size 1, requested type "space"
 27963                           ; Number of cases is 2, Range of values is 0 to 1
 27964                           ; switch strategies available:
 27965                           ; Name         Instructions Cycles
 27966                           ; simple_byte            7     4 (average)
 27967                           ;	Chosen strategy is simple_byte
 27968  015BDC  0A00               	xorlw	0	; case 0
 27969  015BDE  B4D8               	btfsc	status,2,c
 27970  015BE0  D7E3               	goto	l235
 27971  015BE2  0A01               	xorlw	1	; case 1
 27972  015BE4  A4D8               	btfss	status,2,c
 27973  015BE6  0012               	return	
 27974  015BE8  D7EB               	goto	l237
 27975  015BEA                     __end_of_LED_Toggle:
 27976                           	opt stack 0
 27977                           tosu	equ	0xFFF
 27978                           tosh	equ	0xFFE
 27979                           tosl	equ	0xFFD
 27980                           pclath	equ	0xFFA
 27981                           tblptru	equ	0xFF8
 27982                           tblptrh	equ	0xFF7
 27983                           tblptrl	equ	0xFF6
 27984                           tablat	equ	0xFF5
 27985                           prodh	equ	0xFF4
 27986                           prodl	equ	0xFF3
 27987                           intcon	equ	0xFF2
 27988                           postinc0	equ	0xFEE
 27989                           wreg	equ	0xFE8
 27990                           indf1	equ	0xFE7
 27991                           postdec1	equ	0xFE5
 27992                           fsr1h	equ	0xFE2
 27993                           fsr1l	equ	0xFE1
 27994                           indf2	equ	0xFDF
 27995                           postinc2	equ	0xFDE
 27996                           postdec2	equ	0xFDD
 27997                           plusw2	equ	0xFDB
 27998                           fsr2h	equ	0xFDA
 27999                           fsr2l	equ	0xFD9
 28000                           status	equ	0xFD8
 28001                           
 28002 ;; *************** function _Port_TogglePin *****************
 28003 ;; Defined at:
 28004 ;;		line 278 in file "Library/Port.c"
 28005 ;; Parameters:    Size  Location     Type
 28006 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28007 ;;		 -> PortC(10), 
 28008 ;;  pPin            1   22[BANK0 ] enum E6750
 28009 ;; Auto vars:     Size  Location     Type
 28010 ;;  Value           1   23[BANK0 ] unsigned char 
 28011 ;; Return value:  Size  Location     Type
 28012 ;;                  1    wreg      void 
 28013 ;; Registers used:
 28014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28015 ;; Tracked objects:
 28016 ;;		On entry : 0/0
 28017 ;;		On exit  : 0/0
 28018 ;;		Unchanged: 0/0
 28019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28020 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28023 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28024 ;;Total ram usage:        4 bytes
 28025 ;; Hardware stack levels used:    1
 28026 ;; Hardware stack levels required when called:   11
 28027 ;; This function calls:
 28028 ;;		_Port_GetPin
 28029 ;;		_Port_SetPin
 28030 ;; This function is called by:
 28031 ;;		_LED_Toggle
 28032 ;; This function uses a non-reentrant model
 28033 ;;
 28034                           
 28035                           	psect	text149
 28036  01606C                     __ptext149:
 28037                           	opt stack 0
 28038  01606C                     _Port_TogglePin:
 28039                           	opt stack 13
 28040                           
 28041                           ;Port.c: 280: UINT8 Value;
 28042                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28043                           
 28044                           ;incstack = 0
 28045  01606C  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28046  016070  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28047  016074  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28048  016078  EC3B  F0AE         	call	_Port_GetPin	;wreg free
 28049  01607C  0100               	movlb	0	; () banked
 28050  01607E  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28051                           
 28052                           ; BSR set to: 0
 28053                           ;Port.c: 282: Value ^= 0x01;
 28054  016080  0E01               	movlw	1
 28055  016082  0100               	movlb	0	; () banked
 28056  016084  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28057                           
 28058                           ; BSR set to: 0
 28059                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28060  016086  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28061  01608A  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28062  01608E  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28063  016092  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28064  016096  EC84  F09E         	call	_Port_SetPin	;wreg free
 28065  01609A  0012               	return		;funcret
 28066  01609C                     __end_of_Port_TogglePin:
 28067                           	opt stack 0
 28068                           tosu	equ	0xFFF
 28069                           tosh	equ	0xFFE
 28070                           tosl	equ	0xFFD
 28071                           pclath	equ	0xFFA
 28072                           tblptru	equ	0xFF8
 28073                           tblptrh	equ	0xFF7
 28074                           tblptrl	equ	0xFF6
 28075                           tablat	equ	0xFF5
 28076                           prodh	equ	0xFF4
 28077                           prodl	equ	0xFF3
 28078                           intcon	equ	0xFF2
 28079                           postinc0	equ	0xFEE
 28080                           wreg	equ	0xFE8
 28081                           indf1	equ	0xFE7
 28082                           postdec1	equ	0xFE5
 28083                           fsr1h	equ	0xFE2
 28084                           fsr1l	equ	0xFE1
 28085                           indf2	equ	0xFDF
 28086                           postinc2	equ	0xFDE
 28087                           postdec2	equ	0xFDD
 28088                           plusw2	equ	0xFDB
 28089                           fsr2h	equ	0xFDA
 28090                           fsr2l	equ	0xFD9
 28091                           status	equ	0xFD8
 28092                           
 28093 ;; *************** function _Port_SetPin *****************
 28094 ;; Defined at:
 28095 ;;		line 247 in file "Library/Port.c"
 28096 ;; Parameters:    Size  Location     Type
 28097 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28098 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28099 ;;  pPin            1   17[BANK0 ] enum E6750
 28100 ;;  pValue          1   18[BANK0 ] unsigned char 
 28101 ;; Auto vars:     Size  Location     Type
 28102 ;;  Type            1   19[BANK0 ] enum E6795
 28103 ;; Return value:  Size  Location     Type
 28104 ;;                  1    wreg      void 
 28105 ;; Registers used:
 28106 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28107 ;; Tracked objects:
 28108 ;;		On entry : 0/0
 28109 ;;		On exit  : 0/0
 28110 ;;		Unchanged: 0/0
 28111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28115 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28116 ;;Total ram usage:        5 bytes
 28117 ;; Hardware stack levels used:    1
 28118 ;; Hardware stack levels required when called:   10
 28119 ;; This function calls:
 28120 ;;		_Byte_SetBit
 28121 ;;		_Word_GetPair
 28122 ;; This function is called by:
 28123 ;;		_Reset_Low
 28124 ;;		_Reset_High
 28125 ;;		_LED_Set
 28126 ;;		_Port_TogglePin
 28127 ;;		_Motor_Init
 28128 ;;		_Motor_Step
 28129 ;;		_MXK_Init
 28130 ;; This function uses a non-reentrant model
 28131 ;;
 28132                           
 28133                           	psect	text150
 28134  013D08                     __ptext150:
 28135                           	opt stack 0
 28136  013D08                     _Port_SetPin:
 28137                           	opt stack 13
 28138                           
 28139                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28140                           
 28141                           ;incstack = 0
 28142  013D08  0E08               	movlw	8
 28143  013D0A  0100               	movlb	0	; () banked
 28144  013D0C  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28145  013D0E  0100               	movlb	0	; () banked
 28146  013D10  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28147  013D12  0E00               	movlw	0
 28148  013D14  0100               	movlb	0	; () banked
 28149  013D16  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28150  013D18  0100               	movlb	0	; () banked
 28151  013D1A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28152  013D1C  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28153  013D20  EC3E  F0AF         	call	_Word_GetPair	;wreg free
 28154  013D24  0100               	movlb	0	; () banked
 28155  013D26  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28156                           
 28157                           ;Port.c: 250: switch (Type)
 28158  013D28  D042               	goto	l427
 28159  013D2A                     
 28160                           ; BSR set to: 0
 28161                           ;Port.c: 256: pValue &= 1;
 28162                           
 28163                           ; BSR set to: 0
 28164  013D2A  0E01               	movlw	1
 28165  013D2C  0100               	movlb	0	; () banked
 28166  013D2E  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28167                           
 28168                           ; BSR set to: 0
 28169                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28170  013D30  0100               	movlb	0	; () banked
 28171  013D32  EE20 F002          	lfsr	2,2
 28172  013D36  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28173  013D38  26D9               	addwf	fsr2l,f,c
 28174  013D3A  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28175  013D3C  22DA               	addwfc	fsr2h,f,c
 28176  013D3E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28177  013D42  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28178  013D46  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28179  013D4A  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28180  013D4E  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 28181                           
 28182                           ;Port.c: 258: break;
 28183  013D52  0012               	return	
 28184  013D54                     
 28185                           ;Port.c: 261: pValue &= 1;
 28186  013D54  0E01               	movlw	1
 28187  013D56  0100               	movlb	0	; () banked
 28188  013D58  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28189                           
 28190                           ;Port.c: 262: pValue ^= 1;
 28191  013D5A  0E01               	movlw	1
 28192  013D5C  0100               	movlb	0	; () banked
 28193  013D5E  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28194                           
 28195                           ; BSR set to: 0
 28196                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28197  013D60  0100               	movlb	0	; () banked
 28198  013D62  EE20 F002          	lfsr	2,2
 28199  013D66  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28200  013D68  26D9               	addwf	fsr2l,f,c
 28201  013D6A  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28202  013D6C  22DA               	addwfc	fsr2h,f,c
 28203  013D6E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28204  013D72  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28205  013D76  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28206  013D7A  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28207  013D7E  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 28208                           
 28209                           ;Port.c: 264: break;
 28210  013D82  0012               	return	
 28211  013D84                     
 28212                           ;Port.c: 266: pValue &= 1;
 28213  013D84  0E01               	movlw	1
 28214  013D86  0100               	movlb	0	; () banked
 28215  013D88  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28216                           
 28217                           ; BSR set to: 0
 28218                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28219  013D8A  0100               	movlb	0	; () banked
 28220  013D8C  EE20 F004          	lfsr	2,4
 28221  013D90  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28222  013D92  26D9               	addwf	fsr2l,f,c
 28223  013D94  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28224  013D96  22DA               	addwfc	fsr2h,f,c
 28225  013D98  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28226  013D9C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28227  013DA0  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28228  013DA4  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28229  013DA8  EC59  F0AB         	call	_Byte_SetBit	;wreg free
 28230                           
 28231                           ;Port.c: 269: }
 28232                           
 28233                           ;Port.c: 268: break;
 28234  013DAC  0012               	return	
 28235  013DAE                     l427:
 28236  013DAE  0100               	movlb	0	; () banked
 28237  013DB0  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28238                           
 28239                           ; Switch size 1, requested type "space"
 28240                           ; Number of cases is 4, Range of values is 0 to 3
 28241                           ; switch strategies available:
 28242                           ; Name         Instructions Cycles
 28243                           ; simple_byte           13     7 (average)
 28244                           ;	Chosen strategy is simple_byte
 28245  013DB2  0A00               	xorlw	0	; case 0
 28246  013DB4  B4D8               	btfsc	status,2,c
 28247  013DB6  0012               	return	
 28248  013DB8  0A01               	xorlw	1	; case 1
 28249  013DBA  B4D8               	btfsc	status,2,c
 28250  013DBC  D7B6               	goto	l430
 28251  013DBE  0A03               	xorlw	3	; case 2
 28252  013DC0  B4D8               	btfsc	status,2,c
 28253  013DC2  D7C8               	goto	l432
 28254  013DC4  0A01               	xorlw	1	; case 3
 28255  013DC6  A4D8               	btfss	status,2,c
 28256  013DC8  0012               	return	
 28257  013DCA  D7DC               	goto	l433
 28258  013DCC                     __end_of_Port_SetPin:
 28259                           	opt stack 0
 28260                           tosu	equ	0xFFF
 28261                           tosh	equ	0xFFE
 28262                           tosl	equ	0xFFD
 28263                           pclath	equ	0xFFA
 28264                           tblptru	equ	0xFF8
 28265                           tblptrh	equ	0xFF7
 28266                           tblptrl	equ	0xFF6
 28267                           tablat	equ	0xFF5
 28268                           prodh	equ	0xFF4
 28269                           prodl	equ	0xFF3
 28270                           intcon	equ	0xFF2
 28271                           postinc0	equ	0xFEE
 28272                           wreg	equ	0xFE8
 28273                           indf1	equ	0xFE7
 28274                           postdec1	equ	0xFE5
 28275                           fsr1h	equ	0xFE2
 28276                           fsr1l	equ	0xFE1
 28277                           indf2	equ	0xFDF
 28278                           postinc2	equ	0xFDE
 28279                           postdec2	equ	0xFDD
 28280                           plusw2	equ	0xFDB
 28281                           fsr2h	equ	0xFDA
 28282                           fsr2l	equ	0xFD9
 28283                           status	equ	0xFD8
 28284                           
 28285 ;; *************** function _Word_GetPair *****************
 28286 ;; Defined at:
 28287 ;;		line 156 in file "Library/Types.c"
 28288 ;; Parameters:    Size  Location     Type
 28289 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28290 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28291 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28292 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28293 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28294 ;;  pPair           1   14[BANK0 ] unsigned char 
 28295 ;; Auto vars:     Size  Location     Type
 28296 ;;		None
 28297 ;; Return value:  Size  Location     Type
 28298 ;;                  1    wreg      unsigned char 
 28299 ;; Registers used:
 28300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28301 ;; Tracked objects:
 28302 ;;		On entry : 0/0
 28303 ;;		On exit  : 0/0
 28304 ;;		Unchanged: 0/0
 28305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28306 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28309 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28310 ;;Total ram usage:        3 bytes
 28311 ;; Hardware stack levels used:    1
 28312 ;; Hardware stack levels required when called:    9
 28313 ;; This function calls:
 28314 ;;		_Byte_GetPair
 28315 ;; This function is called by:
 28316 ;;		_Port_Init
 28317 ;;		_Port_SetPin
 28318 ;;		_Port_Set
 28319 ;;		_PortProperty_Valid
 28320 ;;		_Port_SetPair
 28321 ;;		_Port_SetQuad
 28322 ;; This function uses a non-reentrant model
 28323 ;;
 28324                           
 28325                           	psect	text151
 28326  015E7C                     __ptext151:
 28327                           	opt stack 0
 28328  015E7C                     _Word_GetPair:
 28329                           	opt stack 13
 28330                           
 28331                           ;Types.c: 158: if (pPair >= 4)
 28332                           
 28333                           ;incstack = 0
 28334  015E7C  0E03               	movlw	3
 28335  015E7E  0100               	movlb	0	; () banked
 28336  015E80  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28337  015E82  D012               	goto	l781
 28338                           
 28339                           ; BSR set to: 0
 28340                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28341  015E84  0E01               	movlw	1
 28342  015E86  0100               	movlb	0	; () banked
 28343  015E88  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 28344  015E8A  0100               	movlb	0	; () banked
 28345  015E8C  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 28346  015E8E  0E00               	movlw	0
 28347  015E90  0100               	movlb	0	; () banked
 28348  015E92  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28349  015E94  0100               	movlb	0	; () banked
 28350  015E96  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28351  015E98  0100               	movlb	0	; () banked
 28352  015E9A  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 28353  015E9C  0FFC               	addlw	252
 28354  015E9E  0100               	movlb	0	; () banked
 28355  015EA0  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 28356  015EA2  EC91  F0B1         	call	_Byte_GetPair	;wreg free
 28357  015EA6  0012               	return	
 28358  015EA8                     l781:
 28359                           
 28360                           ;Types.c: 160: else
 28361                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28362  015EA8  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28363  015EAC  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28364  015EB0  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28365  015EB4  EC91  F0B1         	call	_Byte_GetPair	;wreg free
 28366  015EB8  0012               	return	
 28367  015EBA                     __end_of_Word_GetPair:
 28368                           	opt stack 0
 28369                           tosu	equ	0xFFF
 28370                           tosh	equ	0xFFE
 28371                           tosl	equ	0xFFD
 28372                           pclath	equ	0xFFA
 28373                           tblptru	equ	0xFF8
 28374                           tblptrh	equ	0xFF7
 28375                           tblptrl	equ	0xFF6
 28376                           tablat	equ	0xFF5
 28377                           prodh	equ	0xFF4
 28378                           prodl	equ	0xFF3
 28379                           intcon	equ	0xFF2
 28380                           postinc0	equ	0xFEE
 28381                           wreg	equ	0xFE8
 28382                           indf1	equ	0xFE7
 28383                           postdec1	equ	0xFE5
 28384                           fsr1h	equ	0xFE2
 28385                           fsr1l	equ	0xFE1
 28386                           indf2	equ	0xFDF
 28387                           postinc2	equ	0xFDE
 28388                           postdec2	equ	0xFDD
 28389                           plusw2	equ	0xFDB
 28390                           fsr2h	equ	0xFDA
 28391                           fsr2l	equ	0xFD9
 28392                           status	equ	0xFD8
 28393                           
 28394 ;; *************** function _Byte_GetPair *****************
 28395 ;; Defined at:
 28396 ;;		line 87 in file "Library/Types.c"
 28397 ;; Parameters:    Size  Location     Type
 28398 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28399 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28400 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28401 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28402 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28403 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28404 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28405 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28406 ;;		 -> NULL(0), 
 28407 ;;  pPair           1   11[BANK0 ] unsigned char 
 28408 ;; Auto vars:     Size  Location     Type
 28409 ;;		None
 28410 ;; Return value:  Size  Location     Type
 28411 ;;                  1    wreg      unsigned char 
 28412 ;; Registers used:
 28413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28414 ;; Tracked objects:
 28415 ;;		On entry : 0/0
 28416 ;;		On exit  : 0/0
 28417 ;;		Unchanged: 0/0
 28418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28419 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28422 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28423 ;;Total ram usage:        3 bytes
 28424 ;; Hardware stack levels used:    1
 28425 ;; Hardware stack levels required when called:    8
 28426 ;; This function calls:
 28427 ;;		_Byte_GetZone
 28428 ;; This function is called by:
 28429 ;;		_Word_GetPair
 28430 ;; This function uses a non-reentrant model
 28431 ;;
 28432                           
 28433                           	psect	text152
 28434  016322                     __ptext152:
 28435                           	opt stack 0
 28436  016322                     _Byte_GetPair:
 28437                           	opt stack 13
 28438                           
 28439                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28440                           
 28441                           ;incstack = 0
 28442  016322  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28443  016326  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28444  01632A  0E04               	movlw	4
 28445  01632C  0100               	movlb	0	; () banked
 28446  01632E  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 28447  016330  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28448  016334  0E02               	movlw	2
 28449  016336  0100               	movlb	0	; () banked
 28450  016338  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28451  01633A  EC19  F0A5         	call	_Byte_GetZone	;wreg free
 28452  01633E  0012               	return	
 28453  016340                     __end_of_Byte_GetPair:
 28454                           	opt stack 0
 28455                           tosu	equ	0xFFF
 28456                           tosh	equ	0xFFE
 28457                           tosl	equ	0xFFD
 28458                           pclath	equ	0xFFA
 28459                           tblptru	equ	0xFF8
 28460                           tblptrh	equ	0xFF7
 28461                           tblptrl	equ	0xFF6
 28462                           tablat	equ	0xFF5
 28463                           prodh	equ	0xFF4
 28464                           prodl	equ	0xFF3
 28465                           intcon	equ	0xFF2
 28466                           postinc0	equ	0xFEE
 28467                           wreg	equ	0xFE8
 28468                           indf1	equ	0xFE7
 28469                           postdec1	equ	0xFE5
 28470                           fsr1h	equ	0xFE2
 28471                           fsr1l	equ	0xFE1
 28472                           indf2	equ	0xFDF
 28473                           postinc2	equ	0xFDE
 28474                           postdec2	equ	0xFDD
 28475                           plusw2	equ	0xFDB
 28476                           fsr2h	equ	0xFDA
 28477                           fsr2l	equ	0xFD9
 28478                           status	equ	0xFD8
 28479                           
 28480 ;; *************** function _Byte_GetZone *****************
 28481 ;; Defined at:
 28482 ;;		line 64 in file "Library/Types.c"
 28483 ;; Parameters:    Size  Location     Type
 28484 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28485 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28486 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28487 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28488 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28489 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28490 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28491 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28492 ;;		 -> NULL(0), 
 28493 ;;  pMax            1    2[BANK0 ] unsigned char 
 28494 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28495 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28496 ;; Auto vars:     Size  Location     Type
 28497 ;;  Output          1    8[BANK0 ] unsigned char 
 28498 ;;  Offset          1    7[BANK0 ] unsigned char 
 28499 ;;  MASK            1    6[BANK0 ] unsigned char 
 28500 ;; Return value:  Size  Location     Type
 28501 ;;                  1    wreg      unsigned char 
 28502 ;; Registers used:
 28503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28504 ;; Tracked objects:
 28505 ;;		On entry : 0/0
 28506 ;;		On exit  : 0/0
 28507 ;;		Unchanged: 0/0
 28508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28509 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28510 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28512 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28513 ;;Total ram usage:        9 bytes
 28514 ;; Hardware stack levels used:    1
 28515 ;; Hardware stack levels required when called:    7
 28516 ;; This function calls:
 28517 ;;		Nothing
 28518 ;; This function is called by:
 28519 ;;		_Byte_GetPair
 28520 ;;		_Byte_GetTriple
 28521 ;;		_Byte_GetQuad
 28522 ;; This function uses a non-reentrant model
 28523 ;;
 28524                           
 28525                           	psect	text153
 28526  014A32                     __ptext153:
 28527                           	opt stack 0
 28528  014A32                     _Byte_GetZone:
 28529                           	opt stack 13
 28530                           
 28531                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28532                           
 28533                           ;incstack = 0
 28534  014A32  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28535  014A36  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28536  014A3A  0E00               	movlw	low (__mediumconst shr (0+16))
 28537  014A3C  6EF8               	movwf	tblptru,c
 28538  014A3E  0E0F               	movlw	(high __ramtop+-1)
 28539  014A40  64F7               	cpfsgt	tblptrh,c
 28540  014A42  D003               	bra	u8567
 28541  014A44  0008               	tblrd		*
 28542  014A46  50F5               	movf	tablat,w,c
 28543  014A48  D005               	bra	u8560
 28544  014A4A                     u8567:
 28545  014A4A  CFF6 FFE9          	movff	tblptrl,fsr0l
 28546  014A4E  CFF7 FFEA          	movff	tblptrh,fsr0h
 28547  014A52  50EF               	movf	indf0,w,c
 28548  014A54                     u8560:
 28549  014A54  0100               	movlb	0	; () banked
 28550  014A56  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 28551                           
 28552                           ; BSR set to: 0
 28553                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28554  014A58  0100               	movlb	0	; () banked
 28555  014A5A  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28556  014A5C  0D01               	mullw	1
 28557  014A5E  0E5B               	movlw	low _MASKS
 28558  014A60  24F3               	addwf	prodl,w,c
 28559  014A62  6EF6               	movwf	tblptrl,c
 28560  014A64  0EFD               	movlw	high _MASKS
 28561  014A66  20F4               	addwfc	prodh,w,c
 28562  014A68  6EF7               	movwf	tblptrh,c
 28563  014A6A                     	if	1	;There are 3 active tblptr bytes
 28564  014A6A  6AF8               	clrf	tblptru,c
 28565  014A6C  0E00               	movlw	low (__mediumconst shr (0+16))
 28566  014A6E  22F8               	addwfc	tblptru,f,c
 28567  014A70                     	endif
 28568  014A70  0008               	tblrd		*
 28569  014A72  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 28570                           
 28571                           ; BSR set to: 0
 28572                           ;Types.c: 68: UINT8 Offset = 0;
 28573  014A76  0E00               	movlw	0
 28574  014A78  0100               	movlb	0	; () banked
 28575  014A7A  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 28576                           
 28577                           ;Types.c: 70: while (pChunk >= pMax)
 28578  014A7C  D006               	goto	l732
 28579  014A7E                     
 28580                           ; BSR set to: 0
 28581                           ;Types.c: 71: {
 28582                           ;Types.c: 72: pChunk -= pMax;
 28583                           
 28584                           ; BSR set to: 0
 28585  014A7E  0100               	movlb	0	; () banked
 28586  014A80  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28587  014A82  0100               	movlb	0	; () banked
 28588  014A84  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28589                           
 28590                           ; BSR set to: 0
 28591                           ;Types.c: 73: Offset += 1;
 28592  014A86  0100               	movlb	0	; () banked
 28593  014A88  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 28594  014A8A                     l732:
 28595                           
 28596                           ; BSR set to: 0
 28597                           
 28598                           ; BSR set to: 0
 28599  014A8A  0100               	movlb	0	; () banked
 28600  014A8C  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28601  014A8E  0100               	movlb	0	; () banked
 28602  014A90  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28603  014A92  B0D8               	btfsc	status,0,c
 28604  014A94  D7F4               	goto	l733
 28605                           
 28606                           ; BSR set to: 0
 28607                           ;Types.c: 74: }
 28608                           ;Types.c: 75: pChunk *= pChunkSize;
 28609                           
 28610                           ; BSR set to: 0
 28611  014A96  0100               	movlb	0	; () banked
 28612  014A98  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28613  014A9A  0100               	movlb	0	; () banked
 28614  014A9C  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28615  014A9E  50F3               	movf	prodl,w,c
 28616  014AA0  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 28617                           
 28618                           ; BSR set to: 0
 28619                           ;Types.c: 76: pChunk += Offset;
 28620  014AA2  0100               	movlb	0	; () banked
 28621  014AA4  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 28622  014AA6  0100               	movlb	0	; () banked
 28623  014AA8  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28624                           
 28625                           ; BSR set to: 0
 28626                           ;Types.c: 78: Output >>= pChunk;
 28627  014AAA  0100               	movlb	0	; () banked
 28628  014AAC  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28629  014AAE  0100               	movlb	0	; () banked
 28630  014AB0  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 28631  014AB2  D003               	goto	u8580
 28632  014AB4                     u8585:
 28633  014AB4  0100               	movlb	0	; () banked
 28634  014AB6  90D8               	bcf	status,0,c
 28635  014AB8  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28636  014ABA                     u8580:
 28637  014ABA  0100               	movlb	0	; () banked
 28638  014ABC  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 28639  014ABE  D7FA               	goto	u8585
 28640                           
 28641                           ;Types.c: 79: Output &= MASK;
 28642  014AC0  0100               	movlb	0	; () banked
 28643  014AC2  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 28644  014AC4  0100               	movlb	0	; () banked
 28645  014AC6  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 28646                           
 28647                           ; BSR set to: 0
 28648                           ;Types.c: 80: return Output;
 28649  014AC8  0100               	movlb	0	; () banked
 28650  014ACA  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 28651  014ACC  0012               	return	
 28652  014ACE                     __end_of_Byte_GetZone:
 28653                           	opt stack 0
 28654                           tosu	equ	0xFFF
 28655                           tosh	equ	0xFFE
 28656                           tosl	equ	0xFFD
 28657                           pclath	equ	0xFFA
 28658                           tblptru	equ	0xFF8
 28659                           tblptrh	equ	0xFF7
 28660                           tblptrl	equ	0xFF6
 28661                           tablat	equ	0xFF5
 28662                           prodh	equ	0xFF4
 28663                           prodl	equ	0xFF3
 28664                           intcon	equ	0xFF2
 28665                           indf0	equ	0xFEF
 28666                           postinc0	equ	0xFEE
 28667                           fsr0h	equ	0xFEA
 28668                           fsr0l	equ	0xFE9
 28669                           wreg	equ	0xFE8
 28670                           indf1	equ	0xFE7
 28671                           postdec1	equ	0xFE5
 28672                           fsr1h	equ	0xFE2
 28673                           fsr1l	equ	0xFE1
 28674                           indf2	equ	0xFDF
 28675                           postinc2	equ	0xFDE
 28676                           postdec2	equ	0xFDD
 28677                           plusw2	equ	0xFDB
 28678                           fsr2h	equ	0xFDA
 28679                           fsr2l	equ	0xFD9
 28680                           status	equ	0xFD8
 28681                           
 28682 ;; *************** function _Byte_SetBit *****************
 28683 ;; Defined at:
 28684 ;;		line 32 in file "Library/Types.c"
 28685 ;; Parameters:    Size  Location     Type
 28686 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28687 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28688 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28689 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28690 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28691 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28692 ;;		 -> NULL(0), 
 28693 ;;  pBit            1    2[BANK0 ] unsigned char 
 28694 ;;  pValue          1    3[BANK0 ] unsigned char 
 28695 ;; Auto vars:     Size  Location     Type
 28696 ;;		None
 28697 ;; Return value:  Size  Location     Type
 28698 ;;                  1    wreg      void 
 28699 ;; Registers used:
 28700 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28701 ;; Tracked objects:
 28702 ;;		On entry : 0/0
 28703 ;;		On exit  : 0/0
 28704 ;;		Unchanged: 0/0
 28705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28706 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28708 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28709 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28710 ;;Total ram usage:        7 bytes
 28711 ;; Hardware stack levels used:    1
 28712 ;; Hardware stack levels required when called:    7
 28713 ;; This function calls:
 28714 ;;		Nothing
 28715 ;; This function is called by:
 28716 ;;		_Port_SetPinType
 28717 ;;		_Port_SetPin
 28718 ;;		_SPI_Init
 28719 ;;		_SPI_MinSpeed
 28720 ;;		_SPI_MaxSpeed
 28721 ;;		_Word_SetBit
 28722 ;;		_I2C_Init
 28723 ;; This function uses a non-reentrant model
 28724 ;;
 28725                           
 28726                           	psect	text154
 28727  0156B2                     __ptext154:
 28728                           	opt stack 0
 28729  0156B2                     _Byte_SetBit:
 28730                           	opt stack 15
 28731                           
 28732                           ;Types.c: 34: pValue &= 1;
 28733                           
 28734                           ; BSR set to: 0
 28735                           ;incstack = 0
 28736  0156B2  0E01               	movlw	1
 28737  0156B4  0100               	movlb	0	; () banked
 28738  0156B6  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 28739                           
 28740                           ; BSR set to: 0
 28741                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28742  0156B8  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28743  0156BC  0E01               	movlw	1
 28744  0156BE  0100               	movlb	0	; () banked
 28745  0156C0  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 28746  0156C2  0100               	movlb	0	; () banked
 28747  0156C4  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 28748  0156C6  D003               	goto	u8604
 28749  0156C8                     u8605:
 28750  0156C8  0100               	movlb	0	; () banked
 28751  0156CA  90D8               	bcf	status,0,c
 28752  0156CC  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28753  0156CE                     u8604:
 28754  0156CE  0100               	movlb	0	; () banked
 28755  0156D0  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 28756  0156D2  D7FA               	goto	u8605
 28757  0156D4  0100               	movlb	0	; () banked
 28758  0156D6  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28759  0156D8  0AFF               	xorlw	255
 28760  0156DA  0100               	movlb	0	; () banked
 28761  0156DC  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 28762  0156DE  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28763  0156E2  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28764  0156E6  0100               	movlb	0	; () banked
 28765  0156E8  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 28766  0156EA  16DF               	andwf	indf2,f,c
 28767                           
 28768                           ; BSR set to: 0
 28769                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28770  0156EC  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28771  0156F0  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 28772  0156F4  0100               	movlb	0	; () banked
 28773  0156F6  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 28774  0156F8  D003               	goto	u8614
 28775  0156FA                     u8615:
 28776  0156FA  0100               	movlb	0	; () banked
 28777  0156FC  90D8               	bcf	status,0,c
 28778  0156FE  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28779  015700                     u8614:
 28780  015700  0100               	movlb	0	; () banked
 28781  015702  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 28782  015704  D7FA               	goto	u8615
 28783  015706  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28784  01570A  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28785  01570E  0100               	movlb	0	; () banked
 28786  015710  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28787  015712  12DF               	iorwf	indf2,f,c
 28788                           
 28789                           ; BSR set to: 0
 28790  015714  0012               	return		;funcret
 28791  015716                     __end_of_Byte_SetBit:
 28792                           	opt stack 0
 28793                           tosu	equ	0xFFF
 28794                           tosh	equ	0xFFE
 28795                           tosl	equ	0xFFD
 28796                           pclath	equ	0xFFA
 28797                           tblptru	equ	0xFF8
 28798                           tblptrh	equ	0xFF7
 28799                           tblptrl	equ	0xFF6
 28800                           tablat	equ	0xFF5
 28801                           prodh	equ	0xFF4
 28802                           prodl	equ	0xFF3
 28803                           intcon	equ	0xFF2
 28804                           indf0	equ	0xFEF
 28805                           postinc0	equ	0xFEE
 28806                           fsr0h	equ	0xFEA
 28807                           fsr0l	equ	0xFE9
 28808                           wreg	equ	0xFE8
 28809                           indf1	equ	0xFE7
 28810                           postdec1	equ	0xFE5
 28811                           fsr1h	equ	0xFE2
 28812                           fsr1l	equ	0xFE1
 28813                           indf2	equ	0xFDF
 28814                           postinc2	equ	0xFDE
 28815                           postdec2	equ	0xFDD
 28816                           plusw2	equ	0xFDB
 28817                           fsr2h	equ	0xFDA
 28818                           fsr2l	equ	0xFD9
 28819                           status	equ	0xFD8
 28820                           
 28821 ;; *************** function _Port_GetPin *****************
 28822 ;; Defined at:
 28823 ;;		line 271 in file "Library/Port.c"
 28824 ;; Parameters:    Size  Location     Type
 28825 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28826 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28827 ;;  pPin            1    2[BANK0 ] enum E6750
 28828 ;; Auto vars:     Size  Location     Type
 28829 ;;  Output          1    5[BANK0 ] unsigned char 
 28830 ;; Return value:  Size  Location     Type
 28831 ;;                  1    wreg      unsigned char 
 28832 ;; Registers used:
 28833 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28834 ;; Tracked objects:
 28835 ;;		On entry : 0/0
 28836 ;;		On exit  : 0/0
 28837 ;;		Unchanged: 0/0
 28838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28839 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28842 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28843 ;;Total ram usage:        6 bytes
 28844 ;; Hardware stack levels used:    1
 28845 ;; Hardware stack levels required when called:    7
 28846 ;; This function calls:
 28847 ;;		Nothing
 28848 ;; This function is called by:
 28849 ;;		_Port_TogglePin
 28850 ;;		_HMI_LeftSwitch
 28851 ;;		_HMI_RightSwitch
 28852 ;;		_HMI_UpSwitch
 28853 ;;		_HMI_DownSwitch
 28854 ;;		_MXK_TestButton
 28855 ;; This function uses a non-reentrant model
 28856 ;;
 28857                           
 28858                           	psect	text155
 28859  015C76                     __ptext155:
 28860                           	opt stack 0
 28861  015C76                     _Port_GetPin:
 28862                           	opt stack 18
 28863                           
 28864                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28865                           
 28866                           ; BSR set to: 0
 28867                           ;incstack = 0
 28868  015C76  0100               	movlb	0	; () banked
 28869  015C78  EE20 F006          	lfsr	2,6
 28870  015C7C  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 28871  015C7E  26D9               	addwf	fsr2l,f,c
 28872  015C80  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28873  015C82  22DA               	addwfc	fsr2h,f,c
 28874  015C84  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 28875  015C88  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 28876  015C8C  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 28877  015C90  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28878  015C94  50DF               	movf	indf2,w,c
 28879  015C96  0100               	movlb	0	; () banked
 28880  015C98  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 28881                           
 28882                           ; BSR set to: 0
 28883                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28884  015C9A  0100               	movlb	0	; () banked
 28885  015C9C  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 28886  015C9E  0100               	movlb	0	; () banked
 28887  015CA0  6FBD               	movwf	??_Port_GetPin& (0+255),b
 28888  015CA2  D003               	goto	u8650
 28889  015CA4                     u8655:
 28890  015CA4  0100               	movlb	0	; () banked
 28891  015CA6  90D8               	bcf	status,0,c
 28892  015CA8  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 28893  015CAA                     u8650:
 28894  015CAA  0100               	movlb	0	; () banked
 28895  015CAC  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 28896  015CAE  D7FA               	goto	u8655
 28897                           
 28898                           ;Port.c: 275: Output &= 1;
 28899  015CB0  0E01               	movlw	1
 28900  015CB2  0100               	movlb	0	; () banked
 28901  015CB4  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 28902                           
 28903                           ; BSR set to: 0
 28904                           ;Port.c: 276: return Output;
 28905  015CB6  0100               	movlb	0	; () banked
 28906  015CB8  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 28907  015CBA  0012               	return	
 28908  015CBC                     __end_of_Port_GetPin:
 28909                           	opt stack 0
 28910                           tosu	equ	0xFFF
 28911                           tosh	equ	0xFFE
 28912                           tosl	equ	0xFFD
 28913                           pclath	equ	0xFFA
 28914                           tblptru	equ	0xFF8
 28915                           tblptrh	equ	0xFF7
 28916                           tblptrl	equ	0xFF6
 28917                           tablat	equ	0xFF5
 28918                           prodh	equ	0xFF4
 28919                           prodl	equ	0xFF3
 28920                           intcon	equ	0xFF2
 28921                           indf0	equ	0xFEF
 28922                           postinc0	equ	0xFEE
 28923                           fsr0h	equ	0xFEA
 28924                           fsr0l	equ	0xFE9
 28925                           wreg	equ	0xFE8
 28926                           indf1	equ	0xFE7
 28927                           postdec1	equ	0xFE5
 28928                           fsr1h	equ	0xFE2
 28929                           fsr1l	equ	0xFE1
 28930                           indf2	equ	0xFDF
 28931                           postinc2	equ	0xFDE
 28932                           postdec2	equ	0xFDD
 28933                           plusw2	equ	0xFDB
 28934                           fsr2h	equ	0xFDA
 28935                           fsr2l	equ	0xFD9
 28936                           status	equ	0xFD8
 28937                           
 28938 ;; *************** function _HMI_SetBar *****************
 28939 ;; Defined at:
 28940 ;;		line 205 in file "HMI.c"
 28941 ;; Parameters:    Size  Location     Type
 28942 ;;  pValue          1    wreg     unsigned char 
 28943 ;; Auto vars:     Size  Location     Type
 28944 ;;  pValue          1    0[BANK0 ] unsigned char 
 28945 ;; Return value:  Size  Location     Type
 28946 ;;                  1    wreg      void 
 28947 ;; Registers used:
 28948 ;;		wreg
 28949 ;; Tracked objects:
 28950 ;;		On entry : 0/0
 28951 ;;		On exit  : 0/0
 28952 ;;		Unchanged: 0/0
 28953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28958 ;;Total ram usage:        1 bytes
 28959 ;; Hardware stack levels used:    1
 28960 ;; Hardware stack levels required when called:    7
 28961 ;; This function calls:
 28962 ;;		Nothing
 28963 ;; This function is called by:
 28964 ;;		_Event_DIPSwitch
 28965 ;;		_Event_HMI_DIPSwitch
 28966 ;;		_Event_HMI_LeftButton
 28967 ;;		_Event_HMI_RightButton
 28968 ;; This function uses a non-reentrant model
 28969 ;;
 28970                           
 28971                           	psect	text156
 28972  01657A                     __ptext156:
 28973                           	opt stack 0
 28974  01657A                     _HMI_SetBar:
 28975                           	opt stack 18
 28976                           
 28977                           ; BSR set to: 0
 28978                           ;incstack = 0
 28979                           ;HMI_SetBar@pValue stored from wreg
 28980  01657A  0100               	movlb	0	; () banked
 28981  01657C  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 28982                           
 28983                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 28984  01657E  C0BA  F343         	movff	HMI_SetBar@pValue,_HMIBoard+7
 28985  016582  0012               	return		;funcret
 28986  016584                     __end_of_HMI_SetBar:
 28987                           	opt stack 0
 28988                           tosu	equ	0xFFF
 28989                           tosh	equ	0xFFE
 28990                           tosl	equ	0xFFD
 28991                           pclath	equ	0xFFA
 28992                           tblptru	equ	0xFF8
 28993                           tblptrh	equ	0xFF7
 28994                           tblptrl	equ	0xFF6
 28995                           tablat	equ	0xFF5
 28996                           prodh	equ	0xFF4
 28997                           prodl	equ	0xFF3
 28998                           intcon	equ	0xFF2
 28999                           indf0	equ	0xFEF
 29000                           postinc0	equ	0xFEE
 29001                           fsr0h	equ	0xFEA
 29002                           fsr0l	equ	0xFE9
 29003                           wreg	equ	0xFE8
 29004                           indf1	equ	0xFE7
 29005                           postdec1	equ	0xFE5
 29006                           fsr1h	equ	0xFE2
 29007                           fsr1l	equ	0xFE1
 29008                           indf2	equ	0xFDF
 29009                           postinc2	equ	0xFDE
 29010                           postdec2	equ	0xFDD
 29011                           plusw2	equ	0xFDB
 29012                           fsr2h	equ	0xFDA
 29013                           fsr2l	equ	0xFD9
 29014                           status	equ	0xFD8
 29015                           
 29016 ;; *************** function _HMI_GetBar *****************
 29017 ;; Defined at:
 29018 ;;		line 209 in file "HMI.c"
 29019 ;; Parameters:    Size  Location     Type
 29020 ;;		None
 29021 ;; Auto vars:     Size  Location     Type
 29022 ;;		None
 29023 ;; Return value:  Size  Location     Type
 29024 ;;                  1    wreg      unsigned char 
 29025 ;; Registers used:
 29026 ;;		wreg, status,2
 29027 ;; Tracked objects:
 29028 ;;		On entry : 0/0
 29029 ;;		On exit  : 0/0
 29030 ;;		Unchanged: 0/0
 29031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29036 ;;Total ram usage:        0 bytes
 29037 ;; Hardware stack levels used:    1
 29038 ;; Hardware stack levels required when called:    7
 29039 ;; This function calls:
 29040 ;;		Nothing
 29041 ;; This function is called by:
 29042 ;;		_Event_DIPSwitch
 29043 ;;		_Event_HMI_DIPSwitch
 29044 ;; This function uses a non-reentrant model
 29045 ;;
 29046                           
 29047                           	psect	text157
 29048  0165B6                     __ptext157:
 29049                           	opt stack 0
 29050  0165B6                     _HMI_GetBar:
 29051                           	opt stack 18
 29052                           
 29053                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29054                           
 29055                           ;incstack = 0
 29056  0165B6  0103               	movlb	3	; () banked
 29057  0165B8  5143               	movf	(_HMIBoard+7)& (0+255),w,b
 29058  0165BA  0012               	return	
 29059  0165BC                     __end_of_HMI_GetBar:
 29060                           	opt stack 0
 29061                           tosu	equ	0xFFF
 29062                           tosh	equ	0xFFE
 29063                           tosl	equ	0xFFD
 29064                           pclath	equ	0xFFA
 29065                           tblptru	equ	0xFF8
 29066                           tblptrh	equ	0xFF7
 29067                           tblptrl	equ	0xFF6
 29068                           tablat	equ	0xFF5
 29069                           prodh	equ	0xFF4
 29070                           prodl	equ	0xFF3
 29071                           intcon	equ	0xFF2
 29072                           indf0	equ	0xFEF
 29073                           postinc0	equ	0xFEE
 29074                           fsr0h	equ	0xFEA
 29075                           fsr0l	equ	0xFE9
 29076                           wreg	equ	0xFE8
 29077                           indf1	equ	0xFE7
 29078                           postdec1	equ	0xFE5
 29079                           fsr1h	equ	0xFE2
 29080                           fsr1l	equ	0xFE1
 29081                           indf2	equ	0xFDF
 29082                           postinc2	equ	0xFDE
 29083                           postdec2	equ	0xFDD
 29084                           plusw2	equ	0xFDB
 29085                           fsr2h	equ	0xFDA
 29086                           fsr2l	equ	0xFD9
 29087                           status	equ	0xFD8
 29088                           
 29089 ;; *************** function _ISR_Function *****************
 29090 ;; Defined at:
 29091 ;;		line 38 in file "Library/ISR.c"
 29092 ;; Parameters:    Size  Location     Type
 29093 ;;		None
 29094 ;; Auto vars:     Size  Location     Type
 29095 ;;		None
 29096 ;; Return value:  Size  Location     Type
 29097 ;;                  1    wreg      void 
 29098 ;; Registers used:
 29099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29100 ;; Tracked objects:
 29101 ;;		On entry : 0/0
 29102 ;;		On exit  : 0/0
 29103 ;;		Unchanged: 0/0
 29104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29107 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29108 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29109 ;;Total ram usage:       18 bytes
 29110 ;; Hardware stack levels used:    1
 29111 ;; Hardware stack levels required when called:    6
 29112 ;; This function calls:
 29113 ;;		_Timer0_ISR
 29114 ;; This function is called by:
 29115 ;;		Interrupt level 2
 29116 ;; This function uses a non-reentrant model
 29117 ;;
 29118                           
 29119                           	psect	intcode
 29120  001408                     __pintcode:
 29121                           	opt stack 0
 29122  001408                     _ISR_Function:
 29123                           	opt stack 13
 29124                           
 29125                           ; BSR set to: 3
 29126                           ;incstack = 0
 29127  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29128  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29129  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29130  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29131  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29132  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29133  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29134  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29135  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29136  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29137  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29138  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29139  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29140  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29141  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29142  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29143  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29144  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29145  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29146                           
 29147                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29148  001452  92F2               	bcf	intcon,1,c	;volatile
 29149                           
 29150                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29151  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29152  001456  AAF2               	btfss	intcon,5,c	;volatile
 29153  001458  D002               	goto	i2l1590
 29154                           
 29155                           ;ISR.c: 68: Timer0_ISR();
 29156  00145A  EC7D  F0B0         	call	_Timer0_ISR	;wreg free
 29157  00145E                     i2l1590:
 29158  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29159  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29160  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29161  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29162  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29163  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29164  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29165  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29166  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29167  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29168  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29169  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29170  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29171  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29172  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29173  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29174  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29175  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29176  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29177  0014A8  0011               	retfie		f
 29178  0014AA                     __end_of_ISR_Function:
 29179                           	opt stack 0
 29180                           tosu	equ	0xFFF
 29181                           tosh	equ	0xFFE
 29182                           tosl	equ	0xFFD
 29183                           pclatu	equ	0xFFB
 29184                           pclath	equ	0xFFA
 29185                           tblptru	equ	0xFF8
 29186                           tblptrh	equ	0xFF7
 29187                           tblptrl	equ	0xFF6
 29188                           tablat	equ	0xFF5
 29189                           prodh	equ	0xFF4
 29190                           prodl	equ	0xFF3
 29191                           intcon	equ	0xFF2
 29192                           indf0	equ	0xFEF
 29193                           postinc0	equ	0xFEE
 29194                           fsr0h	equ	0xFEA
 29195                           fsr0l	equ	0xFE9
 29196                           wreg	equ	0xFE8
 29197                           indf1	equ	0xFE7
 29198                           postdec1	equ	0xFE5
 29199                           fsr1h	equ	0xFE2
 29200                           fsr1l	equ	0xFE1
 29201                           indf2	equ	0xFDF
 29202                           postinc2	equ	0xFDE
 29203                           postdec2	equ	0xFDD
 29204                           plusw2	equ	0xFDB
 29205                           fsr2h	equ	0xFDA
 29206                           fsr2l	equ	0xFD9
 29207                           status	equ	0xFD8
 29208                           
 29209 ;; *************** function _Timer0_ISR *****************
 29210 ;; Defined at:
 29211 ;;		line 94 in file "Library/Timer0.c"
 29212 ;; Parameters:    Size  Location     Type
 29213 ;;		None
 29214 ;; Auto vars:     Size  Location     Type
 29215 ;;		None
 29216 ;; Return value:  Size  Location     Type
 29217 ;;                  1    wreg      void 
 29218 ;; Registers used:
 29219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29220 ;; Tracked objects:
 29221 ;;		On entry : 0/0
 29222 ;;		On exit  : 0/0
 29223 ;;		Unchanged: 0/0
 29224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29229 ;;Total ram usage:        0 bytes
 29230 ;; Hardware stack levels used:    1
 29231 ;; Hardware stack levels required when called:    5
 29232 ;; This function calls:
 29233 ;;		Absolute function
 29234 ;;		i2_Motor_Step
 29235 ;;		i2_Timer0_Stop
 29236 ;; This function is called by:
 29237 ;;		_ISR_Function
 29238 ;; This function uses a non-reentrant model
 29239 ;;
 29240                           
 29241                           	psect	text159
 29242  0160FA                     __ptext159:
 29243                           	opt stack 0
 29244  0160FA                     _Timer0_ISR:
 29245                           	opt stack 13
 29246                           
 29247                           ;Timer0.c: 96: Timer0_Stop();
 29248                           
 29249                           ;incstack = 0
 29250  0160FA  ECDE  F0B2         	call	i2_Timer0_Stop	;wreg free
 29251                           
 29252                           ;Timer0.c: 99: if (gISR != 0)
 29253  0160FE  0100               	movlb	0	; () banked
 29254  016100  5160               	movf	_gISR& (0+255),w,b
 29255  016102  0100               	movlb	0	; () banked
 29256  016104  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29257  016106  0100               	movlb	0	; () banked
 29258  016108  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29259  01610A  B4D8               	btfsc	status,2,c
 29260  01610C  0012               	return	
 29261                           
 29262                           ; BSR set to: 0
 29263                           ;Timer0.c: 100: gISR();
 29264  01610E  D801               	call	i2u1332_48
 29265  016110  0012               	return	
 29266  016112                     i2u1332_48:
 29267  016112  0005               	push	
 29268  016114  6EFA               	movwf	pclath,c
 29269  016116  0100               	movlb	0	; () banked
 29270  016118  5160               	movf	_gISR& (0+255),w,b
 29271  01611A  6EFD               	movwf	tosl,c
 29272  01611C  5161               	movf	(_gISR+1)& (0+255),w,b
 29273  01611E  6EFE               	movwf	tosh,c
 29274  016120  5162               	movf	(_gISR+2)& (0+255),w,b
 29275  016122  6EFF               	movwf	tosu,c
 29276  016124  50FA               	movf	pclath,w,c
 29277  016126  0012               	return		;indir
 29278  016128                     __end_of_Timer0_ISR:
 29279                           	opt stack 0
 29280                           tosu	equ	0xFFF
 29281                           tosh	equ	0xFFE
 29282                           tosl	equ	0xFFD
 29283                           pclatu	equ	0xFFB
 29284                           pclath	equ	0xFFA
 29285                           tblptru	equ	0xFF8
 29286                           tblptrh	equ	0xFF7
 29287                           tblptrl	equ	0xFF6
 29288                           tablat	equ	0xFF5
 29289                           prodh	equ	0xFF4
 29290                           prodl	equ	0xFF3
 29291                           intcon	equ	0xFF2
 29292                           indf0	equ	0xFEF
 29293                           postinc0	equ	0xFEE
 29294                           fsr0h	equ	0xFEA
 29295                           fsr0l	equ	0xFE9
 29296                           wreg	equ	0xFE8
 29297                           indf1	equ	0xFE7
 29298                           postdec1	equ	0xFE5
 29299                           fsr1h	equ	0xFE2
 29300                           fsr1l	equ	0xFE1
 29301                           indf2	equ	0xFDF
 29302                           postinc2	equ	0xFDE
 29303                           postdec2	equ	0xFDD
 29304                           plusw2	equ	0xFDB
 29305                           fsr2h	equ	0xFDA
 29306                           fsr2l	equ	0xFD9
 29307                           status	equ	0xFD8
 29308                           
 29309 ;; *************** function i2_Motor_Step *****************
 29310 ;; Defined at:
 29311 ;;		line 75 in file "Library/Motor.c"
 29312 ;; Parameters:    Size  Location     Type
 29313 ;;		None
 29314 ;; Auto vars:     Size  Location     Type
 29315 ;;		None
 29316 ;; Return value:  Size  Location     Type
 29317 ;;                  1    wreg      void 
 29318 ;; Registers used:
 29319 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29320 ;; Tracked objects:
 29321 ;;		On entry : 0/0
 29322 ;;		On exit  : 0/0
 29323 ;;		Unchanged: 0/0
 29324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29327 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29329 ;;Total ram usage:        2 bytes
 29330 ;; Hardware stack levels used:    1
 29331 ;; Hardware stack levels required when called:    4
 29332 ;; This function calls:
 29333 ;;		i2_MXK_Queue
 29334 ;;		i2_MXK_Release
 29335 ;;		i2_MXK_SwitchTo
 29336 ;;		i2_Port_SetPin
 29337 ;;		i2_Timer0_Restart
 29338 ;;		i2_Timer0_Stop
 29339 ;; This function is called by:
 29340 ;; This function uses a non-reentrant model
 29341 ;;
 29342                           
 29343                           	psect	text160
 29344  013528                     __ptext160:
 29345                           	opt stack 0
 29346  013528                     i2_Motor_Step:
 29347                           	opt stack 13
 29348                           
 29349                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29350                           
 29351                           ;incstack = 0
 29352  013528  0100               	movlb	0	; () banked
 29353  01352A  EE20 F004          	lfsr	2,4
 29354  01352E  5181               	movf	_lMotor& (0+255),w,b
 29355  013530  26D9               	addwf	fsr2l,f,c
 29356  013532  5182               	movf	(_lMotor+1)& (0+255),w,b
 29357  013534  22DA               	addwfc	fsr2h,f,c
 29358  013536  50DF               	movf	indf2,w,c
 29359  013538  ECD0  F0AF         	call	i2_MXK_SwitchTo
 29360  01353C  0900               	iorlw	0
 29361  01353E  B4D8               	btfsc	status,2,c
 29362  013540  D06A               	goto	i2l1627
 29363                           
 29364                           ;Motor.c: 78: {
 29365                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29366  013542  C081  FFD9         	movff	_lMotor,fsr2l
 29367  013546  C082  FFDA         	movff	_lMotor+1,fsr2h
 29368  01354A  50DE               	movf	postinc2,w,c
 29369  01354C  10DE               	iorwf	postinc2,w,c
 29370  01354E  B4D8               	btfsc	status,2,c
 29371  013550  D05D               	goto	i2l1628
 29372                           
 29373                           ;Motor.c: 80: {
 29374                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29375  013552  C081  FFD9         	movff	_lMotor,fsr2l
 29376  013556  C082  FFDA         	movff	_lMotor+1,fsr2h
 29377  01355A  0E01               	movlw	1
 29378  01355C  BEDB               	btfsc	plusw2,7,c
 29379  01355E  D022               	goto	i2l1629
 29380  013560  0E01               	movlw	1
 29381  013562  50DB               	movf	plusw2,w,c
 29382  013564  E103               	bnz	i2u723_40
 29383  013566  04DE               	decf	postinc2,w,c
 29384  013568  A0D8               	btfss	status,0,c
 29385  01356A  D01C               	goto	i2l1629
 29386  01356C                     i2u723_40:
 29387                           
 29388                           ;Motor.c: 83: {
 29389                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29390  01356C  C081  FFD9         	movff	_lMotor,fsr2l
 29391  013570  C082  FFDA         	movff	_lMotor+1,fsr2h
 29392  013574  28DE               	incf	postinc2,w,c
 29393  013576  E104               	bnz	i2u724_40
 29394  013578  0E7F               	movlw	127
 29395  01357A  18DE               	xorwf	postinc2,w,c
 29396  01357C  B4D8               	btfsc	status,2,c
 29397  01357E  D007               	goto	i2l1630
 29398  013580                     i2u724_40:
 29399                           
 29400                           ;Motor.c: 85: lMotor->mDelta --;
 29401  013580  C081  FFD9         	movff	_lMotor,fsr2l
 29402  013584  C082  FFDA         	movff	_lMotor+1,fsr2h
 29403  013588  06DE               	decf	postinc2,f,c
 29404  01358A  0E00               	movlw	0
 29405  01358C  5ADD               	subwfb	postdec2,f,c
 29406  01358E                     i2l1630:
 29407                           
 29408                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29409  01358E  0E93               	movlw	low _PortE
 29410  013590  6E10               	movwf	i2Port_SetPin@pInput,c
 29411  013592  0E00               	movlw	high _PortE
 29412  013594  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29413  013596  0E00               	movlw	0
 29414  013598  6E12               	movwf	i2Port_SetPin@pPin,c
 29415  01359A  0E01               	movlw	1
 29416  01359C  6E13               	movwf	i2Port_SetPin@pValue,c
 29417  01359E  ECD5  F0A2         	call	i2_Port_SetPin	;wreg free
 29418                           
 29419                           ;Motor.c: 88: }
 29420  0135A2  D01B               	goto	i2l1631
 29421  0135A4                     i2l1629:
 29422                           
 29423                           ;Motor.c: 89: else
 29424                           ;Motor.c: 90: {
 29425                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29426  0135A4  C081  FFD9         	movff	_lMotor,fsr2l
 29427  0135A8  C082  FFDA         	movff	_lMotor+1,fsr2h
 29428  0135AC  04DE               	decf	postinc2,w,c
 29429  0135AE  E104               	bnz	i2u725_40
 29430  0135B0  0E80               	movlw	128
 29431  0135B2  18DE               	xorwf	postinc2,w,c
 29432  0135B4  B4D8               	btfsc	status,2,c
 29433  0135B6  D007               	goto	i2l1632
 29434  0135B8                     i2u725_40:
 29435                           
 29436                           ;Motor.c: 92: lMotor->mDelta ++;
 29437  0135B8  C081  FFD9         	movff	_lMotor,fsr2l
 29438  0135BC  C082  FFDA         	movff	_lMotor+1,fsr2h
 29439  0135C0  2ADE               	incf	postinc2,f,c
 29440  0135C2  0E00               	movlw	0
 29441  0135C4  22DD               	addwfc	postdec2,f,c
 29442  0135C6                     i2l1632:
 29443                           
 29444                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29445  0135C6  0E93               	movlw	low _PortE
 29446  0135C8  6E10               	movwf	i2Port_SetPin@pInput,c
 29447  0135CA  0E00               	movlw	high _PortE
 29448  0135CC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29449  0135CE  0E00               	movlw	0
 29450  0135D0  6E12               	movwf	i2Port_SetPin@pPin,c
 29451  0135D2  0E00               	movlw	0
 29452  0135D4  6E13               	movwf	i2Port_SetPin@pValue,c
 29453  0135D6  ECD5  F0A2         	call	i2_Port_SetPin	;wreg free
 29454  0135DA                     i2l1631:
 29455                           
 29456                           ;Motor.c: 95: }
 29457                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29458  0135DA  0E93               	movlw	low _PortE
 29459  0135DC  6E10               	movwf	i2Port_SetPin@pInput,c
 29460  0135DE  0E00               	movlw	high _PortE
 29461  0135E0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29462  0135E2  0E01               	movlw	1
 29463  0135E4  6E12               	movwf	i2Port_SetPin@pPin,c
 29464  0135E6  0E01               	movlw	1
 29465  0135E8  6E13               	movwf	i2Port_SetPin@pValue,c
 29466  0135EA  ECD5  F0A2         	call	i2_Port_SetPin	;wreg free
 29467                           
 29468                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29469  0135EE  0E93               	movlw	low _PortE
 29470  0135F0  6E10               	movwf	i2Port_SetPin@pInput,c
 29471  0135F2  0E00               	movlw	high _PortE
 29472  0135F4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29473  0135F6  0E01               	movlw	1
 29474  0135F8  6E12               	movwf	i2Port_SetPin@pPin,c
 29475  0135FA  0E00               	movlw	0
 29476  0135FC  6E13               	movwf	i2Port_SetPin@pValue,c
 29477  0135FE  ECD5  F0A2         	call	i2_Port_SetPin	;wreg free
 29478                           
 29479                           ;Motor.c: 101: MXK_Release();
 29480  013602  ECE1  F0B2         	call	i2_MXK_Release	;wreg free
 29481                           
 29482                           ;Motor.c: 102: Timer0_Restart();
 29483  013606  ECAD  F0B2         	call	i2_Timer0_Restart	;wreg free
 29484                           
 29485                           ;Motor.c: 103: return;
 29486  01360A  0012               	return	
 29487  01360C                     i2l1628:
 29488                           
 29489                           ;Motor.c: 104: }
 29490                           ;Motor.c: 105: MXK_Release();
 29491  01360C  ECE1  F0B2         	call	i2_MXK_Release	;wreg free
 29492                           
 29493                           ;Motor.c: 106: Timer0_Stop();
 29494  013610  ECDE  F0B2         	call	i2_Timer0_Stop	;wreg free
 29495                           
 29496                           ;Motor.c: 107: return;
 29497  013614  0012               	return	
 29498  013616                     i2l1627:
 29499                           
 29500                           ;Motor.c: 108: }
 29501                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29502  013616  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29503  01361A  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29504  01361E  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29505  013622  EC94  F0B2         	call	i2_MXK_Queue	;wreg free
 29506  013626  0012               	return		;funcret
 29507  013628                     __end_ofi2_Motor_Step:
 29508                           	opt stack 0
 29509                           tosu	equ	0xFFF
 29510                           tosh	equ	0xFFE
 29511                           tosl	equ	0xFFD
 29512                           pclatu	equ	0xFFB
 29513                           pclath	equ	0xFFA
 29514                           tblptru	equ	0xFF8
 29515                           tblptrh	equ	0xFF7
 29516                           tblptrl	equ	0xFF6
 29517                           tablat	equ	0xFF5
 29518                           prodh	equ	0xFF4
 29519                           prodl	equ	0xFF3
 29520                           intcon	equ	0xFF2
 29521                           indf0	equ	0xFEF
 29522                           postinc0	equ	0xFEE
 29523                           fsr0h	equ	0xFEA
 29524                           fsr0l	equ	0xFE9
 29525                           wreg	equ	0xFE8
 29526                           indf1	equ	0xFE7
 29527                           postdec1	equ	0xFE5
 29528                           fsr1h	equ	0xFE2
 29529                           fsr1l	equ	0xFE1
 29530                           indf2	equ	0xFDF
 29531                           postinc2	equ	0xFDE
 29532                           postdec2	equ	0xFDD
 29533                           plusw2	equ	0xFDB
 29534                           fsr2h	equ	0xFDA
 29535                           fsr2l	equ	0xFD9
 29536                           status	equ	0xFD8
 29537                           
 29538 ;; *************** function i2_Timer0_Stop *****************
 29539 ;; Defined at:
 29540 ;;		line 89 in file "Library/Timer0.c"
 29541 ;; Parameters:    Size  Location     Type
 29542 ;;		None
 29543 ;; Auto vars:     Size  Location     Type
 29544 ;;		None
 29545 ;; Return value:  Size  Location     Type
 29546 ;;                  1    wreg      void 
 29547 ;; Registers used:
 29548 ;;		None
 29549 ;; Tracked objects:
 29550 ;;		On entry : 0/0
 29551 ;;		On exit  : 0/0
 29552 ;;		Unchanged: 0/0
 29553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29558 ;;Total ram usage:        0 bytes
 29559 ;; Hardware stack levels used:    1
 29560 ;; This function calls:
 29561 ;;		Nothing
 29562 ;; This function is called by:
 29563 ;;		_Timer0_ISR
 29564 ;;		i2_Motor_Step
 29565 ;; This function uses a non-reentrant model
 29566 ;;
 29567                           
 29568                           	psect	text161
 29569  0165BC                     __ptext161:
 29570                           	opt stack 0
 29571  0165BC                     i2_Timer0_Stop:
 29572                           	opt stack 17
 29573                           
 29574                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29575                           
 29576                           ;incstack = 0
 29577  0165BC  9AF2               	bcf	intcon,5,c	;volatile
 29578                           
 29579                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29580  0165BE  94F2               	bcf	intcon,2,c	;volatile
 29581  0165C0  0012               	return		;funcret
 29582  0165C2                     __end_ofi2_Timer0_Stop:
 29583                           	opt stack 0
 29584                           tosu	equ	0xFFF
 29585                           tosh	equ	0xFFE
 29586                           tosl	equ	0xFFD
 29587                           pclatu	equ	0xFFB
 29588                           pclath	equ	0xFFA
 29589                           tblptru	equ	0xFF8
 29590                           tblptrh	equ	0xFF7
 29591                           tblptrl	equ	0xFF6
 29592                           tablat	equ	0xFF5
 29593                           prodh	equ	0xFF4
 29594                           prodl	equ	0xFF3
 29595                           intcon	equ	0xFF2
 29596                           indf0	equ	0xFEF
 29597                           postinc0	equ	0xFEE
 29598                           fsr0h	equ	0xFEA
 29599                           fsr0l	equ	0xFE9
 29600                           wreg	equ	0xFE8
 29601                           indf1	equ	0xFE7
 29602                           postdec1	equ	0xFE5
 29603                           fsr1h	equ	0xFE2
 29604                           fsr1l	equ	0xFE1
 29605                           indf2	equ	0xFDF
 29606                           postinc2	equ	0xFDE
 29607                           postdec2	equ	0xFDD
 29608                           plusw2	equ	0xFDB
 29609                           fsr2h	equ	0xFDA
 29610                           fsr2l	equ	0xFD9
 29611                           status	equ	0xFD8
 29612                           
 29613 ;; *************** function i2_Timer0_Restart *****************
 29614 ;; Defined at:
 29615 ;;		line 83 in file "Library/Timer0.c"
 29616 ;; Parameters:    Size  Location     Type
 29617 ;;		None
 29618 ;; Auto vars:     Size  Location     Type
 29619 ;;		None
 29620 ;; Return value:  Size  Location     Type
 29621 ;;                  1    wreg      void 
 29622 ;; Registers used:
 29623 ;;		None
 29624 ;; Tracked objects:
 29625 ;;		On entry : 0/0
 29626 ;;		On exit  : 0/0
 29627 ;;		Unchanged: 0/0
 29628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29633 ;;Total ram usage:        0 bytes
 29634 ;; Hardware stack levels used:    1
 29635 ;; This function calls:
 29636 ;;		Nothing
 29637 ;; This function is called by:
 29638 ;;		i2_Motor_Step
 29639 ;; This function uses a non-reentrant model
 29640 ;;
 29641                           
 29642                           	psect	text162
 29643  01655A                     __ptext162:
 29644                           	opt stack 0
 29645  01655A                     i2_Timer0_Restart:
 29646                           	opt stack 16
 29647                           
 29648                           ;Timer0.c: 85: TMR0 = COUNTER;
 29649                           
 29650                           ;incstack = 0
 29651  01655A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29652  01655E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29653                           
 29654                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29655  016562  8AF2               	bsf	intcon,5,c	;volatile
 29656  016564  0012               	return		;funcret
 29657  016566                     __end_ofi2_Timer0_Restart:
 29658                           	opt stack 0
 29659                           tosu	equ	0xFFF
 29660                           tosh	equ	0xFFE
 29661                           tosl	equ	0xFFD
 29662                           pclatu	equ	0xFFB
 29663                           pclath	equ	0xFFA
 29664                           tblptru	equ	0xFF8
 29665                           tblptrh	equ	0xFF7
 29666                           tblptrl	equ	0xFF6
 29667                           tablat	equ	0xFF5
 29668                           prodh	equ	0xFF4
 29669                           prodl	equ	0xFF3
 29670                           intcon	equ	0xFF2
 29671                           indf0	equ	0xFEF
 29672                           postinc0	equ	0xFEE
 29673                           fsr0h	equ	0xFEA
 29674                           fsr0l	equ	0xFE9
 29675                           wreg	equ	0xFE8
 29676                           indf1	equ	0xFE7
 29677                           postdec1	equ	0xFE5
 29678                           fsr1h	equ	0xFE2
 29679                           fsr1l	equ	0xFE1
 29680                           indf2	equ	0xFDF
 29681                           postinc2	equ	0xFDE
 29682                           postdec2	equ	0xFDD
 29683                           plusw2	equ	0xFDB
 29684                           fsr2h	equ	0xFDA
 29685                           fsr2l	equ	0xFD9
 29686                           status	equ	0xFD8
 29687                           
 29688 ;; *************** function i2_Port_SetPin *****************
 29689 ;; Defined at:
 29690 ;;		line 247 in file "Library/Port.c"
 29691 ;; Parameters:    Size  Location     Type
 29692 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29693 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29694 ;;  pPin            1   17[COMRAM] enum E6750
 29695 ;;  pValue          1   18[COMRAM] unsigned char 
 29696 ;; Auto vars:     Size  Location     Type
 29697 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29698 ;; Return value:  Size  Location     Type
 29699 ;;                  1    wreg      void 
 29700 ;; Registers used:
 29701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29702 ;; Tracked objects:
 29703 ;;		On entry : 0/0
 29704 ;;		On exit  : 0/0
 29705 ;;		Unchanged: 0/0
 29706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29710 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29711 ;;Total ram usage:        5 bytes
 29712 ;; Hardware stack levels used:    1
 29713 ;; Hardware stack levels required when called:    3
 29714 ;; This function calls:
 29715 ;;		i2_Byte_SetBit
 29716 ;;		i2_Word_GetPair
 29717 ;; This function is called by:
 29718 ;;		i2_Motor_Step
 29719 ;; This function uses a non-reentrant model
 29720 ;;
 29721                           
 29722                           	psect	text163
 29723  0145AA                     __ptext163:
 29724                           	opt stack 0
 29725  0145AA                     i2_Port_SetPin:
 29726                           	opt stack 13
 29727                           
 29728                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29729                           
 29730                           ;incstack = 0
 29731  0145AA  0E08               	movlw	8
 29732  0145AC  2410               	addwf	i2Port_SetPin@pInput,w,c
 29733  0145AE  6E0D               	movwf	i2Word_GetPair@pInput,c
 29734  0145B0  0E00               	movlw	0
 29735  0145B2  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29736  0145B4  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29737  0145B6  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29738  0145BA  EC4E  F0B0         	call	i2_Word_GetPair	;wreg free
 29739  0145BE  6E14               	movwf	i2Port_SetPin@Type,c
 29740                           
 29741                           ;Port.c: 250: switch (Type)
 29742  0145C0  D03B               	goto	i2l427
 29743  0145C2                     
 29744                           ;Port.c: 256: pValue &= 1;
 29745  0145C2  0E01               	movlw	1
 29746  0145C4  1613               	andwf	i2Port_SetPin@pValue,f,c
 29747                           
 29748                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29749  0145C6  EE20 F002          	lfsr	2,2
 29750  0145CA  5010               	movf	i2Port_SetPin@pInput,w,c
 29751  0145CC  26D9               	addwf	fsr2l,f,c
 29752  0145CE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29753  0145D0  22DA               	addwfc	fsr2h,f,c
 29754  0145D2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29755  0145D6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29756  0145DA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29757  0145DE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29758  0145E2  EC19  F0AD         	call	i2_Byte_SetBit	;wreg free
 29759                           
 29760                           ;Port.c: 258: break;
 29761  0145E6  0012               	return	
 29762  0145E8                     
 29763                           ;Port.c: 261: pValue &= 1;
 29764  0145E8  0E01               	movlw	1
 29765  0145EA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29766                           
 29767                           ;Port.c: 262: pValue ^= 1;
 29768  0145EC  0E01               	movlw	1
 29769  0145EE  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29770                           
 29771                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29772  0145F0  EE20 F002          	lfsr	2,2
 29773  0145F4  5010               	movf	i2Port_SetPin@pInput,w,c
 29774  0145F6  26D9               	addwf	fsr2l,f,c
 29775  0145F8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29776  0145FA  22DA               	addwfc	fsr2h,f,c
 29777  0145FC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29778  014600  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29779  014604  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29780  014608  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29781  01460C  EC19  F0AD         	call	i2_Byte_SetBit	;wreg free
 29782                           
 29783                           ;Port.c: 264: break;
 29784  014610  0012               	return	
 29785  014612                     
 29786                           ;Port.c: 266: pValue &= 1;
 29787  014612  0E01               	movlw	1
 29788  014614  1613               	andwf	i2Port_SetPin@pValue,f,c
 29789                           
 29790                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29791  014616  EE20 F004          	lfsr	2,4
 29792  01461A  5010               	movf	i2Port_SetPin@pInput,w,c
 29793  01461C  26D9               	addwf	fsr2l,f,c
 29794  01461E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29795  014620  22DA               	addwfc	fsr2h,f,c
 29796  014622  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29797  014626  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29798  01462A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29799  01462E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29800  014632  EC19  F0AD         	call	i2_Byte_SetBit	;wreg free
 29801                           
 29802                           ;Port.c: 269: }
 29803                           
 29804                           ;Port.c: 268: break;
 29805  014636  0012               	return	
 29806  014638                     i2l427:
 29807  014638  5014               	movf	i2Port_SetPin@Type,w,c
 29808                           
 29809                           ; Switch size 1, requested type "space"
 29810                           ; Number of cases is 4, Range of values is 0 to 3
 29811                           ; switch strategies available:
 29812                           ; Name         Instructions Cycles
 29813                           ; simple_byte           13     7 (average)
 29814                           ;	Chosen strategy is simple_byte
 29815  01463A  0A00               	xorlw	0	; case 0
 29816  01463C  B4D8               	btfsc	status,2,c
 29817  01463E  0012               	return	
 29818  014640  0A01               	xorlw	1	; case 1
 29819  014642  B4D8               	btfsc	status,2,c
 29820  014644  D7BE               	goto	i2l430
 29821  014646  0A03               	xorlw	3	; case 2
 29822  014648  B4D8               	btfsc	status,2,c
 29823  01464A  D7CE               	goto	i2l432
 29824  01464C  0A01               	xorlw	1	; case 3
 29825  01464E  A4D8               	btfss	status,2,c
 29826  014650  0012               	return	
 29827  014652  D7DF               	goto	i2l433
 29828  014654                     __end_ofi2_Port_SetPin:
 29829                           	opt stack 0
 29830                           tosu	equ	0xFFF
 29831                           tosh	equ	0xFFE
 29832                           tosl	equ	0xFFD
 29833                           pclatu	equ	0xFFB
 29834                           pclath	equ	0xFFA
 29835                           tblptru	equ	0xFF8
 29836                           tblptrh	equ	0xFF7
 29837                           tblptrl	equ	0xFF6
 29838                           tablat	equ	0xFF5
 29839                           prodh	equ	0xFF4
 29840                           prodl	equ	0xFF3
 29841                           intcon	equ	0xFF2
 29842                           indf0	equ	0xFEF
 29843                           postinc0	equ	0xFEE
 29844                           fsr0h	equ	0xFEA
 29845                           fsr0l	equ	0xFE9
 29846                           wreg	equ	0xFE8
 29847                           indf1	equ	0xFE7
 29848                           postdec1	equ	0xFE5
 29849                           fsr1h	equ	0xFE2
 29850                           fsr1l	equ	0xFE1
 29851                           indf2	equ	0xFDF
 29852                           postinc2	equ	0xFDE
 29853                           postdec2	equ	0xFDD
 29854                           plusw2	equ	0xFDB
 29855                           fsr2h	equ	0xFDA
 29856                           fsr2l	equ	0xFD9
 29857                           status	equ	0xFD8
 29858                           
 29859 ;; *************** function i2_Word_GetPair *****************
 29860 ;; Defined at:
 29861 ;;		line 156 in file "Library/Types.c"
 29862 ;; Parameters:    Size  Location     Type
 29863 ;;  pInput          2   12[COMRAM] PTR struct Word
 29864 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29865 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29866 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29867 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29868 ;;  pPair           1   14[COMRAM] unsigned char 
 29869 ;; Auto vars:     Size  Location     Type
 29870 ;;		None
 29871 ;; Return value:  Size  Location     Type
 29872 ;;                  1    wreg      unsigned char 
 29873 ;; Registers used:
 29874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29875 ;; Tracked objects:
 29876 ;;		On entry : 0/0
 29877 ;;		On exit  : 0/0
 29878 ;;		Unchanged: 0/0
 29879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29880 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29883 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29884 ;;Total ram usage:        3 bytes
 29885 ;; Hardware stack levels used:    1
 29886 ;; Hardware stack levels required when called:    2
 29887 ;; This function calls:
 29888 ;;		i2_Byte_GetPair
 29889 ;; This function is called by:
 29890 ;;		i2_Port_SetPin
 29891 ;; This function uses a non-reentrant model
 29892 ;;
 29893                           
 29894                           	psect	text164
 29895  01609C                     __ptext164:
 29896                           	opt stack 0
 29897  01609C                     i2_Word_GetPair:
 29898                           	opt stack 13
 29899                           
 29900                           ;Types.c: 158: if (pPair >= 4)
 29901                           
 29902                           ;incstack = 0
 29903  01609C  0E03               	movlw	3
 29904  01609E  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29905  0160A0  D00C               	goto	i2l781
 29906                           
 29907                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29908  0160A2  0E01               	movlw	1
 29909  0160A4  240D               	addwf	i2Word_GetPair@pInput,w,c
 29910  0160A6  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29911  0160A8  0E00               	movlw	0
 29912  0160AA  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29913  0160AC  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29914  0160AE  500F               	movf	i2Word_GetPair@pPair,w,c
 29915  0160B0  0FFC               	addlw	252
 29916  0160B2  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29917  0160B4  ECCA  F0B1         	call	i2_Byte_GetPair	;wreg free
 29918  0160B8  0012               	return	
 29919  0160BA                     i2l781:
 29920                           
 29921                           ;Types.c: 160: else
 29922                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29923  0160BA  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29924  0160BE  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29925  0160C2  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29926  0160C6  ECCA  F0B1         	call	i2_Byte_GetPair	;wreg free
 29927  0160CA  0012               	return	
 29928  0160CC                     __end_ofi2_Word_GetPair:
 29929                           	opt stack 0
 29930                           tosu	equ	0xFFF
 29931                           tosh	equ	0xFFE
 29932                           tosl	equ	0xFFD
 29933                           pclatu	equ	0xFFB
 29934                           pclath	equ	0xFFA
 29935                           tblptru	equ	0xFF8
 29936                           tblptrh	equ	0xFF7
 29937                           tblptrl	equ	0xFF6
 29938                           tablat	equ	0xFF5
 29939                           prodh	equ	0xFF4
 29940                           prodl	equ	0xFF3
 29941                           intcon	equ	0xFF2
 29942                           indf0	equ	0xFEF
 29943                           postinc0	equ	0xFEE
 29944                           fsr0h	equ	0xFEA
 29945                           fsr0l	equ	0xFE9
 29946                           wreg	equ	0xFE8
 29947                           indf1	equ	0xFE7
 29948                           postdec1	equ	0xFE5
 29949                           fsr1h	equ	0xFE2
 29950                           fsr1l	equ	0xFE1
 29951                           indf2	equ	0xFDF
 29952                           postinc2	equ	0xFDE
 29953                           postdec2	equ	0xFDD
 29954                           plusw2	equ	0xFDB
 29955                           fsr2h	equ	0xFDA
 29956                           fsr2l	equ	0xFD9
 29957                           status	equ	0xFD8
 29958                           
 29959 ;; *************** function i2_Byte_GetPair *****************
 29960 ;; Defined at:
 29961 ;;		line 87 in file "Library/Types.c"
 29962 ;; Parameters:    Size  Location     Type
 29963 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29964 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29965 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29966 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29967 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29968 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29969 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29970 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29971 ;;		 -> NULL(0), 
 29972 ;;  pPair           1   11[COMRAM] unsigned char 
 29973 ;; Auto vars:     Size  Location     Type
 29974 ;;		None
 29975 ;; Return value:  Size  Location     Type
 29976 ;;                  1    wreg      unsigned char 
 29977 ;; Registers used:
 29978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29979 ;; Tracked objects:
 29980 ;;		On entry : 0/0
 29981 ;;		On exit  : 0/0
 29982 ;;		Unchanged: 0/0
 29983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29984 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29987 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29988 ;;Total ram usage:        3 bytes
 29989 ;; Hardware stack levels used:    1
 29990 ;; Hardware stack levels required when called:    1
 29991 ;; This function calls:
 29992 ;;		i2_Byte_GetZone
 29993 ;; This function is called by:
 29994 ;;		i2_Word_GetPair
 29995 ;; This function uses a non-reentrant model
 29996 ;;
 29997                           
 29998                           	psect	text165
 29999  016394                     __ptext165:
 30000                           	opt stack 0
 30001  016394                     i2_Byte_GetPair:
 30002                           	opt stack 13
 30003                           
 30004                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30005                           
 30006                           ;incstack = 0
 30007  016394  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30008  016398  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30009  01639C  0E04               	movlw	4
 30010  01639E  6E03               	movwf	i2Byte_GetZone@pMax,c
 30011  0163A0  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30012  0163A4  0E02               	movlw	2
 30013  0163A6  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30014  0163A8  EC8D  F0A8         	call	i2_Byte_GetZone	;wreg free
 30015  0163AC  0012               	return	
 30016  0163AE                     __end_ofi2_Byte_GetPair:
 30017                           	opt stack 0
 30018                           tosu	equ	0xFFF
 30019                           tosh	equ	0xFFE
 30020                           tosl	equ	0xFFD
 30021                           pclatu	equ	0xFFB
 30022                           pclath	equ	0xFFA
 30023                           tblptru	equ	0xFF8
 30024                           tblptrh	equ	0xFF7
 30025                           tblptrl	equ	0xFF6
 30026                           tablat	equ	0xFF5
 30027                           prodh	equ	0xFF4
 30028                           prodl	equ	0xFF3
 30029                           intcon	equ	0xFF2
 30030                           indf0	equ	0xFEF
 30031                           postinc0	equ	0xFEE
 30032                           fsr0h	equ	0xFEA
 30033                           fsr0l	equ	0xFE9
 30034                           wreg	equ	0xFE8
 30035                           indf1	equ	0xFE7
 30036                           postdec1	equ	0xFE5
 30037                           fsr1h	equ	0xFE2
 30038                           fsr1l	equ	0xFE1
 30039                           indf2	equ	0xFDF
 30040                           postinc2	equ	0xFDE
 30041                           postdec2	equ	0xFDD
 30042                           plusw2	equ	0xFDB
 30043                           fsr2h	equ	0xFDA
 30044                           fsr2l	equ	0xFD9
 30045                           status	equ	0xFD8
 30046                           
 30047 ;; *************** function i2_Byte_GetZone *****************
 30048 ;; Defined at:
 30049 ;;		line 64 in file "Library/Types.c"
 30050 ;; Parameters:    Size  Location     Type
 30051 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30052 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30053 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30054 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30055 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30056 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30057 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30058 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30059 ;;		 -> NULL(0), 
 30060 ;;  pMax            1    2[COMRAM] unsigned char 
 30061 ;;  pChunk          1    3[COMRAM] unsigned char 
 30062 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30063 ;; Auto vars:     Size  Location     Type
 30064 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30065 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30066 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30067 ;; Return value:  Size  Location     Type
 30068 ;;                  1    wreg      unsigned char 
 30069 ;; Registers used:
 30070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30071 ;; Tracked objects:
 30072 ;;		On entry : 0/0
 30073 ;;		On exit  : 0/0
 30074 ;;		Unchanged: 0/0
 30075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30076 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30077 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30079 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30080 ;;Total ram usage:        9 bytes
 30081 ;; Hardware stack levels used:    1
 30082 ;; This function calls:
 30083 ;;		Nothing
 30084 ;; This function is called by:
 30085 ;;		i2_Byte_GetPair
 30086 ;; This function uses a non-reentrant model
 30087 ;;
 30088                           
 30089                           	psect	text166
 30090  01511A                     __ptext166:
 30091                           	opt stack 0
 30092  01511A                     i2_Byte_GetZone:
 30093                           	opt stack 13
 30094                           
 30095                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30096                           
 30097                           ;incstack = 0
 30098  01511A  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30099  01511E  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30100  015122  0E00               	movlw	low (__mediumconst shr (0+16))
 30101  015124  6EF8               	movwf	tblptru,c
 30102  015126  0E0F               	movlw	(high __ramtop+-1)
 30103  015128  64F7               	cpfsgt	tblptrh,c
 30104  01512A  D003               	bra	i2u502_47
 30105  01512C  0008               	tblrd		*
 30106  01512E  50F5               	movf	tablat,w,c
 30107  015130  D005               	bra	i2u502_40
 30108  015132                     i2u502_47:
 30109  015132  CFF6 FFE9          	movff	tblptrl,fsr0l
 30110  015136  CFF7 FFEA          	movff	tblptrh,fsr0h
 30111  01513A  50EF               	movf	indf0,w,c
 30112  01513C                     i2u502_40:
 30113  01513C  6E09               	movwf	i2Byte_GetZone@Output,c
 30114                           
 30115                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30116  01513E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30117  015140  0D01               	mullw	1
 30118  015142  0E5B               	movlw	low _MASKS
 30119  015144  24F3               	addwf	prodl,w,c
 30120  015146  6EF6               	movwf	tblptrl,c
 30121  015148  0EFD               	movlw	high _MASKS
 30122  01514A  20F4               	addwfc	prodh,w,c
 30123  01514C  6EF7               	movwf	tblptrh,c
 30124  01514E                     	if	1	;There are 3 active tblptr bytes
 30125  01514E  6AF8               	clrf	tblptru,c
 30126  015150  0E00               	movlw	low (__mediumconst shr (0+16))
 30127  015152  22F8               	addwfc	tblptru,f,c
 30128  015154                     	endif
 30129  015154  0008               	tblrd		*
 30130  015156  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30131                           
 30132                           ;Types.c: 68: UINT8 Offset = 0;
 30133  01515A  0E00               	movlw	0
 30134  01515C  6E08               	movwf	i2Byte_GetZone@Offset,c
 30135                           
 30136                           ;Types.c: 70: while (pChunk >= pMax)
 30137  01515E  D003               	goto	i2l732
 30138  015160                     
 30139                           ;Types.c: 71: {
 30140                           ;Types.c: 72: pChunk -= pMax;
 30141  015160  5003               	movf	i2Byte_GetZone@pMax,w,c
 30142  015162  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30143                           
 30144                           ;Types.c: 73: Offset += 1;
 30145  015164  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30146  015166                     i2l732:
 30147  015166  5003               	movf	i2Byte_GetZone@pMax,w,c
 30148  015168  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30149  01516A  B0D8               	btfsc	status,0,c
 30150  01516C  D7F9               	goto	i2l733
 30151                           
 30152                           ;Types.c: 74: }
 30153                           ;Types.c: 75: pChunk *= pChunkSize;
 30154  01516E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30155  015170  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30156  015172  50F3               	movf	prodl,w,c
 30157  015174  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30158                           
 30159                           ;Types.c: 76: pChunk += Offset;
 30160  015176  5008               	movf	i2Byte_GetZone@Offset,w,c
 30161  015178  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30162                           
 30163                           ;Types.c: 78: Output >>= pChunk;
 30164  01517A  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30165  01517C  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30166  01517E  D002               	goto	i2u504_40
 30167  015180                     i2u504_45:
 30168  015180  90D8               	bcf	status,0,c
 30169  015182  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30170  015184                     i2u504_40:
 30171  015184  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30172  015186  D7FC               	goto	i2u504_45
 30173                           
 30174                           ;Types.c: 79: Output &= MASK;
 30175  015188  5007               	movf	i2Byte_GetZone@MASK,w,c
 30176  01518A  1609               	andwf	i2Byte_GetZone@Output,f,c
 30177                           
 30178                           ;Types.c: 80: return Output;
 30179  01518C  5009               	movf	i2Byte_GetZone@Output,w,c
 30180  01518E  0012               	return	
 30181  015190                     __end_ofi2_Byte_GetZone:
 30182                           	opt stack 0
 30183                           tosu	equ	0xFFF
 30184                           tosh	equ	0xFFE
 30185                           tosl	equ	0xFFD
 30186                           pclatu	equ	0xFFB
 30187                           pclath	equ	0xFFA
 30188                           tblptru	equ	0xFF8
 30189                           tblptrh	equ	0xFF7
 30190                           tblptrl	equ	0xFF6
 30191                           tablat	equ	0xFF5
 30192                           prodh	equ	0xFF4
 30193                           prodl	equ	0xFF3
 30194                           intcon	equ	0xFF2
 30195                           indf0	equ	0xFEF
 30196                           postinc0	equ	0xFEE
 30197                           fsr0h	equ	0xFEA
 30198                           fsr0l	equ	0xFE9
 30199                           wreg	equ	0xFE8
 30200                           indf1	equ	0xFE7
 30201                           postdec1	equ	0xFE5
 30202                           fsr1h	equ	0xFE2
 30203                           fsr1l	equ	0xFE1
 30204                           indf2	equ	0xFDF
 30205                           postinc2	equ	0xFDE
 30206                           postdec2	equ	0xFDD
 30207                           plusw2	equ	0xFDB
 30208                           fsr2h	equ	0xFDA
 30209                           fsr2l	equ	0xFD9
 30210                           status	equ	0xFD8
 30211                           
 30212 ;; *************** function i2_Byte_SetBit *****************
 30213 ;; Defined at:
 30214 ;;		line 32 in file "Library/Types.c"
 30215 ;; Parameters:    Size  Location     Type
 30216 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30217 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30218 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30219 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30220 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30221 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30222 ;;		 -> NULL(0), 
 30223 ;;  pBit            1    2[COMRAM] unsigned char 
 30224 ;;  pValue          1    3[COMRAM] unsigned char 
 30225 ;; Auto vars:     Size  Location     Type
 30226 ;;		None
 30227 ;; Return value:  Size  Location     Type
 30228 ;;                  1    wreg      void 
 30229 ;; Registers used:
 30230 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30231 ;; Tracked objects:
 30232 ;;		On entry : 0/0
 30233 ;;		On exit  : 0/0
 30234 ;;		Unchanged: 0/0
 30235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30238 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30239 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30240 ;;Total ram usage:        7 bytes
 30241 ;; Hardware stack levels used:    1
 30242 ;; This function calls:
 30243 ;;		Nothing
 30244 ;; This function is called by:
 30245 ;;		i2_Port_SetPin
 30246 ;; This function uses a non-reentrant model
 30247 ;;
 30248                           
 30249                           	psect	text167
 30250  015A32                     __ptext167:
 30251                           	opt stack 0
 30252  015A32                     i2_Byte_SetBit:
 30253                           	opt stack 15
 30254                           
 30255                           ;Types.c: 34: pValue &= 1;
 30256                           
 30257                           ;incstack = 0
 30258  015A32  0E01               	movlw	1
 30259  015A34  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30260                           
 30261                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30262  015A36  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30263  015A3A  0E01               	movlw	1
 30264  015A3C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30265  015A3E  2A05               	incf	??i2_Byte_SetBit,f,c
 30266  015A40  D002               	goto	i2u626_44
 30267  015A42                     i2u626_45:
 30268  015A42  90D8               	bcf	status,0,c
 30269  015A44  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30270  015A46                     i2u626_44:
 30271  015A46  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30272  015A48  D7FC               	goto	i2u626_45
 30273  015A4A  5006               	movf	??i2_Byte_SetBit+1,w,c
 30274  015A4C  0AFF               	xorlw	255
 30275  015A4E  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30276  015A50  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30277  015A54  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30278  015A58  5007               	movf	??i2_Byte_SetBit+2,w,c
 30279  015A5A  16DF               	andwf	indf2,f,c
 30280                           
 30281                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30282  015A5C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30283  015A60  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30284  015A64  2A05               	incf	??i2_Byte_SetBit,f,c
 30285  015A66  D002               	goto	i2u627_44
 30286  015A68                     i2u627_45:
 30287  015A68  90D8               	bcf	status,0,c
 30288  015A6A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30289  015A6C                     i2u627_44:
 30290  015A6C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30291  015A6E  D7FC               	goto	i2u627_45
 30292  015A70  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30293  015A74  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30294  015A78  5006               	movf	??i2_Byte_SetBit+1,w,c
 30295  015A7A  12DF               	iorwf	indf2,f,c
 30296  015A7C  0012               	return		;funcret
 30297  015A7E                     __end_ofi2_Byte_SetBit:
 30298                           	opt stack 0
 30299                           tosu	equ	0xFFF
 30300                           tosh	equ	0xFFE
 30301                           tosl	equ	0xFFD
 30302                           pclatu	equ	0xFFB
 30303                           pclath	equ	0xFFA
 30304                           tblptru	equ	0xFF8
 30305                           tblptrh	equ	0xFF7
 30306                           tblptrl	equ	0xFF6
 30307                           tablat	equ	0xFF5
 30308                           prodh	equ	0xFF4
 30309                           prodl	equ	0xFF3
 30310                           intcon	equ	0xFF2
 30311                           indf0	equ	0xFEF
 30312                           postinc0	equ	0xFEE
 30313                           fsr0h	equ	0xFEA
 30314                           fsr0l	equ	0xFE9
 30315                           wreg	equ	0xFE8
 30316                           indf1	equ	0xFE7
 30317                           postdec1	equ	0xFE5
 30318                           fsr1h	equ	0xFE2
 30319                           fsr1l	equ	0xFE1
 30320                           indf2	equ	0xFDF
 30321                           postinc2	equ	0xFDE
 30322                           postdec2	equ	0xFDD
 30323                           plusw2	equ	0xFDB
 30324                           fsr2h	equ	0xFDA
 30325                           fsr2l	equ	0xFD9
 30326                           status	equ	0xFD8
 30327                           
 30328 ;; *************** function i2_MXK_SwitchTo *****************
 30329 ;; Defined at:
 30330 ;;		line 105 in file "Library/MXK.c"
 30331 ;; Parameters:    Size  Location     Type
 30332 ;;  pModule         1    wreg     enum E6927
 30333 ;; Auto vars:     Size  Location     Type
 30334 ;;  pModule         1    7[COMRAM] enum E6927
 30335 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30336 ;; Return value:  Size  Location     Type
 30337 ;;                  1    wreg      unsigned char 
 30338 ;; Registers used:
 30339 ;;		wreg, status,2, status,0, cstack
 30340 ;; Tracked objects:
 30341 ;;		On entry : 0/0
 30342 ;;		On exit  : 0/0
 30343 ;;		Unchanged: 0/0
 30344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30349 ;;Total ram usage:        2 bytes
 30350 ;; Hardware stack levels used:    1
 30351 ;; Hardware stack levels required when called:    1
 30352 ;; This function calls:
 30353 ;;		i2_delay_us
 30354 ;; This function is called by:
 30355 ;;		i2_Motor_Step
 30356 ;; This function uses a non-reentrant model
 30357 ;;
 30358                           
 30359                           	psect	text168
 30360  015FA0                     __ptext168:
 30361                           	opt stack 0
 30362  015FA0                     i2_MXK_SwitchTo:
 30363                           	opt stack 15
 30364                           
 30365                           ;incstack = 0
 30366                           ;i2MXK_SwitchTo@pModule stored from wreg
 30367  015FA0  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30368                           
 30369                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30370  015FA2  5086               	movf	3974,w,c	;volatile
 30371  015FA4  0B0F               	andlw	15
 30372  015FA6  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30373                           
 30374                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30375  015FA8  504B               	movf	_Bus_State,w,c
 30376  015FAA  A4D8               	btfss	status,2,c
 30377  015FAC  D002               	goto	i2l1730
 30378                           
 30379                           ;MXK.c: 110: return 0;
 30380  015FAE  0E00               	movlw	0
 30381  015FB0  0012               	return	
 30382  015FB2                     i2l1730:
 30383                           
 30384                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30385  015FB2  0E00               	movlw	0
 30386  015FB4  6E4B               	movwf	_Bus_State,c
 30387                           
 30388                           ;MXK.c: 114: if (CUR != pModule)
 30389  015FB6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30390  015FB8  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30391  015FBA  B4D8               	btfsc	status,2,c
 30392  015FBC  D00A               	goto	i2l1732
 30393                           
 30394                           ;MXK.c: 115: {
 30395                           ;MXK.c: 116: PORTG &= ~(0xF);
 30396  015FBE  0EF0               	movlw	240
 30397  015FC0  1686               	andwf	3974,f,c	;volatile
 30398                           
 30399                           ;MXK.c: 117: PORTG |= pModule;
 30400  015FC2  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30401  015FC4  1286               	iorwf	3974,f,c	;volatile
 30402                           
 30403                           ;MXK.c: 120: delay_us(10);
 30404  015FC6  0E00               	movlw	0
 30405  015FC8  6E02               	movwf	i2delay_us@us+1,c
 30406  015FCA  0E0A               	movlw	10
 30407  015FCC  6E01               	movwf	i2delay_us@us,c
 30408  015FCE  ECC1  F0AE         	call	i2_delay_us	;wreg free
 30409  015FD2                     i2l1732:
 30410                           
 30411                           ;MXK.c: 121: }
 30412                           ;MXK.c: 122: return 1;
 30413  015FD2  0E01               	movlw	1
 30414  015FD4  0012               	return	
 30415  015FD6                     __end_ofi2_MXK_SwitchTo:
 30416                           	opt stack 0
 30417                           tosu	equ	0xFFF
 30418                           tosh	equ	0xFFE
 30419                           tosl	equ	0xFFD
 30420                           pclatu	equ	0xFFB
 30421                           pclath	equ	0xFFA
 30422                           tblptru	equ	0xFF8
 30423                           tblptrh	equ	0xFF7
 30424                           tblptrl	equ	0xFF6
 30425                           tablat	equ	0xFF5
 30426                           prodh	equ	0xFF4
 30427                           prodl	equ	0xFF3
 30428                           intcon	equ	0xFF2
 30429                           indf0	equ	0xFEF
 30430                           postinc0	equ	0xFEE
 30431                           fsr0h	equ	0xFEA
 30432                           fsr0l	equ	0xFE9
 30433                           wreg	equ	0xFE8
 30434                           indf1	equ	0xFE7
 30435                           postdec1	equ	0xFE5
 30436                           fsr1h	equ	0xFE2
 30437                           fsr1l	equ	0xFE1
 30438                           indf2	equ	0xFDF
 30439                           postinc2	equ	0xFDE
 30440                           postdec2	equ	0xFDD
 30441                           plusw2	equ	0xFDB
 30442                           fsr2h	equ	0xFDA
 30443                           fsr2l	equ	0xFD9
 30444                           status	equ	0xFD8
 30445                           
 30446 ;; *************** function i2_delay_us *****************
 30447 ;; Defined at:
 30448 ;;		line 255 in file "Library/Types.c"
 30449 ;; Parameters:    Size  Location     Type
 30450 ;;  us              2    0[COMRAM] unsigned short 
 30451 ;; Auto vars:     Size  Location     Type
 30452 ;;  delay_us        4    2[COMRAM] unsigned long 
 30453 ;; Return value:  Size  Location     Type
 30454 ;;                  1    wreg      void 
 30455 ;; Registers used:
 30456 ;;		wreg, status,2, status,0
 30457 ;; Tracked objects:
 30458 ;;		On entry : 0/0
 30459 ;;		On exit  : 0/0
 30460 ;;		Unchanged: 0/0
 30461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30463 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30465 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30466 ;;Total ram usage:        6 bytes
 30467 ;; Hardware stack levels used:    1
 30468 ;; This function calls:
 30469 ;;		Nothing
 30470 ;; This function is called by:
 30471 ;;		i2_MXK_SwitchTo
 30472 ;; This function uses a non-reentrant model
 30473 ;;
 30474                           
 30475                           	psect	text169
 30476  015D82                     __ptext169:
 30477                           	opt stack 0
 30478  015D82                     i2_delay_us:
 30479                           	opt stack 15
 30480                           
 30481                           ;Types.c: 256: unsigned long u;
 30482                           ;Types.c: 257: while (us--) {
 30483                           
 30484                           ;incstack = 0
 30485  015D82  D016               	goto	i2u630_40
 30486  015D84                     i2l9624:
 30487                           
 30488                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30489  015D84  0E00               	movlw	0
 30490  015D86  6E03               	movwf	i2delay_us@u,c
 30491  015D88  0E00               	movlw	0
 30492  015D8A  6E04               	movwf	i2delay_us@u+1,c
 30493  015D8C  0E00               	movlw	0
 30494  015D8E  6E05               	movwf	i2delay_us@u+2,c
 30495  015D90  0E00               	movlw	0
 30496  015D92  6E06               	movwf	i2delay_us@u+3,c
 30497  015D94                     i2l9626:
 30498  015D94  5003               	movf	i2delay_us@u,w,c
 30499  015D96  1004               	iorwf	i2delay_us@u+1,w,c
 30500  015D98  1005               	iorwf	i2delay_us@u+2,w,c
 30501  015D9A  1006               	iorwf	i2delay_us@u+3,w,c
 30502  015D9C  A4D8               	btfss	status,2,c
 30503  015D9E  D008               	goto	i2u630_40
 30504  015DA0  F000               	nop		; ;# 
 30505  015DA2  0E01               	movlw	1
 30506  015DA4  2603               	addwf	i2delay_us@u,f,c
 30507  015DA6  0E00               	movlw	0
 30508  015DA8  2204               	addwfc	i2delay_us@u+1,f,c
 30509  015DAA  2205               	addwfc	i2delay_us@u+2,f,c
 30510  015DAC  2206               	addwfc	i2delay_us@u+3,f,c
 30511  015DAE  D7F2               	goto	i2l9626
 30512  015DB0                     i2u630_40:
 30513  015DB0  0601               	decf	i2delay_us@us,f,c
 30514  015DB2  A0D8               	btfss	status,0,c
 30515  015DB4  0602               	decf	i2delay_us@us+1,f,c
 30516  015DB6  2801               	incf	i2delay_us@us,w,c
 30517  015DB8  E1E5               	bnz	i2l9624
 30518  015DBA  2802               	incf	i2delay_us@us+1,w,c
 30519  015DBC  B4D8               	btfsc	status,2,c
 30520  015DBE  0012               	return	
 30521  015DC0  D7E1               	goto	i2l832
 30522  015DC2                     __end_ofi2_delay_us:
 30523                           	opt stack 0
 30524                           tosu	equ	0xFFF
 30525                           tosh	equ	0xFFE
 30526                           tosl	equ	0xFFD
 30527                           pclatu	equ	0xFFB
 30528                           pclath	equ	0xFFA
 30529                           tblptru	equ	0xFF8
 30530                           tblptrh	equ	0xFF7
 30531                           tblptrl	equ	0xFF6
 30532                           tablat	equ	0xFF5
 30533                           prodh	equ	0xFF4
 30534                           prodl	equ	0xFF3
 30535                           intcon	equ	0xFF2
 30536                           indf0	equ	0xFEF
 30537                           postinc0	equ	0xFEE
 30538                           fsr0h	equ	0xFEA
 30539                           fsr0l	equ	0xFE9
 30540                           wreg	equ	0xFE8
 30541                           indf1	equ	0xFE7
 30542                           postdec1	equ	0xFE5
 30543                           fsr1h	equ	0xFE2
 30544                           fsr1l	equ	0xFE1
 30545                           indf2	equ	0xFDF
 30546                           postinc2	equ	0xFDE
 30547                           postdec2	equ	0xFDD
 30548                           plusw2	equ	0xFDB
 30549                           fsr2h	equ	0xFDA
 30550                           fsr2l	equ	0xFD9
 30551                           status	equ	0xFD8
 30552                           
 30553 ;; *************** function i2_MXK_Release *****************
 30554 ;; Defined at:
 30555 ;;		line 130 in file "Library/MXK.c"
 30556 ;; Parameters:    Size  Location     Type
 30557 ;;		None
 30558 ;; Auto vars:     Size  Location     Type
 30559 ;;		None
 30560 ;; Return value:  Size  Location     Type
 30561 ;;                  1    wreg      unsigned char 
 30562 ;; Registers used:
 30563 ;;		wreg, status,2, status,0
 30564 ;; Tracked objects:
 30565 ;;		On entry : 0/0
 30566 ;;		On exit  : 0/0
 30567 ;;		Unchanged: 0/0
 30568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30573 ;;Total ram usage:        0 bytes
 30574 ;; Hardware stack levels used:    1
 30575 ;; This function calls:
 30576 ;;		Nothing
 30577 ;; This function is called by:
 30578 ;;		i2_Motor_Step
 30579 ;; This function uses a non-reentrant model
 30580 ;;
 30581                           
 30582                           	psect	text170
 30583  0165C2                     __ptext170:
 30584                           	opt stack 0
 30585  0165C2                     i2_MXK_Release:
 30586                           	opt stack 16
 30587                           
 30588                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30589                           
 30590                           ;incstack = 0
 30591  0165C2  0E01               	movlw	1
 30592  0165C4  6E4B               	movwf	_Bus_State,c
 30593                           
 30594                           ;MXK.c: 135: return 1;
 30595                           ;	Return value of i2_MXK_Release is never used
 30596  0165C6  0012               	return	
 30597  0165C8                     __end_ofi2_MXK_Release:
 30598                           	opt stack 0
 30599                           tosu	equ	0xFFF
 30600                           tosh	equ	0xFFE
 30601                           tosl	equ	0xFFD
 30602                           pclatu	equ	0xFFB
 30603                           pclath	equ	0xFFA
 30604                           tblptru	equ	0xFF8
 30605                           tblptrh	equ	0xFF7
 30606                           tblptrl	equ	0xFF6
 30607                           tablat	equ	0xFF5
 30608                           prodh	equ	0xFF4
 30609                           prodl	equ	0xFF3
 30610                           intcon	equ	0xFF2
 30611                           indf0	equ	0xFEF
 30612                           postinc0	equ	0xFEE
 30613                           fsr0h	equ	0xFEA
 30614                           fsr0l	equ	0xFE9
 30615                           wreg	equ	0xFE8
 30616                           indf1	equ	0xFE7
 30617                           postdec1	equ	0xFE5
 30618                           fsr1h	equ	0xFE2
 30619                           fsr1l	equ	0xFE1
 30620                           indf2	equ	0xFDF
 30621                           postinc2	equ	0xFDE
 30622                           postdec2	equ	0xFDD
 30623                           plusw2	equ	0xFDB
 30624                           fsr2h	equ	0xFDA
 30625                           fsr2l	equ	0xFD9
 30626                           status	equ	0xFD8
 30627                           
 30628 ;; *************** function i2_MXK_Queue *****************
 30629 ;; Defined at:
 30630 ;;		line 144 in file "Library/MXK.c"
 30631 ;; Parameters:    Size  Location     Type
 30632 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30633 ;;		 -> Absolute function(1), Motor_Step(1), 
 30634 ;; Auto vars:     Size  Location     Type
 30635 ;;		None
 30636 ;; Return value:  Size  Location     Type
 30637 ;;                  1    wreg      void 
 30638 ;; Registers used:
 30639 ;;		wreg, status,2, status,0
 30640 ;; Tracked objects:
 30641 ;;		On entry : 0/0
 30642 ;;		On exit  : 0/0
 30643 ;;		Unchanged: 0/0
 30644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30645 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30649 ;;Total ram usage:        3 bytes
 30650 ;; Hardware stack levels used:    1
 30651 ;; This function calls:
 30652 ;;		Nothing
 30653 ;; This function is called by:
 30654 ;;		i2_Motor_Step
 30655 ;; This function uses a non-reentrant model
 30656 ;;
 30657                           
 30658                           	psect	text171
 30659  016528                     __ptext171:
 30660                           	opt stack 0
 30661  016528                     i2_MXK_Queue:
 30662                           	opt stack 16
 30663                           
 30664                           ;MXK.c: 146: lQueue = pCallback;
 30665                           
 30666                           ;incstack = 0
 30667  016528  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30668  01652C  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30669  016530  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30670  016534  0012               	return		;funcret
 30671  016536                     __end_ofi2_MXK_Queue:
 30672                           	opt stack 0
 30673                           tosu	equ	0xFFF
 30674                           tosh	equ	0xFFE
 30675                           tosl	equ	0xFFD
 30676                           pclatu	equ	0xFFB
 30677                           pclath	equ	0xFFA
 30678                           tblptru	equ	0xFF8
 30679                           tblptrh	equ	0xFF7
 30680                           tblptrl	equ	0xFF6
 30681                           tablat	equ	0xFF5
 30682                           prodh	equ	0xFF4
 30683                           prodl	equ	0xFF3
 30684                           intcon	equ	0xFF2
 30685                           indf0	equ	0xFEF
 30686                           postinc0	equ	0xFEE
 30687                           fsr0h	equ	0xFEA
 30688                           fsr0l	equ	0xFE9
 30689                           wreg	equ	0xFE8
 30690                           indf1	equ	0xFE7
 30691                           postdec1	equ	0xFE5
 30692                           fsr1h	equ	0xFE2
 30693                           fsr1l	equ	0xFE1
 30694                           indf2	equ	0xFDF
 30695                           postinc2	equ	0xFDE
 30696                           postdec2	equ	0xFDD
 30697                           plusw2	equ	0xFDB
 30698                           fsr2h	equ	0xFDA
 30699                           fsr2l	equ	0xFD9
 30700                           status	equ	0xFD8
 30701                           tosu	equ	0xFFF
 30702                           tosh	equ	0xFFE
 30703                           tosl	equ	0xFFD
 30704                           pclatu	equ	0xFFB
 30705                           pclath	equ	0xFFA
 30706                           tblptru	equ	0xFF8
 30707                           tblptrh	equ	0xFF7
 30708                           tblptrl	equ	0xFF6
 30709                           tablat	equ	0xFF5
 30710                           prodh	equ	0xFF4
 30711                           prodl	equ	0xFF3
 30712                           intcon	equ	0xFF2
 30713                           indf0	equ	0xFEF
 30714                           postinc0	equ	0xFEE
 30715                           fsr0h	equ	0xFEA
 30716                           fsr0l	equ	0xFE9
 30717                           wreg	equ	0xFE8
 30718                           indf1	equ	0xFE7
 30719                           postdec1	equ	0xFE5
 30720                           fsr1h	equ	0xFE2
 30721                           fsr1l	equ	0xFE1
 30722                           indf2	equ	0xFDF
 30723                           postinc2	equ	0xFDE
 30724                           postdec2	equ	0xFDD
 30725                           plusw2	equ	0xFDB
 30726                           fsr2h	equ	0xFDA
 30727                           fsr2l	equ	0xFD9
 30728                           status	equ	0xFD8
 30729                           
 30730                           	psect	text172
 30731  000000                     __ptext172:
 30732                           	opt stack 0
 30733                           tosu	equ	0xFFF
 30734                           tosh	equ	0xFFE
 30735                           tosl	equ	0xFFD
 30736                           pclatu	equ	0xFFB
 30737                           pclath	equ	0xFFA
 30738                           tblptru	equ	0xFF8
 30739                           tblptrh	equ	0xFF7
 30740                           tblptrl	equ	0xFF6
 30741                           tablat	equ	0xFF5
 30742                           prodh	equ	0xFF4
 30743                           prodl	equ	0xFF3
 30744                           intcon	equ	0xFF2
 30745                           indf0	equ	0xFEF
 30746                           postinc0	equ	0xFEE
 30747                           fsr0h	equ	0xFEA
 30748                           fsr0l	equ	0xFE9
 30749                           wreg	equ	0xFE8
 30750                           indf1	equ	0xFE7
 30751                           postdec1	equ	0xFE5
 30752                           fsr1h	equ	0xFE2
 30753                           fsr1l	equ	0xFE1
 30754                           indf2	equ	0xFDF
 30755                           postinc2	equ	0xFDE
 30756                           postdec2	equ	0xFDD
 30757                           plusw2	equ	0xFDB
 30758                           fsr2h	equ	0xFDA
 30759                           fsr2l	equ	0xFD9
 30760                           status	equ	0xFD8
 30761                           
 30762                           	psect	rparam
 30763  0000                     tosu	equ	0xFFF
 30764                           tosh	equ	0xFFE
 30765                           tosl	equ	0xFFD
 30766                           pclatu	equ	0xFFB
 30767                           pclath	equ	0xFFA
 30768                           tblptru	equ	0xFF8
 30769                           tblptrh	equ	0xFF7
 30770                           tblptrl	equ	0xFF6
 30771                           tablat	equ	0xFF5
 30772                           prodh	equ	0xFF4
 30773                           prodl	equ	0xFF3
 30774                           intcon	equ	0xFF2
 30775                           indf0	equ	0xFEF
 30776                           postinc0	equ	0xFEE
 30777                           fsr0h	equ	0xFEA
 30778                           fsr0l	equ	0xFE9
 30779                           wreg	equ	0xFE8
 30780                           indf1	equ	0xFE7
 30781                           postdec1	equ	0xFE5
 30782                           fsr1h	equ	0xFE2
 30783                           fsr1l	equ	0xFE1
 30784                           indf2	equ	0xFDF
 30785                           postinc2	equ	0xFDE
 30786                           postdec2	equ	0xFDD
 30787                           plusw2	equ	0xFDB
 30788                           fsr2h	equ	0xFDA
 30789                           fsr2l	equ	0xFD9
 30790                           status	equ	0xFD8
 30791                           
 30792                           	psect	temp
 30793  000051                     btemp:
 30794                           	opt stack 0
 30795  000051                     	ds	1
 30796  0000                     int$flags	set	btemp
 30797  0000                     wtemp6	set	btemp+1
 30798                           tosu	equ	0xFFF
 30799                           tosh	equ	0xFFE
 30800                           tosl	equ	0xFFD
 30801                           pclatu	equ	0xFFB
 30802                           pclath	equ	0xFFA
 30803                           tblptru	equ	0xFF8
 30804                           tblptrh	equ	0xFF7
 30805                           tblptrl	equ	0xFF6
 30806                           tablat	equ	0xFF5
 30807                           prodh	equ	0xFF4
 30808                           prodl	equ	0xFF3
 30809                           intcon	equ	0xFF2
 30810                           indf0	equ	0xFEF
 30811                           postinc0	equ	0xFEE
 30812                           fsr0h	equ	0xFEA
 30813                           fsr0l	equ	0xFE9
 30814                           wreg	equ	0xFE8
 30815                           indf1	equ	0xFE7
 30816                           postdec1	equ	0xFE5
 30817                           fsr1h	equ	0xFE2
 30818                           fsr1l	equ	0xFE1
 30819                           indf2	equ	0xFDF
 30820                           postinc2	equ	0xFDE
 30821                           postdec2	equ	0xFDD
 30822                           plusw2	equ	0xFDB
 30823                           fsr2h	equ	0xFDA
 30824                           fsr2l	equ	0xFD9
 30825                           status	equ	0xFD8


Data Sizes:
    Strings     165
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     254
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_14(CODE[21]), STR_13(CODE[21]), STR_12(CODE[21]), STR_11(CODE[21]), 
		 -> STR_10(CODE[21]), STR_9(CODE[3]), STR_8(CODE[14]), STR_7(CODE[3]), 
		 -> STR_6(CODE[46]), STR_5(CODE[3]), STR_4(CODE[46]), STR_3(CODE[3]), 
		 -> STR_2(CODE[60]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _move_and_rotate->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _findClosestWall->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1951196
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  215088
                    _findClosestWall
               _irobot_move_straight
                      _irobot_rotate
                   _irobot_song_play
                 _irobot_stop_motion
                           _safeToGo
              _update_bump_and_cliff
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                      9     9      0  103487
                                              4 BANK1      5     5      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  113161
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   19517
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                       10     6      4    9290
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  175549
                                             44 BANK0      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  193880
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93644
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    6491
                                             21 BANK0     18     8     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8425
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3703
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  998400
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362616
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291428
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262117
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94741
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1622
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FE      11       99.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     498      12        0.0%
DATA                 0      0     5C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Sep 14 22:08:03 2017

                                 _update_angle 64BE                                  i2_Timer0_Stop 65BC  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3528                                              _A 004C  
                        __end_of_irobot_rotate 4500                                              l8 3BB6  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6340                                   ___fldiv@sign 00C6  
                                           l11 2F4E                                             l12 2F38  
                                           l90 2E84                                             l85 2D80  
                                           l87 2DEE                                             l89 2E5A  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 63DE  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5C30                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 655A                           ADC_ClockDivision@reg 00BB  
                                          l120 4B06                                            l121 4B1C  
                                          l122 4B32                                            l220 5758  
                                          l117 4B48                                            l221 571C  
                                          l118 4AF0                                            l230 59B4  
                                          l222 5768                                            l223 573A  
                                  ?_LED_Toggle 0001                                            l234 5BD8  
                                          l235 5BA8                                            l227 59D0  
                                          l403 2A0E                                            l412 26EA  
                                          l228 5998                                            l340 47B4  
                                          l404 29AE                                            l237 5BC0  
                                          l421 267E                                            l413 2580  
                                          l341 47C2                                            l405 2A3E  
                                ??_Console_Tab 00C2                                            l430 3D2A  
                                          l414 2706                                            l350 48BC  
                                          l342 47D0                                            l510 1BAC  
                                          l406 29C6                                            l415 25A6  
                                          l351 484C                                            l343 47DE  
                                          l511 1CBC                                            l407 29DE  
                                          l183 4970                                            l432 3D54  
                                          l600 04B2                                            l344 47EC  
                                          l512 1BCE                                            l408 29F6  
                                          l184 494A                                            l433 3D84  
                                          l417 2612                                            l601 0646  
                                          l353 485A                                            l337 4816  
                                          l345 47FA                                            l610 06CE  
                                          l602 04E4                                            l354 4868  
                                          l346 4808                                            l338 47A6  
                                          l370 4746                                            l427 3DAE  
                                          l611 071C                                            l603 0658  
                                          l355 4876                                            l363 4770  
                                          l371 4754                                            l531 13AE  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 4884  
                                          l372 4762                                            l364 4700  
                                          l532 13D2                                            l516 1C16  
                                          l357 4892                                            l509 1CA0  
                                          l614 084C                                            l358 48A0  
                                          l366 470E                                            l526 13F2  
                                          l615 0844                                            l607 07B8  
                                          l359 48AE                                            l367 471C  
                                          l519 1C5E                                            l616 085E  
                                          l608 0680                                            l368 472A  
                                          l528 1410                                            l393 588A  
                                          l617 0848                                            l609 07D6  
                                          l369 4738                                            l529 138E  
                                          l483 1A0C                                            l732 4A8A  
                                          l900 1784                                            l476 1AE4  
                                          l733 4A7E                                            l901 1788  
                                          l389 55E0                                            l477 1956  
                                          l397 5B54                                            l910 17AC  
                                          l902 178C                                            l726 4274  
                                          l478 1B00                                            l486 1A78  
                                          l654 6186                                            l911 17B0  
                                          l903 1790                                            l727 4268  
                                          l479 19A0                                            l655 617E  
                                          l912 17B4                                            l904 1794  
                                          l824 5514                                            l832 5942  
                                          l913 17B8                                            l905 1798  
                                          l921 548A                                            l673 605E  
                                          l657 6182                                            l681 53E2  
                                          l914 17BC                                            l906 179C  
                                          l922 5456                                            l930 39F4  
                                          l915 17C0                                            l907 17A0  
                                          l819 5024                                            l916 17C4  
                                          l908 17A4                                            l860 16E4  
                                          l684 53F8                                            l781 5EA8  
                                          l853 17CC                                            l917 17C8  
                                          l909 17A8                                            l861 16E8  
                                          l597 04C0                                            l870 170C  
                                          l862 16EC                                            l854 16D0  
                                          l598 04A8                                            l678 541E  
                                          l686 5408                                            l871 1710  
                                          l863 16F0                                            l599 04D0  
                                          l679 53D2                                            l880 1734  
                                          l872 1714                                            l864 16F4  
                                          l856 16D4                                            l928 3A74  
                                          l776 5C60                                            l881 1738  
                                          l873 1718                                            l865 16F8  
                                          l857 16D8                                            l929 3A44  
                                          l890 175C                                            l882 173C  
                                          l874 171C                                            l866 16FC  
                                          l858 16DC                                            l891 1760  
                                          l883 1740                                            l875 1720  
                                          l867 1700                                            l859 16E0  
                                          l892 1764                                            l884 1744  
                                          l876 1724                                            l868 1704  
                                          l893 1768                                            l885 1748  
                                          l877 1728                                            l869 1708  
                                          l894 176C                                            l886 174C  
                                          l878 172C                                            l990 4C12  
                                          l895 1770                                            l887 1750  
                                          l879 1730                                            l983 4A0E  
                                          l896 1774                                            l888 1754  
                                          l976 4D2C                                            l992 4C22  
                                          l984 4992                                            l897 1778  
                                          l889 1758                                            l985 4A0A  
                                          l898 177C                                            l978 4D3C  
                                          l899 1780                                            l997 57F0  
                                          l999 5814                                            _PR2 000FCB  
                                          _dip 033A                                            _val 007F  
                              __end_of_ADC_Off 659C                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 5E7C  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5BA2  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 64AC  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 5D82  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 59E2  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 45AA  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5C30  
                                         l1000 5830                                           l1010 3E1E  
                                         l1004 5680                                  ?_Byte_GetZone 00BA  
                                         l1005 56AE                                           l1200 4194  
                                         l1040 2734                                           l1201 41E8  
                                         l1009 3E2A                                           l1041 273A  
                                         l1202 4204                                           l1042 2740  
                                         l1043 2746                                           l1204 422E  
                                         l1300 4DBE                                           l1036 2890  
                                         l1044 274C                                           l1205 4214  
                                         l1301 4DC2                                           l1045 2752  
                                         l1037 272E                                           l2021 5610  
                                         l2101 2BD0                                           l1302 4DCC  
                                         l1062 1F68                                           l2110 5CF6  
                                         l2030 5608                                           l2022 55EC  
                                         l2102 2B14                                           l1207 4240  
                                         l1303 4DDA                                           l1063 1F96  
                                         l1047 27F8                                           l2031 560C  
                                         l2103 2B5C                                           l1056 1DF8  
                                         l2112 5CE2                                           l2024 55F0  
                                         l2040 3644                                           l2104 2B1A  
                                         l1313 5B82                                           l1153 21D6  
                                         l3001 22CE                                           l1057 1FBE  
                                         l2025 55F4                                           l2041 364A  
                                         l3010 2394                                           l3002 22B0  
                                         l1082 3CA4                                           l1058 1E00  
                                         l1146 4F46                                           l2114 5CEA  
                                         l2026 55F8                                           l2042 3650  
                                         l1059 1E2A                                           l2027 55FC  
                                         l2035 36DC                                           l2051 36B0  
                                         l2043 3656                                           l3004 231C  
                                         l1084 3CAC                                           l2028 5600  
                                         l2044 365C                                           l2036 362E  
                                         l2301 4680                                           l3005 230C  
                                         l1077 3C74                                           l2029 5604  
                                         l2310 3FB4                                           l1254 64A0  
                                         l2118 54FE                                           l1158 5DFE  
                                         l2070 4CEC                                           l2062 4CA6  
                                         l2046 3670                                           l2038 3638  
                                         l2311 3FE0                                           l2119 54C0  
                                         l2303 46B2                                           l1079 3C84  
                                         l2039 363E                                           l1280 4E40  
                                         l2144 58C8                                           l2400 3814  
                                         l3009 2342                                           l2049 369C  
                                         l2161 44D8                                           l2401 381A  
                                         l2074 4D0A                                           l2066 4CC6  
                                         l2058 4C8C                                           l2162 44C4  
                                         l2330 14B4                                           l2402 3820  
                                         l1283 4EA2                                           l2139 4380  
                                         l2323 4ED6                                           l2331 14E4  
                                         l1276 4E28                                           l2420 23F8  
                                         l2316 5AA6                                           l2156 4484  
                                         l2324 4EC2                                           l2309 3F88  
                                         l2333 152E                                           l1294 4DE2  
                                         l1630 3362                                           l2350 09FA  
                                         l2158 448A                                           l1295 4DA8  
                                         l1631 33BE                                           l2431 2486  
                                         l2095 2AD0                                           l2319 5AC2  
                                         l2351 0A2A                                           l2159 44AC  
                                         l2335 15F0                                           l1296 4E0C  
                                         l1632 33A2                                           l2168 5C14  
                                         l2096 2A8A                                           l2336 154E  
                                         l1297 4DB2                                           l2425 2434  
                                         l2353 0A76                                           l1298 4DB6  
                                         l1730 5D16                                           l2426 23D0  
                                         l2418 23B4                                           l2098 2B00  
                                         l2346 0926                                           l2338 1586  
                                         l1299 4DBA                                           l1627 340A  
                                         l2611 406A                                           l2435 24DC  
                                         l2427 23E8                                           l2419 23C8  
                                         l2099 2AE4                                           l2363 0C82  
                                         l2355 0B38                                           l1724 5E4A  
                                         l1732 5D3E                                           l1628 3400  
                                         l2612 405E                                           l2436 253A  
                                         l2428 23F2                                           l2364 0BE8  
                                         l2356 0A96                                           l2348 095A  
                                         l2372 37D2                                           l1629 3380  
                                         l2437 24E2                                           l2429 246C  
                                         l2373 3788                                           l1726 5E78  
                                         l2366 0C20                                           l2358 0ACE  
                                         l2382 3ED4                                           l1735 6374  
                                         l2615 40A0                                           l2383 3ED0  
                                         l2616 40AE                                           l2608 402A  
                                         l2617 40C2                                           l2609 4040  
                                         l2385 3F20                                           l2386 3F0E  
                                         l1827 3202                                           l2395 3802  
                                         l1828 3222                                           l2396 38AE  
                                         l2397 3808                                           l2670 3442  
                                         l2399 380E                                           l1784 309C  
                                         l2672 34C4                                           l1873 5EEE  
                                         l1785 30AA                                           l2681 3516  
                                         l2673 34B0                                           l1787 30B4  
                                         l2931 0CB6                                           l2844 50CC  
                                         l2932 0CE4                                           l2845 50C0  
                                         l2941 0DC4                                           l2933 0CDA  
                                         l2854 5798                                           l2950 0EE8  
                                         l2942 0EC6                                           l2678 34F0  
                                         l2855 578C                                           l2791 410A  
                                         l2951 0EFE                                           l2943 0E42  
                                         l2935 0D14                                           l2679 34E0  
                                         l2848 5102                                           l2792 40FA  
                                         l2960 1020                                           l2944 0E7A  
                                         l2936 0D42                                           l2849 5110  
                                         l2961 1030                                           l2945 0E6E  
                                         l2937 0D38                                           l2858 57C2  
                                         l2962 1034                                           l2946 0EC2  
                                         l2970 00A2                                           l2859 57D0  
                                         l2795 4164                                           l2939 0D96  
                                         l2971 009C                                           l2796 4176  
                                         l2956 0F6C                                           l2972 00B4  
                                         l2949 0F12                                           l2973 00DC  
                                         l2965 001E                                           l2958 0FBC  
                                         l2990 048C                                           l2966 0048  
                                         l2959 0FEA                                           l2991 0482  
                                         l2967 0042                                           l2984 03BE  
                                         l2968 005A                                           l2977 0364  
                                         l2969 0078                                           l2986 040E  
                                         l2978 033A                                           l2994 2222  
                                         l2987 0434                                           l2979 0350  
                                         l2995 2232                                           l2996 225A  
                                         l2989 0462                                           l2998 2272  
                                         l2999 2262                                 ??_Console_Init 00BA  
                        Port_SetPinType@pInput 00E0                                           STR_1 FFFB  
                                         STR_2 FF59                                           STR_3 FFFB  
                                         STR_4 FF95                                           STR_5 FFFB  
                                         STR_6 FF95                                           STR_7 FFFB  
                                         STR_8 FFED                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 48EC                       __end_of_irobot_song_play 6498  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u9100 597A  
                                         u9030 4070                            __end_of_GetPortTRIS 47A0  
                                         u9210 5CD6                                           u9300 5552  
                                         u9080 5B00                                           u9240 4110  
                                         u9400 5FF8                                           u9154 4BC2  
                                         u9155 4BBC                                           u8604 56CE  
                                         u8620 4FBE                                           u8605 56C8  
                                         u9085 5AFA                                           u9405 5FF2  
                                         u8614 5700                                           u8615 56FA  
                                         u8560 4A54                                           u8800 579E  
                                         u8650 5CAA                                           u9610 51FE  
                                         u8580 4ABA                                           u9380 326E  
                                         u8740 4C66                                           u8900 56A6  
                                         u9365 31BA                                           u8750 4C6C  
                                         u8655 5CA4                                           u8567 4A4A  
                                         u9800 3CFA                                           u8585 4AB4  
                                         u8825 64DE                                           u9705 10D8  
                                         u8770 50D2                                           u9538 2EE2  
                                         u8674 42B0                                           u8826 64E0  
                                         u9539 2EF6                                           u8675 42AA  
                                         u9715 1258                                           _SPI1 0376  
                                         u8684 42E2                                           _SPI2 0381  
                                         u8685 42DC                                           u9725 12D6  
                                         u9910 3340                                           u9735 1318  
                                         u8880 3A60                                           u9920 3354  
                                         u9840 4F94                                           u9745 135A  
                                         u9930 3394                                           u8890 567C  
                                         u9675 1086                                           u9835 4F56  
                                         u9588 301E                                           u9685 109E  
                                         u9790 3CEE                                           u9695 10B6  
                                         u9880 3108                                           _TMR0 000FD6  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 606C                                           _main 37FE  
                   irobot_leds@powerLuminosity 00CC                                           _init 4654  
                                         _mode 0073                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 39B6  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 50A2                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FF4B                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6230  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5940  
                             __end_of_LCD_Init 2ED0                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 5778  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 21D8                                          l12306 3A60  
                                        l12172 4C08                                          l14022 5DCC  
                                        l13152 51E2                                          l12178 4C18  
                                        l12612 6502                                          l13148 51D4  
                                        l13412 4F3E                                          l12358 422E  
                                        l14310 2DEE                                          l12704 5514  
                                        l12712 5552                                          l14320 2E92  
                                        l12706 5526                                          l12482 5942  
                                        l13442 309C                                          l14226 248C  
                                        l14332 4D22                                          l12484 5954  
                                        l13380 3C7A                                          l13374 3C6A  
                                        l14360 21AA                                          l13640 1020  
                                        l16200 15F0                                          l14338 4D32  
                                        l13904 5910                                          l12786 3202  
                                        l16314 0A96                                          l13908 591E  
                                        l16332 0B38                               __end_of_HMI_Poll 5360  
                                        l16182 154E                                          l13944 29A4  
                                        l16408 3ED0                                          l16348 0BE8  
                                        l13986 1E20                                          _I2C1T 0040  
                                        _I2C2T 03C8                                  ___fltol@sign1 00F7  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 1058                                __end_of___awdiv 40CC  
                        irobot_rotate@isScript 00DC                                          ?_itos 00C6  
                                        STR_10 FFD8                                          STR_11 FFC3  
                                        STR_12 FFC3                                          STR_13 FFC3  
                                        STR_14 FFC3                                __end_of___flmul 04A6  
                              __end_of___fltol 3528                                _Event_DIPSwitch 60CC  
                              __end_of___lldiv 4188                                          u10120 0F66  
                                        u11000 34FA                                          u11020 2D7E  
                                        u10150 0FD0                                          u10310 03B8  
                                        u10160 0FFE                                          u10250 00C8  
                                        u11060 2E92                                          u10340 0422  
                                        u10260 02DC                                          u10350 0448  
                                        u10430 232A                                          u10265 02D0  
                                        u11090 4D94                        __size_of_HMI_LeftSwitch 0018  
                                        u11180 5A9A                                ___awdiv@divisor 00BC  
                                        u10710 5B7C                                          u10550 593A  
                                        u11190 5ABC                                          u10528 3C22  
                                        u10640 1FA6                                          u10580 2A44  
                                        u10910 24C8                                          u10830 4478  
                                        u10744 6024                                          u10745 601E  
                                        u11618 3F90                                          u10930 2546  
                                        u11619 3FA4                                          u11638 3FBC  
                                        u11639 3FD0                                          u10960 3462  
                                        u13280 1604                                          u11658 3FE8  
                                        u13610 3F40                                          u11659 3FFC  
                                        u10965 3456                                          u11598 3F64  
                                        u13198 5E14                                          u13470 0B4C  
                                        u11599 3F78                                          u13199 5E2A  
                                        u13570 3EE8                                          _INDEX 008F  
                              __end_of___lwdiv 511A                                          _MASKS FD5B  
                              __end_of___lwmod 57DA                                          i2l430 45C2  
                                        i2l432 45E8                                          i2l433 4612  
                                        i2l427 4638                                          i2l732 5166  
                                        i2l733 5160                                          i2l832 5D84  
                                        i2l781 60BA                                ___awdiv@counter 00BE  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00D0                                __end_of_getMode 400E  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03B4  
                                        _PortB 03AA                                          _PortC 00A7  
                                        _PortD 009D                                          _PortE 0093  
                                        _PortF 03BE                                          _PortG 03A0  
                      __end_of_Port_SetPinType 2728                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C6                          ??_irobot_led_power_on 00CE  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FD5B                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 08C4  
                                        _mode2 3718                                          _mode3 646E  
                                        _mode4 3E8E                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 3E8E  
                             __end_of_MXK_Init 2D5E                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 64E2                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 543C                          __end_ofi2_MXK_Release 65C8  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 54A8                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 4EA8  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 5360  
                              _findClosestWall 1412                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BB  
                               _LCD_Word_Write 628C                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F6                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 00CA                                   ?_irobot_init 0001  
                              __initialization 43A8                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 00CA                            __end_of_Byte_GetBit 600A  
                       irobot_leds@powerColour 00CB                                   __end_of_main 38DE  
                                 __end_of_init 46FA               irobot_query_and_update@packetIDs 00CF  
                                 __end_of_itos 3A8E                           HMI_SetButton@reindex 00BC  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 5716  
                             __end_of_InitList FD31                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 64E2                                      ??_ADC_Off 00BA  
                      __end_of_update_distance 64BE                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 00C2                                         ??_main 03FC  
                                       ??_init 00F9                                         ??_itos 00CA  
                      _Console_MakeField$10974 00C8                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C9                              __end_of_LCD_Reset 5A32  
                            Port_SetPin@pValue 00CC                                      ??_LED_Set 00CF  
                            _MXK_InitDIPSwitch 62E6                              GetPortPORT@pInput 00BC  
                       Port_CheckPairType@Pin1 00E4                         Port_CheckPairType@Pin2 00E5  
                            __end_of_LCD_Write 61EC                                    _GetPortPORT 4846  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 46FA  
                              ??_LCD_DrawField 00D6                     __end_of_PortProperty_Valid 5028  
                             __end_of_Port_Set 1412                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3C38  
                          __end_of_Button_Poll 3036                              Word_GetPair@pPair 00C8  
                      LCD_FillRectangle@pPoint 00C5                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4B66                                      ??_SPI_DCS 00BC  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                           _angleToClosestWall 006B                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 65B0  
                                _HMI_SetNumber 6152                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4BF6  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 358E  
                                       i2l1631 35DA                                         i2l1632 35C6  
                                       i2l1730 5FB2                                         i2l1627 3616  
                                       i2l1732 5FD2                                         i2l1628 360C  
                                       i2l1629 35A4                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9624 5D84                                         i2l9626 5D94  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 62AA                                 _Timer0_Restart 654E  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 23A6  
                               i2_MXK_SwitchTo 5FA0                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 62C8  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 557C                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 5992                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 60FA                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 4F2A  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3A8E  
                   __end_of_load_iRScriptStack 5512                                     _Motor_Move 5F30  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 32F6                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 60FA                                         ___wmul 5F6A  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00D0                                         _lMotor 0081  
                                    ??___fltol 0100                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 0396  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 1BA4  
                     i2Byte_GetZone@pChunkSize 0005                               __end_of_safeToGo 5AC8  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4D9A  
                            GetPortTRIS@pInput 00BC                             __size_of_Reset_Low 001E  
                                       clear_0 4410                                         clear_1 4422  
                                       clear_2 442E                                         clear_3 443A  
                                       clear_4 4446                               ___awdiv@quotient 00C0  
                   irobot_stop_motion@isScript 00D3                                  ?_eusart_getch 0001  
                                   Port_Init@i 0106                                     _iRDistance 007B  
                            __end_of_MXK_Queue 6528                     __end_ofHMI_SetButton@F7213 FD68  
                                    ??_getMode 00DE                                     _iRBumpLeft 0089  
                                       _printf 23A6                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 6304                                  _ADC_Calibrate 6498  
                                   _iRDropLeft 0087                                 HMI_SetButton@v 00C1  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BB  
                                  _Console_Tab 3DCC                            LCD_Word_Write@value 00BF  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BD                       Port_CheckPortType@Output 00F3  
                                    ?_ADC_Init 00BE                             _twos_complement_of 5CBC  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC7E  
                  __end_ofTimer2_Init@PRESCALE FD6B                       Port_CheckPortType@pDrive 00F2  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00F0  
                                ??_Port_SetPin 00CD                                      ??_reverse 00BE  
                                   _StepRotate 0071                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00E0                                         putch@c 00CE  
                            Motor_Speed@pMotor 00D5                                 ?_HMI_SetNumber 00D0  
                               i2_Word_GetPair 609C                        __end_of_Configure_GPIOs 53D0  
                          irobot_leds@isScript 00CD                        __end_of_findClosestWall 16CA  
                             ??_MXK_TestButton 00C0                         __end_of_Timer0_Restart 655A  
                                Set_Rotation@m 00BF                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BA                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 5FD6  
                                 ___xxtofl@arg 00C4                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C3                                   ___xxtofl@val 00BA  
                        _update_bump_and_cliff 5EF6                                ?_LCD_Word_Write 00BF  
                                   __accesstop 0060                        __end_of__initialization 444C  
                                    ?_LCD_Fill 00C3          irobot_query_and_update@packetVariable 00D3  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EC  
                                  _Byte_GetBit 5FD6                                     _Stepstomin 006F  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 6566  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C2  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BA  
                                   ___fltol@f1 00F3                                    _Byte_SetBit 56B2  
                                __end_of_MASKS FD64                                 _PortA_Property FF57  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C5  
                                    LCD_Fill@j 00C6                            load_iRScriptStack@i 00C9  
                                    LCD_Init@i 00F1                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF55                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 659C                                   __pidataBANK3 6536  
            irobot_move_straight@straightSpeed 00D3                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6340                                Console_Render@x 00E4  
                              Console_Render@y 00E5                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD31  
                         __end_of_Byte_GetZone 4ACE                                  __end_of_mode1 0C98  
                                __end_of_mode2 37FE                                  __end_of_mode3 6484  
                                __end_of_mode4 3F4E                           ??_twos_complement_of 00BC  
                            irobot_leds@LEDBit 00CA                                 _PortC_Property FF53  
                          __end_of_Timer0_Init 3196                                  __end_of_putch 64F0  
                               ??_eusart_getch 00BA                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 32F6                            __end_of_Timer0_Stop 65AA  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E7  
                             ?_update_distance 0001                                      ?_SPI_Send 00BA  
                               ??_eusart_putch 00BA                                    _Button_Init 3B64  
                            Port_SetType@pType 00F6                                    _Button_Poll 2ED0  
                         __end_of_Byte_SetByte 651A                           __end_of_Byte_SetPair 620E  
                               _HMI_LeftSwitch 643E                                 _PortD_Property FF51  
                         __end_of_Byte_SetQuad 6230                                   ??_LED_Toggle 00D2  
                                 ??_HMI_GetBar 00BA                     eusart_putch@eusartSendChar 00BA  
                         __end_of_Byte_SetZone 42F8                            __end_of_Motor_Speed 6152  
                               _HMI_DownSwitch 63F6                                  SPI_Send@pData 00BC  
                        __end_of_MXK_DIPSwitch 63DE                                   ??_HMI_SetBar 00BA  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C2  
                               _PortE_Property FF4F                                     ??_ADC_Init 00C1  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 60CC  
                      irobot_rotate@angleTotal 00DD                                 _PortF_Property FF4D  
                      Port_CheckQuadType@Pair1 00ED                        Port_CheckQuadType@Pair2 00EE  
                     MXK_BlockSwitchTo@pModule 00C1                                        ??_mode1 03F4  
                                      ??_mode2 00E6                                        ??_mode3 00E1  
                                      ??_mode4 00F9                                        ?_ADC_On 0001  
                            _Console_Backspace 57DA                                ?_Timer0_Restart 0001  
                                      ??_putch 00CE                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5D42                              __end_of_ToSegment 194E  
                               _PortG_Property FF4B                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5CBC                             _irobot_stop_motion 5BEA  
                      Port_CheckQuadType@pQuad 00EB                                reverse@iterator 00BF  
                             ??_SPI_DisableISR 00BC                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 62C8                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C5  
                                   ??_LCD_Init 00EF                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 3DCC                         __end_of_PortA_Property FF59  
             irobot_led_power_on@powerOnColour 00CE                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BA                                     ??_LED_Init 00E7  
                     ADC_ClockDivision@pDivide 00BA                             Byte_SetByte@pValue 00BC  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5B5A                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F5                             ??_irobot_song_play 00BB  
                                   ??_HMI_Poll 00DE                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E7                         __end_of_PortB_Property FF57  
                                ?_Timer0_Start 00BA                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2A58                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E2                             __end_of_LED_Toggle 5BEA  
                           __end_of_HMI_GetBar 65BC                       LCD_FillRectangle@pColour 00C3  
                                   _angleTotal 0075                            ??_Console_Backspace 00BC  
                            Set_Addr_Window@xe 00C0                              Set_Addr_Window@ye 00C1  
                            Set_Addr_Window@xs 00C2                              Set_Addr_Window@ys 00BF  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 6584                         __end_of_PortC_Property FF55  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 5E00  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 6456                         __end_of_PortD_Property FF53  
                                      _ADC_AN0 00B1                                        _ADC_AN1 03DF  
                                      _ADC_AN2 03DA                                        _ADC_AN3 03D5  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 3C38                                        _ADC_Off 6594  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 640E                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF51                            Console_Render@F6956 03E8  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 6426  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5992  
                      _Console_IncrementCursor 564C                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF4F                                    _gBackcolour 0085  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 5836  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 6322                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF4D                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 603C                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 00AA  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 657A  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 008B  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD6B  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5A7E  
                                    _ADC_Start 4E24                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 3036  
                                  _Timer2_Init 3196                                        __Lparam 0000  
                                  _Timer0_Stop 65A4                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD51  
                                      _iRAngle 0079                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 3D08                              _Console_PrintChar 2728  
                                  _Motor_Speed 6128                                        _Stepper 03CF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 0C98                                        ___awdiv 400E  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 341C                                        _lBuffer 04AA  
                                      ___lldiv 40CC                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 50A2  
                                      ___lwmod 5778                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4C84                             ?_Console_PrintChar 0001  
                                      __pcinit 43A8                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 3F4E  
                                      __ptext0 37FE                                        __ptext1 3E8E  
                                      __ptext2 1412                                        __ptext3 646E  
                                      __ptext4 4EA8                                        __ptext5 4456  
                                      __ptext6 3718                                        __ptext7 63AE  
                                      __ptext8 08C4                                        __ptext9 5A7E  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 635C                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD51                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5C76  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 00B6  
                          LCD_DrawRectangle@p4 03E4                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BC                                     ??_delay_us 00BC  
                                      _reverse 543C                                      _DIPSwitch 038C  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3D08  
                                  _iRBumpRight 008A                                 LCD_DrawField@i 00DC  
                                    _LCD_Reset 59E2                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 61CA                                    _iRDropRight 0088  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00BA  
                         end_of_initialization 444C                            ADC_SetupIO@pChannel 00BC  
                            ??_get_packet_size 00BA  irobot_query_and_update@numberOfPacketRequests 00D2  
                                   delay_us@us 00BA                              ??_HMI_SetSegments 00BD  
                      Console_PrintChar@pInput 00CD                                   _Console_Init 4D10  
                         __end_of_eusart_getch 658C                        _irobot_query_and_update 2A58  
                                   ??_safeToGo 00DE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 55E6                           __end_of_eusart_putch 650C  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 4FAC                                      i2u1332_48 6112  
                           Byte_SetQuad@pInput 00C5                             SPI_MinSpeed@pInput 00C9  
                           Byte_SetQuad@pValue 00C8                            __end_of_ADC_SetupIO 603C  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 28C6  
                          __end_of_ADC_Voltage 39B6                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 5890                                        printf@c 00E0  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 3718  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5B5A                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5DC2                             Button_Init@pInitIO 0104  
                                _irobot_rotate 4456                          Timer0_Init@pFrequency 00C7  
                            ?_Port_SetQuadType 00F0                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BE                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F4  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C0  
                        Console_Render@lCursor 00E0                             _load_iRScriptStack 54A8  
                                    _MXK_Queue 651A                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C2                               Byte_GetZone@pMax 00BC  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C6                                _Set_Addr_Window 4500  
                               SPI_Init@pClock 00E7                               ??_LCD_Word_Write 00C1  
                              _sort_iRBumpDrop 4C84                              ??_move_and_rotate 00E1  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4990                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4B66  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 6322  
                           HMI_SetButton@F7213 FD64                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 4A32                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 65B6                                 _Port_TogglePin 606C  
                             _Event_TestButton 5EBA                                    ___flmul@grs 00D6  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 650C  
                                 _Byte_SetPair 61EC                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 620E                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4242                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 65C2                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D7  
                               __end_of_OutSeg 4FAC                           ??_load_iRScriptStack 00C4  
                 __end_of_irobot_move_straight 63C6                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 5FA0                          __end_of_HMI_DIPSwitch 63F6  
                                __pidataCOMRAM 6566                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D5                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 654E                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6594                                 __end_of_printf 2568  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BA  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C6  
                             ??_Timer0_Restart 00BA                           __end_of_Timer0_Start 61CA  
                           Port_SetType@Output 0100                            start_initialization 43A8  
                                   ?_MXK_Queue 00BA                       PortProperty_Valid@Errors 00CF  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 5190  
                           Port_SetType@pInput 00F4                                 _ADC_SetChannel 6378  
                                   HMI_Init@in 00F5                            HMI_SetNumber@pInput 00D0  
                        __end_ofi2_Port_SetPin 4654                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00BB                         __end_of_Port_TogglePin 609C  
                                ?_Word_SetPair 00C9                              Byte_SetBit@pInput 00BA  
                                     ??_ADC_On 00BA                                 ??_MXK_SwitchTo 00C0  
                            Byte_SetBit@pValue 00BD                             ?_LCD_FillRectangle 00C3  
                    ??_irobot_query_and_update 00CA                            _Console_ResetCursor 6250  
                  PortProperty_Valid@pPinDrive 00CB                                    _ADC_SetupIO 600A  
                         MXK_BlockSwitchTo@CUR 00C0                       PortProperty_Valid@pInput 00C9  
                                i2_MXK_Release 65C2                                    _ADC_Voltage 38DE  
                       LCD_FillRectangle@pSize 00C9                                 SPI_Send@pInput 00BA  
                                 ??_Reset_High 00CE                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00CB                          Port_SetQuadType@pQuad 00F2  
                                    _ToSegment 16CA                            ??_LCD_FillRectangle 00CD  
                        Port_SetQuadType@pType 00F3                                _Console_NewLine 4990  
                               ??_SPI_MinSpeed 00CB                                    ??_ADC_Start 00BE  
                                 _HMI_UpSwitch 640E                                      _Reset_Low 62AA  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 65AA  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D7                                 ADC_Init@pInput 00BE  
                                    _gCharSize 03F0                               Timer2_Init@INDEX 008D  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 00EB                                       ??_OutSeg 00BE  
                                    OutSeg@out 00C1                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 00C1                                   ??_Motor_Step 00CE  
                                    _iRAngleSS 031E                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 00C3  
                                     ??___wmul 00BE                           ?_Console_ResetCursor 0001  
                                    _Port_Init 28C6                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03E8                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00BD                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BA  
                           Byte_SetZone@pValue 00BF                                  Mode_Set@pMode 00BA  
                                     ??_printf 00D9                        __end_of_Set_Addr_Window 45AA  
                     Port_CheckQuadType@Output 00EF                        __end_of_sort_iRBumpDrop 4D10  
                                    _gLineSize 03EC                       Port_CheckQuadType@pDrive 00EC  
                               ??_Word_GetPair 00C9                       Port_CheckQuadType@pInput 00E9  
                         __end_of_Port_GetQuad 5B12                                      ___fldiv@a 00BE  
                                    ___fldiv@b 00BA                      __end_of_LCD_FillRectangle 5204  
                                  __pbssBIGRAM 04AA                         __end_of_ADC_SetChannel 6394  
                                     ?_LED_Set 00CE                                      ___flmul@a 00CC  
                                    ___flmul@b 00C8                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 00BC                             __end_of_Reset_High 62E6  
                                __pcstackBANK0 00BA                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F4  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 6128                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1DCE                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3B64                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 5F6A                             __end_of_Motor_Step 341C  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E6              twos_complement_of@complementValue 00BA  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00E3  
                     Port_CheckPairType@pInput 00E0                                 reverse@tempVar 00BE  
                           _MXK_InitTestButton 6304                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                ??_irobot_rotate 00DB  
                                ??_irobot_move 00CE                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C7  
                             ??_HMI_DownSwitch 00C0                                      __pintcode 1408  
                                __pmediumconst FC7E                                   ?_Motor_Speed 00D5  
                        ??_Console_ResetCursor 00BA                                       ?___fldiv 00BA  
                                     ?___awdiv 00BA                                      __ptext100 658C  
                                    __ptext101 617C                                      __ptext110 61EC  
                                    __ptext102 603C                                      __ptext111 5836  
                                    __ptext103 3B64                                      __ptext120 6378  
                                    __ptext112 557C                                      __ptext104 62E6  
                                    __ptext121 5B5A                                      __ptext113 4FAC  
                                    __ptext105 65AA                                      __ptext130 63DE  
                                    __ptext122 4D9A                                      __ptext114 620E  
                                    __ptext106 6304                                      __ptext131 63F6  
                                    __ptext123 6498                                      __ptext115 4242  
                                    __ptext107 2568                                      __ptext140 6152  
                                    __ptext132 640E                                      __ptext124 65B0  
                                    __ptext116 4D10                                      __ptext108 194E  
                                    __ptext141 39B6                                      __ptext133 6426  
                                    __ptext125 6594                                      __ptext117 4E24  
                                    __ptext109 5C30                                      __ptext150 3D08  
                                    __ptext142 543C                                      __ptext134 643E  
                                    __ptext126 3F4E                                      __ptext118 5028  
                                    __ptext151 5E7C                                      __ptext143 5778  
                                    __ptext135 6456                                      __ptext127 52EC  
                                    __ptext119 600A                                      __ptext160 3528  
                                    __ptext152 6322                                      __ptext144 50A2  
                                    __ptext136 5AC8                                      __ptext128 2ED0  
                                    __ptext161 65BC                                      __ptext153 4A32  
                                    __ptext145 4188                                      __ptext137 60CC  
                                    __ptext129 63C6                                      __ptext170 65C2  
                                    __ptext162 655A                                      __ptext154 56B2  
                                    __ptext146 16CA                                      __ptext138 1404  
                                    __ptext171 6528                                      __ptext163 45AA  
                                    __ptext155 5C76                                      __ptext147 4B66  
                                    __ptext139 5EBA                __end_of_irobot_query_and_update 2BDE  
                                    __ptext172 0000                                      __ptext164 609C  
                                    __ptext156 657A                                      __ptext148 5BA2  
                                    __ptext165 6394                                      __ptext157 65B6  
                                    __ptext149 606C                                      __ptext166 511A  
                                    _pShiftVal 007D                                      __ptext167 5A32  
                                    __ptext159 60FA                                      __ptext168 5FA0  
                                    __ptext169 5D82                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 47A0                                       ?_getMode 0001  
                                 _eusart_getch 6584                    __end_ofTimer0_Init@PRESCALE FD41  
                              _get_packet_size 55E6                                   _eusart_putch 64FE  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 4188  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 5028  
                 irobot_rotate@rotateDirection 00DF                          __end_of_HMI_SetButton 4BF6  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 617C                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 6426                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00E6  
                               __size_of_mode3 0016                                 __size_of_mode4 00C0  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 4A32  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 65B0  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 63AE  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 6394  
                                     _LCD_Fill 58E8                                       _LCD_Init 2D5E  
                               ___wmul@product 00BE                                       _HMIBoard 033C  
                               i2_Byte_GetZone 511A                                       _LED_Init 5716  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 1FDE  
                                     _HMI_Poll 52EC                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 628C  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5D82  
                     __size_of_Configure_GPIOs 0070                       __size_of_findClosestWall 02B8  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 00C7  
                                     i2u502_40 513C                                       i2u502_47 5132  
                                     i2u504_40 5184                                       i2u504_45 5180  
                                     _PIR1bits 000F9E                                       _PIR3bits 000FA4  
                                     i2u630_40 5DB0                                       i2u626_44 5A46  
                                     i2u626_45 5A42                                       i2u723_40 356C  
                                     i2u627_44 5A6C                                       i2u627_45 5A68  
                                     i2u724_40 3580                                       i2u725_40 35B8  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                                    _mode1$15597 03F8  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 00BB  
                             HMI_SetBar@pValue 00BA                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00E4                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4846  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4ACE  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5D42  
                           _Port_CheckPairType 557C                                       _MXK_Init 2BDE  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 4EA8  
                              MXK_SwitchTo@CUR 00C0                          __end_of_ADC_Calibrate 64AC  
                          __end_of_irobot_leds 58E8                                       _SPI_Init 04A6  
                          __end_of_irobot_init 64FE                       __end_of_Event_TestButton 5EF6  
                                     _SPI_Send 53D0                            __end_of_irobot_move 43A8  
                                    _rx_assign 3628                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BF                              ___wmul@multiplier 00BA  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BE  
                                   printf@flag 00DB                           Timer2_Init@pCPUClock 00D0  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 5278                                     printf@prec 00DA  
                        Motor_Speed@pFrequency 00D7                              Byte_GetBit@pInput 00BA  
                          Port_SetPinType@pPin 00E2                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 63C6                             _Port_CheckQuadType 5836  
                          ?_Port_CheckPairType 00E0                           __end_of_SPI_MinSpeed 52EC  
                                ??_MXK_Dequeue 00D0                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5B12  
                         __end_of_update_angle 64D0                          Button_Poll@pIncrement 00D7  
                      PortProperty_Valid@F6830 FD41                           __end_ofi2_Motor_Step 3628  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 43BC                                      copy_data1 43DC  
                                    copy_data2 43FC                                  ??_MXK_Release 00BA  
                       __end_ofi2_Byte_GetPair 63AE                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E9  
                        ?_irobot_move_straight 00D3                         __end_ofi2_Byte_GetZone 5190  
                          __end_ofi2_MXK_Queue 6536                                      mode2@dist 00E6  
                          ?_Port_CheckPortType 00F0                                itos@destination 00C8  
                                     _InitList FC7F                     __end_of_irobot_init_song_0 6250  
                         _Motor_Step$intlevel0 32FC                                       _Mode_Set 64D0  
                           Port_GetQuad@Output 00BF                              ??_update_distance 00D7  
                                  ??_ToSegment 00BA                                   _ISR_Function 1408  
                                 _Timer0_Clear 6542                             Port_GetQuad@pInput 00BA  
                                 _Timer2_Clear 658C                           __end_of_Word_GetPair 5EBA  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E4  
                                  ??_Reset_Low 00CE                                       __Hrparam 0000  
                                 _Timer0_Start 61A4                                   OutSeg@pInput 00C0  
                               _Console_Render 1DCE                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CC                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00BE  
                                     _Port_Set 1058                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5C76  
                      __end_of_get_packet_size 564C                                    ??_Port_Init 0104  
                      __end_of_HMI_SetSegments 4242                           ??_Port_CheckQuadType 00ED  
                             __size_of___fldiv 03C0                               _irobot_song_play 6484  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5E3E  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00F3  
                             __size_of___lwmod 0062                                       _lBufferX 0091  
                                     _lBufferY 0090                            Timer2_Init@PRESCALE FD68  
                        _findClosestWall$15596 0105                                     ?_rx_assign 00BB  
                              LCD_Fill@pColour 00C3                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0083  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 643E  
                       Byte_GetZone@pChunkSize 00BE                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00BE                          __size_of_Port_SetType 022A  
                                reverse@length 00BC                                      itos@input 00C6  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 21D8  
                          irobot_move@isScript 00D2                             Motor_Init@pAddress 00E9  
                                     _delay_ms 5512                                       _delay_us 5940  
                                     _clearall 0092                                ___lwdiv@divisor 00BC  
                              ___lwdiv@counter 00BE                                Port_GetPin@pPin 00BC  
                                     __ptext10 64AC                                       __ptext11 5EF6  
                                     __ptext20 5CBC                                       __ptext12 64BE  
                                     __ptext21 6484                                       __ptext13 2A58  
                                     __ptext30 6250                                       __ptext22 23A6  
                                     __ptext14 3628                                       __ptext31 57DA  
                                     __ptext23 64E2                                       __ptext15 4C84  
                                     __ptext40 5190                                       __ptext32 5D42  
                                     __ptext24 2728                                       __ptext16 55E6  
                                     __ptext41 48EC                                       __ptext33 341C  
                                     __ptext25 3DCC                                       __ptext17 6584  
                                     __ptext50 6340                                       __ptext42 5F6A  
                                     __ptext34 6128                                       __ptext26 400E  
                                     __ptext18 5BEA                                       __ptext51 5890  
                                     __ptext43 3C38                                       __ptext35 5F30  
                                     __ptext27 564C                                       __ptext19 42F8  
                                     __ptext60 2BDE                                       __ptext52 54A8  
                                     __ptext44 5FD6                                       __ptext36 61A4  
                                     __ptext28 4990                                       __ptext61 28C6  
                                     __ptext53 6230                                       __ptext45 38DE  
                                     __ptext37 5DC2                                       __ptext29 4BF6  
                                     __ptext70 5992                                       __ptext62 1BA4  
                                     __ptext54 64F0                                       __ptext46 21D8  
                                     __ptext38 4F2A                                       __ptext71 5E00  
                                     __ptext63 5B12                                       __ptext55 64FE  
                                     __ptext47 0000                                       __ptext39 1DCE  
                          ??_MXK_BlockSwitchTo 00C0                                       __ptext80 2D5E  
                                     __ptext72 32F6                                       __ptext64 1058  
                                     __ptext56 626E                                       __ptext48 0C98  
                                     __ptext81 4ACE                                       __ptext73 65A4  
                                     __ptext65 650C                                       __ptext57 3A8E  
                                     __ptext49 4654                                       __ptext90 59E2  
                                     __ptext82 58E8                                       __ptext74 654E  
                                     __ptext66 46FA                                       __ptext58 3036  
                                     __ptext91 5512                                       __ptext83 4500  
                                     __ptext75 5D00                                       __ptext67 47A0  
                                     __ptext59 6542                                       __ptext92 62AA  
                                     __ptext84 628C                                       __ptext76 635C  
                                     __ptext68 4846                                       __ptext93 62C8  
                                     __ptext85 61CA                                       __ptext77 651A  
                                     __ptext69 5716                                       __ptext94 6570  
                                     __ptext86 53D0                                       __ptext78 5E3E  
                                     __ptext95 1FDE                                       __ptext87 64D0  
                                     __ptext79 5940                                       __ptext96 5278  
                                     __ptext88 5360                                       __ptext97 04A6  
                                     __ptext89 5204                                       __ptext98 3196  
                                     __ptext99 40CC                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4D9A                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 626E                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00D3  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00E1                            __end_of_MXK_Dequeue 5E3E  
                            HMI_SetSegments@in 00BE                          Button_Init@pThreshold 0102  
                                     _safeToGo 5A7E                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C5                         __end_of_Console_Render 1FDE  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5AC8                            __end_of_MXK_Release 6378  
                               _MXK_TestButton 6456                                  i2_Byte_SetBit 5A32  
                      __end_of_move_and_rotate 4F2A                            ??_ADC_ClockDivision 00BA  
                                 _iRDistanceSS 0322                                    _irobot_leds 5890  
                                  _irobot_init 64F0                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 42F8                                 ADC_Voltage@max 00E7  
                               ADC_Voltage@ref 00EB                      __end_of_MXK_BlockSwitchTo 5E7C  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 1BA4  
                                 Port_Set@Type 00E0                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 00EF  
                            ??_findClosestWall 0104                                      printf@val 00DE  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 008E  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5BA2  
                                   _HMI_GetBar 65B6                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DF                               ??_Port_TogglePin 00D1  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00CC                                     _HMI_SetBar 657A  
                                   _HMI_Render 5DC2                               Byte_SetZone@MASK 00C4  
                                  i2_MXK_Queue 6528                      __end_of_ADC_ClockDivision 4E24  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 008C  
                             Byte_SetZone@pMax 00BC                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D5  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00CA                  __end_of_update_bump_and_cliff 5F30  
                           LCD_FillRectangle@i 00CF                             LCD_FillRectangle@j 00D0  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00BA                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00C1                               ___lldiv@dividend 00BA  
                       __end_of_MXK_TestButton 646E                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D6  
                     irobot_query_and_update@j 00D4                                 _SPI_DisableISR 617C  
                   __end_of_twos_complement_of 5D00                       irobot_rotate@rotateAngle 00D7  
                              Port_Init@pInput 0101                                       printf@ap 00DC  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D9                                     _ISR_Enable 6570  
                             ?_HMI_SetSegments 00BB                        Console_MakeField@Column 00C6  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00BA  
                                SPI_DCS@pInput 00BA                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00C0                                    ??_rx_assign 00BD  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00E1                        Console_MakeField@pInput 00C5  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C2  
                                ??_GetPortPORT 00BC                                ___lwmod@divisor 00C3  
                                ??_GetPortTRIS 00BC                          Timer0_Start@pFunction 00BA  
                           Word_SetPair@pInput 00C9                                ___lwmod@counter 00C5  
                           Word_SetPair@pValue 00CC                       ?_irobot_query_and_update 00C0  
                             Motor_Init@pMotor 00E7                                    _MXK_Dequeue 5E00  
                            ADC_Voltage@output 00EF                                  _distanceTotal 0077  
                               LED_Toggle@pLED 00D2                                  _LCD_DrawField 48EC  
                             _Port_SetQuadType 194E                                    _MXK_Release 635C  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5D00  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D5  
                           Byte_GetZone@Offset 00C1                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00CB                                _Port_SetPinType 2568  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C2  
                           Byte_GetZone@pChunk 00BD                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 626E                             Byte_GetZone@pInput 00BA  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 56B2  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 61A4  
                                 _SPI_MaxSpeed 5204              irobot_query_and_update@streamSize 00D1  
                                 _SPI_MinSpeed 5278                             Port_Set@TypeActual 00DE  
                             ?_move_and_rotate 0001  
