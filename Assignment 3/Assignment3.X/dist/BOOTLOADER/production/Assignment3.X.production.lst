

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Sep 26 15:07:33 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     9                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	text78,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	text85,global,reloc=2,class=CODE,delta=1
   110                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text95,global,reloc=2,class=CODE,delta=1
   120                           	psect	text96,global,reloc=2,class=CODE,delta=1
   121                           	psect	text97,global,reloc=2,class=CODE,delta=1
   122                           	psect	text98,global,reloc=2,class=CODE,delta=1
   123                           	psect	text99,global,reloc=2,class=CODE,delta=1
   124                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   125                           	psect	text100,global,reloc=2,class=CODE,delta=1
   126                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   127                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   128  0000                     
   129                           ; Version 1.43
   130                           ; Generated 25/07/2017 GMT
   131                           ; 
   132                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   133                           ; All rights reserved.
   134                           ; 
   135                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   136                           ; 
   137                           ; Redistribution and use in source and binary forms, with or without modification, are
   138                           ; permitted provided that the following conditions are met:
   139                           ; 
   140                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   141                           ;        conditions and the following disclaimer.
   142                           ; 
   143                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   144                           ;        of conditions and the following disclaimer in the documentation and/or other
   145                           ;        materials provided with the distribution.
   146                           ; 
   147                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   148                           ;        software without specific prior written permission.
   149                           ; 
   150                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   151                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   152                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   153                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   154                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   155                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   156                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   157                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   158                           ; 
   159                           ; 
   160                           ; Code-generator required, PIC18F67J50 Definitions
   161                           ; 
   162                           ; SFR Addresses
   163  0000                     
   164 ;; Function _HMI_LeftSwitch is unused but had its address taken
   165  0000                     
   166 ;; Function _HMI_RightSwitch is unused but had its address taken
   167  0000                     
   168 ;; Function _HMI_UpSwitch is unused but had its address taken
   169  0000                     
   170 ;; Function _HMI_DownSwitch is unused but had its address taken
   171  0000                     
   172 ;; Function _HMI_DIPSwitch is unused but had its address taken
   173  0000                     
   174 ;; Function _MXK_TestButton is unused but had its address taken
   175  0000                     
   176 ;; Function _MXK_DIPSwitch is unused but had its address taken
   177  0000                     
   178 ;; Function _Event_NULL is unused but had its address taken
   179  0000                     
   180 ;; Function _Event_DIPSwitch is unused but had its address taken
   181  0000                     
   182 ;; Function _Event_TestButton is unused but had its address taken
   183  0000                     
   184                           	psect	idataCOMRAM
   185  01330A                     __pidataCOMRAM:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _gCursor
   189  01330A  0006               	dw	6
   190  01330C  0006               	dw	6
   191                           
   192                           ;initializer for _yPos
   193  01330E  0002               	dw	2
   194                           
   195                           ;initializer for _xPos
   196  013310  0009               	dw	9
   197                           
   198                           ;initializer for _bearing
   199  013312  0002               	dw	2
   200                           
   201                           ;initializer for _Bus_State
   202  013314  01                 	db	1
   203                           
   204                           ;initializer for _change
   205  013315  01                 	db	1
   206                           
   207                           ;initializer for _A
   208  013316  41                 	db	65
   209                           
   210                           ;initializer for _a
   211  013317  61                 	db	97
   212                           
   213                           ;initializer for _zero
   214  013318  30                 	db	48
   215                           
   216                           ;initializer for _l
   217  013319  80                 	db	128
   218                           
   219                           ;initializer for _w
   220  01331A  80                 	db	128
   221                           
   222                           	psect	idataBANK0
   223  013390                     __pidataBANK0:
   224                           	opt stack 0
   225                           
   226                           ;initializer for _gCharSize
   227  013390  0005               	dw	5
   228  013392  0007               	dw	7
   229                           
   230                           ;initializer for _gridSize
   231  013394  0064               	dw	100
   232                           
   233                           ;initializer for _gForecolour
   234  013396  FFFF               	dw	65535
   235                           
   236                           	psect	idataBANK1
   237  013398                     __pidataBANK1:
   238                           	opt stack 0
   239                           
   240                           ;initializer for Console_Render@F6956
   241  013398  0006               	dw	6
   242  01339A  0006               	dw	6
   243                           
   244                           ;initializer for _gLineSize
   245  01339C  0080               	dw	128
   246  01339E  0007               	dw	7
   247                           
   248                           	psect	idataBANK3
   249  011C04                     __pidataBANK3:
   250                           	opt stack 0
   251                           
   252                           ;initializer for _maze
   253  011C04  009B               	dw	155
   254  011C06  009B               	dw	155
   255  011C08  009B               	dw	155
   256  011C0A  009B               	dw	155
   257  011C0C  009B               	dw	155
   258  011C0E  009B               	dw	155
   259  011C10  009B               	dw	155
   260  011C12  009B               	dw	155
   261  011C14  009B               	dw	155
   262  011C16  009B               	dw	155
   263  011C18  009B               	dw	155
   264  011C1A  009B               	dw	155
   265  011C1C  009A               	dw	154
   266  011C1E  009A               	dw	154
   267  011C20  009A               	dw	154
   268  011C22  009B               	dw	155
   269  011C24  009A               	dw	154
   270  011C26  009B               	dw	155
   271  011C28  0000               	dw	0
   272  011C2A  009A               	dw	154
   273  011C2C  009A               	dw	154
   274  011C2E  009B               	dw	155
   275  011C30  009B               	dw	155
   276  011C32  009A               	dw	154
   277  011C34  009B               	dw	155
   278  011C36  009B               	dw	155
   279  011C38  009B               	dw	155
   280  011C3A  009A               	dw	154
   281  011C3C  009B               	dw	155
   282  011C3E  009B               	dw	155
   283  011C40  009B               	dw	155
   284  011C42  009A               	dw	154
   285  011C44  009B               	dw	155
   286  011C46  009B               	dw	155
   287  011C48  009A               	dw	154
   288  011C4A  009A               	dw	154
   289  011C4C  009A               	dw	154
   290  011C4E  009A               	dw	154
   291  011C50  009A               	dw	154
   292  011C52  009A               	dw	154
   293  011C54  009A               	dw	154
   294  011C56  009A               	dw	154
   295  011C58  009A               	dw	154
   296  011C5A  009B               	dw	155
   297  011C5C  009B               	dw	155
   298  011C5E  009B               	dw	155
   299  011C60  009B               	dw	155
   300  011C62  009B               	dw	155
   301  011C64  009B               	dw	155
   302  011C66  009A               	dw	154
   303  011C68  009B               	dw	155
   304  011C6A  009B               	dw	155
   305  011C6C  009B               	dw	155
   306  011C6E  009A               	dw	154
   307  011C70  009B               	dw	155
   308  011C72  009B               	dw	155
   309  011C74  009A               	dw	154
   310  011C76  009A               	dw	154
   311  011C78  009A               	dw	154
   312  011C7A  009B               	dw	155
   313  011C7C  009A               	dw	154
   314  011C7E  009B               	dw	155
   315  011C80  009A               	dw	154
   316  011C82  009A               	dw	154
   317  011C84  009A               	dw	154
   318  011C86  009B               	dw	155
   319  011C88  009B               	dw	155
   320  011C8A  009A               	dw	154
   321  011C8C  009B               	dw	155
   322  011C8E  009A               	dw	154
   323  011C90  009B               	dw	155
   324  011C92  009A               	dw	154
   325  011C94  009B               	dw	155
   326  011C96  009B               	dw	155
   327  011C98  009B               	dw	155
   328  011C9A  009A               	dw	154
   329  011C9C  009B               	dw	155
   330  011C9E  009B               	dw	155
   331  011CA0  009A               	dw	154
   332  011CA2  009B               	dw	155
   333  011CA4  009A               	dw	154
   334  011CA6  009A               	dw	154
   335  011CA8  009A               	dw	154
   336  011CAA  009A               	dw	154
   337  011CAC  009A               	dw	154
   338  011CAE  009A               	dw	154
   339  011CB0  009A               	dw	154
   340  011CB2  009B               	dw	155
   341  011CB4  009B               	dw	155
   342  011CB6  009B               	dw	155
   343  011CB8  009B               	dw	155
   344  011CBA  009B               	dw	155
   345  011CBC  009B               	dw	155
   346  011CBE  009B               	dw	155
   347  011CC0  009B               	dw	155
   348  011CC2  009B               	dw	155
   349  011CC4  009B               	dw	155
   350  011CC6  009B               	dw	155
   351  011CC8  009B               	dw	155
   352                           
   353                           	psect	mediumconst
   354  00FD28                     __pmediumconst:
   355                           	opt stack 0
   356  00FD28  00                 	db	0
   357  00FD29                     _InitList:
   358                           	opt stack 0
   359  00FD29  1100               	dw	4352
   360  00FD2B  0080               	dw	128
   361  00FD2D  012C               	dw	300
   362  00FD2F  B100               	dw	45312
   363  00FD31  0002               	dw	2
   364  00FD33  0035               	dw	53
   365  00FD35  0036               	dw	54
   366  00FD37  B200               	dw	45568
   367  00FD39  0002               	dw	2
   368  00FD3B  0035               	dw	53
   369  00FD3D  0036               	dw	54
   370  00FD3F  B300               	dw	45824
   371  00FD41  0002               	dw	2
   372  00FD43  0035               	dw	53
   373  00FD45  0036               	dw	54
   374  00FD47  0002               	dw	2
   375  00FD49  0035               	dw	53
   376  00FD4B  0036               	dw	54
   377  00FD4D  B400               	dw	46080
   378  00FD4F  0000               	dw	0
   379  00FD51  C000               	dw	49152
   380  00FD53  00A2               	dw	162
   381  00FD55  0002               	dw	2
   382  00FD57  0084               	dw	132
   383  00FD59  C100               	dw	49408
   384  00FD5B  00C5               	dw	197
   385  00FD5D  C200               	dw	49664
   386  00FD5F  000D               	dw	13
   387  00FD61  0000               	dw	0
   388  00FD63  C300               	dw	49920
   389  00FD65  008D               	dw	141
   390  00FD67  002A               	dw	42
   391  00FD69  C400               	dw	50176
   392  00FD6B  008D               	dw	141
   393  00FD6D  00EE               	dw	238
   394  00FD6F  C500               	dw	50432
   395  00FD71  000A               	dw	10
   396  00FD73  3600               	dw	13824
   397  00FD75  00C8               	dw	200
   398  00FD77  E000               	dw	57344
   399  00FD79  0012               	dw	18
   400  00FD7B  001C               	dw	28
   401  00FD7D  0010               	dw	16
   402  00FD7F  0018               	dw	24
   403  00FD81  0033               	dw	51
   404  00FD83  002C               	dw	44
   405  00FD85  0025               	dw	37
   406  00FD87  0028               	dw	40
   407  00FD89  0028               	dw	40
   408  00FD8B  0027               	dw	39
   409  00FD8D  002F               	dw	47
   410  00FD8F  003C               	dw	60
   411  00FD91  0000               	dw	0
   412  00FD93  0003               	dw	3
   413  00FD95  0003               	dw	3
   414  00FD97  0010               	dw	16
   415  00FD99  0080               	dw	128
   416  00FD9B  0078               	dw	120
   417  00FD9D  E100               	dw	57600
   418  00FD9F  0012               	dw	18
   419  00FDA1  001C               	dw	28
   420  00FDA3  0010               	dw	16
   421  00FDA5  0018               	dw	24
   422  00FDA7  002D               	dw	45
   423  00FDA9  0028               	dw	40
   424  00FDAB  0023               	dw	35
   425  00FDAD  0028               	dw	40
   426  00FDAF  0028               	dw	40
   427  00FDB1  0026               	dw	38
   428  00FDB3  002F               	dw	47
   429  00FDB5  003B               	dw	59
   430  00FDB7  0000               	dw	0
   431  00FDB9  0003               	dw	3
   432  00FDBB  0003               	dw	3
   433  00FDBD  0010               	dw	16
   434  00FDBF  3A00               	dw	14848
   435  00FDC1  0005               	dw	5
   436  00FDC3  2A00               	dw	10752
   437  00FDC5  0000               	dw	0
   438  00FDC7  0002               	dw	2
   439  00FDC9  0000               	dw	0
   440  00FDCB  0081               	dw	129
   441  00FDCD  2B00               	dw	11008
   442  00FDCF  0000               	dw	0
   443  00FDD1  0003               	dw	3
   444  00FDD3  0000               	dw	0
   445  00FDD5  00A2               	dw	162
   446  00FDD7  2900               	dw	10496
   447  00FDD9  2C00               	dw	11264
   448  00FDDB                     __end_of_InitList:
   449                           	opt stack 0
   450  00FDDB                     Timer0_Init@PRESCALE:
   451                           	opt stack 0
   452  00FDDB  0002               	dw	2
   453  00FDDD  0004               	dw	4
   454  00FDDF  0008               	dw	8
   455  00FDE1  0010               	dw	16
   456  00FDE3  0020               	dw	32
   457  00FDE5  0040               	dw	64
   458  00FDE7  0080               	dw	128
   459  00FDE9  0100               	dw	256
   460  00FDEB                     __end_ofTimer0_Init@PRESCALE:
   461                           	opt stack 0
   462  00FDEB                     PortProperty_Valid@F6830:
   463                           	opt stack 0
   464  00FDEB  00                 	db	0
   465  00FDEC  01                 	db	1
   466  00FDED  02                 	db	2
   467  00FDEE  00                 	db	0
   468  00FDEF  01                 	db	1
   469  00FDF0  00                 	db	0
   470  00FDF1  01                 	db	1
   471  00FDF2  00                 	db	0
   472  00FDF3  02                 	db	2
   473  00FDF4  02                 	db	2
   474  00FDF5  00                 	db	0
   475  00FDF6  00                 	db	0
   476  00FDF7  03                 	db	3
   477  00FDF8  03                 	db	3
   478  00FDF9  03                 	db	3
   479  00FDFA  00                 	db	0
   480  00FDFB                     __end_ofPortProperty_Valid@F6830:
   481                           	opt stack 0
   482  00FDFB                     _MASKS:
   483                           	opt stack 0
   484  00FDFB  00                 	db	0
   485  00FDFC  01                 	db	1
   486  00FDFD  03                 	db	3
   487  00FDFE  07                 	db	7
   488  00FDFF  0F                 	db	15
   489  00FE00  1F                 	db	31
   490  00FE01  3F                 	db	63
   491  00FE02  7F                 	db	127
   492  00FE03  FF                 	db	255
   493  00FE04                     __end_of_MASKS:
   494                           	opt stack 0
   495  00FE04                     HMI_SetButton@F7213:
   496                           	opt stack 0
   497  00FE04  00                 	db	0
   498  00FE05  02                 	db	2
   499  00FE06  01                 	db	1
   500  00FE07  03                 	db	3
   501  00FE08                     __end_ofHMI_SetButton@F7213:
   502                           	opt stack 0
   503  00FE08                     Timer2_Init@PRESCALE:
   504                           	opt stack 0
   505  00FE08  01                 	db	1
   506  00FE09  04                 	db	4
   507  00FE0A  10                 	db	16
   508  00FE0B                     __end_ofTimer2_Init@PRESCALE:
   509                           	opt stack 0
   510  00FE0B                     _Font5x7:
   511                           	opt stack 0
   512  00FE0B  00                 	db	0
   513  00FE0C  00                 	db	0
   514  00FE0D  00                 	db	0
   515  00FE0E  00                 	db	0
   516  00FE0F  00                 	db	0
   517  00FE10  00                 	db	0
   518  00FE11  00                 	db	0
   519  00FE12  5F                 	db	95
   520  00FE13  00                 	db	0
   521  00FE14  00                 	db	0
   522  00FE15  00                 	db	0
   523  00FE16  07                 	db	7
   524  00FE17  00                 	db	0
   525  00FE18  07                 	db	7
   526  00FE19  00                 	db	0
   527  00FE1A  14                 	db	20
   528  00FE1B  7F                 	db	127
   529  00FE1C  14                 	db	20
   530  00FE1D  7F                 	db	127
   531  00FE1E  14                 	db	20
   532  00FE1F  24                 	db	36
   533  00FE20  2A                 	db	42
   534  00FE21  7F                 	db	127
   535  00FE22  2A                 	db	42
   536  00FE23  12                 	db	18
   537  00FE24  23                 	db	35
   538  00FE25  13                 	db	19
   539  00FE26  08                 	db	8
   540  00FE27  64                 	db	100
   541  00FE28  62                 	db	98
   542  00FE29  36                 	db	54
   543  00FE2A  49                 	db	73
   544  00FE2B  55                 	db	85
   545  00FE2C  22                 	db	34
   546  00FE2D  50                 	db	80
   547  00FE2E  00                 	db	0
   548  00FE2F  05                 	db	5
   549  00FE30  03                 	db	3
   550  00FE31  00                 	db	0
   551  00FE32  00                 	db	0
   552  00FE33  00                 	db	0
   553  00FE34  1C                 	db	28
   554  00FE35  22                 	db	34
   555  00FE36  41                 	db	65
   556  00FE37  00                 	db	0
   557  00FE38  00                 	db	0
   558  00FE39  41                 	db	65
   559  00FE3A  22                 	db	34
   560  00FE3B  1C                 	db	28
   561  00FE3C  00                 	db	0
   562  00FE3D  08                 	db	8
   563  00FE3E  2A                 	db	42
   564  00FE3F  1C                 	db	28
   565  00FE40  2A                 	db	42
   566  00FE41  08                 	db	8
   567  00FE42  08                 	db	8
   568  00FE43  08                 	db	8
   569  00FE44  3E                 	db	62
   570  00FE45  08                 	db	8
   571  00FE46  08                 	db	8
   572  00FE47  00                 	db	0
   573  00FE48  50                 	db	80
   574  00FE49  30                 	db	48
   575  00FE4A  00                 	db	0
   576  00FE4B  00                 	db	0
   577  00FE4C  08                 	db	8
   578  00FE4D  08                 	db	8
   579  00FE4E  08                 	db	8
   580  00FE4F  08                 	db	8
   581  00FE50  08                 	db	8
   582  00FE51  00                 	db	0
   583  00FE52  60                 	db	96
   584  00FE53  60                 	db	96
   585  00FE54  00                 	db	0
   586  00FE55  00                 	db	0
   587  00FE56  20                 	db	32
   588  00FE57  10                 	db	16
   589  00FE58  08                 	db	8
   590  00FE59  04                 	db	4
   591  00FE5A  02                 	db	2
   592  00FE5B  3E                 	db	62
   593  00FE5C  51                 	db	81
   594  00FE5D  49                 	db	73
   595  00FE5E  45                 	db	69
   596  00FE5F  3E                 	db	62
   597  00FE60  00                 	db	0
   598  00FE61  42                 	db	66
   599  00FE62  7F                 	db	127
   600  00FE63  40                 	db	64
   601  00FE64  00                 	db	0
   602  00FE65  42                 	db	66
   603  00FE66  61                 	db	97
   604  00FE67  51                 	db	81
   605  00FE68  49                 	db	73
   606  00FE69  46                 	db	70
   607  00FE6A  21                 	db	33
   608  00FE6B  41                 	db	65
   609  00FE6C  45                 	db	69
   610  00FE6D  4B                 	db	75
   611  00FE6E  31                 	db	49
   612  00FE6F  18                 	db	24
   613  00FE70  14                 	db	20
   614  00FE71  12                 	db	18
   615  00FE72  7F                 	db	127
   616  00FE73  10                 	db	16
   617  00FE74  27                 	db	39
   618  00FE75  45                 	db	69
   619  00FE76  45                 	db	69
   620  00FE77  45                 	db	69
   621  00FE78  39                 	db	57
   622  00FE79  3C                 	db	60
   623  00FE7A  4A                 	db	74
   624  00FE7B  49                 	db	73
   625  00FE7C  49                 	db	73
   626  00FE7D  30                 	db	48
   627  00FE7E  01                 	db	1
   628  00FE7F  71                 	db	113
   629  00FE80  09                 	db	9
   630  00FE81  05                 	db	5
   631  00FE82  03                 	db	3
   632  00FE83  36                 	db	54
   633  00FE84  49                 	db	73
   634  00FE85  49                 	db	73
   635  00FE86  49                 	db	73
   636  00FE87  36                 	db	54
   637  00FE88  06                 	db	6
   638  00FE89  49                 	db	73
   639  00FE8A  49                 	db	73
   640  00FE8B  29                 	db	41
   641  00FE8C  1E                 	db	30
   642  00FE8D  00                 	db	0
   643  00FE8E  36                 	db	54
   644  00FE8F  36                 	db	54
   645  00FE90  00                 	db	0
   646  00FE91  00                 	db	0
   647  00FE92  00                 	db	0
   648  00FE93  56                 	db	86
   649  00FE94  36                 	db	54
   650  00FE95  00                 	db	0
   651  00FE96  00                 	db	0
   652  00FE97  00                 	db	0
   653  00FE98  08                 	db	8
   654  00FE99  14                 	db	20
   655  00FE9A  22                 	db	34
   656  00FE9B  41                 	db	65
   657  00FE9C  14                 	db	20
   658  00FE9D  14                 	db	20
   659  00FE9E  14                 	db	20
   660  00FE9F  14                 	db	20
   661  00FEA0  14                 	db	20
   662  00FEA1  41                 	db	65
   663  00FEA2  22                 	db	34
   664  00FEA3  14                 	db	20
   665  00FEA4  08                 	db	8
   666  00FEA5  00                 	db	0
   667  00FEA6  02                 	db	2
   668  00FEA7  01                 	db	1
   669  00FEA8  51                 	db	81
   670  00FEA9  09                 	db	9
   671  00FEAA  06                 	db	6
   672  00FEAB  32                 	db	50
   673  00FEAC  49                 	db	73
   674  00FEAD  79                 	db	121
   675  00FEAE  41                 	db	65
   676  00FEAF  3E                 	db	62
   677  00FEB0  7E                 	db	126
   678  00FEB1  11                 	db	17
   679  00FEB2  11                 	db	17
   680  00FEB3  11                 	db	17
   681  00FEB4  7E                 	db	126
   682  00FEB5  7F                 	db	127
   683  00FEB6  49                 	db	73
   684  00FEB7  49                 	db	73
   685  00FEB8  49                 	db	73
   686  00FEB9  36                 	db	54
   687  00FEBA  3E                 	db	62
   688  00FEBB  41                 	db	65
   689  00FEBC  41                 	db	65
   690  00FEBD  41                 	db	65
   691  00FEBE  22                 	db	34
   692  00FEBF  7F                 	db	127
   693  00FEC0  41                 	db	65
   694  00FEC1  41                 	db	65
   695  00FEC2  22                 	db	34
   696  00FEC3  1C                 	db	28
   697  00FEC4  7F                 	db	127
   698  00FEC5  49                 	db	73
   699  00FEC6  49                 	db	73
   700  00FEC7  49                 	db	73
   701  00FEC8  41                 	db	65
   702  00FEC9  7F                 	db	127
   703  00FECA  09                 	db	9
   704  00FECB  09                 	db	9
   705  00FECC  01                 	db	1
   706  00FECD  01                 	db	1
   707  00FECE  3E                 	db	62
   708  00FECF  41                 	db	65
   709  00FED0  41                 	db	65
   710  00FED1  51                 	db	81
   711  00FED2  32                 	db	50
   712  00FED3  7F                 	db	127
   713  00FED4  08                 	db	8
   714  00FED5  08                 	db	8
   715  00FED6  08                 	db	8
   716  00FED7  7F                 	db	127
   717  00FED8  00                 	db	0
   718  00FED9  41                 	db	65
   719  00FEDA  7F                 	db	127
   720  00FEDB  41                 	db	65
   721  00FEDC  00                 	db	0
   722  00FEDD  20                 	db	32
   723  00FEDE  40                 	db	64
   724  00FEDF  41                 	db	65
   725  00FEE0  3F                 	db	63
   726  00FEE1  01                 	db	1
   727  00FEE2  7F                 	db	127
   728  00FEE3  08                 	db	8
   729  00FEE4  14                 	db	20
   730  00FEE5  22                 	db	34
   731  00FEE6  41                 	db	65
   732  00FEE7  7F                 	db	127
   733  00FEE8  40                 	db	64
   734  00FEE9  40                 	db	64
   735  00FEEA  40                 	db	64
   736  00FEEB  40                 	db	64
   737  00FEEC  7F                 	db	127
   738  00FEED  02                 	db	2
   739  00FEEE  04                 	db	4
   740  00FEEF  02                 	db	2
   741  00FEF0  7F                 	db	127
   742  00FEF1  7F                 	db	127
   743  00FEF2  04                 	db	4
   744  00FEF3  08                 	db	8
   745  00FEF4  10                 	db	16
   746  00FEF5  7F                 	db	127
   747  00FEF6  3E                 	db	62
   748  00FEF7  41                 	db	65
   749  00FEF8  41                 	db	65
   750  00FEF9  41                 	db	65
   751  00FEFA  3E                 	db	62
   752  00FEFB  7F                 	db	127
   753  00FEFC  09                 	db	9
   754  00FEFD  09                 	db	9
   755  00FEFE  09                 	db	9
   756  00FEFF  06                 	db	6
   757  00FF00  3E                 	db	62
   758  00FF01  41                 	db	65
   759  00FF02  51                 	db	81
   760  00FF03  21                 	db	33
   761  00FF04  5E                 	db	94
   762  00FF05  7F                 	db	127
   763  00FF06  09                 	db	9
   764  00FF07  19                 	db	25
   765  00FF08  29                 	db	41
   766  00FF09  46                 	db	70
   767  00FF0A  46                 	db	70
   768  00FF0B  49                 	db	73
   769  00FF0C  49                 	db	73
   770  00FF0D  49                 	db	73
   771  00FF0E  31                 	db	49
   772  00FF0F  01                 	db	1
   773  00FF10  01                 	db	1
   774  00FF11  7F                 	db	127
   775  00FF12  01                 	db	1
   776  00FF13  01                 	db	1
   777  00FF14  3F                 	db	63
   778  00FF15  40                 	db	64
   779  00FF16  40                 	db	64
   780  00FF17  40                 	db	64
   781  00FF18  3F                 	db	63
   782  00FF19  1F                 	db	31
   783  00FF1A  20                 	db	32
   784  00FF1B  40                 	db	64
   785  00FF1C  20                 	db	32
   786  00FF1D  1F                 	db	31
   787  00FF1E  7F                 	db	127
   788  00FF1F  20                 	db	32
   789  00FF20  18                 	db	24
   790  00FF21  20                 	db	32
   791  00FF22  7F                 	db	127
   792  00FF23  63                 	db	99
   793  00FF24  14                 	db	20
   794  00FF25  08                 	db	8
   795  00FF26  14                 	db	20
   796  00FF27  63                 	db	99
   797  00FF28  03                 	db	3
   798  00FF29  04                 	db	4
   799  00FF2A  78                 	db	120
   800  00FF2B  04                 	db	4
   801  00FF2C  03                 	db	3
   802  00FF2D  61                 	db	97
   803  00FF2E  51                 	db	81
   804  00FF2F  49                 	db	73
   805  00FF30  45                 	db	69
   806  00FF31  43                 	db	67
   807  00FF32  00                 	db	0
   808  00FF33  00                 	db	0
   809  00FF34  7F                 	db	127
   810  00FF35  41                 	db	65
   811  00FF36  41                 	db	65
   812  00FF37  02                 	db	2
   813  00FF38  04                 	db	4
   814  00FF39  08                 	db	8
   815  00FF3A  10                 	db	16
   816  00FF3B  20                 	db	32
   817  00FF3C  41                 	db	65
   818  00FF3D  41                 	db	65
   819  00FF3E  7F                 	db	127
   820  00FF3F  00                 	db	0
   821  00FF40  00                 	db	0
   822  00FF41  04                 	db	4
   823  00FF42  02                 	db	2
   824  00FF43  01                 	db	1
   825  00FF44  02                 	db	2
   826  00FF45  04                 	db	4
   827  00FF46  40                 	db	64
   828  00FF47  40                 	db	64
   829  00FF48  40                 	db	64
   830  00FF49  40                 	db	64
   831  00FF4A  40                 	db	64
   832  00FF4B  00                 	db	0
   833  00FF4C  01                 	db	1
   834  00FF4D  02                 	db	2
   835  00FF4E  04                 	db	4
   836  00FF4F  00                 	db	0
   837  00FF50  20                 	db	32
   838  00FF51  54                 	db	84
   839  00FF52  54                 	db	84
   840  00FF53  54                 	db	84
   841  00FF54  78                 	db	120
   842  00FF55  7F                 	db	127
   843  00FF56  48                 	db	72
   844  00FF57  44                 	db	68
   845  00FF58  44                 	db	68
   846  00FF59  38                 	db	56
   847  00FF5A  38                 	db	56
   848  00FF5B  44                 	db	68
   849  00FF5C  44                 	db	68
   850  00FF5D  44                 	db	68
   851  00FF5E  20                 	db	32
   852  00FF5F  38                 	db	56
   853  00FF60  44                 	db	68
   854  00FF61  44                 	db	68
   855  00FF62  48                 	db	72
   856  00FF63  7F                 	db	127
   857  00FF64  38                 	db	56
   858  00FF65  54                 	db	84
   859  00FF66  54                 	db	84
   860  00FF67  54                 	db	84
   861  00FF68  18                 	db	24
   862  00FF69  08                 	db	8
   863  00FF6A  7E                 	db	126
   864  00FF6B  09                 	db	9
   865  00FF6C  01                 	db	1
   866  00FF6D  02                 	db	2
   867  00FF6E  08                 	db	8
   868  00FF6F  14                 	db	20
   869  00FF70  54                 	db	84
   870  00FF71  54                 	db	84
   871  00FF72  3C                 	db	60
   872  00FF73  7F                 	db	127
   873  00FF74  08                 	db	8
   874  00FF75  04                 	db	4
   875  00FF76  04                 	db	4
   876  00FF77  78                 	db	120
   877  00FF78  00                 	db	0
   878  00FF79  44                 	db	68
   879  00FF7A  7D                 	db	125
   880  00FF7B  40                 	db	64
   881  00FF7C  00                 	db	0
   882  00FF7D  20                 	db	32
   883  00FF7E  40                 	db	64
   884  00FF7F  44                 	db	68
   885  00FF80  3D                 	db	61
   886  00FF81  00                 	db	0
   887  00FF82  00                 	db	0
   888  00FF83  7F                 	db	127
   889  00FF84  10                 	db	16
   890  00FF85  28                 	db	40
   891  00FF86  44                 	db	68
   892  00FF87  00                 	db	0
   893  00FF88  41                 	db	65
   894  00FF89  7F                 	db	127
   895  00FF8A  40                 	db	64
   896  00FF8B  00                 	db	0
   897  00FF8C  7C                 	db	124
   898  00FF8D  04                 	db	4
   899  00FF8E  18                 	db	24
   900  00FF8F  04                 	db	4
   901  00FF90  78                 	db	120
   902  00FF91  7C                 	db	124
   903  00FF92  08                 	db	8
   904  00FF93  04                 	db	4
   905  00FF94  04                 	db	4
   906  00FF95  78                 	db	120
   907  00FF96  38                 	db	56
   908  00FF97  44                 	db	68
   909  00FF98  44                 	db	68
   910  00FF99  44                 	db	68
   911  00FF9A  38                 	db	56
   912  00FF9B  7C                 	db	124
   913  00FF9C  14                 	db	20
   914  00FF9D  14                 	db	20
   915  00FF9E  14                 	db	20
   916  00FF9F  08                 	db	8
   917  00FFA0  08                 	db	8
   918  00FFA1  14                 	db	20
   919  00FFA2  14                 	db	20
   920  00FFA3  18                 	db	24
   921  00FFA4  7C                 	db	124
   922  00FFA5  7C                 	db	124
   923  00FFA6  08                 	db	8
   924  00FFA7  04                 	db	4
   925  00FFA8  04                 	db	4
   926  00FFA9  08                 	db	8
   927  00FFAA  48                 	db	72
   928  00FFAB  54                 	db	84
   929  00FFAC  54                 	db	84
   930  00FFAD  54                 	db	84
   931  00FFAE  20                 	db	32
   932  00FFAF  04                 	db	4
   933  00FFB0  3F                 	db	63
   934  00FFB1  44                 	db	68
   935  00FFB2  40                 	db	64
   936  00FFB3  20                 	db	32
   937  00FFB4  3C                 	db	60
   938  00FFB5  40                 	db	64
   939  00FFB6  40                 	db	64
   940  00FFB7  20                 	db	32
   941  00FFB8  7C                 	db	124
   942  00FFB9  1C                 	db	28
   943  00FFBA  20                 	db	32
   944  00FFBB  40                 	db	64
   945  00FFBC  20                 	db	32
   946  00FFBD  1C                 	db	28
   947  00FFBE  3C                 	db	60
   948  00FFBF  40                 	db	64
   949  00FFC0  30                 	db	48
   950  00FFC1  40                 	db	64
   951  00FFC2  3C                 	db	60
   952  00FFC3  44                 	db	68
   953  00FFC4  28                 	db	40
   954  00FFC5  10                 	db	16
   955  00FFC6  28                 	db	40
   956  00FFC7  44                 	db	68
   957  00FFC8  0C                 	db	12
   958  00FFC9  50                 	db	80
   959  00FFCA  50                 	db	80
   960  00FFCB  50                 	db	80
   961  00FFCC  3C                 	db	60
   962  00FFCD  44                 	db	68
   963  00FFCE  64                 	db	100
   964  00FFCF  54                 	db	84
   965  00FFD0  4C                 	db	76
   966  00FFD1  44                 	db	68
   967  00FFD2  00                 	db	0
   968  00FFD3  08                 	db	8
   969  00FFD4  36                 	db	54
   970  00FFD5  41                 	db	65
   971  00FFD6  00                 	db	0
   972  00FFD7  00                 	db	0
   973  00FFD8  00                 	db	0
   974  00FFD9  7F                 	db	127
   975  00FFDA  00                 	db	0
   976  00FFDB  00                 	db	0
   977  00FFDC  00                 	db	0
   978  00FFDD  41                 	db	65
   979  00FFDE  36                 	db	54
   980  00FFDF  08                 	db	8
   981  00FFE0  00                 	db	0
   982  00FFE1  08                 	db	8
   983  00FFE2  08                 	db	8
   984  00FFE3  2A                 	db	42
   985  00FFE4  1C                 	db	28
   986  00FFE5  08                 	db	8
   987  00FFE6  08                 	db	8
   988  00FFE7  1C                 	db	28
   989  00FFE8  2A                 	db	42
   990  00FFE9  08                 	db	8
   991  00FFEA  08                 	db	8
   992  00FFEB                     __end_of_Font5x7:
   993                           	opt stack 0
   994  00FFEB                     _PortG_Property:
   995                           	opt stack 0
   996  00FFEB  FC00               	dw	64512
   997  00FFED                     __end_of_PortG_Property:
   998                           	opt stack 0
   999  00FFED                     _PortF_Property:
  1000                           	opt stack 0
  1001  00FFED  0FFF               	dw	4095
  1002  00FFEF                     __end_of_PortF_Property:
  1003                           	opt stack 0
  1004  00FFEF                     _PortE_Property:
  1005                           	opt stack 0
  1006  00FFEF  0000               	dw	0
  1007  00FFF1                     __end_of_PortE_Property:
  1008                           	opt stack 0
  1009  00FFF1                     _PortD_Property:
  1010                           	opt stack 0
  1011  00FFF1  FFFF               	dw	65535
  1012  00FFF3                     __end_of_PortD_Property:
  1013                           	opt stack 0
  1014  00FFF3                     _PortC_Property:
  1015                           	opt stack 0
  1016  00FFF3  FFF0               	dw	65520
  1017  00FFF5                     __end_of_PortC_Property:
  1018                           	opt stack 0
  1019  00FFF5                     _PortB_Property:
  1020                           	opt stack 0
  1021  00FFF5  FF00               	dw	65280
  1022  00FFF7                     __end_of_PortB_Property:
  1023                           	opt stack 0
  1024  00FFF7                     _PortA_Property:
  1025                           	opt stack 0
  1026  00FFF7  00FF               	dw	255
  1027  00FFF9                     __end_of_PortA_Property:
  1028                           	opt stack 0
  1029  0000                     _TMR0	set	4054
  1030  0000                     _RCREG1	set	4015
  1031  0000                     _TXREG1	set	4014
  1032  0000                     _SPBRG1	set	4016
  1033  0000                     _TXSTA1bits	set	4013
  1034  0000                     _BAUDCON1bits	set	3966
  1035  0000                     _RCSTA1	set	4012
  1036  0000                     _TXSTA1	set	4013
  1037  0000                     _TRISCbits	set	3988
  1038  0000                     _PR2	set	4043
  1039  0000                     _T2CONbits	set	4042
  1040  0000                     _T0CONbits	set	4053
  1041  0000                     _RCONbits	set	4048
  1042  0000                     _OSCTUNEbits	set	3995
  1043  0000                     _PIR3	set	4004
  1044  0000                     _PIR2	set	4001
  1045  0000                     _PIR1	set	3998
  1046  0000                     _INTCONbits	set	4082
  1047  0000                     _SSP2CON2bits	set	3947
  1048  0000                     _SSP1CON2bits	set	4037
  1049  0000                     _SSP1ADD	set	4040
  1050  0000                     _ANCON0	set	4033
  1051  0000                     _ADRESL	set	4035
  1052  0000                     _ADRESH	set	4036
  1053  0000                     _ADCON1bits	set	4033
  1054  0000                     _ADCON0bits	set	4034
  1055  0000                     _SSP2CON1bits	set	3948
  1056  0000                     _SSP1CON1bits	set	4038
  1057  0000                     _SSP2STATbits	set	3949
  1058  0000                     _SSP1STATbits	set	4039
  1059  0000                     _PIE3bits	set	4003
  1060  0000                     _PIE1bits	set	3997
  1061  0000                     _PIR3bits	set	4004
  1062  0000                     _PIR1bits	set	3998
  1063  0000                     _IPR3bits	set	4005
  1064  0000                     _IPR1bits	set	3999
  1065  0000                     _PORTFbits	set	3973
  1066  0000                     _SSP2CON2	set	3947
  1067  0000                     _SSP1CON2	set	4037
  1068  0000                     _SSP2BUF	set	3951
  1069  0000                     _SSP2CON1	set	3948
  1070  0000                     _SSP2STAT	set	3949
  1071  0000                     _SSP1BUF	set	4041
  1072  0000                     _SSP1CON1	set	4038
  1073  0000                     _SSP1STAT	set	4039
  1074  0000                     _LATG	set	3983
  1075  0000                     _LATF	set	3982
  1076  0000                     _LATE	set	3981
  1077  0000                     _LATD	set	3980
  1078  0000                     _LATC	set	3979
  1079  0000                     _LATB	set	3978
  1080  0000                     _LATA	set	3977
  1081  0000                     _TRISG	set	3992
  1082  0000                     _TRISF	set	3991
  1083  0000                     _TRISE	set	3990
  1084  0000                     _TRISD	set	3989
  1085  0000                     _TRISC	set	3988
  1086  0000                     _TRISB	set	3987
  1087  0000                     _TRISA	set	3986
  1088  0000                     _PORTG	set	3974
  1089  0000                     _PORTF	set	3973
  1090  0000                     _PORTE	set	3972
  1091  0000                     _PORTD	set	3971
  1092  0000                     _PORTC	set	3970
  1093  0000                     _PORTB	set	3969
  1094  0000                     _PORTA	set	3968
  1095  00FFF9                     STR_1:
  1096  00FFF9  25                 	db	37
  1097  00FFFA  63                 	db	99	;'c'
  1098  00FFFB  00                 	db	0
  1099  00FFFC  0A                 	db	10
  1100  00FFFD  00                 	db	0
  1101  0000                     
  1102                           ; #config settings
  1103  00FFFE  00                 	db	0	; dummy byte at the end
  1104  0000                     
  1105                           	psect	cinit
  1106  011980                     __pcinit:
  1107                           	opt stack 0
  1108  011980                     start_initialization:
  1109                           	opt stack 0
  1110  011980                     __initialization:
  1111                           	opt stack 0
  1112                           
  1113                           ; Initialize objects allocated to BANK3 (198 bytes)
  1114                           ; load TBLPTR registers with __pidataBANK3
  1115  011980  0E04               	movlw	low __pidataBANK3
  1116  011982  6EF6               	movwf	tblptrl,c
  1117  011984  0E1C               	movlw	high __pidataBANK3
  1118  011986  6EF7               	movwf	tblptrh,c
  1119  011988  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1120  01198A  6EF8               	movwf	tblptru,c
  1121  01198C  EE03  F000         	lfsr	0,__pdataBANK3
  1122  011990  EE10 F0C6          	lfsr	1,198
  1123  011994                     copy_data0:
  1124  011994  0009               	tblrd		*+
  1125  011996  CFF5 FFEE          	movff	tablat,postinc0
  1126  01199A  50E5               	movf	postdec1,w,c
  1127  01199C  50E1               	movf	fsr1l,w,c
  1128  01199E  E1FA               	bnz	copy_data0
  1129                           
  1130                           ; Initialize objects allocated to BANK1 (8 bytes)
  1131                           ; load TBLPTR registers with __pidataBANK1
  1132  0119A0  0E98               	movlw	low __pidataBANK1
  1133  0119A2  6EF6               	movwf	tblptrl,c
  1134  0119A4  0E33               	movlw	high __pidataBANK1
  1135  0119A6  6EF7               	movwf	tblptrh,c
  1136  0119A8  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1137  0119AA  6EF8               	movwf	tblptru,c
  1138  0119AC  EE01  F0F1         	lfsr	0,__pdataBANK1
  1139  0119B0  EE10 F008          	lfsr	1,8
  1140  0119B4                     copy_data1:
  1141  0119B4  0009               	tblrd		*+
  1142  0119B6  CFF5 FFEE          	movff	tablat,postinc0
  1143  0119BA  50E5               	movf	postdec1,w,c
  1144  0119BC  50E1               	movf	fsr1l,w,c
  1145  0119BE  E1FA               	bnz	copy_data1
  1146                           
  1147                           ; Initialize objects allocated to BANK0 (8 bytes)
  1148                           ; load TBLPTR registers with __pidataBANK0
  1149  0119C0  0E90               	movlw	low __pidataBANK0
  1150  0119C2  6EF6               	movwf	tblptrl,c
  1151  0119C4  0E33               	movlw	high __pidataBANK0
  1152  0119C6  6EF7               	movwf	tblptrh,c
  1153  0119C8  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1154  0119CA  6EF8               	movwf	tblptru,c
  1155  0119CC  EE00  F0F8         	lfsr	0,__pdataBANK0
  1156  0119D0  EE10 F008          	lfsr	1,8
  1157  0119D4                     copy_data2:
  1158  0119D4  0009               	tblrd		*+
  1159  0119D6  CFF5 FFEE          	movff	tablat,postinc0
  1160  0119DA  50E5               	movf	postdec1,w,c
  1161  0119DC  50E1               	movf	fsr1l,w,c
  1162  0119DE  E1FA               	bnz	copy_data2
  1163                           
  1164                           ; Initialize objects allocated to COMRAM (17 bytes)
  1165                           ; load TBLPTR registers with __pidataCOMRAM
  1166  0119E0  0E0A               	movlw	low __pidataCOMRAM
  1167  0119E2  6EF6               	movwf	tblptrl,c
  1168  0119E4  0E33               	movlw	high __pidataCOMRAM
  1169  0119E6  6EF7               	movwf	tblptrh,c
  1170  0119E8  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1171  0119EA  6EF8               	movwf	tblptru,c
  1172  0119EC  EE00  F040         	lfsr	0,__pdataCOMRAM
  1173  0119F0  EE10 F011          	lfsr	1,17
  1174  0119F4                     copy_data3:
  1175  0119F4  0009               	tblrd		*+
  1176  0119F6  CFF5 FFEE          	movff	tablat,postinc0
  1177  0119FA  50E5               	movf	postdec1,w,c
  1178  0119FC  50E1               	movf	fsr1l,w,c
  1179  0119FE  E1FA               	bnz	copy_data3
  1180                           
  1181                           ; Clear objects allocated to BIGRAM (300 bytes)
  1182  011A00  EE04  F063         	lfsr	0,__pbssBIGRAM
  1183  011A04  EE11 F02C          	lfsr	1,300
  1184  011A08                     clear_0:
  1185  011A08  6AEE               	clrf	postinc0,c
  1186  011A0A  50E5               	movf	postdec1,w,c
  1187  011A0C  50E1               	movf	fsr1l,w,c
  1188  011A0E  E1FC               	bnz	clear_0
  1189  011A10  50E2               	movf	fsr1h,w,c
  1190  011A12  E1FA               	bnz	clear_0
  1191                           
  1192                           ; Clear objects allocated to BANK4 (99 bytes)
  1193  011A14  EE04  F000         	lfsr	0,__pbssBANK4
  1194  011A18  0E63               	movlw	99
  1195  011A1A                     clear_1:
  1196  011A1A  6AEE               	clrf	postinc0,c
  1197  011A1C  06E8               	decf	wreg,f,c
  1198  011A1E  E1FD               	bnz	clear_1
  1199                           
  1200                           ; Clear objects allocated to BANK2 (170 bytes)
  1201  011A20  EE02  F000         	lfsr	0,__pbssBANK2
  1202  011A24  0EAA               	movlw	170
  1203  011A26                     clear_2:
  1204  011A26  6AEE               	clrf	postinc0,c
  1205  011A28  06E8               	decf	wreg,f,c
  1206  011A2A  E1FD               	bnz	clear_2
  1207                           
  1208                           ; Clear objects allocated to BANK1 (226 bytes)
  1209  011A2C  EE01  F000         	lfsr	0,__pbssBANK1
  1210  011A30  0EE2               	movlw	226
  1211  011A32                     clear_3:
  1212  011A32  6AEE               	clrf	postinc0,c
  1213  011A34  06E8               	decf	wreg,f,c
  1214  011A36  E1FD               	bnz	clear_3
  1215                           
  1216                           ; Clear objects allocated to BANK0 (92 bytes)
  1217  011A38  EE00  F060         	lfsr	0,__pbssBANK0
  1218  011A3C  0E5C               	movlw	92
  1219  011A3E                     clear_4:
  1220  011A3E  6AEE               	clrf	postinc0,c
  1221  011A40  06E8               	decf	wreg,f,c
  1222  011A42  E1FD               	bnz	clear_4
  1223                           
  1224                           ; Clear objects allocated to COMRAM (23 bytes)
  1225  011A44  EE00  F029         	lfsr	0,__pbssCOMRAM
  1226  011A48  0E17               	movlw	23
  1227  011A4A                     clear_5:
  1228  011A4A  6AEE               	clrf	postinc0,c
  1229  011A4C  06E8               	decf	wreg,f,c
  1230  011A4E  E1FD               	bnz	clear_5
  1231  011A50                     end_of_initialization:
  1232                           	opt stack 0
  1233  011A50                     __end_of__initialization:
  1234                           	opt stack 0
  1235  011A50  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1236  011A52  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1237  011A54  0100               	movlb	0
  1238  011A56  EFD8  F099         	goto	_main	;jump to C main() function
  1239                           tblptru	equ	0xFF8
  1240                           tblptrh	equ	0xFF7
  1241                           tblptrl	equ	0xFF6
  1242                           tablat	equ	0xFF5
  1243                           postinc0	equ	0xFEE
  1244                           wreg	equ	0xFE8
  1245                           postdec1	equ	0xFE5
  1246                           fsr1h	equ	0xFE2
  1247                           fsr1l	equ	0xFE1
  1248                           
  1249                           	psect	bssCOMRAM
  1250  000029                     __pbssCOMRAM:
  1251                           	opt stack 0
  1252  000029                     _currentPos:
  1253                           	opt stack 0
  1254  000029                     	ds	2
  1255  00002B                     _yPosNext:
  1256                           	opt stack 0
  1257  00002B                     	ds	2
  1258  00002D                     _xPosNext:
  1259                           	opt stack 0
  1260  00002D                     	ds	2
  1261  00002F                     HMI_GRender@a:
  1262                           	opt stack 0
  1263  00002F                     	ds	2
  1264  000031                     _gBackcolour:
  1265                           	opt stack 0
  1266  000031                     	ds	2
  1267  000033                     _currentPosChar:
  1268                           	opt stack 0
  1269  000033                     	ds	1
  1270  000034                     _iRBumpDrop:
  1271                           	opt stack 0
  1272  000034                     	ds	1
  1273  000035                     _iRScriptIndex:
  1274                           	opt stack 0
  1275  000035                     	ds	1
  1276  000036                     _j:
  1277                           	opt stack 0
  1278  000036                     	ds	1
  1279  000037                     _i:
  1280                           	opt stack 0
  1281  000037                     	ds	1
  1282  000038                     rand@screw:
  1283                           	opt stack 0
  1284  000038                     	ds	1
  1285  000039                     _ADC_Initialised:
  1286                           	opt stack 0
  1287  000039                     	ds	1
  1288  00003A                     OutSeg@a:
  1289                           	opt stack 0
  1290  00003A                     	ds	1
  1291  00003B                     OutSeg@segset:
  1292                           	opt stack 0
  1293  00003B                     	ds	1
  1294  00003C                     OutSeg@cur:
  1295                           	opt stack 0
  1296  00003C                     	ds	1
  1297  00003D                     _lBufferY:
  1298                           	opt stack 0
  1299  00003D                     	ds	1
  1300  00003E                     _lBufferX:
  1301                           	opt stack 0
  1302  00003E                     	ds	1
  1303  00003F                     _clearall:
  1304                           	opt stack 0
  1305  00003F                     	ds	1
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1h	equ	0xFE2
  1314                           fsr1l	equ	0xFE1
  1315                           
  1316                           	psect	dataCOMRAM
  1317  000040                     __pdataCOMRAM:
  1318                           	opt stack 0
  1319  000040                     _gCursor:
  1320                           	opt stack 0
  1321  000040                     	ds	4
  1322  000044                     _yPos:
  1323                           	opt stack 0
  1324  000044                     	ds	2
  1325  000046                     _xPos:
  1326                           	opt stack 0
  1327  000046                     	ds	2
  1328  000048                     _bearing:
  1329                           	opt stack 0
  1330  000048                     	ds	2
  1331  00004A                     _Bus_State:
  1332                           	opt stack 0
  1333  00004A                     	ds	1
  1334  00004B                     _change:
  1335                           	opt stack 0
  1336  00004B                     	ds	1
  1337  00004C                     	ds	1
  1338  00004D                     	ds	1
  1339  00004E                     	ds	1
  1340  00004F                     _l:
  1341                           	opt stack 0
  1342  00004F                     	ds	1
  1343  000050                     _w:
  1344                           	opt stack 0
  1345  000050                     	ds	1
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1h	equ	0xFE2
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	bssBANK0
  1357  000060                     __pbssBANK0:
  1358                           	opt stack 0
  1359  000060                     _iRDistanceSS:
  1360                           	opt stack 0
  1361  000060                     	ds	4
  1362  000064                     _gISR:
  1363                           	opt stack 0
  1364  000064                     	ds	3
  1365  000067                     _lQueue:
  1366                           	opt stack 0
  1367  000067                     	ds	3
  1368  00006A                     _lStepFunction:
  1369                           	opt stack 0
  1370  00006A                     	ds	3
  1371  00006D                     _pShiftVal:
  1372                           	opt stack 0
  1373  00006D                     	ds	2
  1374  00006F                     _val:
  1375                           	opt stack 0
  1376  00006F                     	ds	2
  1377  000071                     _COUNTER:
  1378                           	opt stack 0
  1379  000071                     	ds	2
  1380  000073                     _lMotor:
  1381                           	opt stack 0
  1382  000073                     	ds	2
  1383  000075                     _lCurrent:
  1384                           	opt stack 0
  1385  000075                     	ds	2
  1386  000077                     SPI_Send9@dat:
  1387                           	opt stack 0
  1388  000077                     	ds	2
  1389  000079                     _iRDropCaster:
  1390                           	opt stack 0
  1391  000079                     	ds	1
  1392  00007A                     _iRDropLeft:
  1393                           	opt stack 0
  1394  00007A                     	ds	1
  1395  00007B                     _iRDropRight:
  1396                           	opt stack 0
  1397  00007B                     	ds	1
  1398  00007C                     _iRBumpLeft:
  1399                           	opt stack 0
  1400  00007C                     	ds	1
  1401  00007D                     _iRBumpRight:
  1402                           	opt stack 0
  1403  00007D                     	ds	1
  1404  00007E                     _iRVirtualWall:
  1405                           	opt stack 0
  1406  00007E                     	ds	1
  1407  00007F                     _iRCliffR:
  1408                           	opt stack 0
  1409  00007F                     	ds	1
  1410  000080                     _iRCliffFR:
  1411                           	opt stack 0
  1412  000080                     	ds	1
  1413  000081                     _iRCliffFL:
  1414                           	opt stack 0
  1415  000081                     	ds	1
  1416  000082                     _iRCliffL:
  1417                           	opt stack 0
  1418  000082                     	ds	1
  1419  000083                     _iRWall:
  1420                           	opt stack 0
  1421  000083                     	ds	1
  1422  000084                     Event_TestButton@j:
  1423                           	opt stack 0
  1424  000084                     	ds	1
  1425  000085                     _u:
  1426                           	opt stack 0
  1427  000085                     	ds	1
  1428  000086                     Timer2_Init@PRE:
  1429                           	opt stack 0
  1430  000086                     	ds	1
  1431  000087                     Timer2_Init@INDEX:
  1432                           	opt stack 0
  1433  000087                     	ds	1
  1434  000088                     Timer0_Init@PRE:
  1435                           	opt stack 0
  1436  000088                     	ds	1
  1437  000089                     _INDEX:
  1438                           	opt stack 0
  1439  000089                     	ds	1
  1440  00008A                     _PortE:
  1441                           	opt stack 0
  1442  00008A                     	ds	10
  1443  000094                     _PortD:
  1444                           	opt stack 0
  1445  000094                     	ds	10
  1446  00009E                     _PortC:
  1447                           	opt stack 0
  1448  00009E                     	ds	10
  1449  0000A8                     _I2C1T:
  1450                           	opt stack 0
  1451  0000A8                     	ds	7
  1452  0000AF                     _ADC_AN0:
  1453                           	opt stack 0
  1454  0000AF                     	ds	5
  1455  0000B4                     LCD_DrawRectangle@p4:
  1456                           	opt stack 0
  1457  0000B4                     	ds	4
  1458  0000B8                     LCD_DrawRectangle@p2:
  1459                           	opt stack 0
  1460  0000B8                     	ds	4
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           postdec1	equ	0xFE5
  1468                           fsr1h	equ	0xFE2
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471                           	psect	dataBANK0
  1472  0000F8                     __pdataBANK0:
  1473                           	opt stack 0
  1474  0000F8                     _gCharSize:
  1475                           	opt stack 0
  1476  0000F8                     	ds	4
  1477  0000FC                     _gridSize:
  1478                           	opt stack 0
  1479  0000FC                     	ds	2
  1480  0000FE                     _gForecolour:
  1481                           	opt stack 0
  1482  0000FE                     	ds	2
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1h	equ	0xFE2
  1491                           fsr1l	equ	0xFE1
  1492                           
  1493                           	psect	bssBANK1
  1494  000100                     __pbssBANK1:
  1495                           	opt stack 0
  1496  000100                     _lCBuffer:
  1497                           	opt stack 0
  1498  000100                     	ds	30
  1499  00011E                     _iRAngleSS:
  1500                           	opt stack 0
  1501  00011E                     	ds	4
  1502  000122                     Timer2_Init@DIV:
  1503                           	opt stack 0
  1504  000122                     	ds	4
  1505  000126                     Timer0_Init@DIV:
  1506                           	opt stack 0
  1507  000126                     	ds	4
  1508  00012A                     _I2C2_More:
  1509                           	opt stack 0
  1510  00012A                     	ds	3
  1511  00012D                     _I2C1_More:
  1512                           	opt stack 0
  1513  00012D                     	ds	3
  1514  000130                     _I2C2_Done:
  1515                           	opt stack 0
  1516  000130                     	ds	3
  1517  000133                     _I2C1_Done:
  1518                           	opt stack 0
  1519  000133                     	ds	3
  1520  000136                     _iRAngle:
  1521                           	opt stack 0
  1522  000136                     	ds	2
  1523  000138                     _iRDistance:
  1524                           	opt stack 0
  1525  000138                     	ds	2
  1526  00013A                     _HMIBoard:
  1527                           	opt stack 0
  1528  00013A                     	ds	58
  1529  000174                     _SPI1:
  1530                           	opt stack 0
  1531  000174                     	ds	11
  1532  00017F                     _SPI2:
  1533                           	opt stack 0
  1534  00017F                     	ds	11
  1535  00018A                     _DIPSwitch:
  1536                           	opt stack 0
  1537  00018A                     	ds	10
  1538  000194                     _TestButton:
  1539                           	opt stack 0
  1540  000194                     	ds	10
  1541  00019E                     _PortG:
  1542                           	opt stack 0
  1543  00019E                     	ds	10
  1544  0001A8                     _PortB:
  1545                           	opt stack 0
  1546  0001A8                     	ds	10
  1547  0001B2                     _PortA:
  1548                           	opt stack 0
  1549  0001B2                     	ds	10
  1550  0001BC                     _PortF:
  1551                           	opt stack 0
  1552  0001BC                     	ds	10
  1553  0001C6                     _I2C2T:
  1554                           	opt stack 0
  1555  0001C6                     	ds	7
  1556  0001CD                     _Stepper:
  1557                           	opt stack 0
  1558  0001CD                     	ds	6
  1559  0001D3                     _ADC_AN3:
  1560                           	opt stack 0
  1561  0001D3                     	ds	5
  1562  0001D8                     _ADC_AN2:
  1563                           	opt stack 0
  1564  0001D8                     	ds	5
  1565  0001DD                     _ADC_AN1:
  1566                           	opt stack 0
  1567  0001DD                     	ds	5
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1h	equ	0xFE2
  1576                           fsr1l	equ	0xFE1
  1577                           
  1578                           	psect	dataBANK1
  1579  0001F1                     __pdataBANK1:
  1580                           	opt stack 0
  1581  0001F1                     Console_Render@F6956:
  1582                           	opt stack 0
  1583  0001F1                     	ds	4
  1584  0001F5                     _gLineSize:
  1585                           	opt stack 0
  1586  0001F5                     	ds	4
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           postdec1	equ	0xFE5
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597                           	psect	bssBANK2
  1598  000200                     __pbssBANK2:
  1599                           	opt stack 0
  1600  000200                     _iRScriptStack:
  1601                           	opt stack 0
  1602  000200                     	ds	100
  1603  000264                     Console_MakeField@Fill:
  1604                           	opt stack 0
  1605  000264                     	ds	70
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1h	equ	0xFE2
  1614                           fsr1l	equ	0xFE1
  1615                           
  1616                           	psect	dataBANK3
  1617  000300                     __pdataBANK3:
  1618                           	opt stack 0
  1619  000300                     _maze:
  1620                           	opt stack 0
  1621  000300                     	ds	198
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1h	equ	0xFE2
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	bssBANK4
  1633  000400                     __pbssBANK4:
  1634                           	opt stack 0
  1635  000400                     _mazeConsole:
  1636                           	opt stack 0
  1637  000400                     	ds	99
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1h	equ	0xFE2
  1646                           fsr1l	equ	0xFE1
  1647                           
  1648                           	psect	bssBIGRAM
  1649  000463                     __pbssBIGRAM:
  1650                           	opt stack 0
  1651  000463                     _lBuffer:
  1652                           	opt stack 0
  1653  000463                     	ds	300
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           postdec1	equ	0xFE5
  1661                           fsr1h	equ	0xFE2
  1662                           fsr1l	equ	0xFE1
  1663                           
  1664                           	psect	cstackBANK1
  1665  0001E2                     __pcstackBANK1:
  1666                           	opt stack 0
  1667  0001E2                     Button_Init@pInput:
  1668                           	opt stack 0
  1669  0001E2                     Port_SetType@pInput:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x0
  1673  0001E2                     	ds	2
  1674  0001E4                     Port_SetType@pType:
  1675                           	opt stack 0
  1676  0001E4                     Button_Init@pThreshold:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x2
  1680  0001E4                     	ds	1
  1681  0001E5                     Port_SetType@Output:
  1682                           	opt stack 0
  1683                           
  1684                           ; 1 bytes @ 0x3
  1685  0001E5                     	ds	1
  1686  0001E6                     Port_Init@pInput:
  1687                           	opt stack 0
  1688  0001E6                     Button_Init@pInitIO:
  1689                           	opt stack 0
  1690                           
  1691                           ; 3 bytes @ 0x4
  1692  0001E6                     	ds	2
  1693  0001E8                     Port_Init@pPort:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x6
  1697  0001E8                     	ds	1
  1698  0001E9                     ??_Port_Init:
  1699  0001E9                     Button_Init@pGetState:
  1700                           	opt stack 0
  1701                           
  1702                           ; 3 bytes @ 0x7
  1703  0001E9                     	ds	2
  1704  0001EB                     Port_Init@i:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x9
  1708  0001EB                     	ds	1
  1709  0001EC                     Button_Init@pFunction:
  1710                           	opt stack 0
  1711                           
  1712                           ; 3 bytes @ 0xA
  1713  0001EC                     	ds	3
  1714  0001EF                     HMI_Init@in:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0xD
  1718  0001EF                     	ds	2
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1h	equ	0xFE2
  1727                           fsr1l	equ	0xFE1
  1728                           
  1729                           	psect	cstackBANK0
  1730  0000BC                     __pcstackBANK0:
  1731                           	opt stack 0
  1732  0000BC                     ??_ADC_SetChannel:
  1733  0000BC                     ??_ADC_ConversionTime:
  1734  0000BC                     ??_ADC_SetupIO:
  1735  0000BC                     ?_load_iRScriptStack:
  1736                           	opt stack 0
  1737  0000BC                     ??_Console_Init:
  1738  0000BC                     ?_GetPortProperties:
  1739                           	opt stack 0
  1740  0000BC                     ?_GetPortPORT:
  1741                           	opt stack 0
  1742  0000BC                     ?_GetPortTRIS:
  1743                           	opt stack 0
  1744  0000BC                     ?___lldiv:
  1745                           	opt stack 0
  1746  0000BC                     Mode_Set@pMode:
  1747                           	opt stack 0
  1748  0000BC                     ADC_ClockDivision@pDivide:
  1749                           	opt stack 0
  1750  0000BC                     eusart_putch@eusartSendChar:
  1751                           	opt stack 0
  1752  0000BC                     Port_GetPin@pInput:
  1753                           	opt stack 0
  1754  0000BC                     SPI_DisableISR@pInput:
  1755                           	opt stack 0
  1756  0000BC                     SPI_DCS@pInput:
  1757                           	opt stack 0
  1758  0000BC                     SPI_Send@pInput:
  1759                           	opt stack 0
  1760  0000BC                     Byte_SetBit@pInput:
  1761                           	opt stack 0
  1762  0000BC                     Byte_SetZone@pInput:
  1763                           	opt stack 0
  1764  0000BC                     Byte_GetZone@pInput:
  1765                           	opt stack 0
  1766  0000BC                     Byte_SetByte@pInput:
  1767                           	opt stack 0
  1768  0000BC                     delay_ms@ms:
  1769                           	opt stack 0
  1770  0000BC                     delay_us@us:
  1771                           	opt stack 0
  1772  0000BC                     MXK_Queue@pCallback:
  1773                           	opt stack 0
  1774  0000BC                     ___lldiv@dividend:
  1775                           	opt stack 0
  1776                           
  1777                           ; 4 bytes @ 0x0
  1778  0000BC                     	ds	1
  1779  0000BD                     ADC_SetChannel@pChannel:
  1780                           	opt stack 0
  1781  0000BD                     ADC_ClockDivision@reg:
  1782                           	opt stack 0
  1783  0000BD                     ADC_ConversionTime@pCount:
  1784                           	opt stack 0
  1785                           
  1786                           ; 1 bytes @ 0x1
  1787  0000BD                     	ds	1
  1788  0000BE                     GetPortProperties@pInput:
  1789                           	opt stack 0
  1790  0000BE                     GetPortPORT@pInput:
  1791                           	opt stack 0
  1792  0000BE                     GetPortTRIS@pInput:
  1793                           	opt stack 0
  1794  0000BE                     Port_GetPin@pPin:
  1795                           	opt stack 0
  1796  0000BE                     SPI_Send@pData:
  1797                           	opt stack 0
  1798  0000BE                     Byte_SetBit@pBit:
  1799                           	opt stack 0
  1800  0000BE                     Byte_SetZone@pMax:
  1801                           	opt stack 0
  1802  0000BE                     Byte_GetZone@pMax:
  1803                           	opt stack 0
  1804  0000BE                     Byte_SetByte@pValue:
  1805                           	opt stack 0
  1806  0000BE                     Console_Init@x:
  1807                           	opt stack 0
  1808  0000BE                     ADC_SetupIO@pChannel:
  1809                           	opt stack 0
  1810  0000BE                     ADC_ClockDivision@unfound:
  1811                           	opt stack 0
  1812  0000BE                     ADC_Start@pInput:
  1813                           	opt stack 0
  1814  0000BE                     delay_ms@u:
  1815                           	opt stack 0
  1816  0000BE                     delay_us@u:
  1817                           	opt stack 0
  1818                           
  1819                           ; 4 bytes @ 0x2
  1820  0000BE                     	ds	1
  1821  0000BF                     ??_Port_GetPin:
  1822  0000BF                     LCD_Write@mode:
  1823                           	opt stack 0
  1824  0000BF                     Byte_SetBit@pValue:
  1825                           	opt stack 0
  1826  0000BF                     Byte_SetZone@pChunk:
  1827                           	opt stack 0
  1828  0000BF                     Byte_GetZone@pChunk:
  1829                           	opt stack 0
  1830  0000BF                     Console_Init@y:
  1831                           	opt stack 0
  1832  0000BF                     ADC_SetupIO@MASK:
  1833                           	opt stack 0
  1834                           
  1835                           ; 1 bytes @ 0x3
  1836  0000BF                     	ds	1
  1837  0000C0                     ??_Byte_SetBit:
  1838  0000C0                     ??_ADC_Start:
  1839  0000C0                     LCD_Write@value:
  1840                           	opt stack 0
  1841  0000C0                     Byte_SetZone@pChunkSize:
  1842                           	opt stack 0
  1843  0000C0                     Byte_GetZone@pChunkSize:
  1844                           	opt stack 0
  1845  0000C0                     ADC_Init@pInput:
  1846                           	opt stack 0
  1847  0000C0                     ___lldiv@divisor:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0x4
  1851  0000C0                     	ds	1
  1852  0000C1                     ??_Byte_GetZone:
  1853  0000C1                     Set_Addr_Window@ys:
  1854                           	opt stack 0
  1855  0000C1                     Set_Rotation@m:
  1856                           	opt stack 0
  1857  0000C1                     Port_GetPin@Output:
  1858                           	opt stack 0
  1859  0000C1                     Byte_SetZone@pValue:
  1860                           	opt stack 0
  1861  0000C1                     LCD_Word_Write@value:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x5
  1865  0000C1                     	ds	1
  1866  0000C2                     ??_Byte_SetZone:
  1867  0000C2                     Set_Addr_Window@xe:
  1868                           	opt stack 0
  1869  0000C2                     Set_Rotation@rotation:
  1870                           	opt stack 0
  1871  0000C2                     Byte_GetZone@MASK:
  1872                           	opt stack 0
  1873  0000C2                     ADC_Init@pChannel:
  1874                           	opt stack 0
  1875  0000C2                     MXK_BlockSwitchTo@CUR:
  1876                           	opt stack 0
  1877  0000C2                     MXK_SwitchTo@CUR:
  1878                           	opt stack 0
  1879                           
  1880                           ; 1 bytes @ 0x6
  1881  0000C2                     	ds	1
  1882  0000C3                     Set_Addr_Window@ye:
  1883                           	opt stack 0
  1884  0000C3                     Byte_GetZone@Offset:
  1885                           	opt stack 0
  1886  0000C3                     MXK_BlockSwitchTo@pModule:
  1887                           	opt stack 0
  1888  0000C3                     MXK_SwitchTo@pModule:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x7
  1892  0000C3                     	ds	1
  1893  0000C4                     Set_Addr_Window@xs:
  1894                           	opt stack 0
  1895  0000C4                     Byte_GetZone@Output:
  1896                           	opt stack 0
  1897  0000C4                     ___lldiv@quotient:
  1898                           	opt stack 0
  1899                           
  1900                           ; 4 bytes @ 0x8
  1901  0000C4                     	ds	1
  1902  0000C5                     Byte_SetZone@Offset:
  1903                           	opt stack 0
  1904  0000C5                     LCD_Fill@pColour:
  1905                           	opt stack 0
  1906  0000C5                     Byte_GetPair@pInput:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x9
  1910  0000C5                     	ds	1
  1911  0000C6                     ??_load_iRScriptStack:
  1912  0000C6                     Byte_SetZone@MASK:
  1913                           	opt stack 0
  1914                           
  1915                           ; 1 bytes @ 0xA
  1916  0000C6                     	ds	1
  1917  0000C7                     LCD_Fill@i:
  1918                           	opt stack 0
  1919  0000C7                     Byte_GetPair@pPair:
  1920                           	opt stack 0
  1921  0000C7                     Byte_SetPair@pInput:
  1922                           	opt stack 0
  1923  0000C7                     Byte_SetQuad@pInput:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0xB
  1927  0000C7                     	ds	1
  1928  0000C8                     LCD_Fill@j:
  1929                           	opt stack 0
  1930  0000C8                     ___lldiv@counter:
  1931                           	opt stack 0
  1932  0000C8                     Word_GetPair@pInput:
  1933                           	opt stack 0
  1934  0000C8                     load_iRScriptStack@loadByte:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0xC
  1938  0000C8                     	ds	1
  1939  0000C9                     Byte_SetPair@pPair:
  1940                           	opt stack 0
  1941  0000C9                     Byte_SetQuad@pQuad:
  1942                           	opt stack 0
  1943  0000C9                     Timer0_Init@pFrequency:
  1944                           	opt stack 0
  1945  0000C9                     Timer2_Init@pFrequency:
  1946                           	opt stack 0
  1947                           
  1948                           ; 4 bytes @ 0xD
  1949  0000C9                     	ds	1
  1950  0000CA                     Byte_SetPair@pValue:
  1951                           	opt stack 0
  1952  0000CA                     Byte_SetQuad@pValue:
  1953                           	opt stack 0
  1954  0000CA                     Word_GetPair@pPair:
  1955                           	opt stack 0
  1956  0000CA                     load_iRScriptStack@bytesToLoad:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0xE
  1960  0000CA                     	ds	1
  1961  0000CB                     load_iRScriptStack@i:
  1962                           	opt stack 0
  1963  0000CB                     Port_SetPin@pInput:
  1964                           	opt stack 0
  1965  0000CB                     Port_Set@pInput:
  1966                           	opt stack 0
  1967  0000CB                     SPI_MinSpeed@pInput:
  1968                           	opt stack 0
  1969  0000CB                     SPI_MaxSpeed@pInput:
  1970                           	opt stack 0
  1971  0000CB                     Word_SetPair@pInput:
  1972                           	opt stack 0
  1973  0000CB                     PortProperty_Valid@pInput:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0xF
  1977  0000CB                     	ds	1
  1978  0000CC                     irobot_leds@LEDBit:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x10
  1982  0000CC                     	ds	1
  1983  0000CD                     ??_Timer2_Init:
  1984  0000CD                     ??_Timer0_Init:
  1985  0000CD                     Port_SetPin@pPin:
  1986                           	opt stack 0
  1987  0000CD                     Port_Set@pValue:
  1988                           	opt stack 0
  1989  0000CD                     Word_SetPair@pPair:
  1990                           	opt stack 0
  1991  0000CD                     PortProperty_Valid@pPinDrive:
  1992                           	opt stack 0
  1993  0000CD                     irobot_leds@powerColour:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0x11
  1997  0000CD                     	ds	1
  1998  0000CE                     ??_Port_Set:
  1999  0000CE                     Port_SetPin@pValue:
  2000                           	opt stack 0
  2001  0000CE                     Word_SetPair@pValue:
  2002                           	opt stack 0
  2003  0000CE                     PortProperty_Valid@pPin:
  2004                           	opt stack 0
  2005  0000CE                     irobot_leds@powerLuminosity:
  2006                           	opt stack 0
  2007  0000CE                     Timer2_Init@RDIV:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0x12
  2011  0000CE                     	ds	1
  2012  0000CF                     ??_PortProperty_Valid:
  2013  0000CF                     Port_SetPin@Type:
  2014                           	opt stack 0
  2015  0000CF                     irobot_leds@isScript:
  2016                           	opt stack 0
  2017  0000CF                     Timer0_Init@pCPUClock:
  2018                           	opt stack 0
  2019                           
  2020                           ; 4 bytes @ 0x13
  2021  0000CF                     	ds	1
  2022  0000D0                     LED_Set@pValue:
  2023                           	opt stack 0
  2024  0000D0                     irobot_led_power_on@powerOnColour:
  2025                           	opt stack 0
  2026  0000D0                     Port_TogglePin@pInput:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x14
  2030  0000D0                     	ds	1
  2031  0000D1                     LED_Set@pLED:
  2032                           	opt stack 0
  2033  0000D1                     PortProperty_Valid@Errors:
  2034                           	opt stack 0
  2035                           
  2036                           ; 16 bytes @ 0x15
  2037  0000D1                     	ds	1
  2038  0000D2                     Port_TogglePin@pPin:
  2039                           	opt stack 0
  2040  0000D2                     Timer2_Init@pCPUClock:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0x16
  2044  0000D2                     	ds	1
  2045  0000D3                     Port_TogglePin@Value:
  2046                           	opt stack 0
  2047  0000D3                     Timer0_Init@DIVIDE:
  2048                           	opt stack 0
  2049                           
  2050                           ; 4 bytes @ 0x17
  2051  0000D3                     	ds	1
  2052  0000D4                     LED_Toggle@pLED:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x18
  2056  0000D4                     	ds	1
  2057  0000D5                     
  2058                           ; 1 bytes @ 0x19
  2059  0000D5                     	ds	1
  2060  0000D6                     Timer2_Init@DIVIDE:
  2061                           	opt stack 0
  2062                           
  2063                           ; 4 bytes @ 0x1A
  2064  0000D6                     	ds	8
  2065  0000DE                     Port_Set@TypeRequired:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x22
  2069  0000DE                     	ds	2
  2070  0000E0                     Port_Set@TypeActual:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x24
  2074  0000E0                     	ds	1
  2075  0000E1                     PortProperty_Valid@Pair:
  2076                           	opt stack 0
  2077                           
  2078                           ; 1 bytes @ 0x25
  2079  0000E1                     	ds	1
  2080  0000E2                     Port_Set@Type:
  2081                           	opt stack 0
  2082  0000E2                     Port_CheckPairType@pInput:
  2083                           	opt stack 0
  2084  0000E2                     Port_SetPinType@pInput:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x26
  2088  0000E2                     	ds	2
  2089  0000E4                     Port_CheckPairType@pPair:
  2090                           	opt stack 0
  2091  0000E4                     Port_SetPinType@pPin:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x28
  2095  0000E4                     	ds	1
  2096  0000E5                     Port_CheckPairType@pDrive:
  2097                           	opt stack 0
  2098  0000E5                     Port_SetPinType@pType:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x29
  2102  0000E5                     	ds	1
  2103  0000E6                     Port_CheckPairType@Pin1:
  2104                           	opt stack 0
  2105  0000E6                     Port_SetPinType@Output:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x2A
  2109  0000E6                     	ds	1
  2110  0000E7                     Port_CheckPairType@Pin2:
  2111                           	opt stack 0
  2112  0000E7                     Port_SetPinType@Props:
  2113                           	opt stack 0
  2114                           
  2115                           ; 2 bytes @ 0x2B
  2116  0000E7                     	ds	1
  2117  0000E8                     Port_CheckPairType@Output:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x2C
  2121  0000E8                     	ds	1
  2122  0000E9                     LED_Init@pLED:
  2123                           	opt stack 0
  2124  0000E9                     Port_CheckPairType@Props:
  2125                           	opt stack 0
  2126  0000E9                     Motor_Init@pMotor:
  2127                           	opt stack 0
  2128  0000E9                     SPI_Init@pClock:
  2129                           	opt stack 0
  2130                           
  2131                           ; 4 bytes @ 0x2D
  2132  0000E9                     	ds	2
  2133  0000EB                     Port_CheckQuadType@pInput:
  2134                           	opt stack 0
  2135  0000EB                     Motor_Init@pAddress:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x2F
  2139  0000EB                     	ds	2
  2140  0000ED                     Port_CheckQuadType@pQuad:
  2141                           	opt stack 0
  2142  0000ED                     SPI_Init@pChannel:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x31
  2146  0000ED                     	ds	1
  2147  0000EE                     Port_CheckQuadType@pDrive:
  2148                           	opt stack 0
  2149  0000EE                     SPI_Init@pMode:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x32
  2153  0000EE                     	ds	1
  2154  0000EF                     Port_CheckQuadType@Pair1:
  2155                           	opt stack 0
  2156  0000EF                     SPI_Init@pInput:
  2157                           	opt stack 0
  2158                           
  2159                           ; 2 bytes @ 0x33
  2160  0000EF                     	ds	1
  2161  0000F0                     Port_CheckQuadType@Pair2:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x34
  2165  0000F0                     	ds	1
  2166  0000F1                     ??_LCD_Init:
  2167  0000F1                     Port_CheckQuadType@Output:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x35
  2171  0000F1                     	ds	1
  2172  0000F2                     Port_CheckPortType@pInput:
  2173                           	opt stack 0
  2174  0000F2                     Port_SetQuadType@pInput:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x36
  2178  0000F2                     	ds	1
  2179  0000F3                     LCD_Init@i:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x37
  2183  0000F3                     	ds	1
  2184  0000F4                     Port_CheckPortType@pDrive:
  2185                           	opt stack 0
  2186  0000F4                     Port_SetQuadType@pQuad:
  2187                           	opt stack 0
  2188                           
  2189                           ; 1 bytes @ 0x38
  2190  0000F4                     	ds	1
  2191  0000F5                     Port_CheckPortType@Output:
  2192                           	opt stack 0
  2193  0000F5                     Port_SetQuadType@pType:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x39
  2197  0000F5                     	ds	1
  2198  0000F6                     ??_Port_SetType:
  2199  0000F6                     Port_SetQuadType@Output:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x3A
  2203  0000F6                     	ds	1
  2204  0000F7                     
  2205                           ; 1 bytes @ 0x3B
  2206  0000F7                     	ds	1
  2207  0000F8                     tblptru	equ	0xFF8
  2208                           tblptrh	equ	0xFF7
  2209                           tblptrl	equ	0xFF6
  2210                           tablat	equ	0xFF5
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postdec1	equ	0xFE5
  2214                           fsr1h	equ	0xFE2
  2215                           fsr1l	equ	0xFE1
  2216                           
  2217                           ; 1 bytes @ 0x3C
  2218                           
  2219                           	psect	cstackCOMRAM
  2220  000001                     __pcstackCOMRAM:
  2221                           	opt stack 0
  2222  000001                     i2Byte_SetBit@pInput:
  2223                           	opt stack 0
  2224  000001                     i2Byte_GetZone@pInput:
  2225                           	opt stack 0
  2226  000001                     i2delay_us@us:
  2227                           	opt stack 0
  2228  000001                     i2MXK_Queue@pCallback:
  2229                           	opt stack 0
  2230                           
  2231                           ; 3 bytes @ 0x0
  2232  000001                     	ds	2
  2233  000003                     i2Byte_SetBit@pBit:
  2234                           	opt stack 0
  2235  000003                     i2Byte_GetZone@pMax:
  2236                           	opt stack 0
  2237  000003                     i2delay_us@u:
  2238                           	opt stack 0
  2239                           
  2240                           ; 4 bytes @ 0x2
  2241  000003                     	ds	1
  2242  000004                     i2Byte_SetBit@pValue:
  2243                           	opt stack 0
  2244  000004                     i2Byte_GetZone@pChunk:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x3
  2248  000004                     	ds	1
  2249  000005                     ??i2_Byte_SetBit:
  2250  000005                     i2Byte_GetZone@pChunkSize:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x4
  2254  000005                     	ds	1
  2255  000006                     ??i2_Byte_GetZone:
  2256                           
  2257                           ; 1 bytes @ 0x5
  2258  000006                     	ds	1
  2259  000007                     i2Byte_GetZone@MASK:
  2260                           	opt stack 0
  2261  000007                     i2MXK_SwitchTo@CUR:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x6
  2265  000007                     	ds	1
  2266  000008                     i2Byte_GetZone@Offset:
  2267                           	opt stack 0
  2268  000008                     i2MXK_SwitchTo@pModule:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0x7
  2272  000008                     	ds	1
  2273  000009                     i2Byte_GetZone@Output:
  2274                           	opt stack 0
  2275                           
  2276                           ; 1 bytes @ 0x8
  2277  000009                     	ds	1
  2278  00000A                     i2Byte_GetPair@pInput:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x9
  2282  00000A                     	ds	2
  2283  00000C                     i2Byte_GetPair@pPair:
  2284                           	opt stack 0
  2285                           
  2286                           ; 1 bytes @ 0xB
  2287  00000C                     	ds	1
  2288  00000D                     i2Word_GetPair@pInput:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0xC
  2292  00000D                     	ds	2
  2293  00000F                     i2Word_GetPair@pPair:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0xE
  2297  00000F                     	ds	1
  2298  000010                     i2Port_SetPin@pInput:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0xF
  2302  000010                     	ds	2
  2303  000012                     i2Port_SetPin@pPin:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x11
  2307  000012                     	ds	1
  2308  000013                     i2Port_SetPin@pValue:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x12
  2312  000013                     	ds	1
  2313  000014                     i2Port_SetPin@Type:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x13
  2317  000014                     	ds	1
  2318  000015                     
  2319                           ; 1 bytes @ 0x14
  2320  000015                     	ds	2
  2321  000017                     ??_ISR_Function:
  2322                           
  2323                           ; 1 bytes @ 0x16
  2324  000017                     	ds	18
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postdec1	equ	0xFE5
  2332                           fsr1h	equ	0xFE2
  2333                           fsr1l	equ	0xFE1
  2334                           
  2335 ;;
  2336 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2337 ;;
  2338 ;; *************** function _main *****************
  2339 ;; Defined at:
  2340 ;;		line 321 in file "main.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;		None
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;Total ram usage:        0 bytes
  2359 ;; Hardware stack levels required when called:   18
  2360 ;; This function calls:
  2361 ;;		_init
  2362 ;; This function is called by:
  2363 ;;		Startup code after reset
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text0
  2368  0133B0                     __ptext0:
  2369                           	opt stack 0
  2370  0133B0                     _main:
  2371                           	opt stack 13
  2372                           
  2373                           ;main.c: 322: init();
  2374                           
  2375                           ;incstack = 0
  2376  0133B0  EC2A  F090         	call	_init	;wreg free
  2377  0133B4                     l2377:
  2378                           
  2379                           ;main.c: 325: }
  2380  0133B4  D7FF               	goto	l2377
  2381  0133B6                     __end_of_main:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           postdec1	equ	0xFE5
  2390                           fsr1h	equ	0xFE2
  2391                           fsr1l	equ	0xFE1
  2392                           
  2393 ;; *************** function _init *****************
  2394 ;; Defined at:
  2395 ;;		line 284 in file "main.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;Total ram usage:        0 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:   17
  2416 ;; This function calls:
  2417 ;;		_ADC_Init
  2418 ;;		_ADC_Start
  2419 ;;		_Console_Init
  2420 ;;		_HMI_Init
  2421 ;;		_ISR_Enable
  2422 ;;		_LCD_Init
  2423 ;;		_MXK_BlockSwitchTo
  2424 ;;		_MXK_Dequeue
  2425 ;;		_MXK_Init
  2426 ;;		_MXK_Release
  2427 ;;		_Motor_Init
  2428 ;;		_delay_ms
  2429 ;;		_eusart_init
  2430 ;;		_irobot_init
  2431 ;;		_irobot_init_song_0
  2432 ;;		_irobot_led_power_on
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text1
  2439  012054                     __ptext1:
  2440                           	opt stack 0
  2441  012054                     _init:
  2442                           	opt stack 13
  2443                           
  2444                           ;main.c: 286: MXK_Init();
  2445                           
  2446                           ;incstack = 0
  2447  012054  ECD2  F088         	call	_MXK_Init	;wreg free
  2448                           
  2449                           ;main.c: 289: ISR_Enable();
  2450  012058  ECC3  F099         	call	_ISR_Enable	;wreg free
  2451                           
  2452                           ;main.c: 292: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2453  01205C  0E01               	movlw	1
  2454  01205E  ECAA  F097         	call	_MXK_BlockSwitchTo
  2455  012062  0900               	iorlw	0
  2456  012064  B4D8               	btfsc	status,2,c
  2457  012066  D00C               	goto	l2367
  2458                           
  2459                           ;main.c: 293: Console_Init();
  2460  012068  EC55  F092         	call	_Console_Init	;wreg free
  2461                           
  2462                           ;main.c: 294: HMI_Init();
  2463  01206C  EC2C  F086         	call	_HMI_Init	;wreg free
  2464                           
  2465                           ;main.c: 295: LCD_Init();
  2466  012070  EC92  F089         	call	_LCD_Init	;wreg free
  2467                           
  2468                           ;main.c: 296: if (MXK_Release())
  2469  012074  EC49  F099         	call	_MXK_Release	;wreg free
  2470  012078  0900               	iorlw	0
  2471  01207A  A4D8               	btfss	status,2,c
  2472                           
  2473                           ;main.c: 297: MXK_Dequeue();
  2474  01207C  EC8B  F097         	call	_MXK_Dequeue	;wreg free
  2475  012080                     l2367:
  2476                           
  2477                           ;main.c: 298: }
  2478                           ;main.c: 301: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2479  012080  0E08               	movlw	8
  2480  012082  ECAA  F097         	call	_MXK_BlockSwitchTo
  2481  012086  0900               	iorlw	0
  2482  012088  B4D8               	btfsc	status,2,c
  2483  01208A  D013               	goto	l2369
  2484                           
  2485                           ;main.c: 302: Motor_Init(&Stepper, 0b1000);
  2486  01208C  0ECD               	movlw	low _Stepper
  2487  01208E  0100               	movlb	0	; () banked
  2488  012090  6FE9               	movwf	Motor_Init@pMotor& (0+255),b
  2489  012092  0E01               	movlw	high _Stepper
  2490  012094  0100               	movlb	0	; () banked
  2491  012096  6FEA               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  2492  012098  0E00               	movlw	0
  2493  01209A  0100               	movlb	0	; () banked
  2494  01209C  6FEC               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  2495  01209E  0E08               	movlw	8
  2496  0120A0  6FEB               	movwf	Motor_Init@pAddress& (0+255),b
  2497  0120A2  EC2D  F08D         	call	_Motor_Init	;wreg free
  2498                           
  2499                           ;main.c: 303: if (MXK_Release())
  2500  0120A6  EC49  F099         	call	_MXK_Release	;wreg free
  2501  0120AA  0900               	iorlw	0
  2502  0120AC  A4D8               	btfss	status,2,c
  2503                           
  2504                           ;main.c: 304: MXK_Dequeue();
  2505  0120AE  EC8B  F097         	call	_MXK_Dequeue	;wreg free
  2506  0120B2                     l2369:
  2507                           
  2508                           ;main.c: 305: }
  2509                           ;main.c: 308: ADC_Init(&ADC_AN0, eADC_Ch0);
  2510  0120B2  0EAF               	movlw	low _ADC_AN0
  2511  0120B4  0100               	movlb	0	; () banked
  2512  0120B6  6FC0               	movwf	ADC_Init@pInput& (0+255),b
  2513  0120B8  0E00               	movlw	high _ADC_AN0
  2514  0120BA  0100               	movlb	0	; () banked
  2515  0120BC  6FC1               	movwf	(ADC_Init@pInput+1)& (0+255),b
  2516  0120BE  0E00               	movlw	0
  2517  0120C0  0100               	movlb	0	; () banked
  2518  0120C2  6FC2               	movwf	ADC_Init@pChannel& (0+255),b
  2519  0120C4  EC18  F093         	call	_ADC_Init	;wreg free
  2520                           
  2521                           ;main.c: 309: float ADC_Voltage(ADCPtr plnput);
  2522                           ;main.c: 310: ADC_Start(&ADC_AN0);
  2523  0120C8  0EAF               	movlw	low _ADC_AN0
  2524  0120CA  0100               	movlb	0	; () banked
  2525  0120CC  6FBE               	movwf	ADC_Start@pInput& (0+255),b
  2526  0120CE  0E00               	movlw	high _ADC_AN0
  2527  0120D0  0100               	movlb	0	; () banked
  2528  0120D2  6FBF               	movwf	(ADC_Start@pInput+1)& (0+255),b
  2529  0120D4  EC98  F092         	call	_ADC_Start	;wreg free
  2530                           
  2531                           ;main.c: 313: eusart_init();
  2532  0120D8  ECD2  F098         	call	_eusart_init	;wreg free
  2533                           
  2534                           ;main.c: 314: irobot_init();
  2535  0120DC  EC8E  F099         	call	_irobot_init	;wreg free
  2536                           
  2537                           ;main.c: 315: irobot_led_power_on(0xA);
  2538  0120E0  0E0A               	movlw	10
  2539  0120E2  EC3B  F099         	call	_irobot_led_power_on
  2540                           
  2541                           ;main.c: 316: irobot_init_song_0();
  2542  0120E6  ECC2  F098         	call	_irobot_init_song_0	;wreg free
  2543                           
  2544                           ;main.c: 317: delay_ms(20);
  2545  0120EA  0E00               	movlw	0
  2546  0120EC  0100               	movlb	0	; () banked
  2547  0120EE  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  2548  0120F0  0E14               	movlw	20
  2549  0120F2  6FBC               	movwf	delay_ms@ms& (0+255),b
  2550  0120F4  ECA7  F094         	call	_delay_ms	;wreg free
  2551  0120F8  0012               	return		;funcret
  2552  0120FA                     __end_of_init:
  2553                           	opt stack 0
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           postdec1	equ	0xFE5
  2561                           fsr1h	equ	0xFE2
  2562                           fsr1l	equ	0xFE1
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _irobot_led_power_on *****************
  2566 ;; Defined at:
  2567 ;;		line 334 in file "Library/iRobotSerial.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  powerOnColou    1    wreg     unsigned char 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      void 
  2574 ;; Registers used:
  2575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;Total ram usage:        1 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    9
  2588 ;; This function calls:
  2589 ;;		_irobot_leds
  2590 ;; This function is called by:
  2591 ;;		_init
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text2
  2596  013276                     __ptext2:
  2597                           	opt stack 0
  2598  013276                     _irobot_led_power_on:
  2599                           	opt stack 20
  2600                           
  2601                           ;incstack = 0
  2602                           ;irobot_led_power_on@powerOnColour stored from wreg
  2603  013276  0100               	movlb	0	; () banked
  2604  013278  6FD0               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
  2605                           
  2606                           ;iRobotSerial.c: 335: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
  2607  01327A  0E00               	movlw	0
  2608  01327C  0100               	movlb	0	; () banked
  2609  01327E  6FCC               	movwf	irobot_leds@LEDBit& (0+255),b
  2610  013280  C0D0  F0CD         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
  2611  013284  0EFF               	movlw	255
  2612  013286  0100               	movlb	0	; () banked
  2613  013288  6FCE               	movwf	irobot_leds@powerLuminosity& (0+255),b
  2614  01328A  0E00               	movlw	0
  2615  01328C  ECA1  F095         	call	_irobot_leds
  2616  013290  0012               	return		;funcret
  2617  013292                     __end_of_irobot_led_power_on:
  2618                           	opt stack 0
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           postdec1	equ	0xFE5
  2626                           fsr1h	equ	0xFE2
  2627                           fsr1l	equ	0xFE1
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _irobot_leds *****************
  2631 ;; Defined at:
  2632 ;;		line 259 in file "Library/iRobotSerial.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  isScript        1    wreg     unsigned char 
  2635 ;;  LEDBit          1   16[BANK0 ] unsigned char 
  2636 ;;  powerColour     1   17[BANK0 ] unsigned char 
  2637 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  isScript        1   19[BANK0 ] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2649 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;Total ram usage:        4 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    8
  2656 ;; This function calls:
  2657 ;;		_eusart_putch
  2658 ;;		_load_iRScriptStack
  2659 ;; This function is called by:
  2660 ;;		_irobot_led_power_on
  2661 ;;		_irobot_led_power_off
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text3
  2666  012B42                     __ptext3:
  2667                           	opt stack 0
  2668  012B42                     _irobot_leds:
  2669                           	opt stack 20
  2670                           
  2671                           ;incstack = 0
  2672                           ;irobot_leds@isScript stored from wreg
  2673  012B42  0100               	movlb	0	; () banked
  2674  012B44  6FCF               	movwf	irobot_leds@isScript& (0+255),b
  2675                           
  2676                           ;iRobotSerial.c: 260: if (isScript) {
  2677  012B46  0100               	movlb	0	; () banked
  2678  012B48  51CF               	movf	irobot_leds@isScript& (0+255),w,b
  2679  012B4A  0100               	movlb	0	; () banked
  2680  012B4C  B4D8               	btfsc	status,2,c
  2681  012B4E  D015               	goto	l2144
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;iRobotSerial.c: 261: load_iRScriptStack(4, iR_LEDS,
  2685                           ;iRobotSerial.c: 262: LEDBit, powerColour, powerLuminosity);
  2686  012B50  0E00               	movlw	0
  2687  012B52  0100               	movlb	0	; () banked
  2688  012B54  6FBD               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  2689  012B56  0E8B               	movlw	139
  2690  012B58  6FBC               	movwf	?_load_iRScriptStack& (0+255),b
  2691  012B5A  C0CC  F0BE         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
  2692  012B5E  0100               	movlb	0	; () banked
  2693  012B60  6BBF               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  2694  012B62  C0CD  F0C0         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
  2695  012B66  0100               	movlb	0	; () banked
  2696  012B68  6BC1               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  2697  012B6A  C0CE  F0C2         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
  2698  012B6E  0100               	movlb	0	; () banked
  2699  012B70  6BC3               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  2700  012B72  0E04               	movlw	4
  2701  012B74  EC72  F094         	call	_load_iRScriptStack
  2702                           
  2703                           ;iRobotSerial.c: 263: } else {
  2704  012B78  0012               	return	
  2705  012B7A                     l2144:
  2706                           
  2707                           ;iRobotSerial.c: 264: eusart_putch(iR_LEDS);
  2708  012B7A  0E8B               	movlw	139
  2709  012B7C  EC95  F099         	call	_eusart_putch
  2710                           
  2711                           ;iRobotSerial.c: 265: eusart_putch(LEDBit);
  2712  012B80  0100               	movlb	0	; () banked
  2713  012B82  51CC               	movf	irobot_leds@LEDBit& (0+255),w,b
  2714  012B84  EC95  F099         	call	_eusart_putch
  2715                           
  2716                           ;iRobotSerial.c: 266: eusart_putch(powerColour);
  2717  012B88  0100               	movlb	0	; () banked
  2718  012B8A  51CD               	movf	irobot_leds@powerColour& (0+255),w,b
  2719  012B8C  EC95  F099         	call	_eusart_putch
  2720                           
  2721                           ;iRobotSerial.c: 267: eusart_putch(powerLuminosity);
  2722  012B90  0100               	movlb	0	; () banked
  2723  012B92  51CE               	movf	irobot_leds@powerLuminosity& (0+255),w,b
  2724  012B94  EC95  F099         	call	_eusart_putch
  2725  012B98  0012               	return	
  2726  012B9A                     __end_of_irobot_leds:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           postdec1	equ	0xFE5
  2735                           fsr1h	equ	0xFE2
  2736                           fsr1l	equ	0xFE1
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _load_iRScriptStack *****************
  2740 ;; Defined at:
  2741 ;;		line 190 in file "Library/iRobotSerial.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  bytesToLoad     1    wreg     unsigned char 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
  2746 ;;  i               1   15[BANK0 ] unsigned char 
  2747 ;;  loadByte        2   12[BANK0 ] PTR void [1]
  2748 ;;		 -> ?_load_iRScriptStack(1), 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2758 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;Total ram usage:       16 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    7
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_irobot_leds
  2769 ;;		_irobot_angle_wait
  2770 ;;		_irobot_distance_wait
  2771 ;;		_irobot_move
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text4
  2776  0128E4                     __ptext4:
  2777                           	opt stack 0
  2778  0128E4                     _load_iRScriptStack:
  2779                           	opt stack 20
  2780                           
  2781                           ;incstack = 0
  2782                           ;load_iRScriptStack@bytesToLoad stored from wreg
  2783  0128E4  0100               	movlb	0	; () banked
  2784  0128E6  6FCA               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
  2785                           
  2786                           ;iRobotSerial.c: 191: va_list loadByte;
  2787                           ;iRobotSerial.c: 192: *loadByte = __va_start();
  2788  0128E8  0EBC               	movlw	low ?_load_iRScriptStack
  2789  0128EA  0100               	movlb	0	; () banked
  2790  0128EC  6FC8               	movwf	load_iRScriptStack@loadByte& (0+255),b
  2791  0128EE  0E00               	movlw	high ?_load_iRScriptStack
  2792  0128F0  0100               	movlb	0	; () banked
  2793  0128F2  6FC9               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
  2794                           
  2795                           ;iRobotSerial.c: 193: for (UINT8 i = 0; i < bytesToLoad; i++) {
  2796  0128F4  0E00               	movlw	0
  2797  0128F6  0100               	movlb	0	; () banked
  2798  0128F8  6FCB               	movwf	load_iRScriptStack@i& (0+255),b
  2799  0128FA  D01F               	goto	l2118
  2800  0128FC                     
  2801                           ; BSR set to: 0
  2802                           ;iRobotSerial.c: 194: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
  2803                           
  2804                           ; BSR set to: 0
  2805  0128FC  C0C8  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
  2806  012900  C0C9  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
  2807  012904  0100               	movlb	0	; () banked
  2808  012906  51CB               	movf	load_iRScriptStack@i& (0+255),w,b
  2809  012908  C035  F0C6         	movff	_iRScriptIndex,??_load_iRScriptStack
  2810  01290C  0100               	movlb	0	; () banked
  2811  01290E  6BC7               	clrf	(??_load_iRScriptStack+1)& (0+255),b
  2812  012910  0100               	movlb	0	; () banked
  2813  012912  27C6               	addwf	??_load_iRScriptStack& (0+255),f,b
  2814  012914  0E00               	movlw	0
  2815  012916  23C7               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
  2816  012918  0E00               	movlw	low _iRScriptStack
  2817  01291A  0100               	movlb	0	; () banked
  2818  01291C  25C6               	addwf	??_load_iRScriptStack& (0+255),w,b
  2819  01291E  6EE1               	movwf	fsr1l,c
  2820  012920  0E02               	movlw	high _iRScriptStack
  2821  012922  0100               	movlb	0	; () banked
  2822  012924  21C7               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
  2823  012926  6EE2               	movwf	fsr1h,c
  2824  012928  CFDF FFE7          	movff	indf2,indf1
  2825                           
  2826                           ; BSR set to: 0
  2827  01292C  0E02               	movlw	2
  2828  01292E  0100               	movlb	0	; () banked
  2829  012930  27C8               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
  2830  012932  0E00               	movlw	0
  2831  012934  23C9               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
  2832                           
  2833                           ; BSR set to: 0
  2834  012936  0100               	movlb	0	; () banked
  2835  012938  2BCB               	incf	load_iRScriptStack@i& (0+255),f,b
  2836  01293A                     l2118:
  2837                           
  2838                           ; BSR set to: 0
  2839                           
  2840                           ; BSR set to: 0
  2841  01293A  0100               	movlb	0	; () banked
  2842  01293C  51CA               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  2843  01293E  0100               	movlb	0	; () banked
  2844  012940  5DCB               	subwf	load_iRScriptStack@i& (0+255),w,b
  2845  012942  A0D8               	btfss	status,0,c
  2846  012944  D7DB               	goto	l2119
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;iRobotSerial.c: 195: }
  2850                           ;iRobotSerial.c: 196: ;
  2851                           ;iRobotSerial.c: 197: iRScriptIndex += bytesToLoad;
  2852                           
  2853                           ; BSR set to: 0
  2854  012946  0100               	movlb	0	; () banked
  2855  012948  51CA               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  2856  01294A  2635               	addwf	_iRScriptIndex,f,c
  2857                           
  2858                           ; BSR set to: 0
  2859  01294C  0012               	return		;funcret
  2860  01294E                     __end_of_load_iRScriptStack:
  2861                           	opt stack 0
  2862                           tblptru	equ	0xFF8
  2863                           tblptrh	equ	0xFF7
  2864                           tblptrl	equ	0xFF6
  2865                           tablat	equ	0xFF5
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           indf1	equ	0xFE7
  2869                           postdec1	equ	0xFE5
  2870                           fsr1h	equ	0xFE2
  2871                           fsr1l	equ	0xFE1
  2872                           indf2	equ	0xFDF
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _irobot_init_song_0 *****************
  2878 ;; Defined at:
  2879 ;;		line 271 in file "Library/iRobotSerial.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;Total ram usage:        0 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    8
  2900 ;; This function calls:
  2901 ;;		_eusart_putch
  2902 ;; This function is called by:
  2903 ;;		_init
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text5
  2908  013184                     __ptext5:
  2909                           	opt stack 0
  2910  013184                     _irobot_init_song_0:
  2911                           	opt stack 21
  2912                           
  2913                           ;iRobotSerial.c: 272: eusart_putch(iR_SONG_INIT);
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;incstack = 0
  2917  013184  0E8C               	movlw	140
  2918  013186  EC95  F099         	call	_eusart_putch
  2919                           
  2920                           ;iRobotSerial.c: 273: eusart_putch(0);
  2921  01318A  0E00               	movlw	0
  2922  01318C  EC95  F099         	call	_eusart_putch
  2923                           
  2924                           ;iRobotSerial.c: 274: eusart_putch(1);
  2925  013190  0E01               	movlw	1
  2926  013192  EC95  F099         	call	_eusart_putch
  2927                           
  2928                           ;iRobotSerial.c: 275: eusart_putch(60);
  2929  013196  0E3C               	movlw	60
  2930  013198  EC95  F099         	call	_eusart_putch
  2931                           
  2932                           ;iRobotSerial.c: 276: eusart_putch(4);
  2933  01319C  0E04               	movlw	4
  2934  01319E  EC95  F099         	call	_eusart_putch
  2935  0131A2  0012               	return		;funcret
  2936  0131A4                     __end_of_irobot_init_song_0:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           indf1	equ	0xFE7
  2945                           postdec1	equ	0xFE5
  2946                           fsr1h	equ	0xFE2
  2947                           fsr1l	equ	0xFE1
  2948                           indf2	equ	0xFDF
  2949                           fsr2h	equ	0xFDA
  2950                           fsr2l	equ	0xFD9
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function _irobot_init *****************
  2954 ;; Defined at:
  2955 ;;		line 215 in file "Library/iRobotSerial.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;Total ram usage:        0 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    8
  2976 ;; This function calls:
  2977 ;;		_eusart_putch
  2978 ;; This function is called by:
  2979 ;;		_init
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text6
  2984  01331C                     __ptext6:
  2985                           	opt stack 0
  2986  01331C                     _irobot_init:
  2987                           	opt stack 21
  2988                           
  2989                           ;iRobotSerial.c: 216: eusart_putch(iR_START);
  2990                           
  2991                           ;incstack = 0
  2992  01331C  0E80               	movlw	128
  2993  01331E  EC95  F099         	call	_eusart_putch
  2994                           
  2995                           ;iRobotSerial.c: 217: eusart_putch(iR_FULL_MODE);
  2996  013322  0E84               	movlw	132
  2997  013324  EC95  F099         	call	_eusart_putch
  2998  013328  0012               	return		;funcret
  2999  01332A                     __end_of_irobot_init:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           indf1	equ	0xFE7
  3008                           postdec1	equ	0xFE5
  3009                           fsr1h	equ	0xFE2
  3010                           fsr1l	equ	0xFE1
  3011                           indf2	equ	0xFDF
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _eusart_putch *****************
  3017 ;; Defined at:
  3018 ;;		line 130 in file "Library/iRobotSerial.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  eusartSendCh    1    wreg     unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:        1 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    7
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		_irobot_init
  3043 ;;		_irobot_leds
  3044 ;;		_irobot_init_song_0
  3045 ;;		_irobot_query_and_update
  3046 ;;		_irobot_script_play
  3047 ;;		_irobot_move
  3048 ;;		_irobot_song_play
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text7
  3053  01332A                     __ptext7:
  3054                           	opt stack 0
  3055  01332A                     _eusart_putch:
  3056                           	opt stack 20
  3057                           
  3058                           ;incstack = 0
  3059                           ;eusart_putch@eusartSendChar stored from wreg
  3060  01332A  0100               	movlb	0	; () banked
  3061  01332C  6FBC               	movwf	eusart_putch@eusartSendChar& (0+255),b
  3062  01332E                     
  3063                           ;iRobotSerial.c: 131: while (!TXSTA1bits.TRMT) {
  3064  01332E  A2AD               	btfss	4013,1,c	;volatile
  3065  013330  D7FE               	goto	l11292
  3066                           
  3067                           ;iRobotSerial.c: 132: };
  3068                           ;iRobotSerial.c: 133: TXREG1 = eusartSendChar;
  3069  013332  C0BC  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
  3070  013336  0012               	return		;funcret
  3071  013338                     __end_of_eusart_putch:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           postinc0	equ	0xFEE
  3078                           wreg	equ	0xFE8
  3079                           indf1	equ	0xFE7
  3080                           postdec1	equ	0xFE5
  3081                           fsr1h	equ	0xFE2
  3082                           fsr1l	equ	0xFE1
  3083                           indf2	equ	0xFDF
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _eusart_init *****************
  3089 ;; Defined at:
  3090 ;;		line 113 in file "Library/iRobotSerial.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;Total ram usage:        0 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    7
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_init
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text8
  3119  0131A4                     __ptext8:
  3120                           	opt stack 0
  3121  0131A4                     _eusart_init:
  3122                           	opt stack 22
  3123                           
  3124                           ;iRobotSerial.c: 114: TRISCbits.TRISC6 = 0;
  3125                           
  3126                           ;incstack = 0
  3127  0131A4  9C94               	bcf	3988,6,c	;volatile
  3128                           
  3129                           ;iRobotSerial.c: 115: TRISCbits.TRISC7 = 1;
  3130  0131A6  8E94               	bsf	3988,7,c	;volatile
  3131                           
  3132                           ;iRobotSerial.c: 117: TXSTA1 = 0b00100100;
  3133  0131A8  0E24               	movlw	36
  3134  0131AA  6EAD               	movwf	4013,c	;volatile
  3135                           
  3136                           ;iRobotSerial.c: 118: RCSTA1 = 0b10011000;
  3137  0131AC  0E98               	movlw	152
  3138  0131AE  6EAC               	movwf	4012,c	;volatile
  3139                           
  3140                           ;iRobotSerial.c: 120: BAUDCON1bits.DTRXP = 0;
  3141  0131B0  9A7E               	bcf	3966,5,c	;volatile
  3142                           
  3143                           ;iRobotSerial.c: 121: BAUDCON1bits.SCKP = 0;
  3144  0131B2  987E               	bcf	3966,4,c	;volatile
  3145                           
  3146                           ;iRobotSerial.c: 122: BAUDCON1bits.WUE = 0;
  3147  0131B4  927E               	bcf	3966,1,c	;volatile
  3148                           
  3149                           ;iRobotSerial.c: 123: BAUDCON1bits.ABDEN = 0;
  3150  0131B6  907E               	bcf	3966,0,c	;volatile
  3151                           
  3152                           ;iRobotSerial.c: 125: TXSTA1bits.BRGH = 1;
  3153  0131B8  84AD               	bsf	4013,2,c	;volatile
  3154                           
  3155                           ;iRobotSerial.c: 126: BAUDCON1bits.BRG16 = 0;
  3156  0131BA  967E               	bcf	3966,3,c	;volatile
  3157                           
  3158                           ;iRobotSerial.c: 127: SPBRG1 = 51;
  3159  0131BC  0E33               	movlw	51
  3160  0131BE  6EB0               	movwf	4016,c	;volatile
  3161  0131C0  0012               	return		;funcret
  3162  0131C2                     __end_of_eusart_init:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           indf1	equ	0xFE7
  3171                           postdec1	equ	0xFE5
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _Motor_Init *****************
  3180 ;; Defined at:
  3181 ;;		line 26 in file "Library/Motor.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  3184 ;;		 -> Stepper(6), 
  3185 ;;  pAddress        2   47[BANK0 ] unsigned short 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;Total ram usage:        4 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:   12
  3204 ;; This function calls:
  3205 ;;		_Port_SetPin
  3206 ;;		_Port_SetPinType
  3207 ;;		_Timer0_Init
  3208 ;; This function is called by:
  3209 ;;		_init
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text9
  3214  011A5A                     __ptext9:
  3215                           	opt stack 0
  3216  011A5A                     _Motor_Init:
  3217                           	opt stack 17
  3218                           
  3219                           ;Motor.c: 28: pMotor->mDelta = 0;
  3220                           
  3221                           ;incstack = 0
  3222  011A5A  C0E9  FFD9         	movff	Motor_Init@pMotor,fsr2l
  3223  011A5E  C0EA  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  3224  011A62  0E00               	movlw	0
  3225  011A64  6EDE               	movwf	postinc2,c
  3226  011A66  0E00               	movlw	0
  3227  011A68  6EDD               	movwf	postdec2,c
  3228                           
  3229                           ;Motor.c: 29: pMotor->mFrequency = 0;
  3230  011A6A  0100               	movlb	0	; () banked
  3231  011A6C  EE20 F002          	lfsr	2,2
  3232  011A70  51E9               	movf	Motor_Init@pMotor& (0+255),w,b
  3233  011A72  26D9               	addwf	fsr2l,f,c
  3234  011A74  51EA               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  3235  011A76  22DA               	addwfc	fsr2h,f,c
  3236  011A78  0E00               	movlw	0
  3237  011A7A  6EDE               	movwf	postinc2,c
  3238  011A7C  0E00               	movlw	0
  3239  011A7E  6EDD               	movwf	postdec2,c
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  3243  011A80  0100               	movlb	0	; () banked
  3244  011A82  EE20 F004          	lfsr	2,4
  3245  011A86  51E9               	movf	Motor_Init@pMotor& (0+255),w,b
  3246  011A88  26D9               	addwf	fsr2l,f,c
  3247  011A8A  51EA               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  3248  011A8C  22DA               	addwfc	fsr2h,f,c
  3249  011A8E  C0EB  FFDE         	movff	Motor_Init@pAddress,postinc2
  3250  011A92  C0EC  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  3254  011A96  0E8A               	movlw	low _PortE
  3255  011A98  0100               	movlb	0	; () banked
  3256  011A9A  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  3257  011A9C  0E00               	movlw	high _PortE
  3258  011A9E  0100               	movlb	0	; () banked
  3259  011AA0  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3260  011AA2  0E00               	movlw	0
  3261  011AA4  0100               	movlb	0	; () banked
  3262  011AA6  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  3263  011AA8  0E03               	movlw	3
  3264  011AAA  0100               	movlb	0	; () banked
  3265  011AAC  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  3266  011AAE  EC29  F087         	call	_Port_SetPinType	;wreg free
  3267                           
  3268                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  3269  011AB2  0E8A               	movlw	low _PortE
  3270  011AB4  0100               	movlb	0	; () banked
  3271  011AB6  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  3272  011AB8  0E00               	movlw	high _PortE
  3273  011ABA  0100               	movlb	0	; () banked
  3274  011ABC  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3275  011ABE  0E01               	movlw	1
  3276  011AC0  0100               	movlb	0	; () banked
  3277  011AC2  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  3278  011AC4  0E03               	movlw	3
  3279  011AC6  0100               	movlb	0	; () banked
  3280  011AC8  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  3281  011ACA  EC29  F087         	call	_Port_SetPinType	;wreg free
  3282                           
  3283                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  3284  011ACE  0E8A               	movlw	low _PortE
  3285  011AD0  0100               	movlb	0	; () banked
  3286  011AD2  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  3287  011AD4  0E00               	movlw	high _PortE
  3288  011AD6  0100               	movlb	0	; () banked
  3289  011AD8  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3290  011ADA  0E00               	movlw	0
  3291  011ADC  0100               	movlb	0	; () banked
  3292  011ADE  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  3293  011AE0  0E00               	movlw	0
  3294  011AE2  0100               	movlb	0	; () banked
  3295  011AE4  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  3296  011AE6  EC65  F08E         	call	_Port_SetPin	;wreg free
  3297                           
  3298                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  3299  011AEA  0E8A               	movlw	low _PortE
  3300  011AEC  0100               	movlb	0	; () banked
  3301  011AEE  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  3302  011AF0  0E00               	movlw	high _PortE
  3303  011AF2  0100               	movlb	0	; () banked
  3304  011AF4  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3305  011AF6  0E01               	movlw	1
  3306  011AF8  0100               	movlb	0	; () banked
  3307  011AFA  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  3308  011AFC  0E00               	movlw	0
  3309  011AFE  0100               	movlb	0	; () banked
  3310  011B00  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  3311  011B02  EC65  F08E         	call	_Port_SetPin	;wreg free
  3312                           
  3313                           ;Motor.c: 38: lStepFunction = Motor_Step;
  3314  011B06  0E5A               	movlw	low _Motor_Step
  3315  011B08  0100               	movlb	0	; () banked
  3316  011B0A  6F6A               	movwf	_lStepFunction& (0+255),b
  3317  011B0C  0E17               	movlw	high _Motor_Step
  3318  011B0E  0100               	movlb	0	; () banked
  3319  011B10  6F6B               	movwf	(_lStepFunction+1)& (0+255),b
  3320  011B12  0E01               	movlw	low (_Motor_Step shr (0+16))
  3321  011B14  0100               	movlb	0	; () banked
  3322  011B16  6F6C               	movwf	(_lStepFunction+2)& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;Motor.c: 39: Timer0_Init(1000);
  3326  011B18  0EE8               	movlw	232
  3327  011B1A  0100               	movlb	0	; () banked
  3328  011B1C  6FC9               	movwf	Timer0_Init@pFrequency& (0+255),b
  3329  011B1E  0E03               	movlw	3
  3330  011B20  6FCA               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  3331  011B22  0E00               	movlw	0
  3332  011B24  6FCB               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  3333  011B26  0E00               	movlw	0
  3334  011B28  6FCC               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  3335  011B2A  EC4B  F08A         	call	_Timer0_Init	;wreg free
  3336  011B2E  0012               	return		;funcret
  3337  011B30                     __end_of_Motor_Init:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           indf1	equ	0xFE7
  3346                           postdec1	equ	0xFE5
  3347                           fsr1h	equ	0xFE2
  3348                           fsr1l	equ	0xFE1
  3349                           indf2	equ	0xFDF
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _Timer0_Init *****************
  3357 ;; Defined at:
  3358 ;;		line 25 in file "Library/Timer0.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
  3363 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3373 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;Total ram usage:       14 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    8
  3380 ;; This function calls:
  3381 ;;		_Timer0_Clear
  3382 ;;		___lldiv
  3383 ;; This function is called by:
  3384 ;;		_Motor_Init
  3385 ;;		_Motor_Speed
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text10
  3390  011496                     __ptext10:
  3391                           	opt stack 0
  3392  011496                     _Timer0_Init:
  3393                           	opt stack 20
  3394                           
  3395                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
  3396                           
  3397                           ;incstack = 0
  3398  011496  0E80               	movlw	128
  3399  011498  0100               	movlb	0	; () banked
  3400  01149A  6FCF               	movwf	Timer0_Init@pCPUClock& (0+255),b
  3401  01149C  0E8D               	movlw	141
  3402  01149E  6FD0               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
  3403  0114A0  0E5B               	movlw	91
  3404  0114A2  6FD1               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
  3405  0114A4  0E00               	movlw	0
  3406  0114A6  6FD2               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
  3410                           ;Timer0.c: 31: static UINT8 PRE = 0;
  3411                           ;Timer0.c: 32: static UINT32 DIV = 0;
  3412                           ;Timer0.c: 34: UINT32 DIVIDE;
  3413                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
  3414  0114A8  9ED5               	bcf	4053,7,c	;volatile
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;Timer0.c: 38: if (pFrequency == 0)
  3418  0114AA  0100               	movlb	0	; () banked
  3419  0114AC  51C9               	movf	Timer0_Init@pFrequency& (0+255),w,b
  3420  0114AE  0100               	movlb	0	; () banked
  3421  0114B0  11CA               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
  3422  0114B2  0100               	movlb	0	; () banked
  3423  0114B4  11CB               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
  3424  0114B6  0100               	movlb	0	; () banked
  3425  0114B8  11CC               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
  3426  0114BA  B4D8               	btfsc	status,2,c
  3427  0114BC  0012               	return	
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;Timer0.c: 41: T0CONbits.PSA = 0;
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;Timer0.c: 39: return;
  3434  0114BE  96D5               	bcf	4053,3,c	;volatile
  3435                           
  3436                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
  3437  0114C0  9CD5               	bcf	4053,6,c	;volatile
  3438                           
  3439                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
  3440  0114C2  9AD5               	bcf	4053,5,c	;volatile
  3441                           
  3442                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
  3443  0114C4  98D5               	bcf	4053,4,c	;volatile
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
  3447  0114C6  C0CF  F0BC         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
  3448  0114CA  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
  3449  0114CE  C0D1  F0BE         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
  3450  0114D2  C0D2  F0BF         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
  3451  0114D6  C0C9  F0C0         	movff	Timer0_Init@pFrequency,___lldiv@divisor
  3452  0114DA  C0CA  F0C1         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
  3453  0114DE  C0CB  F0C2         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
  3454  0114E2  C0CC  F0C3         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
  3455  0114E6  ECC7  F08E         	call	___lldiv	;wreg free
  3456  0114EA  C0BC  F0D3         	movff	?___lldiv,Timer0_Init@DIVIDE
  3457  0114EE  C0BD  F0D4         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
  3458  0114F2  C0BE  F0D5         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
  3459  0114F6  C0BF  F0D6         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
  3460                           
  3461                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
  3462  0114FA  D00C               	goto	l1787
  3463  0114FC                     l11586:
  3464                           
  3465                           ;Timer0.c: 50: {
  3466                           ;Timer0.c: 51: INDEX ++;
  3467  0114FC  0100               	movlb	0	; () banked
  3468  0114FE  2B89               	incf	_INDEX& (0+255),f,b
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;Timer0.c: 52: if (INDEX >= 3)
  3472  011500  0E02               	movlw	2
  3473  011502  0100               	movlb	0	; () banked
  3474  011504  6589               	cpfsgt	_INDEX& (0+255),b
  3475  011506  D001               	goto	l1785
  3476  011508  D02F               	goto	u7430
  3477  01150A                     l1785:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;Timer0.c: 56: if (INDEX >= 8)
  3481                           
  3482                           ; BSR set to: 0
  3483  01150A  0E07               	movlw	7
  3484  01150C  0100               	movlb	0	; () banked
  3485  01150E  6589               	cpfsgt	_INDEX& (0+255),b
  3486  011510  D001               	goto	l1787
  3487  011512  0012               	return	
  3488  011514                     l1787:
  3489                           
  3490                           ; BSR set to: 0
  3491                           
  3492                           ; BSR set to: 0
  3493  011514  C0D3  F0BC         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
  3494  011518  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
  3495  01151C  C0D5  F0BE         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
  3496  011520  C0D6  F0BF         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
  3497  011524  0100               	movlb	0	; () banked
  3498  011526  5189               	movf	_INDEX& (0+255),w,b
  3499  011528  0D02               	mullw	2
  3500  01152A  0EDB               	movlw	low Timer0_Init@PRESCALE
  3501  01152C  24F3               	addwf	prodl,w,c
  3502  01152E  6EF6               	movwf	tblptrl,c
  3503  011530  0EFD               	movlw	high Timer0_Init@PRESCALE
  3504  011532  20F4               	addwfc	prodh,w,c
  3505  011534  6EF7               	movwf	tblptrh,c
  3506  011536                     	if	1	;There are 3 active tblptr bytes
  3507  011536  6AF8               	clrf	tblptru,c
  3508  011538  0E00               	movlw	low (__mediumconst shr (0+16))
  3509  01153A  22F8               	addwfc	tblptru,f,c
  3510  01153C                     	endif
  3511  01153C  0009               	tblrd		*+
  3512  01153E  CFF5 F0CD          	movff	tablat,??_Timer0_Init
  3513  011542  0009               	tblrd		*+
  3514  011544  CFF5 F0CE          	movff	tablat,??_Timer0_Init+1
  3515  011548  C0CD  F0C0         	movff	??_Timer0_Init,___lldiv@divisor
  3516  01154C  C0CE  F0C1         	movff	??_Timer0_Init+1,___lldiv@divisor+1
  3517  011550  0100               	movlb	0	; () banked
  3518  011552  6BC2               	clrf	(___lldiv@divisor+2)& (0+255),b
  3519  011554  6BC3               	clrf	(___lldiv@divisor+3)& (0+255),b
  3520  011556  ECC7  F08E         	call	___lldiv	;wreg free
  3521  01155A  0100               	movlb	0	; () banked
  3522  01155C  51BF               	movf	(?___lldiv+3)& (0+255),w,b
  3523  01155E  E1CE               	bnz	l11586
  3524  011560  0100               	movlb	0	; () banked
  3525  011562  05BE               	decf	(?___lldiv+2)& (0+255),w,b
  3526  011564  B0D8               	btfsc	status,0,c
  3527  011566  D7CA               	goto	l1784
  3528  011568                     u7430:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Timer0.c: 58: }
  3532                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
  3533                           
  3534                           ; BSR set to: 0
  3535  011568  0100               	movlb	0	; () banked
  3536  01156A  5189               	movf	_INDEX& (0+255),w,b
  3537  01156C  0D02               	mullw	2
  3538  01156E  0EDB               	movlw	low Timer0_Init@PRESCALE
  3539  011570  24F3               	addwf	prodl,w,c
  3540  011572  6EF6               	movwf	tblptrl,c
  3541  011574  0EFD               	movlw	high Timer0_Init@PRESCALE
  3542  011576  20F4               	addwfc	prodh,w,c
  3543  011578  6EF7               	movwf	tblptrh,c
  3544  01157A                     	if	1	;There are 3 active tblptr bytes
  3545  01157A  6AF8               	clrf	tblptru,c
  3546  01157C  0E00               	movlw	low (__mediumconst shr (0+16))
  3547  01157E  22F8               	addwfc	tblptru,f,c
  3548  011580                     	endif
  3549  011580  0008               	tblrd		*
  3550  011582  CFF5 F088          	movff	tablat,Timer0_Init@PRE
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;Timer0.c: 63: DIV = (DIVIDE-1);
  3554  011586  0EFF               	movlw	255
  3555  011588  0100               	movlb	0	; () banked
  3556  01158A  25D3               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
  3557  01158C  0101               	movlb	1	; () banked
  3558  01158E  6F26               	movwf	Timer0_Init@DIV& (0+255),b
  3559  011590  0EFF               	movlw	255
  3560  011592  0100               	movlb	0	; () banked
  3561  011594  21D4               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
  3562  011596  0101               	movlb	1	; () banked
  3563  011598  6F27               	movwf	(Timer0_Init@DIV+1)& (0+255),b
  3564  01159A  0EFF               	movlw	255
  3565  01159C  0100               	movlb	0	; () banked
  3566  01159E  21D5               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
  3567  0115A0  0101               	movlb	1	; () banked
  3568  0115A2  6F28               	movwf	(Timer0_Init@DIV+2)& (0+255),b
  3569  0115A4  0EFF               	movlw	255
  3570  0115A6  0100               	movlb	0	; () banked
  3571  0115A8  21D6               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
  3572  0115AA  0101               	movlb	1	; () banked
  3573  0115AC  6F29               	movwf	(Timer0_Init@DIV+3)& (0+255),b
  3574                           
  3575                           ; BSR set to: 1
  3576                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
  3577  0115AE  C126  F0BC         	movff	Timer0_Init@DIV,___lldiv@dividend
  3578  0115B2  C127  F0BD         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
  3579  0115B6  C128  F0BE         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
  3580  0115BA  C129  F0BF         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
  3581  0115BE  0100               	movlb	0	; () banked
  3582  0115C0  5188               	movf	Timer0_Init@PRE& (0+255),w,b
  3583  0115C2  0100               	movlb	0	; () banked
  3584  0115C4  6FC0               	movwf	___lldiv@divisor& (0+255),b
  3585  0115C6  6BC1               	clrf	(___lldiv@divisor+1)& (0+255),b
  3586  0115C8  6BC2               	clrf	(___lldiv@divisor+2)& (0+255),b
  3587  0115CA  6BC3               	clrf	(___lldiv@divisor+3)& (0+255),b
  3588  0115CC  ECC7  F08E         	call	___lldiv	;wreg free
  3589  0115D0  0100               	movlb	0	; () banked
  3590  0115D2  1FBC               	comf	?___lldiv& (0+255),f,b
  3591  0115D4  0100               	movlb	0	; () banked
  3592  0115D6  1FBD               	comf	(?___lldiv+1)& (0+255),f,b
  3593  0115D8  0100               	movlb	0	; () banked
  3594  0115DA  4BBC               	infsnz	?___lldiv& (0+255),f,b
  3595  0115DC  2BBD               	incf	(?___lldiv+1)& (0+255),f,b
  3596  0115DE  0EFF               	movlw	255
  3597  0115E0  0100               	movlb	0	; () banked
  3598  0115E2  25BC               	addwf	?___lldiv& (0+255),w,b
  3599  0115E4  0100               	movlb	0	; () banked
  3600  0115E6  6F71               	movwf	_COUNTER& (0+255),b
  3601  0115E8  0EFF               	movlw	255
  3602  0115EA  0100               	movlb	0	; () banked
  3603  0115EC  21BD               	addwfc	(?___lldiv+1)& (0+255),w,b
  3604  0115EE  0100               	movlb	0	; () banked
  3605  0115F0  6F72               	movwf	(_COUNTER+1)& (0+255),b
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;Timer0.c: 68: Timer0_Clear();
  3609  0115F2  ECB1  F099         	call	_Timer0_Clear	;wreg free
  3610                           
  3611                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
  3612  0115F6  8ED5               	bsf	4053,7,c	;volatile
  3613  0115F8  0012               	return		;funcret
  3614  0115FA                     __end_of_Timer0_Init:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           indf1	equ	0xFE7
  3625                           postdec1	equ	0xFE5
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           fsr2h	equ	0xFDA
  3632                           fsr2l	equ	0xFD9
  3633                           status	equ	0xFD8
  3634                           
  3635 ;; *************** function _Timer0_Clear *****************
  3636 ;; Defined at:
  3637 ;;		line 20 in file "Library/Timer0.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		None
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;Total ram usage:        0 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    7
  3658 ;; This function calls:
  3659 ;;		Nothing
  3660 ;; This function is called by:
  3661 ;;		_Timer0_Init
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text11
  3666  013362                     __ptext11:
  3667                           	opt stack 0
  3668  013362                     _Timer0_Clear:
  3669                           	opt stack 20
  3670                           
  3671                           ;Timer0.c: 22: TMR0 = COUNTER;
  3672                           
  3673                           ;incstack = 0
  3674  013362  C071  FFD6         	movff	_COUNTER,4054	;volatile
  3675  013366  C072  FFD7         	movff	_COUNTER+1,4055	;volatile
  3676                           
  3677                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
  3678  01336A  94F2               	bcf	intcon,2,c	;volatile
  3679  01336C  0012               	return		;funcret
  3680  01336E                     __end_of_Timer0_Clear:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           intcon	equ	0xFF2
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           indf1	equ	0xFE7
  3692                           postdec1	equ	0xFE5
  3693                           fsr1h	equ	0xFE2
  3694                           fsr1l	equ	0xFE1
  3695                           indf2	equ	0xFDF
  3696                           postinc2	equ	0xFDE
  3697                           postdec2	equ	0xFDD
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _MXK_Init *****************
  3703 ;; Defined at:
  3704 ;;		line 33 in file "Library/MXK.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:   16
  3725 ;; This function calls:
  3726 ;;		_LED_Init
  3727 ;;		_Port_Init
  3728 ;;		_Port_SetPin
  3729 ;;		_Port_SetPinType
  3730 ;;		_Port_SetQuadType
  3731 ;;		_Port_SetType
  3732 ;;		_delay_ms
  3733 ;; This function is called by:
  3734 ;;		_init
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text12
  3739  0111A4                     __ptext12:
  3740                           	opt stack 0
  3741  0111A4                     _MXK_Init:
  3742                           	opt stack 13
  3743                           
  3744                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  3745                           
  3746                           ;incstack = 0
  3747  0111A4  0E01               	movlw	1
  3748  0111A6  6E4A               	movwf	_Bus_State,c
  3749                           
  3750                           ;MXK.c: 36: lQueue = (Function)0;
  3751  0111A8  0E00               	movlw	0
  3752  0111AA  0100               	movlb	0	; () banked
  3753  0111AC  6F67               	movwf	_lQueue& (0+255),b	;volatile
  3754  0111AE  0E00               	movlw	0
  3755  0111B0  0100               	movlb	0	; () banked
  3756  0111B2  6F68               	movwf	(_lQueue+1)& (0+255),b	;volatile
  3757  0111B4  0E00               	movlw	0
  3758  0111B6  0100               	movlb	0	; () banked
  3759  0111B8  6F69               	movwf	(_lQueue+2)& (0+255),b	;volatile
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  3763  0111BA  0EB2               	movlw	low _PortA
  3764  0111BC  0101               	movlb	1	; () banked
  3765  0111BE  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3766  0111C0  0E01               	movlw	high _PortA
  3767  0111C2  0101               	movlb	1	; () banked
  3768  0111C4  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3769  0111C6  0E00               	movlw	0
  3770  0111C8  0101               	movlb	1	; () banked
  3771  0111CA  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3772  0111CC  EC09  F088         	call	_Port_Init	;wreg free
  3773                           
  3774                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  3775  0111D0  0EA8               	movlw	low _PortB
  3776  0111D2  0101               	movlb	1	; () banked
  3777  0111D4  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3778  0111D6  0E01               	movlw	high _PortB
  3779  0111D8  0101               	movlb	1	; () banked
  3780  0111DA  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3781  0111DC  0E01               	movlw	1
  3782  0111DE  0101               	movlb	1	; () banked
  3783  0111E0  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3784  0111E2  EC09  F088         	call	_Port_Init	;wreg free
  3785                           
  3786                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  3787  0111E6  0E9E               	movlw	low _PortC
  3788  0111E8  0101               	movlb	1	; () banked
  3789  0111EA  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3790  0111EC  0E00               	movlw	high _PortC
  3791  0111EE  0101               	movlb	1	; () banked
  3792  0111F0  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3793  0111F2  0E02               	movlw	2
  3794  0111F4  0101               	movlb	1	; () banked
  3795  0111F6  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3796  0111F8  EC09  F088         	call	_Port_Init	;wreg free
  3797                           
  3798                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  3799  0111FC  0E94               	movlw	low _PortD
  3800  0111FE  0101               	movlb	1	; () banked
  3801  011200  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3802  011202  0E00               	movlw	high _PortD
  3803  011204  0101               	movlb	1	; () banked
  3804  011206  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3805  011208  0E03               	movlw	3
  3806  01120A  0101               	movlb	1	; () banked
  3807  01120C  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3808  01120E  EC09  F088         	call	_Port_Init	;wreg free
  3809                           
  3810                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  3811  011212  0E8A               	movlw	low _PortE
  3812  011214  0101               	movlb	1	; () banked
  3813  011216  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3814  011218  0E00               	movlw	high _PortE
  3815  01121A  0101               	movlb	1	; () banked
  3816  01121C  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3817  01121E  0E04               	movlw	4
  3818  011220  0101               	movlb	1	; () banked
  3819  011222  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3820  011224  EC09  F088         	call	_Port_Init	;wreg free
  3821                           
  3822                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  3823  011228  0EBC               	movlw	low _PortF
  3824  01122A  0101               	movlb	1	; () banked
  3825  01122C  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3826  01122E  0E01               	movlw	high _PortF
  3827  011230  0101               	movlb	1	; () banked
  3828  011232  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3829  011234  0E05               	movlw	5
  3830  011236  0101               	movlb	1	; () banked
  3831  011238  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3832  01123A  EC09  F088         	call	_Port_Init	;wreg free
  3833                           
  3834                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  3835  01123E  0E9E               	movlw	low _PortG
  3836  011240  0101               	movlb	1	; () banked
  3837  011242  6FE6               	movwf	Port_Init@pInput& (0+255),b
  3838  011244  0E01               	movlw	high _PortG
  3839  011246  0101               	movlb	1	; () banked
  3840  011248  6FE7               	movwf	(Port_Init@pInput+1)& (0+255),b
  3841  01124A  0E06               	movlw	6
  3842  01124C  0101               	movlb	1	; () banked
  3843  01124E  6FE8               	movwf	Port_Init@pPort& (0+255),b
  3844  011250  EC09  F088         	call	_Port_Init	;wreg free
  3845                           
  3846                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  3847  011254  0EBC               	movlw	low _PortF
  3848  011256  0100               	movlb	0	; () banked
  3849  011258  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  3850  01125A  0E01               	movlw	high _PortF
  3851  01125C  0100               	movlb	0	; () banked
  3852  01125E  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3853  011260  0E05               	movlw	5
  3854  011262  0100               	movlb	0	; () banked
  3855  011264  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  3856  011266  0E00               	movlw	0
  3857  011268  0100               	movlb	0	; () banked
  3858  01126A  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  3859  01126C  EC29  F087         	call	_Port_SetPinType	;wreg free
  3860                           
  3861                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  3862  011270  0EA8               	movlw	low _PortB
  3863  011272  0100               	movlb	0	; () banked
  3864  011274  6FF2               	movwf	Port_SetQuadType@pInput& (0+255),b
  3865  011276  0E01               	movlw	high _PortB
  3866  011278  0100               	movlb	0	; () banked
  3867  01127A  6FF3               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  3868  01127C  0E00               	movlw	0
  3869  01127E  0100               	movlb	0	; () banked
  3870  011280  6FF4               	movwf	Port_SetQuadType@pQuad& (0+255),b
  3871  011282  0E00               	movlw	0
  3872  011284  0100               	movlb	0	; () banked
  3873  011286  6FF5               	movwf	Port_SetQuadType@pType& (0+255),b
  3874  011288  ECEC  F083         	call	_Port_SetQuadType	;wreg free
  3875                           
  3876                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  3877  01128C  0EBC               	movlw	low _PortF
  3878  01128E  0100               	movlb	0	; () banked
  3879  011290  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  3880  011292  0E01               	movlw	high _PortF
  3881  011294  0100               	movlb	0	; () banked
  3882  011296  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3883  011298  0E06               	movlw	6
  3884  01129A  0100               	movlb	0	; () banked
  3885  01129C  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  3886  01129E  0E03               	movlw	3
  3887  0112A0  0100               	movlb	0	; () banked
  3888  0112A2  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  3889  0112A4  EC29  F087         	call	_Port_SetPinType	;wreg free
  3890                           
  3891                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  3892  0112A8  0E9E               	movlw	low _PortG
  3893  0112AA  0101               	movlb	1	; () banked
  3894  0112AC  6FE2               	movwf	Port_SetType@pInput& (0+255),b
  3895  0112AE  0E01               	movlw	high _PortG
  3896  0112B0  0101               	movlb	1	; () banked
  3897  0112B2  6FE3               	movwf	(Port_SetType@pInput+1)& (0+255),b
  3898  0112B4  0E03               	movlw	3
  3899  0112B6  0101               	movlb	1	; () banked
  3900  0112B8  6FE4               	movwf	Port_SetType@pType& (0+255),b
  3901  0112BA  EC17  F085         	call	_Port_SetType	;wreg free
  3902                           
  3903                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  3904  0112BE  0E9E               	movlw	low _PortG
  3905  0112C0  0100               	movlb	0	; () banked
  3906  0112C2  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  3907  0112C4  0E01               	movlw	high _PortG
  3908  0112C6  0100               	movlb	0	; () banked
  3909  0112C8  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3910  0112CA  0E04               	movlw	4
  3911  0112CC  0100               	movlb	0	; () banked
  3912  0112CE  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  3913  0112D0  0E00               	movlw	0
  3914  0112D2  0100               	movlb	0	; () banked
  3915  0112D4  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  3916  0112D6  EC65  F08E         	call	_Port_SetPin	;wreg free
  3917                           
  3918                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  3919  0112DA  0EBC               	movlw	low _PortF
  3920  0112DC  0100               	movlb	0	; () banked
  3921  0112DE  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  3922  0112E0  0E01               	movlw	high _PortF
  3923  0112E2  0100               	movlb	0	; () banked
  3924  0112E4  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3925  0112E6  0E06               	movlw	6
  3926  0112E8  0100               	movlb	0	; () banked
  3927  0112EA  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  3928  0112EC  0E01               	movlw	1
  3929  0112EE  0100               	movlb	0	; () banked
  3930  0112F0  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  3931  0112F2  EC65  F08E         	call	_Port_SetPin	;wreg free
  3932                           
  3933                           ;MXK.c: 55: LED_Init(eLED1);
  3934  0112F6  0E00               	movlw	0
  3935  0112F8  EC43  F095         	call	_LED_Init
  3936                           
  3937                           ;MXK.c: 56: LED_Init(eLED2);
  3938  0112FC  0E01               	movlw	1
  3939  0112FE  EC43  F095         	call	_LED_Init
  3940                           
  3941                           ;MXK.c: 58: PIR1 = 0;
  3942  011302  0E00               	movlw	0
  3943  011304  6E9E               	movwf	3998,c	;volatile
  3944                           
  3945                           ;MXK.c: 59: PIR2 = 0;
  3946  011306  0E00               	movlw	0
  3947  011308  6EA1               	movwf	4001,c	;volatile
  3948                           
  3949                           ;MXK.c: 60: PIR3 = 0;
  3950  01130A  0E00               	movlw	0
  3951  01130C  6EA4               	movwf	4004,c	;volatile
  3952                           
  3953                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  3954  01130E  8E9B               	bsf	3995,7,c	;volatile
  3955                           
  3956                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  3957  011310  8C9B               	bsf	3995,6,c	;volatile
  3958                           
  3959                           ;MXK.c: 66: delay_ms(100);
  3960  011312  0E00               	movlw	0
  3961  011314  0100               	movlb	0	; () banked
  3962  011316  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  3963  011318  0E64               	movlw	100
  3964  01131A  6FBC               	movwf	delay_ms@ms& (0+255),b
  3965  01131C  ECA7  F094         	call	_delay_ms	;wreg free
  3966                           
  3967                           ;MXK.c: 68: RCONbits.IPEN = 1;
  3968  011320  8ED0               	bsf	4048,7,c	;volatile
  3969  011322  0012               	return		;funcret
  3970  011324                     __end_of_MXK_Init:
  3971                           	opt stack 0
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           intcon	equ	0xFF2
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           indf1	equ	0xFE7
  3982                           postdec1	equ	0xFE5
  3983                           fsr1h	equ	0xFE2
  3984                           fsr1l	equ	0xFE1
  3985                           indf2	equ	0xFDF
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _Port_Init *****************
  3993 ;; Defined at:
  3994 ;;		line 150 in file "Library/Port.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;  pInput          2    4[BANK1 ] const PTR struct Port
  3997 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3998 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3999 ;;  pPort           1    6[BANK1 ] enum E6786
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  i               1    9[BANK1 ] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4011 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;Total ram usage:        6 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:   15
  4018 ;; This function calls:
  4019 ;;		_GetPortPORT
  4020 ;;		_GetPortProperties
  4021 ;;		_GetPortTRIS
  4022 ;;		_Port_Set
  4023 ;;		_Port_SetPinType
  4024 ;;		_Port_SetType
  4025 ;;		_Word_GetPair
  4026 ;; This function is called by:
  4027 ;;		_MXK_Init
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text13
  4032  011012                     __ptext13:
  4033                           	opt stack 0
  4034  011012                     _Port_Init:
  4035                           	opt stack 13
  4036                           
  4037                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  4038                           
  4039                           ;incstack = 0
  4040  011012  0101               	movlb	1	; () banked
  4041  011014  51E8               	movf	Port_Init@pPort& (0+255),w,b
  4042  011016  ECD0  F090         	call	_GetPortProperties
  4043  01101A  C1E6  FFD9         	movff	Port_Init@pInput,fsr2l
  4044  01101E  C1E7  FFDA         	movff	Port_Init@pInput+1,fsr2h
  4045  011022  0100               	movlb	0	; () banked
  4046  011024  C0BC  FFDE         	movff	?_GetPortProperties,postinc2
  4047  011028  0100               	movlb	0	; () banked
  4048  01102A  C0BD  FFDD         	movff	?_GetPortProperties+1,postdec2
  4049                           
  4050                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  4051  01102E  0101               	movlb	1	; () banked
  4052  011030  51E8               	movf	Port_Init@pPort& (0+255),w,b
  4053  011032  EC23  F091         	call	_GetPortPORT
  4054  011036  0101               	movlb	1	; () banked
  4055  011038  EE20 F006          	lfsr	2,6
  4056  01103C  51E6               	movf	Port_Init@pInput& (0+255),w,b
  4057  01103E  26D9               	addwf	fsr2l,f,c
  4058  011040  51E7               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4059  011042  22DA               	addwfc	fsr2h,f,c
  4060  011044  0100               	movlb	0	; () banked
  4061  011046  C0BC  FFDE         	movff	?_GetPortPORT,postinc2
  4062  01104A  0100               	movlb	0	; () banked
  4063  01104C  C0BD  FFDD         	movff	?_GetPortPORT+1,postdec2
  4064                           
  4065                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  4066  011050  0101               	movlb	1	; () banked
  4067  011052  51E8               	movf	Port_Init@pPort& (0+255),w,b
  4068  011054  EC23  F091         	call	_GetPortPORT
  4069  011058  0101               	movlb	1	; () banked
  4070  01105A  EE20 F004          	lfsr	2,4
  4071  01105E  51E6               	movf	Port_Init@pInput& (0+255),w,b
  4072  011060  26D9               	addwf	fsr2l,f,c
  4073  011062  51E7               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4074  011064  22DA               	addwfc	fsr2h,f,c
  4075  011066  0100               	movlb	0	; () banked
  4076  011068  C0BC  FFDE         	movff	?_GetPortPORT,postinc2
  4077  01106C  0100               	movlb	0	; () banked
  4078  01106E  C0BD  FFDD         	movff	?_GetPortPORT+1,postdec2
  4079                           
  4080                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  4081  011072  0101               	movlb	1	; () banked
  4082  011074  51E8               	movf	Port_Init@pPort& (0+255),w,b
  4083  011076  EC7D  F090         	call	_GetPortTRIS
  4084  01107A  0101               	movlb	1	; () banked
  4085  01107C  EE20 F002          	lfsr	2,2
  4086  011080  51E6               	movf	Port_Init@pInput& (0+255),w,b
  4087  011082  26D9               	addwf	fsr2l,f,c
  4088  011084  51E7               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4089  011086  22DA               	addwfc	fsr2h,f,c
  4090  011088  0100               	movlb	0	; () banked
  4091  01108A  C0BC  FFDE         	movff	?_GetPortTRIS,postinc2
  4092  01108E  0100               	movlb	0	; () banked
  4093  011090  C0BD  FFDD         	movff	?_GetPortTRIS+1,postdec2
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  4097  011094  0101               	movlb	1	; () banked
  4098  011096  EE20 F004          	lfsr	2,4
  4099  01109A  51E6               	movf	Port_Init@pInput& (0+255),w,b
  4100  01109C  26D9               	addwf	fsr2l,f,c
  4101  01109E  51E7               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4102  0110A0  22DA               	addwfc	fsr2h,f,c
  4103  0110A2  CFDE F1E9          	movff	postinc2,??_Port_Init
  4104  0110A6  CFDD F1EA          	movff	postdec2,??_Port_Init+1
  4105  0110AA  C1E9  FFD9         	movff	??_Port_Init,fsr2l
  4106  0110AE  C1EA  FFDA         	movff	??_Port_Init+1,fsr2h
  4107  0110B2  0E00               	movlw	0
  4108  0110B4  6EDF               	movwf	indf2,c
  4109                           
  4110                           ; BSR set to: 1
  4111                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  4112  0110B6  0101               	movlb	1	; () banked
  4113  0110B8  EE20 F002          	lfsr	2,2
  4114  0110BC  51E6               	movf	Port_Init@pInput& (0+255),w,b
  4115  0110BE  26D9               	addwf	fsr2l,f,c
  4116  0110C0  51E7               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4117  0110C2  22DA               	addwfc	fsr2h,f,c
  4118  0110C4  CFDE F1E9          	movff	postinc2,??_Port_Init
  4119  0110C8  CFDD F1EA          	movff	postdec2,??_Port_Init+1
  4120  0110CC  C1E9  FFD9         	movff	??_Port_Init,fsr2l
  4121  0110D0  C1EA  FFDA         	movff	??_Port_Init+1,fsr2h
  4122  0110D4  0EFF               	movlw	255
  4123  0110D6  6EDF               	movwf	indf2,c
  4124                           
  4125                           ; BSR set to: 1
  4126                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  4127  0110D8  C1E6  F1E2         	movff	Port_Init@pInput,Port_SetType@pInput
  4128  0110DC  C1E7  F1E3         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  4129  0110E0  0E00               	movlw	0
  4130  0110E2  0101               	movlb	1	; () banked
  4131  0110E4  6FE4               	movwf	Port_SetType@pType& (0+255),b
  4132  0110E6  EC17  F085         	call	_Port_SetType	;wreg free
  4133                           
  4134                           ;Port.c: 166: UINT8 i;
  4135                           ;Port.c: 167: for (i=0; i<8; i++)
  4136  0110EA  0E00               	movlw	0
  4137  0110EC  0101               	movlb	1	; () banked
  4138  0110EE  6FEB               	movwf	Port_Init@i& (0+255),b
  4139  0110F0                     l11482:
  4140                           
  4141                           ; BSR set to: 1
  4142  0110F0  0E07               	movlw	7
  4143  0110F2  0101               	movlb	1	; () banked
  4144  0110F4  65EB               	cpfsgt	Port_Init@i& (0+255),b
  4145  0110F6  D031               	goto	l403
  4146  0110F8  D04B               	goto	u7320
  4147  0110FA                     
  4148                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  4149                           
  4150                           ; BSR set to: 1
  4151  0110FA  C1E6  F0E2         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4152  0110FE  C1E7  F0E3         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4153  011102  C1EB  F0E4         	movff	Port_Init@i,Port_SetPinType@pPin
  4154  011106  0E03               	movlw	3
  4155  011108  0100               	movlb	0	; () banked
  4156  01110A  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  4157  01110C  EC29  F087         	call	_Port_SetPinType	;wreg free
  4158                           
  4159                           ;Port.c: 173: break;
  4160  011110  D03C               	goto	l405
  4161  011112                     
  4162                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  4163  011112  C1E6  F0E2         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4164  011116  C1E7  F0E3         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4165  01111A  C1EB  F0E4         	movff	Port_Init@i,Port_SetPinType@pPin
  4166  01111E  0E02               	movlw	2
  4167  011120  0100               	movlb	0	; () banked
  4168  011122  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  4169  011124  EC29  F087         	call	_Port_SetPinType	;wreg free
  4170                           
  4171                           ;Port.c: 176: break;
  4172  011128  D030               	goto	l405
  4173  01112A                     
  4174                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  4175  01112A  C1E6  F0E2         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4176  01112E  C1E7  F0E3         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4177  011132  C1EB  F0E4         	movff	Port_Init@i,Port_SetPinType@pPin
  4178  011136  0E01               	movlw	1
  4179  011138  0100               	movlb	0	; () banked
  4180  01113A  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  4181  01113C  EC29  F087         	call	_Port_SetPinType	;wreg free
  4182                           
  4183                           ;Port.c: 179: break;
  4184  011140  D024               	goto	l405
  4185  011142                     
  4186                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  4187  011142  C1E6  F0E2         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4188  011146  C1E7  F0E3         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4189  01114A  C1EB  F0E4         	movff	Port_Init@i,Port_SetPinType@pPin
  4190  01114E  0E00               	movlw	0
  4191  011150  0100               	movlb	0	; () banked
  4192  011152  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  4193  011154  EC29  F087         	call	_Port_SetPinType	;wreg free
  4194                           
  4195                           ;Port.c: 183: }
  4196                           
  4197                           ;Port.c: 182: break;
  4198  011158  D018               	goto	l405
  4199  01115A                     l403:
  4200  01115A  C1E6  FFD9         	movff	Port_Init@pInput,fsr2l
  4201  01115E  C1E7  FFDA         	movff	Port_Init@pInput+1,fsr2h
  4202  011162  CFDE F0C8          	movff	postinc2,Word_GetPair@pInput
  4203  011166  CFDD F0C9          	movff	postdec2,Word_GetPair@pInput+1
  4204  01116A  C1EB  F0CA         	movff	Port_Init@i,Word_GetPair@pPair
  4205  01116E  ECC9  F097         	call	_Word_GetPair	;wreg free
  4206                           
  4207                           ; Switch size 1, requested type "space"
  4208                           ; Number of cases is 4, Range of values is 0 to 3
  4209                           ; switch strategies available:
  4210                           ; Name         Instructions Cycles
  4211                           ; simple_byte           13     7 (average)
  4212                           ;	Chosen strategy is simple_byte
  4213  011172  0A00               	xorlw	0	; case 0
  4214  011174  B4D8               	btfsc	status,2,c
  4215  011176  D7C1               	goto	l404
  4216  011178  0A01               	xorlw	1	; case 1
  4217  01117A  B4D8               	btfsc	status,2,c
  4218  01117C  D7D6               	goto	l407
  4219  01117E  0A03               	xorlw	3	; case 2
  4220  011180  B4D8               	btfsc	status,2,c
  4221  011182  D7C7               	goto	l406
  4222  011184  0A01               	xorlw	1	; case 3
  4223  011186  B4D8               	btfsc	status,2,c
  4224  011188  D7DC               	goto	l408
  4225  01118A                     l405:
  4226  01118A  0101               	movlb	1	; () banked
  4227  01118C  2BEB               	incf	Port_Init@i& (0+255),f,b
  4228  01118E  D7B0               	goto	l11482
  4229  011190                     u7320:
  4230                           
  4231                           ; BSR set to: 1
  4232                           ;Port.c: 184: }
  4233                           ;Port.c: 185: Port_Set(pInput, 0x00);
  4234                           
  4235                           ; BSR set to: 1
  4236  011190  C1E6  F0CB         	movff	Port_Init@pInput,Port_Set@pInput
  4237  011194  C1E7  F0CC         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  4238  011198  0E00               	movlw	0
  4239  01119A  0100               	movlb	0	; () banked
  4240  01119C  6FCD               	movwf	Port_Set@pValue& (0+255),b
  4241  01119E  EC0F  F082         	call	_Port_Set	;wreg free
  4242  0111A2  0012               	return		;funcret
  4243  0111A4                     __end_of_Port_Init:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           postdec1	equ	0xFE5
  4256                           fsr1h	equ	0xFE2
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _Port_SetType *****************
  4266 ;; Defined at:
  4267 ;;		line 513 in file "Library/Port.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  pInput          2    0[BANK1 ] const PTR struct Port
  4270 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4271 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4272 ;;  pType           1    2[BANK1 ] enum E6795
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  Output          1    3[BANK1 ] enum E6475
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  1    wreg      enum E6475
  4277 ;; Registers used:
  4278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4284 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;Total ram usage:        6 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:   14
  4291 ;; This function calls:
  4292 ;;		_Port_CheckPortType
  4293 ;;		_Word_SetPair
  4294 ;; This function is called by:
  4295 ;;		_Port_Init
  4296 ;;		_MXK_Init
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text14
  4301  010A2E                     __ptext14:
  4302                           	opt stack 0
  4303  010A2E                     _Port_SetType:
  4304                           	opt stack 14
  4305                           
  4306                           ;Port.c: 515: ePinError Output = ePinErrorState;
  4307                           
  4308                           ;incstack = 0
  4309  010A2E  0E05               	movlw	5
  4310  010A30  0101               	movlb	1	; () banked
  4311  010A32  6FE5               	movwf	Port_SetType@Output& (0+255),b
  4312                           
  4313                           ;Port.c: 517: switch (pType)
  4314  010A34  D07A               	goto	l509
  4315  010A36                     
  4316                           ; BSR set to: 1
  4317                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  4318                           
  4319                           ; BSR set to: 1
  4320  010A36  0101               	movlb	1	; () banked
  4321  010A38  EE20 F002          	lfsr	2,2
  4322  010A3C  51E2               	movf	Port_SetType@pInput& (0+255),w,b
  4323  010A3E  26D9               	addwf	fsr2l,f,c
  4324  010A40  51E3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4325  010A42  22DA               	addwfc	fsr2h,f,c
  4326  010A44  CFDE F0F6          	movff	postinc2,??_Port_SetType
  4327  010A48  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
  4328  010A4C  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
  4329  010A50  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
  4330  010A54  0EFF               	movlw	255
  4331  010A56  D067               	goto	L3
  4332  010A58                     
  4333                           ; BSR set to: 1
  4334                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  4335                           
  4336                           ; BSR set to: 1
  4337  010A58  C1E2  F0F2         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4338  010A5C  C1E3  F0F3         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4339  010A60  0E01               	movlw	1
  4340  010A62  0100               	movlb	0	; () banked
  4341  010A64  6FF4               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4342  010A66  EC98  F096         	call	_Port_CheckPortType	;wreg free
  4343  010A6A  0101               	movlb	1	; () banked
  4344  010A6C  6FE5               	movwf	Port_SetType@Output& (0+255),b
  4345  010A6E  0101               	movlb	1	; () banked
  4346  010A70  51E5               	movf	Port_SetType@Output& (0+255),w,b
  4347  010A72  A4D8               	btfss	status,2,c
  4348  010A74  0012               	return	
  4349                           
  4350                           ; BSR set to: 1
  4351                           ;Port.c: 527: {
  4352                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  4353  010A76  0101               	movlb	1	; () banked
  4354  010A78  EE20 F002          	lfsr	2,2
  4355  010A7C  51E2               	movf	Port_SetType@pInput& (0+255),w,b
  4356  010A7E  26D9               	addwf	fsr2l,f,c
  4357  010A80  51E3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4358  010A82  22DA               	addwfc	fsr2h,f,c
  4359  010A84  CFDE F0F6          	movff	postinc2,??_Port_SetType
  4360  010A88  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
  4361  010A8C  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
  4362  010A90  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
  4363  010A94  0E00               	movlw	0
  4364  010A96  6EDF               	movwf	indf2,c
  4365                           
  4366                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  4367  010A98  0101               	movlb	1	; () banked
  4368  010A9A  EE20 F004          	lfsr	2,4
  4369  010A9E  D036               	goto	L14
  4370  010AA0                     
  4371                           ; BSR set to: 1
  4372                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  4373                           
  4374                           ; BSR set to: 1
  4375  010AA0  C1E2  F0F2         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4376  010AA4  C1E3  F0F3         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4377  010AA8  0E02               	movlw	2
  4378  010AAA  0100               	movlb	0	; () banked
  4379  010AAC  6FF4               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4380  010AAE  EC98  F096         	call	_Port_CheckPortType	;wreg free
  4381  010AB2  0101               	movlb	1	; () banked
  4382  010AB4  6FE5               	movwf	Port_SetType@Output& (0+255),b
  4383  010AB6  0101               	movlb	1	; () banked
  4384  010AB8  51E5               	movf	Port_SetType@Output& (0+255),w,b
  4385  010ABA  A4D8               	btfss	status,2,c
  4386  010ABC  0012               	return	
  4387                           
  4388                           ; BSR set to: 1
  4389                           ;Port.c: 538: {
  4390                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  4391  010ABE  0101               	movlb	1	; () banked
  4392  010AC0  EE20 F002          	lfsr	2,2
  4393  010AC4  51E2               	movf	Port_SetType@pInput& (0+255),w,b
  4394  010AC6  26D9               	addwf	fsr2l,f,c
  4395  010AC8  51E3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4396  010ACA  22DA               	addwfc	fsr2h,f,c
  4397  010ACC  CFDE F0F6          	movff	postinc2,??_Port_SetType
  4398  010AD0  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
  4399  010AD4  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
  4400  010AD8  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
  4401  010ADC  0EFF               	movlw	255
  4402  010ADE  6EDF               	movwf	indf2,c
  4403                           
  4404                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  4405  010AE0  0101               	movlb	1	; () banked
  4406  010AE2  EE20 F004          	lfsr	2,4
  4407  010AE6  D7AA               	goto	L4
  4408  010AE8                     
  4409                           ; BSR set to: 1
  4410                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  4411                           
  4412                           ; BSR set to: 1
  4413  010AE8  C1E2  F0F2         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4414  010AEC  C1E3  F0F3         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4415  010AF0  0E00               	movlw	0
  4416  010AF2  0100               	movlb	0	; () banked
  4417  010AF4  6FF4               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4418  010AF6  EC98  F096         	call	_Port_CheckPortType	;wreg free
  4419  010AFA  0101               	movlb	1	; () banked
  4420  010AFC  6FE5               	movwf	Port_SetType@Output& (0+255),b
  4421  010AFE  0101               	movlb	1	; () banked
  4422  010B00  51E5               	movf	Port_SetType@Output& (0+255),w,b
  4423  010B02  A4D8               	btfss	status,2,c
  4424  010B04  0012               	return	
  4425                           
  4426                           ; BSR set to: 1
  4427                           ;Port.c: 549: {
  4428                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  4429  010B06  0101               	movlb	1	; () banked
  4430  010B08  EE20 F002          	lfsr	2,2
  4431  010B0C                     L14:
  4432  010B0C  51E2               	movf	Port_SetType@pInput& (0+255),w,b
  4433  010B0E  26D9               	addwf	fsr2l,f,c
  4434  010B10  51E3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4435  010B12  22DA               	addwfc	fsr2h,f,c
  4436  010B14  CFDE F0F6          	movff	postinc2,??_Port_SetType
  4437  010B18  CFDD F0F7          	movff	postdec2,??_Port_SetType+1
  4438  010B1C  C0F6  FFD9         	movff	??_Port_SetType,fsr2l
  4439  010B20  C0F7  FFDA         	movff	??_Port_SetType+1,fsr2h
  4440  010B24  0E00               	movlw	0
  4441  010B26                     L3:
  4442  010B26  6EDF               	movwf	indf2,c
  4443                           
  4444                           ;Port.c: 552: }
  4445  010B28  D00E               	goto	l511
  4446  010B2A                     l509:
  4447                           
  4448                           ; BSR set to: 1
  4449                           
  4450                           ; BSR set to: 1
  4451  010B2A  0101               	movlb	1	; () banked
  4452  010B2C  51E4               	movf	Port_SetType@pType& (0+255),w,b
  4453                           
  4454                           ; Switch size 1, requested type "space"
  4455                           ; Number of cases is 4, Range of values is 0 to 3
  4456                           ; switch strategies available:
  4457                           ; Name         Instructions Cycles
  4458                           ; simple_byte           13     7 (average)
  4459                           ;	Chosen strategy is simple_byte
  4460  010B2E  0A00               	xorlw	0	; case 0
  4461  010B30  B4D8               	btfsc	status,2,c
  4462  010B32  D781               	goto	l510
  4463  010B34  0A01               	xorlw	1	; case 1
  4464  010B36  B4D8               	btfsc	status,2,c
  4465  010B38  D78F               	goto	l512
  4466  010B3A  0A03               	xorlw	3	; case 2
  4467  010B3C  B4D8               	btfsc	status,2,c
  4468  010B3E  D7B0               	goto	l516
  4469  010B40  0A01               	xorlw	1	; case 3
  4470  010B42  B4D8               	btfsc	status,2,c
  4471  010B44  D7D1               	goto	l519
  4472  010B46                     l511:
  4473                           
  4474                           ; BSR set to: 1
  4475                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  4476                           
  4477                           ; BSR set to: 1
  4478  010B46  0E08               	movlw	8
  4479  010B48  0101               	movlb	1	; () banked
  4480  010B4A  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4481  010B4C  0100               	movlb	0	; () banked
  4482  010B4E  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4483  010B50  0E00               	movlw	0
  4484  010B52  0101               	movlb	1	; () banked
  4485  010B54  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4486  010B56  0100               	movlb	0	; () banked
  4487  010B58  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4488  010B5A  0E00               	movlw	0
  4489  010B5C  0100               	movlb	0	; () banked
  4490  010B5E  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4491  010B60  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4492  010B64  EC27  F097         	call	_Word_SetPair	;wreg free
  4493                           
  4494                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  4495  010B68  0E08               	movlw	8
  4496  010B6A  0101               	movlb	1	; () banked
  4497  010B6C  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4498  010B6E  0100               	movlb	0	; () banked
  4499  010B70  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4500  010B72  0E00               	movlw	0
  4501  010B74  0101               	movlb	1	; () banked
  4502  010B76  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4503  010B78  0100               	movlb	0	; () banked
  4504  010B7A  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4505  010B7C  0E01               	movlw	1
  4506  010B7E  0100               	movlb	0	; () banked
  4507  010B80  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4508  010B82  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4509  010B86  EC27  F097         	call	_Word_SetPair	;wreg free
  4510                           
  4511                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  4512  010B8A  0E08               	movlw	8
  4513  010B8C  0101               	movlb	1	; () banked
  4514  010B8E  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4515  010B90  0100               	movlb	0	; () banked
  4516  010B92  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4517  010B94  0E00               	movlw	0
  4518  010B96  0101               	movlb	1	; () banked
  4519  010B98  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4520  010B9A  0100               	movlb	0	; () banked
  4521  010B9C  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4522  010B9E  0E02               	movlw	2
  4523  010BA0  0100               	movlb	0	; () banked
  4524  010BA2  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4525  010BA4  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4526  010BA8  EC27  F097         	call	_Word_SetPair	;wreg free
  4527                           
  4528                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  4529  010BAC  0E08               	movlw	8
  4530  010BAE  0101               	movlb	1	; () banked
  4531  010BB0  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4532  010BB2  0100               	movlb	0	; () banked
  4533  010BB4  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4534  010BB6  0E00               	movlw	0
  4535  010BB8  0101               	movlb	1	; () banked
  4536  010BBA  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4537  010BBC  0100               	movlb	0	; () banked
  4538  010BBE  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4539  010BC0  0E03               	movlw	3
  4540  010BC2  0100               	movlb	0	; () banked
  4541  010BC4  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4542  010BC6  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4543  010BCA  EC27  F097         	call	_Word_SetPair	;wreg free
  4544                           
  4545                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  4546  010BCE  0E08               	movlw	8
  4547  010BD0  0101               	movlb	1	; () banked
  4548  010BD2  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4549  010BD4  0100               	movlb	0	; () banked
  4550  010BD6  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4551  010BD8  0E00               	movlw	0
  4552  010BDA  0101               	movlb	1	; () banked
  4553  010BDC  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4554  010BDE  0100               	movlb	0	; () banked
  4555  010BE0  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4556  010BE2  0E04               	movlw	4
  4557  010BE4  0100               	movlb	0	; () banked
  4558  010BE6  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4559  010BE8  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4560  010BEC  EC27  F097         	call	_Word_SetPair	;wreg free
  4561                           
  4562                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  4563  010BF0  0E08               	movlw	8
  4564  010BF2  0101               	movlb	1	; () banked
  4565  010BF4  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4566  010BF6  0100               	movlb	0	; () banked
  4567  010BF8  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4568  010BFA  0E00               	movlw	0
  4569  010BFC  0101               	movlb	1	; () banked
  4570  010BFE  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4571  010C00  0100               	movlb	0	; () banked
  4572  010C02  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4573  010C04  0E05               	movlw	5
  4574  010C06  0100               	movlb	0	; () banked
  4575  010C08  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4576  010C0A  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4577  010C0E  EC27  F097         	call	_Word_SetPair	;wreg free
  4578                           
  4579                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  4580  010C12  0E08               	movlw	8
  4581  010C14  0101               	movlb	1	; () banked
  4582  010C16  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4583  010C18  0100               	movlb	0	; () banked
  4584  010C1A  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4585  010C1C  0E00               	movlw	0
  4586  010C1E  0101               	movlb	1	; () banked
  4587  010C20  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4588  010C22  0100               	movlb	0	; () banked
  4589  010C24  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4590  010C26  0E06               	movlw	6
  4591  010C28  0100               	movlb	0	; () banked
  4592  010C2A  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4593  010C2C  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4594  010C30  EC27  F097         	call	_Word_SetPair	;wreg free
  4595                           
  4596                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  4597  010C34  0E08               	movlw	8
  4598  010C36  0101               	movlb	1	; () banked
  4599  010C38  25E2               	addwf	Port_SetType@pInput& (0+255),w,b
  4600  010C3A  0100               	movlb	0	; () banked
  4601  010C3C  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
  4602  010C3E  0E00               	movlw	0
  4603  010C40  0101               	movlb	1	; () banked
  4604  010C42  21E3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4605  010C44  0100               	movlb	0	; () banked
  4606  010C46  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4607  010C48  0E07               	movlw	7
  4608  010C4A  0100               	movlb	0	; () banked
  4609  010C4C  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
  4610  010C4E  C1E4  F0CE         	movff	Port_SetType@pType,Word_SetPair@pValue
  4611  010C52  EC27  F097         	call	_Word_SetPair	;wreg free
  4612  010C56  0012               	return	
  4613  010C58                     __end_of_Port_SetType:
  4614                           	opt stack 0
  4615                           tblptru	equ	0xFF8
  4616                           tblptrh	equ	0xFF7
  4617                           tblptrl	equ	0xFF6
  4618                           tablat	equ	0xFF5
  4619                           prodh	equ	0xFF4
  4620                           prodl	equ	0xFF3
  4621                           intcon	equ	0xFF2
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           indf1	equ	0xFE7
  4625                           postdec1	equ	0xFE5
  4626                           fsr1h	equ	0xFE2
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _Port_CheckPortType *****************
  4636 ;; Defined at:
  4637 ;;		line 138 in file "Library/Port.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  4640 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4641 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4642 ;;  pDrive          1   56[BANK0 ] enum E6469
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  Output          1   57[BANK0 ] enum E6475
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      enum E6475
  4647 ;; Registers used:
  4648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        4 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:   13
  4661 ;; This function calls:
  4662 ;;		_Port_CheckQuadType
  4663 ;; This function is called by:
  4664 ;;		_Port_SetType
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text15
  4669  012D30                     __ptext15:
  4670                           	opt stack 0
  4671  012D30                     _Port_CheckPortType:
  4672                           	opt stack 14
  4673                           
  4674                           ;Port.c: 140: ePinError Output = ePinErrorState;
  4675                           
  4676                           ;incstack = 0
  4677  012D30  0E05               	movlw	5
  4678  012D32  0100               	movlb	0	; () banked
  4679  012D34  6FF5               	movwf	Port_CheckPortType@Output& (0+255),b
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  4683  012D36  C0F2  F0EB         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  4684  012D3A  C0F3  F0EC         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  4685  012D3E  0E00               	movlw	0
  4686  012D40  0100               	movlb	0	; () banked
  4687  012D42  6FED               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  4688  012D44  C0F4  F0EE         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  4689  012D48  EC74  F095         	call	_Port_CheckQuadType	;wreg free
  4690  012D4C  0100               	movlb	0	; () banked
  4691  012D4E  6FF5               	movwf	Port_CheckPortType@Output& (0+255),b
  4692  012D50  0100               	movlb	0	; () banked
  4693  012D52  51F5               	movf	Port_CheckPortType@Output& (0+255),w,b
  4694  012D54  A4D8               	btfss	status,2,c
  4695  012D56  D00D               	goto	l397
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  4699  012D58  C0F2  F0EB         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  4700  012D5C  C0F3  F0EC         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  4701  012D60  0E01               	movlw	1
  4702  012D62  0100               	movlb	0	; () banked
  4703  012D64  6FED               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  4704  012D66  C0F4  F0EE         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  4705  012D6A  EC74  F095         	call	_Port_CheckQuadType	;wreg free
  4706  012D6E  0100               	movlb	0	; () banked
  4707  012D70  6FF5               	movwf	Port_CheckPortType@Output& (0+255),b
  4708  012D72                     l397:
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;Port.c: 146: return Output;
  4712                           
  4713                           ; BSR set to: 0
  4714  012D72  0100               	movlb	0	; () banked
  4715  012D74  51F5               	movf	Port_CheckPortType@Output& (0+255),w,b
  4716  012D76  0012               	return	
  4717  012D78                     __end_of_Port_CheckPortType:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           indf1	equ	0xFE7
  4729                           postdec1	equ	0xFE5
  4730                           fsr1h	equ	0xFE2
  4731                           fsr1l	equ	0xFE1
  4732                           indf2	equ	0xFDF
  4733                           postinc2	equ	0xFDE
  4734                           postdec2	equ	0xFDD
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function _Port_Set *****************
  4740 ;; Defined at:
  4741 ;;		line 570 in file "Library/Port.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  4744 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4745 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4746 ;;  pValue          1   17[BANK0 ] unsigned char 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  4749 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  4750 ;;  Type            1   38[BANK0 ] enum E6795
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4760 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;Total ram usage:       24 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:   10
  4767 ;; This function calls:
  4768 ;;		_Byte_SetByte
  4769 ;;		_Word_GetPair
  4770 ;; This function is called by:
  4771 ;;		_Port_Init
  4772 ;;		_Port_Toggle
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text16
  4777  01041E                     __ptext16:
  4778                           	opt stack 0
  4779  01041E                     _Port_Set:
  4780                           	opt stack 17
  4781                           
  4782                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;incstack = 0
  4786  01041E  0E08               	movlw	8
  4787  010420  0100               	movlb	0	; () banked
  4788  010422  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  4789  010424  0100               	movlb	0	; () banked
  4790  010426  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  4791  010428  0E00               	movlw	0
  4792  01042A  0100               	movlb	0	; () banked
  4793  01042C  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4794  01042E  0100               	movlb	0	; () banked
  4795  010430  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4796  010432  0E00               	movlw	0
  4797  010434  0100               	movlb	0	; () banked
  4798  010436  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  4799  010438  ECC9  F097         	call	_Word_GetPair	;wreg free
  4800  01043C  0100               	movlb	0	; () banked
  4801  01043E  6FE2               	movwf	Port_Set@Type& (0+255),b
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  4805  010440  0100               	movlb	0	; () banked
  4806  010442  51E2               	movf	Port_Set@Type& (0+255),w,b
  4807  010444  0100               	movlb	0	; () banked
  4808  010446  6FCE               	movwf	??_Port_Set& (0+255),b
  4809  010448  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  4810  01044A  0E0E               	movlw	14
  4811  01044C                     u7025:
  4812  01044C  90D8               	bcf	status,0,c
  4813  01044E  0100               	movlb	0	; () banked
  4814  010450  37CE               	rlcf	??_Port_Set& (0+255),f,b
  4815  010452  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4816  010454  2EE8               	decfsz	wreg,f,c
  4817  010456  D7FA               	goto	u7025
  4818  010458  0100               	movlb	0	; () banked
  4819  01045A  51E2               	movf	Port_Set@Type& (0+255),w,b
  4820  01045C  0100               	movlb	0	; () banked
  4821  01045E  6FD0               	movwf	(??_Port_Set+2)& (0+255),b
  4822  010460  6BD1               	clrf	(??_Port_Set+3)& (0+255),b
  4823  010462  0E0C               	movlw	12
  4824  010464                     u7035:
  4825  010464  90D8               	bcf	status,0,c
  4826  010466  0100               	movlb	0	; () banked
  4827  010468  37D0               	rlcf	(??_Port_Set+2)& (0+255),f,b
  4828  01046A  37D1               	rlcf	(??_Port_Set+3)& (0+255),f,b
  4829  01046C  2EE8               	decfsz	wreg,f,c
  4830  01046E  D7FA               	goto	u7035
  4831  010470  0100               	movlb	0	; () banked
  4832  010472  51E2               	movf	Port_Set@Type& (0+255),w,b
  4833  010474  0100               	movlb	0	; () banked
  4834  010476  6FD2               	movwf	(??_Port_Set+4)& (0+255),b
  4835  010478  6BD3               	clrf	(??_Port_Set+5)& (0+255),b
  4836  01047A  0E0A               	movlw	10
  4837  01047C                     u7045:
  4838  01047C  90D8               	bcf	status,0,c
  4839  01047E  0100               	movlb	0	; () banked
  4840  010480  37D2               	rlcf	(??_Port_Set+4)& (0+255),f,b
  4841  010482  37D3               	rlcf	(??_Port_Set+5)& (0+255),f,b
  4842  010484  2EE8               	decfsz	wreg,f,c
  4843  010486  D7FA               	goto	u7045
  4844  010488  0100               	movlb	0	; () banked
  4845  01048A  51E2               	movf	Port_Set@Type& (0+255),w,b
  4846  01048C  0100               	movlb	0	; () banked
  4847  01048E  6FD5               	movwf	(??_Port_Set+7)& (0+255),b
  4848  010490  6BD4               	clrf	(??_Port_Set+6)& (0+255),b
  4849  010492  0100               	movlb	0	; () banked
  4850  010494  51E2               	movf	Port_Set@Type& (0+255),w,b
  4851  010496  0100               	movlb	0	; () banked
  4852  010498  6FD6               	movwf	(??_Port_Set+8)& (0+255),b
  4853  01049A  6BD7               	clrf	(??_Port_Set+9)& (0+255),b
  4854  01049C  0E06               	movlw	6
  4855  01049E                     u7055:
  4856  01049E  90D8               	bcf	status,0,c
  4857  0104A0  0100               	movlb	0	; () banked
  4858  0104A2  37D6               	rlcf	(??_Port_Set+8)& (0+255),f,b
  4859  0104A4  37D7               	rlcf	(??_Port_Set+9)& (0+255),f,b
  4860  0104A6  2EE8               	decfsz	wreg,f,c
  4861  0104A8  D7FA               	goto	u7055
  4862  0104AA  0100               	movlb	0	; () banked
  4863  0104AC  51E2               	movf	Port_Set@Type& (0+255),w,b
  4864  0104AE  0100               	movlb	0	; () banked
  4865  0104B0  6FD8               	movwf	(??_Port_Set+10)& (0+255),b
  4866  0104B2  6BD9               	clrf	(??_Port_Set+11)& (0+255),b
  4867  0104B4  0100               	movlb	0	; () banked
  4868  0104B6  3BD8               	swapf	(??_Port_Set+10)& (0+255),f,b
  4869  0104B8  3BD9               	swapf	(??_Port_Set+11)& (0+255),f,b
  4870  0104BA  0EF0               	movlw	240
  4871  0104BC  17D9               	andwf	(??_Port_Set+11)& (0+255),f,b
  4872  0104BE  51D8               	movf	(??_Port_Set+10)& (0+255),w,b
  4873  0104C0  0B0F               	andlw	15
  4874  0104C2  13D9               	iorwf	(??_Port_Set+11)& (0+255),f,b
  4875  0104C4  0EF0               	movlw	240
  4876  0104C6  17D8               	andwf	(??_Port_Set+10)& (0+255),f,b
  4877  0104C8  0100               	movlb	0	; () banked
  4878  0104CA  51E2               	movf	Port_Set@Type& (0+255),w,b
  4879  0104CC  0100               	movlb	0	; () banked
  4880  0104CE  6FDA               	movwf	(??_Port_Set+12)& (0+255),b
  4881  0104D0  6BDB               	clrf	(??_Port_Set+13)& (0+255),b
  4882  0104D2  0100               	movlb	0	; () banked
  4883  0104D4  90D8               	bcf	status,0,c
  4884  0104D6  37DA               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4885  0104D8  37DB               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4886  0104DA  0100               	movlb	0	; () banked
  4887  0104DC  90D8               	bcf	status,0,c
  4888  0104DE  37DA               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4889  0104E0  37DB               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4890  0104E2  0100               	movlb	0	; () banked
  4891  0104E4  51E2               	movf	Port_Set@Type& (0+255),w,b
  4892  0104E6  0100               	movlb	0	; () banked
  4893  0104E8  6FDC               	movwf	(??_Port_Set+14)& (0+255),b
  4894  0104EA  6BDD               	clrf	(??_Port_Set+15)& (0+255),b
  4895  0104EC  0100               	movlb	0	; () banked
  4896  0104EE  51DA               	movf	(??_Port_Set+12)& (0+255),w,b
  4897  0104F0  0100               	movlb	0	; () banked
  4898  0104F2  13DC               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4899  0104F4  0100               	movlb	0	; () banked
  4900  0104F6  51DB               	movf	(??_Port_Set+13)& (0+255),w,b
  4901  0104F8  0100               	movlb	0	; () banked
  4902  0104FA  13DD               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4903  0104FC  0100               	movlb	0	; () banked
  4904  0104FE  51D8               	movf	(??_Port_Set+10)& (0+255),w,b
  4905  010500  0100               	movlb	0	; () banked
  4906  010502  13DC               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4907  010504  0100               	movlb	0	; () banked
  4908  010506  51D9               	movf	(??_Port_Set+11)& (0+255),w,b
  4909  010508  0100               	movlb	0	; () banked
  4910  01050A  13DD               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4911  01050C  0100               	movlb	0	; () banked
  4912  01050E  51D6               	movf	(??_Port_Set+8)& (0+255),w,b
  4913  010510  0100               	movlb	0	; () banked
  4914  010512  13DC               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4915  010514  0100               	movlb	0	; () banked
  4916  010516  51D7               	movf	(??_Port_Set+9)& (0+255),w,b
  4917  010518  0100               	movlb	0	; () banked
  4918  01051A  13DD               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4919  01051C  0100               	movlb	0	; () banked
  4920  01051E  51D4               	movf	(??_Port_Set+6)& (0+255),w,b
  4921  010520  0100               	movlb	0	; () banked
  4922  010522  13DC               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4923  010524  0100               	movlb	0	; () banked
  4924  010526  51D5               	movf	(??_Port_Set+7)& (0+255),w,b
  4925  010528  0100               	movlb	0	; () banked
  4926  01052A  13DD               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4927  01052C  0100               	movlb	0	; () banked
  4928  01052E  51D2               	movf	(??_Port_Set+4)& (0+255),w,b
  4929  010530  0100               	movlb	0	; () banked
  4930  010532  13DC               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4931  010534  0100               	movlb	0	; () banked
  4932  010536  51D3               	movf	(??_Port_Set+5)& (0+255),w,b
  4933  010538  0100               	movlb	0	; () banked
  4934  01053A  13DD               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4935  01053C  0100               	movlb	0	; () banked
  4936  01053E  51D0               	movf	(??_Port_Set+2)& (0+255),w,b
  4937  010540  0100               	movlb	0	; () banked
  4938  010542  13DC               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4939  010544  0100               	movlb	0	; () banked
  4940  010546  51D1               	movf	(??_Port_Set+3)& (0+255),w,b
  4941  010548  0100               	movlb	0	; () banked
  4942  01054A  13DD               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4943  01054C  0100               	movlb	0	; () banked
  4944  01054E  51CE               	movf	??_Port_Set& (0+255),w,b
  4945  010550  0100               	movlb	0	; () banked
  4946  010552  11DC               	iorwf	(??_Port_Set+14)& (0+255),w,b
  4947  010554  0100               	movlb	0	; () banked
  4948  010556  6FDE               	movwf	Port_Set@TypeRequired& (0+255),b
  4949  010558  0100               	movlb	0	; () banked
  4950  01055A  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  4951  01055C  0100               	movlb	0	; () banked
  4952  01055E  11DD               	iorwf	(??_Port_Set+15)& (0+255),w,b
  4953  010560  0100               	movlb	0	; () banked
  4954  010562  6FDF               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;Port.c: 574: UINT16 TypeActual = Type;
  4958  010564  C0E2  F0E0         	movff	Port_Set@Type,Port_Set@TypeActual
  4959  010568  0100               	movlb	0	; () banked
  4960  01056A  6BE1               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  4964  01056C  0E08               	movlw	8
  4965  01056E  0100               	movlb	0	; () banked
  4966  010570  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  4967  010572  0100               	movlb	0	; () banked
  4968  010574  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  4969  010576  0E00               	movlw	0
  4970  010578  0100               	movlb	0	; () banked
  4971  01057A  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4972  01057C  0100               	movlb	0	; () banked
  4973  01057E  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4974  010580  0E01               	movlw	1
  4975  010582  0100               	movlb	0	; () banked
  4976  010584  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  4977  010586  ECC9  F097         	call	_Word_GetPair	;wreg free
  4978  01058A  0100               	movlb	0	; () banked
  4979  01058C  6FCE               	movwf	??_Port_Set& (0+255),b
  4980  01058E  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  4981  010590  0100               	movlb	0	; () banked
  4982  010592  90D8               	bcf	status,0,c
  4983  010594  37CE               	rlcf	??_Port_Set& (0+255),f,b
  4984  010596  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4985  010598  0100               	movlb	0	; () banked
  4986  01059A  90D8               	bcf	status,0,c
  4987  01059C  37CE               	rlcf	??_Port_Set& (0+255),f,b
  4988  01059E  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4989  0105A0  0100               	movlb	0	; () banked
  4990  0105A2  51CE               	movf	??_Port_Set& (0+255),w,b
  4991  0105A4  0100               	movlb	0	; () banked
  4992  0105A6  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4993  0105A8  0100               	movlb	0	; () banked
  4994  0105AA  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  4995  0105AC  0100               	movlb	0	; () banked
  4996  0105AE  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  5000  0105B0  0E08               	movlw	8
  5001  0105B2  0100               	movlb	0	; () banked
  5002  0105B4  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  5003  0105B6  0100               	movlb	0	; () banked
  5004  0105B8  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  5005  0105BA  0E00               	movlw	0
  5006  0105BC  0100               	movlb	0	; () banked
  5007  0105BE  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5008  0105C0  0100               	movlb	0	; () banked
  5009  0105C2  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5010  0105C4  0E02               	movlw	2
  5011  0105C6  0100               	movlb	0	; () banked
  5012  0105C8  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  5013  0105CA  ECC9  F097         	call	_Word_GetPair	;wreg free
  5014  0105CE  0100               	movlb	0	; () banked
  5015  0105D0  6FCE               	movwf	??_Port_Set& (0+255),b
  5016  0105D2  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  5017  0105D4  0100               	movlb	0	; () banked
  5018  0105D6  3BCE               	swapf	??_Port_Set& (0+255),f,b
  5019  0105D8  3BCF               	swapf	(??_Port_Set+1)& (0+255),f,b
  5020  0105DA  0EF0               	movlw	240
  5021  0105DC  17CF               	andwf	(??_Port_Set+1)& (0+255),f,b
  5022  0105DE  51CE               	movf	??_Port_Set& (0+255),w,b
  5023  0105E0  0B0F               	andlw	15
  5024  0105E2  13CF               	iorwf	(??_Port_Set+1)& (0+255),f,b
  5025  0105E4  0EF0               	movlw	240
  5026  0105E6  17CE               	andwf	??_Port_Set& (0+255),f,b
  5027  0105E8  0100               	movlb	0	; () banked
  5028  0105EA  51CE               	movf	??_Port_Set& (0+255),w,b
  5029  0105EC  0100               	movlb	0	; () banked
  5030  0105EE  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5031  0105F0  0100               	movlb	0	; () banked
  5032  0105F2  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  5033  0105F4  0100               	movlb	0	; () banked
  5034  0105F6  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  5038  0105F8  0E08               	movlw	8
  5039  0105FA  0100               	movlb	0	; () banked
  5040  0105FC  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  5041  0105FE  0100               	movlb	0	; () banked
  5042  010600  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  5043  010602  0E00               	movlw	0
  5044  010604  0100               	movlb	0	; () banked
  5045  010606  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5046  010608  0100               	movlb	0	; () banked
  5047  01060A  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5048  01060C  0E03               	movlw	3
  5049  01060E  0100               	movlb	0	; () banked
  5050  010610  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  5051  010612  ECC9  F097         	call	_Word_GetPair	;wreg free
  5052  010616  0100               	movlb	0	; () banked
  5053  010618  6FCE               	movwf	??_Port_Set& (0+255),b
  5054  01061A  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  5055  01061C  0E06               	movlw	6
  5056  01061E                     u7065:
  5057  01061E  90D8               	bcf	status,0,c
  5058  010620  0100               	movlb	0	; () banked
  5059  010622  37CE               	rlcf	??_Port_Set& (0+255),f,b
  5060  010624  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5061  010626  2EE8               	decfsz	wreg,f,c
  5062  010628  D7FA               	goto	u7065
  5063  01062A  0100               	movlb	0	; () banked
  5064  01062C  51CE               	movf	??_Port_Set& (0+255),w,b
  5065  01062E  0100               	movlb	0	; () banked
  5066  010630  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5067  010632  0100               	movlb	0	; () banked
  5068  010634  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  5069  010636  0100               	movlb	0	; () banked
  5070  010638  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  5074  01063A  0E08               	movlw	8
  5075  01063C  0100               	movlb	0	; () banked
  5076  01063E  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  5077  010640  0100               	movlb	0	; () banked
  5078  010642  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  5079  010644  0E00               	movlw	0
  5080  010646  0100               	movlb	0	; () banked
  5081  010648  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5082  01064A  0100               	movlb	0	; () banked
  5083  01064C  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5084  01064E  0E04               	movlw	4
  5085  010650  0100               	movlb	0	; () banked
  5086  010652  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  5087  010654  ECC9  F097         	call	_Word_GetPair	;wreg free
  5088  010658  0100               	movlb	0	; () banked
  5089  01065A  6FCE               	movwf	??_Port_Set& (0+255),b
  5090  01065C  0100               	movlb	0	; () banked
  5091  01065E  51CE               	movf	??_Port_Set& (0+255),w,b
  5092  010660  0100               	movlb	0	; () banked
  5093  010662  6FD0               	movwf	(??_Port_Set+2)& (0+255),b
  5094  010664  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  5095  010666  0100               	movlb	0	; () banked
  5096  010668  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  5097  01066A  0100               	movlb	0	; () banked
  5098  01066C  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5099  01066E  0100               	movlb	0	; () banked
  5100  010670  51D0               	movf	(??_Port_Set+2)& (0+255),w,b
  5101  010672  0100               	movlb	0	; () banked
  5102  010674  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  5106  010676  0E08               	movlw	8
  5107  010678  0100               	movlb	0	; () banked
  5108  01067A  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  5109  01067C  0100               	movlb	0	; () banked
  5110  01067E  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  5111  010680  0E00               	movlw	0
  5112  010682  0100               	movlb	0	; () banked
  5113  010684  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5114  010686  0100               	movlb	0	; () banked
  5115  010688  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5116  01068A  0E05               	movlw	5
  5117  01068C  0100               	movlb	0	; () banked
  5118  01068E  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  5119  010690  ECC9  F097         	call	_Word_GetPair	;wreg free
  5120  010694  0100               	movlb	0	; () banked
  5121  010696  6FCE               	movwf	??_Port_Set& (0+255),b
  5122  010698  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  5123  01069A  0E0A               	movlw	10
  5124  01069C                     u7075:
  5125  01069C  90D8               	bcf	status,0,c
  5126  01069E  0100               	movlb	0	; () banked
  5127  0106A0  37CE               	rlcf	??_Port_Set& (0+255),f,b
  5128  0106A2  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5129  0106A4  2EE8               	decfsz	wreg,f,c
  5130  0106A6  D7FA               	goto	u7075
  5131  0106A8  0100               	movlb	0	; () banked
  5132  0106AA  51CE               	movf	??_Port_Set& (0+255),w,b
  5133  0106AC  0100               	movlb	0	; () banked
  5134  0106AE  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5135  0106B0  0100               	movlb	0	; () banked
  5136  0106B2  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  5137  0106B4  0100               	movlb	0	; () banked
  5138  0106B6  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  5142  0106B8  0E08               	movlw	8
  5143  0106BA  0100               	movlb	0	; () banked
  5144  0106BC  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  5145  0106BE  0100               	movlb	0	; () banked
  5146  0106C0  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  5147  0106C2  0E00               	movlw	0
  5148  0106C4  0100               	movlb	0	; () banked
  5149  0106C6  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5150  0106C8  0100               	movlb	0	; () banked
  5151  0106CA  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5152  0106CC  0E06               	movlw	6
  5153  0106CE  0100               	movlb	0	; () banked
  5154  0106D0  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  5155  0106D2  ECC9  F097         	call	_Word_GetPair	;wreg free
  5156  0106D6  0100               	movlb	0	; () banked
  5157  0106D8  6FCE               	movwf	??_Port_Set& (0+255),b
  5158  0106DA  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  5159  0106DC  0E0C               	movlw	12
  5160  0106DE                     u7085:
  5161  0106DE  90D8               	bcf	status,0,c
  5162  0106E0  0100               	movlb	0	; () banked
  5163  0106E2  37CE               	rlcf	??_Port_Set& (0+255),f,b
  5164  0106E4  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5165  0106E6  2EE8               	decfsz	wreg,f,c
  5166  0106E8  D7FA               	goto	u7085
  5167  0106EA  0100               	movlb	0	; () banked
  5168  0106EC  51CE               	movf	??_Port_Set& (0+255),w,b
  5169  0106EE  0100               	movlb	0	; () banked
  5170  0106F0  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5171  0106F2  0100               	movlb	0	; () banked
  5172  0106F4  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  5173  0106F6  0100               	movlb	0	; () banked
  5174  0106F8  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  5178  0106FA  0E08               	movlw	8
  5179  0106FC  0100               	movlb	0	; () banked
  5180  0106FE  25CB               	addwf	Port_Set@pInput& (0+255),w,b
  5181  010700  0100               	movlb	0	; () banked
  5182  010702  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  5183  010704  0E00               	movlw	0
  5184  010706  0100               	movlb	0	; () banked
  5185  010708  21CC               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5186  01070A  0100               	movlb	0	; () banked
  5187  01070C  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5188  01070E  0E07               	movlw	7
  5189  010710  0100               	movlb	0	; () banked
  5190  010712  6FCA               	movwf	Word_GetPair@pPair& (0+255),b
  5191  010714  ECC9  F097         	call	_Word_GetPair	;wreg free
  5192  010718  0100               	movlb	0	; () banked
  5193  01071A  6FCE               	movwf	??_Port_Set& (0+255),b
  5194  01071C  6BCF               	clrf	(??_Port_Set+1)& (0+255),b
  5195  01071E  0E0E               	movlw	14
  5196  010720                     u7095:
  5197  010720  90D8               	bcf	status,0,c
  5198  010722  0100               	movlb	0	; () banked
  5199  010724  37CE               	rlcf	??_Port_Set& (0+255),f,b
  5200  010726  37CF               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5201  010728  2EE8               	decfsz	wreg,f,c
  5202  01072A  D7FA               	goto	u7095
  5203  01072C  0100               	movlb	0	; () banked
  5204  01072E  51CE               	movf	??_Port_Set& (0+255),w,b
  5205  010730  0100               	movlb	0	; () banked
  5206  010732  13E0               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5207  010734  0100               	movlb	0	; () banked
  5208  010736  51CF               	movf	(??_Port_Set+1)& (0+255),w,b
  5209  010738  0100               	movlb	0	; () banked
  5210  01073A  13E1               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5211                           
  5212                           ;Port.c: 584: if (TypeRequired == TypeActual)
  5213  01073C  0100               	movlb	0	; () banked
  5214  01073E  51E0               	movf	Port_Set@TypeActual& (0+255),w,b
  5215  010740  0100               	movlb	0	; () banked
  5216  010742  19DE               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  5217  010744  E148               	bnz	l528
  5218  010746  0100               	movlb	0	; () banked
  5219  010748  51E1               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  5220  01074A  0100               	movlb	0	; () banked
  5221  01074C  19DF               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  5222  01074E  A4D8               	btfss	status,2,c
  5223  010750  0012               	return	
  5224  010752  D032               	goto	l526
  5225  010754                     
  5226                           ; BSR set to: 0
  5227                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  5228                           
  5229                           ; BSR set to: 0
  5230  010754  0100               	movlb	0	; () banked
  5231  010756  EE20 F002          	lfsr	2,2
  5232  01075A  51CB               	movf	Port_Set@pInput& (0+255),w,b
  5233  01075C  26D9               	addwf	fsr2l,f,c
  5234  01075E  51CC               	movf	(Port_Set@pInput+1)& (0+255),w,b
  5235  010760  22DA               	addwfc	fsr2h,f,c
  5236  010762  CFDE F0BC          	movff	postinc2,Byte_SetByte@pInput
  5237  010766  CFDD F0BD          	movff	postdec2,Byte_SetByte@pInput+1
  5238  01076A  C0CD  F0BE         	movff	Port_Set@pValue,Byte_SetByte@pValue
  5239  01076E  EC9C  F099         	call	_Byte_SetByte	;wreg free
  5240                           
  5241                           ;Port.c: 594: break;
  5242  010772  0012               	return	
  5243  010774                     
  5244                           ;Port.c: 597: pValue = ~pValue;
  5245  010774  0100               	movlb	0	; () banked
  5246  010776  1FCD               	comf	Port_Set@pValue& (0+255),f,b
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  5250  010778  0100               	movlb	0	; () banked
  5251  01077A  EE20 F002          	lfsr	2,2
  5252  01077E  51CB               	movf	Port_Set@pInput& (0+255),w,b
  5253  010780  26D9               	addwf	fsr2l,f,c
  5254  010782  51CC               	movf	(Port_Set@pInput+1)& (0+255),w,b
  5255  010784  22DA               	addwfc	fsr2h,f,c
  5256  010786  CFDE F0BC          	movff	postinc2,Byte_SetByte@pInput
  5257  01078A  CFDD F0BD          	movff	postdec2,Byte_SetByte@pInput+1
  5258  01078E  C0CD  F0BE         	movff	Port_Set@pValue,Byte_SetByte@pValue
  5259  010792  EC9C  F099         	call	_Byte_SetByte	;wreg free
  5260                           
  5261                           ;Port.c: 599: break;
  5262  010796  0012               	return	
  5263  010798                     
  5264                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  5265  010798  0100               	movlb	0	; () banked
  5266  01079A  EE20 F004          	lfsr	2,4
  5267  01079E  51CB               	movf	Port_Set@pInput& (0+255),w,b
  5268  0107A0  26D9               	addwf	fsr2l,f,c
  5269  0107A2  51CC               	movf	(Port_Set@pInput+1)& (0+255),w,b
  5270  0107A4  22DA               	addwfc	fsr2h,f,c
  5271  0107A6  CFDE F0BC          	movff	postinc2,Byte_SetByte@pInput
  5272  0107AA  CFDD F0BD          	movff	postdec2,Byte_SetByte@pInput+1
  5273  0107AE  C0CD  F0BE         	movff	Port_Set@pValue,Byte_SetByte@pValue
  5274  0107B2  EC9C  F099         	call	_Byte_SetByte	;wreg free
  5275                           
  5276                           ;Port.c: 606: }
  5277                           
  5278                           ;Port.c: 605: break;
  5279                           
  5280                           ;Port.c: 604: default:
  5281                           
  5282                           ;Port.c: 603: break;
  5283  0107B6  0012               	return	
  5284  0107B8                     l526:
  5285  0107B8  0100               	movlb	0	; () banked
  5286  0107BA  51E2               	movf	Port_Set@Type& (0+255),w,b
  5287                           
  5288                           ; Switch size 1, requested type "space"
  5289                           ; Number of cases is 4, Range of values is 0 to 3
  5290                           ; switch strategies available:
  5291                           ; Name         Instructions Cycles
  5292                           ; simple_byte           13     7 (average)
  5293                           ;	Chosen strategy is simple_byte
  5294  0107BC  0A00               	xorlw	0	; case 0
  5295  0107BE  B4D8               	btfsc	status,2,c
  5296  0107C0  0012               	return	
  5297  0107C2  0A01               	xorlw	1	; case 1
  5298  0107C4  B4D8               	btfsc	status,2,c
  5299  0107C6  D7C6               	goto	l529
  5300  0107C8  0A03               	xorlw	3	; case 2
  5301  0107CA  B4D8               	btfsc	status,2,c
  5302  0107CC  D7D3               	goto	l531
  5303  0107CE  0A01               	xorlw	1	; case 3
  5304  0107D0  A4D8               	btfss	status,2,c
  5305                           
  5306                           ; BSR set to: 0
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;Port.c: 607: }
  5310  0107D2  0012               	return	
  5311  0107D4  D7E1               	goto	l532
  5312  0107D6                     l528:
  5313  0107D6  0012               	return		;funcret
  5314  0107D8                     __end_of_Port_Set:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           postinc0	equ	0xFEE
  5324                           wreg	equ	0xFE8
  5325                           indf1	equ	0xFE7
  5326                           postdec1	equ	0xFE5
  5327                           fsr1h	equ	0xFE2
  5328                           fsr1l	equ	0xFE1
  5329                           indf2	equ	0xFDF
  5330                           postinc2	equ	0xFDE
  5331                           postdec2	equ	0xFDD
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336 ;; *************** function _Byte_SetByte *****************
  5337 ;; Defined at:
  5338 ;;		line 110 in file "Library/Types.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  5341 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  5342 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  5343 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  5344 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  5345 ;;		 -> NULL(0), 
  5346 ;;  pValue          1    2[BANK0 ] unsigned char 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;		None
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		fsr2l, fsr2h
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5358 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;Total ram usage:        3 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    7
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_Port_Set
  5369 ;;		_I2C_Init
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text17
  5374  013338                     __ptext17:
  5375                           	opt stack 0
  5376  013338                     _Byte_SetByte:
  5377                           	opt stack 19
  5378                           
  5379                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  5380                           
  5381                           ;incstack = 0
  5382  013338  C0BC  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  5383  01333C  C0BD  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  5384  013340  C0BE  FFDF         	movff	Byte_SetByte@pValue,indf2
  5385  013344  0012               	return		;funcret
  5386  013346                     __end_of_Byte_SetByte:
  5387                           	opt stack 0
  5388                           tblptru	equ	0xFF8
  5389                           tblptrh	equ	0xFF7
  5390                           tblptrl	equ	0xFF6
  5391                           tablat	equ	0xFF5
  5392                           prodh	equ	0xFF4
  5393                           prodl	equ	0xFF3
  5394                           intcon	equ	0xFF2
  5395                           postinc0	equ	0xFEE
  5396                           wreg	equ	0xFE8
  5397                           indf1	equ	0xFE7
  5398                           postdec1	equ	0xFE5
  5399                           fsr1h	equ	0xFE2
  5400                           fsr1l	equ	0xFE1
  5401                           indf2	equ	0xFDF
  5402                           postinc2	equ	0xFDE
  5403                           postdec2	equ	0xFDD
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function _GetPortTRIS *****************
  5409 ;; Defined at:
  5410 ;;		line 67 in file "Library/Port.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  pInput          1    wreg     enum E6786
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  pInput          1    2[BANK0 ] enum E6786
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  2    0[BANK0 ] PTR struct Byte
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5424 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;Total ram usage:        3 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    7
  5431 ;; This function calls:
  5432 ;;		Nothing
  5433 ;; This function is called by:
  5434 ;;		_Port_Init
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text18
  5439  0120FA                     __ptext18:
  5440                           	opt stack 0
  5441  0120FA                     _GetPortTRIS:
  5442                           	opt stack 20
  5443                           
  5444                           ;incstack = 0
  5445                           ;GetPortTRIS@pInput stored from wreg
  5446  0120FA  0100               	movlb	0	; () banked
  5447  0120FC  6FBE               	movwf	GetPortTRIS@pInput& (0+255),b
  5448                           
  5449                           ;Port.c: 69: switch (pInput)
  5450  0120FE  D038               	goto	l363
  5451  012100                     
  5452                           ;Port.c: 72: return (BytePtr)&TRISA;
  5453  012100  0E92               	movlw	146
  5454  012102  0100               	movlb	0	; () banked
  5455  012104  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5456  012106  0E0F               	movlw	15
  5457  012108  0100               	movlb	0	; () banked
  5458  01210A  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5459                           
  5460                           ; BSR set to: 0
  5461  01210C  0012               	return	
  5462  01210E                     
  5463                           ; BSR set to: 0
  5464                           ;Port.c: 74: return (BytePtr)&TRISB;
  5465                           
  5466                           ; BSR set to: 0
  5467  01210E  0E93               	movlw	147
  5468  012110  0100               	movlb	0	; () banked
  5469  012112  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5470  012114  0E0F               	movlw	15
  5471  012116  0100               	movlb	0	; () banked
  5472  012118  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5473                           
  5474                           ; BSR set to: 0
  5475  01211A  0012               	return	
  5476  01211C                     
  5477                           ; BSR set to: 0
  5478                           ;Port.c: 76: return (BytePtr)&TRISC;
  5479                           
  5480                           ; BSR set to: 0
  5481  01211C  0E94               	movlw	148
  5482  01211E  0100               	movlb	0	; () banked
  5483  012120  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5484  012122  0E0F               	movlw	15
  5485  012124  0100               	movlb	0	; () banked
  5486  012126  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5487                           
  5488                           ; BSR set to: 0
  5489  012128  0012               	return	
  5490  01212A                     
  5491                           ; BSR set to: 0
  5492                           ;Port.c: 78: return (BytePtr)&TRISD;
  5493                           
  5494                           ; BSR set to: 0
  5495  01212A  0E95               	movlw	149
  5496  01212C  0100               	movlb	0	; () banked
  5497  01212E  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5498  012130  0E0F               	movlw	15
  5499  012132  0100               	movlb	0	; () banked
  5500  012134  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5501                           
  5502                           ; BSR set to: 0
  5503  012136  0012               	return	
  5504  012138                     
  5505                           ; BSR set to: 0
  5506                           ;Port.c: 80: return (BytePtr)&TRISE;
  5507                           
  5508                           ; BSR set to: 0
  5509  012138  0E96               	movlw	150
  5510  01213A  0100               	movlb	0	; () banked
  5511  01213C  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5512  01213E  0E0F               	movlw	15
  5513  012140  0100               	movlb	0	; () banked
  5514  012142  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5515                           
  5516                           ; BSR set to: 0
  5517  012144  0012               	return	
  5518  012146                     
  5519                           ; BSR set to: 0
  5520                           ;Port.c: 82: return (BytePtr)&TRISF;
  5521                           
  5522                           ; BSR set to: 0
  5523  012146  0E97               	movlw	151
  5524  012148  0100               	movlb	0	; () banked
  5525  01214A  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5526  01214C  0E0F               	movlw	15
  5527  01214E  0100               	movlb	0	; () banked
  5528  012150  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531  012152  0012               	return	
  5532  012154                     
  5533                           ; BSR set to: 0
  5534                           ;Port.c: 84: return (BytePtr)&TRISG;
  5535                           
  5536                           ; BSR set to: 0
  5537  012154  0E98               	movlw	152
  5538  012156  0100               	movlb	0	; () banked
  5539  012158  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5540  01215A  0E0F               	movlw	15
  5541  01215C  0100               	movlb	0	; () banked
  5542  01215E  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545  012160  0012               	return	
  5546  012162                     
  5547                           ; BSR set to: 0
  5548                           ;Port.c: 86: return (void*)0;
  5549                           
  5550                           ; BSR set to: 0
  5551  012162  0E00               	movlw	0
  5552  012164  0100               	movlb	0	; () banked
  5553  012166  6FBC               	movwf	?_GetPortTRIS& (0+255),b
  5554  012168  0E00               	movlw	0
  5555  01216A  0100               	movlb	0	; () banked
  5556  01216C  6FBD               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;Port.c: 87: }
  5560                           
  5561                           ; BSR set to: 0
  5562  01216E  0012               	return	
  5563  012170                     l363:
  5564                           
  5565                           ; BSR set to: 0
  5566  012170  0100               	movlb	0	; () banked
  5567  012172  51BE               	movf	GetPortTRIS@pInput& (0+255),w,b
  5568                           
  5569                           ; Switch size 1, requested type "space"
  5570                           ; Number of cases is 7, Range of values is 0 to 6
  5571                           ; switch strategies available:
  5572                           ; Name         Instructions Cycles
  5573                           ; simple_byte           22    12 (average)
  5574                           ;	Chosen strategy is simple_byte
  5575  012174  0A00               	xorlw	0	; case 0
  5576  012176  B4D8               	btfsc	status,2,c
  5577  012178  D7C3               	goto	l364
  5578  01217A  0A01               	xorlw	1	; case 1
  5579  01217C  B4D8               	btfsc	status,2,c
  5580  01217E  D7C7               	goto	l366
  5581  012180  0A03               	xorlw	3	; case 2
  5582  012182  B4D8               	btfsc	status,2,c
  5583  012184  D7CB               	goto	l367
  5584  012186  0A01               	xorlw	1	; case 3
  5585  012188  B4D8               	btfsc	status,2,c
  5586  01218A  D7CF               	goto	l368
  5587  01218C  0A07               	xorlw	7	; case 4
  5588  01218E  B4D8               	btfsc	status,2,c
  5589  012190  D7D3               	goto	l369
  5590  012192  0A01               	xorlw	1	; case 5
  5591  012194  B4D8               	btfsc	status,2,c
  5592  012196  D7D7               	goto	l370
  5593  012198  0A03               	xorlw	3	; case 6
  5594  01219A  B4D8               	btfsc	status,2,c
  5595  01219C  D7DB               	goto	l371
  5596  01219E  D7E1               	goto	l372
  5597  0121A0                     __end_of_GetPortTRIS:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           postinc0	equ	0xFEE
  5607                           wreg	equ	0xFE8
  5608                           indf1	equ	0xFE7
  5609                           postdec1	equ	0xFE5
  5610                           fsr1h	equ	0xFE2
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function _GetPortProperties *****************
  5620 ;; Defined at:
  5621 ;;		line 21 in file "Library/Port.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  pInput          1    wreg     enum E6786
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  pInput          1    2[BANK0 ] enum E6786
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  2    0[BANK0 ] PTR struct PortProperty
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5635 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;Total ram usage:        3 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    7
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_Port_Init
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text19
  5650  0121A0                     __ptext19:
  5651                           	opt stack 0
  5652  0121A0                     _GetPortProperties:
  5653                           	opt stack 20
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;incstack = 0
  5657                           ;GetPortProperties@pInput stored from wreg
  5658  0121A0  0100               	movlb	0	; () banked
  5659  0121A2  6FBE               	movwf	GetPortProperties@pInput& (0+255),b
  5660                           
  5661                           ;Port.c: 23: switch (pInput)
  5662  0121A4  D038               	goto	l337
  5663  0121A6                     
  5664                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  5665  0121A6  0EF7               	movlw	low _PortA_Property
  5666  0121A8  0100               	movlb	0	; () banked
  5667  0121AA  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5668  0121AC  0EFF               	movlw	high _PortA_Property
  5669  0121AE  0100               	movlb	0	; () banked
  5670  0121B0  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5671                           
  5672                           ; BSR set to: 0
  5673  0121B2  0012               	return	
  5674  0121B4                     
  5675                           ; BSR set to: 0
  5676                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  5677                           
  5678                           ; BSR set to: 0
  5679  0121B4  0EF5               	movlw	low _PortB_Property
  5680  0121B6  0100               	movlb	0	; () banked
  5681  0121B8  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5682  0121BA  0EFF               	movlw	high _PortB_Property
  5683  0121BC  0100               	movlb	0	; () banked
  5684  0121BE  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5685                           
  5686                           ; BSR set to: 0
  5687  0121C0  0012               	return	
  5688  0121C2                     
  5689                           ; BSR set to: 0
  5690                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  5691                           
  5692                           ; BSR set to: 0
  5693  0121C2  0EF3               	movlw	low _PortC_Property
  5694  0121C4  0100               	movlb	0	; () banked
  5695  0121C6  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5696  0121C8  0EFF               	movlw	high _PortC_Property
  5697  0121CA  0100               	movlb	0	; () banked
  5698  0121CC  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5699                           
  5700                           ; BSR set to: 0
  5701  0121CE  0012               	return	
  5702  0121D0                     
  5703                           ; BSR set to: 0
  5704                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  5705                           
  5706                           ; BSR set to: 0
  5707  0121D0  0EF1               	movlw	low _PortD_Property
  5708  0121D2  0100               	movlb	0	; () banked
  5709  0121D4  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5710  0121D6  0EFF               	movlw	high _PortD_Property
  5711  0121D8  0100               	movlb	0	; () banked
  5712  0121DA  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5713                           
  5714                           ; BSR set to: 0
  5715  0121DC  0012               	return	
  5716  0121DE                     
  5717                           ; BSR set to: 0
  5718                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  5719                           
  5720                           ; BSR set to: 0
  5721  0121DE  0EEF               	movlw	low _PortE_Property
  5722  0121E0  0100               	movlb	0	; () banked
  5723  0121E2  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5724  0121E4  0EFF               	movlw	high _PortE_Property
  5725  0121E6  0100               	movlb	0	; () banked
  5726  0121E8  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5727                           
  5728                           ; BSR set to: 0
  5729  0121EA  0012               	return	
  5730  0121EC                     
  5731                           ; BSR set to: 0
  5732                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  5733                           
  5734                           ; BSR set to: 0
  5735  0121EC  0EED               	movlw	low _PortF_Property
  5736  0121EE  0100               	movlb	0	; () banked
  5737  0121F0  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5738  0121F2  0EFF               	movlw	high _PortF_Property
  5739  0121F4  0100               	movlb	0	; () banked
  5740  0121F6  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743  0121F8  0012               	return	
  5744  0121FA                     
  5745                           ; BSR set to: 0
  5746                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  5747                           
  5748                           ; BSR set to: 0
  5749  0121FA  0EEB               	movlw	low _PortG_Property
  5750  0121FC  0100               	movlb	0	; () banked
  5751  0121FE  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5752  012200  0EFF               	movlw	high _PortG_Property
  5753  012202  0100               	movlb	0	; () banked
  5754  012204  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5755                           
  5756                           ; BSR set to: 0
  5757  012206  0012               	return	
  5758  012208                     
  5759                           ; BSR set to: 0
  5760                           ;Port.c: 40: return (void*)0;
  5761                           
  5762                           ; BSR set to: 0
  5763  012208  0E00               	movlw	0
  5764  01220A  0100               	movlb	0	; () banked
  5765  01220C  6FBC               	movwf	?_GetPortProperties& (0+255),b
  5766  01220E  0E00               	movlw	0
  5767  012210  0100               	movlb	0	; () banked
  5768  012212  6FBD               	movwf	(?_GetPortProperties+1)& (0+255),b
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;Port.c: 41: }
  5772                           
  5773                           ; BSR set to: 0
  5774  012214  0012               	return	
  5775  012216                     l337:
  5776                           
  5777                           ; BSR set to: 0
  5778  012216  0100               	movlb	0	; () banked
  5779  012218  51BE               	movf	GetPortProperties@pInput& (0+255),w,b
  5780                           
  5781                           ; Switch size 1, requested type "space"
  5782                           ; Number of cases is 7, Range of values is 0 to 6
  5783                           ; switch strategies available:
  5784                           ; Name         Instructions Cycles
  5785                           ; simple_byte           22    12 (average)
  5786                           ;	Chosen strategy is simple_byte
  5787  01221A  0A00               	xorlw	0	; case 0
  5788  01221C  B4D8               	btfsc	status,2,c
  5789  01221E  D7C3               	goto	l338
  5790  012220  0A01               	xorlw	1	; case 1
  5791  012222  B4D8               	btfsc	status,2,c
  5792  012224  D7C7               	goto	l340
  5793  012226  0A03               	xorlw	3	; case 2
  5794  012228  B4D8               	btfsc	status,2,c
  5795  01222A  D7CB               	goto	l341
  5796  01222C  0A01               	xorlw	1	; case 3
  5797  01222E  B4D8               	btfsc	status,2,c
  5798  012230  D7CF               	goto	l342
  5799  012232  0A07               	xorlw	7	; case 4
  5800  012234  B4D8               	btfsc	status,2,c
  5801  012236  D7D3               	goto	l343
  5802  012238  0A01               	xorlw	1	; case 5
  5803  01223A  B4D8               	btfsc	status,2,c
  5804  01223C  D7D7               	goto	l344
  5805  01223E  0A03               	xorlw	3	; case 6
  5806  012240  B4D8               	btfsc	status,2,c
  5807  012242  D7DB               	goto	l345
  5808  012244  D7E1               	goto	l346
  5809  012246                     __end_of_GetPortProperties:
  5810                           	opt stack 0
  5811                           tblptru	equ	0xFF8
  5812                           tblptrh	equ	0xFF7
  5813                           tblptrl	equ	0xFF6
  5814                           tablat	equ	0xFF5
  5815                           prodh	equ	0xFF4
  5816                           prodl	equ	0xFF3
  5817                           intcon	equ	0xFF2
  5818                           postinc0	equ	0xFEE
  5819                           wreg	equ	0xFE8
  5820                           indf1	equ	0xFE7
  5821                           postdec1	equ	0xFE5
  5822                           fsr1h	equ	0xFE2
  5823                           fsr1l	equ	0xFE1
  5824                           indf2	equ	0xFDF
  5825                           postinc2	equ	0xFDE
  5826                           postdec2	equ	0xFDD
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function _GetPortPORT *****************
  5832 ;; Defined at:
  5833 ;;		line 44 in file "Library/Port.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  pInput          1    wreg     enum E6786
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  pInput          1    2[BANK0 ] enum E6786
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  2    0[BANK0 ] PTR struct Byte
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5847 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;Total ram usage:        3 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    7
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_Port_Init
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text20
  5862  012246                     __ptext20:
  5863                           	opt stack 0
  5864  012246                     _GetPortPORT:
  5865                           	opt stack 20
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;incstack = 0
  5869                           ;GetPortPORT@pInput stored from wreg
  5870  012246  0100               	movlb	0	; () banked
  5871  012248  6FBE               	movwf	GetPortPORT@pInput& (0+255),b
  5872                           
  5873                           ;Port.c: 46: switch (pInput)
  5874  01224A  D038               	goto	l350
  5875  01224C                     
  5876                           ;Port.c: 49: return (BytePtr)&PORTA;
  5877  01224C  0E80               	movlw	128
  5878  01224E  0100               	movlb	0	; () banked
  5879  012250  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5880  012252  0E0F               	movlw	15
  5881  012254  0100               	movlb	0	; () banked
  5882  012256  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885  012258  0012               	return	
  5886  01225A                     
  5887                           ; BSR set to: 0
  5888                           ;Port.c: 51: return (BytePtr)&PORTB;
  5889                           
  5890                           ; BSR set to: 0
  5891  01225A  0E81               	movlw	129
  5892  01225C  0100               	movlb	0	; () banked
  5893  01225E  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5894  012260  0E0F               	movlw	15
  5895  012262  0100               	movlb	0	; () banked
  5896  012264  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5897                           
  5898                           ; BSR set to: 0
  5899  012266  0012               	return	
  5900  012268                     
  5901                           ; BSR set to: 0
  5902                           ;Port.c: 53: return (BytePtr)&PORTC;
  5903                           
  5904                           ; BSR set to: 0
  5905  012268  0E82               	movlw	130
  5906  01226A  0100               	movlb	0	; () banked
  5907  01226C  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5908  01226E  0E0F               	movlw	15
  5909  012270  0100               	movlb	0	; () banked
  5910  012272  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5911                           
  5912                           ; BSR set to: 0
  5913  012274  0012               	return	
  5914  012276                     
  5915                           ; BSR set to: 0
  5916                           ;Port.c: 55: return (BytePtr)&PORTD;
  5917                           
  5918                           ; BSR set to: 0
  5919  012276  0E83               	movlw	131
  5920  012278  0100               	movlb	0	; () banked
  5921  01227A  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5922  01227C  0E0F               	movlw	15
  5923  01227E  0100               	movlb	0	; () banked
  5924  012280  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927  012282  0012               	return	
  5928  012284                     
  5929                           ; BSR set to: 0
  5930                           ;Port.c: 57: return (BytePtr)&PORTE;
  5931                           
  5932                           ; BSR set to: 0
  5933  012284  0E84               	movlw	132
  5934  012286  0100               	movlb	0	; () banked
  5935  012288  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5936  01228A  0E0F               	movlw	15
  5937  01228C  0100               	movlb	0	; () banked
  5938  01228E  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5939                           
  5940                           ; BSR set to: 0
  5941  012290  0012               	return	
  5942  012292                     
  5943                           ; BSR set to: 0
  5944                           ;Port.c: 59: return (BytePtr)&PORTF;
  5945                           
  5946                           ; BSR set to: 0
  5947  012292  0E85               	movlw	133
  5948  012294  0100               	movlb	0	; () banked
  5949  012296  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5950  012298  0E0F               	movlw	15
  5951  01229A  0100               	movlb	0	; () banked
  5952  01229C  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5953                           
  5954                           ; BSR set to: 0
  5955  01229E  0012               	return	
  5956  0122A0                     
  5957                           ; BSR set to: 0
  5958                           ;Port.c: 61: return (BytePtr)&PORTG;
  5959                           
  5960                           ; BSR set to: 0
  5961  0122A0  0E86               	movlw	134
  5962  0122A2  0100               	movlb	0	; () banked
  5963  0122A4  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5964  0122A6  0E0F               	movlw	15
  5965  0122A8  0100               	movlb	0	; () banked
  5966  0122AA  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5967                           
  5968                           ; BSR set to: 0
  5969  0122AC  0012               	return	
  5970  0122AE                     
  5971                           ; BSR set to: 0
  5972                           ;Port.c: 63: return (void*)0;
  5973                           
  5974                           ; BSR set to: 0
  5975  0122AE  0E00               	movlw	0
  5976  0122B0  0100               	movlb	0	; () banked
  5977  0122B2  6FBC               	movwf	?_GetPortPORT& (0+255),b
  5978  0122B4  0E00               	movlw	0
  5979  0122B6  0100               	movlb	0	; () banked
  5980  0122B8  6FBD               	movwf	(?_GetPortPORT+1)& (0+255),b
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;Port.c: 64: }
  5984                           
  5985                           ; BSR set to: 0
  5986  0122BA  0012               	return	
  5987  0122BC                     l350:
  5988                           
  5989                           ; BSR set to: 0
  5990  0122BC  0100               	movlb	0	; () banked
  5991  0122BE  51BE               	movf	GetPortPORT@pInput& (0+255),w,b
  5992                           
  5993                           ; Switch size 1, requested type "space"
  5994                           ; Number of cases is 7, Range of values is 0 to 6
  5995                           ; switch strategies available:
  5996                           ; Name         Instructions Cycles
  5997                           ; simple_byte           22    12 (average)
  5998                           ;	Chosen strategy is simple_byte
  5999  0122C0  0A00               	xorlw	0	; case 0
  6000  0122C2  B4D8               	btfsc	status,2,c
  6001  0122C4  D7C3               	goto	l351
  6002  0122C6  0A01               	xorlw	1	; case 1
  6003  0122C8  B4D8               	btfsc	status,2,c
  6004  0122CA  D7C7               	goto	l353
  6005  0122CC  0A03               	xorlw	3	; case 2
  6006  0122CE  B4D8               	btfsc	status,2,c
  6007  0122D0  D7CB               	goto	l354
  6008  0122D2  0A01               	xorlw	1	; case 3
  6009  0122D4  B4D8               	btfsc	status,2,c
  6010  0122D6  D7CF               	goto	l355
  6011  0122D8  0A07               	xorlw	7	; case 4
  6012  0122DA  B4D8               	btfsc	status,2,c
  6013  0122DC  D7D3               	goto	l356
  6014  0122DE  0A01               	xorlw	1	; case 5
  6015  0122E0  B4D8               	btfsc	status,2,c
  6016  0122E2  D7D7               	goto	l357
  6017  0122E4  0A03               	xorlw	3	; case 6
  6018  0122E6  B4D8               	btfsc	status,2,c
  6019  0122E8  D7DB               	goto	l358
  6020  0122EA  D7E1               	goto	l359
  6021  0122EC                     __end_of_GetPortPORT:
  6022                           	opt stack 0
  6023                           tblptru	equ	0xFF8
  6024                           tblptrh	equ	0xFF7
  6025                           tblptrl	equ	0xFF6
  6026                           tablat	equ	0xFF5
  6027                           prodh	equ	0xFF4
  6028                           prodl	equ	0xFF3
  6029                           intcon	equ	0xFF2
  6030                           postinc0	equ	0xFEE
  6031                           wreg	equ	0xFE8
  6032                           indf1	equ	0xFE7
  6033                           postdec1	equ	0xFE5
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _LED_Init *****************
  6044 ;; Defined at:
  6045 ;;		line 15 in file "Library/LED.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  pLED            1    wreg     enum E6739
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  pLED            1   45[BANK0 ] enum E6739
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        1 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:   12
  6066 ;; This function calls:
  6067 ;;		_LED_Set
  6068 ;;		_Port_SetPinType
  6069 ;; This function is called by:
  6070 ;;		_MXK_Init
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text21
  6075  012A86                     __ptext21:
  6076                           	opt stack 0
  6077  012A86                     _LED_Init:
  6078                           	opt stack 16
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;incstack = 0
  6082                           ;LED_Init@pLED stored from wreg
  6083  012A86  0100               	movlb	0	; () banked
  6084  012A88  6FE9               	movwf	LED_Init@pLED& (0+255),b
  6085                           
  6086                           ;LED.c: 17: switch (pLED)
  6087  012A8A  D01E               	goto	l220
  6088  012A8C                     
  6089                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  6090  012A8C  0E9E               	movlw	low _PortC
  6091  012A8E  0100               	movlb	0	; () banked
  6092  012A90  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  6093  012A92  0E00               	movlw	high _PortC
  6094  012A94  0100               	movlb	0	; () banked
  6095  012A96  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  6096  012A98  0E00               	movlw	0
  6097  012A9A  0100               	movlb	0	; () banked
  6098  012A9C  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  6099  012A9E  0E03               	movlw	3
  6100  012AA0  0100               	movlb	0	; () banked
  6101  012AA2  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  6102  012AA4  EC29  F087         	call	_Port_SetPinType	;wreg free
  6103                           
  6104                           ;LED.c: 21: break;
  6105  012AA8  D017               	goto	l222
  6106  012AAA                     
  6107                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  6108  012AAA  0E9E               	movlw	low _PortC
  6109  012AAC  0100               	movlb	0	; () banked
  6110  012AAE  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  6111  012AB0  0E00               	movlw	high _PortC
  6112  012AB2  0100               	movlb	0	; () banked
  6113  012AB4  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  6114  012AB6  0E01               	movlw	1
  6115  012AB8  0100               	movlb	0	; () banked
  6116  012ABA  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  6117  012ABC  0E03               	movlw	3
  6118  012ABE  0100               	movlb	0	; () banked
  6119  012AC0  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  6120  012AC2  EC29  F087         	call	_Port_SetPinType	;wreg free
  6121                           
  6122                           ;LED.c: 25: }
  6123                           
  6124                           ;LED.c: 24: break;
  6125  012AC6  D008               	goto	l222
  6126  012AC8                     l220:
  6127  012AC8  0100               	movlb	0	; () banked
  6128  012ACA  51E9               	movf	LED_Init@pLED& (0+255),w,b
  6129                           
  6130                           ; Switch size 1, requested type "space"
  6131                           ; Number of cases is 2, Range of values is 0 to 1
  6132                           ; switch strategies available:
  6133                           ; Name         Instructions Cycles
  6134                           ; simple_byte            7     4 (average)
  6135                           ;	Chosen strategy is simple_byte
  6136  012ACC  0A00               	xorlw	0	; case 0
  6137  012ACE  B4D8               	btfsc	status,2,c
  6138  012AD0  D7DD               	goto	l221
  6139  012AD2  0A01               	xorlw	1	; case 1
  6140  012AD4  B4D8               	btfsc	status,2,c
  6141  012AD6  D7E9               	goto	l223
  6142  012AD8                     l222:
  6143                           
  6144                           ;LED.c: 26: LED_Set(pLED, 0);
  6145                           
  6146                           ; BSR set to: 0
  6147  012AD8  0E00               	movlw	0
  6148  012ADA  0100               	movlb	0	; () banked
  6149  012ADC  6FD0               	movwf	LED_Set@pValue& (0+255),b
  6150  012ADE  0100               	movlb	0	; () banked
  6151  012AE0  51E9               	movf	LED_Init@pLED& (0+255),w,b
  6152  012AE2  EC22  F096         	call	_LED_Set
  6153  012AE6  0012               	return		;funcret
  6154  012AE8                     __end_of_LED_Init:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           indf1	equ	0xFE7
  6166                           postdec1	equ	0xFE5
  6167                           fsr1h	equ	0xFE2
  6168                           fsr1l	equ	0xFE1
  6169                           indf2	equ	0xFDF
  6170                           postinc2	equ	0xFDE
  6171                           postdec2	equ	0xFDD
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _LED_Set *****************
  6177 ;; Defined at:
  6178 ;;		line 33 in file "Library/LED.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  pLED            1    wreg     enum E6739
  6181 ;;  pValue          1   20[BANK0 ] unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  pLED            1   21[BANK0 ] enum E6739
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6193 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;Total ram usage:        2 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:   11
  6200 ;; This function calls:
  6201 ;;		_Port_SetPin
  6202 ;; This function is called by:
  6203 ;;		_LED_Init
  6204 ;;		_SYSTEM_Initialize
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text22
  6209  012C44                     __ptext22:
  6210                           	opt stack 0
  6211  012C44                     _LED_Set:
  6212                           	opt stack 16
  6213                           
  6214                           ;incstack = 0
  6215                           ;LED_Set@pLED stored from wreg
  6216  012C44  0100               	movlb	0	; () banked
  6217  012C46  6FD1               	movwf	LED_Set@pLED& (0+255),b
  6218                           
  6219                           ;LED.c: 35: switch (pLED)
  6220  012C48  D01C               	goto	l227
  6221  012C4A                     
  6222                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  6223  012C4A  0E9E               	movlw	low _PortC
  6224  012C4C  0100               	movlb	0	; () banked
  6225  012C4E  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  6226  012C50  0E00               	movlw	high _PortC
  6227  012C52  0100               	movlb	0	; () banked
  6228  012C54  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6229  012C56  0E00               	movlw	0
  6230  012C58  0100               	movlb	0	; () banked
  6231  012C5A  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  6232  012C5C  C0D0  F0CE         	movff	LED_Set@pValue,Port_SetPin@pValue
  6233  012C60  EC65  F08E         	call	_Port_SetPin	;wreg free
  6234                           
  6235                           ;LED.c: 39: break;
  6236  012C64  0012               	return	
  6237  012C66                     
  6238                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  6239  012C66  0E9E               	movlw	low _PortC
  6240  012C68  0100               	movlb	0	; () banked
  6241  012C6A  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  6242  012C6C  0E00               	movlw	high _PortC
  6243  012C6E  0100               	movlb	0	; () banked
  6244  012C70  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6245  012C72  0E01               	movlw	1
  6246  012C74  0100               	movlb	0	; () banked
  6247  012C76  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  6248  012C78  C0D0  F0CE         	movff	LED_Set@pValue,Port_SetPin@pValue
  6249  012C7C  EC65  F08E         	call	_Port_SetPin	;wreg free
  6250                           
  6251                           ;LED.c: 43: }
  6252                           
  6253                           ;LED.c: 42: break;
  6254  012C80  0012               	return	
  6255  012C82                     l227:
  6256  012C82  0100               	movlb	0	; () banked
  6257  012C84  51D1               	movf	LED_Set@pLED& (0+255),w,b
  6258                           
  6259                           ; Switch size 1, requested type "space"
  6260                           ; Number of cases is 2, Range of values is 0 to 1
  6261                           ; switch strategies available:
  6262                           ; Name         Instructions Cycles
  6263                           ; simple_byte            7     4 (average)
  6264                           ;	Chosen strategy is simple_byte
  6265  012C86  0A00               	xorlw	0	; case 0
  6266  012C88  B4D8               	btfsc	status,2,c
  6267  012C8A  D7DF               	goto	l228
  6268  012C8C  0A01               	xorlw	1	; case 1
  6269  012C8E  A4D8               	btfss	status,2,c
  6270  012C90  0012               	return	
  6271  012C92  D7E9               	goto	l230
  6272  012C94                     __end_of_LED_Set:
  6273                           	opt stack 0
  6274                           tblptru	equ	0xFF8
  6275                           tblptrh	equ	0xFF7
  6276                           tblptrl	equ	0xFF6
  6277                           tablat	equ	0xFF5
  6278                           prodh	equ	0xFF4
  6279                           prodl	equ	0xFF3
  6280                           intcon	equ	0xFF2
  6281                           postinc0	equ	0xFEE
  6282                           wreg	equ	0xFE8
  6283                           indf1	equ	0xFE7
  6284                           postdec1	equ	0xFE5
  6285                           fsr1h	equ	0xFE2
  6286                           fsr1l	equ	0xFE1
  6287                           indf2	equ	0xFDF
  6288                           postinc2	equ	0xFDE
  6289                           postdec2	equ	0xFDD
  6290                           fsr2h	equ	0xFDA
  6291                           fsr2l	equ	0xFD9
  6292                           status	equ	0xFD8
  6293                           
  6294 ;; *************** function _MXK_Dequeue *****************
  6295 ;; Defined at:
  6296 ;;		line 153 in file "Library/MXK.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;		None
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      void 
  6303 ;; Registers used:
  6304 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;Total ram usage:        0 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:   12
  6317 ;; This function calls:
  6318 ;;		Absolute function
  6319 ;;		_Motor_Step
  6320 ;; This function is called by:
  6321 ;;		_init
  6322 ;;		_printToConsole
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text23
  6327  012F16                     __ptext23:
  6328                           	opt stack 0
  6329  012F16                     _MXK_Dequeue:
  6330                           	opt stack 17
  6331                           
  6332                           ;MXK.c: 155: if (lQueue)
  6333                           
  6334                           ;incstack = 0
  6335  012F16  0100               	movlb	0	; () banked
  6336  012F18  5167               	movf	_lQueue& (0+255),w,b	;volatile
  6337  012F1A  0100               	movlb	0	; () banked
  6338  012F1C  1168               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  6339  012F1E  0100               	movlb	0	; () banked
  6340  012F20  1169               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  6341  012F22  B4D8               	btfsc	status,2,c
  6342  012F24  D00D               	goto	u9109
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;MXK.c: 156: lQueue();
  6346  012F26  D801               	call	u9108
  6347  012F28  D00B               	goto	u9109
  6348  012F2A                     u9108:
  6349  012F2A  0005               	push	
  6350  012F2C  6EFA               	movwf	pclath,c
  6351  012F2E  0100               	movlb	0	; () banked
  6352  012F30  5167               	movf	_lQueue& (0+255),w,b	;volatile
  6353  012F32  6EFD               	movwf	tosl,c
  6354  012F34  5168               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  6355  012F36  6EFE               	movwf	tosh,c
  6356  012F38  5169               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  6357  012F3A  6EFF               	movwf	tosu,c
  6358  012F3C  50FA               	movf	pclath,w,c
  6359  012F3E  0012               	return		;indir
  6360  012F40                     u9109:
  6361                           
  6362                           ;MXK.c: 157: lQueue = 0;
  6363  012F40  0E00               	movlw	0
  6364  012F42  0100               	movlb	0	; () banked
  6365  012F44  6F67               	movwf	_lQueue& (0+255),b	;volatile
  6366  012F46  0E00               	movlw	0
  6367  012F48  0100               	movlb	0	; () banked
  6368  012F4A  6F68               	movwf	(_lQueue+1)& (0+255),b	;volatile
  6369  012F4C  0E00               	movlw	0
  6370  012F4E  0100               	movlb	0	; () banked
  6371  012F50  6F69               	movwf	(_lQueue+2)& (0+255),b	;volatile
  6372                           
  6373                           ; BSR set to: 0
  6374  012F52  0012               	return		;funcret
  6375  012F54                     __end_of_MXK_Dequeue:
  6376                           	opt stack 0
  6377                           tosu	equ	0xFFF
  6378                           tosh	equ	0xFFE
  6379                           tosl	equ	0xFFD
  6380                           pclath	equ	0xFFA
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodh	equ	0xFF4
  6386                           prodl	equ	0xFF3
  6387                           intcon	equ	0xFF2
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           indf1	equ	0xFE7
  6391                           postdec1	equ	0xFE5
  6392                           fsr1h	equ	0xFE2
  6393                           fsr1l	equ	0xFE1
  6394                           indf2	equ	0xFDF
  6395                           postinc2	equ	0xFDE
  6396                           postdec2	equ	0xFDD
  6397                           fsr2h	equ	0xFDA
  6398                           fsr2l	equ	0xFD9
  6399                           status	equ	0xFD8
  6400                           
  6401 ;; *************** function _Motor_Step *****************
  6402 ;; Defined at:
  6403 ;;		line 75 in file "Library/Motor.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;Total ram usage:        2 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:   11
  6424 ;; This function calls:
  6425 ;;		_MXK_Queue
  6426 ;;		_MXK_Release
  6427 ;;		_MXK_SwitchTo
  6428 ;;		_Port_SetPin
  6429 ;;		_Timer0_Restart
  6430 ;;		_Timer0_Stop
  6431 ;; This function is called by:
  6432 ;;		_Motor_Init
  6433 ;;		_MXK_Dequeue
  6434 ;;		_Timer0_ISR
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text24
  6439  01175A                     __ptext24:
  6440                           	opt stack 0
  6441  01175A                     _Motor_Step:
  6442                           	opt stack 0
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;Skip over the trampoline to the duplicate function for level 2
  6446  01175A  B251               	btfsc	btemp,1,c
  6447  01175C  EF40  F08C         	goto	i2_Motor_Step
  6448  011760                     _Motor_Step$intlevel0:
  6449                           	opt stack 17
  6450                           
  6451                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  6452                           
  6453                           ;incstack = 0
  6454  011760  0100               	movlb	0	; () banked
  6455  011762  EE20 F004          	lfsr	2,4
  6456  011766  5173               	movf	_lMotor& (0+255),w,b
  6457  011768  26D9               	addwf	fsr2l,f,c
  6458  01176A  5174               	movf	(_lMotor+1)& (0+255),w,b
  6459  01176C  22DA               	addwfc	fsr2h,f,c
  6460  01176E  50DF               	movf	indf2,w,c
  6461  011770  EC4A  F097         	call	_MXK_SwitchTo
  6462  011774  0900               	iorlw	0
  6463  011776  B4D8               	btfsc	status,2,c
  6464  011778  D07A               	goto	l1627
  6465                           
  6466                           ;Motor.c: 78: {
  6467                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  6468  01177A  C073  FFD9         	movff	_lMotor,fsr2l
  6469  01177E  C074  FFDA         	movff	_lMotor+1,fsr2h
  6470  011782  50DE               	movf	postinc2,w,c
  6471  011784  10DE               	iorwf	postinc2,w,c
  6472  011786  B4D8               	btfsc	status,2,c
  6473  011788  D06D               	goto	l1628
  6474                           
  6475                           ;Motor.c: 80: {
  6476                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  6477  01178A  C073  FFD9         	movff	_lMotor,fsr2l
  6478  01178E  C074  FFDA         	movff	_lMotor+1,fsr2h
  6479  011792  0E01               	movlw	1
  6480  011794  BEDB               	btfsc	plusw2,7,c
  6481  011796  D026               	goto	l1629
  6482  011798  0E01               	movlw	1
  6483  01179A  50DB               	movf	plusw2,w,c
  6484  01179C  E103               	bnz	u7460
  6485  01179E  04DE               	decf	postinc2,w,c
  6486  0117A0  A0D8               	btfss	status,0,c
  6487  0117A2  D020               	goto	l1629
  6488  0117A4                     u7460:
  6489                           
  6490                           ;Motor.c: 83: {
  6491                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  6492  0117A4  C073  FFD9         	movff	_lMotor,fsr2l
  6493  0117A8  C074  FFDA         	movff	_lMotor+1,fsr2h
  6494  0117AC  28DE               	incf	postinc2,w,c
  6495  0117AE  E104               	bnz	u7470
  6496  0117B0  0E7F               	movlw	127
  6497  0117B2  18DE               	xorwf	postinc2,w,c
  6498  0117B4  B4D8               	btfsc	status,2,c
  6499  0117B6  D007               	goto	l1630
  6500  0117B8                     u7470:
  6501                           
  6502                           ;Motor.c: 85: lMotor->mDelta --;
  6503  0117B8  C073  FFD9         	movff	_lMotor,fsr2l
  6504  0117BC  C074  FFDA         	movff	_lMotor+1,fsr2h
  6505  0117C0  06DE               	decf	postinc2,f,c
  6506  0117C2  0E00               	movlw	0
  6507  0117C4  5ADD               	subwfb	postdec2,f,c
  6508  0117C6                     l1630:
  6509                           
  6510                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  6511  0117C6  0E8A               	movlw	low _PortE
  6512  0117C8  0100               	movlb	0	; () banked
  6513  0117CA  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  6514  0117CC  0E00               	movlw	high _PortE
  6515  0117CE  0100               	movlb	0	; () banked
  6516  0117D0  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6517  0117D2  0E00               	movlw	0
  6518  0117D4  0100               	movlb	0	; () banked
  6519  0117D6  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  6520  0117D8  0E01               	movlw	1
  6521  0117DA  0100               	movlb	0	; () banked
  6522  0117DC  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  6523  0117DE  EC65  F08E         	call	_Port_SetPin	;wreg free
  6524                           
  6525                           ;Motor.c: 88: }
  6526  0117E2  D01F               	goto	l1631
  6527  0117E4                     l1629:
  6528                           
  6529                           ;Motor.c: 89: else
  6530                           ;Motor.c: 90: {
  6531                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  6532  0117E4  C073  FFD9         	movff	_lMotor,fsr2l
  6533  0117E8  C074  FFDA         	movff	_lMotor+1,fsr2h
  6534  0117EC  04DE               	decf	postinc2,w,c
  6535  0117EE  E104               	bnz	u7480
  6536  0117F0  0E80               	movlw	128
  6537  0117F2  18DE               	xorwf	postinc2,w,c
  6538  0117F4  B4D8               	btfsc	status,2,c
  6539  0117F6  D007               	goto	l1632
  6540  0117F8                     u7480:
  6541                           
  6542                           ;Motor.c: 92: lMotor->mDelta ++;
  6543  0117F8  C073  FFD9         	movff	_lMotor,fsr2l
  6544  0117FC  C074  FFDA         	movff	_lMotor+1,fsr2h
  6545  011800  2ADE               	incf	postinc2,f,c
  6546  011802  0E00               	movlw	0
  6547  011804  22DD               	addwfc	postdec2,f,c
  6548  011806                     l1632:
  6549                           
  6550                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  6551  011806  0E8A               	movlw	low _PortE
  6552  011808  0100               	movlb	0	; () banked
  6553  01180A  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  6554  01180C  0E00               	movlw	high _PortE
  6555  01180E  0100               	movlb	0	; () banked
  6556  011810  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6557  011812  0E00               	movlw	0
  6558  011814  0100               	movlb	0	; () banked
  6559  011816  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  6560  011818  0E00               	movlw	0
  6561  01181A  0100               	movlb	0	; () banked
  6562  01181C  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  6563  01181E  EC65  F08E         	call	_Port_SetPin	;wreg free
  6564  011822                     l1631:
  6565                           
  6566                           ;Motor.c: 95: }
  6567                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  6568  011822  0E8A               	movlw	low _PortE
  6569  011824  0100               	movlb	0	; () banked
  6570  011826  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  6571  011828  0E00               	movlw	high _PortE
  6572  01182A  0100               	movlb	0	; () banked
  6573  01182C  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6574  01182E  0E01               	movlw	1
  6575  011830  0100               	movlb	0	; () banked
  6576  011832  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  6577  011834  0E01               	movlw	1
  6578  011836  0100               	movlb	0	; () banked
  6579  011838  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  6580  01183A  EC65  F08E         	call	_Port_SetPin	;wreg free
  6581                           
  6582                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  6583  01183E  0E8A               	movlw	low _PortE
  6584  011840  0100               	movlb	0	; () banked
  6585  011842  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  6586  011844  0E00               	movlw	high _PortE
  6587  011846  0100               	movlb	0	; () banked
  6588  011848  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6589  01184A  0E01               	movlw	1
  6590  01184C  0100               	movlb	0	; () banked
  6591  01184E  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  6592  011850  0E00               	movlw	0
  6593  011852  0100               	movlb	0	; () banked
  6594  011854  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  6595  011856  EC65  F08E         	call	_Port_SetPin	;wreg free
  6596                           
  6597                           ;Motor.c: 101: MXK_Release();
  6598  01185A  EC49  F099         	call	_MXK_Release	;wreg free
  6599                           
  6600                           ;Motor.c: 102: Timer0_Restart();
  6601  01185E  ECB7  F099         	call	_Timer0_Restart	;wreg free
  6602                           
  6603                           ;Motor.c: 103: return;
  6604  011862  0012               	return	
  6605  011864                     l1628:
  6606                           
  6607                           ;Motor.c: 104: }
  6608                           ;Motor.c: 105: MXK_Release();
  6609  011864  EC49  F099         	call	_MXK_Release	;wreg free
  6610                           
  6611                           ;Motor.c: 106: Timer0_Stop();
  6612  011868  ECDB  F099         	call	_Timer0_Stop	;wreg free
  6613                           
  6614                           ;Motor.c: 107: return;
  6615  01186C  0012               	return	
  6616  01186E                     l1627:
  6617                           
  6618                           ;Motor.c: 108: }
  6619                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  6620  01186E  C06A  F0BC         	movff	_lStepFunction,MXK_Queue@pCallback
  6621  011872  C06B  F0BD         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  6622  011876  C06C  F0BE         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  6623  01187A  ECA3  F099         	call	_MXK_Queue	;wreg free
  6624  01187E  0012               	return		;funcret
  6625  011880                     __end_of_Motor_Step:
  6626                           	opt stack 0
  6627                           tosu	equ	0xFFF
  6628                           tosh	equ	0xFFE
  6629                           tosl	equ	0xFFD
  6630                           pclath	equ	0xFFA
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           intcon	equ	0xFF2
  6638                           postinc0	equ	0xFEE
  6639                           wreg	equ	0xFE8
  6640                           indf1	equ	0xFE7
  6641                           postdec1	equ	0xFE5
  6642                           fsr1h	equ	0xFE2
  6643                           fsr1l	equ	0xFE1
  6644                           indf2	equ	0xFDF
  6645                           postinc2	equ	0xFDE
  6646                           postdec2	equ	0xFDD
  6647                           plusw2	equ	0xFDB
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _Timer0_Stop *****************
  6653 ;; Defined at:
  6654 ;;		line 89 in file "Library/Timer0.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		None
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    7
  6675 ;; This function calls:
  6676 ;;		Nothing
  6677 ;; This function is called by:
  6678 ;;		_Motor_Step
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text25
  6683  0133B6                     __ptext25:
  6684                           	opt stack 0
  6685  0133B6                     _Timer0_Stop:
  6686                           	opt stack 20
  6687                           
  6688                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  6689                           
  6690                           ;incstack = 0
  6691  0133B6  9AF2               	bcf	intcon,5,c	;volatile
  6692                           
  6693                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  6694  0133B8  94F2               	bcf	intcon,2,c	;volatile
  6695  0133BA  0012               	return		;funcret
  6696  0133BC                     __end_of_Timer0_Stop:
  6697                           	opt stack 0
  6698                           tosu	equ	0xFFF
  6699                           tosh	equ	0xFFE
  6700                           tosl	equ	0xFFD
  6701                           pclath	equ	0xFFA
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           prodh	equ	0xFF4
  6707                           prodl	equ	0xFF3
  6708                           intcon	equ	0xFF2
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           indf1	equ	0xFE7
  6712                           postdec1	equ	0xFE5
  6713                           fsr1h	equ	0xFE2
  6714                           fsr1l	equ	0xFE1
  6715                           indf2	equ	0xFDF
  6716                           postinc2	equ	0xFDE
  6717                           postdec2	equ	0xFDD
  6718                           plusw2	equ	0xFDB
  6719                           fsr2h	equ	0xFDA
  6720                           fsr2l	equ	0xFD9
  6721                           status	equ	0xFD8
  6722                           
  6723 ;; *************** function _Timer0_Restart *****************
  6724 ;; Defined at:
  6725 ;;		line 83 in file "Library/Timer0.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		None
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;Total ram usage:        0 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    7
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_Motor_Step
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text26
  6754  01336E                     __ptext26:
  6755                           	opt stack 0
  6756  01336E                     _Timer0_Restart:
  6757                           	opt stack 20
  6758                           
  6759                           ;Timer0.c: 85: TMR0 = COUNTER;
  6760                           
  6761                           ;incstack = 0
  6762  01336E  C071  FFD6         	movff	_COUNTER,4054	;volatile
  6763  013372  C072  FFD7         	movff	_COUNTER+1,4055	;volatile
  6764                           
  6765                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  6766  013376  8AF2               	bsf	intcon,5,c	;volatile
  6767  013378  0012               	return		;funcret
  6768  01337A                     __end_of_Timer0_Restart:
  6769                           	opt stack 0
  6770                           tosu	equ	0xFFF
  6771                           tosh	equ	0xFFE
  6772                           tosl	equ	0xFFD
  6773                           pclath	equ	0xFFA
  6774                           tblptru	equ	0xFF8
  6775                           tblptrh	equ	0xFF7
  6776                           tblptrl	equ	0xFF6
  6777                           tablat	equ	0xFF5
  6778                           prodh	equ	0xFF4
  6779                           prodl	equ	0xFF3
  6780                           intcon	equ	0xFF2
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           indf1	equ	0xFE7
  6784                           postdec1	equ	0xFE5
  6785                           fsr1h	equ	0xFE2
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           plusw2	equ	0xFDB
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function _MXK_SwitchTo *****************
  6796 ;; Defined at:
  6797 ;;		line 105 in file "Library/MXK.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  pModule         1    wreg     enum E6927
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  pModule         1    7[BANK0 ] enum E6927
  6802 ;;  CUR             1    6[BANK0 ] unsigned char 
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      unsigned char 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;Total ram usage:        2 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    8
  6819 ;; This function calls:
  6820 ;;		_delay_us
  6821 ;; This function is called by:
  6822 ;;		_Motor_Step
  6823 ;;		_printToConsole
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text27
  6828  012E94                     __ptext27:
  6829                           	opt stack 0
  6830  012E94                     _MXK_SwitchTo:
  6831                           	opt stack 19
  6832                           
  6833                           ;incstack = 0
  6834                           ;MXK_SwitchTo@pModule stored from wreg
  6835  012E94  0100               	movlb	0	; () banked
  6836  012E96  6FC3               	movwf	MXK_SwitchTo@pModule& (0+255),b
  6837                           
  6838                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  6839  012E98  5086               	movf	3974,w,c	;volatile
  6840  012E9A  0B0F               	andlw	15
  6841  012E9C  0100               	movlb	0	; () banked
  6842  012E9E  6FC2               	movwf	MXK_SwitchTo@CUR& (0+255),b
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  6846  012EA0  504A               	movf	_Bus_State,w,c
  6847  012EA2  A4D8               	btfss	status,2,c
  6848  012EA4  D002               	goto	l1730
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;MXK.c: 110: return 0;
  6852  012EA6  0E00               	movlw	0
  6853                           
  6854                           ; BSR set to: 0
  6855  012EA8  0012               	return	
  6856  012EAA                     l1730:
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  6860                           
  6861                           ; BSR set to: 0
  6862  012EAA  0E00               	movlw	0
  6863  012EAC  6E4A               	movwf	_Bus_State,c
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;MXK.c: 114: if (CUR != pModule)
  6867  012EAE  0100               	movlb	0	; () banked
  6868  012EB0  51C3               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  6869  012EB2  0100               	movlb	0	; () banked
  6870  012EB4  19C2               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  6871  012EB6  B4D8               	btfsc	status,2,c
  6872  012EB8  D00C               	goto	l1732
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;MXK.c: 115: {
  6876                           ;MXK.c: 116: PORTG &= ~(0xF);
  6877  012EBA  0EF0               	movlw	240
  6878  012EBC  1686               	andwf	3974,f,c	;volatile
  6879                           
  6880                           ;MXK.c: 117: PORTG |= pModule;
  6881  012EBE  0100               	movlb	0	; () banked
  6882  012EC0  51C3               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  6883  012EC2  1286               	iorwf	3974,f,c	;volatile
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;MXK.c: 120: delay_us(10);
  6887  012EC4  0E00               	movlw	0
  6888  012EC6  0100               	movlb	0	; () banked
  6889  012EC8  6FBD               	movwf	(delay_us@us+1)& (0+255),b
  6890  012ECA  0E0A               	movlw	10
  6891  012ECC  6FBC               	movwf	delay_us@us& (0+255),b
  6892  012ECE  ECF9  F095         	call	_delay_us	;wreg free
  6893  012ED2                     l1732:
  6894                           
  6895                           ;MXK.c: 121: }
  6896                           ;MXK.c: 122: return 1;
  6897  012ED2  0E01               	movlw	1
  6898  012ED4  0012               	return	
  6899  012ED6                     __end_of_MXK_SwitchTo:
  6900                           	opt stack 0
  6901                           tosu	equ	0xFFF
  6902                           tosh	equ	0xFFE
  6903                           tosl	equ	0xFFD
  6904                           pclath	equ	0xFFA
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           postinc0	equ	0xFEE
  6913                           wreg	equ	0xFE8
  6914                           indf1	equ	0xFE7
  6915                           postdec1	equ	0xFE5
  6916                           fsr1h	equ	0xFE2
  6917                           fsr1l	equ	0xFE1
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           plusw2	equ	0xFDB
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _MXK_Release *****************
  6927 ;; Defined at:
  6928 ;;		line 130 in file "Library/MXK.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      unsigned char 
  6935 ;; Registers used:
  6936 ;;		wreg, status,2, status,0
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    7
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_Motor_Step
  6953 ;;		_init
  6954 ;;		_printToConsole
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text28
  6959  013292                     __ptext28:
  6960                           	opt stack 0
  6961  013292                     _MXK_Release:
  6962                           	opt stack 22
  6963                           
  6964                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  6965                           
  6966                           ;incstack = 0
  6967  013292  0E01               	movlw	1
  6968  013294  6E4A               	movwf	_Bus_State,c
  6969                           
  6970                           ;MXK.c: 134: if (lQueue != 0)
  6971  013296  0100               	movlb	0	; () banked
  6972  013298  5167               	movf	_lQueue& (0+255),w,b	;volatile
  6973  01329A  0100               	movlb	0	; () banked
  6974  01329C  1168               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  6975  01329E  0100               	movlb	0	; () banked
  6976  0132A0  1169               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  6977  0132A2  B4D8               	btfsc	status,2,c
  6978  0132A4  D002               	goto	l1735
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;MXK.c: 135: return 1;
  6982  0132A6  0E01               	movlw	1
  6983                           
  6984                           ; BSR set to: 0
  6985  0132A8  0012               	return	
  6986  0132AA                     l1735:
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;MXK.c: 137: return 0;
  6990                           
  6991                           ; BSR set to: 0
  6992  0132AA  0E00               	movlw	0
  6993  0132AC  0012               	return	
  6994  0132AE                     __end_of_MXK_Release:
  6995                           	opt stack 0
  6996                           tosu	equ	0xFFF
  6997                           tosh	equ	0xFFE
  6998                           tosl	equ	0xFFD
  6999                           pclath	equ	0xFFA
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon	equ	0xFF2
  7007                           postinc0	equ	0xFEE
  7008                           wreg	equ	0xFE8
  7009                           indf1	equ	0xFE7
  7010                           postdec1	equ	0xFE5
  7011                           fsr1h	equ	0xFE2
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           plusw2	equ	0xFDB
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _MXK_Queue *****************
  7022 ;; Defined at:
  7023 ;;		line 144 in file "Library/MXK.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  7026 ;;		 -> Absolute function(1), Motor_Step(1), 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      void 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7038 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;Total ram usage:        3 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    7
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_Motor_Step
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text29
  7053  013346                     __ptext29:
  7054                           	opt stack 0
  7055  013346                     _MXK_Queue:
  7056                           	opt stack 20
  7057                           
  7058                           ;MXK.c: 146: lQueue = pCallback;
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;incstack = 0
  7062  013346  C0BC  F067         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  7063  01334A  C0BD  F068         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  7064  01334E  C0BE  F069         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  7065  013352  0012               	return		;funcret
  7066  013354                     __end_of_MXK_Queue:
  7067                           	opt stack 0
  7068                           tosu	equ	0xFFF
  7069                           tosh	equ	0xFFE
  7070                           tosl	equ	0xFFD
  7071                           pclath	equ	0xFFA
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           intcon	equ	0xFF2
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           indf1	equ	0xFE7
  7082                           postdec1	equ	0xFE5
  7083                           fsr1h	equ	0xFE2
  7084                           fsr1l	equ	0xFE1
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           plusw2	equ	0xFDB
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _MXK_BlockSwitchTo *****************
  7094 ;; Defined at:
  7095 ;;		line 82 in file "Library/MXK.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  pModule         1    wreg     enum E6927
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  pModule         1    7[BANK0 ] enum E6927
  7100 ;;  CUR             1    6[BANK0 ] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      unsigned char 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        2 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    8
  7117 ;; This function calls:
  7118 ;;		_delay_us
  7119 ;; This function is called by:
  7120 ;;		_init
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text30
  7125  012F54                     __ptext30:
  7126                           	opt stack 0
  7127  012F54                     _MXK_BlockSwitchTo:
  7128                           	opt stack 21
  7129                           
  7130                           ;incstack = 0
  7131                           ;MXK_BlockSwitchTo@pModule stored from wreg
  7132  012F54  0100               	movlb	0	; () banked
  7133  012F56  6FC3               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  7134                           
  7135                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  7136  012F58  5086               	movf	3974,w,c	;volatile
  7137  012F5A  0B0F               	andlw	15
  7138  012F5C  0100               	movlb	0	; () banked
  7139  012F5E  6FC2               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  7140  012F60                     
  7141                           ; BSR set to: 0
  7142                           
  7143                           ; BSR set to: 0
  7144  012F60  504A               	movf	_Bus_State,w,c
  7145  012F62  B4D8               	btfsc	status,2,c
  7146  012F64  D7FD               	goto	l1724
  7147                           
  7148                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  7149  012F66  0E00               	movlw	0
  7150  012F68  6E4A               	movwf	_Bus_State,c
  7151                           
  7152                           ;MXK.c: 90: if (CUR != pModule)
  7153  012F6A  0100               	movlb	0	; () banked
  7154  012F6C  51C3               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  7155  012F6E  0100               	movlb	0	; () banked
  7156  012F70  19C2               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  7157  012F72  B4D8               	btfsc	status,2,c
  7158  012F74  D00C               	goto	l1726
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;MXK.c: 91: {
  7162                           ;MXK.c: 92: PORTG &= ~(0xF);
  7163  012F76  0EF0               	movlw	240
  7164  012F78  1686               	andwf	3974,f,c	;volatile
  7165                           
  7166                           ;MXK.c: 93: PORTG |= pModule;
  7167  012F7A  0100               	movlb	0	; () banked
  7168  012F7C  51C3               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  7169  012F7E  1286               	iorwf	3974,f,c	;volatile
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;MXK.c: 96: delay_us(10);
  7173  012F80  0E00               	movlw	0
  7174  012F82  0100               	movlb	0	; () banked
  7175  012F84  6FBD               	movwf	(delay_us@us+1)& (0+255),b
  7176  012F86  0E0A               	movlw	10
  7177  012F88  6FBC               	movwf	delay_us@us& (0+255),b
  7178  012F8A  ECF9  F095         	call	_delay_us	;wreg free
  7179  012F8E                     l1726:
  7180                           
  7181                           ;MXK.c: 97: }
  7182                           ;MXK.c: 98: return 1;
  7183  012F8E  0E01               	movlw	1
  7184  012F90  0012               	return	
  7185  012F92                     __end_of_MXK_BlockSwitchTo:
  7186                           	opt stack 0
  7187                           tosu	equ	0xFFF
  7188                           tosh	equ	0xFFE
  7189                           tosl	equ	0xFFD
  7190                           pclath	equ	0xFFA
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postdec1	equ	0xFE5
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           plusw2	equ	0xFDB
  7208                           fsr2h	equ	0xFDA
  7209                           fsr2l	equ	0xFD9
  7210                           status	equ	0xFD8
  7211                           
  7212 ;; *************** function _delay_us *****************
  7213 ;; Defined at:
  7214 ;;		line 255 in file "Library/Types.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  us              2    0[BANK0 ] unsigned short 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  u               4    2[BANK0 ] unsigned long 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      void 
  7221 ;; Registers used:
  7222 ;;		wreg, status,2, status,0
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7228 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;Total ram usage:        6 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    7
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		_MXK_BlockSwitchTo
  7239 ;;		_MXK_SwitchTo
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text31
  7244  012BF2                     __ptext31:
  7245                           	opt stack 0
  7246  012BF2                     _delay_us:
  7247                           	opt stack 19
  7248                           
  7249                           ;Types.c: 256: unsigned long u;
  7250                           ;Types.c: 257: while (us--) {
  7251                           
  7252                           ;incstack = 0
  7253  012BF2  D01C               	goto	u6970
  7254  012BF4                     l10940:
  7255                           
  7256                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  7257  012BF4  0E00               	movlw	0
  7258  012BF6  0100               	movlb	0	; () banked
  7259  012BF8  6FBE               	movwf	delay_us@u& (0+255),b
  7260  012BFA  0E00               	movlw	0
  7261  012BFC  6FBF               	movwf	(delay_us@u+1)& (0+255),b
  7262  012BFE  0E00               	movlw	0
  7263  012C00  6FC0               	movwf	(delay_us@u+2)& (0+255),b
  7264  012C02  0E00               	movlw	0
  7265  012C04  6FC1               	movwf	(delay_us@u+3)& (0+255),b
  7266  012C06                     l10942:
  7267                           
  7268                           ; BSR set to: 0
  7269  012C06  0100               	movlb	0	; () banked
  7270  012C08  51BE               	movf	delay_us@u& (0+255),w,b
  7271  012C0A  0100               	movlb	0	; () banked
  7272  012C0C  11BF               	iorwf	(delay_us@u+1)& (0+255),w,b
  7273  012C0E  0100               	movlb	0	; () banked
  7274  012C10  11C0               	iorwf	(delay_us@u+2)& (0+255),w,b
  7275  012C12  0100               	movlb	0	; () banked
  7276  012C14  11C1               	iorwf	(delay_us@u+3)& (0+255),w,b
  7277  012C16  A4D8               	btfss	status,2,c
  7278  012C18  D009               	goto	u6970
  7279                           
  7280                           ; BSR set to: 0
  7281                           
  7282                           ; BSR set to: 0
  7283  012C1A  F000               	nop		; ;# 
  7284  012C1C  0E01               	movlw	1
  7285  012C1E  0100               	movlb	0	; () banked
  7286  012C20  27BE               	addwf	delay_us@u& (0+255),f,b
  7287  012C22  0E00               	movlw	0
  7288  012C24  23BF               	addwfc	(delay_us@u+1)& (0+255),f,b
  7289  012C26  23C0               	addwfc	(delay_us@u+2)& (0+255),f,b
  7290  012C28  23C1               	addwfc	(delay_us@u+3)& (0+255),f,b
  7291  012C2A  D7ED               	goto	l10942
  7292  012C2C                     u6970:
  7293                           
  7294                           ; BSR set to: 0
  7295                           
  7296                           ; BSR set to: 0
  7297  012C2C  0100               	movlb	0	; () banked
  7298  012C2E  07BC               	decf	delay_us@us& (0+255),f,b
  7299  012C30  A0D8               	btfss	status,0,c
  7300  012C32  07BD               	decf	(delay_us@us+1)& (0+255),f,b
  7301  012C34  0100               	movlb	0	; () banked
  7302  012C36  29BC               	incf	delay_us@us& (0+255),w,b
  7303  012C38  E1DD               	bnz	l10940
  7304  012C3A  0100               	movlb	0	; () banked
  7305  012C3C  29BD               	incf	(delay_us@us+1)& (0+255),w,b
  7306  012C3E  B4D8               	btfsc	status,2,c
  7307  012C40  0012               	return	
  7308  012C42  D7D8               	goto	l832
  7309  012C44                     __end_of_delay_us:
  7310                           	opt stack 0
  7311                           tosu	equ	0xFFF
  7312                           tosh	equ	0xFFE
  7313                           tosl	equ	0xFFD
  7314                           pclath	equ	0xFFA
  7315                           tblptru	equ	0xFF8
  7316                           tblptrh	equ	0xFF7
  7317                           tblptrl	equ	0xFF6
  7318                           tablat	equ	0xFF5
  7319                           prodh	equ	0xFF4
  7320                           prodl	equ	0xFF3
  7321                           intcon	equ	0xFF2
  7322                           postinc0	equ	0xFEE
  7323                           wreg	equ	0xFE8
  7324                           indf1	equ	0xFE7
  7325                           postdec1	equ	0xFE5
  7326                           fsr1h	equ	0xFE2
  7327                           fsr1l	equ	0xFE1
  7328                           indf2	equ	0xFDF
  7329                           postinc2	equ	0xFDE
  7330                           postdec2	equ	0xFDD
  7331                           plusw2	equ	0xFDB
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function _LCD_Init *****************
  7337 ;; Defined at:
  7338 ;;		line 172 in file "Library/LCD.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;		None
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  i               2   55[BANK0 ] unsigned short 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;Total ram usage:        4 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:   15
  7359 ;; This function calls:
  7360 ;;		_Configure_GPIOs
  7361 ;;		_LCD_Fill
  7362 ;;		_LCD_Write
  7363 ;;		_Set_Rotation
  7364 ;;		_delay_ms
  7365 ;; This function is called by:
  7366 ;;		_init
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text32
  7371  011324                     __ptext32:
  7372                           	opt stack 0
  7373  011324                     _LCD_Init:
  7374                           	opt stack 14
  7375                           
  7376                           ;LCD.c: 174: UINT16 i;
  7377                           ;LCD.c: 175: Configure_GPIOs();
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;incstack = 0
  7381  011324  EC04  F094         	call	_Configure_GPIOs	;wreg free
  7382                           
  7383                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  7384  011328  0E00               	movlw	0
  7385  01132A  0100               	movlb	0	; () banked
  7386  01132C  6FF4               	movwf	(LCD_Init@i+1)& (0+255),b
  7387  01132E  0E00               	movlw	0
  7388  011330  6FF3               	movwf	LCD_Init@i& (0+255),b
  7389                           
  7390                           ; BSR set to: 0
  7391  011332  0100               	movlb	0	; () banked
  7392  011334  51F4               	movf	(LCD_Init@i+1)& (0+255),w,b
  7393  011336  E106               	bnz	u7580
  7394  011338  0E59               	movlw	89
  7395  01133A  0100               	movlb	0	; () banked
  7396  01133C  5DF3               	subwf	LCD_Init@i& (0+255),w,b
  7397  01133E  B0D8               	btfsc	status,0,c
  7398  011340  D08B               	goto	u7620
  7399  011342  D001               	goto	l85
  7400  011344                     u7580:
  7401                           
  7402                           ; BSR set to: 0
  7403  011344  D089               	goto	u7620
  7404  011346                     l85:
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;LCD.c: 178: {
  7408                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  7409                           
  7410                           ; BSR set to: 0
  7411  011346  90D8               	bcf	status,0,c
  7412  011348  0100               	movlb	0	; () banked
  7413  01134A  35F3               	rlcf	LCD_Init@i& (0+255),w,b
  7414  01134C  6EF6               	movwf	tblptrl,c
  7415  01134E  0100               	movlb	0	; () banked
  7416  011350  35F4               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7417  011352  6EF7               	movwf	tblptrh,c
  7418  011354  0E29               	movlw	low _InitList
  7419  011356  26F6               	addwf	tblptrl,f,c
  7420  011358  0EFD               	movlw	high _InitList
  7421  01135A  22F7               	addwfc	tblptrh,f,c
  7422  01135C                     	if	1	;There are 3 active tblptr bytes
  7423  01135C  6AF8               	clrf	tblptru,c
  7424  01135E  0E00               	movlw	low (__mediumconst shr (0+16))
  7425  011360  22F8               	addwfc	tblptru,f,c
  7426  011362                     	endif
  7427  011362  0009               	tblrd		*+
  7428  011364  0E80               	movlw	128
  7429  011366  18F5               	xorwf	tablat,w,c
  7430  011368  0009               	tblrd		*+
  7431  01136A  10F5               	iorwf	tablat,w,c
  7432  01136C  A4D8               	btfss	status,2,c
  7433  01136E  D022               	goto	l87
  7434                           
  7435                           ; BSR set to: 0
  7436  011370  0100               	movlb	0	; () banked
  7437  011372  51F4               	movf	(LCD_Init@i+1)& (0+255),w,b
  7438  011374  E11F               	bnz	l11728
  7439  011376  0E58               	movlw	88
  7440  011378  0100               	movlb	0	; () banked
  7441  01137A  5DF3               	subwf	LCD_Init@i& (0+255),w,b
  7442  01137C  B0D8               	btfsc	status,0,c
  7443  01137E  D01A               	goto	l87
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;LCD.c: 180: delay_ms(InitList[++i]);
  7447  011380  0100               	movlb	0	; () banked
  7448  011382  4BF3               	infsnz	LCD_Init@i& (0+255),f,b
  7449  011384  2BF4               	incf	(LCD_Init@i+1)& (0+255),f,b
  7450  011386  90D8               	bcf	status,0,c
  7451  011388  0100               	movlb	0	; () banked
  7452  01138A  35F3               	rlcf	LCD_Init@i& (0+255),w,b
  7453  01138C  6EF6               	movwf	tblptrl,c
  7454  01138E  0100               	movlb	0	; () banked
  7455  011390  35F4               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7456  011392  6EF7               	movwf	tblptrh,c
  7457  011394  0E29               	movlw	low _InitList
  7458  011396  26F6               	addwf	tblptrl,f,c
  7459  011398  0EFD               	movlw	high _InitList
  7460  01139A  22F7               	addwfc	tblptrh,f,c
  7461  01139C                     	if	1	;There are 3 active tblptr bytes
  7462  01139C  6AF8               	clrf	tblptru,c
  7463  01139E  0E00               	movlw	low (__mediumconst shr (0+16))
  7464  0113A0  22F8               	addwfc	tblptru,f,c
  7465  0113A2                     	endif
  7466  0113A2  0009               	tblrd		*+
  7467  0113A4  CFF5 F0BC          	movff	tablat,delay_ms@ms
  7468  0113A8  000A               	tblrd		*-
  7469  0113AA  CFF5 F0BD          	movff	tablat,delay_ms@ms+1
  7470  0113AE  ECA7  F094         	call	_delay_ms	;wreg free
  7471  0113B2  D04B               	goto	l90
  7472  0113B4                     l87:
  7473  0113B4                     l11728:
  7474                           
  7475                           ;LCD.c: 181: else
  7476                           ;LCD.c: 182: {
  7477                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  7478  0113B4  90D8               	bcf	status,0,c
  7479  0113B6  0100               	movlb	0	; () banked
  7480  0113B8  35F3               	rlcf	LCD_Init@i& (0+255),w,b
  7481  0113BA  6EF6               	movwf	tblptrl,c
  7482  0113BC  0100               	movlb	0	; () banked
  7483  0113BE  35F4               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7484  0113C0  6EF7               	movwf	tblptrh,c
  7485  0113C2  0E29               	movlw	low _InitList
  7486  0113C4  26F6               	addwf	tblptrl,f,c
  7487  0113C6  0EFD               	movlw	high _InitList
  7488  0113C8  22F7               	addwfc	tblptrh,f,c
  7489  0113CA                     	if	1	;There are 3 active tblptr bytes
  7490  0113CA  6AF8               	clrf	tblptru,c
  7491  0113CC  0E00               	movlw	low (__mediumconst shr (0+16))
  7492  0113CE  22F8               	addwfc	tblptru,f,c
  7493  0113D0                     	endif
  7494  0113D0  0009               	tblrd		*+
  7495  0113D2  0E00               	movlw	0
  7496  0113D4  5EF5               	subwf	tablat,f,c
  7497  0113D6  0009               	tblrd		*+
  7498  0113D8  0E01               	movlw	1
  7499  0113DA  5AF5               	subwfb	tablat,f,c
  7500  0113DC  A0D8               	btfss	status,0,c
  7501  0113DE  D020               	goto	l89
  7502                           
  7503                           ; BSR set to: 0
  7504  0113E0  0E00               	movlw	0
  7505  0113E2  0100               	movlb	0	; () banked
  7506  0113E4  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7507  0113E6  90D8               	bcf	status,0,c
  7508  0113E8  0100               	movlb	0	; () banked
  7509  0113EA  35F3               	rlcf	LCD_Init@i& (0+255),w,b
  7510  0113EC  6EF6               	movwf	tblptrl,c
  7511  0113EE  0100               	movlb	0	; () banked
  7512  0113F0  35F4               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7513  0113F2  6EF7               	movwf	tblptrh,c
  7514  0113F4  0E29               	movlw	low _InitList
  7515  0113F6  26F6               	addwf	tblptrl,f,c
  7516  0113F8  0EFD               	movlw	high _InitList
  7517  0113FA  22F7               	addwfc	tblptrh,f,c
  7518  0113FC                     	if	1	;There are 3 active tblptr bytes
  7519  0113FC  6AF8               	clrf	tblptru,c
  7520  0113FE  0E00               	movlw	low (__mediumconst shr (0+16))
  7521  011400  22F8               	addwfc	tblptru,f,c
  7522  011402                     	endif
  7523  011402  0009               	tblrd		*+
  7524  011404  CFF5 F0F1          	movff	tablat,??_LCD_Init
  7525  011408  0009               	tblrd		*+
  7526  01140A  CFF5 F0F2          	movff	tablat,??_LCD_Init+1
  7527  01140E  C0F2  F0F1         	movff	??_LCD_Init+1,??_LCD_Init
  7528  011412  0100               	movlb	0	; () banked
  7529  011414  6BF2               	clrf	(??_LCD_Init+1)& (0+255),b
  7530  011416  0100               	movlb	0	; () banked
  7531  011418  51F1               	movf	??_LCD_Init& (0+255),w,b
  7532  01141A  EC8F  F098         	call	_LCD_Write
  7533  01141E  D015               	goto	l90
  7534  011420                     l89:
  7535                           
  7536                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  7537  011420  0E01               	movlw	1
  7538  011422  0100               	movlb	0	; () banked
  7539  011424  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7540  011426  90D8               	bcf	status,0,c
  7541  011428  0100               	movlb	0	; () banked
  7542  01142A  35F3               	rlcf	LCD_Init@i& (0+255),w,b
  7543  01142C  6EF6               	movwf	tblptrl,c
  7544  01142E  0100               	movlb	0	; () banked
  7545  011430  35F4               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7546  011432  6EF7               	movwf	tblptrh,c
  7547  011434  0E29               	movlw	low _InitList
  7548  011436  26F6               	addwf	tblptrl,f,c
  7549  011438  0EFD               	movlw	high _InitList
  7550  01143A  22F7               	addwfc	tblptrh,f,c
  7551  01143C                     	if	1	;There are 3 active tblptr bytes
  7552  01143C  6AF8               	clrf	tblptru,c
  7553  01143E  0E00               	movlw	low (__mediumconst shr (0+16))
  7554  011440  22F8               	addwfc	tblptru,f,c
  7555  011442                     	endif
  7556  011442  0008               	tblrd		*
  7557  011444  50F5               	movf	tablat,w,c
  7558  011446  EC8F  F098         	call	_LCD_Write
  7559  01144A                     l90:
  7560  01144A  0100               	movlb	0	; () banked
  7561  01144C  4BF3               	infsnz	LCD_Init@i& (0+255),f,b
  7562  01144E  2BF4               	incf	(LCD_Init@i+1)& (0+255),f,b
  7563                           
  7564                           ; BSR set to: 0
  7565  011450  0100               	movlb	0	; () banked
  7566  011452  51F4               	movf	(LCD_Init@i+1)& (0+255),w,b
  7567  011454  E101               	bnz	l11738
  7568  011456  D770               	goto	L5
  7569  011458                     u7620:
  7570  011458                     l11738:
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;LCD.c: 185: }
  7574                           ;LCD.c: 186: }
  7575                           ;LCD.c: 187: delay_ms(100);
  7576  011458  0E00               	movlw	0
  7577  01145A  0100               	movlb	0	; () banked
  7578  01145C  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  7579  01145E  0E64               	movlw	100
  7580  011460  6FBC               	movwf	delay_ms@ms& (0+255),b
  7581  011462  ECA7  F094         	call	_delay_ms	;wreg free
  7582                           
  7583                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  7584  011466  0E00               	movlw	0
  7585  011468  0100               	movlb	0	; () banked
  7586  01146A  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7587  01146C  0E29               	movlw	41
  7588  01146E  EC8F  F098         	call	_LCD_Write
  7589                           
  7590                           ;LCD.c: 189: Set_Rotation(1);
  7591  011472  0E01               	movlw	1
  7592  011474  ECC4  F091         	call	_Set_Rotation
  7593                           
  7594                           ;LCD.c: 191: delay_ms(100);
  7595  011478  0E00               	movlw	0
  7596  01147A  0100               	movlb	0	; () banked
  7597  01147C  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  7598  01147E  0E64               	movlw	100
  7599  011480  6FBC               	movwf	delay_ms@ms& (0+255),b
  7600  011482  ECA7  F094         	call	_delay_ms	;wreg free
  7601                           
  7602                           ;LCD.c: 192: LCD_Fill(0x0000);
  7603  011486  0E00               	movlw	0
  7604  011488  0100               	movlb	0	; () banked
  7605  01148A  6FC6               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  7606  01148C  0E00               	movlw	0
  7607  01148E  6FC5               	movwf	LCD_Fill@pColour& (0+255),b
  7608  011490  ECCD  F095         	call	_LCD_Fill	;wreg free
  7609  011494  0012               	return		;funcret
  7610  011496                     __end_of_LCD_Init:
  7611                           	opt stack 0
  7612                           tosu	equ	0xFFF
  7613                           tosh	equ	0xFFE
  7614                           tosl	equ	0xFFD
  7615                           pclath	equ	0xFFA
  7616                           tblptru	equ	0xFF8
  7617                           tblptrh	equ	0xFF7
  7618                           tblptrl	equ	0xFF6
  7619                           tablat	equ	0xFF5
  7620                           prodh	equ	0xFF4
  7621                           prodl	equ	0xFF3
  7622                           intcon	equ	0xFF2
  7623                           postinc0	equ	0xFEE
  7624                           wreg	equ	0xFE8
  7625                           indf1	equ	0xFE7
  7626                           postdec1	equ	0xFE5
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           plusw2	equ	0xFDB
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _Set_Rotation *****************
  7638 ;; Defined at:
  7639 ;;		line 248 in file "Library/LCD.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  m               1    wreg     unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  m               1    5[BANK0 ] unsigned char 
  7644 ;;  rotation        1    6[BANK0 ] unsigned char 
  7645 ;; Return value:  Size  Location     Type
  7646 ;;                  1    wreg      void 
  7647 ;; Registers used:
  7648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;Total ram usage:        2 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    9
  7661 ;; This function calls:
  7662 ;;		_LCD_Write
  7663 ;; This function is called by:
  7664 ;;		_LCD_Init
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           	psect	text33
  7669  012388                     __ptext33:
  7670                           	opt stack 0
  7671  012388                     _Set_Rotation:
  7672                           	opt stack 19
  7673                           
  7674                           ;incstack = 0
  7675                           ;Set_Rotation@m stored from wreg
  7676  012388  0100               	movlb	0	; () banked
  7677  01238A  6FC1               	movwf	Set_Rotation@m& (0+255),b
  7678                           
  7679                           ;LCD.c: 250: UINT8 rotation = 0x00;
  7680  01238C  0E00               	movlw	0
  7681  01238E  0100               	movlb	0	; () banked
  7682  012390  6FC2               	movwf	Set_Rotation@rotation& (0+255),b
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  7686  012392  0E00               	movlw	0
  7687  012394  0100               	movlb	0	; () banked
  7688  012396  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7689  012398  0E36               	movlw	54
  7690  01239A  EC8F  F098         	call	_LCD_Write
  7691                           
  7692                           ;LCD.c: 253: rotation = (m % 4);
  7693  01239E  0100               	movlb	0	; () banked
  7694  0123A0  51C1               	movf	Set_Rotation@m& (0+255),w,b
  7695  0123A2  0B03               	andlw	3
  7696  0123A4  0100               	movlb	0	; () banked
  7697  0123A6  6FC2               	movwf	Set_Rotation@rotation& (0+255),b
  7698                           
  7699                           ;LCD.c: 255: switch(rotation)
  7700  0123A8  D02C               	goto	l117
  7701  0123AA                     
  7702                           ; BSR set to: 0
  7703                           ;LCD.c: 258: {
  7704                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  7705                           
  7706                           ; BSR set to: 0
  7707  0123AA  0E01               	movlw	1
  7708  0123AC  0100               	movlb	0	; () banked
  7709  0123AE  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7710  0123B0  0EC8               	movlw	200
  7711  0123B2  EC8F  F098         	call	_LCD_Write
  7712                           
  7713                           ;LCD.c: 260: w = 128;
  7714  0123B6  0E80               	movlw	128
  7715  0123B8  6E50               	movwf	_w,c
  7716                           
  7717                           ;LCD.c: 261: l = 128;
  7718  0123BA  0E80               	movlw	128
  7719  0123BC  6E4F               	movwf	_l,c
  7720                           
  7721                           ;LCD.c: 262: break;
  7722  0123BE  0012               	return	
  7723  0123C0                     
  7724                           ;LCD.c: 265: {
  7725                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  7726  0123C0  0E01               	movlw	1
  7727  0123C2  0100               	movlb	0	; () banked
  7728  0123C4  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7729  0123C6  0EA8               	movlw	168
  7730  0123C8  EC8F  F098         	call	_LCD_Write
  7731                           
  7732                           ;LCD.c: 267: w = 128;
  7733  0123CC  0E80               	movlw	128
  7734  0123CE  6E50               	movwf	_w,c
  7735                           
  7736                           ;LCD.c: 268: l = 128;
  7737  0123D0  0E80               	movlw	128
  7738  0123D2  6E4F               	movwf	_l,c
  7739                           
  7740                           ;LCD.c: 269: break;
  7741  0123D4  0012               	return	
  7742  0123D6                     
  7743                           ;LCD.c: 272: {
  7744                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  7745  0123D6  0E01               	movlw	1
  7746  0123D8  0100               	movlb	0	; () banked
  7747  0123DA  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7748  0123DC  0E08               	movlw	8
  7749  0123DE  EC8F  F098         	call	_LCD_Write
  7750                           
  7751                           ;LCD.c: 274: w = 128;
  7752  0123E2  0E80               	movlw	128
  7753  0123E4  6E50               	movwf	_w,c
  7754                           
  7755                           ;LCD.c: 275: l = 128;
  7756  0123E6  0E80               	movlw	128
  7757  0123E8  6E4F               	movwf	_l,c
  7758                           
  7759                           ;LCD.c: 276: break;
  7760  0123EA  0012               	return	
  7761  0123EC                     
  7762                           ;LCD.c: 279: {
  7763                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  7764  0123EC  0E01               	movlw	1
  7765  0123EE  0100               	movlb	0	; () banked
  7766  0123F0  6FBF               	movwf	LCD_Write@mode& (0+255),b
  7767  0123F2  0E68               	movlw	104
  7768  0123F4  EC8F  F098         	call	_LCD_Write
  7769                           
  7770                           ;LCD.c: 281: w = 128;
  7771  0123F8  0E80               	movlw	128
  7772  0123FA  6E50               	movwf	_w,c
  7773                           
  7774                           ;LCD.c: 282: l = 128;
  7775  0123FC  0E80               	movlw	128
  7776  0123FE  6E4F               	movwf	_l,c
  7777                           
  7778                           ;LCD.c: 284: }
  7779                           ;LCD.c: 285: }
  7780                           
  7781                           ;LCD.c: 283: break;
  7782  012400  0012               	return	
  7783  012402                     l117:
  7784  012402  0100               	movlb	0	; () banked
  7785  012404  51C2               	movf	Set_Rotation@rotation& (0+255),w,b
  7786                           
  7787                           ; Switch size 1, requested type "space"
  7788                           ; Number of cases is 4, Range of values is 0 to 3
  7789                           ; switch strategies available:
  7790                           ; Name         Instructions Cycles
  7791                           ; simple_byte           13     7 (average)
  7792                           ;	Chosen strategy is simple_byte
  7793  012406  0A00               	xorlw	0	; case 0
  7794  012408  B4D8               	btfsc	status,2,c
  7795  01240A  D7CF               	goto	l118
  7796  01240C  0A01               	xorlw	1	; case 1
  7797  01240E  B4D8               	btfsc	status,2,c
  7798  012410  D7D7               	goto	l120
  7799  012412  0A03               	xorlw	3	; case 2
  7800  012414  B4D8               	btfsc	status,2,c
  7801  012416  D7DF               	goto	l121
  7802  012418  0A01               	xorlw	1	; case 3
  7803  01241A  A4D8               	btfss	status,2,c
  7804  01241C  0012               	return	
  7805  01241E  D7E6               	goto	l122
  7806  012420                     __end_of_Set_Rotation:
  7807                           	opt stack 0
  7808                           tosu	equ	0xFFF
  7809                           tosh	equ	0xFFE
  7810                           tosl	equ	0xFFD
  7811                           pclath	equ	0xFFA
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           indf1	equ	0xFE7
  7822                           postdec1	equ	0xFE5
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           plusw2	equ	0xFDB
  7829                           fsr2h	equ	0xFDA
  7830                           fsr2l	equ	0xFD9
  7831                           status	equ	0xFD8
  7832                           
  7833 ;; *************** function _LCD_Fill *****************
  7834 ;; Defined at:
  7835 ;;		line 287 in file "Library/LCD.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  pColour         2    9[BANK0 ] unsigned short 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  j               1   12[BANK0 ] unsigned char 
  7840 ;;  i               1   11[BANK0 ] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;Total ram usage:        4 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:   10
  7857 ;; This function calls:
  7858 ;;		_LCD_Word_Write
  7859 ;;		_Set_Addr_Window
  7860 ;; This function is called by:
  7861 ;;		_LCD_Init
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text34
  7866  012B9A                     __ptext34:
  7867                           	opt stack 0
  7868  012B9A                     _LCD_Fill:
  7869                           	opt stack 18
  7870                           
  7871                           ;LCD.c: 296: UINT8 i = 0x00;
  7872                           
  7873                           ;incstack = 0
  7874  012B9A  0E00               	movlw	0
  7875  012B9C  0100               	movlb	0	; () banked
  7876  012B9E  6FC7               	movwf	LCD_Fill@i& (0+255),b
  7877                           
  7878                           ;LCD.c: 297: UINT8 j = 0x00;
  7879  012BA0  0E00               	movlw	0
  7880  012BA2  0100               	movlb	0	; () banked
  7881  012BA4  6FC8               	movwf	LCD_Fill@j& (0+255),b
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  7885  012BA6  0E00               	movlw	0
  7886  012BA8  0100               	movlb	0	; () banked
  7887  012BAA  6FC1               	movwf	Set_Addr_Window@ys& (0+255),b
  7888  012BAC  0450               	decf	_w,w,c
  7889  012BAE  0100               	movlb	0	; () banked
  7890  012BB0  6FC2               	movwf	Set_Addr_Window@xe& (0+255),b
  7891  012BB2  044F               	decf	_l,w,c
  7892  012BB4  0100               	movlb	0	; () banked
  7893  012BB6  6FC3               	movwf	Set_Addr_Window@ye& (0+255),b
  7894  012BB8  0E00               	movlw	0
  7895  012BBA  EC80  F08F         	call	_Set_Addr_Window
  7896                           
  7897                           ;LCD.c: 299: for (j = l; j > 0; j--)
  7898  012BBE  C04F  F0C8         	movff	_l,LCD_Fill@j
  7899  012BC2                     l11442:
  7900  012BC2  0100               	movlb	0	; () banked
  7901  012BC4  51C8               	movf	LCD_Fill@j& (0+255),w,b
  7902  012BC6  0100               	movlb	0	; () banked
  7903  012BC8  B4D8               	btfsc	status,2,c
  7904  012BCA  0012               	return	
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;LCD.c: 300: for (i = w; i > 0; i--)
  7908                           
  7909                           ; BSR set to: 0
  7910  012BCC  C050  F0C7         	movff	_w,LCD_Fill@i
  7911  012BD0                     l11446:
  7912                           
  7913                           ; BSR set to: 0
  7914  012BD0  0100               	movlb	0	; () banked
  7915  012BD2  51C7               	movf	LCD_Fill@i& (0+255),w,b
  7916  012BD4  0100               	movlb	0	; () banked
  7917  012BD6  B4D8               	btfsc	status,2,c
  7918  012BD8  D009               	goto	u7290
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;LCD.c: 301: LCD_Word_Write(pColour);
  7922                           
  7923                           ; BSR set to: 0
  7924                           
  7925                           ; BSR set to: 0
  7926  012BDA  C0C5  F0C1         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  7927  012BDE  C0C6  F0C2         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  7928  012BE2  ECE1  F098         	call	_LCD_Word_Write	;wreg free
  7929  012BE6  0100               	movlb	0	; () banked
  7930  012BE8  07C7               	decf	LCD_Fill@i& (0+255),f,b
  7931  012BEA  D7F2               	goto	l11446
  7932  012BEC                     u7290:
  7933                           
  7934                           ; BSR set to: 0
  7935                           
  7936                           ; BSR set to: 0
  7937  012BEC  0100               	movlb	0	; () banked
  7938  012BEE  07C8               	decf	LCD_Fill@j& (0+255),f,b
  7939  012BF0  D7E8               	goto	l11442
  7940  012BF2                     __end_of_LCD_Fill:
  7941                           	opt stack 0
  7942                           tosu	equ	0xFFF
  7943                           tosh	equ	0xFFE
  7944                           tosl	equ	0xFFD
  7945                           pclath	equ	0xFFA
  7946                           tblptru	equ	0xFF8
  7947                           tblptrh	equ	0xFF7
  7948                           tblptrl	equ	0xFF6
  7949                           tablat	equ	0xFF5
  7950                           prodh	equ	0xFF4
  7951                           prodl	equ	0xFF3
  7952                           intcon	equ	0xFF2
  7953                           postinc0	equ	0xFEE
  7954                           wreg	equ	0xFE8
  7955                           indf1	equ	0xFE7
  7956                           postdec1	equ	0xFE5
  7957                           fsr1h	equ	0xFE2
  7958                           fsr1l	equ	0xFE1
  7959                           indf2	equ	0xFDF
  7960                           postinc2	equ	0xFDE
  7961                           postdec2	equ	0xFDD
  7962                           plusw2	equ	0xFDB
  7963                           fsr2h	equ	0xFDA
  7964                           fsr2l	equ	0xFD9
  7965                           status	equ	0xFD8
  7966                           
  7967 ;; *************** function _Set_Addr_Window *****************
  7968 ;; Defined at:
  7969 ;;		line 214 in file "Library/LCD.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  xs              1    wreg     unsigned char 
  7972 ;;  ys              1    5[BANK0 ] unsigned char 
  7973 ;;  xe              1    6[BANK0 ] unsigned char 
  7974 ;;  ye              1    7[BANK0 ] unsigned char 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  xs              1    8[BANK0 ] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      void 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7986 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;Total ram usage:        4 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    9
  7993 ;; This function calls:
  7994 ;;		_LCD_Write
  7995 ;; This function is called by:
  7996 ;;		_LCD_Fill
  7997 ;;		_RAM_Address_Set
  7998 ;;		_LCD_FillRectangle
  7999 ;;		_LCD_DrawPixel
  8000 ;;		_LCD_DrawField
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text35
  8005  011F00                     __ptext35:
  8006                           	opt stack 0
  8007  011F00                     _Set_Addr_Window:
  8008                           	opt stack 18
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;incstack = 0
  8012                           ;Set_Addr_Window@xs stored from wreg
  8013  011F00  0100               	movlb	0	; () banked
  8014  011F02  6FC4               	movwf	Set_Addr_Window@xs& (0+255),b
  8015                           
  8016                           ;LCD.c: 216: ys+=2;
  8017  011F04  0E02               	movlw	2
  8018  011F06  0100               	movlb	0	; () banked
  8019  011F08  27C1               	addwf	Set_Addr_Window@ys& (0+255),f,b
  8020                           
  8021                           ;LCD.c: 217: ye+=2;
  8022  011F0A  0E02               	movlw	2
  8023  011F0C  0100               	movlb	0	; () banked
  8024  011F0E  27C3               	addwf	Set_Addr_Window@ye& (0+255),f,b
  8025                           
  8026                           ;LCD.c: 218: xs+=3;
  8027  011F10  0E03               	movlw	3
  8028  011F12  0100               	movlb	0	; () banked
  8029  011F14  27C4               	addwf	Set_Addr_Window@xs& (0+255),f,b
  8030                           
  8031                           ;LCD.c: 219: xe+=3;
  8032  011F16  0E03               	movlw	3
  8033  011F18  0100               	movlb	0	; () banked
  8034  011F1A  27C2               	addwf	Set_Addr_Window@xe& (0+255),f,b
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
  8038  011F1C  0E00               	movlw	0
  8039  011F1E  0100               	movlb	0	; () banked
  8040  011F20  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8041  011F22  0E2A               	movlw	42
  8042  011F24  EC8F  F098         	call	_LCD_Write
  8043                           
  8044                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
  8045  011F28  0E01               	movlw	1
  8046  011F2A  0100               	movlb	0	; () banked
  8047  011F2C  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8048  011F2E  0E00               	movlw	0
  8049  011F30  EC8F  F098         	call	_LCD_Write
  8050                           
  8051                           ;LCD.c: 223: LCD_Write(xs, 0x1);
  8052  011F34  0E01               	movlw	1
  8053  011F36  0100               	movlb	0	; () banked
  8054  011F38  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8055  011F3A  0100               	movlb	0	; () banked
  8056  011F3C  51C4               	movf	Set_Addr_Window@xs& (0+255),w,b
  8057  011F3E  EC8F  F098         	call	_LCD_Write
  8058                           
  8059                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
  8060  011F42  0E01               	movlw	1
  8061  011F44  0100               	movlb	0	; () banked
  8062  011F46  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8063  011F48  0E00               	movlw	0
  8064  011F4A  EC8F  F098         	call	_LCD_Write
  8065                           
  8066                           ;LCD.c: 225: LCD_Write(xe, 0x1);
  8067  011F4E  0E01               	movlw	1
  8068  011F50  0100               	movlb	0	; () banked
  8069  011F52  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8070  011F54  0100               	movlb	0	; () banked
  8071  011F56  51C2               	movf	Set_Addr_Window@xe& (0+255),w,b
  8072  011F58  EC8F  F098         	call	_LCD_Write
  8073                           
  8074                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
  8075  011F5C  0E00               	movlw	0
  8076  011F5E  0100               	movlb	0	; () banked
  8077  011F60  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8078  011F62  0E2B               	movlw	43
  8079  011F64  EC8F  F098         	call	_LCD_Write
  8080                           
  8081                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
  8082  011F68  0E01               	movlw	1
  8083  011F6A  0100               	movlb	0	; () banked
  8084  011F6C  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8085  011F6E  0E00               	movlw	0
  8086  011F70  EC8F  F098         	call	_LCD_Write
  8087                           
  8088                           ;LCD.c: 228: LCD_Write(ys, 0x1);
  8089  011F74  0E01               	movlw	1
  8090  011F76  0100               	movlb	0	; () banked
  8091  011F78  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8092  011F7A  0100               	movlb	0	; () banked
  8093  011F7C  51C1               	movf	Set_Addr_Window@ys& (0+255),w,b
  8094  011F7E  EC8F  F098         	call	_LCD_Write
  8095                           
  8096                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
  8097  011F82  0E01               	movlw	1
  8098  011F84  0100               	movlb	0	; () banked
  8099  011F86  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8100  011F88  0E00               	movlw	0
  8101  011F8A  EC8F  F098         	call	_LCD_Write
  8102                           
  8103                           ;LCD.c: 230: LCD_Write(ye, 0x1);
  8104  011F8E  0E01               	movlw	1
  8105  011F90  0100               	movlb	0	; () banked
  8106  011F92  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8107  011F94  0100               	movlb	0	; () banked
  8108  011F96  51C3               	movf	Set_Addr_Window@ye& (0+255),w,b
  8109  011F98  EC8F  F098         	call	_LCD_Write
  8110                           
  8111                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
  8112  011F9C  0E00               	movlw	0
  8113  011F9E  0100               	movlb	0	; () banked
  8114  011FA0  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8115  011FA2  0E2C               	movlw	44
  8116  011FA4  EC8F  F098         	call	_LCD_Write
  8117  011FA8  0012               	return		;funcret
  8118  011FAA                     __end_of_Set_Addr_Window:
  8119                           	opt stack 0
  8120                           tosu	equ	0xFFF
  8121                           tosh	equ	0xFFE
  8122                           tosl	equ	0xFFD
  8123                           pclath	equ	0xFFA
  8124                           tblptru	equ	0xFF8
  8125                           tblptrh	equ	0xFF7
  8126                           tblptrl	equ	0xFF6
  8127                           tablat	equ	0xFF5
  8128                           prodh	equ	0xFF4
  8129                           prodl	equ	0xFF3
  8130                           intcon	equ	0xFF2
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           indf1	equ	0xFE7
  8134                           postdec1	equ	0xFE5
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           plusw2	equ	0xFDB
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function _LCD_Word_Write *****************
  8146 ;; Defined at:
  8147 ;;		line 198 in file "Library/LCD.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  value           2    5[BANK0 ] unsigned short 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      void 
  8154 ;; Registers used:
  8155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8161 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;Total ram usage:        2 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    9
  8168 ;; This function calls:
  8169 ;;		_LCD_Write
  8170 ;; This function is called by:
  8171 ;;		_LCD_Fill
  8172 ;;		_LCD_FillRectangle
  8173 ;;		_LCD_DrawPixel
  8174 ;;		_LCD_DrawField
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	text36
  8179  0131C2                     __ptext36:
  8180                           	opt stack 0
  8181  0131C2                     _LCD_Word_Write:
  8182                           	opt stack 18
  8183                           
  8184                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
  8185                           
  8186                           ;incstack = 0
  8187  0131C2  0E01               	movlw	1
  8188  0131C4  0100               	movlb	0	; () banked
  8189  0131C6  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8190  0131C8  0100               	movlb	0	; () banked
  8191  0131CA  51C2               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
  8192  0131CC  EC8F  F098         	call	_LCD_Write
  8193                           
  8194                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
  8195  0131D0  0E01               	movlw	1
  8196  0131D2  0100               	movlb	0	; () banked
  8197  0131D4  6FBF               	movwf	LCD_Write@mode& (0+255),b
  8198  0131D6  0100               	movlb	0	; () banked
  8199  0131D8  51C1               	movf	LCD_Word_Write@value& (0+255),w,b
  8200  0131DA  EC8F  F098         	call	_LCD_Write
  8201  0131DE  0012               	return		;funcret
  8202  0131E0                     __end_of_LCD_Word_Write:
  8203                           	opt stack 0
  8204                           tosu	equ	0xFFF
  8205                           tosh	equ	0xFFE
  8206                           tosl	equ	0xFFD
  8207                           pclath	equ	0xFFA
  8208                           tblptru	equ	0xFF8
  8209                           tblptrh	equ	0xFF7
  8210                           tblptrl	equ	0xFF6
  8211                           tablat	equ	0xFF5
  8212                           prodh	equ	0xFF4
  8213                           prodl	equ	0xFF3
  8214                           intcon	equ	0xFF2
  8215                           postinc0	equ	0xFEE
  8216                           wreg	equ	0xFE8
  8217                           indf1	equ	0xFE7
  8218                           postdec1	equ	0xFE5
  8219                           fsr1h	equ	0xFE2
  8220                           fsr1l	equ	0xFE1
  8221                           indf2	equ	0xFDF
  8222                           postinc2	equ	0xFDE
  8223                           postdec2	equ	0xFDD
  8224                           plusw2	equ	0xFDB
  8225                           fsr2h	equ	0xFDA
  8226                           fsr2l	equ	0xFD9
  8227                           status	equ	0xFD8
  8228                           
  8229 ;; *************** function _LCD_Write *****************
  8230 ;; Defined at:
  8231 ;;		line 67 in file "Library/LCD.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  value           1    wreg     unsigned char 
  8234 ;;  mode            1    3[BANK0 ] enum E6761
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;  value           1    4[BANK0 ] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  1    wreg      void 
  8239 ;; Registers used:
  8240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8246 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;Total ram usage:        2 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    8
  8253 ;; This function calls:
  8254 ;;		_Mode_Set
  8255 ;;		_SPI_Send
  8256 ;; This function is called by:
  8257 ;;		_LCD_Init
  8258 ;;		_LCD_Word_Write
  8259 ;;		_Set_Addr_Window
  8260 ;;		_Set_Rotation
  8261 ;;		_LCD_WriteCMD
  8262 ;;		_LCD_WriteData
  8263 ;;		_LCD_Data_Write
  8264 ;;		_LCD_Data_Write_4k
  8265 ;;		_Invert_Display
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           	psect	text37
  8270  01311E                     __ptext37:
  8271                           	opt stack 0
  8272  01311E                     _LCD_Write:
  8273                           	opt stack 19
  8274                           
  8275                           ;incstack = 0
  8276                           ;LCD_Write@value stored from wreg
  8277  01311E  0100               	movlb	0	; () banked
  8278  013120  6FC0               	movwf	LCD_Write@value& (0+255),b
  8279                           
  8280                           ;LCD.c: 89: Mode_Set(mode);
  8281  013122  0100               	movlb	0	; () banked
  8282  013124  51BF               	movf	LCD_Write@mode& (0+255),w,b
  8283  013126  EC7C  F099         	call	_Mode_Set
  8284                           
  8285                           ;LCD.c: 90: SPI_Send(&SPI2, value);
  8286  01312A  0E7F               	movlw	low _SPI2
  8287  01312C  0100               	movlb	0	; () banked
  8288  01312E  6FBC               	movwf	SPI_Send@pInput& (0+255),b
  8289  013130  0E01               	movlw	high _SPI2
  8290  013132  0100               	movlb	0	; () banked
  8291  013134  6FBD               	movwf	(SPI_Send@pInput+1)& (0+255),b
  8292  013136  C0C0  F0BE         	movff	LCD_Write@value,SPI_Send@pData
  8293  01313A  EC3C  F094         	call	_SPI_Send	;wreg free
  8294  01313E  0012               	return		;funcret
  8295  013140                     __end_of_LCD_Write:
  8296                           	opt stack 0
  8297                           tosu	equ	0xFFF
  8298                           tosh	equ	0xFFE
  8299                           tosl	equ	0xFFD
  8300                           pclath	equ	0xFFA
  8301                           tblptru	equ	0xFF8
  8302                           tblptrh	equ	0xFF7
  8303                           tblptrl	equ	0xFF6
  8304                           tablat	equ	0xFF5
  8305                           prodh	equ	0xFF4
  8306                           prodl	equ	0xFF3
  8307                           intcon	equ	0xFF2
  8308                           postinc0	equ	0xFEE
  8309                           wreg	equ	0xFE8
  8310                           indf1	equ	0xFE7
  8311                           postdec1	equ	0xFE5
  8312                           fsr1h	equ	0xFE2
  8313                           fsr1l	equ	0xFE1
  8314                           indf2	equ	0xFDF
  8315                           postinc2	equ	0xFDE
  8316                           postdec2	equ	0xFDD
  8317                           plusw2	equ	0xFDB
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _SPI_Send *****************
  8323 ;; Defined at:
  8324 ;;		line 226 in file "Library/SPI.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;  pInput          2    0[BANK0 ] PTR struct SPI
  8327 ;;		 -> SPI1(11), SPI2(11), 
  8328 ;;  pData           1    2[BANK0 ] unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      unsigned char 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:        3 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    7
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		_LCD_Write
  8351 ;;		_OutSeg
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text38
  8356  012878                     __ptext38:
  8357                           	opt stack 0
  8358  012878                     _SPI_Send:
  8359                           	opt stack 19
  8360                           
  8361                           ;SPI.c: 253: switch (pInput->mChannel)
  8362                           
  8363                           ;incstack = 0
  8364  012878  D026               	goto	l678
  8365  01287A                     
  8366                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
  8367  01287A  C0A2  FFD9         	movff	_PortC+4,fsr2l
  8368  01287E  C0A3  FFDA         	movff	_PortC+5,fsr2h
  8369  012882  0100               	movlb	0	; () banked
  8370  012884  94DF               	bcf	indf2,2,c
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;SPI.c: 257: SSP1BUF = pData;
  8374  012886  C0BE  FFC9         	movff	SPI_Send@pData,4041	;volatile
  8375  01288A                     
  8376                           ; BSR set to: 0
  8377  01288A  A0C7               	btfss	4039,0,c	;volatile
  8378  01288C  D7FE               	goto	l681
  8379                           
  8380                           ;SPI.c: 259: pData = SSP1BUF;
  8381  01288E  CFC9 F0BE          	movff	4041,SPI_Send@pData	;volatile
  8382                           
  8383                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
  8384  012892  C0A2  FFD9         	movff	_PortC+4,fsr2l
  8385  012896  C0A3  FFDA         	movff	_PortC+5,fsr2h
  8386  01289A  0100               	movlb	0	; () banked
  8387  01289C  84DF               	bsf	indf2,2,c
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;SPI.c: 261: return pData;
  8391                           ;	Return value of _SPI_Send is never used
  8392  01289E  0012               	return	
  8393  0128A0                     
  8394                           ; BSR set to: 0
  8395                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
  8396                           
  8397                           ; BSR set to: 0
  8398  0128A0  C098  FFD9         	movff	_PortD+4,fsr2l
  8399  0128A4  C099  FFDA         	movff	_PortD+5,fsr2h
  8400  0128A8  0100               	movlb	0	; () banked
  8401  0128AA  9EDF               	bcf	indf2,7,c
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;SPI.c: 264: SSP2BUF = pData;
  8405  0128AC  C0BE  FF6F         	movff	SPI_Send@pData,3951	;volatile
  8406  0128B0                     
  8407                           ; BSR set to: 0
  8408  0128B0  A06D               	btfss	3949,0,c	;volatile
  8409  0128B2  D7FE               	goto	l686
  8410                           
  8411                           ;SPI.c: 266: pData = SSP2BUF;
  8412  0128B4  CF6F F0BE          	movff	3951,SPI_Send@pData	;volatile
  8413                           
  8414                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
  8415  0128B8  C098  FFD9         	movff	_PortD+4,fsr2l
  8416  0128BC  C099  FFDA         	movff	_PortD+5,fsr2h
  8417  0128C0  0100               	movlb	0	; () banked
  8418  0128C2  8EDF               	bsf	indf2,7,c
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;SPI.c: 269: };
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;SPI.c: 268: return pData;
  8425                           ;	Return value of _SPI_Send is never used
  8426  0128C4  0012               	return	
  8427  0128C6                     l678:
  8428                           
  8429                           ; BSR set to: 0
  8430  0128C6  0100               	movlb	0	; () banked
  8431  0128C8  EE20 F002          	lfsr	2,2
  8432  0128CC  51BC               	movf	SPI_Send@pInput& (0+255),w,b
  8433  0128CE  26D9               	addwf	fsr2l,f,c
  8434  0128D0  51BD               	movf	(SPI_Send@pInput+1)& (0+255),w,b
  8435  0128D2  22DA               	addwfc	fsr2h,f,c
  8436  0128D4  50DF               	movf	indf2,w,c
  8437                           
  8438                           ; Switch size 1, requested type "space"
  8439                           ; Number of cases is 2, Range of values is 0 to 1
  8440                           ; switch strategies available:
  8441                           ; Name         Instructions Cycles
  8442                           ; simple_byte            7     4 (average)
  8443                           ;	Chosen strategy is simple_byte
  8444  0128D6  0A00               	xorlw	0	; case 0
  8445  0128D8  B4D8               	btfsc	status,2,c
  8446  0128DA  D7CF               	goto	l679
  8447  0128DC  0A01               	xorlw	1	; case 1
  8448  0128DE  A4D8               	btfss	status,2,c
  8449  0128E0  0012               	return	
  8450  0128E2  D7DE               	goto	l684
  8451  0128E4                     __end_of_SPI_Send:
  8452                           	opt stack 0
  8453                           tosu	equ	0xFFF
  8454                           tosh	equ	0xFFE
  8455                           tosl	equ	0xFFD
  8456                           pclath	equ	0xFFA
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon	equ	0xFF2
  8464                           postinc0	equ	0xFEE
  8465                           wreg	equ	0xFE8
  8466                           indf1	equ	0xFE7
  8467                           postdec1	equ	0xFE5
  8468                           fsr1h	equ	0xFE2
  8469                           fsr1l	equ	0xFE1
  8470                           indf2	equ	0xFDF
  8471                           postinc2	equ	0xFDE
  8472                           postdec2	equ	0xFDD
  8473                           plusw2	equ	0xFDB
  8474                           fsr2h	equ	0xFDA
  8475                           fsr2l	equ	0xFD9
  8476                           status	equ	0xFD8
  8477                           
  8478 ;; *************** function _Mode_Set *****************
  8479 ;; Defined at:
  8480 ;;		line 40 in file "Library/LCD.c"
  8481 ;; Parameters:    Size  Location     Type
  8482 ;;  pMode           1    wreg     enum E6761
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  pMode           1    0[BANK0 ] enum E6761
  8485 ;; Return value:  Size  Location     Type
  8486 ;;                  1    wreg      void 
  8487 ;; Registers used:
  8488 ;;		wreg
  8489 ;; Tracked objects:
  8490 ;;		On entry : 0/0
  8491 ;;		On exit  : 0/0
  8492 ;;		Unchanged: 0/0
  8493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;Total ram usage:        1 bytes
  8499 ;; Hardware stack levels used:    1
  8500 ;; Hardware stack levels required when called:    7
  8501 ;; This function calls:
  8502 ;;		Nothing
  8503 ;; This function is called by:
  8504 ;;		_LCD_Write
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           	psect	text39
  8509  0132F8                     __ptext39:
  8510                           	opt stack 0
  8511  0132F8                     _Mode_Set:
  8512                           	opt stack 19
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;incstack = 0
  8516                           ;Mode_Set@pMode stored from wreg
  8517  0132F8  0100               	movlb	0	; () banked
  8518  0132FA  6FBC               	movwf	Mode_Set@pMode& (0+255),b
  8519                           
  8520                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
  8521  0132FC  0100               	movlb	0	; () banked
  8522  0132FE  B1BC               	btfsc	Mode_Set@pMode& (0+255),0,b
  8523  013300  D002               	bra	u6745
  8524  013302  9E85               	bcf	3973,7,c	;volatile
  8525  013304  D001               	bra	u6746
  8526  013306                     u6745:
  8527  013306  8E85               	bsf	3973,7,c	;volatile
  8528  013308                     u6746:
  8529  013308  0012               	return		;funcret
  8530  01330A                     __end_of_Mode_Set:
  8531                           	opt stack 0
  8532                           tosu	equ	0xFFF
  8533                           tosh	equ	0xFFE
  8534                           tosl	equ	0xFFD
  8535                           pclath	equ	0xFFA
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           intcon	equ	0xFF2
  8543                           postinc0	equ	0xFEE
  8544                           wreg	equ	0xFE8
  8545                           indf1	equ	0xFE7
  8546                           postdec1	equ	0xFE5
  8547                           fsr1h	equ	0xFE2
  8548                           fsr1l	equ	0xFE1
  8549                           indf2	equ	0xFDF
  8550                           postinc2	equ	0xFDE
  8551                           postdec2	equ	0xFDD
  8552                           plusw2	equ	0xFDB
  8553                           fsr2h	equ	0xFDA
  8554                           fsr2l	equ	0xFD9
  8555                           status	equ	0xFD8
  8556                           
  8557 ;; *************** function _Configure_GPIOs *****************
  8558 ;; Defined at:
  8559 ;;		line 46 in file "Library/LCD.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;		None
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;		None
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  1    wreg      void 
  8566 ;; Registers used:
  8567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;Total ram usage:        0 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:   14
  8580 ;; This function calls:
  8581 ;;		_LCD_Reset
  8582 ;;		_Port_SetPinType
  8583 ;;		_SPI_Init
  8584 ;;		_SPI_MaxSpeed
  8585 ;; This function is called by:
  8586 ;;		_LCD_Init
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text40
  8591  012808                     __ptext40:
  8592                           	opt stack 0
  8593  012808                     _Configure_GPIOs:
  8594                           	opt stack 14
  8595                           
  8596                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  8597                           
  8598                           ;incstack = 0
  8599  012808  0EBC               	movlw	low _PortF
  8600  01280A  0100               	movlb	0	; () banked
  8601  01280C  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  8602  01280E  0E01               	movlw	high _PortF
  8603  012810  0100               	movlb	0	; () banked
  8604  012812  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8605  012814  0E07               	movlw	7
  8606  012816  0100               	movlb	0	; () banked
  8607  012818  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  8608  01281A  0E03               	movlw	3
  8609  01281C  0100               	movlb	0	; () banked
  8610  01281E  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  8611  012820  EC29  F087         	call	_Port_SetPinType	;wreg free
  8612                           
  8613                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  8614  012824  0EBC               	movlw	low _PortF
  8615  012826  0100               	movlb	0	; () banked
  8616  012828  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
  8617  01282A  0E01               	movlw	high _PortF
  8618  01282C  0100               	movlb	0	; () banked
  8619  01282E  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8620  012830  0E06               	movlw	6
  8621  012832  0100               	movlb	0	; () banked
  8622  012834  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
  8623  012836  0E03               	movlw	3
  8624  012838  0100               	movlb	0	; () banked
  8625  01283A  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
  8626  01283C  EC29  F087         	call	_Port_SetPinType	;wreg free
  8627                           
  8628                           ;LCD.c: 55: LCD_Reset();
  8629  012840  EC4A  F096         	call	_LCD_Reset	;wreg free
  8630                           
  8631                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  8632  012844  0EC0               	movlw	192
  8633  012846  0100               	movlb	0	; () banked
  8634  012848  6FE9               	movwf	SPI_Init@pClock& (0+255),b
  8635  01284A  0EC6               	movlw	198
  8636  01284C  6FEA               	movwf	(SPI_Init@pClock+1)& (0+255),b
  8637  01284E  0E2D               	movlw	45
  8638  012850  6FEB               	movwf	(SPI_Init@pClock+2)& (0+255),b
  8639  012852  0E00               	movlw	0
  8640  012854  6FEC               	movwf	(SPI_Init@pClock+3)& (0+255),b
  8641  012856  0E01               	movlw	1
  8642  012858  0100               	movlb	0	; () banked
  8643  01285A  6FED               	movwf	SPI_Init@pChannel& (0+255),b
  8644  01285C  0E01               	movlw	1
  8645  01285E  0100               	movlb	0	; () banked
  8646  012860  6FEE               	movwf	SPI_Init@pMode& (0+255),b
  8647  012862  EC00  F080         	call	_SPI_Init	;wreg free
  8648                           
  8649                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  8650  012866  0E7F               	movlw	low _SPI2
  8651  012868  0100               	movlb	0	; () banked
  8652  01286A  6FCB               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  8653  01286C  0E01               	movlw	high _SPI2
  8654  01286E  0100               	movlb	0	; () banked
  8655  012870  6FCC               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  8656  012872  EC90  F093         	call	_SPI_MaxSpeed	;wreg free
  8657  012876  0012               	return		;funcret
  8658  012878                     __end_of_Configure_GPIOs:
  8659                           	opt stack 0
  8660                           tosu	equ	0xFFF
  8661                           tosh	equ	0xFFE
  8662                           tosl	equ	0xFFD
  8663                           pclath	equ	0xFFA
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           postinc0	equ	0xFEE
  8672                           wreg	equ	0xFE8
  8673                           indf1	equ	0xFE7
  8674                           postdec1	equ	0xFE5
  8675                           fsr1h	equ	0xFE2
  8676                           fsr1l	equ	0xFE1
  8677                           indf2	equ	0xFDF
  8678                           postinc2	equ	0xFDE
  8679                           postdec2	equ	0xFDD
  8680                           plusw2	equ	0xFDB
  8681                           fsr2h	equ	0xFDA
  8682                           fsr2l	equ	0xFD9
  8683                           status	equ	0xFD8
  8684                           
  8685 ;; *************** function _SPI_MaxSpeed *****************
  8686 ;; Defined at:
  8687 ;;		line 201 in file "Library/SPI.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  8690 ;;		 -> SPI2(11), 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      void 
  8695 ;; Registers used:
  8696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8702 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;Total ram usage:        2 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    9
  8709 ;; This function calls:
  8710 ;;		_Byte_SetBit
  8711 ;;		_Byte_SetQuad
  8712 ;; This function is called by:
  8713 ;;		_Configure_GPIOs
  8714 ;; This function uses a non-reentrant model
  8715 ;;
  8716                           
  8717                           	psect	text41
  8718  012720                     __ptext41:
  8719                           	opt stack 0
  8720  012720                     _SPI_MaxSpeed:
  8721                           	opt stack 18
  8722                           
  8723                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  8724                           
  8725                           ;incstack = 0
  8726  012720  0100               	movlb	0	; () banked
  8727  012722  EE20 F006          	lfsr	2,6
  8728  012726  51CB               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  8729  012728  26D9               	addwf	fsr2l,f,c
  8730  01272A  51CC               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  8731  01272C  22DA               	addwfc	fsr2h,f,c
  8732  01272E  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
  8733  012732  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
  8734  012736  0E05               	movlw	5
  8735  012738  0100               	movlb	0	; () banked
  8736  01273A  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
  8737  01273C  0E00               	movlw	0
  8738  01273E  0100               	movlb	0	; () banked
  8739  012740  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
  8740  012742  EC11  F095         	call	_Byte_SetBit	;wreg free
  8741                           
  8742                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  8743  012746  0100               	movlb	0	; () banked
  8744  012748  EE20 F006          	lfsr	2,6
  8745  01274C  51CB               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  8746  01274E  26D9               	addwf	fsr2l,f,c
  8747  012750  51CC               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  8748  012752  22DA               	addwfc	fsr2h,f,c
  8749  012754  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
  8750  012758  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
  8751  01275C  0E00               	movlw	0
  8752  01275E  0100               	movlb	0	; () banked
  8753  012760  6FC9               	movwf	Byte_SetQuad@pQuad& (0+255),b
  8754  012762  0E00               	movlw	0
  8755  012764  0100               	movlb	0	; () banked
  8756  012766  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
  8757  012768  ECB1  F098         	call	_Byte_SetQuad	;wreg free
  8758                           
  8759                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  8760  01276C  0100               	movlb	0	; () banked
  8761  01276E  EE20 F006          	lfsr	2,6
  8762  012772  51CB               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  8763  012774  26D9               	addwf	fsr2l,f,c
  8764  012776  51CC               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  8765  012778  22DA               	addwfc	fsr2h,f,c
  8766  01277A  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
  8767  01277E  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
  8768  012782  0E05               	movlw	5
  8769  012784  0100               	movlb	0	; () banked
  8770  012786  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
  8771  012788  0E01               	movlw	1
  8772  01278A  0100               	movlb	0	; () banked
  8773  01278C  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
  8774  01278E  EC11  F095         	call	_Byte_SetBit	;wreg free
  8775  012792  0012               	return		;funcret
  8776  012794                     __end_of_SPI_MaxSpeed:
  8777                           	opt stack 0
  8778                           tosu	equ	0xFFF
  8779                           tosh	equ	0xFFE
  8780                           tosl	equ	0xFFD
  8781                           pclath	equ	0xFFA
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon	equ	0xFF2
  8789                           postinc0	equ	0xFEE
  8790                           wreg	equ	0xFE8
  8791                           indf1	equ	0xFE7
  8792                           postdec1	equ	0xFE5
  8793                           fsr1h	equ	0xFE2
  8794                           fsr1l	equ	0xFE1
  8795                           indf2	equ	0xFDF
  8796                           postinc2	equ	0xFDE
  8797                           postdec2	equ	0xFDD
  8798                           plusw2	equ	0xFDB
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _LCD_Reset *****************
  8804 ;; Defined at:
  8805 ;;		line 95 in file "Library/LCD.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;Total ram usage:        0 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:   13
  8826 ;; This function calls:
  8827 ;;		_LED_Toggle
  8828 ;;		_Reset_High
  8829 ;;		_Reset_Low
  8830 ;;		_delay_ms
  8831 ;; This function is called by:
  8832 ;;		_Configure_GPIOs
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           	psect	text42
  8837  012C94                     __ptext42:
  8838                           	opt stack 0
  8839  012C94                     _LCD_Reset:
  8840                           	opt stack 14
  8841                           
  8842                           ;LCD.c: 97: Reset_High();
  8843                           
  8844                           ;incstack = 0
  8845  012C94  ECFF  F098         	call	_Reset_High	;wreg free
  8846                           
  8847                           ;LCD.c: 98: LED_Toggle(eLED2);
  8848  012C98  0E01               	movlw	1
  8849  012C9A  ECBC  F096         	call	_LED_Toggle
  8850                           
  8851                           ;LCD.c: 99: delay_ms(0x80);
  8852  012C9E  0E00               	movlw	0
  8853  012CA0  0100               	movlb	0	; () banked
  8854  012CA2  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  8855  012CA4  0E80               	movlw	128
  8856  012CA6  6FBC               	movwf	delay_ms@ms& (0+255),b
  8857  012CA8  ECA7  F094         	call	_delay_ms	;wreg free
  8858                           
  8859                           ;LCD.c: 100: LED_Toggle(eLED2);
  8860  012CAC  0E01               	movlw	1
  8861  012CAE  ECBC  F096         	call	_LED_Toggle
  8862                           
  8863                           ;LCD.c: 101: Reset_Low();
  8864  012CB2  ECF0  F098         	call	_Reset_Low	;wreg free
  8865                           
  8866                           ;LCD.c: 102: delay_ms(0x80);
  8867  012CB6  0E00               	movlw	0
  8868  012CB8  0100               	movlb	0	; () banked
  8869  012CBA  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  8870  012CBC  0E80               	movlw	128
  8871  012CBE  6FBC               	movwf	delay_ms@ms& (0+255),b
  8872  012CC0  ECA7  F094         	call	_delay_ms	;wreg free
  8873                           
  8874                           ;LCD.c: 103: LED_Toggle(eLED2);
  8875  012CC4  0E01               	movlw	1
  8876  012CC6  ECBC  F096         	call	_LED_Toggle
  8877                           
  8878                           ;LCD.c: 104: Reset_High();
  8879  012CCA  ECFF  F098         	call	_Reset_High	;wreg free
  8880                           
  8881                           ;LCD.c: 105: delay_ms(0x80);
  8882  012CCE  0E00               	movlw	0
  8883  012CD0  0100               	movlb	0	; () banked
  8884  012CD2  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  8885  012CD4  0E80               	movlw	128
  8886  012CD6  6FBC               	movwf	delay_ms@ms& (0+255),b
  8887  012CD8  ECA7  F094         	call	_delay_ms	;wreg free
  8888                           
  8889                           ;LCD.c: 106: LED_Toggle(eLED2);
  8890  012CDC  0E01               	movlw	1
  8891  012CDE  ECBC  F096         	call	_LED_Toggle
  8892  012CE2  0012               	return		;funcret
  8893  012CE4                     __end_of_LCD_Reset:
  8894                           	opt stack 0
  8895                           tosu	equ	0xFFF
  8896                           tosh	equ	0xFFE
  8897                           tosl	equ	0xFFD
  8898                           pclath	equ	0xFFA
  8899                           tblptru	equ	0xFF8
  8900                           tblptrh	equ	0xFF7
  8901                           tblptrl	equ	0xFF6
  8902                           tablat	equ	0xFF5
  8903                           prodh	equ	0xFF4
  8904                           prodl	equ	0xFF3
  8905                           intcon	equ	0xFF2
  8906                           postinc0	equ	0xFEE
  8907                           wreg	equ	0xFE8
  8908                           indf1	equ	0xFE7
  8909                           postdec1	equ	0xFE5
  8910                           fsr1h	equ	0xFE2
  8911                           fsr1l	equ	0xFE1
  8912                           indf2	equ	0xFDF
  8913                           postinc2	equ	0xFDE
  8914                           postdec2	equ	0xFDD
  8915                           plusw2	equ	0xFDB
  8916                           fsr2h	equ	0xFDA
  8917                           fsr2l	equ	0xFD9
  8918                           status	equ	0xFD8
  8919                           
  8920 ;; *************** function _delay_ms *****************
  8921 ;; Defined at:
  8922 ;;		line 240 in file "Library/Types.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;  ms              2    0[BANK0 ] unsigned short 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  u               4    2[BANK0 ] volatile unsigned long 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, status,2, status,0
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:        6 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    7
  8943 ;; This function calls:
  8944 ;;		Nothing
  8945 ;; This function is called by:
  8946 ;;		_LCD_Reset
  8947 ;;		_LCD_Init
  8948 ;;		_MXK_Init
  8949 ;;		_init
  8950 ;;		_rotateCW
  8951 ;;		_rotateCCW
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           	psect	text43
  8956  01294E                     __ptext43:
  8957                           	opt stack 0
  8958  01294E                     _delay_ms:
  8959                           	opt stack 22
  8960                           
  8961                           ;Types.c: 242: volatile unsigned long u;
  8962                           ;Types.c: 243: while (ms--)
  8963                           
  8964                           ;incstack = 0
  8965  01294E  D01F               	goto	u6860
  8966  012950                     l10846:
  8967                           
  8968                           ;Types.c: 244: {
  8969                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
  8970  012950  0E00               	movlw	0
  8971  012952  0100               	movlb	0	; () banked
  8972  012954  6FBE               	movwf	delay_ms@u& (0+255),b	;volatile
  8973  012956  0E00               	movlw	0
  8974  012958  6FBF               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  8975  01295A  0E00               	movlw	0
  8976  01295C  6FC0               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  8977  01295E  0E00               	movlw	0
  8978  012960  6FC1               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  8979  012962                     l10848:
  8980                           
  8981                           ; BSR set to: 0
  8982  012962  0100               	movlb	0	; () banked
  8983  012964  51C1               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
  8984  012966  0100               	movlb	0	; () banked
  8985  012968  11C0               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
  8986  01296A  E111               	bnz	l10854
  8987  01296C  0EB0               	movlw	176
  8988  01296E  0100               	movlb	0	; () banked
  8989  012970  5DBE               	subwf	delay_ms@u& (0+255),w,b	;volatile
  8990  012972  0E04               	movlw	4
  8991  012974  0100               	movlb	0	; () banked
  8992  012976  59BF               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
  8993  012978  B0D8               	btfsc	status,0,c
  8994  01297A  D009               	goto	u6860
  8995                           
  8996                           ; BSR set to: 0
  8997                           
  8998                           ; BSR set to: 0
  8999  01297C  F000               	nop		; ;# 
  9000  01297E  0E01               	movlw	1
  9001  012980  0100               	movlb	0	; () banked
  9002  012982  27BE               	addwf	delay_ms@u& (0+255),f,b	;volatile
  9003  012984  0E00               	movlw	0
  9004  012986  23BF               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
  9005  012988  23C0               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
  9006  01298A  23C1               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
  9007  01298C  D7EA               	goto	l10848
  9008  01298E                     u6860:
  9009  01298E                     l10854:
  9010  01298E  0100               	movlb	0	; () banked
  9011  012990  07BC               	decf	delay_ms@ms& (0+255),f,b
  9012  012992  A0D8               	btfss	status,0,c
  9013  012994  07BD               	decf	(delay_ms@ms+1)& (0+255),f,b
  9014  012996  0100               	movlb	0	; () banked
  9015  012998  29BC               	incf	delay_ms@ms& (0+255),w,b
  9016  01299A  E1DA               	bnz	l10846
  9017  01299C  0100               	movlb	0	; () banked
  9018  01299E  29BD               	incf	(delay_ms@ms+1)& (0+255),w,b
  9019  0129A0  A4D8               	btfss	status,2,c
  9020  0129A2  D7D6               	goto	l824
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;Types.c: 251: }
  9024                           ;Types.c: 252: }
  9025                           ;Types.c: 253: u = 0x8008;
  9026                           
  9027                           ; BSR set to: 0
  9028  0129A4  0E08               	movlw	8
  9029  0129A6  0100               	movlb	0	; () banked
  9030  0129A8  6FBE               	movwf	delay_ms@u& (0+255),b	;volatile
  9031  0129AA  0E80               	movlw	128
  9032  0129AC  6FBF               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  9033  0129AE  0E00               	movlw	0
  9034  0129B0  6FC0               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  9035  0129B2  0E00               	movlw	0
  9036  0129B4  6FC1               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  9037                           
  9038                           ; BSR set to: 0
  9039  0129B6  0012               	return		;funcret
  9040  0129B8                     __end_of_delay_ms:
  9041                           	opt stack 0
  9042                           tosu	equ	0xFFF
  9043                           tosh	equ	0xFFE
  9044                           tosl	equ	0xFFD
  9045                           pclath	equ	0xFFA
  9046                           tblptru	equ	0xFF8
  9047                           tblptrh	equ	0xFF7
  9048                           tblptrl	equ	0xFF6
  9049                           tablat	equ	0xFF5
  9050                           prodh	equ	0xFF4
  9051                           prodl	equ	0xFF3
  9052                           intcon	equ	0xFF2
  9053                           postinc0	equ	0xFEE
  9054                           wreg	equ	0xFE8
  9055                           indf1	equ	0xFE7
  9056                           postdec1	equ	0xFE5
  9057                           fsr1h	equ	0xFE2
  9058                           fsr1l	equ	0xFE1
  9059                           indf2	equ	0xFDF
  9060                           postinc2	equ	0xFDE
  9061                           postdec2	equ	0xFDD
  9062                           plusw2	equ	0xFDB
  9063                           fsr2h	equ	0xFDA
  9064                           fsr2l	equ	0xFD9
  9065                           status	equ	0xFD8
  9066                           
  9067 ;; *************** function _Reset_Low *****************
  9068 ;; Defined at:
  9069 ;;		line 32 in file "Library/LCD.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;		None
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;		None
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  1    wreg      void 
  9076 ;; Registers used:
  9077 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;Total ram usage:        0 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:   11
  9090 ;; This function calls:
  9091 ;;		_Port_SetPin
  9092 ;; This function is called by:
  9093 ;;		_LCD_Reset
  9094 ;; This function uses a non-reentrant model
  9095 ;;
  9096                           
  9097                           	psect	text44
  9098  0131E0                     __ptext44:
  9099                           	opt stack 0
  9100  0131E0                     _Reset_Low:
  9101                           	opt stack 15
  9102                           
  9103                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;incstack = 0
  9107  0131E0  0EBC               	movlw	low _PortF
  9108  0131E2  0100               	movlb	0	; () banked
  9109  0131E4  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  9110  0131E6  0E01               	movlw	high _PortF
  9111  0131E8  0100               	movlb	0	; () banked
  9112  0131EA  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9113  0131EC  0E06               	movlw	6
  9114  0131EE  0100               	movlb	0	; () banked
  9115  0131F0  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  9116  0131F2  0E01               	movlw	1
  9117  0131F4  0100               	movlb	0	; () banked
  9118  0131F6  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  9119  0131F8  EC65  F08E         	call	_Port_SetPin	;wreg free
  9120  0131FC  0012               	return		;funcret
  9121  0131FE                     __end_of_Reset_Low:
  9122                           	opt stack 0
  9123                           tosu	equ	0xFFF
  9124                           tosh	equ	0xFFE
  9125                           tosl	equ	0xFFD
  9126                           pclath	equ	0xFFA
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           postinc0	equ	0xFEE
  9135                           wreg	equ	0xFE8
  9136                           indf1	equ	0xFE7
  9137                           postdec1	equ	0xFE5
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           postdec2	equ	0xFDD
  9143                           plusw2	equ	0xFDB
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8
  9147                           
  9148 ;; *************** function _Reset_High *****************
  9149 ;; Defined at:
  9150 ;;		line 36 in file "Library/LCD.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;		None
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      void 
  9157 ;; Registers used:
  9158 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;Total ram usage:        0 bytes
  9169 ;; Hardware stack levels used:    1
  9170 ;; Hardware stack levels required when called:   11
  9171 ;; This function calls:
  9172 ;;		_Port_SetPin
  9173 ;; This function is called by:
  9174 ;;		_LCD_Reset
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           	psect	text45
  9179  0131FE                     __ptext45:
  9180                           	opt stack 0
  9181  0131FE                     _Reset_High:
  9182                           	opt stack 15
  9183                           
  9184                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9185                           
  9186                           ;incstack = 0
  9187  0131FE  0EBC               	movlw	low _PortF
  9188  013200  0100               	movlb	0	; () banked
  9189  013202  6FCB               	movwf	Port_SetPin@pInput& (0+255),b
  9190  013204  0E01               	movlw	high _PortF
  9191  013206  0100               	movlb	0	; () banked
  9192  013208  6FCC               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9193  01320A  0E06               	movlw	6
  9194  01320C  0100               	movlb	0	; () banked
  9195  01320E  6FCD               	movwf	Port_SetPin@pPin& (0+255),b
  9196  013210  0E00               	movlw	0
  9197  013212  0100               	movlb	0	; () banked
  9198  013214  6FCE               	movwf	Port_SetPin@pValue& (0+255),b
  9199  013216  EC65  F08E         	call	_Port_SetPin	;wreg free
  9200  01321A  0012               	return		;funcret
  9201  01321C                     __end_of_Reset_High:
  9202                           	opt stack 0
  9203                           tosu	equ	0xFFF
  9204                           tosh	equ	0xFFE
  9205                           tosl	equ	0xFFD
  9206                           pclath	equ	0xFFA
  9207                           tblptru	equ	0xFF8
  9208                           tblptrh	equ	0xFF7
  9209                           tblptrl	equ	0xFF6
  9210                           tablat	equ	0xFF5
  9211                           prodh	equ	0xFF4
  9212                           prodl	equ	0xFF3
  9213                           intcon	equ	0xFF2
  9214                           postinc0	equ	0xFEE
  9215                           wreg	equ	0xFE8
  9216                           indf1	equ	0xFE7
  9217                           postdec1	equ	0xFE5
  9218                           fsr1h	equ	0xFE2
  9219                           fsr1l	equ	0xFE1
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           plusw2	equ	0xFDB
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228 ;; *************** function _LED_Toggle *****************
  9229 ;; Defined at:
  9230 ;;		line 50 in file "Library/LED.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;  pLED            1    wreg     enum E6739
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  pLED            1   24[BANK0 ] enum E6739
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  1    wreg      void 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;Total ram usage:        1 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:   12
  9251 ;; This function calls:
  9252 ;;		_Port_TogglePin
  9253 ;; This function is called by:
  9254 ;;		_LCD_Reset
  9255 ;;		_Event_ADCSequenceComplete
  9256 ;;		_Event_DIPSwitch
  9257 ;;		_Event_HMI_DIPSwitch
  9258 ;;		_Event_TestButton
  9259 ;;		_Event_HMI_LeftButton
  9260 ;;		_Event_HMI_RightButton
  9261 ;;		_Event_HMI_UpButton
  9262 ;;		_Event_HMI_DownButton
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	text46
  9267  012D78                     __ptext46:
  9268                           	opt stack 0
  9269  012D78                     _LED_Toggle:
  9270                           	opt stack 14
  9271                           
  9272                           ;incstack = 0
  9273                           ;LED_Toggle@pLED stored from wreg
  9274  012D78  0100               	movlb	0	; () banked
  9275  012D7A  6FD4               	movwf	LED_Toggle@pLED& (0+255),b
  9276                           
  9277                           ;LED.c: 52: switch (pLED)
  9278  012D7C  D018               	goto	l234
  9279  012D7E                     
  9280                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
  9281  012D7E  0E9E               	movlw	low _PortC
  9282  012D80  0100               	movlb	0	; () banked
  9283  012D82  6FD0               	movwf	Port_TogglePin@pInput& (0+255),b
  9284  012D84  0E00               	movlw	high _PortC
  9285  012D86  0100               	movlb	0	; () banked
  9286  012D88  6FD1               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
  9287  012D8A  0E00               	movlw	0
  9288  012D8C  0100               	movlb	0	; () banked
  9289  012D8E  6FD2               	movwf	Port_TogglePin@pPin& (0+255),b
  9290  012D90  EC1C  F098         	call	_Port_TogglePin	;wreg free
  9291                           
  9292                           ;LED.c: 56: break;
  9293  012D94  0012               	return	
  9294  012D96                     
  9295                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
  9296  012D96  0E9E               	movlw	low _PortC
  9297  012D98  0100               	movlb	0	; () banked
  9298  012D9A  6FD0               	movwf	Port_TogglePin@pInput& (0+255),b
  9299  012D9C  0E00               	movlw	high _PortC
  9300  012D9E  0100               	movlb	0	; () banked
  9301  012DA0  6FD1               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
  9302  012DA2  0E01               	movlw	1
  9303  012DA4  0100               	movlb	0	; () banked
  9304  012DA6  6FD2               	movwf	Port_TogglePin@pPin& (0+255),b
  9305  012DA8  EC1C  F098         	call	_Port_TogglePin	;wreg free
  9306                           
  9307                           ;LED.c: 60: }
  9308                           
  9309                           ;LED.c: 59: break;
  9310  012DAC  0012               	return	
  9311  012DAE                     l234:
  9312  012DAE  0100               	movlb	0	; () banked
  9313  012DB0  51D4               	movf	LED_Toggle@pLED& (0+255),w,b
  9314                           
  9315                           ; Switch size 1, requested type "space"
  9316                           ; Number of cases is 2, Range of values is 0 to 1
  9317                           ; switch strategies available:
  9318                           ; Name         Instructions Cycles
  9319                           ; simple_byte            7     4 (average)
  9320                           ;	Chosen strategy is simple_byte
  9321  012DB2  0A00               	xorlw	0	; case 0
  9322  012DB4  B4D8               	btfsc	status,2,c
  9323  012DB6  D7E3               	goto	l235
  9324  012DB8  0A01               	xorlw	1	; case 1
  9325  012DBA  A4D8               	btfss	status,2,c
  9326  012DBC  0012               	return	
  9327  012DBE  D7EB               	goto	l237
  9328  012DC0                     __end_of_LED_Toggle:
  9329                           	opt stack 0
  9330                           tosu	equ	0xFFF
  9331                           tosh	equ	0xFFE
  9332                           tosl	equ	0xFFD
  9333                           pclath	equ	0xFFA
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           intcon	equ	0xFF2
  9341                           postinc0	equ	0xFEE
  9342                           wreg	equ	0xFE8
  9343                           indf1	equ	0xFE7
  9344                           postdec1	equ	0xFE5
  9345                           fsr1h	equ	0xFE2
  9346                           fsr1l	equ	0xFE1
  9347                           indf2	equ	0xFDF
  9348                           postinc2	equ	0xFDE
  9349                           postdec2	equ	0xFDD
  9350                           plusw2	equ	0xFDB
  9351                           fsr2h	equ	0xFDA
  9352                           fsr2l	equ	0xFD9
  9353                           status	equ	0xFD8
  9354                           
  9355 ;; *************** function _Port_TogglePin *****************
  9356 ;; Defined at:
  9357 ;;		line 278 in file "Library/Port.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;  pInput          2   20[BANK0 ] const PTR struct Port
  9360 ;;		 -> PortC(10), 
  9361 ;;  pPin            1   22[BANK0 ] enum E6750
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  Value           1   23[BANK0 ] unsigned char 
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  1    wreg      void 
  9366 ;; Registers used:
  9367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9373 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;Total ram usage:        4 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:   11
  9380 ;; This function calls:
  9381 ;;		_Port_GetPin
  9382 ;;		_Port_SetPin
  9383 ;; This function is called by:
  9384 ;;		_LED_Toggle
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           	psect	text47
  9389  013038                     __ptext47:
  9390                           	opt stack 0
  9391  013038                     _Port_TogglePin:
  9392                           	opt stack 14
  9393                           
  9394                           ;Port.c: 280: UINT8 Value;
  9395                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
  9396                           
  9397                           ;incstack = 0
  9398  013038  C0D0  F0BC         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
  9399  01303C  C0D1  F0BD         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
  9400  013040  C0D2  F0BE         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
  9401  013044  EC04  F097         	call	_Port_GetPin	;wreg free
  9402  013048  0100               	movlb	0	; () banked
  9403  01304A  6FD3               	movwf	Port_TogglePin@Value& (0+255),b
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;Port.c: 282: Value ^= 0x01;
  9407  01304C  0E01               	movlw	1
  9408  01304E  0100               	movlb	0	; () banked
  9409  013050  1BD3               	xorwf	Port_TogglePin@Value& (0+255),f,b
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
  9413  013052  C0D0  F0CB         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
  9414  013056  C0D1  F0CC         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
  9415  01305A  C0D2  F0CD         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
  9416  01305E  C0D3  F0CE         	movff	Port_TogglePin@Value,Port_SetPin@pValue
  9417  013062  EC65  F08E         	call	_Port_SetPin	;wreg free
  9418  013066  0012               	return		;funcret
  9419  013068                     __end_of_Port_TogglePin:
  9420                           	opt stack 0
  9421                           tosu	equ	0xFFF
  9422                           tosh	equ	0xFFE
  9423                           tosl	equ	0xFFD
  9424                           pclath	equ	0xFFA
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           postinc0	equ	0xFEE
  9433                           wreg	equ	0xFE8
  9434                           indf1	equ	0xFE7
  9435                           postdec1	equ	0xFE5
  9436                           fsr1h	equ	0xFE2
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           plusw2	equ	0xFDB
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _Port_SetPin *****************
  9447 ;; Defined at:
  9448 ;;		line 247 in file "Library/Port.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  9451 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
  9452 ;;  pPin            1   17[BANK0 ] enum E6750
  9453 ;;  pValue          1   18[BANK0 ] unsigned char 
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;  Type            1   19[BANK0 ] enum E6795
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  1    wreg      void 
  9458 ;; Registers used:
  9459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9465 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;Total ram usage:        5 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:   10
  9472 ;; This function calls:
  9473 ;;		_Byte_SetBit
  9474 ;;		_Word_GetPair
  9475 ;; This function is called by:
  9476 ;;		_Reset_Low
  9477 ;;		_Reset_High
  9478 ;;		_LED_Set
  9479 ;;		_Port_TogglePin
  9480 ;;		_Motor_Init
  9481 ;;		_Motor_Step
  9482 ;;		_MXK_Init
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           	psect	text48
  9487  011CCA                     __ptext48:
  9488                           	opt stack 0
  9489  011CCA                     _Port_SetPin:
  9490                           	opt stack 18
  9491                           
  9492                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
  9493                           
  9494                           ;incstack = 0
  9495  011CCA  0E08               	movlw	8
  9496  011CCC  0100               	movlb	0	; () banked
  9497  011CCE  25CB               	addwf	Port_SetPin@pInput& (0+255),w,b
  9498  011CD0  0100               	movlb	0	; () banked
  9499  011CD2  6FC8               	movwf	Word_GetPair@pInput& (0+255),b
  9500  011CD4  0E00               	movlw	0
  9501  011CD6  0100               	movlb	0	; () banked
  9502  011CD8  21CC               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
  9503  011CDA  0100               	movlb	0	; () banked
  9504  011CDC  6FC9               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  9505  011CDE  C0CD  F0CA         	movff	Port_SetPin@pPin,Word_GetPair@pPair
  9506  011CE2  ECC9  F097         	call	_Word_GetPair	;wreg free
  9507  011CE6  0100               	movlb	0	; () banked
  9508  011CE8  6FCF               	movwf	Port_SetPin@Type& (0+255),b
  9509                           
  9510                           ;Port.c: 250: switch (Type)
  9511  011CEA  D042               	goto	l427
  9512  011CEC                     
  9513                           ; BSR set to: 0
  9514                           ;Port.c: 256: pValue &= 1;
  9515                           
  9516                           ; BSR set to: 0
  9517  011CEC  0E01               	movlw	1
  9518  011CEE  0100               	movlb	0	; () banked
  9519  011CF0  17CE               	andwf	Port_SetPin@pValue& (0+255),f,b
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
  9523  011CF2  0100               	movlb	0	; () banked
  9524  011CF4  EE20 F002          	lfsr	2,2
  9525  011CF8  51CB               	movf	Port_SetPin@pInput& (0+255),w,b
  9526  011CFA  26D9               	addwf	fsr2l,f,c
  9527  011CFC  51CC               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
  9528  011CFE  22DA               	addwfc	fsr2h,f,c
  9529  011D00  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
  9530  011D04  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
  9531  011D08  C0CD  F0BE         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  9532  011D0C  C0CE  F0BF         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  9533  011D10  EC11  F095         	call	_Byte_SetBit	;wreg free
  9534                           
  9535                           ;Port.c: 258: break;
  9536  011D14  0012               	return	
  9537  011D16                     
  9538                           ;Port.c: 261: pValue &= 1;
  9539  011D16  0E01               	movlw	1
  9540  011D18  0100               	movlb	0	; () banked
  9541  011D1A  17CE               	andwf	Port_SetPin@pValue& (0+255),f,b
  9542                           
  9543                           ;Port.c: 262: pValue ^= 1;
  9544  011D1C  0E01               	movlw	1
  9545  011D1E  0100               	movlb	0	; () banked
  9546  011D20  1BCE               	xorwf	Port_SetPin@pValue& (0+255),f,b
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
  9550  011D22  0100               	movlb	0	; () banked
  9551  011D24  EE20 F002          	lfsr	2,2
  9552  011D28  51CB               	movf	Port_SetPin@pInput& (0+255),w,b
  9553  011D2A  26D9               	addwf	fsr2l,f,c
  9554  011D2C  51CC               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
  9555  011D2E  22DA               	addwfc	fsr2h,f,c
  9556  011D30  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
  9557  011D34  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
  9558  011D38  C0CD  F0BE         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  9559  011D3C  C0CE  F0BF         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  9560  011D40  EC11  F095         	call	_Byte_SetBit	;wreg free
  9561                           
  9562                           ;Port.c: 264: break;
  9563  011D44  0012               	return	
  9564  011D46                     
  9565                           ;Port.c: 266: pValue &= 1;
  9566  011D46  0E01               	movlw	1
  9567  011D48  0100               	movlb	0	; () banked
  9568  011D4A  17CE               	andwf	Port_SetPin@pValue& (0+255),f,b
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
  9572  011D4C  0100               	movlb	0	; () banked
  9573  011D4E  EE20 F004          	lfsr	2,4
  9574  011D52  51CB               	movf	Port_SetPin@pInput& (0+255),w,b
  9575  011D54  26D9               	addwf	fsr2l,f,c
  9576  011D56  51CC               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
  9577  011D58  22DA               	addwfc	fsr2h,f,c
  9578  011D5A  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
  9579  011D5E  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
  9580  011D62  C0CD  F0BE         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  9581  011D66  C0CE  F0BF         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  9582  011D6A  EC11  F095         	call	_Byte_SetBit	;wreg free
  9583                           
  9584                           ;Port.c: 269: }
  9585                           
  9586                           ;Port.c: 268: break;
  9587  011D6E  0012               	return	
  9588  011D70                     l427:
  9589  011D70  0100               	movlb	0	; () banked
  9590  011D72  51CF               	movf	Port_SetPin@Type& (0+255),w,b
  9591                           
  9592                           ; Switch size 1, requested type "space"
  9593                           ; Number of cases is 4, Range of values is 0 to 3
  9594                           ; switch strategies available:
  9595                           ; Name         Instructions Cycles
  9596                           ; simple_byte           13     7 (average)
  9597                           ;	Chosen strategy is simple_byte
  9598  011D74  0A00               	xorlw	0	; case 0
  9599  011D76  B4D8               	btfsc	status,2,c
  9600  011D78  0012               	return	
  9601  011D7A  0A01               	xorlw	1	; case 1
  9602  011D7C  B4D8               	btfsc	status,2,c
  9603  011D7E  D7B6               	goto	l430
  9604  011D80  0A03               	xorlw	3	; case 2
  9605  011D82  B4D8               	btfsc	status,2,c
  9606  011D84  D7C8               	goto	l432
  9607  011D86  0A01               	xorlw	1	; case 3
  9608  011D88  A4D8               	btfss	status,2,c
  9609  011D8A  0012               	return	
  9610  011D8C  D7DC               	goto	l433
  9611  011D8E                     __end_of_Port_SetPin:
  9612                           	opt stack 0
  9613                           tosu	equ	0xFFF
  9614                           tosh	equ	0xFFE
  9615                           tosl	equ	0xFFD
  9616                           pclath	equ	0xFFA
  9617                           tblptru	equ	0xFF8
  9618                           tblptrh	equ	0xFF7
  9619                           tblptrl	equ	0xFF6
  9620                           tablat	equ	0xFF5
  9621                           prodh	equ	0xFF4
  9622                           prodl	equ	0xFF3
  9623                           intcon	equ	0xFF2
  9624                           postinc0	equ	0xFEE
  9625                           wreg	equ	0xFE8
  9626                           indf1	equ	0xFE7
  9627                           postdec1	equ	0xFE5
  9628                           fsr1h	equ	0xFE2
  9629                           fsr1l	equ	0xFE1
  9630                           indf2	equ	0xFDF
  9631                           postinc2	equ	0xFDE
  9632                           postdec2	equ	0xFDD
  9633                           plusw2	equ	0xFDB
  9634                           fsr2h	equ	0xFDA
  9635                           fsr2l	equ	0xFD9
  9636                           status	equ	0xFD8
  9637                           
  9638 ;; *************** function _Port_GetPin *****************
  9639 ;; Defined at:
  9640 ;;		line 271 in file "Library/Port.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  9643 ;;		 -> PortB(10), PortE(10), PortC(10), 
  9644 ;;  pPin            1    2[BANK0 ] enum E6750
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  Output          1    5[BANK0 ] unsigned char 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      unsigned char 
  9649 ;; Registers used:
  9650 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9656 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;Total ram usage:        6 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    7
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_Port_TogglePin
  9667 ;;		_HMI_LeftSwitch
  9668 ;;		_HMI_RightSwitch
  9669 ;;		_HMI_UpSwitch
  9670 ;;		_HMI_DownSwitch
  9671 ;;		_MXK_TestButton
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           	psect	text49
  9676  012E08                     __ptext49:
  9677                           	opt stack 0
  9678  012E08                     _Port_GetPin:
  9679                           	opt stack 17
  9680                           
  9681                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
  9682                           
  9683                           ;incstack = 0
  9684  012E08  0100               	movlb	0	; () banked
  9685  012E0A  EE20 F006          	lfsr	2,6
  9686  012E0E  51BC               	movf	Port_GetPin@pInput& (0+255),w,b
  9687  012E10  26D9               	addwf	fsr2l,f,c
  9688  012E12  51BD               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
  9689  012E14  22DA               	addwfc	fsr2h,f,c
  9690  012E16  CFDE F0BF          	movff	postinc2,??_Port_GetPin
  9691  012E1A  CFDD F0C0          	movff	postdec2,??_Port_GetPin+1
  9692  012E1E  C0BF  FFD9         	movff	??_Port_GetPin,fsr2l
  9693  012E22  C0C0  FFDA         	movff	??_Port_GetPin+1,fsr2h
  9694  012E26  50DF               	movf	indf2,w,c
  9695  012E28  0100               	movlb	0	; () banked
  9696  012E2A  6FC1               	movwf	Port_GetPin@Output& (0+255),b
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;Port.c: 274: Output >>= (UINT8)pPin;
  9700  012E2C  0100               	movlb	0	; () banked
  9701  012E2E  29BE               	incf	Port_GetPin@pPin& (0+255),w,b
  9702  012E30  0100               	movlb	0	; () banked
  9703  012E32  6FBF               	movwf	??_Port_GetPin& (0+255),b
  9704  012E34  D003               	goto	u6730
  9705  012E36                     u6735:
  9706  012E36  0100               	movlb	0	; () banked
  9707  012E38  90D8               	bcf	status,0,c
  9708  012E3A  33C1               	rrcf	Port_GetPin@Output& (0+255),f,b
  9709  012E3C                     u6730:
  9710  012E3C  0100               	movlb	0	; () banked
  9711  012E3E  2FBF               	decfsz	??_Port_GetPin& (0+255),f,b
  9712  012E40  D7FA               	goto	u6735
  9713                           
  9714                           ;Port.c: 275: Output &= 1;
  9715  012E42  0E01               	movlw	1
  9716  012E44  0100               	movlb	0	; () banked
  9717  012E46  17C1               	andwf	Port_GetPin@Output& (0+255),f,b
  9718                           
  9719                           ; BSR set to: 0
  9720                           ;Port.c: 276: return Output;
  9721  012E48  0100               	movlb	0	; () banked
  9722  012E4A  51C1               	movf	Port_GetPin@Output& (0+255),w,b
  9723  012E4C  0012               	return	
  9724  012E4E                     __end_of_Port_GetPin:
  9725                           	opt stack 0
  9726                           tosu	equ	0xFFF
  9727                           tosh	equ	0xFFE
  9728                           tosl	equ	0xFFD
  9729                           pclath	equ	0xFFA
  9730                           tblptru	equ	0xFF8
  9731                           tblptrh	equ	0xFF7
  9732                           tblptrl	equ	0xFF6
  9733                           tablat	equ	0xFF5
  9734                           prodh	equ	0xFF4
  9735                           prodl	equ	0xFF3
  9736                           intcon	equ	0xFF2
  9737                           postinc0	equ	0xFEE
  9738                           wreg	equ	0xFE8
  9739                           indf1	equ	0xFE7
  9740                           postdec1	equ	0xFE5
  9741                           fsr1h	equ	0xFE2
  9742                           fsr1l	equ	0xFE1
  9743                           indf2	equ	0xFDF
  9744                           postinc2	equ	0xFDE
  9745                           postdec2	equ	0xFDD
  9746                           plusw2	equ	0xFDB
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function _ISR_Enable *****************
  9752 ;; Defined at:
  9753 ;;		line 27 in file "Library/ISR.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;		None
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;		None
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  1    wreg      void 
  9760 ;; Registers used:
  9761 ;;		None
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:        0 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    7
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_init
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           	psect	text50
  9782  013386                     __ptext50:
  9783                           	opt stack 0
  9784  013386                     _ISR_Enable:
  9785                           	opt stack 22
  9786                           
  9787                           ;ISR.c: 29: INTCONbits.PEIE = 1;
  9788                           
  9789                           ; BSR set to: 0
  9790                           ;incstack = 0
  9791  013386  8CF2               	bsf	intcon,6,c	;volatile
  9792                           
  9793                           ;ISR.c: 30: INTCONbits.GIE = 1;
  9794  013388  8EF2               	bsf	intcon,7,c	;volatile
  9795                           
  9796                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
  9797  01338A  88F2               	bsf	intcon,4,c	;volatile
  9798                           
  9799                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
  9800  01338C  92F2               	bcf	intcon,1,c	;volatile
  9801  01338E  0012               	return		;funcret
  9802  013390                     __end_of_ISR_Enable:
  9803                           	opt stack 0
  9804                           tosu	equ	0xFFF
  9805                           tosh	equ	0xFFE
  9806                           tosl	equ	0xFFD
  9807                           pclath	equ	0xFFA
  9808                           tblptru	equ	0xFF8
  9809                           tblptrh	equ	0xFF7
  9810                           tblptrl	equ	0xFF6
  9811                           tablat	equ	0xFF5
  9812                           prodh	equ	0xFF4
  9813                           prodl	equ	0xFF3
  9814                           intcon	equ	0xFF2
  9815                           postinc0	equ	0xFEE
  9816                           wreg	equ	0xFE8
  9817                           indf1	equ	0xFE7
  9818                           postdec1	equ	0xFE5
  9819                           fsr1h	equ	0xFE2
  9820                           fsr1l	equ	0xFE1
  9821                           indf2	equ	0xFDF
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           plusw2	equ	0xFDB
  9825                           fsr2h	equ	0xFDA
  9826                           fsr2l	equ	0xFD9
  9827                           status	equ	0xFD8
  9828                           
  9829 ;; *************** function _HMI_Init *****************
  9830 ;; Defined at:
  9831 ;;		line 104 in file "HMI.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;		None
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  in              2   13[BANK1 ] unsigned short 
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  1    wreg      void 
  9838 ;; Registers used:
  9839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9840 ;; Tracked objects:
  9841 ;;		On entry : 0/0
  9842 ;;		On exit  : 0/0
  9843 ;;		Unchanged: 0/0
  9844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;Total ram usage:        2 bytes
  9850 ;; Hardware stack levels used:    1
  9851 ;; Hardware stack levels required when called:   16
  9852 ;; This function calls:
  9853 ;;		_Button_Init
  9854 ;;		_SPI_Init
  9855 ;;		_SPI_MinSpeed
  9856 ;; This function is called by:
  9857 ;;		_init
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           	psect	text51
  9862  010C58                     __ptext51:
  9863                           	opt stack 0
  9864  010C58                     _HMI_Init:
  9865                           	opt stack 13
  9866                           
  9867                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
  9868                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
  9869                           
  9870                           ;incstack = 0
  9871  010C58  0E6A               	movlw	low (_HMIBoard+48)
  9872  010C5A  0101               	movlb	1	; () banked
  9873  010C5C  6FE2               	movwf	Button_Init@pInput& (0+255),b
  9874  010C5E  0E01               	movlw	high (_HMIBoard+48)
  9875  010C60  0101               	movlb	1	; () banked
  9876  010C62  6FE3               	movwf	(Button_Init@pInput+1)& (0+255),b
  9877  010C64  0E00               	movlw	0
  9878  010C66  0101               	movlb	1	; () banked
  9879  010C68  6FE5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9880  010C6A  0E02               	movlw	2
  9881  010C6C  6FE4               	movwf	Button_Init@pThreshold& (0+255),b
  9882  010C6E  0EBC               	movlw	low _HMI_InitButtons
  9883  010C70  0101               	movlb	1	; () banked
  9884  010C72  6FE6               	movwf	Button_Init@pInitIO& (0+255),b
  9885  010C74  0E33               	movlw	high _HMI_InitButtons
  9886  010C76  0101               	movlb	1	; () banked
  9887  010C78  6FE7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9888  010C7A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9889  010C7C  0101               	movlb	1	; () banked
  9890  010C7E  6FE8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9891  010C80  0E00               	movlw	0
  9892  010C82  0101               	movlb	1	; () banked
  9893  010C84  6FE9               	movwf	Button_Init@pGetState& (0+255),b
  9894  010C86  0E00               	movlw	0
  9895  010C88  0101               	movlb	1	; () banked
  9896  010C8A  6FEA               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9897  010C8C  0E00               	movlw	0
  9898  010C8E  0101               	movlb	1	; () banked
  9899  010C90  6FEB               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9900  010C92  0E00               	movlw	0
  9901  010C94  0101               	movlb	1	; () banked
  9902  010C96  6FEC               	movwf	Button_Init@pFunction& (0+255),b
  9903  010C98  0E00               	movlw	0
  9904  010C9A  0101               	movlb	1	; () banked
  9905  010C9C  6FED               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9906  010C9E  0E00               	movlw	0
  9907  010CA0  0101               	movlb	1	; () banked
  9908  010CA2  6FEE               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9909  010CA4  EC98  F08D         	call	_Button_Init	;wreg free
  9910                           
  9911                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
  9912                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
  9913  010CA8  0E4C               	movlw	low (_HMIBoard+18)
  9914  010CAA  0101               	movlb	1	; () banked
  9915  010CAC  6FE2               	movwf	Button_Init@pInput& (0+255),b
  9916  010CAE  0E01               	movlw	high (_HMIBoard+18)
  9917  010CB0  0101               	movlb	1	; () banked
  9918  010CB2  6FE3               	movwf	(Button_Init@pInput+1)& (0+255),b
  9919  010CB4  0E00               	movlw	0
  9920  010CB6  0101               	movlb	1	; () banked
  9921  010CB8  6FE5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9922  010CBA  0E02               	movlw	2
  9923  010CBC  6FE4               	movwf	Button_Init@pThreshold& (0+255),b
  9924  010CBE  0EBC               	movlw	low _HMI_InitButtons
  9925  010CC0  0101               	movlb	1	; () banked
  9926  010CC2  6FE6               	movwf	Button_Init@pInitIO& (0+255),b
  9927  010CC4  0E33               	movlw	high _HMI_InitButtons
  9928  010CC6  0101               	movlb	1	; () banked
  9929  010CC8  6FE7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9930  010CCA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9931  010CCC  0101               	movlb	1	; () banked
  9932  010CCE  6FE8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9933  010CD0  0E00               	movlw	0
  9934  010CD2  0101               	movlb	1	; () banked
  9935  010CD4  6FE9               	movwf	Button_Init@pGetState& (0+255),b
  9936  010CD6  0E00               	movlw	0
  9937  010CD8  0101               	movlb	1	; () banked
  9938  010CDA  6FEA               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9939  010CDC  0E00               	movlw	0
  9940  010CDE  0101               	movlb	1	; () banked
  9941  010CE0  6FEB               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9942  010CE2  0E00               	movlw	0
  9943  010CE4  0101               	movlb	1	; () banked
  9944  010CE6  6FEC               	movwf	Button_Init@pFunction& (0+255),b
  9945  010CE8  0E00               	movlw	0
  9946  010CEA  0101               	movlb	1	; () banked
  9947  010CEC  6FED               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9948  010CEE  0E00               	movlw	0
  9949  010CF0  0101               	movlb	1	; () banked
  9950  010CF2  6FEE               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9951  010CF4  EC98  F08D         	call	_Button_Init	;wreg free
  9952                           
  9953                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
  9954                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
  9955  010CF8  0E42               	movlw	low (_HMIBoard+8)
  9956  010CFA  0101               	movlb	1	; () banked
  9957  010CFC  6FE2               	movwf	Button_Init@pInput& (0+255),b
  9958  010CFE  0E01               	movlw	high (_HMIBoard+8)
  9959  010D00  0101               	movlb	1	; () banked
  9960  010D02  6FE3               	movwf	(Button_Init@pInput+1)& (0+255),b
  9961  010D04  0E00               	movlw	0
  9962  010D06  0101               	movlb	1	; () banked
  9963  010D08  6FE5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9964  010D0A  0E02               	movlw	2
  9965  010D0C  6FE4               	movwf	Button_Init@pThreshold& (0+255),b
  9966  010D0E  0EBC               	movlw	low _HMI_InitButtons
  9967  010D10  0101               	movlb	1	; () banked
  9968  010D12  6FE6               	movwf	Button_Init@pInitIO& (0+255),b
  9969  010D14  0E33               	movlw	high _HMI_InitButtons
  9970  010D16  0101               	movlb	1	; () banked
  9971  010D18  6FE7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9972  010D1A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9973  010D1C  0101               	movlb	1	; () banked
  9974  010D1E  6FE8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9975  010D20  0E00               	movlw	0
  9976  010D22  0101               	movlb	1	; () banked
  9977  010D24  6FE9               	movwf	Button_Init@pGetState& (0+255),b
  9978  010D26  0E00               	movlw	0
  9979  010D28  0101               	movlb	1	; () banked
  9980  010D2A  6FEA               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9981  010D2C  0E00               	movlw	0
  9982  010D2E  0101               	movlb	1	; () banked
  9983  010D30  6FEB               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9984  010D32  0E00               	movlw	0
  9985  010D34  0101               	movlb	1	; () banked
  9986  010D36  6FEC               	movwf	Button_Init@pFunction& (0+255),b
  9987  010D38  0E00               	movlw	0
  9988  010D3A  0101               	movlb	1	; () banked
  9989  010D3C  6FED               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9990  010D3E  0E00               	movlw	0
  9991  010D40  0101               	movlb	1	; () banked
  9992  010D42  6FEE               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9993  010D44  EC98  F08D         	call	_Button_Init	;wreg free
  9994                           
  9995                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
  9996                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
  9997  010D48  0E56               	movlw	low (_HMIBoard+28)
  9998  010D4A  0101               	movlb	1	; () banked
  9999  010D4C  6FE2               	movwf	Button_Init@pInput& (0+255),b
 10000  010D4E  0E01               	movlw	high (_HMIBoard+28)
 10001  010D50  0101               	movlb	1	; () banked
 10002  010D52  6FE3               	movwf	(Button_Init@pInput+1)& (0+255),b
 10003  010D54  0E00               	movlw	0
 10004  010D56  0101               	movlb	1	; () banked
 10005  010D58  6FE5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 10006  010D5A  0E02               	movlw	2
 10007  010D5C  6FE4               	movwf	Button_Init@pThreshold& (0+255),b
 10008  010D5E  0EBC               	movlw	low _HMI_InitButtons
 10009  010D60  0101               	movlb	1	; () banked
 10010  010D62  6FE6               	movwf	Button_Init@pInitIO& (0+255),b
 10011  010D64  0E33               	movlw	high _HMI_InitButtons
 10012  010D66  0101               	movlb	1	; () banked
 10013  010D68  6FE7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 10014  010D6A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 10015  010D6C  0101               	movlb	1	; () banked
 10016  010D6E  6FE8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 10017  010D70  0E00               	movlw	0
 10018  010D72  0101               	movlb	1	; () banked
 10019  010D74  6FE9               	movwf	Button_Init@pGetState& (0+255),b
 10020  010D76  0E00               	movlw	0
 10021  010D78  0101               	movlb	1	; () banked
 10022  010D7A  6FEA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 10023  010D7C  0E00               	movlw	0
 10024  010D7E  0101               	movlb	1	; () banked
 10025  010D80  6FEB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 10026  010D82  0E00               	movlw	0
 10027  010D84  0101               	movlb	1	; () banked
 10028  010D86  6FEC               	movwf	Button_Init@pFunction& (0+255),b
 10029  010D88  0E00               	movlw	0
 10030  010D8A  0101               	movlb	1	; () banked
 10031  010D8C  6FED               	movwf	(Button_Init@pFunction+1)& (0+255),b
 10032  010D8E  0E00               	movlw	0
 10033  010D90  0101               	movlb	1	; () banked
 10034  010D92  6FEE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 10035  010D94  EC98  F08D         	call	_Button_Init	;wreg free
 10036                           
 10037                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 10038                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 10039  010D98  0E60               	movlw	low (_HMIBoard+38)
 10040  010D9A  0101               	movlb	1	; () banked
 10041  010D9C  6FE2               	movwf	Button_Init@pInput& (0+255),b
 10042  010D9E  0E01               	movlw	high (_HMIBoard+38)
 10043  010DA0  0101               	movlb	1	; () banked
 10044  010DA2  6FE3               	movwf	(Button_Init@pInput+1)& (0+255),b
 10045  010DA4  0E00               	movlw	0
 10046  010DA6  0101               	movlb	1	; () banked
 10047  010DA8  6FE5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 10048  010DAA  0E02               	movlw	2
 10049  010DAC  6FE4               	movwf	Button_Init@pThreshold& (0+255),b
 10050  010DAE  0EBC               	movlw	low _HMI_InitButtons
 10051  010DB0  0101               	movlb	1	; () banked
 10052  010DB2  6FE6               	movwf	Button_Init@pInitIO& (0+255),b
 10053  010DB4  0E33               	movlw	high _HMI_InitButtons
 10054  010DB6  0101               	movlb	1	; () banked
 10055  010DB8  6FE7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 10056  010DBA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 10057  010DBC  0101               	movlb	1	; () banked
 10058  010DBE  6FE8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 10059  010DC0  0E00               	movlw	0
 10060  010DC2  0101               	movlb	1	; () banked
 10061  010DC4  6FE9               	movwf	Button_Init@pGetState& (0+255),b
 10062  010DC6  0E00               	movlw	0
 10063  010DC8  0101               	movlb	1	; () banked
 10064  010DCA  6FEA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 10065  010DCC  0E00               	movlw	0
 10066  010DCE  0101               	movlb	1	; () banked
 10067  010DD0  6FEB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 10068  010DD2  0E00               	movlw	0
 10069  010DD4  0101               	movlb	1	; () banked
 10070  010DD6  6FEC               	movwf	Button_Init@pFunction& (0+255),b
 10071  010DD8  0E00               	movlw	0
 10072  010DDA  0101               	movlb	1	; () banked
 10073  010DDC  6FED               	movwf	(Button_Init@pFunction+1)& (0+255),b
 10074  010DDE  0E00               	movlw	0
 10075  010DE0  0101               	movlb	1	; () banked
 10076  010DE2  6FEE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 10077  010DE4  EC98  F08D         	call	_Button_Init	;wreg free
 10078                           
 10079                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 10080  010DE8  0EA0               	movlw	160
 10081  010DEA  0100               	movlb	0	; () banked
 10082  010DEC  6FE9               	movwf	SPI_Init@pClock& (0+255),b
 10083  010DEE  0E86               	movlw	134
 10084  010DF0  6FEA               	movwf	(SPI_Init@pClock+1)& (0+255),b
 10085  010DF2  0E01               	movlw	1
 10086  010DF4  6FEB               	movwf	(SPI_Init@pClock+2)& (0+255),b
 10087  010DF6  0E00               	movlw	0
 10088  010DF8  6FEC               	movwf	(SPI_Init@pClock+3)& (0+255),b
 10089  010DFA  0E00               	movlw	0
 10090  010DFC  0100               	movlb	0	; () banked
 10091  010DFE  6FED               	movwf	SPI_Init@pChannel& (0+255),b
 10092  010E00  0E02               	movlw	2
 10093  010E02  0100               	movlb	0	; () banked
 10094  010E04  6FEE               	movwf	SPI_Init@pMode& (0+255),b
 10095  010E06  EC00  F080         	call	_SPI_Init	;wreg free
 10096                           
 10097                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 10098  010E0A  0E74               	movlw	low _SPI1
 10099  010E0C  0100               	movlb	0	; () banked
 10100  010E0E  6FCB               	movwf	SPI_MinSpeed@pInput& (0+255),b
 10101  010E10  0E01               	movlw	high _SPI1
 10102  010E12  0100               	movlb	0	; () banked
 10103  010E14  6FCC               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 10104  010E16  ECCA  F093         	call	_SPI_MinSpeed	;wreg free
 10105                           
 10106                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 10107  010E1A  0E00               	movlw	0
 10108  010E1C  0101               	movlb	1	; () banked
 10109  010E1E  6FF0               	movwf	(HMI_Init@in+1)& (0+255),b
 10110  010E20  0E00               	movlw	0
 10111  010E22  6FEF               	movwf	HMI_Init@in& (0+255),b
 10112  010E24                     l11820:
 10113                           
 10114                           ; BSR set to: 1
 10115  010E24  0101               	movlb	1	; () banked
 10116  010E26  51F0               	movf	(HMI_Init@in+1)& (0+255),w,b
 10117  010E28  E113               	bnz	l1153
 10118  010E2A  0E08               	movlw	8
 10119  010E2C  0101               	movlb	1	; () banked
 10120  010E2E  5DEF               	subwf	HMI_Init@in& (0+255),w,b
 10121  010E30  B0D8               	btfsc	status,0,c
 10122  010E32  0012               	return	
 10123                           
 10124                           ; BSR set to: 1
 10125                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 10126                           
 10127                           ; BSR set to: 1
 10128                           
 10129                           ; BSR set to: 1
 10130  010E34  0E3A               	movlw	low _HMIBoard
 10131  010E36  0101               	movlb	1	; () banked
 10132  010E38  25EF               	addwf	HMI_Init@in& (0+255),w,b
 10133  010E3A  6ED9               	movwf	fsr2l,c
 10134  010E3C  0E01               	movlw	high _HMIBoard
 10135  010E3E  0101               	movlb	1	; () banked
 10136  010E40  21F0               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 10137  010E42  6EDA               	movwf	fsr2h,c
 10138  010E44  0E00               	movlw	0
 10139  010E46  6EDF               	movwf	indf2,c
 10140                           
 10141                           ; BSR set to: 1
 10142  010E48  0101               	movlb	1	; () banked
 10143  010E4A  4BEF               	infsnz	HMI_Init@in& (0+255),f,b
 10144  010E4C  2BF0               	incf	(HMI_Init@in+1)& (0+255),f,b
 10145  010E4E  D7EA               	goto	l11820
 10146  010E50                     l1153:
 10147                           
 10148                           ; BSR set to: 1
 10149  010E50  0012               	return		;funcret
 10150  010E52                     __end_of_HMI_Init:
 10151                           	opt stack 0
 10152                           tosu	equ	0xFFF
 10153                           tosh	equ	0xFFE
 10154                           tosl	equ	0xFFD
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           postinc0	equ	0xFEE
 10164                           wreg	equ	0xFE8
 10165                           indf1	equ	0xFE7
 10166                           postdec1	equ	0xFE5
 10167                           fsr1h	equ	0xFE2
 10168                           fsr1l	equ	0xFE1
 10169                           indf2	equ	0xFDF
 10170                           postinc2	equ	0xFDE
 10171                           postdec2	equ	0xFDD
 10172                           plusw2	equ	0xFDB
 10173                           fsr2h	equ	0xFDA
 10174                           fsr2l	equ	0xFD9
 10175                           status	equ	0xFD8
 10176                           
 10177 ;; *************** function _SPI_MinSpeed *****************
 10178 ;; Defined at:
 10179 ;;		line 190 in file "Library/SPI.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 10182 ;;		 -> SPI1(11), 
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;Total ram usage:        2 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    9
 10201 ;; This function calls:
 10202 ;;		_Byte_SetBit
 10203 ;;		_Byte_SetQuad
 10204 ;; This function is called by:
 10205 ;;		_HMI_Init
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           	psect	text52
 10210  012794                     __ptext52:
 10211                           	opt stack 0
 10212  012794                     _SPI_MinSpeed:
 10213                           	opt stack 19
 10214                           
 10215                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 10216                           
 10217                           ; BSR set to: 1
 10218                           ;incstack = 0
 10219  012794  0100               	movlb	0	; () banked
 10220  012796  EE20 F006          	lfsr	2,6
 10221  01279A  51CB               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 10222  01279C  26D9               	addwf	fsr2l,f,c
 10223  01279E  51CC               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 10224  0127A0  22DA               	addwfc	fsr2h,f,c
 10225  0127A2  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10226  0127A6  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10227  0127AA  0E05               	movlw	5
 10228  0127AC  0100               	movlb	0	; () banked
 10229  0127AE  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10230  0127B0  0E00               	movlw	0
 10231  0127B2  0100               	movlb	0	; () banked
 10232  0127B4  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10233  0127B6  EC11  F095         	call	_Byte_SetBit	;wreg free
 10234                           
 10235                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 10236  0127BA  0100               	movlb	0	; () banked
 10237  0127BC  EE20 F006          	lfsr	2,6
 10238  0127C0  51CB               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 10239  0127C2  26D9               	addwf	fsr2l,f,c
 10240  0127C4  51CC               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 10241  0127C6  22DA               	addwfc	fsr2h,f,c
 10242  0127C8  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 10243  0127CC  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 10244  0127D0  0E00               	movlw	0
 10245  0127D2  0100               	movlb	0	; () banked
 10246  0127D4  6FC9               	movwf	Byte_SetQuad@pQuad& (0+255),b
 10247  0127D6  0E02               	movlw	2
 10248  0127D8  0100               	movlb	0	; () banked
 10249  0127DA  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 10250  0127DC  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 10251                           
 10252                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 10253  0127E0  0100               	movlb	0	; () banked
 10254  0127E2  EE20 F006          	lfsr	2,6
 10255  0127E6  51CB               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 10256  0127E8  26D9               	addwf	fsr2l,f,c
 10257  0127EA  51CC               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 10258  0127EC  22DA               	addwfc	fsr2h,f,c
 10259  0127EE  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10260  0127F2  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10261  0127F6  0E05               	movlw	5
 10262  0127F8  0100               	movlb	0	; () banked
 10263  0127FA  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10264  0127FC  0E01               	movlw	1
 10265  0127FE  0100               	movlb	0	; () banked
 10266  012800  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10267  012802  EC11  F095         	call	_Byte_SetBit	;wreg free
 10268  012806  0012               	return		;funcret
 10269  012808                     __end_of_SPI_MinSpeed:
 10270                           	opt stack 0
 10271                           tosu	equ	0xFFF
 10272                           tosh	equ	0xFFE
 10273                           tosl	equ	0xFFD
 10274                           pclath	equ	0xFFA
 10275                           tblptru	equ	0xFF8
 10276                           tblptrh	equ	0xFF7
 10277                           tblptrl	equ	0xFF6
 10278                           tablat	equ	0xFF5
 10279                           prodh	equ	0xFF4
 10280                           prodl	equ	0xFF3
 10281                           intcon	equ	0xFF2
 10282                           postinc0	equ	0xFEE
 10283                           wreg	equ	0xFE8
 10284                           indf1	equ	0xFE7
 10285                           postdec1	equ	0xFE5
 10286                           fsr1h	equ	0xFE2
 10287                           fsr1l	equ	0xFE1
 10288                           indf2	equ	0xFDF
 10289                           postinc2	equ	0xFDE
 10290                           postdec2	equ	0xFDD
 10291                           plusw2	equ	0xFDB
 10292                           fsr2h	equ	0xFDA
 10293                           fsr2l	equ	0xFD9
 10294                           status	equ	0xFD8
 10295                           
 10296 ;; *************** function _SPI_Init *****************
 10297 ;; Defined at:
 10298 ;;		line 12 in file "Library/SPI.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  pClock          4   45[BANK0 ] unsigned long 
 10301 ;;  pChannel        1   49[BANK0 ] enum E6744
 10302 ;;  pMode           1   50[BANK0 ] enum E6748
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 10305 ;;		 -> SPI1(11), SPI2(11), 
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      void 
 10308 ;; Registers used:
 10309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10315 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10319 ;;Total ram usage:        8 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:   12
 10322 ;; This function calls:
 10323 ;;		_Byte_SetBit
 10324 ;;		_Byte_SetQuad
 10325 ;;		_Port_SetPinType
 10326 ;;		_SPI_DCS
 10327 ;;		_SPI_DisableISR
 10328 ;;		_Timer2_Init
 10329 ;; This function is called by:
 10330 ;;		_Configure_GPIOs
 10331 ;;		_HMI_Init
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           	psect	text53
 10336  010000                     __ptext53:
 10337                           	opt stack 0
 10338  010000                     _SPI_Init:
 10339                           	opt stack 15
 10340                           
 10341                           ;SPI.c: 14: SPIPtr pInput;
 10342                           ;SPI.c: 16: switch (pChannel)
 10343                           
 10344                           ;incstack = 0
 10345  010000  D00C               	goto	l597
 10346  010002                     
 10347                           ;SPI.c: 19: pInput = &SPI1;
 10348  010002  0E74               	movlw	low _SPI1
 10349  010004  0100               	movlb	0	; () banked
 10350  010006  6FEF               	movwf	SPI_Init@pInput& (0+255),b
 10351  010008  0E01               	movlw	high _SPI1
 10352  01000A  D004               	goto	L6
 10353  01000C                     
 10354                           ; BSR set to: 0
 10355                           ;SPI.c: 22: pInput = &SPI2;
 10356                           
 10357                           ; BSR set to: 0
 10358  01000C  0E7F               	movlw	low _SPI2
 10359  01000E  0100               	movlb	0	; () banked
 10360  010010  6FEF               	movwf	SPI_Init@pInput& (0+255),b
 10361  010012  0E01               	movlw	high _SPI2
 10362  010014                     L6:
 10363  010014  0100               	movlb	0	; () banked
 10364  010016  6FF0               	movwf	(SPI_Init@pInput+1)& (0+255),b
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;SPI.c: 24: };
 10368                           
 10369                           ;SPI.c: 23: break;
 10370  010018  D008               	goto	l599
 10371  01001A                     l597:
 10372                           
 10373                           ; BSR set to: 0
 10374  01001A  0100               	movlb	0	; () banked
 10375  01001C  51ED               	movf	SPI_Init@pChannel& (0+255),w,b
 10376                           
 10377                           ; Switch size 1, requested type "space"
 10378                           ; Number of cases is 2, Range of values is 0 to 1
 10379                           ; switch strategies available:
 10380                           ; Name         Instructions Cycles
 10381                           ; simple_byte            7     4 (average)
 10382                           ;	Chosen strategy is simple_byte
 10383  01001E  0A00               	xorlw	0	; case 0
 10384  010020  B4D8               	btfsc	status,2,c
 10385  010022  D7EF               	goto	l598
 10386  010024  0A01               	xorlw	1	; case 1
 10387  010026  B4D8               	btfsc	status,2,c
 10388  010028  D7F1               	goto	l600
 10389  01002A                     l599:
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;SPI.c: 26: pInput->mChannel = pChannel;
 10393                           
 10394                           ; BSR set to: 0
 10395  01002A  0100               	movlb	0	; () banked
 10396  01002C  EE20 F002          	lfsr	2,2
 10397  010030  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10398  010032  26D9               	addwf	fsr2l,f,c
 10399  010034  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10400  010036  22DA               	addwfc	fsr2h,f,c
 10401  010038  C0ED  FFDF         	movff	SPI_Init@pChannel,indf2
 10402                           
 10403                           ;SPI.c: 35: switch (pChannel)
 10404  01003C  D0B1               	goto	l601
 10405  01003E                     
 10406                           ; BSR set to: 0
 10407                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 10408                           
 10409                           ; BSR set to: 0
 10410  01003E  0E9E               	movlw	low _PortC
 10411  010040  0100               	movlb	0	; () banked
 10412  010042  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10413  010044  0E00               	movlw	high _PortC
 10414  010046  0100               	movlb	0	; () banked
 10415  010048  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10416  01004A  0E02               	movlw	2
 10417  01004C  0100               	movlb	0	; () banked
 10418  01004E  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10419  010050  0E03               	movlw	3
 10420  010052  0100               	movlb	0	; () banked
 10421  010054  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10422  010056  EC29  F087         	call	_Port_SetPinType	;wreg free
 10423                           
 10424                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 10425  01005A  0E9E               	movlw	low _PortC
 10426  01005C  0100               	movlb	0	; () banked
 10427  01005E  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10428  010060  0E00               	movlw	high _PortC
 10429  010062  0100               	movlb	0	; () banked
 10430  010064  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10431  010066  0E03               	movlw	3
 10432  010068  0100               	movlb	0	; () banked
 10433  01006A  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10434  01006C  0E03               	movlw	3
 10435  01006E  0100               	movlb	0	; () banked
 10436  010070  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10437  010072  EC29  F087         	call	_Port_SetPinType	;wreg free
 10438                           
 10439                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 10440  010076  0E9E               	movlw	low _PortC
 10441  010078  0100               	movlb	0	; () banked
 10442  01007A  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10443  01007C  0E00               	movlw	high _PortC
 10444  01007E  0100               	movlb	0	; () banked
 10445  010080  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10446  010082  0E05               	movlw	5
 10447  010084  0100               	movlb	0	; () banked
 10448  010086  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10449  010088  0E03               	movlw	3
 10450  01008A  0100               	movlb	0	; () banked
 10451  01008C  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10452  01008E  EC29  F087         	call	_Port_SetPinType	;wreg free
 10453                           
 10454                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 10455  010092  0E9E               	movlw	low _PortC
 10456  010094  0100               	movlb	0	; () banked
 10457  010096  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10458  010098  0E00               	movlw	high _PortC
 10459  01009A  0100               	movlb	0	; () banked
 10460  01009C  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10461  01009E  0E04               	movlw	4
 10462  0100A0  0100               	movlb	0	; () banked
 10463  0100A2  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10464  0100A4  0E00               	movlw	0
 10465  0100A6  0100               	movlb	0	; () banked
 10466  0100A8  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10467  0100AA  EC29  F087         	call	_Port_SetPinType	;wreg free
 10468                           
 10469                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 10470  0100AE  0100               	movlb	0	; () banked
 10471  0100B0  EE20 F003          	lfsr	2,3
 10472  0100B4  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10473  0100B6  26D9               	addwf	fsr2l,f,c
 10474  0100B8  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10475  0100BA  22DA               	addwfc	fsr2h,f,c
 10476  0100BC  0EC7               	movlw	199
 10477  0100BE  6EDE               	movwf	postinc2,c
 10478  0100C0  0E0F               	movlw	15
 10479  0100C2  6EDD               	movwf	postdec2,c
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 10483  0100C4  0100               	movlb	0	; () banked
 10484  0100C6  EE20 F006          	lfsr	2,6
 10485  0100CA  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10486  0100CC  26D9               	addwf	fsr2l,f,c
 10487  0100CE  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10488  0100D0  22DA               	addwfc	fsr2h,f,c
 10489  0100D2  0EC6               	movlw	198
 10490  0100D4  6EDE               	movwf	postinc2,c
 10491  0100D6  0E0F               	movlw	15
 10492  0100D8  6EDD               	movwf	postdec2,c
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 10496  0100DA  0100               	movlb	0	; () banked
 10497  0100DC  EE20 F009          	lfsr	2,9
 10498  0100E0  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10499  0100E2  26D9               	addwf	fsr2l,f,c
 10500  0100E4  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10501  0100E6  22DA               	addwfc	fsr2h,f,c
 10502  0100E8  0EC9               	movlw	201
 10503  0100EA  D056               	goto	L7
 10504  0100EC                     
 10505                           ; BSR set to: 0
 10506                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 10507                           
 10508                           ; BSR set to: 0
 10509  0100EC  0E94               	movlw	low _PortD
 10510  0100EE  0100               	movlb	0	; () banked
 10511  0100F0  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10512  0100F2  0E00               	movlw	high _PortD
 10513  0100F4  0100               	movlb	0	; () banked
 10514  0100F6  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10515  0100F8  0E07               	movlw	7
 10516  0100FA  0100               	movlb	0	; () banked
 10517  0100FC  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10518  0100FE  0E03               	movlw	3
 10519  010100  0100               	movlb	0	; () banked
 10520  010102  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10521  010104  EC29  F087         	call	_Port_SetPinType	;wreg free
 10522                           
 10523                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 10524  010108  0E94               	movlw	low _PortD
 10525  01010A  0100               	movlb	0	; () banked
 10526  01010C  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10527  01010E  0E00               	movlw	high _PortD
 10528  010110  0100               	movlb	0	; () banked
 10529  010112  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10530  010114  0E06               	movlw	6
 10531  010116  0100               	movlb	0	; () banked
 10532  010118  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10533  01011A  0E03               	movlw	3
 10534  01011C  0100               	movlb	0	; () banked
 10535  01011E  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10536  010120  EC29  F087         	call	_Port_SetPinType	;wreg free
 10537                           
 10538                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 10539  010124  0E94               	movlw	low _PortD
 10540  010126  0100               	movlb	0	; () banked
 10541  010128  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10542  01012A  0E00               	movlw	high _PortD
 10543  01012C  0100               	movlb	0	; () banked
 10544  01012E  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10545  010130  0E04               	movlw	4
 10546  010132  0100               	movlb	0	; () banked
 10547  010134  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10548  010136  0E03               	movlw	3
 10549  010138  0100               	movlb	0	; () banked
 10550  01013A  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10551  01013C  EC29  F087         	call	_Port_SetPinType	;wreg free
 10552                           
 10553                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 10554  010140  0E94               	movlw	low _PortD
 10555  010142  0100               	movlb	0	; () banked
 10556  010144  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 10557  010146  0E00               	movlw	high _PortD
 10558  010148  0100               	movlb	0	; () banked
 10559  01014A  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10560  01014C  0E05               	movlw	5
 10561  01014E  0100               	movlb	0	; () banked
 10562  010150  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 10563  010152  0E00               	movlw	0
 10564  010154  0100               	movlb	0	; () banked
 10565  010156  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 10566  010158  EC29  F087         	call	_Port_SetPinType	;wreg free
 10567                           
 10568                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 10569  01015C  0100               	movlb	0	; () banked
 10570  01015E  EE20 F003          	lfsr	2,3
 10571  010162  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10572  010164  26D9               	addwf	fsr2l,f,c
 10573  010166  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10574  010168  22DA               	addwfc	fsr2h,f,c
 10575  01016A  0E6D               	movlw	109
 10576  01016C  6EDE               	movwf	postinc2,c
 10577  01016E  0E0F               	movlw	15
 10578  010170  6EDD               	movwf	postdec2,c
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 10582  010172  0100               	movlb	0	; () banked
 10583  010174  EE20 F006          	lfsr	2,6
 10584  010178  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10585  01017A  26D9               	addwf	fsr2l,f,c
 10586  01017C  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10587  01017E  22DA               	addwfc	fsr2h,f,c
 10588  010180  0E6C               	movlw	108
 10589  010182  6EDE               	movwf	postinc2,c
 10590  010184  0E0F               	movlw	15
 10591  010186  6EDD               	movwf	postdec2,c
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 10595  010188  0100               	movlb	0	; () banked
 10596  01018A  EE20 F009          	lfsr	2,9
 10597  01018E  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10598  010190  26D9               	addwf	fsr2l,f,c
 10599  010192  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10600  010194  22DA               	addwfc	fsr2h,f,c
 10601  010196  0E6F               	movlw	111
 10602  010198                     L7:
 10603  010198  6EDE               	movwf	postinc2,c
 10604  01019A  0E0F               	movlw	15
 10605  01019C  6EDD               	movwf	postdec2,c
 10606                           
 10607                           ;SPI.c: 68: break;
 10608  01019E  D009               	goto	l603
 10609  0101A0                     l601:
 10610                           
 10611                           ; BSR set to: 0
 10612                           
 10613                           ; BSR set to: 0
 10614  0101A0  0100               	movlb	0	; () banked
 10615  0101A2  51ED               	movf	SPI_Init@pChannel& (0+255),w,b
 10616                           
 10617                           ; Switch size 1, requested type "space"
 10618                           ; Number of cases is 2, Range of values is 0 to 1
 10619                           ; switch strategies available:
 10620                           ; Name         Instructions Cycles
 10621                           ; simple_byte            7     4 (average)
 10622                           ;	Chosen strategy is simple_byte
 10623  0101A4  0A00               	xorlw	0	; case 0
 10624  0101A6  B4D8               	btfsc	status,2,c
 10625  0101A8  D74A               	goto	l602
 10626  0101AA  0A01               	xorlw	1	; case 1
 10627  0101AC  A4D8               	btfss	status,2,c
 10628  0101AE  0012               	return	
 10629  0101B0  D79D               	goto	l604
 10630  0101B2                     l603:
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 10634                           
 10635                           ; BSR set to: 0
 10636  0101B2  0100               	movlb	0	; () banked
 10637  0101B4  EE20 F006          	lfsr	2,6
 10638  0101B8  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10639  0101BA  26D9               	addwf	fsr2l,f,c
 10640  0101BC  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10641  0101BE  22DA               	addwfc	fsr2h,f,c
 10642  0101C0  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10643  0101C4  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10644  0101C8  0E05               	movlw	5
 10645  0101CA  0100               	movlb	0	; () banked
 10646  0101CC  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10647  0101CE  0E00               	movlw	0
 10648  0101D0  0100               	movlb	0	; () banked
 10649  0101D2  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10650  0101D4  EC11  F095         	call	_Byte_SetBit	;wreg free
 10651                           
 10652                           ;SPI.c: 77: switch(pMode)
 10653  0101D8  D09C               	goto	l607
 10654  0101DA                     
 10655                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 10656  0101DA  0100               	movlb	0	; () banked
 10657  0101DC  EE20 F006          	lfsr	2,6
 10658  0101E0  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10659  0101E2  26D9               	addwf	fsr2l,f,c
 10660  0101E4  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10661  0101E6  22DA               	addwfc	fsr2h,f,c
 10662  0101E8  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10663  0101EC  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10664  0101F0  0E04               	movlw	4
 10665  0101F2  0100               	movlb	0	; () banked
 10666  0101F4  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10667  0101F6  0E00               	movlw	0
 10668  0101F8  0100               	movlb	0	; () banked
 10669  0101FA  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10670  0101FC  EC11  F095         	call	_Byte_SetBit	;wreg free
 10671                           
 10672                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 10673  010200  0100               	movlb	0	; () banked
 10674  010202  EE20 F003          	lfsr	2,3
 10675  010206  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10676  010208  26D9               	addwf	fsr2l,f,c
 10677  01020A  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10678  01020C  22DA               	addwfc	fsr2h,f,c
 10679  01020E  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10680  010212  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10681  010216  0E06               	movlw	6
 10682  010218  0100               	movlb	0	; () banked
 10683  01021A  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10684  01021C  0E00               	movlw	0
 10685  01021E  0100               	movlb	0	; () banked
 10686  010220  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10687  010222  EC11  F095         	call	_Byte_SetBit	;wreg free
 10688                           
 10689                           ;SPI.c: 82: break;
 10690  010226  D084               	goto	l609
 10691  010228                     
 10692                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 10693  010228  0100               	movlb	0	; () banked
 10694  01022A  EE20 F006          	lfsr	2,6
 10695  01022E  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10696  010230  26D9               	addwf	fsr2l,f,c
 10697  010232  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10698  010234  22DA               	addwfc	fsr2h,f,c
 10699  010236  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10700  01023A  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10701  01023E  0E04               	movlw	4
 10702  010240  0100               	movlb	0	; () banked
 10703  010242  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10704  010244  0E00               	movlw	0
 10705  010246  0100               	movlb	0	; () banked
 10706  010248  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10707  01024A  EC11  F095         	call	_Byte_SetBit	;wreg free
 10708                           
 10709                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 10710  01024E  0100               	movlb	0	; () banked
 10711  010250  EE20 F003          	lfsr	2,3
 10712  010254  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10713  010256  26D9               	addwf	fsr2l,f,c
 10714  010258  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10715  01025A  22DA               	addwfc	fsr2h,f,c
 10716  01025C  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10717  010260  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10718  010264  0E06               	movlw	6
 10719  010266  0100               	movlb	0	; () banked
 10720  010268  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10721  01026A  0E01               	movlw	1
 10722  01026C  0100               	movlb	0	; () banked
 10723  01026E  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10724  010270  EC11  F095         	call	_Byte_SetBit	;wreg free
 10725                           
 10726                           ;SPI.c: 86: break;
 10727  010274  D05D               	goto	l609
 10728  010276                     
 10729                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 10730  010276  0100               	movlb	0	; () banked
 10731  010278  EE20 F006          	lfsr	2,6
 10732  01027C  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10733  01027E  26D9               	addwf	fsr2l,f,c
 10734  010280  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10735  010282  22DA               	addwfc	fsr2h,f,c
 10736  010284  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10737  010288  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10738  01028C  0E04               	movlw	4
 10739  01028E  0100               	movlb	0	; () banked
 10740  010290  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10741  010292  0E01               	movlw	1
 10742  010294  0100               	movlb	0	; () banked
 10743  010296  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10744  010298  EC11  F095         	call	_Byte_SetBit	;wreg free
 10745                           
 10746                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 10747  01029C  0100               	movlb	0	; () banked
 10748  01029E  EE20 F003          	lfsr	2,3
 10749  0102A2  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10750  0102A4  26D9               	addwf	fsr2l,f,c
 10751  0102A6  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10752  0102A8  22DA               	addwfc	fsr2h,f,c
 10753  0102AA  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10754  0102AE  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10755  0102B2  0E06               	movlw	6
 10756  0102B4  0100               	movlb	0	; () banked
 10757  0102B6  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10758  0102B8  0E00               	movlw	0
 10759  0102BA  0100               	movlb	0	; () banked
 10760  0102BC  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10761  0102BE  EC11  F095         	call	_Byte_SetBit	;wreg free
 10762                           
 10763                           ;SPI.c: 90: break;
 10764  0102C2  D036               	goto	l609
 10765  0102C4                     
 10766                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 10767  0102C4  0100               	movlb	0	; () banked
 10768  0102C6  EE20 F006          	lfsr	2,6
 10769  0102CA  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10770  0102CC  26D9               	addwf	fsr2l,f,c
 10771  0102CE  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10772  0102D0  22DA               	addwfc	fsr2h,f,c
 10773  0102D2  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10774  0102D6  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10775  0102DA  0E04               	movlw	4
 10776  0102DC  0100               	movlb	0	; () banked
 10777  0102DE  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10778  0102E0  0E01               	movlw	1
 10779  0102E2  0100               	movlb	0	; () banked
 10780  0102E4  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10781  0102E6  EC11  F095         	call	_Byte_SetBit	;wreg free
 10782                           
 10783                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 10784  0102EA  0100               	movlb	0	; () banked
 10785  0102EC  EE20 F003          	lfsr	2,3
 10786  0102F0  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10787  0102F2  26D9               	addwf	fsr2l,f,c
 10788  0102F4  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10789  0102F6  22DA               	addwfc	fsr2h,f,c
 10790  0102F8  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10791  0102FC  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10792  010300  0E06               	movlw	6
 10793  010302  0100               	movlb	0	; () banked
 10794  010304  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10795  010306  0E01               	movlw	1
 10796  010308  0100               	movlb	0	; () banked
 10797  01030A  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10798  01030C  EC11  F095         	call	_Byte_SetBit	;wreg free
 10799                           
 10800                           ;SPI.c: 94: break;
 10801  010310  D00F               	goto	l609
 10802  010312                     l607:
 10803  010312  0100               	movlb	0	; () banked
 10804  010314  51EE               	movf	SPI_Init@pMode& (0+255),w,b
 10805                           
 10806                           ; Switch size 1, requested type "space"
 10807                           ; Number of cases is 4, Range of values is 0 to 3
 10808                           ; switch strategies available:
 10809                           ; Name         Instructions Cycles
 10810                           ; simple_byte           13     7 (average)
 10811                           ;	Chosen strategy is simple_byte
 10812  010316  0A00               	xorlw	0	; case 0
 10813  010318  B4D8               	btfsc	status,2,c
 10814  01031A  D75F               	goto	l608
 10815  01031C  0A01               	xorlw	1	; case 1
 10816  01031E  B4D8               	btfsc	status,2,c
 10817  010320  D783               	goto	l610
 10818  010322  0A03               	xorlw	3	; case 2
 10819  010324  B4D8               	btfsc	status,2,c
 10820  010326  D7A7               	goto	l611
 10821  010328  0A01               	xorlw	1	; case 3
 10822  01032A  A4D8               	btfss	status,2,c
 10823  01032C  0012               	return	
 10824  01032E  D7CA               	goto	l612
 10825  010330                     l609:
 10826                           
 10827                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 10828                           
 10829                           ; BSR set to: 0
 10830  010330  0100               	movlb	0	; () banked
 10831  010332  EE20 F006          	lfsr	2,6
 10832  010336  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10833  010338  26D9               	addwf	fsr2l,f,c
 10834  01033A  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10835  01033C  22DA               	addwfc	fsr2h,f,c
 10836  01033E  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10837  010342  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10838  010346  0E07               	movlw	7
 10839  010348  0100               	movlb	0	; () banked
 10840  01034A  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10841  01034C  0E00               	movlw	0
 10842  01034E  0100               	movlb	0	; () banked
 10843  010350  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10844  010352  EC11  F095         	call	_Byte_SetBit	;wreg free
 10845                           
 10846                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 10847  010356  0100               	movlb	0	; () banked
 10848  010358  EE20 F006          	lfsr	2,6
 10849  01035C  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10850  01035E  26D9               	addwf	fsr2l,f,c
 10851  010360  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10852  010362  22DA               	addwfc	fsr2h,f,c
 10853  010364  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10854  010368  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10855  01036C  0E06               	movlw	6
 10856  01036E  0100               	movlb	0	; () banked
 10857  010370  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10858  010372  0E00               	movlw	0
 10859  010374  0100               	movlb	0	; () banked
 10860  010376  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10861  010378  EC11  F095         	call	_Byte_SetBit	;wreg free
 10862                           
 10863                           ;SPI.c: 106: Timer2_Init(pClock);
 10864  01037C  C0E9  F0C9         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 10865  010380  C0EA  F0CA         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 10866  010384  C0EB  F0CB         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 10867  010388  C0EC  F0CC         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 10868  01038C  ECFD  F08A         	call	_Timer2_Init	;wreg free
 10869                           
 10870                           ;SPI.c: 112: SPI_DisableISR(pInput);
 10871  010390  C0EF  F0BC         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 10872  010394  C0F0  F0BD         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 10873  010398  EC7B  F098         	call	_SPI_DisableISR	;wreg free
 10874                           
 10875                           ;SPI.c: 116: switch (pChannel)
 10876  01039C  D004               	goto	l614
 10877  01039E                     l615:
 10878                           
 10879                           ; BSR set to: 0
 10880  01039E  869F               	bsf	3999,3,c	;volatile
 10881  0103A0  D00B               	goto	l616
 10882  0103A2                     l617:
 10883                           
 10884                           ; BSR set to: 0
 10885  0103A2  8EA5               	bsf	4005,7,c	;volatile
 10886  0103A4  D009               	goto	l616
 10887  0103A6                     l614:
 10888                           
 10889                           ; BSR set to: 0
 10890  0103A6  0100               	movlb	0	; () banked
 10891  0103A8  51ED               	movf	SPI_Init@pChannel& (0+255),w,b
 10892                           
 10893                           ; Switch size 1, requested type "space"
 10894                           ; Number of cases is 2, Range of values is 0 to 1
 10895                           ; switch strategies available:
 10896                           ; Name         Instructions Cycles
 10897                           ; simple_byte            7     4 (average)
 10898                           ;	Chosen strategy is simple_byte
 10899  0103AA  0A00               	xorlw	0	; case 0
 10900  0103AC  B4D8               	btfsc	status,2,c
 10901  0103AE  D7F7               	goto	l615
 10902  0103B0  0A01               	xorlw	1	; case 1
 10903  0103B2  A4D8               	btfss	status,2,c
 10904  0103B4  0012               	return	
 10905  0103B6  D7F5               	goto	l617
 10906  0103B8                     l616:
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;SPI.c: 124: SPI_DCS(pInput);
 10910                           
 10911                           ; BSR set to: 0
 10912  0103B8  C0EF  F0BC         	movff	SPI_Init@pInput,SPI_DCS@pInput
 10913  0103BC  C0F0  F0BD         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 10914  0103C0  EC34  F098         	call	_SPI_DCS	;wreg free
 10915                           
 10916                           ;SPI.c: 126: pInput->mBusy = 0;
 10917  0103C4  C0EF  FFD9         	movff	SPI_Init@pInput,fsr2l
 10918  0103C8  C0F0  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 10919  0103CC  0E00               	movlw	0
 10920  0103CE  6EDF               	movwf	indf2,c
 10921                           
 10922                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 10923  0103D0  0100               	movlb	0	; () banked
 10924  0103D2  EE20 F006          	lfsr	2,6
 10925  0103D6  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10926  0103D8  26D9               	addwf	fsr2l,f,c
 10927  0103DA  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10928  0103DC  22DA               	addwfc	fsr2h,f,c
 10929  0103DE  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 10930  0103E2  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 10931  0103E6  0E00               	movlw	0
 10932  0103E8  0100               	movlb	0	; () banked
 10933  0103EA  6FC9               	movwf	Byte_SetQuad@pQuad& (0+255),b
 10934  0103EC  0E03               	movlw	3
 10935  0103EE  0100               	movlb	0	; () banked
 10936  0103F0  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 10937  0103F2  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 10938                           
 10939                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 10940  0103F6  0100               	movlb	0	; () banked
 10941  0103F8  EE20 F006          	lfsr	2,6
 10942  0103FC  51EF               	movf	SPI_Init@pInput& (0+255),w,b
 10943  0103FE  26D9               	addwf	fsr2l,f,c
 10944  010400  51F0               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10945  010402  22DA               	addwfc	fsr2h,f,c
 10946  010404  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 10947  010408  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 10948  01040C  0E05               	movlw	5
 10949  01040E  0100               	movlb	0	; () banked
 10950  010410  6FBE               	movwf	Byte_SetBit@pBit& (0+255),b
 10951  010412  0E01               	movlw	1
 10952  010414  0100               	movlb	0	; () banked
 10953  010416  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 10954  010418  EC11  F095         	call	_Byte_SetBit	;wreg free
 10955  01041C  0012               	return		;funcret
 10956  01041E                     __end_of_SPI_Init:
 10957                           	opt stack 0
 10958                           tosu	equ	0xFFF
 10959                           tosh	equ	0xFFE
 10960                           tosl	equ	0xFFD
 10961                           pclath	equ	0xFFA
 10962                           tblptru	equ	0xFF8
 10963                           tblptrh	equ	0xFF7
 10964                           tblptrl	equ	0xFF6
 10965                           tablat	equ	0xFF5
 10966                           prodh	equ	0xFF4
 10967                           prodl	equ	0xFF3
 10968                           intcon	equ	0xFF2
 10969                           postinc0	equ	0xFEE
 10970                           wreg	equ	0xFE8
 10971                           indf1	equ	0xFE7
 10972                           postdec1	equ	0xFE5
 10973                           fsr1h	equ	0xFE2
 10974                           fsr1l	equ	0xFE1
 10975                           indf2	equ	0xFDF
 10976                           postinc2	equ	0xFDE
 10977                           postdec2	equ	0xFDD
 10978                           plusw2	equ	0xFDB
 10979                           fsr2h	equ	0xFDA
 10980                           fsr2l	equ	0xFD9
 10981                           status	equ	0xFD8
 10982                           
 10983 ;; *************** function _Timer2_Init *****************
 10984 ;; Defined at:
 10985 ;;		line 10 in file "Library/Timer2.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 10990 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 10991 ;;  RDIV            4   18[BANK0 ] unsigned long 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  1    wreg      void 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11005 ;;Total ram usage:       17 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    8
 11008 ;; This function calls:
 11009 ;;		_Timer2_Clear
 11010 ;;		___lldiv
 11011 ;; This function is called by:
 11012 ;;		_SPI_Init
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           	psect	text54
 11017  0115FA                     __ptext54:
 11018                           	opt stack 0
 11019  0115FA                     _Timer2_Init:
 11020                           	opt stack 18
 11021                           
 11022                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 11023                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 11024                           ;Timer2.c: 14: static UINT8 PRE = 0;
 11025                           ;Timer2.c: 15: static UINT32 DIV = 0;
 11026                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 11027                           
 11028                           ;incstack = 0
 11029  0115FA  0E00               	movlw	0
 11030  0115FC  0100               	movlb	0	; () banked
 11031  0115FE  6FD2               	movwf	Timer2_Init@pCPUClock& (0+255),b
 11032  011600  0E6C               	movlw	108
 11033  011602  6FD3               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 11034  011604  0EDC               	movlw	220
 11035  011606  6FD4               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 11036  011608  0E02               	movlw	2
 11037  01160A  6FD5               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 11041                           ;Timer2.c: 20: pFrequency *= 2;
 11042  01160C  0100               	movlb	0	; () banked
 11043  01160E  90D8               	bcf	status,0,c
 11044  011610  37C9               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 11045  011612  37CA               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 11046  011614  37CB               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 11047  011616  37CC               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;Timer2.c: 23: pCPUClock /= 4;
 11051  011618  0E02               	movlw	2
 11052  01161A  0100               	movlb	0	; () banked
 11053  01161C  6FCD               	movwf	??_Timer2_Init& (0+255),b
 11054  01161E                     u6925:
 11055  01161E  90D8               	bcf	status,0,c
 11056  011620  0100               	movlb	0	; () banked
 11057  011622  33D5               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 11058  011624  33D4               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 11059  011626  33D3               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 11060  011628  33D2               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 11061  01162A  0100               	movlb	0	; () banked
 11062  01162C  2FCD               	decfsz	??_Timer2_Init& (0+255),f,b
 11063  01162E  D7F7               	goto	u6925
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 11067  011630  C0D2  F0BC         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 11068  011634  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 11069  011638  C0D4  F0BE         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 11070  01163C  C0D5  F0BF         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 11071  011640  C0C9  F0C0         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 11072  011644  C0CA  F0C1         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 11073  011648  C0CB  F0C2         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 11074  01164C  C0CC  F0C3         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 11075  011650  ECC7  F08E         	call	___lldiv	;wreg free
 11076  011654  C0BC  F0D6         	movff	?___lldiv,Timer2_Init@DIVIDE
 11077  011658  C0BD  F0D7         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 11078  01165C  C0BE  F0D8         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 11079  011660  C0BF  F0D9         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 11080                           
 11081                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 11082  011664  D010               	goto	l1828
 11083  011666                     l10902:
 11084                           
 11085                           ;Timer2.c: 28: {
 11086                           ;Timer2.c: 29: RDIV = 0;
 11087  011666  0E00               	movlw	0
 11088  011668  0100               	movlb	0	; () banked
 11089  01166A  6FCE               	movwf	Timer2_Init@RDIV& (0+255),b
 11090  01166C  0E00               	movlw	0
 11091  01166E  6FCF               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 11092  011670  0E00               	movlw	0
 11093  011672  6FD0               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 11094  011674  0E00               	movlw	0
 11095  011676  6FD1               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;Timer2.c: 30: INDEX ++;
 11099  011678  0100               	movlb	0	; () banked
 11100  01167A  2B87               	incf	Timer2_Init@INDEX& (0+255),f,b
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;Timer2.c: 31: if (INDEX >= 3)
 11104  01167C  0E02               	movlw	2
 11105  01167E  0100               	movlb	0	; () banked
 11106  011680  6587               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 11107  011682  D001               	goto	l1828
 11108  011684  D026               	goto	u6940
 11109  011686                     l1828:
 11110                           
 11111                           ; BSR set to: 0
 11112                           
 11113                           ; BSR set to: 0
 11114  011686  C0D6  F0BC         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 11115  01168A  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 11116  01168E  C0D8  F0BE         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 11117  011692  C0D9  F0BF         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 11118  011696  0100               	movlb	0	; () banked
 11119  011698  5187               	movf	Timer2_Init@INDEX& (0+255),w,b
 11120  01169A  0D01               	mullw	1
 11121  01169C  0E08               	movlw	low Timer2_Init@PRESCALE
 11122  01169E  24F3               	addwf	prodl,w,c
 11123  0116A0  6EF6               	movwf	tblptrl,c
 11124  0116A2  0EFE               	movlw	high Timer2_Init@PRESCALE
 11125  0116A4  20F4               	addwfc	prodh,w,c
 11126  0116A6  6EF7               	movwf	tblptrh,c
 11127  0116A8                     	if	1	;There are 3 active tblptr bytes
 11128  0116A8  6AF8               	clrf	tblptru,c
 11129  0116AA  0E00               	movlw	low (__mediumconst shr (0+16))
 11130  0116AC  22F8               	addwfc	tblptru,f,c
 11131  0116AE                     	endif
 11132  0116AE  0008               	tblrd		*
 11133  0116B0  50F5               	movf	tablat,w,c
 11134  0116B2  0100               	movlb	0	; () banked
 11135  0116B4  6FC0               	movwf	___lldiv@divisor& (0+255),b
 11136  0116B6  6BC1               	clrf	(___lldiv@divisor+1)& (0+255),b
 11137  0116B8  6BC2               	clrf	(___lldiv@divisor+2)& (0+255),b
 11138  0116BA  6BC3               	clrf	(___lldiv@divisor+3)& (0+255),b
 11139  0116BC  ECC7  F08E         	call	___lldiv	;wreg free
 11140  0116C0  0100               	movlb	0	; () banked
 11141  0116C2  51BF               	movf	(?___lldiv+3)& (0+255),w,b
 11142  0116C4  0100               	movlb	0	; () banked
 11143  0116C6  11BE               	iorwf	(?___lldiv+2)& (0+255),w,b
 11144  0116C8  E1CE               	bnz	l10902
 11145  0116CA  0100               	movlb	0	; () banked
 11146  0116CC  05BD               	decf	(?___lldiv+1)& (0+255),w,b
 11147  0116CE  B0D8               	btfsc	status,0,c
 11148  0116D0  D7CA               	goto	l1827
 11149  0116D2                     u6940:
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;Timer2.c: 33: }
 11153                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 11154                           
 11155                           ; BSR set to: 0
 11156  0116D2  50CA               	movf	4042,w,c	;volatile
 11157  0116D4  0100               	movlb	0	; () banked
 11158  0116D6  1987               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 11159  0116D8  0BFC               	andlw	-4
 11160  0116DA  1987               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 11161  0116DC  6ECA               	movwf	4042,c	;volatile
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 11165  0116DE  84CA               	bsf	4042,2,c	;volatile
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;Timer2.c: 44: Timer2_Clear();
 11169  0116E0  ECD0  F099         	call	_Timer2_Clear	;wreg free
 11170                           
 11171                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 11172  0116E4  0100               	movlb	0	; () banked
 11173  0116E6  5187               	movf	Timer2_Init@INDEX& (0+255),w,b
 11174  0116E8  0D01               	mullw	1
 11175  0116EA  0E08               	movlw	low Timer2_Init@PRESCALE
 11176  0116EC  24F3               	addwf	prodl,w,c
 11177  0116EE  6EF6               	movwf	tblptrl,c
 11178  0116F0  0EFE               	movlw	high Timer2_Init@PRESCALE
 11179  0116F2  20F4               	addwfc	prodh,w,c
 11180  0116F4  6EF7               	movwf	tblptrh,c
 11181  0116F6                     	if	1	;There are 3 active tblptr bytes
 11182  0116F6  6AF8               	clrf	tblptru,c
 11183  0116F8  0E00               	movlw	low (__mediumconst shr (0+16))
 11184  0116FA  22F8               	addwfc	tblptru,f,c
 11185  0116FC                     	endif
 11186  0116FC  0008               	tblrd		*
 11187  0116FE  CFF5 F086          	movff	tablat,Timer2_Init@PRE
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 11191  011702  0EFF               	movlw	255
 11192  011704  0100               	movlb	0	; () banked
 11193  011706  25D6               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 11194  011708  0101               	movlb	1	; () banked
 11195  01170A  6F22               	movwf	Timer2_Init@DIV& (0+255),b
 11196  01170C  0EFF               	movlw	255
 11197  01170E  0100               	movlb	0	; () banked
 11198  011710  21D7               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 11199  011712  0101               	movlb	1	; () banked
 11200  011714  6F23               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 11201  011716  0EFF               	movlw	255
 11202  011718  0100               	movlb	0	; () banked
 11203  01171A  21D8               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 11204  01171C  0101               	movlb	1	; () banked
 11205  01171E  6F24               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 11206  011720  0EFF               	movlw	255
 11207  011722  0100               	movlb	0	; () banked
 11208  011724  21D9               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 11209  011726  0101               	movlb	1	; () banked
 11210  011728  6F25               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 11211                           
 11212                           ; BSR set to: 1
 11213                           ;Timer2.c: 48: INDEX = DIV/PRE;
 11214  01172A  C122  F0BC         	movff	Timer2_Init@DIV,___lldiv@dividend
 11215  01172E  C123  F0BD         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 11216  011732  C124  F0BE         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 11217  011736  C125  F0BF         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 11218  01173A  0100               	movlb	0	; () banked
 11219  01173C  5186               	movf	Timer2_Init@PRE& (0+255),w,b
 11220  01173E  0100               	movlb	0	; () banked
 11221  011740  6FC0               	movwf	___lldiv@divisor& (0+255),b
 11222  011742  6BC1               	clrf	(___lldiv@divisor+1)& (0+255),b
 11223  011744  6BC2               	clrf	(___lldiv@divisor+2)& (0+255),b
 11224  011746  6BC3               	clrf	(___lldiv@divisor+3)& (0+255),b
 11225  011748  ECC7  F08E         	call	___lldiv	;wreg free
 11226  01174C  0100               	movlb	0	; () banked
 11227  01174E  51BC               	movf	?___lldiv& (0+255),w,b
 11228  011750  0100               	movlb	0	; () banked
 11229  011752  6F87               	movwf	Timer2_Init@INDEX& (0+255),b
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;Timer2.c: 49: PR2 = INDEX;
 11233  011754  C087  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 11234                           
 11235                           ; BSR set to: 0
 11236  011758  0012               	return		;funcret
 11237  01175A                     __end_of_Timer2_Init:
 11238                           	opt stack 0
 11239                           tosu	equ	0xFFF
 11240                           tosh	equ	0xFFE
 11241                           tosl	equ	0xFFD
 11242                           pclath	equ	0xFFA
 11243                           tblptru	equ	0xFF8
 11244                           tblptrh	equ	0xFF7
 11245                           tblptrl	equ	0xFF6
 11246                           tablat	equ	0xFF5
 11247                           prodh	equ	0xFF4
 11248                           prodl	equ	0xFF3
 11249                           intcon	equ	0xFF2
 11250                           postinc0	equ	0xFEE
 11251                           wreg	equ	0xFE8
 11252                           indf1	equ	0xFE7
 11253                           postdec1	equ	0xFE5
 11254                           fsr1h	equ	0xFE2
 11255                           fsr1l	equ	0xFE1
 11256                           indf2	equ	0xFDF
 11257                           postinc2	equ	0xFDE
 11258                           postdec2	equ	0xFDD
 11259                           plusw2	equ	0xFDB
 11260                           fsr2h	equ	0xFDA
 11261                           fsr2l	equ	0xFD9
 11262                           status	equ	0xFD8
 11263                           
 11264 ;; *************** function ___lldiv *****************
 11265 ;; Defined at:
 11266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;  dividend        4    0[BANK0 ] unsigned long 
 11269 ;;  divisor         4    4[BANK0 ] unsigned long 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  quotient        4    8[BANK0 ] unsigned long 
 11272 ;;  counter         1   12[BANK0 ] unsigned char 
 11273 ;; Return value:  Size  Location     Type
 11274 ;;                  4    0[BANK0 ] unsigned long 
 11275 ;; Registers used:
 11276 ;;		wreg, status,2, status,0
 11277 ;; Tracked objects:
 11278 ;;		On entry : 0/0
 11279 ;;		On exit  : 0/0
 11280 ;;		Unchanged: 0/0
 11281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11282 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11285 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11286 ;;Total ram usage:       13 bytes
 11287 ;; Hardware stack levels used:    1
 11288 ;; Hardware stack levels required when called:    7
 11289 ;; This function calls:
 11290 ;;		Nothing
 11291 ;; This function is called by:
 11292 ;;		_Timer0_Init
 11293 ;;		_Timer2_Init
 11294 ;;		_rand_between
 11295 ;;		_I2C_Init
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text55
 11300  011D8E                     __ptext55:
 11301                           	opt stack 0
 11302  011D8E                     ___lldiv:
 11303                           	opt stack 20
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;incstack = 0
 11307  011D8E  0E00               	movlw	0
 11308  011D90  0100               	movlb	0	; () banked
 11309  011D92  6FC4               	movwf	___lldiv@quotient& (0+255),b
 11310  011D94  0E00               	movlw	0
 11311  011D96  6FC5               	movwf	(___lldiv@quotient+1)& (0+255),b
 11312  011D98  0E00               	movlw	0
 11313  011D9A  6FC6               	movwf	(___lldiv@quotient+2)& (0+255),b
 11314  011D9C  0E00               	movlw	0
 11315  011D9E  6FC7               	movwf	(___lldiv@quotient+3)& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318  011DA0  0100               	movlb	0	; () banked
 11319  011DA2  51C0               	movf	___lldiv@divisor& (0+255),w,b
 11320  011DA4  0100               	movlb	0	; () banked
 11321  011DA6  11C1               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11322  011DA8  0100               	movlb	0	; () banked
 11323  011DAA  11C2               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11324  011DAC  0100               	movlb	0	; () banked
 11325  011DAE  11C3               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11326  011DB0  B4D8               	btfsc	status,2,c
 11327  011DB2  D042               	goto	l2754
 11328                           
 11329                           ; BSR set to: 0
 11330  011DB4  0E01               	movlw	1
 11331  011DB6  0100               	movlb	0	; () banked
 11332  011DB8  6FC8               	movwf	___lldiv@counter& (0+255),b
 11333  011DBA  D008               	goto	l2749
 11334  011DBC                     
 11335                           ; BSR set to: 0
 11336                           
 11337                           ; BSR set to: 0
 11338  011DBC  0100               	movlb	0	; () banked
 11339  011DBE  90D8               	bcf	status,0,c
 11340  011DC0  37C0               	rlcf	___lldiv@divisor& (0+255),f,b
 11341  011DC2  37C1               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11342  011DC4  37C2               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11343  011DC6  37C3               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11344  011DC8  0100               	movlb	0	; () banked
 11345  011DCA  2BC8               	incf	___lldiv@counter& (0+255),f,b
 11346  011DCC                     l2749:
 11347                           
 11348                           ; BSR set to: 0
 11349                           
 11350                           ; BSR set to: 0
 11351  011DCC  0100               	movlb	0	; () banked
 11352  011DCE  AFC3               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11353  011DD0  D7F5               	goto	l2750
 11354  011DD2                     u6800:
 11355                           
 11356                           ; BSR set to: 0
 11357                           
 11358                           ; BSR set to: 0
 11359                           
 11360                           ; BSR set to: 0
 11361  011DD2  0100               	movlb	0	; () banked
 11362  011DD4  90D8               	bcf	status,0,c
 11363  011DD6  37C4               	rlcf	___lldiv@quotient& (0+255),f,b
 11364  011DD8  37C5               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11365  011DDA  37C6               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11366  011DDC  37C7               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11367                           
 11368                           ; BSR set to: 0
 11369  011DDE  0100               	movlb	0	; () banked
 11370  011DE0  51C0               	movf	___lldiv@divisor& (0+255),w,b
 11371  011DE2  0100               	movlb	0	; () banked
 11372  011DE4  5DBC               	subwf	___lldiv@dividend& (0+255),w,b
 11373  011DE6  0100               	movlb	0	; () banked
 11374  011DE8  51C1               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11375  011DEA  0100               	movlb	0	; () banked
 11376  011DEC  59BD               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11377  011DEE  0100               	movlb	0	; () banked
 11378  011DF0  51C2               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11379  011DF2  0100               	movlb	0	; () banked
 11380  011DF4  59BE               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11381  011DF6  0100               	movlb	0	; () banked
 11382  011DF8  51C3               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11383  011DFA  0100               	movlb	0	; () banked
 11384  011DFC  59BF               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11385  011DFE  A0D8               	btfss	status,0,c
 11386  011E00  D012               	goto	l2753
 11387                           
 11388                           ; BSR set to: 0
 11389  011E02  0100               	movlb	0	; () banked
 11390  011E04  51C0               	movf	___lldiv@divisor& (0+255),w,b
 11391  011E06  0100               	movlb	0	; () banked
 11392  011E08  5FBC               	subwf	___lldiv@dividend& (0+255),f,b
 11393  011E0A  0100               	movlb	0	; () banked
 11394  011E0C  51C1               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11395  011E0E  0100               	movlb	0	; () banked
 11396  011E10  5BBD               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11397  011E12  0100               	movlb	0	; () banked
 11398  011E14  51C2               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11399  011E16  0100               	movlb	0	; () banked
 11400  011E18  5BBE               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11401  011E1A  0100               	movlb	0	; () banked
 11402  011E1C  51C3               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11403  011E1E  0100               	movlb	0	; () banked
 11404  011E20  5BBF               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11405                           
 11406                           ; BSR set to: 0
 11407  011E22  0100               	movlb	0	; () banked
 11408  011E24  81C4               	bsf	___lldiv@quotient& (0+255),0,b
 11409  011E26                     l2753:
 11410                           
 11411                           ; BSR set to: 0
 11412                           
 11413                           ; BSR set to: 0
 11414  011E26  0100               	movlb	0	; () banked
 11415  011E28  90D8               	bcf	status,0,c
 11416  011E2A  33C3               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11417  011E2C  33C2               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11418  011E2E  33C1               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11419  011E30  33C0               	rrcf	___lldiv@divisor& (0+255),f,b
 11420                           
 11421                           ; BSR set to: 0
 11422  011E32  0100               	movlb	0	; () banked
 11423  011E34  2FC8               	decfsz	___lldiv@counter& (0+255),f,b
 11424  011E36  D7CD               	goto	u6800
 11425  011E38                     l2754:
 11426                           
 11427                           ; BSR set to: 0
 11428                           
 11429                           ; BSR set to: 0
 11430  011E38  C0C4  F0BC         	movff	___lldiv@quotient,?___lldiv
 11431  011E3C  C0C5  F0BD         	movff	___lldiv@quotient+1,?___lldiv+1
 11432  011E40  C0C6  F0BE         	movff	___lldiv@quotient+2,?___lldiv+2
 11433  011E44  C0C7  F0BF         	movff	___lldiv@quotient+3,?___lldiv+3
 11434                           
 11435                           ; BSR set to: 0
 11436  011E48  0012               	return		;funcret
 11437  011E4A                     __end_of___lldiv:
 11438                           	opt stack 0
 11439                           tosu	equ	0xFFF
 11440                           tosh	equ	0xFFE
 11441                           tosl	equ	0xFFD
 11442                           pclath	equ	0xFFA
 11443                           tblptru	equ	0xFF8
 11444                           tblptrh	equ	0xFF7
 11445                           tblptrl	equ	0xFF6
 11446                           tablat	equ	0xFF5
 11447                           prodh	equ	0xFF4
 11448                           prodl	equ	0xFF3
 11449                           intcon	equ	0xFF2
 11450                           postinc0	equ	0xFEE
 11451                           wreg	equ	0xFE8
 11452                           indf1	equ	0xFE7
 11453                           postdec1	equ	0xFE5
 11454                           fsr1h	equ	0xFE2
 11455                           fsr1l	equ	0xFE1
 11456                           indf2	equ	0xFDF
 11457                           postinc2	equ	0xFDE
 11458                           postdec2	equ	0xFDD
 11459                           plusw2	equ	0xFDB
 11460                           fsr2h	equ	0xFDA
 11461                           fsr2l	equ	0xFD9
 11462                           status	equ	0xFD8
 11463                           
 11464 ;; *************** function _Timer2_Clear *****************
 11465 ;; Defined at:
 11466 ;;		line 3 in file "Library/Timer2.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;		None
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;		None
 11471 ;; Return value:  Size  Location     Type
 11472 ;;                  1    wreg      void 
 11473 ;; Registers used:
 11474 ;;		None
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;Total ram usage:        0 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; Hardware stack levels required when called:    7
 11487 ;; This function calls:
 11488 ;;		Nothing
 11489 ;; This function is called by:
 11490 ;;		_Timer2_Init
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text56
 11495  0133A0                     __ptext56:
 11496                           	opt stack 0
 11497  0133A0                     _Timer2_Clear:
 11498                           	opt stack 18
 11499                           
 11500                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;incstack = 0
 11504  0133A0  929E               	bcf	3998,1,c	;volatile
 11505                           
 11506                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 11507  0133A2  929D               	bcf	3997,1,c	;volatile
 11508                           
 11509                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 11510  0133A4  929F               	bcf	3999,1,c	;volatile
 11511  0133A6  0012               	return		;funcret
 11512  0133A8                     __end_of_Timer2_Clear:
 11513                           	opt stack 0
 11514                           tosu	equ	0xFFF
 11515                           tosh	equ	0xFFE
 11516                           tosl	equ	0xFFD
 11517                           pclath	equ	0xFFA
 11518                           tblptru	equ	0xFF8
 11519                           tblptrh	equ	0xFF7
 11520                           tblptrl	equ	0xFF6
 11521                           tablat	equ	0xFF5
 11522                           prodh	equ	0xFF4
 11523                           prodl	equ	0xFF3
 11524                           intcon	equ	0xFF2
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           indf1	equ	0xFE7
 11528                           postdec1	equ	0xFE5
 11529                           fsr1h	equ	0xFE2
 11530                           fsr1l	equ	0xFE1
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           plusw2	equ	0xFDB
 11535                           fsr2h	equ	0xFDA
 11536                           fsr2l	equ	0xFD9
 11537                           status	equ	0xFD8
 11538                           
 11539 ;; *************** function _SPI_DisableISR *****************
 11540 ;; Defined at:
 11541 ;;		line 181 in file "Library/SPI.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 11544 ;;		 -> SPI1(11), SPI2(11), 
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;		None
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  1    wreg      void 
 11549 ;; Registers used:
 11550 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11556 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;Total ram usage:        2 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    7
 11563 ;; This function calls:
 11564 ;;		Nothing
 11565 ;; This function is called by:
 11566 ;;		_SPI_Init
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           	psect	text57
 11571  0130F6                     __ptext57:
 11572                           	opt stack 0
 11573  0130F6                     _SPI_DisableISR:
 11574                           	opt stack 19
 11575                           
 11576                           ;SPI.c: 183: switch (pInput->mChannel)
 11577                           
 11578                           ;incstack = 0
 11579  0130F6  D004               	goto	l654
 11580  0130F8                     l655:
 11581                           
 11582                           ; BSR set to: 0
 11583  0130F8  969D               	bcf	3997,3,c	;volatile
 11584  0130FA  0012               	return	
 11585  0130FC                     l657:
 11586                           
 11587                           ; BSR set to: 0
 11588  0130FC  9EA3               	bcf	4003,7,c	;volatile
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;SPI.c: 188: };
 11592                           
 11593                           ; BSR set to: 0
 11594                           
 11595                           ;SPI.c: 187: default: return;
 11596  0130FE  0012               	return	
 11597  013100                     l654:
 11598                           
 11599                           ; BSR set to: 0
 11600  013100  0100               	movlb	0	; () banked
 11601  013102  EE20 F002          	lfsr	2,2
 11602  013106  51BC               	movf	SPI_DisableISR@pInput& (0+255),w,b
 11603  013108  26D9               	addwf	fsr2l,f,c
 11604  01310A  51BD               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 11605  01310C  22DA               	addwfc	fsr2h,f,c
 11606  01310E  50DF               	movf	indf2,w,c
 11607                           
 11608                           ; Switch size 1, requested type "space"
 11609                           ; Number of cases is 2, Range of values is 0 to 1
 11610                           ; switch strategies available:
 11611                           ; Name         Instructions Cycles
 11612                           ; simple_byte            7     4 (average)
 11613                           ;	Chosen strategy is simple_byte
 11614  013110  0A00               	xorlw	0	; case 0
 11615  013112  B4D8               	btfsc	status,2,c
 11616  013114  D7F1               	goto	l655
 11617  013116  0A01               	xorlw	1	; case 1
 11618  013118  A4D8               	btfss	status,2,c
 11619  01311A  0012               	return	
 11620  01311C  D7EF               	goto	l657
 11621  01311E                     __end_of_SPI_DisableISR:
 11622                           	opt stack 0
 11623                           tosu	equ	0xFFF
 11624                           tosh	equ	0xFFE
 11625                           tosl	equ	0xFFD
 11626                           pclath	equ	0xFFA
 11627                           tblptru	equ	0xFF8
 11628                           tblptrh	equ	0xFF7
 11629                           tblptrl	equ	0xFF6
 11630                           tablat	equ	0xFF5
 11631                           prodh	equ	0xFF4
 11632                           prodl	equ	0xFF3
 11633                           intcon	equ	0xFF2
 11634                           postinc0	equ	0xFEE
 11635                           wreg	equ	0xFE8
 11636                           indf1	equ	0xFE7
 11637                           postdec1	equ	0xFE5
 11638                           fsr1h	equ	0xFE2
 11639                           fsr1l	equ	0xFE1
 11640                           indf2	equ	0xFDF
 11641                           postinc2	equ	0xFDE
 11642                           postdec2	equ	0xFDD
 11643                           plusw2	equ	0xFDB
 11644                           fsr2h	equ	0xFDA
 11645                           fsr2l	equ	0xFD9
 11646                           status	equ	0xFD8
 11647                           
 11648 ;; *************** function _SPI_DCS *****************
 11649 ;; Defined at:
 11650 ;;		line 219 in file "Library/SPI.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 11653 ;;		 -> SPI1(11), SPI2(11), 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;		None
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  1    wreg      void 
 11658 ;; Registers used:
 11659 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11665 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;Total ram usage:        2 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    7
 11672 ;; This function calls:
 11673 ;;		Nothing
 11674 ;; This function is called by:
 11675 ;;		_SPI_Init
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           	psect	text58
 11680  013068                     __ptext58:
 11681                           	opt stack 0
 11682  013068                     _SPI_DCS:
 11683                           	opt stack 19
 11684                           
 11685                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;incstack = 0
 11689  013068  0100               	movlb	0	; () banked
 11690  01306A  EE20 F002          	lfsr	2,2
 11691  01306E  51BC               	movf	SPI_DCS@pInput& (0+255),w,b
 11692  013070  26D9               	addwf	fsr2l,f,c
 11693  013072  51BD               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 11694  013074  22DA               	addwfc	fsr2h,f,c
 11695  013076  50DF               	movf	indf2,w,c
 11696  013078  A4D8               	btfss	status,2,c
 11697  01307A  D007               	goto	l673
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 11701  01307C  C0A2  FFD9         	movff	_PortC+4,fsr2l
 11702  013080  C0A3  FFDA         	movff	_PortC+5,fsr2h
 11703  013084  0100               	movlb	0	; () banked
 11704  013086  84DF               	bsf	indf2,2,c
 11705  013088  0012               	return	
 11706  01308A                     l673:
 11707                           
 11708                           ; BSR set to: 0
 11709                           ;SPI.c: 223: else
 11710                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 11711                           
 11712                           ; BSR set to: 0
 11713  01308A  C098  FFD9         	movff	_PortD+4,fsr2l
 11714  01308E  C099  FFDA         	movff	_PortD+5,fsr2h
 11715  013092  0100               	movlb	0	; () banked
 11716  013094  8EDF               	bsf	indf2,7,c
 11717  013096  0012               	return	
 11718  013098                     __end_of_SPI_DCS:
 11719                           	opt stack 0
 11720                           tosu	equ	0xFFF
 11721                           tosh	equ	0xFFE
 11722                           tosl	equ	0xFFD
 11723                           pclath	equ	0xFFA
 11724                           tblptru	equ	0xFF8
 11725                           tblptrh	equ	0xFF7
 11726                           tblptrl	equ	0xFF6
 11727                           tablat	equ	0xFF5
 11728                           prodh	equ	0xFF4
 11729                           prodl	equ	0xFF3
 11730                           intcon	equ	0xFF2
 11731                           postinc0	equ	0xFEE
 11732                           wreg	equ	0xFE8
 11733                           indf1	equ	0xFE7
 11734                           postdec1	equ	0xFE5
 11735                           fsr1h	equ	0xFE2
 11736                           fsr1l	equ	0xFE1
 11737                           indf2	equ	0xFDF
 11738                           postinc2	equ	0xFDE
 11739                           postdec2	equ	0xFDD
 11740                           plusw2	equ	0xFDB
 11741                           fsr2h	equ	0xFDA
 11742                           fsr2l	equ	0xFD9
 11743                           status	equ	0xFD8
 11744                           
 11745 ;; *************** function _Button_Init *****************
 11746 ;; Defined at:
 11747 ;;		line 18 in file "Library/Button.c"
 11748 ;; Parameters:    Size  Location     Type
 11749 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 11750 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 11751 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 11752 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 11753 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 11754 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 11755 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 11756 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 11757 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 11758 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 11759 ;; Auto vars:     Size  Location     Type
 11760 ;;		None
 11761 ;; Return value:  Size  Location     Type
 11762 ;;                  1    wreg      void 
 11763 ;; Registers used:
 11764 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11765 ;; Tracked objects:
 11766 ;;		On entry : 0/0
 11767 ;;		On exit  : 0/0
 11768 ;;		Unchanged: 0/0
 11769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11770 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11774 ;;Total ram usage:       13 bytes
 11775 ;; Hardware stack levels used:    1
 11776 ;; Hardware stack levels required when called:   15
 11777 ;; This function calls:
 11778 ;;		_HMI_InitButtons
 11779 ;;		_MXK_InitDIPSwitch
 11780 ;;		_MXK_InitTestButton
 11781 ;; This function is called by:
 11782 ;;		_HMI_Init
 11783 ;;		_FunctInitButton
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           	psect	text59
 11788  011B30                     __ptext59:
 11789                           	opt stack 0
 11790  011B30                     _Button_Init:
 11791                           	opt stack 13
 11792                           
 11793                           ;Button.c: 21: if(pInput==(void*)0)
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;incstack = 0
 11797  011B30  0101               	movlb	1	; () banked
 11798  011B32  51E2               	movf	Button_Init@pInput& (0+255),w,b
 11799  011B34  0101               	movlb	1	; () banked
 11800  011B36  11E3               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 11801  011B38  B4D8               	btfsc	status,2,c
 11802  011B3A  0012               	return	
 11803                           
 11804                           ; BSR set to: 1
 11805                           ;Button.c: 23: if(pInitIO==(void*)0)
 11806                           
 11807                           ; BSR set to: 1
 11808                           
 11809                           ; BSR set to: 1
 11810                           ;Button.c: 22: return;
 11811  011B3C  0101               	movlb	1	; () banked
 11812  011B3E  51E6               	movf	Button_Init@pInitIO& (0+255),w,b
 11813  011B40  0101               	movlb	1	; () banked
 11814  011B42  11E7               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 11815  011B44  0101               	movlb	1	; () banked
 11816  011B46  11E8               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 11817  011B48  B4D8               	btfsc	status,2,c
 11818  011B4A  0012               	return	
 11819                           
 11820                           ; BSR set to: 1
 11821                           ;Button.c: 25: if(pGetState==(void*)0)
 11822                           
 11823                           ; BSR set to: 1
 11824                           
 11825                           ; BSR set to: 1
 11826                           ;Button.c: 24: return;
 11827  011B4C  0101               	movlb	1	; () banked
 11828  011B4E  51E9               	movf	Button_Init@pGetState& (0+255),w,b
 11829  011B50  0101               	movlb	1	; () banked
 11830  011B52  11EA               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 11831  011B54  0101               	movlb	1	; () banked
 11832  011B56  11EB               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 11833  011B58  B4D8               	btfsc	status,2,c
 11834  011B5A  0012               	return	
 11835                           
 11836                           ; BSR set to: 1
 11837                           ;Button.c: 27: if(pFunction==(void*)0)
 11838                           
 11839                           ; BSR set to: 1
 11840                           
 11841                           ; BSR set to: 1
 11842                           ;Button.c: 26: return;
 11843  011B5C  0101               	movlb	1	; () banked
 11844  011B5E  51EC               	movf	Button_Init@pFunction& (0+255),w,b
 11845  011B60  0101               	movlb	1	; () banked
 11846  011B62  11ED               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 11847  011B64  0101               	movlb	1	; () banked
 11848  011B66  11EE               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 11849  011B68  B4D8               	btfsc	status,2,c
 11850  011B6A  0012               	return	
 11851                           
 11852                           ; BSR set to: 1
 11853                           ;Button.c: 30: if(pThreshold == 0)
 11854                           
 11855                           ; BSR set to: 1
 11856                           
 11857                           ; BSR set to: 1
 11858                           ;Button.c: 28: return;
 11859  011B6C  0101               	movlb	1	; () banked
 11860  011B6E  51E4               	movf	Button_Init@pThreshold& (0+255),w,b
 11861  011B70  0101               	movlb	1	; () banked
 11862  011B72  11E5               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 11863  011B74  A4D8               	btfss	status,2,c
 11864  011B76  D005               	goto	l8
 11865                           
 11866                           ; BSR set to: 1
 11867                           ;Button.c: 31: pThreshold = 1;
 11868  011B78  0E00               	movlw	0
 11869  011B7A  0101               	movlb	1	; () banked
 11870  011B7C  6FE5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11871  011B7E  0E01               	movlw	1
 11872  011B80  6FE4               	movwf	Button_Init@pThreshold& (0+255),b
 11873  011B82                     l8:
 11874                           
 11875                           ; BSR set to: 1
 11876                           ;Button.c: 34: pInput->mState = 0;
 11877                           
 11878                           ; BSR set to: 1
 11879  011B82  C1E2  FFD9         	movff	Button_Init@pInput,fsr2l
 11880  011B86  C1E3  FFDA         	movff	Button_Init@pInput+1,fsr2h
 11881  011B8A  0E00               	movlw	0
 11882  011B8C  6EDF               	movwf	indf2,c
 11883                           
 11884                           ; BSR set to: 1
 11885                           ;Button.c: 35: pInput->mCount = 0;
 11886  011B8E  0101               	movlb	1	; () banked
 11887  011B90  EE20 F001          	lfsr	2,1
 11888  011B94  51E2               	movf	Button_Init@pInput& (0+255),w,b
 11889  011B96  26D9               	addwf	fsr2l,f,c
 11890  011B98  51E3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11891  011B9A  22DA               	addwfc	fsr2h,f,c
 11892  011B9C  0E00               	movlw	0
 11893  011B9E  6EDF               	movwf	indf2,c
 11894                           
 11895                           ; BSR set to: 1
 11896                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 11897  011BA0  0101               	movlb	1	; () banked
 11898  011BA2  EE20 F002          	lfsr	2,2
 11899  011BA6  51E2               	movf	Button_Init@pInput& (0+255),w,b
 11900  011BA8  26D9               	addwf	fsr2l,f,c
 11901  011BAA  51E3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11902  011BAC  22DA               	addwfc	fsr2h,f,c
 11903  011BAE  C1E4  FFDE         	movff	Button_Init@pThreshold,postinc2
 11904  011BB2  C1E5  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 11905                           
 11906                           ; BSR set to: 1
 11907                           ;Button.c: 37: pInput->mFunction = pFunction;
 11908  011BB6  0101               	movlb	1	; () banked
 11909  011BB8  EE20 F004          	lfsr	2,4
 11910  011BBC  51E2               	movf	Button_Init@pInput& (0+255),w,b
 11911  011BBE  26D9               	addwf	fsr2l,f,c
 11912  011BC0  51E3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11913  011BC2  22DA               	addwfc	fsr2h,f,c
 11914  011BC4  C1EC  FFDE         	movff	Button_Init@pFunction,postinc2
 11915  011BC8  C1ED  FFDE         	movff	Button_Init@pFunction+1,postinc2
 11916  011BCC  C1EE  FFDE         	movff	Button_Init@pFunction+2,postinc2
 11917                           
 11918                           ; BSR set to: 1
 11919                           ;Button.c: 38: pInput->mGetState = pGetState;
 11920  011BD0  0101               	movlb	1	; () banked
 11921  011BD2  EE20 F007          	lfsr	2,7
 11922  011BD6  51E2               	movf	Button_Init@pInput& (0+255),w,b
 11923  011BD8  26D9               	addwf	fsr2l,f,c
 11924  011BDA  51E3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11925  011BDC  22DA               	addwfc	fsr2h,f,c
 11926  011BDE  C1E9  FFDE         	movff	Button_Init@pGetState,postinc2
 11927  011BE2  C1EA  FFDE         	movff	Button_Init@pGetState+1,postinc2
 11928  011BE6  C1EB  FFDE         	movff	Button_Init@pGetState+2,postinc2
 11929                           
 11930                           ; BSR set to: 1
 11931                           ;Button.c: 41: pInitIO();
 11932  011BEA  D801               	call	u7268
 11933  011BEC  0012               	return	
 11934  011BEE                     u7268:
 11935  011BEE  0005               	push	
 11936  011BF0  6EFA               	movwf	pclath,c
 11937  011BF2  0101               	movlb	1	; () banked
 11938  011BF4  51E6               	movf	Button_Init@pInitIO& (0+255),w,b
 11939  011BF6  6EFD               	movwf	tosl,c
 11940  011BF8  51E7               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 11941  011BFA  6EFE               	movwf	tosh,c
 11942  011BFC  51E8               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 11943  011BFE  6EFF               	movwf	tosu,c
 11944  011C00  50FA               	movf	pclath,w,c
 11945  011C02  0012               	return		;indir
 11946  011C04                     __end_of_Button_Init:
 11947                           	opt stack 0
 11948                           tosu	equ	0xFFF
 11949                           tosh	equ	0xFFE
 11950                           tosl	equ	0xFFD
 11951                           pclath	equ	0xFFA
 11952                           tblptru	equ	0xFF8
 11953                           tblptrh	equ	0xFF7
 11954                           tblptrl	equ	0xFF6
 11955                           tablat	equ	0xFF5
 11956                           prodh	equ	0xFF4
 11957                           prodl	equ	0xFF3
 11958                           intcon	equ	0xFF2
 11959                           postinc0	equ	0xFEE
 11960                           wreg	equ	0xFE8
 11961                           indf1	equ	0xFE7
 11962                           postdec1	equ	0xFE5
 11963                           fsr1h	equ	0xFE2
 11964                           fsr1l	equ	0xFE1
 11965                           indf2	equ	0xFDF
 11966                           postinc2	equ	0xFDE
 11967                           postdec2	equ	0xFDD
 11968                           plusw2	equ	0xFDB
 11969                           fsr2h	equ	0xFDA
 11970                           fsr2l	equ	0xFD9
 11971                           status	equ	0xFD8
 11972                           
 11973 ;; *************** function _MXK_InitDIPSwitch *****************
 11974 ;; Defined at:
 11975 ;;		line 20 in file "Library/MXK.c"
 11976 ;; Parameters:    Size  Location     Type
 11977 ;;		None
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;		None
 11980 ;; Return value:  Size  Location     Type
 11981 ;;                  1    wreg      void 
 11982 ;; Registers used:
 11983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11984 ;; Tracked objects:
 11985 ;;		On entry : 0/0
 11986 ;;		On exit  : 0/0
 11987 ;;		Unchanged: 0/0
 11988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;Total ram usage:        0 bytes
 11994 ;; Hardware stack levels used:    1
 11995 ;; Hardware stack levels required when called:   14
 11996 ;; This function calls:
 11997 ;;		_Port_SetQuadType
 11998 ;; This function is called by:
 11999 ;;		_FunctInitButton
 12000 ;;		_Button_Init
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text60
 12005  01321C                     __ptext60:
 12006                           	opt stack 0
 12007  01321C                     _MXK_InitDIPSwitch:
 12008                           	opt stack 13
 12009                           
 12010                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 12011                           
 12012                           ;incstack = 0
 12013  01321C  0E94               	movlw	low _PortD
 12014  01321E  0100               	movlb	0	; () banked
 12015  013220  6FF2               	movwf	Port_SetQuadType@pInput& (0+255),b
 12016  013222  0E00               	movlw	high _PortD
 12017  013224  0100               	movlb	0	; () banked
 12018  013226  6FF3               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 12019  013228  0E00               	movlw	0
 12020  01322A  0100               	movlb	0	; () banked
 12021  01322C  6FF4               	movwf	Port_SetQuadType@pQuad& (0+255),b
 12022  01322E  0E00               	movlw	0
 12023  013230  0100               	movlb	0	; () banked
 12024  013232  6FF5               	movwf	Port_SetQuadType@pType& (0+255),b
 12025  013234  ECEC  F083         	call	_Port_SetQuadType	;wreg free
 12026  013238  0012               	return		;funcret
 12027  01323A                     __end_of_MXK_InitDIPSwitch:
 12028                           	opt stack 0
 12029                           tosu	equ	0xFFF
 12030                           tosh	equ	0xFFE
 12031                           tosl	equ	0xFFD
 12032                           pclath	equ	0xFFA
 12033                           tblptru	equ	0xFF8
 12034                           tblptrh	equ	0xFF7
 12035                           tblptrl	equ	0xFF6
 12036                           tablat	equ	0xFF5
 12037                           prodh	equ	0xFF4
 12038                           prodl	equ	0xFF3
 12039                           intcon	equ	0xFF2
 12040                           postinc0	equ	0xFEE
 12041                           wreg	equ	0xFE8
 12042                           indf1	equ	0xFE7
 12043                           postdec1	equ	0xFE5
 12044                           fsr1h	equ	0xFE2
 12045                           fsr1l	equ	0xFE1
 12046                           indf2	equ	0xFDF
 12047                           postinc2	equ	0xFDE
 12048                           postdec2	equ	0xFDD
 12049                           plusw2	equ	0xFDB
 12050                           fsr2h	equ	0xFDA
 12051                           fsr2l	equ	0xFD9
 12052                           status	equ	0xFD8
 12053                           
 12054 ;; *************** function _HMI_InitButtons *****************
 12055 ;; Defined at:
 12056 ;;		line 21 in file "HMI.c"
 12057 ;; Parameters:    Size  Location     Type
 12058 ;;		None
 12059 ;; Auto vars:     Size  Location     Type
 12060 ;;		None
 12061 ;; Return value:  Size  Location     Type
 12062 ;;                  1    wreg      void 
 12063 ;; Registers used:
 12064 ;;		wreg, status,2
 12065 ;; Tracked objects:
 12066 ;;		On entry : 0/0
 12067 ;;		On exit  : 0/0
 12068 ;;		Unchanged: 0/0
 12069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12074 ;;Total ram usage:        0 bytes
 12075 ;; Hardware stack levels used:    1
 12076 ;; Hardware stack levels required when called:    7
 12077 ;; This function calls:
 12078 ;;		Nothing
 12079 ;; This function is called by:
 12080 ;;		_HMI_Init
 12081 ;;		_Button_Init
 12082 ;; This function uses a non-reentrant model
 12083 ;;
 12084                           
 12085                           	psect	text61
 12086  0133BC                     __ptext61:
 12087                           	opt stack 0
 12088  0133BC                     _HMI_InitButtons:
 12089                           	opt stack 20
 12090                           
 12091                           ;HMI.c: 23: TRISE = 0xFC;
 12092                           
 12093                           ;incstack = 0
 12094  0133BC  0EFC               	movlw	252
 12095  0133BE  6E96               	movwf	3990,c	;volatile
 12096  0133C0  0012               	return		;funcret
 12097  0133C2                     __end_of_HMI_InitButtons:
 12098                           	opt stack 0
 12099                           tosu	equ	0xFFF
 12100                           tosh	equ	0xFFE
 12101                           tosl	equ	0xFFD
 12102                           pclath	equ	0xFFA
 12103                           tblptru	equ	0xFF8
 12104                           tblptrh	equ	0xFF7
 12105                           tblptrl	equ	0xFF6
 12106                           tablat	equ	0xFF5
 12107                           prodh	equ	0xFF4
 12108                           prodl	equ	0xFF3
 12109                           intcon	equ	0xFF2
 12110                           postinc0	equ	0xFEE
 12111                           wreg	equ	0xFE8
 12112                           indf1	equ	0xFE7
 12113                           postdec1	equ	0xFE5
 12114                           fsr1h	equ	0xFE2
 12115                           fsr1l	equ	0xFE1
 12116                           indf2	equ	0xFDF
 12117                           postinc2	equ	0xFDE
 12118                           postdec2	equ	0xFDD
 12119                           plusw2	equ	0xFDB
 12120                           fsr2h	equ	0xFDA
 12121                           fsr2l	equ	0xFD9
 12122                           status	equ	0xFD8
 12123                           
 12124 ;; *************** function _MXK_InitTestButton *****************
 12125 ;; Defined at:
 12126 ;;		line 10 in file "Library/MXK.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;		None
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;		None
 12131 ;; Return value:  Size  Location     Type
 12132 ;;                  1    wreg      void 
 12133 ;; Registers used:
 12134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12135 ;; Tracked objects:
 12136 ;;		On entry : 0/0
 12137 ;;		On exit  : 0/0
 12138 ;;		Unchanged: 0/0
 12139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;Total ram usage:        0 bytes
 12145 ;; Hardware stack levels used:    1
 12146 ;; Hardware stack levels required when called:   12
 12147 ;; This function calls:
 12148 ;;		_Port_SetPinType
 12149 ;; This function is called by:
 12150 ;;		_FunctInitButton
 12151 ;;		_Button_Init
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           	psect	text62
 12156  01323A                     __ptext62:
 12157                           	opt stack 0
 12158  01323A                     _MXK_InitTestButton:
 12159                           	opt stack 15
 12160                           
 12161                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 12162                           
 12163                           ;incstack = 0
 12164  01323A  0EA8               	movlw	low _PortB
 12165  01323C  0100               	movlb	0	; () banked
 12166  01323E  6FE2               	movwf	Port_SetPinType@pInput& (0+255),b
 12167  013240  0E01               	movlw	high _PortB
 12168  013242  0100               	movlb	0	; () banked
 12169  013244  6FE3               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12170  013246  0E04               	movlw	4
 12171  013248  0100               	movlb	0	; () banked
 12172  01324A  6FE4               	movwf	Port_SetPinType@pPin& (0+255),b
 12173  01324C  0E00               	movlw	0
 12174  01324E  0100               	movlb	0	; () banked
 12175  013250  6FE5               	movwf	Port_SetPinType@pType& (0+255),b
 12176  013252  EC29  F087         	call	_Port_SetPinType	;wreg free
 12177  013256  0012               	return		;funcret
 12178  013258                     __end_of_MXK_InitTestButton:
 12179                           	opt stack 0
 12180                           tosu	equ	0xFFF
 12181                           tosh	equ	0xFFE
 12182                           tosl	equ	0xFFD
 12183                           pclath	equ	0xFFA
 12184                           tblptru	equ	0xFF8
 12185                           tblptrh	equ	0xFF7
 12186                           tblptrl	equ	0xFF6
 12187                           tablat	equ	0xFF5
 12188                           prodh	equ	0xFF4
 12189                           prodl	equ	0xFF3
 12190                           intcon	equ	0xFF2
 12191                           postinc0	equ	0xFEE
 12192                           wreg	equ	0xFE8
 12193                           indf1	equ	0xFE7
 12194                           postdec1	equ	0xFE5
 12195                           fsr1h	equ	0xFE2
 12196                           fsr1l	equ	0xFE1
 12197                           indf2	equ	0xFDF
 12198                           postinc2	equ	0xFDE
 12199                           postdec2	equ	0xFDD
 12200                           plusw2	equ	0xFDB
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function _Port_SetPinType *****************
 12206 ;; Defined at:
 12207 ;;		line 189 in file "Library/Port.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 12210 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12211 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12212 ;;  pPin            1   40[BANK0 ] enum E6750
 12213 ;;  pType           1   41[BANK0 ] enum E6795
 12214 ;; Auto vars:     Size  Location     Type
 12215 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 12216 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 12217 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 12218 ;;  Output          1   42[BANK0 ] enum E6475
 12219 ;; Return value:  Size  Location     Type
 12220 ;;                  1    wreg      enum E6475
 12221 ;; Registers used:
 12222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12229 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;Total ram usage:        7 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:   11
 12235 ;; This function calls:
 12236 ;;		_Byte_SetBit
 12237 ;;		_PortProperty_Valid
 12238 ;;		_Word_SetPair
 12239 ;; This function is called by:
 12240 ;;		_Configure_GPIOs
 12241 ;;		_LED_Init
 12242 ;;		_Port_Init
 12243 ;;		_SPI_Init
 12244 ;;		_Motor_Init
 12245 ;;		_MXK_InitTestButton
 12246 ;;		_MXK_Init
 12247 ;;		_I2C_Init
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           	psect	text63
 12252  010E52                     __ptext63:
 12253                           	opt stack 0
 12254  010E52                     _Port_SetPinType:
 12255                           	opt stack 17
 12256                           
 12257                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 12258                           
 12259                           ;incstack = 0
 12260  010E52  C0E2  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 12261  010E56  C0E3  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 12262  010E5A  CFDE F0E7          	movff	postinc2,Port_SetPinType@Props
 12263  010E5E  CFDD F0E8          	movff	postdec2,Port_SetPinType@Props+1
 12264                           
 12265                           ;Port.c: 192: ePinError Output = ePinErrorState;
 12266  010E62  0E05               	movlw	5
 12267  010E64  0100               	movlb	0	; () banked
 12268  010E66  6FE6               	movwf	Port_SetPinType@Output& (0+255),b
 12269                           
 12270                           ;Port.c: 193: switch (pType)
 12271  010E68  D0B5               	goto	l412
 12272  010E6A                     
 12273                           ; BSR set to: 0
 12274                           ;Port.c: 197: {
 12275                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 12276                           
 12277                           ; BSR set to: 0
 12278  010E6A  0100               	movlb	0	; () banked
 12279  010E6C  EE20 F002          	lfsr	2,2
 12280  010E70  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12281  010E72  26D9               	addwf	fsr2l,f,c
 12282  010E74  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12283  010E76  22DA               	addwfc	fsr2h,f,c
 12284  010E78  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12285  010E7C  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12286  010E80  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12287  010E84  0E01               	movlw	1
 12288  010E86  0100               	movlb	0	; () banked
 12289  010E88  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12290  010E8A  EC11  F095         	call	_Byte_SetBit	;wreg free
 12291                           
 12292                           ;Port.c: 203: break;
 12293  010E8E  D0B0               	goto	l414
 12294  010E90                     
 12295                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 12296  010E90  C0E7  F0CB         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 12297  010E94  C0E8  F0CC         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 12298  010E98  0E01               	movlw	1
 12299  010E9A  0100               	movlb	0	; () banked
 12300  010E9C  6FCD               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 12301  010E9E  C0E4  F0CE         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 12302  010EA2  ECDA  F092         	call	_PortProperty_Valid	;wreg free
 12303  010EA6  0100               	movlb	0	; () banked
 12304  010EA8  6FE6               	movwf	Port_SetPinType@Output& (0+255),b
 12305  010EAA  0100               	movlb	0	; () banked
 12306  010EAC  51E6               	movf	Port_SetPinType@Output& (0+255),w,b
 12307  010EAE  A4D8               	btfss	status,2,c
 12308  010EB0  0012               	return	
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;Port.c: 208: {
 12312                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 12313  010EB2  0100               	movlb	0	; () banked
 12314  010EB4  EE20 F002          	lfsr	2,2
 12315  010EB8  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12316  010EBA  26D9               	addwf	fsr2l,f,c
 12317  010EBC  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12318  010EBE  22DA               	addwfc	fsr2h,f,c
 12319  010EC0  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12320  010EC4  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12321  010EC8  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12322  010ECC  0E00               	movlw	0
 12323  010ECE  0100               	movlb	0	; () banked
 12324  010ED0  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12325  010ED2  EC11  F095         	call	_Byte_SetBit	;wreg free
 12326                           
 12327                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 12328  010ED6  0100               	movlb	0	; () banked
 12329  010ED8  EE20 F004          	lfsr	2,4
 12330  010EDC  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12331  010EDE  26D9               	addwf	fsr2l,f,c
 12332  010EE0  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12333  010EE2  22DA               	addwfc	fsr2h,f,c
 12334  010EE4  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12335  010EE8  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12336  010EEC  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12337  010EF0  0E00               	movlw	0
 12338  010EF2  0100               	movlb	0	; () banked
 12339  010EF4  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12340  010EF6  EC11  F095         	call	_Byte_SetBit	;wreg free
 12341                           
 12342                           ;Port.c: 214: break;
 12343  010EFA  D07A               	goto	l414
 12344  010EFC                     
 12345                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 12346                           
 12347                           ;Port.c: 218: case eTypeOutputOpenSource:
 12348  010EFC  C0E7  F0CB         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 12349  010F00  C0E8  F0CC         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 12350  010F04  0E02               	movlw	2
 12351  010F06  0100               	movlb	0	; () banked
 12352  010F08  6FCD               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 12353  010F0A  C0E4  F0CE         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 12354  010F0E  ECDA  F092         	call	_PortProperty_Valid	;wreg free
 12355  010F12  0100               	movlb	0	; () banked
 12356  010F14  6FE6               	movwf	Port_SetPinType@Output& (0+255),b
 12357  010F16  0100               	movlb	0	; () banked
 12358  010F18  51E6               	movf	Port_SetPinType@Output& (0+255),w,b
 12359  010F1A  A4D8               	btfss	status,2,c
 12360  010F1C  0012               	return	
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;Port.c: 220: {
 12364                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 12365  010F1E  0100               	movlb	0	; () banked
 12366  010F20  EE20 F002          	lfsr	2,2
 12367  010F24  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12368  010F26  26D9               	addwf	fsr2l,f,c
 12369  010F28  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12370  010F2A  22DA               	addwfc	fsr2h,f,c
 12371  010F2C  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12372  010F30  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12373  010F34  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12374  010F38  0E01               	movlw	1
 12375  010F3A  0100               	movlb	0	; () banked
 12376  010F3C  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12377  010F3E  EC11  F095         	call	_Byte_SetBit	;wreg free
 12378                           
 12379                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 12380  010F42  0100               	movlb	0	; () banked
 12381  010F44  EE20 F004          	lfsr	2,4
 12382  010F48  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12383  010F4A  26D9               	addwf	fsr2l,f,c
 12384  010F4C  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12385  010F4E  22DA               	addwfc	fsr2h,f,c
 12386  010F50  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12387  010F54  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12388  010F58  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12389  010F5C  0E01               	movlw	1
 12390  010F5E  0100               	movlb	0	; () banked
 12391  010F60  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12392  010F62  EC11  F095         	call	_Byte_SetBit	;wreg free
 12393                           
 12394                           ;Port.c: 226: break;
 12395  010F66  D044               	goto	l414
 12396  010F68                     
 12397                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 12398                           
 12399                           ;Port.c: 230: case eTypeOutputPushPull:
 12400  010F68  C0E7  F0CB         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 12401  010F6C  C0E8  F0CC         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 12402  010F70  0E00               	movlw	0
 12403  010F72  0100               	movlb	0	; () banked
 12404  010F74  6FCD               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 12405  010F76  C0E4  F0CE         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 12406  010F7A  ECDA  F092         	call	_PortProperty_Valid	;wreg free
 12407  010F7E  0100               	movlb	0	; () banked
 12408  010F80  6FE6               	movwf	Port_SetPinType@Output& (0+255),b
 12409  010F82  0100               	movlb	0	; () banked
 12410  010F84  51E6               	movf	Port_SetPinType@Output& (0+255),w,b
 12411  010F86  A4D8               	btfss	status,2,c
 12412  010F88  0012               	return	
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;Port.c: 232: {
 12416                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 12417  010F8A  0100               	movlb	0	; () banked
 12418  010F8C  EE20 F002          	lfsr	2,2
 12419  010F90  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12420  010F92  26D9               	addwf	fsr2l,f,c
 12421  010F94  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12422  010F96  22DA               	addwfc	fsr2h,f,c
 12423  010F98  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12424  010F9C  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12425  010FA0  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12426  010FA4  0E00               	movlw	0
 12427  010FA6  0100               	movlb	0	; () banked
 12428  010FA8  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12429  010FAA  EC11  F095         	call	_Byte_SetBit	;wreg free
 12430                           
 12431                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 12432  010FAE  0100               	movlb	0	; () banked
 12433  010FB0  EE20 F004          	lfsr	2,4
 12434  010FB4  51E2               	movf	Port_SetPinType@pInput& (0+255),w,b
 12435  010FB6  26D9               	addwf	fsr2l,f,c
 12436  010FB8  51E3               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 12437  010FBA  22DA               	addwfc	fsr2h,f,c
 12438  010FBC  CFDE F0BC          	movff	postinc2,Byte_SetBit@pInput
 12439  010FC0  CFDD F0BD          	movff	postdec2,Byte_SetBit@pInput+1
 12440  010FC4  C0E4  F0BE         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 12441  010FC8  0E00               	movlw	0
 12442  010FCA  0100               	movlb	0	; () banked
 12443  010FCC  6FBF               	movwf	Byte_SetBit@pValue& (0+255),b
 12444  010FCE  EC11  F095         	call	_Byte_SetBit	;wreg free
 12445                           
 12446                           ;Port.c: 239: }
 12447                           
 12448                           ;Port.c: 238: break;
 12449  010FD2  D00E               	goto	l414
 12450  010FD4                     l412:
 12451  010FD4  0100               	movlb	0	; () banked
 12452  010FD6  51E5               	movf	Port_SetPinType@pType& (0+255),w,b
 12453                           
 12454                           ; Switch size 1, requested type "space"
 12455                           ; Number of cases is 4, Range of values is 0 to 3
 12456                           ; switch strategies available:
 12457                           ; Name         Instructions Cycles
 12458                           ; simple_byte           13     7 (average)
 12459                           ;	Chosen strategy is simple_byte
 12460  010FD8  0A00               	xorlw	0	; case 0
 12461  010FDA  B4D8               	btfsc	status,2,c
 12462  010FDC  D746               	goto	l413
 12463  010FDE  0A01               	xorlw	1	; case 1
 12464  010FE0  B4D8               	btfsc	status,2,c
 12465  010FE2  D756               	goto	l415
 12466  010FE4  0A03               	xorlw	3	; case 2
 12467  010FE6  B4D8               	btfsc	status,2,c
 12468  010FE8  D789               	goto	l417
 12469  010FEA  0A01               	xorlw	1	; case 3
 12470  010FEC  B4D8               	btfsc	status,2,c
 12471  010FEE  D7BC               	goto	l421
 12472  010FF0                     l414:
 12473                           
 12474                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 12475                           
 12476                           ; BSR set to: 0
 12477  010FF0  0E08               	movlw	8
 12478  010FF2  0100               	movlb	0	; () banked
 12479  010FF4  25E2               	addwf	Port_SetPinType@pInput& (0+255),w,b
 12480  010FF6  0100               	movlb	0	; () banked
 12481  010FF8  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
 12482  010FFA  0E00               	movlw	0
 12483  010FFC  0100               	movlb	0	; () banked
 12484  010FFE  21E3               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 12485  011000  0100               	movlb	0	; () banked
 12486  011002  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12487  011004  C0E4  F0CD         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 12488  011008  C0E5  F0CE         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 12489  01100C  EC27  F097         	call	_Word_SetPair	;wreg free
 12490  011010  0012               	return	
 12491  011012                     __end_of_Port_SetPinType:
 12492                           	opt stack 0
 12493                           tosu	equ	0xFFF
 12494                           tosh	equ	0xFFE
 12495                           tosl	equ	0xFFD
 12496                           pclath	equ	0xFFA
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           postinc0	equ	0xFEE
 12505                           wreg	equ	0xFE8
 12506                           indf1	equ	0xFE7
 12507                           postdec1	equ	0xFE5
 12508                           fsr1h	equ	0xFE2
 12509                           fsr1l	equ	0xFE1
 12510                           indf2	equ	0xFDF
 12511                           postinc2	equ	0xFDE
 12512                           postdec2	equ	0xFDD
 12513                           plusw2	equ	0xFDB
 12514                           fsr2h	equ	0xFDA
 12515                           fsr2l	equ	0xFD9
 12516                           status	equ	0xFD8
 12517                           
 12518 ;; *************** function _Byte_SetBit *****************
 12519 ;; Defined at:
 12520 ;;		line 32 in file "Library/Types.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12523 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 12524 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 12525 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 12526 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 12527 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 12528 ;;		 -> NULL(0), 
 12529 ;;  pBit            1    2[BANK0 ] unsigned char 
 12530 ;;  pValue          1    3[BANK0 ] unsigned char 
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;		None
 12533 ;; Return value:  Size  Location     Type
 12534 ;;                  1    wreg      void 
 12535 ;; Registers used:
 12536 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;Total ram usage:        7 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    7
 12549 ;; This function calls:
 12550 ;;		Nothing
 12551 ;; This function is called by:
 12552 ;;		_Port_SetPinType
 12553 ;;		_Port_SetPin
 12554 ;;		_SPI_Init
 12555 ;;		_SPI_MinSpeed
 12556 ;;		_SPI_MaxSpeed
 12557 ;;		_Word_SetBit
 12558 ;;		_I2C_Init
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           	psect	text64
 12563  012A22                     __ptext64:
 12564                           	opt stack 0
 12565  012A22                     _Byte_SetBit:
 12566                           	opt stack 20
 12567                           
 12568                           ;Types.c: 34: pValue &= 1;
 12569                           
 12570                           ;incstack = 0
 12571  012A22  0E01               	movlw	1
 12572  012A24  0100               	movlb	0	; () banked
 12573  012A26  17BF               	andwf	Byte_SetBit@pValue& (0+255),f,b
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 12577  012A28  C0BE  F0C0         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 12578  012A2C  0E01               	movlw	1
 12579  012A2E  0100               	movlb	0	; () banked
 12580  012A30  6FC1               	movwf	(??_Byte_SetBit+1)& (0+255),b
 12581  012A32  0100               	movlb	0	; () banked
 12582  012A34  2BC0               	incf	??_Byte_SetBit& (0+255),f,b
 12583  012A36  D003               	goto	u6674
 12584  012A38                     u6675:
 12585  012A38  0100               	movlb	0	; () banked
 12586  012A3A  90D8               	bcf	status,0,c
 12587  012A3C  37C1               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 12588  012A3E                     u6674:
 12589  012A3E  0100               	movlb	0	; () banked
 12590  012A40  2FC0               	decfsz	??_Byte_SetBit& (0+255),f,b
 12591  012A42  D7FA               	goto	u6675
 12592  012A44  0100               	movlb	0	; () banked
 12593  012A46  51C1               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 12594  012A48  0AFF               	xorlw	255
 12595  012A4A  0100               	movlb	0	; () banked
 12596  012A4C  6FC2               	movwf	(??_Byte_SetBit+2)& (0+255),b
 12597  012A4E  C0BC  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 12598  012A52  C0BD  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 12599  012A56  0100               	movlb	0	; () banked
 12600  012A58  51C2               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 12601  012A5A  16DF               	andwf	indf2,f,c
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 12605  012A5C  C0BE  F0C0         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 12606  012A60  C0BF  F0C1         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 12607  012A64  0100               	movlb	0	; () banked
 12608  012A66  2BC0               	incf	??_Byte_SetBit& (0+255),f,b
 12609  012A68  D003               	goto	u6684
 12610  012A6A                     u6685:
 12611  012A6A  0100               	movlb	0	; () banked
 12612  012A6C  90D8               	bcf	status,0,c
 12613  012A6E  37C1               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 12614  012A70                     u6684:
 12615  012A70  0100               	movlb	0	; () banked
 12616  012A72  2FC0               	decfsz	??_Byte_SetBit& (0+255),f,b
 12617  012A74  D7FA               	goto	u6685
 12618  012A76  C0BC  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 12619  012A7A  C0BD  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 12620  012A7E  0100               	movlb	0	; () banked
 12621  012A80  51C1               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 12622  012A82  12DF               	iorwf	indf2,f,c
 12623                           
 12624                           ; BSR set to: 0
 12625  012A84  0012               	return		;funcret
 12626  012A86                     __end_of_Byte_SetBit:
 12627                           	opt stack 0
 12628                           tosu	equ	0xFFF
 12629                           tosh	equ	0xFFE
 12630                           tosl	equ	0xFFD
 12631                           pclath	equ	0xFFA
 12632                           tblptru	equ	0xFF8
 12633                           tblptrh	equ	0xFF7
 12634                           tblptrl	equ	0xFF6
 12635                           tablat	equ	0xFF5
 12636                           prodh	equ	0xFF4
 12637                           prodl	equ	0xFF3
 12638                           intcon	equ	0xFF2
 12639                           postinc0	equ	0xFEE
 12640                           wreg	equ	0xFE8
 12641                           indf1	equ	0xFE7
 12642                           postdec1	equ	0xFE5
 12643                           fsr1h	equ	0xFE2
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           postdec2	equ	0xFDD
 12648                           plusw2	equ	0xFDB
 12649                           fsr2h	equ	0xFDA
 12650                           fsr2l	equ	0xFD9
 12651                           status	equ	0xFD8
 12652                           
 12653 ;; *************** function _Port_SetQuadType *****************
 12654 ;; Defined at:
 12655 ;;		line 399 in file "Library/Port.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 12658 ;;		 -> PortB(10), PortD(10), 
 12659 ;;  pQuad           1   56[BANK0 ] enum E6776
 12660 ;;  pType           1   57[BANK0 ] enum E6795
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;  Output          1   58[BANK0 ] enum E6475
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  1    wreg      enum E6475
 12665 ;; Registers used:
 12666 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12667 ;; Tracked objects:
 12668 ;;		On entry : 0/0
 12669 ;;		On exit  : 0/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12675 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12676 ;;Total ram usage:        5 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:   13
 12679 ;; This function calls:
 12680 ;;		_Byte_SetQuad
 12681 ;;		_Port_CheckQuadType
 12682 ;;		_Word_SetPair
 12683 ;; This function is called by:
 12684 ;;		_MXK_InitDIPSwitch
 12685 ;;		_MXK_Init
 12686 ;; This function uses a non-reentrant model
 12687 ;;
 12688                           
 12689                           	psect	text65
 12690  0107D8                     __ptext65:
 12691                           	opt stack 0
 12692  0107D8                     _Port_SetQuadType:
 12693                           	opt stack 15
 12694                           
 12695                           ;Port.c: 401: ePinError Output = ePinErrorState;
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;incstack = 0
 12699  0107D8  0E05               	movlw	5
 12700  0107DA  0100               	movlb	0	; () banked
 12701  0107DC  6FF6               	movwf	Port_SetQuadType@Output& (0+255),b
 12702                           
 12703                           ;Port.c: 403: switch (pType)
 12704  0107DE  D0C7               	goto	l476
 12705  0107E0                     
 12706                           ; BSR set to: 0
 12707                           ;Port.c: 407: {
 12708                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 12709                           
 12710                           ; BSR set to: 0
 12711  0107E0  0100               	movlb	0	; () banked
 12712  0107E2  EE20 F002          	lfsr	2,2
 12713  0107E6  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12714  0107E8  26D9               	addwf	fsr2l,f,c
 12715  0107EA  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12716  0107EC  22DA               	addwfc	fsr2h,f,c
 12717  0107EE  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12718  0107F2  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12719  0107F6  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12720  0107FA  0E0F               	movlw	15
 12721  0107FC  0100               	movlb	0	; () banked
 12722  0107FE  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12723  010800  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12724                           
 12725                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 12726  010804  0100               	movlb	0	; () banked
 12727  010806  EE20 F004          	lfsr	2,4
 12728  01080A  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12729  01080C  26D9               	addwf	fsr2l,f,c
 12730  01080E  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12731  010810  22DA               	addwfc	fsr2h,f,c
 12732  010812  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12733  010816  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12734  01081A  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12735  01081E  0E00               	movlw	0
 12736  010820  0100               	movlb	0	; () banked
 12737  010822  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12738  010824  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12739                           
 12740                           ;Port.c: 413: }
 12741                           ;Port.c: 415: break;
 12742  010828  D0B0               	goto	l478
 12743  01082A                     
 12744                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 12745  01082A  C0F2  F0EB         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 12746  01082E  C0F3  F0EC         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 12747  010832  C0F4  F0ED         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 12748  010836  0E03               	movlw	3
 12749  010838  0100               	movlb	0	; () banked
 12750  01083A  6FEE               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 12751  01083C  EC74  F095         	call	_Port_CheckQuadType	;wreg free
 12752  010840  0100               	movlb	0	; () banked
 12753  010842  6FF6               	movwf	Port_SetQuadType@Output& (0+255),b
 12754  010844  0100               	movlb	0	; () banked
 12755  010846  51F6               	movf	Port_SetQuadType@Output& (0+255),w,b
 12756  010848  A4D8               	btfss	status,2,c
 12757  01084A  0012               	return	
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;Port.c: 418: {
 12761                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 12762  01084C  0100               	movlb	0	; () banked
 12763  01084E  EE20 F002          	lfsr	2,2
 12764  010852  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12765  010854  26D9               	addwf	fsr2l,f,c
 12766  010856  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12767  010858  22DA               	addwfc	fsr2h,f,c
 12768  01085A  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12769  01085E  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12770  010862  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12771  010866  0E00               	movlw	0
 12772  010868  0100               	movlb	0	; () banked
 12773  01086A  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12774  01086C  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12775                           
 12776                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 12777  010870  0100               	movlb	0	; () banked
 12778  010872  EE20 F004          	lfsr	2,4
 12779  010876  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12780  010878  26D9               	addwf	fsr2l,f,c
 12781  01087A  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12782  01087C  22DA               	addwfc	fsr2h,f,c
 12783  01087E  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12784  010882  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12785  010886  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12786  01088A  0E00               	movlw	0
 12787  01088C  0100               	movlb	0	; () banked
 12788  01088E  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12789  010890  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12790                           
 12791                           ;Port.c: 424: }
 12792  010894  D07A               	goto	l478
 12793  010896                     
 12794                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 12795  010896  C0F2  F0EB         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 12796  01089A  C0F3  F0EC         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 12797  01089E  C0F4  F0ED         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 12798  0108A2  0E03               	movlw	3
 12799  0108A4  0100               	movlb	0	; () banked
 12800  0108A6  6FEE               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 12801  0108A8  EC74  F095         	call	_Port_CheckQuadType	;wreg free
 12802  0108AC  0100               	movlb	0	; () banked
 12803  0108AE  6FF6               	movwf	Port_SetQuadType@Output& (0+255),b
 12804  0108B0  0100               	movlb	0	; () banked
 12805  0108B2  51F6               	movf	Port_SetQuadType@Output& (0+255),w,b
 12806  0108B4  A4D8               	btfss	status,2,c
 12807  0108B6  0012               	return	
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;Port.c: 429: {
 12811                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 12812  0108B8  0100               	movlb	0	; () banked
 12813  0108BA  EE20 F002          	lfsr	2,2
 12814  0108BE  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12815  0108C0  26D9               	addwf	fsr2l,f,c
 12816  0108C2  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12817  0108C4  22DA               	addwfc	fsr2h,f,c
 12818  0108C6  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12819  0108CA  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12820  0108CE  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12821  0108D2  0E0F               	movlw	15
 12822  0108D4  0100               	movlb	0	; () banked
 12823  0108D6  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12824  0108D8  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12825                           
 12826                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 12827  0108DC  0100               	movlb	0	; () banked
 12828  0108DE  EE20 F004          	lfsr	2,4
 12829  0108E2  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12830  0108E4  26D9               	addwf	fsr2l,f,c
 12831  0108E6  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12832  0108E8  22DA               	addwfc	fsr2h,f,c
 12833  0108EA  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12834  0108EE  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12835  0108F2  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12836  0108F6  0E0F               	movlw	15
 12837  0108F8  0100               	movlb	0	; () banked
 12838  0108FA  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12839  0108FC  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12840                           
 12841                           ;Port.c: 435: }
 12842  010900  D044               	goto	l478
 12843  010902                     
 12844                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 12845  010902  C0F2  F0EB         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 12846  010906  C0F3  F0EC         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 12847  01090A  C0F4  F0ED         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 12848  01090E  0E03               	movlw	3
 12849  010910  0100               	movlb	0	; () banked
 12850  010912  6FEE               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 12851  010914  EC74  F095         	call	_Port_CheckQuadType	;wreg free
 12852  010918  0100               	movlb	0	; () banked
 12853  01091A  6FF6               	movwf	Port_SetQuadType@Output& (0+255),b
 12854  01091C  0100               	movlb	0	; () banked
 12855  01091E  51F6               	movf	Port_SetQuadType@Output& (0+255),w,b
 12856  010920  A4D8               	btfss	status,2,c
 12857  010922  0012               	return	
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;Port.c: 440: {
 12861                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 12862  010924  0100               	movlb	0	; () banked
 12863  010926  EE20 F002          	lfsr	2,2
 12864  01092A  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12865  01092C  26D9               	addwf	fsr2l,f,c
 12866  01092E  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12867  010930  22DA               	addwfc	fsr2h,f,c
 12868  010932  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12869  010936  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12870  01093A  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12871  01093E  0E00               	movlw	0
 12872  010940  0100               	movlb	0	; () banked
 12873  010942  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12874  010944  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12875                           
 12876                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 12877  010948  0100               	movlb	0	; () banked
 12878  01094A  EE20 F004          	lfsr	2,4
 12879  01094E  51F2               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12880  010950  26D9               	addwf	fsr2l,f,c
 12881  010952  51F3               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12882  010954  22DA               	addwfc	fsr2h,f,c
 12883  010956  CFDE F0C7          	movff	postinc2,Byte_SetQuad@pInput
 12884  01095A  CFDD F0C8          	movff	postdec2,Byte_SetQuad@pInput+1
 12885  01095E  C0F4  F0C9         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12886  010962  0E00               	movlw	0
 12887  010964  0100               	movlb	0	; () banked
 12888  010966  6FCA               	movwf	Byte_SetQuad@pValue& (0+255),b
 12889  010968  ECB1  F098         	call	_Byte_SetQuad	;wreg free
 12890                           
 12891                           ;Port.c: 446: }
 12892  01096C  D00E               	goto	l478
 12893  01096E                     l476:
 12894  01096E  0100               	movlb	0	; () banked
 12895  010970  51F5               	movf	Port_SetQuadType@pType& (0+255),w,b
 12896                           
 12897                           ; Switch size 1, requested type "space"
 12898                           ; Number of cases is 4, Range of values is 0 to 3
 12899                           ; switch strategies available:
 12900                           ; Name         Instructions Cycles
 12901                           ; simple_byte           13     7 (average)
 12902                           ;	Chosen strategy is simple_byte
 12903  010972  0A00               	xorlw	0	; case 0
 12904  010974  B4D8               	btfsc	status,2,c
 12905  010976  D734               	goto	l477
 12906  010978  0A01               	xorlw	1	; case 1
 12907  01097A  B4D8               	btfsc	status,2,c
 12908  01097C  D756               	goto	l479
 12909  01097E  0A03               	xorlw	3	; case 2
 12910  010980  B4D8               	btfsc	status,2,c
 12911  010982  D789               	goto	l483
 12912  010984  0A01               	xorlw	1	; case 3
 12913  010986  B4D8               	btfsc	status,2,c
 12914  010988  D7BC               	goto	l486
 12915  01098A                     l478:
 12916                           
 12917                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 12918                           
 12919                           ; BSR set to: 0
 12920  01098A  0E08               	movlw	8
 12921  01098C  0100               	movlb	0	; () banked
 12922  01098E  25F2               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12923  010990  0100               	movlb	0	; () banked
 12924  010992  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
 12925  010994  0E00               	movlw	0
 12926  010996  0100               	movlb	0	; () banked
 12927  010998  21F3               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12928  01099A  0100               	movlb	0	; () banked
 12929  01099C  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12930  01099E  0100               	movlb	0	; () banked
 12931  0109A0  51F4               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12932  0109A2  0D04               	mullw	4
 12933  0109A4  CFF3 F0CD          	movff	prodl,Word_SetPair@pPair
 12934  0109A8  C0F5  F0CE         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12935  0109AC  EC27  F097         	call	_Word_SetPair	;wreg free
 12936                           
 12937                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 12938  0109B0  0E08               	movlw	8
 12939  0109B2  0100               	movlb	0	; () banked
 12940  0109B4  25F2               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12941  0109B6  0100               	movlb	0	; () banked
 12942  0109B8  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
 12943  0109BA  0E00               	movlw	0
 12944  0109BC  0100               	movlb	0	; () banked
 12945  0109BE  21F3               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12946  0109C0  0100               	movlb	0	; () banked
 12947  0109C2  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12948  0109C4  0100               	movlb	0	; () banked
 12949  0109C6  51F4               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12950  0109C8  0D04               	mullw	4
 12951  0109CA  28F3               	incf	prodl,w,c
 12952  0109CC  0100               	movlb	0	; () banked
 12953  0109CE  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
 12954  0109D0  C0F5  F0CE         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12955  0109D4  EC27  F097         	call	_Word_SetPair	;wreg free
 12956                           
 12957                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 12958  0109D8  0E08               	movlw	8
 12959  0109DA  0100               	movlb	0	; () banked
 12960  0109DC  25F2               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12961  0109DE  0100               	movlb	0	; () banked
 12962  0109E0  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
 12963  0109E2  0E00               	movlw	0
 12964  0109E4  0100               	movlb	0	; () banked
 12965  0109E6  21F3               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12966  0109E8  0100               	movlb	0	; () banked
 12967  0109EA  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12968  0109EC  0100               	movlb	0	; () banked
 12969  0109EE  51F4               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12970  0109F0  0D04               	mullw	4
 12971  0109F2  50F3               	movf	prodl,w,c
 12972  0109F4  0F02               	addlw	2
 12973  0109F6  0100               	movlb	0	; () banked
 12974  0109F8  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
 12975  0109FA  C0F5  F0CE         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12976  0109FE  EC27  F097         	call	_Word_SetPair	;wreg free
 12977                           
 12978                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 12979  010A02  0E08               	movlw	8
 12980  010A04  0100               	movlb	0	; () banked
 12981  010A06  25F2               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12982  010A08  0100               	movlb	0	; () banked
 12983  010A0A  6FCB               	movwf	Word_SetPair@pInput& (0+255),b
 12984  010A0C  0E00               	movlw	0
 12985  010A0E  0100               	movlb	0	; () banked
 12986  010A10  21F3               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12987  010A12  0100               	movlb	0	; () banked
 12988  010A14  6FCC               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12989  010A16  0100               	movlb	0	; () banked
 12990  010A18  51F4               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12991  010A1A  0D04               	mullw	4
 12992  010A1C  50F3               	movf	prodl,w,c
 12993  010A1E  0F03               	addlw	3
 12994  010A20  0100               	movlb	0	; () banked
 12995  010A22  6FCD               	movwf	Word_SetPair@pPair& (0+255),b
 12996  010A24  C0F5  F0CE         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12997  010A28  EC27  F097         	call	_Word_SetPair	;wreg free
 12998  010A2C  0012               	return	
 12999  010A2E                     __end_of_Port_SetQuadType:
 13000                           	opt stack 0
 13001                           tosu	equ	0xFFF
 13002                           tosh	equ	0xFFE
 13003                           tosl	equ	0xFFD
 13004                           pclath	equ	0xFFA
 13005                           tblptru	equ	0xFF8
 13006                           tblptrh	equ	0xFF7
 13007                           tblptrl	equ	0xFF6
 13008                           tablat	equ	0xFF5
 13009                           prodh	equ	0xFF4
 13010                           prodl	equ	0xFF3
 13011                           intcon	equ	0xFF2
 13012                           postinc0	equ	0xFEE
 13013                           wreg	equ	0xFE8
 13014                           indf1	equ	0xFE7
 13015                           postdec1	equ	0xFE5
 13016                           fsr1h	equ	0xFE2
 13017                           fsr1l	equ	0xFE1
 13018                           indf2	equ	0xFDF
 13019                           postinc2	equ	0xFDE
 13020                           postdec2	equ	0xFDD
 13021                           plusw2	equ	0xFDB
 13022                           fsr2h	equ	0xFDA
 13023                           fsr2l	equ	0xFD9
 13024                           status	equ	0xFD8
 13025                           
 13026 ;; *************** function _Word_SetPair *****************
 13027 ;; Defined at:
 13028 ;;		line 149 in file "Library/Types.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;  pInput          2   15[BANK0 ] PTR struct Word
 13031 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13032 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13033 ;;  pPair           1   17[BANK0 ] unsigned char 
 13034 ;;  pValue          1   18[BANK0 ] unsigned char 
 13035 ;; Auto vars:     Size  Location     Type
 13036 ;;		None
 13037 ;; Return value:  Size  Location     Type
 13038 ;;                  1    wreg      void 
 13039 ;; Registers used:
 13040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13041 ;; Tracked objects:
 13042 ;;		On entry : 0/0
 13043 ;;		On exit  : 0/0
 13044 ;;		Unchanged: 0/0
 13045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13046 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13050 ;;Total ram usage:        4 bytes
 13051 ;; Hardware stack levels used:    1
 13052 ;; Hardware stack levels required when called:    9
 13053 ;; This function calls:
 13054 ;;		_Byte_SetPair
 13055 ;; This function is called by:
 13056 ;;		_Port_SetPinType
 13057 ;;		_Port_SetQuadType
 13058 ;;		_Port_SetType
 13059 ;;		_Port_SetPairType
 13060 ;;		_PortProperty_Init
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           	psect	text66
 13065  012E4E                     __ptext66:
 13066                           	opt stack 0
 13067  012E4E                     _Word_SetPair:
 13068                           	opt stack 18
 13069                           
 13070                           ;Types.c: 151: if (pPair >= 4)
 13071                           
 13072                           ;incstack = 0
 13073  012E4E  0E03               	movlw	3
 13074  012E50  0100               	movlb	0	; () banked
 13075  012E52  65CD               	cpfsgt	Word_SetPair@pPair& (0+255),b
 13076  012E54  D014               	goto	l776
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 13080  012E56  0E01               	movlw	1
 13081  012E58  0100               	movlb	0	; () banked
 13082  012E5A  25CB               	addwf	Word_SetPair@pInput& (0+255),w,b
 13083  012E5C  0100               	movlb	0	; () banked
 13084  012E5E  6FC7               	movwf	Byte_SetPair@pInput& (0+255),b
 13085  012E60  0E00               	movlw	0
 13086  012E62  0100               	movlb	0	; () banked
 13087  012E64  21CC               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 13088  012E66  0100               	movlb	0	; () banked
 13089  012E68  6FC8               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 13090  012E6A  0100               	movlb	0	; () banked
 13091  012E6C  51CD               	movf	Word_SetPair@pPair& (0+255),w,b
 13092  012E6E  0FFC               	addlw	252
 13093  012E70  0100               	movlb	0	; () banked
 13094  012E72  6FC9               	movwf	Byte_SetPair@pPair& (0+255),b
 13095  012E74  C0CE  F0CA         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 13096  012E78  ECA0  F098         	call	_Byte_SetPair	;wreg free
 13097  012E7C  0012               	return	
 13098  012E7E                     l776:
 13099                           
 13100                           ;Types.c: 153: else
 13101                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 13102  012E7E  C0CB  F0C7         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 13103  012E82  C0CC  F0C8         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 13104  012E86  C0CD  F0C9         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 13105  012E8A  C0CE  F0CA         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 13106  012E8E  ECA0  F098         	call	_Byte_SetPair	;wreg free
 13107  012E92  0012               	return	
 13108  012E94                     __end_of_Word_SetPair:
 13109                           	opt stack 0
 13110                           tosu	equ	0xFFF
 13111                           tosh	equ	0xFFE
 13112                           tosl	equ	0xFFD
 13113                           pclath	equ	0xFFA
 13114                           tblptru	equ	0xFF8
 13115                           tblptrh	equ	0xFF7
 13116                           tblptrl	equ	0xFF6
 13117                           tablat	equ	0xFF5
 13118                           prodh	equ	0xFF4
 13119                           prodl	equ	0xFF3
 13120                           intcon	equ	0xFF2
 13121                           postinc0	equ	0xFEE
 13122                           wreg	equ	0xFE8
 13123                           indf1	equ	0xFE7
 13124                           postdec1	equ	0xFE5
 13125                           fsr1h	equ	0xFE2
 13126                           fsr1l	equ	0xFE1
 13127                           indf2	equ	0xFDF
 13128                           postinc2	equ	0xFDE
 13129                           postdec2	equ	0xFDD
 13130                           plusw2	equ	0xFDB
 13131                           fsr2h	equ	0xFDA
 13132                           fsr2l	equ	0xFD9
 13133                           status	equ	0xFD8
 13134                           
 13135 ;; *************** function _Byte_SetPair *****************
 13136 ;; Defined at:
 13137 ;;		line 83 in file "Library/Types.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 13140 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 13141 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 13142 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 13143 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 13144 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 13145 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 13146 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 13147 ;;		 -> NULL(0), 
 13148 ;;  pPair           1   13[BANK0 ] unsigned char 
 13149 ;;  pValue          1   14[BANK0 ] unsigned char 
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;		None
 13152 ;; Return value:  Size  Location     Type
 13153 ;;                  1    wreg      void 
 13154 ;; Registers used:
 13155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13161 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13164 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13165 ;;Total ram usage:        4 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    8
 13168 ;; This function calls:
 13169 ;;		_Byte_SetZone
 13170 ;; This function is called by:
 13171 ;;		_Word_SetPair
 13172 ;;		_Port_SetPairType
 13173 ;;		_Port_SetPair
 13174 ;; This function uses a non-reentrant model
 13175 ;;
 13176                           
 13177                           	psect	text67
 13178  013140                     __ptext67:
 13179                           	opt stack 0
 13180  013140                     _Byte_SetPair:
 13181                           	opt stack 18
 13182                           
 13183                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 13184                           
 13185                           ;incstack = 0
 13186  013140  C0C7  F0BC         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 13187  013144  C0C8  F0BD         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 13188  013148  0E04               	movlw	4
 13189  01314A  0100               	movlb	0	; () banked
 13190  01314C  6FBE               	movwf	Byte_SetZone@pMax& (0+255),b
 13191  01314E  C0C9  F0BF         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 13192  013152  0E02               	movlw	2
 13193  013154  0100               	movlb	0	; () banked
 13194  013156  6FC0               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 13195  013158  C0CA  F0C1         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 13196  01315C  EC25  F08F         	call	_Byte_SetZone	;wreg free
 13197  013160  0012               	return		;funcret
 13198  013162                     __end_of_Byte_SetPair:
 13199                           	opt stack 0
 13200                           tosu	equ	0xFFF
 13201                           tosh	equ	0xFFE
 13202                           tosl	equ	0xFFD
 13203                           pclath	equ	0xFFA
 13204                           tblptru	equ	0xFF8
 13205                           tblptrh	equ	0xFF7
 13206                           tblptrl	equ	0xFF6
 13207                           tablat	equ	0xFF5
 13208                           prodh	equ	0xFF4
 13209                           prodl	equ	0xFF3
 13210                           intcon	equ	0xFF2
 13211                           postinc0	equ	0xFEE
 13212                           wreg	equ	0xFE8
 13213                           indf1	equ	0xFE7
 13214                           postdec1	equ	0xFE5
 13215                           fsr1h	equ	0xFE2
 13216                           fsr1l	equ	0xFE1
 13217                           indf2	equ	0xFDF
 13218                           postinc2	equ	0xFDE
 13219                           postdec2	equ	0xFDD
 13220                           plusw2	equ	0xFDB
 13221                           fsr2h	equ	0xFDA
 13222                           fsr2l	equ	0xFD9
 13223                           status	equ	0xFD8
 13224                           
 13225 ;; *************** function _Port_CheckQuadType *****************
 13226 ;; Defined at:
 13227 ;;		line 126 in file "Library/Port.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 13230 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13231 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13232 ;;  pQuad           1   49[BANK0 ] enum E6776
 13233 ;;  pDrive          1   50[BANK0 ] enum E6469
 13234 ;; Auto vars:     Size  Location     Type
 13235 ;;  Output          1   53[BANK0 ] enum E6475
 13236 ;;  Pair2           1   52[BANK0 ] enum E6760
 13237 ;;  Pair1           1   51[BANK0 ] enum E6760
 13238 ;; Return value:  Size  Location     Type
 13239 ;;                  1    wreg      enum E6475
 13240 ;; Registers used:
 13241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13251 ;;Total ram usage:        7 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:   12
 13254 ;; This function calls:
 13255 ;;		_Port_CheckPairType
 13256 ;; This function is called by:
 13257 ;;		_Port_CheckPortType
 13258 ;;		_Port_SetQuadType
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           	psect	text68
 13263  012AE8                     __ptext68:
 13264                           	opt stack 0
 13265  012AE8                     _Port_CheckQuadType:
 13266                           	opt stack 14
 13267                           
 13268                           ;Port.c: 128: ePinError Output = ePinErrorState;
 13269                           
 13270                           ;incstack = 0
 13271  012AE8  0E05               	movlw	5
 13272  012AEA  0100               	movlb	0	; () banked
 13273  012AEC  6FF1               	movwf	Port_CheckQuadType@Output& (0+255),b
 13274                           
 13275                           ; BSR set to: 0
 13276                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 13277  012AEE  0100               	movlb	0	; () banked
 13278  012AF0  51ED               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 13279  012AF2  0D02               	mullw	2
 13280  012AF4  CFF3 F0EF          	movff	prodl,Port_CheckQuadType@Pair1
 13281                           
 13282                           ; BSR set to: 0
 13283                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 13284  012AF8  0100               	movlb	0	; () banked
 13285  012AFA  51ED               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 13286  012AFC  0D02               	mullw	2
 13287  012AFE  28F3               	incf	prodl,w,c
 13288  012B00  0100               	movlb	0	; () banked
 13289  012B02  6FF0               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 13293  012B04  C0EB  F0E2         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 13294  012B08  C0EC  F0E3         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 13295  012B0C  C0EF  F0E4         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 13296  012B10  C0EE  F0E5         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 13297  012B14  ECDC  F094         	call	_Port_CheckPairType	;wreg free
 13298  012B18  0100               	movlb	0	; () banked
 13299  012B1A  6FF1               	movwf	Port_CheckQuadType@Output& (0+255),b
 13300  012B1C  0100               	movlb	0	; () banked
 13301  012B1E  51F1               	movf	Port_CheckQuadType@Output& (0+255),w,b
 13302  012B20  A4D8               	btfss	status,2,c
 13303  012B22  D00C               	goto	l393
 13304                           
 13305                           ; BSR set to: 0
 13306                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 13307  012B24  C0EB  F0E2         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 13308  012B28  C0EC  F0E3         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 13309  012B2C  C0F0  F0E4         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 13310  012B30  C0EE  F0E5         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 13311  012B34  ECDC  F094         	call	_Port_CheckPairType	;wreg free
 13312  012B38  0100               	movlb	0	; () banked
 13313  012B3A  6FF1               	movwf	Port_CheckQuadType@Output& (0+255),b
 13314  012B3C                     l393:
 13315                           
 13316                           ; BSR set to: 0
 13317                           ;Port.c: 136: return Output;
 13318                           
 13319                           ; BSR set to: 0
 13320  012B3C  0100               	movlb	0	; () banked
 13321  012B3E  51F1               	movf	Port_CheckQuadType@Output& (0+255),w,b
 13322  012B40  0012               	return	
 13323  012B42                     __end_of_Port_CheckQuadType:
 13324                           	opt stack 0
 13325                           tosu	equ	0xFFF
 13326                           tosh	equ	0xFFE
 13327                           tosl	equ	0xFFD
 13328                           pclath	equ	0xFFA
 13329                           tblptru	equ	0xFF8
 13330                           tblptrh	equ	0xFF7
 13331                           tblptrl	equ	0xFF6
 13332                           tablat	equ	0xFF5
 13333                           prodh	equ	0xFF4
 13334                           prodl	equ	0xFF3
 13335                           intcon	equ	0xFF2
 13336                           postinc0	equ	0xFEE
 13337                           wreg	equ	0xFE8
 13338                           indf1	equ	0xFE7
 13339                           postdec1	equ	0xFE5
 13340                           fsr1h	equ	0xFE2
 13341                           fsr1l	equ	0xFE1
 13342                           indf2	equ	0xFDF
 13343                           postinc2	equ	0xFDE
 13344                           postdec2	equ	0xFDD
 13345                           plusw2	equ	0xFDB
 13346                           fsr2h	equ	0xFDA
 13347                           fsr2l	equ	0xFD9
 13348                           status	equ	0xFD8
 13349                           
 13350 ;; *************** function _Port_CheckPairType *****************
 13351 ;; Defined at:
 13352 ;;		line 112 in file "Library/Port.c"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 13355 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13356 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13357 ;;  pPair           1   40[BANK0 ] enum E6760
 13358 ;;  pDrive          1   41[BANK0 ] enum E6469
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 13361 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13362 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 13363 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 13364 ;;		 -> PortC(10), PortF(10), NULL(0), 
 13365 ;;  Output          1   44[BANK0 ] enum E6475
 13366 ;;  Pin2            1   43[BANK0 ] enum E6750
 13367 ;;  Pin1            1   42[BANK0 ] enum E6750
 13368 ;; Return value:  Size  Location     Type
 13369 ;;                  1    wreg      enum E6475
 13370 ;; Registers used:
 13371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13372 ;; Tracked objects:
 13373 ;;		On entry : 0/0
 13374 ;;		On exit  : 0/0
 13375 ;;		Unchanged: 0/0
 13376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;Total ram usage:        9 bytes
 13382 ;; Hardware stack levels used:    1
 13383 ;; Hardware stack levels required when called:   11
 13384 ;; This function calls:
 13385 ;;		_PortProperty_Valid
 13386 ;; This function is called by:
 13387 ;;		_Port_CheckQuadType
 13388 ;;		_Port_SetPairType
 13389 ;; This function uses a non-reentrant model
 13390 ;;
 13391                           
 13392                           	psect	text69
 13393  0129B8                     __ptext69:
 13394                           	opt stack 0
 13395  0129B8                     _Port_CheckPairType:
 13396                           	opt stack 14
 13397                           
 13398                           ;Port.c: 114: ePinError Output = ePinErrorState;
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;incstack = 0
 13402  0129B8  0E05               	movlw	5
 13403  0129BA  0100               	movlb	0	; () banked
 13404  0129BC  6FE8               	movwf	Port_CheckPairType@Output& (0+255),b
 13405                           
 13406                           ; BSR set to: 0
 13407                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 13408  0129BE  C0E2  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 13409  0129C2  C0E3  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 13410  0129C6  CFDE F0E9          	movff	postinc2,Port_CheckPairType@Props
 13411  0129CA  CFDD F0EA          	movff	postdec2,Port_CheckPairType@Props+1
 13412                           
 13413                           ; BSR set to: 0
 13414                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 13415  0129CE  0100               	movlb	0	; () banked
 13416  0129D0  51E4               	movf	Port_CheckPairType@pPair& (0+255),w,b
 13417  0129D2  0D02               	mullw	2
 13418  0129D4  CFF3 F0E6          	movff	prodl,Port_CheckPairType@Pin1
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 13422  0129D8  0100               	movlb	0	; () banked
 13423  0129DA  51E4               	movf	Port_CheckPairType@pPair& (0+255),w,b
 13424  0129DC  0D02               	mullw	2
 13425  0129DE  28F3               	incf	prodl,w,c
 13426  0129E0  0100               	movlb	0	; () banked
 13427  0129E2  6FE7               	movwf	Port_CheckPairType@Pin2& (0+255),b
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 13431  0129E4  C0E9  F0CB         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 13432  0129E8  C0EA  F0CC         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 13433  0129EC  C0E5  F0CD         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 13434  0129F0  C0E6  F0CE         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 13435  0129F4  ECDA  F092         	call	_PortProperty_Valid	;wreg free
 13436  0129F8  0100               	movlb	0	; () banked
 13437  0129FA  6FE8               	movwf	Port_CheckPairType@Output& (0+255),b
 13438  0129FC  0100               	movlb	0	; () banked
 13439  0129FE  51E8               	movf	Port_CheckPairType@Output& (0+255),w,b
 13440  012A00  A4D8               	btfss	status,2,c
 13441  012A02  D00C               	goto	l389
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 13445  012A04  C0E9  F0CB         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 13446  012A08  C0EA  F0CC         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 13447  012A0C  C0E5  F0CD         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 13448  012A10  C0E7  F0CE         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 13449  012A14  ECDA  F092         	call	_PortProperty_Valid	;wreg free
 13450  012A18  0100               	movlb	0	; () banked
 13451  012A1A  6FE8               	movwf	Port_CheckPairType@Output& (0+255),b
 13452  012A1C                     l389:
 13453                           
 13454                           ; BSR set to: 0
 13455                           ;Port.c: 124: return Output;
 13456                           
 13457                           ; BSR set to: 0
 13458  012A1C  0100               	movlb	0	; () banked
 13459  012A1E  51E8               	movf	Port_CheckPairType@Output& (0+255),w,b
 13460  012A20  0012               	return	
 13461  012A22                     __end_of_Port_CheckPairType:
 13462                           	opt stack 0
 13463                           tosu	equ	0xFFF
 13464                           tosh	equ	0xFFE
 13465                           tosl	equ	0xFFD
 13466                           pclath	equ	0xFFA
 13467                           tblptru	equ	0xFF8
 13468                           tblptrh	equ	0xFF7
 13469                           tblptrl	equ	0xFF6
 13470                           tablat	equ	0xFF5
 13471                           prodh	equ	0xFF4
 13472                           prodl	equ	0xFF3
 13473                           intcon	equ	0xFF2
 13474                           postinc0	equ	0xFEE
 13475                           wreg	equ	0xFE8
 13476                           indf1	equ	0xFE7
 13477                           postdec1	equ	0xFE5
 13478                           fsr1h	equ	0xFE2
 13479                           fsr1l	equ	0xFE1
 13480                           indf2	equ	0xFDF
 13481                           postinc2	equ	0xFDE
 13482                           postdec2	equ	0xFDD
 13483                           plusw2	equ	0xFDB
 13484                           fsr2h	equ	0xFDA
 13485                           fsr2l	equ	0xFD9
 13486                           status	equ	0xFD8
 13487                           
 13488 ;; *************** function _PortProperty_Valid *****************
 13489 ;; Defined at:
 13490 ;;		line 220 in file "Library/Types.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 13493 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13494 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 13495 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 13496 ;;		 -> PortC(10), PortF(10), NULL(0), 
 13497 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 13498 ;;  pPin            1   18[BANK0 ] unsigned char 
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 13501 ;;  Pair            1   37[BANK0 ] enum E6469
 13502 ;; Return value:  Size  Location     Type
 13503 ;;                  1    wreg      enum E6475
 13504 ;; Registers used:
 13505 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13512 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13514 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;Total ram usage:       23 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:   10
 13518 ;; This function calls:
 13519 ;;		_Word_GetPair
 13520 ;; This function is called by:
 13521 ;;		_Port_CheckPairType
 13522 ;;		_Port_SetPinType
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           	psect	text70
 13527  0125B4                     __ptext70:
 13528                           	opt stack 0
 13529  0125B4                     _PortProperty_Valid:
 13530                           	opt stack 17
 13531                           
 13532                           ;Types.c: 222: ePinDrive Pair;
 13533                           ;Types.c: 223: const ePinError Errors[4][4] =
 13534                           ;Types.c: 224: {
 13535                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 13536                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 13537                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 13538                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 13539                           ;Types.c: 230: };
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;incstack = 0
 13543  0125B4  0EEB               	movlw	low PortProperty_Valid@F6830
 13544  0125B6  6EF6               	movwf	tblptrl,c
 13545  0125B8                     	if	1	;There is more than 1 active tblptr byte
 13546  0125B8  0EFD               	movlw	high PortProperty_Valid@F6830
 13547  0125BA  6EF7               	movwf	tblptrh,c
 13548  0125BC                     	endif
 13549  0125BC                     	if	1	;There are 3 active tblptr bytes
 13550  0125BC  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 13551  0125BE  6EF8               	movwf	tblptru,c
 13552  0125C0                     	endif
 13553  0125C0  EE20  F0D1         	lfsr	2,PortProperty_Valid@Errors
 13554  0125C4  0E0F               	movlw	15
 13555  0125C6                     u6640:
 13556  0125C6  0009               	tblrd		*+
 13557  0125C8  CFF5 FFDE          	movff	tablat,postinc2
 13558  0125CC  06E8               	decf	wreg,f,c
 13559  0125CE  E2FB               	bc	u6640
 13560                           
 13561                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 13562  0125D0  C0CB  F0C8         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 13563  0125D4  C0CC  F0C9         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 13564  0125D8  C0CE  F0CA         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 13565  0125DC  ECC9  F097         	call	_Word_GetPair	;wreg free
 13566  0125E0  0100               	movlb	0	; () banked
 13567  0125E2  6FE1               	movwf	PortProperty_Valid@Pair& (0+255),b
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 13571  0125E4  0E04               	movlw	4
 13572  0125E6  0100               	movlb	0	; () banked
 13573  0125E8  61CD               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 13574  0125EA  D020               	goto	l819
 13575                           
 13576                           ; BSR set to: 0
 13577  0125EC  0E04               	movlw	4
 13578  0125EE  0100               	movlb	0	; () banked
 13579  0125F0  61E1               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 13580  0125F2  D01C               	goto	l819
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 13584  0125F4  0100               	movlb	0	; () banked
 13585  0125F6  51CD               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 13586  0125F8  0D04               	mullw	4
 13587  0125FA  0ED1               	movlw	low PortProperty_Valid@Errors
 13588  0125FC  0100               	movlb	0	; () banked
 13589  0125FE  6FCF               	movwf	??_PortProperty_Valid& (0+255),b
 13590  012600  0E00               	movlw	high PortProperty_Valid@Errors
 13591  012602  0100               	movlb	0	; () banked
 13592  012604  6FD0               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 13593  012606  50F3               	movf	prodl,w,c
 13594  012608  0100               	movlb	0	; () banked
 13595  01260A  27CF               	addwf	??_PortProperty_Valid& (0+255),f,b
 13596  01260C  50F4               	movf	prodh,w,c
 13597  01260E  0100               	movlb	0	; () banked
 13598  012610  23D0               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 13599  012612  0100               	movlb	0	; () banked
 13600  012614  51E1               	movf	PortProperty_Valid@Pair& (0+255),w,b
 13601  012616  0D01               	mullw	1
 13602  012618  50F3               	movf	prodl,w,c
 13603  01261A  0100               	movlb	0	; () banked
 13604  01261C  25CF               	addwf	??_PortProperty_Valid& (0+255),w,b
 13605  01261E  6ED9               	movwf	fsr2l,c
 13606  012620  50F4               	movf	prodh,w,c
 13607  012622  0100               	movlb	0	; () banked
 13608  012624  21D0               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 13609  012626  6EDA               	movwf	fsr2h,c
 13610  012628  50DF               	movf	indf2,w,c
 13611                           
 13612                           ; BSR set to: 0
 13613  01262A  0012               	return	
 13614  01262C                     l819:
 13615                           
 13616                           ; BSR set to: 0
 13617                           ;Types.c: 237: return ePinErrorState;
 13618                           
 13619                           ; BSR set to: 0
 13620  01262C  0E05               	movlw	5
 13621  01262E  0012               	return	
 13622  012630                     __end_of_PortProperty_Valid:
 13623                           	opt stack 0
 13624                           tosu	equ	0xFFF
 13625                           tosh	equ	0xFFE
 13626                           tosl	equ	0xFFD
 13627                           pclath	equ	0xFFA
 13628                           tblptru	equ	0xFF8
 13629                           tblptrh	equ	0xFF7
 13630                           tblptrl	equ	0xFF6
 13631                           tablat	equ	0xFF5
 13632                           prodh	equ	0xFF4
 13633                           prodl	equ	0xFF3
 13634                           intcon	equ	0xFF2
 13635                           postinc0	equ	0xFEE
 13636                           wreg	equ	0xFE8
 13637                           indf1	equ	0xFE7
 13638                           postdec1	equ	0xFE5
 13639                           fsr1h	equ	0xFE2
 13640                           fsr1l	equ	0xFE1
 13641                           indf2	equ	0xFDF
 13642                           postinc2	equ	0xFDE
 13643                           postdec2	equ	0xFDD
 13644                           plusw2	equ	0xFDB
 13645                           fsr2h	equ	0xFDA
 13646                           fsr2l	equ	0xFD9
 13647                           status	equ	0xFD8
 13648                           
 13649 ;; *************** function _Word_GetPair *****************
 13650 ;; Defined at:
 13651 ;;		line 156 in file "Library/Types.c"
 13652 ;; Parameters:    Size  Location     Type
 13653 ;;  pInput          2   12[BANK0 ] PTR struct Word
 13654 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13655 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 13656 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 13657 ;;		 -> PortC(10), PortF(10), NULL(0), 
 13658 ;;  pPair           1   14[BANK0 ] unsigned char 
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  1    wreg      unsigned char 
 13663 ;; Registers used:
 13664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13670 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;Total ram usage:        3 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    9
 13677 ;; This function calls:
 13678 ;;		_Byte_GetPair
 13679 ;; This function is called by:
 13680 ;;		_Port_Init
 13681 ;;		_Port_SetPin
 13682 ;;		_Port_Set
 13683 ;;		_PortProperty_Valid
 13684 ;;		_Port_SetPair
 13685 ;;		_Port_SetQuad
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           	psect	text71
 13690  012F92                     __ptext71:
 13691                           	opt stack 0
 13692  012F92                     _Word_GetPair:
 13693                           	opt stack 17
 13694                           
 13695                           ;Types.c: 158: if (pPair >= 4)
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;incstack = 0
 13699  012F92  0E03               	movlw	3
 13700  012F94  0100               	movlb	0	; () banked
 13701  012F96  65CA               	cpfsgt	Word_GetPair@pPair& (0+255),b
 13702  012F98  D012               	goto	l781
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 13706  012F9A  0E01               	movlw	1
 13707  012F9C  0100               	movlb	0	; () banked
 13708  012F9E  25C8               	addwf	Word_GetPair@pInput& (0+255),w,b
 13709  012FA0  0100               	movlb	0	; () banked
 13710  012FA2  6FC5               	movwf	Byte_GetPair@pInput& (0+255),b
 13711  012FA4  0E00               	movlw	0
 13712  012FA6  0100               	movlb	0	; () banked
 13713  012FA8  21C9               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 13714  012FAA  0100               	movlb	0	; () banked
 13715  012FAC  6FC6               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 13716  012FAE  0100               	movlb	0	; () banked
 13717  012FB0  51CA               	movf	Word_GetPair@pPair& (0+255),w,b
 13718  012FB2  0FFC               	addlw	252
 13719  012FB4  0100               	movlb	0	; () banked
 13720  012FB6  6FC7               	movwf	Byte_GetPair@pPair& (0+255),b
 13721  012FB8  EC2C  F099         	call	_Byte_GetPair	;wreg free
 13722  012FBC  0012               	return	
 13723  012FBE                     l781:
 13724                           
 13725                           ;Types.c: 160: else
 13726                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 13727  012FBE  C0C8  F0C5         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 13728  012FC2  C0C9  F0C6         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 13729  012FC6  C0CA  F0C7         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 13730  012FCA  EC2C  F099         	call	_Byte_GetPair	;wreg free
 13731  012FCE  0012               	return	
 13732  012FD0                     __end_of_Word_GetPair:
 13733                           	opt stack 0
 13734                           tosu	equ	0xFFF
 13735                           tosh	equ	0xFFE
 13736                           tosl	equ	0xFFD
 13737                           pclath	equ	0xFFA
 13738                           tblptru	equ	0xFF8
 13739                           tblptrh	equ	0xFF7
 13740                           tblptrl	equ	0xFF6
 13741                           tablat	equ	0xFF5
 13742                           prodh	equ	0xFF4
 13743                           prodl	equ	0xFF3
 13744                           intcon	equ	0xFF2
 13745                           postinc0	equ	0xFEE
 13746                           wreg	equ	0xFE8
 13747                           indf1	equ	0xFE7
 13748                           postdec1	equ	0xFE5
 13749                           fsr1h	equ	0xFE2
 13750                           fsr1l	equ	0xFE1
 13751                           indf2	equ	0xFDF
 13752                           postinc2	equ	0xFDE
 13753                           postdec2	equ	0xFDD
 13754                           plusw2	equ	0xFDB
 13755                           fsr2h	equ	0xFDA
 13756                           fsr2l	equ	0xFD9
 13757                           status	equ	0xFD8
 13758                           
 13759 ;; *************** function _Byte_GetPair *****************
 13760 ;; Defined at:
 13761 ;;		line 87 in file "Library/Types.c"
 13762 ;; Parameters:    Size  Location     Type
 13763 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 13764 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 13765 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 13766 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 13767 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 13768 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 13769 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 13770 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 13771 ;;		 -> NULL(0), 
 13772 ;;  pPair           1   11[BANK0 ] unsigned char 
 13773 ;; Auto vars:     Size  Location     Type
 13774 ;;		None
 13775 ;; Return value:  Size  Location     Type
 13776 ;;                  1    wreg      unsigned char 
 13777 ;; Registers used:
 13778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13779 ;; Tracked objects:
 13780 ;;		On entry : 0/0
 13781 ;;		On exit  : 0/0
 13782 ;;		Unchanged: 0/0
 13783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13784 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13787 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13788 ;;Total ram usage:        3 bytes
 13789 ;; Hardware stack levels used:    1
 13790 ;; Hardware stack levels required when called:    8
 13791 ;; This function calls:
 13792 ;;		_Byte_GetZone
 13793 ;; This function is called by:
 13794 ;;		_Word_GetPair
 13795 ;; This function uses a non-reentrant model
 13796 ;;
 13797                           
 13798                           	psect	text72
 13799  013258                     __ptext72:
 13800                           	opt stack 0
 13801  013258                     _Byte_GetPair:
 13802                           	opt stack 17
 13803                           
 13804                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 13805                           
 13806                           ;incstack = 0
 13807  013258  C0C5  F0BC         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 13808  01325C  C0C6  F0BD         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 13809  013260  0E04               	movlw	4
 13810  013262  0100               	movlb	0	; () banked
 13811  013264  6FBE               	movwf	Byte_GetZone@pMax& (0+255),b
 13812  013266  C0C7  F0BF         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 13813  01326A  0E02               	movlw	2
 13814  01326C  0100               	movlb	0	; () banked
 13815  01326E  6FC0               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 13816  013270  EC76  F091         	call	_Byte_GetZone	;wreg free
 13817  013274  0012               	return	
 13818  013276                     __end_of_Byte_GetPair:
 13819                           	opt stack 0
 13820                           tosu	equ	0xFFF
 13821                           tosh	equ	0xFFE
 13822                           tosl	equ	0xFFD
 13823                           pclath	equ	0xFFA
 13824                           tblptru	equ	0xFF8
 13825                           tblptrh	equ	0xFF7
 13826                           tblptrl	equ	0xFF6
 13827                           tablat	equ	0xFF5
 13828                           prodh	equ	0xFF4
 13829                           prodl	equ	0xFF3
 13830                           intcon	equ	0xFF2
 13831                           postinc0	equ	0xFEE
 13832                           wreg	equ	0xFE8
 13833                           indf1	equ	0xFE7
 13834                           postdec1	equ	0xFE5
 13835                           fsr1h	equ	0xFE2
 13836                           fsr1l	equ	0xFE1
 13837                           indf2	equ	0xFDF
 13838                           postinc2	equ	0xFDE
 13839                           postdec2	equ	0xFDD
 13840                           plusw2	equ	0xFDB
 13841                           fsr2h	equ	0xFDA
 13842                           fsr2l	equ	0xFD9
 13843                           status	equ	0xFD8
 13844                           
 13845 ;; *************** function _Byte_GetZone *****************
 13846 ;; Defined at:
 13847 ;;		line 64 in file "Library/Types.c"
 13848 ;; Parameters:    Size  Location     Type
 13849 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13850 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 13851 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 13852 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 13853 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 13854 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 13855 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 13856 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 13857 ;;		 -> NULL(0), 
 13858 ;;  pMax            1    2[BANK0 ] unsigned char 
 13859 ;;  pChunk          1    3[BANK0 ] unsigned char 
 13860 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;  Output          1    8[BANK0 ] unsigned char 
 13863 ;;  Offset          1    7[BANK0 ] unsigned char 
 13864 ;;  MASK            1    6[BANK0 ] unsigned char 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  1    wreg      unsigned char 
 13867 ;; Registers used:
 13868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13874 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;Total ram usage:        9 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; Hardware stack levels required when called:    7
 13881 ;; This function calls:
 13882 ;;		Nothing
 13883 ;; This function is called by:
 13884 ;;		_Byte_GetPair
 13885 ;;		_Byte_GetTriple
 13886 ;;		_Byte_GetQuad
 13887 ;; This function uses a non-reentrant model
 13888 ;;
 13889                           
 13890                           	psect	text73
 13891  0122EC                     __ptext73:
 13892                           	opt stack 0
 13893  0122EC                     _Byte_GetZone:
 13894                           	opt stack 17
 13895                           
 13896                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 13897                           
 13898                           ;incstack = 0
 13899  0122EC  C0BC  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 13900  0122F0  C0BD  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 13901  0122F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13902  0122F6  6EF8               	movwf	tblptru,c
 13903  0122F8  0E0F               	movlw	(high __ramtop+-1)
 13904  0122FA  64F7               	cpfsgt	tblptrh,c
 13905  0122FC  D003               	bra	u6607
 13906  0122FE  0008               	tblrd		*
 13907  012300  50F5               	movf	tablat,w,c
 13908  012302  D005               	bra	u6600
 13909  012304                     u6607:
 13910  012304  CFF6 FFE9          	movff	tblptrl,fsr0l
 13911  012308  CFF7 FFEA          	movff	tblptrh,fsr0h
 13912  01230C  50EF               	movf	indf0,w,c
 13913  01230E                     u6600:
 13914  01230E  0100               	movlb	0	; () banked
 13915  012310  6FC4               	movwf	Byte_GetZone@Output& (0+255),b
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 13919  012312  0100               	movlb	0	; () banked
 13920  012314  51C0               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 13921  012316  0D01               	mullw	1
 13922  012318  0EFB               	movlw	low _MASKS
 13923  01231A  24F3               	addwf	prodl,w,c
 13924  01231C  6EF6               	movwf	tblptrl,c
 13925  01231E  0EFD               	movlw	high _MASKS
 13926  012320  20F4               	addwfc	prodh,w,c
 13927  012322  6EF7               	movwf	tblptrh,c
 13928  012324                     	if	1	;There are 3 active tblptr bytes
 13929  012324  6AF8               	clrf	tblptru,c
 13930  012326  0E00               	movlw	low (__mediumconst shr (0+16))
 13931  012328  22F8               	addwfc	tblptru,f,c
 13932  01232A                     	endif
 13933  01232A  0008               	tblrd		*
 13934  01232C  CFF5 F0C2          	movff	tablat,Byte_GetZone@MASK
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;Types.c: 68: UINT8 Offset = 0;
 13938  012330  0E00               	movlw	0
 13939  012332  0100               	movlb	0	; () banked
 13940  012334  6FC3               	movwf	Byte_GetZone@Offset& (0+255),b
 13941                           
 13942                           ;Types.c: 70: while (pChunk >= pMax)
 13943  012336  D006               	goto	l732
 13944  012338                     
 13945                           ; BSR set to: 0
 13946                           ;Types.c: 71: {
 13947                           ;Types.c: 72: pChunk -= pMax;
 13948                           
 13949                           ; BSR set to: 0
 13950  012338  0100               	movlb	0	; () banked
 13951  01233A  51BE               	movf	Byte_GetZone@pMax& (0+255),w,b
 13952  01233C  0100               	movlb	0	; () banked
 13953  01233E  5FBF               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;Types.c: 73: Offset += 1;
 13957  012340  0100               	movlb	0	; () banked
 13958  012342  2BC3               	incf	Byte_GetZone@Offset& (0+255),f,b
 13959  012344                     l732:
 13960                           
 13961                           ; BSR set to: 0
 13962                           
 13963                           ; BSR set to: 0
 13964  012344  0100               	movlb	0	; () banked
 13965  012346  51BE               	movf	Byte_GetZone@pMax& (0+255),w,b
 13966  012348  0100               	movlb	0	; () banked
 13967  01234A  5DBF               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 13968  01234C  B0D8               	btfsc	status,0,c
 13969  01234E  D7F4               	goto	l733
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;Types.c: 74: }
 13973                           ;Types.c: 75: pChunk *= pChunkSize;
 13974                           
 13975                           ; BSR set to: 0
 13976  012350  0100               	movlb	0	; () banked
 13977  012352  51C0               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 13978  012354  0100               	movlb	0	; () banked
 13979  012356  03BF               	mulwf	Byte_GetZone@pChunk& (0+255),b
 13980  012358  50F3               	movf	prodl,w,c
 13981  01235A  6FBF               	movwf	Byte_GetZone@pChunk& (0+255),b
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;Types.c: 76: pChunk += Offset;
 13985  01235C  0100               	movlb	0	; () banked
 13986  01235E  51C3               	movf	Byte_GetZone@Offset& (0+255),w,b
 13987  012360  0100               	movlb	0	; () banked
 13988  012362  27BF               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;Types.c: 78: Output >>= pChunk;
 13992  012364  0100               	movlb	0	; () banked
 13993  012366  29BF               	incf	Byte_GetZone@pChunk& (0+255),w,b
 13994  012368  0100               	movlb	0	; () banked
 13995  01236A  6FC1               	movwf	??_Byte_GetZone& (0+255),b
 13996  01236C  D003               	goto	u6620
 13997  01236E                     u6625:
 13998  01236E  0100               	movlb	0	; () banked
 13999  012370  90D8               	bcf	status,0,c
 14000  012372  33C4               	rrcf	Byte_GetZone@Output& (0+255),f,b
 14001  012374                     u6620:
 14002  012374  0100               	movlb	0	; () banked
 14003  012376  2FC1               	decfsz	??_Byte_GetZone& (0+255),f,b
 14004  012378  D7FA               	goto	u6625
 14005                           
 14006                           ;Types.c: 79: Output &= MASK;
 14007  01237A  0100               	movlb	0	; () banked
 14008  01237C  51C2               	movf	Byte_GetZone@MASK& (0+255),w,b
 14009  01237E  0100               	movlb	0	; () banked
 14010  012380  17C4               	andwf	Byte_GetZone@Output& (0+255),f,b
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;Types.c: 80: return Output;
 14014  012382  0100               	movlb	0	; () banked
 14015  012384  51C4               	movf	Byte_GetZone@Output& (0+255),w,b
 14016  012386  0012               	return	
 14017  012388                     __end_of_Byte_GetZone:
 14018                           	opt stack 0
 14019                           tosu	equ	0xFFF
 14020                           tosh	equ	0xFFE
 14021                           tosl	equ	0xFFD
 14022                           pclath	equ	0xFFA
 14023                           tblptru	equ	0xFF8
 14024                           tblptrh	equ	0xFF7
 14025                           tblptrl	equ	0xFF6
 14026                           tablat	equ	0xFF5
 14027                           prodh	equ	0xFF4
 14028                           prodl	equ	0xFF3
 14029                           intcon	equ	0xFF2
 14030                           indf0	equ	0xFEF
 14031                           postinc0	equ	0xFEE
 14032                           fsr0h	equ	0xFEA
 14033                           fsr0l	equ	0xFE9
 14034                           wreg	equ	0xFE8
 14035                           indf1	equ	0xFE7
 14036                           postdec1	equ	0xFE5
 14037                           fsr1h	equ	0xFE2
 14038                           fsr1l	equ	0xFE1
 14039                           indf2	equ	0xFDF
 14040                           postinc2	equ	0xFDE
 14041                           postdec2	equ	0xFDD
 14042                           plusw2	equ	0xFDB
 14043                           fsr2h	equ	0xFDA
 14044                           fsr2l	equ	0xFD9
 14045                           status	equ	0xFD8
 14046                           
 14047 ;; *************** function _Byte_SetQuad *****************
 14048 ;; Defined at:
 14049 ;;		line 101 in file "Library/Types.c"
 14050 ;; Parameters:    Size  Location     Type
 14051 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 14052 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 14053 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 14054 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 14055 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 14056 ;;		 -> NULL(0), 
 14057 ;;  pQuad           1   13[BANK0 ] unsigned char 
 14058 ;;  pValue          1   14[BANK0 ] unsigned char 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;		None
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  1    wreg      void 
 14063 ;; Registers used:
 14064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14074 ;;Total ram usage:        4 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:    8
 14077 ;; This function calls:
 14078 ;;		_Byte_SetZone
 14079 ;; This function is called by:
 14080 ;;		_Port_SetQuadType
 14081 ;;		_SPI_Init
 14082 ;;		_SPI_MinSpeed
 14083 ;;		_SPI_MaxSpeed
 14084 ;;		_Port_SetQuad
 14085 ;;		_Word_SetQuad
 14086 ;;		_I2C_Init
 14087 ;; This function uses a non-reentrant model
 14088 ;;
 14089                           
 14090                           	psect	text74
 14091  013162                     __ptext74:
 14092                           	opt stack 0
 14093  013162                     _Byte_SetQuad:
 14094                           	opt stack 19
 14095                           
 14096                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 14097                           
 14098                           ; BSR set to: 0
 14099                           ;incstack = 0
 14100  013162  C0C7  F0BC         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 14101  013166  C0C8  F0BD         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 14102  01316A  0E02               	movlw	2
 14103  01316C  0100               	movlb	0	; () banked
 14104  01316E  6FBE               	movwf	Byte_SetZone@pMax& (0+255),b
 14105  013170  C0C9  F0BF         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 14106  013174  0E04               	movlw	4
 14107  013176  0100               	movlb	0	; () banked
 14108  013178  6FC0               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 14109  01317A  C0CA  F0C1         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 14110  01317E  EC25  F08F         	call	_Byte_SetZone	;wreg free
 14111  013182  0012               	return		;funcret
 14112  013184                     __end_of_Byte_SetQuad:
 14113                           	opt stack 0
 14114                           tosu	equ	0xFFF
 14115                           tosh	equ	0xFFE
 14116                           tosl	equ	0xFFD
 14117                           pclath	equ	0xFFA
 14118                           tblptru	equ	0xFF8
 14119                           tblptrh	equ	0xFF7
 14120                           tblptrl	equ	0xFF6
 14121                           tablat	equ	0xFF5
 14122                           prodh	equ	0xFF4
 14123                           prodl	equ	0xFF3
 14124                           intcon	equ	0xFF2
 14125                           indf0	equ	0xFEF
 14126                           postinc0	equ	0xFEE
 14127                           fsr0h	equ	0xFEA
 14128                           fsr0l	equ	0xFE9
 14129                           wreg	equ	0xFE8
 14130                           indf1	equ	0xFE7
 14131                           postdec1	equ	0xFE5
 14132                           fsr1h	equ	0xFE2
 14133                           fsr1l	equ	0xFE1
 14134                           indf2	equ	0xFDF
 14135                           postinc2	equ	0xFDE
 14136                           postdec2	equ	0xFDD
 14137                           plusw2	equ	0xFDB
 14138                           fsr2h	equ	0xFDA
 14139                           fsr2l	equ	0xFD9
 14140                           status	equ	0xFD8
 14141                           
 14142 ;; *************** function _Byte_SetZone *****************
 14143 ;; Defined at:
 14144 ;;		line 47 in file "Library/Types.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 14147 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 14148 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 14149 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 14150 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 14151 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 14152 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 14153 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 14154 ;;		 -> PortC(10), PortF(10), NULL(0), 
 14155 ;;  pMax            1    2[BANK0 ] unsigned char 
 14156 ;;  pChunk          1    3[BANK0 ] unsigned char 
 14157 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 14158 ;;  pValue          1    5[BANK0 ] unsigned char 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  MASK            1   10[BANK0 ] unsigned char 
 14161 ;;  Offset          1    9[BANK0 ] unsigned char 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  1    wreg      void 
 14164 ;; Registers used:
 14165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14171 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14174 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;Total ram usage:       11 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    7
 14178 ;; This function calls:
 14179 ;;		Nothing
 14180 ;; This function is called by:
 14181 ;;		_Byte_SetPair
 14182 ;;		_Byte_SetQuad
 14183 ;;		_Byte_SetTriple
 14184 ;; This function uses a non-reentrant model
 14185 ;;
 14186                           
 14187                           	psect	text75
 14188  011E4A                     __ptext75:
 14189                           	opt stack 0
 14190  011E4A                     _Byte_SetZone:
 14191                           	opt stack 18
 14192                           
 14193                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 14194                           
 14195                           ;incstack = 0
 14196  011E4A  0100               	movlb	0	; () banked
 14197  011E4C  51C0               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 14198  011E4E  0D01               	mullw	1
 14199  011E50  0EFB               	movlw	low _MASKS
 14200  011E52  24F3               	addwf	prodl,w,c
 14201  011E54  6EF6               	movwf	tblptrl,c
 14202  011E56  0EFD               	movlw	high _MASKS
 14203  011E58  20F4               	addwfc	prodh,w,c
 14204  011E5A  6EF7               	movwf	tblptrh,c
 14205  011E5C                     	if	1	;There are 3 active tblptr bytes
 14206  011E5C  6AF8               	clrf	tblptru,c
 14207  011E5E  0E00               	movlw	low (__mediumconst shr (0+16))
 14208  011E60  22F8               	addwfc	tblptru,f,c
 14209  011E62                     	endif
 14210  011E62  0008               	tblrd		*
 14211  011E64  CFF5 F0C6          	movff	tablat,Byte_SetZone@MASK
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;Types.c: 50: UINT8 Offset = 0;
 14215  011E68  0E00               	movlw	0
 14216  011E6A  0100               	movlb	0	; () banked
 14217  011E6C  6FC5               	movwf	Byte_SetZone@Offset& (0+255),b
 14218                           
 14219                           ;Types.c: 52: while (pChunk >= pMax)
 14220  011E6E  D006               	goto	l726
 14221  011E70                     
 14222                           ; BSR set to: 0
 14223                           ;Types.c: 53: {
 14224                           ;Types.c: 54: pChunk -= pMax;
 14225                           
 14226                           ; BSR set to: 0
 14227  011E70  0100               	movlb	0	; () banked
 14228  011E72  51BE               	movf	Byte_SetZone@pMax& (0+255),w,b
 14229  011E74  0100               	movlb	0	; () banked
 14230  011E76  5FBF               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;Types.c: 55: Offset += 1;
 14234  011E78  0100               	movlb	0	; () banked
 14235  011E7A  2BC5               	incf	Byte_SetZone@Offset& (0+255),f,b
 14236  011E7C                     l726:
 14237                           
 14238                           ; BSR set to: 0
 14239                           
 14240                           ; BSR set to: 0
 14241  011E7C  0100               	movlb	0	; () banked
 14242  011E7E  51BE               	movf	Byte_SetZone@pMax& (0+255),w,b
 14243  011E80  0100               	movlb	0	; () banked
 14244  011E82  5DBF               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 14245  011E84  B0D8               	btfsc	status,0,c
 14246  011E86  D7F4               	goto	l727
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;Types.c: 56: }
 14250                           ;Types.c: 57: pChunk *= pChunkSize;
 14251                           
 14252                           ; BSR set to: 0
 14253  011E88  0100               	movlb	0	; () banked
 14254  011E8A  51C0               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 14255  011E8C  0100               	movlb	0	; () banked
 14256  011E8E  03BF               	mulwf	Byte_SetZone@pChunk& (0+255),b
 14257  011E90  50F3               	movf	prodl,w,c
 14258  011E92  6FBF               	movwf	Byte_SetZone@pChunk& (0+255),b
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;Types.c: 58: pChunk += Offset;
 14262  011E94  0100               	movlb	0	; () banked
 14263  011E96  51C5               	movf	Byte_SetZone@Offset& (0+255),w,b
 14264  011E98  0100               	movlb	0	; () banked
 14265  011E9A  27BF               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;Types.c: 60: pValue &= MASK;
 14269  011E9C  0100               	movlb	0	; () banked
 14270  011E9E  51C6               	movf	Byte_SetZone@MASK& (0+255),w,b
 14271  011EA0  0100               	movlb	0	; () banked
 14272  011EA2  17C1               	andwf	Byte_SetZone@pValue& (0+255),f,b
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 14276  011EA4  C0BF  F0C2         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 14277  011EA8  C0C6  F0C3         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 14278  011EAC  0100               	movlb	0	; () banked
 14279  011EAE  2BC2               	incf	??_Byte_SetZone& (0+255),f,b
 14280  011EB0  D003               	goto	u6704
 14281  011EB2                     u6705:
 14282  011EB2  0100               	movlb	0	; () banked
 14283  011EB4  90D8               	bcf	status,0,c
 14284  011EB6  37C3               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 14285  011EB8                     u6704:
 14286  011EB8  0100               	movlb	0	; () banked
 14287  011EBA  2FC2               	decfsz	??_Byte_SetZone& (0+255),f,b
 14288  011EBC  D7FA               	goto	u6705
 14289  011EBE  0100               	movlb	0	; () banked
 14290  011EC0  51C3               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 14291  011EC2  0AFF               	xorlw	255
 14292  011EC4  0100               	movlb	0	; () banked
 14293  011EC6  6FC4               	movwf	(??_Byte_SetZone+2)& (0+255),b
 14294  011EC8  C0BC  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 14295  011ECC  C0BD  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 14296  011ED0  0100               	movlb	0	; () banked
 14297  011ED2  51C4               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 14298  011ED4  16DF               	andwf	indf2,f,c
 14299                           
 14300                           ; BSR set to: 0
 14301                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 14302  011ED6  C0BF  F0C2         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 14303  011EDA  C0C1  F0C3         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 14304  011EDE  0100               	movlb	0	; () banked
 14305  011EE0  2BC2               	incf	??_Byte_SetZone& (0+255),f,b
 14306  011EE2  D003               	goto	u6714
 14307  011EE4                     u6715:
 14308  011EE4  0100               	movlb	0	; () banked
 14309  011EE6  90D8               	bcf	status,0,c
 14310  011EE8  37C3               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 14311  011EEA                     u6714:
 14312  011EEA  0100               	movlb	0	; () banked
 14313  011EEC  2FC2               	decfsz	??_Byte_SetZone& (0+255),f,b
 14314  011EEE  D7FA               	goto	u6715
 14315  011EF0  C0BC  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 14316  011EF4  C0BD  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 14317  011EF8  0100               	movlb	0	; () banked
 14318  011EFA  51C3               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 14319  011EFC  12DF               	iorwf	indf2,f,c
 14320                           
 14321                           ; BSR set to: 0
 14322  011EFE  0012               	return		;funcret
 14323  011F00                     __end_of_Byte_SetZone:
 14324                           	opt stack 0
 14325                           tosu	equ	0xFFF
 14326                           tosh	equ	0xFFE
 14327                           tosl	equ	0xFFD
 14328                           pclath	equ	0xFFA
 14329                           tblptru	equ	0xFF8
 14330                           tblptrh	equ	0xFF7
 14331                           tblptrl	equ	0xFF6
 14332                           tablat	equ	0xFF5
 14333                           prodh	equ	0xFF4
 14334                           prodl	equ	0xFF3
 14335                           intcon	equ	0xFF2
 14336                           indf0	equ	0xFEF
 14337                           postinc0	equ	0xFEE
 14338                           fsr0h	equ	0xFEA
 14339                           fsr0l	equ	0xFE9
 14340                           wreg	equ	0xFE8
 14341                           indf1	equ	0xFE7
 14342                           postdec1	equ	0xFE5
 14343                           fsr1h	equ	0xFE2
 14344                           fsr1l	equ	0xFE1
 14345                           indf2	equ	0xFDF
 14346                           postinc2	equ	0xFDE
 14347                           postdec2	equ	0xFDD
 14348                           plusw2	equ	0xFDB
 14349                           fsr2h	equ	0xFDA
 14350                           fsr2l	equ	0xFD9
 14351                           status	equ	0xFD8
 14352                           
 14353 ;; *************** function _Console_Init *****************
 14354 ;; Defined at:
 14355 ;;		line 157 in file "Library/Console.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;		None
 14358 ;; Auto vars:     Size  Location     Type
 14359 ;;  y               1    3[BANK0 ] unsigned char 
 14360 ;;  x               1    2[BANK0 ] unsigned char 
 14361 ;; Return value:  Size  Location     Type
 14362 ;;                  1    wreg      void 
 14363 ;; Registers used:
 14364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14365 ;; Tracked objects:
 14366 ;;		On entry : 0/0
 14367 ;;		On exit  : 0/0
 14368 ;;		Unchanged: 0/0
 14369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14371 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14374 ;;Total ram usage:        4 bytes
 14375 ;; Hardware stack levels used:    1
 14376 ;; Hardware stack levels required when called:    7
 14377 ;; This function calls:
 14378 ;;		Nothing
 14379 ;; This function is called by:
 14380 ;;		_init
 14381 ;; This function uses a non-reentrant model
 14382 ;;
 14383                           
 14384                           	psect	text76
 14385  0124AA                     __ptext76:
 14386                           	opt stack 0
 14387  0124AA                     _Console_Init:
 14388                           	opt stack 22
 14389                           
 14390                           ;Console.c: 160: lBufferX = 0;
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;incstack = 0
 14394  0124AA  0E00               	movlw	0
 14395  0124AC  6E3E               	movwf	_lBufferX,c
 14396                           
 14397                           ;Console.c: 161: lBufferY = 0;
 14398  0124AE  0E00               	movlw	0
 14399  0124B0  6E3D               	movwf	_lBufferY,c
 14400                           
 14401                           ;Console.c: 163: UINT8 x, y;
 14402                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 14403  0124B2  0E00               	movlw	0
 14404  0124B4  0100               	movlb	0	; () banked
 14405  0124B6  6FBE               	movwf	Console_Init@x& (0+255),b
 14406  0124B8                     l11792:
 14407                           
 14408                           ; BSR set to: 0
 14409  0124B8  0E13               	movlw	19
 14410  0124BA  0100               	movlb	0	; () banked
 14411  0124BC  65BE               	cpfsgt	Console_Init@x& (0+255),b
 14412  0124BE  D001               	goto	l976
 14413  0124C0  0012               	return	
 14414  0124C2                     l976:
 14415                           
 14416                           ; BSR set to: 0
 14417                           ;Console.c: 165: {
 14418                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 14419                           
 14420                           ; BSR set to: 0
 14421  0124C2  0E00               	movlw	0
 14422  0124C4  0100               	movlb	0	; () banked
 14423  0124C6  6FBF               	movwf	Console_Init@y& (0+255),b
 14424  0124C8                     l11798:
 14425                           
 14426                           ; BSR set to: 0
 14427  0124C8  0E0E               	movlw	14
 14428  0124CA  0100               	movlb	0	; () banked
 14429  0124CC  65BF               	cpfsgt	Console_Init@y& (0+255),b
 14430  0124CE  D001               	goto	l978
 14431  0124D0  D02C               	goto	u7700
 14432  0124D2                     l978:
 14433                           
 14434                           ; BSR set to: 0
 14435                           ;Console.c: 167: {
 14436                           ;Console.c: 168: lBuffer[y][x] = '\0';
 14437                           
 14438                           ; BSR set to: 0
 14439  0124D2  0100               	movlb	0	; () banked
 14440  0124D4  51BF               	movf	Console_Init@y& (0+255),w,b
 14441  0124D6  0D14               	mullw	20
 14442  0124D8  0E63               	movlw	low _lBuffer
 14443  0124DA  0100               	movlb	0	; () banked
 14444  0124DC  6FBC               	movwf	??_Console_Init& (0+255),b
 14445  0124DE  0E04               	movlw	high _lBuffer
 14446  0124E0  0100               	movlb	0	; () banked
 14447  0124E2  6FBD               	movwf	(??_Console_Init+1)& (0+255),b
 14448  0124E4  50F3               	movf	prodl,w,c
 14449  0124E6  0100               	movlb	0	; () banked
 14450  0124E8  27BC               	addwf	??_Console_Init& (0+255),f,b
 14451  0124EA  50F4               	movf	prodh,w,c
 14452  0124EC  0100               	movlb	0	; () banked
 14453  0124EE  23BD               	addwfc	(??_Console_Init+1)& (0+255),f,b
 14454  0124F0  0100               	movlb	0	; () banked
 14455  0124F2  51BE               	movf	Console_Init@x& (0+255),w,b
 14456  0124F4  0D01               	mullw	1
 14457  0124F6  50F3               	movf	prodl,w,c
 14458  0124F8  0100               	movlb	0	; () banked
 14459  0124FA  25BC               	addwf	??_Console_Init& (0+255),w,b
 14460  0124FC  6ED9               	movwf	fsr2l,c
 14461  0124FE  50F4               	movf	prodh,w,c
 14462  012500  0100               	movlb	0	; () banked
 14463  012502  21BD               	addwfc	(??_Console_Init+1)& (0+255),w,b
 14464  012504  6EDA               	movwf	fsr2h,c
 14465  012506  0E00               	movlw	0
 14466  012508  6EDF               	movwf	indf2,c
 14467                           
 14468                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 14469  01250A  0100               	movlb	0	; () banked
 14470  01250C  51BF               	movf	Console_Init@y& (0+255),w,b
 14471  01250E  0D02               	mullw	2
 14472  012510  0E00               	movlw	low _lCBuffer
 14473  012512  24F3               	addwf	prodl,w,c
 14474  012514  6ED9               	movwf	fsr2l,c
 14475  012516  0E01               	movlw	high _lCBuffer
 14476  012518  20F4               	addwfc	prodh,w,c
 14477  01251A  6EDA               	movwf	fsr2h,c
 14478  01251C  0EFF               	movlw	255
 14479  01251E  6EDE               	movwf	postinc2,c
 14480  012520  0EFF               	movlw	255
 14481  012522  6EDD               	movwf	postdec2,c
 14482                           
 14483                           ; BSR set to: 0
 14484  012524  0100               	movlb	0	; () banked
 14485  012526  2BBF               	incf	Console_Init@y& (0+255),f,b
 14486  012528  D7CF               	goto	l11798
 14487  01252A                     u7700:
 14488                           
 14489                           ; BSR set to: 0
 14490                           
 14491                           ; BSR set to: 0
 14492  01252A  0100               	movlb	0	; () banked
 14493  01252C  2BBE               	incf	Console_Init@x& (0+255),f,b
 14494  01252E  D7C4               	goto	l11792
 14495  012530                     __end_of_Console_Init:
 14496                           	opt stack 0
 14497                           tosu	equ	0xFFF
 14498                           tosh	equ	0xFFE
 14499                           tosl	equ	0xFFD
 14500                           pclath	equ	0xFFA
 14501                           tblptru	equ	0xFF8
 14502                           tblptrh	equ	0xFF7
 14503                           tblptrl	equ	0xFF6
 14504                           tablat	equ	0xFF5
 14505                           prodh	equ	0xFF4
 14506                           prodl	equ	0xFF3
 14507                           intcon	equ	0xFF2
 14508                           indf0	equ	0xFEF
 14509                           postinc0	equ	0xFEE
 14510                           fsr0h	equ	0xFEA
 14511                           fsr0l	equ	0xFE9
 14512                           wreg	equ	0xFE8
 14513                           indf1	equ	0xFE7
 14514                           postdec1	equ	0xFE5
 14515                           fsr1h	equ	0xFE2
 14516                           fsr1l	equ	0xFE1
 14517                           indf2	equ	0xFDF
 14518                           postinc2	equ	0xFDE
 14519                           postdec2	equ	0xFDD
 14520                           plusw2	equ	0xFDB
 14521                           fsr2h	equ	0xFDA
 14522                           fsr2l	equ	0xFD9
 14523                           status	equ	0xFD8
 14524                           
 14525 ;; *************** function _ADC_Start *****************
 14526 ;; Defined at:
 14527 ;;		line 114 in file "Library/ADC.c"
 14528 ;; Parameters:    Size  Location     Type
 14529 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 14530 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 14531 ;;		 -> NULL(0), 
 14532 ;; Auto vars:     Size  Location     Type
 14533 ;;		None
 14534 ;; Return value:  Size  Location     Type
 14535 ;;                  1    wreg      void 
 14536 ;; Registers used:
 14537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14538 ;; Tracked objects:
 14539 ;;		On entry : 0/0
 14540 ;;		On exit  : 0/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14543 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;Total ram usage:        4 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    8
 14550 ;; This function calls:
 14551 ;;		_ADC_Off
 14552 ;;		_ADC_On
 14553 ;;		_ADC_SetChannel
 14554 ;; This function is called by:
 14555 ;;		_init
 14556 ;;		_FunctADC
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           	psect	text77
 14561  012530                     __ptext77:
 14562                           	opt stack 0
 14563  012530                     _ADC_Start:
 14564                           	opt stack 21
 14565                           
 14566                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;incstack = 0
 14570  012530  B2C2               	btfsc	4034,1,c	;volatile
 14571  012532  0012               	return	
 14572  012534                     
 14573                           ;ADC.c: 128: {
 14574                           ;ADC.c: 129: ADC_Off();
 14575                           
 14576                           ;ADC.c: 127: for(;;)
 14577  012534  ECD4  F099         	call	_ADC_Off	;wreg free
 14578                           
 14579                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 14580  012538  C0BE  FFD9         	movff	ADC_Start@pInput,fsr2l
 14581  01253C  C0BF  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 14582  012540  50DF               	movf	indf2,w,c
 14583  012542  EC57  F099         	call	_ADC_SetChannel
 14584                           
 14585                           ;ADC.c: 131: ADC_On();
 14586  012546  ECE1  F099         	call	_ADC_On	;wreg free
 14587                           
 14588                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 14589  01254A  82C2               	bsf	4034,1,c	;volatile
 14590  01254C  B2C2               	btfsc	4034,1,c	;volatile
 14591  01254E  D7FE               	goto	l1280
 14592                           
 14593                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 14594  012550  50C3               	movf	4035,w,c	;volatile
 14595  012552  CFC4 F0C0          	movff	4036,??_ADC_Start	;volatile
 14596  012556  0100               	movlb	0	; () banked
 14597  012558  6BC1               	clrf	(??_ADC_Start+1)& (0+255),b
 14598  01255A  C0C0  F0C1         	movff	??_ADC_Start,??_ADC_Start+1
 14599  01255E  0100               	movlb	0	; () banked
 14600  012560  6BC0               	clrf	??_ADC_Start& (0+255),b
 14601  012562  0100               	movlb	0	; () banked
 14602  012564  13C0               	iorwf	??_ADC_Start& (0+255),f,b
 14603  012566  0E00               	movlw	0
 14604  012568  13C1               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 14605  01256A  0100               	movlb	0	; () banked
 14606  01256C  EE20 F001          	lfsr	2,1
 14607  012570  51BE               	movf	ADC_Start@pInput& (0+255),w,b
 14608  012572  26D9               	addwf	fsr2l,f,c
 14609  012574  51BF               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 14610  012576  22DA               	addwfc	fsr2h,f,c
 14611  012578  C0C0  FFDE         	movff	??_ADC_Start,postinc2
 14612  01257C  C0C1  FFDD         	movff	??_ADC_Start+1,postdec2
 14613                           
 14614                           ;ADC.c: 141: if (pInput->mNext == 0)
 14615  012580  0100               	movlb	0	; () banked
 14616  012582  EE20 F003          	lfsr	2,3
 14617  012586  51BE               	movf	ADC_Start@pInput& (0+255),w,b
 14618  012588  26D9               	addwf	fsr2l,f,c
 14619  01258A  51BF               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 14620  01258C  22DA               	addwfc	fsr2h,f,c
 14621  01258E  50DE               	movf	postinc2,w,c
 14622  012590  10DE               	iorwf	postinc2,w,c
 14623  012592  B4D8               	btfsc	status,2,c
 14624  012594  D00C               	goto	l1283
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;ADC.c: 145: pInput = pInput->mNext;
 14628                           
 14629                           ; BSR set to: 0
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;ADC.c: 142: break;
 14633  012596  0100               	movlb	0	; () banked
 14634  012598  EE20 F003          	lfsr	2,3
 14635  01259C  51BE               	movf	ADC_Start@pInput& (0+255),w,b
 14636  01259E  26D9               	addwf	fsr2l,f,c
 14637  0125A0  51BF               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 14638  0125A2  22DA               	addwfc	fsr2h,f,c
 14639  0125A4  CFDE F0BE          	movff	postinc2,ADC_Start@pInput
 14640  0125A8  CFDD F0BF          	movff	postdec2,ADC_Start@pInput+1
 14641                           
 14642                           ;ADC.c: 146: }
 14643  0125AC  D7C3               	goto	l1276
 14644  0125AE                     l1283:
 14645                           
 14646                           ; BSR set to: 0
 14647                           ;ADC.c: 147: ADC_Off();
 14648                           
 14649                           ; BSR set to: 0
 14650  0125AE  ECD4  F099         	call	_ADC_Off	;wreg free
 14651  0125B2  0012               	return		;funcret
 14652  0125B4                     __end_of_ADC_Start:
 14653                           	opt stack 0
 14654                           tosu	equ	0xFFF
 14655                           tosh	equ	0xFFE
 14656                           tosl	equ	0xFFD
 14657                           pclath	equ	0xFFA
 14658                           tblptru	equ	0xFF8
 14659                           tblptrh	equ	0xFF7
 14660                           tblptrl	equ	0xFF6
 14661                           tablat	equ	0xFF5
 14662                           prodh	equ	0xFF4
 14663                           prodl	equ	0xFF3
 14664                           intcon	equ	0xFF2
 14665                           indf0	equ	0xFEF
 14666                           postinc0	equ	0xFEE
 14667                           fsr0h	equ	0xFEA
 14668                           fsr0l	equ	0xFE9
 14669                           wreg	equ	0xFE8
 14670                           indf1	equ	0xFE7
 14671                           postdec1	equ	0xFE5
 14672                           fsr1h	equ	0xFE2
 14673                           fsr1l	equ	0xFE1
 14674                           indf2	equ	0xFDF
 14675                           postinc2	equ	0xFDE
 14676                           postdec2	equ	0xFDD
 14677                           plusw2	equ	0xFDB
 14678                           fsr2h	equ	0xFDA
 14679                           fsr2l	equ	0xFD9
 14680                           status	equ	0xFD8
 14681                           
 14682 ;; *************** function _ADC_Init *****************
 14683 ;; Defined at:
 14684 ;;		line 19 in file "Library/ADC.c"
 14685 ;; Parameters:    Size  Location     Type
 14686 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 14687 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 14688 ;;  pChannel        1    6[BANK0 ] enum E6742
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14700 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;Total ram usage:        3 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:    9
 14707 ;; This function calls:
 14708 ;;		_ADC_Calibrate
 14709 ;;		_ADC_ClockDivision
 14710 ;;		_ADC_ConversionTime
 14711 ;;		_ADC_SetChannel
 14712 ;;		_ADC_SetupIO
 14713 ;; This function is called by:
 14714 ;;		_init
 14715 ;;		_FunctInitADC
 14716 ;; This function uses a non-reentrant model
 14717 ;;
 14718                           
 14719                           	psect	text78
 14720  012630                     __ptext78:
 14721                           	opt stack 0
 14722  012630                     _ADC_Init:
 14723                           	opt stack 20
 14724                           
 14725                           ;ADC.c: 21: if(pInput==(void*)0)
 14726                           
 14727                           ;incstack = 0
 14728  012630  0100               	movlb	0	; () banked
 14729  012632  51C0               	movf	ADC_Init@pInput& (0+255),w,b
 14730  012634  0100               	movlb	0	; () banked
 14731  012636  11C1               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 14732  012638  B4D8               	btfsc	status,2,c
 14733  01263A  0012               	return	
 14734                           
 14735                           ; BSR set to: 0
 14736                           ;ADC.c: 25: lCurrent = pInput;
 14737                           
 14738                           ; BSR set to: 0
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;ADC.c: 22: return;
 14742  01263C  C0C0  F075         	movff	ADC_Init@pInput,_lCurrent
 14743  012640  C0C1  F076         	movff	ADC_Init@pInput+1,_lCurrent+1
 14744                           
 14745                           ; BSR set to: 0
 14746                           ;ADC.c: 27: pInput->mChannel = pChannel;
 14747  012644  C0C0  FFD9         	movff	ADC_Init@pInput,fsr2l
 14748  012648  C0C1  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 14749  01264C  C0C2  FFDF         	movff	ADC_Init@pChannel,indf2
 14750                           
 14751                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 14752  012650  0100               	movlb	0	; () banked
 14753  012652  EE20 F003          	lfsr	2,3
 14754  012656  51C0               	movf	ADC_Init@pInput& (0+255),w,b
 14755  012658  26D9               	addwf	fsr2l,f,c
 14756  01265A  51C1               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 14757  01265C  22DA               	addwfc	fsr2h,f,c
 14758  01265E  0E00               	movlw	0
 14759  012660  6EDE               	movwf	postinc2,c
 14760  012662  0E00               	movlw	0
 14761  012664  6EDD               	movwf	postdec2,c
 14762                           
 14763                           ;ADC.c: 29: pInput->mValue = 0;
 14764  012666  0100               	movlb	0	; () banked
 14765  012668  EE20 F001          	lfsr	2,1
 14766  01266C  51C0               	movf	ADC_Init@pInput& (0+255),w,b
 14767  01266E  26D9               	addwf	fsr2l,f,c
 14768  012670  51C1               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 14769  012672  22DA               	addwfc	fsr2h,f,c
 14770  012674  0E00               	movlw	0
 14771  012676  6EDE               	movwf	postinc2,c
 14772  012678  0E00               	movlw	0
 14773  01267A  6EDD               	movwf	postdec2,c
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 14777  01267C  0100               	movlb	0	; () banked
 14778  01267E  51C2               	movf	ADC_Init@pChannel& (0+255),w,b
 14779  012680  EC57  F099         	call	_ADC_SetChannel
 14780                           
 14781                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 14782  012684  9EC2               	bcf	4034,7,c	;volatile
 14783                           
 14784                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 14785  012686  9CC2               	bcf	4034,6,c	;volatile
 14786                           
 14787                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 14788  012688  8EC1               	bsf	4033,7,c	;volatile
 14789                           
 14790                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 14791  01268A  8CC1               	bsf	4033,6,c	;volatile
 14792                           
 14793                           ;ADC.c: 43: ADC_ConversionTime(12);
 14794  01268C  0E0C               	movlw	12
 14795  01268E  ECE0  F096         	call	_ADC_ConversionTime
 14796                           
 14797                           ;ADC.c: 47: ADC_ClockDivision(16);
 14798  012692  0E10               	movlw	16
 14799  012694  EC10  F092         	call	_ADC_ClockDivision
 14800                           
 14801                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 14802  012698  0100               	movlb	0	; () banked
 14803  01269A  51C2               	movf	ADC_Init@pChannel& (0+255),w,b
 14804  01269C  EC03  F098         	call	_ADC_SetupIO
 14805                           
 14806                           ;ADC.c: 58: ADC_Initialised = 1;
 14807  0126A0  0E01               	movlw	1
 14808  0126A2  6E39               	movwf	_ADC_Initialised,c
 14809                           
 14810                           ;ADC.c: 61: ADC_Calibrate();
 14811  0126A4  EC72  F099         	call	_ADC_Calibrate	;wreg free
 14812  0126A8  0012               	return		;funcret
 14813  0126AA                     __end_of_ADC_Init:
 14814                           	opt stack 0
 14815                           tosu	equ	0xFFF
 14816                           tosh	equ	0xFFE
 14817                           tosl	equ	0xFFD
 14818                           pclath	equ	0xFFA
 14819                           tblptru	equ	0xFF8
 14820                           tblptrh	equ	0xFF7
 14821                           tblptrl	equ	0xFF6
 14822                           tablat	equ	0xFF5
 14823                           prodh	equ	0xFF4
 14824                           prodl	equ	0xFF3
 14825                           intcon	equ	0xFF2
 14826                           indf0	equ	0xFEF
 14827                           postinc0	equ	0xFEE
 14828                           fsr0h	equ	0xFEA
 14829                           fsr0l	equ	0xFE9
 14830                           wreg	equ	0xFE8
 14831                           indf1	equ	0xFE7
 14832                           postdec1	equ	0xFE5
 14833                           fsr1h	equ	0xFE2
 14834                           fsr1l	equ	0xFE1
 14835                           indf2	equ	0xFDF
 14836                           postinc2	equ	0xFDE
 14837                           postdec2	equ	0xFDD
 14838                           plusw2	equ	0xFDB
 14839                           fsr2h	equ	0xFDA
 14840                           fsr2l	equ	0xFD9
 14841                           status	equ	0xFD8
 14842                           
 14843 ;; *************** function _ADC_SetupIO *****************
 14844 ;; Defined at:
 14845 ;;		line 150 in file "Library/ADC.c"
 14846 ;; Parameters:    Size  Location     Type
 14847 ;;  pChannel        1    wreg     enum E6742
 14848 ;; Auto vars:     Size  Location     Type
 14849 ;;  pChannel        1    2[BANK0 ] enum E6742
 14850 ;;  MASK            1    3[BANK0 ] unsigned char 
 14851 ;; Return value:  Size  Location     Type
 14852 ;;                  1    wreg      void 
 14853 ;; Registers used:
 14854 ;;		wreg, status,2, status,0
 14855 ;; Tracked objects:
 14856 ;;		On entry : 0/0
 14857 ;;		On exit  : 0/0
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14862 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14863 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;Total ram usage:        4 bytes
 14865 ;; Hardware stack levels used:    1
 14866 ;; Hardware stack levels required when called:    7
 14867 ;; This function calls:
 14868 ;;		Nothing
 14869 ;; This function is called by:
 14870 ;;		_ADC_Init
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           	psect	text79
 14875  013006                     __ptext79:
 14876                           	opt stack 0
 14877  013006                     _ADC_SetupIO:
 14878                           	opt stack 21
 14879                           
 14880                           ;incstack = 0
 14881                           ;ADC_SetupIO@pChannel stored from wreg
 14882  013006  0100               	movlb	0	; () banked
 14883  013008  6FBE               	movwf	ADC_SetupIO@pChannel& (0+255),b
 14884                           
 14885                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 14886  01300A  C0BE  F0BC         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 14887  01300E  0E01               	movlw	1
 14888  013010  0100               	movlb	0	; () banked
 14889  013012  6FBD               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 14890  013014  0100               	movlb	0	; () banked
 14891  013016  2BBC               	incf	??_ADC_SetupIO& (0+255),f,b
 14892  013018  D003               	goto	u7384
 14893  01301A                     u7385:
 14894  01301A  0100               	movlb	0	; () banked
 14895  01301C  90D8               	bcf	status,0,c
 14896  01301E  37BD               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 14897  013020                     u7384:
 14898  013020  0100               	movlb	0	; () banked
 14899  013022  2FBC               	decfsz	??_ADC_SetupIO& (0+255),f,b
 14900  013024  D7FA               	goto	u7385
 14901  013026  0100               	movlb	0	; () banked
 14902  013028  51BD               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 14903  01302A  0AFF               	xorlw	255
 14904  01302C  0100               	movlb	0	; () banked
 14905  01302E  6FBF               	movwf	ADC_SetupIO@MASK& (0+255),b
 14906                           
 14907                           ;ADC.c: 153: ANCON0 &= MASK;
 14908  013030  0100               	movlb	0	; () banked
 14909  013032  51BF               	movf	ADC_SetupIO@MASK& (0+255),w,b
 14910  013034  16C1               	andwf	4033,f,c	;volatile
 14911                           
 14912                           ; BSR set to: 0
 14913  013036  0012               	return		;funcret
 14914  013038                     __end_of_ADC_SetupIO:
 14915                           	opt stack 0
 14916                           tosu	equ	0xFFF
 14917                           tosh	equ	0xFFE
 14918                           tosl	equ	0xFFD
 14919                           pclath	equ	0xFFA
 14920                           tblptru	equ	0xFF8
 14921                           tblptrh	equ	0xFF7
 14922                           tblptrl	equ	0xFF6
 14923                           tablat	equ	0xFF5
 14924                           prodh	equ	0xFF4
 14925                           prodl	equ	0xFF3
 14926                           intcon	equ	0xFF2
 14927                           indf0	equ	0xFEF
 14928                           postinc0	equ	0xFEE
 14929                           fsr0h	equ	0xFEA
 14930                           fsr0l	equ	0xFE9
 14931                           wreg	equ	0xFE8
 14932                           indf1	equ	0xFE7
 14933                           postdec1	equ	0xFE5
 14934                           fsr1h	equ	0xFE2
 14935                           fsr1l	equ	0xFE1
 14936                           indf2	equ	0xFDF
 14937                           postinc2	equ	0xFDE
 14938                           postdec2	equ	0xFDD
 14939                           plusw2	equ	0xFDB
 14940                           fsr2h	equ	0xFDA
 14941                           fsr2l	equ	0xFD9
 14942                           status	equ	0xFD8
 14943                           
 14944 ;; *************** function _ADC_SetChannel *****************
 14945 ;; Defined at:
 14946 ;;		line 155 in file "Library/ADC.c"
 14947 ;; Parameters:    Size  Location     Type
 14948 ;;  pChannel        1    wreg     enum E6742
 14949 ;; Auto vars:     Size  Location     Type
 14950 ;;  pChannel        1    1[BANK0 ] enum E6742
 14951 ;; Return value:  Size  Location     Type
 14952 ;;                  1    wreg      void 
 14953 ;; Registers used:
 14954 ;;		wreg, status,2, status,0
 14955 ;; Tracked objects:
 14956 ;;		On entry : 0/0
 14957 ;;		On exit  : 0/0
 14958 ;;		Unchanged: 0/0
 14959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;Total ram usage:        2 bytes
 14965 ;; Hardware stack levels used:    1
 14966 ;; Hardware stack levels required when called:    7
 14967 ;; This function calls:
 14968 ;;		Nothing
 14969 ;; This function is called by:
 14970 ;;		_ADC_Init
 14971 ;;		_ADC_Start
 14972 ;;		_ADC_ISR
 14973 ;;		_ADC_Sample
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           	psect	text80
 14978  0132AE                     __ptext80:
 14979                           	opt stack 0
 14980  0132AE                     _ADC_SetChannel:
 14981                           	opt stack 21
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;incstack = 0
 14985                           ;ADC_SetChannel@pChannel stored from wreg
 14986  0132AE  0100               	movlb	0	; () banked
 14987  0132B0  6FBD               	movwf	ADC_SetChannel@pChannel& (0+255),b
 14988                           
 14989                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 14990  0132B2  C0BD  F0BC         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 14991  0132B6  0100               	movlb	0	; () banked
 14992  0132B8  47BC               	rlncf	??_ADC_SetChannel& (0+255),f,b
 14993  0132BA  47BC               	rlncf	??_ADC_SetChannel& (0+255),f,b
 14994  0132BC  50C2               	movf	4034,w,c	;volatile
 14995  0132BE  0100               	movlb	0	; () banked
 14996  0132C0  19BC               	xorwf	??_ADC_SetChannel& (0+255),w,b
 14997  0132C2  0BC3               	andlw	-61
 14998  0132C4  19BC               	xorwf	??_ADC_SetChannel& (0+255),w,b
 14999  0132C6  6EC2               	movwf	4034,c	;volatile
 15000                           
 15001                           ; BSR set to: 0
 15002  0132C8  0012               	return		;funcret
 15003  0132CA                     __end_of_ADC_SetChannel:
 15004                           	opt stack 0
 15005                           tosu	equ	0xFFF
 15006                           tosh	equ	0xFFE
 15007                           tosl	equ	0xFFD
 15008                           pclath	equ	0xFFA
 15009                           tblptru	equ	0xFF8
 15010                           tblptrh	equ	0xFF7
 15011                           tblptrl	equ	0xFF6
 15012                           tablat	equ	0xFF5
 15013                           prodh	equ	0xFF4
 15014                           prodl	equ	0xFF3
 15015                           intcon	equ	0xFF2
 15016                           indf0	equ	0xFEF
 15017                           postinc0	equ	0xFEE
 15018                           fsr0h	equ	0xFEA
 15019                           fsr0l	equ	0xFE9
 15020                           wreg	equ	0xFE8
 15021                           indf1	equ	0xFE7
 15022                           postdec1	equ	0xFE5
 15023                           fsr1h	equ	0xFE2
 15024                           fsr1l	equ	0xFE1
 15025                           indf2	equ	0xFDF
 15026                           postinc2	equ	0xFDE
 15027                           postdec2	equ	0xFDD
 15028                           plusw2	equ	0xFDB
 15029                           fsr2h	equ	0xFDA
 15030                           fsr2l	equ	0xFD9
 15031                           status	equ	0xFD8
 15032                           
 15033 ;; *************** function _ADC_ConversionTime *****************
 15034 ;; Defined at:
 15035 ;;		line 199 in file "Library/ADC.c"
 15036 ;; Parameters:    Size  Location     Type
 15037 ;;  pCount          1    wreg     unsigned char 
 15038 ;; Auto vars:     Size  Location     Type
 15039 ;;  pCount          1    1[BANK0 ] unsigned char 
 15040 ;; Return value:  Size  Location     Type
 15041 ;;                  1    wreg      void 
 15042 ;; Registers used:
 15043 ;;		wreg, status,2, status,0
 15044 ;; Tracked objects:
 15045 ;;		On entry : 0/0
 15046 ;;		On exit  : 0/0
 15047 ;;		Unchanged: 0/0
 15048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15053 ;;Total ram usage:        2 bytes
 15054 ;; Hardware stack levels used:    1
 15055 ;; Hardware stack levels required when called:    7
 15056 ;; This function calls:
 15057 ;;		Nothing
 15058 ;; This function is called by:
 15059 ;;		_ADC_Init
 15060 ;; This function uses a non-reentrant model
 15061 ;;
 15062                           
 15063                           	psect	text81
 15064  012DC0                     __ptext81:
 15065                           	opt stack 0
 15066  012DC0                     _ADC_ConversionTime:
 15067                           	opt stack 21
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;incstack = 0
 15071                           ;ADC_ConversionTime@pCount stored from wreg
 15072  012DC0  0100               	movlb	0	; () banked
 15073  012DC2  6FBD               	movwf	ADC_ConversionTime@pCount& (0+255),b
 15074                           
 15075                           ;ADC.c: 201: if (pCount == 10)
 15076  012DC4  0E0A               	movlw	10
 15077  012DC6  0100               	movlb	0	; () banked
 15078  012DC8  19BD               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 15079  012DCA  B4D8               	btfsc	status,2,c
 15080  012DCC  D00A               	goto	u7350
 15081                           
 15082                           ; BSR set to: 0
 15083                           ;ADC.c: 203: else if (pCount == 14)
 15084                           
 15085                           ; BSR set to: 0
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;ADC.c: 202: pCount -= 2;
 15089  012DCE  0E0E               	movlw	14
 15090  012DD0  0100               	movlb	0	; () banked
 15091  012DD2  19BD               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 15092  012DD4  B4D8               	btfsc	status,2,c
 15093  012DD6  D005               	goto	u7350
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;ADC.c: 205: else if (pCount == 18)
 15097                           
 15098                           ; BSR set to: 0
 15099                           
 15100                           ; BSR set to: 0
 15101                           ;ADC.c: 204: pCount -= 2;
 15102  012DD8  0E12               	movlw	18
 15103  012DDA  0100               	movlb	0	; () banked
 15104  012DDC  19BD               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 15105  012DDE  A4D8               	btfss	status,2,c
 15106  012DE0  D003               	goto	l1313
 15107  012DE2                     u7350:
 15108                           
 15109                           ; BSR set to: 0
 15110                           ;ADC.c: 206: pCount -= 2;
 15111  012DE2  0E02               	movlw	2
 15112  012DE4  0100               	movlb	0	; () banked
 15113  012DE6  5FBD               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 15114  012DE8                     l1313:
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;ADC.c: 208: pCount <<= 1;
 15118                           
 15119                           ; BSR set to: 0
 15120                           
 15121                           ; BSR set to: 0
 15122  012DE8  0100               	movlb	0	; () banked
 15123  012DEA  90D8               	bcf	status,0,c
 15124  012DEC  37BD               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 15125                           
 15126                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 15127  012DEE  C0BD  F0BC         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 15128  012DF2  0100               	movlb	0	; () banked
 15129  012DF4  47BC               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 15130  012DF6  47BC               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 15131  012DF8  47BC               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 15132  012DFA  50C1               	movf	4033,w,c	;volatile
 15133  012DFC  0100               	movlb	0	; () banked
 15134  012DFE  19BC               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 15135  012E00  0BC7               	andlw	-57
 15136  012E02  19BC               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 15137  012E04  6EC1               	movwf	4033,c	;volatile
 15138                           
 15139                           ; BSR set to: 0
 15140  012E06  0012               	return		;funcret
 15141  012E08                     __end_of_ADC_ConversionTime:
 15142                           	opt stack 0
 15143                           tosu	equ	0xFFF
 15144                           tosh	equ	0xFFE
 15145                           tosl	equ	0xFFD
 15146                           pclath	equ	0xFFA
 15147                           tblptru	equ	0xFF8
 15148                           tblptrh	equ	0xFF7
 15149                           tblptrl	equ	0xFF6
 15150                           tablat	equ	0xFF5
 15151                           prodh	equ	0xFF4
 15152                           prodl	equ	0xFF3
 15153                           intcon	equ	0xFF2
 15154                           indf0	equ	0xFEF
 15155                           postinc0	equ	0xFEE
 15156                           fsr0h	equ	0xFEA
 15157                           fsr0l	equ	0xFE9
 15158                           wreg	equ	0xFE8
 15159                           indf1	equ	0xFE7
 15160                           postdec1	equ	0xFE5
 15161                           fsr1h	equ	0xFE2
 15162                           fsr1l	equ	0xFE1
 15163                           indf2	equ	0xFDF
 15164                           postinc2	equ	0xFDE
 15165                           postdec2	equ	0xFDD
 15166                           plusw2	equ	0xFDB
 15167                           fsr2h	equ	0xFDA
 15168                           fsr2l	equ	0xFD9
 15169                           status	equ	0xFD8
 15170                           
 15171 ;; *************** function _ADC_ClockDivision *****************
 15172 ;; Defined at:
 15173 ;;		line 159 in file "Library/ADC.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;  pDivide         1    wreg     unsigned char 
 15176 ;; Auto vars:     Size  Location     Type
 15177 ;;  pDivide         1    0[BANK0 ] unsigned char 
 15178 ;;  unfound         1    2[BANK0 ] unsigned char 
 15179 ;;  reg             1    1[BANK0 ] unsigned char 
 15180 ;; Return value:  Size  Location     Type
 15181 ;;                  1    wreg      void 
 15182 ;; Registers used:
 15183 ;;		wreg, status,2, status,0
 15184 ;; Tracked objects:
 15185 ;;		On entry : 0/0
 15186 ;;		On exit  : 0/0
 15187 ;;		Unchanged: 0/0
 15188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15190 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15192 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15193 ;;Total ram usage:        3 bytes
 15194 ;; Hardware stack levels used:    1
 15195 ;; Hardware stack levels required when called:    7
 15196 ;; This function calls:
 15197 ;;		Nothing
 15198 ;; This function is called by:
 15199 ;;		_ADC_Init
 15200 ;; This function uses a non-reentrant model
 15201 ;;
 15202                           
 15203                           	psect	text82
 15204  012420                     __ptext82:
 15205                           	opt stack 0
 15206  012420                     _ADC_ClockDivision:
 15207                           	opt stack 21
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;incstack = 0
 15211                           ;ADC_ClockDivision@pDivide stored from wreg
 15212  012420  0100               	movlb	0	; () banked
 15213  012422  6FBC               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 15214                           
 15215                           ;ADC.c: 161: UINT8 reg = 0;
 15216  012424  0E00               	movlw	0
 15217  012426  0100               	movlb	0	; () banked
 15218  012428  6FBD               	movwf	ADC_ClockDivision@reg& (0+255),b
 15219                           
 15220                           ;ADC.c: 162: bool unfound = 1;
 15221  01242A  0E01               	movlw	1
 15222  01242C  D002               	goto	L8
 15223  01242E                     
 15224                           ; BSR set to: 0
 15225                           ;ADC.c: 167: reg = 0;
 15226                           
 15227                           ; BSR set to: 0
 15228  01242E  0E00               	movlw	0
 15229  012430  D00C               	goto	L13
 15230  012432                     L8:
 15231  012432  0100               	movlb	0	; () banked
 15232  012434  6FBE               	movwf	ADC_ClockDivision@unfound& (0+255),b
 15233                           
 15234                           ;ADC.c: 169: break;
 15235  012436  D02D               	goto	l1296
 15236  012438                     
 15237                           ; BSR set to: 0
 15238                           ;ADC.c: 171: reg = 0b100;
 15239                           
 15240                           ; BSR set to: 0
 15241  012438  0E04               	movlw	4
 15242  01243A  D007               	goto	L13
 15243  01243C                     
 15244                           ; BSR set to: 0
 15245                           ;ADC.c: 175: reg = 0b001;
 15246                           
 15247                           ; BSR set to: 0
 15248  01243C  0E01               	movlw	1
 15249  01243E  D005               	goto	L13
 15250  012440                     
 15251                           ; BSR set to: 0
 15252                           ;ADC.c: 179: reg = 0b101;
 15253                           
 15254                           ; BSR set to: 0
 15255  012440  0E05               	movlw	5
 15256  012442  D003               	goto	L13
 15257  012444                     
 15258                           ; BSR set to: 0
 15259                           ;ADC.c: 183: reg = 0b010;
 15260                           
 15261                           ; BSR set to: 0
 15262  012444  0E02               	movlw	2
 15263  012446  D001               	goto	L13
 15264  012448                     
 15265                           ; BSR set to: 0
 15266                           ;ADC.c: 187: reg = 0b110;
 15267                           
 15268                           ; BSR set to: 0
 15269  012448  0E06               	movlw	6
 15270  01244A                     L13:
 15271  01244A  0100               	movlb	0	; () banked
 15272  01244C  6FBD               	movwf	ADC_ClockDivision@reg& (0+255),b
 15273                           
 15274                           ;ADC.c: 188: unfound = 0;
 15275  01244E  0E00               	movlw	0
 15276  012450  D7F0               	goto	L8
 15277  012452                     
 15278                           ; BSR set to: 0
 15279                           ;ADC.c: 191: if (pDivide > 2)
 15280                           
 15281                           ; BSR set to: 0
 15282  012452  0E02               	movlw	2
 15283  012454  0100               	movlb	0	; () banked
 15284  012456  65BC               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 15285  012458  D003               	goto	l1303
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;ADC.c: 192: pDivide--;
 15289  01245A  0100               	movlb	0	; () banked
 15290  01245C  07BC               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 15291  01245E  D019               	goto	l1296
 15292  012460                     l1303:
 15293                           
 15294                           ; BSR set to: 0
 15295                           ;ADC.c: 193: else
 15296                           ;ADC.c: 194: pDivide = 2;
 15297                           
 15298                           ; BSR set to: 0
 15299  012460  0E02               	movlw	2
 15300  012462  0100               	movlb	0	; () banked
 15301  012464  6FBC               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;ADC.c: 195: };
 15305  012466  D015               	goto	l1296
 15306  012468                     
 15307                           ; BSR set to: 0
 15308                           
 15309                           ; BSR set to: 0
 15310  012468  0100               	movlb	0	; () banked
 15311  01246A  51BC               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 15312                           
 15313                           ; Switch size 1, requested type "space"
 15314                           ; Number of cases is 6, Range of values is 2 to 64
 15315                           ; switch strategies available:
 15316                           ; Name         Instructions Cycles
 15317                           ; simple_byte           19    10 (average)
 15318                           ;	Chosen strategy is simple_byte
 15319  01246C  0A02               	xorlw	2	; case 2
 15320  01246E  B4D8               	btfsc	status,2,c
 15321  012470  D7DE               	goto	l1295
 15322  012472  0A06               	xorlw	6	; case 4
 15323  012474  B4D8               	btfsc	status,2,c
 15324  012476  D7E0               	goto	l1297
 15325  012478  0A0C               	xorlw	12	; case 8
 15326  01247A  B4D8               	btfsc	status,2,c
 15327  01247C  D7DF               	goto	l1298
 15328  01247E  0A18               	xorlw	24	; case 16
 15329  012480  B4D8               	btfsc	status,2,c
 15330  012482  D7DE               	goto	l1299
 15331  012484  0A30               	xorlw	48	; case 32
 15332  012486  B4D8               	btfsc	status,2,c
 15333  012488  D7DD               	goto	l1300
 15334  01248A  0A60               	xorlw	96	; case 64
 15335  01248C  B4D8               	btfsc	status,2,c
 15336  01248E  D7DC               	goto	l1301
 15337  012490  D7E0               	goto	l1302
 15338  012492                     l1296:
 15339                           
 15340                           ; BSR set to: 0
 15341                           
 15342                           ; BSR set to: 0
 15343                           
 15344                           ; BSR set to: 0
 15345  012492  0100               	movlb	0	; () banked
 15346  012494  51BE               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 15347  012496  0100               	movlb	0	; () banked
 15348  012498  A4D8               	btfss	status,2,c
 15349  01249A  D7E6               	goto	l1294
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 15353                           
 15354                           ; BSR set to: 0
 15355  01249C  50C1               	movf	4033,w,c	;volatile
 15356  01249E  0100               	movlb	0	; () banked
 15357  0124A0  19BD               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 15358  0124A2  0BF8               	andlw	-8
 15359  0124A4  19BD               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 15360  0124A6  6EC1               	movwf	4033,c	;volatile
 15361                           
 15362                           ; BSR set to: 0
 15363  0124A8  0012               	return		;funcret
 15364  0124AA                     __end_of_ADC_ClockDivision:
 15365                           	opt stack 0
 15366                           tosu	equ	0xFFF
 15367                           tosh	equ	0xFFE
 15368                           tosl	equ	0xFFD
 15369                           pclath	equ	0xFFA
 15370                           tblptru	equ	0xFF8
 15371                           tblptrh	equ	0xFF7
 15372                           tblptrl	equ	0xFF6
 15373                           tablat	equ	0xFF5
 15374                           prodh	equ	0xFF4
 15375                           prodl	equ	0xFF3
 15376                           intcon	equ	0xFF2
 15377                           indf0	equ	0xFEF
 15378                           postinc0	equ	0xFEE
 15379                           fsr0h	equ	0xFEA
 15380                           fsr0l	equ	0xFE9
 15381                           wreg	equ	0xFE8
 15382                           indf1	equ	0xFE7
 15383                           postdec1	equ	0xFE5
 15384                           fsr1h	equ	0xFE2
 15385                           fsr1l	equ	0xFE1
 15386                           indf2	equ	0xFDF
 15387                           postinc2	equ	0xFDE
 15388                           postdec2	equ	0xFDD
 15389                           plusw2	equ	0xFDB
 15390                           fsr2h	equ	0xFDA
 15391                           fsr2l	equ	0xFD9
 15392                           status	equ	0xFD8
 15393                           
 15394 ;; *************** function _ADC_Calibrate *****************
 15395 ;; Defined at:
 15396 ;;		line 63 in file "Library/ADC.c"
 15397 ;; Parameters:    Size  Location     Type
 15398 ;;		None
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;		None
 15401 ;; Return value:  Size  Location     Type
 15402 ;;                  1    wreg      void 
 15403 ;; Registers used:
 15404 ;;		cstack
 15405 ;; Tracked objects:
 15406 ;;		On entry : 0/0
 15407 ;;		On exit  : 0/0
 15408 ;;		Unchanged: 0/0
 15409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;Total ram usage:        0 bytes
 15415 ;; Hardware stack levels used:    1
 15416 ;; Hardware stack levels required when called:    8
 15417 ;; This function calls:
 15418 ;;		_ADC_Off
 15419 ;;		_ADC_On
 15420 ;; This function is called by:
 15421 ;;		_ADC_Init
 15422 ;; This function uses a non-reentrant model
 15423 ;;
 15424                           
 15425                           	psect	text83
 15426  0132E4                     __ptext83:
 15427                           	opt stack 0
 15428  0132E4                     _ADC_Calibrate:
 15429                           	opt stack 20
 15430                           
 15431                           ;ADC.c: 65: ADC_On();
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;incstack = 0
 15435  0132E4  ECE1  F099         	call	_ADC_On	;wreg free
 15436                           
 15437                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 15438  0132E8  8CC1               	bsf	4033,6,c	;volatile
 15439                           
 15440                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 15441  0132EA  82C2               	bsf	4034,1,c	;volatile
 15442  0132EC  B2C2               	btfsc	4034,1,c	;volatile
 15443  0132EE  D7FE               	goto	l1254
 15444                           
 15445                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 15446  0132F0  9CC1               	bcf	4033,6,c	;volatile
 15447                           
 15448                           ;ADC.c: 73: ADC_Off();
 15449  0132F2  ECD4  F099         	call	_ADC_Off	;wreg free
 15450  0132F6  0012               	return		;funcret
 15451  0132F8                     __end_of_ADC_Calibrate:
 15452                           	opt stack 0
 15453                           tosu	equ	0xFFF
 15454                           tosh	equ	0xFFE
 15455                           tosl	equ	0xFFD
 15456                           pclath	equ	0xFFA
 15457                           tblptru	equ	0xFF8
 15458                           tblptrh	equ	0xFF7
 15459                           tblptrl	equ	0xFF6
 15460                           tablat	equ	0xFF5
 15461                           prodh	equ	0xFF4
 15462                           prodl	equ	0xFF3
 15463                           intcon	equ	0xFF2
 15464                           indf0	equ	0xFEF
 15465                           postinc0	equ	0xFEE
 15466                           fsr0h	equ	0xFEA
 15467                           fsr0l	equ	0xFE9
 15468                           wreg	equ	0xFE8
 15469                           indf1	equ	0xFE7
 15470                           postdec1	equ	0xFE5
 15471                           fsr1h	equ	0xFE2
 15472                           fsr1l	equ	0xFE1
 15473                           indf2	equ	0xFDF
 15474                           postinc2	equ	0xFDE
 15475                           postdec2	equ	0xFDD
 15476                           plusw2	equ	0xFDB
 15477                           fsr2h	equ	0xFDA
 15478                           fsr2l	equ	0xFD9
 15479                           status	equ	0xFD8
 15480                           
 15481 ;; *************** function _ADC_On *****************
 15482 ;; Defined at:
 15483 ;;		line 85 in file "Library/ADC.c"
 15484 ;; Parameters:    Size  Location     Type
 15485 ;;		None
 15486 ;; Auto vars:     Size  Location     Type
 15487 ;;		None
 15488 ;; Return value:  Size  Location     Type
 15489 ;;                  1    wreg      void 
 15490 ;; Registers used:
 15491 ;;		None
 15492 ;; Tracked objects:
 15493 ;;		On entry : 0/0
 15494 ;;		On exit  : 0/0
 15495 ;;		Unchanged: 0/0
 15496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15501 ;;Total ram usage:        0 bytes
 15502 ;; Hardware stack levels used:    1
 15503 ;; Hardware stack levels required when called:    7
 15504 ;; This function calls:
 15505 ;;		Nothing
 15506 ;; This function is called by:
 15507 ;;		_ADC_Calibrate
 15508 ;;		_ADC_Start
 15509 ;;		_ADC_ISR
 15510 ;;		_ADC_Sample
 15511 ;; This function uses a non-reentrant model
 15512 ;;
 15513                           
 15514                           	psect	text84
 15515  0133C2                     __ptext84:
 15516                           	opt stack 0
 15517  0133C2                     _ADC_On:
 15518                           	opt stack 21
 15519                           
 15520                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 15521                           
 15522                           ;incstack = 0
 15523  0133C2  80C2               	bsf	4034,0,c	;volatile
 15524                           
 15525                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 15526  0133C4  9C9E               	bcf	3998,6,c	;volatile
 15527  0133C6  0012               	return		;funcret
 15528  0133C8                     __end_of_ADC_On:
 15529                           	opt stack 0
 15530                           tosu	equ	0xFFF
 15531                           tosh	equ	0xFFE
 15532                           tosl	equ	0xFFD
 15533                           pclath	equ	0xFFA
 15534                           tblptru	equ	0xFF8
 15535                           tblptrh	equ	0xFF7
 15536                           tblptrl	equ	0xFF6
 15537                           tablat	equ	0xFF5
 15538                           prodh	equ	0xFF4
 15539                           prodl	equ	0xFF3
 15540                           intcon	equ	0xFF2
 15541                           indf0	equ	0xFEF
 15542                           postinc0	equ	0xFEE
 15543                           fsr0h	equ	0xFEA
 15544                           fsr0l	equ	0xFE9
 15545                           wreg	equ	0xFE8
 15546                           indf1	equ	0xFE7
 15547                           postdec1	equ	0xFE5
 15548                           fsr1h	equ	0xFE2
 15549                           fsr1l	equ	0xFE1
 15550                           indf2	equ	0xFDF
 15551                           postinc2	equ	0xFDE
 15552                           postdec2	equ	0xFDD
 15553                           plusw2	equ	0xFDB
 15554                           fsr2h	equ	0xFDA
 15555                           fsr2l	equ	0xFD9
 15556                           status	equ	0xFD8
 15557                           
 15558 ;; *************** function _ADC_Off *****************
 15559 ;; Defined at:
 15560 ;;		line 94 in file "Library/ADC.c"
 15561 ;; Parameters:    Size  Location     Type
 15562 ;;		None
 15563 ;; Auto vars:     Size  Location     Type
 15564 ;;		None
 15565 ;; Return value:  Size  Location     Type
 15566 ;;                  1    wreg      void 
 15567 ;; Registers used:
 15568 ;;		None
 15569 ;; Tracked objects:
 15570 ;;		On entry : 0/0
 15571 ;;		On exit  : 0/0
 15572 ;;		Unchanged: 0/0
 15573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15578 ;;Total ram usage:        0 bytes
 15579 ;; Hardware stack levels used:    1
 15580 ;; Hardware stack levels required when called:    7
 15581 ;; This function calls:
 15582 ;;		Nothing
 15583 ;; This function is called by:
 15584 ;;		_ADC_Calibrate
 15585 ;;		_ADC_Start
 15586 ;;		_ADC_ISR
 15587 ;;		_ADC_Sample
 15588 ;; This function uses a non-reentrant model
 15589 ;;
 15590                           
 15591                           	psect	text85
 15592  0133A8                     __ptext85:
 15593                           	opt stack 0
 15594  0133A8                     _ADC_Off:
 15595                           	opt stack 21
 15596                           
 15597                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 15598                           
 15599                           ;incstack = 0
 15600  0133A8  90C2               	bcf	4034,0,c	;volatile
 15601                           
 15602                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 15603  0133AA  9C9E               	bcf	3998,6,c	;volatile
 15604                           
 15605                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 15606  0133AC  9C9D               	bcf	3997,6,c	;volatile
 15607  0133AE  0012               	return		;funcret
 15608  0133B0                     __end_of_ADC_Off:
 15609                           	opt stack 0
 15610                           tosu	equ	0xFFF
 15611                           tosh	equ	0xFFE
 15612                           tosl	equ	0xFFD
 15613                           pclath	equ	0xFFA
 15614                           tblptru	equ	0xFF8
 15615                           tblptrh	equ	0xFF7
 15616                           tblptrl	equ	0xFF6
 15617                           tablat	equ	0xFF5
 15618                           prodh	equ	0xFF4
 15619                           prodl	equ	0xFF3
 15620                           intcon	equ	0xFF2
 15621                           indf0	equ	0xFEF
 15622                           postinc0	equ	0xFEE
 15623                           fsr0h	equ	0xFEA
 15624                           fsr0l	equ	0xFE9
 15625                           wreg	equ	0xFE8
 15626                           indf1	equ	0xFE7
 15627                           postdec1	equ	0xFE5
 15628                           fsr1h	equ	0xFE2
 15629                           fsr1l	equ	0xFE1
 15630                           indf2	equ	0xFDF
 15631                           postinc2	equ	0xFDE
 15632                           postdec2	equ	0xFDD
 15633                           plusw2	equ	0xFDB
 15634                           fsr2h	equ	0xFDA
 15635                           fsr2l	equ	0xFD9
 15636                           status	equ	0xFD8
 15637                           
 15638 ;; *************** function _ISR_Function *****************
 15639 ;; Defined at:
 15640 ;;		line 38 in file "Library/ISR.c"
 15641 ;; Parameters:    Size  Location     Type
 15642 ;;		None
 15643 ;; Auto vars:     Size  Location     Type
 15644 ;;		None
 15645 ;; Return value:  Size  Location     Type
 15646 ;;                  1    wreg      void 
 15647 ;; Registers used:
 15648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15649 ;; Tracked objects:
 15650 ;;		On entry : 0/0
 15651 ;;		On exit  : 0/0
 15652 ;;		Unchanged: 0/0
 15653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15657 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15658 ;;Total ram usage:       18 bytes
 15659 ;; Hardware stack levels used:    1
 15660 ;; Hardware stack levels required when called:    6
 15661 ;; This function calls:
 15662 ;;		_Timer0_ISR
 15663 ;; This function is called by:
 15664 ;;		Interrupt level 2
 15665 ;; This function uses a non-reentrant model
 15666 ;;
 15667                           
 15668                           	psect	intcode
 15669  001408                     __pintcode:
 15670                           	opt stack 0
 15671  001408                     _ISR_Function:
 15672                           	opt stack 13
 15673                           
 15674                           ;incstack = 0
 15675  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15676  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 15677  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 15678  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 15679  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 15680  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 15681  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 15682  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 15683  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 15684  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 15685  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 15686  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 15687  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 15688  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 15689  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 15690  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 15691  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 15692  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 15693  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 15694                           
 15695                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 15696  001452  92F2               	bcf	intcon,1,c	;volatile
 15697                           
 15698                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 15699  001454  B4F2               	btfsc	intcon,2,c	;volatile
 15700  001456  AAF2               	btfss	intcon,5,c	;volatile
 15701  001458  D002               	goto	i2l1590
 15702                           
 15703                           ;ISR.c: 68: Timer0_ISR();
 15704  00145A  EC64  F098         	call	_Timer0_ISR	;wreg free
 15705  00145E                     i2l1590:
 15706  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 15707  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 15708  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 15709  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 15710  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 15711  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 15712  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 15713  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 15714  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 15715  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 15716  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 15717  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 15718  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 15719  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 15720  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 15721  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 15722  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 15723  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 15724  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15725  0014A8  0011               	retfie		f
 15726  0014AA                     __end_of_ISR_Function:
 15727                           	opt stack 0
 15728                           tosu	equ	0xFFF
 15729                           tosh	equ	0xFFE
 15730                           tosl	equ	0xFFD
 15731                           pclatu	equ	0xFFB
 15732                           pclath	equ	0xFFA
 15733                           tblptru	equ	0xFF8
 15734                           tblptrh	equ	0xFF7
 15735                           tblptrl	equ	0xFF6
 15736                           tablat	equ	0xFF5
 15737                           prodh	equ	0xFF4
 15738                           prodl	equ	0xFF3
 15739                           intcon	equ	0xFF2
 15740                           indf0	equ	0xFEF
 15741                           postinc0	equ	0xFEE
 15742                           fsr0h	equ	0xFEA
 15743                           fsr0l	equ	0xFE9
 15744                           wreg	equ	0xFE8
 15745                           indf1	equ	0xFE7
 15746                           postdec1	equ	0xFE5
 15747                           fsr1h	equ	0xFE2
 15748                           fsr1l	equ	0xFE1
 15749                           indf2	equ	0xFDF
 15750                           postinc2	equ	0xFDE
 15751                           postdec2	equ	0xFDD
 15752                           plusw2	equ	0xFDB
 15753                           fsr2h	equ	0xFDA
 15754                           fsr2l	equ	0xFD9
 15755                           status	equ	0xFD8
 15756                           
 15757 ;; *************** function _Timer0_ISR *****************
 15758 ;; Defined at:
 15759 ;;		line 94 in file "Library/Timer0.c"
 15760 ;; Parameters:    Size  Location     Type
 15761 ;;		None
 15762 ;; Auto vars:     Size  Location     Type
 15763 ;;		None
 15764 ;; Return value:  Size  Location     Type
 15765 ;;                  1    wreg      void 
 15766 ;; Registers used:
 15767 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15768 ;; Tracked objects:
 15769 ;;		On entry : 0/0
 15770 ;;		On exit  : 0/0
 15771 ;;		Unchanged: 0/0
 15772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15777 ;;Total ram usage:        0 bytes
 15778 ;; Hardware stack levels used:    1
 15779 ;; Hardware stack levels required when called:    5
 15780 ;; This function calls:
 15781 ;;		Absolute function
 15782 ;;		i2_Motor_Step
 15783 ;;		i2_Timer0_Stop
 15784 ;; This function is called by:
 15785 ;;		_ISR_Function
 15786 ;; This function uses a non-reentrant model
 15787 ;;
 15788                           
 15789                           	psect	text87
 15790  0130C8                     __ptext87:
 15791                           	opt stack 0
 15792  0130C8                     _Timer0_ISR:
 15793                           	opt stack 13
 15794                           
 15795                           ;Timer0.c: 96: Timer0_Stop();
 15796                           
 15797                           ;incstack = 0
 15798  0130C8  ECE4  F099         	call	i2_Timer0_Stop	;wreg free
 15799                           
 15800                           ;Timer0.c: 99: if (gISR != 0)
 15801  0130CC  0100               	movlb	0	; () banked
 15802  0130CE  5164               	movf	_gISR& (0+255),w,b
 15803  0130D0  0100               	movlb	0	; () banked
 15804  0130D2  1165               	iorwf	(_gISR+1)& (0+255),w,b
 15805  0130D4  0100               	movlb	0	; () banked
 15806  0130D6  1166               	iorwf	(_gISR+2)& (0+255),w,b
 15807  0130D8  B4D8               	btfsc	status,2,c
 15808  0130DA  0012               	return	
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;Timer0.c: 100: gISR();
 15812  0130DC  D801               	call	i2u912_48
 15813  0130DE  0012               	return	
 15814  0130E0                     i2u912_48:
 15815  0130E0  0005               	push	
 15816  0130E2  6EFA               	movwf	pclath,c
 15817  0130E4  0100               	movlb	0	; () banked
 15818  0130E6  5164               	movf	_gISR& (0+255),w,b
 15819  0130E8  6EFD               	movwf	tosl,c
 15820  0130EA  5165               	movf	(_gISR+1)& (0+255),w,b
 15821  0130EC  6EFE               	movwf	tosh,c
 15822  0130EE  5166               	movf	(_gISR+2)& (0+255),w,b
 15823  0130F0  6EFF               	movwf	tosu,c
 15824  0130F2  50FA               	movf	pclath,w,c
 15825  0130F4  0012               	return		;indir
 15826  0130F6                     __end_of_Timer0_ISR:
 15827                           	opt stack 0
 15828                           tosu	equ	0xFFF
 15829                           tosh	equ	0xFFE
 15830                           tosl	equ	0xFFD
 15831                           pclatu	equ	0xFFB
 15832                           pclath	equ	0xFFA
 15833                           tblptru	equ	0xFF8
 15834                           tblptrh	equ	0xFF7
 15835                           tblptrl	equ	0xFF6
 15836                           tablat	equ	0xFF5
 15837                           prodh	equ	0xFF4
 15838                           prodl	equ	0xFF3
 15839                           intcon	equ	0xFF2
 15840                           indf0	equ	0xFEF
 15841                           postinc0	equ	0xFEE
 15842                           fsr0h	equ	0xFEA
 15843                           fsr0l	equ	0xFE9
 15844                           wreg	equ	0xFE8
 15845                           indf1	equ	0xFE7
 15846                           postdec1	equ	0xFE5
 15847                           fsr1h	equ	0xFE2
 15848                           fsr1l	equ	0xFE1
 15849                           indf2	equ	0xFDF
 15850                           postinc2	equ	0xFDE
 15851                           postdec2	equ	0xFDD
 15852                           plusw2	equ	0xFDB
 15853                           fsr2h	equ	0xFDA
 15854                           fsr2l	equ	0xFD9
 15855                           status	equ	0xFD8
 15856                           
 15857 ;; *************** function i2_Motor_Step *****************
 15858 ;; Defined at:
 15859 ;;		line 75 in file "Library/Motor.c"
 15860 ;; Parameters:    Size  Location     Type
 15861 ;;		None
 15862 ;; Auto vars:     Size  Location     Type
 15863 ;;		None
 15864 ;; Return value:  Size  Location     Type
 15865 ;;                  1    wreg      void 
 15866 ;; Registers used:
 15867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15868 ;; Tracked objects:
 15869 ;;		On entry : 0/0
 15870 ;;		On exit  : 0/0
 15871 ;;		Unchanged: 0/0
 15872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15875 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15876 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15877 ;;Total ram usage:        2 bytes
 15878 ;; Hardware stack levels used:    1
 15879 ;; Hardware stack levels required when called:    4
 15880 ;; This function calls:
 15881 ;;		i2_MXK_Queue
 15882 ;;		i2_MXK_Release
 15883 ;;		i2_MXK_SwitchTo
 15884 ;;		i2_Port_SetPin
 15885 ;;		i2_Timer0_Restart
 15886 ;;		i2_Timer0_Stop
 15887 ;; This function is called by:
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891                           	psect	text88
 15892  011880                     __ptext88:
 15893                           	opt stack 0
 15894  011880                     i2_Motor_Step:
 15895                           	opt stack 13
 15896                           
 15897                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 15898                           
 15899                           ;incstack = 0
 15900  011880  0100               	movlb	0	; () banked
 15901  011882  EE20 F004          	lfsr	2,4
 15902  011886  5173               	movf	_lMotor& (0+255),w,b
 15903  011888  26D9               	addwf	fsr2l,f,c
 15904  01188A  5174               	movf	(_lMotor+1)& (0+255),w,b
 15905  01188C  22DA               	addwfc	fsr2h,f,c
 15906  01188E  50DF               	movf	indf2,w,c
 15907  011890  ECE8  F097         	call	i2_MXK_SwitchTo
 15908  011894  0900               	iorlw	0
 15909  011896  B4D8               	btfsc	status,2,c
 15910  011898  D06A               	goto	i2l1627
 15911                           
 15912                           ;Motor.c: 78: {
 15913                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 15914  01189A  C073  FFD9         	movff	_lMotor,fsr2l
 15915  01189E  C074  FFDA         	movff	_lMotor+1,fsr2h
 15916  0118A2  50DE               	movf	postinc2,w,c
 15917  0118A4  10DE               	iorwf	postinc2,w,c
 15918  0118A6  B4D8               	btfsc	status,2,c
 15919  0118A8  D05D               	goto	i2l1628
 15920                           
 15921                           ;Motor.c: 80: {
 15922                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 15923  0118AA  C073  FFD9         	movff	_lMotor,fsr2l
 15924  0118AE  C074  FFDA         	movff	_lMotor+1,fsr2h
 15925  0118B2  0E01               	movlw	1
 15926  0118B4  BEDB               	btfsc	plusw2,7,c
 15927  0118B6  D022               	goto	i2l1629
 15928  0118B8  0E01               	movlw	1
 15929  0118BA  50DB               	movf	plusw2,w,c
 15930  0118BC  E103               	bnz	i2u511_40
 15931  0118BE  04DE               	decf	postinc2,w,c
 15932  0118C0  A0D8               	btfss	status,0,c
 15933  0118C2  D01C               	goto	i2l1629
 15934  0118C4                     i2u511_40:
 15935                           
 15936                           ;Motor.c: 83: {
 15937                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 15938  0118C4  C073  FFD9         	movff	_lMotor,fsr2l
 15939  0118C8  C074  FFDA         	movff	_lMotor+1,fsr2h
 15940  0118CC  28DE               	incf	postinc2,w,c
 15941  0118CE  E104               	bnz	i2u512_40
 15942  0118D0  0E7F               	movlw	127
 15943  0118D2  18DE               	xorwf	postinc2,w,c
 15944  0118D4  B4D8               	btfsc	status,2,c
 15945  0118D6  D007               	goto	i2l1630
 15946  0118D8                     i2u512_40:
 15947                           
 15948                           ;Motor.c: 85: lMotor->mDelta --;
 15949  0118D8  C073  FFD9         	movff	_lMotor,fsr2l
 15950  0118DC  C074  FFDA         	movff	_lMotor+1,fsr2h
 15951  0118E0  06DE               	decf	postinc2,f,c
 15952  0118E2  0E00               	movlw	0
 15953  0118E4  5ADD               	subwfb	postdec2,f,c
 15954  0118E6                     i2l1630:
 15955                           
 15956                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 15957  0118E6  0E8A               	movlw	low _PortE
 15958  0118E8  6E10               	movwf	i2Port_SetPin@pInput,c
 15959  0118EA  0E00               	movlw	high _PortE
 15960  0118EC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 15961  0118EE  0E00               	movlw	0
 15962  0118F0  6E12               	movwf	i2Port_SetPin@pPin,c
 15963  0118F2  0E01               	movlw	1
 15964  0118F4  6E13               	movwf	i2Port_SetPin@pValue,c
 15965  0118F6  ECD5  F08F         	call	i2_Port_SetPin	;wreg free
 15966                           
 15967                           ;Motor.c: 88: }
 15968  0118FA  D01B               	goto	i2l1631
 15969  0118FC                     i2l1629:
 15970                           
 15971                           ;Motor.c: 89: else
 15972                           ;Motor.c: 90: {
 15973                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 15974  0118FC  C073  FFD9         	movff	_lMotor,fsr2l
 15975  011900  C074  FFDA         	movff	_lMotor+1,fsr2h
 15976  011904  04DE               	decf	postinc2,w,c
 15977  011906  E104               	bnz	i2u513_40
 15978  011908  0E80               	movlw	128
 15979  01190A  18DE               	xorwf	postinc2,w,c
 15980  01190C  B4D8               	btfsc	status,2,c
 15981  01190E  D007               	goto	i2l1632
 15982  011910                     i2u513_40:
 15983                           
 15984                           ;Motor.c: 92: lMotor->mDelta ++;
 15985  011910  C073  FFD9         	movff	_lMotor,fsr2l
 15986  011914  C074  FFDA         	movff	_lMotor+1,fsr2h
 15987  011918  2ADE               	incf	postinc2,f,c
 15988  01191A  0E00               	movlw	0
 15989  01191C  22DD               	addwfc	postdec2,f,c
 15990  01191E                     i2l1632:
 15991                           
 15992                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 15993  01191E  0E8A               	movlw	low _PortE
 15994  011920  6E10               	movwf	i2Port_SetPin@pInput,c
 15995  011922  0E00               	movlw	high _PortE
 15996  011924  6E11               	movwf	i2Port_SetPin@pInput+1,c
 15997  011926  0E00               	movlw	0
 15998  011928  6E12               	movwf	i2Port_SetPin@pPin,c
 15999  01192A  0E00               	movlw	0
 16000  01192C  6E13               	movwf	i2Port_SetPin@pValue,c
 16001  01192E  ECD5  F08F         	call	i2_Port_SetPin	;wreg free
 16002  011932                     i2l1631:
 16003                           
 16004                           ;Motor.c: 95: }
 16005                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16006  011932  0E8A               	movlw	low _PortE
 16007  011934  6E10               	movwf	i2Port_SetPin@pInput,c
 16008  011936  0E00               	movlw	high _PortE
 16009  011938  6E11               	movwf	i2Port_SetPin@pInput+1,c
 16010  01193A  0E01               	movlw	1
 16011  01193C  6E12               	movwf	i2Port_SetPin@pPin,c
 16012  01193E  0E01               	movlw	1
 16013  011940  6E13               	movwf	i2Port_SetPin@pValue,c
 16014  011942  ECD5  F08F         	call	i2_Port_SetPin	;wreg free
 16015                           
 16016                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16017  011946  0E8A               	movlw	low _PortE
 16018  011948  6E10               	movwf	i2Port_SetPin@pInput,c
 16019  01194A  0E00               	movlw	high _PortE
 16020  01194C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 16021  01194E  0E01               	movlw	1
 16022  011950  6E12               	movwf	i2Port_SetPin@pPin,c
 16023  011952  0E00               	movlw	0
 16024  011954  6E13               	movwf	i2Port_SetPin@pValue,c
 16025  011956  ECD5  F08F         	call	i2_Port_SetPin	;wreg free
 16026                           
 16027                           ;Motor.c: 101: MXK_Release();
 16028  01195A  ECE7  F099         	call	i2_MXK_Release	;wreg free
 16029                           
 16030                           ;Motor.c: 102: Timer0_Restart();
 16031  01195E  ECBD  F099         	call	i2_Timer0_Restart	;wreg free
 16032                           
 16033                           ;Motor.c: 103: return;
 16034  011962  0012               	return	
 16035  011964                     i2l1628:
 16036                           
 16037                           ;Motor.c: 104: }
 16038                           ;Motor.c: 105: MXK_Release();
 16039  011964  ECE7  F099         	call	i2_MXK_Release	;wreg free
 16040                           
 16041                           ;Motor.c: 106: Timer0_Stop();
 16042  011968  ECE4  F099         	call	i2_Timer0_Stop	;wreg free
 16043                           
 16044                           ;Motor.c: 107: return;
 16045  01196C  0012               	return	
 16046  01196E                     i2l1627:
 16047                           
 16048                           ;Motor.c: 108: }
 16049                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16050  01196E  C06A  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 16051  011972  C06B  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 16052  011976  C06C  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 16053  01197A  ECAA  F099         	call	i2_MXK_Queue	;wreg free
 16054  01197E  0012               	return		;funcret
 16055  011980                     __end_ofi2_Motor_Step:
 16056                           	opt stack 0
 16057                           tosu	equ	0xFFF
 16058                           tosh	equ	0xFFE
 16059                           tosl	equ	0xFFD
 16060                           pclatu	equ	0xFFB
 16061                           pclath	equ	0xFFA
 16062                           tblptru	equ	0xFF8
 16063                           tblptrh	equ	0xFF7
 16064                           tblptrl	equ	0xFF6
 16065                           tablat	equ	0xFF5
 16066                           prodh	equ	0xFF4
 16067                           prodl	equ	0xFF3
 16068                           intcon	equ	0xFF2
 16069                           indf0	equ	0xFEF
 16070                           postinc0	equ	0xFEE
 16071                           fsr0h	equ	0xFEA
 16072                           fsr0l	equ	0xFE9
 16073                           wreg	equ	0xFE8
 16074                           indf1	equ	0xFE7
 16075                           postdec1	equ	0xFE5
 16076                           fsr1h	equ	0xFE2
 16077                           fsr1l	equ	0xFE1
 16078                           indf2	equ	0xFDF
 16079                           postinc2	equ	0xFDE
 16080                           postdec2	equ	0xFDD
 16081                           plusw2	equ	0xFDB
 16082                           fsr2h	equ	0xFDA
 16083                           fsr2l	equ	0xFD9
 16084                           status	equ	0xFD8
 16085                           
 16086 ;; *************** function i2_Timer0_Stop *****************
 16087 ;; Defined at:
 16088 ;;		line 89 in file "Library/Timer0.c"
 16089 ;; Parameters:    Size  Location     Type
 16090 ;;		None
 16091 ;; Auto vars:     Size  Location     Type
 16092 ;;		None
 16093 ;; Return value:  Size  Location     Type
 16094 ;;                  1    wreg      void 
 16095 ;; Registers used:
 16096 ;;		None
 16097 ;; Tracked objects:
 16098 ;;		On entry : 0/0
 16099 ;;		On exit  : 0/0
 16100 ;;		Unchanged: 0/0
 16101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16106 ;;Total ram usage:        0 bytes
 16107 ;; Hardware stack levels used:    1
 16108 ;; This function calls:
 16109 ;;		Nothing
 16110 ;; This function is called by:
 16111 ;;		_Timer0_ISR
 16112 ;;		i2_Motor_Step
 16113 ;; This function uses a non-reentrant model
 16114 ;;
 16115                           
 16116                           	psect	text89
 16117  0133C8                     __ptext89:
 16118                           	opt stack 0
 16119  0133C8                     i2_Timer0_Stop:
 16120                           	opt stack 17
 16121                           
 16122                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16123                           
 16124                           ;incstack = 0
 16125  0133C8  9AF2               	bcf	intcon,5,c	;volatile
 16126                           
 16127                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16128  0133CA  94F2               	bcf	intcon,2,c	;volatile
 16129  0133CC  0012               	return		;funcret
 16130  0133CE                     __end_ofi2_Timer0_Stop:
 16131                           	opt stack 0
 16132                           tosu	equ	0xFFF
 16133                           tosh	equ	0xFFE
 16134                           tosl	equ	0xFFD
 16135                           pclatu	equ	0xFFB
 16136                           pclath	equ	0xFFA
 16137                           tblptru	equ	0xFF8
 16138                           tblptrh	equ	0xFF7
 16139                           tblptrl	equ	0xFF6
 16140                           tablat	equ	0xFF5
 16141                           prodh	equ	0xFF4
 16142                           prodl	equ	0xFF3
 16143                           intcon	equ	0xFF2
 16144                           indf0	equ	0xFEF
 16145                           postinc0	equ	0xFEE
 16146                           fsr0h	equ	0xFEA
 16147                           fsr0l	equ	0xFE9
 16148                           wreg	equ	0xFE8
 16149                           indf1	equ	0xFE7
 16150                           postdec1	equ	0xFE5
 16151                           fsr1h	equ	0xFE2
 16152                           fsr1l	equ	0xFE1
 16153                           indf2	equ	0xFDF
 16154                           postinc2	equ	0xFDE
 16155                           postdec2	equ	0xFDD
 16156                           plusw2	equ	0xFDB
 16157                           fsr2h	equ	0xFDA
 16158                           fsr2l	equ	0xFD9
 16159                           status	equ	0xFD8
 16160                           
 16161 ;; *************** function i2_Timer0_Restart *****************
 16162 ;; Defined at:
 16163 ;;		line 83 in file "Library/Timer0.c"
 16164 ;; Parameters:    Size  Location     Type
 16165 ;;		None
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;		None
 16168 ;; Return value:  Size  Location     Type
 16169 ;;                  1    wreg      void 
 16170 ;; Registers used:
 16171 ;;		None
 16172 ;; Tracked objects:
 16173 ;;		On entry : 0/0
 16174 ;;		On exit  : 0/0
 16175 ;;		Unchanged: 0/0
 16176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;Total ram usage:        0 bytes
 16182 ;; Hardware stack levels used:    1
 16183 ;; This function calls:
 16184 ;;		Nothing
 16185 ;; This function is called by:
 16186 ;;		i2_Motor_Step
 16187 ;; This function uses a non-reentrant model
 16188 ;;
 16189                           
 16190                           	psect	text90
 16191  01337A                     __ptext90:
 16192                           	opt stack 0
 16193  01337A                     i2_Timer0_Restart:
 16194                           	opt stack 16
 16195                           
 16196                           ;Timer0.c: 85: TMR0 = COUNTER;
 16197                           
 16198                           ;incstack = 0
 16199  01337A  C071  FFD6         	movff	_COUNTER,4054	;volatile
 16200  01337E  C072  FFD7         	movff	_COUNTER+1,4055	;volatile
 16201                           
 16202                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 16203  013382  8AF2               	bsf	intcon,5,c	;volatile
 16204  013384  0012               	return		;funcret
 16205  013386                     __end_ofi2_Timer0_Restart:
 16206                           	opt stack 0
 16207                           tosu	equ	0xFFF
 16208                           tosh	equ	0xFFE
 16209                           tosl	equ	0xFFD
 16210                           pclatu	equ	0xFFB
 16211                           pclath	equ	0xFFA
 16212                           tblptru	equ	0xFF8
 16213                           tblptrh	equ	0xFF7
 16214                           tblptrl	equ	0xFF6
 16215                           tablat	equ	0xFF5
 16216                           prodh	equ	0xFF4
 16217                           prodl	equ	0xFF3
 16218                           intcon	equ	0xFF2
 16219                           indf0	equ	0xFEF
 16220                           postinc0	equ	0xFEE
 16221                           fsr0h	equ	0xFEA
 16222                           fsr0l	equ	0xFE9
 16223                           wreg	equ	0xFE8
 16224                           indf1	equ	0xFE7
 16225                           postdec1	equ	0xFE5
 16226                           fsr1h	equ	0xFE2
 16227                           fsr1l	equ	0xFE1
 16228                           indf2	equ	0xFDF
 16229                           postinc2	equ	0xFDE
 16230                           postdec2	equ	0xFDD
 16231                           plusw2	equ	0xFDB
 16232                           fsr2h	equ	0xFDA
 16233                           fsr2l	equ	0xFD9
 16234                           status	equ	0xFD8
 16235                           
 16236 ;; *************** function i2_Port_SetPin *****************
 16237 ;; Defined at:
 16238 ;;		line 247 in file "Library/Port.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;  pInput          2   15[COMRAM] const PTR struct Port
 16241 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 16242 ;;  pPin            1   17[COMRAM] enum E6750
 16243 ;;  pValue          1   18[COMRAM] unsigned char 
 16244 ;; Auto vars:     Size  Location     Type
 16245 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 16246 ;; Return value:  Size  Location     Type
 16247 ;;                  1    wreg      void 
 16248 ;; Registers used:
 16249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16250 ;; Tracked objects:
 16251 ;;		On entry : 0/0
 16252 ;;		On exit  : 0/0
 16253 ;;		Unchanged: 0/0
 16254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16258 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16259 ;;Total ram usage:        5 bytes
 16260 ;; Hardware stack levels used:    1
 16261 ;; Hardware stack levels required when called:    3
 16262 ;; This function calls:
 16263 ;;		i2_Byte_SetBit
 16264 ;;		i2_Word_GetPair
 16265 ;; This function is called by:
 16266 ;;		i2_Motor_Step
 16267 ;; This function uses a non-reentrant model
 16268 ;;
 16269                           
 16270                           	psect	text91
 16271  011FAA                     __ptext91:
 16272                           	opt stack 0
 16273  011FAA                     i2_Port_SetPin:
 16274                           	opt stack 13
 16275                           
 16276                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 16277                           
 16278                           ;incstack = 0
 16279  011FAA  0E08               	movlw	8
 16280  011FAC  2410               	addwf	i2Port_SetPin@pInput,w,c
 16281  011FAE  6E0D               	movwf	i2Word_GetPair@pInput,c
 16282  011FB0  0E00               	movlw	0
 16283  011FB2  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 16284  011FB4  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 16285  011FB6  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 16286  011FBA  EC4C  F098         	call	i2_Word_GetPair	;wreg free
 16287  011FBE  6E14               	movwf	i2Port_SetPin@Type,c
 16288                           
 16289                           ;Port.c: 250: switch (Type)
 16290  011FC0  D03B               	goto	i2l427
 16291  011FC2                     
 16292                           ;Port.c: 256: pValue &= 1;
 16293  011FC2  0E01               	movlw	1
 16294  011FC4  1613               	andwf	i2Port_SetPin@pValue,f,c
 16295                           
 16296                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16297  011FC6  EE20 F002          	lfsr	2,2
 16298  011FCA  5010               	movf	i2Port_SetPin@pInput,w,c
 16299  011FCC  26D9               	addwf	fsr2l,f,c
 16300  011FCE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 16301  011FD0  22DA               	addwfc	fsr2h,f,c
 16302  011FD2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 16303  011FD6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 16304  011FDA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 16305  011FDE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 16306  011FE2  EC72  F096         	call	i2_Byte_SetBit	;wreg free
 16307                           
 16308                           ;Port.c: 258: break;
 16309  011FE6  0012               	return	
 16310  011FE8                     
 16311                           ;Port.c: 261: pValue &= 1;
 16312  011FE8  0E01               	movlw	1
 16313  011FEA  1613               	andwf	i2Port_SetPin@pValue,f,c
 16314                           
 16315                           ;Port.c: 262: pValue ^= 1;
 16316  011FEC  0E01               	movlw	1
 16317  011FEE  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 16318                           
 16319                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16320  011FF0  EE20 F002          	lfsr	2,2
 16321  011FF4  5010               	movf	i2Port_SetPin@pInput,w,c
 16322  011FF6  26D9               	addwf	fsr2l,f,c
 16323  011FF8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 16324  011FFA  22DA               	addwfc	fsr2h,f,c
 16325  011FFC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 16326  012000  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 16327  012004  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 16328  012008  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 16329  01200C  EC72  F096         	call	i2_Byte_SetBit	;wreg free
 16330                           
 16331                           ;Port.c: 264: break;
 16332  012010  0012               	return	
 16333  012012                     
 16334                           ;Port.c: 266: pValue &= 1;
 16335  012012  0E01               	movlw	1
 16336  012014  1613               	andwf	i2Port_SetPin@pValue,f,c
 16337                           
 16338                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 16339  012016  EE20 F004          	lfsr	2,4
 16340  01201A  5010               	movf	i2Port_SetPin@pInput,w,c
 16341  01201C  26D9               	addwf	fsr2l,f,c
 16342  01201E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 16343  012020  22DA               	addwfc	fsr2h,f,c
 16344  012022  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 16345  012026  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 16346  01202A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 16347  01202E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 16348  012032  EC72  F096         	call	i2_Byte_SetBit	;wreg free
 16349                           
 16350                           ;Port.c: 269: }
 16351                           
 16352                           ;Port.c: 268: break;
 16353  012036  0012               	return	
 16354  012038                     i2l427:
 16355  012038  5014               	movf	i2Port_SetPin@Type,w,c
 16356                           
 16357                           ; Switch size 1, requested type "space"
 16358                           ; Number of cases is 4, Range of values is 0 to 3
 16359                           ; switch strategies available:
 16360                           ; Name         Instructions Cycles
 16361                           ; simple_byte           13     7 (average)
 16362                           ;	Chosen strategy is simple_byte
 16363  01203A  0A00               	xorlw	0	; case 0
 16364  01203C  B4D8               	btfsc	status,2,c
 16365  01203E  0012               	return	
 16366  012040  0A01               	xorlw	1	; case 1
 16367  012042  B4D8               	btfsc	status,2,c
 16368  012044  D7BE               	goto	i2l430
 16369  012046  0A03               	xorlw	3	; case 2
 16370  012048  B4D8               	btfsc	status,2,c
 16371  01204A  D7CE               	goto	i2l432
 16372  01204C  0A01               	xorlw	1	; case 3
 16373  01204E  A4D8               	btfss	status,2,c
 16374  012050  0012               	return	
 16375  012052  D7DF               	goto	i2l433
 16376  012054                     __end_ofi2_Port_SetPin:
 16377                           	opt stack 0
 16378                           tosu	equ	0xFFF
 16379                           tosh	equ	0xFFE
 16380                           tosl	equ	0xFFD
 16381                           pclatu	equ	0xFFB
 16382                           pclath	equ	0xFFA
 16383                           tblptru	equ	0xFF8
 16384                           tblptrh	equ	0xFF7
 16385                           tblptrl	equ	0xFF6
 16386                           tablat	equ	0xFF5
 16387                           prodh	equ	0xFF4
 16388                           prodl	equ	0xFF3
 16389                           intcon	equ	0xFF2
 16390                           indf0	equ	0xFEF
 16391                           postinc0	equ	0xFEE
 16392                           fsr0h	equ	0xFEA
 16393                           fsr0l	equ	0xFE9
 16394                           wreg	equ	0xFE8
 16395                           indf1	equ	0xFE7
 16396                           postdec1	equ	0xFE5
 16397                           fsr1h	equ	0xFE2
 16398                           fsr1l	equ	0xFE1
 16399                           indf2	equ	0xFDF
 16400                           postinc2	equ	0xFDE
 16401                           postdec2	equ	0xFDD
 16402                           plusw2	equ	0xFDB
 16403                           fsr2h	equ	0xFDA
 16404                           fsr2l	equ	0xFD9
 16405                           status	equ	0xFD8
 16406                           
 16407 ;; *************** function i2_Word_GetPair *****************
 16408 ;; Defined at:
 16409 ;;		line 156 in file "Library/Types.c"
 16410 ;; Parameters:    Size  Location     Type
 16411 ;;  pInput          2   12[COMRAM] PTR struct Word
 16412 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16413 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16414 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16415 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16416 ;;  pPair           1   14[COMRAM] unsigned char 
 16417 ;; Auto vars:     Size  Location     Type
 16418 ;;		None
 16419 ;; Return value:  Size  Location     Type
 16420 ;;                  1    wreg      unsigned char 
 16421 ;; Registers used:
 16422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16423 ;; Tracked objects:
 16424 ;;		On entry : 0/0
 16425 ;;		On exit  : 0/0
 16426 ;;		Unchanged: 0/0
 16427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16428 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16432 ;;Total ram usage:        3 bytes
 16433 ;; Hardware stack levels used:    1
 16434 ;; Hardware stack levels required when called:    2
 16435 ;; This function calls:
 16436 ;;		i2_Byte_GetPair
 16437 ;; This function is called by:
 16438 ;;		i2_Port_SetPin
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           	psect	text92
 16443  013098                     __ptext92:
 16444                           	opt stack 0
 16445  013098                     i2_Word_GetPair:
 16446                           	opt stack 13
 16447                           
 16448                           ;Types.c: 158: if (pPair >= 4)
 16449                           
 16450                           ;incstack = 0
 16451  013098  0E03               	movlw	3
 16452  01309A  640F               	cpfsgt	i2Word_GetPair@pPair,c
 16453  01309C  D00C               	goto	i2l781
 16454                           
 16455                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16456  01309E  0E01               	movlw	1
 16457  0130A0  240D               	addwf	i2Word_GetPair@pInput,w,c
 16458  0130A2  6E0A               	movwf	i2Byte_GetPair@pInput,c
 16459  0130A4  0E00               	movlw	0
 16460  0130A6  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 16461  0130A8  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 16462  0130AA  500F               	movf	i2Word_GetPair@pPair,w,c
 16463  0130AC  0FFC               	addlw	252
 16464  0130AE  6E0C               	movwf	i2Byte_GetPair@pPair,c
 16465  0130B0  EC65  F099         	call	i2_Byte_GetPair	;wreg free
 16466  0130B4  0012               	return	
 16467  0130B6                     i2l781:
 16468                           
 16469                           ;Types.c: 160: else
 16470                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16471  0130B6  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 16472  0130BA  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 16473  0130BE  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 16474  0130C2  EC65  F099         	call	i2_Byte_GetPair	;wreg free
 16475  0130C6  0012               	return	
 16476  0130C8                     __end_ofi2_Word_GetPair:
 16477                           	opt stack 0
 16478                           tosu	equ	0xFFF
 16479                           tosh	equ	0xFFE
 16480                           tosl	equ	0xFFD
 16481                           pclatu	equ	0xFFB
 16482                           pclath	equ	0xFFA
 16483                           tblptru	equ	0xFF8
 16484                           tblptrh	equ	0xFF7
 16485                           tblptrl	equ	0xFF6
 16486                           tablat	equ	0xFF5
 16487                           prodh	equ	0xFF4
 16488                           prodl	equ	0xFF3
 16489                           intcon	equ	0xFF2
 16490                           indf0	equ	0xFEF
 16491                           postinc0	equ	0xFEE
 16492                           fsr0h	equ	0xFEA
 16493                           fsr0l	equ	0xFE9
 16494                           wreg	equ	0xFE8
 16495                           indf1	equ	0xFE7
 16496                           postdec1	equ	0xFE5
 16497                           fsr1h	equ	0xFE2
 16498                           fsr1l	equ	0xFE1
 16499                           indf2	equ	0xFDF
 16500                           postinc2	equ	0xFDE
 16501                           postdec2	equ	0xFDD
 16502                           plusw2	equ	0xFDB
 16503                           fsr2h	equ	0xFDA
 16504                           fsr2l	equ	0xFD9
 16505                           status	equ	0xFD8
 16506                           
 16507 ;; *************** function i2_Byte_GetPair *****************
 16508 ;; Defined at:
 16509 ;;		line 87 in file "Library/Types.c"
 16510 ;; Parameters:    Size  Location     Type
 16511 ;;  pInput          2    9[COMRAM] PTR struct Byte
 16512 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16513 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16514 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16515 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16516 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16517 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16518 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16519 ;;		 -> NULL(0), 
 16520 ;;  pPair           1   11[COMRAM] unsigned char 
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;		None
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  1    wreg      unsigned char 
 16525 ;; Registers used:
 16526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16532 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16535 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16536 ;;Total ram usage:        3 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    1
 16539 ;; This function calls:
 16540 ;;		i2_Byte_GetZone
 16541 ;; This function is called by:
 16542 ;;		i2_Word_GetPair
 16543 ;; This function uses a non-reentrant model
 16544 ;;
 16545                           
 16546                           	psect	text93
 16547  0132CA                     __ptext93:
 16548                           	opt stack 0
 16549  0132CA                     i2_Byte_GetPair:
 16550                           	opt stack 13
 16551                           
 16552                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16553                           
 16554                           ;incstack = 0
 16555  0132CA  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 16556  0132CE  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 16557  0132D2  0E04               	movlw	4
 16558  0132D4  6E03               	movwf	i2Byte_GetZone@pMax,c
 16559  0132D6  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 16560  0132DA  0E02               	movlw	2
 16561  0132DC  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 16562  0132DE  EC55  F093         	call	i2_Byte_GetZone	;wreg free
 16563  0132E2  0012               	return	
 16564  0132E4                     __end_ofi2_Byte_GetPair:
 16565                           	opt stack 0
 16566                           tosu	equ	0xFFF
 16567                           tosh	equ	0xFFE
 16568                           tosl	equ	0xFFD
 16569                           pclatu	equ	0xFFB
 16570                           pclath	equ	0xFFA
 16571                           tblptru	equ	0xFF8
 16572                           tblptrh	equ	0xFF7
 16573                           tblptrl	equ	0xFF6
 16574                           tablat	equ	0xFF5
 16575                           prodh	equ	0xFF4
 16576                           prodl	equ	0xFF3
 16577                           intcon	equ	0xFF2
 16578                           indf0	equ	0xFEF
 16579                           postinc0	equ	0xFEE
 16580                           fsr0h	equ	0xFEA
 16581                           fsr0l	equ	0xFE9
 16582                           wreg	equ	0xFE8
 16583                           indf1	equ	0xFE7
 16584                           postdec1	equ	0xFE5
 16585                           fsr1h	equ	0xFE2
 16586                           fsr1l	equ	0xFE1
 16587                           indf2	equ	0xFDF
 16588                           postinc2	equ	0xFDE
 16589                           postdec2	equ	0xFDD
 16590                           plusw2	equ	0xFDB
 16591                           fsr2h	equ	0xFDA
 16592                           fsr2l	equ	0xFD9
 16593                           status	equ	0xFD8
 16594                           
 16595 ;; *************** function i2_Byte_GetZone *****************
 16596 ;; Defined at:
 16597 ;;		line 64 in file "Library/Types.c"
 16598 ;; Parameters:    Size  Location     Type
 16599 ;;  pInput          2    0[COMRAM] PTR struct Byte
 16600 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16601 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16602 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16603 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16604 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16605 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16606 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16607 ;;		 -> NULL(0), 
 16608 ;;  pMax            1    2[COMRAM] unsigned char 
 16609 ;;  pChunk          1    3[COMRAM] unsigned char 
 16610 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 16611 ;; Auto vars:     Size  Location     Type
 16612 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 16613 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 16614 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 16615 ;; Return value:  Size  Location     Type
 16616 ;;                  1    wreg      unsigned char 
 16617 ;; Registers used:
 16618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16619 ;; Tracked objects:
 16620 ;;		On entry : 0/0
 16621 ;;		On exit  : 0/0
 16622 ;;		Unchanged: 0/0
 16623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16624 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;Total ram usage:        9 bytes
 16629 ;; Hardware stack levels used:    1
 16630 ;; This function calls:
 16631 ;;		Nothing
 16632 ;; This function is called by:
 16633 ;;		i2_Byte_GetPair
 16634 ;; This function uses a non-reentrant model
 16635 ;;
 16636                           
 16637                           	psect	text94
 16638  0126AA                     __ptext94:
 16639                           	opt stack 0
 16640  0126AA                     i2_Byte_GetZone:
 16641                           	opt stack 13
 16642                           
 16643                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16644                           
 16645                           ;incstack = 0
 16646  0126AA  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 16647  0126AE  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 16648  0126B2  0E00               	movlw	low (__mediumconst shr (0+16))
 16649  0126B4  6EF8               	movwf	tblptru,c
 16650  0126B6  0E0F               	movlw	(high __ramtop+-1)
 16651  0126B8  64F7               	cpfsgt	tblptrh,c
 16652  0126BA  D003               	bra	i2u355_47
 16653  0126BC  0008               	tblrd		*
 16654  0126BE  50F5               	movf	tablat,w,c
 16655  0126C0  D005               	bra	i2u355_40
 16656  0126C2                     i2u355_47:
 16657  0126C2  CFF6 FFE9          	movff	tblptrl,fsr0l
 16658  0126C6  CFF7 FFEA          	movff	tblptrh,fsr0h
 16659  0126CA  50EF               	movf	indf0,w,c
 16660  0126CC                     i2u355_40:
 16661  0126CC  6E09               	movwf	i2Byte_GetZone@Output,c
 16662                           
 16663                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16664  0126CE  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 16665  0126D0  0D01               	mullw	1
 16666  0126D2  0EFB               	movlw	low _MASKS
 16667  0126D4  24F3               	addwf	prodl,w,c
 16668  0126D6  6EF6               	movwf	tblptrl,c
 16669  0126D8  0EFD               	movlw	high _MASKS
 16670  0126DA  20F4               	addwfc	prodh,w,c
 16671  0126DC  6EF7               	movwf	tblptrh,c
 16672  0126DE                     	if	1	;There are 3 active tblptr bytes
 16673  0126DE  6AF8               	clrf	tblptru,c
 16674  0126E0  0E00               	movlw	low (__mediumconst shr (0+16))
 16675  0126E2  22F8               	addwfc	tblptru,f,c
 16676  0126E4                     	endif
 16677  0126E4  0008               	tblrd		*
 16678  0126E6  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 16679                           
 16680                           ;Types.c: 68: UINT8 Offset = 0;
 16681  0126EA  0E00               	movlw	0
 16682  0126EC  6E08               	movwf	i2Byte_GetZone@Offset,c
 16683                           
 16684                           ;Types.c: 70: while (pChunk >= pMax)
 16685  0126EE  D003               	goto	i2l732
 16686  0126F0                     
 16687                           ;Types.c: 71: {
 16688                           ;Types.c: 72: pChunk -= pMax;
 16689  0126F0  5003               	movf	i2Byte_GetZone@pMax,w,c
 16690  0126F2  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 16691                           
 16692                           ;Types.c: 73: Offset += 1;
 16693  0126F4  2A08               	incf	i2Byte_GetZone@Offset,f,c
 16694  0126F6                     i2l732:
 16695  0126F6  5003               	movf	i2Byte_GetZone@pMax,w,c
 16696  0126F8  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 16697  0126FA  B0D8               	btfsc	status,0,c
 16698  0126FC  D7F9               	goto	i2l733
 16699                           
 16700                           ;Types.c: 74: }
 16701                           ;Types.c: 75: pChunk *= pChunkSize;
 16702  0126FE  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 16703  012700  0204               	mulwf	i2Byte_GetZone@pChunk,c
 16704  012702  50F3               	movf	prodl,w,c
 16705  012704  6E04               	movwf	i2Byte_GetZone@pChunk,c
 16706                           
 16707                           ;Types.c: 76: pChunk += Offset;
 16708  012706  5008               	movf	i2Byte_GetZone@Offset,w,c
 16709  012708  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 16710                           
 16711                           ;Types.c: 78: Output >>= pChunk;
 16712  01270A  2804               	incf	i2Byte_GetZone@pChunk,w,c
 16713  01270C  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 16714  01270E  D002               	goto	i2u357_40
 16715  012710                     i2u357_45:
 16716  012710  90D8               	bcf	status,0,c
 16717  012712  3209               	rrcf	i2Byte_GetZone@Output,f,c
 16718  012714                     i2u357_40:
 16719  012714  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 16720  012716  D7FC               	goto	i2u357_45
 16721                           
 16722                           ;Types.c: 79: Output &= MASK;
 16723  012718  5007               	movf	i2Byte_GetZone@MASK,w,c
 16724  01271A  1609               	andwf	i2Byte_GetZone@Output,f,c
 16725                           
 16726                           ;Types.c: 80: return Output;
 16727  01271C  5009               	movf	i2Byte_GetZone@Output,w,c
 16728  01271E  0012               	return	
 16729  012720                     __end_ofi2_Byte_GetZone:
 16730                           	opt stack 0
 16731                           tosu	equ	0xFFF
 16732                           tosh	equ	0xFFE
 16733                           tosl	equ	0xFFD
 16734                           pclatu	equ	0xFFB
 16735                           pclath	equ	0xFFA
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           indf0	equ	0xFEF
 16744                           postinc0	equ	0xFEE
 16745                           fsr0h	equ	0xFEA
 16746                           fsr0l	equ	0xFE9
 16747                           wreg	equ	0xFE8
 16748                           indf1	equ	0xFE7
 16749                           postdec1	equ	0xFE5
 16750                           fsr1h	equ	0xFE2
 16751                           fsr1l	equ	0xFE1
 16752                           indf2	equ	0xFDF
 16753                           postinc2	equ	0xFDE
 16754                           postdec2	equ	0xFDD
 16755                           plusw2	equ	0xFDB
 16756                           fsr2h	equ	0xFDA
 16757                           fsr2l	equ	0xFD9
 16758                           status	equ	0xFD8
 16759                           
 16760 ;; *************** function i2_Byte_SetBit *****************
 16761 ;; Defined at:
 16762 ;;		line 32 in file "Library/Types.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;  pInput          2    0[COMRAM] PTR struct Byte
 16765 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 16766 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 16767 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16768 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16769 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16770 ;;		 -> NULL(0), 
 16771 ;;  pBit            1    2[COMRAM] unsigned char 
 16772 ;;  pValue          1    3[COMRAM] unsigned char 
 16773 ;; Auto vars:     Size  Location     Type
 16774 ;;		None
 16775 ;; Return value:  Size  Location     Type
 16776 ;;                  1    wreg      void 
 16777 ;; Registers used:
 16778 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16779 ;; Tracked objects:
 16780 ;;		On entry : 0/0
 16781 ;;		On exit  : 0/0
 16782 ;;		Unchanged: 0/0
 16783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16786 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16787 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16788 ;;Total ram usage:        7 bytes
 16789 ;; Hardware stack levels used:    1
 16790 ;; This function calls:
 16791 ;;		Nothing
 16792 ;; This function is called by:
 16793 ;;		i2_Port_SetPin
 16794 ;; This function uses a non-reentrant model
 16795 ;;
 16796                           
 16797                           	psect	text95
 16798  012CE4                     __ptext95:
 16799                           	opt stack 0
 16800  012CE4                     i2_Byte_SetBit:
 16801                           	opt stack 15
 16802                           
 16803                           ;Types.c: 34: pValue &= 1;
 16804                           
 16805                           ;incstack = 0
 16806  012CE4  0E01               	movlw	1
 16807  012CE6  1604               	andwf	i2Byte_SetBit@pValue,f,c
 16808                           
 16809                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 16810  012CE8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 16811  012CEC  0E01               	movlw	1
 16812  012CEE  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 16813  012CF0  2A05               	incf	??i2_Byte_SetBit,f,c
 16814  012CF2  D002               	goto	i2u419_44
 16815  012CF4                     i2u419_45:
 16816  012CF4  90D8               	bcf	status,0,c
 16817  012CF6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 16818  012CF8                     i2u419_44:
 16819  012CF8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 16820  012CFA  D7FC               	goto	i2u419_45
 16821  012CFC  5006               	movf	??i2_Byte_SetBit+1,w,c
 16822  012CFE  0AFF               	xorlw	255
 16823  012D00  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 16824  012D02  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 16825  012D06  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 16826  012D0A  5007               	movf	??i2_Byte_SetBit+2,w,c
 16827  012D0C  16DF               	andwf	indf2,f,c
 16828                           
 16829                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 16830  012D0E  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 16831  012D12  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 16832  012D16  2A05               	incf	??i2_Byte_SetBit,f,c
 16833  012D18  D002               	goto	i2u420_44
 16834  012D1A                     i2u420_45:
 16835  012D1A  90D8               	bcf	status,0,c
 16836  012D1C  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 16837  012D1E                     i2u420_44:
 16838  012D1E  2E05               	decfsz	??i2_Byte_SetBit,f,c
 16839  012D20  D7FC               	goto	i2u420_45
 16840  012D22  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 16841  012D26  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 16842  012D2A  5006               	movf	??i2_Byte_SetBit+1,w,c
 16843  012D2C  12DF               	iorwf	indf2,f,c
 16844  012D2E  0012               	return		;funcret
 16845  012D30                     __end_ofi2_Byte_SetBit:
 16846                           	opt stack 0
 16847                           tosu	equ	0xFFF
 16848                           tosh	equ	0xFFE
 16849                           tosl	equ	0xFFD
 16850                           pclatu	equ	0xFFB
 16851                           pclath	equ	0xFFA
 16852                           tblptru	equ	0xFF8
 16853                           tblptrh	equ	0xFF7
 16854                           tblptrl	equ	0xFF6
 16855                           tablat	equ	0xFF5
 16856                           prodh	equ	0xFF4
 16857                           prodl	equ	0xFF3
 16858                           intcon	equ	0xFF2
 16859                           indf0	equ	0xFEF
 16860                           postinc0	equ	0xFEE
 16861                           fsr0h	equ	0xFEA
 16862                           fsr0l	equ	0xFE9
 16863                           wreg	equ	0xFE8
 16864                           indf1	equ	0xFE7
 16865                           postdec1	equ	0xFE5
 16866                           fsr1h	equ	0xFE2
 16867                           fsr1l	equ	0xFE1
 16868                           indf2	equ	0xFDF
 16869                           postinc2	equ	0xFDE
 16870                           postdec2	equ	0xFDD
 16871                           plusw2	equ	0xFDB
 16872                           fsr2h	equ	0xFDA
 16873                           fsr2l	equ	0xFD9
 16874                           status	equ	0xFD8
 16875                           
 16876 ;; *************** function i2_MXK_SwitchTo *****************
 16877 ;; Defined at:
 16878 ;;		line 105 in file "Library/MXK.c"
 16879 ;; Parameters:    Size  Location     Type
 16880 ;;  pModule         1    wreg     enum E6927
 16881 ;; Auto vars:     Size  Location     Type
 16882 ;;  pModule         1    7[COMRAM] enum E6927
 16883 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 16884 ;; Return value:  Size  Location     Type
 16885 ;;                  1    wreg      unsigned char 
 16886 ;; Registers used:
 16887 ;;		wreg, status,2, status,0, cstack
 16888 ;; Tracked objects:
 16889 ;;		On entry : 0/0
 16890 ;;		On exit  : 0/0
 16891 ;;		Unchanged: 0/0
 16892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16894 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16897 ;;Total ram usage:        2 bytes
 16898 ;; Hardware stack levels used:    1
 16899 ;; Hardware stack levels required when called:    1
 16900 ;; This function calls:
 16901 ;;		i2_delay_us
 16902 ;; This function is called by:
 16903 ;;		i2_Motor_Step
 16904 ;; This function uses a non-reentrant model
 16905 ;;
 16906                           
 16907                           	psect	text96
 16908  012FD0                     __ptext96:
 16909                           	opt stack 0
 16910  012FD0                     i2_MXK_SwitchTo:
 16911                           	opt stack 15
 16912                           
 16913                           ;incstack = 0
 16914                           ;i2MXK_SwitchTo@pModule stored from wreg
 16915  012FD0  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 16916                           
 16917                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 16918  012FD2  5086               	movf	3974,w,c	;volatile
 16919  012FD4  0B0F               	andlw	15
 16920  012FD6  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 16921                           
 16922                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 16923  012FD8  504A               	movf	_Bus_State,w,c
 16924  012FDA  A4D8               	btfss	status,2,c
 16925  012FDC  D002               	goto	i2l1730
 16926                           
 16927                           ;MXK.c: 110: return 0;
 16928  012FDE  0E00               	movlw	0
 16929  012FE0  0012               	return	
 16930  012FE2                     i2l1730:
 16931                           
 16932                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 16933  012FE2  0E00               	movlw	0
 16934  012FE4  6E4A               	movwf	_Bus_State,c
 16935                           
 16936                           ;MXK.c: 114: if (CUR != pModule)
 16937  012FE6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 16938  012FE8  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 16939  012FEA  B4D8               	btfsc	status,2,c
 16940  012FEC  D00A               	goto	i2l1732
 16941                           
 16942                           ;MXK.c: 115: {
 16943                           ;MXK.c: 116: PORTG &= ~(0xF);
 16944  012FEE  0EF0               	movlw	240
 16945  012FF0  1686               	andwf	3974,f,c	;volatile
 16946                           
 16947                           ;MXK.c: 117: PORTG |= pModule;
 16948  012FF2  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 16949  012FF4  1286               	iorwf	3974,f,c	;volatile
 16950                           
 16951                           ;MXK.c: 120: delay_us(10);
 16952  012FF6  0E00               	movlw	0
 16953  012FF8  6E02               	movwf	i2delay_us@us+1,c
 16954  012FFA  0E0A               	movlw	10
 16955  012FFC  6E01               	movwf	i2delay_us@us,c
 16956  012FFE  EC6B  F097         	call	i2_delay_us	;wreg free
 16957  013002                     i2l1732:
 16958                           
 16959                           ;MXK.c: 121: }
 16960                           ;MXK.c: 122: return 1;
 16961  013002  0E01               	movlw	1
 16962  013004  0012               	return	
 16963  013006                     __end_ofi2_MXK_SwitchTo:
 16964                           	opt stack 0
 16965                           tosu	equ	0xFFF
 16966                           tosh	equ	0xFFE
 16967                           tosl	equ	0xFFD
 16968                           pclatu	equ	0xFFB
 16969                           pclath	equ	0xFFA
 16970                           tblptru	equ	0xFF8
 16971                           tblptrh	equ	0xFF7
 16972                           tblptrl	equ	0xFF6
 16973                           tablat	equ	0xFF5
 16974                           prodh	equ	0xFF4
 16975                           prodl	equ	0xFF3
 16976                           intcon	equ	0xFF2
 16977                           indf0	equ	0xFEF
 16978                           postinc0	equ	0xFEE
 16979                           fsr0h	equ	0xFEA
 16980                           fsr0l	equ	0xFE9
 16981                           wreg	equ	0xFE8
 16982                           indf1	equ	0xFE7
 16983                           postdec1	equ	0xFE5
 16984                           fsr1h	equ	0xFE2
 16985                           fsr1l	equ	0xFE1
 16986                           indf2	equ	0xFDF
 16987                           postinc2	equ	0xFDE
 16988                           postdec2	equ	0xFDD
 16989                           plusw2	equ	0xFDB
 16990                           fsr2h	equ	0xFDA
 16991                           fsr2l	equ	0xFD9
 16992                           status	equ	0xFD8
 16993                           
 16994 ;; *************** function i2_delay_us *****************
 16995 ;; Defined at:
 16996 ;;		line 255 in file "Library/Types.c"
 16997 ;; Parameters:    Size  Location     Type
 16998 ;;  us              2    0[COMRAM] unsigned short 
 16999 ;; Auto vars:     Size  Location     Type
 17000 ;;  delay_us        4    2[COMRAM] unsigned long 
 17001 ;; Return value:  Size  Location     Type
 17002 ;;                  1    wreg      void 
 17003 ;; Registers used:
 17004 ;;		wreg, status,2, status,0
 17005 ;; Tracked objects:
 17006 ;;		On entry : 0/0
 17007 ;;		On exit  : 0/0
 17008 ;;		Unchanged: 0/0
 17009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17011 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17013 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17014 ;;Total ram usage:        6 bytes
 17015 ;; Hardware stack levels used:    1
 17016 ;; This function calls:
 17017 ;;		Nothing
 17018 ;; This function is called by:
 17019 ;;		i2_MXK_SwitchTo
 17020 ;; This function uses a non-reentrant model
 17021 ;;
 17022                           
 17023                           	psect	text97
 17024  012ED6                     __ptext97:
 17025                           	opt stack 0
 17026  012ED6                     i2_delay_us:
 17027                           	opt stack 15
 17028                           
 17029                           ;Types.c: 256: unsigned long u;
 17030                           ;Types.c: 257: while (us--) {
 17031                           
 17032                           ;incstack = 0
 17033  012ED6  D016               	goto	i2u423_40
 17034  012ED8                     i2l8220:
 17035                           
 17036                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17037  012ED8  0E00               	movlw	0
 17038  012EDA  6E03               	movwf	i2delay_us@u,c
 17039  012EDC  0E00               	movlw	0
 17040  012EDE  6E04               	movwf	i2delay_us@u+1,c
 17041  012EE0  0E00               	movlw	0
 17042  012EE2  6E05               	movwf	i2delay_us@u+2,c
 17043  012EE4  0E00               	movlw	0
 17044  012EE6  6E06               	movwf	i2delay_us@u+3,c
 17045  012EE8                     i2l8222:
 17046  012EE8  5003               	movf	i2delay_us@u,w,c
 17047  012EEA  1004               	iorwf	i2delay_us@u+1,w,c
 17048  012EEC  1005               	iorwf	i2delay_us@u+2,w,c
 17049  012EEE  1006               	iorwf	i2delay_us@u+3,w,c
 17050  012EF0  A4D8               	btfss	status,2,c
 17051  012EF2  D008               	goto	i2u423_40
 17052  012EF4  F000               	nop		; ;# 
 17053  012EF6  0E01               	movlw	1
 17054  012EF8  2603               	addwf	i2delay_us@u,f,c
 17055  012EFA  0E00               	movlw	0
 17056  012EFC  2204               	addwfc	i2delay_us@u+1,f,c
 17057  012EFE  2205               	addwfc	i2delay_us@u+2,f,c
 17058  012F00  2206               	addwfc	i2delay_us@u+3,f,c
 17059  012F02  D7F2               	goto	i2l8222
 17060  012F04                     i2u423_40:
 17061  012F04  0601               	decf	i2delay_us@us,f,c
 17062  012F06  A0D8               	btfss	status,0,c
 17063  012F08  0602               	decf	i2delay_us@us+1,f,c
 17064  012F0A  2801               	incf	i2delay_us@us,w,c
 17065  012F0C  E1E5               	bnz	i2l8220
 17066  012F0E  2802               	incf	i2delay_us@us+1,w,c
 17067  012F10  B4D8               	btfsc	status,2,c
 17068  012F12  0012               	return	
 17069  012F14  D7E1               	goto	i2l832
 17070  012F16                     __end_ofi2_delay_us:
 17071                           	opt stack 0
 17072                           tosu	equ	0xFFF
 17073                           tosh	equ	0xFFE
 17074                           tosl	equ	0xFFD
 17075                           pclatu	equ	0xFFB
 17076                           pclath	equ	0xFFA
 17077                           tblptru	equ	0xFF8
 17078                           tblptrh	equ	0xFF7
 17079                           tblptrl	equ	0xFF6
 17080                           tablat	equ	0xFF5
 17081                           prodh	equ	0xFF4
 17082                           prodl	equ	0xFF3
 17083                           intcon	equ	0xFF2
 17084                           indf0	equ	0xFEF
 17085                           postinc0	equ	0xFEE
 17086                           fsr0h	equ	0xFEA
 17087                           fsr0l	equ	0xFE9
 17088                           wreg	equ	0xFE8
 17089                           indf1	equ	0xFE7
 17090                           postdec1	equ	0xFE5
 17091                           fsr1h	equ	0xFE2
 17092                           fsr1l	equ	0xFE1
 17093                           indf2	equ	0xFDF
 17094                           postinc2	equ	0xFDE
 17095                           postdec2	equ	0xFDD
 17096                           plusw2	equ	0xFDB
 17097                           fsr2h	equ	0xFDA
 17098                           fsr2l	equ	0xFD9
 17099                           status	equ	0xFD8
 17100                           
 17101 ;; *************** function i2_MXK_Release *****************
 17102 ;; Defined at:
 17103 ;;		line 130 in file "Library/MXK.c"
 17104 ;; Parameters:    Size  Location     Type
 17105 ;;		None
 17106 ;; Auto vars:     Size  Location     Type
 17107 ;;		None
 17108 ;; Return value:  Size  Location     Type
 17109 ;;                  1    wreg      unsigned char 
 17110 ;; Registers used:
 17111 ;;		wreg, status,2, status,0
 17112 ;; Tracked objects:
 17113 ;;		On entry : 0/0
 17114 ;;		On exit  : 0/0
 17115 ;;		Unchanged: 0/0
 17116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17121 ;;Total ram usage:        0 bytes
 17122 ;; Hardware stack levels used:    1
 17123 ;; This function calls:
 17124 ;;		Nothing
 17125 ;; This function is called by:
 17126 ;;		i2_Motor_Step
 17127 ;; This function uses a non-reentrant model
 17128 ;;
 17129                           
 17130                           	psect	text98
 17131  0133CE                     __ptext98:
 17132                           	opt stack 0
 17133  0133CE                     i2_MXK_Release:
 17134                           	opt stack 16
 17135                           
 17136                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17137                           
 17138                           ;incstack = 0
 17139  0133CE  0E01               	movlw	1
 17140  0133D0  6E4A               	movwf	_Bus_State,c
 17141                           
 17142                           ;MXK.c: 135: return 1;
 17143                           ;	Return value of i2_MXK_Release is never used
 17144  0133D2  0012               	return	
 17145  0133D4                     __end_ofi2_MXK_Release:
 17146                           	opt stack 0
 17147                           tosu	equ	0xFFF
 17148                           tosh	equ	0xFFE
 17149                           tosl	equ	0xFFD
 17150                           pclatu	equ	0xFFB
 17151                           pclath	equ	0xFFA
 17152                           tblptru	equ	0xFF8
 17153                           tblptrh	equ	0xFF7
 17154                           tblptrl	equ	0xFF6
 17155                           tablat	equ	0xFF5
 17156                           prodh	equ	0xFF4
 17157                           prodl	equ	0xFF3
 17158                           intcon	equ	0xFF2
 17159                           indf0	equ	0xFEF
 17160                           postinc0	equ	0xFEE
 17161                           fsr0h	equ	0xFEA
 17162                           fsr0l	equ	0xFE9
 17163                           wreg	equ	0xFE8
 17164                           indf1	equ	0xFE7
 17165                           postdec1	equ	0xFE5
 17166                           fsr1h	equ	0xFE2
 17167                           fsr1l	equ	0xFE1
 17168                           indf2	equ	0xFDF
 17169                           postinc2	equ	0xFDE
 17170                           postdec2	equ	0xFDD
 17171                           plusw2	equ	0xFDB
 17172                           fsr2h	equ	0xFDA
 17173                           fsr2l	equ	0xFD9
 17174                           status	equ	0xFD8
 17175                           
 17176 ;; *************** function i2_MXK_Queue *****************
 17177 ;; Defined at:
 17178 ;;		line 144 in file "Library/MXK.c"
 17179 ;; Parameters:    Size  Location     Type
 17180 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 17181 ;;		 -> Absolute function(1), Motor_Step(1), 
 17182 ;; Auto vars:     Size  Location     Type
 17183 ;;		None
 17184 ;; Return value:  Size  Location     Type
 17185 ;;                  1    wreg      void 
 17186 ;; Registers used:
 17187 ;;		wreg, status,2, status,0
 17188 ;; Tracked objects:
 17189 ;;		On entry : 0/0
 17190 ;;		On exit  : 0/0
 17191 ;;		Unchanged: 0/0
 17192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17193 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17197 ;;Total ram usage:        3 bytes
 17198 ;; Hardware stack levels used:    1
 17199 ;; This function calls:
 17200 ;;		Nothing
 17201 ;; This function is called by:
 17202 ;;		i2_Motor_Step
 17203 ;; This function uses a non-reentrant model
 17204 ;;
 17205                           
 17206                           	psect	text99
 17207  013354                     __ptext99:
 17208                           	opt stack 0
 17209  013354                     i2_MXK_Queue:
 17210                           	opt stack 16
 17211                           
 17212                           ;MXK.c: 146: lQueue = pCallback;
 17213                           
 17214                           ;incstack = 0
 17215  013354  C001  F067         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 17216  013358  C002  F068         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17217  01335C  C003  F069         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17218  013360  0012               	return		;funcret
 17219  013362                     __end_ofi2_MXK_Queue:
 17220                           	opt stack 0
 17221                           tosu	equ	0xFFF
 17222                           tosh	equ	0xFFE
 17223                           tosl	equ	0xFFD
 17224                           pclatu	equ	0xFFB
 17225                           pclath	equ	0xFFA
 17226                           tblptru	equ	0xFF8
 17227                           tblptrh	equ	0xFF7
 17228                           tblptrl	equ	0xFF6
 17229                           tablat	equ	0xFF5
 17230                           prodh	equ	0xFF4
 17231                           prodl	equ	0xFF3
 17232                           intcon	equ	0xFF2
 17233                           indf0	equ	0xFEF
 17234                           postinc0	equ	0xFEE
 17235                           fsr0h	equ	0xFEA
 17236                           fsr0l	equ	0xFE9
 17237                           wreg	equ	0xFE8
 17238                           indf1	equ	0xFE7
 17239                           postdec1	equ	0xFE5
 17240                           fsr1h	equ	0xFE2
 17241                           fsr1l	equ	0xFE1
 17242                           indf2	equ	0xFDF
 17243                           postinc2	equ	0xFDE
 17244                           postdec2	equ	0xFDD
 17245                           plusw2	equ	0xFDB
 17246                           fsr2h	equ	0xFDA
 17247                           fsr2l	equ	0xFD9
 17248                           status	equ	0xFD8
 17249                           tosu	equ	0xFFF
 17250                           tosh	equ	0xFFE
 17251                           tosl	equ	0xFFD
 17252                           pclatu	equ	0xFFB
 17253                           pclath	equ	0xFFA
 17254                           tblptru	equ	0xFF8
 17255                           tblptrh	equ	0xFF7
 17256                           tblptrl	equ	0xFF6
 17257                           tablat	equ	0xFF5
 17258                           prodh	equ	0xFF4
 17259                           prodl	equ	0xFF3
 17260                           intcon	equ	0xFF2
 17261                           indf0	equ	0xFEF
 17262                           postinc0	equ	0xFEE
 17263                           fsr0h	equ	0xFEA
 17264                           fsr0l	equ	0xFE9
 17265                           wreg	equ	0xFE8
 17266                           indf1	equ	0xFE7
 17267                           postdec1	equ	0xFE5
 17268                           fsr1h	equ	0xFE2
 17269                           fsr1l	equ	0xFE1
 17270                           indf2	equ	0xFDF
 17271                           postinc2	equ	0xFDE
 17272                           postdec2	equ	0xFDD
 17273                           plusw2	equ	0xFDB
 17274                           fsr2h	equ	0xFDA
 17275                           fsr2l	equ	0xFD9
 17276                           status	equ	0xFD8
 17277                           
 17278                           	psect	text100
 17279  000000                     __ptext100:
 17280                           	opt stack 0
 17281                           tosu	equ	0xFFF
 17282                           tosh	equ	0xFFE
 17283                           tosl	equ	0xFFD
 17284                           pclatu	equ	0xFFB
 17285                           pclath	equ	0xFFA
 17286                           tblptru	equ	0xFF8
 17287                           tblptrh	equ	0xFF7
 17288                           tblptrl	equ	0xFF6
 17289                           tablat	equ	0xFF5
 17290                           prodh	equ	0xFF4
 17291                           prodl	equ	0xFF3
 17292                           intcon	equ	0xFF2
 17293                           indf0	equ	0xFEF
 17294                           postinc0	equ	0xFEE
 17295                           fsr0h	equ	0xFEA
 17296                           fsr0l	equ	0xFE9
 17297                           wreg	equ	0xFE8
 17298                           indf1	equ	0xFE7
 17299                           postdec1	equ	0xFE5
 17300                           fsr1h	equ	0xFE2
 17301                           fsr1l	equ	0xFE1
 17302                           indf2	equ	0xFDF
 17303                           postinc2	equ	0xFDE
 17304                           postdec2	equ	0xFDD
 17305                           plusw2	equ	0xFDB
 17306                           fsr2h	equ	0xFDA
 17307                           fsr2l	equ	0xFD9
 17308                           status	equ	0xFD8
 17309                           
 17310                           	psect	rparam
 17311  0000                     tosu	equ	0xFFF
 17312                           tosh	equ	0xFFE
 17313                           tosl	equ	0xFFD
 17314                           pclatu	equ	0xFFB
 17315                           pclath	equ	0xFFA
 17316                           tblptru	equ	0xFF8
 17317                           tblptrh	equ	0xFF7
 17318                           tblptrl	equ	0xFF6
 17319                           tablat	equ	0xFF5
 17320                           prodh	equ	0xFF4
 17321                           prodl	equ	0xFF3
 17322                           intcon	equ	0xFF2
 17323                           indf0	equ	0xFEF
 17324                           postinc0	equ	0xFEE
 17325                           fsr0h	equ	0xFEA
 17326                           fsr0l	equ	0xFE9
 17327                           wreg	equ	0xFE8
 17328                           indf1	equ	0xFE7
 17329                           postdec1	equ	0xFE5
 17330                           fsr1h	equ	0xFE2
 17331                           fsr1l	equ	0xFE1
 17332                           indf2	equ	0xFDF
 17333                           postinc2	equ	0xFDE
 17334                           postdec2	equ	0xFDD
 17335                           plusw2	equ	0xFDB
 17336                           fsr2h	equ	0xFDA
 17337                           fsr2l	equ	0xFD9
 17338                           status	equ	0xFD8
 17339                           
 17340                           	psect	temp
 17341  000051                     btemp:
 17342                           	opt stack 0
 17343  000051                     	ds	1
 17344  0000                     int$flags	set	btemp
 17345  0000                     wtemp6	set	btemp+1
 17346                           tosu	equ	0xFFF
 17347                           tosh	equ	0xFFE
 17348                           tosl	equ	0xFFD
 17349                           pclatu	equ	0xFFB
 17350                           pclath	equ	0xFFA
 17351                           tblptru	equ	0xFF8
 17352                           tblptrh	equ	0xFF7
 17353                           tblptrl	equ	0xFF6
 17354                           tablat	equ	0xFF5
 17355                           prodh	equ	0xFF4
 17356                           prodl	equ	0xFF3
 17357                           intcon	equ	0xFF2
 17358                           indf0	equ	0xFEF
 17359                           postinc0	equ	0xFEE
 17360                           fsr0h	equ	0xFEA
 17361                           fsr0l	equ	0xFE9
 17362                           wreg	equ	0xFE8
 17363                           indf1	equ	0xFE7
 17364                           postdec1	equ	0xFE5
 17365                           fsr1h	equ	0xFE2
 17366                           fsr1l	equ	0xFE1
 17367                           indf2	equ	0xFDF
 17368                           postinc2	equ	0xFDE
 17369                           postdec2	equ	0xFDD
 17370                           plusw2	equ	0xFDB
 17371                           fsr2h	equ	0xFDA
 17372                           fsr2l	equ	0xFD9
 17373                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    720
    Data        231
    BSS         910
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     60     160
    BANK1           256     15     249
    BANK2           256      0     170
    BANK3           256      0     198
    BANK4           256      0      99
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK0[7]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK2[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK0[5]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _init->_HMI_Init
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  997640
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  997640
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362616
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              4 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      2     2      0
                                              0 BANK1      4     1      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291428
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262117
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94741
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1622
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             13 BANK1      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2     462
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      63      14       38.7%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C6      11       77.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      AA       9       66.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3BC      12        0.0%
DATA                 0      0     4E8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Sep 26 15:07:33 2017

                   i2_Timer0_Stop 33C8                  SPI_Init@pChannel 00ED  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 1880  
                               _A 004C                                 l8 1B82  
                               _a 004D                                 _i 0037  
                               _j 0036                                 _l 004F  
                               _u 0085                                 _w 0050  
             _irobot_led_power_on 3276                                l90 144A  
                              l85 1346                                l87 13B4  
                              l89 1420                __size_of_ADC_Start 0084  
                   _HMI_DIPSwitch 000000                  i2_Timer0_Restart 337A  
            ADC_ClockDivision@reg 00BD                               l120 23C0  
                             l121 23D6                               l122 23EC  
                             l220 2AC8                               l117 2402  
                             l221 2A8C                               l118 23AA  
                             l230 2C66                               l222 2AD8  
                             l223 2AAA                       ?_LED_Toggle 0001  
                             l234 2DAE                               l235 2D7E  
                             l227 2C82                               l403 115A  
                             l412 0FD4                               l228 2C4A  
                             l340 21B4                               l404 10FA  
                             l421 0F68                               l413 0E6A  
                             l237 2D96                               l341 21C2  
                             l405 118A                               l414 0FF0  
                             l430 1CEC                               l350 22BC  
                             l342 21D0                               l510 0A36  
                             l406 1112                               l415 0E90  
                             l351 224C                               l343 21DE  
                             l511 0B46                               l407 112A  
                             l600 000C                               l432 1D16  
                             l344 21EC                               l512 0A58  
                             l408 1142                               l417 0EFC  
                             l601 01A0                               l433 1D46  
                             l353 225A                               l337 2216  
                             l345 21FA                               l610 0228  
                             l602 003E                               l354 2268  
                             l346 2208                               l338 21A6  
                             l370 2146                               l611 0276  
                             l603 01B2                               l427 1D70  
                             l355 2276                               l363 2170  
                             l371 2154                               l531 0774  
                             l612 02C4                               l604 00EC  
                             l356 2284                               l372 2162  
                             l364 2100                               l532 0798  
                             l516 0AA0                               l357 2292  
                             l509 0B2A                               l614 03A6  
                             l358 22A0                               l366 210E  
                             l526 07B8                               l615 039E  
                             l607 0312                               l359 22AE  
                             l367 211C                               l519 0AE8  
                             l616 03B8                               l608 01DA  
                             l368 212A                               l528 07D6  
                             l393 2B3C                               l617 03A2  
                             l609 0330                               l369 2138  
                             l529 0754                               l483 0896  
                             l732 2344                               l476 096E  
                             l733 2338                               l389 2A1C  
                             l477 07E0                               l397 2D72  
                             l726 1E7C                               l478 098A  
                             l486 0902                               l654 3100  
                             l727 1E70                               l479 082A  
                             l655 30F8                               l824 2950  
                             l832 2BF4                               l673 308A  
                             l657 30FC                               l681 288A  
                             l819 262C                               l684 28A0  
                             l781 2FBE                               l597 001A  
                             l598 0002                               l678 28C6  
                             l686 28B0                               l599 002A  
                             l679 287A                               l776 2E7E  
                             l976 24C2                               l978 24D2  
                             _PR2 000FCB                               _val 006F  
                 __end_of_ADC_Off 33B0                      _Word_GetPair 2F92  
                             prod 000FF3               MXK_SwitchTo@pModule 00C3  
      __end_of_ADC_ConversionTime 2E08                               tosl 000FFD  
                             wreg 000FE8                        _TXSTA1bits 000FAD  
      __size_of_ADC_ClockDivision 008A                        i2_delay_us 2ED6  
            Port_Set@TypeRequired 00DE             Port_SetPinType@Output 00E6  
                 Port_SetPin@Type 00CF                   Port_SetPin@pPin 00CD  
            ?_irobot_led_power_on 0001                     ?_Byte_GetPair 00C5  
                 __end_of_LED_Set 2C94           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 1FAA                      _Word_SetPair 2E4E  
                   ?_Byte_GetZone 00BC                              l1300 2444  
                            l1301 2448                              l1302 2452  
                            l1303 2460                              l1313 2DE8  
                            l1153 0E50                              l1254 32EC  
                            l2118 293A                              l2119 28FC  
                            l1280 254C                              l2144 2B7A  
                            l1283 25AE                              l1276 2534  
                            l1294 2468                              l1630 17C6  
                            l1295 242E                              l1631 1822  
                            l1296 2492                              l1632 1806  
                            l1297 2438                              l1298 243C  
                            l1730 2EAA                              l1299 2440  
                            l1627 186E                              l1724 2F60  
                            l1732 2ED2                              l1628 1864  
                            l1629 17E4                              l1726 2F8E  
                            l1735 32AA                              l2367 2080  
                            l2369 20B2                              l2377 33B4  
                            l1827 1666                              l1828 1686  
                            l2750 1DBC                              l1784 14FC  
                            l2753 1E26                              l1785 150A  
                            l2754 1E38                              l1787 1514  
                            l2749 1DCC                    ??_Console_Init 00BC  
           Port_SetPinType@pInput 00E2                              STR_1 FFF9  
                            STR_3 FFFC                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F               __end_of_GetPortPORT 22EC  
                            u7025 044C                              u7035 0464  
                            u7045 047C                              u7055 049E  
                            u6600 230E                              u7320 1190  
                            u7065 061E                              _PIR1 000F9E  
                            _PIR2 000FA1                              u7075 069C  
                            _PIR3 000FA4                              u6620 2374  
                            u7085 06DE                              u7350 2DE2  
                            u7430 1568                              u6607 2304  
                            u7095 0720                              u6704 1EB8  
                            u6640 25C6                              u6800 1DD2  
             __end_of_GetPortTRIS 21A0                              u6705 1EB2  
                            u6625 236E                              u6714 1EEA  
                            u6730 2E3C                              u7290 2BEC  
                            u6715 1EE4                              u7700 252A  
                            u7268 1BEE                              u7620 1458  
                            u7460 17A4                              u9108 2F2A  
                            u9109 2F40                              u7470 17B8  
                            u6735 2E36                              u7384 3020  
                            u7480 17F8                              u7385 301A  
                            u6745 3306                              u6674 2A3E  
                            u6746 3308                              u6675 2A38  
                            u6684 2A70                              u6940 16D2  
                            u6860 298E                              u7580 1344  
                            u6685 2A6A                              u6925 161E  
                            u6970 2C2C                              _SPI1 0174  
                            _SPI2 017F                              _TMR0 000FD6  
                            _gISR 0064                     _iRVirtualWall 007E  
            __size_of_ADC_SetupIO 0032                SPI_MaxSpeed@pInput 00CB  
                   ?_Byte_SetByte 00BC                     ?_Byte_SetPair 00C7  
                 __end_of_SPI_DCS 3098                              _main 33B0  
      irobot_leds@powerLuminosity 00CE                              _maze 0300  
                            _init 2054                              _xPos 0046  
                            _yPos 0044                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00C7                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00BC                              btemp 0051  
                            _zero 004E                  __end_of_ADC_Init 26AA  
                   ??_Byte_SetBit 00C0                __size_of_LCD_Reset 0050  
                            prodh 000FF4                              prodl 000FF3  
                            start 14AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                 Timer0_Init@DIVIDE 00D3  
                 ?_SPI_DisableISR 00BC                     Console_Init@x 00BE  
                   Console_Init@y 00BF                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FFEB              Set_Rotation@rotation 00C2  
                     ?_ISR_Enable 0001                _irobot_init_song_0 3184  
                __end_of_LCD_Fill 2BF2                  __end_of_LCD_Init 1496  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 2AE8  
                    _BAUDCON1bits 000F7E                     ??_Button_Init 00F7  
         GetPortProperties@pInput 00BE                  __end_of_HMI_Init 0E52  
                           l11442 2BC2                             l11292 332E  
                           l10902 1666                             l11446 2BD0  
                           l11482 10F0                             l11820 0E24  
                           l10940 2BF4                             l10846 2950  
                           l10854 298E                             l10942 2C06  
                           l10848 2962                             l11728 13B4  
                           l11738 1458                             l11586 14FC  
                           l11792 24B8                             l11798 24C8  
                           _I2C1T 00A8                             _I2C2T 01C6  
                           ?_main 0001                             ?_init 0001  
                 _Event_DIPSwitch 000000                   __end_of___lldiv 1E4A  
                           _INDEX 0089                             _MASKS FDFB  
                           i2l430 1FC2                             i2l432 1FE8  
                           i2l433 2012                             i2l427 2038  
                           i2l732 26F6                             i2l733 26F0  
                           i2l832 2ED8                             i2l781 30B6  
             ?_irobot_init_song_0 0001                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 00D2  
                  __CFG_FCMEN$OFF 000000                             _PortA 01B2  
                           _PortB 01A8                             _PortC 009E  
                           _PortD 0094                             _PortE 008A  
                           _PortF 01BC                             _PortG 019E  
         __end_of_Port_SetPinType 1012                   _ADC_Initialised 0039  
                  ??_Byte_GetPair 00C8             ??_irobot_led_power_on 00D0  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 00D1  
                  ??_Byte_GetZone 00C1          __size_of_Set_Addr_Window 00AA  
                __end_of_MXK_Init 1324                      ?_eusart_init 0001  
            i2Byte_GetPair@pInput 000A                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 28E4             __end_ofi2_MXK_Release 33D4  
                           pclath 000FFA                             tablat 000FF5  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00BF  
               __end_of_ADC_Start 25B4                    ??_Byte_SetPair 00CB  
                  ??_Byte_SetQuad 00CB                             plusw2 000FDB  
                  ??_Byte_SetZone 00C2                             status 000FD8  
                           wtemp6 0052            __size_of_ADC_Calibrate 0014  
                 _Configure_GPIOs 2808              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003              ??_irobot_init_song_0 00BD  
                  _LCD_Word_Write 31C2               __size_of_LED_Toggle 0048  
                      _Event_NULL 000000       __size_of_Port_CheckPairType 006A  
                    ?_irobot_leds 00CC                      ?_irobot_init 0001  
                 __initialization 1980            irobot_leds@powerColour 00CD  
                    __end_of_main 33B6                      __end_of_init 20FA  
                    SPI_Send9@dat 0077               __end_of_Byte_SetBit 2A86  
                __end_of_InitList FDDB       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 330A                         ??_ADC_Off 00BC  
     __size_of_Port_CheckPortType 0048                            ??_main 00F8  
                          ??_init 00F8                     __activetblptr 000003  
               Port_SetPin@pInput 00CB                 __end_of_LCD_Reset 2CE4  
               Port_SetPin@pValue 00CE                         ??_LED_Set 00D1  
               _MXK_InitDIPSwitch 321C                 GetPortPORT@pInput 00BE  
          Port_CheckPairType@Pin1 00E6            Port_CheckPairType@Pin2 00E7  
               __end_of_LCD_Write 3140                       _GetPortPORT 2246  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 20FA  
      __end_of_PortProperty_Valid 2630                  __end_of_Port_Set 07D8  
                     ?i2_delay_us 0001               __end_of_Button_Init 1C04  
               Word_GetPair@pPair 00CA                ?_MXK_InitDIPSwitch 0001  
                       ??_SPI_DCS 00BE                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 33C2  
          Port_SetQuadType@Output 00F6                            _ANCON0 000FC1  
          Port_SetQuadType@pInput 00F2                            i2l1630 18E6  
                          i2l1631 1932                            i2l1632 191E  
                          i2l1730 2FE2                            i2l1627 196E  
                          i2l1732 3002                            i2l1628 1964  
                          i2l1629 18FC                            i2l1590 145E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
                          i2l8220 2ED8                            i2l8222 2EE8  
                          _RCREG1 000FAF                            _RCSTA1 000FAC  
          __end_of_LCD_Word_Write 31E0                    _Timer0_Restart 336E  
                          _SPBRG1 000FB0               ??_MXK_InitDIPSwitch 00F7  
                          _TXREG1 000FAE                    i2_MXK_SwitchTo 2FD0  
                          _TXSTA1 000FAD                        _Reset_High 31FE  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00D3  
          ADC_SetChannel@pChannel 00BD                  __end_of_delay_ms 29B8  
                    LED_Init@pLED 00E9                  __end_of_delay_us 2C44  
                   ??_Timer0_Init 00CD                     ??_Timer2_Init 00CD  
                   ??_Timer0_Stop 00BC                        _Timer0_ISR 30C8  
               Timer2_Init@DIVIDE 00D6                    __CFG_XINST$OFF 000000  
        __size_of_HMI_InitButtons 0006                        _Motor_Init 1A5A  
      __end_of_load_iRScriptStack 294E                            _iRWall 0083  
                      _Motor_Step 175A     load_iRScriptStack@bytesToLoad 00CA  
                  __CFG_STVREN$ON 000000                            _change 004B  
                          _lMotor 0073                         ??___lldiv 00C4  
                          _lQueue 0067                        _TestButton 0194  
        __end_of_Port_SetQuadType 0A2E          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 002F              __end_of_Console_Init 2530  
               GetPortTRIS@pInput 00BE                __size_of_Reset_Low 001E  
                          clear_0 1A08                            clear_1 1A1A  
                          clear_2 1A26                            clear_3 1A32  
                          clear_4 1A3E                            clear_5 1A4A  
                      Port_Init@i 01EB                        _iRDistance 0138  
               __end_of_MXK_Queue 3354        __end_ofHMI_SetButton@F7213 FE08  
                      _iRBumpLeft 007C                        _iRBumpDrop 0034  
       __end_of_MXK_InitDIPSwitch 323A                     _ADC_Calibrate 32E4  
                      _iRDropLeft 007A                     ?_eusart_putch 0001  
             LCD_Word_Write@value 00C1                      __pdataCOMRAM 0040  
              __size_of_Port_Init 0192                     ??_Port_GetPin 00BF  
        Port_CheckPortType@Output 00F5                         ?_ADC_Init 00C0  
                 ??i2_Port_SetPin 0014                      __mediumconst FD28  
     __end_ofTimer2_Init@PRESCALE FE0B          Port_CheckPortType@pDrive 00F4  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
        Port_CheckPortType@pInput 00F2                     ??_Port_SetPin 00CF  
           Console_MakeField@Fill 0264                  ?_Port_SetPinType 00E2  
                  i2_Word_GetPair 3098           __end_of_Configure_GPIOs 2878  
             irobot_leds@isScript 00CF            __end_of_Timer0_Restart 337A  
                   Set_Rotation@m 00C1                      ?_MXK_Release 0001  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 3006  
                    i2delay_us@us 0001                   ?_LCD_Word_Write 00C1  
                      __accesstop 0060           __end_of__initialization 1A50  
                       ?_LCD_Fill 00C5                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00EE                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 3386                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 00C4                     ___rparam_used 000001  
                     _Byte_SetBit 2A22                     __end_of_MASKS FE04  
                  _PortA_Property FFF7                         LCD_Fill@i 00C7  
                       LCD_Fill@j 00C8               load_iRScriptStack@i 00CB  
                       LCD_Init@i 00F3                    __pcstackCOMRAM 0001  
                  _PortB_Property FFF5               __size_ofi2_delay_us 0040  
                    __pidataBANK0 3390                      __pidataBANK1 3398  
                    __pidataBANK3 1C04               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 3276               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FDDB  
            __end_of_Byte_GetZone 2388                 irobot_leds@LEDBit 00CC  
                  _PortC_Property FFF3               __end_of_Timer0_Init 15FA  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 175A  
             __end_of_Timer0_Stop 33BC                    ?_ADC_Calibrate 0001  
                       ?_SPI_Init 00E9                         ?_SPI_Send 00BC  
                  ??_eusart_putch 00BC                       _Button_Init 1B30  
               Port_SetType@pType 01E4              __end_of_Byte_SetByte 3346  
            __end_of_Byte_SetPair 3162                    _HMI_LeftSwitch 000000  
                  _PortD_Property FFF1              __end_of_Byte_SetQuad 3184  
                    ??_LED_Toggle 00D4        eusart_putch@eusartSendChar 00BC  
            __end_of_Byte_SetZone 1F00                    _HMI_DownSwitch 000000  
                   SPI_Send@pData 00BE                    _PortE_Property FFEF  
                      ??_ADC_Init 00C3            __end_ofi2_Word_GetPair 30C8  
                  _PortF_Property FFED           Port_CheckQuadType@Pair1 00EF  
         Port_CheckQuadType@Pair2 00F0          MXK_BlockSwitchTo@pModule 00C3  
                         ?_ADC_On 0001                   ?_Timer0_Restart 0001  
                  _PortG_Property FFEB                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                      __pbssBANK4 0400               __end_of_Port_GetPin 2E4E  
         Port_CheckQuadType@pQuad 00ED                  ??_SPI_DisableISR 00BE  
                 ?i2_MXK_SwitchTo 0001                 __end_of_Reset_Low 31FE  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00C7  
                      ??_LCD_Init 00F1              __size_of_eusart_init 001E  
             __end_of_Port_SetPin 1D8E            __end_of_PortA_Property FFF9  
irobot_led_power_on@powerOnColour 00D0                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00BC                        ??_LED_Init 00E9  
        ADC_ClockDivision@pDivide 00BC                Byte_SetByte@pValue 00BE  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
              _ADC_ConversionTime 2DC0                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00F7                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00E9            __end_of_PortB_Property FFF7  
               __end_of_Port_Init 11A4                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 00E4                __end_of_LED_Toggle 2DC0  
               Set_Addr_Window@xe 00C2                 Set_Addr_Window@ye 00C3  
               Set_Addr_Window@xs 00C4                 Set_Addr_Window@ys 00C1  
                     ?_Motor_Init 00E9                Byte_SetPair@pInput 00C7  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00CA  
          __end_of_PortC_Property FFF5                Word_GetPair@pInput 00C8  
                  ??_Set_Rotation 00C1                         ?_Port_Set 00CB  
             ?_ADC_ConversionTime 0001                 Port_GetPin@Output 00C1  
                    ??_ISR_Enable 00BC              __size_of_irobot_leds 0058  
            __size_of_irobot_init 000E            __end_of_PortD_Property FFF3  
                         _ADC_AN0 00AF                           _ADC_AN1 01DD  
                         _ADC_AN2 01D8                           _ADC_AN3 01D3  
                      ??_MXK_Init 00F8                 Port_GetPin@pInput 00BC  
                         _ADC_Off 33A8          ADC_ClockDivision@unfound 00BE  
                      ??_SPI_Init 00EF                        ??_SPI_Send 00BF  
               ??_HMI_InitButtons 00BC        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FFF1               Console_Render@F6956 01F1  
                         _COUNTER 0071                           _LED_Set 2C44  
          __end_of_PortF_Property FFEF                       _gBackcolour 0031  
                       _I2C1_Done 0133                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0130                         _I2C1_More 012D  
                       _I2C2_More 012A                         ?_delay_ms 00BC  
                       ?_delay_us 00BC        __end_of_MXK_InitTestButton 3258  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F              ??_ADC_ConversionTime 00BC  
          __end_of_PortG_Property FFED           __size_of_ADC_SetChannel 001C  
                         _SPI_DCS 3068              __size_ofi2_MXK_Queue 000E  
                   ??_ADC_SetupIO 00BC                  ?_Configure_GPIOs 0001  
                 __size_of_ADC_On 0006                  ADC_Init@pChannel 00C2  
            i2Byte_GetZone@Offset 0008                __end_of_ISR_Enable 3390  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 00BC                 Event_TestButton@j 0084  
                      ??_Mode_Set 00BC                    ??_Timer2_Clear 00BC  
                         _Font5x7 FE0B              i2Byte_GetZone@pChunk 0004  
        ADC_ConversionTime@pCount 00BD              i2Byte_GetZone@pInput 0001  
            SPI_DisableISR@pInput 00BC                   Byte_SetBit@pBit 00BE  
            Port_TogglePin@pInput 00D0             __end_ofi2_Byte_SetBit 2D30  
                       _ADC_Start 2530                           __Hparam 0000  
                     _Timer0_Init 1496                       _Timer2_Init 15FA  
                         __Lparam 0000                       _Timer0_Stop 33B6  
           __size_of_Console_Init 0086                           OutSeg@a 003A  
 __end_ofPortProperty_Valid@F6830 FDFB                           _iRAngle 0136  
                   LCD_Write@mode 00BF                        ??_Port_Set 00CE  
                         _Stepper 01CD                     ?_Port_SetType 01E2  
                         _gCursor 0040                           _lBuffer 0463  
                         ___lldiv 1D8E                   ??_ADC_Calibrate 00BC  
                         _bearing 0048                        _currentPos 0029  
                         __pcinit 1980                           __ramtop 1000  
                         __ptext0 33B0                           __ptext1 2054  
                         __ptext2 3276                           __ptext3 2B42  
                         __ptext4 28E4                           __ptext5 3184  
                         __ptext6 331C                           __ptext7 332A  
                         __ptext8 31A4                           __ptext9 1A5A  
                       _T0CONbits 000FD5       __end_of_irobot_led_power_on 3292  
               i2MXK_SwitchTo@CUR 0007                         _T2CONbits 000FCA  
                   LED_Set@pValue 00D0               __size_of_Reset_High 001E  
                    ?_GetPortPORT 00BC                      ?_GetPortTRIS 00BC  
                     _Port_GetPin 2E08                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00B8               LCD_DrawRectangle@p4 00B4  
                    ??i2_delay_us 0003                        ??_delay_ms 00BE  
                      ??_delay_us 00BE                         _DIPSwitch 018A  
             __size_of_Timer0_ISR 002E                       _Port_SetPin 1CCA  
                     _iRBumpRight 007D                         _LCD_Reset 2C94  
             __size_of_Motor_Init 00D6               __size_of_Motor_Step 0126  
                       _LCD_Write 311E                       _iRDropRight 007B  
            __size_of_MXK_Dequeue 003E                        delay_ms@ms 00BC  
            end_of_initialization 1A50               ADC_SetupIO@pChannel 00BE  
                      delay_us@us 00BC                      _Console_Init 24AA  
            __size_of_MXK_Release 001C        __end_of_Port_CheckPairType 2A22  
            __end_of_eusart_putch 3338                _PortProperty_Valid 25B4  
              Byte_SetQuad@pInput 00C7                SPI_MinSpeed@pInput 00CB  
              Byte_SetQuad@pValue 00CA               __end_of_ADC_SetupIO 3038  
           __size_of_Byte_GetPair 001E       __size_of_irobot_init_song_0 0020  
                 ___lldiv@divisor 00C0             __size_of_Byte_GetZone 009C  
                      ?_ADC_Start 00BE                   ___lldiv@counter 00C8  
                  ??_Port_SetType 00F6        __end_of_Port_CheckQuadType 2B42  
                  Port_Init@pPort 01E8                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00CB  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 2D78  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 2F16  
              Button_Init@pInitIO 01E6             Timer0_Init@pFrequency 00C9  
               ?_Port_SetQuadType 00F2                       _gForecolour 00FE  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 00F6                  Byte_GetZone@MASK 00C2  
              _load_iRScriptStack 28E4                         _MXK_Queue 3346  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00BE  
                       _TRISCbits 000F94        load_iRScriptStack@loadByte 00C8  
                 _Set_Addr_Window 1F00                    SPI_Init@pClock 00E9  
                ??_LCD_Word_Write 00C3                    Port_Set@pInput 00CB  
                  SPI_Init@pInput 00EF              ??_PortProperty_Valid 00CF  
               __size_of_ADC_Init 007A                    Port_Set@pValue 00CD  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 2420  
                      ?_LCD_Write 00BF                      _Byte_GetPair 3258  
              HMI_SetButton@F7213 FE04               ?_load_iRScriptStack 00BC  
                    _Byte_GetZone 22EC                     ?_MXK_SwitchTo 0001  
                  __end_of_ADC_On 33C8                    _Port_TogglePin 3038  
                _Event_TestButton 000000              Port_SetPinType@Props 00E7  
         __size_ofi2_Byte_GetPair 001A                      _Byte_SetByte 3338  
                    _Byte_SetPair 3140                   ADC_SetupIO@MASK 00BF  
                    _Byte_SetQuad 3162           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 1E4A              Port_SetPinType@pType 00E5  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00BC  
                   ?_SPI_MaxSpeed 00CB                 __size_of_LCD_Fill 0058  
               __size_of_LCD_Init 0172                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 00CB             __end_ofi2_Timer0_Stop 33CE  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
                   ?i2_Motor_Step 0001              ??_load_iRScriptStack 00C6  
                   __pidataCOMRAM 330A                      ?_Button_Init 01E2  
                       _Bus_State 004A               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 336E  
               __size_of_MXK_Init 0180              __end_of_Timer2_Clear 33A8  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 00C8                  ??_Timer0_Restart 00BC  
              Port_SetType@Output 01E5               start_initialization 1980  
                      ?_MXK_Queue 00BC          PortProperty_Valid@Errors 00D1  
                ??i2_MXK_SwitchTo 0007                Port_SetType@pInput 01E2  
                  _ADC_SetChannel 32AE                        HMI_Init@in 01EF  
           __end_ofi2_Port_SetPin 2054            __end_of_Port_TogglePin 3068  
                   ?_Word_SetPair 00CB                 Byte_SetBit@pInput 00BC  
                        ??_ADC_On 00BC                    ??_MXK_SwitchTo 00C2  
               Byte_SetBit@pValue 00BF       PortProperty_Valid@pPinDrive 00CD  
                     _ADC_SetupIO 3006              MXK_BlockSwitchTo@CUR 00C2  
        PortProperty_Valid@pInput 00CB                     i2_MXK_Release 33CE  
                  SPI_Send@pInput 00BC                      ??_Reset_High 00D0  
        __size_of_Port_SetPinType 01C0                    ??_SPI_MaxSpeed 00CD  
           Port_SetQuadType@pQuad 00F4             Port_SetQuadType@pType 00F5  
                  ??_SPI_MinSpeed 00CD                       ??_ADC_Start 00C0  
                    _HMI_UpSwitch 000000                         _Reset_Low 31E0  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 33BC  
               __size_of_Mode_Set 0012                    ADC_Init@pInput 00C0  
                       _gCharSize 00F8                  Timer2_Init@INDEX 0087  
                       OutSeg@cur 003C                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 00ED                      ??_Motor_Step 00D0  
                       _iRAngleSS 011E                         _iRCliffFL 0081  
                       _iRCliffFR 0080                Byte_SetZone@Offset 00C5  
                       _Port_Init 1012                    _currentPosChar 0033  
                     __pdataBANK0 00F8                       __pdataBANK1 01F1  
                     __pdataBANK3 0300                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00BF                          ?_ADC_Off 0001  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 00BC  
              Byte_SetZone@pValue 00C1                     Mode_Set@pMode 00BC  
         __end_of_Set_Addr_Window 1FAA          Port_CheckQuadType@Output 00F1  
                       _gLineSize 01F5          Port_CheckQuadType@pDrive 00EE  
                  ??_Word_GetPair 00CB          Port_CheckQuadType@pInput 00EB  
                     __pbssBIGRAM 0463            __end_of_ADC_SetChannel 32CA  
                        ?_LED_Set 00D0                       __pbssCOMRAM 0029  
                 ADC_Start@pInput 00BE                __end_of_Reset_High 321C  
                   __pcstackBANK0 00BC                     __pcstackBANK1 01E2  
                  ??_Word_SetPair 00CF                __end_of_Timer0_ISR 30F6  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 00D5  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 0C58  
                        ?_SPI_DCS 00BC             __size_of_eusart_putch 000E  
                 ?_Port_TogglePin 00D0                     ??_eusart_init 00BC  
                     ??_LCD_Write 00C0                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 1B30  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Step 1880  
           Timer2_Init@pFrequency 00C9                    ?i2_MXK_Release 0001  
        Port_CheckPairType@Output 00E8          Port_CheckPairType@pDrive 00E5  
        Port_CheckPairType@pInput 00E2                _MXK_InitTestButton 323A  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00C9  
                    ?_Timer2_Init 00C9                      ?_Timer0_Stop 0001  
                   ??_irobot_leds 00CF                     ??_irobot_init 00BD  
                   _lStepFunction 006A                 Byte_SetPair@pPair 00C9  
                       __pintcode 1408                     __pmediumconst FD28  
                       __ptext100 0000                         _pShiftVal 006D  
                        ?___lldiv 00BC                        ?_Port_Init 01E6  
            Timer0_Init@pCPUClock 00CF               ?_MXK_InitTestButton 0001  
               _GetPortProperties 21A0       __end_ofTimer0_Init@PRESCALE FDEB  
                    _eusart_putch 332A                ?_GetPortProperties 00BC  
           __size_of_Set_Rotation 0098                   ?_ADC_SetChannel 0001  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00BF  
                    ?_Port_GetPin 00BC                          _ADC_Init 2630  
                    ?_Port_SetPin 00CB                   _HMI_RightSwitch 000000  
     __size_of_ADC_ConversionTime 0048               ??_GetPortProperties 00BE  
            ??_MXK_InitTestButton 00E9                Byte_GetPair@pInput 00C5  
         __end_of_HMI_InitButtons 33C2                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 32CA  
                        _LCD_Fill 2B9A                          _LCD_Init 1324  
                        _HMIBoard 013A                    i2_Byte_GetZone 26AA  
                        _LED_Init 2A86                         delay_ms@u 00BE  
                       delay_us@u 00BE                          _HMI_Init 0C58  
              MXK_Queue@pCallback 00BC                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
             __end_of_eusart_init 31C2                          _PIE3bits 000FA3  
        __size_of_Configure_GPIOs 0070                 Byte_SetQuad@pQuad 00C9  
                        i2u420_44 2D1E                          i2u420_45 2D1A  
                        i2u423_40 2F04                          i2u511_40 18C4  
                        i2u512_40 18D8                          i2u513_40 1910  
                        _PIR1bits 000F9E                          i2u355_40 26CC  
                        i2u419_44 2CF8                          i2u419_45 2CF4  
                        i2u355_47 26C2                          i2u357_40 2714  
                        _PIR3bits 000FA4                          i2u357_45 2710  
                        i2u912_48 30E0              __size_of_Byte_SetBit 0064  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000                 Button_Init@pInput 01E2  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 00E6                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 2246  
                        _SSP2STAT 000F6D                      _Set_Rotation 2388  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 2ED6  
              _Port_CheckPairType 29B8                          _MXK_Init 11A4  
                 MXK_SwitchTo@CUR 00C2             __end_of_ADC_Calibrate 32F8  
             __end_of_irobot_leds 2B9A                          _SPI_Init 0000  
             __end_of_irobot_init 332A                          _SPI_Send 2878  
                      _ADCON0bits 000FC2                  __size_of_ADC_Off 0008  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00C1  
            Timer2_Init@pCPUClock 00D2              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 2794               Port_SetPinType@pPin 00E4  
              _Port_CheckQuadType 2AE8                     _MXK_DIPSwitch 000000  
             ?_Port_CheckPairType 00E2              __end_of_SPI_MinSpeed 2808  
                   ??_MXK_Dequeue 00D2                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 2D30  
         PortProperty_Valid@F6830 FDEB              __end_ofi2_Motor_Step 1980  
                 ??i2_MXK_Release 0001      __size_of_irobot_led_power_on 001C  
                       copy_data0 1994                         copy_data1 19B4  
                       copy_data2 19D4                         copy_data3 19F4  
                   ??_MXK_Release 00BC            __end_ofi2_Byte_GetPair 32E4  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00EB            __end_ofi2_Byte_GetZone 2720  
             __end_ofi2_MXK_Queue 3362               ?_Port_CheckPortType 00F2  
                        _InitList FD29        __end_of_irobot_init_song_0 31A4  
            _Motor_Step$intlevel0 1760                          _Mode_Set 32F8  
                    _ISR_Function 1408                      _Timer0_Clear 3362  
                    _Timer2_Clear 33A0              __end_of_Word_GetPair 2FD0  
                        _lCBuffer 0100              ??_Port_CheckPairType 00E6  
                     ??_Reset_Low 00D0                          __Hrparam 0000  
                        __Lrparam 0000                       _mazeConsole 0400  
                 Timer2_Init@RDIV 00CE                          _iRCliffL 0082  
                        _iRCliffR 007F                    LCD_Write@value 00C0  
                        _Port_Set 041E                      OutSeg@segset 003B  
                       rand@screw 0038              __end_of_Word_SetPair 2E94  
                     ??_Port_Init 01E9              ??_Port_CheckQuadType 00EF  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 2F54  
            ??_Port_CheckPortType 00F5                          _lBufferX 003E  
                        _lBufferY 003D               Timer2_Init@PRESCALE FE08  
                 LCD_Fill@pColour 00C5                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0075  
          Byte_GetZone@pChunkSize 00C0            Byte_SetZone@pChunkSize 00C0  
           __size_of_Port_SetType 022A             i2MXK_SwitchTo@pModule 0008  
              Motor_Init@pAddress 00EB                          _delay_ms 294E  
                        _delay_us 2BF2                          _clearall 003F  
                 Port_GetPin@pPin 00BE                          __ptext10 1496  
                        __ptext11 3362                          __ptext20 2246  
                        __ptext12 11A4                          __ptext21 2A86  
                        __ptext13 1012                          __ptext30 2F54  
                        __ptext22 2C44                          __ptext14 0A2E  
                        __ptext31 2BF2                          __ptext23 2F16  
                        __ptext15 2D30                          __ptext40 2808  
                        __ptext32 1324                          __ptext24 175A  
                        __ptext16 041E                          __ptext41 2720  
                        __ptext33 2388                          __ptext25 33B6  
                        __ptext17 3338                          __ptext50 3386  
                        __ptext42 2C94                          __ptext34 2B9A  
                        __ptext26 336E                          __ptext18 20FA  
                        __ptext51 0C58                          __ptext43 294E  
                        __ptext35 1F00                          __ptext27 2E94  
                        __ptext19 21A0                          __ptext60 321C  
                        __ptext52 2794                          __ptext44 31E0  
                        __ptext36 31C2                          __ptext28 3292  
                        __ptext61 33BC                          __ptext53 0000  
                        __ptext45 31FE                          __ptext37 311E  
                        __ptext29 3346                          __ptext70 25B4  
                        __ptext62 323A                          __ptext54 15FA  
                        __ptext46 2D78                          __ptext38 2878  
                        __ptext71 2F92                          __ptext63 0E52  
                        __ptext55 1D8E                          __ptext47 3038  
                        __ptext39 32F8               ??_MXK_BlockSwitchTo 00C2  
                        __ptext80 32AE                          __ptext72 3258  
                        __ptext64 2A22                          __ptext56 33A0  
                        __ptext48 1CCA                          __ptext81 2DC0  
                        __ptext73 22EC                          __ptext65 07D8  
                        __ptext57 30F6                          __ptext49 2E08  
                        __ptext90 337A                          __ptext82 2420  
                        __ptext74 3162                          __ptext66 2E4E  
                        __ptext58 3068                          __ptext91 1FAA  
                        __ptext83 32E4                          __ptext75 1E4A  
                        __ptext67 3140                          __ptext59 1B30  
                        __ptext92 3098                          __ptext84 33C2  
                        __ptext76 24AA                          __ptext68 2AE8  
                        __ptext93 32CA                          __ptext85 33A8  
                        __ptext77 2530                          __ptext69 29B8  
                        __ptext94 26AA                          __ptext78 2630  
                        __ptext95 2CE4                          __ptext87 30C8  
                        __ptext79 3006                          __ptext96 2FD0  
                        __ptext88 1880                          __ptext97 2ED6  
                        __ptext89 33C8                          __ptext98 33CE  
                        __ptext99 3354                      _SSP1CON1bits 000FC6  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                 _ADC_ClockDivision 2420  
                    ?_ADC_SetupIO 0001                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                       _eusart_init 31A4  
                 ?i2_Byte_GetPair 000A                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
                        _gridSize 00FC                ?_ADC_ClockDivision 0001  
             __end_of_MXK_Dequeue 2F54             Button_Init@pThreshold 01E4  
                   __size_of_main 0006                     __size_of_init 00A6  
                        _xPosNext 002D                 Byte_GetPair@pPair 00C7  
                        _yPosNext 002B               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013               __end_of_MXK_Release 32AE  
                  _MXK_TestButton 000000                     i2_Byte_SetBit 2CE4  
             ??_ADC_ClockDivision 00BC                      _iRDistanceSS 0060  
                     _irobot_leds 2B42                       _irobot_init 331C  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 2F92  
            __size_of_Timer0_Init 0164              __size_of_Timer2_Init 0160  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 0A2E                      Port_Set@Type 00E2  
      __size_of_GetPortProperties 00A6                      _iRDropCaster 0079  
     __size_of_load_iRScriptStack 006A                 ??_Configure_GPIOs 00F1  
                    _SSP1STATbits 000FC7                    Timer0_Init@DIV 0126  
                  Timer0_Init@PRE 0088                      _SSP2STATbits 000F6D  
                      _LED_Toggle 2D78              Button_Init@pGetState 01E9  
          PortProperty_Valid@Pair 00E1                  ??_Port_TogglePin 00D3  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 00CE                  Byte_SetZone@MASK 00C6  
                     i2_MXK_Queue 3354         __end_of_ADC_ClockDivision 24AA  
                  Timer2_Init@DIV 0122                    Timer2_Init@PRE 0086  
                Byte_SetZone@pMax 00BE            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 01EC  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                ___lldiv@dividend 00BC                     _iRScriptIndex 0035  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
                   _iRScriptStack 0200             __size_of_MXK_SwitchTo 0042  
                  _SPI_DisableISR 30F6                   Port_Init@pInput 01E6  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 3386  
           __size_of_SPI_MaxSpeed 0074                  ??_ADC_SetChannel 00BC  
                   SPI_DCS@pInput 00BC             __size_of_SPI_MinSpeed 0074  
           __size_ofi2_Motor_Step 0100                  ___lldiv@quotient 00C4  
                   ??_GetPortPORT 00BE                     ??_GetPortTRIS 00BE  
              Word_SetPair@pInput 00CB                Word_SetPair@pValue 00CE  
                Motor_Init@pMotor 00E9                       _MXK_Dequeue 2F16  
                  LED_Toggle@pLED 00D4                  _Port_SetQuadType 07D8  
                     _MXK_Release 3292                      _MXK_SwitchTo 2E94  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 00C3  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00CD  
                 _Port_SetPinType 0E52           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00C4                Byte_GetZone@pChunk 00BF  
              Byte_GetZone@pInput 00BC           __size_ofi2_MXK_SwitchTo 0036  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 311E  
                    _SPI_MaxSpeed 2720                      _SPI_MinSpeed 2794  
              Port_Set@TypeActual 00E0  
