

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Sep 25 17:03:53 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.43
    41                           ; Generated 25/07/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F67J50 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75 ;; Function _HMI_InitButtons is unused but had its address taken
    76  0000                     
    77 ;; Function _HMI_LeftSwitch is unused but had its address taken
    78  0000                     
    79 ;; Function _HMI_RightSwitch is unused but had its address taken
    80  0000                     
    81 ;; Function _HMI_UpSwitch is unused but had its address taken
    82  0000                     
    83 ;; Function _HMI_DownSwitch is unused but had its address taken
    84  0000                     
    85 ;; Function _HMI_DIPSwitch is unused but had its address taken
    86  0000                     
    87 ;; Function _MXK_InitTestButton is unused but had its address taken
    88  0000                     
    89 ;; Function _MXK_TestButton is unused but had its address taken
    90  0000                     
    91 ;; Function _MXK_InitDIPSwitch is unused but had its address taken
    92  0000                     
    93 ;; Function _MXK_DIPSwitch is unused but had its address taken
    94  0000                     
    95 ;; Function _Event_NULL is unused but had its address taken
    96  0000                     
    97 ;; Function _Event_DIPSwitch is unused but had its address taken
    98  0000                     
    99 ;; Function _Event_TestButton is unused but had its address taken
   100  0000                     
   101                           	psect	idataCOMRAM
   102  010446                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _gCursor
   106  010446  0006               	dw	6
   107  010448  0006               	dw	6
   108                           
   109                           ;initializer for _Bus_State
   110  01044A  01                 	db	1
   111                           
   112                           ;initializer for _change
   113  01044B  01                 	db	1
   114                           
   115                           ;initializer for _A
   116  01044C  41                 	db	65
   117                           
   118                           ;initializer for _a
   119  01044D  61                 	db	97
   120                           
   121                           ;initializer for _zero
   122  01044E  30                 	db	48
   123                           
   124                           ;initializer for _l
   125  01044F  80                 	db	128
   126                           
   127                           ;initializer for _w
   128  010450  80                 	db	128
   129                           
   130                           	psect	idataBANK0
   131  01041E                     __pidataBANK0:
   132                           	opt stack 0
   133                           
   134                           ;initializer for Console_Render@F6956
   135  01041E  0006               	dw	6
   136  010420  0006               	dw	6
   137                           
   138                           ;initializer for _gLineSize
   139  010422  0080               	dw	128
   140  010424  0007               	dw	7
   141                           
   142                           ;initializer for _gCharSize
   143  010426  0005               	dw	5
   144  010428  0007               	dw	7
   145                           
   146                           ;initializer for _gForecolour
   147  01042A  FFFF               	dw	65535
   148                           
   149                           	psect	idataBANK1
   150  010406                     __pidataBANK1:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _maze
   154  010406  0000               	dw	0
   155  010408  0001               	dw	1
   156  01040A  0002               	dw	2
   157  01040C  0003               	dw	3
   158  01040E  0004               	dw	4
   159  010410  0005               	dw	5
   160  010412  0006               	dw	6
   161  010414  0007               	dw	7
   162  010416  0008               	dw	8
   163  010418  0009               	dw	9
   164  01041A  000A               	dw	10
   165  01041C  000B               	dw	11
   166                           
   167                           	psect	mediumconst
   168  00FD2E                     __pmediumconst:
   169                           	opt stack 0
   170  00FD2E  00                 	db	0
   171  00FD2F                     _InitList:
   172                           	opt stack 0
   173  00FD2F  1100               	dw	4352
   174  00FD31  0080               	dw	128
   175  00FD33  012C               	dw	300
   176  00FD35  B100               	dw	45312
   177  00FD37  0002               	dw	2
   178  00FD39  0035               	dw	53
   179  00FD3B  0036               	dw	54
   180  00FD3D  B200               	dw	45568
   181  00FD3F  0002               	dw	2
   182  00FD41  0035               	dw	53
   183  00FD43  0036               	dw	54
   184  00FD45  B300               	dw	45824
   185  00FD47  0002               	dw	2
   186  00FD49  0035               	dw	53
   187  00FD4B  0036               	dw	54
   188  00FD4D  0002               	dw	2
   189  00FD4F  0035               	dw	53
   190  00FD51  0036               	dw	54
   191  00FD53  B400               	dw	46080
   192  00FD55  0000               	dw	0
   193  00FD57  C000               	dw	49152
   194  00FD59  00A2               	dw	162
   195  00FD5B  0002               	dw	2
   196  00FD5D  0084               	dw	132
   197  00FD5F  C100               	dw	49408
   198  00FD61  00C5               	dw	197
   199  00FD63  C200               	dw	49664
   200  00FD65  000D               	dw	13
   201  00FD67  0000               	dw	0
   202  00FD69  C300               	dw	49920
   203  00FD6B  008D               	dw	141
   204  00FD6D  002A               	dw	42
   205  00FD6F  C400               	dw	50176
   206  00FD71  008D               	dw	141
   207  00FD73  00EE               	dw	238
   208  00FD75  C500               	dw	50432
   209  00FD77  000A               	dw	10
   210  00FD79  3600               	dw	13824
   211  00FD7B  00C8               	dw	200
   212  00FD7D  E000               	dw	57344
   213  00FD7F  0012               	dw	18
   214  00FD81  001C               	dw	28
   215  00FD83  0010               	dw	16
   216  00FD85  0018               	dw	24
   217  00FD87  0033               	dw	51
   218  00FD89  002C               	dw	44
   219  00FD8B  0025               	dw	37
   220  00FD8D  0028               	dw	40
   221  00FD8F  0028               	dw	40
   222  00FD91  0027               	dw	39
   223  00FD93  002F               	dw	47
   224  00FD95  003C               	dw	60
   225  00FD97  0000               	dw	0
   226  00FD99  0003               	dw	3
   227  00FD9B  0003               	dw	3
   228  00FD9D  0010               	dw	16
   229  00FD9F  0080               	dw	128
   230  00FDA1  0078               	dw	120
   231  00FDA3  E100               	dw	57600
   232  00FDA5  0012               	dw	18
   233  00FDA7  001C               	dw	28
   234  00FDA9  0010               	dw	16
   235  00FDAB  0018               	dw	24
   236  00FDAD  002D               	dw	45
   237  00FDAF  0028               	dw	40
   238  00FDB1  0023               	dw	35
   239  00FDB3  0028               	dw	40
   240  00FDB5  0028               	dw	40
   241  00FDB7  0026               	dw	38
   242  00FDB9  002F               	dw	47
   243  00FDBB  003B               	dw	59
   244  00FDBD  0000               	dw	0
   245  00FDBF  0003               	dw	3
   246  00FDC1  0003               	dw	3
   247  00FDC3  0010               	dw	16
   248  00FDC5  3A00               	dw	14848
   249  00FDC7  0005               	dw	5
   250  00FDC9  2A00               	dw	10752
   251  00FDCB  0000               	dw	0
   252  00FDCD  0002               	dw	2
   253  00FDCF  0000               	dw	0
   254  00FDD1  0081               	dw	129
   255  00FDD3  2B00               	dw	11008
   256  00FDD5  0000               	dw	0
   257  00FDD7  0003               	dw	3
   258  00FDD9  0000               	dw	0
   259  00FDDB  00A2               	dw	162
   260  00FDDD  2900               	dw	10496
   261  00FDDF  2C00               	dw	11264
   262  00FDE1                     __end_of_InitList:
   263                           	opt stack 0
   264  00FDE1                     Timer0_Init@PRESCALE:
   265                           	opt stack 0
   266  00FDE1  0002               	dw	2
   267  00FDE3  0004               	dw	4
   268  00FDE5  0008               	dw	8
   269  00FDE7  0010               	dw	16
   270  00FDE9  0020               	dw	32
   271  00FDEB  0040               	dw	64
   272  00FDED  0080               	dw	128
   273  00FDEF  0100               	dw	256
   274  00FDF1                     __end_ofTimer0_Init@PRESCALE:
   275                           	opt stack 0
   276  00FDF1                     PortProperty_Valid@F6830:
   277                           	opt stack 0
   278  00FDF1  00                 	db	0
   279  00FDF2  01                 	db	1
   280  00FDF3  02                 	db	2
   281  00FDF4  00                 	db	0
   282  00FDF5  01                 	db	1
   283  00FDF6  00                 	db	0
   284  00FDF7  01                 	db	1
   285  00FDF8  00                 	db	0
   286  00FDF9  02                 	db	2
   287  00FDFA  02                 	db	2
   288  00FDFB  00                 	db	0
   289  00FDFC  00                 	db	0
   290  00FDFD  03                 	db	3
   291  00FDFE  03                 	db	3
   292  00FDFF  03                 	db	3
   293  00FE00  00                 	db	0
   294  00FE01                     __end_ofPortProperty_Valid@F6830:
   295                           	opt stack 0
   296  00FE01                     _MASKS:
   297                           	opt stack 0
   298  00FE01  00                 	db	0
   299  00FE02  01                 	db	1
   300  00FE03  03                 	db	3
   301  00FE04  07                 	db	7
   302  00FE05  0F                 	db	15
   303  00FE06  1F                 	db	31
   304  00FE07  3F                 	db	63
   305  00FE08  7F                 	db	127
   306  00FE09  FF                 	db	255
   307  00FE0A                     __end_of_MASKS:
   308                           	opt stack 0
   309  00FE0A                     HMI_SetButton@F7213:
   310                           	opt stack 0
   311  00FE0A  00                 	db	0
   312  00FE0B  02                 	db	2
   313  00FE0C  01                 	db	1
   314  00FE0D  03                 	db	3
   315  00FE0E                     __end_ofHMI_SetButton@F7213:
   316                           	opt stack 0
   317  00FE0E                     Timer2_Init@PRESCALE:
   318                           	opt stack 0
   319  00FE0E  01                 	db	1
   320  00FE0F  04                 	db	4
   321  00FE10  10                 	db	16
   322  00FE11                     __end_ofTimer2_Init@PRESCALE:
   323                           	opt stack 0
   324  00FE11                     _Font5x7:
   325                           	opt stack 0
   326  00FE11  00                 	db	0
   327  00FE12  00                 	db	0
   328  00FE13  00                 	db	0
   329  00FE14  00                 	db	0
   330  00FE15  00                 	db	0
   331  00FE16  00                 	db	0
   332  00FE17  00                 	db	0
   333  00FE18  5F                 	db	95
   334  00FE19  00                 	db	0
   335  00FE1A  00                 	db	0
   336  00FE1B  00                 	db	0
   337  00FE1C  07                 	db	7
   338  00FE1D  00                 	db	0
   339  00FE1E  07                 	db	7
   340  00FE1F  00                 	db	0
   341  00FE20  14                 	db	20
   342  00FE21  7F                 	db	127
   343  00FE22  14                 	db	20
   344  00FE23  7F                 	db	127
   345  00FE24  14                 	db	20
   346  00FE25  24                 	db	36
   347  00FE26  2A                 	db	42
   348  00FE27  7F                 	db	127
   349  00FE28  2A                 	db	42
   350  00FE29  12                 	db	18
   351  00FE2A  23                 	db	35
   352  00FE2B  13                 	db	19
   353  00FE2C  08                 	db	8
   354  00FE2D  64                 	db	100
   355  00FE2E  62                 	db	98
   356  00FE2F  36                 	db	54
   357  00FE30  49                 	db	73
   358  00FE31  55                 	db	85
   359  00FE32  22                 	db	34
   360  00FE33  50                 	db	80
   361  00FE34  00                 	db	0
   362  00FE35  05                 	db	5
   363  00FE36  03                 	db	3
   364  00FE37  00                 	db	0
   365  00FE38  00                 	db	0
   366  00FE39  00                 	db	0
   367  00FE3A  1C                 	db	28
   368  00FE3B  22                 	db	34
   369  00FE3C  41                 	db	65
   370  00FE3D  00                 	db	0
   371  00FE3E  00                 	db	0
   372  00FE3F  41                 	db	65
   373  00FE40  22                 	db	34
   374  00FE41  1C                 	db	28
   375  00FE42  00                 	db	0
   376  00FE43  08                 	db	8
   377  00FE44  2A                 	db	42
   378  00FE45  1C                 	db	28
   379  00FE46  2A                 	db	42
   380  00FE47  08                 	db	8
   381  00FE48  08                 	db	8
   382  00FE49  08                 	db	8
   383  00FE4A  3E                 	db	62
   384  00FE4B  08                 	db	8
   385  00FE4C  08                 	db	8
   386  00FE4D  00                 	db	0
   387  00FE4E  50                 	db	80
   388  00FE4F  30                 	db	48
   389  00FE50  00                 	db	0
   390  00FE51  00                 	db	0
   391  00FE52  08                 	db	8
   392  00FE53  08                 	db	8
   393  00FE54  08                 	db	8
   394  00FE55  08                 	db	8
   395  00FE56  08                 	db	8
   396  00FE57  00                 	db	0
   397  00FE58  60                 	db	96
   398  00FE59  60                 	db	96
   399  00FE5A  00                 	db	0
   400  00FE5B  00                 	db	0
   401  00FE5C  20                 	db	32
   402  00FE5D  10                 	db	16
   403  00FE5E  08                 	db	8
   404  00FE5F  04                 	db	4
   405  00FE60  02                 	db	2
   406  00FE61  3E                 	db	62
   407  00FE62  51                 	db	81
   408  00FE63  49                 	db	73
   409  00FE64  45                 	db	69
   410  00FE65  3E                 	db	62
   411  00FE66  00                 	db	0
   412  00FE67  42                 	db	66
   413  00FE68  7F                 	db	127
   414  00FE69  40                 	db	64
   415  00FE6A  00                 	db	0
   416  00FE6B  42                 	db	66
   417  00FE6C  61                 	db	97
   418  00FE6D  51                 	db	81
   419  00FE6E  49                 	db	73
   420  00FE6F  46                 	db	70
   421  00FE70  21                 	db	33
   422  00FE71  41                 	db	65
   423  00FE72  45                 	db	69
   424  00FE73  4B                 	db	75
   425  00FE74  31                 	db	49
   426  00FE75  18                 	db	24
   427  00FE76  14                 	db	20
   428  00FE77  12                 	db	18
   429  00FE78  7F                 	db	127
   430  00FE79  10                 	db	16
   431  00FE7A  27                 	db	39
   432  00FE7B  45                 	db	69
   433  00FE7C  45                 	db	69
   434  00FE7D  45                 	db	69
   435  00FE7E  39                 	db	57
   436  00FE7F  3C                 	db	60
   437  00FE80  4A                 	db	74
   438  00FE81  49                 	db	73
   439  00FE82  49                 	db	73
   440  00FE83  30                 	db	48
   441  00FE84  01                 	db	1
   442  00FE85  71                 	db	113
   443  00FE86  09                 	db	9
   444  00FE87  05                 	db	5
   445  00FE88  03                 	db	3
   446  00FE89  36                 	db	54
   447  00FE8A  49                 	db	73
   448  00FE8B  49                 	db	73
   449  00FE8C  49                 	db	73
   450  00FE8D  36                 	db	54
   451  00FE8E  06                 	db	6
   452  00FE8F  49                 	db	73
   453  00FE90  49                 	db	73
   454  00FE91  29                 	db	41
   455  00FE92  1E                 	db	30
   456  00FE93  00                 	db	0
   457  00FE94  36                 	db	54
   458  00FE95  36                 	db	54
   459  00FE96  00                 	db	0
   460  00FE97  00                 	db	0
   461  00FE98  00                 	db	0
   462  00FE99  56                 	db	86
   463  00FE9A  36                 	db	54
   464  00FE9B  00                 	db	0
   465  00FE9C  00                 	db	0
   466  00FE9D  00                 	db	0
   467  00FE9E  08                 	db	8
   468  00FE9F  14                 	db	20
   469  00FEA0  22                 	db	34
   470  00FEA1  41                 	db	65
   471  00FEA2  14                 	db	20
   472  00FEA3  14                 	db	20
   473  00FEA4  14                 	db	20
   474  00FEA5  14                 	db	20
   475  00FEA6  14                 	db	20
   476  00FEA7  41                 	db	65
   477  00FEA8  22                 	db	34
   478  00FEA9  14                 	db	20
   479  00FEAA  08                 	db	8
   480  00FEAB  00                 	db	0
   481  00FEAC  02                 	db	2
   482  00FEAD  01                 	db	1
   483  00FEAE  51                 	db	81
   484  00FEAF  09                 	db	9
   485  00FEB0  06                 	db	6
   486  00FEB1  32                 	db	50
   487  00FEB2  49                 	db	73
   488  00FEB3  79                 	db	121
   489  00FEB4  41                 	db	65
   490  00FEB5  3E                 	db	62
   491  00FEB6  7E                 	db	126
   492  00FEB7  11                 	db	17
   493  00FEB8  11                 	db	17
   494  00FEB9  11                 	db	17
   495  00FEBA  7E                 	db	126
   496  00FEBB  7F                 	db	127
   497  00FEBC  49                 	db	73
   498  00FEBD  49                 	db	73
   499  00FEBE  49                 	db	73
   500  00FEBF  36                 	db	54
   501  00FEC0  3E                 	db	62
   502  00FEC1  41                 	db	65
   503  00FEC2  41                 	db	65
   504  00FEC3  41                 	db	65
   505  00FEC4  22                 	db	34
   506  00FEC5  7F                 	db	127
   507  00FEC6  41                 	db	65
   508  00FEC7  41                 	db	65
   509  00FEC8  22                 	db	34
   510  00FEC9  1C                 	db	28
   511  00FECA  7F                 	db	127
   512  00FECB  49                 	db	73
   513  00FECC  49                 	db	73
   514  00FECD  49                 	db	73
   515  00FECE  41                 	db	65
   516  00FECF  7F                 	db	127
   517  00FED0  09                 	db	9
   518  00FED1  09                 	db	9
   519  00FED2  01                 	db	1
   520  00FED3  01                 	db	1
   521  00FED4  3E                 	db	62
   522  00FED5  41                 	db	65
   523  00FED6  41                 	db	65
   524  00FED7  51                 	db	81
   525  00FED8  32                 	db	50
   526  00FED9  7F                 	db	127
   527  00FEDA  08                 	db	8
   528  00FEDB  08                 	db	8
   529  00FEDC  08                 	db	8
   530  00FEDD  7F                 	db	127
   531  00FEDE  00                 	db	0
   532  00FEDF  41                 	db	65
   533  00FEE0  7F                 	db	127
   534  00FEE1  41                 	db	65
   535  00FEE2  00                 	db	0
   536  00FEE3  20                 	db	32
   537  00FEE4  40                 	db	64
   538  00FEE5  41                 	db	65
   539  00FEE6  3F                 	db	63
   540  00FEE7  01                 	db	1
   541  00FEE8  7F                 	db	127
   542  00FEE9  08                 	db	8
   543  00FEEA  14                 	db	20
   544  00FEEB  22                 	db	34
   545  00FEEC  41                 	db	65
   546  00FEED  7F                 	db	127
   547  00FEEE  40                 	db	64
   548  00FEEF  40                 	db	64
   549  00FEF0  40                 	db	64
   550  00FEF1  40                 	db	64
   551  00FEF2  7F                 	db	127
   552  00FEF3  02                 	db	2
   553  00FEF4  04                 	db	4
   554  00FEF5  02                 	db	2
   555  00FEF6  7F                 	db	127
   556  00FEF7  7F                 	db	127
   557  00FEF8  04                 	db	4
   558  00FEF9  08                 	db	8
   559  00FEFA  10                 	db	16
   560  00FEFB  7F                 	db	127
   561  00FEFC  3E                 	db	62
   562  00FEFD  41                 	db	65
   563  00FEFE  41                 	db	65
   564  00FEFF  41                 	db	65
   565  00FF00  3E                 	db	62
   566  00FF01  7F                 	db	127
   567  00FF02  09                 	db	9
   568  00FF03  09                 	db	9
   569  00FF04  09                 	db	9
   570  00FF05  06                 	db	6
   571  00FF06  3E                 	db	62
   572  00FF07  41                 	db	65
   573  00FF08  51                 	db	81
   574  00FF09  21                 	db	33
   575  00FF0A  5E                 	db	94
   576  00FF0B  7F                 	db	127
   577  00FF0C  09                 	db	9
   578  00FF0D  19                 	db	25
   579  00FF0E  29                 	db	41
   580  00FF0F  46                 	db	70
   581  00FF10  46                 	db	70
   582  00FF11  49                 	db	73
   583  00FF12  49                 	db	73
   584  00FF13  49                 	db	73
   585  00FF14  31                 	db	49
   586  00FF15  01                 	db	1
   587  00FF16  01                 	db	1
   588  00FF17  7F                 	db	127
   589  00FF18  01                 	db	1
   590  00FF19  01                 	db	1
   591  00FF1A  3F                 	db	63
   592  00FF1B  40                 	db	64
   593  00FF1C  40                 	db	64
   594  00FF1D  40                 	db	64
   595  00FF1E  3F                 	db	63
   596  00FF1F  1F                 	db	31
   597  00FF20  20                 	db	32
   598  00FF21  40                 	db	64
   599  00FF22  20                 	db	32
   600  00FF23  1F                 	db	31
   601  00FF24  7F                 	db	127
   602  00FF25  20                 	db	32
   603  00FF26  18                 	db	24
   604  00FF27  20                 	db	32
   605  00FF28  7F                 	db	127
   606  00FF29  63                 	db	99
   607  00FF2A  14                 	db	20
   608  00FF2B  08                 	db	8
   609  00FF2C  14                 	db	20
   610  00FF2D  63                 	db	99
   611  00FF2E  03                 	db	3
   612  00FF2F  04                 	db	4
   613  00FF30  78                 	db	120
   614  00FF31  04                 	db	4
   615  00FF32  03                 	db	3
   616  00FF33  61                 	db	97
   617  00FF34  51                 	db	81
   618  00FF35  49                 	db	73
   619  00FF36  45                 	db	69
   620  00FF37  43                 	db	67
   621  00FF38  00                 	db	0
   622  00FF39  00                 	db	0
   623  00FF3A  7F                 	db	127
   624  00FF3B  41                 	db	65
   625  00FF3C  41                 	db	65
   626  00FF3D  02                 	db	2
   627  00FF3E  04                 	db	4
   628  00FF3F  08                 	db	8
   629  00FF40  10                 	db	16
   630  00FF41  20                 	db	32
   631  00FF42  41                 	db	65
   632  00FF43  41                 	db	65
   633  00FF44  7F                 	db	127
   634  00FF45  00                 	db	0
   635  00FF46  00                 	db	0
   636  00FF47  04                 	db	4
   637  00FF48  02                 	db	2
   638  00FF49  01                 	db	1
   639  00FF4A  02                 	db	2
   640  00FF4B  04                 	db	4
   641  00FF4C  40                 	db	64
   642  00FF4D  40                 	db	64
   643  00FF4E  40                 	db	64
   644  00FF4F  40                 	db	64
   645  00FF50  40                 	db	64
   646  00FF51  00                 	db	0
   647  00FF52  01                 	db	1
   648  00FF53  02                 	db	2
   649  00FF54  04                 	db	4
   650  00FF55  00                 	db	0
   651  00FF56  20                 	db	32
   652  00FF57  54                 	db	84
   653  00FF58  54                 	db	84
   654  00FF59  54                 	db	84
   655  00FF5A  78                 	db	120
   656  00FF5B  7F                 	db	127
   657  00FF5C  48                 	db	72
   658  00FF5D  44                 	db	68
   659  00FF5E  44                 	db	68
   660  00FF5F  38                 	db	56
   661  00FF60  38                 	db	56
   662  00FF61  44                 	db	68
   663  00FF62  44                 	db	68
   664  00FF63  44                 	db	68
   665  00FF64  20                 	db	32
   666  00FF65  38                 	db	56
   667  00FF66  44                 	db	68
   668  00FF67  44                 	db	68
   669  00FF68  48                 	db	72
   670  00FF69  7F                 	db	127
   671  00FF6A  38                 	db	56
   672  00FF6B  54                 	db	84
   673  00FF6C  54                 	db	84
   674  00FF6D  54                 	db	84
   675  00FF6E  18                 	db	24
   676  00FF6F  08                 	db	8
   677  00FF70  7E                 	db	126
   678  00FF71  09                 	db	9
   679  00FF72  01                 	db	1
   680  00FF73  02                 	db	2
   681  00FF74  08                 	db	8
   682  00FF75  14                 	db	20
   683  00FF76  54                 	db	84
   684  00FF77  54                 	db	84
   685  00FF78  3C                 	db	60
   686  00FF79  7F                 	db	127
   687  00FF7A  08                 	db	8
   688  00FF7B  04                 	db	4
   689  00FF7C  04                 	db	4
   690  00FF7D  78                 	db	120
   691  00FF7E  00                 	db	0
   692  00FF7F  44                 	db	68
   693  00FF80  7D                 	db	125
   694  00FF81  40                 	db	64
   695  00FF82  00                 	db	0
   696  00FF83  20                 	db	32
   697  00FF84  40                 	db	64
   698  00FF85  44                 	db	68
   699  00FF86  3D                 	db	61
   700  00FF87  00                 	db	0
   701  00FF88  00                 	db	0
   702  00FF89  7F                 	db	127
   703  00FF8A  10                 	db	16
   704  00FF8B  28                 	db	40
   705  00FF8C  44                 	db	68
   706  00FF8D  00                 	db	0
   707  00FF8E  41                 	db	65
   708  00FF8F  7F                 	db	127
   709  00FF90  40                 	db	64
   710  00FF91  00                 	db	0
   711  00FF92  7C                 	db	124
   712  00FF93  04                 	db	4
   713  00FF94  18                 	db	24
   714  00FF95  04                 	db	4
   715  00FF96  78                 	db	120
   716  00FF97  7C                 	db	124
   717  00FF98  08                 	db	8
   718  00FF99  04                 	db	4
   719  00FF9A  04                 	db	4
   720  00FF9B  78                 	db	120
   721  00FF9C  38                 	db	56
   722  00FF9D  44                 	db	68
   723  00FF9E  44                 	db	68
   724  00FF9F  44                 	db	68
   725  00FFA0  38                 	db	56
   726  00FFA1  7C                 	db	124
   727  00FFA2  14                 	db	20
   728  00FFA3  14                 	db	20
   729  00FFA4  14                 	db	20
   730  00FFA5  08                 	db	8
   731  00FFA6  08                 	db	8
   732  00FFA7  14                 	db	20
   733  00FFA8  14                 	db	20
   734  00FFA9  18                 	db	24
   735  00FFAA  7C                 	db	124
   736  00FFAB  7C                 	db	124
   737  00FFAC  08                 	db	8
   738  00FFAD  04                 	db	4
   739  00FFAE  04                 	db	4
   740  00FFAF  08                 	db	8
   741  00FFB0  48                 	db	72
   742  00FFB1  54                 	db	84
   743  00FFB2  54                 	db	84
   744  00FFB3  54                 	db	84
   745  00FFB4  20                 	db	32
   746  00FFB5  04                 	db	4
   747  00FFB6  3F                 	db	63
   748  00FFB7  44                 	db	68
   749  00FFB8  40                 	db	64
   750  00FFB9  20                 	db	32
   751  00FFBA  3C                 	db	60
   752  00FFBB  40                 	db	64
   753  00FFBC  40                 	db	64
   754  00FFBD  20                 	db	32
   755  00FFBE  7C                 	db	124
   756  00FFBF  1C                 	db	28
   757  00FFC0  20                 	db	32
   758  00FFC1  40                 	db	64
   759  00FFC2  20                 	db	32
   760  00FFC3  1C                 	db	28
   761  00FFC4  3C                 	db	60
   762  00FFC5  40                 	db	64
   763  00FFC6  30                 	db	48
   764  00FFC7  40                 	db	64
   765  00FFC8  3C                 	db	60
   766  00FFC9  44                 	db	68
   767  00FFCA  28                 	db	40
   768  00FFCB  10                 	db	16
   769  00FFCC  28                 	db	40
   770  00FFCD  44                 	db	68
   771  00FFCE  0C                 	db	12
   772  00FFCF  50                 	db	80
   773  00FFD0  50                 	db	80
   774  00FFD1  50                 	db	80
   775  00FFD2  3C                 	db	60
   776  00FFD3  44                 	db	68
   777  00FFD4  64                 	db	100
   778  00FFD5  54                 	db	84
   779  00FFD6  4C                 	db	76
   780  00FFD7  44                 	db	68
   781  00FFD8  00                 	db	0
   782  00FFD9  08                 	db	8
   783  00FFDA  36                 	db	54
   784  00FFDB  41                 	db	65
   785  00FFDC  00                 	db	0
   786  00FFDD  00                 	db	0
   787  00FFDE  00                 	db	0
   788  00FFDF  7F                 	db	127
   789  00FFE0  00                 	db	0
   790  00FFE1  00                 	db	0
   791  00FFE2  00                 	db	0
   792  00FFE3  41                 	db	65
   793  00FFE4  36                 	db	54
   794  00FFE5  08                 	db	8
   795  00FFE6  00                 	db	0
   796  00FFE7  08                 	db	8
   797  00FFE8  08                 	db	8
   798  00FFE9  2A                 	db	42
   799  00FFEA  1C                 	db	28
   800  00FFEB  08                 	db	8
   801  00FFEC  08                 	db	8
   802  00FFED  1C                 	db	28
   803  00FFEE  2A                 	db	42
   804  00FFEF  08                 	db	8
   805  00FFF0  08                 	db	8
   806  00FFF1                     __end_of_Font5x7:
   807                           	opt stack 0
   808  00FFF1                     _PortG_Property:
   809                           	opt stack 0
   810  00FFF1  FC00               	dw	64512
   811  00FFF3                     __end_of_PortG_Property:
   812                           	opt stack 0
   813  00FFF3                     _PortF_Property:
   814                           	opt stack 0
   815  00FFF3  0FFF               	dw	4095
   816  00FFF5                     __end_of_PortF_Property:
   817                           	opt stack 0
   818  00FFF5                     _PortE_Property:
   819                           	opt stack 0
   820  00FFF5  0000               	dw	0
   821  00FFF7                     __end_of_PortE_Property:
   822                           	opt stack 0
   823  00FFF7                     _PortD_Property:
   824                           	opt stack 0
   825  00FFF7  FFFF               	dw	65535
   826  00FFF9                     __end_of_PortD_Property:
   827                           	opt stack 0
   828  00FFF9                     _PortC_Property:
   829                           	opt stack 0
   830  00FFF9  FFF0               	dw	65520
   831  00FFFB                     __end_of_PortC_Property:
   832                           	opt stack 0
   833  00FFFB                     _PortB_Property:
   834                           	opt stack 0
   835  00FFFB  FF00               	dw	65280
   836  00FFFD                     __end_of_PortB_Property:
   837                           	opt stack 0
   838  00FFFD                     _PortA_Property:
   839                           	opt stack 0
   840  00FFFD  00FF               	dw	255
   841  00FFFF                     __end_of_PortA_Property:
   842                           	opt stack 0
   843  0000                     _TMR0	set	4054
   844  0000                     _RCREG1	set	4015
   845  0000                     _TXREG1	set	4014
   846  0000                     _SPBRG1	set	4016
   847  0000                     _TXSTA1bits	set	4013
   848  0000                     _BAUDCON1bits	set	3966
   849  0000                     _RCSTA1	set	4012
   850  0000                     _TXSTA1	set	4013
   851  0000                     _TRISCbits	set	3988
   852  0000                     _PR2	set	4043
   853  0000                     _T2CONbits	set	4042
   854  0000                     _T0CONbits	set	4053
   855  0000                     _RCONbits	set	4048
   856  0000                     _OSCTUNEbits	set	3995
   857  0000                     _PIR3	set	4004
   858  0000                     _PIR2	set	4001
   859  0000                     _PIR1	set	3998
   860  0000                     _INTCONbits	set	4082
   861  0000                     _SSP2CON2bits	set	3947
   862  0000                     _SSP1CON2bits	set	4037
   863  0000                     _SSP1ADD	set	4040
   864  0000                     _ANCON0	set	4033
   865  0000                     _ADRESL	set	4035
   866  0000                     _ADRESH	set	4036
   867  0000                     _ADCON1bits	set	4033
   868  0000                     _ADCON0bits	set	4034
   869  0000                     _SSP2CON1bits	set	3948
   870  0000                     _SSP1CON1bits	set	4038
   871  0000                     _SSP2STATbits	set	3949
   872  0000                     _SSP1STATbits	set	4039
   873  0000                     _PIE3bits	set	4003
   874  0000                     _PIE1bits	set	3997
   875  0000                     _PIR3bits	set	4004
   876  0000                     _PIR1bits	set	3998
   877  0000                     _IPR3bits	set	4005
   878  0000                     _IPR1bits	set	3999
   879  0000                     _PORTFbits	set	3973
   880  0000                     _SSP2CON2	set	3947
   881  0000                     _SSP1CON2	set	4037
   882  0000                     _SSP2BUF	set	3951
   883  0000                     _SSP2CON1	set	3948
   884  0000                     _SSP2STAT	set	3949
   885  0000                     _SSP1BUF	set	4041
   886  0000                     _SSP1CON1	set	4038
   887  0000                     _SSP1STAT	set	4039
   888  0000                     _LATG	set	3983
   889  0000                     _LATF	set	3982
   890  0000                     _LATE	set	3981
   891  0000                     _LATD	set	3980
   892  0000                     _LATC	set	3979
   893  0000                     _LATB	set	3978
   894  0000                     _LATA	set	3977
   895  0000                     _TRISG	set	3992
   896  0000                     _TRISF	set	3991
   897  0000                     _TRISE	set	3990
   898  0000                     _TRISD	set	3989
   899  0000                     _TRISC	set	3988
   900  0000                     _TRISB	set	3987
   901  0000                     _TRISA	set	3986
   902  0000                     _PORTG	set	3974
   903  0000                     _PORTF	set	3973
   904  0000                     _PORTE	set	3972
   905  0000                     _PORTD	set	3971
   906  0000                     _PORTC	set	3970
   907  0000                     _PORTB	set	3969
   908  0000                     _PORTA	set	3968
   909  00FFFF  00                 	db	0	; dummy byte at the end
   910  0000                     
   911                           ; #config settings
   912                           
   913                           	psect	cinit
   914  0100FE                     __pcinit:
   915                           	opt stack 0
   916  0100FE                     start_initialization:
   917                           	opt stack 0
   918  0100FE                     __initialization:
   919                           	opt stack 0
   920                           
   921                           ; Initialize objects allocated to BANK1 (24 bytes)
   922                           ; load TBLPTR registers with __pidataBANK1
   923  0100FE  0E06               	movlw	low __pidataBANK1
   924  010100  6EF6               	movwf	tblptrl,c
   925  010102  0E04               	movlw	high __pidataBANK1
   926  010104  6EF7               	movwf	tblptrh,c
   927  010106  0E01               	movlw	low (__pidataBANK1 shr (0+16))
   928  010108  6EF8               	movwf	tblptru,c
   929  01010A  EE01  F0D3         	lfsr	0,__pdataBANK1
   930  01010E  EE10 F018          	lfsr	1,24
   931  010112                     copy_data0:
   932  010112  0009               	tblrd		*+
   933  010114  CFF5 FFEE          	movff	tablat,postinc0
   934  010118  50E5               	movf	postdec1,w,c
   935  01011A  50E1               	movf	fsr1l,w,c
   936  01011C  E1FA               	bnz	copy_data0
   937                           
   938                           ; Initialize objects allocated to BANK0 (14 bytes)
   939                           ; load TBLPTR registers with __pidataBANK0
   940  01011E  0E1E               	movlw	low __pidataBANK0
   941  010120  6EF6               	movwf	tblptrl,c
   942  010122  0E04               	movlw	high __pidataBANK0
   943  010124  6EF7               	movwf	tblptrh,c
   944  010126  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   945  010128  6EF8               	movwf	tblptru,c
   946  01012A  EE00  F0F0         	lfsr	0,__pdataBANK0
   947  01012E  EE10 F00E          	lfsr	1,14
   948  010132                     copy_data1:
   949  010132  0009               	tblrd		*+
   950  010134  CFF5 FFEE          	movff	tablat,postinc0
   951  010138  50E5               	movf	postdec1,w,c
   952  01013A  50E1               	movf	fsr1l,w,c
   953  01013C  E1FA               	bnz	copy_data1
   954                           
   955                           ; Initialize objects allocated to COMRAM (11 bytes)
   956                           ; load TBLPTR registers with __pidataCOMRAM
   957  01013E  0E46               	movlw	low __pidataCOMRAM
   958  010140  6EF6               	movwf	tblptrl,c
   959  010142  0E04               	movlw	high __pidataCOMRAM
   960  010144  6EF7               	movwf	tblptrh,c
   961  010146  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
   962  010148  6EF8               	movwf	tblptru,c
   963  01014A  EE00  F054         	lfsr	0,__pdataCOMRAM
   964  01014E  EE10 F00B          	lfsr	1,11
   965  010152                     copy_data2:
   966  010152  0009               	tblrd		*+
   967  010154  CFF5 FFEE          	movff	tablat,postinc0
   968  010158  50E5               	movf	postdec1,w,c
   969  01015A  50E1               	movf	fsr1l,w,c
   970  01015C  E1FA               	bnz	copy_data2
   971                           
   972                           ; Clear objects allocated to BIGRAM (300 bytes)
   973  01015E  EE02  F064         	lfsr	0,__pbssBIGRAM
   974  010162  EE11 F02C          	lfsr	1,300
   975  010166                     clear_0:
   976  010166  6AEE               	clrf	postinc0,c
   977  010168  50E5               	movf	postdec1,w,c
   978  01016A  50E1               	movf	fsr1l,w,c
   979  01016C  E1FC               	bnz	clear_0
   980  01016E  50E2               	movf	fsr1h,w,c
   981  010170  E1FA               	bnz	clear_0
   982                           
   983                           ; Clear objects allocated to BANK2 (100 bytes)
   984  010172  EE02  F000         	lfsr	0,__pbssBANK2
   985  010176  0E64               	movlw	100
   986  010178                     clear_1:
   987  010178  6AEE               	clrf	postinc0,c
   988  01017A  06E8               	decf	wreg,f,c
   989  01017C  E1FD               	bnz	clear_1
   990                           
   991                           ; Clear objects allocated to BANK1 (211 bytes)
   992  01017E  EE01  F000         	lfsr	0,__pbssBANK1
   993  010182  0ED3               	movlw	211
   994  010184                     clear_2:
   995  010184  6AEE               	clrf	postinc0,c
   996  010186  06E8               	decf	wreg,f,c
   997  010188  E1FD               	bnz	clear_2
   998                           
   999                           ; Clear objects allocated to BANK0 (144 bytes)
  1000  01018A  EE00  F060         	lfsr	0,__pbssBANK0
  1001  01018E  0E90               	movlw	144
  1002  010190                     clear_3:
  1003  010190  6AEE               	clrf	postinc0,c
  1004  010192  06E8               	decf	wreg,f,c
  1005  010194  E1FD               	bnz	clear_3
  1006                           
  1007                           ; Clear objects allocated to COMRAM (43 bytes)
  1008  010196  EE00  F001         	lfsr	0,__pbssCOMRAM
  1009  01019A  0E2B               	movlw	43
  1010  01019C                     clear_4:
  1011  01019C  6AEE               	clrf	postinc0,c
  1012  01019E  06E8               	decf	wreg,f,c
  1013  0101A0  E1FD               	bnz	clear_4
  1014  0101A2                     end_of_initialization:
  1015                           	opt stack 0
  1016  0101A2                     __end_of__initialization:
  1017                           	opt stack 0
  1018  0101A2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1019  0101A4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1020  0101A6  0100               	movlb	0
  1021  0101A8  EF2F  F082         	goto	_main	;jump to C main() function
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1h	equ	0xFE2
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	bssCOMRAM
  1033  000001                     __pbssCOMRAM:
  1034                           	opt stack 0
  1035  000001                     _lQueue:
  1036                           	opt stack 0
  1037  000001                     	ds	3
  1038  000004                     _pShiftVal:
  1039                           	opt stack 0
  1040  000004                     	ds	2
  1041  000006                     _val:
  1042                           	opt stack 0
  1043  000006                     	ds	2
  1044  000008                     _COUNTER:
  1045                           	opt stack 0
  1046  000008                     	ds	2
  1047  00000A                     _lMotor:
  1048                           	opt stack 0
  1049  00000A                     	ds	2
  1050  00000C                     _lCurrent:
  1051                           	opt stack 0
  1052  00000C                     	ds	2
  1053  00000E                     HMI_GRender@a:
  1054                           	opt stack 0
  1055  00000E                     	ds	2
  1056  000010                     _gBackcolour:
  1057                           	opt stack 0
  1058  000010                     	ds	2
  1059  000012                     _iRWall:
  1060                           	opt stack 0
  1061  000012                     	ds	1
  1062  000013                     _iRBumpDrop:
  1063                           	opt stack 0
  1064  000013                     	ds	1
  1065  000014                     _iRScriptIndex:
  1066                           	opt stack 0
  1067  000014                     	ds	1
  1068  000015                     Event_TestButton@j:
  1069                           	opt stack 0
  1070  000015                     	ds	1
  1071  000016                     _u:
  1072                           	opt stack 0
  1073  000016                     	ds	1
  1074  000017                     _j:
  1075                           	opt stack 0
  1076  000017                     	ds	1
  1077  000018                     _i:
  1078                           	opt stack 0
  1079  000018                     	ds	1
  1080  000019                     Timer2_Init@PRE:
  1081                           	opt stack 0
  1082  000019                     	ds	1
  1083  00001A                     Timer2_Init@INDEX:
  1084                           	opt stack 0
  1085  00001A                     	ds	1
  1086  00001B                     Timer0_Init@PRE:
  1087                           	opt stack 0
  1088  00001B                     	ds	1
  1089  00001C                     _INDEX:
  1090                           	opt stack 0
  1091  00001C                     	ds	1
  1092  00001D                     rand@screw:
  1093                           	opt stack 0
  1094  00001D                     	ds	1
  1095  00001E                     _ADC_Initialised:
  1096                           	opt stack 0
  1097  00001E                     	ds	1
  1098  00001F                     OutSeg@a:
  1099                           	opt stack 0
  1100  00001F                     	ds	1
  1101  000020                     OutSeg@segset:
  1102                           	opt stack 0
  1103  000020                     	ds	1
  1104  000021                     OutSeg@cur:
  1105                           	opt stack 0
  1106  000021                     	ds	1
  1107  000022                     _lBufferY:
  1108                           	opt stack 0
  1109  000022                     	ds	1
  1110  000023                     _lBufferX:
  1111                           	opt stack 0
  1112  000023                     	ds	1
  1113  000024                     _clearall:
  1114                           	opt stack 0
  1115  000024                     	ds	1
  1116  000025                     _I2C1T:
  1117                           	opt stack 0
  1118  000025                     	ds	7
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           postdec1	equ	0xFE5
  1126                           fsr1h	equ	0xFE2
  1127                           fsr1l	equ	0xFE1
  1128                           
  1129                           	psect	dataCOMRAM
  1130  000054                     __pdataCOMRAM:
  1131                           	opt stack 0
  1132  000054                     _gCursor:
  1133                           	opt stack 0
  1134  000054                     	ds	4
  1135  000058                     _Bus_State:
  1136                           	opt stack 0
  1137  000058                     	ds	1
  1138  000059                     _change:
  1139                           	opt stack 0
  1140  000059                     	ds	1
  1141  00005A                     	ds	1
  1142  00005B                     	ds	1
  1143  00005C                     	ds	1
  1144  00005D                     _l:
  1145                           	opt stack 0
  1146  00005D                     	ds	1
  1147  00005E                     _w:
  1148                           	opt stack 0
  1149  00005E                     	ds	1
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1h	equ	0xFE2
  1158                           fsr1l	equ	0xFE1
  1159                           
  1160                           	psect	bssBANK0
  1161  000060                     __pbssBANK0:
  1162                           	opt stack 0
  1163  000060                     _iRAngleSS:
  1164                           	opt stack 0
  1165  000060                     	ds	4
  1166  000064                     _iRDistanceSS:
  1167                           	opt stack 0
  1168  000064                     	ds	4
  1169  000068                     Timer2_Init@DIV:
  1170                           	opt stack 0
  1171  000068                     	ds	4
  1172  00006C                     Timer0_Init@DIV:
  1173                           	opt stack 0
  1174  00006C                     	ds	4
  1175  000070                     _gISR:
  1176                           	opt stack 0
  1177  000070                     	ds	3
  1178  000073                     _lStepFunction:
  1179                           	opt stack 0
  1180  000073                     	ds	3
  1181  000076                     _I2C2_More:
  1182                           	opt stack 0
  1183  000076                     	ds	3
  1184  000079                     _I2C1_More:
  1185                           	opt stack 0
  1186  000079                     	ds	3
  1187  00007C                     _I2C2_Done:
  1188                           	opt stack 0
  1189  00007C                     	ds	3
  1190  00007F                     _I2C1_Done:
  1191                           	opt stack 0
  1192  00007F                     	ds	3
  1193  000082                     _iRDistance:
  1194                           	opt stack 0
  1195  000082                     	ds	2
  1196  000084                     SPI_Send9@dat:
  1197                           	opt stack 0
  1198  000084                     	ds	2
  1199  000086                     _iRDropCaster:
  1200                           	opt stack 0
  1201  000086                     	ds	1
  1202  000087                     _iRDropLeft:
  1203                           	opt stack 0
  1204  000087                     	ds	1
  1205  000088                     _iRDropRight:
  1206                           	opt stack 0
  1207  000088                     	ds	1
  1208  000089                     _iRBumpLeft:
  1209                           	opt stack 0
  1210  000089                     	ds	1
  1211  00008A                     _iRBumpRight:
  1212                           	opt stack 0
  1213  00008A                     	ds	1
  1214  00008B                     _iRVirtualWall:
  1215                           	opt stack 0
  1216  00008B                     	ds	1
  1217  00008C                     _iRCliffR:
  1218                           	opt stack 0
  1219  00008C                     	ds	1
  1220  00008D                     _iRCliffFR:
  1221                           	opt stack 0
  1222  00008D                     	ds	1
  1223  00008E                     _iRCliffFL:
  1224                           	opt stack 0
  1225  00008E                     	ds	1
  1226  00008F                     _iRCliffL:
  1227                           	opt stack 0
  1228  00008F                     	ds	1
  1229  000090                     _SPI2:
  1230                           	opt stack 0
  1231  000090                     	ds	11
  1232  00009B                     _PortE:
  1233                           	opt stack 0
  1234  00009B                     	ds	10
  1235  0000A5                     _PortD:
  1236                           	opt stack 0
  1237  0000A5                     	ds	10
  1238  0000AF                     _PortB:
  1239                           	opt stack 0
  1240  0000AF                     	ds	10
  1241  0000B9                     _PortC:
  1242                           	opt stack 0
  1243  0000B9                     	ds	10
  1244  0000C3                     _PortF:
  1245                           	opt stack 0
  1246  0000C3                     	ds	10
  1247  0000CD                     _I2C2T:
  1248                           	opt stack 0
  1249  0000CD                     	ds	7
  1250  0000D4                     _ADC_AN3:
  1251                           	opt stack 0
  1252  0000D4                     	ds	5
  1253  0000D9                     _ADC_AN2:
  1254                           	opt stack 0
  1255  0000D9                     	ds	5
  1256  0000DE                     _ADC_AN1:
  1257                           	opt stack 0
  1258  0000DE                     	ds	5
  1259  0000E3                     _ADC_AN0:
  1260                           	opt stack 0
  1261  0000E3                     	ds	5
  1262  0000E8                     LCD_DrawRectangle@p4:
  1263                           	opt stack 0
  1264  0000E8                     	ds	4
  1265  0000EC                     LCD_DrawRectangle@p2:
  1266                           	opt stack 0
  1267  0000EC                     	ds	4
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postdec1	equ	0xFE5
  1275                           fsr1h	equ	0xFE2
  1276                           fsr1l	equ	0xFE1
  1277                           
  1278                           	psect	dataBANK0
  1279  0000F0                     __pdataBANK0:
  1280                           	opt stack 0
  1281  0000F0                     Console_Render@F6956:
  1282                           	opt stack 0
  1283  0000F0                     	ds	4
  1284  0000F4                     _gLineSize:
  1285                           	opt stack 0
  1286  0000F4                     	ds	4
  1287  0000F8                     _gCharSize:
  1288                           	opt stack 0
  1289  0000F8                     	ds	4
  1290  0000FC                     _gForecolour:
  1291                           	opt stack 0
  1292  0000FC                     	ds	2
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postdec1	equ	0xFE5
  1300                           fsr1h	equ	0xFE2
  1301                           fsr1l	equ	0xFE1
  1302                           
  1303                           	psect	bssBANK1
  1304  000100                     __pbssBANK1:
  1305                           	opt stack 0
  1306  000100                     _lCBuffer:
  1307                           	opt stack 0
  1308  000100                     	ds	30
  1309  00011E                     _iRAngle:
  1310                           	opt stack 0
  1311  00011E                     	ds	2
  1312  000120                     Console_MakeField@Fill:
  1313                           	opt stack 0
  1314  000120                     	ds	70
  1315  000166                     _HMIBoard:
  1316                           	opt stack 0
  1317  000166                     	ds	58
  1318  0001A0                     _SPI1:
  1319                           	opt stack 0
  1320  0001A0                     	ds	11
  1321  0001AB                     _DIPSwitch:
  1322                           	opt stack 0
  1323  0001AB                     	ds	10
  1324  0001B5                     _TestButton:
  1325                           	opt stack 0
  1326  0001B5                     	ds	10
  1327  0001BF                     _PortG:
  1328                           	opt stack 0
  1329  0001BF                     	ds	10
  1330  0001C9                     _PortA:
  1331                           	opt stack 0
  1332  0001C9                     	ds	10
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1h	equ	0xFE2
  1341                           fsr1l	equ	0xFE1
  1342                           
  1343                           	psect	dataBANK1
  1344  0001D3                     __pdataBANK1:
  1345                           	opt stack 0
  1346  0001D3                     _maze:
  1347                           	opt stack 0
  1348  0001D3                     	ds	24
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           postdec1	equ	0xFE5
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           
  1359                           	psect	bssBANK2
  1360  000200                     __pbssBANK2:
  1361                           	opt stack 0
  1362  000200                     _iRScriptStack:
  1363                           	opt stack 0
  1364  000200                     	ds	100
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           postdec1	equ	0xFE5
  1372                           fsr1h	equ	0xFE2
  1373                           fsr1l	equ	0xFE1
  1374                           
  1375                           	psect	bssBIGRAM
  1376  000264                     __pbssBIGRAM:
  1377                           	opt stack 0
  1378  000264                     _lBuffer:
  1379                           	opt stack 0
  1380  000264                     	ds	300
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1h	equ	0xFE2
  1389                           fsr1l	equ	0xFE1
  1390                           
  1391                           	psect	cstackBANK0
  1392  000000                     __pcstackBANK0:
  1393                           	opt stack 0
  1394  000000                     tblptru	equ	0xFF8
  1395                           tblptrh	equ	0xFF7
  1396                           tblptrl	equ	0xFF6
  1397                           tablat	equ	0xFF5
  1398                           postinc0	equ	0xFEE
  1399                           wreg	equ	0xFE8
  1400                           postdec1	equ	0xFE5
  1401                           fsr1h	equ	0xFE2
  1402                           fsr1l	equ	0xFE1
  1403                           
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406                           	psect	cstackCOMRAM
  1407  00002C                     __pcstackCOMRAM:
  1408                           	opt stack 0
  1409  00002C                     Byte_SetBit@pInput:
  1410                           	opt stack 0
  1411  00002C                     Byte_GetZone@pInput:
  1412                           	opt stack 0
  1413  00002C                     delay_us@us:
  1414                           	opt stack 0
  1415  00002C                     MXK_Queue@pCallback:
  1416                           	opt stack 0
  1417                           
  1418                           ; 3 bytes @ 0x0
  1419  00002C                     	ds	2
  1420  00002E                     Byte_SetBit@pBit:
  1421                           	opt stack 0
  1422  00002E                     Byte_GetZone@pMax:
  1423                           	opt stack 0
  1424  00002E                     delay_us@u:
  1425                           	opt stack 0
  1426                           
  1427                           ; 4 bytes @ 0x2
  1428  00002E                     	ds	1
  1429  00002F                     Byte_SetBit@pValue:
  1430                           	opt stack 0
  1431  00002F                     Byte_GetZone@pChunk:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x3
  1435  00002F                     	ds	1
  1436  000030                     ??_Byte_SetBit:
  1437  000030                     Byte_GetZone@pChunkSize:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x4
  1441  000030                     	ds	1
  1442  000031                     ??_Byte_GetZone:
  1443                           
  1444                           ; 1 bytes @ 0x5
  1445  000031                     	ds	1
  1446  000032                     Byte_GetZone@MASK:
  1447                           	opt stack 0
  1448  000032                     MXK_SwitchTo@CUR:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x6
  1452  000032                     	ds	1
  1453  000033                     Byte_GetZone@Offset:
  1454                           	opt stack 0
  1455  000033                     MXK_SwitchTo@pModule:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x7
  1459  000033                     	ds	1
  1460  000034                     Byte_GetZone@Output:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x8
  1464  000034                     	ds	1
  1465  000035                     Byte_GetPair@pInput:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x9
  1469  000035                     	ds	2
  1470  000037                     Byte_GetPair@pPair:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0xB
  1474  000037                     	ds	1
  1475  000038                     Word_GetPair@pInput:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0xC
  1479  000038                     	ds	2
  1480  00003A                     Word_GetPair@pPair:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0xE
  1484  00003A                     	ds	1
  1485  00003B                     Port_SetPin@pInput:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0xF
  1489  00003B                     	ds	2
  1490  00003D                     Port_SetPin@pPin:
  1491                           	opt stack 0
  1492                           
  1493                           ; 1 bytes @ 0x11
  1494  00003D                     	ds	1
  1495  00003E                     Port_SetPin@pValue:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x12
  1499  00003E                     	ds	1
  1500  00003F                     Port_SetPin@Type:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x13
  1504  00003F                     	ds	1
  1505  000040                     
  1506                           ; 1 bytes @ 0x14
  1507  000040                     	ds	2
  1508  000042                     ??_ISR_Function:
  1509                           
  1510                           ; 1 bytes @ 0x16
  1511  000042                     	ds	18
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1h	equ	0xFE2
  1520                           fsr1l	equ	0xFE1
  1521                           
  1522 ;;
  1523 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1524 ;;
  1525 ;; *************** function _main *****************
  1526 ;; Defined at:
  1527 ;;		line 38 in file "main.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		None
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;Total ram usage:        0 bytes
  1546 ;; Hardware stack levels required when called:    7
  1547 ;; This function calls:
  1548 ;;		Nothing
  1549 ;; This function is called by:
  1550 ;;		Startup code after reset
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text0
  1555  01045E                     __ptext0:
  1556                           	opt stack 0
  1557  01045E                     _main:
  1558                           	opt stack 24
  1559                           
  1560                           ;incstack = 0
  1561  01045E  EF55  F00A         	goto	start
  1562  010462                     __end_of_main:
  1563                           	opt stack 0
  1564                           tblptru	equ	0xFF8
  1565                           tblptrh	equ	0xFF7
  1566                           tblptrl	equ	0xFF6
  1567                           tablat	equ	0xFF5
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           postdec1	equ	0xFE5
  1571                           fsr1h	equ	0xFE2
  1572                           fsr1l	equ	0xFE1
  1573                           
  1574 ;; *************** function _ISR_Function *****************
  1575 ;; Defined at:
  1576 ;;		line 38 in file "Library/ISR.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:       18 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    6
  1597 ;; This function calls:
  1598 ;;		_Timer0_ISR
  1599 ;; This function is called by:
  1600 ;;		Interrupt level 2
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	intcode
  1605  001408                     __pintcode:
  1606                           	opt stack 0
  1607  001408                     _ISR_Function:
  1608                           	opt stack 24
  1609                           
  1610                           ;incstack = 0
  1611  001408  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1612  00140A  CFFA F042          	movff	pclath,??_ISR_Function
  1613  00140E  CFFB F043          	movff	pclatu,??_ISR_Function+1
  1614  001412  CFE9 F044          	movff	fsr0l,??_ISR_Function+2
  1615  001416  CFEA F045          	movff	fsr0h,??_ISR_Function+3
  1616  00141A  CFE1 F046          	movff	fsr1l,??_ISR_Function+4
  1617  00141E  CFE2 F047          	movff	fsr1h,??_ISR_Function+5
  1618  001422  CFD9 F048          	movff	fsr2l,??_ISR_Function+6
  1619  001426  CFDA F049          	movff	fsr2h,??_ISR_Function+7
  1620  00142A  CFF3 F04A          	movff	prodl,??_ISR_Function+8
  1621  00142E  CFF4 F04B          	movff	prodh,??_ISR_Function+9
  1622  001432  CFF6 F04C          	movff	tblptrl,??_ISR_Function+10
  1623  001436  CFF7 F04D          	movff	tblptrh,??_ISR_Function+11
  1624  00143A  CFF8 F04E          	movff	tblptru,??_ISR_Function+12
  1625  00143E  CFF5 F04F          	movff	tablat,??_ISR_Function+13
  1626  001442  C05F  F050         	movff	btemp,??_ISR_Function+14
  1627  001446  C060  F051         	movff	btemp+1,??_ISR_Function+15
  1628  00144A  C061  F052         	movff	btemp+2,??_ISR_Function+16
  1629  00144E  C062  F053         	movff	btemp+3,??_ISR_Function+17
  1630                           
  1631                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
  1632  001452  92F2               	bcf	intcon,1,c	;volatile
  1633                           
  1634                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
  1635  001454  B4F2               	btfsc	intcon,2,c	;volatile
  1636  001456  AAF2               	btfss	intcon,5,c	;volatile
  1637  001458  D002               	goto	i2l1590
  1638                           
  1639                           ;ISR.c: 68: Timer0_ISR();
  1640  00145A  ECDF  F081         	call	_Timer0_ISR	;wreg free
  1641  00145E                     i2l1590:
  1642  00145E  C053  F062         	movff	??_ISR_Function+17,btemp+3
  1643  001462  C052  F061         	movff	??_ISR_Function+16,btemp+2
  1644  001466  C051  F060         	movff	??_ISR_Function+15,btemp+1
  1645  00146A  C050  F05F         	movff	??_ISR_Function+14,btemp
  1646  00146E  C04F  FFF5         	movff	??_ISR_Function+13,tablat
  1647  001472  C04E  FFF8         	movff	??_ISR_Function+12,tblptru
  1648  001476  C04D  FFF7         	movff	??_ISR_Function+11,tblptrh
  1649  00147A  C04C  FFF6         	movff	??_ISR_Function+10,tblptrl
  1650  00147E  C04B  FFF4         	movff	??_ISR_Function+9,prodh
  1651  001482  C04A  FFF3         	movff	??_ISR_Function+8,prodl
  1652  001486  C049  FFDA         	movff	??_ISR_Function+7,fsr2h
  1653  00148A  C048  FFD9         	movff	??_ISR_Function+6,fsr2l
  1654  00148E  C047  FFE2         	movff	??_ISR_Function+5,fsr1h
  1655  001492  C046  FFE1         	movff	??_ISR_Function+4,fsr1l
  1656  001496  C045  FFEA         	movff	??_ISR_Function+3,fsr0h
  1657  00149A  C044  FFE9         	movff	??_ISR_Function+2,fsr0l
  1658  00149E  C043  FFFB         	movff	??_ISR_Function+1,pclatu
  1659  0014A2  C042  FFFA         	movff	??_ISR_Function,pclath
  1660  0014A6  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1661  0014A8  0011               	retfie		f
  1662  0014AA                     __end_of_ISR_Function:
  1663                           	opt stack 0
  1664                           pclatu	equ	0xFFB
  1665                           pclath	equ	0xFFA
  1666                           tblptru	equ	0xFF8
  1667                           tblptrh	equ	0xFF7
  1668                           tblptrl	equ	0xFF6
  1669                           tablat	equ	0xFF5
  1670                           prodh	equ	0xFF4
  1671                           prodl	equ	0xFF3
  1672                           intcon	equ	0xFF2
  1673                           postinc0	equ	0xFEE
  1674                           fsr0h	equ	0xFEA
  1675                           fsr0l	equ	0xFE9
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1h	equ	0xFE2
  1679                           fsr1l	equ	0xFE1
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           
  1683 ;; *************** function _Timer0_ISR *****************
  1684 ;; Defined at:
  1685 ;;		line 94 in file "Library/Timer0.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;		None
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;		None
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  1    wreg      void 
  1692 ;; Registers used:
  1693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;Total ram usage:        0 bytes
  1704 ;; Hardware stack levels used:    1
  1705 ;; Hardware stack levels required when called:    5
  1706 ;; This function calls:
  1707 ;;		Absolute function
  1708 ;;		_Motor_Step
  1709 ;;		_Timer0_Stop
  1710 ;; This function is called by:
  1711 ;;		_ISR_Function
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text2
  1716  0103BE                     __ptext2:
  1717                           	opt stack 0
  1718  0103BE                     _Timer0_ISR:
  1719                           	opt stack 24
  1720                           
  1721                           ;Timer0.c: 96: Timer0_Stop();
  1722                           
  1723                           ;incstack = 0
  1724  0103BE  EC29  F082         	call	_Timer0_Stop	;wreg free
  1725                           
  1726                           ;Timer0.c: 99: if (gISR != 0)
  1727  0103C2  0100               	movlb	0	; () banked
  1728  0103C4  5170               	movf	_gISR& (0+255),w,b
  1729  0103C6  0100               	movlb	0	; () banked
  1730  0103C8  1171               	iorwf	(_gISR+1)& (0+255),w,b
  1731  0103CA  0100               	movlb	0	; () banked
  1732  0103CC  1172               	iorwf	(_gISR+2)& (0+255),w,b
  1733  0103CE  B4D8               	btfsc	status,2,c
  1734  0103D0  0012               	return	
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;Timer0.c: 100: gISR();
  1738  0103D2  D801               	call	i2u460_48
  1739  0103D4  0012               	return	
  1740  0103D6                     i2u460_48:
  1741  0103D6  0005               	push	
  1742  0103D8  6EFA               	movwf	pclath,c
  1743  0103DA  0100               	movlb	0	; () banked
  1744  0103DC  5170               	movf	_gISR& (0+255),w,b
  1745  0103DE  6EFD               	movwf	tosl,c
  1746  0103E0  5171               	movf	(_gISR+1)& (0+255),w,b
  1747  0103E2  6EFE               	movwf	tosh,c
  1748  0103E4  5172               	movf	(_gISR+2)& (0+255),w,b
  1749  0103E6  6EFF               	movwf	tosu,c
  1750  0103E8  50FA               	movf	pclath,w,c
  1751  0103EA  0012               	return		;indir
  1752  0103EC                     __end_of_Timer0_ISR:
  1753                           	opt stack 0
  1754                           tosu	equ	0xFFF
  1755                           tosh	equ	0xFFE
  1756                           tosl	equ	0xFFD
  1757                           pclatu	equ	0xFFB
  1758                           pclath	equ	0xFFA
  1759                           tblptru	equ	0xFF8
  1760                           tblptrh	equ	0xFF7
  1761                           tblptrl	equ	0xFF6
  1762                           tablat	equ	0xFF5
  1763                           prodh	equ	0xFF4
  1764                           prodl	equ	0xFF3
  1765                           intcon	equ	0xFF2
  1766                           postinc0	equ	0xFEE
  1767                           fsr0h	equ	0xFEA
  1768                           fsr0l	equ	0xFE9
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1h	equ	0xFE2
  1772                           fsr1l	equ	0xFE1
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _Motor_Step *****************
  1778 ;; Defined at:
  1779 ;;		line 75 in file "Library/Motor.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:        2 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    4
  1800 ;; This function calls:
  1801 ;;		_MXK_Queue
  1802 ;;		_MXK_Release
  1803 ;;		_MXK_SwitchTo
  1804 ;;		_Port_SetPin
  1805 ;;		_Timer0_Restart
  1806 ;;		_Timer0_Stop
  1807 ;; This function is called by:
  1808 ;;		_Motor_Init
  1809 ;;		_Timer0_ISR
  1810 ;;		_MXK_Dequeue
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text3
  1815  010000                     __ptext3:
  1816                           	opt stack 0
  1817  010000                     _Motor_Step:
  1818                           	opt stack 24
  1819                           
  1820                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  1821                           
  1822                           ;incstack = 0
  1823  010000  EE20 F004          	lfsr	2,4
  1824  010004  500A               	movf	_lMotor,w,c
  1825  010006  26D9               	addwf	fsr2l,f,c
  1826  010008  500B               	movf	_lMotor+1,w,c
  1827  01000A  22DA               	addwfc	fsr2h,f,c
  1828  01000C  50DF               	movf	indf2,w,c
  1829  01000E  ECAC  F081         	call	_MXK_SwitchTo
  1830  010012  0900               	iorlw	0
  1831  010014  B4D8               	btfsc	status,2,c
  1832  010016  D06A               	goto	i2l1627
  1833                           
  1834                           ;Motor.c: 78: {
  1835                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  1836  010018  C00A  FFD9         	movff	_lMotor,fsr2l
  1837  01001C  C00B  FFDA         	movff	_lMotor+1,fsr2h
  1838  010020  50DE               	movf	postinc2,w,c
  1839  010022  10DE               	iorwf	postinc2,w,c
  1840  010024  B4D8               	btfsc	status,2,c
  1841  010026  D05D               	goto	i2l1628
  1842                           
  1843                           ;Motor.c: 80: {
  1844                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  1845  010028  C00A  FFD9         	movff	_lMotor,fsr2l
  1846  01002C  C00B  FFDA         	movff	_lMotor+1,fsr2h
  1847  010030  0E01               	movlw	1
  1848  010032  BEDB               	btfsc	plusw2,7,c
  1849  010034  D022               	goto	i2l1629
  1850  010036  0E01               	movlw	1
  1851  010038  50DB               	movf	plusw2,w,c
  1852  01003A  E103               	bnz	i2u382_40
  1853  01003C  04DE               	decf	postinc2,w,c
  1854  01003E  A0D8               	btfss	status,0,c
  1855  010040  D01C               	goto	i2l1629
  1856  010042                     i2u382_40:
  1857                           
  1858                           ;Motor.c: 83: {
  1859                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  1860  010042  C00A  FFD9         	movff	_lMotor,fsr2l
  1861  010046  C00B  FFDA         	movff	_lMotor+1,fsr2h
  1862  01004A  28DE               	incf	postinc2,w,c
  1863  01004C  E104               	bnz	i2u383_40
  1864  01004E  0E7F               	movlw	127
  1865  010050  18DE               	xorwf	postinc2,w,c
  1866  010052  B4D8               	btfsc	status,2,c
  1867  010054  D007               	goto	i2l1630
  1868  010056                     i2u383_40:
  1869                           
  1870                           ;Motor.c: 85: lMotor->mDelta --;
  1871  010056  C00A  FFD9         	movff	_lMotor,fsr2l
  1872  01005A  C00B  FFDA         	movff	_lMotor+1,fsr2h
  1873  01005E  06DE               	decf	postinc2,f,c
  1874  010060  0E00               	movlw	0
  1875  010062  5ADD               	subwfb	postdec2,f,c
  1876  010064                     i2l1630:
  1877                           
  1878                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  1879  010064  0E9B               	movlw	low _PortE
  1880  010066  6E3B               	movwf	Port_SetPin@pInput,c
  1881  010068  0E00               	movlw	high _PortE
  1882  01006A  6E3C               	movwf	Port_SetPin@pInput+1,c
  1883  01006C  0E00               	movlw	0
  1884  01006E  6E3D               	movwf	Port_SetPin@pPin,c
  1885  010070  0E01               	movlw	1
  1886  010072  6E3E               	movwf	Port_SetPin@pValue,c
  1887  010074  ECD6  F080         	call	_Port_SetPin	;wreg free
  1888                           
  1889                           ;Motor.c: 88: }
  1890  010078  D01B               	goto	i2l1631
  1891  01007A                     i2l1629:
  1892                           
  1893                           ;Motor.c: 89: else
  1894                           ;Motor.c: 90: {
  1895                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  1896  01007A  C00A  FFD9         	movff	_lMotor,fsr2l
  1897  01007E  C00B  FFDA         	movff	_lMotor+1,fsr2h
  1898  010082  04DE               	decf	postinc2,w,c
  1899  010084  E104               	bnz	i2u384_40
  1900  010086  0E80               	movlw	128
  1901  010088  18DE               	xorwf	postinc2,w,c
  1902  01008A  B4D8               	btfsc	status,2,c
  1903  01008C  D007               	goto	i2l1632
  1904  01008E                     i2u384_40:
  1905                           
  1906                           ;Motor.c: 92: lMotor->mDelta ++;
  1907  01008E  C00A  FFD9         	movff	_lMotor,fsr2l
  1908  010092  C00B  FFDA         	movff	_lMotor+1,fsr2h
  1909  010096  2ADE               	incf	postinc2,f,c
  1910  010098  0E00               	movlw	0
  1911  01009A  22DD               	addwfc	postdec2,f,c
  1912  01009C                     i2l1632:
  1913                           
  1914                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  1915  01009C  0E9B               	movlw	low _PortE
  1916  01009E  6E3B               	movwf	Port_SetPin@pInput,c
  1917  0100A0  0E00               	movlw	high _PortE
  1918  0100A2  6E3C               	movwf	Port_SetPin@pInput+1,c
  1919  0100A4  0E00               	movlw	0
  1920  0100A6  6E3D               	movwf	Port_SetPin@pPin,c
  1921  0100A8  0E00               	movlw	0
  1922  0100AA  6E3E               	movwf	Port_SetPin@pValue,c
  1923  0100AC  ECD6  F080         	call	_Port_SetPin	;wreg free
  1924  0100B0                     i2l1631:
  1925                           
  1926                           ;Motor.c: 95: }
  1927                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  1928  0100B0  0E9B               	movlw	low _PortE
  1929  0100B2  6E3B               	movwf	Port_SetPin@pInput,c
  1930  0100B4  0E00               	movlw	high _PortE
  1931  0100B6  6E3C               	movwf	Port_SetPin@pInput+1,c
  1932  0100B8  0E01               	movlw	1
  1933  0100BA  6E3D               	movwf	Port_SetPin@pPin,c
  1934  0100BC  0E01               	movlw	1
  1935  0100BE  6E3E               	movwf	Port_SetPin@pValue,c
  1936  0100C0  ECD6  F080         	call	_Port_SetPin	;wreg free
  1937                           
  1938                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  1939  0100C4  0E9B               	movlw	low _PortE
  1940  0100C6  6E3B               	movwf	Port_SetPin@pInput,c
  1941  0100C8  0E00               	movlw	high _PortE
  1942  0100CA  6E3C               	movwf	Port_SetPin@pInput+1,c
  1943  0100CC  0E01               	movlw	1
  1944  0100CE  6E3D               	movwf	Port_SetPin@pPin,c
  1945  0100D0  0E00               	movlw	0
  1946  0100D2  6E3E               	movwf	Port_SetPin@pValue,c
  1947  0100D4  ECD6  F080         	call	_Port_SetPin	;wreg free
  1948                           
  1949                           ;Motor.c: 101: MXK_Release();
  1950  0100D8  EC2C  F082         	call	_MXK_Release	;wreg free
  1951                           
  1952                           ;Motor.c: 102: Timer0_Restart();
  1953  0100DC  EC1D  F082         	call	_Timer0_Restart	;wreg free
  1954                           
  1955                           ;Motor.c: 103: return;
  1956  0100E0  0012               	return	
  1957  0100E2                     i2l1628:
  1958                           
  1959                           ;Motor.c: 104: }
  1960                           ;Motor.c: 105: MXK_Release();
  1961  0100E2  EC2C  F082         	call	_MXK_Release	;wreg free
  1962                           
  1963                           ;Motor.c: 106: Timer0_Stop();
  1964  0100E6  EC29  F082         	call	_Timer0_Stop	;wreg free
  1965                           
  1966                           ;Motor.c: 107: return;
  1967  0100EA  0012               	return	
  1968  0100EC                     i2l1627:
  1969                           
  1970                           ;Motor.c: 108: }
  1971                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  1972  0100EC  C073  F02C         	movff	_lStepFunction,MXK_Queue@pCallback
  1973  0100F0  C074  F02D         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  1974  0100F4  C075  F02E         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  1975  0100F8  EC16  F082         	call	_MXK_Queue	;wreg free
  1976  0100FC  0012               	return		;funcret
  1977  0100FE                     __end_of_Motor_Step:
  1978                           	opt stack 0
  1979                           tosu	equ	0xFFF
  1980                           tosh	equ	0xFFE
  1981                           tosl	equ	0xFFD
  1982                           pclatu	equ	0xFFB
  1983                           pclath	equ	0xFFA
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           prodh	equ	0xFF4
  1989                           prodl	equ	0xFF3
  1990                           intcon	equ	0xFF2
  1991                           postinc0	equ	0xFEE
  1992                           fsr0h	equ	0xFEA
  1993                           fsr0l	equ	0xFE9
  1994                           wreg	equ	0xFE8
  1995                           postdec1	equ	0xFE5
  1996                           fsr1h	equ	0xFE2
  1997                           fsr1l	equ	0xFE1
  1998                           indf2	equ	0xFDF
  1999                           postinc2	equ	0xFDE
  2000                           postdec2	equ	0xFDD
  2001                           plusw2	equ	0xFDB
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function _Timer0_Stop *****************
  2007 ;; Defined at:
  2008 ;;		line 89 in file "Library/Timer0.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;		None
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		None
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;Total ram usage:        0 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_Motor_Step
  2032 ;;		_Timer0_ISR
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text4
  2037  010452                     __ptext4:
  2038                           	opt stack 0
  2039  010452                     _Timer0_Stop:
  2040                           	opt stack 28
  2041                           
  2042                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  2043                           
  2044                           ;incstack = 0
  2045  010452  9AF2               	bcf	intcon,5,c	;volatile
  2046                           
  2047                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  2048  010454  94F2               	bcf	intcon,2,c	;volatile
  2049  010456  0012               	return		;funcret
  2050  010458                     __end_of_Timer0_Stop:
  2051                           	opt stack 0
  2052                           tosu	equ	0xFFF
  2053                           tosh	equ	0xFFE
  2054                           tosl	equ	0xFFD
  2055                           pclatu	equ	0xFFB
  2056                           pclath	equ	0xFFA
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           prodh	equ	0xFF4
  2062                           prodl	equ	0xFF3
  2063                           intcon	equ	0xFF2
  2064                           postinc0	equ	0xFEE
  2065                           fsr0h	equ	0xFEA
  2066                           fsr0l	equ	0xFE9
  2067                           wreg	equ	0xFE8
  2068                           postdec1	equ	0xFE5
  2069                           fsr1h	equ	0xFE2
  2070                           fsr1l	equ	0xFE1
  2071                           indf2	equ	0xFDF
  2072                           postinc2	equ	0xFDE
  2073                           postdec2	equ	0xFDD
  2074                           plusw2	equ	0xFDB
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _Timer0_Restart *****************
  2080 ;; Defined at:
  2081 ;;		line 83 in file "Library/Timer0.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		None
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_Motor_Step
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text5
  2109  01043A                     __ptext5:
  2110                           	opt stack 0
  2111  01043A                     _Timer0_Restart:
  2112                           	opt stack 27
  2113                           
  2114                           ;Timer0.c: 85: TMR0 = COUNTER;
  2115                           
  2116                           ;incstack = 0
  2117  01043A  C008  FFD6         	movff	_COUNTER,4054	;volatile
  2118  01043E  C009  FFD7         	movff	_COUNTER+1,4055	;volatile
  2119                           
  2120                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  2121  010442  8AF2               	bsf	intcon,5,c	;volatile
  2122  010444  0012               	return		;funcret
  2123  010446                     __end_of_Timer0_Restart:
  2124                           	opt stack 0
  2125                           tosu	equ	0xFFF
  2126                           tosh	equ	0xFFE
  2127                           tosl	equ	0xFFD
  2128                           pclatu	equ	0xFFB
  2129                           pclath	equ	0xFFA
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           postinc0	equ	0xFEE
  2138                           fsr0h	equ	0xFEA
  2139                           fsr0l	equ	0xFE9
  2140                           wreg	equ	0xFE8
  2141                           postdec1	equ	0xFE5
  2142                           fsr1h	equ	0xFE2
  2143                           fsr1l	equ	0xFE1
  2144                           indf2	equ	0xFDF
  2145                           postinc2	equ	0xFDE
  2146                           postdec2	equ	0xFDD
  2147                           plusw2	equ	0xFDB
  2148                           fsr2h	equ	0xFDA
  2149                           fsr2l	equ	0xFD9
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function _Port_SetPin *****************
  2153 ;; Defined at:
  2154 ;;		line 247 in file "Library/Port.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  pInput          2   15[COMRAM] const PTR struct Port
  2157 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
  2158 ;;  pPin            1   17[COMRAM] enum E6750
  2159 ;;  pValue          1   18[COMRAM] unsigned char 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  Type            1   19[COMRAM] enum E6795
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;Total ram usage:        5 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    3
  2178 ;; This function calls:
  2179 ;;		_Byte_SetBit
  2180 ;;		_Word_GetPair
  2181 ;; This function is called by:
  2182 ;;		_Motor_Step
  2183 ;;		_Reset_Low
  2184 ;;		_Reset_High
  2185 ;;		_LED_Set
  2186 ;;		_Port_TogglePin
  2187 ;;		_Motor_Init
  2188 ;;		_MXK_Init
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text6
  2193  0101AC                     __ptext6:
  2194                           	opt stack 0
  2195  0101AC                     _Port_SetPin:
  2196                           	opt stack 24
  2197                           
  2198                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
  2199                           
  2200                           ;incstack = 0
  2201  0101AC  0E08               	movlw	8
  2202  0101AE  243B               	addwf	Port_SetPin@pInput,w,c
  2203  0101B0  6E38               	movwf	Word_GetPair@pInput,c
  2204  0101B2  0E00               	movlw	0
  2205  0101B4  203C               	addwfc	Port_SetPin@pInput+1,w,c
  2206  0101B6  6E39               	movwf	Word_GetPair@pInput+1,c
  2207  0101B8  C03D  F03A         	movff	Port_SetPin@pPin,Word_GetPair@pPair
  2208  0101BC  ECC7  F081         	call	_Word_GetPair	;wreg free
  2209  0101C0  6E3F               	movwf	Port_SetPin@Type,c
  2210                           
  2211                           ;Port.c: 250: switch (Type)
  2212  0101C2  D03B               	goto	i2l427
  2213  0101C4                     
  2214                           ;Port.c: 256: pValue &= 1;
  2215  0101C4  0E01               	movlw	1
  2216  0101C6  163E               	andwf	Port_SetPin@pValue,f,c
  2217                           
  2218                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
  2219  0101C8  EE20 F002          	lfsr	2,2
  2220  0101CC  503B               	movf	Port_SetPin@pInput,w,c
  2221  0101CE  26D9               	addwf	fsr2l,f,c
  2222  0101D0  503C               	movf	Port_SetPin@pInput+1,w,c
  2223  0101D2  22DA               	addwfc	fsr2h,f,c
  2224  0101D4  CFDE F02C          	movff	postinc2,Byte_SetBit@pInput
  2225  0101D8  CFDD F02D          	movff	postdec2,Byte_SetBit@pInput+1
  2226  0101DC  C03D  F02E         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  2227  0101E0  C03E  F02F         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  2228  0101E4  EC66  F081         	call	_Byte_SetBit	;wreg free
  2229                           
  2230                           ;Port.c: 258: break;
  2231  0101E8  0012               	return	
  2232  0101EA                     
  2233                           ;Port.c: 261: pValue &= 1;
  2234  0101EA  0E01               	movlw	1
  2235  0101EC  163E               	andwf	Port_SetPin@pValue,f,c
  2236                           
  2237                           ;Port.c: 262: pValue ^= 1;
  2238  0101EE  0E01               	movlw	1
  2239  0101F0  1A3E               	xorwf	Port_SetPin@pValue,f,c
  2240                           
  2241                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
  2242  0101F2  EE20 F002          	lfsr	2,2
  2243  0101F6  503B               	movf	Port_SetPin@pInput,w,c
  2244  0101F8  26D9               	addwf	fsr2l,f,c
  2245  0101FA  503C               	movf	Port_SetPin@pInput+1,w,c
  2246  0101FC  22DA               	addwfc	fsr2h,f,c
  2247  0101FE  CFDE F02C          	movff	postinc2,Byte_SetBit@pInput
  2248  010202  CFDD F02D          	movff	postdec2,Byte_SetBit@pInput+1
  2249  010206  C03D  F02E         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  2250  01020A  C03E  F02F         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  2251  01020E  EC66  F081         	call	_Byte_SetBit	;wreg free
  2252                           
  2253                           ;Port.c: 264: break;
  2254  010212  0012               	return	
  2255  010214                     
  2256                           ;Port.c: 266: pValue &= 1;
  2257  010214  0E01               	movlw	1
  2258  010216  163E               	andwf	Port_SetPin@pValue,f,c
  2259                           
  2260                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
  2261  010218  EE20 F004          	lfsr	2,4
  2262  01021C  503B               	movf	Port_SetPin@pInput,w,c
  2263  01021E  26D9               	addwf	fsr2l,f,c
  2264  010220  503C               	movf	Port_SetPin@pInput+1,w,c
  2265  010222  22DA               	addwfc	fsr2h,f,c
  2266  010224  CFDE F02C          	movff	postinc2,Byte_SetBit@pInput
  2267  010228  CFDD F02D          	movff	postdec2,Byte_SetBit@pInput+1
  2268  01022C  C03D  F02E         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  2269  010230  C03E  F02F         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  2270  010234  EC66  F081         	call	_Byte_SetBit	;wreg free
  2271                           
  2272                           ;Port.c: 269: }
  2273                           
  2274                           ;Port.c: 268: break;
  2275  010238  0012               	return	
  2276  01023A                     i2l427:
  2277  01023A  503F               	movf	Port_SetPin@Type,w,c
  2278                           
  2279                           ; Switch size 1, requested type "space"
  2280                           ; Number of cases is 4, Range of values is 0 to 3
  2281                           ; switch strategies available:
  2282                           ; Name         Instructions Cycles
  2283                           ; simple_byte           13     7 (average)
  2284                           ;	Chosen strategy is simple_byte
  2285  01023C  0A00               	xorlw	0	; case 0
  2286  01023E  B4D8               	btfsc	status,2,c
  2287  010240  0012               	return	
  2288  010242  0A01               	xorlw	1	; case 1
  2289  010244  B4D8               	btfsc	status,2,c
  2290  010246  D7BE               	goto	i2l430
  2291  010248  0A03               	xorlw	3	; case 2
  2292  01024A  B4D8               	btfsc	status,2,c
  2293  01024C  D7CE               	goto	i2l432
  2294  01024E  0A01               	xorlw	1	; case 3
  2295  010250  A4D8               	btfss	status,2,c
  2296  010252  0012               	return	
  2297  010254  D7DF               	goto	i2l433
  2298  010256                     __end_of_Port_SetPin:
  2299                           	opt stack 0
  2300                           tosu	equ	0xFFF
  2301                           tosh	equ	0xFFE
  2302                           tosl	equ	0xFFD
  2303                           pclatu	equ	0xFFB
  2304                           pclath	equ	0xFFA
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           intcon	equ	0xFF2
  2312                           postinc0	equ	0xFEE
  2313                           fsr0h	equ	0xFEA
  2314                           fsr0l	equ	0xFE9
  2315                           wreg	equ	0xFE8
  2316                           postdec1	equ	0xFE5
  2317                           fsr1h	equ	0xFE2
  2318                           fsr1l	equ	0xFE1
  2319                           indf2	equ	0xFDF
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           plusw2	equ	0xFDB
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _Word_GetPair *****************
  2328 ;; Defined at:
  2329 ;;		line 156 in file "Library/Types.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  pInput          2   12[COMRAM] PTR struct Word
  2332 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  2333 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
  2334 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
  2335 ;;		 -> PortC(10), PortF(10), NULL(0), 
  2336 ;;  pPair           1   14[COMRAM] unsigned char 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      unsigned char 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2348 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;Total ram usage:        3 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    2
  2355 ;; This function calls:
  2356 ;;		_Byte_GetPair
  2357 ;; This function is called by:
  2358 ;;		_Port_SetPin
  2359 ;;		_Port_Init
  2360 ;;		_Port_SetPair
  2361 ;;		_Port_SetQuad
  2362 ;;		_Port_Set
  2363 ;;		_PortProperty_Valid
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text7
  2368  01038E                     __ptext7:
  2369                           	opt stack 0
  2370  01038E                     _Word_GetPair:
  2371                           	opt stack 24
  2372                           
  2373                           ;Types.c: 158: if (pPair >= 4)
  2374                           
  2375                           ;incstack = 0
  2376  01038E  0E03               	movlw	3
  2377  010390  643A               	cpfsgt	Word_GetPair@pPair,c
  2378  010392  D00C               	goto	i2l781
  2379                           
  2380                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
  2381  010394  0E01               	movlw	1
  2382  010396  2438               	addwf	Word_GetPair@pInput,w,c
  2383  010398  6E35               	movwf	Byte_GetPair@pInput,c
  2384  01039A  0E00               	movlw	0
  2385  01039C  2039               	addwfc	Word_GetPair@pInput+1,w,c
  2386  01039E  6E36               	movwf	Byte_GetPair@pInput+1,c
  2387  0103A0  503A               	movf	Word_GetPair@pPair,w,c
  2388  0103A2  0FFC               	addlw	252
  2389  0103A4  6E37               	movwf	Byte_GetPair@pPair,c
  2390  0103A6  ECF6  F081         	call	_Byte_GetPair	;wreg free
  2391  0103AA  0012               	return	
  2392  0103AC                     i2l781:
  2393                           
  2394                           ;Types.c: 160: else
  2395                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
  2396  0103AC  C038  F035         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
  2397  0103B0  C039  F036         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
  2398  0103B4  C03A  F037         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
  2399  0103B8  ECF6  F081         	call	_Byte_GetPair	;wreg free
  2400  0103BC  0012               	return	
  2401  0103BE                     __end_of_Word_GetPair:
  2402                           	opt stack 0
  2403                           tosu	equ	0xFFF
  2404                           tosh	equ	0xFFE
  2405                           tosl	equ	0xFFD
  2406                           pclatu	equ	0xFFB
  2407                           pclath	equ	0xFFA
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           prodh	equ	0xFF4
  2413                           prodl	equ	0xFF3
  2414                           intcon	equ	0xFF2
  2415                           postinc0	equ	0xFEE
  2416                           fsr0h	equ	0xFEA
  2417                           fsr0l	equ	0xFE9
  2418                           wreg	equ	0xFE8
  2419                           postdec1	equ	0xFE5
  2420                           fsr1h	equ	0xFE2
  2421                           fsr1l	equ	0xFE1
  2422                           indf2	equ	0xFDF
  2423                           postinc2	equ	0xFDE
  2424                           postdec2	equ	0xFDD
  2425                           plusw2	equ	0xFDB
  2426                           fsr2h	equ	0xFDA
  2427                           fsr2l	equ	0xFD9
  2428                           status	equ	0xFD8
  2429                           
  2430 ;; *************** function _Byte_GetPair *****************
  2431 ;; Defined at:
  2432 ;;		line 87 in file "Library/Types.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  pInput          2    9[COMRAM] PTR struct Byte
  2435 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
  2436 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
  2437 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
  2438 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
  2439 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
  2440 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
  2441 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
  2442 ;;		 -> NULL(0), 
  2443 ;;  pPair           1   11[COMRAM] unsigned char 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      unsigned char 
  2448 ;; Registers used:
  2449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2455 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;Total ram usage:        3 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    1
  2462 ;; This function calls:
  2463 ;;		_Byte_GetZone
  2464 ;; This function is called by:
  2465 ;;		_Word_GetPair
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text8
  2470  0103EC                     __ptext8:
  2471                           	opt stack 0
  2472  0103EC                     _Byte_GetPair:
  2473                           	opt stack 24
  2474                           
  2475                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
  2476                           
  2477                           ;incstack = 0
  2478  0103EC  C035  F02C         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
  2479  0103F0  C036  F02D         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
  2480  0103F4  0E04               	movlw	4
  2481  0103F6  6E2E               	movwf	Byte_GetZone@pMax,c
  2482  0103F8  C037  F02F         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
  2483  0103FC  0E02               	movlw	2
  2484  0103FE  6E30               	movwf	Byte_GetZone@pChunkSize,c
  2485  010400  EC2B  F081         	call	_Byte_GetZone	;wreg free
  2486  010404  0012               	return	
  2487  010406                     __end_of_Byte_GetPair:
  2488                           	opt stack 0
  2489                           tosu	equ	0xFFF
  2490                           tosh	equ	0xFFE
  2491                           tosl	equ	0xFFD
  2492                           pclatu	equ	0xFFB
  2493                           pclath	equ	0xFFA
  2494                           tblptru	equ	0xFF8
  2495                           tblptrh	equ	0xFF7
  2496                           tblptrl	equ	0xFF6
  2497                           tablat	equ	0xFF5
  2498                           prodh	equ	0xFF4
  2499                           prodl	equ	0xFF3
  2500                           intcon	equ	0xFF2
  2501                           postinc0	equ	0xFEE
  2502                           fsr0h	equ	0xFEA
  2503                           fsr0l	equ	0xFE9
  2504                           wreg	equ	0xFE8
  2505                           postdec1	equ	0xFE5
  2506                           fsr1h	equ	0xFE2
  2507                           fsr1l	equ	0xFE1
  2508                           indf2	equ	0xFDF
  2509                           postinc2	equ	0xFDE
  2510                           postdec2	equ	0xFDD
  2511                           plusw2	equ	0xFDB
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _Byte_GetZone *****************
  2517 ;; Defined at:
  2518 ;;		line 64 in file "Library/Types.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  pInput          2    0[COMRAM] PTR struct Byte
  2521 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
  2522 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
  2523 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
  2524 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
  2525 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
  2526 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
  2527 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
  2528 ;;		 -> NULL(0), 
  2529 ;;  pMax            1    2[COMRAM] unsigned char 
  2530 ;;  pChunk          1    3[COMRAM] unsigned char 
  2531 ;;  pChunkSize      1    4[COMRAM] unsigned char 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  Output          1    8[COMRAM] unsigned char 
  2534 ;;  Offset          1    7[COMRAM] unsigned char 
  2535 ;;  MASK            1    6[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      unsigned char 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        9 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_Byte_GetPair
  2555 ;;		_Byte_GetTriple
  2556 ;;		_Byte_GetQuad
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text9
  2561  010256                     __ptext9:
  2562                           	opt stack 0
  2563  010256                     _Byte_GetZone:
  2564                           	opt stack 24
  2565                           
  2566                           ;Types.c: 66: UINT8 Output = pInput->mBits;
  2567                           
  2568                           ;incstack = 0
  2569  010256  C02C  FFF6         	movff	Byte_GetZone@pInput,tblptrl
  2570  01025A  C02D  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
  2571  01025E  0E00               	movlw	low (__mediumconst shr (0+16))
  2572  010260  6EF8               	movwf	tblptru,c
  2573  010262  0E0F               	movlw	(high __ramtop+-1)
  2574  010264  64F7               	cpfsgt	tblptrh,c
  2575  010266  D003               	bra	i2u288_47
  2576  010268  0008               	tblrd		*
  2577  01026A  50F5               	movf	tablat,w,c
  2578  01026C  D005               	bra	i2u288_40
  2579  01026E                     i2u288_47:
  2580  01026E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2581  010272  CFF7 FFEA          	movff	tblptrh,fsr0h
  2582  010276  50EF               	movf	indf0,w,c
  2583  010278                     i2u288_40:
  2584  010278  6E34               	movwf	Byte_GetZone@Output,c
  2585                           
  2586                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
  2587  01027A  5030               	movf	Byte_GetZone@pChunkSize,w,c
  2588  01027C  0D01               	mullw	1
  2589  01027E  0E01               	movlw	low _MASKS
  2590  010280  24F3               	addwf	prodl,w,c
  2591  010282  6EF6               	movwf	tblptrl,c
  2592  010284  0EFE               	movlw	high _MASKS
  2593  010286  20F4               	addwfc	prodh,w,c
  2594  010288  6EF7               	movwf	tblptrh,c
  2595  01028A                     	if	1	;There are 3 active tblptr bytes
  2596  01028A  6AF8               	clrf	tblptru,c
  2597  01028C  0E00               	movlw	low (__mediumconst shr (0+16))
  2598  01028E  22F8               	addwfc	tblptru,f,c
  2599  010290                     	endif
  2600  010290  0008               	tblrd		*
  2601  010292  CFF5 F032          	movff	tablat,Byte_GetZone@MASK
  2602                           
  2603                           ;Types.c: 68: UINT8 Offset = 0;
  2604  010296  0E00               	movlw	0
  2605  010298  6E33               	movwf	Byte_GetZone@Offset,c
  2606                           
  2607                           ;Types.c: 70: while (pChunk >= pMax)
  2608  01029A  D003               	goto	i2l732
  2609  01029C                     
  2610                           ;Types.c: 71: {
  2611                           ;Types.c: 72: pChunk -= pMax;
  2612  01029C  502E               	movf	Byte_GetZone@pMax,w,c
  2613  01029E  5E2F               	subwf	Byte_GetZone@pChunk,f,c
  2614                           
  2615                           ;Types.c: 73: Offset += 1;
  2616  0102A0  2A33               	incf	Byte_GetZone@Offset,f,c
  2617  0102A2                     i2l732:
  2618  0102A2  502E               	movf	Byte_GetZone@pMax,w,c
  2619  0102A4  5C2F               	subwf	Byte_GetZone@pChunk,w,c
  2620  0102A6  B0D8               	btfsc	status,0,c
  2621  0102A8  D7F9               	goto	i2l733
  2622                           
  2623                           ;Types.c: 74: }
  2624                           ;Types.c: 75: pChunk *= pChunkSize;
  2625  0102AA  5030               	movf	Byte_GetZone@pChunkSize,w,c
  2626  0102AC  022F               	mulwf	Byte_GetZone@pChunk,c
  2627  0102AE  50F3               	movf	prodl,w,c
  2628  0102B0  6E2F               	movwf	Byte_GetZone@pChunk,c
  2629                           
  2630                           ;Types.c: 76: pChunk += Offset;
  2631  0102B2  5033               	movf	Byte_GetZone@Offset,w,c
  2632  0102B4  262F               	addwf	Byte_GetZone@pChunk,f,c
  2633                           
  2634                           ;Types.c: 78: Output >>= pChunk;
  2635  0102B6  282F               	incf	Byte_GetZone@pChunk,w,c
  2636  0102B8  6E31               	movwf	??_Byte_GetZone& (0+255),c
  2637  0102BA  D002               	goto	i2u290_40
  2638  0102BC                     i2u290_45:
  2639  0102BC  90D8               	bcf	status,0,c
  2640  0102BE  3234               	rrcf	Byte_GetZone@Output,f,c
  2641  0102C0                     i2u290_40:
  2642  0102C0  2E31               	decfsz	??_Byte_GetZone& (0+255),f,c
  2643  0102C2  D7FC               	goto	i2u290_45
  2644                           
  2645                           ;Types.c: 79: Output &= MASK;
  2646  0102C4  5032               	movf	Byte_GetZone@MASK,w,c
  2647  0102C6  1634               	andwf	Byte_GetZone@Output,f,c
  2648                           
  2649                           ;Types.c: 80: return Output;
  2650  0102C8  5034               	movf	Byte_GetZone@Output,w,c
  2651  0102CA  0012               	return	
  2652  0102CC                     __end_of_Byte_GetZone:
  2653                           	opt stack 0
  2654                           tosu	equ	0xFFF
  2655                           tosh	equ	0xFFE
  2656                           tosl	equ	0xFFD
  2657                           pclatu	equ	0xFFB
  2658                           pclath	equ	0xFFA
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           indf0	equ	0xFEF
  2667                           postinc0	equ	0xFEE
  2668                           fsr0h	equ	0xFEA
  2669                           fsr0l	equ	0xFE9
  2670                           wreg	equ	0xFE8
  2671                           postdec1	equ	0xFE5
  2672                           fsr1h	equ	0xFE2
  2673                           fsr1l	equ	0xFE1
  2674                           indf2	equ	0xFDF
  2675                           postinc2	equ	0xFDE
  2676                           postdec2	equ	0xFDD
  2677                           plusw2	equ	0xFDB
  2678                           fsr2h	equ	0xFDA
  2679                           fsr2l	equ	0xFD9
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function _Byte_SetBit *****************
  2683 ;; Defined at:
  2684 ;;		line 32 in file "Library/Types.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  pInput          2    0[COMRAM] PTR struct Byte
  2687 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
  2688 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
  2689 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  2690 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  2691 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  2692 ;;		 -> NULL(0), 
  2693 ;;  pBit            1    2[COMRAM] unsigned char 
  2694 ;;  pValue          1    3[COMRAM] unsigned char 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2706 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;Total ram usage:        7 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_Port_SetPin
  2716 ;;		_Port_SetPinType
  2717 ;;		_SPI_Init
  2718 ;;		_SPI_MinSpeed
  2719 ;;		_SPI_MaxSpeed
  2720 ;;		_Word_SetBit
  2721 ;;		_I2C_Init
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text10
  2726  0102CC                     __ptext10:
  2727                           	opt stack 0
  2728  0102CC                     _Byte_SetBit:
  2729                           	opt stack 26
  2730                           
  2731                           ;Types.c: 34: pValue &= 1;
  2732                           
  2733                           ;incstack = 0
  2734  0102CC  0E01               	movlw	1
  2735  0102CE  162F               	andwf	Byte_SetBit@pValue,f,c
  2736                           
  2737                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
  2738  0102D0  C02E  F030         	movff	Byte_SetBit@pBit,??_Byte_SetBit
  2739  0102D4  0E01               	movlw	1
  2740  0102D6  6E31               	movwf	(??_Byte_SetBit+1)& (0+255),c
  2741  0102D8  2A30               	incf	??_Byte_SetBit,f,c
  2742  0102DA  D002               	goto	i2u308_44
  2743  0102DC                     i2u308_45:
  2744  0102DC  90D8               	bcf	status,0,c
  2745  0102DE  3631               	rlcf	??_Byte_SetBit+1,f,c
  2746  0102E0                     i2u308_44:
  2747  0102E0  2E30               	decfsz	??_Byte_SetBit,f,c
  2748  0102E2  D7FC               	goto	i2u308_45
  2749  0102E4  5031               	movf	??_Byte_SetBit+1,w,c
  2750  0102E6  0AFF               	xorlw	255
  2751  0102E8  6E32               	movwf	(??_Byte_SetBit+2)& (0+255),c
  2752  0102EA  C02C  FFD9         	movff	Byte_SetBit@pInput,fsr2l
  2753  0102EE  C02D  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
  2754  0102F2  5032               	movf	??_Byte_SetBit+2,w,c
  2755  0102F4  16DF               	andwf	indf2,f,c
  2756                           
  2757                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
  2758  0102F6  C02E  F030         	movff	Byte_SetBit@pBit,??_Byte_SetBit
  2759  0102FA  C02F  F031         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
  2760  0102FE  2A30               	incf	??_Byte_SetBit,f,c
  2761  010300  D002               	goto	i2u309_44
  2762  010302                     i2u309_45:
  2763  010302  90D8               	bcf	status,0,c
  2764  010304  3631               	rlcf	??_Byte_SetBit+1,f,c
  2765  010306                     i2u309_44:
  2766  010306  2E30               	decfsz	??_Byte_SetBit,f,c
  2767  010308  D7FC               	goto	i2u309_45
  2768  01030A  C02C  FFD9         	movff	Byte_SetBit@pInput,fsr2l
  2769  01030E  C02D  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
  2770  010312  5031               	movf	??_Byte_SetBit+1,w,c
  2771  010314  12DF               	iorwf	indf2,f,c
  2772  010316  0012               	return		;funcret
  2773  010318                     __end_of_Byte_SetBit:
  2774                           	opt stack 0
  2775                           tosu	equ	0xFFF
  2776                           tosh	equ	0xFFE
  2777                           tosl	equ	0xFFD
  2778                           pclatu	equ	0xFFB
  2779                           pclath	equ	0xFFA
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           intcon	equ	0xFF2
  2787                           indf0	equ	0xFEF
  2788                           postinc0	equ	0xFEE
  2789                           fsr0h	equ	0xFEA
  2790                           fsr0l	equ	0xFE9
  2791                           wreg	equ	0xFE8
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           plusw2	equ	0xFDB
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _MXK_SwitchTo *****************
  2804 ;; Defined at:
  2805 ;;		line 105 in file "Library/MXK.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  pModule         1    wreg     enum E6927
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  pModule         1    7[COMRAM] enum E6927
  2810 ;;  CUR             1    6[COMRAM] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      unsigned char 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        2 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    1
  2827 ;; This function calls:
  2828 ;;		_delay_us
  2829 ;; This function is called by:
  2830 ;;		_Motor_Step
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text11
  2835  010358                     __ptext11:
  2836                           	opt stack 0
  2837  010358                     _MXK_SwitchTo:
  2838                           	opt stack 26
  2839                           
  2840                           ;incstack = 0
  2841                           ;MXK_SwitchTo@pModule stored from wreg
  2842  010358  6E33               	movwf	MXK_SwitchTo@pModule,c
  2843                           
  2844                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  2845  01035A  5086               	movf	3974,w,c	;volatile
  2846  01035C  0B0F               	andlw	15
  2847  01035E  6E32               	movwf	MXK_SwitchTo@CUR,c
  2848                           
  2849                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  2850  010360  5058               	movf	_Bus_State,w,c
  2851  010362  A4D8               	btfss	status,2,c
  2852  010364  D002               	goto	i2l1730
  2853                           
  2854                           ;MXK.c: 110: return 0;
  2855  010366  0E00               	movlw	0
  2856  010368  0012               	return	
  2857  01036A                     i2l1730:
  2858                           
  2859                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  2860  01036A  0E00               	movlw	0
  2861  01036C  6E58               	movwf	_Bus_State,c
  2862                           
  2863                           ;MXK.c: 114: if (CUR != pModule)
  2864  01036E  5033               	movf	MXK_SwitchTo@pModule,w,c
  2865  010370  1832               	xorwf	MXK_SwitchTo@CUR,w,c
  2866  010372  B4D8               	btfsc	status,2,c
  2867  010374  D00A               	goto	i2l1732
  2868                           
  2869                           ;MXK.c: 115: {
  2870                           ;MXK.c: 116: PORTG &= ~(0xF);
  2871  010376  0EF0               	movlw	240
  2872  010378  1686               	andwf	3974,f,c	;volatile
  2873                           
  2874                           ;MXK.c: 117: PORTG |= pModule;
  2875  01037A  5033               	movf	MXK_SwitchTo@pModule,w,c
  2876  01037C  1286               	iorwf	3974,f,c	;volatile
  2877                           
  2878                           ;MXK.c: 120: delay_us(10);
  2879  01037E  0E00               	movlw	0
  2880  010380  6E2D               	movwf	delay_us@us+1,c
  2881  010382  0E0A               	movlw	10
  2882  010384  6E2C               	movwf	delay_us@us,c
  2883  010386  EC8C  F081         	call	_delay_us	;wreg free
  2884  01038A                     i2l1732:
  2885                           
  2886                           ;MXK.c: 121: }
  2887                           ;MXK.c: 122: return 1;
  2888  01038A  0E01               	movlw	1
  2889  01038C  0012               	return	
  2890  01038E                     __end_of_MXK_SwitchTo:
  2891                           	opt stack 0
  2892                           tosu	equ	0xFFF
  2893                           tosh	equ	0xFFE
  2894                           tosl	equ	0xFFD
  2895                           pclatu	equ	0xFFB
  2896                           pclath	equ	0xFFA
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           prodh	equ	0xFF4
  2902                           prodl	equ	0xFF3
  2903                           intcon	equ	0xFF2
  2904                           indf0	equ	0xFEF
  2905                           postinc0	equ	0xFEE
  2906                           fsr0h	equ	0xFEA
  2907                           fsr0l	equ	0xFE9
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1h	equ	0xFE2
  2911                           fsr1l	equ	0xFE1
  2912                           indf2	equ	0xFDF
  2913                           postinc2	equ	0xFDE
  2914                           postdec2	equ	0xFDD
  2915                           plusw2	equ	0xFDB
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _delay_us *****************
  2921 ;; Defined at:
  2922 ;;		line 255 in file "Library/Types.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  us              2    0[COMRAM] unsigned short 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  u               4    2[COMRAM] unsigned long 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;Total ram usage:        6 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_MXK_SwitchTo
  2946 ;;		_MXK_BlockSwitchTo
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text12
  2951  010318                     __ptext12:
  2952                           	opt stack 0
  2953  010318                     _delay_us:
  2954                           	opt stack 26
  2955                           
  2956                           ;Types.c: 256: unsigned long u;
  2957                           ;Types.c: 257: while (us--) {
  2958                           
  2959                           ;incstack = 0
  2960  010318  D016               	goto	i2u313_40
  2961  01031A                     i2l6727:
  2962                           
  2963                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  2964  01031A  0E00               	movlw	0
  2965  01031C  6E2E               	movwf	delay_us@u,c
  2966  01031E  0E00               	movlw	0
  2967  010320  6E2F               	movwf	delay_us@u+1,c
  2968  010322  0E00               	movlw	0
  2969  010324  6E30               	movwf	delay_us@u+2,c
  2970  010326  0E00               	movlw	0
  2971  010328  6E31               	movwf	delay_us@u+3,c
  2972  01032A                     i2l6729:
  2973  01032A  502E               	movf	delay_us@u,w,c
  2974  01032C  102F               	iorwf	delay_us@u+1,w,c
  2975  01032E  1030               	iorwf	delay_us@u+2,w,c
  2976  010330  1031               	iorwf	delay_us@u+3,w,c
  2977  010332  A4D8               	btfss	status,2,c
  2978  010334  D008               	goto	i2u313_40
  2979  010336  F000               	nop		; ;# 
  2980  010338  0E01               	movlw	1
  2981  01033A  262E               	addwf	delay_us@u,f,c
  2982  01033C  0E00               	movlw	0
  2983  01033E  222F               	addwfc	delay_us@u+1,f,c
  2984  010340  2230               	addwfc	delay_us@u+2,f,c
  2985  010342  2231               	addwfc	delay_us@u+3,f,c
  2986  010344  D7F2               	goto	i2l6729
  2987  010346                     i2u313_40:
  2988  010346  062C               	decf	delay_us@us,f,c
  2989  010348  A0D8               	btfss	status,0,c
  2990  01034A  062D               	decf	delay_us@us+1,f,c
  2991  01034C  282C               	incf	delay_us@us,w,c
  2992  01034E  E1E5               	bnz	i2l6727
  2993  010350  282D               	incf	delay_us@us+1,w,c
  2994  010352  B4D8               	btfsc	status,2,c
  2995  010354  0012               	return	
  2996  010356  D7E1               	goto	i2l832
  2997  010358                     __end_of_delay_us:
  2998                           	opt stack 0
  2999                           tosu	equ	0xFFF
  3000                           tosh	equ	0xFFE
  3001                           tosl	equ	0xFFD
  3002                           pclatu	equ	0xFFB
  3003                           pclath	equ	0xFFA
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           prodh	equ	0xFF4
  3009                           prodl	equ	0xFF3
  3010                           intcon	equ	0xFF2
  3011                           indf0	equ	0xFEF
  3012                           postinc0	equ	0xFEE
  3013                           fsr0h	equ	0xFEA
  3014                           fsr0l	equ	0xFE9
  3015                           wreg	equ	0xFE8
  3016                           postdec1	equ	0xFE5
  3017                           fsr1h	equ	0xFE2
  3018                           fsr1l	equ	0xFE1
  3019                           indf2	equ	0xFDF
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           plusw2	equ	0xFDB
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _MXK_Release *****************
  3028 ;; Defined at:
  3029 ;;		line 130 in file "Library/MXK.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;		None
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;		None
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      unsigned char 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:        0 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_Motor_Step
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text13
  3057  010458                     __ptext13:
  3058                           	opt stack 0
  3059  010458                     _MXK_Release:
  3060                           	opt stack 27
  3061                           
  3062                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  3063                           
  3064                           ;incstack = 0
  3065  010458  0E01               	movlw	1
  3066  01045A  6E58               	movwf	_Bus_State,c
  3067                           
  3068                           ;MXK.c: 135: return 1;
  3069                           ;	Return value of _MXK_Release is never used
  3070  01045C  0012               	return	
  3071  01045E                     __end_of_MXK_Release:
  3072                           	opt stack 0
  3073                           tosu	equ	0xFFF
  3074                           tosh	equ	0xFFE
  3075                           tosl	equ	0xFFD
  3076                           pclatu	equ	0xFFB
  3077                           pclath	equ	0xFFA
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           indf0	equ	0xFEF
  3086                           postinc0	equ	0xFEE
  3087                           fsr0h	equ	0xFEA
  3088                           fsr0l	equ	0xFE9
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           plusw2	equ	0xFDB
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _MXK_Queue *****************
  3102 ;; Defined at:
  3103 ;;		line 144 in file "Library/MXK.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
  3106 ;;		 -> Absolute function(1), Motor_Step(1), 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2, status,0
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:        3 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_Motor_Step
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text14
  3132  01042C                     __ptext14:
  3133                           	opt stack 0
  3134  01042C                     _MXK_Queue:
  3135                           	opt stack 27
  3136                           
  3137                           ;MXK.c: 146: lQueue = pCallback;
  3138                           
  3139                           ;incstack = 0
  3140  01042C  C02C  F001         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  3141  010430  C02D  F002         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  3142  010434  C02E  F003         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  3143  010438  0012               	return		;funcret
  3144  01043A                     __end_of_MXK_Queue:
  3145                           	opt stack 0
  3146                           tosu	equ	0xFFF
  3147                           tosh	equ	0xFFE
  3148                           tosl	equ	0xFFD
  3149                           pclatu	equ	0xFFB
  3150                           pclath	equ	0xFFA
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           prodh	equ	0xFF4
  3156                           prodl	equ	0xFF3
  3157                           intcon	equ	0xFF2
  3158                           indf0	equ	0xFEF
  3159                           postinc0	equ	0xFEE
  3160                           fsr0h	equ	0xFEA
  3161                           fsr0l	equ	0xFE9
  3162                           wreg	equ	0xFE8
  3163                           postdec1	equ	0xFE5
  3164                           fsr1h	equ	0xFE2
  3165                           fsr1l	equ	0xFE1
  3166                           indf2	equ	0xFDF
  3167                           postinc2	equ	0xFDE
  3168                           postdec2	equ	0xFDD
  3169                           plusw2	equ	0xFDB
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           tosu	equ	0xFFF
  3174                           tosh	equ	0xFFE
  3175                           tosl	equ	0xFFD
  3176                           pclatu	equ	0xFFB
  3177                           pclath	equ	0xFFA
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           indf0	equ	0xFEF
  3186                           postinc0	equ	0xFEE
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1h	equ	0xFE2
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           plusw2	equ	0xFDB
  3197                           fsr2h	equ	0xFDA
  3198                           fsr2l	equ	0xFD9
  3199                           status	equ	0xFD8
  3200                           
  3201                           	psect	text15
  3202  000000                     __ptext15:
  3203                           	opt stack 0
  3204                           tosu	equ	0xFFF
  3205                           tosh	equ	0xFFE
  3206                           tosl	equ	0xFFD
  3207                           pclatu	equ	0xFFB
  3208                           pclath	equ	0xFFA
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           intcon	equ	0xFF2
  3216                           indf0	equ	0xFEF
  3217                           postinc0	equ	0xFEE
  3218                           fsr0h	equ	0xFEA
  3219                           fsr0l	equ	0xFE9
  3220                           wreg	equ	0xFE8
  3221                           postdec1	equ	0xFE5
  3222                           fsr1h	equ	0xFE2
  3223                           fsr1l	equ	0xFE1
  3224                           indf2	equ	0xFDF
  3225                           postinc2	equ	0xFDE
  3226                           postdec2	equ	0xFDD
  3227                           plusw2	equ	0xFDB
  3228                           fsr2h	equ	0xFDA
  3229                           fsr2l	equ	0xFD9
  3230                           status	equ	0xFD8
  3231                           
  3232                           	psect	rparam
  3233  0000                     tosu	equ	0xFFF
  3234                           tosh	equ	0xFFE
  3235                           tosl	equ	0xFFD
  3236                           pclatu	equ	0xFFB
  3237                           pclath	equ	0xFFA
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           prodh	equ	0xFF4
  3243                           prodl	equ	0xFF3
  3244                           intcon	equ	0xFF2
  3245                           indf0	equ	0xFEF
  3246                           postinc0	equ	0xFEE
  3247                           fsr0h	equ	0xFEA
  3248                           fsr0l	equ	0xFE9
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           plusw2	equ	0xFDB
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261                           	psect	temp
  3262  00005F                     btemp:
  3263                           	opt stack 0
  3264  00005F                     	ds	1
  3265  0000                     int$flags	set	btemp
  3266  0000                     wtemp6	set	btemp+1
  3267                           tosu	equ	0xFFF
  3268                           tosh	equ	0xFFE
  3269                           tosl	equ	0xFFD
  3270                           pclatu	equ	0xFFB
  3271                           pclath	equ	0xFFA
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           intcon	equ	0xFF2
  3279                           indf0	equ	0xFEF
  3280                           postinc0	equ	0xFEE
  3281                           fsr0h	equ	0xFEA
  3282                           fsr0l	equ	0xFE9
  3283                           wreg	equ	0xFE8
  3284                           postdec1	equ	0xFE5
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           plusw2	equ	0xFDB
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    720
    Data        49
    BSS         798
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      94
    BANK0           160      0     158
    BANK1           256      0     235
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK2[100]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK1[70]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK0[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK0[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK0[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK0[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK0[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->_Motor_Step
    _Motor_Step->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _MXK_SwitchTo->_delay_us

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR_Function                                        18    18      0   26916
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (2) _Timer0_ISR                                           0     0      0   26916
                   Absolute function *
                         _Motor_Step *
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   26916
                                             20 COMRAM     2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   26357
                                             15 COMRAM     5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    7083
                                             12 COMRAM     3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2417
                                              9 COMRAM     3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    1837
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   13779
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     403
                                              6 COMRAM     2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     336
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     156
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
     _Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      EB       7       91.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      5E       1      100.0%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24B      12        0.0%
DATA                 0      0     377       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Sep 25 17:03:53 2017

                              _A 005A                                _a 005B  
                              _i 0018                                _j 0017  
                              _l 005D                                _u 0016  
                              _w 005E                    _HMI_DIPSwitch 000000  
                            _PR2 000FCB                              _val 0006  
                   _Word_GetPair 038E              MXK_SwitchTo@pModule 0033  
                            tosl 000FFD                              wreg 000FE8  
                     _TXSTA1bits 000FAD                  Port_SetPin@Type 003F  
                Port_SetPin@pPin 003D                    ?_Byte_GetPair 0035  
                  ?_Byte_GetZone 002C                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           _LATF 000F8E                             _LATG 000F8F  
                           _PIR1 000F9E                             _PIR2 000FA1  
                           _PIR3 000FA4                             _SPI1 01A0  
                           _SPI2 0090                             _TMR0 000FD6  
                           _gISR 0070                    _iRVirtualWall 008B  
                           _main 045E                             _maze 01D3  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005F                             _zero 005C  
                  ??_Byte_SetBit 0030                             prodh 000FF4  
                           prodl 000FF3                             start 14AA  
                   ___param_bank 000000                  __end_of_Font5x7 FFF1  
                   _BAUDCON1bits 000F7E                            _I2C1T 0025  
                          _I2C2T 00CD                            ?_main 002C  
                _Event_DIPSwitch 000000                            _INDEX 001C  
                          _MASKS FE01                            i2l430 01C4  
                          i2l432 01EA                            i2l433 0214  
                          i2l427 023A                            i2l732 02A2  
                          i2l733 029C                            i2l832 031A  
                          i2l781 03AC                            _PORTA 000F80  
                          _PORTB 000F81                            _PORTC 000F82  
                          _PORTD 000F83                            _PORTE 000F84  
                          _PORTF 000F85                            _PORTG 000F86  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _TRISF 000F97  
                          _TRISG 000F98                            _PortA 01C9  
                          _PortB 00AF                            _PortC 00B9  
                          _PortD 00A5                            _PortE 009B  
                          _PortF 00C3                            _PortG 01BF  
                _ADC_Initialised 001E                   ??_Byte_GetPair 0038  
                 ??_Byte_GetZone 0031                            pclath 000FFA  
                          tablat 000FF5               __size_of_MXK_Queue 000E  
                          plusw2 000FDB                            status 000FD8  
                          wtemp6 0060                       _Event_NULL 000000  
                __initialization 00FE                     __end_of_main 0462  
                   SPI_Send9@dat 0084              __end_of_Byte_SetBit 0318  
               __end_of_InitList FDE1                           ??_main 0000  
                  __activetblptr 000003                Port_SetPin@pInput 003B  
              Port_SetPin@pValue 003E                _MXK_InitDIPSwitch 000000  
              Word_GetPair@pPair 003A                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _ANCON0 000FC1  
                         i2l1630 0064                           i2l1631 00B0  
                         i2l1632 009C                           i2l1730 036A  
                         i2l1627 00EC                           i2l1732 038A  
                         i2l1628 00E2                           i2l1629 007A  
                         i2l1590 145E                           i2l6727 031A  
                         i2l6729 032A                           _RCREG1 000FAF  
                         _RCSTA1 000FAC                   _Timer0_Restart 043A  
                         _SPBRG1 000FB0                           _TXREG1 000FAE  
                         _TXSTA1 000FAD                 __end_of_delay_us 0358  
                  ??_Timer0_Stop 002C                       _Timer0_ISR 03BE  
                         _iRWall 0012                       _Motor_Step 0000  
                         _change 0059                           _lMotor 000A  
                         _lQueue 0001                       _TestButton 01B5  
                   HMI_GRender@a 000E                           clear_0 0166  
                         clear_1 0178                           clear_2 0184  
                         clear_3 0190                           clear_4 019C  
                     _iRDistance 0082                __end_of_MXK_Queue 043A  
     __end_ofHMI_SetButton@F7213 FE0E                       _iRBumpLeft 0089  
                     _iRBumpDrop 0013                       _iRDropLeft 0087  
                   __pdataCOMRAM 0054                     __mediumconst FD2E  
    __end_ofTimer2_Init@PRESCALE FE11                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                  ??_Port_SetPin 003F            Console_MakeField@Fill 0120  
         __end_of_Timer0_Restart 0446                     ?_MXK_Release 002C  
                     __accesstop 0060          __end_of__initialization 01A2  
                  ___rparam_used 000001                      _Byte_SetBit 02CC  
                  __end_of_MASKS FE0A                   _PortA_Property FFFD  
                 __pcstackCOMRAM 002C                   _PortB_Property FFFB  
                   __pidataBANK0 041E                     __pidataBANK1 0406  
           __end_of_Byte_GetPair 0406              Timer0_Init@PRESCALE FDE1  
           __end_of_Byte_GetZone 02CC                   _PortC_Property FFF9  
            __end_of_Timer0_Stop 0458                   _HMI_LeftSwitch 000000  
                 _PortD_Property FFF7                   _HMI_DownSwitch 000000  
                 _PortE_Property FFF5                   _PortF_Property FFF3  
                ?_Timer0_Restart 002C                   _PortG_Property FFF1  
                     __pbssBANK0 0060                       __pbssBANK1 0100  
                     __pbssBANK2 0200              __end_of_Port_SetPin 0256  
         __end_of_PortA_Property FFFF                    ?_ISR_Function 002C  
         __end_of_PortB_Property FFFD                      ?_Timer0_ISR 002C  
                    ?_Motor_Step 002C           __end_of_PortC_Property FFFB  
             Word_GetPair@pInput 0038           __end_of_PortD_Property FFF9  
                        _ADC_AN0 00E3                          _ADC_AN1 00DE  
                        _ADC_AN2 00D9                          _ADC_AN3 00D4  
         __end_of_PortE_Property FFF7              Console_Render@F6956 00F0  
                        _COUNTER 0008           __end_of_PortF_Property FFF5  
                    _gBackcolour 0010                        _I2C1_Done 007F  
                      _I2C2_Done 007C                        _I2C1_More 0079  
                      _I2C2_More 0076                        ?_delay_us 002C  
                        _SSP1ADD 000FC8                          _SSP1BUF 000FC9  
                        _SSP2BUF 000F6F           __end_of_PortG_Property FFF3  
                 ??_ISR_Function 0042                Event_TestButton@j 0015  
                        _Font5x7 FE11                  Byte_SetBit@pBit 002E  
                        __Hparam 0000                          __Lparam 0000  
                    _Timer0_Stop 0452                          OutSeg@a 001F  
__end_ofPortProperty_Valid@F6830 FE01                          _iRAngle 011E  
                        _gCursor 0054                          _lBuffer 0264  
                        __pcinit 00FE                          __ramtop 1000  
                        __ptext0 045E                          __ptext2 03BE  
                        __ptext3 0000                          __ptext4 0452  
                        __ptext5 043A                          __ptext6 01AC  
                        __ptext7 038E                          __ptext8 03EC  
                        __ptext9 0256                        _T0CONbits 000FD5  
                      _T2CONbits 000FCA              LCD_DrawRectangle@p2 00EC  
            LCD_DrawRectangle@p4 00E8                       ??_delay_us 002E  
                      _DIPSwitch 01AB              __size_of_Timer0_ISR 002E  
                    _Port_SetPin 01AC                      _iRBumpRight 008A  
            __size_of_Motor_Step 00FE                      _iRDropRight 0088  
           end_of_initialization 01A2                       delay_us@us 002C  
           __size_of_MXK_Release 0006            __size_of_Byte_GetPair 001A  
          __size_of_Byte_GetZone 0076                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                      _gForecolour 00FC  
                      _PORTFbits 000F85                 Byte_GetZone@MASK 0032  
                      _MXK_Queue 042C                 Byte_GetZone@pMax 002E  
                      _TRISCbits 000F94                     _Byte_GetPair 03EC  
             HMI_SetButton@F7213 FE0A                     _Byte_GetZone 0256  
                  ?_MXK_SwitchTo 002C                 _Event_TestButton 000000  
                   ?_Byte_SetBit 002C                    __pidataCOMRAM 0446  
                      _Bus_State 0058             __end_of_ISR_Function 14AA  
                  ?_Word_GetPair 0038                 ??_Timer0_Restart 002C  
            start_initialization 00FE                       ?_MXK_Queue 002C  
              Byte_SetBit@pInput 002C                   ??_MXK_SwitchTo 0032  
              Byte_SetBit@pValue 002F                     _HMI_UpSwitch 000000  
                   ??_Timer0_ISR 0042                  _HMI_InitButtons 000000  
                      _gCharSize 00F8                 Timer2_Init@INDEX 001A  
                      OutSeg@cur 0021                     ??_Motor_Step 0040  
                      _iRAngleSS 0060                        _iRCliffFL 008E  
                      _iRCliffFR 008D                      __pdataBANK0 00F0  
                    __pdataBANK1 01D3                        _gLineSize 00F4  
                 ??_Word_GetPair 003B                      __pbssBIGRAM 0264  
                    __pbssCOMRAM 0001                    __pcstackBANK0 0000  
             __end_of_Timer0_ISR 03EC                __size_of_delay_us 0040  
             __end_of_Motor_Step 00FE               _MXK_InitTestButton 000000  
                   ?_Timer0_Stop 002C                    _lStepFunction 0073  
                      __pintcode 1408                    __pmediumconst FD2E  
                      _pShiftVal 0004      __end_ofTimer0_Init@PRESCALE FDF1  
                    ??_MXK_Queue 002F                     ?_Port_SetPin 003B  
                _HMI_RightSwitch 000000               Byte_GetPair@pInput 0035  
                       _HMIBoard 0166                        delay_us@u 002E  
             MXK_Queue@pCallback 002C                         _IPR1bits 000F9F  
                       _IPR3bits 000FA5                         _PIE1bits 000F9D  
                       _PIE3bits 000FA3                         i2u313_40 0346  
                       i2u308_44 02E0                         i2u308_45 02DC  
                       i2u309_44 0306                         i2u309_45 0302  
                       _PIR1bits 000F9E                         i2u290_40 02C0  
                       i2u290_45 02BC                         i2u460_48 03D6  
                       _PIR3bits 000FA4                         i2u382_40 0042  
                       i2u383_40 0056                         i2u288_40 0278  
                       i2u384_40 008E                         i2u288_47 026E  
           __size_of_Byte_SetBit 004C                         _RCONbits 000FD0  
                       _SSP1CON1 000FC6                         _SSP1CON2 000FC5  
                       _SSP2CON1 000F6C                         _SSP2CON2 000F6B  
          __size_of_ISR_Function 00A2                         _SSP1STAT 000FC7  
                       _SSP2STAT 000F6D             __end_of_MXK_SwitchTo 038E  
                MXK_SwitchTo@CUR 0032                       _ADCON0bits 000FC2  
                     _ADCON1bits 000FC1                    _MXK_DIPSwitch 000000  
        PortProperty_Valid@F6830 FDF1                        copy_data0 0112  
                      copy_data1 0132                        copy_data2 0152  
                  ??_MXK_Release 002C                         _InitList FD2F  
                   _ISR_Function 1408             __end_of_Word_GetPair 03BE  
                       _lCBuffer 0100                         __Hrparam 0000  
                       __Lrparam 0000                         _iRCliffL 008F  
                       _iRCliffR 008C                     OutSeg@segset 0020  
                      rand@screw 001D                         _lBufferX 0023  
                       _lBufferY 0022              Timer2_Init@PRESCALE FE0E  
                       _lCurrent 000C           Byte_GetZone@pChunkSize 0030  
                       _delay_us 0318                         _clearall 0024  
                       __ptext10 02CC                         __ptext11 0358  
                       __ptext12 0318                         __ptext13 0458  
                       __ptext14 042C                         __ptext15 0000  
                   _SSP1CON1bits 000FC6                     _SSP1CON2bits 000FC5  
                   _SSP2CON1bits 000F6C                     _SSP2CON2bits 000F6B  
                  __size_of_main 0004                Byte_GetPair@pPair 0037  
            __end_of_MXK_Release 045E                   _MXK_TestButton 000000  
                   _iRDistanceSS 0064                         int$flags 005F  
           __size_of_Timer0_Stop 0006                     _iRDropCaster 0086  
                   _SSP1STATbits 000FC7                   Timer0_Init@DIV 006C  
                 Timer0_Init@PRE 001B                     _SSP2STATbits 000F6D  
                    _OSCTUNEbits 000F9B                       _INTCONbits 000FF2  
                 Timer2_Init@DIV 0068                   Timer2_Init@PRE 0019  
           __size_of_Port_SetPin 00AA                         intlevel2 0000  
                  _iRScriptIndex 0014                    _iRScriptStack 0200  
          __size_of_MXK_SwitchTo 0036                      _MXK_Release 0458  
                   _MXK_SwitchTo 0358            __size_of_Word_GetPair 0030  
             Byte_GetZone@Offset 0033          __size_of_Timer0_Restart 000C  
             Byte_GetZone@Output 0034               Byte_GetZone@pChunk 002F  
             Byte_GetZone@pInput 002C  
